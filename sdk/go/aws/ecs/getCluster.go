// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create an Elastic Container Service (ECS) cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	var rv LookupClusterResult
	err := ctx.Invoke("aws-native:ecs:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	// A user-generated string that you use to identify your cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.
	ClusterName string `pulumi:"clusterName"`
}

type LookupClusterResult struct {
	// The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster.
	Arn                             *string                               `pulumi:"arn"`
	CapacityProviders               []string                              `pulumi:"capacityProviders"`
	ClusterSettings                 []ClusterSettings                     `pulumi:"clusterSettings"`
	Configuration                   *ClusterConfiguration                 `pulumi:"configuration"`
	DefaultCapacityProviderStrategy []ClusterCapacityProviderStrategyItem `pulumi:"defaultCapacityProviderStrategy"`
	Tags                            []ClusterTag                          `pulumi:"tags"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	// A user-generated string that you use to identify your cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster.
func (o LookupClusterResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupClusterResultOutput) CapacityProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.CapacityProviders }).(pulumi.StringArrayOutput)
}

func (o LookupClusterResultOutput) ClusterSettings() ClusterSettingsArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterSettings { return v.ClusterSettings }).(ClusterSettingsArrayOutput)
}

func (o LookupClusterResultOutput) Configuration() ClusterConfigurationPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterConfiguration { return v.Configuration }).(ClusterConfigurationPtrOutput)
}

func (o LookupClusterResultOutput) DefaultCapacityProviderStrategy() ClusterCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterCapacityProviderStrategyItem {
		return v.DefaultCapacityProviderStrategy
	}).(ClusterCapacityProviderStrategyItemArrayOutput)
}

func (o LookupClusterResultOutput) Tags() ClusterTagArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterTag { return v.Tags }).(ClusterTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
