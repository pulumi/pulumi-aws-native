// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ECS::CapacityProvider.
func LookupCapacityProvider(ctx *pulumi.Context, args *LookupCapacityProviderArgs, opts ...pulumi.InvokeOption) (*LookupCapacityProviderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCapacityProviderResult
	err := ctx.Invoke("aws-native:ecs:getCapacityProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCapacityProviderArgs struct {
	// The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
	Name string `pulumi:"name"`
}

type LookupCapacityProviderResult struct {
	// The Auto Scaling group settings for the capacity provider.
	AutoScalingGroupProvider *CapacityProviderAutoScalingGroupProvider `pulumi:"autoScalingGroupProvider"`
	// The configuration for the Amazon ECS Managed Instances provider. This includes the infrastructure role, the launch template configuration, and tag propagation settings.
	ManagedInstancesProvider *CapacityProviderManagedInstancesProvider `pulumi:"managedInstancesProvider"`
	// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
	//
	// The following basic restrictions apply to tags:
	//
	// - Maximum number of tags per resource - 50
	// - For each resource, each tag key must be unique, and each tag key can have only one value.
	// - Maximum key length - 128 Unicode characters in UTF-8
	// - Maximum value length - 256 Unicode characters in UTF-8
	// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	// - Tag keys and values are case-sensitive.
	// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupCapacityProviderOutput(ctx *pulumi.Context, args LookupCapacityProviderOutputArgs, opts ...pulumi.InvokeOption) LookupCapacityProviderResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCapacityProviderResultOutput, error) {
			args := v.(LookupCapacityProviderArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ecs:getCapacityProvider", args, LookupCapacityProviderResultOutput{}, options).(LookupCapacityProviderResultOutput), nil
		}).(LookupCapacityProviderResultOutput)
}

type LookupCapacityProviderOutputArgs struct {
	// The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupCapacityProviderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCapacityProviderArgs)(nil)).Elem()
}

type LookupCapacityProviderResultOutput struct{ *pulumi.OutputState }

func (LookupCapacityProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCapacityProviderResult)(nil)).Elem()
}

func (o LookupCapacityProviderResultOutput) ToLookupCapacityProviderResultOutput() LookupCapacityProviderResultOutput {
	return o
}

func (o LookupCapacityProviderResultOutput) ToLookupCapacityProviderResultOutputWithContext(ctx context.Context) LookupCapacityProviderResultOutput {
	return o
}

// The Auto Scaling group settings for the capacity provider.
func (o LookupCapacityProviderResultOutput) AutoScalingGroupProvider() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o.ApplyT(func(v LookupCapacityProviderResult) *CapacityProviderAutoScalingGroupProvider {
		return v.AutoScalingGroupProvider
	}).(CapacityProviderAutoScalingGroupProviderPtrOutput)
}

// The configuration for the Amazon ECS Managed Instances provider. This includes the infrastructure role, the launch template configuration, and tag propagation settings.
func (o LookupCapacityProviderResultOutput) ManagedInstancesProvider() CapacityProviderManagedInstancesProviderPtrOutput {
	return o.ApplyT(func(v LookupCapacityProviderResult) *CapacityProviderManagedInstancesProvider {
		return v.ManagedInstancesProvider
	}).(CapacityProviderManagedInstancesProviderPtrOutput)
}

// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
//
// The following basic restrictions apply to tags:
//
// - Maximum number of tags per resource - 50
// - For each resource, each tag key must be unique, and each tag key can have only one value.
// - Maximum key length - 128 Unicode characters in UTF-8
// - Maximum value length - 256 Unicode characters in UTF-8
// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
// - Tag keys and values are case-sensitive.
// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
func (o LookupCapacityProviderResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupCapacityProviderResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCapacityProviderResultOutput{})
}
