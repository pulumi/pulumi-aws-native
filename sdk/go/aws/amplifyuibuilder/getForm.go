// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::AmplifyUIBuilder::Form Resource Type
func LookupForm(ctx *pulumi.Context, args *LookupFormArgs, opts ...pulumi.InvokeOption) (*LookupFormResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFormResult
	err := ctx.Invoke("aws-native:amplifyuibuilder:getForm", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFormArgs struct {
	// The unique ID of the Amplify app associated with the form.
	AppId string `pulumi:"appId"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName string `pulumi:"environmentName"`
	// The ID for the form.
	Id string `pulumi:"id"`
}

type LookupFormResult struct {
	// The `FormCTA` object that stores the call to action configuration for the form.
	Cta *FormCta `pulumi:"cta"`
	// The type of data source to use to create the form.
	DataType *FormDataTypeConfig `pulumi:"dataType"`
	// The configuration information for the form's fields.
	Fields map[string]FormFieldConfig `pulumi:"fields"`
	// Specifies whether to perform a create or update action on the form.
	FormActionType *FormActionType `pulumi:"formActionType"`
	// The ID for the form.
	Id *string `pulumi:"id"`
	// Specifies an icon or decoration to display on the form.
	LabelDecorator *FormLabelDecorator `pulumi:"labelDecorator"`
	// The name of the form.
	Name *string `pulumi:"name"`
	// The schema version of the form.
	SchemaVersion *string `pulumi:"schemaVersion"`
	// The configuration information for the visual helper elements for the form. These elements are not associated with any data.
	SectionalElements map[string]FormSectionalElement `pulumi:"sectionalElements"`
	// The configuration for the form's style.
	Style *FormStyle `pulumi:"style"`
	// One or more key-value pairs to use when tagging the form data.
	Tags map[string]string `pulumi:"tags"`
}

func LookupFormOutput(ctx *pulumi.Context, args LookupFormOutputArgs, opts ...pulumi.InvokeOption) LookupFormResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFormResultOutput, error) {
			args := v.(LookupFormArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupFormResult
			secret, err := ctx.InvokePackageRaw("aws-native:amplifyuibuilder:getForm", args, &rv, "", opts...)
			if err != nil {
				return LookupFormResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupFormResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupFormResultOutput), nil
			}
			return output, nil
		}).(LookupFormResultOutput)
}

type LookupFormOutputArgs struct {
	// The unique ID of the Amplify app associated with the form.
	AppId pulumi.StringInput `pulumi:"appId"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
	// The ID for the form.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupFormOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFormArgs)(nil)).Elem()
}

type LookupFormResultOutput struct{ *pulumi.OutputState }

func (LookupFormResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFormResult)(nil)).Elem()
}

func (o LookupFormResultOutput) ToLookupFormResultOutput() LookupFormResultOutput {
	return o
}

func (o LookupFormResultOutput) ToLookupFormResultOutputWithContext(ctx context.Context) LookupFormResultOutput {
	return o
}

// The `FormCTA` object that stores the call to action configuration for the form.
func (o LookupFormResultOutput) Cta() FormCtaPtrOutput {
	return o.ApplyT(func(v LookupFormResult) *FormCta { return v.Cta }).(FormCtaPtrOutput)
}

// The type of data source to use to create the form.
func (o LookupFormResultOutput) DataType() FormDataTypeConfigPtrOutput {
	return o.ApplyT(func(v LookupFormResult) *FormDataTypeConfig { return v.DataType }).(FormDataTypeConfigPtrOutput)
}

// The configuration information for the form's fields.
func (o LookupFormResultOutput) Fields() FormFieldConfigMapOutput {
	return o.ApplyT(func(v LookupFormResult) map[string]FormFieldConfig { return v.Fields }).(FormFieldConfigMapOutput)
}

// Specifies whether to perform a create or update action on the form.
func (o LookupFormResultOutput) FormActionType() FormActionTypePtrOutput {
	return o.ApplyT(func(v LookupFormResult) *FormActionType { return v.FormActionType }).(FormActionTypePtrOutput)
}

// The ID for the form.
func (o LookupFormResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFormResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies an icon or decoration to display on the form.
func (o LookupFormResultOutput) LabelDecorator() FormLabelDecoratorPtrOutput {
	return o.ApplyT(func(v LookupFormResult) *FormLabelDecorator { return v.LabelDecorator }).(FormLabelDecoratorPtrOutput)
}

// The name of the form.
func (o LookupFormResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFormResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The schema version of the form.
func (o LookupFormResultOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFormResult) *string { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

// The configuration information for the visual helper elements for the form. These elements are not associated with any data.
func (o LookupFormResultOutput) SectionalElements() FormSectionalElementMapOutput {
	return o.ApplyT(func(v LookupFormResult) map[string]FormSectionalElement { return v.SectionalElements }).(FormSectionalElementMapOutput)
}

// The configuration for the form's style.
func (o LookupFormResultOutput) Style() FormStylePtrOutput {
	return o.ApplyT(func(v LookupFormResult) *FormStyle { return v.Style }).(FormStylePtrOutput)
}

// One or more key-value pairs to use when tagging the form data.
func (o LookupFormResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupFormResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFormResultOutput{})
}
