// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::AmplifyUIBuilder::Theme Resource Type
func LookupTheme(ctx *pulumi.Context, args *LookupThemeArgs, opts ...pulumi.InvokeOption) (*LookupThemeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupThemeResult
	err := ctx.Invoke("aws-native:amplifyuibuilder:getTheme", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupThemeArgs struct {
	// The unique ID for the Amplify app associated with the theme.
	AppId string `pulumi:"appId"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName string `pulumi:"environmentName"`
	// The ID for the theme.
	Id string `pulumi:"id"`
}

type LookupThemeResult struct {
	// The time that the theme was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID for the theme.
	Id *string `pulumi:"id"`
	// The time that the theme was modified.
	ModifiedAt *string `pulumi:"modifiedAt"`
	// The name of the theme.
	Name *string `pulumi:"name"`
	// Describes the properties that can be overriden to customize a theme.
	Overrides []ThemeValues `pulumi:"overrides"`
	// One or more key-value pairs to use when tagging the theme.
	Tags map[string]string `pulumi:"tags"`
	// A list of key-value pairs that defines the properties of the theme.
	Values []ThemeValues `pulumi:"values"`
}

func LookupThemeOutput(ctx *pulumi.Context, args LookupThemeOutputArgs, opts ...pulumi.InvokeOption) LookupThemeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupThemeResultOutput, error) {
			args := v.(LookupThemeArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupThemeResult
			secret, err := ctx.InvokePackageRaw("aws-native:amplifyuibuilder:getTheme", args, &rv, "", opts...)
			if err != nil {
				return LookupThemeResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupThemeResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupThemeResultOutput), nil
			}
			return output, nil
		}).(LookupThemeResultOutput)
}

type LookupThemeOutputArgs struct {
	// The unique ID for the Amplify app associated with the theme.
	AppId pulumi.StringInput `pulumi:"appId"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
	// The ID for the theme.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupThemeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThemeArgs)(nil)).Elem()
}

type LookupThemeResultOutput struct{ *pulumi.OutputState }

func (LookupThemeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupThemeResult)(nil)).Elem()
}

func (o LookupThemeResultOutput) ToLookupThemeResultOutput() LookupThemeResultOutput {
	return o
}

func (o LookupThemeResultOutput) ToLookupThemeResultOutputWithContext(ctx context.Context) LookupThemeResultOutput {
	return o
}

// The time that the theme was created.
func (o LookupThemeResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The ID for the theme.
func (o LookupThemeResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The time that the theme was modified.
func (o LookupThemeResultOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

// The name of the theme.
func (o LookupThemeResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupThemeResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the properties that can be overriden to customize a theme.
func (o LookupThemeResultOutput) Overrides() ThemeValuesArrayOutput {
	return o.ApplyT(func(v LookupThemeResult) []ThemeValues { return v.Overrides }).(ThemeValuesArrayOutput)
}

// One or more key-value pairs to use when tagging the theme.
func (o LookupThemeResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupThemeResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A list of key-value pairs that defines the properties of the theme.
func (o LookupThemeResultOutput) Values() ThemeValuesArrayOutput {
	return o.ApplyT(func(v LookupThemeResult) []ThemeValues { return v.Values }).(ThemeValuesArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupThemeResultOutput{})
}
