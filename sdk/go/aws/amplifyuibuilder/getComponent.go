// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::AmplifyUIBuilder::Component Resource Type
func LookupComponent(ctx *pulumi.Context, args *LookupComponentArgs, opts ...pulumi.InvokeOption) (*LookupComponentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupComponentResult
	err := ctx.Invoke("aws-native:amplifyuibuilder:getComponent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupComponentArgs struct {
	// The unique ID of the Amplify app associated with the component.
	AppId string `pulumi:"appId"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName string `pulumi:"environmentName"`
	// The unique ID of the component.
	Id string `pulumi:"id"`
}

type LookupComponentResult struct {
	// The information to connect a component's properties to data at runtime. You can't specify `tags` as a valid property for `bindingProperties` .
	BindingProperties map[string]ComponentBindingPropertiesValue `pulumi:"bindingProperties"`
	// A list of the component's `ComponentChild` instances.
	Children []ComponentChild `pulumi:"children"`
	// The data binding configuration for the component's properties. Use this for a collection component. You can't specify `tags` as a valid property for `collectionProperties` .
	CollectionProperties map[string]ComponentDataConfiguration `pulumi:"collectionProperties"`
	// The type of the component. This can be an Amplify custom UI component or another custom component.
	ComponentType *string `pulumi:"componentType"`
	// The time that the component was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
	Events map[string]ComponentEvent `pulumi:"events"`
	// The unique ID of the component.
	Id *string `pulumi:"id"`
	// The time that the component was modified.
	ModifiedAt *string `pulumi:"modifiedAt"`
	// The name of the component.
	Name *string `pulumi:"name"`
	// Describes the component's properties that can be overriden in a customized instance of the component. You can't specify `tags` as a valid property for `overrides` .
	Overrides map[string]interface{} `pulumi:"overrides"`
	// Describes the component's properties. You can't specify `tags` as a valid property for `properties` .
	Properties map[string]ComponentProperty `pulumi:"properties"`
	// The schema version of the component when it was imported.
	SchemaVersion *string `pulumi:"schemaVersion"`
	// The unique ID of the component in its original source system, such as Figma.
	SourceId *string `pulumi:"sourceId"`
	// One or more key-value pairs to use when tagging the component.
	Tags map[string]string `pulumi:"tags"`
	// A list of the component's variants. A variant is a unique style configuration of a main component.
	Variants []ComponentVariant `pulumi:"variants"`
}

func LookupComponentOutput(ctx *pulumi.Context, args LookupComponentOutputArgs, opts ...pulumi.InvokeOption) LookupComponentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupComponentResultOutput, error) {
			args := v.(LookupComponentArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupComponentResult
			secret, err := ctx.InvokePackageRaw("aws-native:amplifyuibuilder:getComponent", args, &rv, "", opts...)
			if err != nil {
				return LookupComponentResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupComponentResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupComponentResultOutput), nil
			}
			return output, nil
		}).(LookupComponentResultOutput)
}

type LookupComponentOutputArgs struct {
	// The unique ID of the Amplify app associated with the component.
	AppId pulumi.StringInput `pulumi:"appId"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
	// The unique ID of the component.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupComponentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComponentArgs)(nil)).Elem()
}

type LookupComponentResultOutput struct{ *pulumi.OutputState }

func (LookupComponentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupComponentResult)(nil)).Elem()
}

func (o LookupComponentResultOutput) ToLookupComponentResultOutput() LookupComponentResultOutput {
	return o
}

func (o LookupComponentResultOutput) ToLookupComponentResultOutputWithContext(ctx context.Context) LookupComponentResultOutput {
	return o
}

// The information to connect a component's properties to data at runtime. You can't specify `tags` as a valid property for `bindingProperties` .
func (o LookupComponentResultOutput) BindingProperties() ComponentBindingPropertiesValueMapOutput {
	return o.ApplyT(func(v LookupComponentResult) map[string]ComponentBindingPropertiesValue { return v.BindingProperties }).(ComponentBindingPropertiesValueMapOutput)
}

// A list of the component's `ComponentChild` instances.
func (o LookupComponentResultOutput) Children() ComponentChildArrayOutput {
	return o.ApplyT(func(v LookupComponentResult) []ComponentChild { return v.Children }).(ComponentChildArrayOutput)
}

// The data binding configuration for the component's properties. Use this for a collection component. You can't specify `tags` as a valid property for `collectionProperties` .
func (o LookupComponentResultOutput) CollectionProperties() ComponentDataConfigurationMapOutput {
	return o.ApplyT(func(v LookupComponentResult) map[string]ComponentDataConfiguration { return v.CollectionProperties }).(ComponentDataConfigurationMapOutput)
}

// The type of the component. This can be an Amplify custom UI component or another custom component.
func (o LookupComponentResultOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComponentResult) *string { return v.ComponentType }).(pulumi.StringPtrOutput)
}

// The time that the component was created.
func (o LookupComponentResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComponentResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
func (o LookupComponentResultOutput) Events() ComponentEventMapOutput {
	return o.ApplyT(func(v LookupComponentResult) map[string]ComponentEvent { return v.Events }).(ComponentEventMapOutput)
}

// The unique ID of the component.
func (o LookupComponentResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComponentResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The time that the component was modified.
func (o LookupComponentResultOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComponentResult) *string { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

// The name of the component.
func (o LookupComponentResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComponentResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the component's properties that can be overriden in a customized instance of the component. You can't specify `tags` as a valid property for `overrides` .
func (o LookupComponentResultOutput) Overrides() pulumi.MapOutput {
	return o.ApplyT(func(v LookupComponentResult) map[string]interface{} { return v.Overrides }).(pulumi.MapOutput)
}

// Describes the component's properties. You can't specify `tags` as a valid property for `properties` .
func (o LookupComponentResultOutput) Properties() ComponentPropertyMapOutput {
	return o.ApplyT(func(v LookupComponentResult) map[string]ComponentProperty { return v.Properties }).(ComponentPropertyMapOutput)
}

// The schema version of the component when it was imported.
func (o LookupComponentResultOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComponentResult) *string { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

// The unique ID of the component in its original source system, such as Figma.
func (o LookupComponentResultOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupComponentResult) *string { return v.SourceId }).(pulumi.StringPtrOutput)
}

// One or more key-value pairs to use when tagging the component.
func (o LookupComponentResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupComponentResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A list of the component's variants. A variant is a unique style configuration of a main component.
func (o LookupComponentResultOutput) Variants() ComponentVariantArrayOutput {
	return o.ApplyT(func(v LookupComponentResult) []ComponentVariant { return v.Variants }).(ComponentVariantArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupComponentResultOutput{})
}
