// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::AmplifyUIBuilder::Theme Resource Type
type Theme struct {
	pulumi.CustomResourceState

	// The unique ID for the Amplify app associated with the theme.
	AppId pulumi.StringPtrOutput `pulumi:"appId"`
	// The ID for the theme.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The time that the theme was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName pulumi.StringPtrOutput `pulumi:"environmentName"`
	// The time that the theme was modified.
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	// The name of the theme.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Describes the properties that can be overriden to customize a theme.
	Overrides ThemeValuesArrayOutput `pulumi:"overrides"`
	// One or more key-value pairs to use when tagging the theme.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A list of key-value pairs that defines the properties of the theme.
	Values ThemeValuesArrayOutput `pulumi:"values"`
}

// NewTheme registers a new resource with the given unique name, arguments, and options.
func NewTheme(ctx *pulumi.Context,
	name string, args *ThemeArgs, opts ...pulumi.ResourceOption) (*Theme, error) {
	if args == nil {
		args = &ThemeArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"appId",
		"environmentName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Theme
	err := ctx.RegisterResource("aws-native:amplifyuibuilder:Theme", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTheme gets an existing Theme resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTheme(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThemeState, opts ...pulumi.ResourceOption) (*Theme, error) {
	var resource Theme
	err := ctx.ReadResource("aws-native:amplifyuibuilder:Theme", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Theme resources.
type themeState struct {
}

type ThemeState struct {
}

func (ThemeState) ElementType() reflect.Type {
	return reflect.TypeOf((*themeState)(nil)).Elem()
}

type themeArgs struct {
	// The unique ID for the Amplify app associated with the theme.
	AppId *string `pulumi:"appId"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName *string `pulumi:"environmentName"`
	// The name of the theme.
	Name *string `pulumi:"name"`
	// Describes the properties that can be overriden to customize a theme.
	Overrides []ThemeValues `pulumi:"overrides"`
	// One or more key-value pairs to use when tagging the theme.
	Tags map[string]string `pulumi:"tags"`
	// A list of key-value pairs that defines the properties of the theme.
	Values []ThemeValues `pulumi:"values"`
}

// The set of arguments for constructing a Theme resource.
type ThemeArgs struct {
	// The unique ID for the Amplify app associated with the theme.
	AppId pulumi.StringPtrInput
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName pulumi.StringPtrInput
	// The name of the theme.
	Name pulumi.StringPtrInput
	// Describes the properties that can be overriden to customize a theme.
	Overrides ThemeValuesArrayInput
	// One or more key-value pairs to use when tagging the theme.
	Tags pulumi.StringMapInput
	// A list of key-value pairs that defines the properties of the theme.
	Values ThemeValuesArrayInput
}

func (ThemeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*themeArgs)(nil)).Elem()
}

type ThemeInput interface {
	pulumi.Input

	ToThemeOutput() ThemeOutput
	ToThemeOutputWithContext(ctx context.Context) ThemeOutput
}

func (*Theme) ElementType() reflect.Type {
	return reflect.TypeOf((**Theme)(nil)).Elem()
}

func (i *Theme) ToThemeOutput() ThemeOutput {
	return i.ToThemeOutputWithContext(context.Background())
}

func (i *Theme) ToThemeOutputWithContext(ctx context.Context) ThemeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeOutput)
}

type ThemeOutput struct{ *pulumi.OutputState }

func (ThemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Theme)(nil)).Elem()
}

func (o ThemeOutput) ToThemeOutput() ThemeOutput {
	return o
}

func (o ThemeOutput) ToThemeOutputWithContext(ctx context.Context) ThemeOutput {
	return o
}

// The unique ID for the Amplify app associated with the theme.
func (o ThemeOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringPtrOutput { return v.AppId }).(pulumi.StringPtrOutput)
}

// The ID for the theme.
func (o ThemeOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The time that the theme was created.
func (o ThemeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the backend environment that is a part of the Amplify app.
func (o ThemeOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringPtrOutput { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

// The time that the theme was modified.
func (o ThemeOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

// The name of the theme.
func (o ThemeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the properties that can be overriden to customize a theme.
func (o ThemeOutput) Overrides() ThemeValuesArrayOutput {
	return o.ApplyT(func(v *Theme) ThemeValuesArrayOutput { return v.Overrides }).(ThemeValuesArrayOutput)
}

// One or more key-value pairs to use when tagging the theme.
func (o ThemeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A list of key-value pairs that defines the properties of the theme.
func (o ThemeOutput) Values() ThemeValuesArrayOutput {
	return o.ApplyT(func(v *Theme) ThemeValuesArrayOutput { return v.Values }).(ThemeValuesArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeInput)(nil)).Elem(), &Theme{})
	pulumi.RegisterOutputType(ThemeOutput{})
}
