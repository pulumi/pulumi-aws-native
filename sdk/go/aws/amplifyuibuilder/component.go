// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::AmplifyUIBuilder::Component Resource Type
type Component struct {
	pulumi.CustomResourceState

	// The unique ID of the Amplify app associated with the component.
	AppId pulumi.StringPtrOutput `pulumi:"appId"`
	// The unique ID of the component.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The information to connect a component's properties to data at runtime. You can't specify `tags` as a valid property for `bindingProperties` .
	BindingProperties ComponentBindingPropertiesValueMapOutput `pulumi:"bindingProperties"`
	// A list of the component's `ComponentChild` instances.
	Children ComponentChildArrayOutput `pulumi:"children"`
	// The data binding configuration for the component's properties. Use this for a collection component. You can't specify `tags` as a valid property for `collectionProperties` .
	CollectionProperties ComponentDataConfigurationMapOutput `pulumi:"collectionProperties"`
	// The type of the component. This can be an Amplify custom UI component or another custom component.
	ComponentType pulumi.StringPtrOutput `pulumi:"componentType"`
	// The time that the component was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName pulumi.StringPtrOutput `pulumi:"environmentName"`
	// Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
	Events ComponentEventMapOutput `pulumi:"events"`
	// The time that the component was modified.
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	// The name of the component.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Describes the component's properties that can be overriden in a customized instance of the component. You can't specify `tags` as a valid property for `overrides` .
	Overrides pulumi.MapOutput `pulumi:"overrides"`
	// Describes the component's properties. You can't specify `tags` as a valid property for `properties` .
	Properties ComponentPropertyMapOutput `pulumi:"properties"`
	// The schema version of the component when it was imported.
	SchemaVersion pulumi.StringPtrOutput `pulumi:"schemaVersion"`
	// The unique ID of the component in its original source system, such as Figma.
	SourceId pulumi.StringPtrOutput `pulumi:"sourceId"`
	// One or more key-value pairs to use when tagging the component.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A list of the component's variants. A variant is a unique style configuration of a main component.
	Variants ComponentVariantArrayOutput `pulumi:"variants"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		args = &ComponentArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"appId",
		"environmentName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Component
	err := ctx.RegisterResource("aws-native:amplifyuibuilder:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponent gets an existing Component resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentState, opts ...pulumi.ResourceOption) (*Component, error) {
	var resource Component
	err := ctx.ReadResource("aws-native:amplifyuibuilder:Component", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Component resources.
type componentState struct {
}

type ComponentState struct {
}

func (ComponentState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentState)(nil)).Elem()
}

type componentArgs struct {
	// The unique ID of the Amplify app associated with the component.
	AppId *string `pulumi:"appId"`
	// The information to connect a component's properties to data at runtime. You can't specify `tags` as a valid property for `bindingProperties` .
	BindingProperties map[string]ComponentBindingPropertiesValue `pulumi:"bindingProperties"`
	// A list of the component's `ComponentChild` instances.
	Children []ComponentChild `pulumi:"children"`
	// The data binding configuration for the component's properties. Use this for a collection component. You can't specify `tags` as a valid property for `collectionProperties` .
	CollectionProperties map[string]ComponentDataConfiguration `pulumi:"collectionProperties"`
	// The type of the component. This can be an Amplify custom UI component or another custom component.
	ComponentType *string `pulumi:"componentType"`
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName *string `pulumi:"environmentName"`
	// Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
	Events map[string]ComponentEvent `pulumi:"events"`
	// The name of the component.
	Name *string `pulumi:"name"`
	// Describes the component's properties that can be overriden in a customized instance of the component. You can't specify `tags` as a valid property for `overrides` .
	Overrides map[string]interface{} `pulumi:"overrides"`
	// Describes the component's properties. You can't specify `tags` as a valid property for `properties` .
	Properties map[string]ComponentProperty `pulumi:"properties"`
	// The schema version of the component when it was imported.
	SchemaVersion *string `pulumi:"schemaVersion"`
	// The unique ID of the component in its original source system, such as Figma.
	SourceId *string `pulumi:"sourceId"`
	// One or more key-value pairs to use when tagging the component.
	Tags map[string]string `pulumi:"tags"`
	// A list of the component's variants. A variant is a unique style configuration of a main component.
	Variants []ComponentVariant `pulumi:"variants"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	// The unique ID of the Amplify app associated with the component.
	AppId pulumi.StringPtrInput
	// The information to connect a component's properties to data at runtime. You can't specify `tags` as a valid property for `bindingProperties` .
	BindingProperties ComponentBindingPropertiesValueMapInput
	// A list of the component's `ComponentChild` instances.
	Children ComponentChildArrayInput
	// The data binding configuration for the component's properties. Use this for a collection component. You can't specify `tags` as a valid property for `collectionProperties` .
	CollectionProperties ComponentDataConfigurationMapInput
	// The type of the component. This can be an Amplify custom UI component or another custom component.
	ComponentType pulumi.StringPtrInput
	// The name of the backend environment that is a part of the Amplify app.
	EnvironmentName pulumi.StringPtrInput
	// Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
	Events ComponentEventMapInput
	// The name of the component.
	Name pulumi.StringPtrInput
	// Describes the component's properties that can be overriden in a customized instance of the component. You can't specify `tags` as a valid property for `overrides` .
	Overrides pulumi.MapInput
	// Describes the component's properties. You can't specify `tags` as a valid property for `properties` .
	Properties ComponentPropertyMapInput
	// The schema version of the component when it was imported.
	SchemaVersion pulumi.StringPtrInput
	// The unique ID of the component in its original source system, such as Figma.
	SourceId pulumi.StringPtrInput
	// One or more key-value pairs to use when tagging the component.
	Tags pulumi.StringMapInput
	// A list of the component's variants. A variant is a unique style configuration of a main component.
	Variants ComponentVariantArrayInput
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

// The unique ID of the Amplify app associated with the component.
func (o ComponentOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.AppId }).(pulumi.StringPtrOutput)
}

// The unique ID of the component.
func (o ComponentOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The information to connect a component's properties to data at runtime. You can't specify `tags` as a valid property for `bindingProperties` .
func (o ComponentOutput) BindingProperties() ComponentBindingPropertiesValueMapOutput {
	return o.ApplyT(func(v *Component) ComponentBindingPropertiesValueMapOutput { return v.BindingProperties }).(ComponentBindingPropertiesValueMapOutput)
}

// A list of the component's `ComponentChild` instances.
func (o ComponentOutput) Children() ComponentChildArrayOutput {
	return o.ApplyT(func(v *Component) ComponentChildArrayOutput { return v.Children }).(ComponentChildArrayOutput)
}

// The data binding configuration for the component's properties. Use this for a collection component. You can't specify `tags` as a valid property for `collectionProperties` .
func (o ComponentOutput) CollectionProperties() ComponentDataConfigurationMapOutput {
	return o.ApplyT(func(v *Component) ComponentDataConfigurationMapOutput { return v.CollectionProperties }).(ComponentDataConfigurationMapOutput)
}

// The type of the component. This can be an Amplify custom UI component or another custom component.
func (o ComponentOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.ComponentType }).(pulumi.StringPtrOutput)
}

// The time that the component was created.
func (o ComponentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the backend environment that is a part of the Amplify app.
func (o ComponentOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

// Describes the events that can be raised on the component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
func (o ComponentOutput) Events() ComponentEventMapOutput {
	return o.ApplyT(func(v *Component) ComponentEventMapOutput { return v.Events }).(ComponentEventMapOutput)
}

// The time that the component was modified.
func (o ComponentOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

// The name of the component.
func (o ComponentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the component's properties that can be overriden in a customized instance of the component. You can't specify `tags` as a valid property for `overrides` .
func (o ComponentOutput) Overrides() pulumi.MapOutput {
	return o.ApplyT(func(v *Component) pulumi.MapOutput { return v.Overrides }).(pulumi.MapOutput)
}

// Describes the component's properties. You can't specify `tags` as a valid property for `properties` .
func (o ComponentOutput) Properties() ComponentPropertyMapOutput {
	return o.ApplyT(func(v *Component) ComponentPropertyMapOutput { return v.Properties }).(ComponentPropertyMapOutput)
}

// The schema version of the component when it was imported.
func (o ComponentOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

// The unique ID of the component in its original source system, such as Figma.
func (o ComponentOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.SourceId }).(pulumi.StringPtrOutput)
}

// One or more key-value pairs to use when tagging the component.
func (o ComponentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Component) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A list of the component's variants. A variant is a unique style configuration of a main component.
func (o ComponentOutput) Variants() ComponentVariantArrayOutput {
	return o.ApplyT(func(v *Component) ComponentVariantArrayOutput { return v.Variants }).(ComponentVariantArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterOutputType(ComponentOutput{})
}
