// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::AmplifyUIBuilder::Component Resource Type
type Component struct {
	pulumi.CustomResourceState

	AppId                pulumi.StringPtrOutput                 `pulumi:"appId"`
	BindingProperties    ComponentBindingPropertiesPtrOutput    `pulumi:"bindingProperties"`
	Children             ComponentChildArrayOutput              `pulumi:"children"`
	CollectionProperties ComponentCollectionPropertiesPtrOutput `pulumi:"collectionProperties"`
	ComponentType        pulumi.StringPtrOutput                 `pulumi:"componentType"`
	CreatedAt            pulumi.StringOutput                    `pulumi:"createdAt"`
	EnvironmentName      pulumi.StringPtrOutput                 `pulumi:"environmentName"`
	Events               ComponentEventsPtrOutput               `pulumi:"events"`
	ModifiedAt           pulumi.StringOutput                    `pulumi:"modifiedAt"`
	Name                 pulumi.StringPtrOutput                 `pulumi:"name"`
	Overrides            ComponentOverridesPtrOutput            `pulumi:"overrides"`
	Properties           ComponentPropertiesPtrOutput           `pulumi:"properties"`
	SchemaVersion        pulumi.StringPtrOutput                 `pulumi:"schemaVersion"`
	SourceId             pulumi.StringPtrOutput                 `pulumi:"sourceId"`
	Tags                 ComponentTagsPtrOutput                 `pulumi:"tags"`
	Variants             ComponentVariantArrayOutput            `pulumi:"variants"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		args = &ComponentArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"appId",
		"environmentName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Component
	err := ctx.RegisterResource("aws-native:amplifyuibuilder:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponent gets an existing Component resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentState, opts ...pulumi.ResourceOption) (*Component, error) {
	var resource Component
	err := ctx.ReadResource("aws-native:amplifyuibuilder:Component", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Component resources.
type componentState struct {
}

type ComponentState struct {
}

func (ComponentState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentState)(nil)).Elem()
}

type componentArgs struct {
	AppId                *string                        `pulumi:"appId"`
	BindingProperties    *ComponentBindingProperties    `pulumi:"bindingProperties"`
	Children             []ComponentChild               `pulumi:"children"`
	CollectionProperties *ComponentCollectionProperties `pulumi:"collectionProperties"`
	ComponentType        *string                        `pulumi:"componentType"`
	EnvironmentName      *string                        `pulumi:"environmentName"`
	Events               *ComponentEvents               `pulumi:"events"`
	Name                 *string                        `pulumi:"name"`
	Overrides            *ComponentOverrides            `pulumi:"overrides"`
	Properties           *ComponentProperties           `pulumi:"properties"`
	SchemaVersion        *string                        `pulumi:"schemaVersion"`
	SourceId             *string                        `pulumi:"sourceId"`
	Tags                 *ComponentTags                 `pulumi:"tags"`
	Variants             []ComponentVariant             `pulumi:"variants"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	AppId                pulumi.StringPtrInput
	BindingProperties    ComponentBindingPropertiesPtrInput
	Children             ComponentChildArrayInput
	CollectionProperties ComponentCollectionPropertiesPtrInput
	ComponentType        pulumi.StringPtrInput
	EnvironmentName      pulumi.StringPtrInput
	Events               ComponentEventsPtrInput
	Name                 pulumi.StringPtrInput
	Overrides            ComponentOverridesPtrInput
	Properties           ComponentPropertiesPtrInput
	SchemaVersion        pulumi.StringPtrInput
	SourceId             pulumi.StringPtrInput
	Tags                 ComponentTagsPtrInput
	Variants             ComponentVariantArrayInput
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

func (o ComponentOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.AppId }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) BindingProperties() ComponentBindingPropertiesPtrOutput {
	return o.ApplyT(func(v *Component) ComponentBindingPropertiesPtrOutput { return v.BindingProperties }).(ComponentBindingPropertiesPtrOutput)
}

func (o ComponentOutput) Children() ComponentChildArrayOutput {
	return o.ApplyT(func(v *Component) ComponentChildArrayOutput { return v.Children }).(ComponentChildArrayOutput)
}

func (o ComponentOutput) CollectionProperties() ComponentCollectionPropertiesPtrOutput {
	return o.ApplyT(func(v *Component) ComponentCollectionPropertiesPtrOutput { return v.CollectionProperties }).(ComponentCollectionPropertiesPtrOutput)
}

func (o ComponentOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.ComponentType }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ComponentOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) Events() ComponentEventsPtrOutput {
	return o.ApplyT(func(v *Component) ComponentEventsPtrOutput { return v.Events }).(ComponentEventsPtrOutput)
}

func (o ComponentOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o ComponentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) Overrides() ComponentOverridesPtrOutput {
	return o.ApplyT(func(v *Component) ComponentOverridesPtrOutput { return v.Overrides }).(ComponentOverridesPtrOutput)
}

func (o ComponentOutput) Properties() ComponentPropertiesPtrOutput {
	return o.ApplyT(func(v *Component) ComponentPropertiesPtrOutput { return v.Properties }).(ComponentPropertiesPtrOutput)
}

func (o ComponentOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.SourceId }).(pulumi.StringPtrOutput)
}

func (o ComponentOutput) Tags() ComponentTagsPtrOutput {
	return o.ApplyT(func(v *Component) ComponentTagsPtrOutput { return v.Tags }).(ComponentTagsPtrOutput)
}

func (o ComponentOutput) Variants() ComponentVariantArrayOutput {
	return o.ApplyT(func(v *Component) ComponentVariantArrayOutput { return v.Variants }).(ComponentVariantArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterOutputType(ComponentOutput{})
}
