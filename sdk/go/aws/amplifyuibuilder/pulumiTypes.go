// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ComponentBindingProperties struct {
}

// ComponentBindingPropertiesInput is an input type that accepts ComponentBindingPropertiesArgs and ComponentBindingPropertiesOutput values.
// You can construct a concrete instance of `ComponentBindingPropertiesInput` via:
//
//	ComponentBindingPropertiesArgs{...}
type ComponentBindingPropertiesInput interface {
	pulumi.Input

	ToComponentBindingPropertiesOutput() ComponentBindingPropertiesOutput
	ToComponentBindingPropertiesOutputWithContext(context.Context) ComponentBindingPropertiesOutput
}

type ComponentBindingPropertiesArgs struct {
}

func (ComponentBindingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingProperties)(nil)).Elem()
}

func (i ComponentBindingPropertiesArgs) ToComponentBindingPropertiesOutput() ComponentBindingPropertiesOutput {
	return i.ToComponentBindingPropertiesOutputWithContext(context.Background())
}

func (i ComponentBindingPropertiesArgs) ToComponentBindingPropertiesOutputWithContext(ctx context.Context) ComponentBindingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesOutput)
}

type ComponentBindingPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingProperties)(nil)).Elem()
}

func (o ComponentBindingPropertiesOutput) ToComponentBindingPropertiesOutput() ComponentBindingPropertiesOutput {
	return o
}

func (o ComponentBindingPropertiesOutput) ToComponentBindingPropertiesOutputWithContext(ctx context.Context) ComponentBindingPropertiesOutput {
	return o
}

type ComponentBindingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentBindingProperties)(nil)).Elem()
}

func (o ComponentBindingPropertiesPtrOutput) ToComponentBindingPropertiesPtrOutput() ComponentBindingPropertiesPtrOutput {
	return o
}

func (o ComponentBindingPropertiesPtrOutput) ToComponentBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesPtrOutput {
	return o
}

func (o ComponentBindingPropertiesPtrOutput) Elem() ComponentBindingPropertiesOutput {
	return o.ApplyT(func(v *ComponentBindingProperties) ComponentBindingProperties {
		if v != nil {
			return *v
		}
		var ret ComponentBindingProperties
		return ret
	}).(ComponentBindingPropertiesOutput)
}

type ComponentChild struct {
	Children      []ComponentChild    `pulumi:"children"`
	ComponentType string              `pulumi:"componentType"`
	Events        *ComponentEvents    `pulumi:"events"`
	Name          string              `pulumi:"name"`
	Properties    ComponentProperties `pulumi:"properties"`
}

// ComponentChildInput is an input type that accepts ComponentChildArgs and ComponentChildOutput values.
// You can construct a concrete instance of `ComponentChildInput` via:
//
//	ComponentChildArgs{...}
type ComponentChildInput interface {
	pulumi.Input

	ToComponentChildOutput() ComponentChildOutput
	ToComponentChildOutputWithContext(context.Context) ComponentChildOutput
}

type ComponentChildArgs struct {
	Children      ComponentChildArrayInput `pulumi:"children"`
	ComponentType pulumi.StringInput       `pulumi:"componentType"`
	Events        ComponentEventsPtrInput  `pulumi:"events"`
	Name          pulumi.StringInput       `pulumi:"name"`
	Properties    ComponentPropertiesInput `pulumi:"properties"`
}

func (ComponentChildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentChild)(nil)).Elem()
}

func (i ComponentChildArgs) ToComponentChildOutput() ComponentChildOutput {
	return i.ToComponentChildOutputWithContext(context.Background())
}

func (i ComponentChildArgs) ToComponentChildOutputWithContext(ctx context.Context) ComponentChildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentChildOutput)
}

// ComponentChildArrayInput is an input type that accepts ComponentChildArray and ComponentChildArrayOutput values.
// You can construct a concrete instance of `ComponentChildArrayInput` via:
//
//	ComponentChildArray{ ComponentChildArgs{...} }
type ComponentChildArrayInput interface {
	pulumi.Input

	ToComponentChildArrayOutput() ComponentChildArrayOutput
	ToComponentChildArrayOutputWithContext(context.Context) ComponentChildArrayOutput
}

type ComponentChildArray []ComponentChildInput

func (ComponentChildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentChild)(nil)).Elem()
}

func (i ComponentChildArray) ToComponentChildArrayOutput() ComponentChildArrayOutput {
	return i.ToComponentChildArrayOutputWithContext(context.Background())
}

func (i ComponentChildArray) ToComponentChildArrayOutputWithContext(ctx context.Context) ComponentChildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentChildArrayOutput)
}

type ComponentChildOutput struct{ *pulumi.OutputState }

func (ComponentChildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentChild)(nil)).Elem()
}

func (o ComponentChildOutput) ToComponentChildOutput() ComponentChildOutput {
	return o
}

func (o ComponentChildOutput) ToComponentChildOutputWithContext(ctx context.Context) ComponentChildOutput {
	return o
}

func (o ComponentChildOutput) Children() ComponentChildArrayOutput {
	return o.ApplyT(func(v ComponentChild) []ComponentChild { return v.Children }).(ComponentChildArrayOutput)
}

func (o ComponentChildOutput) ComponentType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentChild) string { return v.ComponentType }).(pulumi.StringOutput)
}

func (o ComponentChildOutput) Events() ComponentEventsPtrOutput {
	return o.ApplyT(func(v ComponentChild) *ComponentEvents { return v.Events }).(ComponentEventsPtrOutput)
}

func (o ComponentChildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentChild) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentChildOutput) Properties() ComponentPropertiesOutput {
	return o.ApplyT(func(v ComponentChild) ComponentProperties { return v.Properties }).(ComponentPropertiesOutput)
}

type ComponentChildArrayOutput struct{ *pulumi.OutputState }

func (ComponentChildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentChild)(nil)).Elem()
}

func (o ComponentChildArrayOutput) ToComponentChildArrayOutput() ComponentChildArrayOutput {
	return o
}

func (o ComponentChildArrayOutput) ToComponentChildArrayOutputWithContext(ctx context.Context) ComponentChildArrayOutput {
	return o
}

func (o ComponentChildArrayOutput) Index(i pulumi.IntInput) ComponentChildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentChild {
		return vs[0].([]ComponentChild)[vs[1].(int)]
	}).(ComponentChildOutput)
}

type ComponentCollectionProperties struct {
}

// ComponentCollectionPropertiesInput is an input type that accepts ComponentCollectionPropertiesArgs and ComponentCollectionPropertiesOutput values.
// You can construct a concrete instance of `ComponentCollectionPropertiesInput` via:
//
//	ComponentCollectionPropertiesArgs{...}
type ComponentCollectionPropertiesInput interface {
	pulumi.Input

	ToComponentCollectionPropertiesOutput() ComponentCollectionPropertiesOutput
	ToComponentCollectionPropertiesOutputWithContext(context.Context) ComponentCollectionPropertiesOutput
}

type ComponentCollectionPropertiesArgs struct {
}

func (ComponentCollectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentCollectionProperties)(nil)).Elem()
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesOutput() ComponentCollectionPropertiesOutput {
	return i.ToComponentCollectionPropertiesOutputWithContext(context.Background())
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesOutputWithContext(ctx context.Context) ComponentCollectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentCollectionPropertiesOutput)
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return i.ToComponentCollectionPropertiesPtrOutputWithContext(context.Background())
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentCollectionPropertiesOutput).ToComponentCollectionPropertiesPtrOutputWithContext(ctx)
}

// ComponentCollectionPropertiesPtrInput is an input type that accepts ComponentCollectionPropertiesArgs, ComponentCollectionPropertiesPtr and ComponentCollectionPropertiesPtrOutput values.
// You can construct a concrete instance of `ComponentCollectionPropertiesPtrInput` via:
//
//	        ComponentCollectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type ComponentCollectionPropertiesPtrInput interface {
	pulumi.Input

	ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput
	ToComponentCollectionPropertiesPtrOutputWithContext(context.Context) ComponentCollectionPropertiesPtrOutput
}

type componentCollectionPropertiesPtrType ComponentCollectionPropertiesArgs

func ComponentCollectionPropertiesPtr(v *ComponentCollectionPropertiesArgs) ComponentCollectionPropertiesPtrInput {
	return (*componentCollectionPropertiesPtrType)(v)
}

func (*componentCollectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentCollectionProperties)(nil)).Elem()
}

func (i *componentCollectionPropertiesPtrType) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return i.ToComponentCollectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *componentCollectionPropertiesPtrType) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentCollectionPropertiesPtrOutput)
}

type ComponentCollectionPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentCollectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentCollectionProperties)(nil)).Elem()
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesOutput() ComponentCollectionPropertiesOutput {
	return o
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesOutputWithContext(ctx context.Context) ComponentCollectionPropertiesOutput {
	return o
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return o.ToComponentCollectionPropertiesPtrOutputWithContext(context.Background())
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentCollectionProperties) *ComponentCollectionProperties {
		return &v
	}).(ComponentCollectionPropertiesPtrOutput)
}

type ComponentCollectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentCollectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentCollectionProperties)(nil)).Elem()
}

func (o ComponentCollectionPropertiesPtrOutput) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return o
}

func (o ComponentCollectionPropertiesPtrOutput) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return o
}

func (o ComponentCollectionPropertiesPtrOutput) Elem() ComponentCollectionPropertiesOutput {
	return o.ApplyT(func(v *ComponentCollectionProperties) ComponentCollectionProperties {
		if v != nil {
			return *v
		}
		var ret ComponentCollectionProperties
		return ret
	}).(ComponentCollectionPropertiesOutput)
}

type ComponentEvents struct {
}

// ComponentEventsInput is an input type that accepts ComponentEventsArgs and ComponentEventsOutput values.
// You can construct a concrete instance of `ComponentEventsInput` via:
//
//	ComponentEventsArgs{...}
type ComponentEventsInput interface {
	pulumi.Input

	ToComponentEventsOutput() ComponentEventsOutput
	ToComponentEventsOutputWithContext(context.Context) ComponentEventsOutput
}

type ComponentEventsArgs struct {
}

func (ComponentEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentEvents)(nil)).Elem()
}

func (i ComponentEventsArgs) ToComponentEventsOutput() ComponentEventsOutput {
	return i.ToComponentEventsOutputWithContext(context.Background())
}

func (i ComponentEventsArgs) ToComponentEventsOutputWithContext(ctx context.Context) ComponentEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentEventsOutput)
}

func (i ComponentEventsArgs) ToComponentEventsPtrOutput() ComponentEventsPtrOutput {
	return i.ToComponentEventsPtrOutputWithContext(context.Background())
}

func (i ComponentEventsArgs) ToComponentEventsPtrOutputWithContext(ctx context.Context) ComponentEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentEventsOutput).ToComponentEventsPtrOutputWithContext(ctx)
}

// ComponentEventsPtrInput is an input type that accepts ComponentEventsArgs, ComponentEventsPtr and ComponentEventsPtrOutput values.
// You can construct a concrete instance of `ComponentEventsPtrInput` via:
//
//	        ComponentEventsArgs{...}
//
//	or:
//
//	        nil
type ComponentEventsPtrInput interface {
	pulumi.Input

	ToComponentEventsPtrOutput() ComponentEventsPtrOutput
	ToComponentEventsPtrOutputWithContext(context.Context) ComponentEventsPtrOutput
}

type componentEventsPtrType ComponentEventsArgs

func ComponentEventsPtr(v *ComponentEventsArgs) ComponentEventsPtrInput {
	return (*componentEventsPtrType)(v)
}

func (*componentEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentEvents)(nil)).Elem()
}

func (i *componentEventsPtrType) ToComponentEventsPtrOutput() ComponentEventsPtrOutput {
	return i.ToComponentEventsPtrOutputWithContext(context.Background())
}

func (i *componentEventsPtrType) ToComponentEventsPtrOutputWithContext(ctx context.Context) ComponentEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentEventsPtrOutput)
}

type ComponentEventsOutput struct{ *pulumi.OutputState }

func (ComponentEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentEvents)(nil)).Elem()
}

func (o ComponentEventsOutput) ToComponentEventsOutput() ComponentEventsOutput {
	return o
}

func (o ComponentEventsOutput) ToComponentEventsOutputWithContext(ctx context.Context) ComponentEventsOutput {
	return o
}

func (o ComponentEventsOutput) ToComponentEventsPtrOutput() ComponentEventsPtrOutput {
	return o.ToComponentEventsPtrOutputWithContext(context.Background())
}

func (o ComponentEventsOutput) ToComponentEventsPtrOutputWithContext(ctx context.Context) ComponentEventsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentEvents) *ComponentEvents {
		return &v
	}).(ComponentEventsPtrOutput)
}

type ComponentEventsPtrOutput struct{ *pulumi.OutputState }

func (ComponentEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentEvents)(nil)).Elem()
}

func (o ComponentEventsPtrOutput) ToComponentEventsPtrOutput() ComponentEventsPtrOutput {
	return o
}

func (o ComponentEventsPtrOutput) ToComponentEventsPtrOutputWithContext(ctx context.Context) ComponentEventsPtrOutput {
	return o
}

func (o ComponentEventsPtrOutput) Elem() ComponentEventsOutput {
	return o.ApplyT(func(v *ComponentEvents) ComponentEvents {
		if v != nil {
			return *v
		}
		var ret ComponentEvents
		return ret
	}).(ComponentEventsOutput)
}

type ComponentOverrides struct {
}

// ComponentOverridesInput is an input type that accepts ComponentOverridesArgs and ComponentOverridesOutput values.
// You can construct a concrete instance of `ComponentOverridesInput` via:
//
//	ComponentOverridesArgs{...}
type ComponentOverridesInput interface {
	pulumi.Input

	ToComponentOverridesOutput() ComponentOverridesOutput
	ToComponentOverridesOutputWithContext(context.Context) ComponentOverridesOutput
}

type ComponentOverridesArgs struct {
}

func (ComponentOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentOverrides)(nil)).Elem()
}

func (i ComponentOverridesArgs) ToComponentOverridesOutput() ComponentOverridesOutput {
	return i.ToComponentOverridesOutputWithContext(context.Background())
}

func (i ComponentOverridesArgs) ToComponentOverridesOutputWithContext(ctx context.Context) ComponentOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOverridesOutput)
}

func (i ComponentOverridesArgs) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return i.ToComponentOverridesPtrOutputWithContext(context.Background())
}

func (i ComponentOverridesArgs) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOverridesOutput).ToComponentOverridesPtrOutputWithContext(ctx)
}

// ComponentOverridesPtrInput is an input type that accepts ComponentOverridesArgs, ComponentOverridesPtr and ComponentOverridesPtrOutput values.
// You can construct a concrete instance of `ComponentOverridesPtrInput` via:
//
//	        ComponentOverridesArgs{...}
//
//	or:
//
//	        nil
type ComponentOverridesPtrInput interface {
	pulumi.Input

	ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput
	ToComponentOverridesPtrOutputWithContext(context.Context) ComponentOverridesPtrOutput
}

type componentOverridesPtrType ComponentOverridesArgs

func ComponentOverridesPtr(v *ComponentOverridesArgs) ComponentOverridesPtrInput {
	return (*componentOverridesPtrType)(v)
}

func (*componentOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentOverrides)(nil)).Elem()
}

func (i *componentOverridesPtrType) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return i.ToComponentOverridesPtrOutputWithContext(context.Background())
}

func (i *componentOverridesPtrType) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOverridesPtrOutput)
}

type ComponentOverridesOutput struct{ *pulumi.OutputState }

func (ComponentOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentOverrides)(nil)).Elem()
}

func (o ComponentOverridesOutput) ToComponentOverridesOutput() ComponentOverridesOutput {
	return o
}

func (o ComponentOverridesOutput) ToComponentOverridesOutputWithContext(ctx context.Context) ComponentOverridesOutput {
	return o
}

func (o ComponentOverridesOutput) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return o.ToComponentOverridesPtrOutputWithContext(context.Background())
}

func (o ComponentOverridesOutput) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentOverrides) *ComponentOverrides {
		return &v
	}).(ComponentOverridesPtrOutput)
}

type ComponentOverridesPtrOutput struct{ *pulumi.OutputState }

func (ComponentOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentOverrides)(nil)).Elem()
}

func (o ComponentOverridesPtrOutput) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return o
}

func (o ComponentOverridesPtrOutput) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return o
}

func (o ComponentOverridesPtrOutput) Elem() ComponentOverridesOutput {
	return o.ApplyT(func(v *ComponentOverrides) ComponentOverrides {
		if v != nil {
			return *v
		}
		var ret ComponentOverrides
		return ret
	}).(ComponentOverridesOutput)
}

type ComponentProperties struct {
}

// ComponentPropertiesInput is an input type that accepts ComponentPropertiesArgs and ComponentPropertiesOutput values.
// You can construct a concrete instance of `ComponentPropertiesInput` via:
//
//	ComponentPropertiesArgs{...}
type ComponentPropertiesInput interface {
	pulumi.Input

	ToComponentPropertiesOutput() ComponentPropertiesOutput
	ToComponentPropertiesOutputWithContext(context.Context) ComponentPropertiesOutput
}

type ComponentPropertiesArgs struct {
}

func (ComponentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperties)(nil)).Elem()
}

func (i ComponentPropertiesArgs) ToComponentPropertiesOutput() ComponentPropertiesOutput {
	return i.ToComponentPropertiesOutputWithContext(context.Background())
}

func (i ComponentPropertiesArgs) ToComponentPropertiesOutputWithContext(ctx context.Context) ComponentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertiesOutput)
}

type ComponentPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperties)(nil)).Elem()
}

func (o ComponentPropertiesOutput) ToComponentPropertiesOutput() ComponentPropertiesOutput {
	return o
}

func (o ComponentPropertiesOutput) ToComponentPropertiesOutputWithContext(ctx context.Context) ComponentPropertiesOutput {
	return o
}

type ComponentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentProperties)(nil)).Elem()
}

func (o ComponentPropertiesPtrOutput) ToComponentPropertiesPtrOutput() ComponentPropertiesPtrOutput {
	return o
}

func (o ComponentPropertiesPtrOutput) ToComponentPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertiesPtrOutput {
	return o
}

func (o ComponentPropertiesPtrOutput) Elem() ComponentPropertiesOutput {
	return o.ApplyT(func(v *ComponentProperties) ComponentProperties {
		if v != nil {
			return *v
		}
		var ret ComponentProperties
		return ret
	}).(ComponentPropertiesOutput)
}

type ComponentTags struct {
}

// ComponentTagsInput is an input type that accepts ComponentTagsArgs and ComponentTagsOutput values.
// You can construct a concrete instance of `ComponentTagsInput` via:
//
//	ComponentTagsArgs{...}
type ComponentTagsInput interface {
	pulumi.Input

	ToComponentTagsOutput() ComponentTagsOutput
	ToComponentTagsOutputWithContext(context.Context) ComponentTagsOutput
}

type ComponentTagsArgs struct {
}

func (ComponentTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTags)(nil)).Elem()
}

func (i ComponentTagsArgs) ToComponentTagsOutput() ComponentTagsOutput {
	return i.ToComponentTagsOutputWithContext(context.Background())
}

func (i ComponentTagsArgs) ToComponentTagsOutputWithContext(ctx context.Context) ComponentTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagsOutput)
}

func (i ComponentTagsArgs) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return i.ToComponentTagsPtrOutputWithContext(context.Background())
}

func (i ComponentTagsArgs) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagsOutput).ToComponentTagsPtrOutputWithContext(ctx)
}

// ComponentTagsPtrInput is an input type that accepts ComponentTagsArgs, ComponentTagsPtr and ComponentTagsPtrOutput values.
// You can construct a concrete instance of `ComponentTagsPtrInput` via:
//
//	        ComponentTagsArgs{...}
//
//	or:
//
//	        nil
type ComponentTagsPtrInput interface {
	pulumi.Input

	ToComponentTagsPtrOutput() ComponentTagsPtrOutput
	ToComponentTagsPtrOutputWithContext(context.Context) ComponentTagsPtrOutput
}

type componentTagsPtrType ComponentTagsArgs

func ComponentTagsPtr(v *ComponentTagsArgs) ComponentTagsPtrInput {
	return (*componentTagsPtrType)(v)
}

func (*componentTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTags)(nil)).Elem()
}

func (i *componentTagsPtrType) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return i.ToComponentTagsPtrOutputWithContext(context.Background())
}

func (i *componentTagsPtrType) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagsPtrOutput)
}

type ComponentTagsOutput struct{ *pulumi.OutputState }

func (ComponentTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTags)(nil)).Elem()
}

func (o ComponentTagsOutput) ToComponentTagsOutput() ComponentTagsOutput {
	return o
}

func (o ComponentTagsOutput) ToComponentTagsOutputWithContext(ctx context.Context) ComponentTagsOutput {
	return o
}

func (o ComponentTagsOutput) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return o.ToComponentTagsPtrOutputWithContext(context.Background())
}

func (o ComponentTagsOutput) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTags) *ComponentTags {
		return &v
	}).(ComponentTagsPtrOutput)
}

type ComponentTagsPtrOutput struct{ *pulumi.OutputState }

func (ComponentTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTags)(nil)).Elem()
}

func (o ComponentTagsPtrOutput) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return o
}

func (o ComponentTagsPtrOutput) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return o
}

func (o ComponentTagsPtrOutput) Elem() ComponentTagsOutput {
	return o.ApplyT(func(v *ComponentTags) ComponentTags {
		if v != nil {
			return *v
		}
		var ret ComponentTags
		return ret
	}).(ComponentTagsOutput)
}

type ComponentVariant struct {
	Overrides     *ComponentOverrides     `pulumi:"overrides"`
	VariantValues *ComponentVariantValues `pulumi:"variantValues"`
}

// ComponentVariantInput is an input type that accepts ComponentVariantArgs and ComponentVariantOutput values.
// You can construct a concrete instance of `ComponentVariantInput` via:
//
//	ComponentVariantArgs{...}
type ComponentVariantInput interface {
	pulumi.Input

	ToComponentVariantOutput() ComponentVariantOutput
	ToComponentVariantOutputWithContext(context.Context) ComponentVariantOutput
}

type ComponentVariantArgs struct {
	Overrides     ComponentOverridesPtrInput     `pulumi:"overrides"`
	VariantValues ComponentVariantValuesPtrInput `pulumi:"variantValues"`
}

func (ComponentVariantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariant)(nil)).Elem()
}

func (i ComponentVariantArgs) ToComponentVariantOutput() ComponentVariantOutput {
	return i.ToComponentVariantOutputWithContext(context.Background())
}

func (i ComponentVariantArgs) ToComponentVariantOutputWithContext(ctx context.Context) ComponentVariantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantOutput)
}

// ComponentVariantArrayInput is an input type that accepts ComponentVariantArray and ComponentVariantArrayOutput values.
// You can construct a concrete instance of `ComponentVariantArrayInput` via:
//
//	ComponentVariantArray{ ComponentVariantArgs{...} }
type ComponentVariantArrayInput interface {
	pulumi.Input

	ToComponentVariantArrayOutput() ComponentVariantArrayOutput
	ToComponentVariantArrayOutputWithContext(context.Context) ComponentVariantArrayOutput
}

type ComponentVariantArray []ComponentVariantInput

func (ComponentVariantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentVariant)(nil)).Elem()
}

func (i ComponentVariantArray) ToComponentVariantArrayOutput() ComponentVariantArrayOutput {
	return i.ToComponentVariantArrayOutputWithContext(context.Background())
}

func (i ComponentVariantArray) ToComponentVariantArrayOutputWithContext(ctx context.Context) ComponentVariantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantArrayOutput)
}

type ComponentVariantOutput struct{ *pulumi.OutputState }

func (ComponentVariantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariant)(nil)).Elem()
}

func (o ComponentVariantOutput) ToComponentVariantOutput() ComponentVariantOutput {
	return o
}

func (o ComponentVariantOutput) ToComponentVariantOutputWithContext(ctx context.Context) ComponentVariantOutput {
	return o
}

func (o ComponentVariantOutput) Overrides() ComponentOverridesPtrOutput {
	return o.ApplyT(func(v ComponentVariant) *ComponentOverrides { return v.Overrides }).(ComponentOverridesPtrOutput)
}

func (o ComponentVariantOutput) VariantValues() ComponentVariantValuesPtrOutput {
	return o.ApplyT(func(v ComponentVariant) *ComponentVariantValues { return v.VariantValues }).(ComponentVariantValuesPtrOutput)
}

type ComponentVariantArrayOutput struct{ *pulumi.OutputState }

func (ComponentVariantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentVariant)(nil)).Elem()
}

func (o ComponentVariantArrayOutput) ToComponentVariantArrayOutput() ComponentVariantArrayOutput {
	return o
}

func (o ComponentVariantArrayOutput) ToComponentVariantArrayOutputWithContext(ctx context.Context) ComponentVariantArrayOutput {
	return o
}

func (o ComponentVariantArrayOutput) Index(i pulumi.IntInput) ComponentVariantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentVariant {
		return vs[0].([]ComponentVariant)[vs[1].(int)]
	}).(ComponentVariantOutput)
}

type ComponentVariantValues struct {
}

// ComponentVariantValuesInput is an input type that accepts ComponentVariantValuesArgs and ComponentVariantValuesOutput values.
// You can construct a concrete instance of `ComponentVariantValuesInput` via:
//
//	ComponentVariantValuesArgs{...}
type ComponentVariantValuesInput interface {
	pulumi.Input

	ToComponentVariantValuesOutput() ComponentVariantValuesOutput
	ToComponentVariantValuesOutputWithContext(context.Context) ComponentVariantValuesOutput
}

type ComponentVariantValuesArgs struct {
}

func (ComponentVariantValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariantValues)(nil)).Elem()
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesOutput() ComponentVariantValuesOutput {
	return i.ToComponentVariantValuesOutputWithContext(context.Background())
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesOutputWithContext(ctx context.Context) ComponentVariantValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantValuesOutput)
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return i.ToComponentVariantValuesPtrOutputWithContext(context.Background())
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantValuesOutput).ToComponentVariantValuesPtrOutputWithContext(ctx)
}

// ComponentVariantValuesPtrInput is an input type that accepts ComponentVariantValuesArgs, ComponentVariantValuesPtr and ComponentVariantValuesPtrOutput values.
// You can construct a concrete instance of `ComponentVariantValuesPtrInput` via:
//
//	        ComponentVariantValuesArgs{...}
//
//	or:
//
//	        nil
type ComponentVariantValuesPtrInput interface {
	pulumi.Input

	ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput
	ToComponentVariantValuesPtrOutputWithContext(context.Context) ComponentVariantValuesPtrOutput
}

type componentVariantValuesPtrType ComponentVariantValuesArgs

func ComponentVariantValuesPtr(v *ComponentVariantValuesArgs) ComponentVariantValuesPtrInput {
	return (*componentVariantValuesPtrType)(v)
}

func (*componentVariantValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentVariantValues)(nil)).Elem()
}

func (i *componentVariantValuesPtrType) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return i.ToComponentVariantValuesPtrOutputWithContext(context.Background())
}

func (i *componentVariantValuesPtrType) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantValuesPtrOutput)
}

type ComponentVariantValuesOutput struct{ *pulumi.OutputState }

func (ComponentVariantValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariantValues)(nil)).Elem()
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesOutput() ComponentVariantValuesOutput {
	return o
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesOutputWithContext(ctx context.Context) ComponentVariantValuesOutput {
	return o
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return o.ToComponentVariantValuesPtrOutputWithContext(context.Background())
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentVariantValues) *ComponentVariantValues {
		return &v
	}).(ComponentVariantValuesPtrOutput)
}

type ComponentVariantValuesPtrOutput struct{ *pulumi.OutputState }

func (ComponentVariantValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentVariantValues)(nil)).Elem()
}

func (o ComponentVariantValuesPtrOutput) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return o
}

func (o ComponentVariantValuesPtrOutput) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return o
}

func (o ComponentVariantValuesPtrOutput) Elem() ComponentVariantValuesOutput {
	return o.ApplyT(func(v *ComponentVariantValues) ComponentVariantValues {
		if v != nil {
			return *v
		}
		var ret ComponentVariantValues
		return ret
	}).(ComponentVariantValuesOutput)
}

type FormButton struct {
	Children *string            `pulumi:"children"`
	Excluded *bool              `pulumi:"excluded"`
	Position *FormFieldPosition `pulumi:"position"`
}

// FormButtonInput is an input type that accepts FormButtonArgs and FormButtonOutput values.
// You can construct a concrete instance of `FormButtonInput` via:
//
//	FormButtonArgs{...}
type FormButtonInput interface {
	pulumi.Input

	ToFormButtonOutput() FormButtonOutput
	ToFormButtonOutputWithContext(context.Context) FormButtonOutput
}

type FormButtonArgs struct {
	Children pulumi.StringPtrInput     `pulumi:"children"`
	Excluded pulumi.BoolPtrInput       `pulumi:"excluded"`
	Position FormFieldPositionPtrInput `pulumi:"position"`
}

func (FormButtonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormButton)(nil)).Elem()
}

func (i FormButtonArgs) ToFormButtonOutput() FormButtonOutput {
	return i.ToFormButtonOutputWithContext(context.Background())
}

func (i FormButtonArgs) ToFormButtonOutputWithContext(ctx context.Context) FormButtonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormButtonOutput)
}

func (i FormButtonArgs) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return i.ToFormButtonPtrOutputWithContext(context.Background())
}

func (i FormButtonArgs) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormButtonOutput).ToFormButtonPtrOutputWithContext(ctx)
}

// FormButtonPtrInput is an input type that accepts FormButtonArgs, FormButtonPtr and FormButtonPtrOutput values.
// You can construct a concrete instance of `FormButtonPtrInput` via:
//
//	        FormButtonArgs{...}
//
//	or:
//
//	        nil
type FormButtonPtrInput interface {
	pulumi.Input

	ToFormButtonPtrOutput() FormButtonPtrOutput
	ToFormButtonPtrOutputWithContext(context.Context) FormButtonPtrOutput
}

type formButtonPtrType FormButtonArgs

func FormButtonPtr(v *FormButtonArgs) FormButtonPtrInput {
	return (*formButtonPtrType)(v)
}

func (*formButtonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormButton)(nil)).Elem()
}

func (i *formButtonPtrType) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return i.ToFormButtonPtrOutputWithContext(context.Background())
}

func (i *formButtonPtrType) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormButtonPtrOutput)
}

type FormButtonOutput struct{ *pulumi.OutputState }

func (FormButtonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormButton)(nil)).Elem()
}

func (o FormButtonOutput) ToFormButtonOutput() FormButtonOutput {
	return o
}

func (o FormButtonOutput) ToFormButtonOutputWithContext(ctx context.Context) FormButtonOutput {
	return o
}

func (o FormButtonOutput) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return o.ToFormButtonPtrOutputWithContext(context.Background())
}

func (o FormButtonOutput) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormButton) *FormButton {
		return &v
	}).(FormButtonPtrOutput)
}

func (o FormButtonOutput) Children() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormButton) *string { return v.Children }).(pulumi.StringPtrOutput)
}

func (o FormButtonOutput) Excluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormButton) *bool { return v.Excluded }).(pulumi.BoolPtrOutput)
}

func (o FormButtonOutput) Position() FormFieldPositionPtrOutput {
	return o.ApplyT(func(v FormButton) *FormFieldPosition { return v.Position }).(FormFieldPositionPtrOutput)
}

type FormButtonPtrOutput struct{ *pulumi.OutputState }

func (FormButtonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormButton)(nil)).Elem()
}

func (o FormButtonPtrOutput) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return o
}

func (o FormButtonPtrOutput) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return o
}

func (o FormButtonPtrOutput) Elem() FormButtonOutput {
	return o.ApplyT(func(v *FormButton) FormButton {
		if v != nil {
			return *v
		}
		var ret FormButton
		return ret
	}).(FormButtonOutput)
}

func (o FormButtonPtrOutput) Children() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormButton) *string {
		if v == nil {
			return nil
		}
		return v.Children
	}).(pulumi.StringPtrOutput)
}

func (o FormButtonPtrOutput) Excluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormButton) *bool {
		if v == nil {
			return nil
		}
		return v.Excluded
	}).(pulumi.BoolPtrOutput)
}

func (o FormButtonPtrOutput) Position() FormFieldPositionPtrOutput {
	return o.ApplyT(func(v *FormButton) *FormFieldPosition {
		if v == nil {
			return nil
		}
		return v.Position
	}).(FormFieldPositionPtrOutput)
}

type FormCTA struct {
	Cancel   *FormButton          `pulumi:"cancel"`
	Clear    *FormButton          `pulumi:"clear"`
	Position *FormButtonsPosition `pulumi:"position"`
	Submit   *FormButton          `pulumi:"submit"`
}

// FormCTAInput is an input type that accepts FormCTAArgs and FormCTAOutput values.
// You can construct a concrete instance of `FormCTAInput` via:
//
//	FormCTAArgs{...}
type FormCTAInput interface {
	pulumi.Input

	ToFormCTAOutput() FormCTAOutput
	ToFormCTAOutputWithContext(context.Context) FormCTAOutput
}

type FormCTAArgs struct {
	Cancel   FormButtonPtrInput          `pulumi:"cancel"`
	Clear    FormButtonPtrInput          `pulumi:"clear"`
	Position FormButtonsPositionPtrInput `pulumi:"position"`
	Submit   FormButtonPtrInput          `pulumi:"submit"`
}

func (FormCTAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormCTA)(nil)).Elem()
}

func (i FormCTAArgs) ToFormCTAOutput() FormCTAOutput {
	return i.ToFormCTAOutputWithContext(context.Background())
}

func (i FormCTAArgs) ToFormCTAOutputWithContext(ctx context.Context) FormCTAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormCTAOutput)
}

func (i FormCTAArgs) ToFormCTAPtrOutput() FormCTAPtrOutput {
	return i.ToFormCTAPtrOutputWithContext(context.Background())
}

func (i FormCTAArgs) ToFormCTAPtrOutputWithContext(ctx context.Context) FormCTAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormCTAOutput).ToFormCTAPtrOutputWithContext(ctx)
}

// FormCTAPtrInput is an input type that accepts FormCTAArgs, FormCTAPtr and FormCTAPtrOutput values.
// You can construct a concrete instance of `FormCTAPtrInput` via:
//
//	        FormCTAArgs{...}
//
//	or:
//
//	        nil
type FormCTAPtrInput interface {
	pulumi.Input

	ToFormCTAPtrOutput() FormCTAPtrOutput
	ToFormCTAPtrOutputWithContext(context.Context) FormCTAPtrOutput
}

type formCTAPtrType FormCTAArgs

func FormCTAPtr(v *FormCTAArgs) FormCTAPtrInput {
	return (*formCTAPtrType)(v)
}

func (*formCTAPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormCTA)(nil)).Elem()
}

func (i *formCTAPtrType) ToFormCTAPtrOutput() FormCTAPtrOutput {
	return i.ToFormCTAPtrOutputWithContext(context.Background())
}

func (i *formCTAPtrType) ToFormCTAPtrOutputWithContext(ctx context.Context) FormCTAPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormCTAPtrOutput)
}

type FormCTAOutput struct{ *pulumi.OutputState }

func (FormCTAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormCTA)(nil)).Elem()
}

func (o FormCTAOutput) ToFormCTAOutput() FormCTAOutput {
	return o
}

func (o FormCTAOutput) ToFormCTAOutputWithContext(ctx context.Context) FormCTAOutput {
	return o
}

func (o FormCTAOutput) ToFormCTAPtrOutput() FormCTAPtrOutput {
	return o.ToFormCTAPtrOutputWithContext(context.Background())
}

func (o FormCTAOutput) ToFormCTAPtrOutputWithContext(ctx context.Context) FormCTAPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormCTA) *FormCTA {
		return &v
	}).(FormCTAPtrOutput)
}

func (o FormCTAOutput) Cancel() FormButtonPtrOutput {
	return o.ApplyT(func(v FormCTA) *FormButton { return v.Cancel }).(FormButtonPtrOutput)
}

func (o FormCTAOutput) Clear() FormButtonPtrOutput {
	return o.ApplyT(func(v FormCTA) *FormButton { return v.Clear }).(FormButtonPtrOutput)
}

func (o FormCTAOutput) Position() FormButtonsPositionPtrOutput {
	return o.ApplyT(func(v FormCTA) *FormButtonsPosition { return v.Position }).(FormButtonsPositionPtrOutput)
}

func (o FormCTAOutput) Submit() FormButtonPtrOutput {
	return o.ApplyT(func(v FormCTA) *FormButton { return v.Submit }).(FormButtonPtrOutput)
}

type FormCTAPtrOutput struct{ *pulumi.OutputState }

func (FormCTAPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormCTA)(nil)).Elem()
}

func (o FormCTAPtrOutput) ToFormCTAPtrOutput() FormCTAPtrOutput {
	return o
}

func (o FormCTAPtrOutput) ToFormCTAPtrOutputWithContext(ctx context.Context) FormCTAPtrOutput {
	return o
}

func (o FormCTAPtrOutput) Elem() FormCTAOutput {
	return o.ApplyT(func(v *FormCTA) FormCTA {
		if v != nil {
			return *v
		}
		var ret FormCTA
		return ret
	}).(FormCTAOutput)
}

func (o FormCTAPtrOutput) Cancel() FormButtonPtrOutput {
	return o.ApplyT(func(v *FormCTA) *FormButton {
		if v == nil {
			return nil
		}
		return v.Cancel
	}).(FormButtonPtrOutput)
}

func (o FormCTAPtrOutput) Clear() FormButtonPtrOutput {
	return o.ApplyT(func(v *FormCTA) *FormButton {
		if v == nil {
			return nil
		}
		return v.Clear
	}).(FormButtonPtrOutput)
}

func (o FormCTAPtrOutput) Position() FormButtonsPositionPtrOutput {
	return o.ApplyT(func(v *FormCTA) *FormButtonsPosition {
		if v == nil {
			return nil
		}
		return v.Position
	}).(FormButtonsPositionPtrOutput)
}

func (o FormCTAPtrOutput) Submit() FormButtonPtrOutput {
	return o.ApplyT(func(v *FormCTA) *FormButton {
		if v == nil {
			return nil
		}
		return v.Submit
	}).(FormButtonPtrOutput)
}

type FormDataTypeConfig struct {
	DataSourceType FormDataSourceType `pulumi:"dataSourceType"`
	DataTypeName   string             `pulumi:"dataTypeName"`
}

// FormDataTypeConfigInput is an input type that accepts FormDataTypeConfigArgs and FormDataTypeConfigOutput values.
// You can construct a concrete instance of `FormDataTypeConfigInput` via:
//
//	FormDataTypeConfigArgs{...}
type FormDataTypeConfigInput interface {
	pulumi.Input

	ToFormDataTypeConfigOutput() FormDataTypeConfigOutput
	ToFormDataTypeConfigOutputWithContext(context.Context) FormDataTypeConfigOutput
}

type FormDataTypeConfigArgs struct {
	DataSourceType FormDataSourceTypeInput `pulumi:"dataSourceType"`
	DataTypeName   pulumi.StringInput      `pulumi:"dataTypeName"`
}

func (FormDataTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormDataTypeConfig)(nil)).Elem()
}

func (i FormDataTypeConfigArgs) ToFormDataTypeConfigOutput() FormDataTypeConfigOutput {
	return i.ToFormDataTypeConfigOutputWithContext(context.Background())
}

func (i FormDataTypeConfigArgs) ToFormDataTypeConfigOutputWithContext(ctx context.Context) FormDataTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormDataTypeConfigOutput)
}

type FormDataTypeConfigOutput struct{ *pulumi.OutputState }

func (FormDataTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormDataTypeConfig)(nil)).Elem()
}

func (o FormDataTypeConfigOutput) ToFormDataTypeConfigOutput() FormDataTypeConfigOutput {
	return o
}

func (o FormDataTypeConfigOutput) ToFormDataTypeConfigOutputWithContext(ctx context.Context) FormDataTypeConfigOutput {
	return o
}

func (o FormDataTypeConfigOutput) DataSourceType() FormDataSourceTypeOutput {
	return o.ApplyT(func(v FormDataTypeConfig) FormDataSourceType { return v.DataSourceType }).(FormDataSourceTypeOutput)
}

func (o FormDataTypeConfigOutput) DataTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v FormDataTypeConfig) string { return v.DataTypeName }).(pulumi.StringOutput)
}

type FormDataTypeConfigPtrOutput struct{ *pulumi.OutputState }

func (FormDataTypeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormDataTypeConfig)(nil)).Elem()
}

func (o FormDataTypeConfigPtrOutput) ToFormDataTypeConfigPtrOutput() FormDataTypeConfigPtrOutput {
	return o
}

func (o FormDataTypeConfigPtrOutput) ToFormDataTypeConfigPtrOutputWithContext(ctx context.Context) FormDataTypeConfigPtrOutput {
	return o
}

func (o FormDataTypeConfigPtrOutput) Elem() FormDataTypeConfigOutput {
	return o.ApplyT(func(v *FormDataTypeConfig) FormDataTypeConfig {
		if v != nil {
			return *v
		}
		var ret FormDataTypeConfig
		return ret
	}).(FormDataTypeConfigOutput)
}

func (o FormDataTypeConfigPtrOutput) DataSourceType() FormDataSourceTypePtrOutput {
	return o.ApplyT(func(v *FormDataTypeConfig) *FormDataSourceType {
		if v == nil {
			return nil
		}
		return &v.DataSourceType
	}).(FormDataSourceTypePtrOutput)
}

func (o FormDataTypeConfigPtrOutput) DataTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormDataTypeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataTypeName
	}).(pulumi.StringPtrOutput)
}

type FormFieldPosition struct {
}

// FormFieldPositionInput is an input type that accepts FormFieldPositionArgs and FormFieldPositionOutput values.
// You can construct a concrete instance of `FormFieldPositionInput` via:
//
//	FormFieldPositionArgs{...}
type FormFieldPositionInput interface {
	pulumi.Input

	ToFormFieldPositionOutput() FormFieldPositionOutput
	ToFormFieldPositionOutputWithContext(context.Context) FormFieldPositionOutput
}

type FormFieldPositionArgs struct {
}

func (FormFieldPositionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition)(nil)).Elem()
}

func (i FormFieldPositionArgs) ToFormFieldPositionOutput() FormFieldPositionOutput {
	return i.ToFormFieldPositionOutputWithContext(context.Background())
}

func (i FormFieldPositionArgs) ToFormFieldPositionOutputWithContext(ctx context.Context) FormFieldPositionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPositionOutput)
}

func (i FormFieldPositionArgs) ToFormFieldPositionPtrOutput() FormFieldPositionPtrOutput {
	return i.ToFormFieldPositionPtrOutputWithContext(context.Background())
}

func (i FormFieldPositionArgs) ToFormFieldPositionPtrOutputWithContext(ctx context.Context) FormFieldPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPositionOutput).ToFormFieldPositionPtrOutputWithContext(ctx)
}

// FormFieldPositionPtrInput is an input type that accepts FormFieldPositionArgs, FormFieldPositionPtr and FormFieldPositionPtrOutput values.
// You can construct a concrete instance of `FormFieldPositionPtrInput` via:
//
//	        FormFieldPositionArgs{...}
//
//	or:
//
//	        nil
type FormFieldPositionPtrInput interface {
	pulumi.Input

	ToFormFieldPositionPtrOutput() FormFieldPositionPtrOutput
	ToFormFieldPositionPtrOutputWithContext(context.Context) FormFieldPositionPtrOutput
}

type formFieldPositionPtrType FormFieldPositionArgs

func FormFieldPositionPtr(v *FormFieldPositionArgs) FormFieldPositionPtrInput {
	return (*formFieldPositionPtrType)(v)
}

func (*formFieldPositionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition)(nil)).Elem()
}

func (i *formFieldPositionPtrType) ToFormFieldPositionPtrOutput() FormFieldPositionPtrOutput {
	return i.ToFormFieldPositionPtrOutputWithContext(context.Background())
}

func (i *formFieldPositionPtrType) ToFormFieldPositionPtrOutputWithContext(ctx context.Context) FormFieldPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPositionPtrOutput)
}

type FormFieldPositionOutput struct{ *pulumi.OutputState }

func (FormFieldPositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition)(nil)).Elem()
}

func (o FormFieldPositionOutput) ToFormFieldPositionOutput() FormFieldPositionOutput {
	return o
}

func (o FormFieldPositionOutput) ToFormFieldPositionOutputWithContext(ctx context.Context) FormFieldPositionOutput {
	return o
}

func (o FormFieldPositionOutput) ToFormFieldPositionPtrOutput() FormFieldPositionPtrOutput {
	return o.ToFormFieldPositionPtrOutputWithContext(context.Background())
}

func (o FormFieldPositionOutput) ToFormFieldPositionPtrOutputWithContext(ctx context.Context) FormFieldPositionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormFieldPosition) *FormFieldPosition {
		return &v
	}).(FormFieldPositionPtrOutput)
}

type FormFieldPositionPtrOutput struct{ *pulumi.OutputState }

func (FormFieldPositionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition)(nil)).Elem()
}

func (o FormFieldPositionPtrOutput) ToFormFieldPositionPtrOutput() FormFieldPositionPtrOutput {
	return o
}

func (o FormFieldPositionPtrOutput) ToFormFieldPositionPtrOutputWithContext(ctx context.Context) FormFieldPositionPtrOutput {
	return o
}

func (o FormFieldPositionPtrOutput) Elem() FormFieldPositionOutput {
	return o.ApplyT(func(v *FormFieldPosition) FormFieldPosition {
		if v != nil {
			return *v
		}
		var ret FormFieldPosition
		return ret
	}).(FormFieldPositionOutput)
}

type FormFieldsMap struct {
}

// FormFieldsMapInput is an input type that accepts FormFieldsMap and FormFieldsMapOutput values.
// You can construct a concrete instance of `FormFieldsMapInput` via:
//
//	FormFieldsMap{ "key": FormFieldsArgs{...} }
type FormFieldsMapInput interface {
	pulumi.Input

	ToFormFieldsMapOutput() FormFieldsMapOutput
	ToFormFieldsMapOutputWithContext(context.Context) FormFieldsMapOutput
}

type FormFieldsMapArgs struct {
}

func (FormFieldsMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldsMap)(nil)).Elem()
}

func (i FormFieldsMapArgs) ToFormFieldsMapOutput() FormFieldsMapOutput {
	return i.ToFormFieldsMapOutputWithContext(context.Background())
}

func (i FormFieldsMapArgs) ToFormFieldsMapOutputWithContext(ctx context.Context) FormFieldsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldsMapOutput)
}

type FormFieldsMapOutput struct{ *pulumi.OutputState }

func (FormFieldsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldsMap)(nil)).Elem()
}

func (o FormFieldsMapOutput) ToFormFieldsMapOutput() FormFieldsMapOutput {
	return o
}

func (o FormFieldsMapOutput) ToFormFieldsMapOutputWithContext(ctx context.Context) FormFieldsMapOutput {
	return o
}

type FormFieldsMapPtrOutput struct{ *pulumi.OutputState }

func (FormFieldsMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldsMap)(nil)).Elem()
}

func (o FormFieldsMapPtrOutput) ToFormFieldsMapPtrOutput() FormFieldsMapPtrOutput {
	return o
}

func (o FormFieldsMapPtrOutput) ToFormFieldsMapPtrOutputWithContext(ctx context.Context) FormFieldsMapPtrOutput {
	return o
}

func (o FormFieldsMapPtrOutput) Elem() FormFieldsMapOutput {
	return o.ApplyT(func(v *FormFieldsMap) FormFieldsMap {
		if v != nil {
			return *v
		}
		var ret FormFieldsMap
		return ret
	}).(FormFieldsMapOutput)
}

type FormSectionalElementMap struct {
}

// FormSectionalElementMapInput is an input type that accepts FormSectionalElementMap and FormSectionalElementMapOutput values.
// You can construct a concrete instance of `FormSectionalElementMapInput` via:
//
//	FormSectionalElementMap{ "key": FormSectionalElementArgs{...} }
type FormSectionalElementMapInput interface {
	pulumi.Input

	ToFormSectionalElementMapOutput() FormSectionalElementMapOutput
	ToFormSectionalElementMapOutputWithContext(context.Context) FormSectionalElementMapOutput
}

type FormSectionalElementMapArgs struct {
}

func (FormSectionalElementMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormSectionalElementMap)(nil)).Elem()
}

func (i FormSectionalElementMapArgs) ToFormSectionalElementMapOutput() FormSectionalElementMapOutput {
	return i.ToFormSectionalElementMapOutputWithContext(context.Background())
}

func (i FormSectionalElementMapArgs) ToFormSectionalElementMapOutputWithContext(ctx context.Context) FormSectionalElementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormSectionalElementMapOutput)
}

type FormSectionalElementMapOutput struct{ *pulumi.OutputState }

func (FormSectionalElementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormSectionalElementMap)(nil)).Elem()
}

func (o FormSectionalElementMapOutput) ToFormSectionalElementMapOutput() FormSectionalElementMapOutput {
	return o
}

func (o FormSectionalElementMapOutput) ToFormSectionalElementMapOutputWithContext(ctx context.Context) FormSectionalElementMapOutput {
	return o
}

type FormSectionalElementMapPtrOutput struct{ *pulumi.OutputState }

func (FormSectionalElementMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormSectionalElementMap)(nil)).Elem()
}

func (o FormSectionalElementMapPtrOutput) ToFormSectionalElementMapPtrOutput() FormSectionalElementMapPtrOutput {
	return o
}

func (o FormSectionalElementMapPtrOutput) ToFormSectionalElementMapPtrOutputWithContext(ctx context.Context) FormSectionalElementMapPtrOutput {
	return o
}

func (o FormSectionalElementMapPtrOutput) Elem() FormSectionalElementMapOutput {
	return o.ApplyT(func(v *FormSectionalElementMap) FormSectionalElementMap {
		if v != nil {
			return *v
		}
		var ret FormSectionalElementMap
		return ret
	}).(FormSectionalElementMapOutput)
}

type FormStyle struct {
	HorizontalGap *FormStyleConfig `pulumi:"horizontalGap"`
	OuterPadding  *FormStyleConfig `pulumi:"outerPadding"`
	VerticalGap   *FormStyleConfig `pulumi:"verticalGap"`
}

// FormStyleInput is an input type that accepts FormStyleArgs and FormStyleOutput values.
// You can construct a concrete instance of `FormStyleInput` via:
//
//	FormStyleArgs{...}
type FormStyleInput interface {
	pulumi.Input

	ToFormStyleOutput() FormStyleOutput
	ToFormStyleOutputWithContext(context.Context) FormStyleOutput
}

type FormStyleArgs struct {
	HorizontalGap FormStyleConfigPtrInput `pulumi:"horizontalGap"`
	OuterPadding  FormStyleConfigPtrInput `pulumi:"outerPadding"`
	VerticalGap   FormStyleConfigPtrInput `pulumi:"verticalGap"`
}

func (FormStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyle)(nil)).Elem()
}

func (i FormStyleArgs) ToFormStyleOutput() FormStyleOutput {
	return i.ToFormStyleOutputWithContext(context.Background())
}

func (i FormStyleArgs) ToFormStyleOutputWithContext(ctx context.Context) FormStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleOutput)
}

type FormStyleOutput struct{ *pulumi.OutputState }

func (FormStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyle)(nil)).Elem()
}

func (o FormStyleOutput) ToFormStyleOutput() FormStyleOutput {
	return o
}

func (o FormStyleOutput) ToFormStyleOutputWithContext(ctx context.Context) FormStyleOutput {
	return o
}

func (o FormStyleOutput) HorizontalGap() FormStyleConfigPtrOutput {
	return o.ApplyT(func(v FormStyle) *FormStyleConfig { return v.HorizontalGap }).(FormStyleConfigPtrOutput)
}

func (o FormStyleOutput) OuterPadding() FormStyleConfigPtrOutput {
	return o.ApplyT(func(v FormStyle) *FormStyleConfig { return v.OuterPadding }).(FormStyleConfigPtrOutput)
}

func (o FormStyleOutput) VerticalGap() FormStyleConfigPtrOutput {
	return o.ApplyT(func(v FormStyle) *FormStyleConfig { return v.VerticalGap }).(FormStyleConfigPtrOutput)
}

type FormStylePtrOutput struct{ *pulumi.OutputState }

func (FormStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyle)(nil)).Elem()
}

func (o FormStylePtrOutput) ToFormStylePtrOutput() FormStylePtrOutput {
	return o
}

func (o FormStylePtrOutput) ToFormStylePtrOutputWithContext(ctx context.Context) FormStylePtrOutput {
	return o
}

func (o FormStylePtrOutput) Elem() FormStyleOutput {
	return o.ApplyT(func(v *FormStyle) FormStyle {
		if v != nil {
			return *v
		}
		var ret FormStyle
		return ret
	}).(FormStyleOutput)
}

func (o FormStylePtrOutput) HorizontalGap() FormStyleConfigPtrOutput {
	return o.ApplyT(func(v *FormStyle) *FormStyleConfig {
		if v == nil {
			return nil
		}
		return v.HorizontalGap
	}).(FormStyleConfigPtrOutput)
}

func (o FormStylePtrOutput) OuterPadding() FormStyleConfigPtrOutput {
	return o.ApplyT(func(v *FormStyle) *FormStyleConfig {
		if v == nil {
			return nil
		}
		return v.OuterPadding
	}).(FormStyleConfigPtrOutput)
}

func (o FormStylePtrOutput) VerticalGap() FormStyleConfigPtrOutput {
	return o.ApplyT(func(v *FormStyle) *FormStyleConfig {
		if v == nil {
			return nil
		}
		return v.VerticalGap
	}).(FormStyleConfigPtrOutput)
}

type FormStyleConfig struct {
}

// FormStyleConfigInput is an input type that accepts FormStyleConfigArgs and FormStyleConfigOutput values.
// You can construct a concrete instance of `FormStyleConfigInput` via:
//
//	FormStyleConfigArgs{...}
type FormStyleConfigInput interface {
	pulumi.Input

	ToFormStyleConfigOutput() FormStyleConfigOutput
	ToFormStyleConfigOutputWithContext(context.Context) FormStyleConfigOutput
}

type FormStyleConfigArgs struct {
}

func (FormStyleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyleConfig)(nil)).Elem()
}

func (i FormStyleConfigArgs) ToFormStyleConfigOutput() FormStyleConfigOutput {
	return i.ToFormStyleConfigOutputWithContext(context.Background())
}

func (i FormStyleConfigArgs) ToFormStyleConfigOutputWithContext(ctx context.Context) FormStyleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfigOutput)
}

func (i FormStyleConfigArgs) ToFormStyleConfigPtrOutput() FormStyleConfigPtrOutput {
	return i.ToFormStyleConfigPtrOutputWithContext(context.Background())
}

func (i FormStyleConfigArgs) ToFormStyleConfigPtrOutputWithContext(ctx context.Context) FormStyleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfigOutput).ToFormStyleConfigPtrOutputWithContext(ctx)
}

// FormStyleConfigPtrInput is an input type that accepts FormStyleConfigArgs, FormStyleConfigPtr and FormStyleConfigPtrOutput values.
// You can construct a concrete instance of `FormStyleConfigPtrInput` via:
//
//	        FormStyleConfigArgs{...}
//
//	or:
//
//	        nil
type FormStyleConfigPtrInput interface {
	pulumi.Input

	ToFormStyleConfigPtrOutput() FormStyleConfigPtrOutput
	ToFormStyleConfigPtrOutputWithContext(context.Context) FormStyleConfigPtrOutput
}

type formStyleConfigPtrType FormStyleConfigArgs

func FormStyleConfigPtr(v *FormStyleConfigArgs) FormStyleConfigPtrInput {
	return (*formStyleConfigPtrType)(v)
}

func (*formStyleConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyleConfig)(nil)).Elem()
}

func (i *formStyleConfigPtrType) ToFormStyleConfigPtrOutput() FormStyleConfigPtrOutput {
	return i.ToFormStyleConfigPtrOutputWithContext(context.Background())
}

func (i *formStyleConfigPtrType) ToFormStyleConfigPtrOutputWithContext(ctx context.Context) FormStyleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfigPtrOutput)
}

type FormStyleConfigOutput struct{ *pulumi.OutputState }

func (FormStyleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyleConfig)(nil)).Elem()
}

func (o FormStyleConfigOutput) ToFormStyleConfigOutput() FormStyleConfigOutput {
	return o
}

func (o FormStyleConfigOutput) ToFormStyleConfigOutputWithContext(ctx context.Context) FormStyleConfigOutput {
	return o
}

func (o FormStyleConfigOutput) ToFormStyleConfigPtrOutput() FormStyleConfigPtrOutput {
	return o.ToFormStyleConfigPtrOutputWithContext(context.Background())
}

func (o FormStyleConfigOutput) ToFormStyleConfigPtrOutputWithContext(ctx context.Context) FormStyleConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormStyleConfig) *FormStyleConfig {
		return &v
	}).(FormStyleConfigPtrOutput)
}

type FormStyleConfigPtrOutput struct{ *pulumi.OutputState }

func (FormStyleConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyleConfig)(nil)).Elem()
}

func (o FormStyleConfigPtrOutput) ToFormStyleConfigPtrOutput() FormStyleConfigPtrOutput {
	return o
}

func (o FormStyleConfigPtrOutput) ToFormStyleConfigPtrOutputWithContext(ctx context.Context) FormStyleConfigPtrOutput {
	return o
}

func (o FormStyleConfigPtrOutput) Elem() FormStyleConfigOutput {
	return o.ApplyT(func(v *FormStyleConfig) FormStyleConfig {
		if v != nil {
			return *v
		}
		var ret FormStyleConfig
		return ret
	}).(FormStyleConfigOutput)
}

type FormTags struct {
}

// FormTagsInput is an input type that accepts FormTagsArgs and FormTagsOutput values.
// You can construct a concrete instance of `FormTagsInput` via:
//
//	FormTagsArgs{...}
type FormTagsInput interface {
	pulumi.Input

	ToFormTagsOutput() FormTagsOutput
	ToFormTagsOutputWithContext(context.Context) FormTagsOutput
}

type FormTagsArgs struct {
}

func (FormTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormTags)(nil)).Elem()
}

func (i FormTagsArgs) ToFormTagsOutput() FormTagsOutput {
	return i.ToFormTagsOutputWithContext(context.Background())
}

func (i FormTagsArgs) ToFormTagsOutputWithContext(ctx context.Context) FormTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormTagsOutput)
}

func (i FormTagsArgs) ToFormTagsPtrOutput() FormTagsPtrOutput {
	return i.ToFormTagsPtrOutputWithContext(context.Background())
}

func (i FormTagsArgs) ToFormTagsPtrOutputWithContext(ctx context.Context) FormTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormTagsOutput).ToFormTagsPtrOutputWithContext(ctx)
}

// FormTagsPtrInput is an input type that accepts FormTagsArgs, FormTagsPtr and FormTagsPtrOutput values.
// You can construct a concrete instance of `FormTagsPtrInput` via:
//
//	        FormTagsArgs{...}
//
//	or:
//
//	        nil
type FormTagsPtrInput interface {
	pulumi.Input

	ToFormTagsPtrOutput() FormTagsPtrOutput
	ToFormTagsPtrOutputWithContext(context.Context) FormTagsPtrOutput
}

type formTagsPtrType FormTagsArgs

func FormTagsPtr(v *FormTagsArgs) FormTagsPtrInput {
	return (*formTagsPtrType)(v)
}

func (*formTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormTags)(nil)).Elem()
}

func (i *formTagsPtrType) ToFormTagsPtrOutput() FormTagsPtrOutput {
	return i.ToFormTagsPtrOutputWithContext(context.Background())
}

func (i *formTagsPtrType) ToFormTagsPtrOutputWithContext(ctx context.Context) FormTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormTagsPtrOutput)
}

type FormTagsOutput struct{ *pulumi.OutputState }

func (FormTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormTags)(nil)).Elem()
}

func (o FormTagsOutput) ToFormTagsOutput() FormTagsOutput {
	return o
}

func (o FormTagsOutput) ToFormTagsOutputWithContext(ctx context.Context) FormTagsOutput {
	return o
}

func (o FormTagsOutput) ToFormTagsPtrOutput() FormTagsPtrOutput {
	return o.ToFormTagsPtrOutputWithContext(context.Background())
}

func (o FormTagsOutput) ToFormTagsPtrOutputWithContext(ctx context.Context) FormTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormTags) *FormTags {
		return &v
	}).(FormTagsPtrOutput)
}

type FormTagsPtrOutput struct{ *pulumi.OutputState }

func (FormTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormTags)(nil)).Elem()
}

func (o FormTagsPtrOutput) ToFormTagsPtrOutput() FormTagsPtrOutput {
	return o
}

func (o FormTagsPtrOutput) ToFormTagsPtrOutputWithContext(ctx context.Context) FormTagsPtrOutput {
	return o
}

func (o FormTagsPtrOutput) Elem() FormTagsOutput {
	return o.ApplyT(func(v *FormTags) FormTags {
		if v != nil {
			return *v
		}
		var ret FormTags
		return ret
	}).(FormTagsOutput)
}

type ThemeTags struct {
}

// ThemeTagsInput is an input type that accepts ThemeTagsArgs and ThemeTagsOutput values.
// You can construct a concrete instance of `ThemeTagsInput` via:
//
//	ThemeTagsArgs{...}
type ThemeTagsInput interface {
	pulumi.Input

	ToThemeTagsOutput() ThemeTagsOutput
	ToThemeTagsOutputWithContext(context.Context) ThemeTagsOutput
}

type ThemeTagsArgs struct {
}

func (ThemeTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTags)(nil)).Elem()
}

func (i ThemeTagsArgs) ToThemeTagsOutput() ThemeTagsOutput {
	return i.ToThemeTagsOutputWithContext(context.Background())
}

func (i ThemeTagsArgs) ToThemeTagsOutputWithContext(ctx context.Context) ThemeTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagsOutput)
}

func (i ThemeTagsArgs) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return i.ToThemeTagsPtrOutputWithContext(context.Background())
}

func (i ThemeTagsArgs) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagsOutput).ToThemeTagsPtrOutputWithContext(ctx)
}

// ThemeTagsPtrInput is an input type that accepts ThemeTagsArgs, ThemeTagsPtr and ThemeTagsPtrOutput values.
// You can construct a concrete instance of `ThemeTagsPtrInput` via:
//
//	        ThemeTagsArgs{...}
//
//	or:
//
//	        nil
type ThemeTagsPtrInput interface {
	pulumi.Input

	ToThemeTagsPtrOutput() ThemeTagsPtrOutput
	ToThemeTagsPtrOutputWithContext(context.Context) ThemeTagsPtrOutput
}

type themeTagsPtrType ThemeTagsArgs

func ThemeTagsPtr(v *ThemeTagsArgs) ThemeTagsPtrInput {
	return (*themeTagsPtrType)(v)
}

func (*themeTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTags)(nil)).Elem()
}

func (i *themeTagsPtrType) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return i.ToThemeTagsPtrOutputWithContext(context.Background())
}

func (i *themeTagsPtrType) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagsPtrOutput)
}

type ThemeTagsOutput struct{ *pulumi.OutputState }

func (ThemeTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTags)(nil)).Elem()
}

func (o ThemeTagsOutput) ToThemeTagsOutput() ThemeTagsOutput {
	return o
}

func (o ThemeTagsOutput) ToThemeTagsOutputWithContext(ctx context.Context) ThemeTagsOutput {
	return o
}

func (o ThemeTagsOutput) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return o.ToThemeTagsPtrOutputWithContext(context.Background())
}

func (o ThemeTagsOutput) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTags) *ThemeTags {
		return &v
	}).(ThemeTagsPtrOutput)
}

type ThemeTagsPtrOutput struct{ *pulumi.OutputState }

func (ThemeTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTags)(nil)).Elem()
}

func (o ThemeTagsPtrOutput) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return o
}

func (o ThemeTagsPtrOutput) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return o
}

func (o ThemeTagsPtrOutput) Elem() ThemeTagsOutput {
	return o.ApplyT(func(v *ThemeTags) ThemeTags {
		if v != nil {
			return *v
		}
		var ret ThemeTags
		return ret
	}).(ThemeTagsOutput)
}

type ThemeValue struct {
	Children []ThemeValues `pulumi:"children"`
	Value    *string       `pulumi:"value"`
}

// ThemeValueInput is an input type that accepts ThemeValueArgs and ThemeValueOutput values.
// You can construct a concrete instance of `ThemeValueInput` via:
//
//	ThemeValueArgs{...}
type ThemeValueInput interface {
	pulumi.Input

	ToThemeValueOutput() ThemeValueOutput
	ToThemeValueOutputWithContext(context.Context) ThemeValueOutput
}

type ThemeValueArgs struct {
	Children ThemeValuesArrayInput `pulumi:"children"`
	Value    pulumi.StringPtrInput `pulumi:"value"`
}

func (ThemeValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValue)(nil)).Elem()
}

func (i ThemeValueArgs) ToThemeValueOutput() ThemeValueOutput {
	return i.ToThemeValueOutputWithContext(context.Background())
}

func (i ThemeValueArgs) ToThemeValueOutputWithContext(ctx context.Context) ThemeValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValueOutput)
}

func (i ThemeValueArgs) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return i.ToThemeValuePtrOutputWithContext(context.Background())
}

func (i ThemeValueArgs) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValueOutput).ToThemeValuePtrOutputWithContext(ctx)
}

// ThemeValuePtrInput is an input type that accepts ThemeValueArgs, ThemeValuePtr and ThemeValuePtrOutput values.
// You can construct a concrete instance of `ThemeValuePtrInput` via:
//
//	        ThemeValueArgs{...}
//
//	or:
//
//	        nil
type ThemeValuePtrInput interface {
	pulumi.Input

	ToThemeValuePtrOutput() ThemeValuePtrOutput
	ToThemeValuePtrOutputWithContext(context.Context) ThemeValuePtrOutput
}

type themeValuePtrType ThemeValueArgs

func ThemeValuePtr(v *ThemeValueArgs) ThemeValuePtrInput {
	return (*themeValuePtrType)(v)
}

func (*themeValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeValue)(nil)).Elem()
}

func (i *themeValuePtrType) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return i.ToThemeValuePtrOutputWithContext(context.Background())
}

func (i *themeValuePtrType) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuePtrOutput)
}

type ThemeValueOutput struct{ *pulumi.OutputState }

func (ThemeValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValue)(nil)).Elem()
}

func (o ThemeValueOutput) ToThemeValueOutput() ThemeValueOutput {
	return o
}

func (o ThemeValueOutput) ToThemeValueOutputWithContext(ctx context.Context) ThemeValueOutput {
	return o
}

func (o ThemeValueOutput) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return o.ToThemeValuePtrOutputWithContext(context.Background())
}

func (o ThemeValueOutput) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeValue) *ThemeValue {
		return &v
	}).(ThemeValuePtrOutput)
}

func (o ThemeValueOutput) Children() ThemeValuesArrayOutput {
	return o.ApplyT(func(v ThemeValue) []ThemeValues { return v.Children }).(ThemeValuesArrayOutput)
}

func (o ThemeValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThemeValuePtrOutput struct{ *pulumi.OutputState }

func (ThemeValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeValue)(nil)).Elem()
}

func (o ThemeValuePtrOutput) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return o
}

func (o ThemeValuePtrOutput) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return o
}

func (o ThemeValuePtrOutput) Elem() ThemeValueOutput {
	return o.ApplyT(func(v *ThemeValue) ThemeValue {
		if v != nil {
			return *v
		}
		var ret ThemeValue
		return ret
	}).(ThemeValueOutput)
}

func (o ThemeValuePtrOutput) Children() ThemeValuesArrayOutput {
	return o.ApplyT(func(v *ThemeValue) []ThemeValues {
		if v == nil {
			return nil
		}
		return v.Children
	}).(ThemeValuesArrayOutput)
}

func (o ThemeValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeValue) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type ThemeValues struct {
	Key   *string     `pulumi:"key"`
	Value *ThemeValue `pulumi:"value"`
}

// ThemeValuesInput is an input type that accepts ThemeValuesArgs and ThemeValuesOutput values.
// You can construct a concrete instance of `ThemeValuesInput` via:
//
//	ThemeValuesArgs{...}
type ThemeValuesInput interface {
	pulumi.Input

	ToThemeValuesOutput() ThemeValuesOutput
	ToThemeValuesOutputWithContext(context.Context) ThemeValuesOutput
}

type ThemeValuesArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value ThemeValuePtrInput    `pulumi:"value"`
}

func (ThemeValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValues)(nil)).Elem()
}

func (i ThemeValuesArgs) ToThemeValuesOutput() ThemeValuesOutput {
	return i.ToThemeValuesOutputWithContext(context.Background())
}

func (i ThemeValuesArgs) ToThemeValuesOutputWithContext(ctx context.Context) ThemeValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuesOutput)
}

// ThemeValuesArrayInput is an input type that accepts ThemeValuesArray and ThemeValuesArrayOutput values.
// You can construct a concrete instance of `ThemeValuesArrayInput` via:
//
//	ThemeValuesArray{ ThemeValuesArgs{...} }
type ThemeValuesArrayInput interface {
	pulumi.Input

	ToThemeValuesArrayOutput() ThemeValuesArrayOutput
	ToThemeValuesArrayOutputWithContext(context.Context) ThemeValuesArrayOutput
}

type ThemeValuesArray []ThemeValuesInput

func (ThemeValuesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeValues)(nil)).Elem()
}

func (i ThemeValuesArray) ToThemeValuesArrayOutput() ThemeValuesArrayOutput {
	return i.ToThemeValuesArrayOutputWithContext(context.Background())
}

func (i ThemeValuesArray) ToThemeValuesArrayOutputWithContext(ctx context.Context) ThemeValuesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuesArrayOutput)
}

type ThemeValuesOutput struct{ *pulumi.OutputState }

func (ThemeValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValues)(nil)).Elem()
}

func (o ThemeValuesOutput) ToThemeValuesOutput() ThemeValuesOutput {
	return o
}

func (o ThemeValuesOutput) ToThemeValuesOutputWithContext(ctx context.Context) ThemeValuesOutput {
	return o
}

func (o ThemeValuesOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeValues) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ThemeValuesOutput) Value() ThemeValuePtrOutput {
	return o.ApplyT(func(v ThemeValues) *ThemeValue { return v.Value }).(ThemeValuePtrOutput)
}

type ThemeValuesArrayOutput struct{ *pulumi.OutputState }

func (ThemeValuesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeValues)(nil)).Elem()
}

func (o ThemeValuesArrayOutput) ToThemeValuesArrayOutput() ThemeValuesArrayOutput {
	return o
}

func (o ThemeValuesArrayOutput) ToThemeValuesArrayOutputWithContext(ctx context.Context) ThemeValuesArrayOutput {
	return o
}

func (o ThemeValuesArrayOutput) Index(i pulumi.IntInput) ThemeValuesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeValues {
		return vs[0].([]ThemeValues)[vs[1].(int)]
	}).(ThemeValuesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentBindingPropertiesInput)(nil)).Elem(), ComponentBindingPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentChildInput)(nil)).Elem(), ComponentChildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentChildArrayInput)(nil)).Elem(), ComponentChildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentCollectionPropertiesInput)(nil)).Elem(), ComponentCollectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentCollectionPropertiesPtrInput)(nil)).Elem(), ComponentCollectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentEventsInput)(nil)).Elem(), ComponentEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentEventsPtrInput)(nil)).Elem(), ComponentEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentOverridesInput)(nil)).Elem(), ComponentOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentOverridesPtrInput)(nil)).Elem(), ComponentOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertiesInput)(nil)).Elem(), ComponentPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTagsInput)(nil)).Elem(), ComponentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTagsPtrInput)(nil)).Elem(), ComponentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantInput)(nil)).Elem(), ComponentVariantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantArrayInput)(nil)).Elem(), ComponentVariantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantValuesInput)(nil)).Elem(), ComponentVariantValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantValuesPtrInput)(nil)).Elem(), ComponentVariantValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormButtonInput)(nil)).Elem(), FormButtonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormButtonPtrInput)(nil)).Elem(), FormButtonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormCTAInput)(nil)).Elem(), FormCTAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormCTAPtrInput)(nil)).Elem(), FormCTAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormDataTypeConfigInput)(nil)).Elem(), FormDataTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPositionInput)(nil)).Elem(), FormFieldPositionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPositionPtrInput)(nil)).Elem(), FormFieldPositionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldsMapInput)(nil)).Elem(), FormFieldsMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormSectionalElementMapInput)(nil)).Elem(), FormSectionalElementMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleInput)(nil)).Elem(), FormStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleConfigInput)(nil)).Elem(), FormStyleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleConfigPtrInput)(nil)).Elem(), FormStyleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormTagsInput)(nil)).Elem(), FormTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormTagsPtrInput)(nil)).Elem(), FormTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTagsInput)(nil)).Elem(), ThemeTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTagsPtrInput)(nil)).Elem(), ThemeTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValueInput)(nil)).Elem(), ThemeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuePtrInput)(nil)).Elem(), ThemeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuesInput)(nil)).Elem(), ThemeValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuesArrayInput)(nil)).Elem(), ThemeValuesArray{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentChildOutput{})
	pulumi.RegisterOutputType(ComponentChildArrayOutput{})
	pulumi.RegisterOutputType(ComponentCollectionPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentCollectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentEventsOutput{})
	pulumi.RegisterOutputType(ComponentEventsPtrOutput{})
	pulumi.RegisterOutputType(ComponentOverridesOutput{})
	pulumi.RegisterOutputType(ComponentOverridesPtrOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentTagsOutput{})
	pulumi.RegisterOutputType(ComponentTagsPtrOutput{})
	pulumi.RegisterOutputType(ComponentVariantOutput{})
	pulumi.RegisterOutputType(ComponentVariantArrayOutput{})
	pulumi.RegisterOutputType(ComponentVariantValuesOutput{})
	pulumi.RegisterOutputType(ComponentVariantValuesPtrOutput{})
	pulumi.RegisterOutputType(FormButtonOutput{})
	pulumi.RegisterOutputType(FormButtonPtrOutput{})
	pulumi.RegisterOutputType(FormCTAOutput{})
	pulumi.RegisterOutputType(FormCTAPtrOutput{})
	pulumi.RegisterOutputType(FormDataTypeConfigOutput{})
	pulumi.RegisterOutputType(FormDataTypeConfigPtrOutput{})
	pulumi.RegisterOutputType(FormFieldPositionOutput{})
	pulumi.RegisterOutputType(FormFieldPositionPtrOutput{})
	pulumi.RegisterOutputType(FormFieldsMapOutput{})
	pulumi.RegisterOutputType(FormFieldsMapPtrOutput{})
	pulumi.RegisterOutputType(FormSectionalElementMapOutput{})
	pulumi.RegisterOutputType(FormSectionalElementMapPtrOutput{})
	pulumi.RegisterOutputType(FormStyleOutput{})
	pulumi.RegisterOutputType(FormStylePtrOutput{})
	pulumi.RegisterOutputType(FormStyleConfigOutput{})
	pulumi.RegisterOutputType(FormStyleConfigPtrOutput{})
	pulumi.RegisterOutputType(FormTagsOutput{})
	pulumi.RegisterOutputType(FormTagsPtrOutput{})
	pulumi.RegisterOutputType(ThemeTagsOutput{})
	pulumi.RegisterOutputType(ThemeTagsPtrOutput{})
	pulumi.RegisterOutputType(ThemeValueOutput{})
	pulumi.RegisterOutputType(ThemeValuePtrOutput{})
	pulumi.RegisterOutputType(ThemeValuesOutput{})
	pulumi.RegisterOutputType(ThemeValuesArrayOutput{})
}
