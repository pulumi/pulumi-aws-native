// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComponentBindingProperties struct {
}

// ComponentBindingPropertiesInput is an input type that accepts ComponentBindingPropertiesArgs and ComponentBindingPropertiesOutput values.
// You can construct a concrete instance of `ComponentBindingPropertiesInput` via:
//
//          ComponentBindingPropertiesArgs{...}
type ComponentBindingPropertiesInput interface {
	pulumi.Input

	ToComponentBindingPropertiesOutput() ComponentBindingPropertiesOutput
	ToComponentBindingPropertiesOutputWithContext(context.Context) ComponentBindingPropertiesOutput
}

type ComponentBindingPropertiesArgs struct {
}

func (ComponentBindingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingProperties)(nil)).Elem()
}

func (i ComponentBindingPropertiesArgs) ToComponentBindingPropertiesOutput() ComponentBindingPropertiesOutput {
	return i.ToComponentBindingPropertiesOutputWithContext(context.Background())
}

func (i ComponentBindingPropertiesArgs) ToComponentBindingPropertiesOutputWithContext(ctx context.Context) ComponentBindingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesOutput)
}

func (i ComponentBindingPropertiesArgs) ToComponentBindingPropertiesPtrOutput() ComponentBindingPropertiesPtrOutput {
	return i.ToComponentBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i ComponentBindingPropertiesArgs) ToComponentBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesOutput).ToComponentBindingPropertiesPtrOutputWithContext(ctx)
}

// ComponentBindingPropertiesPtrInput is an input type that accepts ComponentBindingPropertiesArgs, ComponentBindingPropertiesPtr and ComponentBindingPropertiesPtrOutput values.
// You can construct a concrete instance of `ComponentBindingPropertiesPtrInput` via:
//
//          ComponentBindingPropertiesArgs{...}
//
//  or:
//
//          nil
type ComponentBindingPropertiesPtrInput interface {
	pulumi.Input

	ToComponentBindingPropertiesPtrOutput() ComponentBindingPropertiesPtrOutput
	ToComponentBindingPropertiesPtrOutputWithContext(context.Context) ComponentBindingPropertiesPtrOutput
}

type componentBindingPropertiesPtrType ComponentBindingPropertiesArgs

func ComponentBindingPropertiesPtr(v *ComponentBindingPropertiesArgs) ComponentBindingPropertiesPtrInput {
	return (*componentBindingPropertiesPtrType)(v)
}

func (*componentBindingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentBindingProperties)(nil)).Elem()
}

func (i *componentBindingPropertiesPtrType) ToComponentBindingPropertiesPtrOutput() ComponentBindingPropertiesPtrOutput {
	return i.ToComponentBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i *componentBindingPropertiesPtrType) ToComponentBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesPtrOutput)
}

type ComponentBindingPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingProperties)(nil)).Elem()
}

func (o ComponentBindingPropertiesOutput) ToComponentBindingPropertiesOutput() ComponentBindingPropertiesOutput {
	return o
}

func (o ComponentBindingPropertiesOutput) ToComponentBindingPropertiesOutputWithContext(ctx context.Context) ComponentBindingPropertiesOutput {
	return o
}

func (o ComponentBindingPropertiesOutput) ToComponentBindingPropertiesPtrOutput() ComponentBindingPropertiesPtrOutput {
	return o.ToComponentBindingPropertiesPtrOutputWithContext(context.Background())
}

func (o ComponentBindingPropertiesOutput) ToComponentBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentBindingProperties) *ComponentBindingProperties {
		return &v
	}).(ComponentBindingPropertiesPtrOutput)
}

type ComponentBindingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentBindingProperties)(nil)).Elem()
}

func (o ComponentBindingPropertiesPtrOutput) ToComponentBindingPropertiesPtrOutput() ComponentBindingPropertiesPtrOutput {
	return o
}

func (o ComponentBindingPropertiesPtrOutput) ToComponentBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesPtrOutput {
	return o
}

func (o ComponentBindingPropertiesPtrOutput) Elem() ComponentBindingPropertiesOutput {
	return o.ApplyT(func(v *ComponentBindingProperties) ComponentBindingProperties {
		if v != nil {
			return *v
		}
		var ret ComponentBindingProperties
		return ret
	}).(ComponentBindingPropertiesOutput)
}

type ComponentChild struct {
	Children      []ComponentChild    `pulumi:"children"`
	ComponentType string              `pulumi:"componentType"`
	Name          string              `pulumi:"name"`
	Properties    ComponentProperties `pulumi:"properties"`
}

// ComponentChildInput is an input type that accepts ComponentChildArgs and ComponentChildOutput values.
// You can construct a concrete instance of `ComponentChildInput` via:
//
//          ComponentChildArgs{...}
type ComponentChildInput interface {
	pulumi.Input

	ToComponentChildOutput() ComponentChildOutput
	ToComponentChildOutputWithContext(context.Context) ComponentChildOutput
}

type ComponentChildArgs struct {
	Children      ComponentChildArrayInput `pulumi:"children"`
	ComponentType pulumi.StringInput       `pulumi:"componentType"`
	Name          pulumi.StringInput       `pulumi:"name"`
	Properties    ComponentPropertiesInput `pulumi:"properties"`
}

func (ComponentChildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentChild)(nil)).Elem()
}

func (i ComponentChildArgs) ToComponentChildOutput() ComponentChildOutput {
	return i.ToComponentChildOutputWithContext(context.Background())
}

func (i ComponentChildArgs) ToComponentChildOutputWithContext(ctx context.Context) ComponentChildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentChildOutput)
}

// ComponentChildArrayInput is an input type that accepts ComponentChildArray and ComponentChildArrayOutput values.
// You can construct a concrete instance of `ComponentChildArrayInput` via:
//
//          ComponentChildArray{ ComponentChildArgs{...} }
type ComponentChildArrayInput interface {
	pulumi.Input

	ToComponentChildArrayOutput() ComponentChildArrayOutput
	ToComponentChildArrayOutputWithContext(context.Context) ComponentChildArrayOutput
}

type ComponentChildArray []ComponentChildInput

func (ComponentChildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentChild)(nil)).Elem()
}

func (i ComponentChildArray) ToComponentChildArrayOutput() ComponentChildArrayOutput {
	return i.ToComponentChildArrayOutputWithContext(context.Background())
}

func (i ComponentChildArray) ToComponentChildArrayOutputWithContext(ctx context.Context) ComponentChildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentChildArrayOutput)
}

type ComponentChildOutput struct{ *pulumi.OutputState }

func (ComponentChildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentChild)(nil)).Elem()
}

func (o ComponentChildOutput) ToComponentChildOutput() ComponentChildOutput {
	return o
}

func (o ComponentChildOutput) ToComponentChildOutputWithContext(ctx context.Context) ComponentChildOutput {
	return o
}

func (o ComponentChildOutput) Children() ComponentChildArrayOutput {
	return o.ApplyT(func(v ComponentChild) []ComponentChild { return v.Children }).(ComponentChildArrayOutput)
}

func (o ComponentChildOutput) ComponentType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentChild) string { return v.ComponentType }).(pulumi.StringOutput)
}

func (o ComponentChildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentChild) string { return v.Name }).(pulumi.StringOutput)
}

func (o ComponentChildOutput) Properties() ComponentPropertiesOutput {
	return o.ApplyT(func(v ComponentChild) ComponentProperties { return v.Properties }).(ComponentPropertiesOutput)
}

type ComponentChildArrayOutput struct{ *pulumi.OutputState }

func (ComponentChildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentChild)(nil)).Elem()
}

func (o ComponentChildArrayOutput) ToComponentChildArrayOutput() ComponentChildArrayOutput {
	return o
}

func (o ComponentChildArrayOutput) ToComponentChildArrayOutputWithContext(ctx context.Context) ComponentChildArrayOutput {
	return o
}

func (o ComponentChildArrayOutput) Index(i pulumi.IntInput) ComponentChildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentChild {
		return vs[0].([]ComponentChild)[vs[1].(int)]
	}).(ComponentChildOutput)
}

type ComponentCollectionProperties struct {
}

// ComponentCollectionPropertiesInput is an input type that accepts ComponentCollectionPropertiesArgs and ComponentCollectionPropertiesOutput values.
// You can construct a concrete instance of `ComponentCollectionPropertiesInput` via:
//
//          ComponentCollectionPropertiesArgs{...}
type ComponentCollectionPropertiesInput interface {
	pulumi.Input

	ToComponentCollectionPropertiesOutput() ComponentCollectionPropertiesOutput
	ToComponentCollectionPropertiesOutputWithContext(context.Context) ComponentCollectionPropertiesOutput
}

type ComponentCollectionPropertiesArgs struct {
}

func (ComponentCollectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentCollectionProperties)(nil)).Elem()
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesOutput() ComponentCollectionPropertiesOutput {
	return i.ToComponentCollectionPropertiesOutputWithContext(context.Background())
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesOutputWithContext(ctx context.Context) ComponentCollectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentCollectionPropertiesOutput)
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return i.ToComponentCollectionPropertiesPtrOutputWithContext(context.Background())
}

func (i ComponentCollectionPropertiesArgs) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentCollectionPropertiesOutput).ToComponentCollectionPropertiesPtrOutputWithContext(ctx)
}

// ComponentCollectionPropertiesPtrInput is an input type that accepts ComponentCollectionPropertiesArgs, ComponentCollectionPropertiesPtr and ComponentCollectionPropertiesPtrOutput values.
// You can construct a concrete instance of `ComponentCollectionPropertiesPtrInput` via:
//
//          ComponentCollectionPropertiesArgs{...}
//
//  or:
//
//          nil
type ComponentCollectionPropertiesPtrInput interface {
	pulumi.Input

	ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput
	ToComponentCollectionPropertiesPtrOutputWithContext(context.Context) ComponentCollectionPropertiesPtrOutput
}

type componentCollectionPropertiesPtrType ComponentCollectionPropertiesArgs

func ComponentCollectionPropertiesPtr(v *ComponentCollectionPropertiesArgs) ComponentCollectionPropertiesPtrInput {
	return (*componentCollectionPropertiesPtrType)(v)
}

func (*componentCollectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentCollectionProperties)(nil)).Elem()
}

func (i *componentCollectionPropertiesPtrType) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return i.ToComponentCollectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *componentCollectionPropertiesPtrType) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentCollectionPropertiesPtrOutput)
}

type ComponentCollectionPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentCollectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentCollectionProperties)(nil)).Elem()
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesOutput() ComponentCollectionPropertiesOutput {
	return o
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesOutputWithContext(ctx context.Context) ComponentCollectionPropertiesOutput {
	return o
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return o.ToComponentCollectionPropertiesPtrOutputWithContext(context.Background())
}

func (o ComponentCollectionPropertiesOutput) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentCollectionProperties) *ComponentCollectionProperties {
		return &v
	}).(ComponentCollectionPropertiesPtrOutput)
}

type ComponentCollectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentCollectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentCollectionProperties)(nil)).Elem()
}

func (o ComponentCollectionPropertiesPtrOutput) ToComponentCollectionPropertiesPtrOutput() ComponentCollectionPropertiesPtrOutput {
	return o
}

func (o ComponentCollectionPropertiesPtrOutput) ToComponentCollectionPropertiesPtrOutputWithContext(ctx context.Context) ComponentCollectionPropertiesPtrOutput {
	return o
}

func (o ComponentCollectionPropertiesPtrOutput) Elem() ComponentCollectionPropertiesOutput {
	return o.ApplyT(func(v *ComponentCollectionProperties) ComponentCollectionProperties {
		if v != nil {
			return *v
		}
		var ret ComponentCollectionProperties
		return ret
	}).(ComponentCollectionPropertiesOutput)
}

type ComponentOverrides struct {
}

// ComponentOverridesInput is an input type that accepts ComponentOverridesArgs and ComponentOverridesOutput values.
// You can construct a concrete instance of `ComponentOverridesInput` via:
//
//          ComponentOverridesArgs{...}
type ComponentOverridesInput interface {
	pulumi.Input

	ToComponentOverridesOutput() ComponentOverridesOutput
	ToComponentOverridesOutputWithContext(context.Context) ComponentOverridesOutput
}

type ComponentOverridesArgs struct {
}

func (ComponentOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentOverrides)(nil)).Elem()
}

func (i ComponentOverridesArgs) ToComponentOverridesOutput() ComponentOverridesOutput {
	return i.ToComponentOverridesOutputWithContext(context.Background())
}

func (i ComponentOverridesArgs) ToComponentOverridesOutputWithContext(ctx context.Context) ComponentOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOverridesOutput)
}

func (i ComponentOverridesArgs) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return i.ToComponentOverridesPtrOutputWithContext(context.Background())
}

func (i ComponentOverridesArgs) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOverridesOutput).ToComponentOverridesPtrOutputWithContext(ctx)
}

// ComponentOverridesPtrInput is an input type that accepts ComponentOverridesArgs, ComponentOverridesPtr and ComponentOverridesPtrOutput values.
// You can construct a concrete instance of `ComponentOverridesPtrInput` via:
//
//          ComponentOverridesArgs{...}
//
//  or:
//
//          nil
type ComponentOverridesPtrInput interface {
	pulumi.Input

	ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput
	ToComponentOverridesPtrOutputWithContext(context.Context) ComponentOverridesPtrOutput
}

type componentOverridesPtrType ComponentOverridesArgs

func ComponentOverridesPtr(v *ComponentOverridesArgs) ComponentOverridesPtrInput {
	return (*componentOverridesPtrType)(v)
}

func (*componentOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentOverrides)(nil)).Elem()
}

func (i *componentOverridesPtrType) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return i.ToComponentOverridesPtrOutputWithContext(context.Background())
}

func (i *componentOverridesPtrType) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOverridesPtrOutput)
}

type ComponentOverridesOutput struct{ *pulumi.OutputState }

func (ComponentOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentOverrides)(nil)).Elem()
}

func (o ComponentOverridesOutput) ToComponentOverridesOutput() ComponentOverridesOutput {
	return o
}

func (o ComponentOverridesOutput) ToComponentOverridesOutputWithContext(ctx context.Context) ComponentOverridesOutput {
	return o
}

func (o ComponentOverridesOutput) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return o.ToComponentOverridesPtrOutputWithContext(context.Background())
}

func (o ComponentOverridesOutput) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentOverrides) *ComponentOverrides {
		return &v
	}).(ComponentOverridesPtrOutput)
}

type ComponentOverridesPtrOutput struct{ *pulumi.OutputState }

func (ComponentOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentOverrides)(nil)).Elem()
}

func (o ComponentOverridesPtrOutput) ToComponentOverridesPtrOutput() ComponentOverridesPtrOutput {
	return o
}

func (o ComponentOverridesPtrOutput) ToComponentOverridesPtrOutputWithContext(ctx context.Context) ComponentOverridesPtrOutput {
	return o
}

func (o ComponentOverridesPtrOutput) Elem() ComponentOverridesOutput {
	return o.ApplyT(func(v *ComponentOverrides) ComponentOverrides {
		if v != nil {
			return *v
		}
		var ret ComponentOverrides
		return ret
	}).(ComponentOverridesOutput)
}

type ComponentProperties struct {
}

// ComponentPropertiesInput is an input type that accepts ComponentPropertiesArgs and ComponentPropertiesOutput values.
// You can construct a concrete instance of `ComponentPropertiesInput` via:
//
//          ComponentPropertiesArgs{...}
type ComponentPropertiesInput interface {
	pulumi.Input

	ToComponentPropertiesOutput() ComponentPropertiesOutput
	ToComponentPropertiesOutputWithContext(context.Context) ComponentPropertiesOutput
}

type ComponentPropertiesArgs struct {
}

func (ComponentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperties)(nil)).Elem()
}

func (i ComponentPropertiesArgs) ToComponentPropertiesOutput() ComponentPropertiesOutput {
	return i.ToComponentPropertiesOutputWithContext(context.Background())
}

func (i ComponentPropertiesArgs) ToComponentPropertiesOutputWithContext(ctx context.Context) ComponentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertiesOutput)
}

func (i ComponentPropertiesArgs) ToComponentPropertiesPtrOutput() ComponentPropertiesPtrOutput {
	return i.ToComponentPropertiesPtrOutputWithContext(context.Background())
}

func (i ComponentPropertiesArgs) ToComponentPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertiesOutput).ToComponentPropertiesPtrOutputWithContext(ctx)
}

// ComponentPropertiesPtrInput is an input type that accepts ComponentPropertiesArgs, ComponentPropertiesPtr and ComponentPropertiesPtrOutput values.
// You can construct a concrete instance of `ComponentPropertiesPtrInput` via:
//
//          ComponentPropertiesArgs{...}
//
//  or:
//
//          nil
type ComponentPropertiesPtrInput interface {
	pulumi.Input

	ToComponentPropertiesPtrOutput() ComponentPropertiesPtrOutput
	ToComponentPropertiesPtrOutputWithContext(context.Context) ComponentPropertiesPtrOutput
}

type componentPropertiesPtrType ComponentPropertiesArgs

func ComponentPropertiesPtr(v *ComponentPropertiesArgs) ComponentPropertiesPtrInput {
	return (*componentPropertiesPtrType)(v)
}

func (*componentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentProperties)(nil)).Elem()
}

func (i *componentPropertiesPtrType) ToComponentPropertiesPtrOutput() ComponentPropertiesPtrOutput {
	return i.ToComponentPropertiesPtrOutputWithContext(context.Background())
}

func (i *componentPropertiesPtrType) ToComponentPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertiesPtrOutput)
}

type ComponentPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperties)(nil)).Elem()
}

func (o ComponentPropertiesOutput) ToComponentPropertiesOutput() ComponentPropertiesOutput {
	return o
}

func (o ComponentPropertiesOutput) ToComponentPropertiesOutputWithContext(ctx context.Context) ComponentPropertiesOutput {
	return o
}

func (o ComponentPropertiesOutput) ToComponentPropertiesPtrOutput() ComponentPropertiesPtrOutput {
	return o.ToComponentPropertiesPtrOutputWithContext(context.Background())
}

func (o ComponentPropertiesOutput) ToComponentPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentProperties) *ComponentProperties {
		return &v
	}).(ComponentPropertiesPtrOutput)
}

type ComponentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentProperties)(nil)).Elem()
}

func (o ComponentPropertiesPtrOutput) ToComponentPropertiesPtrOutput() ComponentPropertiesPtrOutput {
	return o
}

func (o ComponentPropertiesPtrOutput) ToComponentPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertiesPtrOutput {
	return o
}

func (o ComponentPropertiesPtrOutput) Elem() ComponentPropertiesOutput {
	return o.ApplyT(func(v *ComponentProperties) ComponentProperties {
		if v != nil {
			return *v
		}
		var ret ComponentProperties
		return ret
	}).(ComponentPropertiesOutput)
}

type ComponentTags struct {
}

// ComponentTagsInput is an input type that accepts ComponentTagsArgs and ComponentTagsOutput values.
// You can construct a concrete instance of `ComponentTagsInput` via:
//
//          ComponentTagsArgs{...}
type ComponentTagsInput interface {
	pulumi.Input

	ToComponentTagsOutput() ComponentTagsOutput
	ToComponentTagsOutputWithContext(context.Context) ComponentTagsOutput
}

type ComponentTagsArgs struct {
}

func (ComponentTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTags)(nil)).Elem()
}

func (i ComponentTagsArgs) ToComponentTagsOutput() ComponentTagsOutput {
	return i.ToComponentTagsOutputWithContext(context.Background())
}

func (i ComponentTagsArgs) ToComponentTagsOutputWithContext(ctx context.Context) ComponentTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagsOutput)
}

func (i ComponentTagsArgs) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return i.ToComponentTagsPtrOutputWithContext(context.Background())
}

func (i ComponentTagsArgs) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagsOutput).ToComponentTagsPtrOutputWithContext(ctx)
}

// ComponentTagsPtrInput is an input type that accepts ComponentTagsArgs, ComponentTagsPtr and ComponentTagsPtrOutput values.
// You can construct a concrete instance of `ComponentTagsPtrInput` via:
//
//          ComponentTagsArgs{...}
//
//  or:
//
//          nil
type ComponentTagsPtrInput interface {
	pulumi.Input

	ToComponentTagsPtrOutput() ComponentTagsPtrOutput
	ToComponentTagsPtrOutputWithContext(context.Context) ComponentTagsPtrOutput
}

type componentTagsPtrType ComponentTagsArgs

func ComponentTagsPtr(v *ComponentTagsArgs) ComponentTagsPtrInput {
	return (*componentTagsPtrType)(v)
}

func (*componentTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTags)(nil)).Elem()
}

func (i *componentTagsPtrType) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return i.ToComponentTagsPtrOutputWithContext(context.Background())
}

func (i *componentTagsPtrType) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTagsPtrOutput)
}

type ComponentTagsOutput struct{ *pulumi.OutputState }

func (ComponentTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTags)(nil)).Elem()
}

func (o ComponentTagsOutput) ToComponentTagsOutput() ComponentTagsOutput {
	return o
}

func (o ComponentTagsOutput) ToComponentTagsOutputWithContext(ctx context.Context) ComponentTagsOutput {
	return o
}

func (o ComponentTagsOutput) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return o.ToComponentTagsPtrOutputWithContext(context.Background())
}

func (o ComponentTagsOutput) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentTags) *ComponentTags {
		return &v
	}).(ComponentTagsPtrOutput)
}

type ComponentTagsPtrOutput struct{ *pulumi.OutputState }

func (ComponentTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTags)(nil)).Elem()
}

func (o ComponentTagsPtrOutput) ToComponentTagsPtrOutput() ComponentTagsPtrOutput {
	return o
}

func (o ComponentTagsPtrOutput) ToComponentTagsPtrOutputWithContext(ctx context.Context) ComponentTagsPtrOutput {
	return o
}

func (o ComponentTagsPtrOutput) Elem() ComponentTagsOutput {
	return o.ApplyT(func(v *ComponentTags) ComponentTags {
		if v != nil {
			return *v
		}
		var ret ComponentTags
		return ret
	}).(ComponentTagsOutput)
}

type ComponentVariant struct {
	Overrides     *ComponentOverrides     `pulumi:"overrides"`
	VariantValues *ComponentVariantValues `pulumi:"variantValues"`
}

// ComponentVariantInput is an input type that accepts ComponentVariantArgs and ComponentVariantOutput values.
// You can construct a concrete instance of `ComponentVariantInput` via:
//
//          ComponentVariantArgs{...}
type ComponentVariantInput interface {
	pulumi.Input

	ToComponentVariantOutput() ComponentVariantOutput
	ToComponentVariantOutputWithContext(context.Context) ComponentVariantOutput
}

type ComponentVariantArgs struct {
	Overrides     ComponentOverridesPtrInput     `pulumi:"overrides"`
	VariantValues ComponentVariantValuesPtrInput `pulumi:"variantValues"`
}

func (ComponentVariantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariant)(nil)).Elem()
}

func (i ComponentVariantArgs) ToComponentVariantOutput() ComponentVariantOutput {
	return i.ToComponentVariantOutputWithContext(context.Background())
}

func (i ComponentVariantArgs) ToComponentVariantOutputWithContext(ctx context.Context) ComponentVariantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantOutput)
}

// ComponentVariantArrayInput is an input type that accepts ComponentVariantArray and ComponentVariantArrayOutput values.
// You can construct a concrete instance of `ComponentVariantArrayInput` via:
//
//          ComponentVariantArray{ ComponentVariantArgs{...} }
type ComponentVariantArrayInput interface {
	pulumi.Input

	ToComponentVariantArrayOutput() ComponentVariantArrayOutput
	ToComponentVariantArrayOutputWithContext(context.Context) ComponentVariantArrayOutput
}

type ComponentVariantArray []ComponentVariantInput

func (ComponentVariantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentVariant)(nil)).Elem()
}

func (i ComponentVariantArray) ToComponentVariantArrayOutput() ComponentVariantArrayOutput {
	return i.ToComponentVariantArrayOutputWithContext(context.Background())
}

func (i ComponentVariantArray) ToComponentVariantArrayOutputWithContext(ctx context.Context) ComponentVariantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantArrayOutput)
}

type ComponentVariantOutput struct{ *pulumi.OutputState }

func (ComponentVariantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariant)(nil)).Elem()
}

func (o ComponentVariantOutput) ToComponentVariantOutput() ComponentVariantOutput {
	return o
}

func (o ComponentVariantOutput) ToComponentVariantOutputWithContext(ctx context.Context) ComponentVariantOutput {
	return o
}

func (o ComponentVariantOutput) Overrides() ComponentOverridesPtrOutput {
	return o.ApplyT(func(v ComponentVariant) *ComponentOverrides { return v.Overrides }).(ComponentOverridesPtrOutput)
}

func (o ComponentVariantOutput) VariantValues() ComponentVariantValuesPtrOutput {
	return o.ApplyT(func(v ComponentVariant) *ComponentVariantValues { return v.VariantValues }).(ComponentVariantValuesPtrOutput)
}

type ComponentVariantArrayOutput struct{ *pulumi.OutputState }

func (ComponentVariantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentVariant)(nil)).Elem()
}

func (o ComponentVariantArrayOutput) ToComponentVariantArrayOutput() ComponentVariantArrayOutput {
	return o
}

func (o ComponentVariantArrayOutput) ToComponentVariantArrayOutputWithContext(ctx context.Context) ComponentVariantArrayOutput {
	return o
}

func (o ComponentVariantArrayOutput) Index(i pulumi.IntInput) ComponentVariantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentVariant {
		return vs[0].([]ComponentVariant)[vs[1].(int)]
	}).(ComponentVariantOutput)
}

type ComponentVariantValues struct {
}

// ComponentVariantValuesInput is an input type that accepts ComponentVariantValuesArgs and ComponentVariantValuesOutput values.
// You can construct a concrete instance of `ComponentVariantValuesInput` via:
//
//          ComponentVariantValuesArgs{...}
type ComponentVariantValuesInput interface {
	pulumi.Input

	ToComponentVariantValuesOutput() ComponentVariantValuesOutput
	ToComponentVariantValuesOutputWithContext(context.Context) ComponentVariantValuesOutput
}

type ComponentVariantValuesArgs struct {
}

func (ComponentVariantValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariantValues)(nil)).Elem()
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesOutput() ComponentVariantValuesOutput {
	return i.ToComponentVariantValuesOutputWithContext(context.Background())
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesOutputWithContext(ctx context.Context) ComponentVariantValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantValuesOutput)
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return i.ToComponentVariantValuesPtrOutputWithContext(context.Background())
}

func (i ComponentVariantValuesArgs) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantValuesOutput).ToComponentVariantValuesPtrOutputWithContext(ctx)
}

// ComponentVariantValuesPtrInput is an input type that accepts ComponentVariantValuesArgs, ComponentVariantValuesPtr and ComponentVariantValuesPtrOutput values.
// You can construct a concrete instance of `ComponentVariantValuesPtrInput` via:
//
//          ComponentVariantValuesArgs{...}
//
//  or:
//
//          nil
type ComponentVariantValuesPtrInput interface {
	pulumi.Input

	ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput
	ToComponentVariantValuesPtrOutputWithContext(context.Context) ComponentVariantValuesPtrOutput
}

type componentVariantValuesPtrType ComponentVariantValuesArgs

func ComponentVariantValuesPtr(v *ComponentVariantValuesArgs) ComponentVariantValuesPtrInput {
	return (*componentVariantValuesPtrType)(v)
}

func (*componentVariantValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentVariantValues)(nil)).Elem()
}

func (i *componentVariantValuesPtrType) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return i.ToComponentVariantValuesPtrOutputWithContext(context.Background())
}

func (i *componentVariantValuesPtrType) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantValuesPtrOutput)
}

type ComponentVariantValuesOutput struct{ *pulumi.OutputState }

func (ComponentVariantValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariantValues)(nil)).Elem()
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesOutput() ComponentVariantValuesOutput {
	return o
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesOutputWithContext(ctx context.Context) ComponentVariantValuesOutput {
	return o
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return o.ToComponentVariantValuesPtrOutputWithContext(context.Background())
}

func (o ComponentVariantValuesOutput) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentVariantValues) *ComponentVariantValues {
		return &v
	}).(ComponentVariantValuesPtrOutput)
}

type ComponentVariantValuesPtrOutput struct{ *pulumi.OutputState }

func (ComponentVariantValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentVariantValues)(nil)).Elem()
}

func (o ComponentVariantValuesPtrOutput) ToComponentVariantValuesPtrOutput() ComponentVariantValuesPtrOutput {
	return o
}

func (o ComponentVariantValuesPtrOutput) ToComponentVariantValuesPtrOutputWithContext(ctx context.Context) ComponentVariantValuesPtrOutput {
	return o
}

func (o ComponentVariantValuesPtrOutput) Elem() ComponentVariantValuesOutput {
	return o.ApplyT(func(v *ComponentVariantValues) ComponentVariantValues {
		if v != nil {
			return *v
		}
		var ret ComponentVariantValues
		return ret
	}).(ComponentVariantValuesOutput)
}

type ThemeTags struct {
}

// ThemeTagsInput is an input type that accepts ThemeTagsArgs and ThemeTagsOutput values.
// You can construct a concrete instance of `ThemeTagsInput` via:
//
//          ThemeTagsArgs{...}
type ThemeTagsInput interface {
	pulumi.Input

	ToThemeTagsOutput() ThemeTagsOutput
	ToThemeTagsOutputWithContext(context.Context) ThemeTagsOutput
}

type ThemeTagsArgs struct {
}

func (ThemeTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTags)(nil)).Elem()
}

func (i ThemeTagsArgs) ToThemeTagsOutput() ThemeTagsOutput {
	return i.ToThemeTagsOutputWithContext(context.Background())
}

func (i ThemeTagsArgs) ToThemeTagsOutputWithContext(ctx context.Context) ThemeTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagsOutput)
}

func (i ThemeTagsArgs) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return i.ToThemeTagsPtrOutputWithContext(context.Background())
}

func (i ThemeTagsArgs) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagsOutput).ToThemeTagsPtrOutputWithContext(ctx)
}

// ThemeTagsPtrInput is an input type that accepts ThemeTagsArgs, ThemeTagsPtr and ThemeTagsPtrOutput values.
// You can construct a concrete instance of `ThemeTagsPtrInput` via:
//
//          ThemeTagsArgs{...}
//
//  or:
//
//          nil
type ThemeTagsPtrInput interface {
	pulumi.Input

	ToThemeTagsPtrOutput() ThemeTagsPtrOutput
	ToThemeTagsPtrOutputWithContext(context.Context) ThemeTagsPtrOutput
}

type themeTagsPtrType ThemeTagsArgs

func ThemeTagsPtr(v *ThemeTagsArgs) ThemeTagsPtrInput {
	return (*themeTagsPtrType)(v)
}

func (*themeTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTags)(nil)).Elem()
}

func (i *themeTagsPtrType) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return i.ToThemeTagsPtrOutputWithContext(context.Background())
}

func (i *themeTagsPtrType) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTagsPtrOutput)
}

type ThemeTagsOutput struct{ *pulumi.OutputState }

func (ThemeTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTags)(nil)).Elem()
}

func (o ThemeTagsOutput) ToThemeTagsOutput() ThemeTagsOutput {
	return o
}

func (o ThemeTagsOutput) ToThemeTagsOutputWithContext(ctx context.Context) ThemeTagsOutput {
	return o
}

func (o ThemeTagsOutput) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return o.ToThemeTagsPtrOutputWithContext(context.Background())
}

func (o ThemeTagsOutput) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTags) *ThemeTags {
		return &v
	}).(ThemeTagsPtrOutput)
}

type ThemeTagsPtrOutput struct{ *pulumi.OutputState }

func (ThemeTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTags)(nil)).Elem()
}

func (o ThemeTagsPtrOutput) ToThemeTagsPtrOutput() ThemeTagsPtrOutput {
	return o
}

func (o ThemeTagsPtrOutput) ToThemeTagsPtrOutputWithContext(ctx context.Context) ThemeTagsPtrOutput {
	return o
}

func (o ThemeTagsPtrOutput) Elem() ThemeTagsOutput {
	return o.ApplyT(func(v *ThemeTags) ThemeTags {
		if v != nil {
			return *v
		}
		var ret ThemeTags
		return ret
	}).(ThemeTagsOutput)
}

type ThemeValue struct {
	Children []ThemeValues `pulumi:"children"`
	Value    *string       `pulumi:"value"`
}

// ThemeValueInput is an input type that accepts ThemeValueArgs and ThemeValueOutput values.
// You can construct a concrete instance of `ThemeValueInput` via:
//
//          ThemeValueArgs{...}
type ThemeValueInput interface {
	pulumi.Input

	ToThemeValueOutput() ThemeValueOutput
	ToThemeValueOutputWithContext(context.Context) ThemeValueOutput
}

type ThemeValueArgs struct {
	Children ThemeValuesArrayInput `pulumi:"children"`
	Value    pulumi.StringPtrInput `pulumi:"value"`
}

func (ThemeValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValue)(nil)).Elem()
}

func (i ThemeValueArgs) ToThemeValueOutput() ThemeValueOutput {
	return i.ToThemeValueOutputWithContext(context.Background())
}

func (i ThemeValueArgs) ToThemeValueOutputWithContext(ctx context.Context) ThemeValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValueOutput)
}

func (i ThemeValueArgs) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return i.ToThemeValuePtrOutputWithContext(context.Background())
}

func (i ThemeValueArgs) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValueOutput).ToThemeValuePtrOutputWithContext(ctx)
}

// ThemeValuePtrInput is an input type that accepts ThemeValueArgs, ThemeValuePtr and ThemeValuePtrOutput values.
// You can construct a concrete instance of `ThemeValuePtrInput` via:
//
//          ThemeValueArgs{...}
//
//  or:
//
//          nil
type ThemeValuePtrInput interface {
	pulumi.Input

	ToThemeValuePtrOutput() ThemeValuePtrOutput
	ToThemeValuePtrOutputWithContext(context.Context) ThemeValuePtrOutput
}

type themeValuePtrType ThemeValueArgs

func ThemeValuePtr(v *ThemeValueArgs) ThemeValuePtrInput {
	return (*themeValuePtrType)(v)
}

func (*themeValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeValue)(nil)).Elem()
}

func (i *themeValuePtrType) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return i.ToThemeValuePtrOutputWithContext(context.Background())
}

func (i *themeValuePtrType) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuePtrOutput)
}

type ThemeValueOutput struct{ *pulumi.OutputState }

func (ThemeValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValue)(nil)).Elem()
}

func (o ThemeValueOutput) ToThemeValueOutput() ThemeValueOutput {
	return o
}

func (o ThemeValueOutput) ToThemeValueOutputWithContext(ctx context.Context) ThemeValueOutput {
	return o
}

func (o ThemeValueOutput) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return o.ToThemeValuePtrOutputWithContext(context.Background())
}

func (o ThemeValueOutput) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeValue) *ThemeValue {
		return &v
	}).(ThemeValuePtrOutput)
}

func (o ThemeValueOutput) Children() ThemeValuesArrayOutput {
	return o.ApplyT(func(v ThemeValue) []ThemeValues { return v.Children }).(ThemeValuesArrayOutput)
}

func (o ThemeValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThemeValuePtrOutput struct{ *pulumi.OutputState }

func (ThemeValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeValue)(nil)).Elem()
}

func (o ThemeValuePtrOutput) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return o
}

func (o ThemeValuePtrOutput) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return o
}

func (o ThemeValuePtrOutput) Elem() ThemeValueOutput {
	return o.ApplyT(func(v *ThemeValue) ThemeValue {
		if v != nil {
			return *v
		}
		var ret ThemeValue
		return ret
	}).(ThemeValueOutput)
}

func (o ThemeValuePtrOutput) Children() ThemeValuesArrayOutput {
	return o.ApplyT(func(v *ThemeValue) []ThemeValues {
		if v == nil {
			return nil
		}
		return v.Children
	}).(ThemeValuesArrayOutput)
}

func (o ThemeValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeValue) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type ThemeValues struct {
	Key   *string     `pulumi:"key"`
	Value *ThemeValue `pulumi:"value"`
}

// ThemeValuesInput is an input type that accepts ThemeValuesArgs and ThemeValuesOutput values.
// You can construct a concrete instance of `ThemeValuesInput` via:
//
//          ThemeValuesArgs{...}
type ThemeValuesInput interface {
	pulumi.Input

	ToThemeValuesOutput() ThemeValuesOutput
	ToThemeValuesOutputWithContext(context.Context) ThemeValuesOutput
}

type ThemeValuesArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value ThemeValuePtrInput    `pulumi:"value"`
}

func (ThemeValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValues)(nil)).Elem()
}

func (i ThemeValuesArgs) ToThemeValuesOutput() ThemeValuesOutput {
	return i.ToThemeValuesOutputWithContext(context.Background())
}

func (i ThemeValuesArgs) ToThemeValuesOutputWithContext(ctx context.Context) ThemeValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuesOutput)
}

// ThemeValuesArrayInput is an input type that accepts ThemeValuesArray and ThemeValuesArrayOutput values.
// You can construct a concrete instance of `ThemeValuesArrayInput` via:
//
//          ThemeValuesArray{ ThemeValuesArgs{...} }
type ThemeValuesArrayInput interface {
	pulumi.Input

	ToThemeValuesArrayOutput() ThemeValuesArrayOutput
	ToThemeValuesArrayOutputWithContext(context.Context) ThemeValuesArrayOutput
}

type ThemeValuesArray []ThemeValuesInput

func (ThemeValuesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeValues)(nil)).Elem()
}

func (i ThemeValuesArray) ToThemeValuesArrayOutput() ThemeValuesArrayOutput {
	return i.ToThemeValuesArrayOutputWithContext(context.Background())
}

func (i ThemeValuesArray) ToThemeValuesArrayOutputWithContext(ctx context.Context) ThemeValuesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuesArrayOutput)
}

type ThemeValuesOutput struct{ *pulumi.OutputState }

func (ThemeValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValues)(nil)).Elem()
}

func (o ThemeValuesOutput) ToThemeValuesOutput() ThemeValuesOutput {
	return o
}

func (o ThemeValuesOutput) ToThemeValuesOutputWithContext(ctx context.Context) ThemeValuesOutput {
	return o
}

func (o ThemeValuesOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeValues) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ThemeValuesOutput) Value() ThemeValuePtrOutput {
	return o.ApplyT(func(v ThemeValues) *ThemeValue { return v.Value }).(ThemeValuePtrOutput)
}

type ThemeValuesArrayOutput struct{ *pulumi.OutputState }

func (ThemeValuesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeValues)(nil)).Elem()
}

func (o ThemeValuesArrayOutput) ToThemeValuesArrayOutput() ThemeValuesArrayOutput {
	return o
}

func (o ThemeValuesArrayOutput) ToThemeValuesArrayOutputWithContext(ctx context.Context) ThemeValuesArrayOutput {
	return o
}

func (o ThemeValuesArrayOutput) Index(i pulumi.IntInput) ThemeValuesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeValues {
		return vs[0].([]ThemeValues)[vs[1].(int)]
	}).(ThemeValuesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentBindingPropertiesInput)(nil)).Elem(), ComponentBindingPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentBindingPropertiesPtrInput)(nil)).Elem(), ComponentBindingPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentChildInput)(nil)).Elem(), ComponentChildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentChildArrayInput)(nil)).Elem(), ComponentChildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentCollectionPropertiesInput)(nil)).Elem(), ComponentCollectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentCollectionPropertiesPtrInput)(nil)).Elem(), ComponentCollectionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentOverridesInput)(nil)).Elem(), ComponentOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentOverridesPtrInput)(nil)).Elem(), ComponentOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertiesInput)(nil)).Elem(), ComponentPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertiesPtrInput)(nil)).Elem(), ComponentPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTagsInput)(nil)).Elem(), ComponentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTagsPtrInput)(nil)).Elem(), ComponentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantInput)(nil)).Elem(), ComponentVariantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantArrayInput)(nil)).Elem(), ComponentVariantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantValuesInput)(nil)).Elem(), ComponentVariantValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantValuesPtrInput)(nil)).Elem(), ComponentVariantValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTagsInput)(nil)).Elem(), ThemeTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTagsPtrInput)(nil)).Elem(), ThemeTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValueInput)(nil)).Elem(), ThemeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuePtrInput)(nil)).Elem(), ThemeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuesInput)(nil)).Elem(), ThemeValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuesArrayInput)(nil)).Elem(), ThemeValuesArray{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentChildOutput{})
	pulumi.RegisterOutputType(ComponentChildArrayOutput{})
	pulumi.RegisterOutputType(ComponentCollectionPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentCollectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentOverridesOutput{})
	pulumi.RegisterOutputType(ComponentOverridesPtrOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentTagsOutput{})
	pulumi.RegisterOutputType(ComponentTagsPtrOutput{})
	pulumi.RegisterOutputType(ComponentVariantOutput{})
	pulumi.RegisterOutputType(ComponentVariantArrayOutput{})
	pulumi.RegisterOutputType(ComponentVariantValuesOutput{})
	pulumi.RegisterOutputType(ComponentVariantValuesPtrOutput{})
	pulumi.RegisterOutputType(ThemeTagsOutput{})
	pulumi.RegisterOutputType(ThemeTagsPtrOutput{})
	pulumi.RegisterOutputType(ThemeValueOutput{})
	pulumi.RegisterOutputType(ThemeValuePtrOutput{})
	pulumi.RegisterOutputType(ThemeValuesOutput{})
	pulumi.RegisterOutputType(ThemeValuesArrayOutput{})
}
