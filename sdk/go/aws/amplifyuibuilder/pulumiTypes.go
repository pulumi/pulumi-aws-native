// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplifyuibuilder

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ComponentActionParameters struct {
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Anchor *ComponentProperty `pulumi:"anchor"`
	// A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.
	Fields map[string]ComponentProperty `pulumi:"fields"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Global *ComponentProperty `pulumi:"global"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Id *ComponentProperty `pulumi:"id"`
	// The name of the data model. Use when the action performs an operation on an Amplify DataStore model.
	Model *string `pulumi:"model"`
	// Represents the state configuration when an action modifies a property of another element within the same component.
	State *ComponentMutationActionSetStateParameter `pulumi:"state"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Target *ComponentProperty `pulumi:"target"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Type *ComponentProperty `pulumi:"type"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Url *ComponentProperty `pulumi:"url"`
}

// ComponentActionParametersInput is an input type that accepts ComponentActionParametersArgs and ComponentActionParametersOutput values.
// You can construct a concrete instance of `ComponentActionParametersInput` via:
//
//	ComponentActionParametersArgs{...}
type ComponentActionParametersInput interface {
	pulumi.Input

	ToComponentActionParametersOutput() ComponentActionParametersOutput
	ToComponentActionParametersOutputWithContext(context.Context) ComponentActionParametersOutput
}

type ComponentActionParametersArgs struct {
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Anchor ComponentPropertyPtrInput `pulumi:"anchor"`
	// A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.
	Fields ComponentPropertyMapInput `pulumi:"fields"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Global ComponentPropertyPtrInput `pulumi:"global"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Id ComponentPropertyPtrInput `pulumi:"id"`
	// The name of the data model. Use when the action performs an operation on an Amplify DataStore model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// Represents the state configuration when an action modifies a property of another element within the same component.
	State ComponentMutationActionSetStateParameterPtrInput `pulumi:"state"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Target ComponentPropertyPtrInput `pulumi:"target"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Type ComponentPropertyPtrInput `pulumi:"type"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Url ComponentPropertyPtrInput `pulumi:"url"`
}

func (ComponentActionParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentActionParameters)(nil)).Elem()
}

func (i ComponentActionParametersArgs) ToComponentActionParametersOutput() ComponentActionParametersOutput {
	return i.ToComponentActionParametersOutputWithContext(context.Background())
}

func (i ComponentActionParametersArgs) ToComponentActionParametersOutputWithContext(ctx context.Context) ComponentActionParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentActionParametersOutput)
}

func (i ComponentActionParametersArgs) ToComponentActionParametersPtrOutput() ComponentActionParametersPtrOutput {
	return i.ToComponentActionParametersPtrOutputWithContext(context.Background())
}

func (i ComponentActionParametersArgs) ToComponentActionParametersPtrOutputWithContext(ctx context.Context) ComponentActionParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentActionParametersOutput).ToComponentActionParametersPtrOutputWithContext(ctx)
}

// ComponentActionParametersPtrInput is an input type that accepts ComponentActionParametersArgs, ComponentActionParametersPtr and ComponentActionParametersPtrOutput values.
// You can construct a concrete instance of `ComponentActionParametersPtrInput` via:
//
//	        ComponentActionParametersArgs{...}
//
//	or:
//
//	        nil
type ComponentActionParametersPtrInput interface {
	pulumi.Input

	ToComponentActionParametersPtrOutput() ComponentActionParametersPtrOutput
	ToComponentActionParametersPtrOutputWithContext(context.Context) ComponentActionParametersPtrOutput
}

type componentActionParametersPtrType ComponentActionParametersArgs

func ComponentActionParametersPtr(v *ComponentActionParametersArgs) ComponentActionParametersPtrInput {
	return (*componentActionParametersPtrType)(v)
}

func (*componentActionParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentActionParameters)(nil)).Elem()
}

func (i *componentActionParametersPtrType) ToComponentActionParametersPtrOutput() ComponentActionParametersPtrOutput {
	return i.ToComponentActionParametersPtrOutputWithContext(context.Background())
}

func (i *componentActionParametersPtrType) ToComponentActionParametersPtrOutputWithContext(ctx context.Context) ComponentActionParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentActionParametersPtrOutput)
}

type ComponentActionParametersOutput struct{ *pulumi.OutputState }

func (ComponentActionParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentActionParameters)(nil)).Elem()
}

func (o ComponentActionParametersOutput) ToComponentActionParametersOutput() ComponentActionParametersOutput {
	return o
}

func (o ComponentActionParametersOutput) ToComponentActionParametersOutputWithContext(ctx context.Context) ComponentActionParametersOutput {
	return o
}

func (o ComponentActionParametersOutput) ToComponentActionParametersPtrOutput() ComponentActionParametersPtrOutput {
	return o.ToComponentActionParametersPtrOutputWithContext(context.Background())
}

func (o ComponentActionParametersOutput) ToComponentActionParametersPtrOutputWithContext(ctx context.Context) ComponentActionParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentActionParameters) *ComponentActionParameters {
		return &v
	}).(ComponentActionParametersPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersOutput) Anchor() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *ComponentProperty { return v.Anchor }).(ComponentPropertyPtrOutput)
}

// A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.
func (o ComponentActionParametersOutput) Fields() ComponentPropertyMapOutput {
	return o.ApplyT(func(v ComponentActionParameters) map[string]ComponentProperty { return v.Fields }).(ComponentPropertyMapOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersOutput) Global() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *ComponentProperty { return v.Global }).(ComponentPropertyPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersOutput) Id() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *ComponentProperty { return v.Id }).(ComponentPropertyPtrOutput)
}

// The name of the data model. Use when the action performs an operation on an Amplify DataStore model.
func (o ComponentActionParametersOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// Represents the state configuration when an action modifies a property of another element within the same component.
func (o ComponentActionParametersOutput) State() ComponentMutationActionSetStateParameterPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *ComponentMutationActionSetStateParameter { return v.State }).(ComponentMutationActionSetStateParameterPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersOutput) Target() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *ComponentProperty { return v.Target }).(ComponentPropertyPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersOutput) Type() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *ComponentProperty { return v.Type }).(ComponentPropertyPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersOutput) Url() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentActionParameters) *ComponentProperty { return v.Url }).(ComponentPropertyPtrOutput)
}

type ComponentActionParametersPtrOutput struct{ *pulumi.OutputState }

func (ComponentActionParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentActionParameters)(nil)).Elem()
}

func (o ComponentActionParametersPtrOutput) ToComponentActionParametersPtrOutput() ComponentActionParametersPtrOutput {
	return o
}

func (o ComponentActionParametersPtrOutput) ToComponentActionParametersPtrOutputWithContext(ctx context.Context) ComponentActionParametersPtrOutput {
	return o
}

func (o ComponentActionParametersPtrOutput) Elem() ComponentActionParametersOutput {
	return o.ApplyT(func(v *ComponentActionParameters) ComponentActionParameters {
		if v != nil {
			return *v
		}
		var ret ComponentActionParameters
		return ret
	}).(ComponentActionParametersOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersPtrOutput) Anchor() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Anchor
	}).(ComponentPropertyPtrOutput)
}

// A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.
func (o ComponentActionParametersPtrOutput) Fields() ComponentPropertyMapOutput {
	return o.ApplyT(func(v *ComponentActionParameters) map[string]ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(ComponentPropertyMapOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersPtrOutput) Global() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Global
	}).(ComponentPropertyPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersPtrOutput) Id() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Id
	}).(ComponentPropertyPtrOutput)
}

// The name of the data model. Use when the action performs an operation on an Amplify DataStore model.
func (o ComponentActionParametersPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// Represents the state configuration when an action modifies a property of another element within the same component.
func (o ComponentActionParametersPtrOutput) State() ComponentMutationActionSetStateParameterPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *ComponentMutationActionSetStateParameter {
		if v == nil {
			return nil
		}
		return v.State
	}).(ComponentMutationActionSetStateParameterPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersPtrOutput) Target() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Target
	}).(ComponentPropertyPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersPtrOutput) Type() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ComponentPropertyPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentActionParametersPtrOutput) Url() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentActionParameters) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Url
	}).(ComponentPropertyPtrOutput)
}

type ComponentBindingPropertiesValue struct {
	// The `ComponentBindingPropertiesValueProperties` property specifies the data binding configuration for a specific property using data stored in AWS . For AWS connected properties, you can bind a property to data stored in an Amazon S3 bucket, an Amplify DataStore model or an authenticated user attribute.
	BindingProperties *ComponentBindingPropertiesValueProperties `pulumi:"bindingProperties"`
	// The default value of the property.
	DefaultValue *string `pulumi:"defaultValue"`
	// The property type.
	Type *string `pulumi:"type"`
}

// ComponentBindingPropertiesValueInput is an input type that accepts ComponentBindingPropertiesValueArgs and ComponentBindingPropertiesValueOutput values.
// You can construct a concrete instance of `ComponentBindingPropertiesValueInput` via:
//
//	ComponentBindingPropertiesValueArgs{...}
type ComponentBindingPropertiesValueInput interface {
	pulumi.Input

	ToComponentBindingPropertiesValueOutput() ComponentBindingPropertiesValueOutput
	ToComponentBindingPropertiesValueOutputWithContext(context.Context) ComponentBindingPropertiesValueOutput
}

type ComponentBindingPropertiesValueArgs struct {
	// The `ComponentBindingPropertiesValueProperties` property specifies the data binding configuration for a specific property using data stored in AWS . For AWS connected properties, you can bind a property to data stored in an Amazon S3 bucket, an Amplify DataStore model or an authenticated user attribute.
	BindingProperties ComponentBindingPropertiesValuePropertiesPtrInput `pulumi:"bindingProperties"`
	// The default value of the property.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The property type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ComponentBindingPropertiesValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingPropertiesValue)(nil)).Elem()
}

func (i ComponentBindingPropertiesValueArgs) ToComponentBindingPropertiesValueOutput() ComponentBindingPropertiesValueOutput {
	return i.ToComponentBindingPropertiesValueOutputWithContext(context.Background())
}

func (i ComponentBindingPropertiesValueArgs) ToComponentBindingPropertiesValueOutputWithContext(ctx context.Context) ComponentBindingPropertiesValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesValueOutput)
}

// ComponentBindingPropertiesValueMapInput is an input type that accepts ComponentBindingPropertiesValueMap and ComponentBindingPropertiesValueMapOutput values.
// You can construct a concrete instance of `ComponentBindingPropertiesValueMapInput` via:
//
//	ComponentBindingPropertiesValueMap{ "key": ComponentBindingPropertiesValueArgs{...} }
type ComponentBindingPropertiesValueMapInput interface {
	pulumi.Input

	ToComponentBindingPropertiesValueMapOutput() ComponentBindingPropertiesValueMapOutput
	ToComponentBindingPropertiesValueMapOutputWithContext(context.Context) ComponentBindingPropertiesValueMapOutput
}

type ComponentBindingPropertiesValueMap map[string]ComponentBindingPropertiesValueInput

func (ComponentBindingPropertiesValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentBindingPropertiesValue)(nil)).Elem()
}

func (i ComponentBindingPropertiesValueMap) ToComponentBindingPropertiesValueMapOutput() ComponentBindingPropertiesValueMapOutput {
	return i.ToComponentBindingPropertiesValueMapOutputWithContext(context.Background())
}

func (i ComponentBindingPropertiesValueMap) ToComponentBindingPropertiesValueMapOutputWithContext(ctx context.Context) ComponentBindingPropertiesValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesValueMapOutput)
}

type ComponentBindingPropertiesValueOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingPropertiesValue)(nil)).Elem()
}

func (o ComponentBindingPropertiesValueOutput) ToComponentBindingPropertiesValueOutput() ComponentBindingPropertiesValueOutput {
	return o
}

func (o ComponentBindingPropertiesValueOutput) ToComponentBindingPropertiesValueOutputWithContext(ctx context.Context) ComponentBindingPropertiesValueOutput {
	return o
}

// The `ComponentBindingPropertiesValueProperties` property specifies the data binding configuration for a specific property using data stored in AWS . For AWS connected properties, you can bind a property to data stored in an Amazon S3 bucket, an Amplify DataStore model or an authenticated user attribute.
func (o ComponentBindingPropertiesValueOutput) BindingProperties() ComponentBindingPropertiesValuePropertiesPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValue) *ComponentBindingPropertiesValueProperties {
		return v.BindingProperties
	}).(ComponentBindingPropertiesValuePropertiesPtrOutput)
}

// The default value of the property.
func (o ComponentBindingPropertiesValueOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValue) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The property type.
func (o ComponentBindingPropertiesValueOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValue) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ComponentBindingPropertiesValueMapOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentBindingPropertiesValue)(nil)).Elem()
}

func (o ComponentBindingPropertiesValueMapOutput) ToComponentBindingPropertiesValueMapOutput() ComponentBindingPropertiesValueMapOutput {
	return o
}

func (o ComponentBindingPropertiesValueMapOutput) ToComponentBindingPropertiesValueMapOutputWithContext(ctx context.Context) ComponentBindingPropertiesValueMapOutput {
	return o
}

func (o ComponentBindingPropertiesValueMapOutput) MapIndex(k pulumi.StringInput) ComponentBindingPropertiesValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentBindingPropertiesValue {
		return vs[0].(map[string]ComponentBindingPropertiesValue)[vs[1].(string)]
	}).(ComponentBindingPropertiesValueOutput)
}

type ComponentBindingPropertiesValueProperties struct {
	// An Amazon S3 bucket.
	Bucket *string `pulumi:"bucket"`
	// The default value to assign to the property.
	DefaultValue *string `pulumi:"defaultValue"`
	// The field to bind the data to.
	Field *string `pulumi:"field"`
	// The storage key for an Amazon S3 bucket.
	Key *string `pulumi:"key"`
	// An Amplify DataStore model.
	Model *string `pulumi:"model"`
	// The `Predicate` property specifies information for generating Amplify DataStore queries. Use `Predicate` to retrieve a subset of the data in a collection.
	Predicates []ComponentPredicate `pulumi:"predicates"`
	// The name of a component slot.
	SlotName *string `pulumi:"slotName"`
	// An authenticated user attribute.
	UserAttribute *string `pulumi:"userAttribute"`
}

// ComponentBindingPropertiesValuePropertiesInput is an input type that accepts ComponentBindingPropertiesValuePropertiesArgs and ComponentBindingPropertiesValuePropertiesOutput values.
// You can construct a concrete instance of `ComponentBindingPropertiesValuePropertiesInput` via:
//
//	ComponentBindingPropertiesValuePropertiesArgs{...}
type ComponentBindingPropertiesValuePropertiesInput interface {
	pulumi.Input

	ToComponentBindingPropertiesValuePropertiesOutput() ComponentBindingPropertiesValuePropertiesOutput
	ToComponentBindingPropertiesValuePropertiesOutputWithContext(context.Context) ComponentBindingPropertiesValuePropertiesOutput
}

type ComponentBindingPropertiesValuePropertiesArgs struct {
	// An Amazon S3 bucket.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The default value to assign to the property.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The field to bind the data to.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The storage key for an Amazon S3 bucket.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// An Amplify DataStore model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The `Predicate` property specifies information for generating Amplify DataStore queries. Use `Predicate` to retrieve a subset of the data in a collection.
	Predicates ComponentPredicateArrayInput `pulumi:"predicates"`
	// The name of a component slot.
	SlotName pulumi.StringPtrInput `pulumi:"slotName"`
	// An authenticated user attribute.
	UserAttribute pulumi.StringPtrInput `pulumi:"userAttribute"`
}

func (ComponentBindingPropertiesValuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingPropertiesValueProperties)(nil)).Elem()
}

func (i ComponentBindingPropertiesValuePropertiesArgs) ToComponentBindingPropertiesValuePropertiesOutput() ComponentBindingPropertiesValuePropertiesOutput {
	return i.ToComponentBindingPropertiesValuePropertiesOutputWithContext(context.Background())
}

func (i ComponentBindingPropertiesValuePropertiesArgs) ToComponentBindingPropertiesValuePropertiesOutputWithContext(ctx context.Context) ComponentBindingPropertiesValuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesValuePropertiesOutput)
}

func (i ComponentBindingPropertiesValuePropertiesArgs) ToComponentBindingPropertiesValuePropertiesPtrOutput() ComponentBindingPropertiesValuePropertiesPtrOutput {
	return i.ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(context.Background())
}

func (i ComponentBindingPropertiesValuePropertiesArgs) ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesValuePropertiesOutput).ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(ctx)
}

// ComponentBindingPropertiesValuePropertiesPtrInput is an input type that accepts ComponentBindingPropertiesValuePropertiesArgs, ComponentBindingPropertiesValuePropertiesPtr and ComponentBindingPropertiesValuePropertiesPtrOutput values.
// You can construct a concrete instance of `ComponentBindingPropertiesValuePropertiesPtrInput` via:
//
//	        ComponentBindingPropertiesValuePropertiesArgs{...}
//
//	or:
//
//	        nil
type ComponentBindingPropertiesValuePropertiesPtrInput interface {
	pulumi.Input

	ToComponentBindingPropertiesValuePropertiesPtrOutput() ComponentBindingPropertiesValuePropertiesPtrOutput
	ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(context.Context) ComponentBindingPropertiesValuePropertiesPtrOutput
}

type componentBindingPropertiesValuePropertiesPtrType ComponentBindingPropertiesValuePropertiesArgs

func ComponentBindingPropertiesValuePropertiesPtr(v *ComponentBindingPropertiesValuePropertiesArgs) ComponentBindingPropertiesValuePropertiesPtrInput {
	return (*componentBindingPropertiesValuePropertiesPtrType)(v)
}

func (*componentBindingPropertiesValuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentBindingPropertiesValueProperties)(nil)).Elem()
}

func (i *componentBindingPropertiesValuePropertiesPtrType) ToComponentBindingPropertiesValuePropertiesPtrOutput() ComponentBindingPropertiesValuePropertiesPtrOutput {
	return i.ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(context.Background())
}

func (i *componentBindingPropertiesValuePropertiesPtrType) ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentBindingPropertiesValuePropertiesPtrOutput)
}

type ComponentBindingPropertiesValuePropertiesOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesValuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentBindingPropertiesValueProperties)(nil)).Elem()
}

func (o ComponentBindingPropertiesValuePropertiesOutput) ToComponentBindingPropertiesValuePropertiesOutput() ComponentBindingPropertiesValuePropertiesOutput {
	return o
}

func (o ComponentBindingPropertiesValuePropertiesOutput) ToComponentBindingPropertiesValuePropertiesOutputWithContext(ctx context.Context) ComponentBindingPropertiesValuePropertiesOutput {
	return o
}

func (o ComponentBindingPropertiesValuePropertiesOutput) ToComponentBindingPropertiesValuePropertiesPtrOutput() ComponentBindingPropertiesValuePropertiesPtrOutput {
	return o.ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(context.Background())
}

func (o ComponentBindingPropertiesValuePropertiesOutput) ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesValuePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentBindingPropertiesValueProperties) *ComponentBindingPropertiesValueProperties {
		return &v
	}).(ComponentBindingPropertiesValuePropertiesPtrOutput)
}

// An Amazon S3 bucket.
func (o ComponentBindingPropertiesValuePropertiesOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The default value to assign to the property.
func (o ComponentBindingPropertiesValuePropertiesOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The field to bind the data to.
func (o ComponentBindingPropertiesValuePropertiesOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The storage key for an Amazon S3 bucket.
func (o ComponentBindingPropertiesValuePropertiesOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// An Amplify DataStore model.
func (o ComponentBindingPropertiesValuePropertiesOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The `Predicate` property specifies information for generating Amplify DataStore queries. Use `Predicate` to retrieve a subset of the data in a collection.
func (o ComponentBindingPropertiesValuePropertiesOutput) Predicates() ComponentPredicateArrayOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) []ComponentPredicate { return v.Predicates }).(ComponentPredicateArrayOutput)
}

// The name of a component slot.
func (o ComponentBindingPropertiesValuePropertiesOutput) SlotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) *string { return v.SlotName }).(pulumi.StringPtrOutput)
}

// An authenticated user attribute.
func (o ComponentBindingPropertiesValuePropertiesOutput) UserAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentBindingPropertiesValueProperties) *string { return v.UserAttribute }).(pulumi.StringPtrOutput)
}

type ComponentBindingPropertiesValuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentBindingPropertiesValuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentBindingPropertiesValueProperties)(nil)).Elem()
}

func (o ComponentBindingPropertiesValuePropertiesPtrOutput) ToComponentBindingPropertiesValuePropertiesPtrOutput() ComponentBindingPropertiesValuePropertiesPtrOutput {
	return o
}

func (o ComponentBindingPropertiesValuePropertiesPtrOutput) ToComponentBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) ComponentBindingPropertiesValuePropertiesPtrOutput {
	return o
}

func (o ComponentBindingPropertiesValuePropertiesPtrOutput) Elem() ComponentBindingPropertiesValuePropertiesOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) ComponentBindingPropertiesValueProperties {
		if v != nil {
			return *v
		}
		var ret ComponentBindingPropertiesValueProperties
		return ret
	}).(ComponentBindingPropertiesValuePropertiesOutput)
}

// An Amazon S3 bucket.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The default value to assign to the property.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

// The field to bind the data to.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// The storage key for an Amazon S3 bucket.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// An Amplify DataStore model.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// The `Predicate` property specifies information for generating Amplify DataStore queries. Use `Predicate` to retrieve a subset of the data in a collection.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) Predicates() ComponentPredicateArrayOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) []ComponentPredicate {
		if v == nil {
			return nil
		}
		return v.Predicates
	}).(ComponentPredicateArrayOutput)
}

// The name of a component slot.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) SlotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.SlotName
	}).(pulumi.StringPtrOutput)
}

// An authenticated user attribute.
func (o ComponentBindingPropertiesValuePropertiesPtrOutput) UserAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserAttribute
	}).(pulumi.StringPtrOutput)
}

type ComponentChild struct {
	// The list of `ComponentChild` instances for this component.
	Children []ComponentChild `pulumi:"children"`
	// The type of the child component.
	ComponentType string `pulumi:"componentType"`
	// Describes the events that can be raised on the child component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
	Events map[string]ComponentEvent `pulumi:"events"`
	// The name of the child component.
	Name string `pulumi:"name"`
	// Describes the properties of the child component. You can't specify `tags` as a valid property for `properties` .
	Properties map[string]ComponentProperty `pulumi:"properties"`
	// The unique ID of the child component in its original source system, such as Figma.
	SourceId *string `pulumi:"sourceId"`
}

// ComponentChildInput is an input type that accepts ComponentChildArgs and ComponentChildOutput values.
// You can construct a concrete instance of `ComponentChildInput` via:
//
//	ComponentChildArgs{...}
type ComponentChildInput interface {
	pulumi.Input

	ToComponentChildOutput() ComponentChildOutput
	ToComponentChildOutputWithContext(context.Context) ComponentChildOutput
}

type ComponentChildArgs struct {
	// The list of `ComponentChild` instances for this component.
	Children ComponentChildArrayInput `pulumi:"children"`
	// The type of the child component.
	ComponentType pulumi.StringInput `pulumi:"componentType"`
	// Describes the events that can be raised on the child component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
	Events ComponentEventMapInput `pulumi:"events"`
	// The name of the child component.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes the properties of the child component. You can't specify `tags` as a valid property for `properties` .
	Properties ComponentPropertyMapInput `pulumi:"properties"`
	// The unique ID of the child component in its original source system, such as Figma.
	SourceId pulumi.StringPtrInput `pulumi:"sourceId"`
}

func (ComponentChildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentChild)(nil)).Elem()
}

func (i ComponentChildArgs) ToComponentChildOutput() ComponentChildOutput {
	return i.ToComponentChildOutputWithContext(context.Background())
}

func (i ComponentChildArgs) ToComponentChildOutputWithContext(ctx context.Context) ComponentChildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentChildOutput)
}

// ComponentChildArrayInput is an input type that accepts ComponentChildArray and ComponentChildArrayOutput values.
// You can construct a concrete instance of `ComponentChildArrayInput` via:
//
//	ComponentChildArray{ ComponentChildArgs{...} }
type ComponentChildArrayInput interface {
	pulumi.Input

	ToComponentChildArrayOutput() ComponentChildArrayOutput
	ToComponentChildArrayOutputWithContext(context.Context) ComponentChildArrayOutput
}

type ComponentChildArray []ComponentChildInput

func (ComponentChildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentChild)(nil)).Elem()
}

func (i ComponentChildArray) ToComponentChildArrayOutput() ComponentChildArrayOutput {
	return i.ToComponentChildArrayOutputWithContext(context.Background())
}

func (i ComponentChildArray) ToComponentChildArrayOutputWithContext(ctx context.Context) ComponentChildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentChildArrayOutput)
}

type ComponentChildOutput struct{ *pulumi.OutputState }

func (ComponentChildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentChild)(nil)).Elem()
}

func (o ComponentChildOutput) ToComponentChildOutput() ComponentChildOutput {
	return o
}

func (o ComponentChildOutput) ToComponentChildOutputWithContext(ctx context.Context) ComponentChildOutput {
	return o
}

// The list of `ComponentChild` instances for this component.
func (o ComponentChildOutput) Children() ComponentChildArrayOutput {
	return o.ApplyT(func(v ComponentChild) []ComponentChild { return v.Children }).(ComponentChildArrayOutput)
}

// The type of the child component.
func (o ComponentChildOutput) ComponentType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentChild) string { return v.ComponentType }).(pulumi.StringOutput)
}

// Describes the events that can be raised on the child component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
func (o ComponentChildOutput) Events() ComponentEventMapOutput {
	return o.ApplyT(func(v ComponentChild) map[string]ComponentEvent { return v.Events }).(ComponentEventMapOutput)
}

// The name of the child component.
func (o ComponentChildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentChild) string { return v.Name }).(pulumi.StringOutput)
}

// Describes the properties of the child component. You can't specify `tags` as a valid property for `properties` .
func (o ComponentChildOutput) Properties() ComponentPropertyMapOutput {
	return o.ApplyT(func(v ComponentChild) map[string]ComponentProperty { return v.Properties }).(ComponentPropertyMapOutput)
}

// The unique ID of the child component in its original source system, such as Figma.
func (o ComponentChildOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentChild) *string { return v.SourceId }).(pulumi.StringPtrOutput)
}

type ComponentChildArrayOutput struct{ *pulumi.OutputState }

func (ComponentChildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentChild)(nil)).Elem()
}

func (o ComponentChildArrayOutput) ToComponentChildArrayOutput() ComponentChildArrayOutput {
	return o
}

func (o ComponentChildArrayOutput) ToComponentChildArrayOutputWithContext(ctx context.Context) ComponentChildArrayOutput {
	return o
}

func (o ComponentChildArrayOutput) Index(i pulumi.IntInput) ComponentChildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentChild {
		return vs[0].([]ComponentChild)[vs[1].(int)]
	}).(ComponentChildOutput)
}

type ComponentConditionProperty struct {
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Else *ComponentProperty `pulumi:"else"`
	// The name of a field. Specify this when the property is a data model.
	Field *string `pulumi:"field"`
	// The value of the property to evaluate.
	Operand *string `pulumi:"operand"`
	// The type of the property to evaluate.
	OperandType *string `pulumi:"operandType"`
	// The operator to use to perform the evaluation, such as `eq` to represent equals.
	Operator *string `pulumi:"operator"`
	// The name of the conditional property.
	Property *string `pulumi:"property"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Then *ComponentProperty `pulumi:"then"`
}

// ComponentConditionPropertyInput is an input type that accepts ComponentConditionPropertyArgs and ComponentConditionPropertyOutput values.
// You can construct a concrete instance of `ComponentConditionPropertyInput` via:
//
//	ComponentConditionPropertyArgs{...}
type ComponentConditionPropertyInput interface {
	pulumi.Input

	ToComponentConditionPropertyOutput() ComponentConditionPropertyOutput
	ToComponentConditionPropertyOutputWithContext(context.Context) ComponentConditionPropertyOutput
}

type ComponentConditionPropertyArgs struct {
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Else ComponentPropertyPtrInput `pulumi:"else"`
	// The name of a field. Specify this when the property is a data model.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The value of the property to evaluate.
	Operand pulumi.StringPtrInput `pulumi:"operand"`
	// The type of the property to evaluate.
	OperandType pulumi.StringPtrInput `pulumi:"operandType"`
	// The operator to use to perform the evaluation, such as `eq` to represent equals.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The name of the conditional property.
	Property pulumi.StringPtrInput `pulumi:"property"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Then ComponentPropertyPtrInput `pulumi:"then"`
}

func (ComponentConditionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentConditionProperty)(nil)).Elem()
}

func (i ComponentConditionPropertyArgs) ToComponentConditionPropertyOutput() ComponentConditionPropertyOutput {
	return i.ToComponentConditionPropertyOutputWithContext(context.Background())
}

func (i ComponentConditionPropertyArgs) ToComponentConditionPropertyOutputWithContext(ctx context.Context) ComponentConditionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConditionPropertyOutput)
}

func (i ComponentConditionPropertyArgs) ToComponentConditionPropertyPtrOutput() ComponentConditionPropertyPtrOutput {
	return i.ToComponentConditionPropertyPtrOutputWithContext(context.Background())
}

func (i ComponentConditionPropertyArgs) ToComponentConditionPropertyPtrOutputWithContext(ctx context.Context) ComponentConditionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConditionPropertyOutput).ToComponentConditionPropertyPtrOutputWithContext(ctx)
}

// ComponentConditionPropertyPtrInput is an input type that accepts ComponentConditionPropertyArgs, ComponentConditionPropertyPtr and ComponentConditionPropertyPtrOutput values.
// You can construct a concrete instance of `ComponentConditionPropertyPtrInput` via:
//
//	        ComponentConditionPropertyArgs{...}
//
//	or:
//
//	        nil
type ComponentConditionPropertyPtrInput interface {
	pulumi.Input

	ToComponentConditionPropertyPtrOutput() ComponentConditionPropertyPtrOutput
	ToComponentConditionPropertyPtrOutputWithContext(context.Context) ComponentConditionPropertyPtrOutput
}

type componentConditionPropertyPtrType ComponentConditionPropertyArgs

func ComponentConditionPropertyPtr(v *ComponentConditionPropertyArgs) ComponentConditionPropertyPtrInput {
	return (*componentConditionPropertyPtrType)(v)
}

func (*componentConditionPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentConditionProperty)(nil)).Elem()
}

func (i *componentConditionPropertyPtrType) ToComponentConditionPropertyPtrOutput() ComponentConditionPropertyPtrOutput {
	return i.ToComponentConditionPropertyPtrOutputWithContext(context.Background())
}

func (i *componentConditionPropertyPtrType) ToComponentConditionPropertyPtrOutputWithContext(ctx context.Context) ComponentConditionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConditionPropertyPtrOutput)
}

type ComponentConditionPropertyOutput struct{ *pulumi.OutputState }

func (ComponentConditionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentConditionProperty)(nil)).Elem()
}

func (o ComponentConditionPropertyOutput) ToComponentConditionPropertyOutput() ComponentConditionPropertyOutput {
	return o
}

func (o ComponentConditionPropertyOutput) ToComponentConditionPropertyOutputWithContext(ctx context.Context) ComponentConditionPropertyOutput {
	return o
}

func (o ComponentConditionPropertyOutput) ToComponentConditionPropertyPtrOutput() ComponentConditionPropertyPtrOutput {
	return o.ToComponentConditionPropertyPtrOutputWithContext(context.Background())
}

func (o ComponentConditionPropertyOutput) ToComponentConditionPropertyPtrOutputWithContext(ctx context.Context) ComponentConditionPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentConditionProperty) *ComponentConditionProperty {
		return &v
	}).(ComponentConditionPropertyPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentConditionPropertyOutput) Else() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentConditionProperty) *ComponentProperty { return v.Else }).(ComponentPropertyPtrOutput)
}

// The name of a field. Specify this when the property is a data model.
func (o ComponentConditionPropertyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionProperty) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The value of the property to evaluate.
func (o ComponentConditionPropertyOutput) Operand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionProperty) *string { return v.Operand }).(pulumi.StringPtrOutput)
}

// The type of the property to evaluate.
func (o ComponentConditionPropertyOutput) OperandType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionProperty) *string { return v.OperandType }).(pulumi.StringPtrOutput)
}

// The operator to use to perform the evaluation, such as `eq` to represent equals.
func (o ComponentConditionPropertyOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionProperty) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The name of the conditional property.
func (o ComponentConditionPropertyOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentConditionProperty) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentConditionPropertyOutput) Then() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v ComponentConditionProperty) *ComponentProperty { return v.Then }).(ComponentPropertyPtrOutput)
}

type ComponentConditionPropertyPtrOutput struct{ *pulumi.OutputState }

func (ComponentConditionPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentConditionProperty)(nil)).Elem()
}

func (o ComponentConditionPropertyPtrOutput) ToComponentConditionPropertyPtrOutput() ComponentConditionPropertyPtrOutput {
	return o
}

func (o ComponentConditionPropertyPtrOutput) ToComponentConditionPropertyPtrOutputWithContext(ctx context.Context) ComponentConditionPropertyPtrOutput {
	return o
}

func (o ComponentConditionPropertyPtrOutput) Elem() ComponentConditionPropertyOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) ComponentConditionProperty {
		if v != nil {
			return *v
		}
		var ret ComponentConditionProperty
		return ret
	}).(ComponentConditionPropertyOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentConditionPropertyPtrOutput) Else() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Else
	}).(ComponentPropertyPtrOutput)
}

// The name of a field. Specify this when the property is a data model.
func (o ComponentConditionPropertyPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// The value of the property to evaluate.
func (o ComponentConditionPropertyPtrOutput) Operand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) *string {
		if v == nil {
			return nil
		}
		return v.Operand
	}).(pulumi.StringPtrOutput)
}

// The type of the property to evaluate.
func (o ComponentConditionPropertyPtrOutput) OperandType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) *string {
		if v == nil {
			return nil
		}
		return v.OperandType
	}).(pulumi.StringPtrOutput)
}

// The operator to use to perform the evaluation, such as `eq` to represent equals.
func (o ComponentConditionPropertyPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// The name of the conditional property.
func (o ComponentConditionPropertyPtrOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) *string {
		if v == nil {
			return nil
		}
		return v.Property
	}).(pulumi.StringPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentConditionPropertyPtrOutput) Then() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentConditionProperty) *ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Then
	}).(ComponentPropertyPtrOutput)
}

type ComponentDataConfiguration struct {
	// A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.
	Identifiers []string `pulumi:"identifiers"`
	// The name of the data model to use to bind data to a component.
	Model string `pulumi:"model"`
	// The `Predicate` property specifies information for generating Amplify DataStore queries. Use `Predicate` to retrieve a subset of the data in a collection.
	Predicate *ComponentPredicate `pulumi:"predicate"`
	// The `SortProperty` property specifies how to sort the data that you bind to a component.
	Sort []ComponentSortProperty `pulumi:"sort"`
}

// ComponentDataConfigurationInput is an input type that accepts ComponentDataConfigurationArgs and ComponentDataConfigurationOutput values.
// You can construct a concrete instance of `ComponentDataConfigurationInput` via:
//
//	ComponentDataConfigurationArgs{...}
type ComponentDataConfigurationInput interface {
	pulumi.Input

	ToComponentDataConfigurationOutput() ComponentDataConfigurationOutput
	ToComponentDataConfigurationOutputWithContext(context.Context) ComponentDataConfigurationOutput
}

type ComponentDataConfigurationArgs struct {
	// A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.
	Identifiers pulumi.StringArrayInput `pulumi:"identifiers"`
	// The name of the data model to use to bind data to a component.
	Model pulumi.StringInput `pulumi:"model"`
	// The `Predicate` property specifies information for generating Amplify DataStore queries. Use `Predicate` to retrieve a subset of the data in a collection.
	Predicate ComponentPredicatePtrInput `pulumi:"predicate"`
	// The `SortProperty` property specifies how to sort the data that you bind to a component.
	Sort ComponentSortPropertyArrayInput `pulumi:"sort"`
}

func (ComponentDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentDataConfiguration)(nil)).Elem()
}

func (i ComponentDataConfigurationArgs) ToComponentDataConfigurationOutput() ComponentDataConfigurationOutput {
	return i.ToComponentDataConfigurationOutputWithContext(context.Background())
}

func (i ComponentDataConfigurationArgs) ToComponentDataConfigurationOutputWithContext(ctx context.Context) ComponentDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentDataConfigurationOutput)
}

// ComponentDataConfigurationMapInput is an input type that accepts ComponentDataConfigurationMap and ComponentDataConfigurationMapOutput values.
// You can construct a concrete instance of `ComponentDataConfigurationMapInput` via:
//
//	ComponentDataConfigurationMap{ "key": ComponentDataConfigurationArgs{...} }
type ComponentDataConfigurationMapInput interface {
	pulumi.Input

	ToComponentDataConfigurationMapOutput() ComponentDataConfigurationMapOutput
	ToComponentDataConfigurationMapOutputWithContext(context.Context) ComponentDataConfigurationMapOutput
}

type ComponentDataConfigurationMap map[string]ComponentDataConfigurationInput

func (ComponentDataConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentDataConfiguration)(nil)).Elem()
}

func (i ComponentDataConfigurationMap) ToComponentDataConfigurationMapOutput() ComponentDataConfigurationMapOutput {
	return i.ToComponentDataConfigurationMapOutputWithContext(context.Background())
}

func (i ComponentDataConfigurationMap) ToComponentDataConfigurationMapOutputWithContext(ctx context.Context) ComponentDataConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentDataConfigurationMapOutput)
}

type ComponentDataConfigurationOutput struct{ *pulumi.OutputState }

func (ComponentDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentDataConfiguration)(nil)).Elem()
}

func (o ComponentDataConfigurationOutput) ToComponentDataConfigurationOutput() ComponentDataConfigurationOutput {
	return o
}

func (o ComponentDataConfigurationOutput) ToComponentDataConfigurationOutputWithContext(ctx context.Context) ComponentDataConfigurationOutput {
	return o
}

// A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.
func (o ComponentDataConfigurationOutput) Identifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComponentDataConfiguration) []string { return v.Identifiers }).(pulumi.StringArrayOutput)
}

// The name of the data model to use to bind data to a component.
func (o ComponentDataConfigurationOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentDataConfiguration) string { return v.Model }).(pulumi.StringOutput)
}

// The `Predicate` property specifies information for generating Amplify DataStore queries. Use `Predicate` to retrieve a subset of the data in a collection.
func (o ComponentDataConfigurationOutput) Predicate() ComponentPredicatePtrOutput {
	return o.ApplyT(func(v ComponentDataConfiguration) *ComponentPredicate { return v.Predicate }).(ComponentPredicatePtrOutput)
}

// The `SortProperty` property specifies how to sort the data that you bind to a component.
func (o ComponentDataConfigurationOutput) Sort() ComponentSortPropertyArrayOutput {
	return o.ApplyT(func(v ComponentDataConfiguration) []ComponentSortProperty { return v.Sort }).(ComponentSortPropertyArrayOutput)
}

type ComponentDataConfigurationMapOutput struct{ *pulumi.OutputState }

func (ComponentDataConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentDataConfiguration)(nil)).Elem()
}

func (o ComponentDataConfigurationMapOutput) ToComponentDataConfigurationMapOutput() ComponentDataConfigurationMapOutput {
	return o
}

func (o ComponentDataConfigurationMapOutput) ToComponentDataConfigurationMapOutputWithContext(ctx context.Context) ComponentDataConfigurationMapOutput {
	return o
}

func (o ComponentDataConfigurationMapOutput) MapIndex(k pulumi.StringInput) ComponentDataConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentDataConfiguration {
		return vs[0].(map[string]ComponentDataConfiguration)[vs[1].(string)]
	}).(ComponentDataConfigurationOutput)
}

type ComponentEvent struct {
	// The action to perform when a specific event is raised.
	Action *string `pulumi:"action"`
	// Binds an event to an action on a component. When you specify a `bindingEvent` , the event is called when the action is performed.
	BindingEvent *string `pulumi:"bindingEvent"`
	// Represents the event action configuration for an element of a `Component` or `ComponentChild` . Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. `ActionParameters` defines the action that is performed when an event occurs on the component.
	Parameters *ComponentActionParameters `pulumi:"parameters"`
}

// ComponentEventInput is an input type that accepts ComponentEventArgs and ComponentEventOutput values.
// You can construct a concrete instance of `ComponentEventInput` via:
//
//	ComponentEventArgs{...}
type ComponentEventInput interface {
	pulumi.Input

	ToComponentEventOutput() ComponentEventOutput
	ToComponentEventOutputWithContext(context.Context) ComponentEventOutput
}

type ComponentEventArgs struct {
	// The action to perform when a specific event is raised.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Binds an event to an action on a component. When you specify a `bindingEvent` , the event is called when the action is performed.
	BindingEvent pulumi.StringPtrInput `pulumi:"bindingEvent"`
	// Represents the event action configuration for an element of a `Component` or `ComponentChild` . Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. `ActionParameters` defines the action that is performed when an event occurs on the component.
	Parameters ComponentActionParametersPtrInput `pulumi:"parameters"`
}

func (ComponentEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentEvent)(nil)).Elem()
}

func (i ComponentEventArgs) ToComponentEventOutput() ComponentEventOutput {
	return i.ToComponentEventOutputWithContext(context.Background())
}

func (i ComponentEventArgs) ToComponentEventOutputWithContext(ctx context.Context) ComponentEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentEventOutput)
}

// ComponentEventMapInput is an input type that accepts ComponentEventMap and ComponentEventMapOutput values.
// You can construct a concrete instance of `ComponentEventMapInput` via:
//
//	ComponentEventMap{ "key": ComponentEventArgs{...} }
type ComponentEventMapInput interface {
	pulumi.Input

	ToComponentEventMapOutput() ComponentEventMapOutput
	ToComponentEventMapOutputWithContext(context.Context) ComponentEventMapOutput
}

type ComponentEventMap map[string]ComponentEventInput

func (ComponentEventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentEvent)(nil)).Elem()
}

func (i ComponentEventMap) ToComponentEventMapOutput() ComponentEventMapOutput {
	return i.ToComponentEventMapOutputWithContext(context.Background())
}

func (i ComponentEventMap) ToComponentEventMapOutputWithContext(ctx context.Context) ComponentEventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentEventMapOutput)
}

type ComponentEventOutput struct{ *pulumi.OutputState }

func (ComponentEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentEvent)(nil)).Elem()
}

func (o ComponentEventOutput) ToComponentEventOutput() ComponentEventOutput {
	return o
}

func (o ComponentEventOutput) ToComponentEventOutputWithContext(ctx context.Context) ComponentEventOutput {
	return o
}

// The action to perform when a specific event is raised.
func (o ComponentEventOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentEvent) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Binds an event to an action on a component. When you specify a `bindingEvent` , the event is called when the action is performed.
func (o ComponentEventOutput) BindingEvent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentEvent) *string { return v.BindingEvent }).(pulumi.StringPtrOutput)
}

// Represents the event action configuration for an element of a `Component` or `ComponentChild` . Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. `ActionParameters` defines the action that is performed when an event occurs on the component.
func (o ComponentEventOutput) Parameters() ComponentActionParametersPtrOutput {
	return o.ApplyT(func(v ComponentEvent) *ComponentActionParameters { return v.Parameters }).(ComponentActionParametersPtrOutput)
}

type ComponentEventMapOutput struct{ *pulumi.OutputState }

func (ComponentEventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentEvent)(nil)).Elem()
}

func (o ComponentEventMapOutput) ToComponentEventMapOutput() ComponentEventMapOutput {
	return o
}

func (o ComponentEventMapOutput) ToComponentEventMapOutputWithContext(ctx context.Context) ComponentEventMapOutput {
	return o
}

func (o ComponentEventMapOutput) MapIndex(k pulumi.StringInput) ComponentEventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentEvent {
		return vs[0].(map[string]ComponentEvent)[vs[1].(string)]
	}).(ComponentEventOutput)
}

type ComponentFormBindingElement struct {
	// The name of the component to retrieve a value from.
	Element string `pulumi:"element"`
	// The property to retrieve a value from.
	Property string `pulumi:"property"`
}

// ComponentFormBindingElementInput is an input type that accepts ComponentFormBindingElementArgs and ComponentFormBindingElementOutput values.
// You can construct a concrete instance of `ComponentFormBindingElementInput` via:
//
//	ComponentFormBindingElementArgs{...}
type ComponentFormBindingElementInput interface {
	pulumi.Input

	ToComponentFormBindingElementOutput() ComponentFormBindingElementOutput
	ToComponentFormBindingElementOutputWithContext(context.Context) ComponentFormBindingElementOutput
}

type ComponentFormBindingElementArgs struct {
	// The name of the component to retrieve a value from.
	Element pulumi.StringInput `pulumi:"element"`
	// The property to retrieve a value from.
	Property pulumi.StringInput `pulumi:"property"`
}

func (ComponentFormBindingElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentFormBindingElement)(nil)).Elem()
}

func (i ComponentFormBindingElementArgs) ToComponentFormBindingElementOutput() ComponentFormBindingElementOutput {
	return i.ToComponentFormBindingElementOutputWithContext(context.Background())
}

func (i ComponentFormBindingElementArgs) ToComponentFormBindingElementOutputWithContext(ctx context.Context) ComponentFormBindingElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentFormBindingElementOutput)
}

// ComponentFormBindingElementMapInput is an input type that accepts ComponentFormBindingElementMap and ComponentFormBindingElementMapOutput values.
// You can construct a concrete instance of `ComponentFormBindingElementMapInput` via:
//
//	ComponentFormBindingElementMap{ "key": ComponentFormBindingElementArgs{...} }
type ComponentFormBindingElementMapInput interface {
	pulumi.Input

	ToComponentFormBindingElementMapOutput() ComponentFormBindingElementMapOutput
	ToComponentFormBindingElementMapOutputWithContext(context.Context) ComponentFormBindingElementMapOutput
}

type ComponentFormBindingElementMap map[string]ComponentFormBindingElementInput

func (ComponentFormBindingElementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentFormBindingElement)(nil)).Elem()
}

func (i ComponentFormBindingElementMap) ToComponentFormBindingElementMapOutput() ComponentFormBindingElementMapOutput {
	return i.ToComponentFormBindingElementMapOutputWithContext(context.Background())
}

func (i ComponentFormBindingElementMap) ToComponentFormBindingElementMapOutputWithContext(ctx context.Context) ComponentFormBindingElementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentFormBindingElementMapOutput)
}

type ComponentFormBindingElementOutput struct{ *pulumi.OutputState }

func (ComponentFormBindingElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentFormBindingElement)(nil)).Elem()
}

func (o ComponentFormBindingElementOutput) ToComponentFormBindingElementOutput() ComponentFormBindingElementOutput {
	return o
}

func (o ComponentFormBindingElementOutput) ToComponentFormBindingElementOutputWithContext(ctx context.Context) ComponentFormBindingElementOutput {
	return o
}

// The name of the component to retrieve a value from.
func (o ComponentFormBindingElementOutput) Element() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentFormBindingElement) string { return v.Element }).(pulumi.StringOutput)
}

// The property to retrieve a value from.
func (o ComponentFormBindingElementOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentFormBindingElement) string { return v.Property }).(pulumi.StringOutput)
}

type ComponentFormBindingElementMapOutput struct{ *pulumi.OutputState }

func (ComponentFormBindingElementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentFormBindingElement)(nil)).Elem()
}

func (o ComponentFormBindingElementMapOutput) ToComponentFormBindingElementMapOutput() ComponentFormBindingElementMapOutput {
	return o
}

func (o ComponentFormBindingElementMapOutput) ToComponentFormBindingElementMapOutputWithContext(ctx context.Context) ComponentFormBindingElementMapOutput {
	return o
}

func (o ComponentFormBindingElementMapOutput) MapIndex(k pulumi.StringInput) ComponentFormBindingElementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentFormBindingElement {
		return vs[0].(map[string]ComponentFormBindingElement)[vs[1].(string)]
	}).(ComponentFormBindingElementOutput)
}

type ComponentMutationActionSetStateParameter struct {
	// The name of the component that is being modified.
	ComponentName string `pulumi:"componentName"`
	// The name of the component property to apply the state configuration to.
	Property string `pulumi:"property"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Set ComponentProperty `pulumi:"set"`
}

// ComponentMutationActionSetStateParameterInput is an input type that accepts ComponentMutationActionSetStateParameterArgs and ComponentMutationActionSetStateParameterOutput values.
// You can construct a concrete instance of `ComponentMutationActionSetStateParameterInput` via:
//
//	ComponentMutationActionSetStateParameterArgs{...}
type ComponentMutationActionSetStateParameterInput interface {
	pulumi.Input

	ToComponentMutationActionSetStateParameterOutput() ComponentMutationActionSetStateParameterOutput
	ToComponentMutationActionSetStateParameterOutputWithContext(context.Context) ComponentMutationActionSetStateParameterOutput
}

type ComponentMutationActionSetStateParameterArgs struct {
	// The name of the component that is being modified.
	ComponentName pulumi.StringInput `pulumi:"componentName"`
	// The name of the component property to apply the state configuration to.
	Property pulumi.StringInput `pulumi:"property"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Set ComponentPropertyInput `pulumi:"set"`
}

func (ComponentMutationActionSetStateParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentMutationActionSetStateParameter)(nil)).Elem()
}

func (i ComponentMutationActionSetStateParameterArgs) ToComponentMutationActionSetStateParameterOutput() ComponentMutationActionSetStateParameterOutput {
	return i.ToComponentMutationActionSetStateParameterOutputWithContext(context.Background())
}

func (i ComponentMutationActionSetStateParameterArgs) ToComponentMutationActionSetStateParameterOutputWithContext(ctx context.Context) ComponentMutationActionSetStateParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentMutationActionSetStateParameterOutput)
}

func (i ComponentMutationActionSetStateParameterArgs) ToComponentMutationActionSetStateParameterPtrOutput() ComponentMutationActionSetStateParameterPtrOutput {
	return i.ToComponentMutationActionSetStateParameterPtrOutputWithContext(context.Background())
}

func (i ComponentMutationActionSetStateParameterArgs) ToComponentMutationActionSetStateParameterPtrOutputWithContext(ctx context.Context) ComponentMutationActionSetStateParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentMutationActionSetStateParameterOutput).ToComponentMutationActionSetStateParameterPtrOutputWithContext(ctx)
}

// ComponentMutationActionSetStateParameterPtrInput is an input type that accepts ComponentMutationActionSetStateParameterArgs, ComponentMutationActionSetStateParameterPtr and ComponentMutationActionSetStateParameterPtrOutput values.
// You can construct a concrete instance of `ComponentMutationActionSetStateParameterPtrInput` via:
//
//	        ComponentMutationActionSetStateParameterArgs{...}
//
//	or:
//
//	        nil
type ComponentMutationActionSetStateParameterPtrInput interface {
	pulumi.Input

	ToComponentMutationActionSetStateParameterPtrOutput() ComponentMutationActionSetStateParameterPtrOutput
	ToComponentMutationActionSetStateParameterPtrOutputWithContext(context.Context) ComponentMutationActionSetStateParameterPtrOutput
}

type componentMutationActionSetStateParameterPtrType ComponentMutationActionSetStateParameterArgs

func ComponentMutationActionSetStateParameterPtr(v *ComponentMutationActionSetStateParameterArgs) ComponentMutationActionSetStateParameterPtrInput {
	return (*componentMutationActionSetStateParameterPtrType)(v)
}

func (*componentMutationActionSetStateParameterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentMutationActionSetStateParameter)(nil)).Elem()
}

func (i *componentMutationActionSetStateParameterPtrType) ToComponentMutationActionSetStateParameterPtrOutput() ComponentMutationActionSetStateParameterPtrOutput {
	return i.ToComponentMutationActionSetStateParameterPtrOutputWithContext(context.Background())
}

func (i *componentMutationActionSetStateParameterPtrType) ToComponentMutationActionSetStateParameterPtrOutputWithContext(ctx context.Context) ComponentMutationActionSetStateParameterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentMutationActionSetStateParameterPtrOutput)
}

type ComponentMutationActionSetStateParameterOutput struct{ *pulumi.OutputState }

func (ComponentMutationActionSetStateParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentMutationActionSetStateParameter)(nil)).Elem()
}

func (o ComponentMutationActionSetStateParameterOutput) ToComponentMutationActionSetStateParameterOutput() ComponentMutationActionSetStateParameterOutput {
	return o
}

func (o ComponentMutationActionSetStateParameterOutput) ToComponentMutationActionSetStateParameterOutputWithContext(ctx context.Context) ComponentMutationActionSetStateParameterOutput {
	return o
}

func (o ComponentMutationActionSetStateParameterOutput) ToComponentMutationActionSetStateParameterPtrOutput() ComponentMutationActionSetStateParameterPtrOutput {
	return o.ToComponentMutationActionSetStateParameterPtrOutputWithContext(context.Background())
}

func (o ComponentMutationActionSetStateParameterOutput) ToComponentMutationActionSetStateParameterPtrOutputWithContext(ctx context.Context) ComponentMutationActionSetStateParameterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentMutationActionSetStateParameter) *ComponentMutationActionSetStateParameter {
		return &v
	}).(ComponentMutationActionSetStateParameterPtrOutput)
}

// The name of the component that is being modified.
func (o ComponentMutationActionSetStateParameterOutput) ComponentName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentMutationActionSetStateParameter) string { return v.ComponentName }).(pulumi.StringOutput)
}

// The name of the component property to apply the state configuration to.
func (o ComponentMutationActionSetStateParameterOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentMutationActionSetStateParameter) string { return v.Property }).(pulumi.StringOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentMutationActionSetStateParameterOutput) Set() ComponentPropertyOutput {
	return o.ApplyT(func(v ComponentMutationActionSetStateParameter) ComponentProperty { return v.Set }).(ComponentPropertyOutput)
}

type ComponentMutationActionSetStateParameterPtrOutput struct{ *pulumi.OutputState }

func (ComponentMutationActionSetStateParameterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentMutationActionSetStateParameter)(nil)).Elem()
}

func (o ComponentMutationActionSetStateParameterPtrOutput) ToComponentMutationActionSetStateParameterPtrOutput() ComponentMutationActionSetStateParameterPtrOutput {
	return o
}

func (o ComponentMutationActionSetStateParameterPtrOutput) ToComponentMutationActionSetStateParameterPtrOutputWithContext(ctx context.Context) ComponentMutationActionSetStateParameterPtrOutput {
	return o
}

func (o ComponentMutationActionSetStateParameterPtrOutput) Elem() ComponentMutationActionSetStateParameterOutput {
	return o.ApplyT(func(v *ComponentMutationActionSetStateParameter) ComponentMutationActionSetStateParameter {
		if v != nil {
			return *v
		}
		var ret ComponentMutationActionSetStateParameter
		return ret
	}).(ComponentMutationActionSetStateParameterOutput)
}

// The name of the component that is being modified.
func (o ComponentMutationActionSetStateParameterPtrOutput) ComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentMutationActionSetStateParameter) *string {
		if v == nil {
			return nil
		}
		return &v.ComponentName
	}).(pulumi.StringPtrOutput)
}

// The name of the component property to apply the state configuration to.
func (o ComponentMutationActionSetStateParameterPtrOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentMutationActionSetStateParameter) *string {
		if v == nil {
			return nil
		}
		return &v.Property
	}).(pulumi.StringPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentMutationActionSetStateParameterPtrOutput) Set() ComponentPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentMutationActionSetStateParameter) *ComponentProperty {
		if v == nil {
			return nil
		}
		return &v.Set
	}).(ComponentPropertyPtrOutput)
}

type ComponentPredicate struct {
	// A list of predicates to combine logically.
	And []ComponentPredicate `pulumi:"and"`
	// The field to query.
	Field *string `pulumi:"field"`
	// The value to use when performing the evaluation.
	Operand *string `pulumi:"operand"`
	// The type of value to use when performing the evaluation.
	OperandType *string `pulumi:"operandType"`
	// The operator to use to perform the evaluation.
	Operator *string `pulumi:"operator"`
	// A list of predicates to combine logically.
	Or []ComponentPredicate `pulumi:"or"`
}

// ComponentPredicateInput is an input type that accepts ComponentPredicateArgs and ComponentPredicateOutput values.
// You can construct a concrete instance of `ComponentPredicateInput` via:
//
//	ComponentPredicateArgs{...}
type ComponentPredicateInput interface {
	pulumi.Input

	ToComponentPredicateOutput() ComponentPredicateOutput
	ToComponentPredicateOutputWithContext(context.Context) ComponentPredicateOutput
}

type ComponentPredicateArgs struct {
	// A list of predicates to combine logically.
	And ComponentPredicateArrayInput `pulumi:"and"`
	// The field to query.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The value to use when performing the evaluation.
	Operand pulumi.StringPtrInput `pulumi:"operand"`
	// The type of value to use when performing the evaluation.
	OperandType pulumi.StringPtrInput `pulumi:"operandType"`
	// The operator to use to perform the evaluation.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// A list of predicates to combine logically.
	Or ComponentPredicateArrayInput `pulumi:"or"`
}

func (ComponentPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentPredicate)(nil)).Elem()
}

func (i ComponentPredicateArgs) ToComponentPredicateOutput() ComponentPredicateOutput {
	return i.ToComponentPredicateOutputWithContext(context.Background())
}

func (i ComponentPredicateArgs) ToComponentPredicateOutputWithContext(ctx context.Context) ComponentPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPredicateOutput)
}

func (i ComponentPredicateArgs) ToComponentPredicatePtrOutput() ComponentPredicatePtrOutput {
	return i.ToComponentPredicatePtrOutputWithContext(context.Background())
}

func (i ComponentPredicateArgs) ToComponentPredicatePtrOutputWithContext(ctx context.Context) ComponentPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPredicateOutput).ToComponentPredicatePtrOutputWithContext(ctx)
}

// ComponentPredicatePtrInput is an input type that accepts ComponentPredicateArgs, ComponentPredicatePtr and ComponentPredicatePtrOutput values.
// You can construct a concrete instance of `ComponentPredicatePtrInput` via:
//
//	        ComponentPredicateArgs{...}
//
//	or:
//
//	        nil
type ComponentPredicatePtrInput interface {
	pulumi.Input

	ToComponentPredicatePtrOutput() ComponentPredicatePtrOutput
	ToComponentPredicatePtrOutputWithContext(context.Context) ComponentPredicatePtrOutput
}

type componentPredicatePtrType ComponentPredicateArgs

func ComponentPredicatePtr(v *ComponentPredicateArgs) ComponentPredicatePtrInput {
	return (*componentPredicatePtrType)(v)
}

func (*componentPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentPredicate)(nil)).Elem()
}

func (i *componentPredicatePtrType) ToComponentPredicatePtrOutput() ComponentPredicatePtrOutput {
	return i.ToComponentPredicatePtrOutputWithContext(context.Background())
}

func (i *componentPredicatePtrType) ToComponentPredicatePtrOutputWithContext(ctx context.Context) ComponentPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPredicatePtrOutput)
}

// ComponentPredicateArrayInput is an input type that accepts ComponentPredicateArray and ComponentPredicateArrayOutput values.
// You can construct a concrete instance of `ComponentPredicateArrayInput` via:
//
//	ComponentPredicateArray{ ComponentPredicateArgs{...} }
type ComponentPredicateArrayInput interface {
	pulumi.Input

	ToComponentPredicateArrayOutput() ComponentPredicateArrayOutput
	ToComponentPredicateArrayOutputWithContext(context.Context) ComponentPredicateArrayOutput
}

type ComponentPredicateArray []ComponentPredicateInput

func (ComponentPredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentPredicate)(nil)).Elem()
}

func (i ComponentPredicateArray) ToComponentPredicateArrayOutput() ComponentPredicateArrayOutput {
	return i.ToComponentPredicateArrayOutputWithContext(context.Background())
}

func (i ComponentPredicateArray) ToComponentPredicateArrayOutputWithContext(ctx context.Context) ComponentPredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPredicateArrayOutput)
}

type ComponentPredicateOutput struct{ *pulumi.OutputState }

func (ComponentPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentPredicate)(nil)).Elem()
}

func (o ComponentPredicateOutput) ToComponentPredicateOutput() ComponentPredicateOutput {
	return o
}

func (o ComponentPredicateOutput) ToComponentPredicateOutputWithContext(ctx context.Context) ComponentPredicateOutput {
	return o
}

func (o ComponentPredicateOutput) ToComponentPredicatePtrOutput() ComponentPredicatePtrOutput {
	return o.ToComponentPredicatePtrOutputWithContext(context.Background())
}

func (o ComponentPredicateOutput) ToComponentPredicatePtrOutputWithContext(ctx context.Context) ComponentPredicatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentPredicate) *ComponentPredicate {
		return &v
	}).(ComponentPredicatePtrOutput)
}

// A list of predicates to combine logically.
func (o ComponentPredicateOutput) And() ComponentPredicateArrayOutput {
	return o.ApplyT(func(v ComponentPredicate) []ComponentPredicate { return v.And }).(ComponentPredicateArrayOutput)
}

// The field to query.
func (o ComponentPredicateOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentPredicate) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The value to use when performing the evaluation.
func (o ComponentPredicateOutput) Operand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentPredicate) *string { return v.Operand }).(pulumi.StringPtrOutput)
}

// The type of value to use when performing the evaluation.
func (o ComponentPredicateOutput) OperandType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentPredicate) *string { return v.OperandType }).(pulumi.StringPtrOutput)
}

// The operator to use to perform the evaluation.
func (o ComponentPredicateOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentPredicate) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// A list of predicates to combine logically.
func (o ComponentPredicateOutput) Or() ComponentPredicateArrayOutput {
	return o.ApplyT(func(v ComponentPredicate) []ComponentPredicate { return v.Or }).(ComponentPredicateArrayOutput)
}

type ComponentPredicatePtrOutput struct{ *pulumi.OutputState }

func (ComponentPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentPredicate)(nil)).Elem()
}

func (o ComponentPredicatePtrOutput) ToComponentPredicatePtrOutput() ComponentPredicatePtrOutput {
	return o
}

func (o ComponentPredicatePtrOutput) ToComponentPredicatePtrOutputWithContext(ctx context.Context) ComponentPredicatePtrOutput {
	return o
}

func (o ComponentPredicatePtrOutput) Elem() ComponentPredicateOutput {
	return o.ApplyT(func(v *ComponentPredicate) ComponentPredicate {
		if v != nil {
			return *v
		}
		var ret ComponentPredicate
		return ret
	}).(ComponentPredicateOutput)
}

// A list of predicates to combine logically.
func (o ComponentPredicatePtrOutput) And() ComponentPredicateArrayOutput {
	return o.ApplyT(func(v *ComponentPredicate) []ComponentPredicate {
		if v == nil {
			return nil
		}
		return v.And
	}).(ComponentPredicateArrayOutput)
}

// The field to query.
func (o ComponentPredicatePtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// The value to use when performing the evaluation.
func (o ComponentPredicatePtrOutput) Operand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Operand
	}).(pulumi.StringPtrOutput)
}

// The type of value to use when performing the evaluation.
func (o ComponentPredicatePtrOutput) OperandType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentPredicate) *string {
		if v == nil {
			return nil
		}
		return v.OperandType
	}).(pulumi.StringPtrOutput)
}

// The operator to use to perform the evaluation.
func (o ComponentPredicatePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of predicates to combine logically.
func (o ComponentPredicatePtrOutput) Or() ComponentPredicateArrayOutput {
	return o.ApplyT(func(v *ComponentPredicate) []ComponentPredicate {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ComponentPredicateArrayOutput)
}

type ComponentPredicateArrayOutput struct{ *pulumi.OutputState }

func (ComponentPredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentPredicate)(nil)).Elem()
}

func (o ComponentPredicateArrayOutput) ToComponentPredicateArrayOutput() ComponentPredicateArrayOutput {
	return o
}

func (o ComponentPredicateArrayOutput) ToComponentPredicateArrayOutputWithContext(ctx context.Context) ComponentPredicateArrayOutput {
	return o
}

func (o ComponentPredicateArrayOutput) Index(i pulumi.IntInput) ComponentPredicateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentPredicate {
		return vs[0].([]ComponentPredicate)[vs[1].(int)]
	}).(ComponentPredicateOutput)
}

type ComponentProperty struct {
	// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
	BindingProperties *ComponentPropertyBindingProperties `pulumi:"bindingProperties"`
	// The information to bind the component property to form data.
	Bindings map[string]ComponentFormBindingElement `pulumi:"bindings"`
	// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
	CollectionBindingProperties *ComponentPropertyBindingProperties `pulumi:"collectionBindingProperties"`
	// The name of the component that is affected by an event.
	ComponentName *string `pulumi:"componentName"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Concat []ComponentProperty `pulumi:"concat"`
	// The `ComponentConditionProperty` property specifies a conditional expression for setting a component property. Use `ComponentConditionProperty` to set a property to different values conditionally, based on the value of another property.
	Condition *ComponentConditionProperty `pulumi:"condition"`
	// Specifies whether the user configured the property in Amplify Studio after importing it.
	Configured *bool `pulumi:"configured"`
	// The default value to assign to the component property.
	DefaultValue *string `pulumi:"defaultValue"`
	// An event that occurs in your app. Use this for workflow data binding.
	Event *string `pulumi:"event"`
	// The default value assigned to the property when the component is imported into an app.
	ImportedValue *string `pulumi:"importedValue"`
	// The data model to use to assign a value to the component property.
	Model *string `pulumi:"model"`
	// The name of the component's property that is affected by an event.
	Property *string `pulumi:"property"`
	// The component type.
	Type *string `pulumi:"type"`
	// An authenticated user attribute to use to assign a value to the component property.
	UserAttribute *string `pulumi:"userAttribute"`
	// The value to assign to the component property.
	Value *string `pulumi:"value"`
}

// ComponentPropertyInput is an input type that accepts ComponentPropertyArgs and ComponentPropertyOutput values.
// You can construct a concrete instance of `ComponentPropertyInput` via:
//
//	ComponentPropertyArgs{...}
type ComponentPropertyInput interface {
	pulumi.Input

	ToComponentPropertyOutput() ComponentPropertyOutput
	ToComponentPropertyOutputWithContext(context.Context) ComponentPropertyOutput
}

type ComponentPropertyArgs struct {
	// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
	BindingProperties ComponentPropertyBindingPropertiesPtrInput `pulumi:"bindingProperties"`
	// The information to bind the component property to form data.
	Bindings ComponentFormBindingElementMapInput `pulumi:"bindings"`
	// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
	CollectionBindingProperties ComponentPropertyBindingPropertiesPtrInput `pulumi:"collectionBindingProperties"`
	// The name of the component that is affected by an event.
	ComponentName pulumi.StringPtrInput `pulumi:"componentName"`
	// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
	Concat ComponentPropertyArrayInput `pulumi:"concat"`
	// The `ComponentConditionProperty` property specifies a conditional expression for setting a component property. Use `ComponentConditionProperty` to set a property to different values conditionally, based on the value of another property.
	Condition ComponentConditionPropertyPtrInput `pulumi:"condition"`
	// Specifies whether the user configured the property in Amplify Studio after importing it.
	Configured pulumi.BoolPtrInput `pulumi:"configured"`
	// The default value to assign to the component property.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// An event that occurs in your app. Use this for workflow data binding.
	Event pulumi.StringPtrInput `pulumi:"event"`
	// The default value assigned to the property when the component is imported into an app.
	ImportedValue pulumi.StringPtrInput `pulumi:"importedValue"`
	// The data model to use to assign a value to the component property.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The name of the component's property that is affected by an event.
	Property pulumi.StringPtrInput `pulumi:"property"`
	// The component type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// An authenticated user attribute to use to assign a value to the component property.
	UserAttribute pulumi.StringPtrInput `pulumi:"userAttribute"`
	// The value to assign to the component property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ComponentPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperty)(nil)).Elem()
}

func (i ComponentPropertyArgs) ToComponentPropertyOutput() ComponentPropertyOutput {
	return i.ToComponentPropertyOutputWithContext(context.Background())
}

func (i ComponentPropertyArgs) ToComponentPropertyOutputWithContext(ctx context.Context) ComponentPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyOutput)
}

func (i ComponentPropertyArgs) ToComponentPropertyPtrOutput() ComponentPropertyPtrOutput {
	return i.ToComponentPropertyPtrOutputWithContext(context.Background())
}

func (i ComponentPropertyArgs) ToComponentPropertyPtrOutputWithContext(ctx context.Context) ComponentPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyOutput).ToComponentPropertyPtrOutputWithContext(ctx)
}

// ComponentPropertyPtrInput is an input type that accepts ComponentPropertyArgs, ComponentPropertyPtr and ComponentPropertyPtrOutput values.
// You can construct a concrete instance of `ComponentPropertyPtrInput` via:
//
//	        ComponentPropertyArgs{...}
//
//	or:
//
//	        nil
type ComponentPropertyPtrInput interface {
	pulumi.Input

	ToComponentPropertyPtrOutput() ComponentPropertyPtrOutput
	ToComponentPropertyPtrOutputWithContext(context.Context) ComponentPropertyPtrOutput
}

type componentPropertyPtrType ComponentPropertyArgs

func ComponentPropertyPtr(v *ComponentPropertyArgs) ComponentPropertyPtrInput {
	return (*componentPropertyPtrType)(v)
}

func (*componentPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentProperty)(nil)).Elem()
}

func (i *componentPropertyPtrType) ToComponentPropertyPtrOutput() ComponentPropertyPtrOutput {
	return i.ToComponentPropertyPtrOutputWithContext(context.Background())
}

func (i *componentPropertyPtrType) ToComponentPropertyPtrOutputWithContext(ctx context.Context) ComponentPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyPtrOutput)
}

// ComponentPropertyArrayInput is an input type that accepts ComponentPropertyArray and ComponentPropertyArrayOutput values.
// You can construct a concrete instance of `ComponentPropertyArrayInput` via:
//
//	ComponentPropertyArray{ ComponentPropertyArgs{...} }
type ComponentPropertyArrayInput interface {
	pulumi.Input

	ToComponentPropertyArrayOutput() ComponentPropertyArrayOutput
	ToComponentPropertyArrayOutputWithContext(context.Context) ComponentPropertyArrayOutput
}

type ComponentPropertyArray []ComponentPropertyInput

func (ComponentPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentProperty)(nil)).Elem()
}

func (i ComponentPropertyArray) ToComponentPropertyArrayOutput() ComponentPropertyArrayOutput {
	return i.ToComponentPropertyArrayOutputWithContext(context.Background())
}

func (i ComponentPropertyArray) ToComponentPropertyArrayOutputWithContext(ctx context.Context) ComponentPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyArrayOutput)
}

// ComponentPropertyMapInput is an input type that accepts ComponentPropertyMap and ComponentPropertyMapOutput values.
// You can construct a concrete instance of `ComponentPropertyMapInput` via:
//
//	ComponentPropertyMap{ "key": ComponentPropertyArgs{...} }
type ComponentPropertyMapInput interface {
	pulumi.Input

	ToComponentPropertyMapOutput() ComponentPropertyMapOutput
	ToComponentPropertyMapOutputWithContext(context.Context) ComponentPropertyMapOutput
}

type ComponentPropertyMap map[string]ComponentPropertyInput

func (ComponentPropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentProperty)(nil)).Elem()
}

func (i ComponentPropertyMap) ToComponentPropertyMapOutput() ComponentPropertyMapOutput {
	return i.ToComponentPropertyMapOutputWithContext(context.Background())
}

func (i ComponentPropertyMap) ToComponentPropertyMapOutputWithContext(ctx context.Context) ComponentPropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyMapOutput)
}

type ComponentPropertyOutput struct{ *pulumi.OutputState }

func (ComponentPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentProperty)(nil)).Elem()
}

func (o ComponentPropertyOutput) ToComponentPropertyOutput() ComponentPropertyOutput {
	return o
}

func (o ComponentPropertyOutput) ToComponentPropertyOutputWithContext(ctx context.Context) ComponentPropertyOutput {
	return o
}

func (o ComponentPropertyOutput) ToComponentPropertyPtrOutput() ComponentPropertyPtrOutput {
	return o.ToComponentPropertyPtrOutputWithContext(context.Background())
}

func (o ComponentPropertyOutput) ToComponentPropertyPtrOutputWithContext(ctx context.Context) ComponentPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentProperty) *ComponentProperty {
		return &v
	}).(ComponentPropertyPtrOutput)
}

// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
func (o ComponentPropertyOutput) BindingProperties() ComponentPropertyBindingPropertiesPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *ComponentPropertyBindingProperties { return v.BindingProperties }).(ComponentPropertyBindingPropertiesPtrOutput)
}

// The information to bind the component property to form data.
func (o ComponentPropertyOutput) Bindings() ComponentFormBindingElementMapOutput {
	return o.ApplyT(func(v ComponentProperty) map[string]ComponentFormBindingElement { return v.Bindings }).(ComponentFormBindingElementMapOutput)
}

// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
func (o ComponentPropertyOutput) CollectionBindingProperties() ComponentPropertyBindingPropertiesPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *ComponentPropertyBindingProperties { return v.CollectionBindingProperties }).(ComponentPropertyBindingPropertiesPtrOutput)
}

// The name of the component that is affected by an event.
func (o ComponentPropertyOutput) ComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.ComponentName }).(pulumi.StringPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentPropertyOutput) Concat() ComponentPropertyArrayOutput {
	return o.ApplyT(func(v ComponentProperty) []ComponentProperty { return v.Concat }).(ComponentPropertyArrayOutput)
}

// The `ComponentConditionProperty` property specifies a conditional expression for setting a component property. Use `ComponentConditionProperty` to set a property to different values conditionally, based on the value of another property.
func (o ComponentPropertyOutput) Condition() ComponentConditionPropertyPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *ComponentConditionProperty { return v.Condition }).(ComponentConditionPropertyPtrOutput)
}

// Specifies whether the user configured the property in Amplify Studio after importing it.
func (o ComponentPropertyOutput) Configured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *bool { return v.Configured }).(pulumi.BoolPtrOutput)
}

// The default value to assign to the component property.
func (o ComponentPropertyOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// An event that occurs in your app. Use this for workflow data binding.
func (o ComponentPropertyOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.Event }).(pulumi.StringPtrOutput)
}

// The default value assigned to the property when the component is imported into an app.
func (o ComponentPropertyOutput) ImportedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.ImportedValue }).(pulumi.StringPtrOutput)
}

// The data model to use to assign a value to the component property.
func (o ComponentPropertyOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The name of the component's property that is affected by an event.
func (o ComponentPropertyOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The component type.
func (o ComponentPropertyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// An authenticated user attribute to use to assign a value to the component property.
func (o ComponentPropertyOutput) UserAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.UserAttribute }).(pulumi.StringPtrOutput)
}

// The value to assign to the component property.
func (o ComponentPropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ComponentPropertyPtrOutput struct{ *pulumi.OutputState }

func (ComponentPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentProperty)(nil)).Elem()
}

func (o ComponentPropertyPtrOutput) ToComponentPropertyPtrOutput() ComponentPropertyPtrOutput {
	return o
}

func (o ComponentPropertyPtrOutput) ToComponentPropertyPtrOutputWithContext(ctx context.Context) ComponentPropertyPtrOutput {
	return o
}

func (o ComponentPropertyPtrOutput) Elem() ComponentPropertyOutput {
	return o.ApplyT(func(v *ComponentProperty) ComponentProperty {
		if v != nil {
			return *v
		}
		var ret ComponentProperty
		return ret
	}).(ComponentPropertyOutput)
}

// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
func (o ComponentPropertyPtrOutput) BindingProperties() ComponentPropertyBindingPropertiesPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *ComponentPropertyBindingProperties {
		if v == nil {
			return nil
		}
		return v.BindingProperties
	}).(ComponentPropertyBindingPropertiesPtrOutput)
}

// The information to bind the component property to form data.
func (o ComponentPropertyPtrOutput) Bindings() ComponentFormBindingElementMapOutput {
	return o.ApplyT(func(v *ComponentProperty) map[string]ComponentFormBindingElement {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(ComponentFormBindingElementMapOutput)
}

// The `ComponentPropertyBindingProperties` property specifies a component property to associate with a binding property. This enables exposed properties on the top level component to propagate data to the component's property values.
func (o ComponentPropertyPtrOutput) CollectionBindingProperties() ComponentPropertyBindingPropertiesPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *ComponentPropertyBindingProperties {
		if v == nil {
			return nil
		}
		return v.CollectionBindingProperties
	}).(ComponentPropertyBindingPropertiesPtrOutput)
}

// The name of the component that is affected by an event.
func (o ComponentPropertyPtrOutput) ComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.ComponentName
	}).(pulumi.StringPtrOutput)
}

// The `ComponentProperty` property specifies the configuration for all of a component's properties. Use `ComponentProperty` to specify the values to render or bind by default.
func (o ComponentPropertyPtrOutput) Concat() ComponentPropertyArrayOutput {
	return o.ApplyT(func(v *ComponentProperty) []ComponentProperty {
		if v == nil {
			return nil
		}
		return v.Concat
	}).(ComponentPropertyArrayOutput)
}

// The `ComponentConditionProperty` property specifies a conditional expression for setting a component property. Use `ComponentConditionProperty` to set a property to different values conditionally, based on the value of another property.
func (o ComponentPropertyPtrOutput) Condition() ComponentConditionPropertyPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *ComponentConditionProperty {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(ComponentConditionPropertyPtrOutput)
}

// Specifies whether the user configured the property in Amplify Studio after importing it.
func (o ComponentPropertyPtrOutput) Configured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *bool {
		if v == nil {
			return nil
		}
		return v.Configured
	}).(pulumi.BoolPtrOutput)
}

// The default value to assign to the component property.
func (o ComponentPropertyPtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

// An event that occurs in your app. Use this for workflow data binding.
func (o ComponentPropertyPtrOutput) Event() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.Event
	}).(pulumi.StringPtrOutput)
}

// The default value assigned to the property when the component is imported into an app.
func (o ComponentPropertyPtrOutput) ImportedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.ImportedValue
	}).(pulumi.StringPtrOutput)
}

// The data model to use to assign a value to the component property.
func (o ComponentPropertyPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// The name of the component's property that is affected by an event.
func (o ComponentPropertyPtrOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.Property
	}).(pulumi.StringPtrOutput)
}

// The component type.
func (o ComponentPropertyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// An authenticated user attribute to use to assign a value to the component property.
func (o ComponentPropertyPtrOutput) UserAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.UserAttribute
	}).(pulumi.StringPtrOutput)
}

// The value to assign to the component property.
func (o ComponentPropertyPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentProperty) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type ComponentPropertyArrayOutput struct{ *pulumi.OutputState }

func (ComponentPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentProperty)(nil)).Elem()
}

func (o ComponentPropertyArrayOutput) ToComponentPropertyArrayOutput() ComponentPropertyArrayOutput {
	return o
}

func (o ComponentPropertyArrayOutput) ToComponentPropertyArrayOutputWithContext(ctx context.Context) ComponentPropertyArrayOutput {
	return o
}

func (o ComponentPropertyArrayOutput) Index(i pulumi.IntInput) ComponentPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentProperty {
		return vs[0].([]ComponentProperty)[vs[1].(int)]
	}).(ComponentPropertyOutput)
}

type ComponentPropertyMapOutput struct{ *pulumi.OutputState }

func (ComponentPropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ComponentProperty)(nil)).Elem()
}

func (o ComponentPropertyMapOutput) ToComponentPropertyMapOutput() ComponentPropertyMapOutput {
	return o
}

func (o ComponentPropertyMapOutput) ToComponentPropertyMapOutputWithContext(ctx context.Context) ComponentPropertyMapOutput {
	return o
}

func (o ComponentPropertyMapOutput) MapIndex(k pulumi.StringInput) ComponentPropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ComponentProperty {
		return vs[0].(map[string]ComponentProperty)[vs[1].(string)]
	}).(ComponentPropertyOutput)
}

type ComponentPropertyBindingProperties struct {
	// The data field to bind the property to.
	Field *string `pulumi:"field"`
	// The component property to bind to the data field.
	Property string `pulumi:"property"`
}

// ComponentPropertyBindingPropertiesInput is an input type that accepts ComponentPropertyBindingPropertiesArgs and ComponentPropertyBindingPropertiesOutput values.
// You can construct a concrete instance of `ComponentPropertyBindingPropertiesInput` via:
//
//	ComponentPropertyBindingPropertiesArgs{...}
type ComponentPropertyBindingPropertiesInput interface {
	pulumi.Input

	ToComponentPropertyBindingPropertiesOutput() ComponentPropertyBindingPropertiesOutput
	ToComponentPropertyBindingPropertiesOutputWithContext(context.Context) ComponentPropertyBindingPropertiesOutput
}

type ComponentPropertyBindingPropertiesArgs struct {
	// The data field to bind the property to.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The component property to bind to the data field.
	Property pulumi.StringInput `pulumi:"property"`
}

func (ComponentPropertyBindingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentPropertyBindingProperties)(nil)).Elem()
}

func (i ComponentPropertyBindingPropertiesArgs) ToComponentPropertyBindingPropertiesOutput() ComponentPropertyBindingPropertiesOutput {
	return i.ToComponentPropertyBindingPropertiesOutputWithContext(context.Background())
}

func (i ComponentPropertyBindingPropertiesArgs) ToComponentPropertyBindingPropertiesOutputWithContext(ctx context.Context) ComponentPropertyBindingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyBindingPropertiesOutput)
}

func (i ComponentPropertyBindingPropertiesArgs) ToComponentPropertyBindingPropertiesPtrOutput() ComponentPropertyBindingPropertiesPtrOutput {
	return i.ToComponentPropertyBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i ComponentPropertyBindingPropertiesArgs) ToComponentPropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertyBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyBindingPropertiesOutput).ToComponentPropertyBindingPropertiesPtrOutputWithContext(ctx)
}

// ComponentPropertyBindingPropertiesPtrInput is an input type that accepts ComponentPropertyBindingPropertiesArgs, ComponentPropertyBindingPropertiesPtr and ComponentPropertyBindingPropertiesPtrOutput values.
// You can construct a concrete instance of `ComponentPropertyBindingPropertiesPtrInput` via:
//
//	        ComponentPropertyBindingPropertiesArgs{...}
//
//	or:
//
//	        nil
type ComponentPropertyBindingPropertiesPtrInput interface {
	pulumi.Input

	ToComponentPropertyBindingPropertiesPtrOutput() ComponentPropertyBindingPropertiesPtrOutput
	ToComponentPropertyBindingPropertiesPtrOutputWithContext(context.Context) ComponentPropertyBindingPropertiesPtrOutput
}

type componentPropertyBindingPropertiesPtrType ComponentPropertyBindingPropertiesArgs

func ComponentPropertyBindingPropertiesPtr(v *ComponentPropertyBindingPropertiesArgs) ComponentPropertyBindingPropertiesPtrInput {
	return (*componentPropertyBindingPropertiesPtrType)(v)
}

func (*componentPropertyBindingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentPropertyBindingProperties)(nil)).Elem()
}

func (i *componentPropertyBindingPropertiesPtrType) ToComponentPropertyBindingPropertiesPtrOutput() ComponentPropertyBindingPropertiesPtrOutput {
	return i.ToComponentPropertyBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i *componentPropertyBindingPropertiesPtrType) ToComponentPropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertyBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentPropertyBindingPropertiesPtrOutput)
}

type ComponentPropertyBindingPropertiesOutput struct{ *pulumi.OutputState }

func (ComponentPropertyBindingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentPropertyBindingProperties)(nil)).Elem()
}

func (o ComponentPropertyBindingPropertiesOutput) ToComponentPropertyBindingPropertiesOutput() ComponentPropertyBindingPropertiesOutput {
	return o
}

func (o ComponentPropertyBindingPropertiesOutput) ToComponentPropertyBindingPropertiesOutputWithContext(ctx context.Context) ComponentPropertyBindingPropertiesOutput {
	return o
}

func (o ComponentPropertyBindingPropertiesOutput) ToComponentPropertyBindingPropertiesPtrOutput() ComponentPropertyBindingPropertiesPtrOutput {
	return o.ToComponentPropertyBindingPropertiesPtrOutputWithContext(context.Background())
}

func (o ComponentPropertyBindingPropertiesOutput) ToComponentPropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertyBindingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentPropertyBindingProperties) *ComponentPropertyBindingProperties {
		return &v
	}).(ComponentPropertyBindingPropertiesPtrOutput)
}

// The data field to bind the property to.
func (o ComponentPropertyBindingPropertiesOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentPropertyBindingProperties) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The component property to bind to the data field.
func (o ComponentPropertyBindingPropertiesOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentPropertyBindingProperties) string { return v.Property }).(pulumi.StringOutput)
}

type ComponentPropertyBindingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComponentPropertyBindingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentPropertyBindingProperties)(nil)).Elem()
}

func (o ComponentPropertyBindingPropertiesPtrOutput) ToComponentPropertyBindingPropertiesPtrOutput() ComponentPropertyBindingPropertiesPtrOutput {
	return o
}

func (o ComponentPropertyBindingPropertiesPtrOutput) ToComponentPropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) ComponentPropertyBindingPropertiesPtrOutput {
	return o
}

func (o ComponentPropertyBindingPropertiesPtrOutput) Elem() ComponentPropertyBindingPropertiesOutput {
	return o.ApplyT(func(v *ComponentPropertyBindingProperties) ComponentPropertyBindingProperties {
		if v != nil {
			return *v
		}
		var ret ComponentPropertyBindingProperties
		return ret
	}).(ComponentPropertyBindingPropertiesOutput)
}

// The data field to bind the property to.
func (o ComponentPropertyBindingPropertiesPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentPropertyBindingProperties) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// The component property to bind to the data field.
func (o ComponentPropertyBindingPropertiesPtrOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComponentPropertyBindingProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Property
	}).(pulumi.StringPtrOutput)
}

type ComponentSortProperty struct {
	// The direction of the sort, either ascending or descending.
	Direction ComponentSortDirection `pulumi:"direction"`
	// The field to perform the sort on.
	Field string `pulumi:"field"`
}

// ComponentSortPropertyInput is an input type that accepts ComponentSortPropertyArgs and ComponentSortPropertyOutput values.
// You can construct a concrete instance of `ComponentSortPropertyInput` via:
//
//	ComponentSortPropertyArgs{...}
type ComponentSortPropertyInput interface {
	pulumi.Input

	ToComponentSortPropertyOutput() ComponentSortPropertyOutput
	ToComponentSortPropertyOutputWithContext(context.Context) ComponentSortPropertyOutput
}

type ComponentSortPropertyArgs struct {
	// The direction of the sort, either ascending or descending.
	Direction ComponentSortDirectionInput `pulumi:"direction"`
	// The field to perform the sort on.
	Field pulumi.StringInput `pulumi:"field"`
}

func (ComponentSortPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSortProperty)(nil)).Elem()
}

func (i ComponentSortPropertyArgs) ToComponentSortPropertyOutput() ComponentSortPropertyOutput {
	return i.ToComponentSortPropertyOutputWithContext(context.Background())
}

func (i ComponentSortPropertyArgs) ToComponentSortPropertyOutputWithContext(ctx context.Context) ComponentSortPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentSortPropertyOutput)
}

// ComponentSortPropertyArrayInput is an input type that accepts ComponentSortPropertyArray and ComponentSortPropertyArrayOutput values.
// You can construct a concrete instance of `ComponentSortPropertyArrayInput` via:
//
//	ComponentSortPropertyArray{ ComponentSortPropertyArgs{...} }
type ComponentSortPropertyArrayInput interface {
	pulumi.Input

	ToComponentSortPropertyArrayOutput() ComponentSortPropertyArrayOutput
	ToComponentSortPropertyArrayOutputWithContext(context.Context) ComponentSortPropertyArrayOutput
}

type ComponentSortPropertyArray []ComponentSortPropertyInput

func (ComponentSortPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentSortProperty)(nil)).Elem()
}

func (i ComponentSortPropertyArray) ToComponentSortPropertyArrayOutput() ComponentSortPropertyArrayOutput {
	return i.ToComponentSortPropertyArrayOutputWithContext(context.Background())
}

func (i ComponentSortPropertyArray) ToComponentSortPropertyArrayOutputWithContext(ctx context.Context) ComponentSortPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentSortPropertyArrayOutput)
}

type ComponentSortPropertyOutput struct{ *pulumi.OutputState }

func (ComponentSortPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSortProperty)(nil)).Elem()
}

func (o ComponentSortPropertyOutput) ToComponentSortPropertyOutput() ComponentSortPropertyOutput {
	return o
}

func (o ComponentSortPropertyOutput) ToComponentSortPropertyOutputWithContext(ctx context.Context) ComponentSortPropertyOutput {
	return o
}

// The direction of the sort, either ascending or descending.
func (o ComponentSortPropertyOutput) Direction() ComponentSortDirectionOutput {
	return o.ApplyT(func(v ComponentSortProperty) ComponentSortDirection { return v.Direction }).(ComponentSortDirectionOutput)
}

// The field to perform the sort on.
func (o ComponentSortPropertyOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSortProperty) string { return v.Field }).(pulumi.StringOutput)
}

type ComponentSortPropertyArrayOutput struct{ *pulumi.OutputState }

func (ComponentSortPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentSortProperty)(nil)).Elem()
}

func (o ComponentSortPropertyArrayOutput) ToComponentSortPropertyArrayOutput() ComponentSortPropertyArrayOutput {
	return o
}

func (o ComponentSortPropertyArrayOutput) ToComponentSortPropertyArrayOutputWithContext(ctx context.Context) ComponentSortPropertyArrayOutput {
	return o
}

func (o ComponentSortPropertyArrayOutput) Index(i pulumi.IntInput) ComponentSortPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentSortProperty {
		return vs[0].([]ComponentSortProperty)[vs[1].(int)]
	}).(ComponentSortPropertyOutput)
}

type ComponentVariant struct {
	// The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify `tags` as a valid property for `overrides` .
	Overrides map[string]interface{} `pulumi:"overrides"`
	// The combination of variants that comprise this variant.
	VariantValues map[string]string `pulumi:"variantValues"`
}

// ComponentVariantInput is an input type that accepts ComponentVariantArgs and ComponentVariantOutput values.
// You can construct a concrete instance of `ComponentVariantInput` via:
//
//	ComponentVariantArgs{...}
type ComponentVariantInput interface {
	pulumi.Input

	ToComponentVariantOutput() ComponentVariantOutput
	ToComponentVariantOutputWithContext(context.Context) ComponentVariantOutput
}

type ComponentVariantArgs struct {
	// The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify `tags` as a valid property for `overrides` .
	Overrides pulumi.MapInput `pulumi:"overrides"`
	// The combination of variants that comprise this variant.
	VariantValues pulumi.StringMapInput `pulumi:"variantValues"`
}

func (ComponentVariantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariant)(nil)).Elem()
}

func (i ComponentVariantArgs) ToComponentVariantOutput() ComponentVariantOutput {
	return i.ToComponentVariantOutputWithContext(context.Background())
}

func (i ComponentVariantArgs) ToComponentVariantOutputWithContext(ctx context.Context) ComponentVariantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantOutput)
}

// ComponentVariantArrayInput is an input type that accepts ComponentVariantArray and ComponentVariantArrayOutput values.
// You can construct a concrete instance of `ComponentVariantArrayInput` via:
//
//	ComponentVariantArray{ ComponentVariantArgs{...} }
type ComponentVariantArrayInput interface {
	pulumi.Input

	ToComponentVariantArrayOutput() ComponentVariantArrayOutput
	ToComponentVariantArrayOutputWithContext(context.Context) ComponentVariantArrayOutput
}

type ComponentVariantArray []ComponentVariantInput

func (ComponentVariantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentVariant)(nil)).Elem()
}

func (i ComponentVariantArray) ToComponentVariantArrayOutput() ComponentVariantArrayOutput {
	return i.ToComponentVariantArrayOutputWithContext(context.Background())
}

func (i ComponentVariantArray) ToComponentVariantArrayOutputWithContext(ctx context.Context) ComponentVariantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVariantArrayOutput)
}

type ComponentVariantOutput struct{ *pulumi.OutputState }

func (ComponentVariantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVariant)(nil)).Elem()
}

func (o ComponentVariantOutput) ToComponentVariantOutput() ComponentVariantOutput {
	return o
}

func (o ComponentVariantOutput) ToComponentVariantOutputWithContext(ctx context.Context) ComponentVariantOutput {
	return o
}

// The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify `tags` as a valid property for `overrides` .
func (o ComponentVariantOutput) Overrides() pulumi.MapOutput {
	return o.ApplyT(func(v ComponentVariant) map[string]interface{} { return v.Overrides }).(pulumi.MapOutput)
}

// The combination of variants that comprise this variant.
func (o ComponentVariantOutput) VariantValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVariant) map[string]string { return v.VariantValues }).(pulumi.StringMapOutput)
}

type ComponentVariantArrayOutput struct{ *pulumi.OutputState }

func (ComponentVariantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentVariant)(nil)).Elem()
}

func (o ComponentVariantArrayOutput) ToComponentVariantArrayOutput() ComponentVariantArrayOutput {
	return o
}

func (o ComponentVariantArrayOutput) ToComponentVariantArrayOutputWithContext(ctx context.Context) ComponentVariantArrayOutput {
	return o
}

func (o ComponentVariantArrayOutput) Index(i pulumi.IntInput) ComponentVariantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentVariant {
		return vs[0].([]ComponentVariant)[vs[1].(int)]
	}).(ComponentVariantOutput)
}

type FormButton struct {
	// Describes the button's properties.
	Children *string `pulumi:"children"`
	// Specifies whether the button is visible on the form.
	Excluded *bool `pulumi:"excluded"`
	// The `FieldPosition` property specifies the field position.
	Position interface{} `pulumi:"position"`
}

// FormButtonInput is an input type that accepts FormButtonArgs and FormButtonOutput values.
// You can construct a concrete instance of `FormButtonInput` via:
//
//	FormButtonArgs{...}
type FormButtonInput interface {
	pulumi.Input

	ToFormButtonOutput() FormButtonOutput
	ToFormButtonOutputWithContext(context.Context) FormButtonOutput
}

type FormButtonArgs struct {
	// Describes the button's properties.
	Children pulumi.StringPtrInput `pulumi:"children"`
	// Specifies whether the button is visible on the form.
	Excluded pulumi.BoolPtrInput `pulumi:"excluded"`
	// The `FieldPosition` property specifies the field position.
	Position pulumi.Input `pulumi:"position"`
}

func (FormButtonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormButton)(nil)).Elem()
}

func (i FormButtonArgs) ToFormButtonOutput() FormButtonOutput {
	return i.ToFormButtonOutputWithContext(context.Background())
}

func (i FormButtonArgs) ToFormButtonOutputWithContext(ctx context.Context) FormButtonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormButtonOutput)
}

func (i FormButtonArgs) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return i.ToFormButtonPtrOutputWithContext(context.Background())
}

func (i FormButtonArgs) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormButtonOutput).ToFormButtonPtrOutputWithContext(ctx)
}

// FormButtonPtrInput is an input type that accepts FormButtonArgs, FormButtonPtr and FormButtonPtrOutput values.
// You can construct a concrete instance of `FormButtonPtrInput` via:
//
//	        FormButtonArgs{...}
//
//	or:
//
//	        nil
type FormButtonPtrInput interface {
	pulumi.Input

	ToFormButtonPtrOutput() FormButtonPtrOutput
	ToFormButtonPtrOutputWithContext(context.Context) FormButtonPtrOutput
}

type formButtonPtrType FormButtonArgs

func FormButtonPtr(v *FormButtonArgs) FormButtonPtrInput {
	return (*formButtonPtrType)(v)
}

func (*formButtonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormButton)(nil)).Elem()
}

func (i *formButtonPtrType) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return i.ToFormButtonPtrOutputWithContext(context.Background())
}

func (i *formButtonPtrType) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormButtonPtrOutput)
}

type FormButtonOutput struct{ *pulumi.OutputState }

func (FormButtonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormButton)(nil)).Elem()
}

func (o FormButtonOutput) ToFormButtonOutput() FormButtonOutput {
	return o
}

func (o FormButtonOutput) ToFormButtonOutputWithContext(ctx context.Context) FormButtonOutput {
	return o
}

func (o FormButtonOutput) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return o.ToFormButtonPtrOutputWithContext(context.Background())
}

func (o FormButtonOutput) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormButton) *FormButton {
		return &v
	}).(FormButtonPtrOutput)
}

// Describes the button's properties.
func (o FormButtonOutput) Children() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormButton) *string { return v.Children }).(pulumi.StringPtrOutput)
}

// Specifies whether the button is visible on the form.
func (o FormButtonOutput) Excluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormButton) *bool { return v.Excluded }).(pulumi.BoolPtrOutput)
}

// The `FieldPosition` property specifies the field position.
func (o FormButtonOutput) Position() pulumi.AnyOutput {
	return o.ApplyT(func(v FormButton) interface{} { return v.Position }).(pulumi.AnyOutput)
}

type FormButtonPtrOutput struct{ *pulumi.OutputState }

func (FormButtonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormButton)(nil)).Elem()
}

func (o FormButtonPtrOutput) ToFormButtonPtrOutput() FormButtonPtrOutput {
	return o
}

func (o FormButtonPtrOutput) ToFormButtonPtrOutputWithContext(ctx context.Context) FormButtonPtrOutput {
	return o
}

func (o FormButtonPtrOutput) Elem() FormButtonOutput {
	return o.ApplyT(func(v *FormButton) FormButton {
		if v != nil {
			return *v
		}
		var ret FormButton
		return ret
	}).(FormButtonOutput)
}

// Describes the button's properties.
func (o FormButtonPtrOutput) Children() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormButton) *string {
		if v == nil {
			return nil
		}
		return v.Children
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the button is visible on the form.
func (o FormButtonPtrOutput) Excluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormButton) *bool {
		if v == nil {
			return nil
		}
		return v.Excluded
	}).(pulumi.BoolPtrOutput)
}

// The `FieldPosition` property specifies the field position.
func (o FormButtonPtrOutput) Position() pulumi.AnyOutput {
	return o.ApplyT(func(v *FormButton) interface{} {
		if v == nil {
			return nil
		}
		return v.Position
	}).(pulumi.AnyOutput)
}

type FormCta struct {
	// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
	Cancel *FormButton `pulumi:"cancel"`
	// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
	Clear *FormButton `pulumi:"clear"`
	// The position of the button.
	Position *FormButtonsPosition `pulumi:"position"`
	// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
	Submit *FormButton `pulumi:"submit"`
}

// FormCtaInput is an input type that accepts FormCtaArgs and FormCtaOutput values.
// You can construct a concrete instance of `FormCtaInput` via:
//
//	FormCtaArgs{...}
type FormCtaInput interface {
	pulumi.Input

	ToFormCtaOutput() FormCtaOutput
	ToFormCtaOutputWithContext(context.Context) FormCtaOutput
}

type FormCtaArgs struct {
	// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
	Cancel FormButtonPtrInput `pulumi:"cancel"`
	// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
	Clear FormButtonPtrInput `pulumi:"clear"`
	// The position of the button.
	Position FormButtonsPositionPtrInput `pulumi:"position"`
	// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
	Submit FormButtonPtrInput `pulumi:"submit"`
}

func (FormCtaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormCta)(nil)).Elem()
}

func (i FormCtaArgs) ToFormCtaOutput() FormCtaOutput {
	return i.ToFormCtaOutputWithContext(context.Background())
}

func (i FormCtaArgs) ToFormCtaOutputWithContext(ctx context.Context) FormCtaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormCtaOutput)
}

func (i FormCtaArgs) ToFormCtaPtrOutput() FormCtaPtrOutput {
	return i.ToFormCtaPtrOutputWithContext(context.Background())
}

func (i FormCtaArgs) ToFormCtaPtrOutputWithContext(ctx context.Context) FormCtaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormCtaOutput).ToFormCtaPtrOutputWithContext(ctx)
}

// FormCtaPtrInput is an input type that accepts FormCtaArgs, FormCtaPtr and FormCtaPtrOutput values.
// You can construct a concrete instance of `FormCtaPtrInput` via:
//
//	        FormCtaArgs{...}
//
//	or:
//
//	        nil
type FormCtaPtrInput interface {
	pulumi.Input

	ToFormCtaPtrOutput() FormCtaPtrOutput
	ToFormCtaPtrOutputWithContext(context.Context) FormCtaPtrOutput
}

type formCtaPtrType FormCtaArgs

func FormCtaPtr(v *FormCtaArgs) FormCtaPtrInput {
	return (*formCtaPtrType)(v)
}

func (*formCtaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormCta)(nil)).Elem()
}

func (i *formCtaPtrType) ToFormCtaPtrOutput() FormCtaPtrOutput {
	return i.ToFormCtaPtrOutputWithContext(context.Background())
}

func (i *formCtaPtrType) ToFormCtaPtrOutputWithContext(ctx context.Context) FormCtaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormCtaPtrOutput)
}

type FormCtaOutput struct{ *pulumi.OutputState }

func (FormCtaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormCta)(nil)).Elem()
}

func (o FormCtaOutput) ToFormCtaOutput() FormCtaOutput {
	return o
}

func (o FormCtaOutput) ToFormCtaOutputWithContext(ctx context.Context) FormCtaOutput {
	return o
}

func (o FormCtaOutput) ToFormCtaPtrOutput() FormCtaPtrOutput {
	return o.ToFormCtaPtrOutputWithContext(context.Background())
}

func (o FormCtaOutput) ToFormCtaPtrOutputWithContext(ctx context.Context) FormCtaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormCta) *FormCta {
		return &v
	}).(FormCtaPtrOutput)
}

// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
func (o FormCtaOutput) Cancel() FormButtonPtrOutput {
	return o.ApplyT(func(v FormCta) *FormButton { return v.Cancel }).(FormButtonPtrOutput)
}

// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
func (o FormCtaOutput) Clear() FormButtonPtrOutput {
	return o.ApplyT(func(v FormCta) *FormButton { return v.Clear }).(FormButtonPtrOutput)
}

// The position of the button.
func (o FormCtaOutput) Position() FormButtonsPositionPtrOutput {
	return o.ApplyT(func(v FormCta) *FormButtonsPosition { return v.Position }).(FormButtonsPositionPtrOutput)
}

// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
func (o FormCtaOutput) Submit() FormButtonPtrOutput {
	return o.ApplyT(func(v FormCta) *FormButton { return v.Submit }).(FormButtonPtrOutput)
}

type FormCtaPtrOutput struct{ *pulumi.OutputState }

func (FormCtaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormCta)(nil)).Elem()
}

func (o FormCtaPtrOutput) ToFormCtaPtrOutput() FormCtaPtrOutput {
	return o
}

func (o FormCtaPtrOutput) ToFormCtaPtrOutputWithContext(ctx context.Context) FormCtaPtrOutput {
	return o
}

func (o FormCtaPtrOutput) Elem() FormCtaOutput {
	return o.ApplyT(func(v *FormCta) FormCta {
		if v != nil {
			return *v
		}
		var ret FormCta
		return ret
	}).(FormCtaOutput)
}

// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
func (o FormCtaPtrOutput) Cancel() FormButtonPtrOutput {
	return o.ApplyT(func(v *FormCta) *FormButton {
		if v == nil {
			return nil
		}
		return v.Cancel
	}).(FormButtonPtrOutput)
}

// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
func (o FormCtaPtrOutput) Clear() FormButtonPtrOutput {
	return o.ApplyT(func(v *FormCta) *FormButton {
		if v == nil {
			return nil
		}
		return v.Clear
	}).(FormButtonPtrOutput)
}

// The position of the button.
func (o FormCtaPtrOutput) Position() FormButtonsPositionPtrOutput {
	return o.ApplyT(func(v *FormCta) *FormButtonsPosition {
		if v == nil {
			return nil
		}
		return v.Position
	}).(FormButtonsPositionPtrOutput)
}

// The `FormButton` property specifies the configuration for a button UI element that is a part of a form.
func (o FormCtaPtrOutput) Submit() FormButtonPtrOutput {
	return o.ApplyT(func(v *FormCta) *FormButton {
		if v == nil {
			return nil
		}
		return v.Submit
	}).(FormButtonPtrOutput)
}

type FormDataTypeConfig struct {
	// The data source type, either an Amplify DataStore model or a custom data type.
	DataSourceType FormDataSourceType `pulumi:"dataSourceType"`
	// The unique name of the data type you are using as the data source for the form.
	DataTypeName string `pulumi:"dataTypeName"`
}

// FormDataTypeConfigInput is an input type that accepts FormDataTypeConfigArgs and FormDataTypeConfigOutput values.
// You can construct a concrete instance of `FormDataTypeConfigInput` via:
//
//	FormDataTypeConfigArgs{...}
type FormDataTypeConfigInput interface {
	pulumi.Input

	ToFormDataTypeConfigOutput() FormDataTypeConfigOutput
	ToFormDataTypeConfigOutputWithContext(context.Context) FormDataTypeConfigOutput
}

type FormDataTypeConfigArgs struct {
	// The data source type, either an Amplify DataStore model or a custom data type.
	DataSourceType FormDataSourceTypeInput `pulumi:"dataSourceType"`
	// The unique name of the data type you are using as the data source for the form.
	DataTypeName pulumi.StringInput `pulumi:"dataTypeName"`
}

func (FormDataTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormDataTypeConfig)(nil)).Elem()
}

func (i FormDataTypeConfigArgs) ToFormDataTypeConfigOutput() FormDataTypeConfigOutput {
	return i.ToFormDataTypeConfigOutputWithContext(context.Background())
}

func (i FormDataTypeConfigArgs) ToFormDataTypeConfigOutputWithContext(ctx context.Context) FormDataTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormDataTypeConfigOutput)
}

func (i FormDataTypeConfigArgs) ToFormDataTypeConfigPtrOutput() FormDataTypeConfigPtrOutput {
	return i.ToFormDataTypeConfigPtrOutputWithContext(context.Background())
}

func (i FormDataTypeConfigArgs) ToFormDataTypeConfigPtrOutputWithContext(ctx context.Context) FormDataTypeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormDataTypeConfigOutput).ToFormDataTypeConfigPtrOutputWithContext(ctx)
}

// FormDataTypeConfigPtrInput is an input type that accepts FormDataTypeConfigArgs, FormDataTypeConfigPtr and FormDataTypeConfigPtrOutput values.
// You can construct a concrete instance of `FormDataTypeConfigPtrInput` via:
//
//	        FormDataTypeConfigArgs{...}
//
//	or:
//
//	        nil
type FormDataTypeConfigPtrInput interface {
	pulumi.Input

	ToFormDataTypeConfigPtrOutput() FormDataTypeConfigPtrOutput
	ToFormDataTypeConfigPtrOutputWithContext(context.Context) FormDataTypeConfigPtrOutput
}

type formDataTypeConfigPtrType FormDataTypeConfigArgs

func FormDataTypeConfigPtr(v *FormDataTypeConfigArgs) FormDataTypeConfigPtrInput {
	return (*formDataTypeConfigPtrType)(v)
}

func (*formDataTypeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormDataTypeConfig)(nil)).Elem()
}

func (i *formDataTypeConfigPtrType) ToFormDataTypeConfigPtrOutput() FormDataTypeConfigPtrOutput {
	return i.ToFormDataTypeConfigPtrOutputWithContext(context.Background())
}

func (i *formDataTypeConfigPtrType) ToFormDataTypeConfigPtrOutputWithContext(ctx context.Context) FormDataTypeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormDataTypeConfigPtrOutput)
}

type FormDataTypeConfigOutput struct{ *pulumi.OutputState }

func (FormDataTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormDataTypeConfig)(nil)).Elem()
}

func (o FormDataTypeConfigOutput) ToFormDataTypeConfigOutput() FormDataTypeConfigOutput {
	return o
}

func (o FormDataTypeConfigOutput) ToFormDataTypeConfigOutputWithContext(ctx context.Context) FormDataTypeConfigOutput {
	return o
}

func (o FormDataTypeConfigOutput) ToFormDataTypeConfigPtrOutput() FormDataTypeConfigPtrOutput {
	return o.ToFormDataTypeConfigPtrOutputWithContext(context.Background())
}

func (o FormDataTypeConfigOutput) ToFormDataTypeConfigPtrOutputWithContext(ctx context.Context) FormDataTypeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormDataTypeConfig) *FormDataTypeConfig {
		return &v
	}).(FormDataTypeConfigPtrOutput)
}

// The data source type, either an Amplify DataStore model or a custom data type.
func (o FormDataTypeConfigOutput) DataSourceType() FormDataSourceTypeOutput {
	return o.ApplyT(func(v FormDataTypeConfig) FormDataSourceType { return v.DataSourceType }).(FormDataSourceTypeOutput)
}

// The unique name of the data type you are using as the data source for the form.
func (o FormDataTypeConfigOutput) DataTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v FormDataTypeConfig) string { return v.DataTypeName }).(pulumi.StringOutput)
}

type FormDataTypeConfigPtrOutput struct{ *pulumi.OutputState }

func (FormDataTypeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormDataTypeConfig)(nil)).Elem()
}

func (o FormDataTypeConfigPtrOutput) ToFormDataTypeConfigPtrOutput() FormDataTypeConfigPtrOutput {
	return o
}

func (o FormDataTypeConfigPtrOutput) ToFormDataTypeConfigPtrOutputWithContext(ctx context.Context) FormDataTypeConfigPtrOutput {
	return o
}

func (o FormDataTypeConfigPtrOutput) Elem() FormDataTypeConfigOutput {
	return o.ApplyT(func(v *FormDataTypeConfig) FormDataTypeConfig {
		if v != nil {
			return *v
		}
		var ret FormDataTypeConfig
		return ret
	}).(FormDataTypeConfigOutput)
}

// The data source type, either an Amplify DataStore model or a custom data type.
func (o FormDataTypeConfigPtrOutput) DataSourceType() FormDataSourceTypePtrOutput {
	return o.ApplyT(func(v *FormDataTypeConfig) *FormDataSourceType {
		if v == nil {
			return nil
		}
		return &v.DataSourceType
	}).(FormDataSourceTypePtrOutput)
}

// The unique name of the data type you are using as the data source for the form.
func (o FormDataTypeConfigPtrOutput) DataTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormDataTypeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataTypeName
	}).(pulumi.StringPtrOutput)
}

type FormFieldConfig struct {
	// Specifies whether to hide a field.
	Excluded *bool `pulumi:"excluded"`
	// The `FieldInputConfig` property specifies the configuration for the default input values to display for a field.
	InputType *FormFieldInputConfig `pulumi:"inputType"`
	// The label for the field.
	Label *string `pulumi:"label"`
	// The `FieldPosition` property specifies the field position.
	Position interface{} `pulumi:"position"`
	// The `FieldValidationConfiguration` property specifies the validation configuration for a field.
	Validations []FormFieldValidationConfiguration `pulumi:"validations"`
}

// FormFieldConfigInput is an input type that accepts FormFieldConfigArgs and FormFieldConfigOutput values.
// You can construct a concrete instance of `FormFieldConfigInput` via:
//
//	FormFieldConfigArgs{...}
type FormFieldConfigInput interface {
	pulumi.Input

	ToFormFieldConfigOutput() FormFieldConfigOutput
	ToFormFieldConfigOutputWithContext(context.Context) FormFieldConfigOutput
}

type FormFieldConfigArgs struct {
	// Specifies whether to hide a field.
	Excluded pulumi.BoolPtrInput `pulumi:"excluded"`
	// The `FieldInputConfig` property specifies the configuration for the default input values to display for a field.
	InputType FormFieldInputConfigPtrInput `pulumi:"inputType"`
	// The label for the field.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The `FieldPosition` property specifies the field position.
	Position pulumi.Input `pulumi:"position"`
	// The `FieldValidationConfiguration` property specifies the validation configuration for a field.
	Validations FormFieldValidationConfigurationArrayInput `pulumi:"validations"`
}

func (FormFieldConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldConfig)(nil)).Elem()
}

func (i FormFieldConfigArgs) ToFormFieldConfigOutput() FormFieldConfigOutput {
	return i.ToFormFieldConfigOutputWithContext(context.Background())
}

func (i FormFieldConfigArgs) ToFormFieldConfigOutputWithContext(ctx context.Context) FormFieldConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldConfigOutput)
}

// FormFieldConfigMapInput is an input type that accepts FormFieldConfigMap and FormFieldConfigMapOutput values.
// You can construct a concrete instance of `FormFieldConfigMapInput` via:
//
//	FormFieldConfigMap{ "key": FormFieldConfigArgs{...} }
type FormFieldConfigMapInput interface {
	pulumi.Input

	ToFormFieldConfigMapOutput() FormFieldConfigMapOutput
	ToFormFieldConfigMapOutputWithContext(context.Context) FormFieldConfigMapOutput
}

type FormFieldConfigMap map[string]FormFieldConfigInput

func (FormFieldConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FormFieldConfig)(nil)).Elem()
}

func (i FormFieldConfigMap) ToFormFieldConfigMapOutput() FormFieldConfigMapOutput {
	return i.ToFormFieldConfigMapOutputWithContext(context.Background())
}

func (i FormFieldConfigMap) ToFormFieldConfigMapOutputWithContext(ctx context.Context) FormFieldConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldConfigMapOutput)
}

type FormFieldConfigOutput struct{ *pulumi.OutputState }

func (FormFieldConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldConfig)(nil)).Elem()
}

func (o FormFieldConfigOutput) ToFormFieldConfigOutput() FormFieldConfigOutput {
	return o
}

func (o FormFieldConfigOutput) ToFormFieldConfigOutputWithContext(ctx context.Context) FormFieldConfigOutput {
	return o
}

// Specifies whether to hide a field.
func (o FormFieldConfigOutput) Excluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormFieldConfig) *bool { return v.Excluded }).(pulumi.BoolPtrOutput)
}

// The `FieldInputConfig` property specifies the configuration for the default input values to display for a field.
func (o FormFieldConfigOutput) InputType() FormFieldInputConfigPtrOutput {
	return o.ApplyT(func(v FormFieldConfig) *FormFieldInputConfig { return v.InputType }).(FormFieldInputConfigPtrOutput)
}

// The label for the field.
func (o FormFieldConfigOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldConfig) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The `FieldPosition` property specifies the field position.
func (o FormFieldConfigOutput) Position() pulumi.AnyOutput {
	return o.ApplyT(func(v FormFieldConfig) interface{} { return v.Position }).(pulumi.AnyOutput)
}

// The `FieldValidationConfiguration` property specifies the validation configuration for a field.
func (o FormFieldConfigOutput) Validations() FormFieldValidationConfigurationArrayOutput {
	return o.ApplyT(func(v FormFieldConfig) []FormFieldValidationConfiguration { return v.Validations }).(FormFieldValidationConfigurationArrayOutput)
}

type FormFieldConfigMapOutput struct{ *pulumi.OutputState }

func (FormFieldConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FormFieldConfig)(nil)).Elem()
}

func (o FormFieldConfigMapOutput) ToFormFieldConfigMapOutput() FormFieldConfigMapOutput {
	return o
}

func (o FormFieldConfigMapOutput) ToFormFieldConfigMapOutputWithContext(ctx context.Context) FormFieldConfigMapOutput {
	return o
}

func (o FormFieldConfigMapOutput) MapIndex(k pulumi.StringInput) FormFieldConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FormFieldConfig {
		return vs[0].(map[string]FormFieldConfig)[vs[1].(string)]
	}).(FormFieldConfigOutput)
}

type FormFieldInputConfig struct {
	// Specifies whether a field has a default value.
	DefaultChecked *bool `pulumi:"defaultChecked"`
	// The default country code for a phone number.
	DefaultCountryCode *string `pulumi:"defaultCountryCode"`
	// The default value for the field.
	DefaultValue *string `pulumi:"defaultValue"`
	// The text to display to describe the field.
	DescriptiveText *string `pulumi:"descriptiveText"`
	// Describes the configuration for the file uploader field.
	FileUploaderConfig *FormFileUploaderFieldConfig `pulumi:"fileUploaderConfig"`
	// Specifies whether to render the field as an array. This property is ignored if the `dataSourceType` for the form is a Data Store.
	IsArray *bool `pulumi:"isArray"`
	// The maximum value to display for the field.
	MaxValue *float64 `pulumi:"maxValue"`
	// The minimum value to display for the field.
	MinValue *float64 `pulumi:"minValue"`
	// The name of the field.
	Name *string `pulumi:"name"`
	// The text to display as a placeholder for the field.
	Placeholder *string `pulumi:"placeholder"`
	// Specifies a read only field.
	ReadOnly *bool `pulumi:"readOnly"`
	// Specifies a field that requires input.
	Required *bool `pulumi:"required"`
	// The stepping increment for a numeric value in a field.
	Step *float64 `pulumi:"step"`
	// The input type for the field.
	Type string `pulumi:"type"`
	// The value for the field.
	Value *string `pulumi:"value"`
	// The `ValueMappings` property specifies the data binding configuration for a value map.
	ValueMappings *FormValueMappings `pulumi:"valueMappings"`
}

// FormFieldInputConfigInput is an input type that accepts FormFieldInputConfigArgs and FormFieldInputConfigOutput values.
// You can construct a concrete instance of `FormFieldInputConfigInput` via:
//
//	FormFieldInputConfigArgs{...}
type FormFieldInputConfigInput interface {
	pulumi.Input

	ToFormFieldInputConfigOutput() FormFieldInputConfigOutput
	ToFormFieldInputConfigOutputWithContext(context.Context) FormFieldInputConfigOutput
}

type FormFieldInputConfigArgs struct {
	// Specifies whether a field has a default value.
	DefaultChecked pulumi.BoolPtrInput `pulumi:"defaultChecked"`
	// The default country code for a phone number.
	DefaultCountryCode pulumi.StringPtrInput `pulumi:"defaultCountryCode"`
	// The default value for the field.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The text to display to describe the field.
	DescriptiveText pulumi.StringPtrInput `pulumi:"descriptiveText"`
	// Describes the configuration for the file uploader field.
	FileUploaderConfig FormFileUploaderFieldConfigPtrInput `pulumi:"fileUploaderConfig"`
	// Specifies whether to render the field as an array. This property is ignored if the `dataSourceType` for the form is a Data Store.
	IsArray pulumi.BoolPtrInput `pulumi:"isArray"`
	// The maximum value to display for the field.
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	// The minimum value to display for the field.
	MinValue pulumi.Float64PtrInput `pulumi:"minValue"`
	// The name of the field.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The text to display as a placeholder for the field.
	Placeholder pulumi.StringPtrInput `pulumi:"placeholder"`
	// Specifies a read only field.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Specifies a field that requires input.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// The stepping increment for a numeric value in a field.
	Step pulumi.Float64PtrInput `pulumi:"step"`
	// The input type for the field.
	Type pulumi.StringInput `pulumi:"type"`
	// The value for the field.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// The `ValueMappings` property specifies the data binding configuration for a value map.
	ValueMappings FormValueMappingsPtrInput `pulumi:"valueMappings"`
}

func (FormFieldInputConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldInputConfig)(nil)).Elem()
}

func (i FormFieldInputConfigArgs) ToFormFieldInputConfigOutput() FormFieldInputConfigOutput {
	return i.ToFormFieldInputConfigOutputWithContext(context.Background())
}

func (i FormFieldInputConfigArgs) ToFormFieldInputConfigOutputWithContext(ctx context.Context) FormFieldInputConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldInputConfigOutput)
}

func (i FormFieldInputConfigArgs) ToFormFieldInputConfigPtrOutput() FormFieldInputConfigPtrOutput {
	return i.ToFormFieldInputConfigPtrOutputWithContext(context.Background())
}

func (i FormFieldInputConfigArgs) ToFormFieldInputConfigPtrOutputWithContext(ctx context.Context) FormFieldInputConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldInputConfigOutput).ToFormFieldInputConfigPtrOutputWithContext(ctx)
}

// FormFieldInputConfigPtrInput is an input type that accepts FormFieldInputConfigArgs, FormFieldInputConfigPtr and FormFieldInputConfigPtrOutput values.
// You can construct a concrete instance of `FormFieldInputConfigPtrInput` via:
//
//	        FormFieldInputConfigArgs{...}
//
//	or:
//
//	        nil
type FormFieldInputConfigPtrInput interface {
	pulumi.Input

	ToFormFieldInputConfigPtrOutput() FormFieldInputConfigPtrOutput
	ToFormFieldInputConfigPtrOutputWithContext(context.Context) FormFieldInputConfigPtrOutput
}

type formFieldInputConfigPtrType FormFieldInputConfigArgs

func FormFieldInputConfigPtr(v *FormFieldInputConfigArgs) FormFieldInputConfigPtrInput {
	return (*formFieldInputConfigPtrType)(v)
}

func (*formFieldInputConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldInputConfig)(nil)).Elem()
}

func (i *formFieldInputConfigPtrType) ToFormFieldInputConfigPtrOutput() FormFieldInputConfigPtrOutput {
	return i.ToFormFieldInputConfigPtrOutputWithContext(context.Background())
}

func (i *formFieldInputConfigPtrType) ToFormFieldInputConfigPtrOutputWithContext(ctx context.Context) FormFieldInputConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldInputConfigPtrOutput)
}

type FormFieldInputConfigOutput struct{ *pulumi.OutputState }

func (FormFieldInputConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldInputConfig)(nil)).Elem()
}

func (o FormFieldInputConfigOutput) ToFormFieldInputConfigOutput() FormFieldInputConfigOutput {
	return o
}

func (o FormFieldInputConfigOutput) ToFormFieldInputConfigOutputWithContext(ctx context.Context) FormFieldInputConfigOutput {
	return o
}

func (o FormFieldInputConfigOutput) ToFormFieldInputConfigPtrOutput() FormFieldInputConfigPtrOutput {
	return o.ToFormFieldInputConfigPtrOutputWithContext(context.Background())
}

func (o FormFieldInputConfigOutput) ToFormFieldInputConfigPtrOutputWithContext(ctx context.Context) FormFieldInputConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormFieldInputConfig) *FormFieldInputConfig {
		return &v
	}).(FormFieldInputConfigPtrOutput)
}

// Specifies whether a field has a default value.
func (o FormFieldInputConfigOutput) DefaultChecked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *bool { return v.DefaultChecked }).(pulumi.BoolPtrOutput)
}

// The default country code for a phone number.
func (o FormFieldInputConfigOutput) DefaultCountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *string { return v.DefaultCountryCode }).(pulumi.StringPtrOutput)
}

// The default value for the field.
func (o FormFieldInputConfigOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The text to display to describe the field.
func (o FormFieldInputConfigOutput) DescriptiveText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *string { return v.DescriptiveText }).(pulumi.StringPtrOutput)
}

// Describes the configuration for the file uploader field.
func (o FormFieldInputConfigOutput) FileUploaderConfig() FormFileUploaderFieldConfigPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *FormFileUploaderFieldConfig { return v.FileUploaderConfig }).(FormFileUploaderFieldConfigPtrOutput)
}

// Specifies whether to render the field as an array. This property is ignored if the `dataSourceType` for the form is a Data Store.
func (o FormFieldInputConfigOutput) IsArray() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *bool { return v.IsArray }).(pulumi.BoolPtrOutput)
}

// The maximum value to display for the field.
func (o FormFieldInputConfigOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

// The minimum value to display for the field.
func (o FormFieldInputConfigOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

// The name of the field.
func (o FormFieldInputConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The text to display as a placeholder for the field.
func (o FormFieldInputConfigOutput) Placeholder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *string { return v.Placeholder }).(pulumi.StringPtrOutput)
}

// Specifies a read only field.
func (o FormFieldInputConfigOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Specifies a field that requires input.
func (o FormFieldInputConfigOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// The stepping increment for a numeric value in a field.
func (o FormFieldInputConfigOutput) Step() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *float64 { return v.Step }).(pulumi.Float64PtrOutput)
}

// The input type for the field.
func (o FormFieldInputConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FormFieldInputConfig) string { return v.Type }).(pulumi.StringOutput)
}

// The value for the field.
func (o FormFieldInputConfigOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// The `ValueMappings` property specifies the data binding configuration for a value map.
func (o FormFieldInputConfigOutput) ValueMappings() FormValueMappingsPtrOutput {
	return o.ApplyT(func(v FormFieldInputConfig) *FormValueMappings { return v.ValueMappings }).(FormValueMappingsPtrOutput)
}

type FormFieldInputConfigPtrOutput struct{ *pulumi.OutputState }

func (FormFieldInputConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldInputConfig)(nil)).Elem()
}

func (o FormFieldInputConfigPtrOutput) ToFormFieldInputConfigPtrOutput() FormFieldInputConfigPtrOutput {
	return o
}

func (o FormFieldInputConfigPtrOutput) ToFormFieldInputConfigPtrOutputWithContext(ctx context.Context) FormFieldInputConfigPtrOutput {
	return o
}

func (o FormFieldInputConfigPtrOutput) Elem() FormFieldInputConfigOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) FormFieldInputConfig {
		if v != nil {
			return *v
		}
		var ret FormFieldInputConfig
		return ret
	}).(FormFieldInputConfigOutput)
}

// Specifies whether a field has a default value.
func (o FormFieldInputConfigPtrOutput) DefaultChecked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DefaultChecked
	}).(pulumi.BoolPtrOutput)
}

// The default country code for a phone number.
func (o FormFieldInputConfigPtrOutput) DefaultCountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *string {
		if v == nil {
			return nil
		}
		return v.DefaultCountryCode
	}).(pulumi.StringPtrOutput)
}

// The default value for the field.
func (o FormFieldInputConfigPtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

// The text to display to describe the field.
func (o FormFieldInputConfigPtrOutput) DescriptiveText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *string {
		if v == nil {
			return nil
		}
		return v.DescriptiveText
	}).(pulumi.StringPtrOutput)
}

// Describes the configuration for the file uploader field.
func (o FormFieldInputConfigPtrOutput) FileUploaderConfig() FormFileUploaderFieldConfigPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *FormFileUploaderFieldConfig {
		if v == nil {
			return nil
		}
		return v.FileUploaderConfig
	}).(FormFileUploaderFieldConfigPtrOutput)
}

// Specifies whether to render the field as an array. This property is ignored if the `dataSourceType` for the form is a Data Store.
func (o FormFieldInputConfigPtrOutput) IsArray() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IsArray
	}).(pulumi.BoolPtrOutput)
}

// The maximum value to display for the field.
func (o FormFieldInputConfigPtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

// The minimum value to display for the field.
func (o FormFieldInputConfigPtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

// The name of the field.
func (o FormFieldInputConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The text to display as a placeholder for the field.
func (o FormFieldInputConfigPtrOutput) Placeholder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *string {
		if v == nil {
			return nil
		}
		return v.Placeholder
	}).(pulumi.StringPtrOutput)
}

// Specifies a read only field.
func (o FormFieldInputConfigPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// Specifies a field that requires input.
func (o FormFieldInputConfigPtrOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Required
	}).(pulumi.BoolPtrOutput)
}

// The stepping increment for a numeric value in a field.
func (o FormFieldInputConfigPtrOutput) Step() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.Step
	}).(pulumi.Float64PtrOutput)
}

// The input type for the field.
func (o FormFieldInputConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The value for the field.
func (o FormFieldInputConfigPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The `ValueMappings` property specifies the data binding configuration for a value map.
func (o FormFieldInputConfigPtrOutput) ValueMappings() FormValueMappingsPtrOutput {
	return o.ApplyT(func(v *FormFieldInputConfig) *FormValueMappings {
		if v == nil {
			return nil
		}
		return v.ValueMappings
	}).(FormValueMappingsPtrOutput)
}

type FormFieldPosition0Properties struct {
	Fixed FormFixedPosition `pulumi:"fixed"`
}

// FormFieldPosition0PropertiesInput is an input type that accepts FormFieldPosition0PropertiesArgs and FormFieldPosition0PropertiesOutput values.
// You can construct a concrete instance of `FormFieldPosition0PropertiesInput` via:
//
//	FormFieldPosition0PropertiesArgs{...}
type FormFieldPosition0PropertiesInput interface {
	pulumi.Input

	ToFormFieldPosition0PropertiesOutput() FormFieldPosition0PropertiesOutput
	ToFormFieldPosition0PropertiesOutputWithContext(context.Context) FormFieldPosition0PropertiesOutput
}

type FormFieldPosition0PropertiesArgs struct {
	Fixed FormFixedPositionInput `pulumi:"fixed"`
}

func (FormFieldPosition0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition0Properties)(nil)).Elem()
}

func (i FormFieldPosition0PropertiesArgs) ToFormFieldPosition0PropertiesOutput() FormFieldPosition0PropertiesOutput {
	return i.ToFormFieldPosition0PropertiesOutputWithContext(context.Background())
}

func (i FormFieldPosition0PropertiesArgs) ToFormFieldPosition0PropertiesOutputWithContext(ctx context.Context) FormFieldPosition0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition0PropertiesOutput)
}

func (i FormFieldPosition0PropertiesArgs) ToFormFieldPosition0PropertiesPtrOutput() FormFieldPosition0PropertiesPtrOutput {
	return i.ToFormFieldPosition0PropertiesPtrOutputWithContext(context.Background())
}

func (i FormFieldPosition0PropertiesArgs) ToFormFieldPosition0PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition0PropertiesOutput).ToFormFieldPosition0PropertiesPtrOutputWithContext(ctx)
}

// FormFieldPosition0PropertiesPtrInput is an input type that accepts FormFieldPosition0PropertiesArgs, FormFieldPosition0PropertiesPtr and FormFieldPosition0PropertiesPtrOutput values.
// You can construct a concrete instance of `FormFieldPosition0PropertiesPtrInput` via:
//
//	        FormFieldPosition0PropertiesArgs{...}
//
//	or:
//
//	        nil
type FormFieldPosition0PropertiesPtrInput interface {
	pulumi.Input

	ToFormFieldPosition0PropertiesPtrOutput() FormFieldPosition0PropertiesPtrOutput
	ToFormFieldPosition0PropertiesPtrOutputWithContext(context.Context) FormFieldPosition0PropertiesPtrOutput
}

type formFieldPosition0PropertiesPtrType FormFieldPosition0PropertiesArgs

func FormFieldPosition0PropertiesPtr(v *FormFieldPosition0PropertiesArgs) FormFieldPosition0PropertiesPtrInput {
	return (*formFieldPosition0PropertiesPtrType)(v)
}

func (*formFieldPosition0PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition0Properties)(nil)).Elem()
}

func (i *formFieldPosition0PropertiesPtrType) ToFormFieldPosition0PropertiesPtrOutput() FormFieldPosition0PropertiesPtrOutput {
	return i.ToFormFieldPosition0PropertiesPtrOutputWithContext(context.Background())
}

func (i *formFieldPosition0PropertiesPtrType) ToFormFieldPosition0PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition0PropertiesPtrOutput)
}

type FormFieldPosition0PropertiesOutput struct{ *pulumi.OutputState }

func (FormFieldPosition0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition0Properties)(nil)).Elem()
}

func (o FormFieldPosition0PropertiesOutput) ToFormFieldPosition0PropertiesOutput() FormFieldPosition0PropertiesOutput {
	return o
}

func (o FormFieldPosition0PropertiesOutput) ToFormFieldPosition0PropertiesOutputWithContext(ctx context.Context) FormFieldPosition0PropertiesOutput {
	return o
}

func (o FormFieldPosition0PropertiesOutput) ToFormFieldPosition0PropertiesPtrOutput() FormFieldPosition0PropertiesPtrOutput {
	return o.ToFormFieldPosition0PropertiesPtrOutputWithContext(context.Background())
}

func (o FormFieldPosition0PropertiesOutput) ToFormFieldPosition0PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition0PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormFieldPosition0Properties) *FormFieldPosition0Properties {
		return &v
	}).(FormFieldPosition0PropertiesPtrOutput)
}

func (o FormFieldPosition0PropertiesOutput) Fixed() FormFixedPositionOutput {
	return o.ApplyT(func(v FormFieldPosition0Properties) FormFixedPosition { return v.Fixed }).(FormFixedPositionOutput)
}

type FormFieldPosition0PropertiesPtrOutput struct{ *pulumi.OutputState }

func (FormFieldPosition0PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition0Properties)(nil)).Elem()
}

func (o FormFieldPosition0PropertiesPtrOutput) ToFormFieldPosition0PropertiesPtrOutput() FormFieldPosition0PropertiesPtrOutput {
	return o
}

func (o FormFieldPosition0PropertiesPtrOutput) ToFormFieldPosition0PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition0PropertiesPtrOutput {
	return o
}

func (o FormFieldPosition0PropertiesPtrOutput) Elem() FormFieldPosition0PropertiesOutput {
	return o.ApplyT(func(v *FormFieldPosition0Properties) FormFieldPosition0Properties {
		if v != nil {
			return *v
		}
		var ret FormFieldPosition0Properties
		return ret
	}).(FormFieldPosition0PropertiesOutput)
}

func (o FormFieldPosition0PropertiesPtrOutput) Fixed() FormFixedPositionPtrOutput {
	return o.ApplyT(func(v *FormFieldPosition0Properties) *FormFixedPosition {
		if v == nil {
			return nil
		}
		return &v.Fixed
	}).(FormFixedPositionPtrOutput)
}

type FormFieldPosition1Properties struct {
	RightOf string `pulumi:"rightOf"`
}

// FormFieldPosition1PropertiesInput is an input type that accepts FormFieldPosition1PropertiesArgs and FormFieldPosition1PropertiesOutput values.
// You can construct a concrete instance of `FormFieldPosition1PropertiesInput` via:
//
//	FormFieldPosition1PropertiesArgs{...}
type FormFieldPosition1PropertiesInput interface {
	pulumi.Input

	ToFormFieldPosition1PropertiesOutput() FormFieldPosition1PropertiesOutput
	ToFormFieldPosition1PropertiesOutputWithContext(context.Context) FormFieldPosition1PropertiesOutput
}

type FormFieldPosition1PropertiesArgs struct {
	RightOf pulumi.StringInput `pulumi:"rightOf"`
}

func (FormFieldPosition1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition1Properties)(nil)).Elem()
}

func (i FormFieldPosition1PropertiesArgs) ToFormFieldPosition1PropertiesOutput() FormFieldPosition1PropertiesOutput {
	return i.ToFormFieldPosition1PropertiesOutputWithContext(context.Background())
}

func (i FormFieldPosition1PropertiesArgs) ToFormFieldPosition1PropertiesOutputWithContext(ctx context.Context) FormFieldPosition1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition1PropertiesOutput)
}

func (i FormFieldPosition1PropertiesArgs) ToFormFieldPosition1PropertiesPtrOutput() FormFieldPosition1PropertiesPtrOutput {
	return i.ToFormFieldPosition1PropertiesPtrOutputWithContext(context.Background())
}

func (i FormFieldPosition1PropertiesArgs) ToFormFieldPosition1PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition1PropertiesOutput).ToFormFieldPosition1PropertiesPtrOutputWithContext(ctx)
}

// FormFieldPosition1PropertiesPtrInput is an input type that accepts FormFieldPosition1PropertiesArgs, FormFieldPosition1PropertiesPtr and FormFieldPosition1PropertiesPtrOutput values.
// You can construct a concrete instance of `FormFieldPosition1PropertiesPtrInput` via:
//
//	        FormFieldPosition1PropertiesArgs{...}
//
//	or:
//
//	        nil
type FormFieldPosition1PropertiesPtrInput interface {
	pulumi.Input

	ToFormFieldPosition1PropertiesPtrOutput() FormFieldPosition1PropertiesPtrOutput
	ToFormFieldPosition1PropertiesPtrOutputWithContext(context.Context) FormFieldPosition1PropertiesPtrOutput
}

type formFieldPosition1PropertiesPtrType FormFieldPosition1PropertiesArgs

func FormFieldPosition1PropertiesPtr(v *FormFieldPosition1PropertiesArgs) FormFieldPosition1PropertiesPtrInput {
	return (*formFieldPosition1PropertiesPtrType)(v)
}

func (*formFieldPosition1PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition1Properties)(nil)).Elem()
}

func (i *formFieldPosition1PropertiesPtrType) ToFormFieldPosition1PropertiesPtrOutput() FormFieldPosition1PropertiesPtrOutput {
	return i.ToFormFieldPosition1PropertiesPtrOutputWithContext(context.Background())
}

func (i *formFieldPosition1PropertiesPtrType) ToFormFieldPosition1PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition1PropertiesPtrOutput)
}

type FormFieldPosition1PropertiesOutput struct{ *pulumi.OutputState }

func (FormFieldPosition1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition1Properties)(nil)).Elem()
}

func (o FormFieldPosition1PropertiesOutput) ToFormFieldPosition1PropertiesOutput() FormFieldPosition1PropertiesOutput {
	return o
}

func (o FormFieldPosition1PropertiesOutput) ToFormFieldPosition1PropertiesOutputWithContext(ctx context.Context) FormFieldPosition1PropertiesOutput {
	return o
}

func (o FormFieldPosition1PropertiesOutput) ToFormFieldPosition1PropertiesPtrOutput() FormFieldPosition1PropertiesPtrOutput {
	return o.ToFormFieldPosition1PropertiesPtrOutputWithContext(context.Background())
}

func (o FormFieldPosition1PropertiesOutput) ToFormFieldPosition1PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition1PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormFieldPosition1Properties) *FormFieldPosition1Properties {
		return &v
	}).(FormFieldPosition1PropertiesPtrOutput)
}

func (o FormFieldPosition1PropertiesOutput) RightOf() pulumi.StringOutput {
	return o.ApplyT(func(v FormFieldPosition1Properties) string { return v.RightOf }).(pulumi.StringOutput)
}

type FormFieldPosition1PropertiesPtrOutput struct{ *pulumi.OutputState }

func (FormFieldPosition1PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition1Properties)(nil)).Elem()
}

func (o FormFieldPosition1PropertiesPtrOutput) ToFormFieldPosition1PropertiesPtrOutput() FormFieldPosition1PropertiesPtrOutput {
	return o
}

func (o FormFieldPosition1PropertiesPtrOutput) ToFormFieldPosition1PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition1PropertiesPtrOutput {
	return o
}

func (o FormFieldPosition1PropertiesPtrOutput) Elem() FormFieldPosition1PropertiesOutput {
	return o.ApplyT(func(v *FormFieldPosition1Properties) FormFieldPosition1Properties {
		if v != nil {
			return *v
		}
		var ret FormFieldPosition1Properties
		return ret
	}).(FormFieldPosition1PropertiesOutput)
}

func (o FormFieldPosition1PropertiesPtrOutput) RightOf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldPosition1Properties) *string {
		if v == nil {
			return nil
		}
		return &v.RightOf
	}).(pulumi.StringPtrOutput)
}

type FormFieldPosition2Properties struct {
	Below string `pulumi:"below"`
}

// FormFieldPosition2PropertiesInput is an input type that accepts FormFieldPosition2PropertiesArgs and FormFieldPosition2PropertiesOutput values.
// You can construct a concrete instance of `FormFieldPosition2PropertiesInput` via:
//
//	FormFieldPosition2PropertiesArgs{...}
type FormFieldPosition2PropertiesInput interface {
	pulumi.Input

	ToFormFieldPosition2PropertiesOutput() FormFieldPosition2PropertiesOutput
	ToFormFieldPosition2PropertiesOutputWithContext(context.Context) FormFieldPosition2PropertiesOutput
}

type FormFieldPosition2PropertiesArgs struct {
	Below pulumi.StringInput `pulumi:"below"`
}

func (FormFieldPosition2PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition2Properties)(nil)).Elem()
}

func (i FormFieldPosition2PropertiesArgs) ToFormFieldPosition2PropertiesOutput() FormFieldPosition2PropertiesOutput {
	return i.ToFormFieldPosition2PropertiesOutputWithContext(context.Background())
}

func (i FormFieldPosition2PropertiesArgs) ToFormFieldPosition2PropertiesOutputWithContext(ctx context.Context) FormFieldPosition2PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition2PropertiesOutput)
}

func (i FormFieldPosition2PropertiesArgs) ToFormFieldPosition2PropertiesPtrOutput() FormFieldPosition2PropertiesPtrOutput {
	return i.ToFormFieldPosition2PropertiesPtrOutputWithContext(context.Background())
}

func (i FormFieldPosition2PropertiesArgs) ToFormFieldPosition2PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition2PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition2PropertiesOutput).ToFormFieldPosition2PropertiesPtrOutputWithContext(ctx)
}

// FormFieldPosition2PropertiesPtrInput is an input type that accepts FormFieldPosition2PropertiesArgs, FormFieldPosition2PropertiesPtr and FormFieldPosition2PropertiesPtrOutput values.
// You can construct a concrete instance of `FormFieldPosition2PropertiesPtrInput` via:
//
//	        FormFieldPosition2PropertiesArgs{...}
//
//	or:
//
//	        nil
type FormFieldPosition2PropertiesPtrInput interface {
	pulumi.Input

	ToFormFieldPosition2PropertiesPtrOutput() FormFieldPosition2PropertiesPtrOutput
	ToFormFieldPosition2PropertiesPtrOutputWithContext(context.Context) FormFieldPosition2PropertiesPtrOutput
}

type formFieldPosition2PropertiesPtrType FormFieldPosition2PropertiesArgs

func FormFieldPosition2PropertiesPtr(v *FormFieldPosition2PropertiesArgs) FormFieldPosition2PropertiesPtrInput {
	return (*formFieldPosition2PropertiesPtrType)(v)
}

func (*formFieldPosition2PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition2Properties)(nil)).Elem()
}

func (i *formFieldPosition2PropertiesPtrType) ToFormFieldPosition2PropertiesPtrOutput() FormFieldPosition2PropertiesPtrOutput {
	return i.ToFormFieldPosition2PropertiesPtrOutputWithContext(context.Background())
}

func (i *formFieldPosition2PropertiesPtrType) ToFormFieldPosition2PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition2PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPosition2PropertiesPtrOutput)
}

type FormFieldPosition2PropertiesOutput struct{ *pulumi.OutputState }

func (FormFieldPosition2PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldPosition2Properties)(nil)).Elem()
}

func (o FormFieldPosition2PropertiesOutput) ToFormFieldPosition2PropertiesOutput() FormFieldPosition2PropertiesOutput {
	return o
}

func (o FormFieldPosition2PropertiesOutput) ToFormFieldPosition2PropertiesOutputWithContext(ctx context.Context) FormFieldPosition2PropertiesOutput {
	return o
}

func (o FormFieldPosition2PropertiesOutput) ToFormFieldPosition2PropertiesPtrOutput() FormFieldPosition2PropertiesPtrOutput {
	return o.ToFormFieldPosition2PropertiesPtrOutputWithContext(context.Background())
}

func (o FormFieldPosition2PropertiesOutput) ToFormFieldPosition2PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition2PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormFieldPosition2Properties) *FormFieldPosition2Properties {
		return &v
	}).(FormFieldPosition2PropertiesPtrOutput)
}

func (o FormFieldPosition2PropertiesOutput) Below() pulumi.StringOutput {
	return o.ApplyT(func(v FormFieldPosition2Properties) string { return v.Below }).(pulumi.StringOutput)
}

type FormFieldPosition2PropertiesPtrOutput struct{ *pulumi.OutputState }

func (FormFieldPosition2PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPosition2Properties)(nil)).Elem()
}

func (o FormFieldPosition2PropertiesPtrOutput) ToFormFieldPosition2PropertiesPtrOutput() FormFieldPosition2PropertiesPtrOutput {
	return o
}

func (o FormFieldPosition2PropertiesPtrOutput) ToFormFieldPosition2PropertiesPtrOutputWithContext(ctx context.Context) FormFieldPosition2PropertiesPtrOutput {
	return o
}

func (o FormFieldPosition2PropertiesPtrOutput) Elem() FormFieldPosition2PropertiesOutput {
	return o.ApplyT(func(v *FormFieldPosition2Properties) FormFieldPosition2Properties {
		if v != nil {
			return *v
		}
		var ret FormFieldPosition2Properties
		return ret
	}).(FormFieldPosition2PropertiesOutput)
}

func (o FormFieldPosition2PropertiesPtrOutput) Below() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormFieldPosition2Properties) *string {
		if v == nil {
			return nil
		}
		return &v.Below
	}).(pulumi.StringPtrOutput)
}

type FormFieldValidationConfiguration struct {
	// The validation to perform on a number value.
	NumValues []float64 `pulumi:"numValues"`
	// The validation to perform on a string value.
	StrValues []string `pulumi:"strValues"`
	// The validation to perform on an object type. ``
	Type string `pulumi:"type"`
	// The validation message to display.
	ValidationMessage *string `pulumi:"validationMessage"`
}

// FormFieldValidationConfigurationInput is an input type that accepts FormFieldValidationConfigurationArgs and FormFieldValidationConfigurationOutput values.
// You can construct a concrete instance of `FormFieldValidationConfigurationInput` via:
//
//	FormFieldValidationConfigurationArgs{...}
type FormFieldValidationConfigurationInput interface {
	pulumi.Input

	ToFormFieldValidationConfigurationOutput() FormFieldValidationConfigurationOutput
	ToFormFieldValidationConfigurationOutputWithContext(context.Context) FormFieldValidationConfigurationOutput
}

type FormFieldValidationConfigurationArgs struct {
	// The validation to perform on a number value.
	NumValues pulumi.Float64ArrayInput `pulumi:"numValues"`
	// The validation to perform on a string value.
	StrValues pulumi.StringArrayInput `pulumi:"strValues"`
	// The validation to perform on an object type. ``
	Type pulumi.StringInput `pulumi:"type"`
	// The validation message to display.
	ValidationMessage pulumi.StringPtrInput `pulumi:"validationMessage"`
}

func (FormFieldValidationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldValidationConfiguration)(nil)).Elem()
}

func (i FormFieldValidationConfigurationArgs) ToFormFieldValidationConfigurationOutput() FormFieldValidationConfigurationOutput {
	return i.ToFormFieldValidationConfigurationOutputWithContext(context.Background())
}

func (i FormFieldValidationConfigurationArgs) ToFormFieldValidationConfigurationOutputWithContext(ctx context.Context) FormFieldValidationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldValidationConfigurationOutput)
}

// FormFieldValidationConfigurationArrayInput is an input type that accepts FormFieldValidationConfigurationArray and FormFieldValidationConfigurationArrayOutput values.
// You can construct a concrete instance of `FormFieldValidationConfigurationArrayInput` via:
//
//	FormFieldValidationConfigurationArray{ FormFieldValidationConfigurationArgs{...} }
type FormFieldValidationConfigurationArrayInput interface {
	pulumi.Input

	ToFormFieldValidationConfigurationArrayOutput() FormFieldValidationConfigurationArrayOutput
	ToFormFieldValidationConfigurationArrayOutputWithContext(context.Context) FormFieldValidationConfigurationArrayOutput
}

type FormFieldValidationConfigurationArray []FormFieldValidationConfigurationInput

func (FormFieldValidationConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FormFieldValidationConfiguration)(nil)).Elem()
}

func (i FormFieldValidationConfigurationArray) ToFormFieldValidationConfigurationArrayOutput() FormFieldValidationConfigurationArrayOutput {
	return i.ToFormFieldValidationConfigurationArrayOutputWithContext(context.Background())
}

func (i FormFieldValidationConfigurationArray) ToFormFieldValidationConfigurationArrayOutputWithContext(ctx context.Context) FormFieldValidationConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldValidationConfigurationArrayOutput)
}

type FormFieldValidationConfigurationOutput struct{ *pulumi.OutputState }

func (FormFieldValidationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFieldValidationConfiguration)(nil)).Elem()
}

func (o FormFieldValidationConfigurationOutput) ToFormFieldValidationConfigurationOutput() FormFieldValidationConfigurationOutput {
	return o
}

func (o FormFieldValidationConfigurationOutput) ToFormFieldValidationConfigurationOutputWithContext(ctx context.Context) FormFieldValidationConfigurationOutput {
	return o
}

// The validation to perform on a number value.
func (o FormFieldValidationConfigurationOutput) NumValues() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v FormFieldValidationConfiguration) []float64 { return v.NumValues }).(pulumi.Float64ArrayOutput)
}

// The validation to perform on a string value.
func (o FormFieldValidationConfigurationOutput) StrValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FormFieldValidationConfiguration) []string { return v.StrValues }).(pulumi.StringArrayOutput)
}

// The validation to perform on an object type. “
func (o FormFieldValidationConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FormFieldValidationConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

// The validation message to display.
func (o FormFieldValidationConfigurationOutput) ValidationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormFieldValidationConfiguration) *string { return v.ValidationMessage }).(pulumi.StringPtrOutput)
}

type FormFieldValidationConfigurationArrayOutput struct{ *pulumi.OutputState }

func (FormFieldValidationConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FormFieldValidationConfiguration)(nil)).Elem()
}

func (o FormFieldValidationConfigurationArrayOutput) ToFormFieldValidationConfigurationArrayOutput() FormFieldValidationConfigurationArrayOutput {
	return o
}

func (o FormFieldValidationConfigurationArrayOutput) ToFormFieldValidationConfigurationArrayOutputWithContext(ctx context.Context) FormFieldValidationConfigurationArrayOutput {
	return o
}

func (o FormFieldValidationConfigurationArrayOutput) Index(i pulumi.IntInput) FormFieldValidationConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FormFieldValidationConfiguration {
		return vs[0].([]FormFieldValidationConfiguration)[vs[1].(int)]
	}).(FormFieldValidationConfigurationOutput)
}

type FormFileUploaderFieldConfig struct {
	// The file types that are allowed to be uploaded by the file uploader. Provide this information in an array of strings specifying the valid file extensions.
	AcceptedFileTypes []string `pulumi:"acceptedFileTypes"`
	// The access level to assign to the uploaded files in the Amazon S3 bucket where they are stored. The valid values for this property are `private` , `protected` , or `public` . For detailed information about the permissions associated with each access level, see [File access levels](https://docs.aws.amazon.com/https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/) in the *Amplify documentation* .
	AccessLevel FormStorageAccessLevel `pulumi:"accessLevel"`
	// Allows the file upload operation to be paused and resumed. The default value is `false` .
	//
	// When `isResumable` is set to `true` , the file uploader uses a multipart upload to break the files into chunks before upload. The progress of the upload isn't continuous, because the file uploader uploads a chunk at a time.
	IsResumable *bool `pulumi:"isResumable"`
	// Specifies the maximum number of files that can be selected to upload. The default value is an unlimited number of files.
	MaxFileCount *float64 `pulumi:"maxFileCount"`
	// The maximum file size in bytes that the file uploader will accept. The default value is an unlimited file size.
	MaxSize *float64 `pulumi:"maxSize"`
	// Specifies whether to display or hide the image preview after selecting a file for upload. The default value is `true` to display the image preview.
	ShowThumbnails *bool `pulumi:"showThumbnails"`
}

// FormFileUploaderFieldConfigInput is an input type that accepts FormFileUploaderFieldConfigArgs and FormFileUploaderFieldConfigOutput values.
// You can construct a concrete instance of `FormFileUploaderFieldConfigInput` via:
//
//	FormFileUploaderFieldConfigArgs{...}
type FormFileUploaderFieldConfigInput interface {
	pulumi.Input

	ToFormFileUploaderFieldConfigOutput() FormFileUploaderFieldConfigOutput
	ToFormFileUploaderFieldConfigOutputWithContext(context.Context) FormFileUploaderFieldConfigOutput
}

type FormFileUploaderFieldConfigArgs struct {
	// The file types that are allowed to be uploaded by the file uploader. Provide this information in an array of strings specifying the valid file extensions.
	AcceptedFileTypes pulumi.StringArrayInput `pulumi:"acceptedFileTypes"`
	// The access level to assign to the uploaded files in the Amazon S3 bucket where they are stored. The valid values for this property are `private` , `protected` , or `public` . For detailed information about the permissions associated with each access level, see [File access levels](https://docs.aws.amazon.com/https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/) in the *Amplify documentation* .
	AccessLevel FormStorageAccessLevelInput `pulumi:"accessLevel"`
	// Allows the file upload operation to be paused and resumed. The default value is `false` .
	//
	// When `isResumable` is set to `true` , the file uploader uses a multipart upload to break the files into chunks before upload. The progress of the upload isn't continuous, because the file uploader uploads a chunk at a time.
	IsResumable pulumi.BoolPtrInput `pulumi:"isResumable"`
	// Specifies the maximum number of files that can be selected to upload. The default value is an unlimited number of files.
	MaxFileCount pulumi.Float64PtrInput `pulumi:"maxFileCount"`
	// The maximum file size in bytes that the file uploader will accept. The default value is an unlimited file size.
	MaxSize pulumi.Float64PtrInput `pulumi:"maxSize"`
	// Specifies whether to display or hide the image preview after selecting a file for upload. The default value is `true` to display the image preview.
	ShowThumbnails pulumi.BoolPtrInput `pulumi:"showThumbnails"`
}

func (FormFileUploaderFieldConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFileUploaderFieldConfig)(nil)).Elem()
}

func (i FormFileUploaderFieldConfigArgs) ToFormFileUploaderFieldConfigOutput() FormFileUploaderFieldConfigOutput {
	return i.ToFormFileUploaderFieldConfigOutputWithContext(context.Background())
}

func (i FormFileUploaderFieldConfigArgs) ToFormFileUploaderFieldConfigOutputWithContext(ctx context.Context) FormFileUploaderFieldConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFileUploaderFieldConfigOutput)
}

func (i FormFileUploaderFieldConfigArgs) ToFormFileUploaderFieldConfigPtrOutput() FormFileUploaderFieldConfigPtrOutput {
	return i.ToFormFileUploaderFieldConfigPtrOutputWithContext(context.Background())
}

func (i FormFileUploaderFieldConfigArgs) ToFormFileUploaderFieldConfigPtrOutputWithContext(ctx context.Context) FormFileUploaderFieldConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFileUploaderFieldConfigOutput).ToFormFileUploaderFieldConfigPtrOutputWithContext(ctx)
}

// FormFileUploaderFieldConfigPtrInput is an input type that accepts FormFileUploaderFieldConfigArgs, FormFileUploaderFieldConfigPtr and FormFileUploaderFieldConfigPtrOutput values.
// You can construct a concrete instance of `FormFileUploaderFieldConfigPtrInput` via:
//
//	        FormFileUploaderFieldConfigArgs{...}
//
//	or:
//
//	        nil
type FormFileUploaderFieldConfigPtrInput interface {
	pulumi.Input

	ToFormFileUploaderFieldConfigPtrOutput() FormFileUploaderFieldConfigPtrOutput
	ToFormFileUploaderFieldConfigPtrOutputWithContext(context.Context) FormFileUploaderFieldConfigPtrOutput
}

type formFileUploaderFieldConfigPtrType FormFileUploaderFieldConfigArgs

func FormFileUploaderFieldConfigPtr(v *FormFileUploaderFieldConfigArgs) FormFileUploaderFieldConfigPtrInput {
	return (*formFileUploaderFieldConfigPtrType)(v)
}

func (*formFileUploaderFieldConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFileUploaderFieldConfig)(nil)).Elem()
}

func (i *formFileUploaderFieldConfigPtrType) ToFormFileUploaderFieldConfigPtrOutput() FormFileUploaderFieldConfigPtrOutput {
	return i.ToFormFileUploaderFieldConfigPtrOutputWithContext(context.Background())
}

func (i *formFileUploaderFieldConfigPtrType) ToFormFileUploaderFieldConfigPtrOutputWithContext(ctx context.Context) FormFileUploaderFieldConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFileUploaderFieldConfigPtrOutput)
}

type FormFileUploaderFieldConfigOutput struct{ *pulumi.OutputState }

func (FormFileUploaderFieldConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormFileUploaderFieldConfig)(nil)).Elem()
}

func (o FormFileUploaderFieldConfigOutput) ToFormFileUploaderFieldConfigOutput() FormFileUploaderFieldConfigOutput {
	return o
}

func (o FormFileUploaderFieldConfigOutput) ToFormFileUploaderFieldConfigOutputWithContext(ctx context.Context) FormFileUploaderFieldConfigOutput {
	return o
}

func (o FormFileUploaderFieldConfigOutput) ToFormFileUploaderFieldConfigPtrOutput() FormFileUploaderFieldConfigPtrOutput {
	return o.ToFormFileUploaderFieldConfigPtrOutputWithContext(context.Background())
}

func (o FormFileUploaderFieldConfigOutput) ToFormFileUploaderFieldConfigPtrOutputWithContext(ctx context.Context) FormFileUploaderFieldConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormFileUploaderFieldConfig) *FormFileUploaderFieldConfig {
		return &v
	}).(FormFileUploaderFieldConfigPtrOutput)
}

// The file types that are allowed to be uploaded by the file uploader. Provide this information in an array of strings specifying the valid file extensions.
func (o FormFileUploaderFieldConfigOutput) AcceptedFileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FormFileUploaderFieldConfig) []string { return v.AcceptedFileTypes }).(pulumi.StringArrayOutput)
}

// The access level to assign to the uploaded files in the Amazon S3 bucket where they are stored. The valid values for this property are `private` , `protected` , or `public` . For detailed information about the permissions associated with each access level, see [File access levels](https://docs.aws.amazon.com/https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/) in the *Amplify documentation* .
func (o FormFileUploaderFieldConfigOutput) AccessLevel() FormStorageAccessLevelOutput {
	return o.ApplyT(func(v FormFileUploaderFieldConfig) FormStorageAccessLevel { return v.AccessLevel }).(FormStorageAccessLevelOutput)
}

// Allows the file upload operation to be paused and resumed. The default value is `false` .
//
// When `isResumable` is set to `true` , the file uploader uses a multipart upload to break the files into chunks before upload. The progress of the upload isn't continuous, because the file uploader uploads a chunk at a time.
func (o FormFileUploaderFieldConfigOutput) IsResumable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormFileUploaderFieldConfig) *bool { return v.IsResumable }).(pulumi.BoolPtrOutput)
}

// Specifies the maximum number of files that can be selected to upload. The default value is an unlimited number of files.
func (o FormFileUploaderFieldConfigOutput) MaxFileCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FormFileUploaderFieldConfig) *float64 { return v.MaxFileCount }).(pulumi.Float64PtrOutput)
}

// The maximum file size in bytes that the file uploader will accept. The default value is an unlimited file size.
func (o FormFileUploaderFieldConfigOutput) MaxSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FormFileUploaderFieldConfig) *float64 { return v.MaxSize }).(pulumi.Float64PtrOutput)
}

// Specifies whether to display or hide the image preview after selecting a file for upload. The default value is `true` to display the image preview.
func (o FormFileUploaderFieldConfigOutput) ShowThumbnails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormFileUploaderFieldConfig) *bool { return v.ShowThumbnails }).(pulumi.BoolPtrOutput)
}

type FormFileUploaderFieldConfigPtrOutput struct{ *pulumi.OutputState }

func (FormFileUploaderFieldConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFileUploaderFieldConfig)(nil)).Elem()
}

func (o FormFileUploaderFieldConfigPtrOutput) ToFormFileUploaderFieldConfigPtrOutput() FormFileUploaderFieldConfigPtrOutput {
	return o
}

func (o FormFileUploaderFieldConfigPtrOutput) ToFormFileUploaderFieldConfigPtrOutputWithContext(ctx context.Context) FormFileUploaderFieldConfigPtrOutput {
	return o
}

func (o FormFileUploaderFieldConfigPtrOutput) Elem() FormFileUploaderFieldConfigOutput {
	return o.ApplyT(func(v *FormFileUploaderFieldConfig) FormFileUploaderFieldConfig {
		if v != nil {
			return *v
		}
		var ret FormFileUploaderFieldConfig
		return ret
	}).(FormFileUploaderFieldConfigOutput)
}

// The file types that are allowed to be uploaded by the file uploader. Provide this information in an array of strings specifying the valid file extensions.
func (o FormFileUploaderFieldConfigPtrOutput) AcceptedFileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FormFileUploaderFieldConfig) []string {
		if v == nil {
			return nil
		}
		return v.AcceptedFileTypes
	}).(pulumi.StringArrayOutput)
}

// The access level to assign to the uploaded files in the Amazon S3 bucket where they are stored. The valid values for this property are `private` , `protected` , or `public` . For detailed information about the permissions associated with each access level, see [File access levels](https://docs.aws.amazon.com/https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/) in the *Amplify documentation* .
func (o FormFileUploaderFieldConfigPtrOutput) AccessLevel() FormStorageAccessLevelPtrOutput {
	return o.ApplyT(func(v *FormFileUploaderFieldConfig) *FormStorageAccessLevel {
		if v == nil {
			return nil
		}
		return &v.AccessLevel
	}).(FormStorageAccessLevelPtrOutput)
}

// Allows the file upload operation to be paused and resumed. The default value is `false` .
//
// When `isResumable` is set to `true` , the file uploader uses a multipart upload to break the files into chunks before upload. The progress of the upload isn't continuous, because the file uploader uploads a chunk at a time.
func (o FormFileUploaderFieldConfigPtrOutput) IsResumable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormFileUploaderFieldConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IsResumable
	}).(pulumi.BoolPtrOutput)
}

// Specifies the maximum number of files that can be selected to upload. The default value is an unlimited number of files.
func (o FormFileUploaderFieldConfigPtrOutput) MaxFileCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FormFileUploaderFieldConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxFileCount
	}).(pulumi.Float64PtrOutput)
}

// The maximum file size in bytes that the file uploader will accept. The default value is an unlimited file size.
func (o FormFileUploaderFieldConfigPtrOutput) MaxSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FormFileUploaderFieldConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.Float64PtrOutput)
}

// Specifies whether to display or hide the image preview after selecting a file for upload. The default value is `true` to display the image preview.
func (o FormFileUploaderFieldConfigPtrOutput) ShowThumbnails() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormFileUploaderFieldConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ShowThumbnails
	}).(pulumi.BoolPtrOutput)
}

type FormInputBindingPropertiesValue struct {
	// Represents the data binding configuration for a specific property using data stored in AWS . For AWS connected properties, you can bind a property to data stored in an Amplify DataStore model.
	BindingProperties *FormInputBindingPropertiesValueProperties `pulumi:"bindingProperties"`
	// The property type.
	Type *string `pulumi:"type"`
}

// FormInputBindingPropertiesValueInput is an input type that accepts FormInputBindingPropertiesValueArgs and FormInputBindingPropertiesValueOutput values.
// You can construct a concrete instance of `FormInputBindingPropertiesValueInput` via:
//
//	FormInputBindingPropertiesValueArgs{...}
type FormInputBindingPropertiesValueInput interface {
	pulumi.Input

	ToFormInputBindingPropertiesValueOutput() FormInputBindingPropertiesValueOutput
	ToFormInputBindingPropertiesValueOutputWithContext(context.Context) FormInputBindingPropertiesValueOutput
}

type FormInputBindingPropertiesValueArgs struct {
	// Represents the data binding configuration for a specific property using data stored in AWS . For AWS connected properties, you can bind a property to data stored in an Amplify DataStore model.
	BindingProperties FormInputBindingPropertiesValuePropertiesPtrInput `pulumi:"bindingProperties"`
	// The property type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FormInputBindingPropertiesValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputBindingPropertiesValue)(nil)).Elem()
}

func (i FormInputBindingPropertiesValueArgs) ToFormInputBindingPropertiesValueOutput() FormInputBindingPropertiesValueOutput {
	return i.ToFormInputBindingPropertiesValueOutputWithContext(context.Background())
}

func (i FormInputBindingPropertiesValueArgs) ToFormInputBindingPropertiesValueOutputWithContext(ctx context.Context) FormInputBindingPropertiesValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputBindingPropertiesValueOutput)
}

// FormInputBindingPropertiesValueMapInput is an input type that accepts FormInputBindingPropertiesValueMap and FormInputBindingPropertiesValueMapOutput values.
// You can construct a concrete instance of `FormInputBindingPropertiesValueMapInput` via:
//
//	FormInputBindingPropertiesValueMap{ "key": FormInputBindingPropertiesValueArgs{...} }
type FormInputBindingPropertiesValueMapInput interface {
	pulumi.Input

	ToFormInputBindingPropertiesValueMapOutput() FormInputBindingPropertiesValueMapOutput
	ToFormInputBindingPropertiesValueMapOutputWithContext(context.Context) FormInputBindingPropertiesValueMapOutput
}

type FormInputBindingPropertiesValueMap map[string]FormInputBindingPropertiesValueInput

func (FormInputBindingPropertiesValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FormInputBindingPropertiesValue)(nil)).Elem()
}

func (i FormInputBindingPropertiesValueMap) ToFormInputBindingPropertiesValueMapOutput() FormInputBindingPropertiesValueMapOutput {
	return i.ToFormInputBindingPropertiesValueMapOutputWithContext(context.Background())
}

func (i FormInputBindingPropertiesValueMap) ToFormInputBindingPropertiesValueMapOutputWithContext(ctx context.Context) FormInputBindingPropertiesValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputBindingPropertiesValueMapOutput)
}

type FormInputBindingPropertiesValueOutput struct{ *pulumi.OutputState }

func (FormInputBindingPropertiesValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputBindingPropertiesValue)(nil)).Elem()
}

func (o FormInputBindingPropertiesValueOutput) ToFormInputBindingPropertiesValueOutput() FormInputBindingPropertiesValueOutput {
	return o
}

func (o FormInputBindingPropertiesValueOutput) ToFormInputBindingPropertiesValueOutputWithContext(ctx context.Context) FormInputBindingPropertiesValueOutput {
	return o
}

// Represents the data binding configuration for a specific property using data stored in AWS . For AWS connected properties, you can bind a property to data stored in an Amplify DataStore model.
func (o FormInputBindingPropertiesValueOutput) BindingProperties() FormInputBindingPropertiesValuePropertiesPtrOutput {
	return o.ApplyT(func(v FormInputBindingPropertiesValue) *FormInputBindingPropertiesValueProperties {
		return v.BindingProperties
	}).(FormInputBindingPropertiesValuePropertiesPtrOutput)
}

// The property type.
func (o FormInputBindingPropertiesValueOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormInputBindingPropertiesValue) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FormInputBindingPropertiesValueMapOutput struct{ *pulumi.OutputState }

func (FormInputBindingPropertiesValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FormInputBindingPropertiesValue)(nil)).Elem()
}

func (o FormInputBindingPropertiesValueMapOutput) ToFormInputBindingPropertiesValueMapOutput() FormInputBindingPropertiesValueMapOutput {
	return o
}

func (o FormInputBindingPropertiesValueMapOutput) ToFormInputBindingPropertiesValueMapOutputWithContext(ctx context.Context) FormInputBindingPropertiesValueMapOutput {
	return o
}

func (o FormInputBindingPropertiesValueMapOutput) MapIndex(k pulumi.StringInput) FormInputBindingPropertiesValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FormInputBindingPropertiesValue {
		return vs[0].(map[string]FormInputBindingPropertiesValue)[vs[1].(string)]
	}).(FormInputBindingPropertiesValueOutput)
}

type FormInputBindingPropertiesValueProperties struct {
	// An Amplify DataStore model.
	Model *string `pulumi:"model"`
}

// FormInputBindingPropertiesValuePropertiesInput is an input type that accepts FormInputBindingPropertiesValuePropertiesArgs and FormInputBindingPropertiesValuePropertiesOutput values.
// You can construct a concrete instance of `FormInputBindingPropertiesValuePropertiesInput` via:
//
//	FormInputBindingPropertiesValuePropertiesArgs{...}
type FormInputBindingPropertiesValuePropertiesInput interface {
	pulumi.Input

	ToFormInputBindingPropertiesValuePropertiesOutput() FormInputBindingPropertiesValuePropertiesOutput
	ToFormInputBindingPropertiesValuePropertiesOutputWithContext(context.Context) FormInputBindingPropertiesValuePropertiesOutput
}

type FormInputBindingPropertiesValuePropertiesArgs struct {
	// An Amplify DataStore model.
	Model pulumi.StringPtrInput `pulumi:"model"`
}

func (FormInputBindingPropertiesValuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputBindingPropertiesValueProperties)(nil)).Elem()
}

func (i FormInputBindingPropertiesValuePropertiesArgs) ToFormInputBindingPropertiesValuePropertiesOutput() FormInputBindingPropertiesValuePropertiesOutput {
	return i.ToFormInputBindingPropertiesValuePropertiesOutputWithContext(context.Background())
}

func (i FormInputBindingPropertiesValuePropertiesArgs) ToFormInputBindingPropertiesValuePropertiesOutputWithContext(ctx context.Context) FormInputBindingPropertiesValuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputBindingPropertiesValuePropertiesOutput)
}

func (i FormInputBindingPropertiesValuePropertiesArgs) ToFormInputBindingPropertiesValuePropertiesPtrOutput() FormInputBindingPropertiesValuePropertiesPtrOutput {
	return i.ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(context.Background())
}

func (i FormInputBindingPropertiesValuePropertiesArgs) ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) FormInputBindingPropertiesValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputBindingPropertiesValuePropertiesOutput).ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(ctx)
}

// FormInputBindingPropertiesValuePropertiesPtrInput is an input type that accepts FormInputBindingPropertiesValuePropertiesArgs, FormInputBindingPropertiesValuePropertiesPtr and FormInputBindingPropertiesValuePropertiesPtrOutput values.
// You can construct a concrete instance of `FormInputBindingPropertiesValuePropertiesPtrInput` via:
//
//	        FormInputBindingPropertiesValuePropertiesArgs{...}
//
//	or:
//
//	        nil
type FormInputBindingPropertiesValuePropertiesPtrInput interface {
	pulumi.Input

	ToFormInputBindingPropertiesValuePropertiesPtrOutput() FormInputBindingPropertiesValuePropertiesPtrOutput
	ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(context.Context) FormInputBindingPropertiesValuePropertiesPtrOutput
}

type formInputBindingPropertiesValuePropertiesPtrType FormInputBindingPropertiesValuePropertiesArgs

func FormInputBindingPropertiesValuePropertiesPtr(v *FormInputBindingPropertiesValuePropertiesArgs) FormInputBindingPropertiesValuePropertiesPtrInput {
	return (*formInputBindingPropertiesValuePropertiesPtrType)(v)
}

func (*formInputBindingPropertiesValuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormInputBindingPropertiesValueProperties)(nil)).Elem()
}

func (i *formInputBindingPropertiesValuePropertiesPtrType) ToFormInputBindingPropertiesValuePropertiesPtrOutput() FormInputBindingPropertiesValuePropertiesPtrOutput {
	return i.ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(context.Background())
}

func (i *formInputBindingPropertiesValuePropertiesPtrType) ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) FormInputBindingPropertiesValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputBindingPropertiesValuePropertiesPtrOutput)
}

type FormInputBindingPropertiesValuePropertiesOutput struct{ *pulumi.OutputState }

func (FormInputBindingPropertiesValuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputBindingPropertiesValueProperties)(nil)).Elem()
}

func (o FormInputBindingPropertiesValuePropertiesOutput) ToFormInputBindingPropertiesValuePropertiesOutput() FormInputBindingPropertiesValuePropertiesOutput {
	return o
}

func (o FormInputBindingPropertiesValuePropertiesOutput) ToFormInputBindingPropertiesValuePropertiesOutputWithContext(ctx context.Context) FormInputBindingPropertiesValuePropertiesOutput {
	return o
}

func (o FormInputBindingPropertiesValuePropertiesOutput) ToFormInputBindingPropertiesValuePropertiesPtrOutput() FormInputBindingPropertiesValuePropertiesPtrOutput {
	return o.ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(context.Background())
}

func (o FormInputBindingPropertiesValuePropertiesOutput) ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) FormInputBindingPropertiesValuePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormInputBindingPropertiesValueProperties) *FormInputBindingPropertiesValueProperties {
		return &v
	}).(FormInputBindingPropertiesValuePropertiesPtrOutput)
}

// An Amplify DataStore model.
func (o FormInputBindingPropertiesValuePropertiesOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormInputBindingPropertiesValueProperties) *string { return v.Model }).(pulumi.StringPtrOutput)
}

type FormInputBindingPropertiesValuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (FormInputBindingPropertiesValuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormInputBindingPropertiesValueProperties)(nil)).Elem()
}

func (o FormInputBindingPropertiesValuePropertiesPtrOutput) ToFormInputBindingPropertiesValuePropertiesPtrOutput() FormInputBindingPropertiesValuePropertiesPtrOutput {
	return o
}

func (o FormInputBindingPropertiesValuePropertiesPtrOutput) ToFormInputBindingPropertiesValuePropertiesPtrOutputWithContext(ctx context.Context) FormInputBindingPropertiesValuePropertiesPtrOutput {
	return o
}

func (o FormInputBindingPropertiesValuePropertiesPtrOutput) Elem() FormInputBindingPropertiesValuePropertiesOutput {
	return o.ApplyT(func(v *FormInputBindingPropertiesValueProperties) FormInputBindingPropertiesValueProperties {
		if v != nil {
			return *v
		}
		var ret FormInputBindingPropertiesValueProperties
		return ret
	}).(FormInputBindingPropertiesValuePropertiesOutput)
}

// An Amplify DataStore model.
func (o FormInputBindingPropertiesValuePropertiesPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormInputBindingPropertiesValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

type FormInputValueProperty struct {
	// Associates a form property to a binding property. This enables exposed properties on the top level form to propagate data to the form's property values.
	BindingProperties *FormInputValuePropertyBindingProperties `pulumi:"bindingProperties"`
	// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
	Concat []FormInputValueProperty `pulumi:"concat"`
	// The value to assign to the input field.
	Value *string `pulumi:"value"`
}

// FormInputValuePropertyInput is an input type that accepts FormInputValuePropertyArgs and FormInputValuePropertyOutput values.
// You can construct a concrete instance of `FormInputValuePropertyInput` via:
//
//	FormInputValuePropertyArgs{...}
type FormInputValuePropertyInput interface {
	pulumi.Input

	ToFormInputValuePropertyOutput() FormInputValuePropertyOutput
	ToFormInputValuePropertyOutputWithContext(context.Context) FormInputValuePropertyOutput
}

type FormInputValuePropertyArgs struct {
	// Associates a form property to a binding property. This enables exposed properties on the top level form to propagate data to the form's property values.
	BindingProperties FormInputValuePropertyBindingPropertiesPtrInput `pulumi:"bindingProperties"`
	// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
	Concat FormInputValuePropertyArrayInput `pulumi:"concat"`
	// The value to assign to the input field.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (FormInputValuePropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputValueProperty)(nil)).Elem()
}

func (i FormInputValuePropertyArgs) ToFormInputValuePropertyOutput() FormInputValuePropertyOutput {
	return i.ToFormInputValuePropertyOutputWithContext(context.Background())
}

func (i FormInputValuePropertyArgs) ToFormInputValuePropertyOutputWithContext(ctx context.Context) FormInputValuePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputValuePropertyOutput)
}

func (i FormInputValuePropertyArgs) ToFormInputValuePropertyPtrOutput() FormInputValuePropertyPtrOutput {
	return i.ToFormInputValuePropertyPtrOutputWithContext(context.Background())
}

func (i FormInputValuePropertyArgs) ToFormInputValuePropertyPtrOutputWithContext(ctx context.Context) FormInputValuePropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputValuePropertyOutput).ToFormInputValuePropertyPtrOutputWithContext(ctx)
}

// FormInputValuePropertyPtrInput is an input type that accepts FormInputValuePropertyArgs, FormInputValuePropertyPtr and FormInputValuePropertyPtrOutput values.
// You can construct a concrete instance of `FormInputValuePropertyPtrInput` via:
//
//	        FormInputValuePropertyArgs{...}
//
//	or:
//
//	        nil
type FormInputValuePropertyPtrInput interface {
	pulumi.Input

	ToFormInputValuePropertyPtrOutput() FormInputValuePropertyPtrOutput
	ToFormInputValuePropertyPtrOutputWithContext(context.Context) FormInputValuePropertyPtrOutput
}

type formInputValuePropertyPtrType FormInputValuePropertyArgs

func FormInputValuePropertyPtr(v *FormInputValuePropertyArgs) FormInputValuePropertyPtrInput {
	return (*formInputValuePropertyPtrType)(v)
}

func (*formInputValuePropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormInputValueProperty)(nil)).Elem()
}

func (i *formInputValuePropertyPtrType) ToFormInputValuePropertyPtrOutput() FormInputValuePropertyPtrOutput {
	return i.ToFormInputValuePropertyPtrOutputWithContext(context.Background())
}

func (i *formInputValuePropertyPtrType) ToFormInputValuePropertyPtrOutputWithContext(ctx context.Context) FormInputValuePropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputValuePropertyPtrOutput)
}

// FormInputValuePropertyArrayInput is an input type that accepts FormInputValuePropertyArray and FormInputValuePropertyArrayOutput values.
// You can construct a concrete instance of `FormInputValuePropertyArrayInput` via:
//
//	FormInputValuePropertyArray{ FormInputValuePropertyArgs{...} }
type FormInputValuePropertyArrayInput interface {
	pulumi.Input

	ToFormInputValuePropertyArrayOutput() FormInputValuePropertyArrayOutput
	ToFormInputValuePropertyArrayOutputWithContext(context.Context) FormInputValuePropertyArrayOutput
}

type FormInputValuePropertyArray []FormInputValuePropertyInput

func (FormInputValuePropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FormInputValueProperty)(nil)).Elem()
}

func (i FormInputValuePropertyArray) ToFormInputValuePropertyArrayOutput() FormInputValuePropertyArrayOutput {
	return i.ToFormInputValuePropertyArrayOutputWithContext(context.Background())
}

func (i FormInputValuePropertyArray) ToFormInputValuePropertyArrayOutputWithContext(ctx context.Context) FormInputValuePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputValuePropertyArrayOutput)
}

type FormInputValuePropertyOutput struct{ *pulumi.OutputState }

func (FormInputValuePropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputValueProperty)(nil)).Elem()
}

func (o FormInputValuePropertyOutput) ToFormInputValuePropertyOutput() FormInputValuePropertyOutput {
	return o
}

func (o FormInputValuePropertyOutput) ToFormInputValuePropertyOutputWithContext(ctx context.Context) FormInputValuePropertyOutput {
	return o
}

func (o FormInputValuePropertyOutput) ToFormInputValuePropertyPtrOutput() FormInputValuePropertyPtrOutput {
	return o.ToFormInputValuePropertyPtrOutputWithContext(context.Background())
}

func (o FormInputValuePropertyOutput) ToFormInputValuePropertyPtrOutputWithContext(ctx context.Context) FormInputValuePropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormInputValueProperty) *FormInputValueProperty {
		return &v
	}).(FormInputValuePropertyPtrOutput)
}

// Associates a form property to a binding property. This enables exposed properties on the top level form to propagate data to the form's property values.
func (o FormInputValuePropertyOutput) BindingProperties() FormInputValuePropertyBindingPropertiesPtrOutput {
	return o.ApplyT(func(v FormInputValueProperty) *FormInputValuePropertyBindingProperties { return v.BindingProperties }).(FormInputValuePropertyBindingPropertiesPtrOutput)
}

// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
func (o FormInputValuePropertyOutput) Concat() FormInputValuePropertyArrayOutput {
	return o.ApplyT(func(v FormInputValueProperty) []FormInputValueProperty { return v.Concat }).(FormInputValuePropertyArrayOutput)
}

// The value to assign to the input field.
func (o FormInputValuePropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormInputValueProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FormInputValuePropertyPtrOutput struct{ *pulumi.OutputState }

func (FormInputValuePropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormInputValueProperty)(nil)).Elem()
}

func (o FormInputValuePropertyPtrOutput) ToFormInputValuePropertyPtrOutput() FormInputValuePropertyPtrOutput {
	return o
}

func (o FormInputValuePropertyPtrOutput) ToFormInputValuePropertyPtrOutputWithContext(ctx context.Context) FormInputValuePropertyPtrOutput {
	return o
}

func (o FormInputValuePropertyPtrOutput) Elem() FormInputValuePropertyOutput {
	return o.ApplyT(func(v *FormInputValueProperty) FormInputValueProperty {
		if v != nil {
			return *v
		}
		var ret FormInputValueProperty
		return ret
	}).(FormInputValuePropertyOutput)
}

// Associates a form property to a binding property. This enables exposed properties on the top level form to propagate data to the form's property values.
func (o FormInputValuePropertyPtrOutput) BindingProperties() FormInputValuePropertyBindingPropertiesPtrOutput {
	return o.ApplyT(func(v *FormInputValueProperty) *FormInputValuePropertyBindingProperties {
		if v == nil {
			return nil
		}
		return v.BindingProperties
	}).(FormInputValuePropertyBindingPropertiesPtrOutput)
}

// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
func (o FormInputValuePropertyPtrOutput) Concat() FormInputValuePropertyArrayOutput {
	return o.ApplyT(func(v *FormInputValueProperty) []FormInputValueProperty {
		if v == nil {
			return nil
		}
		return v.Concat
	}).(FormInputValuePropertyArrayOutput)
}

// The value to assign to the input field.
func (o FormInputValuePropertyPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormInputValueProperty) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type FormInputValuePropertyArrayOutput struct{ *pulumi.OutputState }

func (FormInputValuePropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FormInputValueProperty)(nil)).Elem()
}

func (o FormInputValuePropertyArrayOutput) ToFormInputValuePropertyArrayOutput() FormInputValuePropertyArrayOutput {
	return o
}

func (o FormInputValuePropertyArrayOutput) ToFormInputValuePropertyArrayOutputWithContext(ctx context.Context) FormInputValuePropertyArrayOutput {
	return o
}

func (o FormInputValuePropertyArrayOutput) Index(i pulumi.IntInput) FormInputValuePropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FormInputValueProperty {
		return vs[0].([]FormInputValueProperty)[vs[1].(int)]
	}).(FormInputValuePropertyOutput)
}

type FormInputValuePropertyBindingProperties struct {
	// The data field to bind the property to.
	Field *string `pulumi:"field"`
	// The form property to bind to the data field.
	Property string `pulumi:"property"`
}

// FormInputValuePropertyBindingPropertiesInput is an input type that accepts FormInputValuePropertyBindingPropertiesArgs and FormInputValuePropertyBindingPropertiesOutput values.
// You can construct a concrete instance of `FormInputValuePropertyBindingPropertiesInput` via:
//
//	FormInputValuePropertyBindingPropertiesArgs{...}
type FormInputValuePropertyBindingPropertiesInput interface {
	pulumi.Input

	ToFormInputValuePropertyBindingPropertiesOutput() FormInputValuePropertyBindingPropertiesOutput
	ToFormInputValuePropertyBindingPropertiesOutputWithContext(context.Context) FormInputValuePropertyBindingPropertiesOutput
}

type FormInputValuePropertyBindingPropertiesArgs struct {
	// The data field to bind the property to.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The form property to bind to the data field.
	Property pulumi.StringInput `pulumi:"property"`
}

func (FormInputValuePropertyBindingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputValuePropertyBindingProperties)(nil)).Elem()
}

func (i FormInputValuePropertyBindingPropertiesArgs) ToFormInputValuePropertyBindingPropertiesOutput() FormInputValuePropertyBindingPropertiesOutput {
	return i.ToFormInputValuePropertyBindingPropertiesOutputWithContext(context.Background())
}

func (i FormInputValuePropertyBindingPropertiesArgs) ToFormInputValuePropertyBindingPropertiesOutputWithContext(ctx context.Context) FormInputValuePropertyBindingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputValuePropertyBindingPropertiesOutput)
}

func (i FormInputValuePropertyBindingPropertiesArgs) ToFormInputValuePropertyBindingPropertiesPtrOutput() FormInputValuePropertyBindingPropertiesPtrOutput {
	return i.ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i FormInputValuePropertyBindingPropertiesArgs) ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) FormInputValuePropertyBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputValuePropertyBindingPropertiesOutput).ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(ctx)
}

// FormInputValuePropertyBindingPropertiesPtrInput is an input type that accepts FormInputValuePropertyBindingPropertiesArgs, FormInputValuePropertyBindingPropertiesPtr and FormInputValuePropertyBindingPropertiesPtrOutput values.
// You can construct a concrete instance of `FormInputValuePropertyBindingPropertiesPtrInput` via:
//
//	        FormInputValuePropertyBindingPropertiesArgs{...}
//
//	or:
//
//	        nil
type FormInputValuePropertyBindingPropertiesPtrInput interface {
	pulumi.Input

	ToFormInputValuePropertyBindingPropertiesPtrOutput() FormInputValuePropertyBindingPropertiesPtrOutput
	ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(context.Context) FormInputValuePropertyBindingPropertiesPtrOutput
}

type formInputValuePropertyBindingPropertiesPtrType FormInputValuePropertyBindingPropertiesArgs

func FormInputValuePropertyBindingPropertiesPtr(v *FormInputValuePropertyBindingPropertiesArgs) FormInputValuePropertyBindingPropertiesPtrInput {
	return (*formInputValuePropertyBindingPropertiesPtrType)(v)
}

func (*formInputValuePropertyBindingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormInputValuePropertyBindingProperties)(nil)).Elem()
}

func (i *formInputValuePropertyBindingPropertiesPtrType) ToFormInputValuePropertyBindingPropertiesPtrOutput() FormInputValuePropertyBindingPropertiesPtrOutput {
	return i.ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i *formInputValuePropertyBindingPropertiesPtrType) ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) FormInputValuePropertyBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormInputValuePropertyBindingPropertiesPtrOutput)
}

type FormInputValuePropertyBindingPropertiesOutput struct{ *pulumi.OutputState }

func (FormInputValuePropertyBindingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormInputValuePropertyBindingProperties)(nil)).Elem()
}

func (o FormInputValuePropertyBindingPropertiesOutput) ToFormInputValuePropertyBindingPropertiesOutput() FormInputValuePropertyBindingPropertiesOutput {
	return o
}

func (o FormInputValuePropertyBindingPropertiesOutput) ToFormInputValuePropertyBindingPropertiesOutputWithContext(ctx context.Context) FormInputValuePropertyBindingPropertiesOutput {
	return o
}

func (o FormInputValuePropertyBindingPropertiesOutput) ToFormInputValuePropertyBindingPropertiesPtrOutput() FormInputValuePropertyBindingPropertiesPtrOutput {
	return o.ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(context.Background())
}

func (o FormInputValuePropertyBindingPropertiesOutput) ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) FormInputValuePropertyBindingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormInputValuePropertyBindingProperties) *FormInputValuePropertyBindingProperties {
		return &v
	}).(FormInputValuePropertyBindingPropertiesPtrOutput)
}

// The data field to bind the property to.
func (o FormInputValuePropertyBindingPropertiesOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormInputValuePropertyBindingProperties) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The form property to bind to the data field.
func (o FormInputValuePropertyBindingPropertiesOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v FormInputValuePropertyBindingProperties) string { return v.Property }).(pulumi.StringOutput)
}

type FormInputValuePropertyBindingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (FormInputValuePropertyBindingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormInputValuePropertyBindingProperties)(nil)).Elem()
}

func (o FormInputValuePropertyBindingPropertiesPtrOutput) ToFormInputValuePropertyBindingPropertiesPtrOutput() FormInputValuePropertyBindingPropertiesPtrOutput {
	return o
}

func (o FormInputValuePropertyBindingPropertiesPtrOutput) ToFormInputValuePropertyBindingPropertiesPtrOutputWithContext(ctx context.Context) FormInputValuePropertyBindingPropertiesPtrOutput {
	return o
}

func (o FormInputValuePropertyBindingPropertiesPtrOutput) Elem() FormInputValuePropertyBindingPropertiesOutput {
	return o.ApplyT(func(v *FormInputValuePropertyBindingProperties) FormInputValuePropertyBindingProperties {
		if v != nil {
			return *v
		}
		var ret FormInputValuePropertyBindingProperties
		return ret
	}).(FormInputValuePropertyBindingPropertiesOutput)
}

// The data field to bind the property to.
func (o FormInputValuePropertyBindingPropertiesPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormInputValuePropertyBindingProperties) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// The form property to bind to the data field.
func (o FormInputValuePropertyBindingPropertiesPtrOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormInputValuePropertyBindingProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Property
	}).(pulumi.StringPtrOutput)
}

type FormSectionalElement struct {
	// Excludes a sectional element that was generated by default for a specified data model.
	Excluded *bool `pulumi:"excluded"`
	// Specifies the size of the font for a `Heading` sectional element. Valid values are `1 | 2 | 3 | 4 | 5 | 6` .
	Level *float64 `pulumi:"level"`
	// Specifies the orientation for a `Divider` sectional element. Valid values are `horizontal` or `vertical` .
	Orientation *string `pulumi:"orientation"`
	// The `FieldPosition` property specifies the field position.
	Position interface{} `pulumi:"position"`
	// The text for a `Text` sectional element.
	Text *string `pulumi:"text"`
	// The type of sectional element. Valid values are `Heading` , `Text` , and `Divider` .
	Type string `pulumi:"type"`
}

// FormSectionalElementInput is an input type that accepts FormSectionalElementArgs and FormSectionalElementOutput values.
// You can construct a concrete instance of `FormSectionalElementInput` via:
//
//	FormSectionalElementArgs{...}
type FormSectionalElementInput interface {
	pulumi.Input

	ToFormSectionalElementOutput() FormSectionalElementOutput
	ToFormSectionalElementOutputWithContext(context.Context) FormSectionalElementOutput
}

type FormSectionalElementArgs struct {
	// Excludes a sectional element that was generated by default for a specified data model.
	Excluded pulumi.BoolPtrInput `pulumi:"excluded"`
	// Specifies the size of the font for a `Heading` sectional element. Valid values are `1 | 2 | 3 | 4 | 5 | 6` .
	Level pulumi.Float64PtrInput `pulumi:"level"`
	// Specifies the orientation for a `Divider` sectional element. Valid values are `horizontal` or `vertical` .
	Orientation pulumi.StringPtrInput `pulumi:"orientation"`
	// The `FieldPosition` property specifies the field position.
	Position pulumi.Input `pulumi:"position"`
	// The text for a `Text` sectional element.
	Text pulumi.StringPtrInput `pulumi:"text"`
	// The type of sectional element. Valid values are `Heading` , `Text` , and `Divider` .
	Type pulumi.StringInput `pulumi:"type"`
}

func (FormSectionalElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormSectionalElement)(nil)).Elem()
}

func (i FormSectionalElementArgs) ToFormSectionalElementOutput() FormSectionalElementOutput {
	return i.ToFormSectionalElementOutputWithContext(context.Background())
}

func (i FormSectionalElementArgs) ToFormSectionalElementOutputWithContext(ctx context.Context) FormSectionalElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormSectionalElementOutput)
}

// FormSectionalElementMapInput is an input type that accepts FormSectionalElementMap and FormSectionalElementMapOutput values.
// You can construct a concrete instance of `FormSectionalElementMapInput` via:
//
//	FormSectionalElementMap{ "key": FormSectionalElementArgs{...} }
type FormSectionalElementMapInput interface {
	pulumi.Input

	ToFormSectionalElementMapOutput() FormSectionalElementMapOutput
	ToFormSectionalElementMapOutputWithContext(context.Context) FormSectionalElementMapOutput
}

type FormSectionalElementMap map[string]FormSectionalElementInput

func (FormSectionalElementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FormSectionalElement)(nil)).Elem()
}

func (i FormSectionalElementMap) ToFormSectionalElementMapOutput() FormSectionalElementMapOutput {
	return i.ToFormSectionalElementMapOutputWithContext(context.Background())
}

func (i FormSectionalElementMap) ToFormSectionalElementMapOutputWithContext(ctx context.Context) FormSectionalElementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormSectionalElementMapOutput)
}

type FormSectionalElementOutput struct{ *pulumi.OutputState }

func (FormSectionalElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormSectionalElement)(nil)).Elem()
}

func (o FormSectionalElementOutput) ToFormSectionalElementOutput() FormSectionalElementOutput {
	return o
}

func (o FormSectionalElementOutput) ToFormSectionalElementOutputWithContext(ctx context.Context) FormSectionalElementOutput {
	return o
}

// Excludes a sectional element that was generated by default for a specified data model.
func (o FormSectionalElementOutput) Excluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FormSectionalElement) *bool { return v.Excluded }).(pulumi.BoolPtrOutput)
}

// Specifies the size of the font for a `Heading` sectional element. Valid values are `1 | 2 | 3 | 4 | 5 | 6` .
func (o FormSectionalElementOutput) Level() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FormSectionalElement) *float64 { return v.Level }).(pulumi.Float64PtrOutput)
}

// Specifies the orientation for a `Divider` sectional element. Valid values are `horizontal` or `vertical` .
func (o FormSectionalElementOutput) Orientation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormSectionalElement) *string { return v.Orientation }).(pulumi.StringPtrOutput)
}

// The `FieldPosition` property specifies the field position.
func (o FormSectionalElementOutput) Position() pulumi.AnyOutput {
	return o.ApplyT(func(v FormSectionalElement) interface{} { return v.Position }).(pulumi.AnyOutput)
}

// The text for a `Text` sectional element.
func (o FormSectionalElementOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FormSectionalElement) *string { return v.Text }).(pulumi.StringPtrOutput)
}

// The type of sectional element. Valid values are `Heading` , `Text` , and `Divider` .
func (o FormSectionalElementOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FormSectionalElement) string { return v.Type }).(pulumi.StringOutput)
}

type FormSectionalElementMapOutput struct{ *pulumi.OutputState }

func (FormSectionalElementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FormSectionalElement)(nil)).Elem()
}

func (o FormSectionalElementMapOutput) ToFormSectionalElementMapOutput() FormSectionalElementMapOutput {
	return o
}

func (o FormSectionalElementMapOutput) ToFormSectionalElementMapOutputWithContext(ctx context.Context) FormSectionalElementMapOutput {
	return o
}

func (o FormSectionalElementMapOutput) MapIndex(k pulumi.StringInput) FormSectionalElementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FormSectionalElement {
		return vs[0].(map[string]FormSectionalElement)[vs[1].(string)]
	}).(FormSectionalElementOutput)
}

type FormStyle struct {
	// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
	HorizontalGap interface{} `pulumi:"horizontalGap"`
	// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
	OuterPadding interface{} `pulumi:"outerPadding"`
	// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
	VerticalGap interface{} `pulumi:"verticalGap"`
}

// FormStyleInput is an input type that accepts FormStyleArgs and FormStyleOutput values.
// You can construct a concrete instance of `FormStyleInput` via:
//
//	FormStyleArgs{...}
type FormStyleInput interface {
	pulumi.Input

	ToFormStyleOutput() FormStyleOutput
	ToFormStyleOutputWithContext(context.Context) FormStyleOutput
}

type FormStyleArgs struct {
	// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
	HorizontalGap pulumi.Input `pulumi:"horizontalGap"`
	// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
	OuterPadding pulumi.Input `pulumi:"outerPadding"`
	// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
	VerticalGap pulumi.Input `pulumi:"verticalGap"`
}

func (FormStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyle)(nil)).Elem()
}

func (i FormStyleArgs) ToFormStyleOutput() FormStyleOutput {
	return i.ToFormStyleOutputWithContext(context.Background())
}

func (i FormStyleArgs) ToFormStyleOutputWithContext(ctx context.Context) FormStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleOutput)
}

func (i FormStyleArgs) ToFormStylePtrOutput() FormStylePtrOutput {
	return i.ToFormStylePtrOutputWithContext(context.Background())
}

func (i FormStyleArgs) ToFormStylePtrOutputWithContext(ctx context.Context) FormStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleOutput).ToFormStylePtrOutputWithContext(ctx)
}

// FormStylePtrInput is an input type that accepts FormStyleArgs, FormStylePtr and FormStylePtrOutput values.
// You can construct a concrete instance of `FormStylePtrInput` via:
//
//	        FormStyleArgs{...}
//
//	or:
//
//	        nil
type FormStylePtrInput interface {
	pulumi.Input

	ToFormStylePtrOutput() FormStylePtrOutput
	ToFormStylePtrOutputWithContext(context.Context) FormStylePtrOutput
}

type formStylePtrType FormStyleArgs

func FormStylePtr(v *FormStyleArgs) FormStylePtrInput {
	return (*formStylePtrType)(v)
}

func (*formStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyle)(nil)).Elem()
}

func (i *formStylePtrType) ToFormStylePtrOutput() FormStylePtrOutput {
	return i.ToFormStylePtrOutputWithContext(context.Background())
}

func (i *formStylePtrType) ToFormStylePtrOutputWithContext(ctx context.Context) FormStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStylePtrOutput)
}

type FormStyleOutput struct{ *pulumi.OutputState }

func (FormStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyle)(nil)).Elem()
}

func (o FormStyleOutput) ToFormStyleOutput() FormStyleOutput {
	return o
}

func (o FormStyleOutput) ToFormStyleOutputWithContext(ctx context.Context) FormStyleOutput {
	return o
}

func (o FormStyleOutput) ToFormStylePtrOutput() FormStylePtrOutput {
	return o.ToFormStylePtrOutputWithContext(context.Background())
}

func (o FormStyleOutput) ToFormStylePtrOutputWithContext(ctx context.Context) FormStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormStyle) *FormStyle {
		return &v
	}).(FormStylePtrOutput)
}

// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
func (o FormStyleOutput) HorizontalGap() pulumi.AnyOutput {
	return o.ApplyT(func(v FormStyle) interface{} { return v.HorizontalGap }).(pulumi.AnyOutput)
}

// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
func (o FormStyleOutput) OuterPadding() pulumi.AnyOutput {
	return o.ApplyT(func(v FormStyle) interface{} { return v.OuterPadding }).(pulumi.AnyOutput)
}

// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
func (o FormStyleOutput) VerticalGap() pulumi.AnyOutput {
	return o.ApplyT(func(v FormStyle) interface{} { return v.VerticalGap }).(pulumi.AnyOutput)
}

type FormStylePtrOutput struct{ *pulumi.OutputState }

func (FormStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyle)(nil)).Elem()
}

func (o FormStylePtrOutput) ToFormStylePtrOutput() FormStylePtrOutput {
	return o
}

func (o FormStylePtrOutput) ToFormStylePtrOutputWithContext(ctx context.Context) FormStylePtrOutput {
	return o
}

func (o FormStylePtrOutput) Elem() FormStyleOutput {
	return o.ApplyT(func(v *FormStyle) FormStyle {
		if v != nil {
			return *v
		}
		var ret FormStyle
		return ret
	}).(FormStyleOutput)
}

// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
func (o FormStylePtrOutput) HorizontalGap() pulumi.AnyOutput {
	return o.ApplyT(func(v *FormStyle) interface{} {
		if v == nil {
			return nil
		}
		return v.HorizontalGap
	}).(pulumi.AnyOutput)
}

// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
func (o FormStylePtrOutput) OuterPadding() pulumi.AnyOutput {
	return o.ApplyT(func(v *FormStyle) interface{} {
		if v == nil {
			return nil
		}
		return v.OuterPadding
	}).(pulumi.AnyOutput)
}

// The `FormStyleConfig` property specifies the configuration settings for the form's style properties.
func (o FormStylePtrOutput) VerticalGap() pulumi.AnyOutput {
	return o.ApplyT(func(v *FormStyle) interface{} {
		if v == nil {
			return nil
		}
		return v.VerticalGap
	}).(pulumi.AnyOutput)
}

type FormStyleConfig0Properties struct {
	TokenReference string `pulumi:"tokenReference"`
}

// FormStyleConfig0PropertiesInput is an input type that accepts FormStyleConfig0PropertiesArgs and FormStyleConfig0PropertiesOutput values.
// You can construct a concrete instance of `FormStyleConfig0PropertiesInput` via:
//
//	FormStyleConfig0PropertiesArgs{...}
type FormStyleConfig0PropertiesInput interface {
	pulumi.Input

	ToFormStyleConfig0PropertiesOutput() FormStyleConfig0PropertiesOutput
	ToFormStyleConfig0PropertiesOutputWithContext(context.Context) FormStyleConfig0PropertiesOutput
}

type FormStyleConfig0PropertiesArgs struct {
	TokenReference pulumi.StringInput `pulumi:"tokenReference"`
}

func (FormStyleConfig0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyleConfig0Properties)(nil)).Elem()
}

func (i FormStyleConfig0PropertiesArgs) ToFormStyleConfig0PropertiesOutput() FormStyleConfig0PropertiesOutput {
	return i.ToFormStyleConfig0PropertiesOutputWithContext(context.Background())
}

func (i FormStyleConfig0PropertiesArgs) ToFormStyleConfig0PropertiesOutputWithContext(ctx context.Context) FormStyleConfig0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfig0PropertiesOutput)
}

func (i FormStyleConfig0PropertiesArgs) ToFormStyleConfig0PropertiesPtrOutput() FormStyleConfig0PropertiesPtrOutput {
	return i.ToFormStyleConfig0PropertiesPtrOutputWithContext(context.Background())
}

func (i FormStyleConfig0PropertiesArgs) ToFormStyleConfig0PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfig0PropertiesOutput).ToFormStyleConfig0PropertiesPtrOutputWithContext(ctx)
}

// FormStyleConfig0PropertiesPtrInput is an input type that accepts FormStyleConfig0PropertiesArgs, FormStyleConfig0PropertiesPtr and FormStyleConfig0PropertiesPtrOutput values.
// You can construct a concrete instance of `FormStyleConfig0PropertiesPtrInput` via:
//
//	        FormStyleConfig0PropertiesArgs{...}
//
//	or:
//
//	        nil
type FormStyleConfig0PropertiesPtrInput interface {
	pulumi.Input

	ToFormStyleConfig0PropertiesPtrOutput() FormStyleConfig0PropertiesPtrOutput
	ToFormStyleConfig0PropertiesPtrOutputWithContext(context.Context) FormStyleConfig0PropertiesPtrOutput
}

type formStyleConfig0PropertiesPtrType FormStyleConfig0PropertiesArgs

func FormStyleConfig0PropertiesPtr(v *FormStyleConfig0PropertiesArgs) FormStyleConfig0PropertiesPtrInput {
	return (*formStyleConfig0PropertiesPtrType)(v)
}

func (*formStyleConfig0PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyleConfig0Properties)(nil)).Elem()
}

func (i *formStyleConfig0PropertiesPtrType) ToFormStyleConfig0PropertiesPtrOutput() FormStyleConfig0PropertiesPtrOutput {
	return i.ToFormStyleConfig0PropertiesPtrOutputWithContext(context.Background())
}

func (i *formStyleConfig0PropertiesPtrType) ToFormStyleConfig0PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfig0PropertiesPtrOutput)
}

type FormStyleConfig0PropertiesOutput struct{ *pulumi.OutputState }

func (FormStyleConfig0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyleConfig0Properties)(nil)).Elem()
}

func (o FormStyleConfig0PropertiesOutput) ToFormStyleConfig0PropertiesOutput() FormStyleConfig0PropertiesOutput {
	return o
}

func (o FormStyleConfig0PropertiesOutput) ToFormStyleConfig0PropertiesOutputWithContext(ctx context.Context) FormStyleConfig0PropertiesOutput {
	return o
}

func (o FormStyleConfig0PropertiesOutput) ToFormStyleConfig0PropertiesPtrOutput() FormStyleConfig0PropertiesPtrOutput {
	return o.ToFormStyleConfig0PropertiesPtrOutputWithContext(context.Background())
}

func (o FormStyleConfig0PropertiesOutput) ToFormStyleConfig0PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig0PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormStyleConfig0Properties) *FormStyleConfig0Properties {
		return &v
	}).(FormStyleConfig0PropertiesPtrOutput)
}

func (o FormStyleConfig0PropertiesOutput) TokenReference() pulumi.StringOutput {
	return o.ApplyT(func(v FormStyleConfig0Properties) string { return v.TokenReference }).(pulumi.StringOutput)
}

type FormStyleConfig0PropertiesPtrOutput struct{ *pulumi.OutputState }

func (FormStyleConfig0PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyleConfig0Properties)(nil)).Elem()
}

func (o FormStyleConfig0PropertiesPtrOutput) ToFormStyleConfig0PropertiesPtrOutput() FormStyleConfig0PropertiesPtrOutput {
	return o
}

func (o FormStyleConfig0PropertiesPtrOutput) ToFormStyleConfig0PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig0PropertiesPtrOutput {
	return o
}

func (o FormStyleConfig0PropertiesPtrOutput) Elem() FormStyleConfig0PropertiesOutput {
	return o.ApplyT(func(v *FormStyleConfig0Properties) FormStyleConfig0Properties {
		if v != nil {
			return *v
		}
		var ret FormStyleConfig0Properties
		return ret
	}).(FormStyleConfig0PropertiesOutput)
}

func (o FormStyleConfig0PropertiesPtrOutput) TokenReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormStyleConfig0Properties) *string {
		if v == nil {
			return nil
		}
		return &v.TokenReference
	}).(pulumi.StringPtrOutput)
}

type FormStyleConfig1Properties struct {
	Value string `pulumi:"value"`
}

// FormStyleConfig1PropertiesInput is an input type that accepts FormStyleConfig1PropertiesArgs and FormStyleConfig1PropertiesOutput values.
// You can construct a concrete instance of `FormStyleConfig1PropertiesInput` via:
//
//	FormStyleConfig1PropertiesArgs{...}
type FormStyleConfig1PropertiesInput interface {
	pulumi.Input

	ToFormStyleConfig1PropertiesOutput() FormStyleConfig1PropertiesOutput
	ToFormStyleConfig1PropertiesOutputWithContext(context.Context) FormStyleConfig1PropertiesOutput
}

type FormStyleConfig1PropertiesArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
}

func (FormStyleConfig1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyleConfig1Properties)(nil)).Elem()
}

func (i FormStyleConfig1PropertiesArgs) ToFormStyleConfig1PropertiesOutput() FormStyleConfig1PropertiesOutput {
	return i.ToFormStyleConfig1PropertiesOutputWithContext(context.Background())
}

func (i FormStyleConfig1PropertiesArgs) ToFormStyleConfig1PropertiesOutputWithContext(ctx context.Context) FormStyleConfig1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfig1PropertiesOutput)
}

func (i FormStyleConfig1PropertiesArgs) ToFormStyleConfig1PropertiesPtrOutput() FormStyleConfig1PropertiesPtrOutput {
	return i.ToFormStyleConfig1PropertiesPtrOutputWithContext(context.Background())
}

func (i FormStyleConfig1PropertiesArgs) ToFormStyleConfig1PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfig1PropertiesOutput).ToFormStyleConfig1PropertiesPtrOutputWithContext(ctx)
}

// FormStyleConfig1PropertiesPtrInput is an input type that accepts FormStyleConfig1PropertiesArgs, FormStyleConfig1PropertiesPtr and FormStyleConfig1PropertiesPtrOutput values.
// You can construct a concrete instance of `FormStyleConfig1PropertiesPtrInput` via:
//
//	        FormStyleConfig1PropertiesArgs{...}
//
//	or:
//
//	        nil
type FormStyleConfig1PropertiesPtrInput interface {
	pulumi.Input

	ToFormStyleConfig1PropertiesPtrOutput() FormStyleConfig1PropertiesPtrOutput
	ToFormStyleConfig1PropertiesPtrOutputWithContext(context.Context) FormStyleConfig1PropertiesPtrOutput
}

type formStyleConfig1PropertiesPtrType FormStyleConfig1PropertiesArgs

func FormStyleConfig1PropertiesPtr(v *FormStyleConfig1PropertiesArgs) FormStyleConfig1PropertiesPtrInput {
	return (*formStyleConfig1PropertiesPtrType)(v)
}

func (*formStyleConfig1PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyleConfig1Properties)(nil)).Elem()
}

func (i *formStyleConfig1PropertiesPtrType) ToFormStyleConfig1PropertiesPtrOutput() FormStyleConfig1PropertiesPtrOutput {
	return i.ToFormStyleConfig1PropertiesPtrOutputWithContext(context.Background())
}

func (i *formStyleConfig1PropertiesPtrType) ToFormStyleConfig1PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormStyleConfig1PropertiesPtrOutput)
}

type FormStyleConfig1PropertiesOutput struct{ *pulumi.OutputState }

func (FormStyleConfig1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormStyleConfig1Properties)(nil)).Elem()
}

func (o FormStyleConfig1PropertiesOutput) ToFormStyleConfig1PropertiesOutput() FormStyleConfig1PropertiesOutput {
	return o
}

func (o FormStyleConfig1PropertiesOutput) ToFormStyleConfig1PropertiesOutputWithContext(ctx context.Context) FormStyleConfig1PropertiesOutput {
	return o
}

func (o FormStyleConfig1PropertiesOutput) ToFormStyleConfig1PropertiesPtrOutput() FormStyleConfig1PropertiesPtrOutput {
	return o.ToFormStyleConfig1PropertiesPtrOutputWithContext(context.Background())
}

func (o FormStyleConfig1PropertiesOutput) ToFormStyleConfig1PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig1PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormStyleConfig1Properties) *FormStyleConfig1Properties {
		return &v
	}).(FormStyleConfig1PropertiesPtrOutput)
}

func (o FormStyleConfig1PropertiesOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FormStyleConfig1Properties) string { return v.Value }).(pulumi.StringOutput)
}

type FormStyleConfig1PropertiesPtrOutput struct{ *pulumi.OutputState }

func (FormStyleConfig1PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormStyleConfig1Properties)(nil)).Elem()
}

func (o FormStyleConfig1PropertiesPtrOutput) ToFormStyleConfig1PropertiesPtrOutput() FormStyleConfig1PropertiesPtrOutput {
	return o
}

func (o FormStyleConfig1PropertiesPtrOutput) ToFormStyleConfig1PropertiesPtrOutputWithContext(ctx context.Context) FormStyleConfig1PropertiesPtrOutput {
	return o
}

func (o FormStyleConfig1PropertiesPtrOutput) Elem() FormStyleConfig1PropertiesOutput {
	return o.ApplyT(func(v *FormStyleConfig1Properties) FormStyleConfig1Properties {
		if v != nil {
			return *v
		}
		var ret FormStyleConfig1Properties
		return ret
	}).(FormStyleConfig1PropertiesOutput)
}

func (o FormStyleConfig1PropertiesPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormStyleConfig1Properties) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type FormValueMapping struct {
	// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
	DisplayValue *FormInputValueProperty `pulumi:"displayValue"`
	// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
	Value FormInputValueProperty `pulumi:"value"`
}

// FormValueMappingInput is an input type that accepts FormValueMappingArgs and FormValueMappingOutput values.
// You can construct a concrete instance of `FormValueMappingInput` via:
//
//	FormValueMappingArgs{...}
type FormValueMappingInput interface {
	pulumi.Input

	ToFormValueMappingOutput() FormValueMappingOutput
	ToFormValueMappingOutputWithContext(context.Context) FormValueMappingOutput
}

type FormValueMappingArgs struct {
	// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
	DisplayValue FormInputValuePropertyPtrInput `pulumi:"displayValue"`
	// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
	Value FormInputValuePropertyInput `pulumi:"value"`
}

func (FormValueMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormValueMapping)(nil)).Elem()
}

func (i FormValueMappingArgs) ToFormValueMappingOutput() FormValueMappingOutput {
	return i.ToFormValueMappingOutputWithContext(context.Background())
}

func (i FormValueMappingArgs) ToFormValueMappingOutputWithContext(ctx context.Context) FormValueMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormValueMappingOutput)
}

// FormValueMappingArrayInput is an input type that accepts FormValueMappingArray and FormValueMappingArrayOutput values.
// You can construct a concrete instance of `FormValueMappingArrayInput` via:
//
//	FormValueMappingArray{ FormValueMappingArgs{...} }
type FormValueMappingArrayInput interface {
	pulumi.Input

	ToFormValueMappingArrayOutput() FormValueMappingArrayOutput
	ToFormValueMappingArrayOutputWithContext(context.Context) FormValueMappingArrayOutput
}

type FormValueMappingArray []FormValueMappingInput

func (FormValueMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FormValueMapping)(nil)).Elem()
}

func (i FormValueMappingArray) ToFormValueMappingArrayOutput() FormValueMappingArrayOutput {
	return i.ToFormValueMappingArrayOutputWithContext(context.Background())
}

func (i FormValueMappingArray) ToFormValueMappingArrayOutputWithContext(ctx context.Context) FormValueMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormValueMappingArrayOutput)
}

type FormValueMappingOutput struct{ *pulumi.OutputState }

func (FormValueMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormValueMapping)(nil)).Elem()
}

func (o FormValueMappingOutput) ToFormValueMappingOutput() FormValueMappingOutput {
	return o
}

func (o FormValueMappingOutput) ToFormValueMappingOutputWithContext(ctx context.Context) FormValueMappingOutput {
	return o
}

// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
func (o FormValueMappingOutput) DisplayValue() FormInputValuePropertyPtrOutput {
	return o.ApplyT(func(v FormValueMapping) *FormInputValueProperty { return v.DisplayValue }).(FormInputValuePropertyPtrOutput)
}

// The `FormInputValueProperty` property specifies the configuration for an input field on a form. Use `FormInputValueProperty` to specify the values to render or bind by default.
func (o FormValueMappingOutput) Value() FormInputValuePropertyOutput {
	return o.ApplyT(func(v FormValueMapping) FormInputValueProperty { return v.Value }).(FormInputValuePropertyOutput)
}

type FormValueMappingArrayOutput struct{ *pulumi.OutputState }

func (FormValueMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FormValueMapping)(nil)).Elem()
}

func (o FormValueMappingArrayOutput) ToFormValueMappingArrayOutput() FormValueMappingArrayOutput {
	return o
}

func (o FormValueMappingArrayOutput) ToFormValueMappingArrayOutputWithContext(ctx context.Context) FormValueMappingArrayOutput {
	return o
}

func (o FormValueMappingArrayOutput) Index(i pulumi.IntInput) FormValueMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FormValueMapping {
		return vs[0].([]FormValueMapping)[vs[1].(int)]
	}).(FormValueMappingOutput)
}

type FormValueMappings struct {
	// The information to bind fields to data at runtime.
	BindingProperties map[string]FormInputBindingPropertiesValue `pulumi:"bindingProperties"`
	// The `ValueMapping` property specifies the association between a complex object and a display value. Use `ValueMapping` to store how to represent complex objects when they are displayed.
	Values []FormValueMapping `pulumi:"values"`
}

// FormValueMappingsInput is an input type that accepts FormValueMappingsArgs and FormValueMappingsOutput values.
// You can construct a concrete instance of `FormValueMappingsInput` via:
//
//	FormValueMappingsArgs{...}
type FormValueMappingsInput interface {
	pulumi.Input

	ToFormValueMappingsOutput() FormValueMappingsOutput
	ToFormValueMappingsOutputWithContext(context.Context) FormValueMappingsOutput
}

type FormValueMappingsArgs struct {
	// The information to bind fields to data at runtime.
	BindingProperties FormInputBindingPropertiesValueMapInput `pulumi:"bindingProperties"`
	// The `ValueMapping` property specifies the association between a complex object and a display value. Use `ValueMapping` to store how to represent complex objects when they are displayed.
	Values FormValueMappingArrayInput `pulumi:"values"`
}

func (FormValueMappingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormValueMappings)(nil)).Elem()
}

func (i FormValueMappingsArgs) ToFormValueMappingsOutput() FormValueMappingsOutput {
	return i.ToFormValueMappingsOutputWithContext(context.Background())
}

func (i FormValueMappingsArgs) ToFormValueMappingsOutputWithContext(ctx context.Context) FormValueMappingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormValueMappingsOutput)
}

func (i FormValueMappingsArgs) ToFormValueMappingsPtrOutput() FormValueMappingsPtrOutput {
	return i.ToFormValueMappingsPtrOutputWithContext(context.Background())
}

func (i FormValueMappingsArgs) ToFormValueMappingsPtrOutputWithContext(ctx context.Context) FormValueMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormValueMappingsOutput).ToFormValueMappingsPtrOutputWithContext(ctx)
}

// FormValueMappingsPtrInput is an input type that accepts FormValueMappingsArgs, FormValueMappingsPtr and FormValueMappingsPtrOutput values.
// You can construct a concrete instance of `FormValueMappingsPtrInput` via:
//
//	        FormValueMappingsArgs{...}
//
//	or:
//
//	        nil
type FormValueMappingsPtrInput interface {
	pulumi.Input

	ToFormValueMappingsPtrOutput() FormValueMappingsPtrOutput
	ToFormValueMappingsPtrOutputWithContext(context.Context) FormValueMappingsPtrOutput
}

type formValueMappingsPtrType FormValueMappingsArgs

func FormValueMappingsPtr(v *FormValueMappingsArgs) FormValueMappingsPtrInput {
	return (*formValueMappingsPtrType)(v)
}

func (*formValueMappingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FormValueMappings)(nil)).Elem()
}

func (i *formValueMappingsPtrType) ToFormValueMappingsPtrOutput() FormValueMappingsPtrOutput {
	return i.ToFormValueMappingsPtrOutputWithContext(context.Background())
}

func (i *formValueMappingsPtrType) ToFormValueMappingsPtrOutputWithContext(ctx context.Context) FormValueMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormValueMappingsPtrOutput)
}

type FormValueMappingsOutput struct{ *pulumi.OutputState }

func (FormValueMappingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormValueMappings)(nil)).Elem()
}

func (o FormValueMappingsOutput) ToFormValueMappingsOutput() FormValueMappingsOutput {
	return o
}

func (o FormValueMappingsOutput) ToFormValueMappingsOutputWithContext(ctx context.Context) FormValueMappingsOutput {
	return o
}

func (o FormValueMappingsOutput) ToFormValueMappingsPtrOutput() FormValueMappingsPtrOutput {
	return o.ToFormValueMappingsPtrOutputWithContext(context.Background())
}

func (o FormValueMappingsOutput) ToFormValueMappingsPtrOutputWithContext(ctx context.Context) FormValueMappingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormValueMappings) *FormValueMappings {
		return &v
	}).(FormValueMappingsPtrOutput)
}

// The information to bind fields to data at runtime.
func (o FormValueMappingsOutput) BindingProperties() FormInputBindingPropertiesValueMapOutput {
	return o.ApplyT(func(v FormValueMappings) map[string]FormInputBindingPropertiesValue { return v.BindingProperties }).(FormInputBindingPropertiesValueMapOutput)
}

// The `ValueMapping` property specifies the association between a complex object and a display value. Use `ValueMapping` to store how to represent complex objects when they are displayed.
func (o FormValueMappingsOutput) Values() FormValueMappingArrayOutput {
	return o.ApplyT(func(v FormValueMappings) []FormValueMapping { return v.Values }).(FormValueMappingArrayOutput)
}

type FormValueMappingsPtrOutput struct{ *pulumi.OutputState }

func (FormValueMappingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormValueMappings)(nil)).Elem()
}

func (o FormValueMappingsPtrOutput) ToFormValueMappingsPtrOutput() FormValueMappingsPtrOutput {
	return o
}

func (o FormValueMappingsPtrOutput) ToFormValueMappingsPtrOutputWithContext(ctx context.Context) FormValueMappingsPtrOutput {
	return o
}

func (o FormValueMappingsPtrOutput) Elem() FormValueMappingsOutput {
	return o.ApplyT(func(v *FormValueMappings) FormValueMappings {
		if v != nil {
			return *v
		}
		var ret FormValueMappings
		return ret
	}).(FormValueMappingsOutput)
}

// The information to bind fields to data at runtime.
func (o FormValueMappingsPtrOutput) BindingProperties() FormInputBindingPropertiesValueMapOutput {
	return o.ApplyT(func(v *FormValueMappings) map[string]FormInputBindingPropertiesValue {
		if v == nil {
			return nil
		}
		return v.BindingProperties
	}).(FormInputBindingPropertiesValueMapOutput)
}

// The `ValueMapping` property specifies the association between a complex object and a display value. Use `ValueMapping` to store how to represent complex objects when they are displayed.
func (o FormValueMappingsPtrOutput) Values() FormValueMappingArrayOutput {
	return o.ApplyT(func(v *FormValueMappings) []FormValueMapping {
		if v == nil {
			return nil
		}
		return v.Values
	}).(FormValueMappingArrayOutput)
}

type ThemeValue struct {
	// A list of key-value pairs that define the theme's properties.
	Children []ThemeValues `pulumi:"children"`
	// The value of a theme property.
	Value *string `pulumi:"value"`
}

// ThemeValueInput is an input type that accepts ThemeValueArgs and ThemeValueOutput values.
// You can construct a concrete instance of `ThemeValueInput` via:
//
//	ThemeValueArgs{...}
type ThemeValueInput interface {
	pulumi.Input

	ToThemeValueOutput() ThemeValueOutput
	ToThemeValueOutputWithContext(context.Context) ThemeValueOutput
}

type ThemeValueArgs struct {
	// A list of key-value pairs that define the theme's properties.
	Children ThemeValuesArrayInput `pulumi:"children"`
	// The value of a theme property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThemeValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValue)(nil)).Elem()
}

func (i ThemeValueArgs) ToThemeValueOutput() ThemeValueOutput {
	return i.ToThemeValueOutputWithContext(context.Background())
}

func (i ThemeValueArgs) ToThemeValueOutputWithContext(ctx context.Context) ThemeValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValueOutput)
}

func (i ThemeValueArgs) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return i.ToThemeValuePtrOutputWithContext(context.Background())
}

func (i ThemeValueArgs) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValueOutput).ToThemeValuePtrOutputWithContext(ctx)
}

// ThemeValuePtrInput is an input type that accepts ThemeValueArgs, ThemeValuePtr and ThemeValuePtrOutput values.
// You can construct a concrete instance of `ThemeValuePtrInput` via:
//
//	        ThemeValueArgs{...}
//
//	or:
//
//	        nil
type ThemeValuePtrInput interface {
	pulumi.Input

	ToThemeValuePtrOutput() ThemeValuePtrOutput
	ToThemeValuePtrOutputWithContext(context.Context) ThemeValuePtrOutput
}

type themeValuePtrType ThemeValueArgs

func ThemeValuePtr(v *ThemeValueArgs) ThemeValuePtrInput {
	return (*themeValuePtrType)(v)
}

func (*themeValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeValue)(nil)).Elem()
}

func (i *themeValuePtrType) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return i.ToThemeValuePtrOutputWithContext(context.Background())
}

func (i *themeValuePtrType) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuePtrOutput)
}

type ThemeValueOutput struct{ *pulumi.OutputState }

func (ThemeValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValue)(nil)).Elem()
}

func (o ThemeValueOutput) ToThemeValueOutput() ThemeValueOutput {
	return o
}

func (o ThemeValueOutput) ToThemeValueOutputWithContext(ctx context.Context) ThemeValueOutput {
	return o
}

func (o ThemeValueOutput) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return o.ToThemeValuePtrOutputWithContext(context.Background())
}

func (o ThemeValueOutput) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeValue) *ThemeValue {
		return &v
	}).(ThemeValuePtrOutput)
}

// A list of key-value pairs that define the theme's properties.
func (o ThemeValueOutput) Children() ThemeValuesArrayOutput {
	return o.ApplyT(func(v ThemeValue) []ThemeValues { return v.Children }).(ThemeValuesArrayOutput)
}

// The value of a theme property.
func (o ThemeValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThemeValuePtrOutput struct{ *pulumi.OutputState }

func (ThemeValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeValue)(nil)).Elem()
}

func (o ThemeValuePtrOutput) ToThemeValuePtrOutput() ThemeValuePtrOutput {
	return o
}

func (o ThemeValuePtrOutput) ToThemeValuePtrOutputWithContext(ctx context.Context) ThemeValuePtrOutput {
	return o
}

func (o ThemeValuePtrOutput) Elem() ThemeValueOutput {
	return o.ApplyT(func(v *ThemeValue) ThemeValue {
		if v != nil {
			return *v
		}
		var ret ThemeValue
		return ret
	}).(ThemeValueOutput)
}

// A list of key-value pairs that define the theme's properties.
func (o ThemeValuePtrOutput) Children() ThemeValuesArrayOutput {
	return o.ApplyT(func(v *ThemeValue) []ThemeValues {
		if v == nil {
			return nil
		}
		return v.Children
	}).(ThemeValuesArrayOutput)
}

// The value of a theme property.
func (o ThemeValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeValue) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type ThemeValues struct {
	// The name of the property.
	Key *string `pulumi:"key"`
	// The `ThemeValue` property specifies the configuration of a theme's properties.
	Value *ThemeValue `pulumi:"value"`
}

// ThemeValuesInput is an input type that accepts ThemeValuesArgs and ThemeValuesOutput values.
// You can construct a concrete instance of `ThemeValuesInput` via:
//
//	ThemeValuesArgs{...}
type ThemeValuesInput interface {
	pulumi.Input

	ToThemeValuesOutput() ThemeValuesOutput
	ToThemeValuesOutputWithContext(context.Context) ThemeValuesOutput
}

type ThemeValuesArgs struct {
	// The name of the property.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The `ThemeValue` property specifies the configuration of a theme's properties.
	Value ThemeValuePtrInput `pulumi:"value"`
}

func (ThemeValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValues)(nil)).Elem()
}

func (i ThemeValuesArgs) ToThemeValuesOutput() ThemeValuesOutput {
	return i.ToThemeValuesOutputWithContext(context.Background())
}

func (i ThemeValuesArgs) ToThemeValuesOutputWithContext(ctx context.Context) ThemeValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuesOutput)
}

// ThemeValuesArrayInput is an input type that accepts ThemeValuesArray and ThemeValuesArrayOutput values.
// You can construct a concrete instance of `ThemeValuesArrayInput` via:
//
//	ThemeValuesArray{ ThemeValuesArgs{...} }
type ThemeValuesArrayInput interface {
	pulumi.Input

	ToThemeValuesArrayOutput() ThemeValuesArrayOutput
	ToThemeValuesArrayOutputWithContext(context.Context) ThemeValuesArrayOutput
}

type ThemeValuesArray []ThemeValuesInput

func (ThemeValuesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeValues)(nil)).Elem()
}

func (i ThemeValuesArray) ToThemeValuesArrayOutput() ThemeValuesArrayOutput {
	return i.ToThemeValuesArrayOutputWithContext(context.Background())
}

func (i ThemeValuesArray) ToThemeValuesArrayOutputWithContext(ctx context.Context) ThemeValuesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeValuesArrayOutput)
}

type ThemeValuesOutput struct{ *pulumi.OutputState }

func (ThemeValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeValues)(nil)).Elem()
}

func (o ThemeValuesOutput) ToThemeValuesOutput() ThemeValuesOutput {
	return o
}

func (o ThemeValuesOutput) ToThemeValuesOutputWithContext(ctx context.Context) ThemeValuesOutput {
	return o
}

// The name of the property.
func (o ThemeValuesOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeValues) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The `ThemeValue` property specifies the configuration of a theme's properties.
func (o ThemeValuesOutput) Value() ThemeValuePtrOutput {
	return o.ApplyT(func(v ThemeValues) *ThemeValue { return v.Value }).(ThemeValuePtrOutput)
}

type ThemeValuesArrayOutput struct{ *pulumi.OutputState }

func (ThemeValuesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeValues)(nil)).Elem()
}

func (o ThemeValuesArrayOutput) ToThemeValuesArrayOutput() ThemeValuesArrayOutput {
	return o
}

func (o ThemeValuesArrayOutput) ToThemeValuesArrayOutputWithContext(ctx context.Context) ThemeValuesArrayOutput {
	return o
}

func (o ThemeValuesArrayOutput) Index(i pulumi.IntInput) ThemeValuesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeValues {
		return vs[0].([]ThemeValues)[vs[1].(int)]
	}).(ThemeValuesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentActionParametersInput)(nil)).Elem(), ComponentActionParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentActionParametersPtrInput)(nil)).Elem(), ComponentActionParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentBindingPropertiesValueInput)(nil)).Elem(), ComponentBindingPropertiesValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentBindingPropertiesValueMapInput)(nil)).Elem(), ComponentBindingPropertiesValueMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentBindingPropertiesValuePropertiesInput)(nil)).Elem(), ComponentBindingPropertiesValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentBindingPropertiesValuePropertiesPtrInput)(nil)).Elem(), ComponentBindingPropertiesValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentChildInput)(nil)).Elem(), ComponentChildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentChildArrayInput)(nil)).Elem(), ComponentChildArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentConditionPropertyInput)(nil)).Elem(), ComponentConditionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentConditionPropertyPtrInput)(nil)).Elem(), ComponentConditionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentDataConfigurationInput)(nil)).Elem(), ComponentDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentDataConfigurationMapInput)(nil)).Elem(), ComponentDataConfigurationMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentEventInput)(nil)).Elem(), ComponentEventArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentEventMapInput)(nil)).Elem(), ComponentEventMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentFormBindingElementInput)(nil)).Elem(), ComponentFormBindingElementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentFormBindingElementMapInput)(nil)).Elem(), ComponentFormBindingElementMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentMutationActionSetStateParameterInput)(nil)).Elem(), ComponentMutationActionSetStateParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentMutationActionSetStateParameterPtrInput)(nil)).Elem(), ComponentMutationActionSetStateParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPredicateInput)(nil)).Elem(), ComponentPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPredicatePtrInput)(nil)).Elem(), ComponentPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPredicateArrayInput)(nil)).Elem(), ComponentPredicateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertyInput)(nil)).Elem(), ComponentPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertyPtrInput)(nil)).Elem(), ComponentPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertyArrayInput)(nil)).Elem(), ComponentPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertyMapInput)(nil)).Elem(), ComponentPropertyMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertyBindingPropertiesInput)(nil)).Elem(), ComponentPropertyBindingPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentPropertyBindingPropertiesPtrInput)(nil)).Elem(), ComponentPropertyBindingPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentSortPropertyInput)(nil)).Elem(), ComponentSortPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentSortPropertyArrayInput)(nil)).Elem(), ComponentSortPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantInput)(nil)).Elem(), ComponentVariantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentVariantArrayInput)(nil)).Elem(), ComponentVariantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormButtonInput)(nil)).Elem(), FormButtonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormButtonPtrInput)(nil)).Elem(), FormButtonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormCtaInput)(nil)).Elem(), FormCtaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormCtaPtrInput)(nil)).Elem(), FormCtaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormDataTypeConfigInput)(nil)).Elem(), FormDataTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormDataTypeConfigPtrInput)(nil)).Elem(), FormDataTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldConfigInput)(nil)).Elem(), FormFieldConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldConfigMapInput)(nil)).Elem(), FormFieldConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldInputConfigInput)(nil)).Elem(), FormFieldInputConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldInputConfigPtrInput)(nil)).Elem(), FormFieldInputConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPosition0PropertiesInput)(nil)).Elem(), FormFieldPosition0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPosition0PropertiesPtrInput)(nil)).Elem(), FormFieldPosition0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPosition1PropertiesInput)(nil)).Elem(), FormFieldPosition1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPosition1PropertiesPtrInput)(nil)).Elem(), FormFieldPosition1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPosition2PropertiesInput)(nil)).Elem(), FormFieldPosition2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPosition2PropertiesPtrInput)(nil)).Elem(), FormFieldPosition2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldValidationConfigurationInput)(nil)).Elem(), FormFieldValidationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldValidationConfigurationArrayInput)(nil)).Elem(), FormFieldValidationConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFileUploaderFieldConfigInput)(nil)).Elem(), FormFileUploaderFieldConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFileUploaderFieldConfigPtrInput)(nil)).Elem(), FormFileUploaderFieldConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputBindingPropertiesValueInput)(nil)).Elem(), FormInputBindingPropertiesValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputBindingPropertiesValueMapInput)(nil)).Elem(), FormInputBindingPropertiesValueMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputBindingPropertiesValuePropertiesInput)(nil)).Elem(), FormInputBindingPropertiesValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputBindingPropertiesValuePropertiesPtrInput)(nil)).Elem(), FormInputBindingPropertiesValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputValuePropertyInput)(nil)).Elem(), FormInputValuePropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputValuePropertyPtrInput)(nil)).Elem(), FormInputValuePropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputValuePropertyArrayInput)(nil)).Elem(), FormInputValuePropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputValuePropertyBindingPropertiesInput)(nil)).Elem(), FormInputValuePropertyBindingPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormInputValuePropertyBindingPropertiesPtrInput)(nil)).Elem(), FormInputValuePropertyBindingPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormSectionalElementInput)(nil)).Elem(), FormSectionalElementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormSectionalElementMapInput)(nil)).Elem(), FormSectionalElementMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleInput)(nil)).Elem(), FormStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStylePtrInput)(nil)).Elem(), FormStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleConfig0PropertiesInput)(nil)).Elem(), FormStyleConfig0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleConfig0PropertiesPtrInput)(nil)).Elem(), FormStyleConfig0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleConfig1PropertiesInput)(nil)).Elem(), FormStyleConfig1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormStyleConfig1PropertiesPtrInput)(nil)).Elem(), FormStyleConfig1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormValueMappingInput)(nil)).Elem(), FormValueMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormValueMappingArrayInput)(nil)).Elem(), FormValueMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormValueMappingsInput)(nil)).Elem(), FormValueMappingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormValueMappingsPtrInput)(nil)).Elem(), FormValueMappingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValueInput)(nil)).Elem(), ThemeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuePtrInput)(nil)).Elem(), ThemeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuesInput)(nil)).Elem(), ThemeValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeValuesArrayInput)(nil)).Elem(), ThemeValuesArray{})
	pulumi.RegisterOutputType(ComponentActionParametersOutput{})
	pulumi.RegisterOutputType(ComponentActionParametersPtrOutput{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesValueOutput{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesValueMapOutput{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesValuePropertiesOutput{})
	pulumi.RegisterOutputType(ComponentBindingPropertiesValuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentChildOutput{})
	pulumi.RegisterOutputType(ComponentChildArrayOutput{})
	pulumi.RegisterOutputType(ComponentConditionPropertyOutput{})
	pulumi.RegisterOutputType(ComponentConditionPropertyPtrOutput{})
	pulumi.RegisterOutputType(ComponentDataConfigurationOutput{})
	pulumi.RegisterOutputType(ComponentDataConfigurationMapOutput{})
	pulumi.RegisterOutputType(ComponentEventOutput{})
	pulumi.RegisterOutputType(ComponentEventMapOutput{})
	pulumi.RegisterOutputType(ComponentFormBindingElementOutput{})
	pulumi.RegisterOutputType(ComponentFormBindingElementMapOutput{})
	pulumi.RegisterOutputType(ComponentMutationActionSetStateParameterOutput{})
	pulumi.RegisterOutputType(ComponentMutationActionSetStateParameterPtrOutput{})
	pulumi.RegisterOutputType(ComponentPredicateOutput{})
	pulumi.RegisterOutputType(ComponentPredicatePtrOutput{})
	pulumi.RegisterOutputType(ComponentPredicateArrayOutput{})
	pulumi.RegisterOutputType(ComponentPropertyOutput{})
	pulumi.RegisterOutputType(ComponentPropertyPtrOutput{})
	pulumi.RegisterOutputType(ComponentPropertyArrayOutput{})
	pulumi.RegisterOutputType(ComponentPropertyMapOutput{})
	pulumi.RegisterOutputType(ComponentPropertyBindingPropertiesOutput{})
	pulumi.RegisterOutputType(ComponentPropertyBindingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComponentSortPropertyOutput{})
	pulumi.RegisterOutputType(ComponentSortPropertyArrayOutput{})
	pulumi.RegisterOutputType(ComponentVariantOutput{})
	pulumi.RegisterOutputType(ComponentVariantArrayOutput{})
	pulumi.RegisterOutputType(FormButtonOutput{})
	pulumi.RegisterOutputType(FormButtonPtrOutput{})
	pulumi.RegisterOutputType(FormCtaOutput{})
	pulumi.RegisterOutputType(FormCtaPtrOutput{})
	pulumi.RegisterOutputType(FormDataTypeConfigOutput{})
	pulumi.RegisterOutputType(FormDataTypeConfigPtrOutput{})
	pulumi.RegisterOutputType(FormFieldConfigOutput{})
	pulumi.RegisterOutputType(FormFieldConfigMapOutput{})
	pulumi.RegisterOutputType(FormFieldInputConfigOutput{})
	pulumi.RegisterOutputType(FormFieldInputConfigPtrOutput{})
	pulumi.RegisterOutputType(FormFieldPosition0PropertiesOutput{})
	pulumi.RegisterOutputType(FormFieldPosition0PropertiesPtrOutput{})
	pulumi.RegisterOutputType(FormFieldPosition1PropertiesOutput{})
	pulumi.RegisterOutputType(FormFieldPosition1PropertiesPtrOutput{})
	pulumi.RegisterOutputType(FormFieldPosition2PropertiesOutput{})
	pulumi.RegisterOutputType(FormFieldPosition2PropertiesPtrOutput{})
	pulumi.RegisterOutputType(FormFieldValidationConfigurationOutput{})
	pulumi.RegisterOutputType(FormFieldValidationConfigurationArrayOutput{})
	pulumi.RegisterOutputType(FormFileUploaderFieldConfigOutput{})
	pulumi.RegisterOutputType(FormFileUploaderFieldConfigPtrOutput{})
	pulumi.RegisterOutputType(FormInputBindingPropertiesValueOutput{})
	pulumi.RegisterOutputType(FormInputBindingPropertiesValueMapOutput{})
	pulumi.RegisterOutputType(FormInputBindingPropertiesValuePropertiesOutput{})
	pulumi.RegisterOutputType(FormInputBindingPropertiesValuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(FormInputValuePropertyOutput{})
	pulumi.RegisterOutputType(FormInputValuePropertyPtrOutput{})
	pulumi.RegisterOutputType(FormInputValuePropertyArrayOutput{})
	pulumi.RegisterOutputType(FormInputValuePropertyBindingPropertiesOutput{})
	pulumi.RegisterOutputType(FormInputValuePropertyBindingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FormSectionalElementOutput{})
	pulumi.RegisterOutputType(FormSectionalElementMapOutput{})
	pulumi.RegisterOutputType(FormStyleOutput{})
	pulumi.RegisterOutputType(FormStylePtrOutput{})
	pulumi.RegisterOutputType(FormStyleConfig0PropertiesOutput{})
	pulumi.RegisterOutputType(FormStyleConfig0PropertiesPtrOutput{})
	pulumi.RegisterOutputType(FormStyleConfig1PropertiesOutput{})
	pulumi.RegisterOutputType(FormStyleConfig1PropertiesPtrOutput{})
	pulumi.RegisterOutputType(FormValueMappingOutput{})
	pulumi.RegisterOutputType(FormValueMappingArrayOutput{})
	pulumi.RegisterOutputType(FormValueMappingsOutput{})
	pulumi.RegisterOutputType(FormValueMappingsPtrOutput{})
	pulumi.RegisterOutputType(ThemeValueOutput{})
	pulumi.RegisterOutputType(ThemeValuePtrOutput{})
	pulumi.RegisterOutputType(ThemeValuesOutput{})
	pulumi.RegisterOutputType(ThemeValuesArrayOutput{})
}
