// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Events::Rule
func LookupRule(ctx *pulumi.Context, args *LookupRuleArgs, opts ...pulumi.InvokeOption) (*LookupRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRuleResult
	err := ctx.Invoke("aws-native:events:getRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRuleArgs struct {
	// The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
	Arn string `pulumi:"arn"`
}

type LookupRuleResult struct {
	// The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
	Arn *string `pulumi:"arn"`
	// The description of the rule.
	Description *string `pulumi:"description"`
	// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
	EventBusName *string `pulumi:"eventBusName"`
	// The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
	EventPattern *string `pulumi:"eventPattern"`
	// The Amazon Resource Name (ARN) of the role that is used for target invocation.
	RoleArn *string `pulumi:"roleArn"`
	// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
	ScheduleExpression *string `pulumi:"scheduleExpression"`
	// The state of the rule.
	State *RuleStateEnum `pulumi:"state"`
	// Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
	// Targets are the resources that are invoked when a rule is triggered.
	Targets []RuleTarget `pulumi:"targets"`
}

func LookupRuleOutput(ctx *pulumi.Context, args LookupRuleOutputArgs, opts ...pulumi.InvokeOption) LookupRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRuleResult, error) {
			args := v.(LookupRuleArgs)
			r, err := LookupRule(ctx, &args, opts...)
			var s LookupRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRuleResultOutput)
}

type LookupRuleOutputArgs struct {
	// The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleArgs)(nil)).Elem()
}

type LookupRuleResultOutput struct{ *pulumi.OutputState }

func (LookupRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleResult)(nil)).Elem()
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutput() LookupRuleResultOutput {
	return o
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutputWithContext(ctx context.Context) LookupRuleResultOutput {
	return o
}

// The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
func (o LookupRuleResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The description of the rule.
func (o LookupRuleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
func (o LookupRuleResultOutput) EventBusName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.EventBusName }).(pulumi.StringPtrOutput)
}

// The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
func (o LookupRuleResultOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the role that is used for target invocation.
func (o LookupRuleResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
func (o LookupRuleResultOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

// The state of the rule.
func (o LookupRuleResultOutput) State() RuleStateEnumPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *RuleStateEnum { return v.State }).(RuleStateEnumPtrOutput)
}

// Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
// Targets are the resources that are invoked when a rule is triggered.
func (o LookupRuleResultOutput) Targets() RuleTargetArrayOutput {
	return o.ApplyT(func(v LookupRuleResult) []RuleTarget { return v.Targets }).(RuleTargetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRuleResultOutput{})
}
