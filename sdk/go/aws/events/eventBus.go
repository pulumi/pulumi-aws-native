// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::Events::EventBus
type EventBus struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the event bus.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Dead Letter Queue for the event bus.
	DeadLetterConfig DeadLetterConfigPropertiesPtrOutput `pulumi:"deadLetterConfig"`
	// The description of the event bus.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.
	EventSourceName pulumi.StringPtrOutput `pulumi:"eventSourceName"`
	// Kms Key Identifier used to encrypt events at rest in the event bus.
	KmsKeyIdentifier pulumi.StringPtrOutput `pulumi:"kmsKeyIdentifier"`
	// The logging configuration settings for vended logs.
	LogConfig LogConfigPropertiesPtrOutput `pulumi:"logConfig"`
	// The name of the event bus.
	Name pulumi.StringOutput `pulumi:"name"`
	// A JSON string that describes the permission policy statement for the event bus.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBus` for more information about the expected schema for this property.
	Policy pulumi.AnyOutput `pulumi:"policy"`
	// Any tags assigned to the event bus.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewEventBus registers a new resource with the given unique name, arguments, and options.
func NewEventBus(ctx *pulumi.Context,
	name string, args *EventBusArgs, opts ...pulumi.ResourceOption) (*EventBus, error) {
	if args == nil {
		args = &EventBusArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventBus
	err := ctx.RegisterResource("aws-native:events:EventBus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventBus gets an existing EventBus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventBus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventBusState, opts ...pulumi.ResourceOption) (*EventBus, error) {
	var resource EventBus
	err := ctx.ReadResource("aws-native:events:EventBus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventBus resources.
type eventBusState struct {
}

type EventBusState struct {
}

func (EventBusState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusState)(nil)).Elem()
}

type eventBusArgs struct {
	// Dead Letter Queue for the event bus.
	DeadLetterConfig *DeadLetterConfigProperties `pulumi:"deadLetterConfig"`
	// The description of the event bus.
	Description *string `pulumi:"description"`
	// If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.
	EventSourceName *string `pulumi:"eventSourceName"`
	// Kms Key Identifier used to encrypt events at rest in the event bus.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
	// The logging configuration settings for vended logs.
	LogConfig *LogConfigProperties `pulumi:"logConfig"`
	// The name of the event bus.
	Name *string `pulumi:"name"`
	// A JSON string that describes the permission policy statement for the event bus.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBus` for more information about the expected schema for this property.
	Policy interface{} `pulumi:"policy"`
	// Any tags assigned to the event bus.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a EventBus resource.
type EventBusArgs struct {
	// Dead Letter Queue for the event bus.
	DeadLetterConfig DeadLetterConfigPropertiesPtrInput
	// The description of the event bus.
	Description pulumi.StringPtrInput
	// If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.
	EventSourceName pulumi.StringPtrInput
	// Kms Key Identifier used to encrypt events at rest in the event bus.
	KmsKeyIdentifier pulumi.StringPtrInput
	// The logging configuration settings for vended logs.
	LogConfig LogConfigPropertiesPtrInput
	// The name of the event bus.
	Name pulumi.StringPtrInput
	// A JSON string that describes the permission policy statement for the event bus.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBus` for more information about the expected schema for this property.
	Policy pulumi.Input
	// Any tags assigned to the event bus.
	Tags aws.TagArrayInput
}

func (EventBusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusArgs)(nil)).Elem()
}

type EventBusInput interface {
	pulumi.Input

	ToEventBusOutput() EventBusOutput
	ToEventBusOutputWithContext(ctx context.Context) EventBusOutput
}

func (*EventBus) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBus)(nil)).Elem()
}

func (i *EventBus) ToEventBusOutput() EventBusOutput {
	return i.ToEventBusOutputWithContext(context.Background())
}

func (i *EventBus) ToEventBusOutputWithContext(ctx context.Context) EventBusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusOutput)
}

type EventBusOutput struct{ *pulumi.OutputState }

func (EventBusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBus)(nil)).Elem()
}

func (o EventBusOutput) ToEventBusOutput() EventBusOutput {
	return o
}

func (o EventBusOutput) ToEventBusOutputWithContext(ctx context.Context) EventBusOutput {
	return o
}

// The Amazon Resource Name (ARN) for the event bus.
func (o EventBusOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventBus) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Dead Letter Queue for the event bus.
func (o EventBusOutput) DeadLetterConfig() DeadLetterConfigPropertiesPtrOutput {
	return o.ApplyT(func(v *EventBus) DeadLetterConfigPropertiesPtrOutput { return v.DeadLetterConfig }).(DeadLetterConfigPropertiesPtrOutput)
}

// The description of the event bus.
func (o EventBusOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventBus) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.
func (o EventBusOutput) EventSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventBus) pulumi.StringPtrOutput { return v.EventSourceName }).(pulumi.StringPtrOutput)
}

// Kms Key Identifier used to encrypt events at rest in the event bus.
func (o EventBusOutput) KmsKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventBus) pulumi.StringPtrOutput { return v.KmsKeyIdentifier }).(pulumi.StringPtrOutput)
}

// The logging configuration settings for vended logs.
func (o EventBusOutput) LogConfig() LogConfigPropertiesPtrOutput {
	return o.ApplyT(func(v *EventBus) LogConfigPropertiesPtrOutput { return v.LogConfig }).(LogConfigPropertiesPtrOutput)
}

// The name of the event bus.
func (o EventBusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventBus) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A JSON string that describes the permission policy statement for the event bus.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBus` for more information about the expected schema for this property.
func (o EventBusOutput) Policy() pulumi.AnyOutput {
	return o.ApplyT(func(v *EventBus) pulumi.AnyOutput { return v.Policy }).(pulumi.AnyOutput)
}

// Any tags assigned to the event bus.
func (o EventBusOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *EventBus) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusInput)(nil)).Elem(), &EventBus{})
	pulumi.RegisterOutputType(EventBusOutput{})
}
