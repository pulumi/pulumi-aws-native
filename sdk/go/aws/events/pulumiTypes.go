// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ConnectionApiKeyAuthParameters struct {
	// The name of the API key to use for authorization.
	ApiKeyName string `pulumi:"apiKeyName"`
	// The value for the API key to use for authorization.
	ApiKeyValue string `pulumi:"apiKeyValue"`
}

// ConnectionApiKeyAuthParametersInput is an input type that accepts ConnectionApiKeyAuthParametersArgs and ConnectionApiKeyAuthParametersOutput values.
// You can construct a concrete instance of `ConnectionApiKeyAuthParametersInput` via:
//
//	ConnectionApiKeyAuthParametersArgs{...}
type ConnectionApiKeyAuthParametersInput interface {
	pulumi.Input

	ToConnectionApiKeyAuthParametersOutput() ConnectionApiKeyAuthParametersOutput
	ToConnectionApiKeyAuthParametersOutputWithContext(context.Context) ConnectionApiKeyAuthParametersOutput
}

type ConnectionApiKeyAuthParametersArgs struct {
	// The name of the API key to use for authorization.
	ApiKeyName pulumi.StringInput `pulumi:"apiKeyName"`
	// The value for the API key to use for authorization.
	ApiKeyValue pulumi.StringInput `pulumi:"apiKeyValue"`
}

func (ConnectionApiKeyAuthParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionApiKeyAuthParameters)(nil)).Elem()
}

func (i ConnectionApiKeyAuthParametersArgs) ToConnectionApiKeyAuthParametersOutput() ConnectionApiKeyAuthParametersOutput {
	return i.ToConnectionApiKeyAuthParametersOutputWithContext(context.Background())
}

func (i ConnectionApiKeyAuthParametersArgs) ToConnectionApiKeyAuthParametersOutputWithContext(ctx context.Context) ConnectionApiKeyAuthParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionApiKeyAuthParametersOutput)
}

func (i ConnectionApiKeyAuthParametersArgs) ToConnectionApiKeyAuthParametersPtrOutput() ConnectionApiKeyAuthParametersPtrOutput {
	return i.ToConnectionApiKeyAuthParametersPtrOutputWithContext(context.Background())
}

func (i ConnectionApiKeyAuthParametersArgs) ToConnectionApiKeyAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionApiKeyAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionApiKeyAuthParametersOutput).ToConnectionApiKeyAuthParametersPtrOutputWithContext(ctx)
}

// ConnectionApiKeyAuthParametersPtrInput is an input type that accepts ConnectionApiKeyAuthParametersArgs, ConnectionApiKeyAuthParametersPtr and ConnectionApiKeyAuthParametersPtrOutput values.
// You can construct a concrete instance of `ConnectionApiKeyAuthParametersPtrInput` via:
//
//	        ConnectionApiKeyAuthParametersArgs{...}
//
//	or:
//
//	        nil
type ConnectionApiKeyAuthParametersPtrInput interface {
	pulumi.Input

	ToConnectionApiKeyAuthParametersPtrOutput() ConnectionApiKeyAuthParametersPtrOutput
	ToConnectionApiKeyAuthParametersPtrOutputWithContext(context.Context) ConnectionApiKeyAuthParametersPtrOutput
}

type connectionApiKeyAuthParametersPtrType ConnectionApiKeyAuthParametersArgs

func ConnectionApiKeyAuthParametersPtr(v *ConnectionApiKeyAuthParametersArgs) ConnectionApiKeyAuthParametersPtrInput {
	return (*connectionApiKeyAuthParametersPtrType)(v)
}

func (*connectionApiKeyAuthParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionApiKeyAuthParameters)(nil)).Elem()
}

func (i *connectionApiKeyAuthParametersPtrType) ToConnectionApiKeyAuthParametersPtrOutput() ConnectionApiKeyAuthParametersPtrOutput {
	return i.ToConnectionApiKeyAuthParametersPtrOutputWithContext(context.Background())
}

func (i *connectionApiKeyAuthParametersPtrType) ToConnectionApiKeyAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionApiKeyAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionApiKeyAuthParametersPtrOutput)
}

type ConnectionApiKeyAuthParametersOutput struct{ *pulumi.OutputState }

func (ConnectionApiKeyAuthParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionApiKeyAuthParameters)(nil)).Elem()
}

func (o ConnectionApiKeyAuthParametersOutput) ToConnectionApiKeyAuthParametersOutput() ConnectionApiKeyAuthParametersOutput {
	return o
}

func (o ConnectionApiKeyAuthParametersOutput) ToConnectionApiKeyAuthParametersOutputWithContext(ctx context.Context) ConnectionApiKeyAuthParametersOutput {
	return o
}

func (o ConnectionApiKeyAuthParametersOutput) ToConnectionApiKeyAuthParametersPtrOutput() ConnectionApiKeyAuthParametersPtrOutput {
	return o.ToConnectionApiKeyAuthParametersPtrOutputWithContext(context.Background())
}

func (o ConnectionApiKeyAuthParametersOutput) ToConnectionApiKeyAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionApiKeyAuthParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionApiKeyAuthParameters) *ConnectionApiKeyAuthParameters {
		return &v
	}).(ConnectionApiKeyAuthParametersPtrOutput)
}

// The name of the API key to use for authorization.
func (o ConnectionApiKeyAuthParametersOutput) ApiKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionApiKeyAuthParameters) string { return v.ApiKeyName }).(pulumi.StringOutput)
}

// The value for the API key to use for authorization.
func (o ConnectionApiKeyAuthParametersOutput) ApiKeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionApiKeyAuthParameters) string { return v.ApiKeyValue }).(pulumi.StringOutput)
}

type ConnectionApiKeyAuthParametersPtrOutput struct{ *pulumi.OutputState }

func (ConnectionApiKeyAuthParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionApiKeyAuthParameters)(nil)).Elem()
}

func (o ConnectionApiKeyAuthParametersPtrOutput) ToConnectionApiKeyAuthParametersPtrOutput() ConnectionApiKeyAuthParametersPtrOutput {
	return o
}

func (o ConnectionApiKeyAuthParametersPtrOutput) ToConnectionApiKeyAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionApiKeyAuthParametersPtrOutput {
	return o
}

func (o ConnectionApiKeyAuthParametersPtrOutput) Elem() ConnectionApiKeyAuthParametersOutput {
	return o.ApplyT(func(v *ConnectionApiKeyAuthParameters) ConnectionApiKeyAuthParameters {
		if v != nil {
			return *v
		}
		var ret ConnectionApiKeyAuthParameters
		return ret
	}).(ConnectionApiKeyAuthParametersOutput)
}

// The name of the API key to use for authorization.
func (o ConnectionApiKeyAuthParametersPtrOutput) ApiKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionApiKeyAuthParameters) *string {
		if v == nil {
			return nil
		}
		return &v.ApiKeyName
	}).(pulumi.StringPtrOutput)
}

// The value for the API key to use for authorization.
func (o ConnectionApiKeyAuthParametersPtrOutput) ApiKeyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionApiKeyAuthParameters) *string {
		if v == nil {
			return nil
		}
		return &v.ApiKeyValue
	}).(pulumi.StringPtrOutput)
}

type ConnectionAuthParameters struct {
	// The API Key parameters to use for authorization.
	ApiKeyAuthParameters *ConnectionApiKeyAuthParameters `pulumi:"apiKeyAuthParameters"`
	// The authorization parameters for Basic authorization.
	BasicAuthParameters *ConnectionBasicAuthParameters `pulumi:"basicAuthParameters"`
	// Additional parameters for the connection that are passed through with every invocation to the HTTP endpoint.
	InvocationHttpParameters *ConnectionHttpParameters `pulumi:"invocationHttpParameters"`
	// The OAuth parameters to use for authorization.
	OAuthParameters *ConnectionOAuthParameters `pulumi:"oAuthParameters"`
}

// ConnectionAuthParametersInput is an input type that accepts ConnectionAuthParametersArgs and ConnectionAuthParametersOutput values.
// You can construct a concrete instance of `ConnectionAuthParametersInput` via:
//
//	ConnectionAuthParametersArgs{...}
type ConnectionAuthParametersInput interface {
	pulumi.Input

	ToConnectionAuthParametersOutput() ConnectionAuthParametersOutput
	ToConnectionAuthParametersOutputWithContext(context.Context) ConnectionAuthParametersOutput
}

type ConnectionAuthParametersArgs struct {
	// The API Key parameters to use for authorization.
	ApiKeyAuthParameters ConnectionApiKeyAuthParametersPtrInput `pulumi:"apiKeyAuthParameters"`
	// The authorization parameters for Basic authorization.
	BasicAuthParameters ConnectionBasicAuthParametersPtrInput `pulumi:"basicAuthParameters"`
	// Additional parameters for the connection that are passed through with every invocation to the HTTP endpoint.
	InvocationHttpParameters ConnectionHttpParametersPtrInput `pulumi:"invocationHttpParameters"`
	// The OAuth parameters to use for authorization.
	OAuthParameters ConnectionOAuthParametersPtrInput `pulumi:"oAuthParameters"`
}

func (ConnectionAuthParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAuthParameters)(nil)).Elem()
}

func (i ConnectionAuthParametersArgs) ToConnectionAuthParametersOutput() ConnectionAuthParametersOutput {
	return i.ToConnectionAuthParametersOutputWithContext(context.Background())
}

func (i ConnectionAuthParametersArgs) ToConnectionAuthParametersOutputWithContext(ctx context.Context) ConnectionAuthParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionAuthParametersOutput)
}

type ConnectionAuthParametersOutput struct{ *pulumi.OutputState }

func (ConnectionAuthParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAuthParameters)(nil)).Elem()
}

func (o ConnectionAuthParametersOutput) ToConnectionAuthParametersOutput() ConnectionAuthParametersOutput {
	return o
}

func (o ConnectionAuthParametersOutput) ToConnectionAuthParametersOutputWithContext(ctx context.Context) ConnectionAuthParametersOutput {
	return o
}

// The API Key parameters to use for authorization.
func (o ConnectionAuthParametersOutput) ApiKeyAuthParameters() ConnectionApiKeyAuthParametersPtrOutput {
	return o.ApplyT(func(v ConnectionAuthParameters) *ConnectionApiKeyAuthParameters { return v.ApiKeyAuthParameters }).(ConnectionApiKeyAuthParametersPtrOutput)
}

// The authorization parameters for Basic authorization.
func (o ConnectionAuthParametersOutput) BasicAuthParameters() ConnectionBasicAuthParametersPtrOutput {
	return o.ApplyT(func(v ConnectionAuthParameters) *ConnectionBasicAuthParameters { return v.BasicAuthParameters }).(ConnectionBasicAuthParametersPtrOutput)
}

// Additional parameters for the connection that are passed through with every invocation to the HTTP endpoint.
func (o ConnectionAuthParametersOutput) InvocationHttpParameters() ConnectionHttpParametersPtrOutput {
	return o.ApplyT(func(v ConnectionAuthParameters) *ConnectionHttpParameters { return v.InvocationHttpParameters }).(ConnectionHttpParametersPtrOutput)
}

// The OAuth parameters to use for authorization.
func (o ConnectionAuthParametersOutput) OAuthParameters() ConnectionOAuthParametersPtrOutput {
	return o.ApplyT(func(v ConnectionAuthParameters) *ConnectionOAuthParameters { return v.OAuthParameters }).(ConnectionOAuthParametersPtrOutput)
}

type ConnectionBasicAuthParameters struct {
	// The password associated with the user name to use for Basic authorization.
	Password string `pulumi:"password"`
	// The user name to use for Basic authorization.
	Username string `pulumi:"username"`
}

// ConnectionBasicAuthParametersInput is an input type that accepts ConnectionBasicAuthParametersArgs and ConnectionBasicAuthParametersOutput values.
// You can construct a concrete instance of `ConnectionBasicAuthParametersInput` via:
//
//	ConnectionBasicAuthParametersArgs{...}
type ConnectionBasicAuthParametersInput interface {
	pulumi.Input

	ToConnectionBasicAuthParametersOutput() ConnectionBasicAuthParametersOutput
	ToConnectionBasicAuthParametersOutputWithContext(context.Context) ConnectionBasicAuthParametersOutput
}

type ConnectionBasicAuthParametersArgs struct {
	// The password associated with the user name to use for Basic authorization.
	Password pulumi.StringInput `pulumi:"password"`
	// The user name to use for Basic authorization.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectionBasicAuthParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBasicAuthParameters)(nil)).Elem()
}

func (i ConnectionBasicAuthParametersArgs) ToConnectionBasicAuthParametersOutput() ConnectionBasicAuthParametersOutput {
	return i.ToConnectionBasicAuthParametersOutputWithContext(context.Background())
}

func (i ConnectionBasicAuthParametersArgs) ToConnectionBasicAuthParametersOutputWithContext(ctx context.Context) ConnectionBasicAuthParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBasicAuthParametersOutput)
}

func (i ConnectionBasicAuthParametersArgs) ToConnectionBasicAuthParametersPtrOutput() ConnectionBasicAuthParametersPtrOutput {
	return i.ToConnectionBasicAuthParametersPtrOutputWithContext(context.Background())
}

func (i ConnectionBasicAuthParametersArgs) ToConnectionBasicAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionBasicAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBasicAuthParametersOutput).ToConnectionBasicAuthParametersPtrOutputWithContext(ctx)
}

// ConnectionBasicAuthParametersPtrInput is an input type that accepts ConnectionBasicAuthParametersArgs, ConnectionBasicAuthParametersPtr and ConnectionBasicAuthParametersPtrOutput values.
// You can construct a concrete instance of `ConnectionBasicAuthParametersPtrInput` via:
//
//	        ConnectionBasicAuthParametersArgs{...}
//
//	or:
//
//	        nil
type ConnectionBasicAuthParametersPtrInput interface {
	pulumi.Input

	ToConnectionBasicAuthParametersPtrOutput() ConnectionBasicAuthParametersPtrOutput
	ToConnectionBasicAuthParametersPtrOutputWithContext(context.Context) ConnectionBasicAuthParametersPtrOutput
}

type connectionBasicAuthParametersPtrType ConnectionBasicAuthParametersArgs

func ConnectionBasicAuthParametersPtr(v *ConnectionBasicAuthParametersArgs) ConnectionBasicAuthParametersPtrInput {
	return (*connectionBasicAuthParametersPtrType)(v)
}

func (*connectionBasicAuthParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBasicAuthParameters)(nil)).Elem()
}

func (i *connectionBasicAuthParametersPtrType) ToConnectionBasicAuthParametersPtrOutput() ConnectionBasicAuthParametersPtrOutput {
	return i.ToConnectionBasicAuthParametersPtrOutputWithContext(context.Background())
}

func (i *connectionBasicAuthParametersPtrType) ToConnectionBasicAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionBasicAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionBasicAuthParametersPtrOutput)
}

type ConnectionBasicAuthParametersOutput struct{ *pulumi.OutputState }

func (ConnectionBasicAuthParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionBasicAuthParameters)(nil)).Elem()
}

func (o ConnectionBasicAuthParametersOutput) ToConnectionBasicAuthParametersOutput() ConnectionBasicAuthParametersOutput {
	return o
}

func (o ConnectionBasicAuthParametersOutput) ToConnectionBasicAuthParametersOutputWithContext(ctx context.Context) ConnectionBasicAuthParametersOutput {
	return o
}

func (o ConnectionBasicAuthParametersOutput) ToConnectionBasicAuthParametersPtrOutput() ConnectionBasicAuthParametersPtrOutput {
	return o.ToConnectionBasicAuthParametersPtrOutputWithContext(context.Background())
}

func (o ConnectionBasicAuthParametersOutput) ToConnectionBasicAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionBasicAuthParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionBasicAuthParameters) *ConnectionBasicAuthParameters {
		return &v
	}).(ConnectionBasicAuthParametersPtrOutput)
}

// The password associated with the user name to use for Basic authorization.
func (o ConnectionBasicAuthParametersOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBasicAuthParameters) string { return v.Password }).(pulumi.StringOutput)
}

// The user name to use for Basic authorization.
func (o ConnectionBasicAuthParametersOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionBasicAuthParameters) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectionBasicAuthParametersPtrOutput struct{ *pulumi.OutputState }

func (ConnectionBasicAuthParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionBasicAuthParameters)(nil)).Elem()
}

func (o ConnectionBasicAuthParametersPtrOutput) ToConnectionBasicAuthParametersPtrOutput() ConnectionBasicAuthParametersPtrOutput {
	return o
}

func (o ConnectionBasicAuthParametersPtrOutput) ToConnectionBasicAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionBasicAuthParametersPtrOutput {
	return o
}

func (o ConnectionBasicAuthParametersPtrOutput) Elem() ConnectionBasicAuthParametersOutput {
	return o.ApplyT(func(v *ConnectionBasicAuthParameters) ConnectionBasicAuthParameters {
		if v != nil {
			return *v
		}
		var ret ConnectionBasicAuthParameters
		return ret
	}).(ConnectionBasicAuthParametersOutput)
}

// The password associated with the user name to use for Basic authorization.
func (o ConnectionBasicAuthParametersPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBasicAuthParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The user name to use for Basic authorization.
func (o ConnectionBasicAuthParametersPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionBasicAuthParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ConnectionClientParameters struct {
	// The client ID to use for OAuth authorization.
	ClientId string `pulumi:"clientId"`
	// The client secret assciated with the client ID to use for OAuth authorization.
	ClientSecret string `pulumi:"clientSecret"`
}

// ConnectionClientParametersInput is an input type that accepts ConnectionClientParametersArgs and ConnectionClientParametersOutput values.
// You can construct a concrete instance of `ConnectionClientParametersInput` via:
//
//	ConnectionClientParametersArgs{...}
type ConnectionClientParametersInput interface {
	pulumi.Input

	ToConnectionClientParametersOutput() ConnectionClientParametersOutput
	ToConnectionClientParametersOutputWithContext(context.Context) ConnectionClientParametersOutput
}

type ConnectionClientParametersArgs struct {
	// The client ID to use for OAuth authorization.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The client secret assciated with the client ID to use for OAuth authorization.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
}

func (ConnectionClientParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionClientParameters)(nil)).Elem()
}

func (i ConnectionClientParametersArgs) ToConnectionClientParametersOutput() ConnectionClientParametersOutput {
	return i.ToConnectionClientParametersOutputWithContext(context.Background())
}

func (i ConnectionClientParametersArgs) ToConnectionClientParametersOutputWithContext(ctx context.Context) ConnectionClientParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClientParametersOutput)
}

func (i ConnectionClientParametersArgs) ToConnectionClientParametersPtrOutput() ConnectionClientParametersPtrOutput {
	return i.ToConnectionClientParametersPtrOutputWithContext(context.Background())
}

func (i ConnectionClientParametersArgs) ToConnectionClientParametersPtrOutputWithContext(ctx context.Context) ConnectionClientParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClientParametersOutput).ToConnectionClientParametersPtrOutputWithContext(ctx)
}

// ConnectionClientParametersPtrInput is an input type that accepts ConnectionClientParametersArgs, ConnectionClientParametersPtr and ConnectionClientParametersPtrOutput values.
// You can construct a concrete instance of `ConnectionClientParametersPtrInput` via:
//
//	        ConnectionClientParametersArgs{...}
//
//	or:
//
//	        nil
type ConnectionClientParametersPtrInput interface {
	pulumi.Input

	ToConnectionClientParametersPtrOutput() ConnectionClientParametersPtrOutput
	ToConnectionClientParametersPtrOutputWithContext(context.Context) ConnectionClientParametersPtrOutput
}

type connectionClientParametersPtrType ConnectionClientParametersArgs

func ConnectionClientParametersPtr(v *ConnectionClientParametersArgs) ConnectionClientParametersPtrInput {
	return (*connectionClientParametersPtrType)(v)
}

func (*connectionClientParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionClientParameters)(nil)).Elem()
}

func (i *connectionClientParametersPtrType) ToConnectionClientParametersPtrOutput() ConnectionClientParametersPtrOutput {
	return i.ToConnectionClientParametersPtrOutputWithContext(context.Background())
}

func (i *connectionClientParametersPtrType) ToConnectionClientParametersPtrOutputWithContext(ctx context.Context) ConnectionClientParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClientParametersPtrOutput)
}

type ConnectionClientParametersOutput struct{ *pulumi.OutputState }

func (ConnectionClientParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionClientParameters)(nil)).Elem()
}

func (o ConnectionClientParametersOutput) ToConnectionClientParametersOutput() ConnectionClientParametersOutput {
	return o
}

func (o ConnectionClientParametersOutput) ToConnectionClientParametersOutputWithContext(ctx context.Context) ConnectionClientParametersOutput {
	return o
}

func (o ConnectionClientParametersOutput) ToConnectionClientParametersPtrOutput() ConnectionClientParametersPtrOutput {
	return o.ToConnectionClientParametersPtrOutputWithContext(context.Background())
}

func (o ConnectionClientParametersOutput) ToConnectionClientParametersPtrOutputWithContext(ctx context.Context) ConnectionClientParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionClientParameters) *ConnectionClientParameters {
		return &v
	}).(ConnectionClientParametersPtrOutput)
}

// The client ID to use for OAuth authorization.
func (o ConnectionClientParametersOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionClientParameters) string { return v.ClientId }).(pulumi.StringOutput)
}

// The client secret assciated with the client ID to use for OAuth authorization.
func (o ConnectionClientParametersOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionClientParameters) string { return v.ClientSecret }).(pulumi.StringOutput)
}

type ConnectionClientParametersPtrOutput struct{ *pulumi.OutputState }

func (ConnectionClientParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionClientParameters)(nil)).Elem()
}

func (o ConnectionClientParametersPtrOutput) ToConnectionClientParametersPtrOutput() ConnectionClientParametersPtrOutput {
	return o
}

func (o ConnectionClientParametersPtrOutput) ToConnectionClientParametersPtrOutputWithContext(ctx context.Context) ConnectionClientParametersPtrOutput {
	return o
}

func (o ConnectionClientParametersPtrOutput) Elem() ConnectionClientParametersOutput {
	return o.ApplyT(func(v *ConnectionClientParameters) ConnectionClientParameters {
		if v != nil {
			return *v
		}
		var ret ConnectionClientParameters
		return ret
	}).(ConnectionClientParametersOutput)
}

// The client ID to use for OAuth authorization.
func (o ConnectionClientParametersPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionClientParameters) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret assciated with the client ID to use for OAuth authorization.
func (o ConnectionClientParametersPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionClientParameters) *string {
		if v == nil {
			return nil
		}
		return &v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

type ConnectionHttpParameters struct {
	// Contains additional body string parameters for the connection.
	BodyParameters []ConnectionParameter `pulumi:"bodyParameters"`
	// Contains additional header parameters for the connection.
	HeaderParameters []ConnectionParameter `pulumi:"headerParameters"`
	// Contains additional query string parameters for the connection.
	QueryStringParameters []ConnectionParameter `pulumi:"queryStringParameters"`
}

// ConnectionHttpParametersInput is an input type that accepts ConnectionHttpParametersArgs and ConnectionHttpParametersOutput values.
// You can construct a concrete instance of `ConnectionHttpParametersInput` via:
//
//	ConnectionHttpParametersArgs{...}
type ConnectionHttpParametersInput interface {
	pulumi.Input

	ToConnectionHttpParametersOutput() ConnectionHttpParametersOutput
	ToConnectionHttpParametersOutputWithContext(context.Context) ConnectionHttpParametersOutput
}

type ConnectionHttpParametersArgs struct {
	// Contains additional body string parameters for the connection.
	BodyParameters ConnectionParameterArrayInput `pulumi:"bodyParameters"`
	// Contains additional header parameters for the connection.
	HeaderParameters ConnectionParameterArrayInput `pulumi:"headerParameters"`
	// Contains additional query string parameters for the connection.
	QueryStringParameters ConnectionParameterArrayInput `pulumi:"queryStringParameters"`
}

func (ConnectionHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionHttpParameters)(nil)).Elem()
}

func (i ConnectionHttpParametersArgs) ToConnectionHttpParametersOutput() ConnectionHttpParametersOutput {
	return i.ToConnectionHttpParametersOutputWithContext(context.Background())
}

func (i ConnectionHttpParametersArgs) ToConnectionHttpParametersOutputWithContext(ctx context.Context) ConnectionHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionHttpParametersOutput)
}

func (i ConnectionHttpParametersArgs) ToConnectionHttpParametersPtrOutput() ConnectionHttpParametersPtrOutput {
	return i.ToConnectionHttpParametersPtrOutputWithContext(context.Background())
}

func (i ConnectionHttpParametersArgs) ToConnectionHttpParametersPtrOutputWithContext(ctx context.Context) ConnectionHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionHttpParametersOutput).ToConnectionHttpParametersPtrOutputWithContext(ctx)
}

// ConnectionHttpParametersPtrInput is an input type that accepts ConnectionHttpParametersArgs, ConnectionHttpParametersPtr and ConnectionHttpParametersPtrOutput values.
// You can construct a concrete instance of `ConnectionHttpParametersPtrInput` via:
//
//	        ConnectionHttpParametersArgs{...}
//
//	or:
//
//	        nil
type ConnectionHttpParametersPtrInput interface {
	pulumi.Input

	ToConnectionHttpParametersPtrOutput() ConnectionHttpParametersPtrOutput
	ToConnectionHttpParametersPtrOutputWithContext(context.Context) ConnectionHttpParametersPtrOutput
}

type connectionHttpParametersPtrType ConnectionHttpParametersArgs

func ConnectionHttpParametersPtr(v *ConnectionHttpParametersArgs) ConnectionHttpParametersPtrInput {
	return (*connectionHttpParametersPtrType)(v)
}

func (*connectionHttpParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionHttpParameters)(nil)).Elem()
}

func (i *connectionHttpParametersPtrType) ToConnectionHttpParametersPtrOutput() ConnectionHttpParametersPtrOutput {
	return i.ToConnectionHttpParametersPtrOutputWithContext(context.Background())
}

func (i *connectionHttpParametersPtrType) ToConnectionHttpParametersPtrOutputWithContext(ctx context.Context) ConnectionHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionHttpParametersPtrOutput)
}

type ConnectionHttpParametersOutput struct{ *pulumi.OutputState }

func (ConnectionHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionHttpParameters)(nil)).Elem()
}

func (o ConnectionHttpParametersOutput) ToConnectionHttpParametersOutput() ConnectionHttpParametersOutput {
	return o
}

func (o ConnectionHttpParametersOutput) ToConnectionHttpParametersOutputWithContext(ctx context.Context) ConnectionHttpParametersOutput {
	return o
}

func (o ConnectionHttpParametersOutput) ToConnectionHttpParametersPtrOutput() ConnectionHttpParametersPtrOutput {
	return o.ToConnectionHttpParametersPtrOutputWithContext(context.Background())
}

func (o ConnectionHttpParametersOutput) ToConnectionHttpParametersPtrOutputWithContext(ctx context.Context) ConnectionHttpParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionHttpParameters) *ConnectionHttpParameters {
		return &v
	}).(ConnectionHttpParametersPtrOutput)
}

// Contains additional body string parameters for the connection.
func (o ConnectionHttpParametersOutput) BodyParameters() ConnectionParameterArrayOutput {
	return o.ApplyT(func(v ConnectionHttpParameters) []ConnectionParameter { return v.BodyParameters }).(ConnectionParameterArrayOutput)
}

// Contains additional header parameters for the connection.
func (o ConnectionHttpParametersOutput) HeaderParameters() ConnectionParameterArrayOutput {
	return o.ApplyT(func(v ConnectionHttpParameters) []ConnectionParameter { return v.HeaderParameters }).(ConnectionParameterArrayOutput)
}

// Contains additional query string parameters for the connection.
func (o ConnectionHttpParametersOutput) QueryStringParameters() ConnectionParameterArrayOutput {
	return o.ApplyT(func(v ConnectionHttpParameters) []ConnectionParameter { return v.QueryStringParameters }).(ConnectionParameterArrayOutput)
}

type ConnectionHttpParametersPtrOutput struct{ *pulumi.OutputState }

func (ConnectionHttpParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionHttpParameters)(nil)).Elem()
}

func (o ConnectionHttpParametersPtrOutput) ToConnectionHttpParametersPtrOutput() ConnectionHttpParametersPtrOutput {
	return o
}

func (o ConnectionHttpParametersPtrOutput) ToConnectionHttpParametersPtrOutputWithContext(ctx context.Context) ConnectionHttpParametersPtrOutput {
	return o
}

func (o ConnectionHttpParametersPtrOutput) Elem() ConnectionHttpParametersOutput {
	return o.ApplyT(func(v *ConnectionHttpParameters) ConnectionHttpParameters {
		if v != nil {
			return *v
		}
		var ret ConnectionHttpParameters
		return ret
	}).(ConnectionHttpParametersOutput)
}

// Contains additional body string parameters for the connection.
func (o ConnectionHttpParametersPtrOutput) BodyParameters() ConnectionParameterArrayOutput {
	return o.ApplyT(func(v *ConnectionHttpParameters) []ConnectionParameter {
		if v == nil {
			return nil
		}
		return v.BodyParameters
	}).(ConnectionParameterArrayOutput)
}

// Contains additional header parameters for the connection.
func (o ConnectionHttpParametersPtrOutput) HeaderParameters() ConnectionParameterArrayOutput {
	return o.ApplyT(func(v *ConnectionHttpParameters) []ConnectionParameter {
		if v == nil {
			return nil
		}
		return v.HeaderParameters
	}).(ConnectionParameterArrayOutput)
}

// Contains additional query string parameters for the connection.
func (o ConnectionHttpParametersPtrOutput) QueryStringParameters() ConnectionParameterArrayOutput {
	return o.ApplyT(func(v *ConnectionHttpParameters) []ConnectionParameter {
		if v == nil {
			return nil
		}
		return v.QueryStringParameters
	}).(ConnectionParameterArrayOutput)
}

type ConnectionOAuthParameters struct {
	// The URL to the authorization endpoint when OAuth is specified as the authorization type.
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// A `CreateConnectionOAuthClientRequestParameters` object that contains the client parameters for OAuth authorization.
	ClientParameters ConnectionClientParameters `pulumi:"clientParameters"`
	// The method to use for the authorization request.
	HttpMethod ConnectionOAuthParametersHttpMethod `pulumi:"httpMethod"`
	// A `ConnectionHttpParameters` object that contains details about the additional parameters to use for the connection.
	OAuthHttpParameters *ConnectionHttpParameters `pulumi:"oAuthHttpParameters"`
}

// ConnectionOAuthParametersInput is an input type that accepts ConnectionOAuthParametersArgs and ConnectionOAuthParametersOutput values.
// You can construct a concrete instance of `ConnectionOAuthParametersInput` via:
//
//	ConnectionOAuthParametersArgs{...}
type ConnectionOAuthParametersInput interface {
	pulumi.Input

	ToConnectionOAuthParametersOutput() ConnectionOAuthParametersOutput
	ToConnectionOAuthParametersOutputWithContext(context.Context) ConnectionOAuthParametersOutput
}

type ConnectionOAuthParametersArgs struct {
	// The URL to the authorization endpoint when OAuth is specified as the authorization type.
	AuthorizationEndpoint pulumi.StringInput `pulumi:"authorizationEndpoint"`
	// A `CreateConnectionOAuthClientRequestParameters` object that contains the client parameters for OAuth authorization.
	ClientParameters ConnectionClientParametersInput `pulumi:"clientParameters"`
	// The method to use for the authorization request.
	HttpMethod ConnectionOAuthParametersHttpMethodInput `pulumi:"httpMethod"`
	// A `ConnectionHttpParameters` object that contains details about the additional parameters to use for the connection.
	OAuthHttpParameters ConnectionHttpParametersPtrInput `pulumi:"oAuthHttpParameters"`
}

func (ConnectionOAuthParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionOAuthParameters)(nil)).Elem()
}

func (i ConnectionOAuthParametersArgs) ToConnectionOAuthParametersOutput() ConnectionOAuthParametersOutput {
	return i.ToConnectionOAuthParametersOutputWithContext(context.Background())
}

func (i ConnectionOAuthParametersArgs) ToConnectionOAuthParametersOutputWithContext(ctx context.Context) ConnectionOAuthParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOAuthParametersOutput)
}

func (i ConnectionOAuthParametersArgs) ToConnectionOAuthParametersPtrOutput() ConnectionOAuthParametersPtrOutput {
	return i.ToConnectionOAuthParametersPtrOutputWithContext(context.Background())
}

func (i ConnectionOAuthParametersArgs) ToConnectionOAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionOAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOAuthParametersOutput).ToConnectionOAuthParametersPtrOutputWithContext(ctx)
}

// ConnectionOAuthParametersPtrInput is an input type that accepts ConnectionOAuthParametersArgs, ConnectionOAuthParametersPtr and ConnectionOAuthParametersPtrOutput values.
// You can construct a concrete instance of `ConnectionOAuthParametersPtrInput` via:
//
//	        ConnectionOAuthParametersArgs{...}
//
//	or:
//
//	        nil
type ConnectionOAuthParametersPtrInput interface {
	pulumi.Input

	ToConnectionOAuthParametersPtrOutput() ConnectionOAuthParametersPtrOutput
	ToConnectionOAuthParametersPtrOutputWithContext(context.Context) ConnectionOAuthParametersPtrOutput
}

type connectionOAuthParametersPtrType ConnectionOAuthParametersArgs

func ConnectionOAuthParametersPtr(v *ConnectionOAuthParametersArgs) ConnectionOAuthParametersPtrInput {
	return (*connectionOAuthParametersPtrType)(v)
}

func (*connectionOAuthParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionOAuthParameters)(nil)).Elem()
}

func (i *connectionOAuthParametersPtrType) ToConnectionOAuthParametersPtrOutput() ConnectionOAuthParametersPtrOutput {
	return i.ToConnectionOAuthParametersPtrOutputWithContext(context.Background())
}

func (i *connectionOAuthParametersPtrType) ToConnectionOAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionOAuthParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOAuthParametersPtrOutput)
}

type ConnectionOAuthParametersOutput struct{ *pulumi.OutputState }

func (ConnectionOAuthParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionOAuthParameters)(nil)).Elem()
}

func (o ConnectionOAuthParametersOutput) ToConnectionOAuthParametersOutput() ConnectionOAuthParametersOutput {
	return o
}

func (o ConnectionOAuthParametersOutput) ToConnectionOAuthParametersOutputWithContext(ctx context.Context) ConnectionOAuthParametersOutput {
	return o
}

func (o ConnectionOAuthParametersOutput) ToConnectionOAuthParametersPtrOutput() ConnectionOAuthParametersPtrOutput {
	return o.ToConnectionOAuthParametersPtrOutputWithContext(context.Background())
}

func (o ConnectionOAuthParametersOutput) ToConnectionOAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionOAuthParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionOAuthParameters) *ConnectionOAuthParameters {
		return &v
	}).(ConnectionOAuthParametersPtrOutput)
}

// The URL to the authorization endpoint when OAuth is specified as the authorization type.
func (o ConnectionOAuthParametersOutput) AuthorizationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionOAuthParameters) string { return v.AuthorizationEndpoint }).(pulumi.StringOutput)
}

// A `CreateConnectionOAuthClientRequestParameters` object that contains the client parameters for OAuth authorization.
func (o ConnectionOAuthParametersOutput) ClientParameters() ConnectionClientParametersOutput {
	return o.ApplyT(func(v ConnectionOAuthParameters) ConnectionClientParameters { return v.ClientParameters }).(ConnectionClientParametersOutput)
}

// The method to use for the authorization request.
func (o ConnectionOAuthParametersOutput) HttpMethod() ConnectionOAuthParametersHttpMethodOutput {
	return o.ApplyT(func(v ConnectionOAuthParameters) ConnectionOAuthParametersHttpMethod { return v.HttpMethod }).(ConnectionOAuthParametersHttpMethodOutput)
}

// A `ConnectionHttpParameters` object that contains details about the additional parameters to use for the connection.
func (o ConnectionOAuthParametersOutput) OAuthHttpParameters() ConnectionHttpParametersPtrOutput {
	return o.ApplyT(func(v ConnectionOAuthParameters) *ConnectionHttpParameters { return v.OAuthHttpParameters }).(ConnectionHttpParametersPtrOutput)
}

type ConnectionOAuthParametersPtrOutput struct{ *pulumi.OutputState }

func (ConnectionOAuthParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionOAuthParameters)(nil)).Elem()
}

func (o ConnectionOAuthParametersPtrOutput) ToConnectionOAuthParametersPtrOutput() ConnectionOAuthParametersPtrOutput {
	return o
}

func (o ConnectionOAuthParametersPtrOutput) ToConnectionOAuthParametersPtrOutputWithContext(ctx context.Context) ConnectionOAuthParametersPtrOutput {
	return o
}

func (o ConnectionOAuthParametersPtrOutput) Elem() ConnectionOAuthParametersOutput {
	return o.ApplyT(func(v *ConnectionOAuthParameters) ConnectionOAuthParameters {
		if v != nil {
			return *v
		}
		var ret ConnectionOAuthParameters
		return ret
	}).(ConnectionOAuthParametersOutput)
}

// The URL to the authorization endpoint when OAuth is specified as the authorization type.
func (o ConnectionOAuthParametersPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionOAuthParameters) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// A `CreateConnectionOAuthClientRequestParameters` object that contains the client parameters for OAuth authorization.
func (o ConnectionOAuthParametersPtrOutput) ClientParameters() ConnectionClientParametersPtrOutput {
	return o.ApplyT(func(v *ConnectionOAuthParameters) *ConnectionClientParameters {
		if v == nil {
			return nil
		}
		return &v.ClientParameters
	}).(ConnectionClientParametersPtrOutput)
}

// The method to use for the authorization request.
func (o ConnectionOAuthParametersPtrOutput) HttpMethod() ConnectionOAuthParametersHttpMethodPtrOutput {
	return o.ApplyT(func(v *ConnectionOAuthParameters) *ConnectionOAuthParametersHttpMethod {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(ConnectionOAuthParametersHttpMethodPtrOutput)
}

// A `ConnectionHttpParameters` object that contains details about the additional parameters to use for the connection.
func (o ConnectionOAuthParametersPtrOutput) OAuthHttpParameters() ConnectionHttpParametersPtrOutput {
	return o.ApplyT(func(v *ConnectionOAuthParameters) *ConnectionHttpParameters {
		if v == nil {
			return nil
		}
		return v.OAuthHttpParameters
	}).(ConnectionHttpParametersPtrOutput)
}

type ConnectionParameter struct {
	// Specifies whether the value is secret.
	IsValueSecret *bool `pulumi:"isValueSecret"`
	// The key for a query string parameter.
	Key string `pulumi:"key"`
	// The value associated with the key for the query string parameter.
	Value string `pulumi:"value"`
}

// ConnectionParameterInput is an input type that accepts ConnectionParameterArgs and ConnectionParameterOutput values.
// You can construct a concrete instance of `ConnectionParameterInput` via:
//
//	ConnectionParameterArgs{...}
type ConnectionParameterInput interface {
	pulumi.Input

	ToConnectionParameterOutput() ConnectionParameterOutput
	ToConnectionParameterOutputWithContext(context.Context) ConnectionParameterOutput
}

type ConnectionParameterArgs struct {
	// Specifies whether the value is secret.
	IsValueSecret pulumi.BoolPtrInput `pulumi:"isValueSecret"`
	// The key for a query string parameter.
	Key pulumi.StringInput `pulumi:"key"`
	// The value associated with the key for the query string parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConnectionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionParameter)(nil)).Elem()
}

func (i ConnectionParameterArgs) ToConnectionParameterOutput() ConnectionParameterOutput {
	return i.ToConnectionParameterOutputWithContext(context.Background())
}

func (i ConnectionParameterArgs) ToConnectionParameterOutputWithContext(ctx context.Context) ConnectionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionParameterOutput)
}

// ConnectionParameterArrayInput is an input type that accepts ConnectionParameterArray and ConnectionParameterArrayOutput values.
// You can construct a concrete instance of `ConnectionParameterArrayInput` via:
//
//	ConnectionParameterArray{ ConnectionParameterArgs{...} }
type ConnectionParameterArrayInput interface {
	pulumi.Input

	ToConnectionParameterArrayOutput() ConnectionParameterArrayOutput
	ToConnectionParameterArrayOutputWithContext(context.Context) ConnectionParameterArrayOutput
}

type ConnectionParameterArray []ConnectionParameterInput

func (ConnectionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionParameter)(nil)).Elem()
}

func (i ConnectionParameterArray) ToConnectionParameterArrayOutput() ConnectionParameterArrayOutput {
	return i.ToConnectionParameterArrayOutputWithContext(context.Background())
}

func (i ConnectionParameterArray) ToConnectionParameterArrayOutputWithContext(ctx context.Context) ConnectionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionParameterArrayOutput)
}

type ConnectionParameterOutput struct{ *pulumi.OutputState }

func (ConnectionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionParameter)(nil)).Elem()
}

func (o ConnectionParameterOutput) ToConnectionParameterOutput() ConnectionParameterOutput {
	return o
}

func (o ConnectionParameterOutput) ToConnectionParameterOutputWithContext(ctx context.Context) ConnectionParameterOutput {
	return o
}

// Specifies whether the value is secret.
func (o ConnectionParameterOutput) IsValueSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectionParameter) *bool { return v.IsValueSecret }).(pulumi.BoolPtrOutput)
}

// The key for a query string parameter.
func (o ConnectionParameterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionParameter) string { return v.Key }).(pulumi.StringOutput)
}

// The value associated with the key for the query string parameter.
func (o ConnectionParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ConnectionParameterArrayOutput struct{ *pulumi.OutputState }

func (ConnectionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionParameter)(nil)).Elem()
}

func (o ConnectionParameterArrayOutput) ToConnectionParameterArrayOutput() ConnectionParameterArrayOutput {
	return o
}

func (o ConnectionParameterArrayOutput) ToConnectionParameterArrayOutputWithContext(ctx context.Context) ConnectionParameterArrayOutput {
	return o
}

func (o ConnectionParameterArrayOutput) Index(i pulumi.IntInput) ConnectionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionParameter {
		return vs[0].([]ConnectionParameter)[vs[1].(int)]
	}).(ConnectionParameterOutput)
}

// Dead Letter Queue for the event bus.
type DeadLetterConfigProperties struct {
	// The ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

// DeadLetterConfigPropertiesInput is an input type that accepts DeadLetterConfigPropertiesArgs and DeadLetterConfigPropertiesOutput values.
// You can construct a concrete instance of `DeadLetterConfigPropertiesInput` via:
//
//	DeadLetterConfigPropertiesArgs{...}
type DeadLetterConfigPropertiesInput interface {
	pulumi.Input

	ToDeadLetterConfigPropertiesOutput() DeadLetterConfigPropertiesOutput
	ToDeadLetterConfigPropertiesOutputWithContext(context.Context) DeadLetterConfigPropertiesOutput
}

// Dead Letter Queue for the event bus.
type DeadLetterConfigPropertiesArgs struct {
	// The ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (DeadLetterConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterConfigProperties)(nil)).Elem()
}

func (i DeadLetterConfigPropertiesArgs) ToDeadLetterConfigPropertiesOutput() DeadLetterConfigPropertiesOutput {
	return i.ToDeadLetterConfigPropertiesOutputWithContext(context.Background())
}

func (i DeadLetterConfigPropertiesArgs) ToDeadLetterConfigPropertiesOutputWithContext(ctx context.Context) DeadLetterConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterConfigPropertiesOutput)
}

func (i DeadLetterConfigPropertiesArgs) ToDeadLetterConfigPropertiesPtrOutput() DeadLetterConfigPropertiesPtrOutput {
	return i.ToDeadLetterConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i DeadLetterConfigPropertiesArgs) ToDeadLetterConfigPropertiesPtrOutputWithContext(ctx context.Context) DeadLetterConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterConfigPropertiesOutput).ToDeadLetterConfigPropertiesPtrOutputWithContext(ctx)
}

// DeadLetterConfigPropertiesPtrInput is an input type that accepts DeadLetterConfigPropertiesArgs, DeadLetterConfigPropertiesPtr and DeadLetterConfigPropertiesPtrOutput values.
// You can construct a concrete instance of `DeadLetterConfigPropertiesPtrInput` via:
//
//	        DeadLetterConfigPropertiesArgs{...}
//
//	or:
//
//	        nil
type DeadLetterConfigPropertiesPtrInput interface {
	pulumi.Input

	ToDeadLetterConfigPropertiesPtrOutput() DeadLetterConfigPropertiesPtrOutput
	ToDeadLetterConfigPropertiesPtrOutputWithContext(context.Context) DeadLetterConfigPropertiesPtrOutput
}

type deadLetterConfigPropertiesPtrType DeadLetterConfigPropertiesArgs

func DeadLetterConfigPropertiesPtr(v *DeadLetterConfigPropertiesArgs) DeadLetterConfigPropertiesPtrInput {
	return (*deadLetterConfigPropertiesPtrType)(v)
}

func (*deadLetterConfigPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterConfigProperties)(nil)).Elem()
}

func (i *deadLetterConfigPropertiesPtrType) ToDeadLetterConfigPropertiesPtrOutput() DeadLetterConfigPropertiesPtrOutput {
	return i.ToDeadLetterConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i *deadLetterConfigPropertiesPtrType) ToDeadLetterConfigPropertiesPtrOutputWithContext(ctx context.Context) DeadLetterConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterConfigPropertiesPtrOutput)
}

// Dead Letter Queue for the event bus.
type DeadLetterConfigPropertiesOutput struct{ *pulumi.OutputState }

func (DeadLetterConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterConfigProperties)(nil)).Elem()
}

func (o DeadLetterConfigPropertiesOutput) ToDeadLetterConfigPropertiesOutput() DeadLetterConfigPropertiesOutput {
	return o
}

func (o DeadLetterConfigPropertiesOutput) ToDeadLetterConfigPropertiesOutputWithContext(ctx context.Context) DeadLetterConfigPropertiesOutput {
	return o
}

func (o DeadLetterConfigPropertiesOutput) ToDeadLetterConfigPropertiesPtrOutput() DeadLetterConfigPropertiesPtrOutput {
	return o.ToDeadLetterConfigPropertiesPtrOutputWithContext(context.Background())
}

func (o DeadLetterConfigPropertiesOutput) ToDeadLetterConfigPropertiesPtrOutputWithContext(ctx context.Context) DeadLetterConfigPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeadLetterConfigProperties) *DeadLetterConfigProperties {
		return &v
	}).(DeadLetterConfigPropertiesPtrOutput)
}

// The ARN of the SQS queue specified as the target for the dead-letter queue.
func (o DeadLetterConfigPropertiesOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeadLetterConfigProperties) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type DeadLetterConfigPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DeadLetterConfigPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterConfigProperties)(nil)).Elem()
}

func (o DeadLetterConfigPropertiesPtrOutput) ToDeadLetterConfigPropertiesPtrOutput() DeadLetterConfigPropertiesPtrOutput {
	return o
}

func (o DeadLetterConfigPropertiesPtrOutput) ToDeadLetterConfigPropertiesPtrOutputWithContext(ctx context.Context) DeadLetterConfigPropertiesPtrOutput {
	return o
}

func (o DeadLetterConfigPropertiesPtrOutput) Elem() DeadLetterConfigPropertiesOutput {
	return o.ApplyT(func(v *DeadLetterConfigProperties) DeadLetterConfigProperties {
		if v != nil {
			return *v
		}
		var ret DeadLetterConfigProperties
		return ret
	}).(DeadLetterConfigPropertiesOutput)
}

// The ARN of the SQS queue specified as the target for the dead-letter queue.
func (o DeadLetterConfigPropertiesPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeadLetterConfigProperties) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

type EndpointEventBus struct {
	EventBusArn string `pulumi:"eventBusArn"`
}

// EndpointEventBusInput is an input type that accepts EndpointEventBusArgs and EndpointEventBusOutput values.
// You can construct a concrete instance of `EndpointEventBusInput` via:
//
//	EndpointEventBusArgs{...}
type EndpointEventBusInput interface {
	pulumi.Input

	ToEndpointEventBusOutput() EndpointEventBusOutput
	ToEndpointEventBusOutputWithContext(context.Context) EndpointEventBusOutput
}

type EndpointEventBusArgs struct {
	EventBusArn pulumi.StringInput `pulumi:"eventBusArn"`
}

func (EndpointEventBusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointEventBus)(nil)).Elem()
}

func (i EndpointEventBusArgs) ToEndpointEventBusOutput() EndpointEventBusOutput {
	return i.ToEndpointEventBusOutputWithContext(context.Background())
}

func (i EndpointEventBusArgs) ToEndpointEventBusOutputWithContext(ctx context.Context) EndpointEventBusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEventBusOutput)
}

// EndpointEventBusArrayInput is an input type that accepts EndpointEventBusArray and EndpointEventBusArrayOutput values.
// You can construct a concrete instance of `EndpointEventBusArrayInput` via:
//
//	EndpointEventBusArray{ EndpointEventBusArgs{...} }
type EndpointEventBusArrayInput interface {
	pulumi.Input

	ToEndpointEventBusArrayOutput() EndpointEventBusArrayOutput
	ToEndpointEventBusArrayOutputWithContext(context.Context) EndpointEventBusArrayOutput
}

type EndpointEventBusArray []EndpointEventBusInput

func (EndpointEventBusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointEventBus)(nil)).Elem()
}

func (i EndpointEventBusArray) ToEndpointEventBusArrayOutput() EndpointEventBusArrayOutput {
	return i.ToEndpointEventBusArrayOutputWithContext(context.Background())
}

func (i EndpointEventBusArray) ToEndpointEventBusArrayOutputWithContext(ctx context.Context) EndpointEventBusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEventBusArrayOutput)
}

type EndpointEventBusOutput struct{ *pulumi.OutputState }

func (EndpointEventBusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointEventBus)(nil)).Elem()
}

func (o EndpointEventBusOutput) ToEndpointEventBusOutput() EndpointEventBusOutput {
	return o
}

func (o EndpointEventBusOutput) ToEndpointEventBusOutputWithContext(ctx context.Context) EndpointEventBusOutput {
	return o
}

func (o EndpointEventBusOutput) EventBusArn() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointEventBus) string { return v.EventBusArn }).(pulumi.StringOutput)
}

type EndpointEventBusArrayOutput struct{ *pulumi.OutputState }

func (EndpointEventBusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointEventBus)(nil)).Elem()
}

func (o EndpointEventBusArrayOutput) ToEndpointEventBusArrayOutput() EndpointEventBusArrayOutput {
	return o
}

func (o EndpointEventBusArrayOutput) ToEndpointEventBusArrayOutputWithContext(ctx context.Context) EndpointEventBusArrayOutput {
	return o
}

func (o EndpointEventBusArrayOutput) Index(i pulumi.IntInput) EndpointEventBusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointEventBus {
		return vs[0].([]EndpointEventBus)[vs[1].(int)]
	}).(EndpointEventBusOutput)
}

type EndpointFailoverConfig struct {
	// The main Region of the endpoint.
	Primary EndpointPrimary `pulumi:"primary"`
	// The Region that events are routed to when failover is triggered or event replication is enabled.
	Secondary EndpointSecondary `pulumi:"secondary"`
}

// EndpointFailoverConfigInput is an input type that accepts EndpointFailoverConfigArgs and EndpointFailoverConfigOutput values.
// You can construct a concrete instance of `EndpointFailoverConfigInput` via:
//
//	EndpointFailoverConfigArgs{...}
type EndpointFailoverConfigInput interface {
	pulumi.Input

	ToEndpointFailoverConfigOutput() EndpointFailoverConfigOutput
	ToEndpointFailoverConfigOutputWithContext(context.Context) EndpointFailoverConfigOutput
}

type EndpointFailoverConfigArgs struct {
	// The main Region of the endpoint.
	Primary EndpointPrimaryInput `pulumi:"primary"`
	// The Region that events are routed to when failover is triggered or event replication is enabled.
	Secondary EndpointSecondaryInput `pulumi:"secondary"`
}

func (EndpointFailoverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointFailoverConfig)(nil)).Elem()
}

func (i EndpointFailoverConfigArgs) ToEndpointFailoverConfigOutput() EndpointFailoverConfigOutput {
	return i.ToEndpointFailoverConfigOutputWithContext(context.Background())
}

func (i EndpointFailoverConfigArgs) ToEndpointFailoverConfigOutputWithContext(ctx context.Context) EndpointFailoverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointFailoverConfigOutput)
}

type EndpointFailoverConfigOutput struct{ *pulumi.OutputState }

func (EndpointFailoverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointFailoverConfig)(nil)).Elem()
}

func (o EndpointFailoverConfigOutput) ToEndpointFailoverConfigOutput() EndpointFailoverConfigOutput {
	return o
}

func (o EndpointFailoverConfigOutput) ToEndpointFailoverConfigOutputWithContext(ctx context.Context) EndpointFailoverConfigOutput {
	return o
}

// The main Region of the endpoint.
func (o EndpointFailoverConfigOutput) Primary() EndpointPrimaryOutput {
	return o.ApplyT(func(v EndpointFailoverConfig) EndpointPrimary { return v.Primary }).(EndpointPrimaryOutput)
}

// The Region that events are routed to when failover is triggered or event replication is enabled.
func (o EndpointFailoverConfigOutput) Secondary() EndpointSecondaryOutput {
	return o.ApplyT(func(v EndpointFailoverConfig) EndpointSecondary { return v.Secondary }).(EndpointSecondaryOutput)
}

type EndpointFailoverConfigPtrOutput struct{ *pulumi.OutputState }

func (EndpointFailoverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointFailoverConfig)(nil)).Elem()
}

func (o EndpointFailoverConfigPtrOutput) ToEndpointFailoverConfigPtrOutput() EndpointFailoverConfigPtrOutput {
	return o
}

func (o EndpointFailoverConfigPtrOutput) ToEndpointFailoverConfigPtrOutputWithContext(ctx context.Context) EndpointFailoverConfigPtrOutput {
	return o
}

func (o EndpointFailoverConfigPtrOutput) Elem() EndpointFailoverConfigOutput {
	return o.ApplyT(func(v *EndpointFailoverConfig) EndpointFailoverConfig {
		if v != nil {
			return *v
		}
		var ret EndpointFailoverConfig
		return ret
	}).(EndpointFailoverConfigOutput)
}

// The main Region of the endpoint.
func (o EndpointFailoverConfigPtrOutput) Primary() EndpointPrimaryPtrOutput {
	return o.ApplyT(func(v *EndpointFailoverConfig) *EndpointPrimary {
		if v == nil {
			return nil
		}
		return &v.Primary
	}).(EndpointPrimaryPtrOutput)
}

// The Region that events are routed to when failover is triggered or event replication is enabled.
func (o EndpointFailoverConfigPtrOutput) Secondary() EndpointSecondaryPtrOutput {
	return o.ApplyT(func(v *EndpointFailoverConfig) *EndpointSecondary {
		if v == nil {
			return nil
		}
		return &v.Secondary
	}).(EndpointSecondaryPtrOutput)
}

type EndpointPrimary struct {
	// The ARN of the health check used by the endpoint to determine whether failover is triggered.
	HealthCheck string `pulumi:"healthCheck"`
}

// EndpointPrimaryInput is an input type that accepts EndpointPrimaryArgs and EndpointPrimaryOutput values.
// You can construct a concrete instance of `EndpointPrimaryInput` via:
//
//	EndpointPrimaryArgs{...}
type EndpointPrimaryInput interface {
	pulumi.Input

	ToEndpointPrimaryOutput() EndpointPrimaryOutput
	ToEndpointPrimaryOutputWithContext(context.Context) EndpointPrimaryOutput
}

type EndpointPrimaryArgs struct {
	// The ARN of the health check used by the endpoint to determine whether failover is triggered.
	HealthCheck pulumi.StringInput `pulumi:"healthCheck"`
}

func (EndpointPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPrimary)(nil)).Elem()
}

func (i EndpointPrimaryArgs) ToEndpointPrimaryOutput() EndpointPrimaryOutput {
	return i.ToEndpointPrimaryOutputWithContext(context.Background())
}

func (i EndpointPrimaryArgs) ToEndpointPrimaryOutputWithContext(ctx context.Context) EndpointPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPrimaryOutput)
}

type EndpointPrimaryOutput struct{ *pulumi.OutputState }

func (EndpointPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPrimary)(nil)).Elem()
}

func (o EndpointPrimaryOutput) ToEndpointPrimaryOutput() EndpointPrimaryOutput {
	return o
}

func (o EndpointPrimaryOutput) ToEndpointPrimaryOutputWithContext(ctx context.Context) EndpointPrimaryOutput {
	return o
}

// The ARN of the health check used by the endpoint to determine whether failover is triggered.
func (o EndpointPrimaryOutput) HealthCheck() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointPrimary) string { return v.HealthCheck }).(pulumi.StringOutput)
}

type EndpointPrimaryPtrOutput struct{ *pulumi.OutputState }

func (EndpointPrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointPrimary)(nil)).Elem()
}

func (o EndpointPrimaryPtrOutput) ToEndpointPrimaryPtrOutput() EndpointPrimaryPtrOutput {
	return o
}

func (o EndpointPrimaryPtrOutput) ToEndpointPrimaryPtrOutputWithContext(ctx context.Context) EndpointPrimaryPtrOutput {
	return o
}

func (o EndpointPrimaryPtrOutput) Elem() EndpointPrimaryOutput {
	return o.ApplyT(func(v *EndpointPrimary) EndpointPrimary {
		if v != nil {
			return *v
		}
		var ret EndpointPrimary
		return ret
	}).(EndpointPrimaryOutput)
}

// The ARN of the health check used by the endpoint to determine whether failover is triggered.
func (o EndpointPrimaryPtrOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPrimary) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheck
	}).(pulumi.StringPtrOutput)
}

type EndpointReplicationConfig struct {
	// The state of event replication.
	State EndpointReplicationState `pulumi:"state"`
}

// EndpointReplicationConfigInput is an input type that accepts EndpointReplicationConfigArgs and EndpointReplicationConfigOutput values.
// You can construct a concrete instance of `EndpointReplicationConfigInput` via:
//
//	EndpointReplicationConfigArgs{...}
type EndpointReplicationConfigInput interface {
	pulumi.Input

	ToEndpointReplicationConfigOutput() EndpointReplicationConfigOutput
	ToEndpointReplicationConfigOutputWithContext(context.Context) EndpointReplicationConfigOutput
}

type EndpointReplicationConfigArgs struct {
	// The state of event replication.
	State EndpointReplicationStateInput `pulumi:"state"`
}

func (EndpointReplicationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointReplicationConfig)(nil)).Elem()
}

func (i EndpointReplicationConfigArgs) ToEndpointReplicationConfigOutput() EndpointReplicationConfigOutput {
	return i.ToEndpointReplicationConfigOutputWithContext(context.Background())
}

func (i EndpointReplicationConfigArgs) ToEndpointReplicationConfigOutputWithContext(ctx context.Context) EndpointReplicationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointReplicationConfigOutput)
}

func (i EndpointReplicationConfigArgs) ToEndpointReplicationConfigPtrOutput() EndpointReplicationConfigPtrOutput {
	return i.ToEndpointReplicationConfigPtrOutputWithContext(context.Background())
}

func (i EndpointReplicationConfigArgs) ToEndpointReplicationConfigPtrOutputWithContext(ctx context.Context) EndpointReplicationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointReplicationConfigOutput).ToEndpointReplicationConfigPtrOutputWithContext(ctx)
}

// EndpointReplicationConfigPtrInput is an input type that accepts EndpointReplicationConfigArgs, EndpointReplicationConfigPtr and EndpointReplicationConfigPtrOutput values.
// You can construct a concrete instance of `EndpointReplicationConfigPtrInput` via:
//
//	        EndpointReplicationConfigArgs{...}
//
//	or:
//
//	        nil
type EndpointReplicationConfigPtrInput interface {
	pulumi.Input

	ToEndpointReplicationConfigPtrOutput() EndpointReplicationConfigPtrOutput
	ToEndpointReplicationConfigPtrOutputWithContext(context.Context) EndpointReplicationConfigPtrOutput
}

type endpointReplicationConfigPtrType EndpointReplicationConfigArgs

func EndpointReplicationConfigPtr(v *EndpointReplicationConfigArgs) EndpointReplicationConfigPtrInput {
	return (*endpointReplicationConfigPtrType)(v)
}

func (*endpointReplicationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointReplicationConfig)(nil)).Elem()
}

func (i *endpointReplicationConfigPtrType) ToEndpointReplicationConfigPtrOutput() EndpointReplicationConfigPtrOutput {
	return i.ToEndpointReplicationConfigPtrOutputWithContext(context.Background())
}

func (i *endpointReplicationConfigPtrType) ToEndpointReplicationConfigPtrOutputWithContext(ctx context.Context) EndpointReplicationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointReplicationConfigPtrOutput)
}

type EndpointReplicationConfigOutput struct{ *pulumi.OutputState }

func (EndpointReplicationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointReplicationConfig)(nil)).Elem()
}

func (o EndpointReplicationConfigOutput) ToEndpointReplicationConfigOutput() EndpointReplicationConfigOutput {
	return o
}

func (o EndpointReplicationConfigOutput) ToEndpointReplicationConfigOutputWithContext(ctx context.Context) EndpointReplicationConfigOutput {
	return o
}

func (o EndpointReplicationConfigOutput) ToEndpointReplicationConfigPtrOutput() EndpointReplicationConfigPtrOutput {
	return o.ToEndpointReplicationConfigPtrOutputWithContext(context.Background())
}

func (o EndpointReplicationConfigOutput) ToEndpointReplicationConfigPtrOutputWithContext(ctx context.Context) EndpointReplicationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointReplicationConfig) *EndpointReplicationConfig {
		return &v
	}).(EndpointReplicationConfigPtrOutput)
}

// The state of event replication.
func (o EndpointReplicationConfigOutput) State() EndpointReplicationStateOutput {
	return o.ApplyT(func(v EndpointReplicationConfig) EndpointReplicationState { return v.State }).(EndpointReplicationStateOutput)
}

type EndpointReplicationConfigPtrOutput struct{ *pulumi.OutputState }

func (EndpointReplicationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointReplicationConfig)(nil)).Elem()
}

func (o EndpointReplicationConfigPtrOutput) ToEndpointReplicationConfigPtrOutput() EndpointReplicationConfigPtrOutput {
	return o
}

func (o EndpointReplicationConfigPtrOutput) ToEndpointReplicationConfigPtrOutputWithContext(ctx context.Context) EndpointReplicationConfigPtrOutput {
	return o
}

func (o EndpointReplicationConfigPtrOutput) Elem() EndpointReplicationConfigOutput {
	return o.ApplyT(func(v *EndpointReplicationConfig) EndpointReplicationConfig {
		if v != nil {
			return *v
		}
		var ret EndpointReplicationConfig
		return ret
	}).(EndpointReplicationConfigOutput)
}

// The state of event replication.
func (o EndpointReplicationConfigPtrOutput) State() EndpointReplicationStatePtrOutput {
	return o.ApplyT(func(v *EndpointReplicationConfig) *EndpointReplicationState {
		if v == nil {
			return nil
		}
		return &v.State
	}).(EndpointReplicationStatePtrOutput)
}

type EndpointRoutingConfig struct {
	// The failover configuration for an endpoint. This includes what triggers failover and what happens when it's triggered.
	FailoverConfig EndpointFailoverConfig `pulumi:"failoverConfig"`
}

// EndpointRoutingConfigInput is an input type that accepts EndpointRoutingConfigArgs and EndpointRoutingConfigOutput values.
// You can construct a concrete instance of `EndpointRoutingConfigInput` via:
//
//	EndpointRoutingConfigArgs{...}
type EndpointRoutingConfigInput interface {
	pulumi.Input

	ToEndpointRoutingConfigOutput() EndpointRoutingConfigOutput
	ToEndpointRoutingConfigOutputWithContext(context.Context) EndpointRoutingConfigOutput
}

type EndpointRoutingConfigArgs struct {
	// The failover configuration for an endpoint. This includes what triggers failover and what happens when it's triggered.
	FailoverConfig EndpointFailoverConfigInput `pulumi:"failoverConfig"`
}

func (EndpointRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRoutingConfig)(nil)).Elem()
}

func (i EndpointRoutingConfigArgs) ToEndpointRoutingConfigOutput() EndpointRoutingConfigOutput {
	return i.ToEndpointRoutingConfigOutputWithContext(context.Background())
}

func (i EndpointRoutingConfigArgs) ToEndpointRoutingConfigOutputWithContext(ctx context.Context) EndpointRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRoutingConfigOutput)
}

type EndpointRoutingConfigOutput struct{ *pulumi.OutputState }

func (EndpointRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRoutingConfig)(nil)).Elem()
}

func (o EndpointRoutingConfigOutput) ToEndpointRoutingConfigOutput() EndpointRoutingConfigOutput {
	return o
}

func (o EndpointRoutingConfigOutput) ToEndpointRoutingConfigOutputWithContext(ctx context.Context) EndpointRoutingConfigOutput {
	return o
}

// The failover configuration for an endpoint. This includes what triggers failover and what happens when it's triggered.
func (o EndpointRoutingConfigOutput) FailoverConfig() EndpointFailoverConfigOutput {
	return o.ApplyT(func(v EndpointRoutingConfig) EndpointFailoverConfig { return v.FailoverConfig }).(EndpointFailoverConfigOutput)
}

type EndpointRoutingConfigPtrOutput struct{ *pulumi.OutputState }

func (EndpointRoutingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRoutingConfig)(nil)).Elem()
}

func (o EndpointRoutingConfigPtrOutput) ToEndpointRoutingConfigPtrOutput() EndpointRoutingConfigPtrOutput {
	return o
}

func (o EndpointRoutingConfigPtrOutput) ToEndpointRoutingConfigPtrOutputWithContext(ctx context.Context) EndpointRoutingConfigPtrOutput {
	return o
}

func (o EndpointRoutingConfigPtrOutput) Elem() EndpointRoutingConfigOutput {
	return o.ApplyT(func(v *EndpointRoutingConfig) EndpointRoutingConfig {
		if v != nil {
			return *v
		}
		var ret EndpointRoutingConfig
		return ret
	}).(EndpointRoutingConfigOutput)
}

// The failover configuration for an endpoint. This includes what triggers failover and what happens when it's triggered.
func (o EndpointRoutingConfigPtrOutput) FailoverConfig() EndpointFailoverConfigPtrOutput {
	return o.ApplyT(func(v *EndpointRoutingConfig) *EndpointFailoverConfig {
		if v == nil {
			return nil
		}
		return &v.FailoverConfig
	}).(EndpointFailoverConfigPtrOutput)
}

type EndpointSecondary struct {
	// Defines the secondary Region.
	Route string `pulumi:"route"`
}

// EndpointSecondaryInput is an input type that accepts EndpointSecondaryArgs and EndpointSecondaryOutput values.
// You can construct a concrete instance of `EndpointSecondaryInput` via:
//
//	EndpointSecondaryArgs{...}
type EndpointSecondaryInput interface {
	pulumi.Input

	ToEndpointSecondaryOutput() EndpointSecondaryOutput
	ToEndpointSecondaryOutputWithContext(context.Context) EndpointSecondaryOutput
}

type EndpointSecondaryArgs struct {
	// Defines the secondary Region.
	Route pulumi.StringInput `pulumi:"route"`
}

func (EndpointSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSecondary)(nil)).Elem()
}

func (i EndpointSecondaryArgs) ToEndpointSecondaryOutput() EndpointSecondaryOutput {
	return i.ToEndpointSecondaryOutputWithContext(context.Background())
}

func (i EndpointSecondaryArgs) ToEndpointSecondaryOutputWithContext(ctx context.Context) EndpointSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointSecondaryOutput)
}

type EndpointSecondaryOutput struct{ *pulumi.OutputState }

func (EndpointSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointSecondary)(nil)).Elem()
}

func (o EndpointSecondaryOutput) ToEndpointSecondaryOutput() EndpointSecondaryOutput {
	return o
}

func (o EndpointSecondaryOutput) ToEndpointSecondaryOutputWithContext(ctx context.Context) EndpointSecondaryOutput {
	return o
}

// Defines the secondary Region.
func (o EndpointSecondaryOutput) Route() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointSecondary) string { return v.Route }).(pulumi.StringOutput)
}

type EndpointSecondaryPtrOutput struct{ *pulumi.OutputState }

func (EndpointSecondaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointSecondary)(nil)).Elem()
}

func (o EndpointSecondaryPtrOutput) ToEndpointSecondaryPtrOutput() EndpointSecondaryPtrOutput {
	return o
}

func (o EndpointSecondaryPtrOutput) ToEndpointSecondaryPtrOutputWithContext(ctx context.Context) EndpointSecondaryPtrOutput {
	return o
}

func (o EndpointSecondaryPtrOutput) Elem() EndpointSecondaryOutput {
	return o.ApplyT(func(v *EndpointSecondary) EndpointSecondary {
		if v != nil {
			return *v
		}
		var ret EndpointSecondary
		return ret
	}).(EndpointSecondaryOutput)
}

// Defines the secondary Region.
func (o EndpointSecondaryPtrOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointSecondary) *string {
		if v == nil {
			return nil
		}
		return &v.Route
	}).(pulumi.StringPtrOutput)
}

type EventBusTag struct {
	// A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
	Key string `pulumi:"key"`
	// The value for the specified tag key.
	Value string `pulumi:"value"`
}

type RuleAppSyncParameters struct {
	// The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.
	//
	// For more information, see [Operations](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations) in the *AWS AppSync User Guide* .
	GraphQlOperation string `pulumi:"graphQlOperation"`
}

// RuleAppSyncParametersInput is an input type that accepts RuleAppSyncParametersArgs and RuleAppSyncParametersOutput values.
// You can construct a concrete instance of `RuleAppSyncParametersInput` via:
//
//	RuleAppSyncParametersArgs{...}
type RuleAppSyncParametersInput interface {
	pulumi.Input

	ToRuleAppSyncParametersOutput() RuleAppSyncParametersOutput
	ToRuleAppSyncParametersOutputWithContext(context.Context) RuleAppSyncParametersOutput
}

type RuleAppSyncParametersArgs struct {
	// The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.
	//
	// For more information, see [Operations](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations) in the *AWS AppSync User Guide* .
	GraphQlOperation pulumi.StringInput `pulumi:"graphQlOperation"`
}

func (RuleAppSyncParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAppSyncParameters)(nil)).Elem()
}

func (i RuleAppSyncParametersArgs) ToRuleAppSyncParametersOutput() RuleAppSyncParametersOutput {
	return i.ToRuleAppSyncParametersOutputWithContext(context.Background())
}

func (i RuleAppSyncParametersArgs) ToRuleAppSyncParametersOutputWithContext(ctx context.Context) RuleAppSyncParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAppSyncParametersOutput)
}

func (i RuleAppSyncParametersArgs) ToRuleAppSyncParametersPtrOutput() RuleAppSyncParametersPtrOutput {
	return i.ToRuleAppSyncParametersPtrOutputWithContext(context.Background())
}

func (i RuleAppSyncParametersArgs) ToRuleAppSyncParametersPtrOutputWithContext(ctx context.Context) RuleAppSyncParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAppSyncParametersOutput).ToRuleAppSyncParametersPtrOutputWithContext(ctx)
}

// RuleAppSyncParametersPtrInput is an input type that accepts RuleAppSyncParametersArgs, RuleAppSyncParametersPtr and RuleAppSyncParametersPtrOutput values.
// You can construct a concrete instance of `RuleAppSyncParametersPtrInput` via:
//
//	        RuleAppSyncParametersArgs{...}
//
//	or:
//
//	        nil
type RuleAppSyncParametersPtrInput interface {
	pulumi.Input

	ToRuleAppSyncParametersPtrOutput() RuleAppSyncParametersPtrOutput
	ToRuleAppSyncParametersPtrOutputWithContext(context.Context) RuleAppSyncParametersPtrOutput
}

type ruleAppSyncParametersPtrType RuleAppSyncParametersArgs

func RuleAppSyncParametersPtr(v *RuleAppSyncParametersArgs) RuleAppSyncParametersPtrInput {
	return (*ruleAppSyncParametersPtrType)(v)
}

func (*ruleAppSyncParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAppSyncParameters)(nil)).Elem()
}

func (i *ruleAppSyncParametersPtrType) ToRuleAppSyncParametersPtrOutput() RuleAppSyncParametersPtrOutput {
	return i.ToRuleAppSyncParametersPtrOutputWithContext(context.Background())
}

func (i *ruleAppSyncParametersPtrType) ToRuleAppSyncParametersPtrOutputWithContext(ctx context.Context) RuleAppSyncParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAppSyncParametersPtrOutput)
}

type RuleAppSyncParametersOutput struct{ *pulumi.OutputState }

func (RuleAppSyncParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAppSyncParameters)(nil)).Elem()
}

func (o RuleAppSyncParametersOutput) ToRuleAppSyncParametersOutput() RuleAppSyncParametersOutput {
	return o
}

func (o RuleAppSyncParametersOutput) ToRuleAppSyncParametersOutputWithContext(ctx context.Context) RuleAppSyncParametersOutput {
	return o
}

func (o RuleAppSyncParametersOutput) ToRuleAppSyncParametersPtrOutput() RuleAppSyncParametersPtrOutput {
	return o.ToRuleAppSyncParametersPtrOutputWithContext(context.Background())
}

func (o RuleAppSyncParametersOutput) ToRuleAppSyncParametersPtrOutputWithContext(ctx context.Context) RuleAppSyncParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleAppSyncParameters) *RuleAppSyncParameters {
		return &v
	}).(RuleAppSyncParametersPtrOutput)
}

// The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.
//
// For more information, see [Operations](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations) in the *AWS AppSync User Guide* .
func (o RuleAppSyncParametersOutput) GraphQlOperation() pulumi.StringOutput {
	return o.ApplyT(func(v RuleAppSyncParameters) string { return v.GraphQlOperation }).(pulumi.StringOutput)
}

type RuleAppSyncParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleAppSyncParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAppSyncParameters)(nil)).Elem()
}

func (o RuleAppSyncParametersPtrOutput) ToRuleAppSyncParametersPtrOutput() RuleAppSyncParametersPtrOutput {
	return o
}

func (o RuleAppSyncParametersPtrOutput) ToRuleAppSyncParametersPtrOutputWithContext(ctx context.Context) RuleAppSyncParametersPtrOutput {
	return o
}

func (o RuleAppSyncParametersPtrOutput) Elem() RuleAppSyncParametersOutput {
	return o.ApplyT(func(v *RuleAppSyncParameters) RuleAppSyncParameters {
		if v != nil {
			return *v
		}
		var ret RuleAppSyncParameters
		return ret
	}).(RuleAppSyncParametersOutput)
}

// The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.
//
// For more information, see [Operations](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations) in the *AWS AppSync User Guide* .
func (o RuleAppSyncParametersPtrOutput) GraphQlOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleAppSyncParameters) *string {
		if v == nil {
			return nil
		}
		return &v.GraphQlOperation
	}).(pulumi.StringPtrOutput)
}

type RuleAwsVpcConfiguration struct {
	// Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when `LaunchType` in `EcsParameters` is set to `FARGATE` .
	AssignPublicIp *string `pulumi:"assignPublicIp"`
	// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets []string `pulumi:"subnets"`
}

// RuleAwsVpcConfigurationInput is an input type that accepts RuleAwsVpcConfigurationArgs and RuleAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `RuleAwsVpcConfigurationInput` via:
//
//	RuleAwsVpcConfigurationArgs{...}
type RuleAwsVpcConfigurationInput interface {
	pulumi.Input

	ToRuleAwsVpcConfigurationOutput() RuleAwsVpcConfigurationOutput
	ToRuleAwsVpcConfigurationOutputWithContext(context.Context) RuleAwsVpcConfigurationOutput
}

type RuleAwsVpcConfigurationArgs struct {
	// Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when `LaunchType` in `EcsParameters` is set to `FARGATE` .
	AssignPublicIp pulumi.StringPtrInput `pulumi:"assignPublicIp"`
	// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (RuleAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAwsVpcConfiguration)(nil)).Elem()
}

func (i RuleAwsVpcConfigurationArgs) ToRuleAwsVpcConfigurationOutput() RuleAwsVpcConfigurationOutput {
	return i.ToRuleAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i RuleAwsVpcConfigurationArgs) ToRuleAwsVpcConfigurationOutputWithContext(ctx context.Context) RuleAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAwsVpcConfigurationOutput)
}

func (i RuleAwsVpcConfigurationArgs) ToRuleAwsVpcConfigurationPtrOutput() RuleAwsVpcConfigurationPtrOutput {
	return i.ToRuleAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i RuleAwsVpcConfigurationArgs) ToRuleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) RuleAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAwsVpcConfigurationOutput).ToRuleAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// RuleAwsVpcConfigurationPtrInput is an input type that accepts RuleAwsVpcConfigurationArgs, RuleAwsVpcConfigurationPtr and RuleAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `RuleAwsVpcConfigurationPtrInput` via:
//
//	        RuleAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type RuleAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToRuleAwsVpcConfigurationPtrOutput() RuleAwsVpcConfigurationPtrOutput
	ToRuleAwsVpcConfigurationPtrOutputWithContext(context.Context) RuleAwsVpcConfigurationPtrOutput
}

type ruleAwsVpcConfigurationPtrType RuleAwsVpcConfigurationArgs

func RuleAwsVpcConfigurationPtr(v *RuleAwsVpcConfigurationArgs) RuleAwsVpcConfigurationPtrInput {
	return (*ruleAwsVpcConfigurationPtrType)(v)
}

func (*ruleAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAwsVpcConfiguration)(nil)).Elem()
}

func (i *ruleAwsVpcConfigurationPtrType) ToRuleAwsVpcConfigurationPtrOutput() RuleAwsVpcConfigurationPtrOutput {
	return i.ToRuleAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *ruleAwsVpcConfigurationPtrType) ToRuleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) RuleAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleAwsVpcConfigurationPtrOutput)
}

type RuleAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (RuleAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAwsVpcConfiguration)(nil)).Elem()
}

func (o RuleAwsVpcConfigurationOutput) ToRuleAwsVpcConfigurationOutput() RuleAwsVpcConfigurationOutput {
	return o
}

func (o RuleAwsVpcConfigurationOutput) ToRuleAwsVpcConfigurationOutputWithContext(ctx context.Context) RuleAwsVpcConfigurationOutput {
	return o
}

func (o RuleAwsVpcConfigurationOutput) ToRuleAwsVpcConfigurationPtrOutput() RuleAwsVpcConfigurationPtrOutput {
	return o.ToRuleAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o RuleAwsVpcConfigurationOutput) ToRuleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) RuleAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleAwsVpcConfiguration) *RuleAwsVpcConfiguration {
		return &v
	}).(RuleAwsVpcConfigurationPtrOutput)
}

// Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when `LaunchType` in `EcsParameters` is set to `FARGATE` .
func (o RuleAwsVpcConfigurationOutput) AssignPublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleAwsVpcConfiguration) *string { return v.AssignPublicIp }).(pulumi.StringPtrOutput)
}

// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o RuleAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleAwsVpcConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o RuleAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleAwsVpcConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type RuleAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RuleAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAwsVpcConfiguration)(nil)).Elem()
}

func (o RuleAwsVpcConfigurationPtrOutput) ToRuleAwsVpcConfigurationPtrOutput() RuleAwsVpcConfigurationPtrOutput {
	return o
}

func (o RuleAwsVpcConfigurationPtrOutput) ToRuleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) RuleAwsVpcConfigurationPtrOutput {
	return o
}

func (o RuleAwsVpcConfigurationPtrOutput) Elem() RuleAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *RuleAwsVpcConfiguration) RuleAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret RuleAwsVpcConfiguration
		return ret
	}).(RuleAwsVpcConfigurationOutput)
}

// Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when `LaunchType` in `EcsParameters` is set to `FARGATE` .
func (o RuleAwsVpcConfigurationPtrOutput) AssignPublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleAwsVpcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(pulumi.StringPtrOutput)
}

// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o RuleAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o RuleAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type RuleBatchArrayProperties struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	Size *int `pulumi:"size"`
}

// RuleBatchArrayPropertiesInput is an input type that accepts RuleBatchArrayPropertiesArgs and RuleBatchArrayPropertiesOutput values.
// You can construct a concrete instance of `RuleBatchArrayPropertiesInput` via:
//
//	RuleBatchArrayPropertiesArgs{...}
type RuleBatchArrayPropertiesInput interface {
	pulumi.Input

	ToRuleBatchArrayPropertiesOutput() RuleBatchArrayPropertiesOutput
	ToRuleBatchArrayPropertiesOutputWithContext(context.Context) RuleBatchArrayPropertiesOutput
}

type RuleBatchArrayPropertiesArgs struct {
	// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (RuleBatchArrayPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleBatchArrayProperties)(nil)).Elem()
}

func (i RuleBatchArrayPropertiesArgs) ToRuleBatchArrayPropertiesOutput() RuleBatchArrayPropertiesOutput {
	return i.ToRuleBatchArrayPropertiesOutputWithContext(context.Background())
}

func (i RuleBatchArrayPropertiesArgs) ToRuleBatchArrayPropertiesOutputWithContext(ctx context.Context) RuleBatchArrayPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchArrayPropertiesOutput)
}

func (i RuleBatchArrayPropertiesArgs) ToRuleBatchArrayPropertiesPtrOutput() RuleBatchArrayPropertiesPtrOutput {
	return i.ToRuleBatchArrayPropertiesPtrOutputWithContext(context.Background())
}

func (i RuleBatchArrayPropertiesArgs) ToRuleBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) RuleBatchArrayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchArrayPropertiesOutput).ToRuleBatchArrayPropertiesPtrOutputWithContext(ctx)
}

// RuleBatchArrayPropertiesPtrInput is an input type that accepts RuleBatchArrayPropertiesArgs, RuleBatchArrayPropertiesPtr and RuleBatchArrayPropertiesPtrOutput values.
// You can construct a concrete instance of `RuleBatchArrayPropertiesPtrInput` via:
//
//	        RuleBatchArrayPropertiesArgs{...}
//
//	or:
//
//	        nil
type RuleBatchArrayPropertiesPtrInput interface {
	pulumi.Input

	ToRuleBatchArrayPropertiesPtrOutput() RuleBatchArrayPropertiesPtrOutput
	ToRuleBatchArrayPropertiesPtrOutputWithContext(context.Context) RuleBatchArrayPropertiesPtrOutput
}

type ruleBatchArrayPropertiesPtrType RuleBatchArrayPropertiesArgs

func RuleBatchArrayPropertiesPtr(v *RuleBatchArrayPropertiesArgs) RuleBatchArrayPropertiesPtrInput {
	return (*ruleBatchArrayPropertiesPtrType)(v)
}

func (*ruleBatchArrayPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBatchArrayProperties)(nil)).Elem()
}

func (i *ruleBatchArrayPropertiesPtrType) ToRuleBatchArrayPropertiesPtrOutput() RuleBatchArrayPropertiesPtrOutput {
	return i.ToRuleBatchArrayPropertiesPtrOutputWithContext(context.Background())
}

func (i *ruleBatchArrayPropertiesPtrType) ToRuleBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) RuleBatchArrayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchArrayPropertiesPtrOutput)
}

type RuleBatchArrayPropertiesOutput struct{ *pulumi.OutputState }

func (RuleBatchArrayPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleBatchArrayProperties)(nil)).Elem()
}

func (o RuleBatchArrayPropertiesOutput) ToRuleBatchArrayPropertiesOutput() RuleBatchArrayPropertiesOutput {
	return o
}

func (o RuleBatchArrayPropertiesOutput) ToRuleBatchArrayPropertiesOutputWithContext(ctx context.Context) RuleBatchArrayPropertiesOutput {
	return o
}

func (o RuleBatchArrayPropertiesOutput) ToRuleBatchArrayPropertiesPtrOutput() RuleBatchArrayPropertiesPtrOutput {
	return o.ToRuleBatchArrayPropertiesPtrOutputWithContext(context.Background())
}

func (o RuleBatchArrayPropertiesOutput) ToRuleBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) RuleBatchArrayPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleBatchArrayProperties) *RuleBatchArrayProperties {
		return &v
	}).(RuleBatchArrayPropertiesPtrOutput)
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o RuleBatchArrayPropertiesOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleBatchArrayProperties) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type RuleBatchArrayPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RuleBatchArrayPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBatchArrayProperties)(nil)).Elem()
}

func (o RuleBatchArrayPropertiesPtrOutput) ToRuleBatchArrayPropertiesPtrOutput() RuleBatchArrayPropertiesPtrOutput {
	return o
}

func (o RuleBatchArrayPropertiesPtrOutput) ToRuleBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) RuleBatchArrayPropertiesPtrOutput {
	return o
}

func (o RuleBatchArrayPropertiesPtrOutput) Elem() RuleBatchArrayPropertiesOutput {
	return o.ApplyT(func(v *RuleBatchArrayProperties) RuleBatchArrayProperties {
		if v != nil {
			return *v
		}
		var ret RuleBatchArrayProperties
		return ret
	}).(RuleBatchArrayPropertiesOutput)
}

// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
func (o RuleBatchArrayPropertiesPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleBatchArrayProperties) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type RuleBatchParameters struct {
	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.
	ArrayProperties *RuleBatchArrayProperties `pulumi:"arrayProperties"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition string `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName string `pulumi:"jobName"`
	// The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.
	RetryStrategy *RuleBatchRetryStrategy `pulumi:"retryStrategy"`
}

// RuleBatchParametersInput is an input type that accepts RuleBatchParametersArgs and RuleBatchParametersOutput values.
// You can construct a concrete instance of `RuleBatchParametersInput` via:
//
//	RuleBatchParametersArgs{...}
type RuleBatchParametersInput interface {
	pulumi.Input

	ToRuleBatchParametersOutput() RuleBatchParametersOutput
	ToRuleBatchParametersOutputWithContext(context.Context) RuleBatchParametersOutput
}

type RuleBatchParametersArgs struct {
	// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.
	ArrayProperties RuleBatchArrayPropertiesPtrInput `pulumi:"arrayProperties"`
	// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
	JobDefinition pulumi.StringInput `pulumi:"jobDefinition"`
	// The name to use for this execution of the job, if the target is an AWS Batch job.
	JobName pulumi.StringInput `pulumi:"jobName"`
	// The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.
	RetryStrategy RuleBatchRetryStrategyPtrInput `pulumi:"retryStrategy"`
}

func (RuleBatchParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleBatchParameters)(nil)).Elem()
}

func (i RuleBatchParametersArgs) ToRuleBatchParametersOutput() RuleBatchParametersOutput {
	return i.ToRuleBatchParametersOutputWithContext(context.Background())
}

func (i RuleBatchParametersArgs) ToRuleBatchParametersOutputWithContext(ctx context.Context) RuleBatchParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchParametersOutput)
}

func (i RuleBatchParametersArgs) ToRuleBatchParametersPtrOutput() RuleBatchParametersPtrOutput {
	return i.ToRuleBatchParametersPtrOutputWithContext(context.Background())
}

func (i RuleBatchParametersArgs) ToRuleBatchParametersPtrOutputWithContext(ctx context.Context) RuleBatchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchParametersOutput).ToRuleBatchParametersPtrOutputWithContext(ctx)
}

// RuleBatchParametersPtrInput is an input type that accepts RuleBatchParametersArgs, RuleBatchParametersPtr and RuleBatchParametersPtrOutput values.
// You can construct a concrete instance of `RuleBatchParametersPtrInput` via:
//
//	        RuleBatchParametersArgs{...}
//
//	or:
//
//	        nil
type RuleBatchParametersPtrInput interface {
	pulumi.Input

	ToRuleBatchParametersPtrOutput() RuleBatchParametersPtrOutput
	ToRuleBatchParametersPtrOutputWithContext(context.Context) RuleBatchParametersPtrOutput
}

type ruleBatchParametersPtrType RuleBatchParametersArgs

func RuleBatchParametersPtr(v *RuleBatchParametersArgs) RuleBatchParametersPtrInput {
	return (*ruleBatchParametersPtrType)(v)
}

func (*ruleBatchParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBatchParameters)(nil)).Elem()
}

func (i *ruleBatchParametersPtrType) ToRuleBatchParametersPtrOutput() RuleBatchParametersPtrOutput {
	return i.ToRuleBatchParametersPtrOutputWithContext(context.Background())
}

func (i *ruleBatchParametersPtrType) ToRuleBatchParametersPtrOutputWithContext(ctx context.Context) RuleBatchParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchParametersPtrOutput)
}

type RuleBatchParametersOutput struct{ *pulumi.OutputState }

func (RuleBatchParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleBatchParameters)(nil)).Elem()
}

func (o RuleBatchParametersOutput) ToRuleBatchParametersOutput() RuleBatchParametersOutput {
	return o
}

func (o RuleBatchParametersOutput) ToRuleBatchParametersOutputWithContext(ctx context.Context) RuleBatchParametersOutput {
	return o
}

func (o RuleBatchParametersOutput) ToRuleBatchParametersPtrOutput() RuleBatchParametersPtrOutput {
	return o.ToRuleBatchParametersPtrOutputWithContext(context.Background())
}

func (o RuleBatchParametersOutput) ToRuleBatchParametersPtrOutputWithContext(ctx context.Context) RuleBatchParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleBatchParameters) *RuleBatchParameters {
		return &v
	}).(RuleBatchParametersPtrOutput)
}

// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.
func (o RuleBatchParametersOutput) ArrayProperties() RuleBatchArrayPropertiesPtrOutput {
	return o.ApplyT(func(v RuleBatchParameters) *RuleBatchArrayProperties { return v.ArrayProperties }).(RuleBatchArrayPropertiesPtrOutput)
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o RuleBatchParametersOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v RuleBatchParameters) string { return v.JobDefinition }).(pulumi.StringOutput)
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o RuleBatchParametersOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v RuleBatchParameters) string { return v.JobName }).(pulumi.StringOutput)
}

// The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.
func (o RuleBatchParametersOutput) RetryStrategy() RuleBatchRetryStrategyPtrOutput {
	return o.ApplyT(func(v RuleBatchParameters) *RuleBatchRetryStrategy { return v.RetryStrategy }).(RuleBatchRetryStrategyPtrOutput)
}

type RuleBatchParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleBatchParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBatchParameters)(nil)).Elem()
}

func (o RuleBatchParametersPtrOutput) ToRuleBatchParametersPtrOutput() RuleBatchParametersPtrOutput {
	return o
}

func (o RuleBatchParametersPtrOutput) ToRuleBatchParametersPtrOutputWithContext(ctx context.Context) RuleBatchParametersPtrOutput {
	return o
}

func (o RuleBatchParametersPtrOutput) Elem() RuleBatchParametersOutput {
	return o.ApplyT(func(v *RuleBatchParameters) RuleBatchParameters {
		if v != nil {
			return *v
		}
		var ret RuleBatchParameters
		return ret
	}).(RuleBatchParametersOutput)
}

// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.
func (o RuleBatchParametersPtrOutput) ArrayProperties() RuleBatchArrayPropertiesPtrOutput {
	return o.ApplyT(func(v *RuleBatchParameters) *RuleBatchArrayProperties {
		if v == nil {
			return nil
		}
		return v.ArrayProperties
	}).(RuleBatchArrayPropertiesPtrOutput)
}

// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
func (o RuleBatchParametersPtrOutput) JobDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleBatchParameters) *string {
		if v == nil {
			return nil
		}
		return &v.JobDefinition
	}).(pulumi.StringPtrOutput)
}

// The name to use for this execution of the job, if the target is an AWS Batch job.
func (o RuleBatchParametersPtrOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleBatchParameters) *string {
		if v == nil {
			return nil
		}
		return &v.JobName
	}).(pulumi.StringPtrOutput)
}

// The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.
func (o RuleBatchParametersPtrOutput) RetryStrategy() RuleBatchRetryStrategyPtrOutput {
	return o.ApplyT(func(v *RuleBatchParameters) *RuleBatchRetryStrategy {
		if v == nil {
			return nil
		}
		return v.RetryStrategy
	}).(RuleBatchRetryStrategyPtrOutput)
}

type RuleBatchRetryStrategy struct {
	// The number of times to attempt to retry, if the job fails. Valid values are 1–10.
	Attempts *int `pulumi:"attempts"`
}

// RuleBatchRetryStrategyInput is an input type that accepts RuleBatchRetryStrategyArgs and RuleBatchRetryStrategyOutput values.
// You can construct a concrete instance of `RuleBatchRetryStrategyInput` via:
//
//	RuleBatchRetryStrategyArgs{...}
type RuleBatchRetryStrategyInput interface {
	pulumi.Input

	ToRuleBatchRetryStrategyOutput() RuleBatchRetryStrategyOutput
	ToRuleBatchRetryStrategyOutputWithContext(context.Context) RuleBatchRetryStrategyOutput
}

type RuleBatchRetryStrategyArgs struct {
	// The number of times to attempt to retry, if the job fails. Valid values are 1–10.
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
}

func (RuleBatchRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleBatchRetryStrategy)(nil)).Elem()
}

func (i RuleBatchRetryStrategyArgs) ToRuleBatchRetryStrategyOutput() RuleBatchRetryStrategyOutput {
	return i.ToRuleBatchRetryStrategyOutputWithContext(context.Background())
}

func (i RuleBatchRetryStrategyArgs) ToRuleBatchRetryStrategyOutputWithContext(ctx context.Context) RuleBatchRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchRetryStrategyOutput)
}

func (i RuleBatchRetryStrategyArgs) ToRuleBatchRetryStrategyPtrOutput() RuleBatchRetryStrategyPtrOutput {
	return i.ToRuleBatchRetryStrategyPtrOutputWithContext(context.Background())
}

func (i RuleBatchRetryStrategyArgs) ToRuleBatchRetryStrategyPtrOutputWithContext(ctx context.Context) RuleBatchRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchRetryStrategyOutput).ToRuleBatchRetryStrategyPtrOutputWithContext(ctx)
}

// RuleBatchRetryStrategyPtrInput is an input type that accepts RuleBatchRetryStrategyArgs, RuleBatchRetryStrategyPtr and RuleBatchRetryStrategyPtrOutput values.
// You can construct a concrete instance of `RuleBatchRetryStrategyPtrInput` via:
//
//	        RuleBatchRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type RuleBatchRetryStrategyPtrInput interface {
	pulumi.Input

	ToRuleBatchRetryStrategyPtrOutput() RuleBatchRetryStrategyPtrOutput
	ToRuleBatchRetryStrategyPtrOutputWithContext(context.Context) RuleBatchRetryStrategyPtrOutput
}

type ruleBatchRetryStrategyPtrType RuleBatchRetryStrategyArgs

func RuleBatchRetryStrategyPtr(v *RuleBatchRetryStrategyArgs) RuleBatchRetryStrategyPtrInput {
	return (*ruleBatchRetryStrategyPtrType)(v)
}

func (*ruleBatchRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBatchRetryStrategy)(nil)).Elem()
}

func (i *ruleBatchRetryStrategyPtrType) ToRuleBatchRetryStrategyPtrOutput() RuleBatchRetryStrategyPtrOutput {
	return i.ToRuleBatchRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *ruleBatchRetryStrategyPtrType) ToRuleBatchRetryStrategyPtrOutputWithContext(ctx context.Context) RuleBatchRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleBatchRetryStrategyPtrOutput)
}

type RuleBatchRetryStrategyOutput struct{ *pulumi.OutputState }

func (RuleBatchRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleBatchRetryStrategy)(nil)).Elem()
}

func (o RuleBatchRetryStrategyOutput) ToRuleBatchRetryStrategyOutput() RuleBatchRetryStrategyOutput {
	return o
}

func (o RuleBatchRetryStrategyOutput) ToRuleBatchRetryStrategyOutputWithContext(ctx context.Context) RuleBatchRetryStrategyOutput {
	return o
}

func (o RuleBatchRetryStrategyOutput) ToRuleBatchRetryStrategyPtrOutput() RuleBatchRetryStrategyPtrOutput {
	return o.ToRuleBatchRetryStrategyPtrOutputWithContext(context.Background())
}

func (o RuleBatchRetryStrategyOutput) ToRuleBatchRetryStrategyPtrOutputWithContext(ctx context.Context) RuleBatchRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleBatchRetryStrategy) *RuleBatchRetryStrategy {
		return &v
	}).(RuleBatchRetryStrategyPtrOutput)
}

// The number of times to attempt to retry, if the job fails. Valid values are 1–10.
func (o RuleBatchRetryStrategyOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleBatchRetryStrategy) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

type RuleBatchRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (RuleBatchRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleBatchRetryStrategy)(nil)).Elem()
}

func (o RuleBatchRetryStrategyPtrOutput) ToRuleBatchRetryStrategyPtrOutput() RuleBatchRetryStrategyPtrOutput {
	return o
}

func (o RuleBatchRetryStrategyPtrOutput) ToRuleBatchRetryStrategyPtrOutputWithContext(ctx context.Context) RuleBatchRetryStrategyPtrOutput {
	return o
}

func (o RuleBatchRetryStrategyPtrOutput) Elem() RuleBatchRetryStrategyOutput {
	return o.ApplyT(func(v *RuleBatchRetryStrategy) RuleBatchRetryStrategy {
		if v != nil {
			return *v
		}
		var ret RuleBatchRetryStrategy
		return ret
	}).(RuleBatchRetryStrategyOutput)
}

// The number of times to attempt to retry, if the job fails. Valid values are 1–10.
func (o RuleBatchRetryStrategyPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleBatchRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

type RuleCapacityProviderStrategyItem struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
	Base *int `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
	Weight *int `pulumi:"weight"`
}

// RuleCapacityProviderStrategyItemInput is an input type that accepts RuleCapacityProviderStrategyItemArgs and RuleCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `RuleCapacityProviderStrategyItemInput` via:
//
//	RuleCapacityProviderStrategyItemArgs{...}
type RuleCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToRuleCapacityProviderStrategyItemOutput() RuleCapacityProviderStrategyItemOutput
	ToRuleCapacityProviderStrategyItemOutputWithContext(context.Context) RuleCapacityProviderStrategyItemOutput
}

type RuleCapacityProviderStrategyItemArgs struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
	Base pulumi.IntPtrInput `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (RuleCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCapacityProviderStrategyItem)(nil)).Elem()
}

func (i RuleCapacityProviderStrategyItemArgs) ToRuleCapacityProviderStrategyItemOutput() RuleCapacityProviderStrategyItemOutput {
	return i.ToRuleCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i RuleCapacityProviderStrategyItemArgs) ToRuleCapacityProviderStrategyItemOutputWithContext(ctx context.Context) RuleCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleCapacityProviderStrategyItemOutput)
}

// RuleCapacityProviderStrategyItemArrayInput is an input type that accepts RuleCapacityProviderStrategyItemArray and RuleCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `RuleCapacityProviderStrategyItemArrayInput` via:
//
//	RuleCapacityProviderStrategyItemArray{ RuleCapacityProviderStrategyItemArgs{...} }
type RuleCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToRuleCapacityProviderStrategyItemArrayOutput() RuleCapacityProviderStrategyItemArrayOutput
	ToRuleCapacityProviderStrategyItemArrayOutputWithContext(context.Context) RuleCapacityProviderStrategyItemArrayOutput
}

type RuleCapacityProviderStrategyItemArray []RuleCapacityProviderStrategyItemInput

func (RuleCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleCapacityProviderStrategyItem)(nil)).Elem()
}

func (i RuleCapacityProviderStrategyItemArray) ToRuleCapacityProviderStrategyItemArrayOutput() RuleCapacityProviderStrategyItemArrayOutput {
	return i.ToRuleCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i RuleCapacityProviderStrategyItemArray) ToRuleCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) RuleCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleCapacityProviderStrategyItemArrayOutput)
}

type RuleCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (RuleCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCapacityProviderStrategyItem)(nil)).Elem()
}

func (o RuleCapacityProviderStrategyItemOutput) ToRuleCapacityProviderStrategyItemOutput() RuleCapacityProviderStrategyItemOutput {
	return o
}

func (o RuleCapacityProviderStrategyItemOutput) ToRuleCapacityProviderStrategyItemOutputWithContext(ctx context.Context) RuleCapacityProviderStrategyItemOutput {
	return o
}

// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
func (o RuleCapacityProviderStrategyItemOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleCapacityProviderStrategyItem) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// The short name of the capacity provider.
func (o RuleCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v RuleCapacityProviderStrategyItem) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
func (o RuleCapacityProviderStrategyItemOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleCapacityProviderStrategyItem) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type RuleCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (RuleCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleCapacityProviderStrategyItem)(nil)).Elem()
}

func (o RuleCapacityProviderStrategyItemArrayOutput) ToRuleCapacityProviderStrategyItemArrayOutput() RuleCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o RuleCapacityProviderStrategyItemArrayOutput) ToRuleCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) RuleCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o RuleCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) RuleCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleCapacityProviderStrategyItem {
		return vs[0].([]RuleCapacityProviderStrategyItem)[vs[1].(int)]
	}).(RuleCapacityProviderStrategyItemOutput)
}

type RuleDeadLetterConfig struct {
	// The ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

// RuleDeadLetterConfigInput is an input type that accepts RuleDeadLetterConfigArgs and RuleDeadLetterConfigOutput values.
// You can construct a concrete instance of `RuleDeadLetterConfigInput` via:
//
//	RuleDeadLetterConfigArgs{...}
type RuleDeadLetterConfigInput interface {
	pulumi.Input

	ToRuleDeadLetterConfigOutput() RuleDeadLetterConfigOutput
	ToRuleDeadLetterConfigOutputWithContext(context.Context) RuleDeadLetterConfigOutput
}

type RuleDeadLetterConfigArgs struct {
	// The ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (RuleDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDeadLetterConfig)(nil)).Elem()
}

func (i RuleDeadLetterConfigArgs) ToRuleDeadLetterConfigOutput() RuleDeadLetterConfigOutput {
	return i.ToRuleDeadLetterConfigOutputWithContext(context.Background())
}

func (i RuleDeadLetterConfigArgs) ToRuleDeadLetterConfigOutputWithContext(ctx context.Context) RuleDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDeadLetterConfigOutput)
}

func (i RuleDeadLetterConfigArgs) ToRuleDeadLetterConfigPtrOutput() RuleDeadLetterConfigPtrOutput {
	return i.ToRuleDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i RuleDeadLetterConfigArgs) ToRuleDeadLetterConfigPtrOutputWithContext(ctx context.Context) RuleDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDeadLetterConfigOutput).ToRuleDeadLetterConfigPtrOutputWithContext(ctx)
}

// RuleDeadLetterConfigPtrInput is an input type that accepts RuleDeadLetterConfigArgs, RuleDeadLetterConfigPtr and RuleDeadLetterConfigPtrOutput values.
// You can construct a concrete instance of `RuleDeadLetterConfigPtrInput` via:
//
//	        RuleDeadLetterConfigArgs{...}
//
//	or:
//
//	        nil
type RuleDeadLetterConfigPtrInput interface {
	pulumi.Input

	ToRuleDeadLetterConfigPtrOutput() RuleDeadLetterConfigPtrOutput
	ToRuleDeadLetterConfigPtrOutputWithContext(context.Context) RuleDeadLetterConfigPtrOutput
}

type ruleDeadLetterConfigPtrType RuleDeadLetterConfigArgs

func RuleDeadLetterConfigPtr(v *RuleDeadLetterConfigArgs) RuleDeadLetterConfigPtrInput {
	return (*ruleDeadLetterConfigPtrType)(v)
}

func (*ruleDeadLetterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDeadLetterConfig)(nil)).Elem()
}

func (i *ruleDeadLetterConfigPtrType) ToRuleDeadLetterConfigPtrOutput() RuleDeadLetterConfigPtrOutput {
	return i.ToRuleDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i *ruleDeadLetterConfigPtrType) ToRuleDeadLetterConfigPtrOutputWithContext(ctx context.Context) RuleDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDeadLetterConfigPtrOutput)
}

type RuleDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (RuleDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDeadLetterConfig)(nil)).Elem()
}

func (o RuleDeadLetterConfigOutput) ToRuleDeadLetterConfigOutput() RuleDeadLetterConfigOutput {
	return o
}

func (o RuleDeadLetterConfigOutput) ToRuleDeadLetterConfigOutputWithContext(ctx context.Context) RuleDeadLetterConfigOutput {
	return o
}

func (o RuleDeadLetterConfigOutput) ToRuleDeadLetterConfigPtrOutput() RuleDeadLetterConfigPtrOutput {
	return o.ToRuleDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (o RuleDeadLetterConfigOutput) ToRuleDeadLetterConfigPtrOutputWithContext(ctx context.Context) RuleDeadLetterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleDeadLetterConfig) *RuleDeadLetterConfig {
		return &v
	}).(RuleDeadLetterConfigPtrOutput)
}

// The ARN of the SQS queue specified as the target for the dead-letter queue.
func (o RuleDeadLetterConfigOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleDeadLetterConfig) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type RuleDeadLetterConfigPtrOutput struct{ *pulumi.OutputState }

func (RuleDeadLetterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDeadLetterConfig)(nil)).Elem()
}

func (o RuleDeadLetterConfigPtrOutput) ToRuleDeadLetterConfigPtrOutput() RuleDeadLetterConfigPtrOutput {
	return o
}

func (o RuleDeadLetterConfigPtrOutput) ToRuleDeadLetterConfigPtrOutputWithContext(ctx context.Context) RuleDeadLetterConfigPtrOutput {
	return o
}

func (o RuleDeadLetterConfigPtrOutput) Elem() RuleDeadLetterConfigOutput {
	return o.ApplyT(func(v *RuleDeadLetterConfig) RuleDeadLetterConfig {
		if v != nil {
			return *v
		}
		var ret RuleDeadLetterConfig
		return ret
	}).(RuleDeadLetterConfigOutput)
}

// The ARN of the SQS queue specified as the target for the dead-letter queue.
func (o RuleDeadLetterConfigPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleDeadLetterConfig) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

type RuleEcsParameters struct {
	// The capacity provider strategy to use for the task.
	//
	// If a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or launchType is specified, the `defaultCapacityProviderStrategy` for the cluster is used.
	CapacityProviderStrategy []RuleCapacityProviderStrategyItem `pulumi:"capacityProviderStrategy"`
	// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group *string `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The `FARGATE` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the *Amazon Elastic Container Service Developer Guide* .
	LaunchType *string `pulumi:"launchType"`
	// Use this structure if the Amazon ECS task uses the `awsvpc` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if `LaunchType` is `FARGATE` because the `awsvpc` mode is required for Fargate tasks.
	//
	// If you specify `NetworkConfiguration` when the target ECS task does not use the `awsvpc` network mode, the task fails.
	NetworkConfiguration *RuleNetworkConfiguration `pulumi:"networkConfiguration"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
	PlacementConstraints []RulePlacementConstraint `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
	PlacementStrategies []RulePlacementStrategy `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0` .
	//
	// This structure is used only if `LaunchType` is `FARGATE` . For more information about valid platform versions, see [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
	PropagateTags *string `pulumi:"propagateTags"`
	// The reference ID to use for the task.
	ReferenceId *string `pulumi:"referenceId"`
	// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
	TagList []RuleTag `pulumi:"tagList"`
	// The number of tasks to create based on `TaskDefinition` . The default is 1.
	TaskCount *int `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

// RuleEcsParametersInput is an input type that accepts RuleEcsParametersArgs and RuleEcsParametersOutput values.
// You can construct a concrete instance of `RuleEcsParametersInput` via:
//
//	RuleEcsParametersArgs{...}
type RuleEcsParametersInput interface {
	pulumi.Input

	ToRuleEcsParametersOutput() RuleEcsParametersOutput
	ToRuleEcsParametersOutputWithContext(context.Context) RuleEcsParametersOutput
}

type RuleEcsParametersArgs struct {
	// The capacity provider strategy to use for the task.
	//
	// If a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or launchType is specified, the `defaultCapacityProviderStrategy` for the cluster is used.
	CapacityProviderStrategy RuleCapacityProviderStrategyItemArrayInput `pulumi:"capacityProviderStrategy"`
	// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
	EnableEcsManagedTags pulumi.BoolPtrInput `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
	EnableExecuteCommand pulumi.BoolPtrInput `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The `FARGATE` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the *Amazon Elastic Container Service Developer Guide* .
	LaunchType pulumi.StringPtrInput `pulumi:"launchType"`
	// Use this structure if the Amazon ECS task uses the `awsvpc` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if `LaunchType` is `FARGATE` because the `awsvpc` mode is required for Fargate tasks.
	//
	// If you specify `NetworkConfiguration` when the target ECS task does not use the `awsvpc` network mode, the task fails.
	NetworkConfiguration RuleNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
	PlacementConstraints RulePlacementConstraintArrayInput `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
	PlacementStrategies RulePlacementStrategyArrayInput `pulumi:"placementStrategies"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0` .
	//
	// This structure is used only if `LaunchType` is `FARGATE` . For more information about valid platform versions, see [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
	PropagateTags pulumi.StringPtrInput `pulumi:"propagateTags"`
	// The reference ID to use for the task.
	ReferenceId pulumi.StringPtrInput `pulumi:"referenceId"`
	// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
	TagList RuleTagArrayInput `pulumi:"tagList"`
	// The number of tasks to create based on `TaskDefinition` . The default is 1.
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn pulumi.StringInput `pulumi:"taskDefinitionArn"`
}

func (RuleEcsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsParameters)(nil)).Elem()
}

func (i RuleEcsParametersArgs) ToRuleEcsParametersOutput() RuleEcsParametersOutput {
	return i.ToRuleEcsParametersOutputWithContext(context.Background())
}

func (i RuleEcsParametersArgs) ToRuleEcsParametersOutputWithContext(ctx context.Context) RuleEcsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsParametersOutput)
}

func (i RuleEcsParametersArgs) ToRuleEcsParametersPtrOutput() RuleEcsParametersPtrOutput {
	return i.ToRuleEcsParametersPtrOutputWithContext(context.Background())
}

func (i RuleEcsParametersArgs) ToRuleEcsParametersPtrOutputWithContext(ctx context.Context) RuleEcsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsParametersOutput).ToRuleEcsParametersPtrOutputWithContext(ctx)
}

// RuleEcsParametersPtrInput is an input type that accepts RuleEcsParametersArgs, RuleEcsParametersPtr and RuleEcsParametersPtrOutput values.
// You can construct a concrete instance of `RuleEcsParametersPtrInput` via:
//
//	        RuleEcsParametersArgs{...}
//
//	or:
//
//	        nil
type RuleEcsParametersPtrInput interface {
	pulumi.Input

	ToRuleEcsParametersPtrOutput() RuleEcsParametersPtrOutput
	ToRuleEcsParametersPtrOutputWithContext(context.Context) RuleEcsParametersPtrOutput
}

type ruleEcsParametersPtrType RuleEcsParametersArgs

func RuleEcsParametersPtr(v *RuleEcsParametersArgs) RuleEcsParametersPtrInput {
	return (*ruleEcsParametersPtrType)(v)
}

func (*ruleEcsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEcsParameters)(nil)).Elem()
}

func (i *ruleEcsParametersPtrType) ToRuleEcsParametersPtrOutput() RuleEcsParametersPtrOutput {
	return i.ToRuleEcsParametersPtrOutputWithContext(context.Background())
}

func (i *ruleEcsParametersPtrType) ToRuleEcsParametersPtrOutputWithContext(ctx context.Context) RuleEcsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleEcsParametersPtrOutput)
}

type RuleEcsParametersOutput struct{ *pulumi.OutputState }

func (RuleEcsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleEcsParameters)(nil)).Elem()
}

func (o RuleEcsParametersOutput) ToRuleEcsParametersOutput() RuleEcsParametersOutput {
	return o
}

func (o RuleEcsParametersOutput) ToRuleEcsParametersOutputWithContext(ctx context.Context) RuleEcsParametersOutput {
	return o
}

func (o RuleEcsParametersOutput) ToRuleEcsParametersPtrOutput() RuleEcsParametersPtrOutput {
	return o.ToRuleEcsParametersPtrOutputWithContext(context.Background())
}

func (o RuleEcsParametersOutput) ToRuleEcsParametersPtrOutputWithContext(ctx context.Context) RuleEcsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleEcsParameters) *RuleEcsParameters {
		return &v
	}).(RuleEcsParametersPtrOutput)
}

// The capacity provider strategy to use for the task.
//
// If a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or launchType is specified, the `defaultCapacityProviderStrategy` for the cluster is used.
func (o RuleEcsParametersOutput) CapacityProviderStrategy() RuleCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v RuleEcsParameters) []RuleCapacityProviderStrategyItem { return v.CapacityProviderStrategy }).(RuleCapacityProviderStrategyItemArrayOutput)
}

// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
func (o RuleEcsParametersOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *bool { return v.EnableEcsManagedTags }).(pulumi.BoolPtrOutput)
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
func (o RuleEcsParametersOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o RuleEcsParametersOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The `FARGATE` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o RuleEcsParametersOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *string { return v.LaunchType }).(pulumi.StringPtrOutput)
}

// Use this structure if the Amazon ECS task uses the `awsvpc` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if `LaunchType` is `FARGATE` because the `awsvpc` mode is required for Fargate tasks.
//
// If you specify `NetworkConfiguration` when the target ECS task does not use the `awsvpc` network mode, the task fails.
func (o RuleEcsParametersOutput) NetworkConfiguration() RuleNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *RuleNetworkConfiguration { return v.NetworkConfiguration }).(RuleNetworkConfigurationPtrOutput)
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
func (o RuleEcsParametersOutput) PlacementConstraints() RulePlacementConstraintArrayOutput {
	return o.ApplyT(func(v RuleEcsParameters) []RulePlacementConstraint { return v.PlacementConstraints }).(RulePlacementConstraintArrayOutput)
}

// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
func (o RuleEcsParametersOutput) PlacementStrategies() RulePlacementStrategyArrayOutput {
	return o.ApplyT(func(v RuleEcsParameters) []RulePlacementStrategy { return v.PlacementStrategies }).(RulePlacementStrategyArrayOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0` .
//
// This structure is used only if `LaunchType` is `FARGATE` . For more information about valid platform versions, see [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o RuleEcsParametersOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
func (o RuleEcsParametersOutput) PropagateTags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *string { return v.PropagateTags }).(pulumi.StringPtrOutput)
}

// The reference ID to use for the task.
func (o RuleEcsParametersOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *string { return v.ReferenceId }).(pulumi.StringPtrOutput)
}

// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
func (o RuleEcsParametersOutput) TagList() RuleTagArrayOutput {
	return o.ApplyT(func(v RuleEcsParameters) []RuleTag { return v.TagList }).(RuleTagArrayOutput)
}

// The number of tasks to create based on `TaskDefinition` . The default is 1.
func (o RuleEcsParametersOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleEcsParameters) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS task.
func (o RuleEcsParametersOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v RuleEcsParameters) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type RuleEcsParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleEcsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleEcsParameters)(nil)).Elem()
}

func (o RuleEcsParametersPtrOutput) ToRuleEcsParametersPtrOutput() RuleEcsParametersPtrOutput {
	return o
}

func (o RuleEcsParametersPtrOutput) ToRuleEcsParametersPtrOutputWithContext(ctx context.Context) RuleEcsParametersPtrOutput {
	return o
}

func (o RuleEcsParametersPtrOutput) Elem() RuleEcsParametersOutput {
	return o.ApplyT(func(v *RuleEcsParameters) RuleEcsParameters {
		if v != nil {
			return *v
		}
		var ret RuleEcsParameters
		return ret
	}).(RuleEcsParametersOutput)
}

// The capacity provider strategy to use for the task.
//
// If a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or launchType is specified, the `defaultCapacityProviderStrategy` for the cluster is used.
func (o RuleEcsParametersPtrOutput) CapacityProviderStrategy() RuleCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v *RuleEcsParameters) []RuleCapacityProviderStrategyItem {
		if v == nil {
			return nil
		}
		return v.CapacityProviderStrategy
	}).(RuleCapacityProviderStrategyItemArrayOutput)
}

// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
func (o RuleEcsParametersPtrOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEcsManagedTags
	}).(pulumi.BoolPtrOutput)
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
func (o RuleEcsParametersPtrOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExecuteCommand
	}).(pulumi.BoolPtrOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o RuleEcsParametersPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The `FARGATE` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o RuleEcsParametersPtrOutput) LaunchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.LaunchType
	}).(pulumi.StringPtrOutput)
}

// Use this structure if the Amazon ECS task uses the `awsvpc` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if `LaunchType` is `FARGATE` because the `awsvpc` mode is required for Fargate tasks.
//
// If you specify `NetworkConfiguration` when the target ECS task does not use the `awsvpc` network mode, the task fails.
func (o RuleEcsParametersPtrOutput) NetworkConfiguration() RuleNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *RuleNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(RuleNetworkConfigurationPtrOutput)
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
func (o RuleEcsParametersPtrOutput) PlacementConstraints() RulePlacementConstraintArrayOutput {
	return o.ApplyT(func(v *RuleEcsParameters) []RulePlacementConstraint {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(RulePlacementConstraintArrayOutput)
}

// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
func (o RuleEcsParametersPtrOutput) PlacementStrategies() RulePlacementStrategyArrayOutput {
	return o.ApplyT(func(v *RuleEcsParameters) []RulePlacementStrategy {
		if v == nil {
			return nil
		}
		return v.PlacementStrategies
	}).(RulePlacementStrategyArrayOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0` .
//
// This structure is used only if `LaunchType` is `FARGATE` . For more information about valid platform versions, see [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o RuleEcsParametersPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.PlatformVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
func (o RuleEcsParametersPtrOutput) PropagateTags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.PropagateTags
	}).(pulumi.StringPtrOutput)
}

// The reference ID to use for the task.
func (o RuleEcsParametersPtrOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceId
	}).(pulumi.StringPtrOutput)
}

// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
func (o RuleEcsParametersPtrOutput) TagList() RuleTagArrayOutput {
	return o.ApplyT(func(v *RuleEcsParameters) []RuleTag {
		if v == nil {
			return nil
		}
		return v.TagList
	}).(RuleTagArrayOutput)
}

// The number of tasks to create based on `TaskDefinition` . The default is 1.
func (o RuleEcsParametersPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *int {
		if v == nil {
			return nil
		}
		return v.TaskCount
	}).(pulumi.IntPtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS task.
func (o RuleEcsParametersPtrOutput) TaskDefinitionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TaskDefinitionArn
	}).(pulumi.StringPtrOutput)
}

type RuleHttpParameters struct {
	// The headers that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
	HeaderParameters map[string]string `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues []string `pulumi:"pathParameterValues"`
	// The query string keys/values that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
	QueryStringParameters map[string]string `pulumi:"queryStringParameters"`
}

// RuleHttpParametersInput is an input type that accepts RuleHttpParametersArgs and RuleHttpParametersOutput values.
// You can construct a concrete instance of `RuleHttpParametersInput` via:
//
//	RuleHttpParametersArgs{...}
type RuleHttpParametersInput interface {
	pulumi.Input

	ToRuleHttpParametersOutput() RuleHttpParametersOutput
	ToRuleHttpParametersOutputWithContext(context.Context) RuleHttpParametersOutput
}

type RuleHttpParametersArgs struct {
	// The headers that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
	HeaderParameters pulumi.StringMapInput `pulumi:"headerParameters"`
	// The path parameter values to be used to populate API Gateway API or EventBridge ApiDestination path wildcards ("*").
	PathParameterValues pulumi.StringArrayInput `pulumi:"pathParameterValues"`
	// The query string keys/values that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
	QueryStringParameters pulumi.StringMapInput `pulumi:"queryStringParameters"`
}

func (RuleHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHttpParameters)(nil)).Elem()
}

func (i RuleHttpParametersArgs) ToRuleHttpParametersOutput() RuleHttpParametersOutput {
	return i.ToRuleHttpParametersOutputWithContext(context.Background())
}

func (i RuleHttpParametersArgs) ToRuleHttpParametersOutputWithContext(ctx context.Context) RuleHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleHttpParametersOutput)
}

func (i RuleHttpParametersArgs) ToRuleHttpParametersPtrOutput() RuleHttpParametersPtrOutput {
	return i.ToRuleHttpParametersPtrOutputWithContext(context.Background())
}

func (i RuleHttpParametersArgs) ToRuleHttpParametersPtrOutputWithContext(ctx context.Context) RuleHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleHttpParametersOutput).ToRuleHttpParametersPtrOutputWithContext(ctx)
}

// RuleHttpParametersPtrInput is an input type that accepts RuleHttpParametersArgs, RuleHttpParametersPtr and RuleHttpParametersPtrOutput values.
// You can construct a concrete instance of `RuleHttpParametersPtrInput` via:
//
//	        RuleHttpParametersArgs{...}
//
//	or:
//
//	        nil
type RuleHttpParametersPtrInput interface {
	pulumi.Input

	ToRuleHttpParametersPtrOutput() RuleHttpParametersPtrOutput
	ToRuleHttpParametersPtrOutputWithContext(context.Context) RuleHttpParametersPtrOutput
}

type ruleHttpParametersPtrType RuleHttpParametersArgs

func RuleHttpParametersPtr(v *RuleHttpParametersArgs) RuleHttpParametersPtrInput {
	return (*ruleHttpParametersPtrType)(v)
}

func (*ruleHttpParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleHttpParameters)(nil)).Elem()
}

func (i *ruleHttpParametersPtrType) ToRuleHttpParametersPtrOutput() RuleHttpParametersPtrOutput {
	return i.ToRuleHttpParametersPtrOutputWithContext(context.Background())
}

func (i *ruleHttpParametersPtrType) ToRuleHttpParametersPtrOutputWithContext(ctx context.Context) RuleHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleHttpParametersPtrOutput)
}

type RuleHttpParametersOutput struct{ *pulumi.OutputState }

func (RuleHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHttpParameters)(nil)).Elem()
}

func (o RuleHttpParametersOutput) ToRuleHttpParametersOutput() RuleHttpParametersOutput {
	return o
}

func (o RuleHttpParametersOutput) ToRuleHttpParametersOutputWithContext(ctx context.Context) RuleHttpParametersOutput {
	return o
}

func (o RuleHttpParametersOutput) ToRuleHttpParametersPtrOutput() RuleHttpParametersPtrOutput {
	return o.ToRuleHttpParametersPtrOutputWithContext(context.Background())
}

func (o RuleHttpParametersOutput) ToRuleHttpParametersPtrOutputWithContext(ctx context.Context) RuleHttpParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleHttpParameters) *RuleHttpParameters {
		return &v
	}).(RuleHttpParametersPtrOutput)
}

// The headers that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
func (o RuleHttpParametersOutput) HeaderParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleHttpParameters) map[string]string { return v.HeaderParameters }).(pulumi.StringMapOutput)
}

// The path parameter values to be used to populate API Gateway API or EventBridge ApiDestination path wildcards ("*").
func (o RuleHttpParametersOutput) PathParameterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleHttpParameters) []string { return v.PathParameterValues }).(pulumi.StringArrayOutput)
}

// The query string keys/values that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
func (o RuleHttpParametersOutput) QueryStringParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleHttpParameters) map[string]string { return v.QueryStringParameters }).(pulumi.StringMapOutput)
}

type RuleHttpParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleHttpParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleHttpParameters)(nil)).Elem()
}

func (o RuleHttpParametersPtrOutput) ToRuleHttpParametersPtrOutput() RuleHttpParametersPtrOutput {
	return o
}

func (o RuleHttpParametersPtrOutput) ToRuleHttpParametersPtrOutputWithContext(ctx context.Context) RuleHttpParametersPtrOutput {
	return o
}

func (o RuleHttpParametersPtrOutput) Elem() RuleHttpParametersOutput {
	return o.ApplyT(func(v *RuleHttpParameters) RuleHttpParameters {
		if v != nil {
			return *v
		}
		var ret RuleHttpParameters
		return ret
	}).(RuleHttpParametersOutput)
}

// The headers that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
func (o RuleHttpParametersPtrOutput) HeaderParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RuleHttpParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.HeaderParameters
	}).(pulumi.StringMapOutput)
}

// The path parameter values to be used to populate API Gateway API or EventBridge ApiDestination path wildcards ("*").
func (o RuleHttpParametersPtrOutput) PathParameterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleHttpParameters) []string {
		if v == nil {
			return nil
		}
		return v.PathParameterValues
	}).(pulumi.StringArrayOutput)
}

// The query string keys/values that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
func (o RuleHttpParametersPtrOutput) QueryStringParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RuleHttpParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.QueryStringParameters
	}).(pulumi.StringMapOutput)
}

type RuleInputTransformer struct {
	// Map of JSON paths to be extracted from the event. You can then insert these in the template in `InputTemplate` to produce the output you want to be sent to the target.
	//
	// `InputPathsMap` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.
	//
	// The keys cannot start with " AWS ."
	InputPathsMap map[string]string `pulumi:"inputPathsMap"`
	// Input template where you specify placeholders that will be filled with the values of the keys from `InputPathsMap` to customize the data sent to the target. Enclose each `InputPathsMaps` value in brackets: < *value* >
	//
	// If `InputTemplate` is a JSON object (surrounded by curly braces), the following restrictions apply:
	//
	// - The placeholder cannot be used as an object key.
	//
	// The following example shows the syntax for using `InputPathsMap` and `InputTemplate` .
	//
	// `"InputTransformer":`
	//
	// `{`
	//
	// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
	//
	// `"InputTemplate": "<instance> is in state <status>"`
	//
	// `}`
	//
	// To have the `InputTemplate` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:
	//
	// `"InputTransformer":`
	//
	// `{`
	//
	// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
	//
	// `"InputTemplate": "<instance> is in state \"<status>\""`
	//
	// `}`
	//
	// The `InputTemplate` can also be valid JSON with varibles in quotes or out, as in the following example:
	//
	// `"InputTransformer":`
	//
	// `{`
	//
	// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
	//
	// `"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'`
	//
	// `}`
	InputTemplate string `pulumi:"inputTemplate"`
}

// RuleInputTransformerInput is an input type that accepts RuleInputTransformerArgs and RuleInputTransformerOutput values.
// You can construct a concrete instance of `RuleInputTransformerInput` via:
//
//	RuleInputTransformerArgs{...}
type RuleInputTransformerInput interface {
	pulumi.Input

	ToRuleInputTransformerOutput() RuleInputTransformerOutput
	ToRuleInputTransformerOutputWithContext(context.Context) RuleInputTransformerOutput
}

type RuleInputTransformerArgs struct {
	// Map of JSON paths to be extracted from the event. You can then insert these in the template in `InputTemplate` to produce the output you want to be sent to the target.
	//
	// `InputPathsMap` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.
	//
	// The keys cannot start with " AWS ."
	InputPathsMap pulumi.StringMapInput `pulumi:"inputPathsMap"`
	// Input template where you specify placeholders that will be filled with the values of the keys from `InputPathsMap` to customize the data sent to the target. Enclose each `InputPathsMaps` value in brackets: < *value* >
	//
	// If `InputTemplate` is a JSON object (surrounded by curly braces), the following restrictions apply:
	//
	// - The placeholder cannot be used as an object key.
	//
	// The following example shows the syntax for using `InputPathsMap` and `InputTemplate` .
	//
	// `"InputTransformer":`
	//
	// `{`
	//
	// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
	//
	// `"InputTemplate": "<instance> is in state <status>"`
	//
	// `}`
	//
	// To have the `InputTemplate` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:
	//
	// `"InputTransformer":`
	//
	// `{`
	//
	// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
	//
	// `"InputTemplate": "<instance> is in state \"<status>\""`
	//
	// `}`
	//
	// The `InputTemplate` can also be valid JSON with varibles in quotes or out, as in the following example:
	//
	// `"InputTransformer":`
	//
	// `{`
	//
	// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
	//
	// `"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'`
	//
	// `}`
	InputTemplate pulumi.StringInput `pulumi:"inputTemplate"`
}

func (RuleInputTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleInputTransformer)(nil)).Elem()
}

func (i RuleInputTransformerArgs) ToRuleInputTransformerOutput() RuleInputTransformerOutput {
	return i.ToRuleInputTransformerOutputWithContext(context.Background())
}

func (i RuleInputTransformerArgs) ToRuleInputTransformerOutputWithContext(ctx context.Context) RuleInputTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleInputTransformerOutput)
}

func (i RuleInputTransformerArgs) ToRuleInputTransformerPtrOutput() RuleInputTransformerPtrOutput {
	return i.ToRuleInputTransformerPtrOutputWithContext(context.Background())
}

func (i RuleInputTransformerArgs) ToRuleInputTransformerPtrOutputWithContext(ctx context.Context) RuleInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleInputTransformerOutput).ToRuleInputTransformerPtrOutputWithContext(ctx)
}

// RuleInputTransformerPtrInput is an input type that accepts RuleInputTransformerArgs, RuleInputTransformerPtr and RuleInputTransformerPtrOutput values.
// You can construct a concrete instance of `RuleInputTransformerPtrInput` via:
//
//	        RuleInputTransformerArgs{...}
//
//	or:
//
//	        nil
type RuleInputTransformerPtrInput interface {
	pulumi.Input

	ToRuleInputTransformerPtrOutput() RuleInputTransformerPtrOutput
	ToRuleInputTransformerPtrOutputWithContext(context.Context) RuleInputTransformerPtrOutput
}

type ruleInputTransformerPtrType RuleInputTransformerArgs

func RuleInputTransformerPtr(v *RuleInputTransformerArgs) RuleInputTransformerPtrInput {
	return (*ruleInputTransformerPtrType)(v)
}

func (*ruleInputTransformerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleInputTransformer)(nil)).Elem()
}

func (i *ruleInputTransformerPtrType) ToRuleInputTransformerPtrOutput() RuleInputTransformerPtrOutput {
	return i.ToRuleInputTransformerPtrOutputWithContext(context.Background())
}

func (i *ruleInputTransformerPtrType) ToRuleInputTransformerPtrOutputWithContext(ctx context.Context) RuleInputTransformerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleInputTransformerPtrOutput)
}

type RuleInputTransformerOutput struct{ *pulumi.OutputState }

func (RuleInputTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleInputTransformer)(nil)).Elem()
}

func (o RuleInputTransformerOutput) ToRuleInputTransformerOutput() RuleInputTransformerOutput {
	return o
}

func (o RuleInputTransformerOutput) ToRuleInputTransformerOutputWithContext(ctx context.Context) RuleInputTransformerOutput {
	return o
}

func (o RuleInputTransformerOutput) ToRuleInputTransformerPtrOutput() RuleInputTransformerPtrOutput {
	return o.ToRuleInputTransformerPtrOutputWithContext(context.Background())
}

func (o RuleInputTransformerOutput) ToRuleInputTransformerPtrOutputWithContext(ctx context.Context) RuleInputTransformerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleInputTransformer) *RuleInputTransformer {
		return &v
	}).(RuleInputTransformerPtrOutput)
}

// Map of JSON paths to be extracted from the event. You can then insert these in the template in `InputTemplate` to produce the output you want to be sent to the target.
//
// `InputPathsMap` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.
//
// The keys cannot start with " AWS ."
func (o RuleInputTransformerOutput) InputPathsMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleInputTransformer) map[string]string { return v.InputPathsMap }).(pulumi.StringMapOutput)
}

// Input template where you specify placeholders that will be filled with the values of the keys from `InputPathsMap` to customize the data sent to the target. Enclose each `InputPathsMaps` value in brackets: < *value* >
//
// If `InputTemplate` is a JSON object (surrounded by curly braces), the following restrictions apply:
//
// - The placeholder cannot be used as an object key.
//
// The following example shows the syntax for using `InputPathsMap` and `InputTemplate` .
//
// `"InputTransformer":`
//
// `{`
//
// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
//
// `"InputTemplate": "<instance> is in state <status>"`
//
// `}`
//
// To have the `InputTemplate` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:
//
// `"InputTransformer":`
//
// `{`
//
// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
//
// `"InputTemplate": "<instance> is in state \"<status>\""`
//
// `}`
//
// The `InputTemplate` can also be valid JSON with varibles in quotes or out, as in the following example:
//
// `"InputTransformer":`
//
// `{`
//
// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
//
// `"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'`
//
// `}`
func (o RuleInputTransformerOutput) InputTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v RuleInputTransformer) string { return v.InputTemplate }).(pulumi.StringOutput)
}

type RuleInputTransformerPtrOutput struct{ *pulumi.OutputState }

func (RuleInputTransformerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleInputTransformer)(nil)).Elem()
}

func (o RuleInputTransformerPtrOutput) ToRuleInputTransformerPtrOutput() RuleInputTransformerPtrOutput {
	return o
}

func (o RuleInputTransformerPtrOutput) ToRuleInputTransformerPtrOutputWithContext(ctx context.Context) RuleInputTransformerPtrOutput {
	return o
}

func (o RuleInputTransformerPtrOutput) Elem() RuleInputTransformerOutput {
	return o.ApplyT(func(v *RuleInputTransformer) RuleInputTransformer {
		if v != nil {
			return *v
		}
		var ret RuleInputTransformer
		return ret
	}).(RuleInputTransformerOutput)
}

// Map of JSON paths to be extracted from the event. You can then insert these in the template in `InputTemplate` to produce the output you want to be sent to the target.
//
// `InputPathsMap` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.
//
// The keys cannot start with " AWS ."
func (o RuleInputTransformerPtrOutput) InputPathsMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RuleInputTransformer) map[string]string {
		if v == nil {
			return nil
		}
		return v.InputPathsMap
	}).(pulumi.StringMapOutput)
}

// Input template where you specify placeholders that will be filled with the values of the keys from `InputPathsMap` to customize the data sent to the target. Enclose each `InputPathsMaps` value in brackets: < *value* >
//
// If `InputTemplate` is a JSON object (surrounded by curly braces), the following restrictions apply:
//
// - The placeholder cannot be used as an object key.
//
// The following example shows the syntax for using `InputPathsMap` and `InputTemplate` .
//
// `"InputTransformer":`
//
// `{`
//
// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
//
// `"InputTemplate": "<instance> is in state <status>"`
//
// `}`
//
// To have the `InputTemplate` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:
//
// `"InputTransformer":`
//
// `{`
//
// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
//
// `"InputTemplate": "<instance> is in state \"<status>\""`
//
// `}`
//
// The `InputTemplate` can also be valid JSON with varibles in quotes or out, as in the following example:
//
// `"InputTransformer":`
//
// `{`
//
// `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
//
// `"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'`
//
// `}`
func (o RuleInputTransformerPtrOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleInputTransformer) *string {
		if v == nil {
			return nil
		}
		return &v.InputTemplate
	}).(pulumi.StringPtrOutput)
}

type RuleKinesisParameters struct {
	// The JSON path to be extracted from the event and used as the partition key. For more information, see [Amazon Kinesis Streams Key Concepts](https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key) in the *Amazon Kinesis Streams Developer Guide* .
	PartitionKeyPath string `pulumi:"partitionKeyPath"`
}

// RuleKinesisParametersInput is an input type that accepts RuleKinesisParametersArgs and RuleKinesisParametersOutput values.
// You can construct a concrete instance of `RuleKinesisParametersInput` via:
//
//	RuleKinesisParametersArgs{...}
type RuleKinesisParametersInput interface {
	pulumi.Input

	ToRuleKinesisParametersOutput() RuleKinesisParametersOutput
	ToRuleKinesisParametersOutputWithContext(context.Context) RuleKinesisParametersOutput
}

type RuleKinesisParametersArgs struct {
	// The JSON path to be extracted from the event and used as the partition key. For more information, see [Amazon Kinesis Streams Key Concepts](https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key) in the *Amazon Kinesis Streams Developer Guide* .
	PartitionKeyPath pulumi.StringInput `pulumi:"partitionKeyPath"`
}

func (RuleKinesisParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleKinesisParameters)(nil)).Elem()
}

func (i RuleKinesisParametersArgs) ToRuleKinesisParametersOutput() RuleKinesisParametersOutput {
	return i.ToRuleKinesisParametersOutputWithContext(context.Background())
}

func (i RuleKinesisParametersArgs) ToRuleKinesisParametersOutputWithContext(ctx context.Context) RuleKinesisParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleKinesisParametersOutput)
}

func (i RuleKinesisParametersArgs) ToRuleKinesisParametersPtrOutput() RuleKinesisParametersPtrOutput {
	return i.ToRuleKinesisParametersPtrOutputWithContext(context.Background())
}

func (i RuleKinesisParametersArgs) ToRuleKinesisParametersPtrOutputWithContext(ctx context.Context) RuleKinesisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleKinesisParametersOutput).ToRuleKinesisParametersPtrOutputWithContext(ctx)
}

// RuleKinesisParametersPtrInput is an input type that accepts RuleKinesisParametersArgs, RuleKinesisParametersPtr and RuleKinesisParametersPtrOutput values.
// You can construct a concrete instance of `RuleKinesisParametersPtrInput` via:
//
//	        RuleKinesisParametersArgs{...}
//
//	or:
//
//	        nil
type RuleKinesisParametersPtrInput interface {
	pulumi.Input

	ToRuleKinesisParametersPtrOutput() RuleKinesisParametersPtrOutput
	ToRuleKinesisParametersPtrOutputWithContext(context.Context) RuleKinesisParametersPtrOutput
}

type ruleKinesisParametersPtrType RuleKinesisParametersArgs

func RuleKinesisParametersPtr(v *RuleKinesisParametersArgs) RuleKinesisParametersPtrInput {
	return (*ruleKinesisParametersPtrType)(v)
}

func (*ruleKinesisParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleKinesisParameters)(nil)).Elem()
}

func (i *ruleKinesisParametersPtrType) ToRuleKinesisParametersPtrOutput() RuleKinesisParametersPtrOutput {
	return i.ToRuleKinesisParametersPtrOutputWithContext(context.Background())
}

func (i *ruleKinesisParametersPtrType) ToRuleKinesisParametersPtrOutputWithContext(ctx context.Context) RuleKinesisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleKinesisParametersPtrOutput)
}

type RuleKinesisParametersOutput struct{ *pulumi.OutputState }

func (RuleKinesisParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleKinesisParameters)(nil)).Elem()
}

func (o RuleKinesisParametersOutput) ToRuleKinesisParametersOutput() RuleKinesisParametersOutput {
	return o
}

func (o RuleKinesisParametersOutput) ToRuleKinesisParametersOutputWithContext(ctx context.Context) RuleKinesisParametersOutput {
	return o
}

func (o RuleKinesisParametersOutput) ToRuleKinesisParametersPtrOutput() RuleKinesisParametersPtrOutput {
	return o.ToRuleKinesisParametersPtrOutputWithContext(context.Background())
}

func (o RuleKinesisParametersOutput) ToRuleKinesisParametersPtrOutputWithContext(ctx context.Context) RuleKinesisParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleKinesisParameters) *RuleKinesisParameters {
		return &v
	}).(RuleKinesisParametersPtrOutput)
}

// The JSON path to be extracted from the event and used as the partition key. For more information, see [Amazon Kinesis Streams Key Concepts](https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key) in the *Amazon Kinesis Streams Developer Guide* .
func (o RuleKinesisParametersOutput) PartitionKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v RuleKinesisParameters) string { return v.PartitionKeyPath }).(pulumi.StringOutput)
}

type RuleKinesisParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleKinesisParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleKinesisParameters)(nil)).Elem()
}

func (o RuleKinesisParametersPtrOutput) ToRuleKinesisParametersPtrOutput() RuleKinesisParametersPtrOutput {
	return o
}

func (o RuleKinesisParametersPtrOutput) ToRuleKinesisParametersPtrOutputWithContext(ctx context.Context) RuleKinesisParametersPtrOutput {
	return o
}

func (o RuleKinesisParametersPtrOutput) Elem() RuleKinesisParametersOutput {
	return o.ApplyT(func(v *RuleKinesisParameters) RuleKinesisParameters {
		if v != nil {
			return *v
		}
		var ret RuleKinesisParameters
		return ret
	}).(RuleKinesisParametersOutput)
}

// The JSON path to be extracted from the event and used as the partition key. For more information, see [Amazon Kinesis Streams Key Concepts](https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key) in the *Amazon Kinesis Streams Developer Guide* .
func (o RuleKinesisParametersPtrOutput) PartitionKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleKinesisParameters) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionKeyPath
	}).(pulumi.StringPtrOutput)
}

type RuleNetworkConfiguration struct {
	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the `awsvpc` network mode.
	AwsVpcConfiguration *RuleAwsVpcConfiguration `pulumi:"awsVpcConfiguration"`
}

// RuleNetworkConfigurationInput is an input type that accepts RuleNetworkConfigurationArgs and RuleNetworkConfigurationOutput values.
// You can construct a concrete instance of `RuleNetworkConfigurationInput` via:
//
//	RuleNetworkConfigurationArgs{...}
type RuleNetworkConfigurationInput interface {
	pulumi.Input

	ToRuleNetworkConfigurationOutput() RuleNetworkConfigurationOutput
	ToRuleNetworkConfigurationOutputWithContext(context.Context) RuleNetworkConfigurationOutput
}

type RuleNetworkConfigurationArgs struct {
	// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the `awsvpc` network mode.
	AwsVpcConfiguration RuleAwsVpcConfigurationPtrInput `pulumi:"awsVpcConfiguration"`
}

func (RuleNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleNetworkConfiguration)(nil)).Elem()
}

func (i RuleNetworkConfigurationArgs) ToRuleNetworkConfigurationOutput() RuleNetworkConfigurationOutput {
	return i.ToRuleNetworkConfigurationOutputWithContext(context.Background())
}

func (i RuleNetworkConfigurationArgs) ToRuleNetworkConfigurationOutputWithContext(ctx context.Context) RuleNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkConfigurationOutput)
}

func (i RuleNetworkConfigurationArgs) ToRuleNetworkConfigurationPtrOutput() RuleNetworkConfigurationPtrOutput {
	return i.ToRuleNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i RuleNetworkConfigurationArgs) ToRuleNetworkConfigurationPtrOutputWithContext(ctx context.Context) RuleNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkConfigurationOutput).ToRuleNetworkConfigurationPtrOutputWithContext(ctx)
}

// RuleNetworkConfigurationPtrInput is an input type that accepts RuleNetworkConfigurationArgs, RuleNetworkConfigurationPtr and RuleNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `RuleNetworkConfigurationPtrInput` via:
//
//	        RuleNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type RuleNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToRuleNetworkConfigurationPtrOutput() RuleNetworkConfigurationPtrOutput
	ToRuleNetworkConfigurationPtrOutputWithContext(context.Context) RuleNetworkConfigurationPtrOutput
}

type ruleNetworkConfigurationPtrType RuleNetworkConfigurationArgs

func RuleNetworkConfigurationPtr(v *RuleNetworkConfigurationArgs) RuleNetworkConfigurationPtrInput {
	return (*ruleNetworkConfigurationPtrType)(v)
}

func (*ruleNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleNetworkConfiguration)(nil)).Elem()
}

func (i *ruleNetworkConfigurationPtrType) ToRuleNetworkConfigurationPtrOutput() RuleNetworkConfigurationPtrOutput {
	return i.ToRuleNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *ruleNetworkConfigurationPtrType) ToRuleNetworkConfigurationPtrOutputWithContext(ctx context.Context) RuleNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleNetworkConfigurationPtrOutput)
}

type RuleNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (RuleNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleNetworkConfiguration)(nil)).Elem()
}

func (o RuleNetworkConfigurationOutput) ToRuleNetworkConfigurationOutput() RuleNetworkConfigurationOutput {
	return o
}

func (o RuleNetworkConfigurationOutput) ToRuleNetworkConfigurationOutputWithContext(ctx context.Context) RuleNetworkConfigurationOutput {
	return o
}

func (o RuleNetworkConfigurationOutput) ToRuleNetworkConfigurationPtrOutput() RuleNetworkConfigurationPtrOutput {
	return o.ToRuleNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o RuleNetworkConfigurationOutput) ToRuleNetworkConfigurationPtrOutputWithContext(ctx context.Context) RuleNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleNetworkConfiguration) *RuleNetworkConfiguration {
		return &v
	}).(RuleNetworkConfigurationPtrOutput)
}

// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the `awsvpc` network mode.
func (o RuleNetworkConfigurationOutput) AwsVpcConfiguration() RuleAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v RuleNetworkConfiguration) *RuleAwsVpcConfiguration { return v.AwsVpcConfiguration }).(RuleAwsVpcConfigurationPtrOutput)
}

type RuleNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RuleNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleNetworkConfiguration)(nil)).Elem()
}

func (o RuleNetworkConfigurationPtrOutput) ToRuleNetworkConfigurationPtrOutput() RuleNetworkConfigurationPtrOutput {
	return o
}

func (o RuleNetworkConfigurationPtrOutput) ToRuleNetworkConfigurationPtrOutputWithContext(ctx context.Context) RuleNetworkConfigurationPtrOutput {
	return o
}

func (o RuleNetworkConfigurationPtrOutput) Elem() RuleNetworkConfigurationOutput {
	return o.ApplyT(func(v *RuleNetworkConfiguration) RuleNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret RuleNetworkConfiguration
		return ret
	}).(RuleNetworkConfigurationOutput)
}

// Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the `awsvpc` network mode.
func (o RuleNetworkConfigurationPtrOutput) AwsVpcConfiguration() RuleAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *RuleNetworkConfiguration) *RuleAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsVpcConfiguration
	}).(RuleAwsVpcConfigurationPtrOutput)
}

type RulePlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance` . To learn more, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
	Expression *string `pulumi:"expression"`
	// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
	Type *string `pulumi:"type"`
}

// RulePlacementConstraintInput is an input type that accepts RulePlacementConstraintArgs and RulePlacementConstraintOutput values.
// You can construct a concrete instance of `RulePlacementConstraintInput` via:
//
//	RulePlacementConstraintArgs{...}
type RulePlacementConstraintInput interface {
	pulumi.Input

	ToRulePlacementConstraintOutput() RulePlacementConstraintOutput
	ToRulePlacementConstraintOutputWithContext(context.Context) RulePlacementConstraintOutput
}

type RulePlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance` . To learn more, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RulePlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePlacementConstraint)(nil)).Elem()
}

func (i RulePlacementConstraintArgs) ToRulePlacementConstraintOutput() RulePlacementConstraintOutput {
	return i.ToRulePlacementConstraintOutputWithContext(context.Background())
}

func (i RulePlacementConstraintArgs) ToRulePlacementConstraintOutputWithContext(ctx context.Context) RulePlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePlacementConstraintOutput)
}

// RulePlacementConstraintArrayInput is an input type that accepts RulePlacementConstraintArray and RulePlacementConstraintArrayOutput values.
// You can construct a concrete instance of `RulePlacementConstraintArrayInput` via:
//
//	RulePlacementConstraintArray{ RulePlacementConstraintArgs{...} }
type RulePlacementConstraintArrayInput interface {
	pulumi.Input

	ToRulePlacementConstraintArrayOutput() RulePlacementConstraintArrayOutput
	ToRulePlacementConstraintArrayOutputWithContext(context.Context) RulePlacementConstraintArrayOutput
}

type RulePlacementConstraintArray []RulePlacementConstraintInput

func (RulePlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePlacementConstraint)(nil)).Elem()
}

func (i RulePlacementConstraintArray) ToRulePlacementConstraintArrayOutput() RulePlacementConstraintArrayOutput {
	return i.ToRulePlacementConstraintArrayOutputWithContext(context.Background())
}

func (i RulePlacementConstraintArray) ToRulePlacementConstraintArrayOutputWithContext(ctx context.Context) RulePlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePlacementConstraintArrayOutput)
}

type RulePlacementConstraintOutput struct{ *pulumi.OutputState }

func (RulePlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePlacementConstraint)(nil)).Elem()
}

func (o RulePlacementConstraintOutput) ToRulePlacementConstraintOutput() RulePlacementConstraintOutput {
	return o
}

func (o RulePlacementConstraintOutput) ToRulePlacementConstraintOutputWithContext(ctx context.Context) RulePlacementConstraintOutput {
	return o
}

// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance` . To learn more, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
func (o RulePlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulePlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
func (o RulePlacementConstraintOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulePlacementConstraint) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RulePlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (RulePlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePlacementConstraint)(nil)).Elem()
}

func (o RulePlacementConstraintArrayOutput) ToRulePlacementConstraintArrayOutput() RulePlacementConstraintArrayOutput {
	return o
}

func (o RulePlacementConstraintArrayOutput) ToRulePlacementConstraintArrayOutputWithContext(ctx context.Context) RulePlacementConstraintArrayOutput {
	return o
}

func (o RulePlacementConstraintArrayOutput) Index(i pulumi.IntInput) RulePlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulePlacementConstraint {
		return vs[0].([]RulePlacementConstraint)[vs[1].(int)]
	}).(RulePlacementConstraintOutput)
}

type RulePlacementStrategy struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
	Field *string `pulumi:"field"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
	Type *string `pulumi:"type"`
}

// RulePlacementStrategyInput is an input type that accepts RulePlacementStrategyArgs and RulePlacementStrategyOutput values.
// You can construct a concrete instance of `RulePlacementStrategyInput` via:
//
//	RulePlacementStrategyArgs{...}
type RulePlacementStrategyInput interface {
	pulumi.Input

	ToRulePlacementStrategyOutput() RulePlacementStrategyOutput
	ToRulePlacementStrategyOutputWithContext(context.Context) RulePlacementStrategyOutput
}

type RulePlacementStrategyArgs struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RulePlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePlacementStrategy)(nil)).Elem()
}

func (i RulePlacementStrategyArgs) ToRulePlacementStrategyOutput() RulePlacementStrategyOutput {
	return i.ToRulePlacementStrategyOutputWithContext(context.Background())
}

func (i RulePlacementStrategyArgs) ToRulePlacementStrategyOutputWithContext(ctx context.Context) RulePlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePlacementStrategyOutput)
}

// RulePlacementStrategyArrayInput is an input type that accepts RulePlacementStrategyArray and RulePlacementStrategyArrayOutput values.
// You can construct a concrete instance of `RulePlacementStrategyArrayInput` via:
//
//	RulePlacementStrategyArray{ RulePlacementStrategyArgs{...} }
type RulePlacementStrategyArrayInput interface {
	pulumi.Input

	ToRulePlacementStrategyArrayOutput() RulePlacementStrategyArrayOutput
	ToRulePlacementStrategyArrayOutputWithContext(context.Context) RulePlacementStrategyArrayOutput
}

type RulePlacementStrategyArray []RulePlacementStrategyInput

func (RulePlacementStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePlacementStrategy)(nil)).Elem()
}

func (i RulePlacementStrategyArray) ToRulePlacementStrategyArrayOutput() RulePlacementStrategyArrayOutput {
	return i.ToRulePlacementStrategyArrayOutputWithContext(context.Background())
}

func (i RulePlacementStrategyArray) ToRulePlacementStrategyArrayOutputWithContext(ctx context.Context) RulePlacementStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePlacementStrategyArrayOutput)
}

type RulePlacementStrategyOutput struct{ *pulumi.OutputState }

func (RulePlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePlacementStrategy)(nil)).Elem()
}

func (o RulePlacementStrategyOutput) ToRulePlacementStrategyOutput() RulePlacementStrategyOutput {
	return o
}

func (o RulePlacementStrategyOutput) ToRulePlacementStrategyOutputWithContext(ctx context.Context) RulePlacementStrategyOutput {
	return o
}

// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
func (o RulePlacementStrategyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulePlacementStrategy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
func (o RulePlacementStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulePlacementStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RulePlacementStrategyArrayOutput struct{ *pulumi.OutputState }

func (RulePlacementStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePlacementStrategy)(nil)).Elem()
}

func (o RulePlacementStrategyArrayOutput) ToRulePlacementStrategyArrayOutput() RulePlacementStrategyArrayOutput {
	return o
}

func (o RulePlacementStrategyArrayOutput) ToRulePlacementStrategyArrayOutputWithContext(ctx context.Context) RulePlacementStrategyArrayOutput {
	return o
}

func (o RulePlacementStrategyArrayOutput) Index(i pulumi.IntInput) RulePlacementStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulePlacementStrategy {
		return vs[0].([]RulePlacementStrategy)[vs[1].(int)]
	}).(RulePlacementStrategyOutput)
}

type RuleRedshiftDataParameters struct {
	// The name of the database. Required when authenticating using temporary credentials.
	Database string `pulumi:"database"`
	// The database user name. Required when authenticating using temporary credentials.
	DbUser *string `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.
	SecretManagerArn *string `pulumi:"secretManagerArn"`
	// The SQL statement text to run.
	Sql *string `pulumi:"sql"`
	// One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.
	Sqls []string `pulumi:"sqls"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName *string `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent *bool `pulumi:"withEvent"`
}

// RuleRedshiftDataParametersInput is an input type that accepts RuleRedshiftDataParametersArgs and RuleRedshiftDataParametersOutput values.
// You can construct a concrete instance of `RuleRedshiftDataParametersInput` via:
//
//	RuleRedshiftDataParametersArgs{...}
type RuleRedshiftDataParametersInput interface {
	pulumi.Input

	ToRuleRedshiftDataParametersOutput() RuleRedshiftDataParametersOutput
	ToRuleRedshiftDataParametersOutputWithContext(context.Context) RuleRedshiftDataParametersOutput
}

type RuleRedshiftDataParametersArgs struct {
	// The name of the database. Required when authenticating using temporary credentials.
	Database pulumi.StringInput `pulumi:"database"`
	// The database user name. Required when authenticating using temporary credentials.
	DbUser pulumi.StringPtrInput `pulumi:"dbUser"`
	// The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.
	SecretManagerArn pulumi.StringPtrInput `pulumi:"secretManagerArn"`
	// The SQL statement text to run.
	Sql pulumi.StringPtrInput `pulumi:"sql"`
	// One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.
	Sqls pulumi.StringArrayInput `pulumi:"sqls"`
	// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
	StatementName pulumi.StringPtrInput `pulumi:"statementName"`
	// Indicates whether to send an event back to EventBridge after the SQL statement runs.
	WithEvent pulumi.BoolPtrInput `pulumi:"withEvent"`
}

func (RuleRedshiftDataParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRedshiftDataParameters)(nil)).Elem()
}

func (i RuleRedshiftDataParametersArgs) ToRuleRedshiftDataParametersOutput() RuleRedshiftDataParametersOutput {
	return i.ToRuleRedshiftDataParametersOutputWithContext(context.Background())
}

func (i RuleRedshiftDataParametersArgs) ToRuleRedshiftDataParametersOutputWithContext(ctx context.Context) RuleRedshiftDataParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRedshiftDataParametersOutput)
}

func (i RuleRedshiftDataParametersArgs) ToRuleRedshiftDataParametersPtrOutput() RuleRedshiftDataParametersPtrOutput {
	return i.ToRuleRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (i RuleRedshiftDataParametersArgs) ToRuleRedshiftDataParametersPtrOutputWithContext(ctx context.Context) RuleRedshiftDataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRedshiftDataParametersOutput).ToRuleRedshiftDataParametersPtrOutputWithContext(ctx)
}

// RuleRedshiftDataParametersPtrInput is an input type that accepts RuleRedshiftDataParametersArgs, RuleRedshiftDataParametersPtr and RuleRedshiftDataParametersPtrOutput values.
// You can construct a concrete instance of `RuleRedshiftDataParametersPtrInput` via:
//
//	        RuleRedshiftDataParametersArgs{...}
//
//	or:
//
//	        nil
type RuleRedshiftDataParametersPtrInput interface {
	pulumi.Input

	ToRuleRedshiftDataParametersPtrOutput() RuleRedshiftDataParametersPtrOutput
	ToRuleRedshiftDataParametersPtrOutputWithContext(context.Context) RuleRedshiftDataParametersPtrOutput
}

type ruleRedshiftDataParametersPtrType RuleRedshiftDataParametersArgs

func RuleRedshiftDataParametersPtr(v *RuleRedshiftDataParametersArgs) RuleRedshiftDataParametersPtrInput {
	return (*ruleRedshiftDataParametersPtrType)(v)
}

func (*ruleRedshiftDataParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRedshiftDataParameters)(nil)).Elem()
}

func (i *ruleRedshiftDataParametersPtrType) ToRuleRedshiftDataParametersPtrOutput() RuleRedshiftDataParametersPtrOutput {
	return i.ToRuleRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (i *ruleRedshiftDataParametersPtrType) ToRuleRedshiftDataParametersPtrOutputWithContext(ctx context.Context) RuleRedshiftDataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRedshiftDataParametersPtrOutput)
}

type RuleRedshiftDataParametersOutput struct{ *pulumi.OutputState }

func (RuleRedshiftDataParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRedshiftDataParameters)(nil)).Elem()
}

func (o RuleRedshiftDataParametersOutput) ToRuleRedshiftDataParametersOutput() RuleRedshiftDataParametersOutput {
	return o
}

func (o RuleRedshiftDataParametersOutput) ToRuleRedshiftDataParametersOutputWithContext(ctx context.Context) RuleRedshiftDataParametersOutput {
	return o
}

func (o RuleRedshiftDataParametersOutput) ToRuleRedshiftDataParametersPtrOutput() RuleRedshiftDataParametersPtrOutput {
	return o.ToRuleRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (o RuleRedshiftDataParametersOutput) ToRuleRedshiftDataParametersPtrOutputWithContext(ctx context.Context) RuleRedshiftDataParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleRedshiftDataParameters) *RuleRedshiftDataParameters {
		return &v
	}).(RuleRedshiftDataParametersPtrOutput)
}

// The name of the database. Required when authenticating using temporary credentials.
func (o RuleRedshiftDataParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v RuleRedshiftDataParameters) string { return v.Database }).(pulumi.StringOutput)
}

// The database user name. Required when authenticating using temporary credentials.
func (o RuleRedshiftDataParametersOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedshiftDataParameters) *string { return v.DbUser }).(pulumi.StringPtrOutput)
}

// The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.
func (o RuleRedshiftDataParametersOutput) SecretManagerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedshiftDataParameters) *string { return v.SecretManagerArn }).(pulumi.StringPtrOutput)
}

// The SQL statement text to run.
func (o RuleRedshiftDataParametersOutput) Sql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedshiftDataParameters) *string { return v.Sql }).(pulumi.StringPtrOutput)
}

// One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.
func (o RuleRedshiftDataParametersOutput) Sqls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleRedshiftDataParameters) []string { return v.Sqls }).(pulumi.StringArrayOutput)
}

// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
func (o RuleRedshiftDataParametersOutput) StatementName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedshiftDataParameters) *string { return v.StatementName }).(pulumi.StringPtrOutput)
}

// Indicates whether to send an event back to EventBridge after the SQL statement runs.
func (o RuleRedshiftDataParametersOutput) WithEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleRedshiftDataParameters) *bool { return v.WithEvent }).(pulumi.BoolPtrOutput)
}

type RuleRedshiftDataParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleRedshiftDataParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRedshiftDataParameters)(nil)).Elem()
}

func (o RuleRedshiftDataParametersPtrOutput) ToRuleRedshiftDataParametersPtrOutput() RuleRedshiftDataParametersPtrOutput {
	return o
}

func (o RuleRedshiftDataParametersPtrOutput) ToRuleRedshiftDataParametersPtrOutputWithContext(ctx context.Context) RuleRedshiftDataParametersPtrOutput {
	return o
}

func (o RuleRedshiftDataParametersPtrOutput) Elem() RuleRedshiftDataParametersOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) RuleRedshiftDataParameters {
		if v != nil {
			return *v
		}
		var ret RuleRedshiftDataParameters
		return ret
	}).(RuleRedshiftDataParametersOutput)
}

// The name of the database. Required when authenticating using temporary credentials.
func (o RuleRedshiftDataParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// The database user name. Required when authenticating using temporary credentials.
func (o RuleRedshiftDataParametersPtrOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.DbUser
	}).(pulumi.StringPtrOutput)
}

// The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.
func (o RuleRedshiftDataParametersPtrOutput) SecretManagerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.SecretManagerArn
	}).(pulumi.StringPtrOutput)
}

// The SQL statement text to run.
func (o RuleRedshiftDataParametersPtrOutput) Sql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.Sql
	}).(pulumi.StringPtrOutput)
}

// One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.
func (o RuleRedshiftDataParametersPtrOutput) Sqls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) []string {
		if v == nil {
			return nil
		}
		return v.Sqls
	}).(pulumi.StringArrayOutput)
}

// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
func (o RuleRedshiftDataParametersPtrOutput) StatementName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.StatementName
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to send an event back to EventBridge after the SQL statement runs.
func (o RuleRedshiftDataParametersPtrOutput) WithEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleRedshiftDataParameters) *bool {
		if v == nil {
			return nil
		}
		return v.WithEvent
	}).(pulumi.BoolPtrOutput)
}

type RuleRetryPolicy struct {
	// The maximum amount of time, in seconds, to continue to make retry attempts.
	MaximumEventAgeInSeconds *int `pulumi:"maximumEventAgeInSeconds"`
	// The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the `MaximumEventAgeInSeconds` is met.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
}

// RuleRetryPolicyInput is an input type that accepts RuleRetryPolicyArgs and RuleRetryPolicyOutput values.
// You can construct a concrete instance of `RuleRetryPolicyInput` via:
//
//	RuleRetryPolicyArgs{...}
type RuleRetryPolicyInput interface {
	pulumi.Input

	ToRuleRetryPolicyOutput() RuleRetryPolicyOutput
	ToRuleRetryPolicyOutputWithContext(context.Context) RuleRetryPolicyOutput
}

type RuleRetryPolicyArgs struct {
	// The maximum amount of time, in seconds, to continue to make retry attempts.
	MaximumEventAgeInSeconds pulumi.IntPtrInput `pulumi:"maximumEventAgeInSeconds"`
	// The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the `MaximumEventAgeInSeconds` is met.
	MaximumRetryAttempts pulumi.IntPtrInput `pulumi:"maximumRetryAttempts"`
}

func (RuleRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetryPolicy)(nil)).Elem()
}

func (i RuleRetryPolicyArgs) ToRuleRetryPolicyOutput() RuleRetryPolicyOutput {
	return i.ToRuleRetryPolicyOutputWithContext(context.Background())
}

func (i RuleRetryPolicyArgs) ToRuleRetryPolicyOutputWithContext(ctx context.Context) RuleRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetryPolicyOutput)
}

func (i RuleRetryPolicyArgs) ToRuleRetryPolicyPtrOutput() RuleRetryPolicyPtrOutput {
	return i.ToRuleRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RuleRetryPolicyArgs) ToRuleRetryPolicyPtrOutputWithContext(ctx context.Context) RuleRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetryPolicyOutput).ToRuleRetryPolicyPtrOutputWithContext(ctx)
}

// RuleRetryPolicyPtrInput is an input type that accepts RuleRetryPolicyArgs, RuleRetryPolicyPtr and RuleRetryPolicyPtrOutput values.
// You can construct a concrete instance of `RuleRetryPolicyPtrInput` via:
//
//	        RuleRetryPolicyArgs{...}
//
//	or:
//
//	        nil
type RuleRetryPolicyPtrInput interface {
	pulumi.Input

	ToRuleRetryPolicyPtrOutput() RuleRetryPolicyPtrOutput
	ToRuleRetryPolicyPtrOutputWithContext(context.Context) RuleRetryPolicyPtrOutput
}

type ruleRetryPolicyPtrType RuleRetryPolicyArgs

func RuleRetryPolicyPtr(v *RuleRetryPolicyArgs) RuleRetryPolicyPtrInput {
	return (*ruleRetryPolicyPtrType)(v)
}

func (*ruleRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRetryPolicy)(nil)).Elem()
}

func (i *ruleRetryPolicyPtrType) ToRuleRetryPolicyPtrOutput() RuleRetryPolicyPtrOutput {
	return i.ToRuleRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *ruleRetryPolicyPtrType) ToRuleRetryPolicyPtrOutputWithContext(ctx context.Context) RuleRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetryPolicyPtrOutput)
}

type RuleRetryPolicyOutput struct{ *pulumi.OutputState }

func (RuleRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetryPolicy)(nil)).Elem()
}

func (o RuleRetryPolicyOutput) ToRuleRetryPolicyOutput() RuleRetryPolicyOutput {
	return o
}

func (o RuleRetryPolicyOutput) ToRuleRetryPolicyOutputWithContext(ctx context.Context) RuleRetryPolicyOutput {
	return o
}

func (o RuleRetryPolicyOutput) ToRuleRetryPolicyPtrOutput() RuleRetryPolicyPtrOutput {
	return o.ToRuleRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RuleRetryPolicyOutput) ToRuleRetryPolicyPtrOutputWithContext(ctx context.Context) RuleRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleRetryPolicy) *RuleRetryPolicy {
		return &v
	}).(RuleRetryPolicyPtrOutput)
}

// The maximum amount of time, in seconds, to continue to make retry attempts.
func (o RuleRetryPolicyOutput) MaximumEventAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleRetryPolicy) *int { return v.MaximumEventAgeInSeconds }).(pulumi.IntPtrOutput)
}

// The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the `MaximumEventAgeInSeconds` is met.
func (o RuleRetryPolicyOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleRetryPolicy) *int { return v.MaximumRetryAttempts }).(pulumi.IntPtrOutput)
}

type RuleRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RuleRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRetryPolicy)(nil)).Elem()
}

func (o RuleRetryPolicyPtrOutput) ToRuleRetryPolicyPtrOutput() RuleRetryPolicyPtrOutput {
	return o
}

func (o RuleRetryPolicyPtrOutput) ToRuleRetryPolicyPtrOutputWithContext(ctx context.Context) RuleRetryPolicyPtrOutput {
	return o
}

func (o RuleRetryPolicyPtrOutput) Elem() RuleRetryPolicyOutput {
	return o.ApplyT(func(v *RuleRetryPolicy) RuleRetryPolicy {
		if v != nil {
			return *v
		}
		var ret RuleRetryPolicy
		return ret
	}).(RuleRetryPolicyOutput)
}

// The maximum amount of time, in seconds, to continue to make retry attempts.
func (o RuleRetryPolicyPtrOutput) MaximumEventAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaximumEventAgeInSeconds
	}).(pulumi.IntPtrOutput)
}

// The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the `MaximumEventAgeInSeconds` is met.
func (o RuleRetryPolicyPtrOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRetryAttempts
	}).(pulumi.IntPtrOutput)
}

type RuleRunCommandParameters struct {
	// Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.
	RunCommandTargets []RuleRunCommandTarget `pulumi:"runCommandTargets"`
}

// RuleRunCommandParametersInput is an input type that accepts RuleRunCommandParametersArgs and RuleRunCommandParametersOutput values.
// You can construct a concrete instance of `RuleRunCommandParametersInput` via:
//
//	RuleRunCommandParametersArgs{...}
type RuleRunCommandParametersInput interface {
	pulumi.Input

	ToRuleRunCommandParametersOutput() RuleRunCommandParametersOutput
	ToRuleRunCommandParametersOutputWithContext(context.Context) RuleRunCommandParametersOutput
}

type RuleRunCommandParametersArgs struct {
	// Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.
	RunCommandTargets RuleRunCommandTargetArrayInput `pulumi:"runCommandTargets"`
}

func (RuleRunCommandParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRunCommandParameters)(nil)).Elem()
}

func (i RuleRunCommandParametersArgs) ToRuleRunCommandParametersOutput() RuleRunCommandParametersOutput {
	return i.ToRuleRunCommandParametersOutputWithContext(context.Background())
}

func (i RuleRunCommandParametersArgs) ToRuleRunCommandParametersOutputWithContext(ctx context.Context) RuleRunCommandParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRunCommandParametersOutput)
}

func (i RuleRunCommandParametersArgs) ToRuleRunCommandParametersPtrOutput() RuleRunCommandParametersPtrOutput {
	return i.ToRuleRunCommandParametersPtrOutputWithContext(context.Background())
}

func (i RuleRunCommandParametersArgs) ToRuleRunCommandParametersPtrOutputWithContext(ctx context.Context) RuleRunCommandParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRunCommandParametersOutput).ToRuleRunCommandParametersPtrOutputWithContext(ctx)
}

// RuleRunCommandParametersPtrInput is an input type that accepts RuleRunCommandParametersArgs, RuleRunCommandParametersPtr and RuleRunCommandParametersPtrOutput values.
// You can construct a concrete instance of `RuleRunCommandParametersPtrInput` via:
//
//	        RuleRunCommandParametersArgs{...}
//
//	or:
//
//	        nil
type RuleRunCommandParametersPtrInput interface {
	pulumi.Input

	ToRuleRunCommandParametersPtrOutput() RuleRunCommandParametersPtrOutput
	ToRuleRunCommandParametersPtrOutputWithContext(context.Context) RuleRunCommandParametersPtrOutput
}

type ruleRunCommandParametersPtrType RuleRunCommandParametersArgs

func RuleRunCommandParametersPtr(v *RuleRunCommandParametersArgs) RuleRunCommandParametersPtrInput {
	return (*ruleRunCommandParametersPtrType)(v)
}

func (*ruleRunCommandParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRunCommandParameters)(nil)).Elem()
}

func (i *ruleRunCommandParametersPtrType) ToRuleRunCommandParametersPtrOutput() RuleRunCommandParametersPtrOutput {
	return i.ToRuleRunCommandParametersPtrOutputWithContext(context.Background())
}

func (i *ruleRunCommandParametersPtrType) ToRuleRunCommandParametersPtrOutputWithContext(ctx context.Context) RuleRunCommandParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRunCommandParametersPtrOutput)
}

type RuleRunCommandParametersOutput struct{ *pulumi.OutputState }

func (RuleRunCommandParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRunCommandParameters)(nil)).Elem()
}

func (o RuleRunCommandParametersOutput) ToRuleRunCommandParametersOutput() RuleRunCommandParametersOutput {
	return o
}

func (o RuleRunCommandParametersOutput) ToRuleRunCommandParametersOutputWithContext(ctx context.Context) RuleRunCommandParametersOutput {
	return o
}

func (o RuleRunCommandParametersOutput) ToRuleRunCommandParametersPtrOutput() RuleRunCommandParametersPtrOutput {
	return o.ToRuleRunCommandParametersPtrOutputWithContext(context.Background())
}

func (o RuleRunCommandParametersOutput) ToRuleRunCommandParametersPtrOutputWithContext(ctx context.Context) RuleRunCommandParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleRunCommandParameters) *RuleRunCommandParameters {
		return &v
	}).(RuleRunCommandParametersPtrOutput)
}

// Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.
func (o RuleRunCommandParametersOutput) RunCommandTargets() RuleRunCommandTargetArrayOutput {
	return o.ApplyT(func(v RuleRunCommandParameters) []RuleRunCommandTarget { return v.RunCommandTargets }).(RuleRunCommandTargetArrayOutput)
}

type RuleRunCommandParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleRunCommandParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRunCommandParameters)(nil)).Elem()
}

func (o RuleRunCommandParametersPtrOutput) ToRuleRunCommandParametersPtrOutput() RuleRunCommandParametersPtrOutput {
	return o
}

func (o RuleRunCommandParametersPtrOutput) ToRuleRunCommandParametersPtrOutputWithContext(ctx context.Context) RuleRunCommandParametersPtrOutput {
	return o
}

func (o RuleRunCommandParametersPtrOutput) Elem() RuleRunCommandParametersOutput {
	return o.ApplyT(func(v *RuleRunCommandParameters) RuleRunCommandParameters {
		if v != nil {
			return *v
		}
		var ret RuleRunCommandParameters
		return ret
	}).(RuleRunCommandParametersOutput)
}

// Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.
func (o RuleRunCommandParametersPtrOutput) RunCommandTargets() RuleRunCommandTargetArrayOutput {
	return o.ApplyT(func(v *RuleRunCommandParameters) []RuleRunCommandTarget {
		if v == nil {
			return nil
		}
		return v.RunCommandTargets
	}).(RuleRunCommandTargetArrayOutput)
}

type RuleRunCommandTarget struct {
	// Can be either `tag:` *tag-key* or `InstanceIds` .
	Key string `pulumi:"key"`
	// If `Key` is `tag:` *tag-key* , `Values` is a list of tag values. If `Key` is `InstanceIds` , `Values` is a list of Amazon EC2 instance IDs.
	Values []string `pulumi:"values"`
}

// RuleRunCommandTargetInput is an input type that accepts RuleRunCommandTargetArgs and RuleRunCommandTargetOutput values.
// You can construct a concrete instance of `RuleRunCommandTargetInput` via:
//
//	RuleRunCommandTargetArgs{...}
type RuleRunCommandTargetInput interface {
	pulumi.Input

	ToRuleRunCommandTargetOutput() RuleRunCommandTargetOutput
	ToRuleRunCommandTargetOutputWithContext(context.Context) RuleRunCommandTargetOutput
}

type RuleRunCommandTargetArgs struct {
	// Can be either `tag:` *tag-key* or `InstanceIds` .
	Key pulumi.StringInput `pulumi:"key"`
	// If `Key` is `tag:` *tag-key* , `Values` is a list of tag values. If `Key` is `InstanceIds` , `Values` is a list of Amazon EC2 instance IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RuleRunCommandTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRunCommandTarget)(nil)).Elem()
}

func (i RuleRunCommandTargetArgs) ToRuleRunCommandTargetOutput() RuleRunCommandTargetOutput {
	return i.ToRuleRunCommandTargetOutputWithContext(context.Background())
}

func (i RuleRunCommandTargetArgs) ToRuleRunCommandTargetOutputWithContext(ctx context.Context) RuleRunCommandTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRunCommandTargetOutput)
}

// RuleRunCommandTargetArrayInput is an input type that accepts RuleRunCommandTargetArray and RuleRunCommandTargetArrayOutput values.
// You can construct a concrete instance of `RuleRunCommandTargetArrayInput` via:
//
//	RuleRunCommandTargetArray{ RuleRunCommandTargetArgs{...} }
type RuleRunCommandTargetArrayInput interface {
	pulumi.Input

	ToRuleRunCommandTargetArrayOutput() RuleRunCommandTargetArrayOutput
	ToRuleRunCommandTargetArrayOutputWithContext(context.Context) RuleRunCommandTargetArrayOutput
}

type RuleRunCommandTargetArray []RuleRunCommandTargetInput

func (RuleRunCommandTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRunCommandTarget)(nil)).Elem()
}

func (i RuleRunCommandTargetArray) ToRuleRunCommandTargetArrayOutput() RuleRunCommandTargetArrayOutput {
	return i.ToRuleRunCommandTargetArrayOutputWithContext(context.Background())
}

func (i RuleRunCommandTargetArray) ToRuleRunCommandTargetArrayOutputWithContext(ctx context.Context) RuleRunCommandTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRunCommandTargetArrayOutput)
}

type RuleRunCommandTargetOutput struct{ *pulumi.OutputState }

func (RuleRunCommandTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRunCommandTarget)(nil)).Elem()
}

func (o RuleRunCommandTargetOutput) ToRuleRunCommandTargetOutput() RuleRunCommandTargetOutput {
	return o
}

func (o RuleRunCommandTargetOutput) ToRuleRunCommandTargetOutputWithContext(ctx context.Context) RuleRunCommandTargetOutput {
	return o
}

// Can be either `tag:` *tag-key* or `InstanceIds` .
func (o RuleRunCommandTargetOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RuleRunCommandTarget) string { return v.Key }).(pulumi.StringOutput)
}

// If `Key` is `tag:` *tag-key* , `Values` is a list of tag values. If `Key` is `InstanceIds` , `Values` is a list of Amazon EC2 instance IDs.
func (o RuleRunCommandTargetOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleRunCommandTarget) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RuleRunCommandTargetArrayOutput struct{ *pulumi.OutputState }

func (RuleRunCommandTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleRunCommandTarget)(nil)).Elem()
}

func (o RuleRunCommandTargetArrayOutput) ToRuleRunCommandTargetArrayOutput() RuleRunCommandTargetArrayOutput {
	return o
}

func (o RuleRunCommandTargetArrayOutput) ToRuleRunCommandTargetArrayOutputWithContext(ctx context.Context) RuleRunCommandTargetArrayOutput {
	return o
}

func (o RuleRunCommandTargetArrayOutput) Index(i pulumi.IntInput) RuleRunCommandTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleRunCommandTarget {
		return vs[0].([]RuleRunCommandTarget)[vs[1].(int)]
	}).(RuleRunCommandTargetOutput)
}

type RuleSageMakerPipelineParameter struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name string `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value string `pulumi:"value"`
}

// RuleSageMakerPipelineParameterInput is an input type that accepts RuleSageMakerPipelineParameterArgs and RuleSageMakerPipelineParameterOutput values.
// You can construct a concrete instance of `RuleSageMakerPipelineParameterInput` via:
//
//	RuleSageMakerPipelineParameterArgs{...}
type RuleSageMakerPipelineParameterInput interface {
	pulumi.Input

	ToRuleSageMakerPipelineParameterOutput() RuleSageMakerPipelineParameterOutput
	ToRuleSageMakerPipelineParameterOutputWithContext(context.Context) RuleSageMakerPipelineParameterOutput
}

type RuleSageMakerPipelineParameterArgs struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RuleSageMakerPipelineParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSageMakerPipelineParameter)(nil)).Elem()
}

func (i RuleSageMakerPipelineParameterArgs) ToRuleSageMakerPipelineParameterOutput() RuleSageMakerPipelineParameterOutput {
	return i.ToRuleSageMakerPipelineParameterOutputWithContext(context.Background())
}

func (i RuleSageMakerPipelineParameterArgs) ToRuleSageMakerPipelineParameterOutputWithContext(ctx context.Context) RuleSageMakerPipelineParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSageMakerPipelineParameterOutput)
}

// RuleSageMakerPipelineParameterArrayInput is an input type that accepts RuleSageMakerPipelineParameterArray and RuleSageMakerPipelineParameterArrayOutput values.
// You can construct a concrete instance of `RuleSageMakerPipelineParameterArrayInput` via:
//
//	RuleSageMakerPipelineParameterArray{ RuleSageMakerPipelineParameterArgs{...} }
type RuleSageMakerPipelineParameterArrayInput interface {
	pulumi.Input

	ToRuleSageMakerPipelineParameterArrayOutput() RuleSageMakerPipelineParameterArrayOutput
	ToRuleSageMakerPipelineParameterArrayOutputWithContext(context.Context) RuleSageMakerPipelineParameterArrayOutput
}

type RuleSageMakerPipelineParameterArray []RuleSageMakerPipelineParameterInput

func (RuleSageMakerPipelineParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSageMakerPipelineParameter)(nil)).Elem()
}

func (i RuleSageMakerPipelineParameterArray) ToRuleSageMakerPipelineParameterArrayOutput() RuleSageMakerPipelineParameterArrayOutput {
	return i.ToRuleSageMakerPipelineParameterArrayOutputWithContext(context.Background())
}

func (i RuleSageMakerPipelineParameterArray) ToRuleSageMakerPipelineParameterArrayOutputWithContext(ctx context.Context) RuleSageMakerPipelineParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSageMakerPipelineParameterArrayOutput)
}

type RuleSageMakerPipelineParameterOutput struct{ *pulumi.OutputState }

func (RuleSageMakerPipelineParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSageMakerPipelineParameter)(nil)).Elem()
}

func (o RuleSageMakerPipelineParameterOutput) ToRuleSageMakerPipelineParameterOutput() RuleSageMakerPipelineParameterOutput {
	return o
}

func (o RuleSageMakerPipelineParameterOutput) ToRuleSageMakerPipelineParameterOutputWithContext(ctx context.Context) RuleSageMakerPipelineParameterOutput {
	return o
}

// Name of parameter to start execution of a SageMaker Model Building Pipeline.
func (o RuleSageMakerPipelineParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuleSageMakerPipelineParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline.
func (o RuleSageMakerPipelineParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RuleSageMakerPipelineParameter) string { return v.Value }).(pulumi.StringOutput)
}

type RuleSageMakerPipelineParameterArrayOutput struct{ *pulumi.OutputState }

func (RuleSageMakerPipelineParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleSageMakerPipelineParameter)(nil)).Elem()
}

func (o RuleSageMakerPipelineParameterArrayOutput) ToRuleSageMakerPipelineParameterArrayOutput() RuleSageMakerPipelineParameterArrayOutput {
	return o
}

func (o RuleSageMakerPipelineParameterArrayOutput) ToRuleSageMakerPipelineParameterArrayOutputWithContext(ctx context.Context) RuleSageMakerPipelineParameterArrayOutput {
	return o
}

func (o RuleSageMakerPipelineParameterArrayOutput) Index(i pulumi.IntInput) RuleSageMakerPipelineParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleSageMakerPipelineParameter {
		return vs[0].([]RuleSageMakerPipelineParameter)[vs[1].(int)]
	}).(RuleSageMakerPipelineParameterOutput)
}

type RuleSageMakerPipelineParameters struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution.
	PipelineParameterList []RuleSageMakerPipelineParameter `pulumi:"pipelineParameterList"`
}

// RuleSageMakerPipelineParametersInput is an input type that accepts RuleSageMakerPipelineParametersArgs and RuleSageMakerPipelineParametersOutput values.
// You can construct a concrete instance of `RuleSageMakerPipelineParametersInput` via:
//
//	RuleSageMakerPipelineParametersArgs{...}
type RuleSageMakerPipelineParametersInput interface {
	pulumi.Input

	ToRuleSageMakerPipelineParametersOutput() RuleSageMakerPipelineParametersOutput
	ToRuleSageMakerPipelineParametersOutputWithContext(context.Context) RuleSageMakerPipelineParametersOutput
}

type RuleSageMakerPipelineParametersArgs struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution.
	PipelineParameterList RuleSageMakerPipelineParameterArrayInput `pulumi:"pipelineParameterList"`
}

func (RuleSageMakerPipelineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSageMakerPipelineParameters)(nil)).Elem()
}

func (i RuleSageMakerPipelineParametersArgs) ToRuleSageMakerPipelineParametersOutput() RuleSageMakerPipelineParametersOutput {
	return i.ToRuleSageMakerPipelineParametersOutputWithContext(context.Background())
}

func (i RuleSageMakerPipelineParametersArgs) ToRuleSageMakerPipelineParametersOutputWithContext(ctx context.Context) RuleSageMakerPipelineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSageMakerPipelineParametersOutput)
}

func (i RuleSageMakerPipelineParametersArgs) ToRuleSageMakerPipelineParametersPtrOutput() RuleSageMakerPipelineParametersPtrOutput {
	return i.ToRuleSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i RuleSageMakerPipelineParametersArgs) ToRuleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) RuleSageMakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSageMakerPipelineParametersOutput).ToRuleSageMakerPipelineParametersPtrOutputWithContext(ctx)
}

// RuleSageMakerPipelineParametersPtrInput is an input type that accepts RuleSageMakerPipelineParametersArgs, RuleSageMakerPipelineParametersPtr and RuleSageMakerPipelineParametersPtrOutput values.
// You can construct a concrete instance of `RuleSageMakerPipelineParametersPtrInput` via:
//
//	        RuleSageMakerPipelineParametersArgs{...}
//
//	or:
//
//	        nil
type RuleSageMakerPipelineParametersPtrInput interface {
	pulumi.Input

	ToRuleSageMakerPipelineParametersPtrOutput() RuleSageMakerPipelineParametersPtrOutput
	ToRuleSageMakerPipelineParametersPtrOutputWithContext(context.Context) RuleSageMakerPipelineParametersPtrOutput
}

type ruleSageMakerPipelineParametersPtrType RuleSageMakerPipelineParametersArgs

func RuleSageMakerPipelineParametersPtr(v *RuleSageMakerPipelineParametersArgs) RuleSageMakerPipelineParametersPtrInput {
	return (*ruleSageMakerPipelineParametersPtrType)(v)
}

func (*ruleSageMakerPipelineParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSageMakerPipelineParameters)(nil)).Elem()
}

func (i *ruleSageMakerPipelineParametersPtrType) ToRuleSageMakerPipelineParametersPtrOutput() RuleSageMakerPipelineParametersPtrOutput {
	return i.ToRuleSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i *ruleSageMakerPipelineParametersPtrType) ToRuleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) RuleSageMakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSageMakerPipelineParametersPtrOutput)
}

type RuleSageMakerPipelineParametersOutput struct{ *pulumi.OutputState }

func (RuleSageMakerPipelineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSageMakerPipelineParameters)(nil)).Elem()
}

func (o RuleSageMakerPipelineParametersOutput) ToRuleSageMakerPipelineParametersOutput() RuleSageMakerPipelineParametersOutput {
	return o
}

func (o RuleSageMakerPipelineParametersOutput) ToRuleSageMakerPipelineParametersOutputWithContext(ctx context.Context) RuleSageMakerPipelineParametersOutput {
	return o
}

func (o RuleSageMakerPipelineParametersOutput) ToRuleSageMakerPipelineParametersPtrOutput() RuleSageMakerPipelineParametersPtrOutput {
	return o.ToRuleSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (o RuleSageMakerPipelineParametersOutput) ToRuleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) RuleSageMakerPipelineParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleSageMakerPipelineParameters) *RuleSageMakerPipelineParameters {
		return &v
	}).(RuleSageMakerPipelineParametersPtrOutput)
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution.
func (o RuleSageMakerPipelineParametersOutput) PipelineParameterList() RuleSageMakerPipelineParameterArrayOutput {
	return o.ApplyT(func(v RuleSageMakerPipelineParameters) []RuleSageMakerPipelineParameter {
		return v.PipelineParameterList
	}).(RuleSageMakerPipelineParameterArrayOutput)
}

type RuleSageMakerPipelineParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleSageMakerPipelineParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSageMakerPipelineParameters)(nil)).Elem()
}

func (o RuleSageMakerPipelineParametersPtrOutput) ToRuleSageMakerPipelineParametersPtrOutput() RuleSageMakerPipelineParametersPtrOutput {
	return o
}

func (o RuleSageMakerPipelineParametersPtrOutput) ToRuleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) RuleSageMakerPipelineParametersPtrOutput {
	return o
}

func (o RuleSageMakerPipelineParametersPtrOutput) Elem() RuleSageMakerPipelineParametersOutput {
	return o.ApplyT(func(v *RuleSageMakerPipelineParameters) RuleSageMakerPipelineParameters {
		if v != nil {
			return *v
		}
		var ret RuleSageMakerPipelineParameters
		return ret
	}).(RuleSageMakerPipelineParametersOutput)
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution.
func (o RuleSageMakerPipelineParametersPtrOutput) PipelineParameterList() RuleSageMakerPipelineParameterArrayOutput {
	return o.ApplyT(func(v *RuleSageMakerPipelineParameters) []RuleSageMakerPipelineParameter {
		if v == nil {
			return nil
		}
		return v.PipelineParameterList
	}).(RuleSageMakerPipelineParameterArrayOutput)
}

type RuleSqsParameters struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId string `pulumi:"messageGroupId"`
}

// RuleSqsParametersInput is an input type that accepts RuleSqsParametersArgs and RuleSqsParametersOutput values.
// You can construct a concrete instance of `RuleSqsParametersInput` via:
//
//	RuleSqsParametersArgs{...}
type RuleSqsParametersInput interface {
	pulumi.Input

	ToRuleSqsParametersOutput() RuleSqsParametersOutput
	ToRuleSqsParametersOutputWithContext(context.Context) RuleSqsParametersOutput
}

type RuleSqsParametersArgs struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumi.StringInput `pulumi:"messageGroupId"`
}

func (RuleSqsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSqsParameters)(nil)).Elem()
}

func (i RuleSqsParametersArgs) ToRuleSqsParametersOutput() RuleSqsParametersOutput {
	return i.ToRuleSqsParametersOutputWithContext(context.Background())
}

func (i RuleSqsParametersArgs) ToRuleSqsParametersOutputWithContext(ctx context.Context) RuleSqsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSqsParametersOutput)
}

func (i RuleSqsParametersArgs) ToRuleSqsParametersPtrOutput() RuleSqsParametersPtrOutput {
	return i.ToRuleSqsParametersPtrOutputWithContext(context.Background())
}

func (i RuleSqsParametersArgs) ToRuleSqsParametersPtrOutputWithContext(ctx context.Context) RuleSqsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSqsParametersOutput).ToRuleSqsParametersPtrOutputWithContext(ctx)
}

// RuleSqsParametersPtrInput is an input type that accepts RuleSqsParametersArgs, RuleSqsParametersPtr and RuleSqsParametersPtrOutput values.
// You can construct a concrete instance of `RuleSqsParametersPtrInput` via:
//
//	        RuleSqsParametersArgs{...}
//
//	or:
//
//	        nil
type RuleSqsParametersPtrInput interface {
	pulumi.Input

	ToRuleSqsParametersPtrOutput() RuleSqsParametersPtrOutput
	ToRuleSqsParametersPtrOutputWithContext(context.Context) RuleSqsParametersPtrOutput
}

type ruleSqsParametersPtrType RuleSqsParametersArgs

func RuleSqsParametersPtr(v *RuleSqsParametersArgs) RuleSqsParametersPtrInput {
	return (*ruleSqsParametersPtrType)(v)
}

func (*ruleSqsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSqsParameters)(nil)).Elem()
}

func (i *ruleSqsParametersPtrType) ToRuleSqsParametersPtrOutput() RuleSqsParametersPtrOutput {
	return i.ToRuleSqsParametersPtrOutputWithContext(context.Background())
}

func (i *ruleSqsParametersPtrType) ToRuleSqsParametersPtrOutputWithContext(ctx context.Context) RuleSqsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleSqsParametersPtrOutput)
}

type RuleSqsParametersOutput struct{ *pulumi.OutputState }

func (RuleSqsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleSqsParameters)(nil)).Elem()
}

func (o RuleSqsParametersOutput) ToRuleSqsParametersOutput() RuleSqsParametersOutput {
	return o
}

func (o RuleSqsParametersOutput) ToRuleSqsParametersOutputWithContext(ctx context.Context) RuleSqsParametersOutput {
	return o
}

func (o RuleSqsParametersOutput) ToRuleSqsParametersPtrOutput() RuleSqsParametersPtrOutput {
	return o.ToRuleSqsParametersPtrOutputWithContext(context.Background())
}

func (o RuleSqsParametersOutput) ToRuleSqsParametersPtrOutputWithContext(ctx context.Context) RuleSqsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleSqsParameters) *RuleSqsParameters {
		return &v
	}).(RuleSqsParametersPtrOutput)
}

// The FIFO message group ID to use as the target.
func (o RuleSqsParametersOutput) MessageGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleSqsParameters) string { return v.MessageGroupId }).(pulumi.StringOutput)
}

type RuleSqsParametersPtrOutput struct{ *pulumi.OutputState }

func (RuleSqsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleSqsParameters)(nil)).Elem()
}

func (o RuleSqsParametersPtrOutput) ToRuleSqsParametersPtrOutput() RuleSqsParametersPtrOutput {
	return o
}

func (o RuleSqsParametersPtrOutput) ToRuleSqsParametersPtrOutputWithContext(ctx context.Context) RuleSqsParametersPtrOutput {
	return o
}

func (o RuleSqsParametersPtrOutput) Elem() RuleSqsParametersOutput {
	return o.ApplyT(func(v *RuleSqsParameters) RuleSqsParameters {
		if v != nil {
			return *v
		}
		var ret RuleSqsParameters
		return ret
	}).(RuleSqsParametersOutput)
}

// The FIFO message group ID to use as the target.
func (o RuleSqsParametersPtrOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleSqsParameters) *string {
		if v == nil {
			return nil
		}
		return &v.MessageGroupId
	}).(pulumi.StringPtrOutput)
}

type RuleTag struct {
	// A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
	Key *string `pulumi:"key"`
	// The value for the specified tag key.
	Value *string `pulumi:"value"`
}

// RuleTagInput is an input type that accepts RuleTagArgs and RuleTagOutput values.
// You can construct a concrete instance of `RuleTagInput` via:
//
//	RuleTagArgs{...}
type RuleTagInput interface {
	pulumi.Input

	ToRuleTagOutput() RuleTagOutput
	ToRuleTagOutputWithContext(context.Context) RuleTagOutput
}

type RuleTagArgs struct {
	// A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The value for the specified tag key.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTag)(nil)).Elem()
}

func (i RuleTagArgs) ToRuleTagOutput() RuleTagOutput {
	return i.ToRuleTagOutputWithContext(context.Background())
}

func (i RuleTagArgs) ToRuleTagOutputWithContext(ctx context.Context) RuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTagOutput)
}

// RuleTagArrayInput is an input type that accepts RuleTagArray and RuleTagArrayOutput values.
// You can construct a concrete instance of `RuleTagArrayInput` via:
//
//	RuleTagArray{ RuleTagArgs{...} }
type RuleTagArrayInput interface {
	pulumi.Input

	ToRuleTagArrayOutput() RuleTagArrayOutput
	ToRuleTagArrayOutputWithContext(context.Context) RuleTagArrayOutput
}

type RuleTagArray []RuleTagInput

func (RuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTag)(nil)).Elem()
}

func (i RuleTagArray) ToRuleTagArrayOutput() RuleTagArrayOutput {
	return i.ToRuleTagArrayOutputWithContext(context.Background())
}

func (i RuleTagArray) ToRuleTagArrayOutputWithContext(ctx context.Context) RuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTagArrayOutput)
}

type RuleTagOutput struct{ *pulumi.OutputState }

func (RuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTag)(nil)).Elem()
}

func (o RuleTagOutput) ToRuleTagOutput() RuleTagOutput {
	return o
}

func (o RuleTagOutput) ToRuleTagOutputWithContext(ctx context.Context) RuleTagOutput {
	return o
}

// A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
func (o RuleTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The value for the specified tag key.
func (o RuleTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RuleTagArrayOutput struct{ *pulumi.OutputState }

func (RuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTag)(nil)).Elem()
}

func (o RuleTagArrayOutput) ToRuleTagArrayOutput() RuleTagArrayOutput {
	return o
}

func (o RuleTagArrayOutput) ToRuleTagArrayOutputWithContext(ctx context.Context) RuleTagArrayOutput {
	return o
}

func (o RuleTagArrayOutput) Index(i pulumi.IntInput) RuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleTag {
		return vs[0].([]RuleTag)[vs[1].(int)]
	}).(RuleTagOutput)
}

type RuleTarget struct {
	// Contains the GraphQL operation to be parsed and executed, if the event target is an AWS AppSync API.
	AppSyncParameters *RuleAppSyncParameters `pulumi:"appSyncParameters"`
	// The Amazon Resource Name (ARN) of the target.
	Arn string `pulumi:"arn"`
	// If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see [Jobs](https://docs.aws.amazon.com/batch/latest/userguide/jobs.html) in the *AWS Batch User Guide* .
	BatchParameters *RuleBatchParameters `pulumi:"batchParameters"`
	// The `DeadLetterConfig` that defines the target queue to send dead-letter queue events to.
	DeadLetterConfig *RuleDeadLetterConfig `pulumi:"deadLetterConfig"`
	// Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see [Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon EC2 Container Service Developer Guide* .
	EcsParameters *RuleEcsParameters `pulumi:"ecsParameters"`
	// Contains the HTTP parameters to use when the target is a API Gateway endpoint or EventBridge ApiDestination.
	//
	// If you specify an API Gateway API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
	HttpParameters *RuleHttpParameters `pulumi:"httpParameters"`
	// The ID of the target within the specified rule. Use this ID to reference the target when updating the rule. We recommend using a memorable and unique string.
	Id string `pulumi:"id"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://docs.aws.amazon.com/http://www.rfc-editor.org/rfc/rfc7159.txt) .
	Input *string `pulumi:"input"`
	// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You may use JSON dot notation or bracket notation. For more information about JSON paths, see [JSONPath](https://docs.aws.amazon.com/http://goessner.net/articles/JsonPath/) .
	InputPath *string `pulumi:"inputPath"`
	// Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.
	InputTransformer *RuleInputTransformer `pulumi:"inputTransformer"`
	// The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the `eventId` as the partition key.
	KinesisParameters *RuleKinesisParameters `pulumi:"kinesisParameters"`
	// Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift cluster.
	//
	// If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
	RedshiftDataParameters *RuleRedshiftDataParameters `pulumi:"redshiftDataParameters"`
	// The `RetryPolicy` object that contains the retry policy configuration to use for the dead-letter queue.
	RetryPolicy *RuleRetryPolicy `pulumi:"retryPolicy"`
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.
	RoleArn *string `pulumi:"roleArn"`
	// Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
	RunCommandParameters *RuleRunCommandParameters `pulumi:"runCommandParameters"`
	// Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline.
	//
	// If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.
	SageMakerPipelineParameters *RuleSageMakerPipelineParameters `pulumi:"sageMakerPipelineParameters"`
	// Contains the message group ID to use when the target is a FIFO queue.
	//
	// If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
	SqsParameters *RuleSqsParameters `pulumi:"sqsParameters"`
}

// RuleTargetInput is an input type that accepts RuleTargetArgs and RuleTargetOutput values.
// You can construct a concrete instance of `RuleTargetInput` via:
//
//	RuleTargetArgs{...}
type RuleTargetInput interface {
	pulumi.Input

	ToRuleTargetOutput() RuleTargetOutput
	ToRuleTargetOutputWithContext(context.Context) RuleTargetOutput
}

type RuleTargetArgs struct {
	// Contains the GraphQL operation to be parsed and executed, if the event target is an AWS AppSync API.
	AppSyncParameters RuleAppSyncParametersPtrInput `pulumi:"appSyncParameters"`
	// The Amazon Resource Name (ARN) of the target.
	Arn pulumi.StringInput `pulumi:"arn"`
	// If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see [Jobs](https://docs.aws.amazon.com/batch/latest/userguide/jobs.html) in the *AWS Batch User Guide* .
	BatchParameters RuleBatchParametersPtrInput `pulumi:"batchParameters"`
	// The `DeadLetterConfig` that defines the target queue to send dead-letter queue events to.
	DeadLetterConfig RuleDeadLetterConfigPtrInput `pulumi:"deadLetterConfig"`
	// Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see [Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon EC2 Container Service Developer Guide* .
	EcsParameters RuleEcsParametersPtrInput `pulumi:"ecsParameters"`
	// Contains the HTTP parameters to use when the target is a API Gateway endpoint or EventBridge ApiDestination.
	//
	// If you specify an API Gateway API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
	HttpParameters RuleHttpParametersPtrInput `pulumi:"httpParameters"`
	// The ID of the target within the specified rule. Use this ID to reference the target when updating the rule. We recommend using a memorable and unique string.
	Id pulumi.StringInput `pulumi:"id"`
	// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://docs.aws.amazon.com/http://www.rfc-editor.org/rfc/rfc7159.txt) .
	Input pulumi.StringPtrInput `pulumi:"input"`
	// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You may use JSON dot notation or bracket notation. For more information about JSON paths, see [JSONPath](https://docs.aws.amazon.com/http://goessner.net/articles/JsonPath/) .
	InputPath pulumi.StringPtrInput `pulumi:"inputPath"`
	// Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.
	InputTransformer RuleInputTransformerPtrInput `pulumi:"inputTransformer"`
	// The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the `eventId` as the partition key.
	KinesisParameters RuleKinesisParametersPtrInput `pulumi:"kinesisParameters"`
	// Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift cluster.
	//
	// If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
	RedshiftDataParameters RuleRedshiftDataParametersPtrInput `pulumi:"redshiftDataParameters"`
	// The `RetryPolicy` object that contains the retry policy configuration to use for the dead-letter queue.
	RetryPolicy RuleRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
	RunCommandParameters RuleRunCommandParametersPtrInput `pulumi:"runCommandParameters"`
	// Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline.
	//
	// If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.
	SageMakerPipelineParameters RuleSageMakerPipelineParametersPtrInput `pulumi:"sageMakerPipelineParameters"`
	// Contains the message group ID to use when the target is a FIFO queue.
	//
	// If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
	SqsParameters RuleSqsParametersPtrInput `pulumi:"sqsParameters"`
}

func (RuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTarget)(nil)).Elem()
}

func (i RuleTargetArgs) ToRuleTargetOutput() RuleTargetOutput {
	return i.ToRuleTargetOutputWithContext(context.Background())
}

func (i RuleTargetArgs) ToRuleTargetOutputWithContext(ctx context.Context) RuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTargetOutput)
}

// RuleTargetArrayInput is an input type that accepts RuleTargetArray and RuleTargetArrayOutput values.
// You can construct a concrete instance of `RuleTargetArrayInput` via:
//
//	RuleTargetArray{ RuleTargetArgs{...} }
type RuleTargetArrayInput interface {
	pulumi.Input

	ToRuleTargetArrayOutput() RuleTargetArrayOutput
	ToRuleTargetArrayOutputWithContext(context.Context) RuleTargetArrayOutput
}

type RuleTargetArray []RuleTargetInput

func (RuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTarget)(nil)).Elem()
}

func (i RuleTargetArray) ToRuleTargetArrayOutput() RuleTargetArrayOutput {
	return i.ToRuleTargetArrayOutputWithContext(context.Background())
}

func (i RuleTargetArray) ToRuleTargetArrayOutputWithContext(ctx context.Context) RuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTargetArrayOutput)
}

type RuleTargetOutput struct{ *pulumi.OutputState }

func (RuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTarget)(nil)).Elem()
}

func (o RuleTargetOutput) ToRuleTargetOutput() RuleTargetOutput {
	return o
}

func (o RuleTargetOutput) ToRuleTargetOutputWithContext(ctx context.Context) RuleTargetOutput {
	return o
}

// Contains the GraphQL operation to be parsed and executed, if the event target is an AWS AppSync API.
func (o RuleTargetOutput) AppSyncParameters() RuleAppSyncParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleAppSyncParameters { return v.AppSyncParameters }).(RuleAppSyncParametersPtrOutput)
}

// The Amazon Resource Name (ARN) of the target.
func (o RuleTargetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTarget) string { return v.Arn }).(pulumi.StringOutput)
}

// If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see [Jobs](https://docs.aws.amazon.com/batch/latest/userguide/jobs.html) in the *AWS Batch User Guide* .
func (o RuleTargetOutput) BatchParameters() RuleBatchParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleBatchParameters { return v.BatchParameters }).(RuleBatchParametersPtrOutput)
}

// The `DeadLetterConfig` that defines the target queue to send dead-letter queue events to.
func (o RuleTargetOutput) DeadLetterConfig() RuleDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleDeadLetterConfig { return v.DeadLetterConfig }).(RuleDeadLetterConfigPtrOutput)
}

// Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see [Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon EC2 Container Service Developer Guide* .
func (o RuleTargetOutput) EcsParameters() RuleEcsParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleEcsParameters { return v.EcsParameters }).(RuleEcsParametersPtrOutput)
}

// Contains the HTTP parameters to use when the target is a API Gateway endpoint or EventBridge ApiDestination.
//
// If you specify an API Gateway API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
func (o RuleTargetOutput) HttpParameters() RuleHttpParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleHttpParameters { return v.HttpParameters }).(RuleHttpParametersPtrOutput)
}

// The ID of the target within the specified rule. Use this ID to reference the target when updating the rule. We recommend using a memorable and unique string.
func (o RuleTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTarget) string { return v.Id }).(pulumi.StringOutput)
}

// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://docs.aws.amazon.com/http://www.rfc-editor.org/rfc/rfc7159.txt) .
func (o RuleTargetOutput) Input() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTarget) *string { return v.Input }).(pulumi.StringPtrOutput)
}

// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You may use JSON dot notation or bracket notation. For more information about JSON paths, see [JSONPath](https://docs.aws.amazon.com/http://goessner.net/articles/JsonPath/) .
func (o RuleTargetOutput) InputPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTarget) *string { return v.InputPath }).(pulumi.StringPtrOutput)
}

// Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.
func (o RuleTargetOutput) InputTransformer() RuleInputTransformerPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleInputTransformer { return v.InputTransformer }).(RuleInputTransformerPtrOutput)
}

// The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the `eventId` as the partition key.
func (o RuleTargetOutput) KinesisParameters() RuleKinesisParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleKinesisParameters { return v.KinesisParameters }).(RuleKinesisParametersPtrOutput)
}

// Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift cluster.
//
// If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
func (o RuleTargetOutput) RedshiftDataParameters() RuleRedshiftDataParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleRedshiftDataParameters { return v.RedshiftDataParameters }).(RuleRedshiftDataParametersPtrOutput)
}

// The `RetryPolicy` object that contains the retry policy configuration to use for the dead-letter queue.
func (o RuleTargetOutput) RetryPolicy() RuleRetryPolicyPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleRetryPolicy { return v.RetryPolicy }).(RuleRetryPolicyPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.
func (o RuleTargetOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTarget) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
func (o RuleTargetOutput) RunCommandParameters() RuleRunCommandParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleRunCommandParameters { return v.RunCommandParameters }).(RuleRunCommandParametersPtrOutput)
}

// Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline.
//
// If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.
func (o RuleTargetOutput) SageMakerPipelineParameters() RuleSageMakerPipelineParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleSageMakerPipelineParameters { return v.SageMakerPipelineParameters }).(RuleSageMakerPipelineParametersPtrOutput)
}

// Contains the message group ID to use when the target is a FIFO queue.
//
// If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
func (o RuleTargetOutput) SqsParameters() RuleSqsParametersPtrOutput {
	return o.ApplyT(func(v RuleTarget) *RuleSqsParameters { return v.SqsParameters }).(RuleSqsParametersPtrOutput)
}

type RuleTargetArrayOutput struct{ *pulumi.OutputState }

func (RuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTarget)(nil)).Elem()
}

func (o RuleTargetArrayOutput) ToRuleTargetArrayOutput() RuleTargetArrayOutput {
	return o
}

func (o RuleTargetArrayOutput) ToRuleTargetArrayOutputWithContext(ctx context.Context) RuleTargetArrayOutput {
	return o
}

func (o RuleTargetArrayOutput) Index(i pulumi.IntInput) RuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleTarget {
		return vs[0].([]RuleTarget)[vs[1].(int)]
	}).(RuleTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionApiKeyAuthParametersInput)(nil)).Elem(), ConnectionApiKeyAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionApiKeyAuthParametersPtrInput)(nil)).Elem(), ConnectionApiKeyAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionAuthParametersInput)(nil)).Elem(), ConnectionAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBasicAuthParametersInput)(nil)).Elem(), ConnectionBasicAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionBasicAuthParametersPtrInput)(nil)).Elem(), ConnectionBasicAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClientParametersInput)(nil)).Elem(), ConnectionClientParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClientParametersPtrInput)(nil)).Elem(), ConnectionClientParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionHttpParametersInput)(nil)).Elem(), ConnectionHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionHttpParametersPtrInput)(nil)).Elem(), ConnectionHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionOAuthParametersInput)(nil)).Elem(), ConnectionOAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionOAuthParametersPtrInput)(nil)).Elem(), ConnectionOAuthParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionParameterInput)(nil)).Elem(), ConnectionParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionParameterArrayInput)(nil)).Elem(), ConnectionParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeadLetterConfigPropertiesInput)(nil)).Elem(), DeadLetterConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeadLetterConfigPropertiesPtrInput)(nil)).Elem(), DeadLetterConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointEventBusInput)(nil)).Elem(), EndpointEventBusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointEventBusArrayInput)(nil)).Elem(), EndpointEventBusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointFailoverConfigInput)(nil)).Elem(), EndpointFailoverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointPrimaryInput)(nil)).Elem(), EndpointPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointReplicationConfigInput)(nil)).Elem(), EndpointReplicationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointReplicationConfigPtrInput)(nil)).Elem(), EndpointReplicationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointRoutingConfigInput)(nil)).Elem(), EndpointRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointSecondaryInput)(nil)).Elem(), EndpointSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleAppSyncParametersInput)(nil)).Elem(), RuleAppSyncParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleAppSyncParametersPtrInput)(nil)).Elem(), RuleAppSyncParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleAwsVpcConfigurationInput)(nil)).Elem(), RuleAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleAwsVpcConfigurationPtrInput)(nil)).Elem(), RuleAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBatchArrayPropertiesInput)(nil)).Elem(), RuleBatchArrayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBatchArrayPropertiesPtrInput)(nil)).Elem(), RuleBatchArrayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBatchParametersInput)(nil)).Elem(), RuleBatchParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBatchParametersPtrInput)(nil)).Elem(), RuleBatchParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBatchRetryStrategyInput)(nil)).Elem(), RuleBatchRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleBatchRetryStrategyPtrInput)(nil)).Elem(), RuleBatchRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleCapacityProviderStrategyItemInput)(nil)).Elem(), RuleCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleCapacityProviderStrategyItemArrayInput)(nil)).Elem(), RuleCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDeadLetterConfigInput)(nil)).Elem(), RuleDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleDeadLetterConfigPtrInput)(nil)).Elem(), RuleDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsParametersInput)(nil)).Elem(), RuleEcsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleEcsParametersPtrInput)(nil)).Elem(), RuleEcsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleHttpParametersInput)(nil)).Elem(), RuleHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleHttpParametersPtrInput)(nil)).Elem(), RuleHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInputTransformerInput)(nil)).Elem(), RuleInputTransformerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInputTransformerPtrInput)(nil)).Elem(), RuleInputTransformerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleKinesisParametersInput)(nil)).Elem(), RuleKinesisParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleKinesisParametersPtrInput)(nil)).Elem(), RuleKinesisParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleNetworkConfigurationInput)(nil)).Elem(), RuleNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleNetworkConfigurationPtrInput)(nil)).Elem(), RuleNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePlacementConstraintInput)(nil)).Elem(), RulePlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePlacementConstraintArrayInput)(nil)).Elem(), RulePlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePlacementStrategyInput)(nil)).Elem(), RulePlacementStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePlacementStrategyArrayInput)(nil)).Elem(), RulePlacementStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRedshiftDataParametersInput)(nil)).Elem(), RuleRedshiftDataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRedshiftDataParametersPtrInput)(nil)).Elem(), RuleRedshiftDataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRetryPolicyInput)(nil)).Elem(), RuleRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRetryPolicyPtrInput)(nil)).Elem(), RuleRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRunCommandParametersInput)(nil)).Elem(), RuleRunCommandParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRunCommandParametersPtrInput)(nil)).Elem(), RuleRunCommandParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRunCommandTargetInput)(nil)).Elem(), RuleRunCommandTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRunCommandTargetArrayInput)(nil)).Elem(), RuleRunCommandTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSageMakerPipelineParameterInput)(nil)).Elem(), RuleSageMakerPipelineParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSageMakerPipelineParameterArrayInput)(nil)).Elem(), RuleSageMakerPipelineParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSageMakerPipelineParametersInput)(nil)).Elem(), RuleSageMakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSageMakerPipelineParametersPtrInput)(nil)).Elem(), RuleSageMakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSqsParametersInput)(nil)).Elem(), RuleSqsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleSqsParametersPtrInput)(nil)).Elem(), RuleSqsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTagInput)(nil)).Elem(), RuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTagArrayInput)(nil)).Elem(), RuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTargetInput)(nil)).Elem(), RuleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTargetArrayInput)(nil)).Elem(), RuleTargetArray{})
	pulumi.RegisterOutputType(ConnectionApiKeyAuthParametersOutput{})
	pulumi.RegisterOutputType(ConnectionApiKeyAuthParametersPtrOutput{})
	pulumi.RegisterOutputType(ConnectionAuthParametersOutput{})
	pulumi.RegisterOutputType(ConnectionBasicAuthParametersOutput{})
	pulumi.RegisterOutputType(ConnectionBasicAuthParametersPtrOutput{})
	pulumi.RegisterOutputType(ConnectionClientParametersOutput{})
	pulumi.RegisterOutputType(ConnectionClientParametersPtrOutput{})
	pulumi.RegisterOutputType(ConnectionHttpParametersOutput{})
	pulumi.RegisterOutputType(ConnectionHttpParametersPtrOutput{})
	pulumi.RegisterOutputType(ConnectionOAuthParametersOutput{})
	pulumi.RegisterOutputType(ConnectionOAuthParametersPtrOutput{})
	pulumi.RegisterOutputType(ConnectionParameterOutput{})
	pulumi.RegisterOutputType(ConnectionParameterArrayOutput{})
	pulumi.RegisterOutputType(DeadLetterConfigPropertiesOutput{})
	pulumi.RegisterOutputType(DeadLetterConfigPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EndpointEventBusOutput{})
	pulumi.RegisterOutputType(EndpointEventBusArrayOutput{})
	pulumi.RegisterOutputType(EndpointFailoverConfigOutput{})
	pulumi.RegisterOutputType(EndpointFailoverConfigPtrOutput{})
	pulumi.RegisterOutputType(EndpointPrimaryOutput{})
	pulumi.RegisterOutputType(EndpointPrimaryPtrOutput{})
	pulumi.RegisterOutputType(EndpointReplicationConfigOutput{})
	pulumi.RegisterOutputType(EndpointReplicationConfigPtrOutput{})
	pulumi.RegisterOutputType(EndpointRoutingConfigOutput{})
	pulumi.RegisterOutputType(EndpointRoutingConfigPtrOutput{})
	pulumi.RegisterOutputType(EndpointSecondaryOutput{})
	pulumi.RegisterOutputType(EndpointSecondaryPtrOutput{})
	pulumi.RegisterOutputType(RuleAppSyncParametersOutput{})
	pulumi.RegisterOutputType(RuleAppSyncParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(RuleAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RuleBatchArrayPropertiesOutput{})
	pulumi.RegisterOutputType(RuleBatchArrayPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RuleBatchParametersOutput{})
	pulumi.RegisterOutputType(RuleBatchParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleBatchRetryStrategyOutput{})
	pulumi.RegisterOutputType(RuleBatchRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(RuleCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(RuleCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(RuleDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(RuleDeadLetterConfigPtrOutput{})
	pulumi.RegisterOutputType(RuleEcsParametersOutput{})
	pulumi.RegisterOutputType(RuleEcsParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleHttpParametersOutput{})
	pulumi.RegisterOutputType(RuleHttpParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleInputTransformerOutput{})
	pulumi.RegisterOutputType(RuleInputTransformerPtrOutput{})
	pulumi.RegisterOutputType(RuleKinesisParametersOutput{})
	pulumi.RegisterOutputType(RuleKinesisParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(RuleNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RulePlacementConstraintOutput{})
	pulumi.RegisterOutputType(RulePlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(RulePlacementStrategyOutput{})
	pulumi.RegisterOutputType(RulePlacementStrategyArrayOutput{})
	pulumi.RegisterOutputType(RuleRedshiftDataParametersOutput{})
	pulumi.RegisterOutputType(RuleRedshiftDataParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleRetryPolicyOutput{})
	pulumi.RegisterOutputType(RuleRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RuleRunCommandParametersOutput{})
	pulumi.RegisterOutputType(RuleRunCommandParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleRunCommandTargetOutput{})
	pulumi.RegisterOutputType(RuleRunCommandTargetArrayOutput{})
	pulumi.RegisterOutputType(RuleSageMakerPipelineParameterOutput{})
	pulumi.RegisterOutputType(RuleSageMakerPipelineParameterArrayOutput{})
	pulumi.RegisterOutputType(RuleSageMakerPipelineParametersOutput{})
	pulumi.RegisterOutputType(RuleSageMakerPipelineParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleSqsParametersOutput{})
	pulumi.RegisterOutputType(RuleSqsParametersPtrOutput{})
	pulumi.RegisterOutputType(RuleTagOutput{})
	pulumi.RegisterOutputType(RuleTagArrayOutput{})
	pulumi.RegisterOutputType(RuleTargetOutput{})
	pulumi.RegisterOutputType(RuleTargetArrayOutput{})
}
