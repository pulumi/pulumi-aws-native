// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Events::Connection.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/events"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			pagerDutyAPIKeyParam := cfg.Require("pagerDutyAPIKeyParam")
//			myConnection, err := events.NewConnection(ctx, "myConnection", &events.ConnectionArgs{
//				AuthorizationType: events.ConnectionAuthorizationTypeApiKey,
//				Description:       pulumi.String("Connection to PagerDuty API"),
//				AuthParameters: &events.ConnectionAuthParametersArgs{
//					ApiKeyAuthParameters: &events.ConnectionApiKeyAuthParametersArgs{
//						ApiKeyName:  pulumi.String("PagerDuty Authorization"),
//						ApiKeyValue: pulumi.String(pagerDutyAPIKeyParam),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = events.NewApiDestination(ctx, "myApiDestination", &events.ApiDestinationArgs{
//				ConnectionArn:      myConnection.Arn,
//				Description:        pulumi.String("API Destination to send events to PagerDuty"),
//				HttpMethod:         events.ApiDestinationHttpMethodPost,
//				InvocationEndpoint: pulumi.String("https://events.pagerduty.com/v2/enqueue"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Connection struct {
	pulumi.CustomResourceState

	// The arn of the connection resource.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The authorization parameters to use to authorize with the endpoint.
	//
	// You must include only authorization parameters for the `AuthorizationType` you specify.
	AuthParameters ConnectionAuthParametersPtrOutput `pulumi:"authParameters"`
	// The type of authorization to use for the connection.
	//
	// > OAUTH tokens are refreshed when a 401 or 407 response is returned.
	AuthorizationType ConnectionAuthorizationTypePtrOutput `pulumi:"authorizationType"`
	// Description of the connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The private resource the HTTP request will be sent to.
	InvocationConnectivityParameters InvocationConnectivityParametersPropertiesPtrOutput `pulumi:"invocationConnectivityParameters"`
	// Name of the connection.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The arn of the secrets manager secret created in the customer account.
	SecretArn pulumi.StringOutput `pulumi:"secretArn"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		args = &ConnectionArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("aws-native:events:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("aws-native:events:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
}

type ConnectionState struct {
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The authorization parameters to use to authorize with the endpoint.
	//
	// You must include only authorization parameters for the `AuthorizationType` you specify.
	AuthParameters *ConnectionAuthParameters `pulumi:"authParameters"`
	// The type of authorization to use for the connection.
	//
	// > OAUTH tokens are refreshed when a 401 or 407 response is returned.
	AuthorizationType *ConnectionAuthorizationType `pulumi:"authorizationType"`
	// Description of the connection.
	Description *string `pulumi:"description"`
	// The private resource the HTTP request will be sent to.
	InvocationConnectivityParameters *InvocationConnectivityParametersProperties `pulumi:"invocationConnectivityParameters"`
	// Name of the connection.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The authorization parameters to use to authorize with the endpoint.
	//
	// You must include only authorization parameters for the `AuthorizationType` you specify.
	AuthParameters ConnectionAuthParametersPtrInput
	// The type of authorization to use for the connection.
	//
	// > OAUTH tokens are refreshed when a 401 or 407 response is returned.
	AuthorizationType ConnectionAuthorizationTypePtrInput
	// Description of the connection.
	Description pulumi.StringPtrInput
	// The private resource the HTTP request will be sent to.
	InvocationConnectivityParameters InvocationConnectivityParametersPropertiesPtrInput
	// Name of the connection.
	Name pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// The arn of the connection resource.
func (o ConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The authorization parameters to use to authorize with the endpoint.
//
// You must include only authorization parameters for the `AuthorizationType` you specify.
func (o ConnectionOutput) AuthParameters() ConnectionAuthParametersPtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionAuthParametersPtrOutput { return v.AuthParameters }).(ConnectionAuthParametersPtrOutput)
}

// The type of authorization to use for the connection.
//
// > OAUTH tokens are refreshed when a 401 or 407 response is returned.
func (o ConnectionOutput) AuthorizationType() ConnectionAuthorizationTypePtrOutput {
	return o.ApplyT(func(v *Connection) ConnectionAuthorizationTypePtrOutput { return v.AuthorizationType }).(ConnectionAuthorizationTypePtrOutput)
}

// Description of the connection.
func (o ConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The private resource the HTTP request will be sent to.
func (o ConnectionOutput) InvocationConnectivityParameters() InvocationConnectivityParametersPropertiesPtrOutput {
	return o.ApplyT(func(v *Connection) InvocationConnectivityParametersPropertiesPtrOutput {
		return v.InvocationConnectivityParameters
	}).(InvocationConnectivityParametersPropertiesPtrOutput)
}

// Name of the connection.
func (o ConnectionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The arn of the secrets manager secret created in the customer account.
func (o ConnectionOutput) SecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.SecretArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterOutputType(ConnectionOutput{})
}
