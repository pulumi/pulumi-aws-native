// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Events::Connection.
type Connection struct {
	pulumi.CustomResourceState

	// The arn of the connection resource.
	Arn               pulumi.StringOutput               `pulumi:"arn"`
	AuthParameters    ConnectionAuthParametersOutput    `pulumi:"authParameters"`
	AuthorizationType ConnectionAuthorizationTypeOutput `pulumi:"authorizationType"`
	// Description of the connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the connection.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The arn of the secrets manager secret created in the customer account.
	SecretArn pulumi.StringOutput `pulumi:"secretArn"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthParameters == nil {
		return nil, errors.New("invalid value for required argument 'AuthParameters'")
	}
	if args.AuthorizationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationType'")
	}
	var resource Connection
	err := ctx.RegisterResource("aws-native:events:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("aws-native:events:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
}

type ConnectionState struct {
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	AuthParameters    ConnectionAuthParameters    `pulumi:"authParameters"`
	AuthorizationType ConnectionAuthorizationType `pulumi:"authorizationType"`
	// Description of the connection.
	Description *string `pulumi:"description"`
	// Name of the connection.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	AuthParameters    ConnectionAuthParametersInput
	AuthorizationType ConnectionAuthorizationTypeInput
	// Description of the connection.
	Description pulumi.StringPtrInput
	// Name of the connection.
	Name pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// The arn of the connection resource.
func (o ConnectionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConnectionOutput) AuthParameters() ConnectionAuthParametersOutput {
	return o.ApplyT(func(v *Connection) ConnectionAuthParametersOutput { return v.AuthParameters }).(ConnectionAuthParametersOutput)
}

func (o ConnectionOutput) AuthorizationType() ConnectionAuthorizationTypeOutput {
	return o.ApplyT(func(v *Connection) ConnectionAuthorizationTypeOutput { return v.AuthorizationType }).(ConnectionAuthorizationTypeOutput)
}

// Description of the connection.
func (o ConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the connection.
func (o ConnectionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The arn of the secrets manager secret created in the customer account.
func (o ConnectionOutput) SecretArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.SecretArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterOutputType(ConnectionOutput{})
}
