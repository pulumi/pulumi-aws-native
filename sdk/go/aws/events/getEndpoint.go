// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Events::Endpoint.
func LookupEndpoint(ctx *pulumi.Context, args *LookupEndpointArgs, opts ...pulumi.InvokeOption) (*LookupEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEndpointResult
	err := ctx.Invoke("aws-native:events:getEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEndpointArgs struct {
	// The name of the endpoint.
	Name string `pulumi:"name"`
}

type LookupEndpointResult struct {
	// The ARN of the endpoint.
	Arn *string `pulumi:"arn"`
	// A description for the endpoint.
	Description *string `pulumi:"description"`
	// The ID of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// The URL of the endpoint.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// The event buses being used by the endpoint.
	//
	// *Exactly* : `2`
	EventBuses []EndpointEventBus `pulumi:"eventBuses"`
	// Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
	ReplicationConfig *EndpointReplicationConfig `pulumi:"replicationConfig"`
	// The ARN of the role used by event replication for the endpoint.
	RoleArn *string `pulumi:"roleArn"`
	// The routing configuration of the endpoint.
	RoutingConfig *EndpointRoutingConfig `pulumi:"routingConfig"`
	// The main Region of the endpoint.
	State *EndpointStateEnum `pulumi:"state"`
	// The reason the endpoint is in its current state.
	StateReason *string `pulumi:"stateReason"`
}

func LookupEndpointOutput(ctx *pulumi.Context, args LookupEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupEndpointResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEndpointResultOutput, error) {
			args := v.(LookupEndpointArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:events:getEndpoint", args, LookupEndpointResultOutput{}, options).(LookupEndpointResultOutput), nil
		}).(LookupEndpointResultOutput)
}

type LookupEndpointOutputArgs struct {
	// The name of the endpoint.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupEndpointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointArgs)(nil)).Elem()
}

type LookupEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointResult)(nil)).Elem()
}

func (o LookupEndpointResultOutput) ToLookupEndpointResultOutput() LookupEndpointResultOutput {
	return o
}

func (o LookupEndpointResultOutput) ToLookupEndpointResultOutputWithContext(ctx context.Context) LookupEndpointResultOutput {
	return o
}

// The ARN of the endpoint.
func (o LookupEndpointResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// A description for the endpoint.
func (o LookupEndpointResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the endpoint.
func (o LookupEndpointResultOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// The URL of the endpoint.
func (o LookupEndpointResultOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// The event buses being used by the endpoint.
//
// *Exactly* : `2`
func (o LookupEndpointResultOutput) EventBuses() EndpointEventBusArrayOutput {
	return o.ApplyT(func(v LookupEndpointResult) []EndpointEventBus { return v.EventBuses }).(EndpointEventBusArrayOutput)
}

// Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
func (o LookupEndpointResultOutput) ReplicationConfig() EndpointReplicationConfigPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *EndpointReplicationConfig { return v.ReplicationConfig }).(EndpointReplicationConfigPtrOutput)
}

// The ARN of the role used by event replication for the endpoint.
func (o LookupEndpointResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The routing configuration of the endpoint.
func (o LookupEndpointResultOutput) RoutingConfig() EndpointRoutingConfigPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *EndpointRoutingConfig { return v.RoutingConfig }).(EndpointRoutingConfigPtrOutput)
}

// The main Region of the endpoint.
func (o LookupEndpointResultOutput) State() EndpointStateEnumPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *EndpointStateEnum { return v.State }).(EndpointStateEnumPtrOutput)
}

// The reason the endpoint is in its current state.
func (o LookupEndpointResultOutput) StateReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEndpointResult) *string { return v.StateReason }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEndpointResultOutput{})
}
