// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Events::Archive
type Archive struct {
	pulumi.CustomResourceState

	// The name for the archive to create.
	ArchiveName pulumi.StringPtrOutput `pulumi:"archiveName"`
	// The ARN of the archive created.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description for the archive.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An event pattern to use to filter events sent to the archive.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::Archive` for more information about the expected schema for this property.
	EventPattern pulumi.AnyOutput `pulumi:"eventPattern"`
	// The number of days to retain events for. Default value is 0. If set to 0, events are retained indefinitely
	RetentionDays pulumi.IntPtrOutput `pulumi:"retentionDays"`
	// The ARN of the event bus that sends events to the archive.
	SourceArn pulumi.StringOutput `pulumi:"sourceArn"`
}

// NewArchive registers a new resource with the given unique name, arguments, and options.
func NewArchive(ctx *pulumi.Context,
	name string, args *ArchiveArgs, opts ...pulumi.ResourceOption) (*Archive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"archiveName",
		"sourceArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Archive
	err := ctx.RegisterResource("aws-native:events:Archive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArchive gets an existing Archive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArchive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArchiveState, opts ...pulumi.ResourceOption) (*Archive, error) {
	var resource Archive
	err := ctx.ReadResource("aws-native:events:Archive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Archive resources.
type archiveState struct {
}

type ArchiveState struct {
}

func (ArchiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveState)(nil)).Elem()
}

type archiveArgs struct {
	// The name for the archive to create.
	ArchiveName *string `pulumi:"archiveName"`
	// A description for the archive.
	Description *string `pulumi:"description"`
	// An event pattern to use to filter events sent to the archive.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::Archive` for more information about the expected schema for this property.
	EventPattern interface{} `pulumi:"eventPattern"`
	// The number of days to retain events for. Default value is 0. If set to 0, events are retained indefinitely
	RetentionDays *int `pulumi:"retentionDays"`
	// The ARN of the event bus that sends events to the archive.
	SourceArn string `pulumi:"sourceArn"`
}

// The set of arguments for constructing a Archive resource.
type ArchiveArgs struct {
	// The name for the archive to create.
	ArchiveName pulumi.StringPtrInput
	// A description for the archive.
	Description pulumi.StringPtrInput
	// An event pattern to use to filter events sent to the archive.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::Archive` for more information about the expected schema for this property.
	EventPattern pulumi.Input
	// The number of days to retain events for. Default value is 0. If set to 0, events are retained indefinitely
	RetentionDays pulumi.IntPtrInput
	// The ARN of the event bus that sends events to the archive.
	SourceArn pulumi.StringInput
}

func (ArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveArgs)(nil)).Elem()
}

type ArchiveInput interface {
	pulumi.Input

	ToArchiveOutput() ArchiveOutput
	ToArchiveOutputWithContext(ctx context.Context) ArchiveOutput
}

func (*Archive) ElementType() reflect.Type {
	return reflect.TypeOf((**Archive)(nil)).Elem()
}

func (i *Archive) ToArchiveOutput() ArchiveOutput {
	return i.ToArchiveOutputWithContext(context.Background())
}

func (i *Archive) ToArchiveOutputWithContext(ctx context.Context) ArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveOutput)
}

type ArchiveOutput struct{ *pulumi.OutputState }

func (ArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Archive)(nil)).Elem()
}

func (o ArchiveOutput) ToArchiveOutput() ArchiveOutput {
	return o
}

func (o ArchiveOutput) ToArchiveOutputWithContext(ctx context.Context) ArchiveOutput {
	return o
}

// The name for the archive to create.
func (o ArchiveOutput) ArchiveName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Archive) pulumi.StringPtrOutput { return v.ArchiveName }).(pulumi.StringPtrOutput)
}

// The ARN of the archive created.
func (o ArchiveOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Archive) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description for the archive.
func (o ArchiveOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Archive) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An event pattern to use to filter events sent to the archive.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::Archive` for more information about the expected schema for this property.
func (o ArchiveOutput) EventPattern() pulumi.AnyOutput {
	return o.ApplyT(func(v *Archive) pulumi.AnyOutput { return v.EventPattern }).(pulumi.AnyOutput)
}

// The number of days to retain events for. Default value is 0. If set to 0, events are retained indefinitely
func (o ArchiveOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Archive) pulumi.IntPtrOutput { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// The ARN of the event bus that sends events to the archive.
func (o ArchiveOutput) SourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Archive) pulumi.StringOutput { return v.SourceArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveInput)(nil)).Elem(), &Archive{})
	pulumi.RegisterOutputType(ArchiveOutput{})
}
