// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::Events::Rule
type Rule struct {
	pulumi.CustomResourceState

	// The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The description of the rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
	EventBusName pulumi.StringPtrOutput `pulumi:"eventBusName"`
	// The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
	EventPattern pulumi.StringPtrOutput `pulumi:"eventPattern"`
	// The name of the rule.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The Amazon Resource Name (ARN) of the role that is used for target invocation.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
	ScheduleExpression pulumi.StringPtrOutput `pulumi:"scheduleExpression"`
	// The state of the rule.
	State RuleStateEnumPtrOutput `pulumi:"state"`
	// Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
	// Targets are the resources that are invoked when a rule is triggered.
	Targets RuleTargetArrayOutput `pulumi:"targets"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		args = &RuleArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("aws-native:events:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("aws-native:events:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
}

type RuleState struct {
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The description of the rule.
	Description *string `pulumi:"description"`
	// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
	EventBusName *string `pulumi:"eventBusName"`
	// The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
	EventPattern *string `pulumi:"eventPattern"`
	// The name of the rule.
	Name *string `pulumi:"name"`
	// The Amazon Resource Name (ARN) of the role that is used for target invocation.
	RoleArn *string `pulumi:"roleArn"`
	// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
	ScheduleExpression *string `pulumi:"scheduleExpression"`
	// The state of the rule.
	State *RuleStateEnum `pulumi:"state"`
	// Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
	// Targets are the resources that are invoked when a rule is triggered.
	Targets []RuleTarget `pulumi:"targets"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The description of the rule.
	Description pulumi.StringPtrInput
	// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
	EventBusName pulumi.StringPtrInput
	// The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
	EventPattern pulumi.StringPtrInput
	// The name of the rule.
	Name pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the role that is used for target invocation.
	RoleArn pulumi.StringPtrInput
	// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
	ScheduleExpression pulumi.StringPtrInput
	// The state of the rule.
	State RuleStateEnumPtrInput
	// Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
	// Targets are the resources that are invoked when a rule is triggered.
	Targets RuleTargetArrayInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

func (i *Rule) ToOutput(ctx context.Context) pulumix.Output[*Rule] {
	return pulumix.Output[*Rule]{
		OutputState: i.ToRuleOutputWithContext(ctx).OutputState,
	}
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

func (o RuleOutput) ToOutput(ctx context.Context) pulumix.Output[*Rule] {
	return pulumix.Output[*Rule]{
		OutputState: o.OutputState,
	}
}

// The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
func (o RuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The description of the rule.
func (o RuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
func (o RuleOutput) EventBusName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.EventBusName }).(pulumi.StringPtrOutput)
}

// The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
func (o RuleOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// The name of the rule.
func (o RuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the role that is used for target invocation.
func (o RuleOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
func (o RuleOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

// The state of the rule.
func (o RuleOutput) State() RuleStateEnumPtrOutput {
	return o.ApplyT(func(v *Rule) RuleStateEnumPtrOutput { return v.State }).(RuleStateEnumPtrOutput)
}

// Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
// Targets are the resources that are invoked when a rule is triggered.
func (o RuleOutput) Targets() RuleTargetArrayOutput {
	return o.ApplyT(func(v *Rule) RuleTargetArrayOutput { return v.Targets }).(RuleTargetArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterOutputType(RuleOutput{})
}
