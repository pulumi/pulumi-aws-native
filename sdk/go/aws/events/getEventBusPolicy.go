// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Events::EventBusPolicy
func LookupEventBusPolicy(ctx *pulumi.Context, args *LookupEventBusPolicyArgs, opts ...pulumi.InvokeOption) (*LookupEventBusPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEventBusPolicyResult
	err := ctx.Invoke("aws-native:events:getEventBusPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEventBusPolicyArgs struct {
	// The name of the event bus associated with the rule. If you omit this, the default event bus is used.
	EventBusName string `pulumi:"eventBusName"`
	// An identifier string for the external account that you are granting permissions to
	StatementId string `pulumi:"statementId"`
}

type LookupEventBusPolicyResult struct {
	// A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBusPolicy` for more information about the expected schema for this property.
	Statement interface{} `pulumi:"statement"`
}

func LookupEventBusPolicyOutput(ctx *pulumi.Context, args LookupEventBusPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupEventBusPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEventBusPolicyResultOutput, error) {
			args := v.(LookupEventBusPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:events:getEventBusPolicy", args, LookupEventBusPolicyResultOutput{}, options).(LookupEventBusPolicyResultOutput), nil
		}).(LookupEventBusPolicyResultOutput)
}

type LookupEventBusPolicyOutputArgs struct {
	// The name of the event bus associated with the rule. If you omit this, the default event bus is used.
	EventBusName pulumi.StringInput `pulumi:"eventBusName"`
	// An identifier string for the external account that you are granting permissions to
	StatementId pulumi.StringInput `pulumi:"statementId"`
}

func (LookupEventBusPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventBusPolicyArgs)(nil)).Elem()
}

type LookupEventBusPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupEventBusPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventBusPolicyResult)(nil)).Elem()
}

func (o LookupEventBusPolicyResultOutput) ToLookupEventBusPolicyResultOutput() LookupEventBusPolicyResultOutput {
	return o
}

func (o LookupEventBusPolicyResultOutput) ToLookupEventBusPolicyResultOutputWithContext(ctx context.Context) LookupEventBusPolicyResultOutput {
	return o
}

// A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBusPolicy` for more information about the expected schema for this property.
func (o LookupEventBusPolicyResultOutput) Statement() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupEventBusPolicyResult) interface{} { return v.Statement }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventBusPolicyResultOutput{})
}
