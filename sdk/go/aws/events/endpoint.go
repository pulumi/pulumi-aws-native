// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Events::Endpoint.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/events"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sampleEndpoint, err := events.NewEndpoint(ctx, "sampleEndpoint", &events.EndpointArgs{
//				Name: pulumi.String("CreateExampleEndpoint"),
//				RoutingConfig: &events.EndpointRoutingConfigArgs{
//					FailoverConfig: &events.EndpointFailoverConfigArgs{
//						Primary: &events.EndpointPrimaryArgs{
//							HealthCheck: pulumi.String("arn:aws:route53:::healthcheck/0123456789abc"),
//						},
//						Secondary: &events.EndpointSecondaryArgs{
//							Route: pulumi.String("us-east-1"),
//						},
//					},
//				},
//				ReplicationConfig: &events.EndpointReplicationConfigArgs{
//					State: events.EndpointReplicationStateEnabled,
//				},
//				RoleArn: pulumi.String("arn:aws:iam::123456789012:role/EndpointReplicationRole"),
//				EventBuses: events.EndpointEventBusArray{
//					&events.EndpointEventBusArgs{
//						EventBusArn: pulumi.String("arn:aws:events:us-west-2:123456789012:event-bus/ExampleEventBus"),
//					},
//					&events.EndpointEventBusArgs{
//						EventBusArn: pulumi.String("arn:aws:events:us-east-1:123456789012:event-bus/ExampleEventBus"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("sampleEndpointName", sampleEndpoint.ID())
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/events"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sampleEndpoint, err := events.NewEndpoint(ctx, "sampleEndpoint", &events.EndpointArgs{
//				Name: pulumi.String("CreateExampleEndpoint"),
//				RoutingConfig: &events.EndpointRoutingConfigArgs{
//					FailoverConfig: &events.EndpointFailoverConfigArgs{
//						Primary: &events.EndpointPrimaryArgs{
//							HealthCheck: pulumi.String("arn:aws:route53:::healthcheck/0123456789abc"),
//						},
//						Secondary: &events.EndpointSecondaryArgs{
//							Route: pulumi.String("us-east-1"),
//						},
//					},
//				},
//				ReplicationConfig: &events.EndpointReplicationConfigArgs{
//					State: events.EndpointReplicationStateDisabled,
//				},
//				EventBuses: events.EndpointEventBusArray{
//					&events.EndpointEventBusArgs{
//						EventBusArn: pulumi.String("arn:aws:events:us-west-2:123456789012:event-bus/ExampleEventBus"),
//					},
//					&events.EndpointEventBusArgs{
//						EventBusArn: pulumi.String("arn:aws:events:us-east-1:123456789012:event-bus/ExampleEventBus"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("sampleEndpointName", sampleEndpoint.ID())
//			return nil
//		})
//	}
//
// ```
type Endpoint struct {
	pulumi.CustomResourceState

	// The ARN of the endpoint.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description for the endpoint.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the endpoint.
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`
	// The URL of the endpoint.
	EndpointUrl pulumi.StringOutput `pulumi:"endpointUrl"`
	// The event buses being used by the endpoint.
	//
	// *Exactly* : `2`
	EventBuses EndpointEventBusArrayOutput `pulumi:"eventBuses"`
	// The name of the endpoint.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
	ReplicationConfig EndpointReplicationConfigPtrOutput `pulumi:"replicationConfig"`
	// The ARN of the role used by event replication for the endpoint.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// The routing configuration of the endpoint.
	RoutingConfig EndpointRoutingConfigOutput `pulumi:"routingConfig"`
	// The main Region of the endpoint.
	State EndpointStateEnumOutput `pulumi:"state"`
	// The reason the endpoint is in its current state.
	StateReason pulumi.StringOutput `pulumi:"stateReason"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventBuses == nil {
		return nil, errors.New("invalid value for required argument 'EventBuses'")
	}
	if args.RoutingConfig == nil {
		return nil, errors.New("invalid value for required argument 'RoutingConfig'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Endpoint
	err := ctx.RegisterResource("aws-native:events:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("aws-native:events:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
}

type EndpointState struct {
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// A description for the endpoint.
	Description *string `pulumi:"description"`
	// The event buses being used by the endpoint.
	//
	// *Exactly* : `2`
	EventBuses []EndpointEventBus `pulumi:"eventBuses"`
	// The name of the endpoint.
	Name *string `pulumi:"name"`
	// Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
	ReplicationConfig *EndpointReplicationConfig `pulumi:"replicationConfig"`
	// The ARN of the role used by event replication for the endpoint.
	RoleArn *string `pulumi:"roleArn"`
	// The routing configuration of the endpoint.
	RoutingConfig EndpointRoutingConfig `pulumi:"routingConfig"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// A description for the endpoint.
	Description pulumi.StringPtrInput
	// The event buses being used by the endpoint.
	//
	// *Exactly* : `2`
	EventBuses EndpointEventBusArrayInput
	// The name of the endpoint.
	Name pulumi.StringPtrInput
	// Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
	ReplicationConfig EndpointReplicationConfigPtrInput
	// The ARN of the role used by event replication for the endpoint.
	RoleArn pulumi.StringPtrInput
	// The routing configuration of the endpoint.
	RoutingConfig EndpointRoutingConfigInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// The ARN of the endpoint.
func (o EndpointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description for the endpoint.
func (o EndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the endpoint.
func (o EndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// The URL of the endpoint.
func (o EndpointOutput) EndpointUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointUrl }).(pulumi.StringOutput)
}

// The event buses being used by the endpoint.
//
// *Exactly* : `2`
func (o EndpointOutput) EventBuses() EndpointEventBusArrayOutput {
	return o.ApplyT(func(v *Endpoint) EndpointEventBusArrayOutput { return v.EventBuses }).(EndpointEventBusArrayOutput)
}

// The name of the endpoint.
func (o EndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
func (o EndpointOutput) ReplicationConfig() EndpointReplicationConfigPtrOutput {
	return o.ApplyT(func(v *Endpoint) EndpointReplicationConfigPtrOutput { return v.ReplicationConfig }).(EndpointReplicationConfigPtrOutput)
}

// The ARN of the role used by event replication for the endpoint.
func (o EndpointOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The routing configuration of the endpoint.
func (o EndpointOutput) RoutingConfig() EndpointRoutingConfigOutput {
	return o.ApplyT(func(v *Endpoint) EndpointRoutingConfigOutput { return v.RoutingConfig }).(EndpointRoutingConfigOutput)
}

// The main Region of the endpoint.
func (o EndpointOutput) State() EndpointStateEnumOutput {
	return o.ApplyT(func(v *Endpoint) EndpointStateEnumOutput { return v.State }).(EndpointStateEnumOutput)
}

// The reason the endpoint is in its current state.
func (o EndpointOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.StateReason }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterOutputType(EndpointOutput{})
}
