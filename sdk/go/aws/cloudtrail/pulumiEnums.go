// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
type TrailEventSelectorReadWriteType string

const (
	TrailEventSelectorReadWriteTypeAll       = TrailEventSelectorReadWriteType("All")
	TrailEventSelectorReadWriteTypeReadOnly  = TrailEventSelectorReadWriteType("ReadOnly")
	TrailEventSelectorReadWriteTypeWriteOnly = TrailEventSelectorReadWriteType("WriteOnly")
)

func (TrailEventSelectorReadWriteType) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorReadWriteType)(nil)).Elem()
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypeOutput() TrailEventSelectorReadWriteTypeOutput {
	return pulumi.ToOutput(e).(TrailEventSelectorReadWriteTypeOutput)
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypeOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrailEventSelectorReadWriteTypeOutput)
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return e.ToTrailEventSelectorReadWriteTypePtrOutputWithContext(context.Background())
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return TrailEventSelectorReadWriteType(e).ToTrailEventSelectorReadWriteTypeOutputWithContext(ctx).ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx)
}

func (e TrailEventSelectorReadWriteType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrailEventSelectorReadWriteType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrailEventSelectorReadWriteType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrailEventSelectorReadWriteType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrailEventSelectorReadWriteTypeOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorReadWriteTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorReadWriteType)(nil)).Elem()
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypeOutput() TrailEventSelectorReadWriteTypeOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypeOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypeOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return o.ToTrailEventSelectorReadWriteTypePtrOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrailEventSelectorReadWriteType) *TrailEventSelectorReadWriteType {
		return &v
	}).(TrailEventSelectorReadWriteTypePtrOutput)
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrailEventSelectorReadWriteType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrailEventSelectorReadWriteType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrailEventSelectorReadWriteTypePtrOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorReadWriteTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrailEventSelectorReadWriteType)(nil)).Elem()
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypePtrOutput) Elem() TrailEventSelectorReadWriteTypeOutput {
	return o.ApplyT(func(v *TrailEventSelectorReadWriteType) TrailEventSelectorReadWriteType {
		if v != nil {
			return *v
		}
		var ret TrailEventSelectorReadWriteType
		return ret
	}).(TrailEventSelectorReadWriteTypeOutput)
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrailEventSelectorReadWriteType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TrailEventSelectorReadWriteTypeInput is an input type that accepts TrailEventSelectorReadWriteTypeArgs and TrailEventSelectorReadWriteTypeOutput values.
// You can construct a concrete instance of `TrailEventSelectorReadWriteTypeInput` via:
//
//          TrailEventSelectorReadWriteTypeArgs{...}
type TrailEventSelectorReadWriteTypeInput interface {
	pulumi.Input

	ToTrailEventSelectorReadWriteTypeOutput() TrailEventSelectorReadWriteTypeOutput
	ToTrailEventSelectorReadWriteTypeOutputWithContext(context.Context) TrailEventSelectorReadWriteTypeOutput
}

var trailEventSelectorReadWriteTypePtrType = reflect.TypeOf((**TrailEventSelectorReadWriteType)(nil)).Elem()

type TrailEventSelectorReadWriteTypePtrInput interface {
	pulumi.Input

	ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput
	ToTrailEventSelectorReadWriteTypePtrOutputWithContext(context.Context) TrailEventSelectorReadWriteTypePtrOutput
}

type trailEventSelectorReadWriteTypePtr string

func TrailEventSelectorReadWriteTypePtr(v string) TrailEventSelectorReadWriteTypePtrInput {
	return (*trailEventSelectorReadWriteTypePtr)(&v)
}

func (*trailEventSelectorReadWriteTypePtr) ElementType() reflect.Type {
	return trailEventSelectorReadWriteTypePtrType
}

func (in *trailEventSelectorReadWriteTypePtr) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return pulumi.ToOutput(in).(TrailEventSelectorReadWriteTypePtrOutput)
}

func (in *trailEventSelectorReadWriteTypePtr) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrailEventSelectorReadWriteTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorReadWriteTypeInput)(nil)).Elem(), TrailEventSelectorReadWriteType("All"))
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorReadWriteTypePtrInput)(nil)).Elem(), TrailEventSelectorReadWriteType("All"))
	pulumi.RegisterOutputType(TrailEventSelectorReadWriteTypeOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorReadWriteTypePtrOutput{})
}
