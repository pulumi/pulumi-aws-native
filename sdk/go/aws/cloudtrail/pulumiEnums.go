// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of destination for events arriving from a channel.
type ChannelDestinationType string

const (
	ChannelDestinationTypeEventDataStore = ChannelDestinationType("EVENT_DATA_STORE")
)

func (ChannelDestinationType) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationType)(nil)).Elem()
}

func (e ChannelDestinationType) ToChannelDestinationTypeOutput() ChannelDestinationTypeOutput {
	return pulumi.ToOutput(e).(ChannelDestinationTypeOutput)
}

func (e ChannelDestinationType) ToChannelDestinationTypeOutputWithContext(ctx context.Context) ChannelDestinationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ChannelDestinationTypeOutput)
}

func (e ChannelDestinationType) ToChannelDestinationTypePtrOutput() ChannelDestinationTypePtrOutput {
	return e.ToChannelDestinationTypePtrOutputWithContext(context.Background())
}

func (e ChannelDestinationType) ToChannelDestinationTypePtrOutputWithContext(ctx context.Context) ChannelDestinationTypePtrOutput {
	return ChannelDestinationType(e).ToChannelDestinationTypeOutputWithContext(ctx).ToChannelDestinationTypePtrOutputWithContext(ctx)
}

func (e ChannelDestinationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChannelDestinationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChannelDestinationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChannelDestinationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ChannelDestinationTypeOutput struct{ *pulumi.OutputState }

func (ChannelDestinationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestinationType)(nil)).Elem()
}

func (o ChannelDestinationTypeOutput) ToChannelDestinationTypeOutput() ChannelDestinationTypeOutput {
	return o
}

func (o ChannelDestinationTypeOutput) ToChannelDestinationTypeOutputWithContext(ctx context.Context) ChannelDestinationTypeOutput {
	return o
}

func (o ChannelDestinationTypeOutput) ToChannelDestinationTypePtrOutput() ChannelDestinationTypePtrOutput {
	return o.ToChannelDestinationTypePtrOutputWithContext(context.Background())
}

func (o ChannelDestinationTypeOutput) ToChannelDestinationTypePtrOutputWithContext(ctx context.Context) ChannelDestinationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelDestinationType) *ChannelDestinationType {
		return &v
	}).(ChannelDestinationTypePtrOutput)
}

func (o ChannelDestinationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ChannelDestinationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChannelDestinationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ChannelDestinationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChannelDestinationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChannelDestinationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ChannelDestinationTypePtrOutput struct{ *pulumi.OutputState }

func (ChannelDestinationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelDestinationType)(nil)).Elem()
}

func (o ChannelDestinationTypePtrOutput) ToChannelDestinationTypePtrOutput() ChannelDestinationTypePtrOutput {
	return o
}

func (o ChannelDestinationTypePtrOutput) ToChannelDestinationTypePtrOutputWithContext(ctx context.Context) ChannelDestinationTypePtrOutput {
	return o
}

func (o ChannelDestinationTypePtrOutput) Elem() ChannelDestinationTypeOutput {
	return o.ApplyT(func(v *ChannelDestinationType) ChannelDestinationType {
		if v != nil {
			return *v
		}
		var ret ChannelDestinationType
		return ret
	}).(ChannelDestinationTypeOutput)
}

func (o ChannelDestinationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChannelDestinationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ChannelDestinationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ChannelDestinationTypeInput is an input type that accepts values of the ChannelDestinationType enum
// A concrete instance of `ChannelDestinationTypeInput` can be one of the following:
//
//	ChannelDestinationTypeEventDataStore
type ChannelDestinationTypeInput interface {
	pulumi.Input

	ToChannelDestinationTypeOutput() ChannelDestinationTypeOutput
	ToChannelDestinationTypeOutputWithContext(context.Context) ChannelDestinationTypeOutput
}

var channelDestinationTypePtrType = reflect.TypeOf((**ChannelDestinationType)(nil)).Elem()

type ChannelDestinationTypePtrInput interface {
	pulumi.Input

	ToChannelDestinationTypePtrOutput() ChannelDestinationTypePtrOutput
	ToChannelDestinationTypePtrOutputWithContext(context.Context) ChannelDestinationTypePtrOutput
}

type channelDestinationTypePtr string

func ChannelDestinationTypePtr(v string) ChannelDestinationTypePtrInput {
	return (*channelDestinationTypePtr)(&v)
}

func (*channelDestinationTypePtr) ElementType() reflect.Type {
	return channelDestinationTypePtrType
}

func (in *channelDestinationTypePtr) ToChannelDestinationTypePtrOutput() ChannelDestinationTypePtrOutput {
	return pulumi.ToOutput(in).(ChannelDestinationTypePtrOutput)
}

func (in *channelDestinationTypePtr) ToChannelDestinationTypePtrOutputWithContext(ctx context.Context) ChannelDestinationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ChannelDestinationTypePtrOutput)
}

// The frequency unit. Supported values are HOURS and DAYS.
type DashboardRefreshScheduleFrequencyPropertiesUnit string

const (
	DashboardRefreshScheduleFrequencyPropertiesUnitHours = DashboardRefreshScheduleFrequencyPropertiesUnit("HOURS")
	DashboardRefreshScheduleFrequencyPropertiesUnitDays  = DashboardRefreshScheduleFrequencyPropertiesUnit("DAYS")
)

func (DashboardRefreshScheduleFrequencyPropertiesUnit) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshScheduleFrequencyPropertiesUnit)(nil)).Elem()
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToDashboardRefreshScheduleFrequencyPropertiesUnitOutput() DashboardRefreshScheduleFrequencyPropertiesUnitOutput {
	return pulumi.ToOutput(e).(DashboardRefreshScheduleFrequencyPropertiesUnitOutput)
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToDashboardRefreshScheduleFrequencyPropertiesUnitOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DashboardRefreshScheduleFrequencyPropertiesUnitOutput)
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput() DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return e.ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(context.Background())
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return DashboardRefreshScheduleFrequencyPropertiesUnit(e).ToDashboardRefreshScheduleFrequencyPropertiesUnitOutputWithContext(ctx).ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(ctx)
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DashboardRefreshScheduleFrequencyPropertiesUnit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DashboardRefreshScheduleFrequencyPropertiesUnitOutput struct{ *pulumi.OutputState }

func (DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshScheduleFrequencyPropertiesUnit)(nil)).Elem()
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToDashboardRefreshScheduleFrequencyPropertiesUnitOutput() DashboardRefreshScheduleFrequencyPropertiesUnitOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToDashboardRefreshScheduleFrequencyPropertiesUnitOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput() DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return o.ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardRefreshScheduleFrequencyPropertiesUnit) *DashboardRefreshScheduleFrequencyPropertiesUnit {
		return &v
	}).(DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput)
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardRefreshScheduleFrequencyPropertiesUnit) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardRefreshScheduleFrequencyPropertiesUnit) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput struct{ *pulumi.OutputState }

func (DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardRefreshScheduleFrequencyPropertiesUnit)(nil)).Elem()
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput() DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput) Elem() DashboardRefreshScheduleFrequencyPropertiesUnitOutput {
	return o.ApplyT(func(v *DashboardRefreshScheduleFrequencyPropertiesUnit) DashboardRefreshScheduleFrequencyPropertiesUnit {
		if v != nil {
			return *v
		}
		var ret DashboardRefreshScheduleFrequencyPropertiesUnit
		return ret
	}).(DashboardRefreshScheduleFrequencyPropertiesUnitOutput)
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DashboardRefreshScheduleFrequencyPropertiesUnit) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DashboardRefreshScheduleFrequencyPropertiesUnitInput is an input type that accepts values of the DashboardRefreshScheduleFrequencyPropertiesUnit enum
// A concrete instance of `DashboardRefreshScheduleFrequencyPropertiesUnitInput` can be one of the following:
//
//	DashboardRefreshScheduleFrequencyPropertiesUnitHours
//	DashboardRefreshScheduleFrequencyPropertiesUnitDays
type DashboardRefreshScheduleFrequencyPropertiesUnitInput interface {
	pulumi.Input

	ToDashboardRefreshScheduleFrequencyPropertiesUnitOutput() DashboardRefreshScheduleFrequencyPropertiesUnitOutput
	ToDashboardRefreshScheduleFrequencyPropertiesUnitOutputWithContext(context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitOutput
}

var dashboardRefreshScheduleFrequencyPropertiesUnitPtrType = reflect.TypeOf((**DashboardRefreshScheduleFrequencyPropertiesUnit)(nil)).Elem()

type DashboardRefreshScheduleFrequencyPropertiesUnitPtrInput interface {
	pulumi.Input

	ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput() DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput
	ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput
}

type dashboardRefreshScheduleFrequencyPropertiesUnitPtr string

func DashboardRefreshScheduleFrequencyPropertiesUnitPtr(v string) DashboardRefreshScheduleFrequencyPropertiesUnitPtrInput {
	return (*dashboardRefreshScheduleFrequencyPropertiesUnitPtr)(&v)
}

func (*dashboardRefreshScheduleFrequencyPropertiesUnitPtr) ElementType() reflect.Type {
	return dashboardRefreshScheduleFrequencyPropertiesUnitPtrType
}

func (in *dashboardRefreshScheduleFrequencyPropertiesUnitPtr) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput() DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return pulumi.ToOutput(in).(DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput)
}

func (in *dashboardRefreshScheduleFrequencyPropertiesUnitPtr) ToDashboardRefreshScheduleFrequencyPropertiesUnitPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput)
}

// The status of the schedule. Supported values are ENABLED and DISABLED.
type DashboardRefreshScheduleStatus string

const (
	DashboardRefreshScheduleStatusEnabled  = DashboardRefreshScheduleStatus("ENABLED")
	DashboardRefreshScheduleStatusDisabled = DashboardRefreshScheduleStatus("DISABLED")
)

func (DashboardRefreshScheduleStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshScheduleStatus)(nil)).Elem()
}

func (e DashboardRefreshScheduleStatus) ToDashboardRefreshScheduleStatusOutput() DashboardRefreshScheduleStatusOutput {
	return pulumi.ToOutput(e).(DashboardRefreshScheduleStatusOutput)
}

func (e DashboardRefreshScheduleStatus) ToDashboardRefreshScheduleStatusOutputWithContext(ctx context.Context) DashboardRefreshScheduleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DashboardRefreshScheduleStatusOutput)
}

func (e DashboardRefreshScheduleStatus) ToDashboardRefreshScheduleStatusPtrOutput() DashboardRefreshScheduleStatusPtrOutput {
	return e.ToDashboardRefreshScheduleStatusPtrOutputWithContext(context.Background())
}

func (e DashboardRefreshScheduleStatus) ToDashboardRefreshScheduleStatusPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleStatusPtrOutput {
	return DashboardRefreshScheduleStatus(e).ToDashboardRefreshScheduleStatusOutputWithContext(ctx).ToDashboardRefreshScheduleStatusPtrOutputWithContext(ctx)
}

func (e DashboardRefreshScheduleStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DashboardRefreshScheduleStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DashboardRefreshScheduleStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DashboardRefreshScheduleStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DashboardRefreshScheduleStatusOutput struct{ *pulumi.OutputState }

func (DashboardRefreshScheduleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshScheduleStatus)(nil)).Elem()
}

func (o DashboardRefreshScheduleStatusOutput) ToDashboardRefreshScheduleStatusOutput() DashboardRefreshScheduleStatusOutput {
	return o
}

func (o DashboardRefreshScheduleStatusOutput) ToDashboardRefreshScheduleStatusOutputWithContext(ctx context.Context) DashboardRefreshScheduleStatusOutput {
	return o
}

func (o DashboardRefreshScheduleStatusOutput) ToDashboardRefreshScheduleStatusPtrOutput() DashboardRefreshScheduleStatusPtrOutput {
	return o.ToDashboardRefreshScheduleStatusPtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleStatusOutput) ToDashboardRefreshScheduleStatusPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardRefreshScheduleStatus) *DashboardRefreshScheduleStatus {
		return &v
	}).(DashboardRefreshScheduleStatusPtrOutput)
}

func (o DashboardRefreshScheduleStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardRefreshScheduleStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DashboardRefreshScheduleStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardRefreshScheduleStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DashboardRefreshScheduleStatusPtrOutput struct{ *pulumi.OutputState }

func (DashboardRefreshScheduleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardRefreshScheduleStatus)(nil)).Elem()
}

func (o DashboardRefreshScheduleStatusPtrOutput) ToDashboardRefreshScheduleStatusPtrOutput() DashboardRefreshScheduleStatusPtrOutput {
	return o
}

func (o DashboardRefreshScheduleStatusPtrOutput) ToDashboardRefreshScheduleStatusPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleStatusPtrOutput {
	return o
}

func (o DashboardRefreshScheduleStatusPtrOutput) Elem() DashboardRefreshScheduleStatusOutput {
	return o.ApplyT(func(v *DashboardRefreshScheduleStatus) DashboardRefreshScheduleStatus {
		if v != nil {
			return *v
		}
		var ret DashboardRefreshScheduleStatus
		return ret
	}).(DashboardRefreshScheduleStatusOutput)
}

func (o DashboardRefreshScheduleStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DashboardRefreshScheduleStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DashboardRefreshScheduleStatusInput is an input type that accepts values of the DashboardRefreshScheduleStatus enum
// A concrete instance of `DashboardRefreshScheduleStatusInput` can be one of the following:
//
//	DashboardRefreshScheduleStatusEnabled
//	DashboardRefreshScheduleStatusDisabled
type DashboardRefreshScheduleStatusInput interface {
	pulumi.Input

	ToDashboardRefreshScheduleStatusOutput() DashboardRefreshScheduleStatusOutput
	ToDashboardRefreshScheduleStatusOutputWithContext(context.Context) DashboardRefreshScheduleStatusOutput
}

var dashboardRefreshScheduleStatusPtrType = reflect.TypeOf((**DashboardRefreshScheduleStatus)(nil)).Elem()

type DashboardRefreshScheduleStatusPtrInput interface {
	pulumi.Input

	ToDashboardRefreshScheduleStatusPtrOutput() DashboardRefreshScheduleStatusPtrOutput
	ToDashboardRefreshScheduleStatusPtrOutputWithContext(context.Context) DashboardRefreshScheduleStatusPtrOutput
}

type dashboardRefreshScheduleStatusPtr string

func DashboardRefreshScheduleStatusPtr(v string) DashboardRefreshScheduleStatusPtrInput {
	return (*dashboardRefreshScheduleStatusPtr)(&v)
}

func (*dashboardRefreshScheduleStatusPtr) ElementType() reflect.Type {
	return dashboardRefreshScheduleStatusPtrType
}

func (in *dashboardRefreshScheduleStatusPtr) ToDashboardRefreshScheduleStatusPtrOutput() DashboardRefreshScheduleStatusPtrOutput {
	return pulumi.ToOutput(in).(DashboardRefreshScheduleStatusPtrOutput)
}

func (in *dashboardRefreshScheduleStatusPtr) ToDashboardRefreshScheduleStatusPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DashboardRefreshScheduleStatusPtrOutput)
}

// The status of the dashboard. Values are CREATING, CREATED, UPDATING, UPDATED and DELETING.
type DashboardStatus string

const (
	DashboardStatusCreating = DashboardStatus("CREATING")
	DashboardStatusCreated  = DashboardStatus("CREATED")
	DashboardStatusUpdating = DashboardStatus("UPDATING")
	DashboardStatusUpdated  = DashboardStatus("UPDATED")
	DashboardStatusDeleting = DashboardStatus("DELETING")
)

type DashboardStatusOutput struct{ *pulumi.OutputState }

func (DashboardStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardStatus)(nil)).Elem()
}

func (o DashboardStatusOutput) ToDashboardStatusOutput() DashboardStatusOutput {
	return o
}

func (o DashboardStatusOutput) ToDashboardStatusOutputWithContext(ctx context.Context) DashboardStatusOutput {
	return o
}

func (o DashboardStatusOutput) ToDashboardStatusPtrOutput() DashboardStatusPtrOutput {
	return o.ToDashboardStatusPtrOutputWithContext(context.Background())
}

func (o DashboardStatusOutput) ToDashboardStatusPtrOutputWithContext(ctx context.Context) DashboardStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardStatus) *DashboardStatus {
		return &v
	}).(DashboardStatusPtrOutput)
}

func (o DashboardStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DashboardStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DashboardStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DashboardStatusPtrOutput struct{ *pulumi.OutputState }

func (DashboardStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardStatus)(nil)).Elem()
}

func (o DashboardStatusPtrOutput) ToDashboardStatusPtrOutput() DashboardStatusPtrOutput {
	return o
}

func (o DashboardStatusPtrOutput) ToDashboardStatusPtrOutputWithContext(ctx context.Context) DashboardStatusPtrOutput {
	return o
}

func (o DashboardStatusPtrOutput) Elem() DashboardStatusOutput {
	return o.ApplyT(func(v *DashboardStatus) DashboardStatus {
		if v != nil {
			return *v
		}
		var ret DashboardStatus
		return ret
	}).(DashboardStatusOutput)
}

func (o DashboardStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DashboardStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// The type of the dashboard. Values are CUSTOM and MANAGED.
type DashboardType string

const (
	DashboardTypeManaged = DashboardType("MANAGED")
	DashboardTypeCustom  = DashboardType("CUSTOM")
)

type DashboardTypeOutput struct{ *pulumi.OutputState }

func (DashboardTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardType)(nil)).Elem()
}

func (o DashboardTypeOutput) ToDashboardTypeOutput() DashboardTypeOutput {
	return o
}

func (o DashboardTypeOutput) ToDashboardTypeOutputWithContext(ctx context.Context) DashboardTypeOutput {
	return o
}

func (o DashboardTypeOutput) ToDashboardTypePtrOutput() DashboardTypePtrOutput {
	return o.ToDashboardTypePtrOutputWithContext(context.Background())
}

func (o DashboardTypeOutput) ToDashboardTypePtrOutputWithContext(ctx context.Context) DashboardTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardType) *DashboardType {
		return &v
	}).(DashboardTypePtrOutput)
}

func (o DashboardTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DashboardTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DashboardTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DashboardTypePtrOutput struct{ *pulumi.OutputState }

func (DashboardTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardType)(nil)).Elem()
}

func (o DashboardTypePtrOutput) ToDashboardTypePtrOutput() DashboardTypePtrOutput {
	return o
}

func (o DashboardTypePtrOutput) ToDashboardTypePtrOutputWithContext(ctx context.Context) DashboardTypePtrOutput {
	return o
}

func (o DashboardTypePtrOutput) Elem() DashboardTypeOutput {
	return o.ApplyT(func(v *DashboardType) DashboardType {
		if v != nil {
			return *v
		}
		var ret DashboardType
		return ret
	}).(DashboardTypeOutput)
}

func (o DashboardTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DashboardType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of the event record field in ContextKeySelector. Valid values include RequestContext, TagContext.
type EventDataStoreContextKeySelectorType string

const (
	EventDataStoreContextKeySelectorTypeRequestContext = EventDataStoreContextKeySelectorType("RequestContext")
	EventDataStoreContextKeySelectorTypeTagContext     = EventDataStoreContextKeySelectorType("TagContext")
)

func (EventDataStoreContextKeySelectorType) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreContextKeySelectorType)(nil)).Elem()
}

func (e EventDataStoreContextKeySelectorType) ToEventDataStoreContextKeySelectorTypeOutput() EventDataStoreContextKeySelectorTypeOutput {
	return pulumi.ToOutput(e).(EventDataStoreContextKeySelectorTypeOutput)
}

func (e EventDataStoreContextKeySelectorType) ToEventDataStoreContextKeySelectorTypeOutputWithContext(ctx context.Context) EventDataStoreContextKeySelectorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventDataStoreContextKeySelectorTypeOutput)
}

func (e EventDataStoreContextKeySelectorType) ToEventDataStoreContextKeySelectorTypePtrOutput() EventDataStoreContextKeySelectorTypePtrOutput {
	return e.ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(context.Background())
}

func (e EventDataStoreContextKeySelectorType) ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(ctx context.Context) EventDataStoreContextKeySelectorTypePtrOutput {
	return EventDataStoreContextKeySelectorType(e).ToEventDataStoreContextKeySelectorTypeOutputWithContext(ctx).ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(ctx)
}

func (e EventDataStoreContextKeySelectorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventDataStoreContextKeySelectorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventDataStoreContextKeySelectorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventDataStoreContextKeySelectorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventDataStoreContextKeySelectorTypeOutput struct{ *pulumi.OutputState }

func (EventDataStoreContextKeySelectorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreContextKeySelectorType)(nil)).Elem()
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToEventDataStoreContextKeySelectorTypeOutput() EventDataStoreContextKeySelectorTypeOutput {
	return o
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToEventDataStoreContextKeySelectorTypeOutputWithContext(ctx context.Context) EventDataStoreContextKeySelectorTypeOutput {
	return o
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToEventDataStoreContextKeySelectorTypePtrOutput() EventDataStoreContextKeySelectorTypePtrOutput {
	return o.ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(context.Background())
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(ctx context.Context) EventDataStoreContextKeySelectorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventDataStoreContextKeySelectorType) *EventDataStoreContextKeySelectorType {
		return &v
	}).(EventDataStoreContextKeySelectorTypePtrOutput)
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventDataStoreContextKeySelectorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventDataStoreContextKeySelectorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventDataStoreContextKeySelectorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventDataStoreContextKeySelectorTypePtrOutput struct{ *pulumi.OutputState }

func (EventDataStoreContextKeySelectorTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDataStoreContextKeySelectorType)(nil)).Elem()
}

func (o EventDataStoreContextKeySelectorTypePtrOutput) ToEventDataStoreContextKeySelectorTypePtrOutput() EventDataStoreContextKeySelectorTypePtrOutput {
	return o
}

func (o EventDataStoreContextKeySelectorTypePtrOutput) ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(ctx context.Context) EventDataStoreContextKeySelectorTypePtrOutput {
	return o
}

func (o EventDataStoreContextKeySelectorTypePtrOutput) Elem() EventDataStoreContextKeySelectorTypeOutput {
	return o.ApplyT(func(v *EventDataStoreContextKeySelectorType) EventDataStoreContextKeySelectorType {
		if v != nil {
			return *v
		}
		var ret EventDataStoreContextKeySelectorType
		return ret
	}).(EventDataStoreContextKeySelectorTypeOutput)
}

func (o EventDataStoreContextKeySelectorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventDataStoreContextKeySelectorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventDataStoreContextKeySelectorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventDataStoreContextKeySelectorTypeInput is an input type that accepts values of the EventDataStoreContextKeySelectorType enum
// A concrete instance of `EventDataStoreContextKeySelectorTypeInput` can be one of the following:
//
//	EventDataStoreContextKeySelectorTypeRequestContext
//	EventDataStoreContextKeySelectorTypeTagContext
type EventDataStoreContextKeySelectorTypeInput interface {
	pulumi.Input

	ToEventDataStoreContextKeySelectorTypeOutput() EventDataStoreContextKeySelectorTypeOutput
	ToEventDataStoreContextKeySelectorTypeOutputWithContext(context.Context) EventDataStoreContextKeySelectorTypeOutput
}

var eventDataStoreContextKeySelectorTypePtrType = reflect.TypeOf((**EventDataStoreContextKeySelectorType)(nil)).Elem()

type EventDataStoreContextKeySelectorTypePtrInput interface {
	pulumi.Input

	ToEventDataStoreContextKeySelectorTypePtrOutput() EventDataStoreContextKeySelectorTypePtrOutput
	ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(context.Context) EventDataStoreContextKeySelectorTypePtrOutput
}

type eventDataStoreContextKeySelectorTypePtr string

func EventDataStoreContextKeySelectorTypePtr(v string) EventDataStoreContextKeySelectorTypePtrInput {
	return (*eventDataStoreContextKeySelectorTypePtr)(&v)
}

func (*eventDataStoreContextKeySelectorTypePtr) ElementType() reflect.Type {
	return eventDataStoreContextKeySelectorTypePtrType
}

func (in *eventDataStoreContextKeySelectorTypePtr) ToEventDataStoreContextKeySelectorTypePtrOutput() EventDataStoreContextKeySelectorTypePtrOutput {
	return pulumi.ToOutput(in).(EventDataStoreContextKeySelectorTypePtrOutput)
}

func (in *eventDataStoreContextKeySelectorTypePtr) ToEventDataStoreContextKeySelectorTypePtrOutputWithContext(ctx context.Context) EventDataStoreContextKeySelectorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventDataStoreContextKeySelectorTypePtrOutput)
}

// Specifies the maximum size allowed for the event. Valid values are Standard and Large. If you add ContextKeySelectors, this value must be set to Large.
type EventDataStoreMaxEventSize string

const (
	EventDataStoreMaxEventSizeStandard = EventDataStoreMaxEventSize("Standard")
	EventDataStoreMaxEventSizeLarge    = EventDataStoreMaxEventSize("Large")
)

func (EventDataStoreMaxEventSize) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreMaxEventSize)(nil)).Elem()
}

func (e EventDataStoreMaxEventSize) ToEventDataStoreMaxEventSizeOutput() EventDataStoreMaxEventSizeOutput {
	return pulumi.ToOutput(e).(EventDataStoreMaxEventSizeOutput)
}

func (e EventDataStoreMaxEventSize) ToEventDataStoreMaxEventSizeOutputWithContext(ctx context.Context) EventDataStoreMaxEventSizeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventDataStoreMaxEventSizeOutput)
}

func (e EventDataStoreMaxEventSize) ToEventDataStoreMaxEventSizePtrOutput() EventDataStoreMaxEventSizePtrOutput {
	return e.ToEventDataStoreMaxEventSizePtrOutputWithContext(context.Background())
}

func (e EventDataStoreMaxEventSize) ToEventDataStoreMaxEventSizePtrOutputWithContext(ctx context.Context) EventDataStoreMaxEventSizePtrOutput {
	return EventDataStoreMaxEventSize(e).ToEventDataStoreMaxEventSizeOutputWithContext(ctx).ToEventDataStoreMaxEventSizePtrOutputWithContext(ctx)
}

func (e EventDataStoreMaxEventSize) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventDataStoreMaxEventSize) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventDataStoreMaxEventSize) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventDataStoreMaxEventSize) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventDataStoreMaxEventSizeOutput struct{ *pulumi.OutputState }

func (EventDataStoreMaxEventSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreMaxEventSize)(nil)).Elem()
}

func (o EventDataStoreMaxEventSizeOutput) ToEventDataStoreMaxEventSizeOutput() EventDataStoreMaxEventSizeOutput {
	return o
}

func (o EventDataStoreMaxEventSizeOutput) ToEventDataStoreMaxEventSizeOutputWithContext(ctx context.Context) EventDataStoreMaxEventSizeOutput {
	return o
}

func (o EventDataStoreMaxEventSizeOutput) ToEventDataStoreMaxEventSizePtrOutput() EventDataStoreMaxEventSizePtrOutput {
	return o.ToEventDataStoreMaxEventSizePtrOutputWithContext(context.Background())
}

func (o EventDataStoreMaxEventSizeOutput) ToEventDataStoreMaxEventSizePtrOutputWithContext(ctx context.Context) EventDataStoreMaxEventSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventDataStoreMaxEventSize) *EventDataStoreMaxEventSize {
		return &v
	}).(EventDataStoreMaxEventSizePtrOutput)
}

func (o EventDataStoreMaxEventSizeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventDataStoreMaxEventSizeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventDataStoreMaxEventSize) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventDataStoreMaxEventSizeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventDataStoreMaxEventSizeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventDataStoreMaxEventSize) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventDataStoreMaxEventSizePtrOutput struct{ *pulumi.OutputState }

func (EventDataStoreMaxEventSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventDataStoreMaxEventSize)(nil)).Elem()
}

func (o EventDataStoreMaxEventSizePtrOutput) ToEventDataStoreMaxEventSizePtrOutput() EventDataStoreMaxEventSizePtrOutput {
	return o
}

func (o EventDataStoreMaxEventSizePtrOutput) ToEventDataStoreMaxEventSizePtrOutputWithContext(ctx context.Context) EventDataStoreMaxEventSizePtrOutput {
	return o
}

func (o EventDataStoreMaxEventSizePtrOutput) Elem() EventDataStoreMaxEventSizeOutput {
	return o.ApplyT(func(v *EventDataStoreMaxEventSize) EventDataStoreMaxEventSize {
		if v != nil {
			return *v
		}
		var ret EventDataStoreMaxEventSize
		return ret
	}).(EventDataStoreMaxEventSizeOutput)
}

func (o EventDataStoreMaxEventSizePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventDataStoreMaxEventSizePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventDataStoreMaxEventSize) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventDataStoreMaxEventSizeInput is an input type that accepts values of the EventDataStoreMaxEventSize enum
// A concrete instance of `EventDataStoreMaxEventSizeInput` can be one of the following:
//
//	EventDataStoreMaxEventSizeStandard
//	EventDataStoreMaxEventSizeLarge
type EventDataStoreMaxEventSizeInput interface {
	pulumi.Input

	ToEventDataStoreMaxEventSizeOutput() EventDataStoreMaxEventSizeOutput
	ToEventDataStoreMaxEventSizeOutputWithContext(context.Context) EventDataStoreMaxEventSizeOutput
}

var eventDataStoreMaxEventSizePtrType = reflect.TypeOf((**EventDataStoreMaxEventSize)(nil)).Elem()

type EventDataStoreMaxEventSizePtrInput interface {
	pulumi.Input

	ToEventDataStoreMaxEventSizePtrOutput() EventDataStoreMaxEventSizePtrOutput
	ToEventDataStoreMaxEventSizePtrOutputWithContext(context.Context) EventDataStoreMaxEventSizePtrOutput
}

type eventDataStoreMaxEventSizePtr string

func EventDataStoreMaxEventSizePtr(v string) EventDataStoreMaxEventSizePtrInput {
	return (*eventDataStoreMaxEventSizePtr)(&v)
}

func (*eventDataStoreMaxEventSizePtr) ElementType() reflect.Type {
	return eventDataStoreMaxEventSizePtrType
}

func (in *eventDataStoreMaxEventSizePtr) ToEventDataStoreMaxEventSizePtrOutput() EventDataStoreMaxEventSizePtrOutput {
	return pulumi.ToOutput(in).(EventDataStoreMaxEventSizePtrOutput)
}

func (in *eventDataStoreMaxEventSizePtr) ToEventDataStoreMaxEventSizePtrOutputWithContext(ctx context.Context) EventDataStoreMaxEventSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventDataStoreMaxEventSizePtrOutput)
}

// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
type TrailEventSelectorReadWriteType string

const (
	TrailEventSelectorReadWriteTypeAll       = TrailEventSelectorReadWriteType("All")
	TrailEventSelectorReadWriteTypeReadOnly  = TrailEventSelectorReadWriteType("ReadOnly")
	TrailEventSelectorReadWriteTypeWriteOnly = TrailEventSelectorReadWriteType("WriteOnly")
)

func (TrailEventSelectorReadWriteType) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorReadWriteType)(nil)).Elem()
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypeOutput() TrailEventSelectorReadWriteTypeOutput {
	return pulumi.ToOutput(e).(TrailEventSelectorReadWriteTypeOutput)
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypeOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrailEventSelectorReadWriteTypeOutput)
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return e.ToTrailEventSelectorReadWriteTypePtrOutputWithContext(context.Background())
}

func (e TrailEventSelectorReadWriteType) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return TrailEventSelectorReadWriteType(e).ToTrailEventSelectorReadWriteTypeOutputWithContext(ctx).ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx)
}

func (e TrailEventSelectorReadWriteType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrailEventSelectorReadWriteType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrailEventSelectorReadWriteType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrailEventSelectorReadWriteType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrailEventSelectorReadWriteTypeOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorReadWriteTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelectorReadWriteType)(nil)).Elem()
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypeOutput() TrailEventSelectorReadWriteTypeOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypeOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypeOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return o.ToTrailEventSelectorReadWriteTypePtrOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypeOutput) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrailEventSelectorReadWriteType) *TrailEventSelectorReadWriteType {
		return &v
	}).(TrailEventSelectorReadWriteTypePtrOutput)
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrailEventSelectorReadWriteType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrailEventSelectorReadWriteType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrailEventSelectorReadWriteTypePtrOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorReadWriteTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrailEventSelectorReadWriteType)(nil)).Elem()
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return o
}

func (o TrailEventSelectorReadWriteTypePtrOutput) Elem() TrailEventSelectorReadWriteTypeOutput {
	return o.ApplyT(func(v *TrailEventSelectorReadWriteType) TrailEventSelectorReadWriteType {
		if v != nil {
			return *v
		}
		var ret TrailEventSelectorReadWriteType
		return ret
	}).(TrailEventSelectorReadWriteTypeOutput)
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrailEventSelectorReadWriteTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrailEventSelectorReadWriteType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TrailEventSelectorReadWriteTypeInput is an input type that accepts values of the TrailEventSelectorReadWriteType enum
// A concrete instance of `TrailEventSelectorReadWriteTypeInput` can be one of the following:
//
//	TrailEventSelectorReadWriteTypeAll
//	TrailEventSelectorReadWriteTypeReadOnly
//	TrailEventSelectorReadWriteTypeWriteOnly
type TrailEventSelectorReadWriteTypeInput interface {
	pulumi.Input

	ToTrailEventSelectorReadWriteTypeOutput() TrailEventSelectorReadWriteTypeOutput
	ToTrailEventSelectorReadWriteTypeOutputWithContext(context.Context) TrailEventSelectorReadWriteTypeOutput
}

var trailEventSelectorReadWriteTypePtrType = reflect.TypeOf((**TrailEventSelectorReadWriteType)(nil)).Elem()

type TrailEventSelectorReadWriteTypePtrInput interface {
	pulumi.Input

	ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput
	ToTrailEventSelectorReadWriteTypePtrOutputWithContext(context.Context) TrailEventSelectorReadWriteTypePtrOutput
}

type trailEventSelectorReadWriteTypePtr string

func TrailEventSelectorReadWriteTypePtr(v string) TrailEventSelectorReadWriteTypePtrInput {
	return (*trailEventSelectorReadWriteTypePtr)(&v)
}

func (*trailEventSelectorReadWriteTypePtr) ElementType() reflect.Type {
	return trailEventSelectorReadWriteTypePtrType
}

func (in *trailEventSelectorReadWriteTypePtr) ToTrailEventSelectorReadWriteTypePtrOutput() TrailEventSelectorReadWriteTypePtrOutput {
	return pulumi.ToOutput(in).(TrailEventSelectorReadWriteTypePtrOutput)
}

func (in *trailEventSelectorReadWriteTypePtr) ToTrailEventSelectorReadWriteTypePtrOutputWithContext(ctx context.Context) TrailEventSelectorReadWriteTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrailEventSelectorReadWriteTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDestinationTypeInput)(nil)).Elem(), ChannelDestinationType("EVENT_DATA_STORE"))
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDestinationTypePtrInput)(nil)).Elem(), ChannelDestinationType("EVENT_DATA_STORE"))
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshScheduleFrequencyPropertiesUnitInput)(nil)).Elem(), DashboardRefreshScheduleFrequencyPropertiesUnit("HOURS"))
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshScheduleFrequencyPropertiesUnitPtrInput)(nil)).Elem(), DashboardRefreshScheduleFrequencyPropertiesUnit("HOURS"))
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshScheduleStatusInput)(nil)).Elem(), DashboardRefreshScheduleStatus("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshScheduleStatusPtrInput)(nil)).Elem(), DashboardRefreshScheduleStatus("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreContextKeySelectorTypeInput)(nil)).Elem(), EventDataStoreContextKeySelectorType("RequestContext"))
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreContextKeySelectorTypePtrInput)(nil)).Elem(), EventDataStoreContextKeySelectorType("RequestContext"))
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreMaxEventSizeInput)(nil)).Elem(), EventDataStoreMaxEventSize("Standard"))
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreMaxEventSizePtrInput)(nil)).Elem(), EventDataStoreMaxEventSize("Standard"))
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorReadWriteTypeInput)(nil)).Elem(), TrailEventSelectorReadWriteType("All"))
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorReadWriteTypePtrInput)(nil)).Elem(), TrailEventSelectorReadWriteType("All"))
	pulumi.RegisterOutputType(ChannelDestinationTypeOutput{})
	pulumi.RegisterOutputType(ChannelDestinationTypePtrOutput{})
	pulumi.RegisterOutputType(DashboardRefreshScheduleFrequencyPropertiesUnitOutput{})
	pulumi.RegisterOutputType(DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput{})
	pulumi.RegisterOutputType(DashboardRefreshScheduleStatusOutput{})
	pulumi.RegisterOutputType(DashboardRefreshScheduleStatusPtrOutput{})
	pulumi.RegisterOutputType(DashboardStatusOutput{})
	pulumi.RegisterOutputType(DashboardStatusPtrOutput{})
	pulumi.RegisterOutputType(DashboardTypeOutput{})
	pulumi.RegisterOutputType(DashboardTypePtrOutput{})
	pulumi.RegisterOutputType(EventDataStoreContextKeySelectorTypeOutput{})
	pulumi.RegisterOutputType(EventDataStoreContextKeySelectorTypePtrOutput{})
	pulumi.RegisterOutputType(EventDataStoreMaxEventSizeOutput{})
	pulumi.RegisterOutputType(EventDataStoreMaxEventSizePtrOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorReadWriteTypeOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorReadWriteTypePtrOutput{})
}
