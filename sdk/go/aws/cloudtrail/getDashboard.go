// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Amazon CloudTrail dashboard resource allows customers to manage managed dashboards and create custom dashboards. You can manually refresh custom and managed dashboards. For custom dashboards, you can also set up an automatic refresh schedule and modify dashboard widgets.
func LookupDashboard(ctx *pulumi.Context, args *LookupDashboardArgs, opts ...pulumi.InvokeOption) (*LookupDashboardResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDashboardResult
	err := ctx.Invoke("aws-native:cloudtrail:getDashboard", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDashboardArgs struct {
	// The ARN of the dashboard.
	DashboardArn string `pulumi:"dashboardArn"`
}

type LookupDashboardResult struct {
	// The timestamp of the dashboard creation.
	CreatedTimestamp *string `pulumi:"createdTimestamp"`
	// The ARN of the dashboard.
	DashboardArn *string `pulumi:"dashboardArn"`
	// The name of the dashboard.
	Name *string `pulumi:"name"`
	// Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
	RefreshSchedule *DashboardRefreshSchedule `pulumi:"refreshSchedule"`
	// The status of the dashboard. Values are CREATING, CREATED, UPDATING, UPDATED and DELETING.
	Status *DashboardStatus `pulumi:"status"`
	// A list of tags.
	Tags []aws.Tag `pulumi:"tags"`
	// Indicates whether the dashboard is protected from termination.
	TerminationProtectionEnabled *bool `pulumi:"terminationProtectionEnabled"`
	// The type of the dashboard. Values are CUSTOM and MANAGED.
	Type *DashboardType `pulumi:"type"`
	// The timestamp showing when the dashboard was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
	UpdatedTimestamp *string `pulumi:"updatedTimestamp"`
	// List of widgets on the dashboard
	Widgets []DashboardWidget `pulumi:"widgets"`
}

func LookupDashboardOutput(ctx *pulumi.Context, args LookupDashboardOutputArgs, opts ...pulumi.InvokeOption) LookupDashboardResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDashboardResultOutput, error) {
			args := v.(LookupDashboardArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:cloudtrail:getDashboard", args, LookupDashboardResultOutput{}, options).(LookupDashboardResultOutput), nil
		}).(LookupDashboardResultOutput)
}

type LookupDashboardOutputArgs struct {
	// The ARN of the dashboard.
	DashboardArn pulumi.StringInput `pulumi:"dashboardArn"`
}

func (LookupDashboardOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDashboardArgs)(nil)).Elem()
}

type LookupDashboardResultOutput struct{ *pulumi.OutputState }

func (LookupDashboardResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDashboardResult)(nil)).Elem()
}

func (o LookupDashboardResultOutput) ToLookupDashboardResultOutput() LookupDashboardResultOutput {
	return o
}

func (o LookupDashboardResultOutput) ToLookupDashboardResultOutputWithContext(ctx context.Context) LookupDashboardResultOutput {
	return o
}

// The timestamp of the dashboard creation.
func (o LookupDashboardResultOutput) CreatedTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *string { return v.CreatedTimestamp }).(pulumi.StringPtrOutput)
}

// The ARN of the dashboard.
func (o LookupDashboardResultOutput) DashboardArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *string { return v.DashboardArn }).(pulumi.StringPtrOutput)
}

// The name of the dashboard.
func (o LookupDashboardResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
func (o LookupDashboardResultOutput) RefreshSchedule() DashboardRefreshSchedulePtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *DashboardRefreshSchedule { return v.RefreshSchedule }).(DashboardRefreshSchedulePtrOutput)
}

// The status of the dashboard. Values are CREATING, CREATED, UPDATING, UPDATED and DELETING.
func (o LookupDashboardResultOutput) Status() DashboardStatusPtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *DashboardStatus { return v.Status }).(DashboardStatusPtrOutput)
}

// A list of tags.
func (o LookupDashboardResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDashboardResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// Indicates whether the dashboard is protected from termination.
func (o LookupDashboardResultOutput) TerminationProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *bool { return v.TerminationProtectionEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the dashboard. Values are CUSTOM and MANAGED.
func (o LookupDashboardResultOutput) Type() DashboardTypePtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *DashboardType { return v.Type }).(DashboardTypePtrOutput)
}

// The timestamp showing when the dashboard was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
func (o LookupDashboardResultOutput) UpdatedTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDashboardResult) *string { return v.UpdatedTimestamp }).(pulumi.StringPtrOutput)
}

// List of widgets on the dashboard
func (o LookupDashboardResultOutput) Widgets() DashboardWidgetArrayOutput {
	return o.ApplyT(func(v LookupDashboardResult) []DashboardWidget { return v.Widgets }).(DashboardWidgetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDashboardResultOutput{})
}
