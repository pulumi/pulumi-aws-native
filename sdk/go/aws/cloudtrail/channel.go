// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A channel receives events from a specific source (such as an on-premises storage solution or application, or a partner event data source), and delivers the events to one or more event data stores. You use channels to ingest events into CloudTrail from sources outside AWS.
type Channel struct {
	pulumi.CustomResourceState

	ChannelArn pulumi.StringOutput `pulumi:"channelArn"`
	// One or more resources to which events arriving through a channel are logged and stored.
	Destinations ChannelDestinationArrayOutput `pulumi:"destinations"`
	Name         pulumi.StringPtrOutput        `pulumi:"name"`
	// The ARN of an on-premises storage solution or application, or a partner event source.
	Source pulumi.StringPtrOutput `pulumi:"source"`
	// An array of key-value pairs to apply to this resource.
	Tags ChannelTagArrayOutput `pulumi:"tags"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		args = &ChannelArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"source",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Channel
	err := ctx.RegisterResource("aws-native:cloudtrail:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws-native:cloudtrail:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
}

type ChannelState struct {
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// One or more resources to which events arriving through a channel are logged and stored.
	Destinations []ChannelDestination `pulumi:"destinations"`
	Name         *string              `pulumi:"name"`
	// The ARN of an on-premises storage solution or application, or a partner event source.
	Source *string `pulumi:"source"`
	// An array of key-value pairs to apply to this resource.
	Tags []ChannelTag `pulumi:"tags"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// One or more resources to which events arriving through a channel are logged and stored.
	Destinations ChannelDestinationArrayInput
	Name         pulumi.StringPtrInput
	// The ARN of an on-premises storage solution or application, or a partner event source.
	Source pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags ChannelTagArrayInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(ctx context.Context) ChannelOutput
}

func (*Channel) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *Channel) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i *Channel) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

func (o ChannelOutput) ChannelArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.ChannelArn }).(pulumi.StringOutput)
}

// One or more resources to which events arriving through a channel are logged and stored.
func (o ChannelOutput) Destinations() ChannelDestinationArrayOutput {
	return o.ApplyT(func(v *Channel) ChannelDestinationArrayOutput { return v.Destinations }).(ChannelDestinationArrayOutput)
}

func (o ChannelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The ARN of an on-premises storage solution or application, or a partner event source.
func (o ChannelOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ChannelOutput) Tags() ChannelTagArrayOutput {
	return o.ApplyT(func(v *Channel) ChannelTagArrayOutput { return v.Tags }).(ChannelTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInput)(nil)).Elem(), &Channel{})
	pulumi.RegisterOutputType(ChannelOutput{})
}
