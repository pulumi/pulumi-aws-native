// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The resource that receives events arriving from a channel.
type ChannelDestination struct {
	// The ARN of a resource that receives events from a channel.
	Location string `pulumi:"location"`
	// The type of destination for events arriving from a channel.
	Type ChannelDestinationType `pulumi:"type"`
}

// ChannelDestinationInput is an input type that accepts ChannelDestinationArgs and ChannelDestinationOutput values.
// You can construct a concrete instance of `ChannelDestinationInput` via:
//
//	ChannelDestinationArgs{...}
type ChannelDestinationInput interface {
	pulumi.Input

	ToChannelDestinationOutput() ChannelDestinationOutput
	ToChannelDestinationOutputWithContext(context.Context) ChannelDestinationOutput
}

// The resource that receives events arriving from a channel.
type ChannelDestinationArgs struct {
	// The ARN of a resource that receives events from a channel.
	Location pulumi.StringInput `pulumi:"location"`
	// The type of destination for events arriving from a channel.
	Type ChannelDestinationTypeInput `pulumi:"type"`
}

func (ChannelDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestination)(nil)).Elem()
}

func (i ChannelDestinationArgs) ToChannelDestinationOutput() ChannelDestinationOutput {
	return i.ToChannelDestinationOutputWithContext(context.Background())
}

func (i ChannelDestinationArgs) ToChannelDestinationOutputWithContext(ctx context.Context) ChannelDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDestinationOutput)
}

// ChannelDestinationArrayInput is an input type that accepts ChannelDestinationArray and ChannelDestinationArrayOutput values.
// You can construct a concrete instance of `ChannelDestinationArrayInput` via:
//
//	ChannelDestinationArray{ ChannelDestinationArgs{...} }
type ChannelDestinationArrayInput interface {
	pulumi.Input

	ToChannelDestinationArrayOutput() ChannelDestinationArrayOutput
	ToChannelDestinationArrayOutputWithContext(context.Context) ChannelDestinationArrayOutput
}

type ChannelDestinationArray []ChannelDestinationInput

func (ChannelDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelDestination)(nil)).Elem()
}

func (i ChannelDestinationArray) ToChannelDestinationArrayOutput() ChannelDestinationArrayOutput {
	return i.ToChannelDestinationArrayOutputWithContext(context.Background())
}

func (i ChannelDestinationArray) ToChannelDestinationArrayOutputWithContext(ctx context.Context) ChannelDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDestinationArrayOutput)
}

// The resource that receives events arriving from a channel.
type ChannelDestinationOutput struct{ *pulumi.OutputState }

func (ChannelDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDestination)(nil)).Elem()
}

func (o ChannelDestinationOutput) ToChannelDestinationOutput() ChannelDestinationOutput {
	return o
}

func (o ChannelDestinationOutput) ToChannelDestinationOutputWithContext(ctx context.Context) ChannelDestinationOutput {
	return o
}

// The ARN of a resource that receives events from a channel.
func (o ChannelDestinationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelDestination) string { return v.Location }).(pulumi.StringOutput)
}

// The type of destination for events arriving from a channel.
func (o ChannelDestinationOutput) Type() ChannelDestinationTypeOutput {
	return o.ApplyT(func(v ChannelDestination) ChannelDestinationType { return v.Type }).(ChannelDestinationTypeOutput)
}

type ChannelDestinationArrayOutput struct{ *pulumi.OutputState }

func (ChannelDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelDestination)(nil)).Elem()
}

func (o ChannelDestinationArrayOutput) ToChannelDestinationArrayOutput() ChannelDestinationArrayOutput {
	return o
}

func (o ChannelDestinationArrayOutput) ToChannelDestinationArrayOutputWithContext(ctx context.Context) ChannelDestinationArrayOutput {
	return o
}

func (o ChannelDestinationArrayOutput) Index(i pulumi.IntInput) ChannelDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelDestination {
		return vs[0].([]ChannelDestination)[vs[1].(int)]
	}).(ChannelDestinationOutput)
}

// A key-value pair to associate with a resource.
type ChannelTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
type DashboardRefreshSchedule struct {
	Frequency *DashboardRefreshScheduleFrequencyProperties `pulumi:"frequency"`
	// The status of the schedule. Supported values are ENABLED and DISABLED.
	Status *DashboardRefreshScheduleStatus `pulumi:"status"`
	// StartTime of the automatic schedule refresh.
	TimeOfDay *string `pulumi:"timeOfDay"`
}

// DashboardRefreshScheduleInput is an input type that accepts DashboardRefreshScheduleArgs and DashboardRefreshScheduleOutput values.
// You can construct a concrete instance of `DashboardRefreshScheduleInput` via:
//
//	DashboardRefreshScheduleArgs{...}
type DashboardRefreshScheduleInput interface {
	pulumi.Input

	ToDashboardRefreshScheduleOutput() DashboardRefreshScheduleOutput
	ToDashboardRefreshScheduleOutputWithContext(context.Context) DashboardRefreshScheduleOutput
}

// Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
type DashboardRefreshScheduleArgs struct {
	Frequency DashboardRefreshScheduleFrequencyPropertiesPtrInput `pulumi:"frequency"`
	// The status of the schedule. Supported values are ENABLED and DISABLED.
	Status DashboardRefreshScheduleStatusPtrInput `pulumi:"status"`
	// StartTime of the automatic schedule refresh.
	TimeOfDay pulumi.StringPtrInput `pulumi:"timeOfDay"`
}

func (DashboardRefreshScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshSchedule)(nil)).Elem()
}

func (i DashboardRefreshScheduleArgs) ToDashboardRefreshScheduleOutput() DashboardRefreshScheduleOutput {
	return i.ToDashboardRefreshScheduleOutputWithContext(context.Background())
}

func (i DashboardRefreshScheduleArgs) ToDashboardRefreshScheduleOutputWithContext(ctx context.Context) DashboardRefreshScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRefreshScheduleOutput)
}

func (i DashboardRefreshScheduleArgs) ToDashboardRefreshSchedulePtrOutput() DashboardRefreshSchedulePtrOutput {
	return i.ToDashboardRefreshSchedulePtrOutputWithContext(context.Background())
}

func (i DashboardRefreshScheduleArgs) ToDashboardRefreshSchedulePtrOutputWithContext(ctx context.Context) DashboardRefreshSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRefreshScheduleOutput).ToDashboardRefreshSchedulePtrOutputWithContext(ctx)
}

// DashboardRefreshSchedulePtrInput is an input type that accepts DashboardRefreshScheduleArgs, DashboardRefreshSchedulePtr and DashboardRefreshSchedulePtrOutput values.
// You can construct a concrete instance of `DashboardRefreshSchedulePtrInput` via:
//
//	        DashboardRefreshScheduleArgs{...}
//
//	or:
//
//	        nil
type DashboardRefreshSchedulePtrInput interface {
	pulumi.Input

	ToDashboardRefreshSchedulePtrOutput() DashboardRefreshSchedulePtrOutput
	ToDashboardRefreshSchedulePtrOutputWithContext(context.Context) DashboardRefreshSchedulePtrOutput
}

type dashboardRefreshSchedulePtrType DashboardRefreshScheduleArgs

func DashboardRefreshSchedulePtr(v *DashboardRefreshScheduleArgs) DashboardRefreshSchedulePtrInput {
	return (*dashboardRefreshSchedulePtrType)(v)
}

func (*dashboardRefreshSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardRefreshSchedule)(nil)).Elem()
}

func (i *dashboardRefreshSchedulePtrType) ToDashboardRefreshSchedulePtrOutput() DashboardRefreshSchedulePtrOutput {
	return i.ToDashboardRefreshSchedulePtrOutputWithContext(context.Background())
}

func (i *dashboardRefreshSchedulePtrType) ToDashboardRefreshSchedulePtrOutputWithContext(ctx context.Context) DashboardRefreshSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRefreshSchedulePtrOutput)
}

// Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
type DashboardRefreshScheduleOutput struct{ *pulumi.OutputState }

func (DashboardRefreshScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshSchedule)(nil)).Elem()
}

func (o DashboardRefreshScheduleOutput) ToDashboardRefreshScheduleOutput() DashboardRefreshScheduleOutput {
	return o
}

func (o DashboardRefreshScheduleOutput) ToDashboardRefreshScheduleOutputWithContext(ctx context.Context) DashboardRefreshScheduleOutput {
	return o
}

func (o DashboardRefreshScheduleOutput) ToDashboardRefreshSchedulePtrOutput() DashboardRefreshSchedulePtrOutput {
	return o.ToDashboardRefreshSchedulePtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleOutput) ToDashboardRefreshSchedulePtrOutputWithContext(ctx context.Context) DashboardRefreshSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardRefreshSchedule) *DashboardRefreshSchedule {
		return &v
	}).(DashboardRefreshSchedulePtrOutput)
}

func (o DashboardRefreshScheduleOutput) Frequency() DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return o.ApplyT(func(v DashboardRefreshSchedule) *DashboardRefreshScheduleFrequencyProperties { return v.Frequency }).(DashboardRefreshScheduleFrequencyPropertiesPtrOutput)
}

// The status of the schedule. Supported values are ENABLED and DISABLED.
func (o DashboardRefreshScheduleOutput) Status() DashboardRefreshScheduleStatusPtrOutput {
	return o.ApplyT(func(v DashboardRefreshSchedule) *DashboardRefreshScheduleStatus { return v.Status }).(DashboardRefreshScheduleStatusPtrOutput)
}

// StartTime of the automatic schedule refresh.
func (o DashboardRefreshScheduleOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardRefreshSchedule) *string { return v.TimeOfDay }).(pulumi.StringPtrOutput)
}

type DashboardRefreshSchedulePtrOutput struct{ *pulumi.OutputState }

func (DashboardRefreshSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardRefreshSchedule)(nil)).Elem()
}

func (o DashboardRefreshSchedulePtrOutput) ToDashboardRefreshSchedulePtrOutput() DashboardRefreshSchedulePtrOutput {
	return o
}

func (o DashboardRefreshSchedulePtrOutput) ToDashboardRefreshSchedulePtrOutputWithContext(ctx context.Context) DashboardRefreshSchedulePtrOutput {
	return o
}

func (o DashboardRefreshSchedulePtrOutput) Elem() DashboardRefreshScheduleOutput {
	return o.ApplyT(func(v *DashboardRefreshSchedule) DashboardRefreshSchedule {
		if v != nil {
			return *v
		}
		var ret DashboardRefreshSchedule
		return ret
	}).(DashboardRefreshScheduleOutput)
}

func (o DashboardRefreshSchedulePtrOutput) Frequency() DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return o.ApplyT(func(v *DashboardRefreshSchedule) *DashboardRefreshScheduleFrequencyProperties {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(DashboardRefreshScheduleFrequencyPropertiesPtrOutput)
}

// The status of the schedule. Supported values are ENABLED and DISABLED.
func (o DashboardRefreshSchedulePtrOutput) Status() DashboardRefreshScheduleStatusPtrOutput {
	return o.ApplyT(func(v *DashboardRefreshSchedule) *DashboardRefreshScheduleStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DashboardRefreshScheduleStatusPtrOutput)
}

// StartTime of the automatic schedule refresh.
func (o DashboardRefreshSchedulePtrOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardRefreshSchedule) *string {
		if v == nil {
			return nil
		}
		return v.TimeOfDay
	}).(pulumi.StringPtrOutput)
}

type DashboardRefreshScheduleFrequencyProperties struct {
	// The frequency unit. Supported values are HOURS and DAYS.
	Unit DashboardRefreshScheduleFrequencyPropertiesUnit `pulumi:"unit"`
	// The frequency value.
	Value int `pulumi:"value"`
}

// DashboardRefreshScheduleFrequencyPropertiesInput is an input type that accepts DashboardRefreshScheduleFrequencyPropertiesArgs and DashboardRefreshScheduleFrequencyPropertiesOutput values.
// You can construct a concrete instance of `DashboardRefreshScheduleFrequencyPropertiesInput` via:
//
//	DashboardRefreshScheduleFrequencyPropertiesArgs{...}
type DashboardRefreshScheduleFrequencyPropertiesInput interface {
	pulumi.Input

	ToDashboardRefreshScheduleFrequencyPropertiesOutput() DashboardRefreshScheduleFrequencyPropertiesOutput
	ToDashboardRefreshScheduleFrequencyPropertiesOutputWithContext(context.Context) DashboardRefreshScheduleFrequencyPropertiesOutput
}

type DashboardRefreshScheduleFrequencyPropertiesArgs struct {
	// The frequency unit. Supported values are HOURS and DAYS.
	Unit DashboardRefreshScheduleFrequencyPropertiesUnitInput `pulumi:"unit"`
	// The frequency value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (DashboardRefreshScheduleFrequencyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshScheduleFrequencyProperties)(nil)).Elem()
}

func (i DashboardRefreshScheduleFrequencyPropertiesArgs) ToDashboardRefreshScheduleFrequencyPropertiesOutput() DashboardRefreshScheduleFrequencyPropertiesOutput {
	return i.ToDashboardRefreshScheduleFrequencyPropertiesOutputWithContext(context.Background())
}

func (i DashboardRefreshScheduleFrequencyPropertiesArgs) ToDashboardRefreshScheduleFrequencyPropertiesOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRefreshScheduleFrequencyPropertiesOutput)
}

func (i DashboardRefreshScheduleFrequencyPropertiesArgs) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutput() DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return i.ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(context.Background())
}

func (i DashboardRefreshScheduleFrequencyPropertiesArgs) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRefreshScheduleFrequencyPropertiesOutput).ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(ctx)
}

// DashboardRefreshScheduleFrequencyPropertiesPtrInput is an input type that accepts DashboardRefreshScheduleFrequencyPropertiesArgs, DashboardRefreshScheduleFrequencyPropertiesPtr and DashboardRefreshScheduleFrequencyPropertiesPtrOutput values.
// You can construct a concrete instance of `DashboardRefreshScheduleFrequencyPropertiesPtrInput` via:
//
//	        DashboardRefreshScheduleFrequencyPropertiesArgs{...}
//
//	or:
//
//	        nil
type DashboardRefreshScheduleFrequencyPropertiesPtrInput interface {
	pulumi.Input

	ToDashboardRefreshScheduleFrequencyPropertiesPtrOutput() DashboardRefreshScheduleFrequencyPropertiesPtrOutput
	ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(context.Context) DashboardRefreshScheduleFrequencyPropertiesPtrOutput
}

type dashboardRefreshScheduleFrequencyPropertiesPtrType DashboardRefreshScheduleFrequencyPropertiesArgs

func DashboardRefreshScheduleFrequencyPropertiesPtr(v *DashboardRefreshScheduleFrequencyPropertiesArgs) DashboardRefreshScheduleFrequencyPropertiesPtrInput {
	return (*dashboardRefreshScheduleFrequencyPropertiesPtrType)(v)
}

func (*dashboardRefreshScheduleFrequencyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardRefreshScheduleFrequencyProperties)(nil)).Elem()
}

func (i *dashboardRefreshScheduleFrequencyPropertiesPtrType) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutput() DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return i.ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(context.Background())
}

func (i *dashboardRefreshScheduleFrequencyPropertiesPtrType) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardRefreshScheduleFrequencyPropertiesPtrOutput)
}

type DashboardRefreshScheduleFrequencyPropertiesOutput struct{ *pulumi.OutputState }

func (DashboardRefreshScheduleFrequencyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardRefreshScheduleFrequencyProperties)(nil)).Elem()
}

func (o DashboardRefreshScheduleFrequencyPropertiesOutput) ToDashboardRefreshScheduleFrequencyPropertiesOutput() DashboardRefreshScheduleFrequencyPropertiesOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesOutput) ToDashboardRefreshScheduleFrequencyPropertiesOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesOutput) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutput() DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return o.ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(context.Background())
}

func (o DashboardRefreshScheduleFrequencyPropertiesOutput) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardRefreshScheduleFrequencyProperties) *DashboardRefreshScheduleFrequencyProperties {
		return &v
	}).(DashboardRefreshScheduleFrequencyPropertiesPtrOutput)
}

// The frequency unit. Supported values are HOURS and DAYS.
func (o DashboardRefreshScheduleFrequencyPropertiesOutput) Unit() DashboardRefreshScheduleFrequencyPropertiesUnitOutput {
	return o.ApplyT(func(v DashboardRefreshScheduleFrequencyProperties) DashboardRefreshScheduleFrequencyPropertiesUnit {
		return v.Unit
	}).(DashboardRefreshScheduleFrequencyPropertiesUnitOutput)
}

// The frequency value.
func (o DashboardRefreshScheduleFrequencyPropertiesOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardRefreshScheduleFrequencyProperties) int { return v.Value }).(pulumi.IntOutput)
}

type DashboardRefreshScheduleFrequencyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DashboardRefreshScheduleFrequencyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardRefreshScheduleFrequencyProperties)(nil)).Elem()
}

func (o DashboardRefreshScheduleFrequencyPropertiesPtrOutput) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutput() DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesPtrOutput) ToDashboardRefreshScheduleFrequencyPropertiesPtrOutputWithContext(ctx context.Context) DashboardRefreshScheduleFrequencyPropertiesPtrOutput {
	return o
}

func (o DashboardRefreshScheduleFrequencyPropertiesPtrOutput) Elem() DashboardRefreshScheduleFrequencyPropertiesOutput {
	return o.ApplyT(func(v *DashboardRefreshScheduleFrequencyProperties) DashboardRefreshScheduleFrequencyProperties {
		if v != nil {
			return *v
		}
		var ret DashboardRefreshScheduleFrequencyProperties
		return ret
	}).(DashboardRefreshScheduleFrequencyPropertiesOutput)
}

// The frequency unit. Supported values are HOURS and DAYS.
func (o DashboardRefreshScheduleFrequencyPropertiesPtrOutput) Unit() DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput {
	return o.ApplyT(func(v *DashboardRefreshScheduleFrequencyProperties) *DashboardRefreshScheduleFrequencyPropertiesUnit {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(DashboardRefreshScheduleFrequencyPropertiesUnitPtrOutput)
}

// The frequency value.
func (o DashboardRefreshScheduleFrequencyPropertiesPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DashboardRefreshScheduleFrequencyProperties) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// An arbitrary set of tags (key-value pairs) for this dashboard.
type DashboardTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// The dashboard widget
type DashboardWidget struct {
	// The placeholder keys in the QueryStatement. For example: $StartTime$, $EndTime$, $Period$.
	QueryParameters []string `pulumi:"queryParameters"`
	// The SQL query statement on one or more event data stores.
	QueryStatement string `pulumi:"queryStatement"`
	// The view properties of the widget.
	ViewProperties map[string]string `pulumi:"viewProperties"`
}

// DashboardWidgetInput is an input type that accepts DashboardWidgetArgs and DashboardWidgetOutput values.
// You can construct a concrete instance of `DashboardWidgetInput` via:
//
//	DashboardWidgetArgs{...}
type DashboardWidgetInput interface {
	pulumi.Input

	ToDashboardWidgetOutput() DashboardWidgetOutput
	ToDashboardWidgetOutputWithContext(context.Context) DashboardWidgetOutput
}

// The dashboard widget
type DashboardWidgetArgs struct {
	// The placeholder keys in the QueryStatement. For example: $StartTime$, $EndTime$, $Period$.
	QueryParameters pulumi.StringArrayInput `pulumi:"queryParameters"`
	// The SQL query statement on one or more event data stores.
	QueryStatement pulumi.StringInput `pulumi:"queryStatement"`
	// The view properties of the widget.
	ViewProperties pulumi.StringMapInput `pulumi:"viewProperties"`
}

func (DashboardWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return i.ToDashboardWidgetOutputWithContext(context.Background())
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetOutput)
}

// DashboardWidgetArrayInput is an input type that accepts DashboardWidgetArray and DashboardWidgetArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetArrayInput` via:
//
//	DashboardWidgetArray{ DashboardWidgetArgs{...} }
type DashboardWidgetArrayInput interface {
	pulumi.Input

	ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput
	ToDashboardWidgetArrayOutputWithContext(context.Context) DashboardWidgetArrayOutput
}

type DashboardWidgetArray []DashboardWidgetInput

func (DashboardWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return i.ToDashboardWidgetArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetArrayOutput)
}

// The dashboard widget
type DashboardWidgetOutput struct{ *pulumi.OutputState }

func (DashboardWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return o
}

// The placeholder keys in the QueryStatement. For example: $StartTime$, $EndTime$, $Period$.
func (o DashboardWidgetOutput) QueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []string { return v.QueryParameters }).(pulumi.StringArrayOutput)
}

// The SQL query statement on one or more event data stores.
func (o DashboardWidgetOutput) QueryStatement() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.QueryStatement }).(pulumi.StringOutput)
}

// The view properties of the widget.
func (o DashboardWidgetOutput) ViewProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DashboardWidget) map[string]string { return v.ViewProperties }).(pulumi.StringMapOutput)
}

type DashboardWidgetArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) Index(i pulumi.IntInput) DashboardWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidget {
		return vs[0].([]DashboardWidget)[vs[1].(int)]
	}).(DashboardWidgetOutput)
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type EventDataStoreAdvancedEventSelector struct {
	// Contains all selector statements in an advanced event selector.
	FieldSelectors []EventDataStoreAdvancedFieldSelector `pulumi:"fieldSelectors"`
	// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
	Name *string `pulumi:"name"`
}

// EventDataStoreAdvancedEventSelectorInput is an input type that accepts EventDataStoreAdvancedEventSelectorArgs and EventDataStoreAdvancedEventSelectorOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedEventSelectorInput` via:
//
//	EventDataStoreAdvancedEventSelectorArgs{...}
type EventDataStoreAdvancedEventSelectorInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput
	ToEventDataStoreAdvancedEventSelectorOutputWithContext(context.Context) EventDataStoreAdvancedEventSelectorOutput
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type EventDataStoreAdvancedEventSelectorArgs struct {
	// Contains all selector statements in an advanced event selector.
	FieldSelectors EventDataStoreAdvancedFieldSelectorArrayInput `pulumi:"fieldSelectors"`
	// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (EventDataStoreAdvancedEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedEventSelectorArgs) ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput {
	return i.ToEventDataStoreAdvancedEventSelectorOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedEventSelectorArgs) ToEventDataStoreAdvancedEventSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedEventSelectorOutput)
}

// EventDataStoreAdvancedEventSelectorArrayInput is an input type that accepts EventDataStoreAdvancedEventSelectorArray and EventDataStoreAdvancedEventSelectorArrayOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedEventSelectorArrayInput` via:
//
//	EventDataStoreAdvancedEventSelectorArray{ EventDataStoreAdvancedEventSelectorArgs{...} }
type EventDataStoreAdvancedEventSelectorArrayInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedEventSelectorArrayOutput() EventDataStoreAdvancedEventSelectorArrayOutput
	ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(context.Context) EventDataStoreAdvancedEventSelectorArrayOutput
}

type EventDataStoreAdvancedEventSelectorArray []EventDataStoreAdvancedEventSelectorInput

func (EventDataStoreAdvancedEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedEventSelectorArray) ToEventDataStoreAdvancedEventSelectorArrayOutput() EventDataStoreAdvancedEventSelectorArrayOutput {
	return i.ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedEventSelectorArray) ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedEventSelectorArrayOutput)
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type EventDataStoreAdvancedEventSelectorOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedEventSelectorOutput) ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorOutput) ToEventDataStoreAdvancedEventSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorOutput {
	return o
}

// Contains all selector statements in an advanced event selector.
func (o EventDataStoreAdvancedEventSelectorOutput) FieldSelectors() EventDataStoreAdvancedFieldSelectorArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedEventSelector) []EventDataStoreAdvancedFieldSelector {
		return v.FieldSelectors
	}).(EventDataStoreAdvancedFieldSelectorArrayOutput)
}

// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
func (o EventDataStoreAdvancedEventSelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedEventSelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventDataStoreAdvancedEventSelectorArrayOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedEventSelectorArrayOutput) ToEventDataStoreAdvancedEventSelectorArrayOutput() EventDataStoreAdvancedEventSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorArrayOutput) ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorArrayOutput) Index(i pulumi.IntInput) EventDataStoreAdvancedEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDataStoreAdvancedEventSelector {
		return vs[0].([]EventDataStoreAdvancedEventSelector)[vs[1].(int)]
	}).(EventDataStoreAdvancedEventSelectorOutput)
}

// A single selector statement in an advanced event selector.
type EventDataStoreAdvancedFieldSelector struct {
	// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
	EndsWith []string `pulumi:"endsWith"`
	// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
	Equals []string `pulumi:"equals"`
	// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
	Field string `pulumi:"field"`
	// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
	NotEndsWith []string `pulumi:"notEndsWith"`
	// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
	NotEquals []string `pulumi:"notEquals"`
	// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
	NotStartsWith []string `pulumi:"notStartsWith"`
	// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
	StartsWith []string `pulumi:"startsWith"`
}

// EventDataStoreAdvancedFieldSelectorInput is an input type that accepts EventDataStoreAdvancedFieldSelectorArgs and EventDataStoreAdvancedFieldSelectorOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedFieldSelectorInput` via:
//
//	EventDataStoreAdvancedFieldSelectorArgs{...}
type EventDataStoreAdvancedFieldSelectorInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedFieldSelectorOutput() EventDataStoreAdvancedFieldSelectorOutput
	ToEventDataStoreAdvancedFieldSelectorOutputWithContext(context.Context) EventDataStoreAdvancedFieldSelectorOutput
}

// A single selector statement in an advanced event selector.
type EventDataStoreAdvancedFieldSelectorArgs struct {
	// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
	EndsWith pulumi.StringArrayInput `pulumi:"endsWith"`
	// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
	Equals pulumi.StringArrayInput `pulumi:"equals"`
	// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
	Field pulumi.StringInput `pulumi:"field"`
	// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
	NotEndsWith pulumi.StringArrayInput `pulumi:"notEndsWith"`
	// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
	NotEquals pulumi.StringArrayInput `pulumi:"notEquals"`
	// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
	NotStartsWith pulumi.StringArrayInput `pulumi:"notStartsWith"`
	// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
	StartsWith pulumi.StringArrayInput `pulumi:"startsWith"`
}

func (EventDataStoreAdvancedFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedFieldSelectorArgs) ToEventDataStoreAdvancedFieldSelectorOutput() EventDataStoreAdvancedFieldSelectorOutput {
	return i.ToEventDataStoreAdvancedFieldSelectorOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedFieldSelectorArgs) ToEventDataStoreAdvancedFieldSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedFieldSelectorOutput)
}

// EventDataStoreAdvancedFieldSelectorArrayInput is an input type that accepts EventDataStoreAdvancedFieldSelectorArray and EventDataStoreAdvancedFieldSelectorArrayOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedFieldSelectorArrayInput` via:
//
//	EventDataStoreAdvancedFieldSelectorArray{ EventDataStoreAdvancedFieldSelectorArgs{...} }
type EventDataStoreAdvancedFieldSelectorArrayInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedFieldSelectorArrayOutput() EventDataStoreAdvancedFieldSelectorArrayOutput
	ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(context.Context) EventDataStoreAdvancedFieldSelectorArrayOutput
}

type EventDataStoreAdvancedFieldSelectorArray []EventDataStoreAdvancedFieldSelectorInput

func (EventDataStoreAdvancedFieldSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedFieldSelectorArray) ToEventDataStoreAdvancedFieldSelectorArrayOutput() EventDataStoreAdvancedFieldSelectorArrayOutput {
	return i.ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedFieldSelectorArray) ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedFieldSelectorArrayOutput)
}

// A single selector statement in an advanced event selector.
type EventDataStoreAdvancedFieldSelectorOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedFieldSelectorOutput) ToEventDataStoreAdvancedFieldSelectorOutput() EventDataStoreAdvancedFieldSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedFieldSelectorOutput) ToEventDataStoreAdvancedFieldSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorOutput {
	return o
}

// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) EndsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.EndsWith }).(pulumi.StringArrayOutput)
}

// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
func (o EventDataStoreAdvancedFieldSelectorOutput) Equals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.Equals }).(pulumi.StringArrayOutput)
}

// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
func (o EventDataStoreAdvancedFieldSelectorOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) string { return v.Field }).(pulumi.StringOutput)
}

// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) NotEndsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.NotEndsWith }).(pulumi.StringArrayOutput)
}

// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) NotEquals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.NotEquals }).(pulumi.StringArrayOutput)
}

// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) NotStartsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.NotStartsWith }).(pulumi.StringArrayOutput)
}

// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) StartsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.StartsWith }).(pulumi.StringArrayOutput)
}

type EventDataStoreAdvancedFieldSelectorArrayOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedFieldSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedFieldSelectorArrayOutput) ToEventDataStoreAdvancedFieldSelectorArrayOutput() EventDataStoreAdvancedFieldSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedFieldSelectorArrayOutput) ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedFieldSelectorArrayOutput) Index(i pulumi.IntInput) EventDataStoreAdvancedFieldSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDataStoreAdvancedFieldSelector {
		return vs[0].([]EventDataStoreAdvancedFieldSelector)[vs[1].(int)]
	}).(EventDataStoreAdvancedFieldSelectorOutput)
}

// A string that contains Insights types that are logged on an event data store.
type EventDataStoreInsightSelector struct {
	// The type of Insights to log on an event data store.
	InsightType *string `pulumi:"insightType"`
}

// EventDataStoreInsightSelectorInput is an input type that accepts EventDataStoreInsightSelectorArgs and EventDataStoreInsightSelectorOutput values.
// You can construct a concrete instance of `EventDataStoreInsightSelectorInput` via:
//
//	EventDataStoreInsightSelectorArgs{...}
type EventDataStoreInsightSelectorInput interface {
	pulumi.Input

	ToEventDataStoreInsightSelectorOutput() EventDataStoreInsightSelectorOutput
	ToEventDataStoreInsightSelectorOutputWithContext(context.Context) EventDataStoreInsightSelectorOutput
}

// A string that contains Insights types that are logged on an event data store.
type EventDataStoreInsightSelectorArgs struct {
	// The type of Insights to log on an event data store.
	InsightType pulumi.StringPtrInput `pulumi:"insightType"`
}

func (EventDataStoreInsightSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreInsightSelector)(nil)).Elem()
}

func (i EventDataStoreInsightSelectorArgs) ToEventDataStoreInsightSelectorOutput() EventDataStoreInsightSelectorOutput {
	return i.ToEventDataStoreInsightSelectorOutputWithContext(context.Background())
}

func (i EventDataStoreInsightSelectorArgs) ToEventDataStoreInsightSelectorOutputWithContext(ctx context.Context) EventDataStoreInsightSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreInsightSelectorOutput)
}

// EventDataStoreInsightSelectorArrayInput is an input type that accepts EventDataStoreInsightSelectorArray and EventDataStoreInsightSelectorArrayOutput values.
// You can construct a concrete instance of `EventDataStoreInsightSelectorArrayInput` via:
//
//	EventDataStoreInsightSelectorArray{ EventDataStoreInsightSelectorArgs{...} }
type EventDataStoreInsightSelectorArrayInput interface {
	pulumi.Input

	ToEventDataStoreInsightSelectorArrayOutput() EventDataStoreInsightSelectorArrayOutput
	ToEventDataStoreInsightSelectorArrayOutputWithContext(context.Context) EventDataStoreInsightSelectorArrayOutput
}

type EventDataStoreInsightSelectorArray []EventDataStoreInsightSelectorInput

func (EventDataStoreInsightSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreInsightSelector)(nil)).Elem()
}

func (i EventDataStoreInsightSelectorArray) ToEventDataStoreInsightSelectorArrayOutput() EventDataStoreInsightSelectorArrayOutput {
	return i.ToEventDataStoreInsightSelectorArrayOutputWithContext(context.Background())
}

func (i EventDataStoreInsightSelectorArray) ToEventDataStoreInsightSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreInsightSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreInsightSelectorArrayOutput)
}

// A string that contains Insights types that are logged on an event data store.
type EventDataStoreInsightSelectorOutput struct{ *pulumi.OutputState }

func (EventDataStoreInsightSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreInsightSelector)(nil)).Elem()
}

func (o EventDataStoreInsightSelectorOutput) ToEventDataStoreInsightSelectorOutput() EventDataStoreInsightSelectorOutput {
	return o
}

func (o EventDataStoreInsightSelectorOutput) ToEventDataStoreInsightSelectorOutputWithContext(ctx context.Context) EventDataStoreInsightSelectorOutput {
	return o
}

// The type of Insights to log on an event data store.
func (o EventDataStoreInsightSelectorOutput) InsightType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDataStoreInsightSelector) *string { return v.InsightType }).(pulumi.StringPtrOutput)
}

type EventDataStoreInsightSelectorArrayOutput struct{ *pulumi.OutputState }

func (EventDataStoreInsightSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreInsightSelector)(nil)).Elem()
}

func (o EventDataStoreInsightSelectorArrayOutput) ToEventDataStoreInsightSelectorArrayOutput() EventDataStoreInsightSelectorArrayOutput {
	return o
}

func (o EventDataStoreInsightSelectorArrayOutput) ToEventDataStoreInsightSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreInsightSelectorArrayOutput {
	return o
}

func (o EventDataStoreInsightSelectorArrayOutput) Index(i pulumi.IntInput) EventDataStoreInsightSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDataStoreInsightSelector {
		return vs[0].([]EventDataStoreInsightSelector)[vs[1].(int)]
	}).(EventDataStoreInsightSelectorOutput)
}

// An arbitrary set of tags (key-value pairs) for this event data store.
type EventDataStoreTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type TrailAdvancedEventSelector struct {
	// Contains all selector statements in an advanced event selector.
	FieldSelectors []TrailAdvancedFieldSelector `pulumi:"fieldSelectors"`
	// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
	Name *string `pulumi:"name"`
}

// TrailAdvancedEventSelectorInput is an input type that accepts TrailAdvancedEventSelectorArgs and TrailAdvancedEventSelectorOutput values.
// You can construct a concrete instance of `TrailAdvancedEventSelectorInput` via:
//
//	TrailAdvancedEventSelectorArgs{...}
type TrailAdvancedEventSelectorInput interface {
	pulumi.Input

	ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput
	ToTrailAdvancedEventSelectorOutputWithContext(context.Context) TrailAdvancedEventSelectorOutput
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type TrailAdvancedEventSelectorArgs struct {
	// Contains all selector statements in an advanced event selector.
	FieldSelectors TrailAdvancedFieldSelectorArrayInput `pulumi:"fieldSelectors"`
	// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TrailAdvancedEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorArgs) ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput {
	return i.ToTrailAdvancedEventSelectorOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorArgs) ToTrailAdvancedEventSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorOutput)
}

// TrailAdvancedEventSelectorArrayInput is an input type that accepts TrailAdvancedEventSelectorArray and TrailAdvancedEventSelectorArrayOutput values.
// You can construct a concrete instance of `TrailAdvancedEventSelectorArrayInput` via:
//
//	TrailAdvancedEventSelectorArray{ TrailAdvancedEventSelectorArgs{...} }
type TrailAdvancedEventSelectorArrayInput interface {
	pulumi.Input

	ToTrailAdvancedEventSelectorArrayOutput() TrailAdvancedEventSelectorArrayOutput
	ToTrailAdvancedEventSelectorArrayOutputWithContext(context.Context) TrailAdvancedEventSelectorArrayOutput
}

type TrailAdvancedEventSelectorArray []TrailAdvancedEventSelectorInput

func (TrailAdvancedEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedEventSelector)(nil)).Elem()
}

func (i TrailAdvancedEventSelectorArray) ToTrailAdvancedEventSelectorArrayOutput() TrailAdvancedEventSelectorArrayOutput {
	return i.ToTrailAdvancedEventSelectorArrayOutputWithContext(context.Background())
}

func (i TrailAdvancedEventSelectorArray) ToTrailAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedEventSelectorArrayOutput)
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type TrailAdvancedEventSelectorOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedEventSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorOutput) ToTrailAdvancedEventSelectorOutput() TrailAdvancedEventSelectorOutput {
	return o
}

func (o TrailAdvancedEventSelectorOutput) ToTrailAdvancedEventSelectorOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorOutput {
	return o
}

// Contains all selector statements in an advanced event selector.
func (o TrailAdvancedEventSelectorOutput) FieldSelectors() TrailAdvancedFieldSelectorArrayOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelector) []TrailAdvancedFieldSelector { return v.FieldSelectors }).(TrailAdvancedFieldSelectorArrayOutput)
}

// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
func (o TrailAdvancedEventSelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrailAdvancedEventSelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TrailAdvancedEventSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailAdvancedEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedEventSelector)(nil)).Elem()
}

func (o TrailAdvancedEventSelectorArrayOutput) ToTrailAdvancedEventSelectorArrayOutput() TrailAdvancedEventSelectorArrayOutput {
	return o
}

func (o TrailAdvancedEventSelectorArrayOutput) ToTrailAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedEventSelectorArrayOutput {
	return o
}

func (o TrailAdvancedEventSelectorArrayOutput) Index(i pulumi.IntInput) TrailAdvancedEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailAdvancedEventSelector {
		return vs[0].([]TrailAdvancedEventSelector)[vs[1].(int)]
	}).(TrailAdvancedEventSelectorOutput)
}

// A single selector statement in an advanced event selector.
type TrailAdvancedFieldSelector struct {
	// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
	EndsWith []string `pulumi:"endsWith"`
	// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
	Equals []string `pulumi:"equals"`
	// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
	Field string `pulumi:"field"`
	// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
	NotEndsWith []string `pulumi:"notEndsWith"`
	// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
	NotEquals []string `pulumi:"notEquals"`
	// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
	NotStartsWith []string `pulumi:"notStartsWith"`
	// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
	StartsWith []string `pulumi:"startsWith"`
}

// TrailAdvancedFieldSelectorInput is an input type that accepts TrailAdvancedFieldSelectorArgs and TrailAdvancedFieldSelectorOutput values.
// You can construct a concrete instance of `TrailAdvancedFieldSelectorInput` via:
//
//	TrailAdvancedFieldSelectorArgs{...}
type TrailAdvancedFieldSelectorInput interface {
	pulumi.Input

	ToTrailAdvancedFieldSelectorOutput() TrailAdvancedFieldSelectorOutput
	ToTrailAdvancedFieldSelectorOutputWithContext(context.Context) TrailAdvancedFieldSelectorOutput
}

// A single selector statement in an advanced event selector.
type TrailAdvancedFieldSelectorArgs struct {
	// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
	EndsWith pulumi.StringArrayInput `pulumi:"endsWith"`
	// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
	Equals pulumi.StringArrayInput `pulumi:"equals"`
	// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
	Field pulumi.StringInput `pulumi:"field"`
	// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
	NotEndsWith pulumi.StringArrayInput `pulumi:"notEndsWith"`
	// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
	NotEquals pulumi.StringArrayInput `pulumi:"notEquals"`
	// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
	NotStartsWith pulumi.StringArrayInput `pulumi:"notStartsWith"`
	// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
	StartsWith pulumi.StringArrayInput `pulumi:"startsWith"`
}

func (TrailAdvancedFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedFieldSelector)(nil)).Elem()
}

func (i TrailAdvancedFieldSelectorArgs) ToTrailAdvancedFieldSelectorOutput() TrailAdvancedFieldSelectorOutput {
	return i.ToTrailAdvancedFieldSelectorOutputWithContext(context.Background())
}

func (i TrailAdvancedFieldSelectorArgs) ToTrailAdvancedFieldSelectorOutputWithContext(ctx context.Context) TrailAdvancedFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedFieldSelectorOutput)
}

// TrailAdvancedFieldSelectorArrayInput is an input type that accepts TrailAdvancedFieldSelectorArray and TrailAdvancedFieldSelectorArrayOutput values.
// You can construct a concrete instance of `TrailAdvancedFieldSelectorArrayInput` via:
//
//	TrailAdvancedFieldSelectorArray{ TrailAdvancedFieldSelectorArgs{...} }
type TrailAdvancedFieldSelectorArrayInput interface {
	pulumi.Input

	ToTrailAdvancedFieldSelectorArrayOutput() TrailAdvancedFieldSelectorArrayOutput
	ToTrailAdvancedFieldSelectorArrayOutputWithContext(context.Context) TrailAdvancedFieldSelectorArrayOutput
}

type TrailAdvancedFieldSelectorArray []TrailAdvancedFieldSelectorInput

func (TrailAdvancedFieldSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedFieldSelector)(nil)).Elem()
}

func (i TrailAdvancedFieldSelectorArray) ToTrailAdvancedFieldSelectorArrayOutput() TrailAdvancedFieldSelectorArrayOutput {
	return i.ToTrailAdvancedFieldSelectorArrayOutputWithContext(context.Background())
}

func (i TrailAdvancedFieldSelectorArray) ToTrailAdvancedFieldSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedFieldSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailAdvancedFieldSelectorArrayOutput)
}

// A single selector statement in an advanced event selector.
type TrailAdvancedFieldSelectorOutput struct{ *pulumi.OutputState }

func (TrailAdvancedFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailAdvancedFieldSelector)(nil)).Elem()
}

func (o TrailAdvancedFieldSelectorOutput) ToTrailAdvancedFieldSelectorOutput() TrailAdvancedFieldSelectorOutput {
	return o
}

func (o TrailAdvancedFieldSelectorOutput) ToTrailAdvancedFieldSelectorOutputWithContext(ctx context.Context) TrailAdvancedFieldSelectorOutput {
	return o
}

// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
func (o TrailAdvancedFieldSelectorOutput) EndsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedFieldSelector) []string { return v.EndsWith }).(pulumi.StringArrayOutput)
}

// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
func (o TrailAdvancedFieldSelectorOutput) Equals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedFieldSelector) []string { return v.Equals }).(pulumi.StringArrayOutput)
}

// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
func (o TrailAdvancedFieldSelectorOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TrailAdvancedFieldSelector) string { return v.Field }).(pulumi.StringOutput)
}

// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
func (o TrailAdvancedFieldSelectorOutput) NotEndsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedFieldSelector) []string { return v.NotEndsWith }).(pulumi.StringArrayOutput)
}

// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
func (o TrailAdvancedFieldSelectorOutput) NotEquals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedFieldSelector) []string { return v.NotEquals }).(pulumi.StringArrayOutput)
}

// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
func (o TrailAdvancedFieldSelectorOutput) NotStartsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedFieldSelector) []string { return v.NotStartsWith }).(pulumi.StringArrayOutput)
}

// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
func (o TrailAdvancedFieldSelectorOutput) StartsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailAdvancedFieldSelector) []string { return v.StartsWith }).(pulumi.StringArrayOutput)
}

type TrailAdvancedFieldSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailAdvancedFieldSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailAdvancedFieldSelector)(nil)).Elem()
}

func (o TrailAdvancedFieldSelectorArrayOutput) ToTrailAdvancedFieldSelectorArrayOutput() TrailAdvancedFieldSelectorArrayOutput {
	return o
}

func (o TrailAdvancedFieldSelectorArrayOutput) ToTrailAdvancedFieldSelectorArrayOutputWithContext(ctx context.Context) TrailAdvancedFieldSelectorArrayOutput {
	return o
}

func (o TrailAdvancedFieldSelectorArrayOutput) Index(i pulumi.IntInput) TrailAdvancedFieldSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailAdvancedFieldSelector {
		return vs[0].([]TrailAdvancedFieldSelector)[vs[1].(int)]
	}).(TrailAdvancedFieldSelectorOutput)
}

// CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
type TrailDataResource struct {
	// The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
	Type string `pulumi:"type"`
	// An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
	Values []string `pulumi:"values"`
}

// TrailDataResourceInput is an input type that accepts TrailDataResourceArgs and TrailDataResourceOutput values.
// You can construct a concrete instance of `TrailDataResourceInput` via:
//
//	TrailDataResourceArgs{...}
type TrailDataResourceInput interface {
	pulumi.Input

	ToTrailDataResourceOutput() TrailDataResourceOutput
	ToTrailDataResourceOutputWithContext(context.Context) TrailDataResourceOutput
}

// CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
type TrailDataResourceArgs struct {
	// The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
	Type pulumi.StringInput `pulumi:"type"`
	// An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TrailDataResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailDataResource)(nil)).Elem()
}

func (i TrailDataResourceArgs) ToTrailDataResourceOutput() TrailDataResourceOutput {
	return i.ToTrailDataResourceOutputWithContext(context.Background())
}

func (i TrailDataResourceArgs) ToTrailDataResourceOutputWithContext(ctx context.Context) TrailDataResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailDataResourceOutput)
}

// TrailDataResourceArrayInput is an input type that accepts TrailDataResourceArray and TrailDataResourceArrayOutput values.
// You can construct a concrete instance of `TrailDataResourceArrayInput` via:
//
//	TrailDataResourceArray{ TrailDataResourceArgs{...} }
type TrailDataResourceArrayInput interface {
	pulumi.Input

	ToTrailDataResourceArrayOutput() TrailDataResourceArrayOutput
	ToTrailDataResourceArrayOutputWithContext(context.Context) TrailDataResourceArrayOutput
}

type TrailDataResourceArray []TrailDataResourceInput

func (TrailDataResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailDataResource)(nil)).Elem()
}

func (i TrailDataResourceArray) ToTrailDataResourceArrayOutput() TrailDataResourceArrayOutput {
	return i.ToTrailDataResourceArrayOutputWithContext(context.Background())
}

func (i TrailDataResourceArray) ToTrailDataResourceArrayOutputWithContext(ctx context.Context) TrailDataResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailDataResourceArrayOutput)
}

// CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
type TrailDataResourceOutput struct{ *pulumi.OutputState }

func (TrailDataResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailDataResource)(nil)).Elem()
}

func (o TrailDataResourceOutput) ToTrailDataResourceOutput() TrailDataResourceOutput {
	return o
}

func (o TrailDataResourceOutput) ToTrailDataResourceOutputWithContext(ctx context.Context) TrailDataResourceOutput {
	return o
}

// The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
func (o TrailDataResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TrailDataResource) string { return v.Type }).(pulumi.StringOutput)
}

// An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
func (o TrailDataResourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailDataResource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TrailDataResourceArrayOutput struct{ *pulumi.OutputState }

func (TrailDataResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailDataResource)(nil)).Elem()
}

func (o TrailDataResourceArrayOutput) ToTrailDataResourceArrayOutput() TrailDataResourceArrayOutput {
	return o
}

func (o TrailDataResourceArrayOutput) ToTrailDataResourceArrayOutputWithContext(ctx context.Context) TrailDataResourceArrayOutput {
	return o
}

func (o TrailDataResourceArrayOutput) Index(i pulumi.IntInput) TrailDataResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailDataResource {
		return vs[0].([]TrailDataResource)[vs[1].(int)]
	}).(TrailDataResourceOutput)
}

// The type of email sending events to publish to the event destination.
type TrailEventSelector struct {
	// CloudTrail supports data event logging for Amazon S3 objects in standard S3 buckets, AWS Lambda functions, and Amazon DynamoDB tables with basic event selectors. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
	//
	// For more information, see [Data Events](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html) and [Limits in AWS CloudTrail](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) in the *AWS CloudTrail User Guide* .
	//
	// > To log data events for all other resource types including objects stored in [directory buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html) , you must use [AdvancedEventSelectors](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_AdvancedEventSelector.html) . You must also use `AdvancedEventSelectors` if you want to filter on the `eventName` field.
	DataResources []TrailDataResource `pulumi:"dataResources"`
	// An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
	ExcludeManagementEventSources []string `pulumi:"excludeManagementEventSources"`
	// Specify if you want your event selector to include management events for your trail.
	IncludeManagementEvents *bool `pulumi:"includeManagementEvents"`
	// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
	ReadWriteType *TrailEventSelectorReadWriteType `pulumi:"readWriteType"`
}

// TrailEventSelectorInput is an input type that accepts TrailEventSelectorArgs and TrailEventSelectorOutput values.
// You can construct a concrete instance of `TrailEventSelectorInput` via:
//
//	TrailEventSelectorArgs{...}
type TrailEventSelectorInput interface {
	pulumi.Input

	ToTrailEventSelectorOutput() TrailEventSelectorOutput
	ToTrailEventSelectorOutputWithContext(context.Context) TrailEventSelectorOutput
}

// The type of email sending events to publish to the event destination.
type TrailEventSelectorArgs struct {
	// CloudTrail supports data event logging for Amazon S3 objects in standard S3 buckets, AWS Lambda functions, and Amazon DynamoDB tables with basic event selectors. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
	//
	// For more information, see [Data Events](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html) and [Limits in AWS CloudTrail](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) in the *AWS CloudTrail User Guide* .
	//
	// > To log data events for all other resource types including objects stored in [directory buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html) , you must use [AdvancedEventSelectors](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_AdvancedEventSelector.html) . You must also use `AdvancedEventSelectors` if you want to filter on the `eventName` field.
	DataResources TrailDataResourceArrayInput `pulumi:"dataResources"`
	// An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
	ExcludeManagementEventSources pulumi.StringArrayInput `pulumi:"excludeManagementEventSources"`
	// Specify if you want your event selector to include management events for your trail.
	IncludeManagementEvents pulumi.BoolPtrInput `pulumi:"includeManagementEvents"`
	// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
	ReadWriteType TrailEventSelectorReadWriteTypePtrInput `pulumi:"readWriteType"`
}

func (TrailEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return i.ToTrailEventSelectorOutputWithContext(context.Background())
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorOutput)
}

// TrailEventSelectorArrayInput is an input type that accepts TrailEventSelectorArray and TrailEventSelectorArrayOutput values.
// You can construct a concrete instance of `TrailEventSelectorArrayInput` via:
//
//	TrailEventSelectorArray{ TrailEventSelectorArgs{...} }
type TrailEventSelectorArrayInput interface {
	pulumi.Input

	ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput
	ToTrailEventSelectorArrayOutputWithContext(context.Context) TrailEventSelectorArrayOutput
}

type TrailEventSelectorArray []TrailEventSelectorInput

func (TrailEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return i.ToTrailEventSelectorArrayOutputWithContext(context.Background())
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorArrayOutput)
}

// The type of email sending events to publish to the event destination.
type TrailEventSelectorOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return o
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return o
}

// CloudTrail supports data event logging for Amazon S3 objects in standard S3 buckets, AWS Lambda functions, and Amazon DynamoDB tables with basic event selectors. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
//
// For more information, see [Data Events](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html) and [Limits in AWS CloudTrail](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) in the *AWS CloudTrail User Guide* .
//
// > To log data events for all other resource types including objects stored in [directory buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html) , you must use [AdvancedEventSelectors](https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_AdvancedEventSelector.html) . You must also use `AdvancedEventSelectors` if you want to filter on the `eventName` field.
func (o TrailEventSelectorOutput) DataResources() TrailDataResourceArrayOutput {
	return o.ApplyT(func(v TrailEventSelector) []TrailDataResource { return v.DataResources }).(TrailDataResourceArrayOutput)
}

// An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
func (o TrailEventSelectorOutput) ExcludeManagementEventSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailEventSelector) []string { return v.ExcludeManagementEventSources }).(pulumi.StringArrayOutput)
}

// Specify if you want your event selector to include management events for your trail.
func (o TrailEventSelectorOutput) IncludeManagementEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrailEventSelector) *bool { return v.IncludeManagementEvents }).(pulumi.BoolPtrOutput)
}

// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
func (o TrailEventSelectorOutput) ReadWriteType() TrailEventSelectorReadWriteTypePtrOutput {
	return o.ApplyT(func(v TrailEventSelector) *TrailEventSelectorReadWriteType { return v.ReadWriteType }).(TrailEventSelectorReadWriteTypePtrOutput)
}

type TrailEventSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) Index(i pulumi.IntInput) TrailEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailEventSelector {
		return vs[0].([]TrailEventSelector)[vs[1].(int)]
	}).(TrailEventSelectorOutput)
}

// A string that contains insight types that are logged on a trail.
type TrailInsightSelector struct {
	// The type of insight to log on a trail.
	InsightType *string `pulumi:"insightType"`
}

// TrailInsightSelectorInput is an input type that accepts TrailInsightSelectorArgs and TrailInsightSelectorOutput values.
// You can construct a concrete instance of `TrailInsightSelectorInput` via:
//
//	TrailInsightSelectorArgs{...}
type TrailInsightSelectorInput interface {
	pulumi.Input

	ToTrailInsightSelectorOutput() TrailInsightSelectorOutput
	ToTrailInsightSelectorOutputWithContext(context.Context) TrailInsightSelectorOutput
}

// A string that contains insight types that are logged on a trail.
type TrailInsightSelectorArgs struct {
	// The type of insight to log on a trail.
	InsightType pulumi.StringPtrInput `pulumi:"insightType"`
}

func (TrailInsightSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return i.ToTrailInsightSelectorOutputWithContext(context.Background())
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailInsightSelectorOutput)
}

// TrailInsightSelectorArrayInput is an input type that accepts TrailInsightSelectorArray and TrailInsightSelectorArrayOutput values.
// You can construct a concrete instance of `TrailInsightSelectorArrayInput` via:
//
//	TrailInsightSelectorArray{ TrailInsightSelectorArgs{...} }
type TrailInsightSelectorArrayInput interface {
	pulumi.Input

	ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput
	ToTrailInsightSelectorArrayOutputWithContext(context.Context) TrailInsightSelectorArrayOutput
}

type TrailInsightSelectorArray []TrailInsightSelectorInput

func (TrailInsightSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailInsightSelector)(nil)).Elem()
}

func (i TrailInsightSelectorArray) ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput {
	return i.ToTrailInsightSelectorArrayOutputWithContext(context.Background())
}

func (i TrailInsightSelectorArray) ToTrailInsightSelectorArrayOutputWithContext(ctx context.Context) TrailInsightSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailInsightSelectorArrayOutput)
}

// A string that contains insight types that are logged on a trail.
type TrailInsightSelectorOutput struct{ *pulumi.OutputState }

func (TrailInsightSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return o
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return o
}

// The type of insight to log on a trail.
func (o TrailInsightSelectorOutput) InsightType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrailInsightSelector) *string { return v.InsightType }).(pulumi.StringPtrOutput)
}

type TrailInsightSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailInsightSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailInsightSelector)(nil)).Elem()
}

func (o TrailInsightSelectorArrayOutput) ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput {
	return o
}

func (o TrailInsightSelectorArrayOutput) ToTrailInsightSelectorArrayOutputWithContext(ctx context.Context) TrailInsightSelectorArrayOutput {
	return o
}

func (o TrailInsightSelectorArrayOutput) Index(i pulumi.IntInput) TrailInsightSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailInsightSelector {
		return vs[0].([]TrailInsightSelector)[vs[1].(int)]
	}).(TrailInsightSelectorOutput)
}

// An arbitrary set of tags (key-value pairs) for this trail.
type TrailTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDestinationInput)(nil)).Elem(), ChannelDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDestinationArrayInput)(nil)).Elem(), ChannelDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshScheduleInput)(nil)).Elem(), DashboardRefreshScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshSchedulePtrInput)(nil)).Elem(), DashboardRefreshScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshScheduleFrequencyPropertiesInput)(nil)).Elem(), DashboardRefreshScheduleFrequencyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardRefreshScheduleFrequencyPropertiesPtrInput)(nil)).Elem(), DashboardRefreshScheduleFrequencyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetInput)(nil)).Elem(), DashboardWidgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardWidgetArrayInput)(nil)).Elem(), DashboardWidgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedEventSelectorInput)(nil)).Elem(), EventDataStoreAdvancedEventSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedEventSelectorArrayInput)(nil)).Elem(), EventDataStoreAdvancedEventSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedFieldSelectorInput)(nil)).Elem(), EventDataStoreAdvancedFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedFieldSelectorArrayInput)(nil)).Elem(), EventDataStoreAdvancedFieldSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreInsightSelectorInput)(nil)).Elem(), EventDataStoreInsightSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreInsightSelectorArrayInput)(nil)).Elem(), EventDataStoreInsightSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedEventSelectorInput)(nil)).Elem(), TrailAdvancedEventSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedEventSelectorArrayInput)(nil)).Elem(), TrailAdvancedEventSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedFieldSelectorInput)(nil)).Elem(), TrailAdvancedFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailAdvancedFieldSelectorArrayInput)(nil)).Elem(), TrailAdvancedFieldSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailDataResourceInput)(nil)).Elem(), TrailDataResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailDataResourceArrayInput)(nil)).Elem(), TrailDataResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorInput)(nil)).Elem(), TrailEventSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorArrayInput)(nil)).Elem(), TrailEventSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailInsightSelectorInput)(nil)).Elem(), TrailInsightSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailInsightSelectorArrayInput)(nil)).Elem(), TrailInsightSelectorArray{})
	pulumi.RegisterOutputType(ChannelDestinationOutput{})
	pulumi.RegisterOutputType(ChannelDestinationArrayOutput{})
	pulumi.RegisterOutputType(DashboardRefreshScheduleOutput{})
	pulumi.RegisterOutputType(DashboardRefreshSchedulePtrOutput{})
	pulumi.RegisterOutputType(DashboardRefreshScheduleFrequencyPropertiesOutput{})
	pulumi.RegisterOutputType(DashboardRefreshScheduleFrequencyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DashboardWidgetOutput{})
	pulumi.RegisterOutputType(DashboardWidgetArrayOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedEventSelectorOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedEventSelectorArrayOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedFieldSelectorOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedFieldSelectorArrayOutput{})
	pulumi.RegisterOutputType(EventDataStoreInsightSelectorOutput{})
	pulumi.RegisterOutputType(EventDataStoreInsightSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailAdvancedEventSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailAdvancedFieldSelectorOutput{})
	pulumi.RegisterOutputType(TrailAdvancedFieldSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailDataResourceOutput{})
	pulumi.RegisterOutputType(TrailDataResourceArrayOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailInsightSelectorOutput{})
	pulumi.RegisterOutputType(TrailInsightSelectorArrayOutput{})
}
