// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudtrail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type EventDataStoreAdvancedEventSelector struct {
	// Contains all selector statements in an advanced event selector.
	FieldSelectors []EventDataStoreAdvancedFieldSelector `pulumi:"fieldSelectors"`
	// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
	Name *string `pulumi:"name"`
}

// EventDataStoreAdvancedEventSelectorInput is an input type that accepts EventDataStoreAdvancedEventSelectorArgs and EventDataStoreAdvancedEventSelectorOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedEventSelectorInput` via:
//
//	EventDataStoreAdvancedEventSelectorArgs{...}
type EventDataStoreAdvancedEventSelectorInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput
	ToEventDataStoreAdvancedEventSelectorOutputWithContext(context.Context) EventDataStoreAdvancedEventSelectorOutput
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type EventDataStoreAdvancedEventSelectorArgs struct {
	// Contains all selector statements in an advanced event selector.
	FieldSelectors EventDataStoreAdvancedFieldSelectorArrayInput `pulumi:"fieldSelectors"`
	// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (EventDataStoreAdvancedEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedEventSelectorArgs) ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput {
	return i.ToEventDataStoreAdvancedEventSelectorOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedEventSelectorArgs) ToEventDataStoreAdvancedEventSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedEventSelectorOutput)
}

// EventDataStoreAdvancedEventSelectorArrayInput is an input type that accepts EventDataStoreAdvancedEventSelectorArray and EventDataStoreAdvancedEventSelectorArrayOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedEventSelectorArrayInput` via:
//
//	EventDataStoreAdvancedEventSelectorArray{ EventDataStoreAdvancedEventSelectorArgs{...} }
type EventDataStoreAdvancedEventSelectorArrayInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedEventSelectorArrayOutput() EventDataStoreAdvancedEventSelectorArrayOutput
	ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(context.Context) EventDataStoreAdvancedEventSelectorArrayOutput
}

type EventDataStoreAdvancedEventSelectorArray []EventDataStoreAdvancedEventSelectorInput

func (EventDataStoreAdvancedEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedEventSelectorArray) ToEventDataStoreAdvancedEventSelectorArrayOutput() EventDataStoreAdvancedEventSelectorArrayOutput {
	return i.ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedEventSelectorArray) ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedEventSelectorArrayOutput)
}

// Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
type EventDataStoreAdvancedEventSelectorOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedEventSelectorOutput) ToEventDataStoreAdvancedEventSelectorOutput() EventDataStoreAdvancedEventSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorOutput) ToEventDataStoreAdvancedEventSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorOutput {
	return o
}

// Contains all selector statements in an advanced event selector.
func (o EventDataStoreAdvancedEventSelectorOutput) FieldSelectors() EventDataStoreAdvancedFieldSelectorArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedEventSelector) []EventDataStoreAdvancedFieldSelector {
		return v.FieldSelectors
	}).(EventDataStoreAdvancedFieldSelectorArrayOutput)
}

// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
func (o EventDataStoreAdvancedEventSelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedEventSelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventDataStoreAdvancedEventSelectorArrayOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedEventSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedEventSelectorArrayOutput) ToEventDataStoreAdvancedEventSelectorArrayOutput() EventDataStoreAdvancedEventSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorArrayOutput) ToEventDataStoreAdvancedEventSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedEventSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedEventSelectorArrayOutput) Index(i pulumi.IntInput) EventDataStoreAdvancedEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDataStoreAdvancedEventSelector {
		return vs[0].([]EventDataStoreAdvancedEventSelector)[vs[1].(int)]
	}).(EventDataStoreAdvancedEventSelectorOutput)
}

// A single selector statement in an advanced event selector.
type EventDataStoreAdvancedFieldSelector struct {
	// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
	EndsWith []string `pulumi:"endsWith"`
	// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
	Equals []string `pulumi:"equals"`
	// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
	Field string `pulumi:"field"`
	// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
	NotEndsWith []string `pulumi:"notEndsWith"`
	// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
	NotEquals []string `pulumi:"notEquals"`
	// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
	NotStartsWith []string `pulumi:"notStartsWith"`
	// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
	StartsWith []string `pulumi:"startsWith"`
}

// EventDataStoreAdvancedFieldSelectorInput is an input type that accepts EventDataStoreAdvancedFieldSelectorArgs and EventDataStoreAdvancedFieldSelectorOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedFieldSelectorInput` via:
//
//	EventDataStoreAdvancedFieldSelectorArgs{...}
type EventDataStoreAdvancedFieldSelectorInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedFieldSelectorOutput() EventDataStoreAdvancedFieldSelectorOutput
	ToEventDataStoreAdvancedFieldSelectorOutputWithContext(context.Context) EventDataStoreAdvancedFieldSelectorOutput
}

// A single selector statement in an advanced event selector.
type EventDataStoreAdvancedFieldSelectorArgs struct {
	// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
	EndsWith pulumi.StringArrayInput `pulumi:"endsWith"`
	// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
	Equals pulumi.StringArrayInput `pulumi:"equals"`
	// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
	Field pulumi.StringInput `pulumi:"field"`
	// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
	NotEndsWith pulumi.StringArrayInput `pulumi:"notEndsWith"`
	// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
	NotEquals pulumi.StringArrayInput `pulumi:"notEquals"`
	// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
	NotStartsWith pulumi.StringArrayInput `pulumi:"notStartsWith"`
	// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
	StartsWith pulumi.StringArrayInput `pulumi:"startsWith"`
}

func (EventDataStoreAdvancedFieldSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedFieldSelectorArgs) ToEventDataStoreAdvancedFieldSelectorOutput() EventDataStoreAdvancedFieldSelectorOutput {
	return i.ToEventDataStoreAdvancedFieldSelectorOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedFieldSelectorArgs) ToEventDataStoreAdvancedFieldSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedFieldSelectorOutput)
}

// EventDataStoreAdvancedFieldSelectorArrayInput is an input type that accepts EventDataStoreAdvancedFieldSelectorArray and EventDataStoreAdvancedFieldSelectorArrayOutput values.
// You can construct a concrete instance of `EventDataStoreAdvancedFieldSelectorArrayInput` via:
//
//	EventDataStoreAdvancedFieldSelectorArray{ EventDataStoreAdvancedFieldSelectorArgs{...} }
type EventDataStoreAdvancedFieldSelectorArrayInput interface {
	pulumi.Input

	ToEventDataStoreAdvancedFieldSelectorArrayOutput() EventDataStoreAdvancedFieldSelectorArrayOutput
	ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(context.Context) EventDataStoreAdvancedFieldSelectorArrayOutput
}

type EventDataStoreAdvancedFieldSelectorArray []EventDataStoreAdvancedFieldSelectorInput

func (EventDataStoreAdvancedFieldSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (i EventDataStoreAdvancedFieldSelectorArray) ToEventDataStoreAdvancedFieldSelectorArrayOutput() EventDataStoreAdvancedFieldSelectorArrayOutput {
	return i.ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(context.Background())
}

func (i EventDataStoreAdvancedFieldSelectorArray) ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreAdvancedFieldSelectorArrayOutput)
}

// A single selector statement in an advanced event selector.
type EventDataStoreAdvancedFieldSelectorOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedFieldSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedFieldSelectorOutput) ToEventDataStoreAdvancedFieldSelectorOutput() EventDataStoreAdvancedFieldSelectorOutput {
	return o
}

func (o EventDataStoreAdvancedFieldSelectorOutput) ToEventDataStoreAdvancedFieldSelectorOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorOutput {
	return o
}

// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) EndsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.EndsWith }).(pulumi.StringArrayOutput)
}

// An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
func (o EventDataStoreAdvancedFieldSelectorOutput) Equals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.Equals }).(pulumi.StringArrayOutput)
}

// A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
func (o EventDataStoreAdvancedFieldSelectorOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) string { return v.Field }).(pulumi.StringOutput)
}

// An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) NotEndsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.NotEndsWith }).(pulumi.StringArrayOutput)
}

// An operator that excludes events that match the exact value of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) NotEquals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.NotEquals }).(pulumi.StringArrayOutput)
}

// An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) NotStartsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.NotStartsWith }).(pulumi.StringArrayOutput)
}

// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
func (o EventDataStoreAdvancedFieldSelectorOutput) StartsWith() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventDataStoreAdvancedFieldSelector) []string { return v.StartsWith }).(pulumi.StringArrayOutput)
}

type EventDataStoreAdvancedFieldSelectorArrayOutput struct{ *pulumi.OutputState }

func (EventDataStoreAdvancedFieldSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreAdvancedFieldSelector)(nil)).Elem()
}

func (o EventDataStoreAdvancedFieldSelectorArrayOutput) ToEventDataStoreAdvancedFieldSelectorArrayOutput() EventDataStoreAdvancedFieldSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedFieldSelectorArrayOutput) ToEventDataStoreAdvancedFieldSelectorArrayOutputWithContext(ctx context.Context) EventDataStoreAdvancedFieldSelectorArrayOutput {
	return o
}

func (o EventDataStoreAdvancedFieldSelectorArrayOutput) Index(i pulumi.IntInput) EventDataStoreAdvancedFieldSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDataStoreAdvancedFieldSelector {
		return vs[0].([]EventDataStoreAdvancedFieldSelector)[vs[1].(int)]
	}).(EventDataStoreAdvancedFieldSelectorOutput)
}

// An arbitrary set of tags (key-value pairs) for this event data store.
type EventDataStoreTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// EventDataStoreTagInput is an input type that accepts EventDataStoreTagArgs and EventDataStoreTagOutput values.
// You can construct a concrete instance of `EventDataStoreTagInput` via:
//
//	EventDataStoreTagArgs{...}
type EventDataStoreTagInput interface {
	pulumi.Input

	ToEventDataStoreTagOutput() EventDataStoreTagOutput
	ToEventDataStoreTagOutputWithContext(context.Context) EventDataStoreTagOutput
}

// An arbitrary set of tags (key-value pairs) for this event data store.
type EventDataStoreTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventDataStoreTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreTag)(nil)).Elem()
}

func (i EventDataStoreTagArgs) ToEventDataStoreTagOutput() EventDataStoreTagOutput {
	return i.ToEventDataStoreTagOutputWithContext(context.Background())
}

func (i EventDataStoreTagArgs) ToEventDataStoreTagOutputWithContext(ctx context.Context) EventDataStoreTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreTagOutput)
}

// EventDataStoreTagArrayInput is an input type that accepts EventDataStoreTagArray and EventDataStoreTagArrayOutput values.
// You can construct a concrete instance of `EventDataStoreTagArrayInput` via:
//
//	EventDataStoreTagArray{ EventDataStoreTagArgs{...} }
type EventDataStoreTagArrayInput interface {
	pulumi.Input

	ToEventDataStoreTagArrayOutput() EventDataStoreTagArrayOutput
	ToEventDataStoreTagArrayOutputWithContext(context.Context) EventDataStoreTagArrayOutput
}

type EventDataStoreTagArray []EventDataStoreTagInput

func (EventDataStoreTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreTag)(nil)).Elem()
}

func (i EventDataStoreTagArray) ToEventDataStoreTagArrayOutput() EventDataStoreTagArrayOutput {
	return i.ToEventDataStoreTagArrayOutputWithContext(context.Background())
}

func (i EventDataStoreTagArray) ToEventDataStoreTagArrayOutputWithContext(ctx context.Context) EventDataStoreTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventDataStoreTagArrayOutput)
}

// An arbitrary set of tags (key-value pairs) for this event data store.
type EventDataStoreTagOutput struct{ *pulumi.OutputState }

func (EventDataStoreTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventDataStoreTag)(nil)).Elem()
}

func (o EventDataStoreTagOutput) ToEventDataStoreTagOutput() EventDataStoreTagOutput {
	return o
}

func (o EventDataStoreTagOutput) ToEventDataStoreTagOutputWithContext(ctx context.Context) EventDataStoreTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o EventDataStoreTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventDataStoreTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o EventDataStoreTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventDataStoreTag) string { return v.Value }).(pulumi.StringOutput)
}

type EventDataStoreTagArrayOutput struct{ *pulumi.OutputState }

func (EventDataStoreTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventDataStoreTag)(nil)).Elem()
}

func (o EventDataStoreTagArrayOutput) ToEventDataStoreTagArrayOutput() EventDataStoreTagArrayOutput {
	return o
}

func (o EventDataStoreTagArrayOutput) ToEventDataStoreTagArrayOutputWithContext(ctx context.Context) EventDataStoreTagArrayOutput {
	return o
}

func (o EventDataStoreTagArrayOutput) Index(i pulumi.IntInput) EventDataStoreTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventDataStoreTag {
		return vs[0].([]EventDataStoreTag)[vs[1].(int)]
	}).(EventDataStoreTagOutput)
}

// CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
type TrailDataResource struct {
	// The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
	Type string `pulumi:"type"`
	// An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
	Values []string `pulumi:"values"`
}

// TrailDataResourceInput is an input type that accepts TrailDataResourceArgs and TrailDataResourceOutput values.
// You can construct a concrete instance of `TrailDataResourceInput` via:
//
//	TrailDataResourceArgs{...}
type TrailDataResourceInput interface {
	pulumi.Input

	ToTrailDataResourceOutput() TrailDataResourceOutput
	ToTrailDataResourceOutputWithContext(context.Context) TrailDataResourceOutput
}

// CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
type TrailDataResourceArgs struct {
	// The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
	Type pulumi.StringInput `pulumi:"type"`
	// An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TrailDataResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailDataResource)(nil)).Elem()
}

func (i TrailDataResourceArgs) ToTrailDataResourceOutput() TrailDataResourceOutput {
	return i.ToTrailDataResourceOutputWithContext(context.Background())
}

func (i TrailDataResourceArgs) ToTrailDataResourceOutputWithContext(ctx context.Context) TrailDataResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailDataResourceOutput)
}

// TrailDataResourceArrayInput is an input type that accepts TrailDataResourceArray and TrailDataResourceArrayOutput values.
// You can construct a concrete instance of `TrailDataResourceArrayInput` via:
//
//	TrailDataResourceArray{ TrailDataResourceArgs{...} }
type TrailDataResourceArrayInput interface {
	pulumi.Input

	ToTrailDataResourceArrayOutput() TrailDataResourceArrayOutput
	ToTrailDataResourceArrayOutputWithContext(context.Context) TrailDataResourceArrayOutput
}

type TrailDataResourceArray []TrailDataResourceInput

func (TrailDataResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailDataResource)(nil)).Elem()
}

func (i TrailDataResourceArray) ToTrailDataResourceArrayOutput() TrailDataResourceArrayOutput {
	return i.ToTrailDataResourceArrayOutputWithContext(context.Background())
}

func (i TrailDataResourceArray) ToTrailDataResourceArrayOutputWithContext(ctx context.Context) TrailDataResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailDataResourceArrayOutput)
}

// CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
type TrailDataResourceOutput struct{ *pulumi.OutputState }

func (TrailDataResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailDataResource)(nil)).Elem()
}

func (o TrailDataResourceOutput) ToTrailDataResourceOutput() TrailDataResourceOutput {
	return o
}

func (o TrailDataResourceOutput) ToTrailDataResourceOutputWithContext(ctx context.Context) TrailDataResourceOutput {
	return o
}

// The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
func (o TrailDataResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TrailDataResource) string { return v.Type }).(pulumi.StringOutput)
}

// An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
func (o TrailDataResourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailDataResource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TrailDataResourceArrayOutput struct{ *pulumi.OutputState }

func (TrailDataResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailDataResource)(nil)).Elem()
}

func (o TrailDataResourceArrayOutput) ToTrailDataResourceArrayOutput() TrailDataResourceArrayOutput {
	return o
}

func (o TrailDataResourceArrayOutput) ToTrailDataResourceArrayOutputWithContext(ctx context.Context) TrailDataResourceArrayOutput {
	return o
}

func (o TrailDataResourceArrayOutput) Index(i pulumi.IntInput) TrailDataResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailDataResource {
		return vs[0].([]TrailDataResource)[vs[1].(int)]
	}).(TrailDataResourceOutput)
}

// The type of email sending events to publish to the event destination.
type TrailEventSelector struct {
	DataResources []TrailDataResource `pulumi:"dataResources"`
	// An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
	ExcludeManagementEventSources []string `pulumi:"excludeManagementEventSources"`
	// Specify if you want your event selector to include management events for your trail.
	IncludeManagementEvents *bool `pulumi:"includeManagementEvents"`
	// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
	ReadWriteType *TrailEventSelectorReadWriteType `pulumi:"readWriteType"`
}

// TrailEventSelectorInput is an input type that accepts TrailEventSelectorArgs and TrailEventSelectorOutput values.
// You can construct a concrete instance of `TrailEventSelectorInput` via:
//
//	TrailEventSelectorArgs{...}
type TrailEventSelectorInput interface {
	pulumi.Input

	ToTrailEventSelectorOutput() TrailEventSelectorOutput
	ToTrailEventSelectorOutputWithContext(context.Context) TrailEventSelectorOutput
}

// The type of email sending events to publish to the event destination.
type TrailEventSelectorArgs struct {
	DataResources TrailDataResourceArrayInput `pulumi:"dataResources"`
	// An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
	ExcludeManagementEventSources pulumi.StringArrayInput `pulumi:"excludeManagementEventSources"`
	// Specify if you want your event selector to include management events for your trail.
	IncludeManagementEvents pulumi.BoolPtrInput `pulumi:"includeManagementEvents"`
	// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
	ReadWriteType TrailEventSelectorReadWriteTypePtrInput `pulumi:"readWriteType"`
}

func (TrailEventSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return i.ToTrailEventSelectorOutputWithContext(context.Background())
}

func (i TrailEventSelectorArgs) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorOutput)
}

// TrailEventSelectorArrayInput is an input type that accepts TrailEventSelectorArray and TrailEventSelectorArrayOutput values.
// You can construct a concrete instance of `TrailEventSelectorArrayInput` via:
//
//	TrailEventSelectorArray{ TrailEventSelectorArgs{...} }
type TrailEventSelectorArrayInput interface {
	pulumi.Input

	ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput
	ToTrailEventSelectorArrayOutputWithContext(context.Context) TrailEventSelectorArrayOutput
}

type TrailEventSelectorArray []TrailEventSelectorInput

func (TrailEventSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return i.ToTrailEventSelectorArrayOutputWithContext(context.Background())
}

func (i TrailEventSelectorArray) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailEventSelectorArrayOutput)
}

// The type of email sending events to publish to the event destination.
type TrailEventSelectorOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutput() TrailEventSelectorOutput {
	return o
}

func (o TrailEventSelectorOutput) ToTrailEventSelectorOutputWithContext(ctx context.Context) TrailEventSelectorOutput {
	return o
}

func (o TrailEventSelectorOutput) DataResources() TrailDataResourceArrayOutput {
	return o.ApplyT(func(v TrailEventSelector) []TrailDataResource { return v.DataResources }).(TrailDataResourceArrayOutput)
}

// An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
func (o TrailEventSelectorOutput) ExcludeManagementEventSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrailEventSelector) []string { return v.ExcludeManagementEventSources }).(pulumi.StringArrayOutput)
}

// Specify if you want your event selector to include management events for your trail.
func (o TrailEventSelectorOutput) IncludeManagementEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrailEventSelector) *bool { return v.IncludeManagementEvents }).(pulumi.BoolPtrOutput)
}

// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
func (o TrailEventSelectorOutput) ReadWriteType() TrailEventSelectorReadWriteTypePtrOutput {
	return o.ApplyT(func(v TrailEventSelector) *TrailEventSelectorReadWriteType { return v.ReadWriteType }).(TrailEventSelectorReadWriteTypePtrOutput)
}

type TrailEventSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailEventSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailEventSelector)(nil)).Elem()
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutput() TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) ToTrailEventSelectorArrayOutputWithContext(ctx context.Context) TrailEventSelectorArrayOutput {
	return o
}

func (o TrailEventSelectorArrayOutput) Index(i pulumi.IntInput) TrailEventSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailEventSelector {
		return vs[0].([]TrailEventSelector)[vs[1].(int)]
	}).(TrailEventSelectorOutput)
}

// A string that contains insight types that are logged on a trail.
type TrailInsightSelector struct {
	// The type of insight to log on a trail.
	InsightType *string `pulumi:"insightType"`
}

// TrailInsightSelectorInput is an input type that accepts TrailInsightSelectorArgs and TrailInsightSelectorOutput values.
// You can construct a concrete instance of `TrailInsightSelectorInput` via:
//
//	TrailInsightSelectorArgs{...}
type TrailInsightSelectorInput interface {
	pulumi.Input

	ToTrailInsightSelectorOutput() TrailInsightSelectorOutput
	ToTrailInsightSelectorOutputWithContext(context.Context) TrailInsightSelectorOutput
}

// A string that contains insight types that are logged on a trail.
type TrailInsightSelectorArgs struct {
	// The type of insight to log on a trail.
	InsightType pulumi.StringPtrInput `pulumi:"insightType"`
}

func (TrailInsightSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return i.ToTrailInsightSelectorOutputWithContext(context.Background())
}

func (i TrailInsightSelectorArgs) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailInsightSelectorOutput)
}

// TrailInsightSelectorArrayInput is an input type that accepts TrailInsightSelectorArray and TrailInsightSelectorArrayOutput values.
// You can construct a concrete instance of `TrailInsightSelectorArrayInput` via:
//
//	TrailInsightSelectorArray{ TrailInsightSelectorArgs{...} }
type TrailInsightSelectorArrayInput interface {
	pulumi.Input

	ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput
	ToTrailInsightSelectorArrayOutputWithContext(context.Context) TrailInsightSelectorArrayOutput
}

type TrailInsightSelectorArray []TrailInsightSelectorInput

func (TrailInsightSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailInsightSelector)(nil)).Elem()
}

func (i TrailInsightSelectorArray) ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput {
	return i.ToTrailInsightSelectorArrayOutputWithContext(context.Background())
}

func (i TrailInsightSelectorArray) ToTrailInsightSelectorArrayOutputWithContext(ctx context.Context) TrailInsightSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailInsightSelectorArrayOutput)
}

// A string that contains insight types that are logged on a trail.
type TrailInsightSelectorOutput struct{ *pulumi.OutputState }

func (TrailInsightSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailInsightSelector)(nil)).Elem()
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutput() TrailInsightSelectorOutput {
	return o
}

func (o TrailInsightSelectorOutput) ToTrailInsightSelectorOutputWithContext(ctx context.Context) TrailInsightSelectorOutput {
	return o
}

// The type of insight to log on a trail.
func (o TrailInsightSelectorOutput) InsightType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrailInsightSelector) *string { return v.InsightType }).(pulumi.StringPtrOutput)
}

type TrailInsightSelectorArrayOutput struct{ *pulumi.OutputState }

func (TrailInsightSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailInsightSelector)(nil)).Elem()
}

func (o TrailInsightSelectorArrayOutput) ToTrailInsightSelectorArrayOutput() TrailInsightSelectorArrayOutput {
	return o
}

func (o TrailInsightSelectorArrayOutput) ToTrailInsightSelectorArrayOutputWithContext(ctx context.Context) TrailInsightSelectorArrayOutput {
	return o
}

func (o TrailInsightSelectorArrayOutput) Index(i pulumi.IntInput) TrailInsightSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailInsightSelector {
		return vs[0].([]TrailInsightSelector)[vs[1].(int)]
	}).(TrailInsightSelectorOutput)
}

// An arbitrary set of tags (key-value pairs) for this trail.
type TrailTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// TrailTagInput is an input type that accepts TrailTagArgs and TrailTagOutput values.
// You can construct a concrete instance of `TrailTagInput` via:
//
//	TrailTagArgs{...}
type TrailTagInput interface {
	pulumi.Input

	ToTrailTagOutput() TrailTagOutput
	ToTrailTagOutputWithContext(context.Context) TrailTagOutput
}

// An arbitrary set of tags (key-value pairs) for this trail.
type TrailTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TrailTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailTag)(nil)).Elem()
}

func (i TrailTagArgs) ToTrailTagOutput() TrailTagOutput {
	return i.ToTrailTagOutputWithContext(context.Background())
}

func (i TrailTagArgs) ToTrailTagOutputWithContext(ctx context.Context) TrailTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailTagOutput)
}

// TrailTagArrayInput is an input type that accepts TrailTagArray and TrailTagArrayOutput values.
// You can construct a concrete instance of `TrailTagArrayInput` via:
//
//	TrailTagArray{ TrailTagArgs{...} }
type TrailTagArrayInput interface {
	pulumi.Input

	ToTrailTagArrayOutput() TrailTagArrayOutput
	ToTrailTagArrayOutputWithContext(context.Context) TrailTagArrayOutput
}

type TrailTagArray []TrailTagInput

func (TrailTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailTag)(nil)).Elem()
}

func (i TrailTagArray) ToTrailTagArrayOutput() TrailTagArrayOutput {
	return i.ToTrailTagArrayOutputWithContext(context.Background())
}

func (i TrailTagArray) ToTrailTagArrayOutputWithContext(ctx context.Context) TrailTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrailTagArrayOutput)
}

// An arbitrary set of tags (key-value pairs) for this trail.
type TrailTagOutput struct{ *pulumi.OutputState }

func (TrailTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrailTag)(nil)).Elem()
}

func (o TrailTagOutput) ToTrailTagOutput() TrailTagOutput {
	return o
}

func (o TrailTagOutput) ToTrailTagOutputWithContext(ctx context.Context) TrailTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o TrailTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TrailTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o TrailTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TrailTag) string { return v.Value }).(pulumi.StringOutput)
}

type TrailTagArrayOutput struct{ *pulumi.OutputState }

func (TrailTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrailTag)(nil)).Elem()
}

func (o TrailTagArrayOutput) ToTrailTagArrayOutput() TrailTagArrayOutput {
	return o
}

func (o TrailTagArrayOutput) ToTrailTagArrayOutputWithContext(ctx context.Context) TrailTagArrayOutput {
	return o
}

func (o TrailTagArrayOutput) Index(i pulumi.IntInput) TrailTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrailTag {
		return vs[0].([]TrailTag)[vs[1].(int)]
	}).(TrailTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedEventSelectorInput)(nil)).Elem(), EventDataStoreAdvancedEventSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedEventSelectorArrayInput)(nil)).Elem(), EventDataStoreAdvancedEventSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedFieldSelectorInput)(nil)).Elem(), EventDataStoreAdvancedFieldSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreAdvancedFieldSelectorArrayInput)(nil)).Elem(), EventDataStoreAdvancedFieldSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreTagInput)(nil)).Elem(), EventDataStoreTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventDataStoreTagArrayInput)(nil)).Elem(), EventDataStoreTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailDataResourceInput)(nil)).Elem(), TrailDataResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailDataResourceArrayInput)(nil)).Elem(), TrailDataResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorInput)(nil)).Elem(), TrailEventSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailEventSelectorArrayInput)(nil)).Elem(), TrailEventSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailInsightSelectorInput)(nil)).Elem(), TrailInsightSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailInsightSelectorArrayInput)(nil)).Elem(), TrailInsightSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailTagInput)(nil)).Elem(), TrailTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrailTagArrayInput)(nil)).Elem(), TrailTagArray{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedEventSelectorOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedEventSelectorArrayOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedFieldSelectorOutput{})
	pulumi.RegisterOutputType(EventDataStoreAdvancedFieldSelectorArrayOutput{})
	pulumi.RegisterOutputType(EventDataStoreTagOutput{})
	pulumi.RegisterOutputType(EventDataStoreTagArrayOutput{})
	pulumi.RegisterOutputType(TrailDataResourceOutput{})
	pulumi.RegisterOutputType(TrailDataResourceArrayOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorOutput{})
	pulumi.RegisterOutputType(TrailEventSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailInsightSelectorOutput{})
	pulumi.RegisterOutputType(TrailInsightSelectorArrayOutput{})
	pulumi.RegisterOutputType(TrailTagOutput{})
	pulumi.RegisterOutputType(TrailTagArrayOutput{})
}
