// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package xray

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupInsightsConfiguration struct {
	// Set the InsightsEnabled value to true to enable insights or false to disable insights.
	InsightsEnabled *bool `pulumi:"insightsEnabled"`
	// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
	NotificationsEnabled *bool `pulumi:"notificationsEnabled"`
}

// GroupInsightsConfigurationInput is an input type that accepts GroupInsightsConfigurationArgs and GroupInsightsConfigurationOutput values.
// You can construct a concrete instance of `GroupInsightsConfigurationInput` via:
//
//          GroupInsightsConfigurationArgs{...}
type GroupInsightsConfigurationInput interface {
	pulumi.Input

	ToGroupInsightsConfigurationOutput() GroupInsightsConfigurationOutput
	ToGroupInsightsConfigurationOutputWithContext(context.Context) GroupInsightsConfigurationOutput
}

type GroupInsightsConfigurationArgs struct {
	// Set the InsightsEnabled value to true to enable insights or false to disable insights.
	InsightsEnabled pulumi.BoolPtrInput `pulumi:"insightsEnabled"`
	// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
	NotificationsEnabled pulumi.BoolPtrInput `pulumi:"notificationsEnabled"`
}

func (GroupInsightsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupInsightsConfiguration)(nil)).Elem()
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationOutput() GroupInsightsConfigurationOutput {
	return i.ToGroupInsightsConfigurationOutputWithContext(context.Background())
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationOutputWithContext(ctx context.Context) GroupInsightsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInsightsConfigurationOutput)
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return i.ToGroupInsightsConfigurationPtrOutputWithContext(context.Background())
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInsightsConfigurationOutput).ToGroupInsightsConfigurationPtrOutputWithContext(ctx)
}

// GroupInsightsConfigurationPtrInput is an input type that accepts GroupInsightsConfigurationArgs, GroupInsightsConfigurationPtr and GroupInsightsConfigurationPtrOutput values.
// You can construct a concrete instance of `GroupInsightsConfigurationPtrInput` via:
//
//          GroupInsightsConfigurationArgs{...}
//
//  or:
//
//          nil
type GroupInsightsConfigurationPtrInput interface {
	pulumi.Input

	ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput
	ToGroupInsightsConfigurationPtrOutputWithContext(context.Context) GroupInsightsConfigurationPtrOutput
}

type groupInsightsConfigurationPtrType GroupInsightsConfigurationArgs

func GroupInsightsConfigurationPtr(v *GroupInsightsConfigurationArgs) GroupInsightsConfigurationPtrInput {
	return (*groupInsightsConfigurationPtrType)(v)
}

func (*groupInsightsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupInsightsConfiguration)(nil)).Elem()
}

func (i *groupInsightsConfigurationPtrType) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return i.ToGroupInsightsConfigurationPtrOutputWithContext(context.Background())
}

func (i *groupInsightsConfigurationPtrType) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInsightsConfigurationPtrOutput)
}

type GroupInsightsConfigurationOutput struct{ *pulumi.OutputState }

func (GroupInsightsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupInsightsConfiguration)(nil)).Elem()
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationOutput() GroupInsightsConfigurationOutput {
	return o
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationOutputWithContext(ctx context.Context) GroupInsightsConfigurationOutput {
	return o
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return o.ToGroupInsightsConfigurationPtrOutputWithContext(context.Background())
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupInsightsConfiguration) *GroupInsightsConfiguration {
		return &v
	}).(GroupInsightsConfigurationPtrOutput)
}

// Set the InsightsEnabled value to true to enable insights or false to disable insights.
func (o GroupInsightsConfigurationOutput) InsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupInsightsConfiguration) *bool { return v.InsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
func (o GroupInsightsConfigurationOutput) NotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupInsightsConfiguration) *bool { return v.NotificationsEnabled }).(pulumi.BoolPtrOutput)
}

type GroupInsightsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (GroupInsightsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupInsightsConfiguration)(nil)).Elem()
}

func (o GroupInsightsConfigurationPtrOutput) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return o
}

func (o GroupInsightsConfigurationPtrOutput) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return o
}

func (o GroupInsightsConfigurationPtrOutput) Elem() GroupInsightsConfigurationOutput {
	return o.ApplyT(func(v *GroupInsightsConfiguration) GroupInsightsConfiguration {
		if v != nil {
			return *v
		}
		var ret GroupInsightsConfiguration
		return ret
	}).(GroupInsightsConfigurationOutput)
}

// Set the InsightsEnabled value to true to enable insights or false to disable insights.
func (o GroupInsightsConfigurationPtrOutput) InsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupInsightsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.InsightsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
func (o GroupInsightsConfigurationPtrOutput) NotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupInsightsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.NotificationsEnabled
	}).(pulumi.BoolPtrOutput)
}

type SamplingRuleSamplingRule struct {
	// Matches attributes derived from the request.
	Attributes interface{} `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate *float64 `pulumi:"fixedRate"`
	// Matches the HTTP method from a request URL.
	HTTPMethod *string `pulumi:"hTTPMethod"`
	// Matches the hostname from a request URL.
	Host *string `pulumi:"host"`
	// The priority of the sampling rule.
	Priority *int `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize *int `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceARN *string `pulumi:"resourceARN"`
	RuleARN     *string `pulumi:"ruleARN"`
	RuleName    *string `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName *string `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType *string `pulumi:"serviceType"`
	// Matches the path from a request URL.
	URLPath *string `pulumi:"uRLPath"`
	// The version of the sampling rule format (1)
	Version *int `pulumi:"version"`
}

// SamplingRuleSamplingRuleInput is an input type that accepts SamplingRuleSamplingRuleArgs and SamplingRuleSamplingRuleOutput values.
// You can construct a concrete instance of `SamplingRuleSamplingRuleInput` via:
//
//          SamplingRuleSamplingRuleArgs{...}
type SamplingRuleSamplingRuleInput interface {
	pulumi.Input

	ToSamplingRuleSamplingRuleOutput() SamplingRuleSamplingRuleOutput
	ToSamplingRuleSamplingRuleOutputWithContext(context.Context) SamplingRuleSamplingRuleOutput
}

type SamplingRuleSamplingRuleArgs struct {
	// Matches attributes derived from the request.
	Attributes pulumi.Input `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate pulumi.Float64PtrInput `pulumi:"fixedRate"`
	// Matches the HTTP method from a request URL.
	HTTPMethod pulumi.StringPtrInput `pulumi:"hTTPMethod"`
	// Matches the hostname from a request URL.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The priority of the sampling rule.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize pulumi.IntPtrInput `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceARN pulumi.StringPtrInput `pulumi:"resourceARN"`
	RuleARN     pulumi.StringPtrInput `pulumi:"ruleARN"`
	RuleName    pulumi.StringPtrInput `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType pulumi.StringPtrInput `pulumi:"serviceType"`
	// Matches the path from a request URL.
	URLPath pulumi.StringPtrInput `pulumi:"uRLPath"`
	// The version of the sampling rule format (1)
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (SamplingRuleSamplingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleSamplingRule)(nil)).Elem()
}

func (i SamplingRuleSamplingRuleArgs) ToSamplingRuleSamplingRuleOutput() SamplingRuleSamplingRuleOutput {
	return i.ToSamplingRuleSamplingRuleOutputWithContext(context.Background())
}

func (i SamplingRuleSamplingRuleArgs) ToSamplingRuleSamplingRuleOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleOutput)
}

func (i SamplingRuleSamplingRuleArgs) ToSamplingRuleSamplingRulePtrOutput() SamplingRuleSamplingRulePtrOutput {
	return i.ToSamplingRuleSamplingRulePtrOutputWithContext(context.Background())
}

func (i SamplingRuleSamplingRuleArgs) ToSamplingRuleSamplingRulePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleOutput).ToSamplingRuleSamplingRulePtrOutputWithContext(ctx)
}

// SamplingRuleSamplingRulePtrInput is an input type that accepts SamplingRuleSamplingRuleArgs, SamplingRuleSamplingRulePtr and SamplingRuleSamplingRulePtrOutput values.
// You can construct a concrete instance of `SamplingRuleSamplingRulePtrInput` via:
//
//          SamplingRuleSamplingRuleArgs{...}
//
//  or:
//
//          nil
type SamplingRuleSamplingRulePtrInput interface {
	pulumi.Input

	ToSamplingRuleSamplingRulePtrOutput() SamplingRuleSamplingRulePtrOutput
	ToSamplingRuleSamplingRulePtrOutputWithContext(context.Context) SamplingRuleSamplingRulePtrOutput
}

type samplingRuleSamplingRulePtrType SamplingRuleSamplingRuleArgs

func SamplingRuleSamplingRulePtr(v *SamplingRuleSamplingRuleArgs) SamplingRuleSamplingRulePtrInput {
	return (*samplingRuleSamplingRulePtrType)(v)
}

func (*samplingRuleSamplingRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleSamplingRule)(nil)).Elem()
}

func (i *samplingRuleSamplingRulePtrType) ToSamplingRuleSamplingRulePtrOutput() SamplingRuleSamplingRulePtrOutput {
	return i.ToSamplingRuleSamplingRulePtrOutputWithContext(context.Background())
}

func (i *samplingRuleSamplingRulePtrType) ToSamplingRuleSamplingRulePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRulePtrOutput)
}

type SamplingRuleSamplingRuleOutput struct{ *pulumi.OutputState }

func (SamplingRuleSamplingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleSamplingRule)(nil)).Elem()
}

func (o SamplingRuleSamplingRuleOutput) ToSamplingRuleSamplingRuleOutput() SamplingRuleSamplingRuleOutput {
	return o
}

func (o SamplingRuleSamplingRuleOutput) ToSamplingRuleSamplingRuleOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleOutput {
	return o
}

func (o SamplingRuleSamplingRuleOutput) ToSamplingRuleSamplingRulePtrOutput() SamplingRuleSamplingRulePtrOutput {
	return o.ToSamplingRuleSamplingRulePtrOutputWithContext(context.Background())
}

func (o SamplingRuleSamplingRuleOutput) ToSamplingRuleSamplingRulePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingRuleSamplingRule) *SamplingRuleSamplingRule {
		return &v
	}).(SamplingRuleSamplingRulePtrOutput)
}

// Matches attributes derived from the request.
func (o SamplingRuleSamplingRuleOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) interface{} { return v.Attributes }).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleSamplingRuleOutput) FixedRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *float64 { return v.FixedRate }).(pulumi.Float64PtrOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleSamplingRuleOutput) HTTPMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.HTTPMethod }).(pulumi.StringPtrOutput)
}

// Matches the hostname from a request URL.
func (o SamplingRuleSamplingRuleOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleSamplingRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleSamplingRuleOutput) ReservoirSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *int { return v.ReservoirSize }).(pulumi.IntPtrOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleSamplingRuleOutput) ResourceARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.ResourceARN }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleOutput) RuleARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.RuleARN }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleSamplingRuleOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleSamplingRuleOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleSamplingRuleOutput) URLPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *string { return v.URLPath }).(pulumi.StringPtrOutput)
}

// The version of the sampling rule format (1)
func (o SamplingRuleSamplingRuleOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRule) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type SamplingRuleSamplingRulePtrOutput struct{ *pulumi.OutputState }

func (SamplingRuleSamplingRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleSamplingRule)(nil)).Elem()
}

func (o SamplingRuleSamplingRulePtrOutput) ToSamplingRuleSamplingRulePtrOutput() SamplingRuleSamplingRulePtrOutput {
	return o
}

func (o SamplingRuleSamplingRulePtrOutput) ToSamplingRuleSamplingRulePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRulePtrOutput {
	return o
}

func (o SamplingRuleSamplingRulePtrOutput) Elem() SamplingRuleSamplingRuleOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) SamplingRuleSamplingRule {
		if v != nil {
			return *v
		}
		var ret SamplingRuleSamplingRule
		return ret
	}).(SamplingRuleSamplingRuleOutput)
}

// Matches attributes derived from the request.
func (o SamplingRuleSamplingRulePtrOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) interface{} {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleSamplingRulePtrOutput) FixedRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *float64 {
		if v == nil {
			return nil
		}
		return v.FixedRate
	}).(pulumi.Float64PtrOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleSamplingRulePtrOutput) HTTPMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.HTTPMethod
	}).(pulumi.StringPtrOutput)
}

// Matches the hostname from a request URL.
func (o SamplingRuleSamplingRulePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleSamplingRulePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleSamplingRulePtrOutput) ReservoirSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *int {
		if v == nil {
			return nil
		}
		return v.ReservoirSize
	}).(pulumi.IntPtrOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleSamplingRulePtrOutput) ResourceARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.ResourceARN
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRulePtrOutput) RuleARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.RuleARN
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRulePtrOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.RuleName
	}).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleSamplingRulePtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleSamplingRulePtrOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.ServiceType
	}).(pulumi.StringPtrOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleSamplingRulePtrOutput) URLPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *string {
		if v == nil {
			return nil
		}
		return v.URLPath
	}).(pulumi.StringPtrOutput)
}

// The version of the sampling rule format (1)
func (o SamplingRuleSamplingRulePtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRule) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

type SamplingRuleSamplingRuleRecord struct {
	// When the rule was created, in Unix time seconds.
	CreatedAt *string `pulumi:"createdAt"`
	// When the rule was modified, in Unix time seconds.
	ModifiedAt   *string                   `pulumi:"modifiedAt"`
	SamplingRule *SamplingRuleSamplingRule `pulumi:"samplingRule"`
}

// SamplingRuleSamplingRuleRecordInput is an input type that accepts SamplingRuleSamplingRuleRecordArgs and SamplingRuleSamplingRuleRecordOutput values.
// You can construct a concrete instance of `SamplingRuleSamplingRuleRecordInput` via:
//
//          SamplingRuleSamplingRuleRecordArgs{...}
type SamplingRuleSamplingRuleRecordInput interface {
	pulumi.Input

	ToSamplingRuleSamplingRuleRecordOutput() SamplingRuleSamplingRuleRecordOutput
	ToSamplingRuleSamplingRuleRecordOutputWithContext(context.Context) SamplingRuleSamplingRuleRecordOutput
}

type SamplingRuleSamplingRuleRecordArgs struct {
	// When the rule was created, in Unix time seconds.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// When the rule was modified, in Unix time seconds.
	ModifiedAt   pulumi.StringPtrInput            `pulumi:"modifiedAt"`
	SamplingRule SamplingRuleSamplingRulePtrInput `pulumi:"samplingRule"`
}

func (SamplingRuleSamplingRuleRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleSamplingRuleRecord)(nil)).Elem()
}

func (i SamplingRuleSamplingRuleRecordArgs) ToSamplingRuleSamplingRuleRecordOutput() SamplingRuleSamplingRuleRecordOutput {
	return i.ToSamplingRuleSamplingRuleRecordOutputWithContext(context.Background())
}

func (i SamplingRuleSamplingRuleRecordArgs) ToSamplingRuleSamplingRuleRecordOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleRecordOutput)
}

func (i SamplingRuleSamplingRuleRecordArgs) ToSamplingRuleSamplingRuleRecordPtrOutput() SamplingRuleSamplingRuleRecordPtrOutput {
	return i.ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(context.Background())
}

func (i SamplingRuleSamplingRuleRecordArgs) ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleRecordOutput).ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(ctx)
}

// SamplingRuleSamplingRuleRecordPtrInput is an input type that accepts SamplingRuleSamplingRuleRecordArgs, SamplingRuleSamplingRuleRecordPtr and SamplingRuleSamplingRuleRecordPtrOutput values.
// You can construct a concrete instance of `SamplingRuleSamplingRuleRecordPtrInput` via:
//
//          SamplingRuleSamplingRuleRecordArgs{...}
//
//  or:
//
//          nil
type SamplingRuleSamplingRuleRecordPtrInput interface {
	pulumi.Input

	ToSamplingRuleSamplingRuleRecordPtrOutput() SamplingRuleSamplingRuleRecordPtrOutput
	ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(context.Context) SamplingRuleSamplingRuleRecordPtrOutput
}

type samplingRuleSamplingRuleRecordPtrType SamplingRuleSamplingRuleRecordArgs

func SamplingRuleSamplingRuleRecordPtr(v *SamplingRuleSamplingRuleRecordArgs) SamplingRuleSamplingRuleRecordPtrInput {
	return (*samplingRuleSamplingRuleRecordPtrType)(v)
}

func (*samplingRuleSamplingRuleRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleSamplingRuleRecord)(nil)).Elem()
}

func (i *samplingRuleSamplingRuleRecordPtrType) ToSamplingRuleSamplingRuleRecordPtrOutput() SamplingRuleSamplingRuleRecordPtrOutput {
	return i.ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(context.Background())
}

func (i *samplingRuleSamplingRuleRecordPtrType) ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleRecordPtrOutput)
}

type SamplingRuleSamplingRuleRecordOutput struct{ *pulumi.OutputState }

func (SamplingRuleSamplingRuleRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleSamplingRuleRecord)(nil)).Elem()
}

func (o SamplingRuleSamplingRuleRecordOutput) ToSamplingRuleSamplingRuleRecordOutput() SamplingRuleSamplingRuleRecordOutput {
	return o
}

func (o SamplingRuleSamplingRuleRecordOutput) ToSamplingRuleSamplingRuleRecordOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleRecordOutput {
	return o
}

func (o SamplingRuleSamplingRuleRecordOutput) ToSamplingRuleSamplingRuleRecordPtrOutput() SamplingRuleSamplingRuleRecordPtrOutput {
	return o.ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(context.Background())
}

func (o SamplingRuleSamplingRuleRecordOutput) ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingRuleSamplingRuleRecord) *SamplingRuleSamplingRuleRecord {
		return &v
	}).(SamplingRuleSamplingRuleRecordPtrOutput)
}

// When the rule was created, in Unix time seconds.
func (o SamplingRuleSamplingRuleRecordOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleRecord) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// When the rule was modified, in Unix time seconds.
func (o SamplingRuleSamplingRuleRecordOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleRecord) *string { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleRecordOutput) SamplingRule() SamplingRuleSamplingRulePtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleRecord) *SamplingRuleSamplingRule { return v.SamplingRule }).(SamplingRuleSamplingRulePtrOutput)
}

type SamplingRuleSamplingRuleRecordPtrOutput struct{ *pulumi.OutputState }

func (SamplingRuleSamplingRuleRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleSamplingRuleRecord)(nil)).Elem()
}

func (o SamplingRuleSamplingRuleRecordPtrOutput) ToSamplingRuleSamplingRuleRecordPtrOutput() SamplingRuleSamplingRuleRecordPtrOutput {
	return o
}

func (o SamplingRuleSamplingRuleRecordPtrOutput) ToSamplingRuleSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleRecordPtrOutput {
	return o
}

func (o SamplingRuleSamplingRuleRecordPtrOutput) Elem() SamplingRuleSamplingRuleRecordOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleRecord) SamplingRuleSamplingRuleRecord {
		if v != nil {
			return *v
		}
		var ret SamplingRuleSamplingRuleRecord
		return ret
	}).(SamplingRuleSamplingRuleRecordOutput)
}

// When the rule was created, in Unix time seconds.
func (o SamplingRuleSamplingRuleRecordPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleRecord) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// When the rule was modified, in Unix time seconds.
func (o SamplingRuleSamplingRuleRecordPtrOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleRecord) *string {
		if v == nil {
			return nil
		}
		return v.ModifiedAt
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleRecordPtrOutput) SamplingRule() SamplingRuleSamplingRulePtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleRecord) *SamplingRuleSamplingRule {
		if v == nil {
			return nil
		}
		return v.SamplingRule
	}).(SamplingRuleSamplingRulePtrOutput)
}

type SamplingRuleSamplingRuleUpdate struct {
	// Matches attributes derived from the request.
	Attributes interface{} `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate *float64 `pulumi:"fixedRate"`
	// Matches the HTTP method from a request URL.
	HTTPMethod *string `pulumi:"hTTPMethod"`
	// Matches the hostname from a request URL.
	Host *string `pulumi:"host"`
	// The priority of the sampling rule.
	Priority *int `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize *int `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceARN *string `pulumi:"resourceARN"`
	RuleARN     *string `pulumi:"ruleARN"`
	RuleName    *string `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName *string `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType *string `pulumi:"serviceType"`
	// Matches the path from a request URL.
	URLPath *string `pulumi:"uRLPath"`
}

// SamplingRuleSamplingRuleUpdateInput is an input type that accepts SamplingRuleSamplingRuleUpdateArgs and SamplingRuleSamplingRuleUpdateOutput values.
// You can construct a concrete instance of `SamplingRuleSamplingRuleUpdateInput` via:
//
//          SamplingRuleSamplingRuleUpdateArgs{...}
type SamplingRuleSamplingRuleUpdateInput interface {
	pulumi.Input

	ToSamplingRuleSamplingRuleUpdateOutput() SamplingRuleSamplingRuleUpdateOutput
	ToSamplingRuleSamplingRuleUpdateOutputWithContext(context.Context) SamplingRuleSamplingRuleUpdateOutput
}

type SamplingRuleSamplingRuleUpdateArgs struct {
	// Matches attributes derived from the request.
	Attributes pulumi.Input `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate pulumi.Float64PtrInput `pulumi:"fixedRate"`
	// Matches the HTTP method from a request URL.
	HTTPMethod pulumi.StringPtrInput `pulumi:"hTTPMethod"`
	// Matches the hostname from a request URL.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The priority of the sampling rule.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize pulumi.IntPtrInput `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceARN pulumi.StringPtrInput `pulumi:"resourceARN"`
	RuleARN     pulumi.StringPtrInput `pulumi:"ruleARN"`
	RuleName    pulumi.StringPtrInput `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType pulumi.StringPtrInput `pulumi:"serviceType"`
	// Matches the path from a request URL.
	URLPath pulumi.StringPtrInput `pulumi:"uRLPath"`
}

func (SamplingRuleSamplingRuleUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleSamplingRuleUpdate)(nil)).Elem()
}

func (i SamplingRuleSamplingRuleUpdateArgs) ToSamplingRuleSamplingRuleUpdateOutput() SamplingRuleSamplingRuleUpdateOutput {
	return i.ToSamplingRuleSamplingRuleUpdateOutputWithContext(context.Background())
}

func (i SamplingRuleSamplingRuleUpdateArgs) ToSamplingRuleSamplingRuleUpdateOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleUpdateOutput)
}

func (i SamplingRuleSamplingRuleUpdateArgs) ToSamplingRuleSamplingRuleUpdatePtrOutput() SamplingRuleSamplingRuleUpdatePtrOutput {
	return i.ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(context.Background())
}

func (i SamplingRuleSamplingRuleUpdateArgs) ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleUpdateOutput).ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(ctx)
}

// SamplingRuleSamplingRuleUpdatePtrInput is an input type that accepts SamplingRuleSamplingRuleUpdateArgs, SamplingRuleSamplingRuleUpdatePtr and SamplingRuleSamplingRuleUpdatePtrOutput values.
// You can construct a concrete instance of `SamplingRuleSamplingRuleUpdatePtrInput` via:
//
//          SamplingRuleSamplingRuleUpdateArgs{...}
//
//  or:
//
//          nil
type SamplingRuleSamplingRuleUpdatePtrInput interface {
	pulumi.Input

	ToSamplingRuleSamplingRuleUpdatePtrOutput() SamplingRuleSamplingRuleUpdatePtrOutput
	ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(context.Context) SamplingRuleSamplingRuleUpdatePtrOutput
}

type samplingRuleSamplingRuleUpdatePtrType SamplingRuleSamplingRuleUpdateArgs

func SamplingRuleSamplingRuleUpdatePtr(v *SamplingRuleSamplingRuleUpdateArgs) SamplingRuleSamplingRuleUpdatePtrInput {
	return (*samplingRuleSamplingRuleUpdatePtrType)(v)
}

func (*samplingRuleSamplingRuleUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleSamplingRuleUpdate)(nil)).Elem()
}

func (i *samplingRuleSamplingRuleUpdatePtrType) ToSamplingRuleSamplingRuleUpdatePtrOutput() SamplingRuleSamplingRuleUpdatePtrOutput {
	return i.ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(context.Background())
}

func (i *samplingRuleSamplingRuleUpdatePtrType) ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleSamplingRuleUpdatePtrOutput)
}

type SamplingRuleSamplingRuleUpdateOutput struct{ *pulumi.OutputState }

func (SamplingRuleSamplingRuleUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleSamplingRuleUpdate)(nil)).Elem()
}

func (o SamplingRuleSamplingRuleUpdateOutput) ToSamplingRuleSamplingRuleUpdateOutput() SamplingRuleSamplingRuleUpdateOutput {
	return o
}

func (o SamplingRuleSamplingRuleUpdateOutput) ToSamplingRuleSamplingRuleUpdateOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleUpdateOutput {
	return o
}

func (o SamplingRuleSamplingRuleUpdateOutput) ToSamplingRuleSamplingRuleUpdatePtrOutput() SamplingRuleSamplingRuleUpdatePtrOutput {
	return o.ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(context.Background())
}

func (o SamplingRuleSamplingRuleUpdateOutput) ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingRuleSamplingRuleUpdate) *SamplingRuleSamplingRuleUpdate {
		return &v
	}).(SamplingRuleSamplingRuleUpdatePtrOutput)
}

// Matches attributes derived from the request.
func (o SamplingRuleSamplingRuleUpdateOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) interface{} { return v.Attributes }).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleSamplingRuleUpdateOutput) FixedRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *float64 { return v.FixedRate }).(pulumi.Float64PtrOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleSamplingRuleUpdateOutput) HTTPMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.HTTPMethod }).(pulumi.StringPtrOutput)
}

// Matches the hostname from a request URL.
func (o SamplingRuleSamplingRuleUpdateOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleSamplingRuleUpdateOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleSamplingRuleUpdateOutput) ReservoirSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *int { return v.ReservoirSize }).(pulumi.IntPtrOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleSamplingRuleUpdateOutput) ResourceARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.ResourceARN }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleUpdateOutput) RuleARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.RuleARN }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleUpdateOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleSamplingRuleUpdateOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleSamplingRuleUpdateOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleSamplingRuleUpdateOutput) URLPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleSamplingRuleUpdate) *string { return v.URLPath }).(pulumi.StringPtrOutput)
}

type SamplingRuleSamplingRuleUpdatePtrOutput struct{ *pulumi.OutputState }

func (SamplingRuleSamplingRuleUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleSamplingRuleUpdate)(nil)).Elem()
}

func (o SamplingRuleSamplingRuleUpdatePtrOutput) ToSamplingRuleSamplingRuleUpdatePtrOutput() SamplingRuleSamplingRuleUpdatePtrOutput {
	return o
}

func (o SamplingRuleSamplingRuleUpdatePtrOutput) ToSamplingRuleSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleSamplingRuleUpdatePtrOutput {
	return o
}

func (o SamplingRuleSamplingRuleUpdatePtrOutput) Elem() SamplingRuleSamplingRuleUpdateOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) SamplingRuleSamplingRuleUpdate {
		if v != nil {
			return *v
		}
		var ret SamplingRuleSamplingRuleUpdate
		return ret
	}).(SamplingRuleSamplingRuleUpdateOutput)
}

// Matches attributes derived from the request.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) interface{} {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) FixedRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *float64 {
		if v == nil {
			return nil
		}
		return v.FixedRate
	}).(pulumi.Float64PtrOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) HTTPMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.HTTPMethod
	}).(pulumi.StringPtrOutput)
}

// Matches the hostname from a request URL.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) ReservoirSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *int {
		if v == nil {
			return nil
		}
		return v.ReservoirSize
	}).(pulumi.IntPtrOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) ResourceARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ResourceARN
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleUpdatePtrOutput) RuleARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.RuleARN
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleSamplingRuleUpdatePtrOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.RuleName
	}).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ServiceType
	}).(pulumi.StringPtrOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleSamplingRuleUpdatePtrOutput) URLPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleSamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.URLPath
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupInsightsConfigurationOutput{})
	pulumi.RegisterOutputType(GroupInsightsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SamplingRuleSamplingRuleOutput{})
	pulumi.RegisterOutputType(SamplingRuleSamplingRulePtrOutput{})
	pulumi.RegisterOutputType(SamplingRuleSamplingRuleRecordOutput{})
	pulumi.RegisterOutputType(SamplingRuleSamplingRuleRecordPtrOutput{})
	pulumi.RegisterOutputType(SamplingRuleSamplingRuleUpdateOutput{})
	pulumi.RegisterOutputType(SamplingRuleSamplingRuleUpdatePtrOutput{})
}
