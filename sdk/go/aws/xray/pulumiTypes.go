// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package xray

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type GroupInsightsConfiguration struct {
	// Set the InsightsEnabled value to true to enable insights or false to disable insights.
	InsightsEnabled *bool `pulumi:"insightsEnabled"`
	// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
	NotificationsEnabled *bool `pulumi:"notificationsEnabled"`
}

// GroupInsightsConfigurationInput is an input type that accepts GroupInsightsConfigurationArgs and GroupInsightsConfigurationOutput values.
// You can construct a concrete instance of `GroupInsightsConfigurationInput` via:
//
//	GroupInsightsConfigurationArgs{...}
type GroupInsightsConfigurationInput interface {
	pulumi.Input

	ToGroupInsightsConfigurationOutput() GroupInsightsConfigurationOutput
	ToGroupInsightsConfigurationOutputWithContext(context.Context) GroupInsightsConfigurationOutput
}

type GroupInsightsConfigurationArgs struct {
	// Set the InsightsEnabled value to true to enable insights or false to disable insights.
	InsightsEnabled pulumi.BoolPtrInput `pulumi:"insightsEnabled"`
	// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
	NotificationsEnabled pulumi.BoolPtrInput `pulumi:"notificationsEnabled"`
}

func (GroupInsightsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupInsightsConfiguration)(nil)).Elem()
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationOutput() GroupInsightsConfigurationOutput {
	return i.ToGroupInsightsConfigurationOutputWithContext(context.Background())
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationOutputWithContext(ctx context.Context) GroupInsightsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInsightsConfigurationOutput)
}

func (i GroupInsightsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GroupInsightsConfiguration] {
	return pulumix.Output[GroupInsightsConfiguration]{
		OutputState: i.ToGroupInsightsConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return i.ToGroupInsightsConfigurationPtrOutputWithContext(context.Background())
}

func (i GroupInsightsConfigurationArgs) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInsightsConfigurationOutput).ToGroupInsightsConfigurationPtrOutputWithContext(ctx)
}

// GroupInsightsConfigurationPtrInput is an input type that accepts GroupInsightsConfigurationArgs, GroupInsightsConfigurationPtr and GroupInsightsConfigurationPtrOutput values.
// You can construct a concrete instance of `GroupInsightsConfigurationPtrInput` via:
//
//	        GroupInsightsConfigurationArgs{...}
//
//	or:
//
//	        nil
type GroupInsightsConfigurationPtrInput interface {
	pulumi.Input

	ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput
	ToGroupInsightsConfigurationPtrOutputWithContext(context.Context) GroupInsightsConfigurationPtrOutput
}

type groupInsightsConfigurationPtrType GroupInsightsConfigurationArgs

func GroupInsightsConfigurationPtr(v *GroupInsightsConfigurationArgs) GroupInsightsConfigurationPtrInput {
	return (*groupInsightsConfigurationPtrType)(v)
}

func (*groupInsightsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupInsightsConfiguration)(nil)).Elem()
}

func (i *groupInsightsConfigurationPtrType) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return i.ToGroupInsightsConfigurationPtrOutputWithContext(context.Background())
}

func (i *groupInsightsConfigurationPtrType) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupInsightsConfigurationPtrOutput)
}

func (i *groupInsightsConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*GroupInsightsConfiguration] {
	return pulumix.Output[*GroupInsightsConfiguration]{
		OutputState: i.ToGroupInsightsConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type GroupInsightsConfigurationOutput struct{ *pulumi.OutputState }

func (GroupInsightsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupInsightsConfiguration)(nil)).Elem()
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationOutput() GroupInsightsConfigurationOutput {
	return o
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationOutputWithContext(ctx context.Context) GroupInsightsConfigurationOutput {
	return o
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return o.ToGroupInsightsConfigurationPtrOutputWithContext(context.Background())
}

func (o GroupInsightsConfigurationOutput) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupInsightsConfiguration) *GroupInsightsConfiguration {
		return &v
	}).(GroupInsightsConfigurationPtrOutput)
}

func (o GroupInsightsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GroupInsightsConfiguration] {
	return pulumix.Output[GroupInsightsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Set the InsightsEnabled value to true to enable insights or false to disable insights.
func (o GroupInsightsConfigurationOutput) InsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupInsightsConfiguration) *bool { return v.InsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
func (o GroupInsightsConfigurationOutput) NotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupInsightsConfiguration) *bool { return v.NotificationsEnabled }).(pulumi.BoolPtrOutput)
}

type GroupInsightsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (GroupInsightsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupInsightsConfiguration)(nil)).Elem()
}

func (o GroupInsightsConfigurationPtrOutput) ToGroupInsightsConfigurationPtrOutput() GroupInsightsConfigurationPtrOutput {
	return o
}

func (o GroupInsightsConfigurationPtrOutput) ToGroupInsightsConfigurationPtrOutputWithContext(ctx context.Context) GroupInsightsConfigurationPtrOutput {
	return o
}

func (o GroupInsightsConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GroupInsightsConfiguration] {
	return pulumix.Output[*GroupInsightsConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GroupInsightsConfigurationPtrOutput) Elem() GroupInsightsConfigurationOutput {
	return o.ApplyT(func(v *GroupInsightsConfiguration) GroupInsightsConfiguration {
		if v != nil {
			return *v
		}
		var ret GroupInsightsConfiguration
		return ret
	}).(GroupInsightsConfigurationOutput)
}

// Set the InsightsEnabled value to true to enable insights or false to disable insights.
func (o GroupInsightsConfigurationPtrOutput) InsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupInsightsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.InsightsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
func (o GroupInsightsConfigurationPtrOutput) NotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupInsightsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.NotificationsEnabled
	}).(pulumi.BoolPtrOutput)
}

type GroupTag struct {
	// The key name of the tag.
	Key string `pulumi:"key"`
	// The value for the tag.
	Value string `pulumi:"value"`
}

// GroupTagInput is an input type that accepts GroupTagArgs and GroupTagOutput values.
// You can construct a concrete instance of `GroupTagInput` via:
//
//	GroupTagArgs{...}
type GroupTagInput interface {
	pulumi.Input

	ToGroupTagOutput() GroupTagOutput
	ToGroupTagOutputWithContext(context.Context) GroupTagOutput
}

type GroupTagArgs struct {
	// The key name of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupTag)(nil)).Elem()
}

func (i GroupTagArgs) ToGroupTagOutput() GroupTagOutput {
	return i.ToGroupTagOutputWithContext(context.Background())
}

func (i GroupTagArgs) ToGroupTagOutputWithContext(ctx context.Context) GroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupTagOutput)
}

func (i GroupTagArgs) ToOutput(ctx context.Context) pulumix.Output[GroupTag] {
	return pulumix.Output[GroupTag]{
		OutputState: i.ToGroupTagOutputWithContext(ctx).OutputState,
	}
}

// GroupTagArrayInput is an input type that accepts GroupTagArray and GroupTagArrayOutput values.
// You can construct a concrete instance of `GroupTagArrayInput` via:
//
//	GroupTagArray{ GroupTagArgs{...} }
type GroupTagArrayInput interface {
	pulumi.Input

	ToGroupTagArrayOutput() GroupTagArrayOutput
	ToGroupTagArrayOutputWithContext(context.Context) GroupTagArrayOutput
}

type GroupTagArray []GroupTagInput

func (GroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupTag)(nil)).Elem()
}

func (i GroupTagArray) ToGroupTagArrayOutput() GroupTagArrayOutput {
	return i.ToGroupTagArrayOutputWithContext(context.Background())
}

func (i GroupTagArray) ToGroupTagArrayOutputWithContext(ctx context.Context) GroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupTagArrayOutput)
}

func (i GroupTagArray) ToOutput(ctx context.Context) pulumix.Output[[]GroupTag] {
	return pulumix.Output[[]GroupTag]{
		OutputState: i.ToGroupTagArrayOutputWithContext(ctx).OutputState,
	}
}

type GroupTagOutput struct{ *pulumi.OutputState }

func (GroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupTag)(nil)).Elem()
}

func (o GroupTagOutput) ToGroupTagOutput() GroupTagOutput {
	return o
}

func (o GroupTagOutput) ToGroupTagOutputWithContext(ctx context.Context) GroupTagOutput {
	return o
}

func (o GroupTagOutput) ToOutput(ctx context.Context) pulumix.Output[GroupTag] {
	return pulumix.Output[GroupTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag.
func (o GroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GroupTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag.
func (o GroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type GroupTagArrayOutput struct{ *pulumi.OutputState }

func (GroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupTag)(nil)).Elem()
}

func (o GroupTagArrayOutput) ToGroupTagArrayOutput() GroupTagArrayOutput {
	return o
}

func (o GroupTagArrayOutput) ToGroupTagArrayOutputWithContext(ctx context.Context) GroupTagArrayOutput {
	return o
}

func (o GroupTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GroupTag] {
	return pulumix.Output[[]GroupTag]{
		OutputState: o.OutputState,
	}
}

func (o GroupTagArrayOutput) Index(i pulumi.IntInput) GroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupTag {
		return vs[0].([]GroupTag)[vs[1].(int)]
	}).(GroupTagOutput)
}

type SamplingRuleType struct {
	// Matches attributes derived from the request.
	Attributes interface{} `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate float64 `pulumi:"fixedRate"`
	// Matches the hostname from a request URL.
	Host string `pulumi:"host"`
	// Matches the HTTP method from a request URL.
	HttpMethod string `pulumi:"httpMethod"`
	// The priority of the sampling rule.
	Priority int `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize int `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn string  `pulumi:"resourceArn"`
	RuleArn     *string `pulumi:"ruleArn"`
	RuleName    *string `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName string `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType string `pulumi:"serviceType"`
	// Matches the path from a request URL.
	UrlPath string `pulumi:"urlPath"`
	// The version of the sampling rule format (1)
	Version *int `pulumi:"version"`
}

// SamplingRuleTypeInput is an input type that accepts SamplingRuleTypeArgs and SamplingRuleTypeOutput values.
// You can construct a concrete instance of `SamplingRuleTypeInput` via:
//
//	SamplingRuleTypeArgs{...}
type SamplingRuleTypeInput interface {
	pulumi.Input

	ToSamplingRuleTypeOutput() SamplingRuleTypeOutput
	ToSamplingRuleTypeOutputWithContext(context.Context) SamplingRuleTypeOutput
}

type SamplingRuleTypeArgs struct {
	// Matches attributes derived from the request.
	Attributes pulumi.Input `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate pulumi.Float64Input `pulumi:"fixedRate"`
	// Matches the hostname from a request URL.
	Host pulumi.StringInput `pulumi:"host"`
	// Matches the HTTP method from a request URL.
	HttpMethod pulumi.StringInput `pulumi:"httpMethod"`
	// The priority of the sampling rule.
	Priority pulumi.IntInput `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize pulumi.IntInput `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn pulumi.StringInput    `pulumi:"resourceArn"`
	RuleArn     pulumi.StringPtrInput `pulumi:"ruleArn"`
	RuleName    pulumi.StringPtrInput `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
	// Matches the path from a request URL.
	UrlPath pulumi.StringInput `pulumi:"urlPath"`
	// The version of the sampling rule format (1)
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (SamplingRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleType)(nil)).Elem()
}

func (i SamplingRuleTypeArgs) ToSamplingRuleTypeOutput() SamplingRuleTypeOutput {
	return i.ToSamplingRuleTypeOutputWithContext(context.Background())
}

func (i SamplingRuleTypeArgs) ToSamplingRuleTypeOutputWithContext(ctx context.Context) SamplingRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleTypeOutput)
}

func (i SamplingRuleTypeArgs) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleType] {
	return pulumix.Output[SamplingRuleType]{
		OutputState: i.ToSamplingRuleTypeOutputWithContext(ctx).OutputState,
	}
}

func (i SamplingRuleTypeArgs) ToSamplingRuleTypePtrOutput() SamplingRuleTypePtrOutput {
	return i.ToSamplingRuleTypePtrOutputWithContext(context.Background())
}

func (i SamplingRuleTypeArgs) ToSamplingRuleTypePtrOutputWithContext(ctx context.Context) SamplingRuleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleTypeOutput).ToSamplingRuleTypePtrOutputWithContext(ctx)
}

// SamplingRuleTypePtrInput is an input type that accepts SamplingRuleTypeArgs, SamplingRuleTypePtr and SamplingRuleTypePtrOutput values.
// You can construct a concrete instance of `SamplingRuleTypePtrInput` via:
//
//	        SamplingRuleTypeArgs{...}
//
//	or:
//
//	        nil
type SamplingRuleTypePtrInput interface {
	pulumi.Input

	ToSamplingRuleTypePtrOutput() SamplingRuleTypePtrOutput
	ToSamplingRuleTypePtrOutputWithContext(context.Context) SamplingRuleTypePtrOutput
}

type samplingRuleTypePtrType SamplingRuleTypeArgs

func SamplingRuleTypePtr(v *SamplingRuleTypeArgs) SamplingRuleTypePtrInput {
	return (*samplingRuleTypePtrType)(v)
}

func (*samplingRuleTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleType)(nil)).Elem()
}

func (i *samplingRuleTypePtrType) ToSamplingRuleTypePtrOutput() SamplingRuleTypePtrOutput {
	return i.ToSamplingRuleTypePtrOutputWithContext(context.Background())
}

func (i *samplingRuleTypePtrType) ToSamplingRuleTypePtrOutputWithContext(ctx context.Context) SamplingRuleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleTypePtrOutput)
}

func (i *samplingRuleTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*SamplingRuleType] {
	return pulumix.Output[*SamplingRuleType]{
		OutputState: i.ToSamplingRuleTypePtrOutputWithContext(ctx).OutputState,
	}
}

type SamplingRuleTypeOutput struct{ *pulumi.OutputState }

func (SamplingRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleType)(nil)).Elem()
}

func (o SamplingRuleTypeOutput) ToSamplingRuleTypeOutput() SamplingRuleTypeOutput {
	return o
}

func (o SamplingRuleTypeOutput) ToSamplingRuleTypeOutputWithContext(ctx context.Context) SamplingRuleTypeOutput {
	return o
}

func (o SamplingRuleTypeOutput) ToSamplingRuleTypePtrOutput() SamplingRuleTypePtrOutput {
	return o.ToSamplingRuleTypePtrOutputWithContext(context.Background())
}

func (o SamplingRuleTypeOutput) ToSamplingRuleTypePtrOutputWithContext(ctx context.Context) SamplingRuleTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingRuleType) *SamplingRuleType {
		return &v
	}).(SamplingRuleTypePtrOutput)
}

func (o SamplingRuleTypeOutput) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleType] {
	return pulumix.Output[SamplingRuleType]{
		OutputState: o.OutputState,
	}
}

// Matches attributes derived from the request.
func (o SamplingRuleTypeOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v SamplingRuleType) interface{} { return v.Attributes }).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleTypeOutput) FixedRate() pulumi.Float64Output {
	return o.ApplyT(func(v SamplingRuleType) float64 { return v.FixedRate }).(pulumi.Float64Output)
}

// Matches the hostname from a request URL.
func (o SamplingRuleTypeOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleType) string { return v.Host }).(pulumi.StringOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleTypeOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleType) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleTypeOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v SamplingRuleType) int { return v.Priority }).(pulumi.IntOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleTypeOutput) ReservoirSize() pulumi.IntOutput {
	return o.ApplyT(func(v SamplingRuleType) int { return v.ReservoirSize }).(pulumi.IntOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleTypeOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleType) string { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o SamplingRuleTypeOutput) RuleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleType) *string { return v.RuleArn }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleTypeOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleType) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleTypeOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleType) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleTypeOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleType) string { return v.ServiceType }).(pulumi.StringOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleTypeOutput) UrlPath() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleType) string { return v.UrlPath }).(pulumi.StringOutput)
}

// The version of the sampling rule format (1)
func (o SamplingRuleTypeOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleType) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type SamplingRuleTypePtrOutput struct{ *pulumi.OutputState }

func (SamplingRuleTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleType)(nil)).Elem()
}

func (o SamplingRuleTypePtrOutput) ToSamplingRuleTypePtrOutput() SamplingRuleTypePtrOutput {
	return o
}

func (o SamplingRuleTypePtrOutput) ToSamplingRuleTypePtrOutputWithContext(ctx context.Context) SamplingRuleTypePtrOutput {
	return o
}

func (o SamplingRuleTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SamplingRuleType] {
	return pulumix.Output[*SamplingRuleType]{
		OutputState: o.OutputState,
	}
}

func (o SamplingRuleTypePtrOutput) Elem() SamplingRuleTypeOutput {
	return o.ApplyT(func(v *SamplingRuleType) SamplingRuleType {
		if v != nil {
			return *v
		}
		var ret SamplingRuleType
		return ret
	}).(SamplingRuleTypeOutput)
}

// Matches attributes derived from the request.
func (o SamplingRuleTypePtrOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v *SamplingRuleType) interface{} {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleTypePtrOutput) FixedRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *float64 {
		if v == nil {
			return nil
		}
		return &v.FixedRate
	}).(pulumi.Float64PtrOutput)
}

// Matches the hostname from a request URL.
func (o SamplingRuleTypePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleTypePtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleTypePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *int {
		if v == nil {
			return nil
		}
		return &v.Priority
	}).(pulumi.IntPtrOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleTypePtrOutput) ReservoirSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *int {
		if v == nil {
			return nil
		}
		return &v.ReservoirSize
	}).(pulumi.IntPtrOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleTypePtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleTypePtrOutput) RuleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return v.RuleArn
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleTypePtrOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return v.RuleName
	}).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleTypePtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleTypePtrOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceType
	}).(pulumi.StringPtrOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleTypePtrOutput) UrlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *string {
		if v == nil {
			return nil
		}
		return &v.UrlPath
	}).(pulumi.StringPtrOutput)
}

// The version of the sampling rule format (1)
func (o SamplingRuleTypePtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleType) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

type SamplingRuleRecord struct {
	// When the rule was created, in Unix time seconds.
	CreatedAt *string `pulumi:"createdAt"`
	// When the rule was modified, in Unix time seconds.
	ModifiedAt   *string           `pulumi:"modifiedAt"`
	SamplingRule *SamplingRuleType `pulumi:"samplingRule"`
}

// SamplingRuleRecordInput is an input type that accepts SamplingRuleRecordArgs and SamplingRuleRecordOutput values.
// You can construct a concrete instance of `SamplingRuleRecordInput` via:
//
//	SamplingRuleRecordArgs{...}
type SamplingRuleRecordInput interface {
	pulumi.Input

	ToSamplingRuleRecordOutput() SamplingRuleRecordOutput
	ToSamplingRuleRecordOutputWithContext(context.Context) SamplingRuleRecordOutput
}

type SamplingRuleRecordArgs struct {
	// When the rule was created, in Unix time seconds.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// When the rule was modified, in Unix time seconds.
	ModifiedAt   pulumi.StringPtrInput    `pulumi:"modifiedAt"`
	SamplingRule SamplingRuleTypePtrInput `pulumi:"samplingRule"`
}

func (SamplingRuleRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleRecord)(nil)).Elem()
}

func (i SamplingRuleRecordArgs) ToSamplingRuleRecordOutput() SamplingRuleRecordOutput {
	return i.ToSamplingRuleRecordOutputWithContext(context.Background())
}

func (i SamplingRuleRecordArgs) ToSamplingRuleRecordOutputWithContext(ctx context.Context) SamplingRuleRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleRecordOutput)
}

func (i SamplingRuleRecordArgs) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleRecord] {
	return pulumix.Output[SamplingRuleRecord]{
		OutputState: i.ToSamplingRuleRecordOutputWithContext(ctx).OutputState,
	}
}

func (i SamplingRuleRecordArgs) ToSamplingRuleRecordPtrOutput() SamplingRuleRecordPtrOutput {
	return i.ToSamplingRuleRecordPtrOutputWithContext(context.Background())
}

func (i SamplingRuleRecordArgs) ToSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleRecordOutput).ToSamplingRuleRecordPtrOutputWithContext(ctx)
}

// SamplingRuleRecordPtrInput is an input type that accepts SamplingRuleRecordArgs, SamplingRuleRecordPtr and SamplingRuleRecordPtrOutput values.
// You can construct a concrete instance of `SamplingRuleRecordPtrInput` via:
//
//	        SamplingRuleRecordArgs{...}
//
//	or:
//
//	        nil
type SamplingRuleRecordPtrInput interface {
	pulumi.Input

	ToSamplingRuleRecordPtrOutput() SamplingRuleRecordPtrOutput
	ToSamplingRuleRecordPtrOutputWithContext(context.Context) SamplingRuleRecordPtrOutput
}

type samplingRuleRecordPtrType SamplingRuleRecordArgs

func SamplingRuleRecordPtr(v *SamplingRuleRecordArgs) SamplingRuleRecordPtrInput {
	return (*samplingRuleRecordPtrType)(v)
}

func (*samplingRuleRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleRecord)(nil)).Elem()
}

func (i *samplingRuleRecordPtrType) ToSamplingRuleRecordPtrOutput() SamplingRuleRecordPtrOutput {
	return i.ToSamplingRuleRecordPtrOutputWithContext(context.Background())
}

func (i *samplingRuleRecordPtrType) ToSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleRecordPtrOutput)
}

func (i *samplingRuleRecordPtrType) ToOutput(ctx context.Context) pulumix.Output[*SamplingRuleRecord] {
	return pulumix.Output[*SamplingRuleRecord]{
		OutputState: i.ToSamplingRuleRecordPtrOutputWithContext(ctx).OutputState,
	}
}

type SamplingRuleRecordOutput struct{ *pulumi.OutputState }

func (SamplingRuleRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleRecord)(nil)).Elem()
}

func (o SamplingRuleRecordOutput) ToSamplingRuleRecordOutput() SamplingRuleRecordOutput {
	return o
}

func (o SamplingRuleRecordOutput) ToSamplingRuleRecordOutputWithContext(ctx context.Context) SamplingRuleRecordOutput {
	return o
}

func (o SamplingRuleRecordOutput) ToSamplingRuleRecordPtrOutput() SamplingRuleRecordPtrOutput {
	return o.ToSamplingRuleRecordPtrOutputWithContext(context.Background())
}

func (o SamplingRuleRecordOutput) ToSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingRuleRecord) *SamplingRuleRecord {
		return &v
	}).(SamplingRuleRecordPtrOutput)
}

func (o SamplingRuleRecordOutput) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleRecord] {
	return pulumix.Output[SamplingRuleRecord]{
		OutputState: o.OutputState,
	}
}

// When the rule was created, in Unix time seconds.
func (o SamplingRuleRecordOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleRecord) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// When the rule was modified, in Unix time seconds.
func (o SamplingRuleRecordOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleRecord) *string { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleRecordOutput) SamplingRule() SamplingRuleTypePtrOutput {
	return o.ApplyT(func(v SamplingRuleRecord) *SamplingRuleType { return v.SamplingRule }).(SamplingRuleTypePtrOutput)
}

type SamplingRuleRecordPtrOutput struct{ *pulumi.OutputState }

func (SamplingRuleRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleRecord)(nil)).Elem()
}

func (o SamplingRuleRecordPtrOutput) ToSamplingRuleRecordPtrOutput() SamplingRuleRecordPtrOutput {
	return o
}

func (o SamplingRuleRecordPtrOutput) ToSamplingRuleRecordPtrOutputWithContext(ctx context.Context) SamplingRuleRecordPtrOutput {
	return o
}

func (o SamplingRuleRecordPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SamplingRuleRecord] {
	return pulumix.Output[*SamplingRuleRecord]{
		OutputState: o.OutputState,
	}
}

func (o SamplingRuleRecordPtrOutput) Elem() SamplingRuleRecordOutput {
	return o.ApplyT(func(v *SamplingRuleRecord) SamplingRuleRecord {
		if v != nil {
			return *v
		}
		var ret SamplingRuleRecord
		return ret
	}).(SamplingRuleRecordOutput)
}

// When the rule was created, in Unix time seconds.
func (o SamplingRuleRecordPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleRecord) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// When the rule was modified, in Unix time seconds.
func (o SamplingRuleRecordPtrOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleRecord) *string {
		if v == nil {
			return nil
		}
		return v.ModifiedAt
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleRecordPtrOutput) SamplingRule() SamplingRuleTypePtrOutput {
	return o.ApplyT(func(v *SamplingRuleRecord) *SamplingRuleType {
		if v == nil {
			return nil
		}
		return v.SamplingRule
	}).(SamplingRuleTypePtrOutput)
}

type SamplingRuleTag struct {
	// The key name of the tag.
	Key string `pulumi:"key"`
	// The value for the tag.
	Value string `pulumi:"value"`
}

// SamplingRuleTagInput is an input type that accepts SamplingRuleTagArgs and SamplingRuleTagOutput values.
// You can construct a concrete instance of `SamplingRuleTagInput` via:
//
//	SamplingRuleTagArgs{...}
type SamplingRuleTagInput interface {
	pulumi.Input

	ToSamplingRuleTagOutput() SamplingRuleTagOutput
	ToSamplingRuleTagOutputWithContext(context.Context) SamplingRuleTagOutput
}

type SamplingRuleTagArgs struct {
	// The key name of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SamplingRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleTag)(nil)).Elem()
}

func (i SamplingRuleTagArgs) ToSamplingRuleTagOutput() SamplingRuleTagOutput {
	return i.ToSamplingRuleTagOutputWithContext(context.Background())
}

func (i SamplingRuleTagArgs) ToSamplingRuleTagOutputWithContext(ctx context.Context) SamplingRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleTagOutput)
}

func (i SamplingRuleTagArgs) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleTag] {
	return pulumix.Output[SamplingRuleTag]{
		OutputState: i.ToSamplingRuleTagOutputWithContext(ctx).OutputState,
	}
}

// SamplingRuleTagArrayInput is an input type that accepts SamplingRuleTagArray and SamplingRuleTagArrayOutput values.
// You can construct a concrete instance of `SamplingRuleTagArrayInput` via:
//
//	SamplingRuleTagArray{ SamplingRuleTagArgs{...} }
type SamplingRuleTagArrayInput interface {
	pulumi.Input

	ToSamplingRuleTagArrayOutput() SamplingRuleTagArrayOutput
	ToSamplingRuleTagArrayOutputWithContext(context.Context) SamplingRuleTagArrayOutput
}

type SamplingRuleTagArray []SamplingRuleTagInput

func (SamplingRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamplingRuleTag)(nil)).Elem()
}

func (i SamplingRuleTagArray) ToSamplingRuleTagArrayOutput() SamplingRuleTagArrayOutput {
	return i.ToSamplingRuleTagArrayOutputWithContext(context.Background())
}

func (i SamplingRuleTagArray) ToSamplingRuleTagArrayOutputWithContext(ctx context.Context) SamplingRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleTagArrayOutput)
}

func (i SamplingRuleTagArray) ToOutput(ctx context.Context) pulumix.Output[[]SamplingRuleTag] {
	return pulumix.Output[[]SamplingRuleTag]{
		OutputState: i.ToSamplingRuleTagArrayOutputWithContext(ctx).OutputState,
	}
}

type SamplingRuleTagOutput struct{ *pulumi.OutputState }

func (SamplingRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleTag)(nil)).Elem()
}

func (o SamplingRuleTagOutput) ToSamplingRuleTagOutput() SamplingRuleTagOutput {
	return o
}

func (o SamplingRuleTagOutput) ToSamplingRuleTagOutputWithContext(ctx context.Context) SamplingRuleTagOutput {
	return o
}

func (o SamplingRuleTagOutput) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleTag] {
	return pulumix.Output[SamplingRuleTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag.
func (o SamplingRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag.
func (o SamplingRuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SamplingRuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type SamplingRuleTagArrayOutput struct{ *pulumi.OutputState }

func (SamplingRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamplingRuleTag)(nil)).Elem()
}

func (o SamplingRuleTagArrayOutput) ToSamplingRuleTagArrayOutput() SamplingRuleTagArrayOutput {
	return o
}

func (o SamplingRuleTagArrayOutput) ToSamplingRuleTagArrayOutputWithContext(ctx context.Context) SamplingRuleTagArrayOutput {
	return o
}

func (o SamplingRuleTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SamplingRuleTag] {
	return pulumix.Output[[]SamplingRuleTag]{
		OutputState: o.OutputState,
	}
}

func (o SamplingRuleTagArrayOutput) Index(i pulumi.IntInput) SamplingRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamplingRuleTag {
		return vs[0].([]SamplingRuleTag)[vs[1].(int)]
	}).(SamplingRuleTagOutput)
}

type SamplingRuleUpdate struct {
	// Matches attributes derived from the request.
	Attributes interface{} `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate *float64 `pulumi:"fixedRate"`
	// Matches the hostname from a request URL.
	Host *string `pulumi:"host"`
	// Matches the HTTP method from a request URL.
	HttpMethod *string `pulumi:"httpMethod"`
	// The priority of the sampling rule.
	Priority *int `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize *int `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn *string `pulumi:"resourceArn"`
	RuleArn     *string `pulumi:"ruleArn"`
	RuleName    *string `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName *string `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType *string `pulumi:"serviceType"`
	// Matches the path from a request URL.
	UrlPath *string `pulumi:"urlPath"`
}

// SamplingRuleUpdateInput is an input type that accepts SamplingRuleUpdateArgs and SamplingRuleUpdateOutput values.
// You can construct a concrete instance of `SamplingRuleUpdateInput` via:
//
//	SamplingRuleUpdateArgs{...}
type SamplingRuleUpdateInput interface {
	pulumi.Input

	ToSamplingRuleUpdateOutput() SamplingRuleUpdateOutput
	ToSamplingRuleUpdateOutputWithContext(context.Context) SamplingRuleUpdateOutput
}

type SamplingRuleUpdateArgs struct {
	// Matches attributes derived from the request.
	Attributes pulumi.Input `pulumi:"attributes"`
	// The percentage of matching requests to instrument, after the reservoir is exhausted.
	FixedRate pulumi.Float64PtrInput `pulumi:"fixedRate"`
	// Matches the hostname from a request URL.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Matches the HTTP method from a request URL.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// The priority of the sampling rule.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
	ReservoirSize pulumi.IntPtrInput `pulumi:"reservoirSize"`
	// Matches the ARN of the AWS resource on which the service runs.
	ResourceArn pulumi.StringPtrInput `pulumi:"resourceArn"`
	RuleArn     pulumi.StringPtrInput `pulumi:"ruleArn"`
	RuleName    pulumi.StringPtrInput `pulumi:"ruleName"`
	// Matches the name that the service uses to identify itself in segments.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Matches the origin that the service uses to identify its type in segments.
	ServiceType pulumi.StringPtrInput `pulumi:"serviceType"`
	// Matches the path from a request URL.
	UrlPath pulumi.StringPtrInput `pulumi:"urlPath"`
}

func (SamplingRuleUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleUpdate)(nil)).Elem()
}

func (i SamplingRuleUpdateArgs) ToSamplingRuleUpdateOutput() SamplingRuleUpdateOutput {
	return i.ToSamplingRuleUpdateOutputWithContext(context.Background())
}

func (i SamplingRuleUpdateArgs) ToSamplingRuleUpdateOutputWithContext(ctx context.Context) SamplingRuleUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleUpdateOutput)
}

func (i SamplingRuleUpdateArgs) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleUpdate] {
	return pulumix.Output[SamplingRuleUpdate]{
		OutputState: i.ToSamplingRuleUpdateOutputWithContext(ctx).OutputState,
	}
}

func (i SamplingRuleUpdateArgs) ToSamplingRuleUpdatePtrOutput() SamplingRuleUpdatePtrOutput {
	return i.ToSamplingRuleUpdatePtrOutputWithContext(context.Background())
}

func (i SamplingRuleUpdateArgs) ToSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleUpdateOutput).ToSamplingRuleUpdatePtrOutputWithContext(ctx)
}

// SamplingRuleUpdatePtrInput is an input type that accepts SamplingRuleUpdateArgs, SamplingRuleUpdatePtr and SamplingRuleUpdatePtrOutput values.
// You can construct a concrete instance of `SamplingRuleUpdatePtrInput` via:
//
//	        SamplingRuleUpdateArgs{...}
//
//	or:
//
//	        nil
type SamplingRuleUpdatePtrInput interface {
	pulumi.Input

	ToSamplingRuleUpdatePtrOutput() SamplingRuleUpdatePtrOutput
	ToSamplingRuleUpdatePtrOutputWithContext(context.Context) SamplingRuleUpdatePtrOutput
}

type samplingRuleUpdatePtrType SamplingRuleUpdateArgs

func SamplingRuleUpdatePtr(v *SamplingRuleUpdateArgs) SamplingRuleUpdatePtrInput {
	return (*samplingRuleUpdatePtrType)(v)
}

func (*samplingRuleUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleUpdate)(nil)).Elem()
}

func (i *samplingRuleUpdatePtrType) ToSamplingRuleUpdatePtrOutput() SamplingRuleUpdatePtrOutput {
	return i.ToSamplingRuleUpdatePtrOutputWithContext(context.Background())
}

func (i *samplingRuleUpdatePtrType) ToSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamplingRuleUpdatePtrOutput)
}

func (i *samplingRuleUpdatePtrType) ToOutput(ctx context.Context) pulumix.Output[*SamplingRuleUpdate] {
	return pulumix.Output[*SamplingRuleUpdate]{
		OutputState: i.ToSamplingRuleUpdatePtrOutputWithContext(ctx).OutputState,
	}
}

type SamplingRuleUpdateOutput struct{ *pulumi.OutputState }

func (SamplingRuleUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingRuleUpdate)(nil)).Elem()
}

func (o SamplingRuleUpdateOutput) ToSamplingRuleUpdateOutput() SamplingRuleUpdateOutput {
	return o
}

func (o SamplingRuleUpdateOutput) ToSamplingRuleUpdateOutputWithContext(ctx context.Context) SamplingRuleUpdateOutput {
	return o
}

func (o SamplingRuleUpdateOutput) ToSamplingRuleUpdatePtrOutput() SamplingRuleUpdatePtrOutput {
	return o.ToSamplingRuleUpdatePtrOutputWithContext(context.Background())
}

func (o SamplingRuleUpdateOutput) ToSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingRuleUpdate) *SamplingRuleUpdate {
		return &v
	}).(SamplingRuleUpdatePtrOutput)
}

func (o SamplingRuleUpdateOutput) ToOutput(ctx context.Context) pulumix.Output[SamplingRuleUpdate] {
	return pulumix.Output[SamplingRuleUpdate]{
		OutputState: o.OutputState,
	}
}

// Matches attributes derived from the request.
func (o SamplingRuleUpdateOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) interface{} { return v.Attributes }).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleUpdateOutput) FixedRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *float64 { return v.FixedRate }).(pulumi.Float64PtrOutput)
}

// Matches the hostname from a request URL.
func (o SamplingRuleUpdateOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleUpdateOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleUpdateOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleUpdateOutput) ReservoirSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *int { return v.ReservoirSize }).(pulumi.IntPtrOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleUpdateOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.ResourceArn }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleUpdateOutput) RuleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.RuleArn }).(pulumi.StringPtrOutput)
}

func (o SamplingRuleUpdateOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleUpdateOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleUpdateOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleUpdateOutput) UrlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamplingRuleUpdate) *string { return v.UrlPath }).(pulumi.StringPtrOutput)
}

type SamplingRuleUpdatePtrOutput struct{ *pulumi.OutputState }

func (SamplingRuleUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingRuleUpdate)(nil)).Elem()
}

func (o SamplingRuleUpdatePtrOutput) ToSamplingRuleUpdatePtrOutput() SamplingRuleUpdatePtrOutput {
	return o
}

func (o SamplingRuleUpdatePtrOutput) ToSamplingRuleUpdatePtrOutputWithContext(ctx context.Context) SamplingRuleUpdatePtrOutput {
	return o
}

func (o SamplingRuleUpdatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SamplingRuleUpdate] {
	return pulumix.Output[*SamplingRuleUpdate]{
		OutputState: o.OutputState,
	}
}

func (o SamplingRuleUpdatePtrOutput) Elem() SamplingRuleUpdateOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) SamplingRuleUpdate {
		if v != nil {
			return *v
		}
		var ret SamplingRuleUpdate
		return ret
	}).(SamplingRuleUpdateOutput)
}

// Matches attributes derived from the request.
func (o SamplingRuleUpdatePtrOutput) Attributes() pulumi.AnyOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) interface{} {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.AnyOutput)
}

// The percentage of matching requests to instrument, after the reservoir is exhausted.
func (o SamplingRuleUpdatePtrOutput) FixedRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *float64 {
		if v == nil {
			return nil
		}
		return v.FixedRate
	}).(pulumi.Float64PtrOutput)
}

// Matches the hostname from a request URL.
func (o SamplingRuleUpdatePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Matches the HTTP method from a request URL.
func (o SamplingRuleUpdatePtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// The priority of the sampling rule.
func (o SamplingRuleUpdatePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
func (o SamplingRuleUpdatePtrOutput) ReservoirSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *int {
		if v == nil {
			return nil
		}
		return v.ReservoirSize
	}).(pulumi.IntPtrOutput)
}

// Matches the ARN of the AWS resource on which the service runs.
func (o SamplingRuleUpdatePtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleUpdatePtrOutput) RuleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.RuleArn
	}).(pulumi.StringPtrOutput)
}

func (o SamplingRuleUpdatePtrOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.RuleName
	}).(pulumi.StringPtrOutput)
}

// Matches the name that the service uses to identify itself in segments.
func (o SamplingRuleUpdatePtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// Matches the origin that the service uses to identify its type in segments.
func (o SamplingRuleUpdatePtrOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ServiceType
	}).(pulumi.StringPtrOutput)
}

// Matches the path from a request URL.
func (o SamplingRuleUpdatePtrOutput) UrlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamplingRuleUpdate) *string {
		if v == nil {
			return nil
		}
		return v.UrlPath
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInsightsConfigurationInput)(nil)).Elem(), GroupInsightsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInsightsConfigurationPtrInput)(nil)).Elem(), GroupInsightsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupTagInput)(nil)).Elem(), GroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupTagArrayInput)(nil)).Elem(), GroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleTypeInput)(nil)).Elem(), SamplingRuleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleTypePtrInput)(nil)).Elem(), SamplingRuleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleRecordInput)(nil)).Elem(), SamplingRuleRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleRecordPtrInput)(nil)).Elem(), SamplingRuleRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleTagInput)(nil)).Elem(), SamplingRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleTagArrayInput)(nil)).Elem(), SamplingRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleUpdateInput)(nil)).Elem(), SamplingRuleUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamplingRuleUpdatePtrInput)(nil)).Elem(), SamplingRuleUpdateArgs{})
	pulumi.RegisterOutputType(GroupInsightsConfigurationOutput{})
	pulumi.RegisterOutputType(GroupInsightsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GroupTagOutput{})
	pulumi.RegisterOutputType(GroupTagArrayOutput{})
	pulumi.RegisterOutputType(SamplingRuleTypeOutput{})
	pulumi.RegisterOutputType(SamplingRuleTypePtrOutput{})
	pulumi.RegisterOutputType(SamplingRuleRecordOutput{})
	pulumi.RegisterOutputType(SamplingRuleRecordPtrOutput{})
	pulumi.RegisterOutputType(SamplingRuleTagOutput{})
	pulumi.RegisterOutputType(SamplingRuleTagArrayOutput{})
	pulumi.RegisterOutputType(SamplingRuleUpdateOutput{})
	pulumi.RegisterOutputType(SamplingRuleUpdatePtrOutput{})
}
