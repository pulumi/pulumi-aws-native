// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Kendra DataSource
func LookupDataSource(ctx *pulumi.Context, args *LookupDataSourceArgs, opts ...pulumi.InvokeOption) (*LookupDataSourceResult, error) {
	var rv LookupDataSourceResult
	err := ctx.Invoke("aws-native:kendra:getDataSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDataSourceArgs struct {
	Id      string `pulumi:"id"`
	IndexId string `pulumi:"indexId"`
}

type LookupDataSourceResult struct {
	Arn                     *string                  `pulumi:"arn"`
	DataSourceConfiguration *DataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	Description             *string                  `pulumi:"description"`
	Id                      *string                  `pulumi:"id"`
	IndexId                 *string                  `pulumi:"indexId"`
	Name                    *string                  `pulumi:"name"`
	RoleArn                 *string                  `pulumi:"roleArn"`
	Schedule                *string                  `pulumi:"schedule"`
	// Tags for labeling the data source
	Tags []DataSourceTag `pulumi:"tags"`
}

func LookupDataSourceOutput(ctx *pulumi.Context, args LookupDataSourceOutputArgs, opts ...pulumi.InvokeOption) LookupDataSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataSourceResult, error) {
			args := v.(LookupDataSourceArgs)
			r, err := LookupDataSource(ctx, &args, opts...)
			return *r, err
		}).(LookupDataSourceResultOutput)
}

type LookupDataSourceOutputArgs struct {
	Id      pulumi.StringInput `pulumi:"id"`
	IndexId pulumi.StringInput `pulumi:"indexId"`
}

func (LookupDataSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataSourceArgs)(nil)).Elem()
}

type LookupDataSourceResultOutput struct{ *pulumi.OutputState }

func (LookupDataSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataSourceResult)(nil)).Elem()
}

func (o LookupDataSourceResultOutput) ToLookupDataSourceResultOutput() LookupDataSourceResultOutput {
	return o
}

func (o LookupDataSourceResultOutput) ToLookupDataSourceResultOutputWithContext(ctx context.Context) LookupDataSourceResultOutput {
	return o
}

func (o LookupDataSourceResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupDataSourceResultOutput) DataSourceConfiguration() DataSourceConfigurationPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *DataSourceConfiguration { return v.DataSourceConfiguration }).(DataSourceConfigurationPtrOutput)
}

func (o LookupDataSourceResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupDataSourceResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupDataSourceResultOutput) IndexId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.IndexId }).(pulumi.StringPtrOutput)
}

func (o LookupDataSourceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupDataSourceResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o LookupDataSourceResultOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Tags for labeling the data source
func (o LookupDataSourceResultOutput) Tags() DataSourceTagArrayOutput {
	return o.ApplyT(func(v LookupDataSourceResult) []DataSourceTag { return v.Tags }).(DataSourceTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataSourceResultOutput{})
}
