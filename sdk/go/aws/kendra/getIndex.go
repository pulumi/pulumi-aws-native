// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kendra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Kendra index
func LookupIndex(ctx *pulumi.Context, args *LookupIndexArgs, opts ...pulumi.InvokeOption) (*LookupIndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIndexResult
	err := ctx.Invoke("aws-native:kendra:getIndex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIndexArgs struct {
	// The identifier for the index. For example: `f4aeaa10-8056-4b2c-a343-522ca0f41234` .
	Id string `pulumi:"id"`
}

type LookupIndexResult struct {
	// The Amazon Resource Name (ARN) of the index. For example: `arn:aws:kendra:us-west-2:111122223333:index/0123456789abcdef` .
	Arn *string `pulumi:"arn"`
	// Capacity units
	CapacityUnits *IndexCapacityUnitsConfiguration `pulumi:"capacityUnits"`
	// A description for the index
	Description *string `pulumi:"description"`
	// Document metadata configurations
	DocumentMetadataConfigurations []IndexDocumentMetadataConfiguration `pulumi:"documentMetadataConfigurations"`
	// The identifier for the index. For example: `f4aeaa10-8056-4b2c-a343-522ca0f41234` .
	Id *string `pulumi:"id"`
	// The name of the index.
	Name *string `pulumi:"name"`
	// An IAM role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role used when you use the [BatchPutDocument](https://docs.aws.amazon.com/kendra/latest/dg/BatchPutDocument.html) operation to index documents from an Amazon S3 bucket.
	RoleArn *string `pulumi:"roleArn"`
	// Tags for labeling the index
	Tags []aws.Tag `pulumi:"tags"`
	// The user context policy.
	//
	// ATTRIBUTE_FILTER
	//
	// - All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of `_user_id` and `_group_ids` or you can provide user and group information in `UserContext` .
	//
	// USER_TOKEN
	//
	// - Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable.
	UserContextPolicy *IndexUserContextPolicy `pulumi:"userContextPolicy"`
	// Defines the type of user token used for the index.
	UserTokenConfigurations []IndexUserTokenConfiguration `pulumi:"userTokenConfigurations"`
}

func LookupIndexOutput(ctx *pulumi.Context, args LookupIndexOutputArgs, opts ...pulumi.InvokeOption) LookupIndexResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIndexResultOutput, error) {
			args := v.(LookupIndexArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:kendra:getIndex", args, LookupIndexResultOutput{}, options).(LookupIndexResultOutput), nil
		}).(LookupIndexResultOutput)
}

type LookupIndexOutputArgs struct {
	// The identifier for the index. For example: `f4aeaa10-8056-4b2c-a343-522ca0f41234` .
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIndexOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexArgs)(nil)).Elem()
}

type LookupIndexResultOutput struct{ *pulumi.OutputState }

func (LookupIndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexResult)(nil)).Elem()
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutput() LookupIndexResultOutput {
	return o
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutputWithContext(ctx context.Context) LookupIndexResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the index. For example: `arn:aws:kendra:us-west-2:111122223333:index/0123456789abcdef` .
func (o LookupIndexResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Capacity units
func (o LookupIndexResultOutput) CapacityUnits() IndexCapacityUnitsConfigurationPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *IndexCapacityUnitsConfiguration { return v.CapacityUnits }).(IndexCapacityUnitsConfigurationPtrOutput)
}

// A description for the index
func (o LookupIndexResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Document metadata configurations
func (o LookupIndexResultOutput) DocumentMetadataConfigurations() IndexDocumentMetadataConfigurationArrayOutput {
	return o.ApplyT(func(v LookupIndexResult) []IndexDocumentMetadataConfiguration {
		return v.DocumentMetadataConfigurations
	}).(IndexDocumentMetadataConfigurationArrayOutput)
}

// The identifier for the index. For example: `f4aeaa10-8056-4b2c-a343-522ca0f41234` .
func (o LookupIndexResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the index.
func (o LookupIndexResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An IAM role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role used when you use the [BatchPutDocument](https://docs.aws.amazon.com/kendra/latest/dg/BatchPutDocument.html) operation to index documents from an Amazon S3 bucket.
func (o LookupIndexResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Tags for labeling the index
func (o LookupIndexResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupIndexResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The user context policy.
//
// ATTRIBUTE_FILTER
//
// - All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of `_user_id` and `_group_ids` or you can provide user and group information in `UserContext` .
//
// USER_TOKEN
//
// - Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable.
func (o LookupIndexResultOutput) UserContextPolicy() IndexUserContextPolicyPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *IndexUserContextPolicy { return v.UserContextPolicy }).(IndexUserContextPolicyPtrOutput)
}

// Defines the type of user token used for the index.
func (o LookupIndexResultOutput) UserTokenConfigurations() IndexUserTokenConfigurationArrayOutput {
	return o.ApplyT(func(v LookupIndexResult) []IndexUserTokenConfiguration { return v.UserTokenConfigurations }).(IndexUserTokenConfigurationArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIndexResultOutput{})
}
