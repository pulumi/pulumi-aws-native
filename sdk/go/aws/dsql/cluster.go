// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dsql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::DSQL::Cluster
type Cluster struct {
	pulumi.CustomResourceState

	// The time of when the cluster was created in ISO-8601 format.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Whether deletion protection is enabled in this cluster.
	DeletionProtectionEnabled pulumi.BoolPtrOutput `pulumi:"deletionProtectionEnabled"`
	// The encryption configuration details for the cluster.
	EncryptionDetails EncryptionDetailsPropertiesOutput `pulumi:"encryptionDetails"`
	// The ID of the created cluster.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The KMS key that encrypts data on the cluster.
	KmsEncryptionKey pulumi.StringPtrOutput `pulumi:"kmsEncryptionKey"`
	// The Multi-region properties associated to this cluster.
	MultiRegionProperties MultiRegionPropertiesPropertiesPtrOutput `pulumi:"multiRegionProperties"`
	// The Amazon Resource Name (ARN) for the cluster.
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`
	// The status of the cluster.
	Status pulumi.StringOutput `pulumi:"status"`
	// A map of key and value pairs this cluster is tagged with.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The VPC endpoint service name.
	VpcEndpointServiceName pulumi.StringOutput `pulumi:"vpcEndpointServiceName"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("aws-native:dsql:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:dsql:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Whether deletion protection is enabled in this cluster.
	DeletionProtectionEnabled *bool `pulumi:"deletionProtectionEnabled"`
	// The KMS key that encrypts data on the cluster.
	KmsEncryptionKey *string `pulumi:"kmsEncryptionKey"`
	// The Multi-region properties associated to this cluster.
	MultiRegionProperties *MultiRegionPropertiesProperties `pulumi:"multiRegionProperties"`
	// A map of key and value pairs this cluster is tagged with.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Whether deletion protection is enabled in this cluster.
	DeletionProtectionEnabled pulumi.BoolPtrInput
	// The KMS key that encrypts data on the cluster.
	KmsEncryptionKey pulumi.StringPtrInput
	// The Multi-region properties associated to this cluster.
	MultiRegionProperties MultiRegionPropertiesPropertiesPtrInput
	// A map of key and value pairs this cluster is tagged with.
	Tags aws.TagArrayInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The time of when the cluster was created in ISO-8601 format.
func (o ClusterOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Whether deletion protection is enabled in this cluster.
func (o ClusterOutput) DeletionProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.DeletionProtectionEnabled }).(pulumi.BoolPtrOutput)
}

// The encryption configuration details for the cluster.
func (o ClusterOutput) EncryptionDetails() EncryptionDetailsPropertiesOutput {
	return o.ApplyT(func(v *Cluster) EncryptionDetailsPropertiesOutput { return v.EncryptionDetails }).(EncryptionDetailsPropertiesOutput)
}

// The ID of the created cluster.
func (o ClusterOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The KMS key that encrypts data on the cluster.
func (o ClusterOutput) KmsEncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KmsEncryptionKey }).(pulumi.StringPtrOutput)
}

// The Multi-region properties associated to this cluster.
func (o ClusterOutput) MultiRegionProperties() MultiRegionPropertiesPropertiesPtrOutput {
	return o.ApplyT(func(v *Cluster) MultiRegionPropertiesPropertiesPtrOutput { return v.MultiRegionProperties }).(MultiRegionPropertiesPropertiesPtrOutput)
}

// The Amazon Resource Name (ARN) for the cluster.
func (o ClusterOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

// The status of the cluster.
func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A map of key and value pairs this cluster is tagged with.
func (o ClusterOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Cluster) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The VPC endpoint service name.
func (o ClusterOutput) VpcEndpointServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcEndpointServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
