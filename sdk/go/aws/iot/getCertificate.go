// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the AWS::IoT::Certificate resource to declare an AWS IoT X.509 certificate.
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("aws-native:iot:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCertificateArgs struct {
	// The certificate ID.
	Id string `pulumi:"id"`
}

type LookupCertificateResult struct {
	// Returns the Amazon Resource Name (ARN) for the certificate. For example:
	//
	// `{ "Fn::GetAtt": ["MyCertificate", "Arn"] }`
	//
	// A value similar to the following is returned:
	//
	// `arn:aws:iot:ap-southeast-2:123456789012:cert/a1234567b89c012d3e4fg567hij8k9l01mno1p23q45678901rs234567890t1u2`
	Arn *string `pulumi:"arn"`
	// The certificate ID.
	Id *string `pulumi:"id"`
	// The status of the certificate.
	//
	// Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and PENDING_ACTIVATION.
	//
	// The status value REGISTER_INACTIVE is deprecated and should not be used.
	Status *CertificateStatus `pulumi:"status"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateResultOutput, error) {
			args := v.(LookupCertificateArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCertificateResult
			secret, err := ctx.InvokePackageRaw("aws-native:iot:getCertificate", args, &rv, "", opts...)
			if err != nil {
				return LookupCertificateResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCertificateResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCertificateResultOutput), nil
			}
			return output, nil
		}).(LookupCertificateResultOutput)
}

type LookupCertificateOutputArgs struct {
	// The certificate ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// Returns the Amazon Resource Name (ARN) for the certificate. For example:
//
// `{ "Fn::GetAtt": ["MyCertificate", "Arn"] }`
//
// A value similar to the following is returned:
//
// `arn:aws:iot:ap-southeast-2:123456789012:cert/a1234567b89c012d3e4fg567hij8k9l01mno1p23q45678901rs234567890t1u2`
func (o LookupCertificateResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The certificate ID.
func (o LookupCertificateResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The status of the certificate.
//
// Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and PENDING_ACTIVATION.
//
// The status value REGISTER_INACTIVE is deprecated and should not be used.
func (o LookupCertificateResultOutput) Status() CertificateStatusPtrOutput {
	return o.ApplyT(func(v LookupCertificateResult) *CertificateStatus { return v.Status }).(CertificateStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
