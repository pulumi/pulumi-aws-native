// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource-specific logging allows you to specify a logging level for a specific thing group.
type ResourceSpecificLogging struct {
	pulumi.CustomResourceState

	// The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
	LogLevel ResourceSpecificLoggingLogLevelOutput `pulumi:"logLevel"`
	// Unique Id for a Target (TargetType:TargetName), this will be internally built to serve as primary identifier for a log target.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// The target name.
	TargetName pulumi.StringOutput `pulumi:"targetName"`
	// The target type. Value must be THING_GROUP.
	TargetType ResourceSpecificLoggingTargetTypeOutput `pulumi:"targetType"`
}

// NewResourceSpecificLogging registers a new resource with the given unique name, arguments, and options.
func NewResourceSpecificLogging(ctx *pulumi.Context,
	name string, args *ResourceSpecificLoggingArgs, opts ...pulumi.ResourceOption) (*ResourceSpecificLogging, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogLevel == nil {
		return nil, errors.New("invalid value for required argument 'LogLevel'")
	}
	if args.TargetName == nil {
		return nil, errors.New("invalid value for required argument 'TargetName'")
	}
	if args.TargetType == nil {
		return nil, errors.New("invalid value for required argument 'TargetType'")
	}
	var resource ResourceSpecificLogging
	err := ctx.RegisterResource("aws-native:iot:ResourceSpecificLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSpecificLogging gets an existing ResourceSpecificLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSpecificLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSpecificLoggingState, opts ...pulumi.ResourceOption) (*ResourceSpecificLogging, error) {
	var resource ResourceSpecificLogging
	err := ctx.ReadResource("aws-native:iot:ResourceSpecificLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSpecificLogging resources.
type resourceSpecificLoggingState struct {
}

type ResourceSpecificLoggingState struct {
}

func (ResourceSpecificLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSpecificLoggingState)(nil)).Elem()
}

type resourceSpecificLoggingArgs struct {
	// The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
	LogLevel ResourceSpecificLoggingLogLevel `pulumi:"logLevel"`
	// The target name.
	TargetName string `pulumi:"targetName"`
	// The target type. Value must be THING_GROUP.
	TargetType ResourceSpecificLoggingTargetType `pulumi:"targetType"`
}

// The set of arguments for constructing a ResourceSpecificLogging resource.
type ResourceSpecificLoggingArgs struct {
	// The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
	LogLevel ResourceSpecificLoggingLogLevelInput
	// The target name.
	TargetName pulumi.StringInput
	// The target type. Value must be THING_GROUP.
	TargetType ResourceSpecificLoggingTargetTypeInput
}

func (ResourceSpecificLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSpecificLoggingArgs)(nil)).Elem()
}

type ResourceSpecificLoggingInput interface {
	pulumi.Input

	ToResourceSpecificLoggingOutput() ResourceSpecificLoggingOutput
	ToResourceSpecificLoggingOutputWithContext(ctx context.Context) ResourceSpecificLoggingOutput
}

func (*ResourceSpecificLogging) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSpecificLogging)(nil))
}

func (i *ResourceSpecificLogging) ToResourceSpecificLoggingOutput() ResourceSpecificLoggingOutput {
	return i.ToResourceSpecificLoggingOutputWithContext(context.Background())
}

func (i *ResourceSpecificLogging) ToResourceSpecificLoggingOutputWithContext(ctx context.Context) ResourceSpecificLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSpecificLoggingOutput)
}

type ResourceSpecificLoggingOutput struct{ *pulumi.OutputState }

func (ResourceSpecificLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSpecificLogging)(nil))
}

func (o ResourceSpecificLoggingOutput) ToResourceSpecificLoggingOutput() ResourceSpecificLoggingOutput {
	return o
}

func (o ResourceSpecificLoggingOutput) ToResourceSpecificLoggingOutputWithContext(ctx context.Context) ResourceSpecificLoggingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ResourceSpecificLoggingOutput{})
}
