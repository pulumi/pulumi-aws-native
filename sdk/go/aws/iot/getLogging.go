// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Logging Options enable you to configure your IoT V2 logging role and default logging level so that you can monitor progress events logs as it passes from your devices through Iot core service.
func LookupLogging(ctx *pulumi.Context, args *LookupLoggingArgs, opts ...pulumi.InvokeOption) (*LookupLoggingResult, error) {
	var rv LookupLoggingResult
	err := ctx.Invoke("aws-native:iot:getLogging", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLoggingArgs struct {
	// Your 12-digit account ID (used as the primary identifier for the CloudFormation resource).
	AccountId string `pulumi:"accountId"`
}

type LookupLoggingResult struct {
	// The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
	DefaultLogLevel *LoggingDefaultLogLevel `pulumi:"defaultLogLevel"`
	// The ARN of the role that allows IoT to write to Cloudwatch logs.
	RoleArn *string `pulumi:"roleArn"`
}

func LookupLoggingOutput(ctx *pulumi.Context, args LookupLoggingOutputArgs, opts ...pulumi.InvokeOption) LookupLoggingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoggingResult, error) {
			args := v.(LookupLoggingArgs)
			r, err := LookupLogging(ctx, &args, opts...)
			var s LookupLoggingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLoggingResultOutput)
}

type LookupLoggingOutputArgs struct {
	// Your 12-digit account ID (used as the primary identifier for the CloudFormation resource).
	AccountId pulumi.StringInput `pulumi:"accountId"`
}

func (LookupLoggingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingArgs)(nil)).Elem()
}

type LookupLoggingResultOutput struct{ *pulumi.OutputState }

func (LookupLoggingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingResult)(nil)).Elem()
}

func (o LookupLoggingResultOutput) ToLookupLoggingResultOutput() LookupLoggingResultOutput {
	return o
}

func (o LookupLoggingResultOutput) ToLookupLoggingResultOutputWithContext(ctx context.Context) LookupLoggingResultOutput {
	return o
}

// The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
func (o LookupLoggingResultOutput) DefaultLogLevel() LoggingDefaultLogLevelPtrOutput {
	return o.ApplyT(func(v LookupLoggingResult) *LoggingDefaultLogLevel { return v.DefaultLogLevel }).(LoggingDefaultLogLevelPtrOutput)
}

// The ARN of the role that allows IoT to write to Cloudwatch logs.
func (o LookupLoggingResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoggingResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoggingResultOutput{})
}
