// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IoT::TopicRule
type TopicRule struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput             `pulumi:"arn"`
	RuleName         pulumi.StringPtrOutput          `pulumi:"ruleName"`
	Tags             TopicRuleTagArrayOutput         `pulumi:"tags"`
	TopicRulePayload TopicRuleTopicRulePayloadOutput `pulumi:"topicRulePayload"`
}

// NewTopicRule registers a new resource with the given unique name, arguments, and options.
func NewTopicRule(ctx *pulumi.Context,
	name string, args *TopicRuleArgs, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TopicRulePayload == nil {
		return nil, errors.New("invalid value for required argument 'TopicRulePayload'")
	}
	var resource TopicRule
	err := ctx.RegisterResource("aws-native:iot:TopicRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicRule gets an existing TopicRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicRuleState, opts ...pulumi.ResourceOption) (*TopicRule, error) {
	var resource TopicRule
	err := ctx.ReadResource("aws-native:iot:TopicRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicRule resources.
type topicRuleState struct {
}

type TopicRuleState struct {
}

func (TopicRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleState)(nil)).Elem()
}

type topicRuleArgs struct {
	RuleName         *string                   `pulumi:"ruleName"`
	Tags             []TopicRuleTag            `pulumi:"tags"`
	TopicRulePayload TopicRuleTopicRulePayload `pulumi:"topicRulePayload"`
}

// The set of arguments for constructing a TopicRule resource.
type TopicRuleArgs struct {
	RuleName         pulumi.StringPtrInput
	Tags             TopicRuleTagArrayInput
	TopicRulePayload TopicRuleTopicRulePayloadInput
}

func (TopicRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicRuleArgs)(nil)).Elem()
}

type TopicRuleInput interface {
	pulumi.Input

	ToTopicRuleOutput() TopicRuleOutput
	ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput
}

func (*TopicRule) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRule)(nil))
}

func (i *TopicRule) ToTopicRuleOutput() TopicRuleOutput {
	return i.ToTopicRuleOutputWithContext(context.Background())
}

func (i *TopicRule) ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRuleOutput)
}

type TopicRuleOutput struct{ *pulumi.OutputState }

func (TopicRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRule)(nil))
}

func (o TopicRuleOutput) ToTopicRuleOutput() TopicRuleOutput {
	return o
}

func (o TopicRuleOutput) ToTopicRuleOutputWithContext(ctx context.Context) TopicRuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TopicRuleOutput{})
}
