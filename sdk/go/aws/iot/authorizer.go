// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an authorizer.
type Authorizer struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the authorizer.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The authorizer's Lambda function ARN.
	AuthorizerFunctionArn pulumi.StringOutput `pulumi:"authorizerFunctionArn"`
	// The authorizer name.
	AuthorizerName pulumi.StringPtrOutput `pulumi:"authorizerName"`
	// When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
	EnableCachingForHttp pulumi.BoolPtrOutput `pulumi:"enableCachingForHttp"`
	// Specifies whether AWS IoT validates the token signature in an authorization request.
	SigningDisabled pulumi.BoolPtrOutput `pulumi:"signingDisabled"`
	// The status of the authorizer.
	//
	// Valid values: `ACTIVE` | `INACTIVE`
	Status AuthorizerStatusPtrOutput `pulumi:"status"`
	// A set of key/value pairs that are used to manage the resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The key used to extract the token from the HTTP headers.
	TokenKeyName pulumi.StringPtrOutput `pulumi:"tokenKeyName"`
	// The public keys used to validate the token signature returned by your custom authentication service.
	TokenSigningPublicKeys pulumi.StringMapOutput `pulumi:"tokenSigningPublicKeys"`
}

// NewAuthorizer registers a new resource with the given unique name, arguments, and options.
func NewAuthorizer(ctx *pulumi.Context,
	name string, args *AuthorizerArgs, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizerFunctionArn == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizerFunctionArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"authorizerName",
		"signingDisabled",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authorizer
	err := ctx.RegisterResource("aws-native:iot:Authorizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizer gets an existing Authorizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizerState, opts ...pulumi.ResourceOption) (*Authorizer, error) {
	var resource Authorizer
	err := ctx.ReadResource("aws-native:iot:Authorizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authorizer resources.
type authorizerState struct {
}

type AuthorizerState struct {
}

func (AuthorizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerState)(nil)).Elem()
}

type authorizerArgs struct {
	// The authorizer's Lambda function ARN.
	AuthorizerFunctionArn string `pulumi:"authorizerFunctionArn"`
	// The authorizer name.
	AuthorizerName *string `pulumi:"authorizerName"`
	// When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
	EnableCachingForHttp *bool `pulumi:"enableCachingForHttp"`
	// Specifies whether AWS IoT validates the token signature in an authorization request.
	SigningDisabled *bool `pulumi:"signingDisabled"`
	// The status of the authorizer.
	//
	// Valid values: `ACTIVE` | `INACTIVE`
	Status *AuthorizerStatus `pulumi:"status"`
	// A set of key/value pairs that are used to manage the resource.
	Tags []aws.Tag `pulumi:"tags"`
	// The key used to extract the token from the HTTP headers.
	TokenKeyName *string `pulumi:"tokenKeyName"`
	// The public keys used to validate the token signature returned by your custom authentication service.
	TokenSigningPublicKeys map[string]string `pulumi:"tokenSigningPublicKeys"`
}

// The set of arguments for constructing a Authorizer resource.
type AuthorizerArgs struct {
	// The authorizer's Lambda function ARN.
	AuthorizerFunctionArn pulumi.StringInput
	// The authorizer name.
	AuthorizerName pulumi.StringPtrInput
	// When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
	EnableCachingForHttp pulumi.BoolPtrInput
	// Specifies whether AWS IoT validates the token signature in an authorization request.
	SigningDisabled pulumi.BoolPtrInput
	// The status of the authorizer.
	//
	// Valid values: `ACTIVE` | `INACTIVE`
	Status AuthorizerStatusPtrInput
	// A set of key/value pairs that are used to manage the resource.
	Tags aws.TagArrayInput
	// The key used to extract the token from the HTTP headers.
	TokenKeyName pulumi.StringPtrInput
	// The public keys used to validate the token signature returned by your custom authentication service.
	TokenSigningPublicKeys pulumi.StringMapInput
}

func (AuthorizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizerArgs)(nil)).Elem()
}

type AuthorizerInput interface {
	pulumi.Input

	ToAuthorizerOutput() AuthorizerOutput
	ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput
}

func (*Authorizer) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorizer)(nil)).Elem()
}

func (i *Authorizer) ToAuthorizerOutput() AuthorizerOutput {
	return i.ToAuthorizerOutputWithContext(context.Background())
}

func (i *Authorizer) ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerOutput)
}

type AuthorizerOutput struct{ *pulumi.OutputState }

func (AuthorizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorizer)(nil)).Elem()
}

func (o AuthorizerOutput) ToAuthorizerOutput() AuthorizerOutput {
	return o
}

func (o AuthorizerOutput) ToAuthorizerOutputWithContext(ctx context.Context) AuthorizerOutput {
	return o
}

// The Amazon Resource Name (ARN) of the authorizer.
func (o AuthorizerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The authorizer's Lambda function ARN.
func (o AuthorizerOutput) AuthorizerFunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringOutput { return v.AuthorizerFunctionArn }).(pulumi.StringOutput)
}

// The authorizer name.
func (o AuthorizerOutput) AuthorizerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringPtrOutput { return v.AuthorizerName }).(pulumi.StringPtrOutput)
}

// When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
func (o AuthorizerOutput) EnableCachingForHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.BoolPtrOutput { return v.EnableCachingForHttp }).(pulumi.BoolPtrOutput)
}

// Specifies whether AWS IoT validates the token signature in an authorization request.
func (o AuthorizerOutput) SigningDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.BoolPtrOutput { return v.SigningDisabled }).(pulumi.BoolPtrOutput)
}

// The status of the authorizer.
//
// Valid values: `ACTIVE` | `INACTIVE`
func (o AuthorizerOutput) Status() AuthorizerStatusPtrOutput {
	return o.ApplyT(func(v *Authorizer) AuthorizerStatusPtrOutput { return v.Status }).(AuthorizerStatusPtrOutput)
}

// A set of key/value pairs that are used to manage the resource.
func (o AuthorizerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Authorizer) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The key used to extract the token from the HTTP headers.
func (o AuthorizerOutput) TokenKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringPtrOutput { return v.TokenKeyName }).(pulumi.StringPtrOutput)
}

// The public keys used to validate the token signature returned by your custom authentication service.
func (o AuthorizerOutput) TokenSigningPublicKeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Authorizer) pulumi.StringMapOutput { return v.TokenSigningPublicKeys }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizerInput)(nil)).Elem(), &Authorizer{})
	pulumi.RegisterOutputType(AuthorizerOutput{})
}
