// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Registers a CA Certificate in IoT.
func LookupCaCertificate(ctx *pulumi.Context, args *LookupCaCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCaCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCaCertificateResult
	err := ctx.Invoke("aws-native:iot:getCaCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCaCertificateArgs struct {
	Id string `pulumi:"id"`
}

type LookupCaCertificateResult struct {
	Arn                    *string                              `pulumi:"arn"`
	AutoRegistrationStatus *CaCertificateAutoRegistrationStatus `pulumi:"autoRegistrationStatus"`
	Id                     *string                              `pulumi:"id"`
	RegistrationConfig     *CaCertificateRegistrationConfig     `pulumi:"registrationConfig"`
	Status                 *CaCertificateStatus                 `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []CaCertificateTag `pulumi:"tags"`
}

func LookupCaCertificateOutput(ctx *pulumi.Context, args LookupCaCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCaCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCaCertificateResult, error) {
			args := v.(LookupCaCertificateArgs)
			r, err := LookupCaCertificate(ctx, &args, opts...)
			var s LookupCaCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCaCertificateResultOutput)
}

type LookupCaCertificateOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCaCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaCertificateArgs)(nil)).Elem()
}

type LookupCaCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCaCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaCertificateResult)(nil)).Elem()
}

func (o LookupCaCertificateResultOutput) ToLookupCaCertificateResultOutput() LookupCaCertificateResultOutput {
	return o
}

func (o LookupCaCertificateResultOutput) ToLookupCaCertificateResultOutputWithContext(ctx context.Context) LookupCaCertificateResultOutput {
	return o
}

func (o LookupCaCertificateResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCaCertificateResult] {
	return pulumix.Output[LookupCaCertificateResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCaCertificateResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCaCertificateResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupCaCertificateResultOutput) AutoRegistrationStatus() CaCertificateAutoRegistrationStatusPtrOutput {
	return o.ApplyT(func(v LookupCaCertificateResult) *CaCertificateAutoRegistrationStatus {
		return v.AutoRegistrationStatus
	}).(CaCertificateAutoRegistrationStatusPtrOutput)
}

func (o LookupCaCertificateResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCaCertificateResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupCaCertificateResultOutput) RegistrationConfig() CaCertificateRegistrationConfigPtrOutput {
	return o.ApplyT(func(v LookupCaCertificateResult) *CaCertificateRegistrationConfig { return v.RegistrationConfig }).(CaCertificateRegistrationConfigPtrOutput)
}

func (o LookupCaCertificateResultOutput) Status() CaCertificateStatusPtrOutput {
	return o.ApplyT(func(v LookupCaCertificateResult) *CaCertificateStatus { return v.Status }).(CaCertificateStatusPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupCaCertificateResultOutput) Tags() CaCertificateTagArrayOutput {
	return o.ApplyT(func(v LookupCaCertificateResult) []CaCertificateTag { return v.Tags }).(CaCertificateTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCaCertificateResultOutput{})
}
