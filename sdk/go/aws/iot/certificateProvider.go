// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the AWS::IoT::CertificateProvider resource to declare an AWS IoT Certificate Provider.
type CertificateProvider struct {
	pulumi.CustomResourceState

	AccountDefaultForOperations CertificateProviderOperationArrayOutput `pulumi:"accountDefaultForOperations"`
	Arn                         pulumi.StringOutput                     `pulumi:"arn"`
	CertificateProviderName     pulumi.StringPtrOutput                  `pulumi:"certificateProviderName"`
	LambdaFunctionArn           pulumi.StringOutput                     `pulumi:"lambdaFunctionArn"`
	// An array of key-value pairs to apply to this resource.
	Tags CertificateProviderTagArrayOutput `pulumi:"tags"`
}

// NewCertificateProvider registers a new resource with the given unique name, arguments, and options.
func NewCertificateProvider(ctx *pulumi.Context,
	name string, args *CertificateProviderArgs, opts ...pulumi.ResourceOption) (*CertificateProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountDefaultForOperations == nil {
		return nil, errors.New("invalid value for required argument 'AccountDefaultForOperations'")
	}
	if args.LambdaFunctionArn == nil {
		return nil, errors.New("invalid value for required argument 'LambdaFunctionArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"certificateProviderName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateProvider
	err := ctx.RegisterResource("aws-native:iot:CertificateProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateProvider gets an existing CertificateProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateProviderState, opts ...pulumi.ResourceOption) (*CertificateProvider, error) {
	var resource CertificateProvider
	err := ctx.ReadResource("aws-native:iot:CertificateProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateProvider resources.
type certificateProviderState struct {
}

type CertificateProviderState struct {
}

func (CertificateProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateProviderState)(nil)).Elem()
}

type certificateProviderArgs struct {
	AccountDefaultForOperations []CertificateProviderOperation `pulumi:"accountDefaultForOperations"`
	CertificateProviderName     *string                        `pulumi:"certificateProviderName"`
	LambdaFunctionArn           string                         `pulumi:"lambdaFunctionArn"`
	// An array of key-value pairs to apply to this resource.
	Tags []CertificateProviderTag `pulumi:"tags"`
}

// The set of arguments for constructing a CertificateProvider resource.
type CertificateProviderArgs struct {
	AccountDefaultForOperations CertificateProviderOperationArrayInput
	CertificateProviderName     pulumi.StringPtrInput
	LambdaFunctionArn           pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags CertificateProviderTagArrayInput
}

func (CertificateProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateProviderArgs)(nil)).Elem()
}

type CertificateProviderInput interface {
	pulumi.Input

	ToCertificateProviderOutput() CertificateProviderOutput
	ToCertificateProviderOutputWithContext(ctx context.Context) CertificateProviderOutput
}

func (*CertificateProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateProvider)(nil)).Elem()
}

func (i *CertificateProvider) ToCertificateProviderOutput() CertificateProviderOutput {
	return i.ToCertificateProviderOutputWithContext(context.Background())
}

func (i *CertificateProvider) ToCertificateProviderOutputWithContext(ctx context.Context) CertificateProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateProviderOutput)
}

type CertificateProviderOutput struct{ *pulumi.OutputState }

func (CertificateProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateProvider)(nil)).Elem()
}

func (o CertificateProviderOutput) ToCertificateProviderOutput() CertificateProviderOutput {
	return o
}

func (o CertificateProviderOutput) ToCertificateProviderOutputWithContext(ctx context.Context) CertificateProviderOutput {
	return o
}

func (o CertificateProviderOutput) AccountDefaultForOperations() CertificateProviderOperationArrayOutput {
	return o.ApplyT(func(v *CertificateProvider) CertificateProviderOperationArrayOutput {
		return v.AccountDefaultForOperations
	}).(CertificateProviderOperationArrayOutput)
}

func (o CertificateProviderOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateProvider) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CertificateProviderOutput) CertificateProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateProvider) pulumi.StringPtrOutput { return v.CertificateProviderName }).(pulumi.StringPtrOutput)
}

func (o CertificateProviderOutput) LambdaFunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateProvider) pulumi.StringOutput { return v.LambdaFunctionArn }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o CertificateProviderOutput) Tags() CertificateProviderTagArrayOutput {
	return o.ApplyT(func(v *CertificateProvider) CertificateProviderTagArrayOutput { return v.Tags }).(CertificateProviderTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateProviderInput)(nil)).Elem(), &CertificateProvider{})
	pulumi.RegisterOutputType(CertificateProviderOutput{})
}
