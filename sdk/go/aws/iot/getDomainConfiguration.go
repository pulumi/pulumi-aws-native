// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create and manage a Domain Configuration
func LookupDomainConfiguration(ctx *pulumi.Context, args *LookupDomainConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupDomainConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainConfigurationResult
	err := ctx.Invoke("aws-native:iot:getDomainConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDomainConfigurationArgs struct {
	// The name of the domain configuration. This value must be unique to a region.
	DomainConfigurationName string `pulumi:"domainConfigurationName"`
}

type LookupDomainConfigurationResult struct {
	// An enumerated string that speciﬁes the application-layer protocol.
	ApplicationProtocol *DomainConfigurationApplicationProtocol `pulumi:"applicationProtocol"`
	// The Amazon Resource Name (ARN) of the domain configuration.
	Arn *string `pulumi:"arn"`
	// An enumerated string that speciﬁes the authentication type.
	AuthenticationType *DomainConfigurationAuthenticationType `pulumi:"authenticationType"`
	// An object that specifies the authorization service for a domain.
	AuthorizerConfig *DomainConfigurationAuthorizerConfig `pulumi:"authorizerConfig"`
	// An object that speciﬁes the client certificate conﬁguration for a domain.
	ClientCertificateConfig *DomainConfigurationClientCertificateConfig `pulumi:"clientCertificateConfig"`
	// The status to which the domain configuration should be updated.
	//
	// Valid values: `ENABLED` | `DISABLED`
	DomainConfigurationStatus *DomainConfigurationStatus `pulumi:"domainConfigurationStatus"`
	// The type of service delivered by the domain.
	DomainType *DomainConfigurationDomainType `pulumi:"domainType"`
	// The server certificate configuration.
	//
	// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
	ServerCertificateConfig *DomainConfigurationServerCertificateConfig `pulumi:"serverCertificateConfig"`
	// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
	ServerCertificates []DomainConfigurationServerCertificateSummary `pulumi:"serverCertificates"`
	// Metadata which can be used to manage the domain configuration.
	//
	// > For URI Request parameters use format: ...key1=value1&key2=value2...
	// >
	// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
	// >
	// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
	Tags []aws.Tag `pulumi:"tags"`
	// An object that specifies the TLS configuration for a domain.
	TlsConfig *DomainConfigurationTlsConfig `pulumi:"tlsConfig"`
}

func LookupDomainConfigurationOutput(ctx *pulumi.Context, args LookupDomainConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupDomainConfigurationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDomainConfigurationResultOutput, error) {
			args := v.(LookupDomainConfigurationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:iot:getDomainConfiguration", args, LookupDomainConfigurationResultOutput{}, options).(LookupDomainConfigurationResultOutput), nil
		}).(LookupDomainConfigurationResultOutput)
}

type LookupDomainConfigurationOutputArgs struct {
	// The name of the domain configuration. This value must be unique to a region.
	DomainConfigurationName pulumi.StringInput `pulumi:"domainConfigurationName"`
}

func (LookupDomainConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainConfigurationArgs)(nil)).Elem()
}

type LookupDomainConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupDomainConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainConfigurationResult)(nil)).Elem()
}

func (o LookupDomainConfigurationResultOutput) ToLookupDomainConfigurationResultOutput() LookupDomainConfigurationResultOutput {
	return o
}

func (o LookupDomainConfigurationResultOutput) ToLookupDomainConfigurationResultOutputWithContext(ctx context.Context) LookupDomainConfigurationResultOutput {
	return o
}

// An enumerated string that speciﬁes the application-layer protocol.
func (o LookupDomainConfigurationResultOutput) ApplicationProtocol() DomainConfigurationApplicationProtocolPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationApplicationProtocol {
		return v.ApplicationProtocol
	}).(DomainConfigurationApplicationProtocolPtrOutput)
}

// The Amazon Resource Name (ARN) of the domain configuration.
func (o LookupDomainConfigurationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// An enumerated string that speciﬁes the authentication type.
func (o LookupDomainConfigurationResultOutput) AuthenticationType() DomainConfigurationAuthenticationTypePtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationAuthenticationType {
		return v.AuthenticationType
	}).(DomainConfigurationAuthenticationTypePtrOutput)
}

// An object that specifies the authorization service for a domain.
func (o LookupDomainConfigurationResultOutput) AuthorizerConfig() DomainConfigurationAuthorizerConfigPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationAuthorizerConfig {
		return v.AuthorizerConfig
	}).(DomainConfigurationAuthorizerConfigPtrOutput)
}

// An object that speciﬁes the client certificate conﬁguration for a domain.
func (o LookupDomainConfigurationResultOutput) ClientCertificateConfig() DomainConfigurationClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationClientCertificateConfig {
		return v.ClientCertificateConfig
	}).(DomainConfigurationClientCertificateConfigPtrOutput)
}

// The status to which the domain configuration should be updated.
//
// Valid values: `ENABLED` | `DISABLED`
func (o LookupDomainConfigurationResultOutput) DomainConfigurationStatus() DomainConfigurationStatusPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationStatus { return v.DomainConfigurationStatus }).(DomainConfigurationStatusPtrOutput)
}

// The type of service delivered by the domain.
func (o LookupDomainConfigurationResultOutput) DomainType() DomainConfigurationDomainTypePtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationDomainType { return v.DomainType }).(DomainConfigurationDomainTypePtrOutput)
}

// The server certificate configuration.
//
// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
func (o LookupDomainConfigurationResultOutput) ServerCertificateConfig() DomainConfigurationServerCertificateConfigPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationServerCertificateConfig {
		return v.ServerCertificateConfig
	}).(DomainConfigurationServerCertificateConfigPtrOutput)
}

// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
func (o LookupDomainConfigurationResultOutput) ServerCertificates() DomainConfigurationServerCertificateSummaryArrayOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) []DomainConfigurationServerCertificateSummary {
		return v.ServerCertificates
	}).(DomainConfigurationServerCertificateSummaryArrayOutput)
}

// Metadata which can be used to manage the domain configuration.
//
// > For URI Request parameters use format: ...key1=value1&key2=value2...
// >
// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
// >
// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
func (o LookupDomainConfigurationResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// An object that specifies the TLS configuration for a domain.
func (o LookupDomainConfigurationResultOutput) TlsConfig() DomainConfigurationTlsConfigPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationTlsConfig { return v.TlsConfig }).(DomainConfigurationTlsConfigPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainConfigurationResultOutput{})
}
