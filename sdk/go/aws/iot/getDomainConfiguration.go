// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create and manage a Domain Configuration
func LookupDomainConfiguration(ctx *pulumi.Context, args *LookupDomainConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupDomainConfigurationResult, error) {
	var rv LookupDomainConfigurationResult
	err := ctx.Invoke("aws-native:iot:getDomainConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDomainConfigurationArgs struct {
	DomainConfigurationName string `pulumi:"domainConfigurationName"`
}

type LookupDomainConfigurationResult struct {
	Arn                       *string                                       `pulumi:"arn"`
	AuthorizerConfig          *DomainConfigurationAuthorizerConfig          `pulumi:"authorizerConfig"`
	DomainConfigurationStatus *DomainConfigurationStatus                    `pulumi:"domainConfigurationStatus"`
	DomainType                *DomainConfigurationDomainType                `pulumi:"domainType"`
	ServerCertificates        []DomainConfigurationServerCertificateSummary `pulumi:"serverCertificates"`
	Tags                      []DomainConfigurationTag                      `pulumi:"tags"`
}

func LookupDomainConfigurationOutput(ctx *pulumi.Context, args LookupDomainConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupDomainConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainConfigurationResult, error) {
			args := v.(LookupDomainConfigurationArgs)
			r, err := LookupDomainConfiguration(ctx, &args, opts...)
			var s LookupDomainConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDomainConfigurationResultOutput)
}

type LookupDomainConfigurationOutputArgs struct {
	DomainConfigurationName pulumi.StringInput `pulumi:"domainConfigurationName"`
}

func (LookupDomainConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainConfigurationArgs)(nil)).Elem()
}

type LookupDomainConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupDomainConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainConfigurationResult)(nil)).Elem()
}

func (o LookupDomainConfigurationResultOutput) ToLookupDomainConfigurationResultOutput() LookupDomainConfigurationResultOutput {
	return o
}

func (o LookupDomainConfigurationResultOutput) ToLookupDomainConfigurationResultOutputWithContext(ctx context.Context) LookupDomainConfigurationResultOutput {
	return o
}

func (o LookupDomainConfigurationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupDomainConfigurationResultOutput) AuthorizerConfig() DomainConfigurationAuthorizerConfigPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationAuthorizerConfig {
		return v.AuthorizerConfig
	}).(DomainConfigurationAuthorizerConfigPtrOutput)
}

func (o LookupDomainConfigurationResultOutput) DomainConfigurationStatus() DomainConfigurationStatusPtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationStatus { return v.DomainConfigurationStatus }).(DomainConfigurationStatusPtrOutput)
}

func (o LookupDomainConfigurationResultOutput) DomainType() DomainConfigurationDomainTypePtrOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) *DomainConfigurationDomainType { return v.DomainType }).(DomainConfigurationDomainTypePtrOutput)
}

func (o LookupDomainConfigurationResultOutput) ServerCertificates() DomainConfigurationServerCertificateSummaryArrayOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) []DomainConfigurationServerCertificateSummary {
		return v.ServerCertificates
	}).(DomainConfigurationServerCertificateSummaryArrayOutput)
}

func (o LookupDomainConfigurationResultOutput) Tags() DomainConfigurationTagArrayOutput {
	return o.ApplyT(func(v LookupDomainConfigurationResult) []DomainConfigurationTag { return v.Tags }).(DomainConfigurationTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainConfigurationResultOutput{})
}
