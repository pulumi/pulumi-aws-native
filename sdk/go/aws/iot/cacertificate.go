// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers a CA Certificate in IoT.
type CACertificate struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput                          `pulumi:"arn"`
	AutoRegistrationStatus CACertificateAutoRegistrationStatusPtrOutput `pulumi:"autoRegistrationStatus"`
	CACertificatePem       pulumi.StringOutput                          `pulumi:"cACertificatePem"`
	CertificateMode        CACertificateCertificateModePtrOutput        `pulumi:"certificateMode"`
	RegistrationConfig     CACertificateRegistrationConfigPtrOutput     `pulumi:"registrationConfig"`
	Status                 CACertificateStatusOutput                    `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags CACertificateTagArrayOutput `pulumi:"tags"`
	// The private key verification certificate.
	VerificationCertificatePem pulumi.StringPtrOutput `pulumi:"verificationCertificatePem"`
}

// NewCACertificate registers a new resource with the given unique name, arguments, and options.
func NewCACertificate(ctx *pulumi.Context,
	name string, args *CACertificateArgs, opts ...pulumi.ResourceOption) (*CACertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CACertificatePem == nil {
		return nil, errors.New("invalid value for required argument 'CACertificatePem'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource CACertificate
	err := ctx.RegisterResource("aws-native:iot:CACertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCACertificate gets an existing CACertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCACertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CACertificateState, opts ...pulumi.ResourceOption) (*CACertificate, error) {
	var resource CACertificate
	err := ctx.ReadResource("aws-native:iot:CACertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CACertificate resources.
type cacertificateState struct {
}

type CACertificateState struct {
}

func (CACertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacertificateState)(nil)).Elem()
}

type cacertificateArgs struct {
	AutoRegistrationStatus *CACertificateAutoRegistrationStatus `pulumi:"autoRegistrationStatus"`
	CACertificatePem       string                               `pulumi:"cACertificatePem"`
	CertificateMode        *CACertificateCertificateMode        `pulumi:"certificateMode"`
	RegistrationConfig     *CACertificateRegistrationConfig     `pulumi:"registrationConfig"`
	Status                 CACertificateStatus                  `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []CACertificateTag `pulumi:"tags"`
	// The private key verification certificate.
	VerificationCertificatePem *string `pulumi:"verificationCertificatePem"`
}

// The set of arguments for constructing a CACertificate resource.
type CACertificateArgs struct {
	AutoRegistrationStatus CACertificateAutoRegistrationStatusPtrInput
	CACertificatePem       pulumi.StringInput
	CertificateMode        CACertificateCertificateModePtrInput
	RegistrationConfig     CACertificateRegistrationConfigPtrInput
	Status                 CACertificateStatusInput
	// An array of key-value pairs to apply to this resource.
	Tags CACertificateTagArrayInput
	// The private key verification certificate.
	VerificationCertificatePem pulumi.StringPtrInput
}

func (CACertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacertificateArgs)(nil)).Elem()
}

type CACertificateInput interface {
	pulumi.Input

	ToCACertificateOutput() CACertificateOutput
	ToCACertificateOutputWithContext(ctx context.Context) CACertificateOutput
}

func (*CACertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CACertificate)(nil)).Elem()
}

func (i *CACertificate) ToCACertificateOutput() CACertificateOutput {
	return i.ToCACertificateOutputWithContext(context.Background())
}

func (i *CACertificate) ToCACertificateOutputWithContext(ctx context.Context) CACertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CACertificateOutput)
}

type CACertificateOutput struct{ *pulumi.OutputState }

func (CACertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CACertificate)(nil)).Elem()
}

func (o CACertificateOutput) ToCACertificateOutput() CACertificateOutput {
	return o
}

func (o CACertificateOutput) ToCACertificateOutputWithContext(ctx context.Context) CACertificateOutput {
	return o
}

func (o CACertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CACertificateOutput) AutoRegistrationStatus() CACertificateAutoRegistrationStatusPtrOutput {
	return o.ApplyT(func(v *CACertificate) CACertificateAutoRegistrationStatusPtrOutput { return v.AutoRegistrationStatus }).(CACertificateAutoRegistrationStatusPtrOutput)
}

func (o CACertificateOutput) CACertificatePem() pulumi.StringOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringOutput { return v.CACertificatePem }).(pulumi.StringOutput)
}

func (o CACertificateOutput) CertificateMode() CACertificateCertificateModePtrOutput {
	return o.ApplyT(func(v *CACertificate) CACertificateCertificateModePtrOutput { return v.CertificateMode }).(CACertificateCertificateModePtrOutput)
}

func (o CACertificateOutput) RegistrationConfig() CACertificateRegistrationConfigPtrOutput {
	return o.ApplyT(func(v *CACertificate) CACertificateRegistrationConfigPtrOutput { return v.RegistrationConfig }).(CACertificateRegistrationConfigPtrOutput)
}

func (o CACertificateOutput) Status() CACertificateStatusOutput {
	return o.ApplyT(func(v *CACertificate) CACertificateStatusOutput { return v.Status }).(CACertificateStatusOutput)
}

// An array of key-value pairs to apply to this resource.
func (o CACertificateOutput) Tags() CACertificateTagArrayOutput {
	return o.ApplyT(func(v *CACertificate) CACertificateTagArrayOutput { return v.Tags }).(CACertificateTagArrayOutput)
}

// The private key verification certificate.
func (o CACertificateOutput) VerificationCertificatePem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CACertificate) pulumi.StringPtrOutput { return v.VerificationCertificatePem }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CACertificateInput)(nil)).Elem(), &CACertificate{})
	pulumi.RegisterOutputType(CACertificateOutput{})
}
