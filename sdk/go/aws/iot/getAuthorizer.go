// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an authorizer.
func LookupAuthorizer(ctx *pulumi.Context, args *LookupAuthorizerArgs, opts ...pulumi.InvokeOption) (*LookupAuthorizerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAuthorizerResult
	err := ctx.Invoke("aws-native:iot:getAuthorizer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAuthorizerArgs struct {
	// The authorizer name.
	AuthorizerName string `pulumi:"authorizerName"`
}

type LookupAuthorizerResult struct {
	// The Amazon Resource Name (ARN) of the authorizer.
	Arn *string `pulumi:"arn"`
	// The authorizer's Lambda function ARN.
	AuthorizerFunctionArn *string `pulumi:"authorizerFunctionArn"`
	// When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
	EnableCachingForHttp *bool `pulumi:"enableCachingForHttp"`
	// The status of the authorizer.
	//
	// Valid values: `ACTIVE` | `INACTIVE`
	Status *AuthorizerStatus `pulumi:"status"`
	// Metadata which can be used to manage the custom authorizer.
	//
	// > For URI Request parameters use format: ...key1=value1&key2=value2...
	// >
	// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
	// >
	// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
	Tags []aws.Tag `pulumi:"tags"`
	// The key used to extract the token from the HTTP headers.
	TokenKeyName *string `pulumi:"tokenKeyName"`
	// The public keys used to validate the token signature returned by your custom authentication service.
	TokenSigningPublicKeys map[string]string `pulumi:"tokenSigningPublicKeys"`
}

func LookupAuthorizerOutput(ctx *pulumi.Context, args LookupAuthorizerOutputArgs, opts ...pulumi.InvokeOption) LookupAuthorizerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAuthorizerResult, error) {
			args := v.(LookupAuthorizerArgs)
			r, err := LookupAuthorizer(ctx, &args, opts...)
			var s LookupAuthorizerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAuthorizerResultOutput)
}

type LookupAuthorizerOutputArgs struct {
	// The authorizer name.
	AuthorizerName pulumi.StringInput `pulumi:"authorizerName"`
}

func (LookupAuthorizerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorizerArgs)(nil)).Elem()
}

type LookupAuthorizerResultOutput struct{ *pulumi.OutputState }

func (LookupAuthorizerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorizerResult)(nil)).Elem()
}

func (o LookupAuthorizerResultOutput) ToLookupAuthorizerResultOutput() LookupAuthorizerResultOutput {
	return o
}

func (o LookupAuthorizerResultOutput) ToLookupAuthorizerResultOutputWithContext(ctx context.Context) LookupAuthorizerResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the authorizer.
func (o LookupAuthorizerResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The authorizer's Lambda function ARN.
func (o LookupAuthorizerResultOutput) AuthorizerFunctionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *string { return v.AuthorizerFunctionArn }).(pulumi.StringPtrOutput)
}

// When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
func (o LookupAuthorizerResultOutput) EnableCachingForHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *bool { return v.EnableCachingForHttp }).(pulumi.BoolPtrOutput)
}

// The status of the authorizer.
//
// Valid values: `ACTIVE` | `INACTIVE`
func (o LookupAuthorizerResultOutput) Status() AuthorizerStatusPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *AuthorizerStatus { return v.Status }).(AuthorizerStatusPtrOutput)
}

// Metadata which can be used to manage the custom authorizer.
//
// > For URI Request parameters use format: ...key1=value1&key2=value2...
// >
// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
// >
// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
func (o LookupAuthorizerResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The key used to extract the token from the HTTP headers.
func (o LookupAuthorizerResultOutput) TokenKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *string { return v.TokenKeyName }).(pulumi.StringPtrOutput)
}

// The public keys used to validate the token signature returned by your custom authentication service.
func (o LookupAuthorizerResultOutput) TokenSigningPublicKeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) map[string]string { return v.TokenSigningPublicKeys }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthorizerResultOutput{})
}
