// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an authorizer.
func LookupAuthorizer(ctx *pulumi.Context, args *LookupAuthorizerArgs, opts ...pulumi.InvokeOption) (*LookupAuthorizerResult, error) {
	var rv LookupAuthorizerResult
	err := ctx.Invoke("aws-native:iot:getAuthorizer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAuthorizerArgs struct {
	AuthorizerName string `pulumi:"authorizerName"`
}

type LookupAuthorizerResult struct {
	Arn                    *string           `pulumi:"arn"`
	AuthorizerFunctionArn  *string           `pulumi:"authorizerFunctionArn"`
	EnableCachingForHttp   *bool             `pulumi:"enableCachingForHttp"`
	Status                 *AuthorizerStatus `pulumi:"status"`
	Tags                   []AuthorizerTag   `pulumi:"tags"`
	TokenKeyName           *string           `pulumi:"tokenKeyName"`
	TokenSigningPublicKeys interface{}       `pulumi:"tokenSigningPublicKeys"`
}

func LookupAuthorizerOutput(ctx *pulumi.Context, args LookupAuthorizerOutputArgs, opts ...pulumi.InvokeOption) LookupAuthorizerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAuthorizerResult, error) {
			args := v.(LookupAuthorizerArgs)
			r, err := LookupAuthorizer(ctx, &args, opts...)
			return *r, err
		}).(LookupAuthorizerResultOutput)
}

type LookupAuthorizerOutputArgs struct {
	AuthorizerName pulumi.StringInput `pulumi:"authorizerName"`
}

func (LookupAuthorizerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorizerArgs)(nil)).Elem()
}

type LookupAuthorizerResultOutput struct{ *pulumi.OutputState }

func (LookupAuthorizerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthorizerResult)(nil)).Elem()
}

func (o LookupAuthorizerResultOutput) ToLookupAuthorizerResultOutput() LookupAuthorizerResultOutput {
	return o
}

func (o LookupAuthorizerResultOutput) ToLookupAuthorizerResultOutputWithContext(ctx context.Context) LookupAuthorizerResultOutput {
	return o
}

func (o LookupAuthorizerResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupAuthorizerResultOutput) AuthorizerFunctionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *string { return v.AuthorizerFunctionArn }).(pulumi.StringPtrOutput)
}

func (o LookupAuthorizerResultOutput) EnableCachingForHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *bool { return v.EnableCachingForHttp }).(pulumi.BoolPtrOutput)
}

func (o LookupAuthorizerResultOutput) Status() AuthorizerStatusPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *AuthorizerStatus { return v.Status }).(AuthorizerStatusPtrOutput)
}

func (o LookupAuthorizerResultOutput) Tags() AuthorizerTagArrayOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) []AuthorizerTag { return v.Tags }).(AuthorizerTagArrayOutput)
}

func (o LookupAuthorizerResultOutput) TokenKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) *string { return v.TokenKeyName }).(pulumi.StringPtrOutput)
}

func (o LookupAuthorizerResultOutput) TokenSigningPublicKeys() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupAuthorizerResult) interface{} { return v.TokenSigningPublicKeys }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthorizerResultOutput{})
}
