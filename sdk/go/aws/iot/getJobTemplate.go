// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Job templates enable you to preconfigure jobs so that you can deploy them to multiple sets of target devices.
func LookupJobTemplate(ctx *pulumi.Context, args *LookupJobTemplateArgs, opts ...pulumi.InvokeOption) (*LookupJobTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupJobTemplateResult
	err := ctx.Invoke("aws-native:iot:getJobTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupJobTemplateArgs struct {
	// A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.
	JobTemplateId string `pulumi:"jobTemplateId"`
}

type LookupJobTemplateResult struct {
	// The ARN of the job to use as the basis for the job template.
	Arn *string `pulumi:"arn"`
}

func LookupJobTemplateOutput(ctx *pulumi.Context, args LookupJobTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupJobTemplateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupJobTemplateResultOutput, error) {
			args := v.(LookupJobTemplateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:iot:getJobTemplate", args, LookupJobTemplateResultOutput{}, options).(LookupJobTemplateResultOutput), nil
		}).(LookupJobTemplateResultOutput)
}

type LookupJobTemplateOutputArgs struct {
	// A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.
	JobTemplateId pulumi.StringInput `pulumi:"jobTemplateId"`
}

func (LookupJobTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobTemplateArgs)(nil)).Elem()
}

type LookupJobTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupJobTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobTemplateResult)(nil)).Elem()
}

func (o LookupJobTemplateResultOutput) ToLookupJobTemplateResultOutput() LookupJobTemplateResultOutput {
	return o
}

func (o LookupJobTemplateResultOutput) ToLookupJobTemplateResultOutputWithContext(ctx context.Context) LookupJobTemplateResultOutput {
	return o
}

// The ARN of the job to use as the basis for the job template.
func (o LookupJobTemplateResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobTemplateResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupJobTemplateResultOutput{})
}
