// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create and manage a Domain Configuration
type DomainConfiguration struct {
	pulumi.CustomResourceState

	Arn                       pulumi.StringOutput                                    `pulumi:"arn"`
	AuthorizerConfig          DomainConfigurationAuthorizerConfigPtrOutput           `pulumi:"authorizerConfig"`
	DomainConfigurationName   pulumi.StringPtrOutput                                 `pulumi:"domainConfigurationName"`
	DomainConfigurationStatus DomainConfigurationDomainConfigurationStatusPtrOutput  `pulumi:"domainConfigurationStatus"`
	DomainName                pulumi.StringPtrOutput                                 `pulumi:"domainName"`
	DomainType                DomainConfigurationDomainTypeOutput                    `pulumi:"domainType"`
	ServerCertificateArns     pulumi.StringArrayOutput                               `pulumi:"serverCertificateArns"`
	ServerCertificates        DomainConfigurationServerCertificateSummaryArrayOutput `pulumi:"serverCertificates"`
	ServiceType               DomainConfigurationServiceTypePtrOutput                `pulumi:"serviceType"`
	Tags                      DomainConfigurationTagArrayOutput                      `pulumi:"tags"`
	ValidationCertificateArn  pulumi.StringPtrOutput                                 `pulumi:"validationCertificateArn"`
}

// NewDomainConfiguration registers a new resource with the given unique name, arguments, and options.
func NewDomainConfiguration(ctx *pulumi.Context,
	name string, args *DomainConfigurationArgs, opts ...pulumi.ResourceOption) (*DomainConfiguration, error) {
	if args == nil {
		args = &DomainConfigurationArgs{}
	}

	var resource DomainConfiguration
	err := ctx.RegisterResource("aws-native:iot:DomainConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainConfiguration gets an existing DomainConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainConfigurationState, opts ...pulumi.ResourceOption) (*DomainConfiguration, error) {
	var resource DomainConfiguration
	err := ctx.ReadResource("aws-native:iot:DomainConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainConfiguration resources.
type domainConfigurationState struct {
}

type DomainConfigurationState struct {
}

func (DomainConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainConfigurationState)(nil)).Elem()
}

type domainConfigurationArgs struct {
	AuthorizerConfig          *DomainConfigurationAuthorizerConfig          `pulumi:"authorizerConfig"`
	DomainConfigurationName   *string                                       `pulumi:"domainConfigurationName"`
	DomainConfigurationStatus *DomainConfigurationDomainConfigurationStatus `pulumi:"domainConfigurationStatus"`
	DomainName                *string                                       `pulumi:"domainName"`
	ServerCertificateArns     []string                                      `pulumi:"serverCertificateArns"`
	ServiceType               *DomainConfigurationServiceType               `pulumi:"serviceType"`
	Tags                      []DomainConfigurationTag                      `pulumi:"tags"`
	ValidationCertificateArn  *string                                       `pulumi:"validationCertificateArn"`
}

// The set of arguments for constructing a DomainConfiguration resource.
type DomainConfigurationArgs struct {
	AuthorizerConfig          DomainConfigurationAuthorizerConfigPtrInput
	DomainConfigurationName   pulumi.StringPtrInput
	DomainConfigurationStatus DomainConfigurationDomainConfigurationStatusPtrInput
	DomainName                pulumi.StringPtrInput
	ServerCertificateArns     pulumi.StringArrayInput
	ServiceType               DomainConfigurationServiceTypePtrInput
	Tags                      DomainConfigurationTagArrayInput
	ValidationCertificateArn  pulumi.StringPtrInput
}

func (DomainConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainConfigurationArgs)(nil)).Elem()
}

type DomainConfigurationInput interface {
	pulumi.Input

	ToDomainConfigurationOutput() DomainConfigurationOutput
	ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput
}

func (*DomainConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfiguration)(nil))
}

func (i *DomainConfiguration) ToDomainConfigurationOutput() DomainConfigurationOutput {
	return i.ToDomainConfigurationOutputWithContext(context.Background())
}

func (i *DomainConfiguration) ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigurationOutput)
}

type DomainConfigurationOutput struct{ *pulumi.OutputState }

func (DomainConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfiguration)(nil))
}

func (o DomainConfigurationOutput) ToDomainConfigurationOutput() DomainConfigurationOutput {
	return o
}

func (o DomainConfigurationOutput) ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DomainConfigurationOutput{})
}
