// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create and manage a Domain Configuration
type DomainConfiguration struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the domain configuration.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// An object that specifies the authorization service for a domain.
	AuthorizerConfig DomainConfigurationAuthorizerConfigPtrOutput `pulumi:"authorizerConfig"`
	// The name of the domain configuration. This value must be unique to a region.
	DomainConfigurationName pulumi.StringPtrOutput `pulumi:"domainConfigurationName"`
	// The status to which the domain configuration should be updated.
	//
	// Valid values: `ENABLED` | `DISABLED`
	DomainConfigurationStatus DomainConfigurationStatusPtrOutput `pulumi:"domainConfigurationStatus"`
	// The name of the domain.
	DomainName pulumi.StringPtrOutput `pulumi:"domainName"`
	// The type of service delivered by the domain.
	DomainType DomainConfigurationDomainTypeOutput `pulumi:"domainType"`
	// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
	ServerCertificateArns pulumi.StringArrayOutput `pulumi:"serverCertificateArns"`
	// The server certificate configuration.
	//
	// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
	ServerCertificateConfig DomainConfigurationServerCertificateConfigPtrOutput `pulumi:"serverCertificateConfig"`
	// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
	ServerCertificates DomainConfigurationServerCertificateSummaryArrayOutput `pulumi:"serverCertificates"`
	// The type of service delivered by the endpoint.
	//
	// > AWS IoT Core currently supports only the `DATA` service type.
	ServiceType DomainConfigurationServiceTypePtrOutput `pulumi:"serviceType"`
	// Metadata which can be used to manage the domain configuration.
	//
	// > For URI Request parameters use format: ...key1=value1&key2=value2...
	// >
	// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
	// >
	// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// An object that specifies the TLS configuration for a domain.
	TlsConfig DomainConfigurationTlsConfigPtrOutput `pulumi:"tlsConfig"`
	// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
	ValidationCertificateArn pulumi.StringPtrOutput `pulumi:"validationCertificateArn"`
}

// NewDomainConfiguration registers a new resource with the given unique name, arguments, and options.
func NewDomainConfiguration(ctx *pulumi.Context,
	name string, args *DomainConfigurationArgs, opts ...pulumi.ResourceOption) (*DomainConfiguration, error) {
	if args == nil {
		args = &DomainConfigurationArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainConfigurationName",
		"domainName",
		"serverCertificateArns[*]",
		"serviceType",
		"validationCertificateArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainConfiguration
	err := ctx.RegisterResource("aws-native:iot:DomainConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainConfiguration gets an existing DomainConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainConfigurationState, opts ...pulumi.ResourceOption) (*DomainConfiguration, error) {
	var resource DomainConfiguration
	err := ctx.ReadResource("aws-native:iot:DomainConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainConfiguration resources.
type domainConfigurationState struct {
}

type DomainConfigurationState struct {
}

func (DomainConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainConfigurationState)(nil)).Elem()
}

type domainConfigurationArgs struct {
	// An object that specifies the authorization service for a domain.
	AuthorizerConfig *DomainConfigurationAuthorizerConfig `pulumi:"authorizerConfig"`
	// The name of the domain configuration. This value must be unique to a region.
	DomainConfigurationName *string `pulumi:"domainConfigurationName"`
	// The status to which the domain configuration should be updated.
	//
	// Valid values: `ENABLED` | `DISABLED`
	DomainConfigurationStatus *DomainConfigurationStatus `pulumi:"domainConfigurationStatus"`
	// The name of the domain.
	DomainName *string `pulumi:"domainName"`
	// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
	ServerCertificateArns []string `pulumi:"serverCertificateArns"`
	// The server certificate configuration.
	//
	// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
	ServerCertificateConfig *DomainConfigurationServerCertificateConfig `pulumi:"serverCertificateConfig"`
	// The type of service delivered by the endpoint.
	//
	// > AWS IoT Core currently supports only the `DATA` service type.
	ServiceType *DomainConfigurationServiceType `pulumi:"serviceType"`
	// Metadata which can be used to manage the domain configuration.
	//
	// > For URI Request parameters use format: ...key1=value1&key2=value2...
	// >
	// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
	// >
	// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
	Tags []aws.Tag `pulumi:"tags"`
	// An object that specifies the TLS configuration for a domain.
	TlsConfig *DomainConfigurationTlsConfig `pulumi:"tlsConfig"`
	// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
	ValidationCertificateArn *string `pulumi:"validationCertificateArn"`
}

// The set of arguments for constructing a DomainConfiguration resource.
type DomainConfigurationArgs struct {
	// An object that specifies the authorization service for a domain.
	AuthorizerConfig DomainConfigurationAuthorizerConfigPtrInput
	// The name of the domain configuration. This value must be unique to a region.
	DomainConfigurationName pulumi.StringPtrInput
	// The status to which the domain configuration should be updated.
	//
	// Valid values: `ENABLED` | `DISABLED`
	DomainConfigurationStatus DomainConfigurationStatusPtrInput
	// The name of the domain.
	DomainName pulumi.StringPtrInput
	// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
	ServerCertificateArns pulumi.StringArrayInput
	// The server certificate configuration.
	//
	// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
	ServerCertificateConfig DomainConfigurationServerCertificateConfigPtrInput
	// The type of service delivered by the endpoint.
	//
	// > AWS IoT Core currently supports only the `DATA` service type.
	ServiceType DomainConfigurationServiceTypePtrInput
	// Metadata which can be used to manage the domain configuration.
	//
	// > For URI Request parameters use format: ...key1=value1&key2=value2...
	// >
	// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
	// >
	// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
	Tags aws.TagArrayInput
	// An object that specifies the TLS configuration for a domain.
	TlsConfig DomainConfigurationTlsConfigPtrInput
	// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
	ValidationCertificateArn pulumi.StringPtrInput
}

func (DomainConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainConfigurationArgs)(nil)).Elem()
}

type DomainConfigurationInput interface {
	pulumi.Input

	ToDomainConfigurationOutput() DomainConfigurationOutput
	ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput
}

func (*DomainConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfiguration)(nil)).Elem()
}

func (i *DomainConfiguration) ToDomainConfigurationOutput() DomainConfigurationOutput {
	return i.ToDomainConfigurationOutputWithContext(context.Background())
}

func (i *DomainConfiguration) ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigurationOutput)
}

type DomainConfigurationOutput struct{ *pulumi.OutputState }

func (DomainConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfiguration)(nil)).Elem()
}

func (o DomainConfigurationOutput) ToDomainConfigurationOutput() DomainConfigurationOutput {
	return o
}

func (o DomainConfigurationOutput) ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the domain configuration.
func (o DomainConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// An object that specifies the authorization service for a domain.
func (o DomainConfigurationOutput) AuthorizerConfig() DomainConfigurationAuthorizerConfigPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfigurationAuthorizerConfigPtrOutput { return v.AuthorizerConfig }).(DomainConfigurationAuthorizerConfigPtrOutput)
}

// The name of the domain configuration. This value must be unique to a region.
func (o DomainConfigurationOutput) DomainConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) pulumi.StringPtrOutput { return v.DomainConfigurationName }).(pulumi.StringPtrOutput)
}

// The status to which the domain configuration should be updated.
//
// Valid values: `ENABLED` | `DISABLED`
func (o DomainConfigurationOutput) DomainConfigurationStatus() DomainConfigurationStatusPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfigurationStatusPtrOutput { return v.DomainConfigurationStatus }).(DomainConfigurationStatusPtrOutput)
}

// The name of the domain.
func (o DomainConfigurationOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The type of service delivered by the domain.
func (o DomainConfigurationOutput) DomainType() DomainConfigurationDomainTypeOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfigurationDomainTypeOutput { return v.DomainType }).(DomainConfigurationDomainTypeOutput)
}

// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
func (o DomainConfigurationOutput) ServerCertificateArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainConfiguration) pulumi.StringArrayOutput { return v.ServerCertificateArns }).(pulumi.StringArrayOutput)
}

// The server certificate configuration.
//
// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
func (o DomainConfigurationOutput) ServerCertificateConfig() DomainConfigurationServerCertificateConfigPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfigurationServerCertificateConfigPtrOutput {
		return v.ServerCertificateConfig
	}).(DomainConfigurationServerCertificateConfigPtrOutput)
}

// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
func (o DomainConfigurationOutput) ServerCertificates() DomainConfigurationServerCertificateSummaryArrayOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfigurationServerCertificateSummaryArrayOutput {
		return v.ServerCertificates
	}).(DomainConfigurationServerCertificateSummaryArrayOutput)
}

// The type of service delivered by the endpoint.
//
// > AWS IoT Core currently supports only the `DATA` service type.
func (o DomainConfigurationOutput) ServiceType() DomainConfigurationServiceTypePtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfigurationServiceTypePtrOutput { return v.ServiceType }).(DomainConfigurationServiceTypePtrOutput)
}

// Metadata which can be used to manage the domain configuration.
//
// > For URI Request parameters use format: ...key1=value1&key2=value2...
// >
// > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
// >
// > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
func (o DomainConfigurationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DomainConfiguration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// An object that specifies the TLS configuration for a domain.
func (o DomainConfigurationOutput) TlsConfig() DomainConfigurationTlsConfigPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfigurationTlsConfigPtrOutput { return v.TlsConfig }).(DomainConfigurationTlsConfigPtrOutput)
}

// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
func (o DomainConfigurationOutput) ValidationCertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) pulumi.StringPtrOutput { return v.ValidationCertificateArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigurationInput)(nil)).Elem(), &DomainConfiguration{})
	pulumi.RegisterOutputType(DomainConfigurationOutput{})
}
