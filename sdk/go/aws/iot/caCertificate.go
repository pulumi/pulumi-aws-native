// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers a CA Certificate in IoT.
type CaCertificate struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput                          `pulumi:"arn"`
	AutoRegistrationStatus CaCertificateAutoRegistrationStatusPtrOutput `pulumi:"autoRegistrationStatus"`
	CaCertificatePem       pulumi.StringOutput                          `pulumi:"caCertificatePem"`
	CertificateMode        CaCertificateCertificateModePtrOutput        `pulumi:"certificateMode"`
	RegistrationConfig     CaCertificateRegistrationConfigPtrOutput     `pulumi:"registrationConfig"`
	RemoveAutoRegistration pulumi.BoolPtrOutput                         `pulumi:"removeAutoRegistration"`
	Status                 CaCertificateStatusOutput                    `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags CaCertificateTagArrayOutput `pulumi:"tags"`
	// The private key verification certificate.
	VerificationCertificatePem pulumi.StringPtrOutput `pulumi:"verificationCertificatePem"`
}

// NewCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewCaCertificate(ctx *pulumi.Context,
	name string, args *CaCertificateArgs, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CaCertificatePem == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificatePem'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CaCertificate
	err := ctx.RegisterResource("aws-native:iot:CaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaCertificate gets an existing CaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaCertificateState, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	var resource CaCertificate
	err := ctx.ReadResource("aws-native:iot:CaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CaCertificate resources.
type caCertificateState struct {
}

type CaCertificateState struct {
}

func (CaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateState)(nil)).Elem()
}

type caCertificateArgs struct {
	AutoRegistrationStatus *CaCertificateAutoRegistrationStatus `pulumi:"autoRegistrationStatus"`
	CaCertificatePem       string                               `pulumi:"caCertificatePem"`
	CertificateMode        *CaCertificateCertificateMode        `pulumi:"certificateMode"`
	RegistrationConfig     *CaCertificateRegistrationConfig     `pulumi:"registrationConfig"`
	RemoveAutoRegistration *bool                                `pulumi:"removeAutoRegistration"`
	Status                 CaCertificateStatus                  `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []CaCertificateTag `pulumi:"tags"`
	// The private key verification certificate.
	VerificationCertificatePem *string `pulumi:"verificationCertificatePem"`
}

// The set of arguments for constructing a CaCertificate resource.
type CaCertificateArgs struct {
	AutoRegistrationStatus CaCertificateAutoRegistrationStatusPtrInput
	CaCertificatePem       pulumi.StringInput
	CertificateMode        CaCertificateCertificateModePtrInput
	RegistrationConfig     CaCertificateRegistrationConfigPtrInput
	RemoveAutoRegistration pulumi.BoolPtrInput
	Status                 CaCertificateStatusInput
	// An array of key-value pairs to apply to this resource.
	Tags CaCertificateTagArrayInput
	// The private key verification certificate.
	VerificationCertificatePem pulumi.StringPtrInput
}

func (CaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateArgs)(nil)).Elem()
}

type CaCertificateInput interface {
	pulumi.Input

	ToCaCertificateOutput() CaCertificateOutput
	ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput
}

func (*CaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CaCertificate)(nil)).Elem()
}

func (i *CaCertificate) ToCaCertificateOutput() CaCertificateOutput {
	return i.ToCaCertificateOutputWithContext(context.Background())
}

func (i *CaCertificate) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaCertificateOutput)
}

type CaCertificateOutput struct{ *pulumi.OutputState }

func (CaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaCertificate)(nil)).Elem()
}

func (o CaCertificateOutput) ToCaCertificateOutput() CaCertificateOutput {
	return o
}

func (o CaCertificateOutput) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return o
}

func (o CaCertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o CaCertificateOutput) AutoRegistrationStatus() CaCertificateAutoRegistrationStatusPtrOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateAutoRegistrationStatusPtrOutput { return v.AutoRegistrationStatus }).(CaCertificateAutoRegistrationStatusPtrOutput)
}

func (o CaCertificateOutput) CaCertificatePem() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.CaCertificatePem }).(pulumi.StringOutput)
}

func (o CaCertificateOutput) CertificateMode() CaCertificateCertificateModePtrOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateCertificateModePtrOutput { return v.CertificateMode }).(CaCertificateCertificateModePtrOutput)
}

func (o CaCertificateOutput) RegistrationConfig() CaCertificateRegistrationConfigPtrOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateRegistrationConfigPtrOutput { return v.RegistrationConfig }).(CaCertificateRegistrationConfigPtrOutput)
}

func (o CaCertificateOutput) RemoveAutoRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.BoolPtrOutput { return v.RemoveAutoRegistration }).(pulumi.BoolPtrOutput)
}

func (o CaCertificateOutput) Status() CaCertificateStatusOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateStatusOutput { return v.Status }).(CaCertificateStatusOutput)
}

// An array of key-value pairs to apply to this resource.
func (o CaCertificateOutput) Tags() CaCertificateTagArrayOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateTagArrayOutput { return v.Tags }).(CaCertificateTagArrayOutput)
}

// The private key verification certificate.
func (o CaCertificateOutput) VerificationCertificatePem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringPtrOutput { return v.VerificationCertificatePem }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaCertificateInput)(nil)).Elem(), &CaCertificate{})
	pulumi.RegisterOutputType(CaCertificateOutput{})
}
