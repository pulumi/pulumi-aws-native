// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers a CA Certificate in IoT.
type CaCertificate struct {
	pulumi.CustomResourceState

	// Returns the Amazon Resource Name (ARN) for the CA certificate. For example:
	//
	// `{ "Fn::GetAtt": ["MyCACertificate", "Arn"] }`
	//
	// A value similar to the following is returned:
	//
	// `arn:aws:iot:us-east-1:123456789012:cacert/a6be6b84559801927e35a8f901fae08b5971d78d1562e29504ff9663b276a5f5`
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Whether the CA certificate is configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE".
	AutoRegistrationStatus CaCertificateAutoRegistrationStatusPtrOutput `pulumi:"autoRegistrationStatus"`
	// The CA certificate ID.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The certificate data in PEM format.
	CaCertificatePem pulumi.StringOutput `pulumi:"caCertificatePem"`
	// The mode of the CA.
	//
	// All the device certificates that are registered using this CA will be registered in the same mode as the CA. For more information about certificate mode for device certificates, see [certificate mode](https://docs.aws.amazon.com//iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode) .
	//
	// Valid values are "DEFAULT" and "SNI_ONLY".
	CertificateMode CaCertificateCertificateModePtrOutput `pulumi:"certificateMode"`
	// Information about the registration configuration.
	RegistrationConfig CaCertificateRegistrationConfigPtrOutput `pulumi:"registrationConfig"`
	// If true, removes auto registration.
	RemoveAutoRegistration pulumi.BoolPtrOutput `pulumi:"removeAutoRegistration"`
	// The status of the CA certificate.
	//
	// Valid values are "ACTIVE" and "INACTIVE".
	Status CaCertificateStatusOutput `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The private key verification certificate.
	VerificationCertificatePem pulumi.StringPtrOutput `pulumi:"verificationCertificatePem"`
}

// NewCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewCaCertificate(ctx *pulumi.Context,
	name string, args *CaCertificateArgs, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CaCertificatePem == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificatePem'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"caCertificatePem",
		"certificateMode",
		"verificationCertificatePem",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CaCertificate
	err := ctx.RegisterResource("aws-native:iot:CaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaCertificate gets an existing CaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaCertificateState, opts ...pulumi.ResourceOption) (*CaCertificate, error) {
	var resource CaCertificate
	err := ctx.ReadResource("aws-native:iot:CaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CaCertificate resources.
type caCertificateState struct {
}

type CaCertificateState struct {
}

func (CaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateState)(nil)).Elem()
}

type caCertificateArgs struct {
	// Whether the CA certificate is configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE".
	AutoRegistrationStatus *CaCertificateAutoRegistrationStatus `pulumi:"autoRegistrationStatus"`
	// The certificate data in PEM format.
	CaCertificatePem string `pulumi:"caCertificatePem"`
	// The mode of the CA.
	//
	// All the device certificates that are registered using this CA will be registered in the same mode as the CA. For more information about certificate mode for device certificates, see [certificate mode](https://docs.aws.amazon.com//iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode) .
	//
	// Valid values are "DEFAULT" and "SNI_ONLY".
	CertificateMode *CaCertificateCertificateMode `pulumi:"certificateMode"`
	// Information about the registration configuration.
	RegistrationConfig *CaCertificateRegistrationConfig `pulumi:"registrationConfig"`
	// If true, removes auto registration.
	RemoveAutoRegistration *bool `pulumi:"removeAutoRegistration"`
	// The status of the CA certificate.
	//
	// Valid values are "ACTIVE" and "INACTIVE".
	Status CaCertificateStatus `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// The private key verification certificate.
	VerificationCertificatePem *string `pulumi:"verificationCertificatePem"`
}

// The set of arguments for constructing a CaCertificate resource.
type CaCertificateArgs struct {
	// Whether the CA certificate is configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE".
	AutoRegistrationStatus CaCertificateAutoRegistrationStatusPtrInput
	// The certificate data in PEM format.
	CaCertificatePem pulumi.StringInput
	// The mode of the CA.
	//
	// All the device certificates that are registered using this CA will be registered in the same mode as the CA. For more information about certificate mode for device certificates, see [certificate mode](https://docs.aws.amazon.com//iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode) .
	//
	// Valid values are "DEFAULT" and "SNI_ONLY".
	CertificateMode CaCertificateCertificateModePtrInput
	// Information about the registration configuration.
	RegistrationConfig CaCertificateRegistrationConfigPtrInput
	// If true, removes auto registration.
	RemoveAutoRegistration pulumi.BoolPtrInput
	// The status of the CA certificate.
	//
	// Valid values are "ACTIVE" and "INACTIVE".
	Status CaCertificateStatusInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
	// The private key verification certificate.
	VerificationCertificatePem pulumi.StringPtrInput
}

func (CaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*caCertificateArgs)(nil)).Elem()
}

type CaCertificateInput interface {
	pulumi.Input

	ToCaCertificateOutput() CaCertificateOutput
	ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput
}

func (*CaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CaCertificate)(nil)).Elem()
}

func (i *CaCertificate) ToCaCertificateOutput() CaCertificateOutput {
	return i.ToCaCertificateOutputWithContext(context.Background())
}

func (i *CaCertificate) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaCertificateOutput)
}

type CaCertificateOutput struct{ *pulumi.OutputState }

func (CaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaCertificate)(nil)).Elem()
}

func (o CaCertificateOutput) ToCaCertificateOutput() CaCertificateOutput {
	return o
}

func (o CaCertificateOutput) ToCaCertificateOutputWithContext(ctx context.Context) CaCertificateOutput {
	return o
}

// Returns the Amazon Resource Name (ARN) for the CA certificate. For example:
//
// `{ "Fn::GetAtt": ["MyCACertificate", "Arn"] }`
//
// A value similar to the following is returned:
//
// `arn:aws:iot:us-east-1:123456789012:cacert/a6be6b84559801927e35a8f901fae08b5971d78d1562e29504ff9663b276a5f5`
func (o CaCertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Whether the CA certificate is configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE".
func (o CaCertificateOutput) AutoRegistrationStatus() CaCertificateAutoRegistrationStatusPtrOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateAutoRegistrationStatusPtrOutput { return v.AutoRegistrationStatus }).(CaCertificateAutoRegistrationStatusPtrOutput)
}

// The CA certificate ID.
func (o CaCertificateOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The certificate data in PEM format.
func (o CaCertificateOutput) CaCertificatePem() pulumi.StringOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringOutput { return v.CaCertificatePem }).(pulumi.StringOutput)
}

// The mode of the CA.
//
// All the device certificates that are registered using this CA will be registered in the same mode as the CA. For more information about certificate mode for device certificates, see [certificate mode](https://docs.aws.amazon.com//iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode) .
//
// Valid values are "DEFAULT" and "SNI_ONLY".
func (o CaCertificateOutput) CertificateMode() CaCertificateCertificateModePtrOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateCertificateModePtrOutput { return v.CertificateMode }).(CaCertificateCertificateModePtrOutput)
}

// Information about the registration configuration.
func (o CaCertificateOutput) RegistrationConfig() CaCertificateRegistrationConfigPtrOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateRegistrationConfigPtrOutput { return v.RegistrationConfig }).(CaCertificateRegistrationConfigPtrOutput)
}

// If true, removes auto registration.
func (o CaCertificateOutput) RemoveAutoRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.BoolPtrOutput { return v.RemoveAutoRegistration }).(pulumi.BoolPtrOutput)
}

// The status of the CA certificate.
//
// Valid values are "ACTIVE" and "INACTIVE".
func (o CaCertificateOutput) Status() CaCertificateStatusOutput {
	return o.ApplyT(func(v *CaCertificate) CaCertificateStatusOutput { return v.Status }).(CaCertificateStatusOutput)
}

// An array of key-value pairs to apply to this resource.
func (o CaCertificateOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *CaCertificate) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The private key verification certificate.
func (o CaCertificateOutput) VerificationCertificatePem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaCertificate) pulumi.StringPtrOutput { return v.VerificationCertificatePem }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaCertificateInput)(nil)).Elem(), &CaCertificate{})
	pulumi.RegisterOutputType(CaCertificateOutput{})
}
