// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// resource definition
func LookupSoftwarePackageVersion(ctx *pulumi.Context, args *LookupSoftwarePackageVersionArgs, opts ...pulumi.InvokeOption) (*LookupSoftwarePackageVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSoftwarePackageVersionResult
	err := ctx.Invoke("aws-native:iot:getSoftwarePackageVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSoftwarePackageVersionArgs struct {
	PackageName string `pulumi:"packageName"`
	VersionName string `pulumi:"versionName"`
}

type LookupSoftwarePackageVersionResult struct {
	Attributes        *SoftwarePackageVersionResourceAttributes   `pulumi:"attributes"`
	Description       *string                                     `pulumi:"description"`
	ErrorReason       *string                                     `pulumi:"errorReason"`
	PackageVersionArn *string                                     `pulumi:"packageVersionArn"`
	Status            *SoftwarePackageVersionPackageVersionStatus `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []SoftwarePackageVersionTag `pulumi:"tags"`
}

func LookupSoftwarePackageVersionOutput(ctx *pulumi.Context, args LookupSoftwarePackageVersionOutputArgs, opts ...pulumi.InvokeOption) LookupSoftwarePackageVersionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSoftwarePackageVersionResult, error) {
			args := v.(LookupSoftwarePackageVersionArgs)
			r, err := LookupSoftwarePackageVersion(ctx, &args, opts...)
			var s LookupSoftwarePackageVersionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSoftwarePackageVersionResultOutput)
}

type LookupSoftwarePackageVersionOutputArgs struct {
	PackageName pulumi.StringInput `pulumi:"packageName"`
	VersionName pulumi.StringInput `pulumi:"versionName"`
}

func (LookupSoftwarePackageVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwarePackageVersionArgs)(nil)).Elem()
}

type LookupSoftwarePackageVersionResultOutput struct{ *pulumi.OutputState }

func (LookupSoftwarePackageVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwarePackageVersionResult)(nil)).Elem()
}

func (o LookupSoftwarePackageVersionResultOutput) ToLookupSoftwarePackageVersionResultOutput() LookupSoftwarePackageVersionResultOutput {
	return o
}

func (o LookupSoftwarePackageVersionResultOutput) ToLookupSoftwarePackageVersionResultOutputWithContext(ctx context.Context) LookupSoftwarePackageVersionResultOutput {
	return o
}

func (o LookupSoftwarePackageVersionResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSoftwarePackageVersionResult] {
	return pulumix.Output[LookupSoftwarePackageVersionResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSoftwarePackageVersionResultOutput) Attributes() SoftwarePackageVersionResourceAttributesPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *SoftwarePackageVersionResourceAttributes {
		return v.Attributes
	}).(SoftwarePackageVersionResourceAttributesPtrOutput)
}

func (o LookupSoftwarePackageVersionResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupSoftwarePackageVersionResultOutput) ErrorReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *string { return v.ErrorReason }).(pulumi.StringPtrOutput)
}

func (o LookupSoftwarePackageVersionResultOutput) PackageVersionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *string { return v.PackageVersionArn }).(pulumi.StringPtrOutput)
}

func (o LookupSoftwarePackageVersionResultOutput) Status() SoftwarePackageVersionPackageVersionStatusPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *SoftwarePackageVersionPackageVersionStatus {
		return v.Status
	}).(SoftwarePackageVersionPackageVersionStatusPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupSoftwarePackageVersionResultOutput) Tags() SoftwarePackageVersionTagArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) []SoftwarePackageVersionTag { return v.Tags }).(SoftwarePackageVersionTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSoftwarePackageVersionResultOutput{})
}
