// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// resource definition
func LookupSoftwarePackageVersion(ctx *pulumi.Context, args *LookupSoftwarePackageVersionArgs, opts ...pulumi.InvokeOption) (*LookupSoftwarePackageVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSoftwarePackageVersionResult
	err := ctx.Invoke("aws-native:iot:getSoftwarePackageVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSoftwarePackageVersionArgs struct {
	// The name of the associated software package.
	PackageName string `pulumi:"packageName"`
	// The name of the new package version.
	VersionName string `pulumi:"versionName"`
}

type LookupSoftwarePackageVersionResult struct {
	// Metadata that can be used to define a package version’s configuration. For example, the S3 file location, configuration options that are being sent to the device or fleet.
	//
	// The combined size of all the attributes on a package version is limited to 3KB.
	Attributes map[string]string `pulumi:"attributes"`
	// A summary of the package version being created. This can be used to outline the package's contents or purpose.
	Description *string `pulumi:"description"`
	// Error reason for a package version failure during creation or update.
	ErrorReason *string `pulumi:"errorReason"`
	// The Amazon Resource Name (ARN) for the package.
	PackageVersionArn *string `pulumi:"packageVersionArn"`
	// The status of the package version. For more information, see [Package version lifecycle](https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle) .
	Status *SoftwarePackageVersionPackageVersionStatus `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupSoftwarePackageVersionOutput(ctx *pulumi.Context, args LookupSoftwarePackageVersionOutputArgs, opts ...pulumi.InvokeOption) LookupSoftwarePackageVersionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSoftwarePackageVersionResultOutput, error) {
			args := v.(LookupSoftwarePackageVersionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:iot:getSoftwarePackageVersion", args, LookupSoftwarePackageVersionResultOutput{}, options).(LookupSoftwarePackageVersionResultOutput), nil
		}).(LookupSoftwarePackageVersionResultOutput)
}

type LookupSoftwarePackageVersionOutputArgs struct {
	// The name of the associated software package.
	PackageName pulumi.StringInput `pulumi:"packageName"`
	// The name of the new package version.
	VersionName pulumi.StringInput `pulumi:"versionName"`
}

func (LookupSoftwarePackageVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwarePackageVersionArgs)(nil)).Elem()
}

type LookupSoftwarePackageVersionResultOutput struct{ *pulumi.OutputState }

func (LookupSoftwarePackageVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwarePackageVersionResult)(nil)).Elem()
}

func (o LookupSoftwarePackageVersionResultOutput) ToLookupSoftwarePackageVersionResultOutput() LookupSoftwarePackageVersionResultOutput {
	return o
}

func (o LookupSoftwarePackageVersionResultOutput) ToLookupSoftwarePackageVersionResultOutputWithContext(ctx context.Context) LookupSoftwarePackageVersionResultOutput {
	return o
}

// Metadata that can be used to define a package version’s configuration. For example, the S3 file location, configuration options that are being sent to the device or fleet.
//
// The combined size of all the attributes on a package version is limited to 3KB.
func (o LookupSoftwarePackageVersionResultOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// A summary of the package version being created. This can be used to outline the package's contents or purpose.
func (o LookupSoftwarePackageVersionResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Error reason for a package version failure during creation or update.
func (o LookupSoftwarePackageVersionResultOutput) ErrorReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *string { return v.ErrorReason }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the package.
func (o LookupSoftwarePackageVersionResultOutput) PackageVersionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *string { return v.PackageVersionArn }).(pulumi.StringPtrOutput)
}

// The status of the package version. For more information, see [Package version lifecycle](https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle) .
func (o LookupSoftwarePackageVersionResultOutput) Status() SoftwarePackageVersionPackageVersionStatusPtrOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) *SoftwarePackageVersionPackageVersionStatus {
		return v.Status
	}).(SoftwarePackageVersionPackageVersionStatusPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupSoftwarePackageVersionResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupSoftwarePackageVersionResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSoftwarePackageVersionResultOutput{})
}
