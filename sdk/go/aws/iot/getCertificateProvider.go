// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the AWS::IoT::CertificateProvider resource to declare an AWS IoT Certificate Provider.
func LookupCertificateProvider(ctx *pulumi.Context, args *LookupCertificateProviderArgs, opts ...pulumi.InvokeOption) (*LookupCertificateProviderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateProviderResult
	err := ctx.Invoke("aws-native:iot:getCertificateProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCertificateProviderArgs struct {
	CertificateProviderName string `pulumi:"certificateProviderName"`
}

type LookupCertificateProviderResult struct {
	AccountDefaultForOperations []CertificateProviderOperation `pulumi:"accountDefaultForOperations"`
	Arn                         *string                        `pulumi:"arn"`
	LambdaFunctionArn           *string                        `pulumi:"lambdaFunctionArn"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupCertificateProviderOutput(ctx *pulumi.Context, args LookupCertificateProviderOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateProviderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateProviderResult, error) {
			args := v.(LookupCertificateProviderArgs)
			r, err := LookupCertificateProvider(ctx, &args, opts...)
			var s LookupCertificateProviderResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertificateProviderResultOutput)
}

type LookupCertificateProviderOutputArgs struct {
	CertificateProviderName pulumi.StringInput `pulumi:"certificateProviderName"`
}

func (LookupCertificateProviderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateProviderArgs)(nil)).Elem()
}

type LookupCertificateProviderResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateProviderResult)(nil)).Elem()
}

func (o LookupCertificateProviderResultOutput) ToLookupCertificateProviderResultOutput() LookupCertificateProviderResultOutput {
	return o
}

func (o LookupCertificateProviderResultOutput) ToLookupCertificateProviderResultOutputWithContext(ctx context.Context) LookupCertificateProviderResultOutput {
	return o
}

func (o LookupCertificateProviderResultOutput) AccountDefaultForOperations() CertificateProviderOperationArrayOutput {
	return o.ApplyT(func(v LookupCertificateProviderResult) []CertificateProviderOperation {
		return v.AccountDefaultForOperations
	}).(CertificateProviderOperationArrayOutput)
}

func (o LookupCertificateProviderResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateProviderResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupCertificateProviderResultOutput) LambdaFunctionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificateProviderResult) *string { return v.LambdaFunctionArn }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupCertificateProviderResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupCertificateProviderResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateProviderResultOutput{})
}
