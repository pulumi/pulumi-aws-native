// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanrooms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a table that can be associated with collaborations
func LookupConfiguredTable(ctx *pulumi.Context, args *LookupConfiguredTableArgs, opts ...pulumi.InvokeOption) (*LookupConfiguredTableResult, error) {
	var rv LookupConfiguredTableResult
	err := ctx.Invoke("aws-native:cleanrooms:getConfiguredTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConfiguredTableArgs struct {
	ConfiguredTableIdentifier string `pulumi:"configuredTableIdentifier"`
}

type LookupConfiguredTableResult struct {
	AnalysisRules             []ConfiguredTableAnalysisRule `pulumi:"analysisRules"`
	Arn                       *string                       `pulumi:"arn"`
	ConfiguredTableIdentifier *string                       `pulumi:"configuredTableIdentifier"`
	Description               *string                       `pulumi:"description"`
	Name                      *string                       `pulumi:"name"`
	// An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
	Tags []ConfiguredTableTag `pulumi:"tags"`
}

func LookupConfiguredTableOutput(ctx *pulumi.Context, args LookupConfiguredTableOutputArgs, opts ...pulumi.InvokeOption) LookupConfiguredTableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConfiguredTableResult, error) {
			args := v.(LookupConfiguredTableArgs)
			r, err := LookupConfiguredTable(ctx, &args, opts...)
			var s LookupConfiguredTableResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConfiguredTableResultOutput)
}

type LookupConfiguredTableOutputArgs struct {
	ConfiguredTableIdentifier pulumi.StringInput `pulumi:"configuredTableIdentifier"`
}

func (LookupConfiguredTableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfiguredTableArgs)(nil)).Elem()
}

type LookupConfiguredTableResultOutput struct{ *pulumi.OutputState }

func (LookupConfiguredTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfiguredTableResult)(nil)).Elem()
}

func (o LookupConfiguredTableResultOutput) ToLookupConfiguredTableResultOutput() LookupConfiguredTableResultOutput {
	return o
}

func (o LookupConfiguredTableResultOutput) ToLookupConfiguredTableResultOutputWithContext(ctx context.Context) LookupConfiguredTableResultOutput {
	return o
}

func (o LookupConfiguredTableResultOutput) AnalysisRules() ConfiguredTableAnalysisRuleArrayOutput {
	return o.ApplyT(func(v LookupConfiguredTableResult) []ConfiguredTableAnalysisRule { return v.AnalysisRules }).(ConfiguredTableAnalysisRuleArrayOutput)
}

func (o LookupConfiguredTableResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConfiguredTableResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupConfiguredTableResultOutput) ConfiguredTableIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConfiguredTableResult) *string { return v.ConfiguredTableIdentifier }).(pulumi.StringPtrOutput)
}

func (o LookupConfiguredTableResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConfiguredTableResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupConfiguredTableResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConfiguredTableResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
func (o LookupConfiguredTableResultOutput) Tags() ConfiguredTableTagArrayOutput {
	return o.ApplyT(func(v LookupConfiguredTableResult) []ConfiguredTableTag { return v.Tags }).(ConfiguredTableTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConfiguredTableResultOutput{})
}
