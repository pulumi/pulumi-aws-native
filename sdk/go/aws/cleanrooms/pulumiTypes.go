// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanrooms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CollaborationDataEncryptionMetadata struct {
	AllowCleartext                        bool `pulumi:"allowCleartext"`
	AllowDuplicates                       bool `pulumi:"allowDuplicates"`
	AllowJoinsOnColumnsWithDifferentNames bool `pulumi:"allowJoinsOnColumnsWithDifferentNames"`
	PreserveNulls                         bool `pulumi:"preserveNulls"`
}

// CollaborationDataEncryptionMetadataInput is an input type that accepts CollaborationDataEncryptionMetadataArgs and CollaborationDataEncryptionMetadataOutput values.
// You can construct a concrete instance of `CollaborationDataEncryptionMetadataInput` via:
//
//	CollaborationDataEncryptionMetadataArgs{...}
type CollaborationDataEncryptionMetadataInput interface {
	pulumi.Input

	ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput
	ToCollaborationDataEncryptionMetadataOutputWithContext(context.Context) CollaborationDataEncryptionMetadataOutput
}

type CollaborationDataEncryptionMetadataArgs struct {
	AllowCleartext                        pulumi.BoolInput `pulumi:"allowCleartext"`
	AllowDuplicates                       pulumi.BoolInput `pulumi:"allowDuplicates"`
	AllowJoinsOnColumnsWithDifferentNames pulumi.BoolInput `pulumi:"allowJoinsOnColumnsWithDifferentNames"`
	PreserveNulls                         pulumi.BoolInput `pulumi:"preserveNulls"`
}

func (CollaborationDataEncryptionMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput {
	return i.ToCollaborationDataEncryptionMetadataOutputWithContext(context.Background())
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationDataEncryptionMetadataOutput)
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return i.ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Background())
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationDataEncryptionMetadataOutput).ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx)
}

// CollaborationDataEncryptionMetadataPtrInput is an input type that accepts CollaborationDataEncryptionMetadataArgs, CollaborationDataEncryptionMetadataPtr and CollaborationDataEncryptionMetadataPtrOutput values.
// You can construct a concrete instance of `CollaborationDataEncryptionMetadataPtrInput` via:
//
//	        CollaborationDataEncryptionMetadataArgs{...}
//
//	or:
//
//	        nil
type CollaborationDataEncryptionMetadataPtrInput interface {
	pulumi.Input

	ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput
	ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Context) CollaborationDataEncryptionMetadataPtrOutput
}

type collaborationDataEncryptionMetadataPtrType CollaborationDataEncryptionMetadataArgs

func CollaborationDataEncryptionMetadataPtr(v *CollaborationDataEncryptionMetadataArgs) CollaborationDataEncryptionMetadataPtrInput {
	return (*collaborationDataEncryptionMetadataPtrType)(v)
}

func (*collaborationDataEncryptionMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (i *collaborationDataEncryptionMetadataPtrType) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return i.ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Background())
}

func (i *collaborationDataEncryptionMetadataPtrType) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationDataEncryptionMetadataPtrOutput)
}

type CollaborationDataEncryptionMetadataOutput struct{ *pulumi.OutputState }

func (CollaborationDataEncryptionMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return o.ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Background())
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CollaborationDataEncryptionMetadata) *CollaborationDataEncryptionMetadata {
		return &v
	}).(CollaborationDataEncryptionMetadataPtrOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) AllowCleartext() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.AllowCleartext }).(pulumi.BoolOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) AllowDuplicates() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.AllowDuplicates }).(pulumi.BoolOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) AllowJoinsOnColumnsWithDifferentNames() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.AllowJoinsOnColumnsWithDifferentNames }).(pulumi.BoolOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) PreserveNulls() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.PreserveNulls }).(pulumi.BoolOutput)
}

type CollaborationDataEncryptionMetadataPtrOutput struct{ *pulumi.OutputState }

func (CollaborationDataEncryptionMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (o CollaborationDataEncryptionMetadataPtrOutput) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataPtrOutput) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataPtrOutput) Elem() CollaborationDataEncryptionMetadataOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) CollaborationDataEncryptionMetadata {
		if v != nil {
			return *v
		}
		var ret CollaborationDataEncryptionMetadata
		return ret
	}).(CollaborationDataEncryptionMetadataOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) AllowCleartext() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowCleartext
	}).(pulumi.BoolPtrOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) AllowDuplicates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowDuplicates
	}).(pulumi.BoolPtrOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) AllowJoinsOnColumnsWithDifferentNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowJoinsOnColumnsWithDifferentNames
	}).(pulumi.BoolPtrOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.PreserveNulls
	}).(pulumi.BoolPtrOutput)
}

type CollaborationMemberSpecification struct {
	AccountId       string                       `pulumi:"accountId"`
	DisplayName     string                       `pulumi:"displayName"`
	MemberAbilities []CollaborationMemberAbility `pulumi:"memberAbilities"`
}

// CollaborationMemberSpecificationInput is an input type that accepts CollaborationMemberSpecificationArgs and CollaborationMemberSpecificationOutput values.
// You can construct a concrete instance of `CollaborationMemberSpecificationInput` via:
//
//	CollaborationMemberSpecificationArgs{...}
type CollaborationMemberSpecificationInput interface {
	pulumi.Input

	ToCollaborationMemberSpecificationOutput() CollaborationMemberSpecificationOutput
	ToCollaborationMemberSpecificationOutputWithContext(context.Context) CollaborationMemberSpecificationOutput
}

type CollaborationMemberSpecificationArgs struct {
	AccountId       pulumi.StringInput                   `pulumi:"accountId"`
	DisplayName     pulumi.StringInput                   `pulumi:"displayName"`
	MemberAbilities CollaborationMemberAbilityArrayInput `pulumi:"memberAbilities"`
}

func (CollaborationMemberSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationMemberSpecification)(nil)).Elem()
}

func (i CollaborationMemberSpecificationArgs) ToCollaborationMemberSpecificationOutput() CollaborationMemberSpecificationOutput {
	return i.ToCollaborationMemberSpecificationOutputWithContext(context.Background())
}

func (i CollaborationMemberSpecificationArgs) ToCollaborationMemberSpecificationOutputWithContext(ctx context.Context) CollaborationMemberSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationMemberSpecificationOutput)
}

// CollaborationMemberSpecificationArrayInput is an input type that accepts CollaborationMemberSpecificationArray and CollaborationMemberSpecificationArrayOutput values.
// You can construct a concrete instance of `CollaborationMemberSpecificationArrayInput` via:
//
//	CollaborationMemberSpecificationArray{ CollaborationMemberSpecificationArgs{...} }
type CollaborationMemberSpecificationArrayInput interface {
	pulumi.Input

	ToCollaborationMemberSpecificationArrayOutput() CollaborationMemberSpecificationArrayOutput
	ToCollaborationMemberSpecificationArrayOutputWithContext(context.Context) CollaborationMemberSpecificationArrayOutput
}

type CollaborationMemberSpecificationArray []CollaborationMemberSpecificationInput

func (CollaborationMemberSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationMemberSpecification)(nil)).Elem()
}

func (i CollaborationMemberSpecificationArray) ToCollaborationMemberSpecificationArrayOutput() CollaborationMemberSpecificationArrayOutput {
	return i.ToCollaborationMemberSpecificationArrayOutputWithContext(context.Background())
}

func (i CollaborationMemberSpecificationArray) ToCollaborationMemberSpecificationArrayOutputWithContext(ctx context.Context) CollaborationMemberSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationMemberSpecificationArrayOutput)
}

type CollaborationMemberSpecificationOutput struct{ *pulumi.OutputState }

func (CollaborationMemberSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationMemberSpecification)(nil)).Elem()
}

func (o CollaborationMemberSpecificationOutput) ToCollaborationMemberSpecificationOutput() CollaborationMemberSpecificationOutput {
	return o
}

func (o CollaborationMemberSpecificationOutput) ToCollaborationMemberSpecificationOutputWithContext(ctx context.Context) CollaborationMemberSpecificationOutput {
	return o
}

func (o CollaborationMemberSpecificationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationMemberSpecification) string { return v.AccountId }).(pulumi.StringOutput)
}

func (o CollaborationMemberSpecificationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationMemberSpecification) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o CollaborationMemberSpecificationOutput) MemberAbilities() CollaborationMemberAbilityArrayOutput {
	return o.ApplyT(func(v CollaborationMemberSpecification) []CollaborationMemberAbility { return v.MemberAbilities }).(CollaborationMemberAbilityArrayOutput)
}

type CollaborationMemberSpecificationArrayOutput struct{ *pulumi.OutputState }

func (CollaborationMemberSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationMemberSpecification)(nil)).Elem()
}

func (o CollaborationMemberSpecificationArrayOutput) ToCollaborationMemberSpecificationArrayOutput() CollaborationMemberSpecificationArrayOutput {
	return o
}

func (o CollaborationMemberSpecificationArrayOutput) ToCollaborationMemberSpecificationArrayOutputWithContext(ctx context.Context) CollaborationMemberSpecificationArrayOutput {
	return o
}

func (o CollaborationMemberSpecificationArrayOutput) Index(i pulumi.IntInput) CollaborationMemberSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CollaborationMemberSpecification {
		return vs[0].([]CollaborationMemberSpecification)[vs[1].(int)]
	}).(CollaborationMemberSpecificationOutput)
}

type CollaborationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// CollaborationTagInput is an input type that accepts CollaborationTagArgs and CollaborationTagOutput values.
// You can construct a concrete instance of `CollaborationTagInput` via:
//
//	CollaborationTagArgs{...}
type CollaborationTagInput interface {
	pulumi.Input

	ToCollaborationTagOutput() CollaborationTagOutput
	ToCollaborationTagOutputWithContext(context.Context) CollaborationTagOutput
}

type CollaborationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (CollaborationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationTag)(nil)).Elem()
}

func (i CollaborationTagArgs) ToCollaborationTagOutput() CollaborationTagOutput {
	return i.ToCollaborationTagOutputWithContext(context.Background())
}

func (i CollaborationTagArgs) ToCollaborationTagOutputWithContext(ctx context.Context) CollaborationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationTagOutput)
}

// CollaborationTagArrayInput is an input type that accepts CollaborationTagArray and CollaborationTagArrayOutput values.
// You can construct a concrete instance of `CollaborationTagArrayInput` via:
//
//	CollaborationTagArray{ CollaborationTagArgs{...} }
type CollaborationTagArrayInput interface {
	pulumi.Input

	ToCollaborationTagArrayOutput() CollaborationTagArrayOutput
	ToCollaborationTagArrayOutputWithContext(context.Context) CollaborationTagArrayOutput
}

type CollaborationTagArray []CollaborationTagInput

func (CollaborationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationTag)(nil)).Elem()
}

func (i CollaborationTagArray) ToCollaborationTagArrayOutput() CollaborationTagArrayOutput {
	return i.ToCollaborationTagArrayOutputWithContext(context.Background())
}

func (i CollaborationTagArray) ToCollaborationTagArrayOutputWithContext(ctx context.Context) CollaborationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationTagArrayOutput)
}

type CollaborationTagOutput struct{ *pulumi.OutputState }

func (CollaborationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationTag)(nil)).Elem()
}

func (o CollaborationTagOutput) ToCollaborationTagOutput() CollaborationTagOutput {
	return o
}

func (o CollaborationTagOutput) ToCollaborationTagOutputWithContext(ctx context.Context) CollaborationTagOutput {
	return o
}

func (o CollaborationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o CollaborationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationTag) string { return v.Value }).(pulumi.StringOutput)
}

type CollaborationTagArrayOutput struct{ *pulumi.OutputState }

func (CollaborationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationTag)(nil)).Elem()
}

func (o CollaborationTagArrayOutput) ToCollaborationTagArrayOutput() CollaborationTagArrayOutput {
	return o
}

func (o CollaborationTagArrayOutput) ToCollaborationTagArrayOutputWithContext(ctx context.Context) CollaborationTagArrayOutput {
	return o
}

func (o CollaborationTagArrayOutput) Index(i pulumi.IntInput) CollaborationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CollaborationTag {
		return vs[0].([]CollaborationTag)[vs[1].(int)]
	}).(CollaborationTagOutput)
}

type ConfiguredTableAnalysisRule struct {
	Policy ConfiguredTableAnalysisRulePolicy `pulumi:"policy"`
	Type   ConfiguredTableAnalysisRuleType   `pulumi:"type"`
}

// ConfiguredTableAnalysisRuleInput is an input type that accepts ConfiguredTableAnalysisRuleArgs and ConfiguredTableAnalysisRuleOutput values.
// You can construct a concrete instance of `ConfiguredTableAnalysisRuleInput` via:
//
//	ConfiguredTableAnalysisRuleArgs{...}
type ConfiguredTableAnalysisRuleInput interface {
	pulumi.Input

	ToConfiguredTableAnalysisRuleOutput() ConfiguredTableAnalysisRuleOutput
	ToConfiguredTableAnalysisRuleOutputWithContext(context.Context) ConfiguredTableAnalysisRuleOutput
}

type ConfiguredTableAnalysisRuleArgs struct {
	Policy ConfiguredTableAnalysisRulePolicyInput `pulumi:"policy"`
	Type   ConfiguredTableAnalysisRuleTypeInput   `pulumi:"type"`
}

func (ConfiguredTableAnalysisRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (i ConfiguredTableAnalysisRuleArgs) ToConfiguredTableAnalysisRuleOutput() ConfiguredTableAnalysisRuleOutput {
	return i.ToConfiguredTableAnalysisRuleOutputWithContext(context.Background())
}

func (i ConfiguredTableAnalysisRuleArgs) ToConfiguredTableAnalysisRuleOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAnalysisRuleOutput)
}

// ConfiguredTableAnalysisRuleArrayInput is an input type that accepts ConfiguredTableAnalysisRuleArray and ConfiguredTableAnalysisRuleArrayOutput values.
// You can construct a concrete instance of `ConfiguredTableAnalysisRuleArrayInput` via:
//
//	ConfiguredTableAnalysisRuleArray{ ConfiguredTableAnalysisRuleArgs{...} }
type ConfiguredTableAnalysisRuleArrayInput interface {
	pulumi.Input

	ToConfiguredTableAnalysisRuleArrayOutput() ConfiguredTableAnalysisRuleArrayOutput
	ToConfiguredTableAnalysisRuleArrayOutputWithContext(context.Context) ConfiguredTableAnalysisRuleArrayOutput
}

type ConfiguredTableAnalysisRuleArray []ConfiguredTableAnalysisRuleInput

func (ConfiguredTableAnalysisRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (i ConfiguredTableAnalysisRuleArray) ToConfiguredTableAnalysisRuleArrayOutput() ConfiguredTableAnalysisRuleArrayOutput {
	return i.ToConfiguredTableAnalysisRuleArrayOutputWithContext(context.Background())
}

func (i ConfiguredTableAnalysisRuleArray) ToConfiguredTableAnalysisRuleArrayOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAnalysisRuleArrayOutput)
}

type ConfiguredTableAnalysisRuleOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAnalysisRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (o ConfiguredTableAnalysisRuleOutput) ToConfiguredTableAnalysisRuleOutput() ConfiguredTableAnalysisRuleOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleOutput) ToConfiguredTableAnalysisRuleOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleOutput) Policy() ConfiguredTableAnalysisRulePolicyOutput {
	return o.ApplyT(func(v ConfiguredTableAnalysisRule) ConfiguredTableAnalysisRulePolicy { return v.Policy }).(ConfiguredTableAnalysisRulePolicyOutput)
}

func (o ConfiguredTableAnalysisRuleOutput) Type() ConfiguredTableAnalysisRuleTypeOutput {
	return o.ApplyT(func(v ConfiguredTableAnalysisRule) ConfiguredTableAnalysisRuleType { return v.Type }).(ConfiguredTableAnalysisRuleTypeOutput)
}

type ConfiguredTableAnalysisRuleArrayOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAnalysisRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (o ConfiguredTableAnalysisRuleArrayOutput) ToConfiguredTableAnalysisRuleArrayOutput() ConfiguredTableAnalysisRuleArrayOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleArrayOutput) ToConfiguredTableAnalysisRuleArrayOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleArrayOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleArrayOutput) Index(i pulumi.IntInput) ConfiguredTableAnalysisRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfiguredTableAnalysisRule {
		return vs[0].([]ConfiguredTableAnalysisRule)[vs[1].(int)]
	}).(ConfiguredTableAnalysisRuleOutput)
}

type ConfiguredTableAnalysisRulePolicy struct {
	V1 ConfiguredTableAnalysisRulePolicyV1 `pulumi:"v1"`
}

// ConfiguredTableAnalysisRulePolicyInput is an input type that accepts ConfiguredTableAnalysisRulePolicyArgs and ConfiguredTableAnalysisRulePolicyOutput values.
// You can construct a concrete instance of `ConfiguredTableAnalysisRulePolicyInput` via:
//
//	ConfiguredTableAnalysisRulePolicyArgs{...}
type ConfiguredTableAnalysisRulePolicyInput interface {
	pulumi.Input

	ToConfiguredTableAnalysisRulePolicyOutput() ConfiguredTableAnalysisRulePolicyOutput
	ToConfiguredTableAnalysisRulePolicyOutputWithContext(context.Context) ConfiguredTableAnalysisRulePolicyOutput
}

type ConfiguredTableAnalysisRulePolicyArgs struct {
	V1 ConfiguredTableAnalysisRulePolicyV1Input `pulumi:"v1"`
}

func (ConfiguredTableAnalysisRulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRulePolicy)(nil)).Elem()
}

func (i ConfiguredTableAnalysisRulePolicyArgs) ToConfiguredTableAnalysisRulePolicyOutput() ConfiguredTableAnalysisRulePolicyOutput {
	return i.ToConfiguredTableAnalysisRulePolicyOutputWithContext(context.Background())
}

func (i ConfiguredTableAnalysisRulePolicyArgs) ToConfiguredTableAnalysisRulePolicyOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAnalysisRulePolicyOutput)
}

type ConfiguredTableAnalysisRulePolicyOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAnalysisRulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRulePolicy)(nil)).Elem()
}

func (o ConfiguredTableAnalysisRulePolicyOutput) ToConfiguredTableAnalysisRulePolicyOutput() ConfiguredTableAnalysisRulePolicyOutput {
	return o
}

func (o ConfiguredTableAnalysisRulePolicyOutput) ToConfiguredTableAnalysisRulePolicyOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRulePolicyOutput {
	return o
}

func (o ConfiguredTableAnalysisRulePolicyOutput) V1() ConfiguredTableAnalysisRulePolicyV1Output {
	return o.ApplyT(func(v ConfiguredTableAnalysisRulePolicy) ConfiguredTableAnalysisRulePolicyV1 { return v.V1 }).(ConfiguredTableAnalysisRulePolicyV1Output)
}

type ConfiguredTableAnalysisRulePolicyV1 struct {
}

// ConfiguredTableAnalysisRulePolicyV1Input is an input type that accepts ConfiguredTableAnalysisRulePolicyV1Args and ConfiguredTableAnalysisRulePolicyV1Output values.
// You can construct a concrete instance of `ConfiguredTableAnalysisRulePolicyV1Input` via:
//
//	ConfiguredTableAnalysisRulePolicyV1Args{...}
type ConfiguredTableAnalysisRulePolicyV1Input interface {
	pulumi.Input

	ToConfiguredTableAnalysisRulePolicyV1Output() ConfiguredTableAnalysisRulePolicyV1Output
	ToConfiguredTableAnalysisRulePolicyV1OutputWithContext(context.Context) ConfiguredTableAnalysisRulePolicyV1Output
}

type ConfiguredTableAnalysisRulePolicyV1Args struct {
}

func (ConfiguredTableAnalysisRulePolicyV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRulePolicyV1)(nil)).Elem()
}

func (i ConfiguredTableAnalysisRulePolicyV1Args) ToConfiguredTableAnalysisRulePolicyV1Output() ConfiguredTableAnalysisRulePolicyV1Output {
	return i.ToConfiguredTableAnalysisRulePolicyV1OutputWithContext(context.Background())
}

func (i ConfiguredTableAnalysisRulePolicyV1Args) ToConfiguredTableAnalysisRulePolicyV1OutputWithContext(ctx context.Context) ConfiguredTableAnalysisRulePolicyV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAnalysisRulePolicyV1Output)
}

type ConfiguredTableAnalysisRulePolicyV1Output struct{ *pulumi.OutputState }

func (ConfiguredTableAnalysisRulePolicyV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRulePolicyV1)(nil)).Elem()
}

func (o ConfiguredTableAnalysisRulePolicyV1Output) ToConfiguredTableAnalysisRulePolicyV1Output() ConfiguredTableAnalysisRulePolicyV1Output {
	return o
}

func (o ConfiguredTableAnalysisRulePolicyV1Output) ToConfiguredTableAnalysisRulePolicyV1OutputWithContext(ctx context.Context) ConfiguredTableAnalysisRulePolicyV1Output {
	return o
}

type ConfiguredTableAssociationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ConfiguredTableAssociationTagInput is an input type that accepts ConfiguredTableAssociationTagArgs and ConfiguredTableAssociationTagOutput values.
// You can construct a concrete instance of `ConfiguredTableAssociationTagInput` via:
//
//	ConfiguredTableAssociationTagArgs{...}
type ConfiguredTableAssociationTagInput interface {
	pulumi.Input

	ToConfiguredTableAssociationTagOutput() ConfiguredTableAssociationTagOutput
	ToConfiguredTableAssociationTagOutputWithContext(context.Context) ConfiguredTableAssociationTagOutput
}

type ConfiguredTableAssociationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConfiguredTableAssociationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAssociationTag)(nil)).Elem()
}

func (i ConfiguredTableAssociationTagArgs) ToConfiguredTableAssociationTagOutput() ConfiguredTableAssociationTagOutput {
	return i.ToConfiguredTableAssociationTagOutputWithContext(context.Background())
}

func (i ConfiguredTableAssociationTagArgs) ToConfiguredTableAssociationTagOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAssociationTagOutput)
}

// ConfiguredTableAssociationTagArrayInput is an input type that accepts ConfiguredTableAssociationTagArray and ConfiguredTableAssociationTagArrayOutput values.
// You can construct a concrete instance of `ConfiguredTableAssociationTagArrayInput` via:
//
//	ConfiguredTableAssociationTagArray{ ConfiguredTableAssociationTagArgs{...} }
type ConfiguredTableAssociationTagArrayInput interface {
	pulumi.Input

	ToConfiguredTableAssociationTagArrayOutput() ConfiguredTableAssociationTagArrayOutput
	ToConfiguredTableAssociationTagArrayOutputWithContext(context.Context) ConfiguredTableAssociationTagArrayOutput
}

type ConfiguredTableAssociationTagArray []ConfiguredTableAssociationTagInput

func (ConfiguredTableAssociationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAssociationTag)(nil)).Elem()
}

func (i ConfiguredTableAssociationTagArray) ToConfiguredTableAssociationTagArrayOutput() ConfiguredTableAssociationTagArrayOutput {
	return i.ToConfiguredTableAssociationTagArrayOutputWithContext(context.Background())
}

func (i ConfiguredTableAssociationTagArray) ToConfiguredTableAssociationTagArrayOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAssociationTagArrayOutput)
}

type ConfiguredTableAssociationTagOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAssociationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAssociationTag)(nil)).Elem()
}

func (o ConfiguredTableAssociationTagOutput) ToConfiguredTableAssociationTagOutput() ConfiguredTableAssociationTagOutput {
	return o
}

func (o ConfiguredTableAssociationTagOutput) ToConfiguredTableAssociationTagOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagOutput {
	return o
}

func (o ConfiguredTableAssociationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableAssociationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ConfiguredTableAssociationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableAssociationTag) string { return v.Value }).(pulumi.StringOutput)
}

type ConfiguredTableAssociationTagArrayOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAssociationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAssociationTag)(nil)).Elem()
}

func (o ConfiguredTableAssociationTagArrayOutput) ToConfiguredTableAssociationTagArrayOutput() ConfiguredTableAssociationTagArrayOutput {
	return o
}

func (o ConfiguredTableAssociationTagArrayOutput) ToConfiguredTableAssociationTagArrayOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagArrayOutput {
	return o
}

func (o ConfiguredTableAssociationTagArrayOutput) Index(i pulumi.IntInput) ConfiguredTableAssociationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfiguredTableAssociationTag {
		return vs[0].([]ConfiguredTableAssociationTag)[vs[1].(int)]
	}).(ConfiguredTableAssociationTagOutput)
}

type ConfiguredTableGlueTableReference struct {
	DatabaseName string `pulumi:"databaseName"`
	TableName    string `pulumi:"tableName"`
}

// ConfiguredTableGlueTableReferenceInput is an input type that accepts ConfiguredTableGlueTableReferenceArgs and ConfiguredTableGlueTableReferenceOutput values.
// You can construct a concrete instance of `ConfiguredTableGlueTableReferenceInput` via:
//
//	ConfiguredTableGlueTableReferenceArgs{...}
type ConfiguredTableGlueTableReferenceInput interface {
	pulumi.Input

	ToConfiguredTableGlueTableReferenceOutput() ConfiguredTableGlueTableReferenceOutput
	ToConfiguredTableGlueTableReferenceOutputWithContext(context.Context) ConfiguredTableGlueTableReferenceOutput
}

type ConfiguredTableGlueTableReferenceArgs struct {
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	TableName    pulumi.StringInput `pulumi:"tableName"`
}

func (ConfiguredTableGlueTableReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableGlueTableReference)(nil)).Elem()
}

func (i ConfiguredTableGlueTableReferenceArgs) ToConfiguredTableGlueTableReferenceOutput() ConfiguredTableGlueTableReferenceOutput {
	return i.ToConfiguredTableGlueTableReferenceOutputWithContext(context.Background())
}

func (i ConfiguredTableGlueTableReferenceArgs) ToConfiguredTableGlueTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableGlueTableReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableGlueTableReferenceOutput)
}

type ConfiguredTableGlueTableReferenceOutput struct{ *pulumi.OutputState }

func (ConfiguredTableGlueTableReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableGlueTableReference)(nil)).Elem()
}

func (o ConfiguredTableGlueTableReferenceOutput) ToConfiguredTableGlueTableReferenceOutput() ConfiguredTableGlueTableReferenceOutput {
	return o
}

func (o ConfiguredTableGlueTableReferenceOutput) ToConfiguredTableGlueTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableGlueTableReferenceOutput {
	return o
}

func (o ConfiguredTableGlueTableReferenceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableGlueTableReference) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o ConfiguredTableGlueTableReferenceOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableGlueTableReference) string { return v.TableName }).(pulumi.StringOutput)
}

type ConfiguredTableTableReference struct {
	Glue ConfiguredTableGlueTableReference `pulumi:"glue"`
}

// ConfiguredTableTableReferenceInput is an input type that accepts ConfiguredTableTableReferenceArgs and ConfiguredTableTableReferenceOutput values.
// You can construct a concrete instance of `ConfiguredTableTableReferenceInput` via:
//
//	ConfiguredTableTableReferenceArgs{...}
type ConfiguredTableTableReferenceInput interface {
	pulumi.Input

	ToConfiguredTableTableReferenceOutput() ConfiguredTableTableReferenceOutput
	ToConfiguredTableTableReferenceOutputWithContext(context.Context) ConfiguredTableTableReferenceOutput
}

type ConfiguredTableTableReferenceArgs struct {
	Glue ConfiguredTableGlueTableReferenceInput `pulumi:"glue"`
}

func (ConfiguredTableTableReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTableReference)(nil)).Elem()
}

func (i ConfiguredTableTableReferenceArgs) ToConfiguredTableTableReferenceOutput() ConfiguredTableTableReferenceOutput {
	return i.ToConfiguredTableTableReferenceOutputWithContext(context.Background())
}

func (i ConfiguredTableTableReferenceArgs) ToConfiguredTableTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableTableReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableTableReferenceOutput)
}

type ConfiguredTableTableReferenceOutput struct{ *pulumi.OutputState }

func (ConfiguredTableTableReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTableReference)(nil)).Elem()
}

func (o ConfiguredTableTableReferenceOutput) ToConfiguredTableTableReferenceOutput() ConfiguredTableTableReferenceOutput {
	return o
}

func (o ConfiguredTableTableReferenceOutput) ToConfiguredTableTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableTableReferenceOutput {
	return o
}

func (o ConfiguredTableTableReferenceOutput) Glue() ConfiguredTableGlueTableReferenceOutput {
	return o.ApplyT(func(v ConfiguredTableTableReference) ConfiguredTableGlueTableReference { return v.Glue }).(ConfiguredTableGlueTableReferenceOutput)
}

type ConfiguredTableTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ConfiguredTableTagInput is an input type that accepts ConfiguredTableTagArgs and ConfiguredTableTagOutput values.
// You can construct a concrete instance of `ConfiguredTableTagInput` via:
//
//	ConfiguredTableTagArgs{...}
type ConfiguredTableTagInput interface {
	pulumi.Input

	ToConfiguredTableTagOutput() ConfiguredTableTagOutput
	ToConfiguredTableTagOutputWithContext(context.Context) ConfiguredTableTagOutput
}

type ConfiguredTableTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConfiguredTableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTag)(nil)).Elem()
}

func (i ConfiguredTableTagArgs) ToConfiguredTableTagOutput() ConfiguredTableTagOutput {
	return i.ToConfiguredTableTagOutputWithContext(context.Background())
}

func (i ConfiguredTableTagArgs) ToConfiguredTableTagOutputWithContext(ctx context.Context) ConfiguredTableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableTagOutput)
}

// ConfiguredTableTagArrayInput is an input type that accepts ConfiguredTableTagArray and ConfiguredTableTagArrayOutput values.
// You can construct a concrete instance of `ConfiguredTableTagArrayInput` via:
//
//	ConfiguredTableTagArray{ ConfiguredTableTagArgs{...} }
type ConfiguredTableTagArrayInput interface {
	pulumi.Input

	ToConfiguredTableTagArrayOutput() ConfiguredTableTagArrayOutput
	ToConfiguredTableTagArrayOutputWithContext(context.Context) ConfiguredTableTagArrayOutput
}

type ConfiguredTableTagArray []ConfiguredTableTagInput

func (ConfiguredTableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableTag)(nil)).Elem()
}

func (i ConfiguredTableTagArray) ToConfiguredTableTagArrayOutput() ConfiguredTableTagArrayOutput {
	return i.ToConfiguredTableTagArrayOutputWithContext(context.Background())
}

func (i ConfiguredTableTagArray) ToConfiguredTableTagArrayOutputWithContext(ctx context.Context) ConfiguredTableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableTagArrayOutput)
}

type ConfiguredTableTagOutput struct{ *pulumi.OutputState }

func (ConfiguredTableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTag)(nil)).Elem()
}

func (o ConfiguredTableTagOutput) ToConfiguredTableTagOutput() ConfiguredTableTagOutput {
	return o
}

func (o ConfiguredTableTagOutput) ToConfiguredTableTagOutputWithContext(ctx context.Context) ConfiguredTableTagOutput {
	return o
}

func (o ConfiguredTableTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ConfiguredTableTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableTag) string { return v.Value }).(pulumi.StringOutput)
}

type ConfiguredTableTagArrayOutput struct{ *pulumi.OutputState }

func (ConfiguredTableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableTag)(nil)).Elem()
}

func (o ConfiguredTableTagArrayOutput) ToConfiguredTableTagArrayOutput() ConfiguredTableTagArrayOutput {
	return o
}

func (o ConfiguredTableTagArrayOutput) ToConfiguredTableTagArrayOutputWithContext(ctx context.Context) ConfiguredTableTagArrayOutput {
	return o
}

func (o ConfiguredTableTagArrayOutput) Index(i pulumi.IntInput) ConfiguredTableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfiguredTableTag {
		return vs[0].([]ConfiguredTableTag)[vs[1].(int)]
	}).(ConfiguredTableTagOutput)
}

type MembershipTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// MembershipTagInput is an input type that accepts MembershipTagArgs and MembershipTagOutput values.
// You can construct a concrete instance of `MembershipTagInput` via:
//
//	MembershipTagArgs{...}
type MembershipTagInput interface {
	pulumi.Input

	ToMembershipTagOutput() MembershipTagOutput
	ToMembershipTagOutputWithContext(context.Context) MembershipTagOutput
}

type MembershipTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (MembershipTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipTag)(nil)).Elem()
}

func (i MembershipTagArgs) ToMembershipTagOutput() MembershipTagOutput {
	return i.ToMembershipTagOutputWithContext(context.Background())
}

func (i MembershipTagArgs) ToMembershipTagOutputWithContext(ctx context.Context) MembershipTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipTagOutput)
}

// MembershipTagArrayInput is an input type that accepts MembershipTagArray and MembershipTagArrayOutput values.
// You can construct a concrete instance of `MembershipTagArrayInput` via:
//
//	MembershipTagArray{ MembershipTagArgs{...} }
type MembershipTagArrayInput interface {
	pulumi.Input

	ToMembershipTagArrayOutput() MembershipTagArrayOutput
	ToMembershipTagArrayOutputWithContext(context.Context) MembershipTagArrayOutput
}

type MembershipTagArray []MembershipTagInput

func (MembershipTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipTag)(nil)).Elem()
}

func (i MembershipTagArray) ToMembershipTagArrayOutput() MembershipTagArrayOutput {
	return i.ToMembershipTagArrayOutputWithContext(context.Background())
}

func (i MembershipTagArray) ToMembershipTagArrayOutputWithContext(ctx context.Context) MembershipTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipTagArrayOutput)
}

type MembershipTagOutput struct{ *pulumi.OutputState }

func (MembershipTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipTag)(nil)).Elem()
}

func (o MembershipTagOutput) ToMembershipTagOutput() MembershipTagOutput {
	return o
}

func (o MembershipTagOutput) ToMembershipTagOutputWithContext(ctx context.Context) MembershipTagOutput {
	return o
}

func (o MembershipTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o MembershipTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipTag) string { return v.Value }).(pulumi.StringOutput)
}

type MembershipTagArrayOutput struct{ *pulumi.OutputState }

func (MembershipTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipTag)(nil)).Elem()
}

func (o MembershipTagArrayOutput) ToMembershipTagArrayOutput() MembershipTagArrayOutput {
	return o
}

func (o MembershipTagArrayOutput) ToMembershipTagArrayOutputWithContext(ctx context.Context) MembershipTagArrayOutput {
	return o
}

func (o MembershipTagArrayOutput) Index(i pulumi.IntInput) MembershipTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MembershipTag {
		return vs[0].([]MembershipTag)[vs[1].(int)]
	}).(MembershipTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationDataEncryptionMetadataInput)(nil)).Elem(), CollaborationDataEncryptionMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationDataEncryptionMetadataPtrInput)(nil)).Elem(), CollaborationDataEncryptionMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationMemberSpecificationInput)(nil)).Elem(), CollaborationMemberSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationMemberSpecificationArrayInput)(nil)).Elem(), CollaborationMemberSpecificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationTagInput)(nil)).Elem(), CollaborationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationTagArrayInput)(nil)).Elem(), CollaborationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAnalysisRuleInput)(nil)).Elem(), ConfiguredTableAnalysisRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAnalysisRuleArrayInput)(nil)).Elem(), ConfiguredTableAnalysisRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAnalysisRulePolicyInput)(nil)).Elem(), ConfiguredTableAnalysisRulePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAnalysisRulePolicyV1Input)(nil)).Elem(), ConfiguredTableAnalysisRulePolicyV1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAssociationTagInput)(nil)).Elem(), ConfiguredTableAssociationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAssociationTagArrayInput)(nil)).Elem(), ConfiguredTableAssociationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableGlueTableReferenceInput)(nil)).Elem(), ConfiguredTableGlueTableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableTableReferenceInput)(nil)).Elem(), ConfiguredTableTableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableTagInput)(nil)).Elem(), ConfiguredTableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableTagArrayInput)(nil)).Elem(), ConfiguredTableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipTagInput)(nil)).Elem(), MembershipTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipTagArrayInput)(nil)).Elem(), MembershipTagArray{})
	pulumi.RegisterOutputType(CollaborationDataEncryptionMetadataOutput{})
	pulumi.RegisterOutputType(CollaborationDataEncryptionMetadataPtrOutput{})
	pulumi.RegisterOutputType(CollaborationMemberSpecificationOutput{})
	pulumi.RegisterOutputType(CollaborationMemberSpecificationArrayOutput{})
	pulumi.RegisterOutputType(CollaborationTagOutput{})
	pulumi.RegisterOutputType(CollaborationTagArrayOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAnalysisRuleOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAnalysisRuleArrayOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAnalysisRulePolicyOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAnalysisRulePolicyV1Output{})
	pulumi.RegisterOutputType(ConfiguredTableAssociationTagOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAssociationTagArrayOutput{})
	pulumi.RegisterOutputType(ConfiguredTableGlueTableReferenceOutput{})
	pulumi.RegisterOutputType(ConfiguredTableTableReferenceOutput{})
	pulumi.RegisterOutputType(ConfiguredTableTagOutput{})
	pulumi.RegisterOutputType(ConfiguredTableTagArrayOutput{})
	pulumi.RegisterOutputType(MembershipTagOutput{})
	pulumi.RegisterOutputType(MembershipTagArrayOutput{})
}
