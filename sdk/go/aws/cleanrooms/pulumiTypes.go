// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanrooms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AnalysisTemplateAnalysisParameter struct {
	DefaultValue *string                               `pulumi:"defaultValue"`
	Name         string                                `pulumi:"name"`
	Type         AnalysisTemplateAnalysisParameterType `pulumi:"type"`
}

// AnalysisTemplateAnalysisParameterInput is an input type that accepts AnalysisTemplateAnalysisParameterArgs and AnalysisTemplateAnalysisParameterOutput values.
// You can construct a concrete instance of `AnalysisTemplateAnalysisParameterInput` via:
//
//	AnalysisTemplateAnalysisParameterArgs{...}
type AnalysisTemplateAnalysisParameterInput interface {
	pulumi.Input

	ToAnalysisTemplateAnalysisParameterOutput() AnalysisTemplateAnalysisParameterOutput
	ToAnalysisTemplateAnalysisParameterOutputWithContext(context.Context) AnalysisTemplateAnalysisParameterOutput
}

type AnalysisTemplateAnalysisParameterArgs struct {
	DefaultValue pulumi.StringPtrInput                      `pulumi:"defaultValue"`
	Name         pulumi.StringInput                         `pulumi:"name"`
	Type         AnalysisTemplateAnalysisParameterTypeInput `pulumi:"type"`
}

func (AnalysisTemplateAnalysisParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTemplateAnalysisParameter)(nil)).Elem()
}

func (i AnalysisTemplateAnalysisParameterArgs) ToAnalysisTemplateAnalysisParameterOutput() AnalysisTemplateAnalysisParameterOutput {
	return i.ToAnalysisTemplateAnalysisParameterOutputWithContext(context.Background())
}

func (i AnalysisTemplateAnalysisParameterArgs) ToAnalysisTemplateAnalysisParameterOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisTemplateAnalysisParameterOutput)
}

func (i AnalysisTemplateAnalysisParameterArgs) ToOutput(ctx context.Context) pulumix.Output[AnalysisTemplateAnalysisParameter] {
	return pulumix.Output[AnalysisTemplateAnalysisParameter]{
		OutputState: i.ToAnalysisTemplateAnalysisParameterOutputWithContext(ctx).OutputState,
	}
}

// AnalysisTemplateAnalysisParameterArrayInput is an input type that accepts AnalysisTemplateAnalysisParameterArray and AnalysisTemplateAnalysisParameterArrayOutput values.
// You can construct a concrete instance of `AnalysisTemplateAnalysisParameterArrayInput` via:
//
//	AnalysisTemplateAnalysisParameterArray{ AnalysisTemplateAnalysisParameterArgs{...} }
type AnalysisTemplateAnalysisParameterArrayInput interface {
	pulumi.Input

	ToAnalysisTemplateAnalysisParameterArrayOutput() AnalysisTemplateAnalysisParameterArrayOutput
	ToAnalysisTemplateAnalysisParameterArrayOutputWithContext(context.Context) AnalysisTemplateAnalysisParameterArrayOutput
}

type AnalysisTemplateAnalysisParameterArray []AnalysisTemplateAnalysisParameterInput

func (AnalysisTemplateAnalysisParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisTemplateAnalysisParameter)(nil)).Elem()
}

func (i AnalysisTemplateAnalysisParameterArray) ToAnalysisTemplateAnalysisParameterArrayOutput() AnalysisTemplateAnalysisParameterArrayOutput {
	return i.ToAnalysisTemplateAnalysisParameterArrayOutputWithContext(context.Background())
}

func (i AnalysisTemplateAnalysisParameterArray) ToAnalysisTemplateAnalysisParameterArrayOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisTemplateAnalysisParameterArrayOutput)
}

func (i AnalysisTemplateAnalysisParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]AnalysisTemplateAnalysisParameter] {
	return pulumix.Output[[]AnalysisTemplateAnalysisParameter]{
		OutputState: i.ToAnalysisTemplateAnalysisParameterArrayOutputWithContext(ctx).OutputState,
	}
}

type AnalysisTemplateAnalysisParameterOutput struct{ *pulumi.OutputState }

func (AnalysisTemplateAnalysisParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTemplateAnalysisParameter)(nil)).Elem()
}

func (o AnalysisTemplateAnalysisParameterOutput) ToAnalysisTemplateAnalysisParameterOutput() AnalysisTemplateAnalysisParameterOutput {
	return o
}

func (o AnalysisTemplateAnalysisParameterOutput) ToAnalysisTemplateAnalysisParameterOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisParameterOutput {
	return o
}

func (o AnalysisTemplateAnalysisParameterOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisTemplateAnalysisParameter] {
	return pulumix.Output[AnalysisTemplateAnalysisParameter]{
		OutputState: o.OutputState,
	}
}

func (o AnalysisTemplateAnalysisParameterOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnalysisTemplateAnalysisParameter) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

func (o AnalysisTemplateAnalysisParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisTemplateAnalysisParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o AnalysisTemplateAnalysisParameterOutput) Type() AnalysisTemplateAnalysisParameterTypeOutput {
	return o.ApplyT(func(v AnalysisTemplateAnalysisParameter) AnalysisTemplateAnalysisParameterType { return v.Type }).(AnalysisTemplateAnalysisParameterTypeOutput)
}

type AnalysisTemplateAnalysisParameterArrayOutput struct{ *pulumi.OutputState }

func (AnalysisTemplateAnalysisParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisTemplateAnalysisParameter)(nil)).Elem()
}

func (o AnalysisTemplateAnalysisParameterArrayOutput) ToAnalysisTemplateAnalysisParameterArrayOutput() AnalysisTemplateAnalysisParameterArrayOutput {
	return o
}

func (o AnalysisTemplateAnalysisParameterArrayOutput) ToAnalysisTemplateAnalysisParameterArrayOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisParameterArrayOutput {
	return o
}

func (o AnalysisTemplateAnalysisParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AnalysisTemplateAnalysisParameter] {
	return pulumix.Output[[]AnalysisTemplateAnalysisParameter]{
		OutputState: o.OutputState,
	}
}

func (o AnalysisTemplateAnalysisParameterArrayOutput) Index(i pulumi.IntInput) AnalysisTemplateAnalysisParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisTemplateAnalysisParameter {
		return vs[0].([]AnalysisTemplateAnalysisParameter)[vs[1].(int)]
	}).(AnalysisTemplateAnalysisParameterOutput)
}

type AnalysisTemplateAnalysisSchema struct {
	ReferencedTables []string `pulumi:"referencedTables"`
}

type AnalysisTemplateAnalysisSchemaOutput struct{ *pulumi.OutputState }

func (AnalysisTemplateAnalysisSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTemplateAnalysisSchema)(nil)).Elem()
}

func (o AnalysisTemplateAnalysisSchemaOutput) ToAnalysisTemplateAnalysisSchemaOutput() AnalysisTemplateAnalysisSchemaOutput {
	return o
}

func (o AnalysisTemplateAnalysisSchemaOutput) ToAnalysisTemplateAnalysisSchemaOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisSchemaOutput {
	return o
}

func (o AnalysisTemplateAnalysisSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisTemplateAnalysisSchema] {
	return pulumix.Output[AnalysisTemplateAnalysisSchema]{
		OutputState: o.OutputState,
	}
}

func (o AnalysisTemplateAnalysisSchemaOutput) ReferencedTables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AnalysisTemplateAnalysisSchema) []string { return v.ReferencedTables }).(pulumi.StringArrayOutput)
}

type AnalysisTemplateAnalysisSchemaPtrOutput struct{ *pulumi.OutputState }

func (AnalysisTemplateAnalysisSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisTemplateAnalysisSchema)(nil)).Elem()
}

func (o AnalysisTemplateAnalysisSchemaPtrOutput) ToAnalysisTemplateAnalysisSchemaPtrOutput() AnalysisTemplateAnalysisSchemaPtrOutput {
	return o
}

func (o AnalysisTemplateAnalysisSchemaPtrOutput) ToAnalysisTemplateAnalysisSchemaPtrOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisSchemaPtrOutput {
	return o
}

func (o AnalysisTemplateAnalysisSchemaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AnalysisTemplateAnalysisSchema] {
	return pulumix.Output[*AnalysisTemplateAnalysisSchema]{
		OutputState: o.OutputState,
	}
}

func (o AnalysisTemplateAnalysisSchemaPtrOutput) Elem() AnalysisTemplateAnalysisSchemaOutput {
	return o.ApplyT(func(v *AnalysisTemplateAnalysisSchema) AnalysisTemplateAnalysisSchema {
		if v != nil {
			return *v
		}
		var ret AnalysisTemplateAnalysisSchema
		return ret
	}).(AnalysisTemplateAnalysisSchemaOutput)
}

func (o AnalysisTemplateAnalysisSchemaPtrOutput) ReferencedTables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalysisTemplateAnalysisSchema) []string {
		if v == nil {
			return nil
		}
		return v.ReferencedTables
	}).(pulumi.StringArrayOutput)
}

type AnalysisTemplateAnalysisSource struct {
	Text string `pulumi:"text"`
}

// AnalysisTemplateAnalysisSourceInput is an input type that accepts AnalysisTemplateAnalysisSourceArgs and AnalysisTemplateAnalysisSourceOutput values.
// You can construct a concrete instance of `AnalysisTemplateAnalysisSourceInput` via:
//
//	AnalysisTemplateAnalysisSourceArgs{...}
type AnalysisTemplateAnalysisSourceInput interface {
	pulumi.Input

	ToAnalysisTemplateAnalysisSourceOutput() AnalysisTemplateAnalysisSourceOutput
	ToAnalysisTemplateAnalysisSourceOutputWithContext(context.Context) AnalysisTemplateAnalysisSourceOutput
}

type AnalysisTemplateAnalysisSourceArgs struct {
	Text pulumi.StringInput `pulumi:"text"`
}

func (AnalysisTemplateAnalysisSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTemplateAnalysisSource)(nil)).Elem()
}

func (i AnalysisTemplateAnalysisSourceArgs) ToAnalysisTemplateAnalysisSourceOutput() AnalysisTemplateAnalysisSourceOutput {
	return i.ToAnalysisTemplateAnalysisSourceOutputWithContext(context.Background())
}

func (i AnalysisTemplateAnalysisSourceArgs) ToAnalysisTemplateAnalysisSourceOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisTemplateAnalysisSourceOutput)
}

func (i AnalysisTemplateAnalysisSourceArgs) ToOutput(ctx context.Context) pulumix.Output[AnalysisTemplateAnalysisSource] {
	return pulumix.Output[AnalysisTemplateAnalysisSource]{
		OutputState: i.ToAnalysisTemplateAnalysisSourceOutputWithContext(ctx).OutputState,
	}
}

type AnalysisTemplateAnalysisSourceOutput struct{ *pulumi.OutputState }

func (AnalysisTemplateAnalysisSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTemplateAnalysisSource)(nil)).Elem()
}

func (o AnalysisTemplateAnalysisSourceOutput) ToAnalysisTemplateAnalysisSourceOutput() AnalysisTemplateAnalysisSourceOutput {
	return o
}

func (o AnalysisTemplateAnalysisSourceOutput) ToAnalysisTemplateAnalysisSourceOutputWithContext(ctx context.Context) AnalysisTemplateAnalysisSourceOutput {
	return o
}

func (o AnalysisTemplateAnalysisSourceOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisTemplateAnalysisSource] {
	return pulumix.Output[AnalysisTemplateAnalysisSource]{
		OutputState: o.OutputState,
	}
}

func (o AnalysisTemplateAnalysisSourceOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisTemplateAnalysisSource) string { return v.Text }).(pulumi.StringOutput)
}

type AnalysisTemplateTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// AnalysisTemplateTagInput is an input type that accepts AnalysisTemplateTagArgs and AnalysisTemplateTagOutput values.
// You can construct a concrete instance of `AnalysisTemplateTagInput` via:
//
//	AnalysisTemplateTagArgs{...}
type AnalysisTemplateTagInput interface {
	pulumi.Input

	ToAnalysisTemplateTagOutput() AnalysisTemplateTagOutput
	ToAnalysisTemplateTagOutputWithContext(context.Context) AnalysisTemplateTagOutput
}

type AnalysisTemplateTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AnalysisTemplateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTemplateTag)(nil)).Elem()
}

func (i AnalysisTemplateTagArgs) ToAnalysisTemplateTagOutput() AnalysisTemplateTagOutput {
	return i.ToAnalysisTemplateTagOutputWithContext(context.Background())
}

func (i AnalysisTemplateTagArgs) ToAnalysisTemplateTagOutputWithContext(ctx context.Context) AnalysisTemplateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisTemplateTagOutput)
}

func (i AnalysisTemplateTagArgs) ToOutput(ctx context.Context) pulumix.Output[AnalysisTemplateTag] {
	return pulumix.Output[AnalysisTemplateTag]{
		OutputState: i.ToAnalysisTemplateTagOutputWithContext(ctx).OutputState,
	}
}

// AnalysisTemplateTagArrayInput is an input type that accepts AnalysisTemplateTagArray and AnalysisTemplateTagArrayOutput values.
// You can construct a concrete instance of `AnalysisTemplateTagArrayInput` via:
//
//	AnalysisTemplateTagArray{ AnalysisTemplateTagArgs{...} }
type AnalysisTemplateTagArrayInput interface {
	pulumi.Input

	ToAnalysisTemplateTagArrayOutput() AnalysisTemplateTagArrayOutput
	ToAnalysisTemplateTagArrayOutputWithContext(context.Context) AnalysisTemplateTagArrayOutput
}

type AnalysisTemplateTagArray []AnalysisTemplateTagInput

func (AnalysisTemplateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisTemplateTag)(nil)).Elem()
}

func (i AnalysisTemplateTagArray) ToAnalysisTemplateTagArrayOutput() AnalysisTemplateTagArrayOutput {
	return i.ToAnalysisTemplateTagArrayOutputWithContext(context.Background())
}

func (i AnalysisTemplateTagArray) ToAnalysisTemplateTagArrayOutputWithContext(ctx context.Context) AnalysisTemplateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisTemplateTagArrayOutput)
}

func (i AnalysisTemplateTagArray) ToOutput(ctx context.Context) pulumix.Output[[]AnalysisTemplateTag] {
	return pulumix.Output[[]AnalysisTemplateTag]{
		OutputState: i.ToAnalysisTemplateTagArrayOutputWithContext(ctx).OutputState,
	}
}

type AnalysisTemplateTagOutput struct{ *pulumi.OutputState }

func (AnalysisTemplateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalysisTemplateTag)(nil)).Elem()
}

func (o AnalysisTemplateTagOutput) ToAnalysisTemplateTagOutput() AnalysisTemplateTagOutput {
	return o
}

func (o AnalysisTemplateTagOutput) ToAnalysisTemplateTagOutputWithContext(ctx context.Context) AnalysisTemplateTagOutput {
	return o
}

func (o AnalysisTemplateTagOutput) ToOutput(ctx context.Context) pulumix.Output[AnalysisTemplateTag] {
	return pulumix.Output[AnalysisTemplateTag]{
		OutputState: o.OutputState,
	}
}

func (o AnalysisTemplateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisTemplateTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o AnalysisTemplateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AnalysisTemplateTag) string { return v.Value }).(pulumi.StringOutput)
}

type AnalysisTemplateTagArrayOutput struct{ *pulumi.OutputState }

func (AnalysisTemplateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalysisTemplateTag)(nil)).Elem()
}

func (o AnalysisTemplateTagArrayOutput) ToAnalysisTemplateTagArrayOutput() AnalysisTemplateTagArrayOutput {
	return o
}

func (o AnalysisTemplateTagArrayOutput) ToAnalysisTemplateTagArrayOutputWithContext(ctx context.Context) AnalysisTemplateTagArrayOutput {
	return o
}

func (o AnalysisTemplateTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AnalysisTemplateTag] {
	return pulumix.Output[[]AnalysisTemplateTag]{
		OutputState: o.OutputState,
	}
}

func (o AnalysisTemplateTagArrayOutput) Index(i pulumi.IntInput) AnalysisTemplateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalysisTemplateTag {
		return vs[0].([]AnalysisTemplateTag)[vs[1].(int)]
	}).(AnalysisTemplateTagOutput)
}

type CollaborationDataEncryptionMetadata struct {
	AllowCleartext                        bool `pulumi:"allowCleartext"`
	AllowDuplicates                       bool `pulumi:"allowDuplicates"`
	AllowJoinsOnColumnsWithDifferentNames bool `pulumi:"allowJoinsOnColumnsWithDifferentNames"`
	PreserveNulls                         bool `pulumi:"preserveNulls"`
}

// CollaborationDataEncryptionMetadataInput is an input type that accepts CollaborationDataEncryptionMetadataArgs and CollaborationDataEncryptionMetadataOutput values.
// You can construct a concrete instance of `CollaborationDataEncryptionMetadataInput` via:
//
//	CollaborationDataEncryptionMetadataArgs{...}
type CollaborationDataEncryptionMetadataInput interface {
	pulumi.Input

	ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput
	ToCollaborationDataEncryptionMetadataOutputWithContext(context.Context) CollaborationDataEncryptionMetadataOutput
}

type CollaborationDataEncryptionMetadataArgs struct {
	AllowCleartext                        pulumi.BoolInput `pulumi:"allowCleartext"`
	AllowDuplicates                       pulumi.BoolInput `pulumi:"allowDuplicates"`
	AllowJoinsOnColumnsWithDifferentNames pulumi.BoolInput `pulumi:"allowJoinsOnColumnsWithDifferentNames"`
	PreserveNulls                         pulumi.BoolInput `pulumi:"preserveNulls"`
}

func (CollaborationDataEncryptionMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput {
	return i.ToCollaborationDataEncryptionMetadataOutputWithContext(context.Background())
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationDataEncryptionMetadataOutput)
}

func (i CollaborationDataEncryptionMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[CollaborationDataEncryptionMetadata] {
	return pulumix.Output[CollaborationDataEncryptionMetadata]{
		OutputState: i.ToCollaborationDataEncryptionMetadataOutputWithContext(ctx).OutputState,
	}
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return i.ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Background())
}

func (i CollaborationDataEncryptionMetadataArgs) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationDataEncryptionMetadataOutput).ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx)
}

// CollaborationDataEncryptionMetadataPtrInput is an input type that accepts CollaborationDataEncryptionMetadataArgs, CollaborationDataEncryptionMetadataPtr and CollaborationDataEncryptionMetadataPtrOutput values.
// You can construct a concrete instance of `CollaborationDataEncryptionMetadataPtrInput` via:
//
//	        CollaborationDataEncryptionMetadataArgs{...}
//
//	or:
//
//	        nil
type CollaborationDataEncryptionMetadataPtrInput interface {
	pulumi.Input

	ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput
	ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Context) CollaborationDataEncryptionMetadataPtrOutput
}

type collaborationDataEncryptionMetadataPtrType CollaborationDataEncryptionMetadataArgs

func CollaborationDataEncryptionMetadataPtr(v *CollaborationDataEncryptionMetadataArgs) CollaborationDataEncryptionMetadataPtrInput {
	return (*collaborationDataEncryptionMetadataPtrType)(v)
}

func (*collaborationDataEncryptionMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (i *collaborationDataEncryptionMetadataPtrType) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return i.ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Background())
}

func (i *collaborationDataEncryptionMetadataPtrType) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationDataEncryptionMetadataPtrOutput)
}

func (i *collaborationDataEncryptionMetadataPtrType) ToOutput(ctx context.Context) pulumix.Output[*CollaborationDataEncryptionMetadata] {
	return pulumix.Output[*CollaborationDataEncryptionMetadata]{
		OutputState: i.ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx).OutputState,
	}
}

type CollaborationDataEncryptionMetadataOutput struct{ *pulumi.OutputState }

func (CollaborationDataEncryptionMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataOutput() CollaborationDataEncryptionMetadataOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return o.ToCollaborationDataEncryptionMetadataPtrOutputWithContext(context.Background())
}

func (o CollaborationDataEncryptionMetadataOutput) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CollaborationDataEncryptionMetadata) *CollaborationDataEncryptionMetadata {
		return &v
	}).(CollaborationDataEncryptionMetadataPtrOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[CollaborationDataEncryptionMetadata] {
	return pulumix.Output[CollaborationDataEncryptionMetadata]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationDataEncryptionMetadataOutput) AllowCleartext() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.AllowCleartext }).(pulumi.BoolOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) AllowDuplicates() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.AllowDuplicates }).(pulumi.BoolOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) AllowJoinsOnColumnsWithDifferentNames() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.AllowJoinsOnColumnsWithDifferentNames }).(pulumi.BoolOutput)
}

func (o CollaborationDataEncryptionMetadataOutput) PreserveNulls() pulumi.BoolOutput {
	return o.ApplyT(func(v CollaborationDataEncryptionMetadata) bool { return v.PreserveNulls }).(pulumi.BoolOutput)
}

type CollaborationDataEncryptionMetadataPtrOutput struct{ *pulumi.OutputState }

func (CollaborationDataEncryptionMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollaborationDataEncryptionMetadata)(nil)).Elem()
}

func (o CollaborationDataEncryptionMetadataPtrOutput) ToCollaborationDataEncryptionMetadataPtrOutput() CollaborationDataEncryptionMetadataPtrOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataPtrOutput) ToCollaborationDataEncryptionMetadataPtrOutputWithContext(ctx context.Context) CollaborationDataEncryptionMetadataPtrOutput {
	return o
}

func (o CollaborationDataEncryptionMetadataPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CollaborationDataEncryptionMetadata] {
	return pulumix.Output[*CollaborationDataEncryptionMetadata]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationDataEncryptionMetadataPtrOutput) Elem() CollaborationDataEncryptionMetadataOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) CollaborationDataEncryptionMetadata {
		if v != nil {
			return *v
		}
		var ret CollaborationDataEncryptionMetadata
		return ret
	}).(CollaborationDataEncryptionMetadataOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) AllowCleartext() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowCleartext
	}).(pulumi.BoolPtrOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) AllowDuplicates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowDuplicates
	}).(pulumi.BoolPtrOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) AllowJoinsOnColumnsWithDifferentNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowJoinsOnColumnsWithDifferentNames
	}).(pulumi.BoolPtrOutput)
}

func (o CollaborationDataEncryptionMetadataPtrOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CollaborationDataEncryptionMetadata) *bool {
		if v == nil {
			return nil
		}
		return &v.PreserveNulls
	}).(pulumi.BoolPtrOutput)
}

type CollaborationMemberSpecification struct {
	AccountId       string                       `pulumi:"accountId"`
	DisplayName     string                       `pulumi:"displayName"`
	MemberAbilities []CollaborationMemberAbility `pulumi:"memberAbilities"`
}

// CollaborationMemberSpecificationInput is an input type that accepts CollaborationMemberSpecificationArgs and CollaborationMemberSpecificationOutput values.
// You can construct a concrete instance of `CollaborationMemberSpecificationInput` via:
//
//	CollaborationMemberSpecificationArgs{...}
type CollaborationMemberSpecificationInput interface {
	pulumi.Input

	ToCollaborationMemberSpecificationOutput() CollaborationMemberSpecificationOutput
	ToCollaborationMemberSpecificationOutputWithContext(context.Context) CollaborationMemberSpecificationOutput
}

type CollaborationMemberSpecificationArgs struct {
	AccountId       pulumi.StringInput                   `pulumi:"accountId"`
	DisplayName     pulumi.StringInput                   `pulumi:"displayName"`
	MemberAbilities CollaborationMemberAbilityArrayInput `pulumi:"memberAbilities"`
}

func (CollaborationMemberSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationMemberSpecification)(nil)).Elem()
}

func (i CollaborationMemberSpecificationArgs) ToCollaborationMemberSpecificationOutput() CollaborationMemberSpecificationOutput {
	return i.ToCollaborationMemberSpecificationOutputWithContext(context.Background())
}

func (i CollaborationMemberSpecificationArgs) ToCollaborationMemberSpecificationOutputWithContext(ctx context.Context) CollaborationMemberSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationMemberSpecificationOutput)
}

func (i CollaborationMemberSpecificationArgs) ToOutput(ctx context.Context) pulumix.Output[CollaborationMemberSpecification] {
	return pulumix.Output[CollaborationMemberSpecification]{
		OutputState: i.ToCollaborationMemberSpecificationOutputWithContext(ctx).OutputState,
	}
}

// CollaborationMemberSpecificationArrayInput is an input type that accepts CollaborationMemberSpecificationArray and CollaborationMemberSpecificationArrayOutput values.
// You can construct a concrete instance of `CollaborationMemberSpecificationArrayInput` via:
//
//	CollaborationMemberSpecificationArray{ CollaborationMemberSpecificationArgs{...} }
type CollaborationMemberSpecificationArrayInput interface {
	pulumi.Input

	ToCollaborationMemberSpecificationArrayOutput() CollaborationMemberSpecificationArrayOutput
	ToCollaborationMemberSpecificationArrayOutputWithContext(context.Context) CollaborationMemberSpecificationArrayOutput
}

type CollaborationMemberSpecificationArray []CollaborationMemberSpecificationInput

func (CollaborationMemberSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationMemberSpecification)(nil)).Elem()
}

func (i CollaborationMemberSpecificationArray) ToCollaborationMemberSpecificationArrayOutput() CollaborationMemberSpecificationArrayOutput {
	return i.ToCollaborationMemberSpecificationArrayOutputWithContext(context.Background())
}

func (i CollaborationMemberSpecificationArray) ToCollaborationMemberSpecificationArrayOutputWithContext(ctx context.Context) CollaborationMemberSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationMemberSpecificationArrayOutput)
}

func (i CollaborationMemberSpecificationArray) ToOutput(ctx context.Context) pulumix.Output[[]CollaborationMemberSpecification] {
	return pulumix.Output[[]CollaborationMemberSpecification]{
		OutputState: i.ToCollaborationMemberSpecificationArrayOutputWithContext(ctx).OutputState,
	}
}

type CollaborationMemberSpecificationOutput struct{ *pulumi.OutputState }

func (CollaborationMemberSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationMemberSpecification)(nil)).Elem()
}

func (o CollaborationMemberSpecificationOutput) ToCollaborationMemberSpecificationOutput() CollaborationMemberSpecificationOutput {
	return o
}

func (o CollaborationMemberSpecificationOutput) ToCollaborationMemberSpecificationOutputWithContext(ctx context.Context) CollaborationMemberSpecificationOutput {
	return o
}

func (o CollaborationMemberSpecificationOutput) ToOutput(ctx context.Context) pulumix.Output[CollaborationMemberSpecification] {
	return pulumix.Output[CollaborationMemberSpecification]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationMemberSpecificationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationMemberSpecification) string { return v.AccountId }).(pulumi.StringOutput)
}

func (o CollaborationMemberSpecificationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationMemberSpecification) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o CollaborationMemberSpecificationOutput) MemberAbilities() CollaborationMemberAbilityArrayOutput {
	return o.ApplyT(func(v CollaborationMemberSpecification) []CollaborationMemberAbility { return v.MemberAbilities }).(CollaborationMemberAbilityArrayOutput)
}

type CollaborationMemberSpecificationArrayOutput struct{ *pulumi.OutputState }

func (CollaborationMemberSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationMemberSpecification)(nil)).Elem()
}

func (o CollaborationMemberSpecificationArrayOutput) ToCollaborationMemberSpecificationArrayOutput() CollaborationMemberSpecificationArrayOutput {
	return o
}

func (o CollaborationMemberSpecificationArrayOutput) ToCollaborationMemberSpecificationArrayOutputWithContext(ctx context.Context) CollaborationMemberSpecificationArrayOutput {
	return o
}

func (o CollaborationMemberSpecificationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CollaborationMemberSpecification] {
	return pulumix.Output[[]CollaborationMemberSpecification]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationMemberSpecificationArrayOutput) Index(i pulumi.IntInput) CollaborationMemberSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CollaborationMemberSpecification {
		return vs[0].([]CollaborationMemberSpecification)[vs[1].(int)]
	}).(CollaborationMemberSpecificationOutput)
}

type CollaborationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// CollaborationTagInput is an input type that accepts CollaborationTagArgs and CollaborationTagOutput values.
// You can construct a concrete instance of `CollaborationTagInput` via:
//
//	CollaborationTagArgs{...}
type CollaborationTagInput interface {
	pulumi.Input

	ToCollaborationTagOutput() CollaborationTagOutput
	ToCollaborationTagOutputWithContext(context.Context) CollaborationTagOutput
}

type CollaborationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (CollaborationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationTag)(nil)).Elem()
}

func (i CollaborationTagArgs) ToCollaborationTagOutput() CollaborationTagOutput {
	return i.ToCollaborationTagOutputWithContext(context.Background())
}

func (i CollaborationTagArgs) ToCollaborationTagOutputWithContext(ctx context.Context) CollaborationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationTagOutput)
}

func (i CollaborationTagArgs) ToOutput(ctx context.Context) pulumix.Output[CollaborationTag] {
	return pulumix.Output[CollaborationTag]{
		OutputState: i.ToCollaborationTagOutputWithContext(ctx).OutputState,
	}
}

// CollaborationTagArrayInput is an input type that accepts CollaborationTagArray and CollaborationTagArrayOutput values.
// You can construct a concrete instance of `CollaborationTagArrayInput` via:
//
//	CollaborationTagArray{ CollaborationTagArgs{...} }
type CollaborationTagArrayInput interface {
	pulumi.Input

	ToCollaborationTagArrayOutput() CollaborationTagArrayOutput
	ToCollaborationTagArrayOutputWithContext(context.Context) CollaborationTagArrayOutput
}

type CollaborationTagArray []CollaborationTagInput

func (CollaborationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationTag)(nil)).Elem()
}

func (i CollaborationTagArray) ToCollaborationTagArrayOutput() CollaborationTagArrayOutput {
	return i.ToCollaborationTagArrayOutputWithContext(context.Background())
}

func (i CollaborationTagArray) ToCollaborationTagArrayOutputWithContext(ctx context.Context) CollaborationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollaborationTagArrayOutput)
}

func (i CollaborationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]CollaborationTag] {
	return pulumix.Output[[]CollaborationTag]{
		OutputState: i.ToCollaborationTagArrayOutputWithContext(ctx).OutputState,
	}
}

type CollaborationTagOutput struct{ *pulumi.OutputState }

func (CollaborationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollaborationTag)(nil)).Elem()
}

func (o CollaborationTagOutput) ToCollaborationTagOutput() CollaborationTagOutput {
	return o
}

func (o CollaborationTagOutput) ToCollaborationTagOutputWithContext(ctx context.Context) CollaborationTagOutput {
	return o
}

func (o CollaborationTagOutput) ToOutput(ctx context.Context) pulumix.Output[CollaborationTag] {
	return pulumix.Output[CollaborationTag]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o CollaborationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CollaborationTag) string { return v.Value }).(pulumi.StringOutput)
}

type CollaborationTagArrayOutput struct{ *pulumi.OutputState }

func (CollaborationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CollaborationTag)(nil)).Elem()
}

func (o CollaborationTagArrayOutput) ToCollaborationTagArrayOutput() CollaborationTagArrayOutput {
	return o
}

func (o CollaborationTagArrayOutput) ToCollaborationTagArrayOutputWithContext(ctx context.Context) CollaborationTagArrayOutput {
	return o
}

func (o CollaborationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CollaborationTag] {
	return pulumix.Output[[]CollaborationTag]{
		OutputState: o.OutputState,
	}
}

func (o CollaborationTagArrayOutput) Index(i pulumi.IntInput) CollaborationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CollaborationTag {
		return vs[0].([]CollaborationTag)[vs[1].(int)]
	}).(CollaborationTagOutput)
}

type ConfiguredTableAggregateColumn struct {
	ColumnNames []string                             `pulumi:"columnNames"`
	Function    ConfiguredTableAggregateFunctionName `pulumi:"function"`
}

type ConfiguredTableAggregationConstraint struct {
	ColumnName string                         `pulumi:"columnName"`
	Minimum    float64                        `pulumi:"minimum"`
	Type       ConfiguredTableAggregationType `pulumi:"type"`
}

type ConfiguredTableAnalysisRule struct {
	Policy ConfiguredTableAnalysisRulePolicy `pulumi:"policy"`
	Type   ConfiguredTableAnalysisRuleType   `pulumi:"type"`
}

// ConfiguredTableAnalysisRuleInput is an input type that accepts ConfiguredTableAnalysisRuleArgs and ConfiguredTableAnalysisRuleOutput values.
// You can construct a concrete instance of `ConfiguredTableAnalysisRuleInput` via:
//
//	ConfiguredTableAnalysisRuleArgs{...}
type ConfiguredTableAnalysisRuleInput interface {
	pulumi.Input

	ToConfiguredTableAnalysisRuleOutput() ConfiguredTableAnalysisRuleOutput
	ToConfiguredTableAnalysisRuleOutputWithContext(context.Context) ConfiguredTableAnalysisRuleOutput
}

type ConfiguredTableAnalysisRuleArgs struct {
	Policy ConfiguredTableAnalysisRulePolicyInput `pulumi:"policy"`
	Type   ConfiguredTableAnalysisRuleTypeInput   `pulumi:"type"`
}

func (ConfiguredTableAnalysisRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (i ConfiguredTableAnalysisRuleArgs) ToConfiguredTableAnalysisRuleOutput() ConfiguredTableAnalysisRuleOutput {
	return i.ToConfiguredTableAnalysisRuleOutputWithContext(context.Background())
}

func (i ConfiguredTableAnalysisRuleArgs) ToConfiguredTableAnalysisRuleOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAnalysisRuleOutput)
}

func (i ConfiguredTableAnalysisRuleArgs) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableAnalysisRule] {
	return pulumix.Output[ConfiguredTableAnalysisRule]{
		OutputState: i.ToConfiguredTableAnalysisRuleOutputWithContext(ctx).OutputState,
	}
}

// ConfiguredTableAnalysisRuleArrayInput is an input type that accepts ConfiguredTableAnalysisRuleArray and ConfiguredTableAnalysisRuleArrayOutput values.
// You can construct a concrete instance of `ConfiguredTableAnalysisRuleArrayInput` via:
//
//	ConfiguredTableAnalysisRuleArray{ ConfiguredTableAnalysisRuleArgs{...} }
type ConfiguredTableAnalysisRuleArrayInput interface {
	pulumi.Input

	ToConfiguredTableAnalysisRuleArrayOutput() ConfiguredTableAnalysisRuleArrayOutput
	ToConfiguredTableAnalysisRuleArrayOutputWithContext(context.Context) ConfiguredTableAnalysisRuleArrayOutput
}

type ConfiguredTableAnalysisRuleArray []ConfiguredTableAnalysisRuleInput

func (ConfiguredTableAnalysisRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (i ConfiguredTableAnalysisRuleArray) ToConfiguredTableAnalysisRuleArrayOutput() ConfiguredTableAnalysisRuleArrayOutput {
	return i.ToConfiguredTableAnalysisRuleArrayOutputWithContext(context.Background())
}

func (i ConfiguredTableAnalysisRuleArray) ToConfiguredTableAnalysisRuleArrayOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAnalysisRuleArrayOutput)
}

func (i ConfiguredTableAnalysisRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfiguredTableAnalysisRule] {
	return pulumix.Output[[]ConfiguredTableAnalysisRule]{
		OutputState: i.ToConfiguredTableAnalysisRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableAnalysisRuleOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAnalysisRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (o ConfiguredTableAnalysisRuleOutput) ToConfiguredTableAnalysisRuleOutput() ConfiguredTableAnalysisRuleOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleOutput) ToConfiguredTableAnalysisRuleOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableAnalysisRule] {
	return pulumix.Output[ConfiguredTableAnalysisRule]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableAnalysisRuleOutput) Policy() ConfiguredTableAnalysisRulePolicyOutput {
	return o.ApplyT(func(v ConfiguredTableAnalysisRule) ConfiguredTableAnalysisRulePolicy { return v.Policy }).(ConfiguredTableAnalysisRulePolicyOutput)
}

func (o ConfiguredTableAnalysisRuleOutput) Type() ConfiguredTableAnalysisRuleTypeOutput {
	return o.ApplyT(func(v ConfiguredTableAnalysisRule) ConfiguredTableAnalysisRuleType { return v.Type }).(ConfiguredTableAnalysisRuleTypeOutput)
}

type ConfiguredTableAnalysisRuleArrayOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAnalysisRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAnalysisRule)(nil)).Elem()
}

func (o ConfiguredTableAnalysisRuleArrayOutput) ToConfiguredTableAnalysisRuleArrayOutput() ConfiguredTableAnalysisRuleArrayOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleArrayOutput) ToConfiguredTableAnalysisRuleArrayOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRuleArrayOutput {
	return o
}

func (o ConfiguredTableAnalysisRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfiguredTableAnalysisRule] {
	return pulumix.Output[[]ConfiguredTableAnalysisRule]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableAnalysisRuleArrayOutput) Index(i pulumi.IntInput) ConfiguredTableAnalysisRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfiguredTableAnalysisRule {
		return vs[0].([]ConfiguredTableAnalysisRule)[vs[1].(int)]
	}).(ConfiguredTableAnalysisRuleOutput)
}

type ConfiguredTableAnalysisRuleAggregation struct {
	AggregateColumns     []ConfiguredTableAggregateColumn       `pulumi:"aggregateColumns"`
	AllowedJoinOperators []ConfiguredTableJoinOperator          `pulumi:"allowedJoinOperators"`
	DimensionColumns     []string                               `pulumi:"dimensionColumns"`
	JoinColumns          []string                               `pulumi:"joinColumns"`
	JoinRequired         *ConfiguredTableJoinRequiredOption     `pulumi:"joinRequired"`
	OutputConstraints    []ConfiguredTableAggregationConstraint `pulumi:"outputConstraints"`
	ScalarFunctions      []ConfiguredTableScalarFunctions       `pulumi:"scalarFunctions"`
}

type ConfiguredTableAnalysisRuleCustom struct {
	AllowedAnalyses          []string `pulumi:"allowedAnalyses"`
	AllowedAnalysisProviders []string `pulumi:"allowedAnalysisProviders"`
}

type ConfiguredTableAnalysisRuleList struct {
	AllowedJoinOperators []ConfiguredTableJoinOperator `pulumi:"allowedJoinOperators"`
	JoinColumns          []string                      `pulumi:"joinColumns"`
	ListColumns          []string                      `pulumi:"listColumns"`
}

type ConfiguredTableAnalysisRulePolicy struct {
	V1 interface{} `pulumi:"v1"`
}

// ConfiguredTableAnalysisRulePolicyInput is an input type that accepts ConfiguredTableAnalysisRulePolicyArgs and ConfiguredTableAnalysisRulePolicyOutput values.
// You can construct a concrete instance of `ConfiguredTableAnalysisRulePolicyInput` via:
//
//	ConfiguredTableAnalysisRulePolicyArgs{...}
type ConfiguredTableAnalysisRulePolicyInput interface {
	pulumi.Input

	ToConfiguredTableAnalysisRulePolicyOutput() ConfiguredTableAnalysisRulePolicyOutput
	ToConfiguredTableAnalysisRulePolicyOutputWithContext(context.Context) ConfiguredTableAnalysisRulePolicyOutput
}

type ConfiguredTableAnalysisRulePolicyArgs struct {
	V1 pulumi.Input `pulumi:"v1"`
}

func (ConfiguredTableAnalysisRulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRulePolicy)(nil)).Elem()
}

func (i ConfiguredTableAnalysisRulePolicyArgs) ToConfiguredTableAnalysisRulePolicyOutput() ConfiguredTableAnalysisRulePolicyOutput {
	return i.ToConfiguredTableAnalysisRulePolicyOutputWithContext(context.Background())
}

func (i ConfiguredTableAnalysisRulePolicyArgs) ToConfiguredTableAnalysisRulePolicyOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAnalysisRulePolicyOutput)
}

func (i ConfiguredTableAnalysisRulePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableAnalysisRulePolicy] {
	return pulumix.Output[ConfiguredTableAnalysisRulePolicy]{
		OutputState: i.ToConfiguredTableAnalysisRulePolicyOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableAnalysisRulePolicyOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAnalysisRulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAnalysisRulePolicy)(nil)).Elem()
}

func (o ConfiguredTableAnalysisRulePolicyOutput) ToConfiguredTableAnalysisRulePolicyOutput() ConfiguredTableAnalysisRulePolicyOutput {
	return o
}

func (o ConfiguredTableAnalysisRulePolicyOutput) ToConfiguredTableAnalysisRulePolicyOutputWithContext(ctx context.Context) ConfiguredTableAnalysisRulePolicyOutput {
	return o
}

func (o ConfiguredTableAnalysisRulePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableAnalysisRulePolicy] {
	return pulumix.Output[ConfiguredTableAnalysisRulePolicy]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableAnalysisRulePolicyOutput) V1() pulumi.AnyOutput {
	return o.ApplyT(func(v ConfiguredTableAnalysisRulePolicy) interface{} { return v.V1 }).(pulumi.AnyOutput)
}

type ConfiguredTableAnalysisRulePolicyV10Properties struct {
	List ConfiguredTableAnalysisRuleList `pulumi:"list"`
}

type ConfiguredTableAnalysisRulePolicyV11Properties struct {
	Aggregation ConfiguredTableAnalysisRuleAggregation `pulumi:"aggregation"`
}

type ConfiguredTableAnalysisRulePolicyV12Properties struct {
	Custom ConfiguredTableAnalysisRuleCustom `pulumi:"custom"`
}

type ConfiguredTableAssociationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ConfiguredTableAssociationTagInput is an input type that accepts ConfiguredTableAssociationTagArgs and ConfiguredTableAssociationTagOutput values.
// You can construct a concrete instance of `ConfiguredTableAssociationTagInput` via:
//
//	ConfiguredTableAssociationTagArgs{...}
type ConfiguredTableAssociationTagInput interface {
	pulumi.Input

	ToConfiguredTableAssociationTagOutput() ConfiguredTableAssociationTagOutput
	ToConfiguredTableAssociationTagOutputWithContext(context.Context) ConfiguredTableAssociationTagOutput
}

type ConfiguredTableAssociationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConfiguredTableAssociationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAssociationTag)(nil)).Elem()
}

func (i ConfiguredTableAssociationTagArgs) ToConfiguredTableAssociationTagOutput() ConfiguredTableAssociationTagOutput {
	return i.ToConfiguredTableAssociationTagOutputWithContext(context.Background())
}

func (i ConfiguredTableAssociationTagArgs) ToConfiguredTableAssociationTagOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAssociationTagOutput)
}

func (i ConfiguredTableAssociationTagArgs) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableAssociationTag] {
	return pulumix.Output[ConfiguredTableAssociationTag]{
		OutputState: i.ToConfiguredTableAssociationTagOutputWithContext(ctx).OutputState,
	}
}

// ConfiguredTableAssociationTagArrayInput is an input type that accepts ConfiguredTableAssociationTagArray and ConfiguredTableAssociationTagArrayOutput values.
// You can construct a concrete instance of `ConfiguredTableAssociationTagArrayInput` via:
//
//	ConfiguredTableAssociationTagArray{ ConfiguredTableAssociationTagArgs{...} }
type ConfiguredTableAssociationTagArrayInput interface {
	pulumi.Input

	ToConfiguredTableAssociationTagArrayOutput() ConfiguredTableAssociationTagArrayOutput
	ToConfiguredTableAssociationTagArrayOutputWithContext(context.Context) ConfiguredTableAssociationTagArrayOutput
}

type ConfiguredTableAssociationTagArray []ConfiguredTableAssociationTagInput

func (ConfiguredTableAssociationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAssociationTag)(nil)).Elem()
}

func (i ConfiguredTableAssociationTagArray) ToConfiguredTableAssociationTagArrayOutput() ConfiguredTableAssociationTagArrayOutput {
	return i.ToConfiguredTableAssociationTagArrayOutputWithContext(context.Background())
}

func (i ConfiguredTableAssociationTagArray) ToConfiguredTableAssociationTagArrayOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableAssociationTagArrayOutput)
}

func (i ConfiguredTableAssociationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfiguredTableAssociationTag] {
	return pulumix.Output[[]ConfiguredTableAssociationTag]{
		OutputState: i.ToConfiguredTableAssociationTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableAssociationTagOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAssociationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableAssociationTag)(nil)).Elem()
}

func (o ConfiguredTableAssociationTagOutput) ToConfiguredTableAssociationTagOutput() ConfiguredTableAssociationTagOutput {
	return o
}

func (o ConfiguredTableAssociationTagOutput) ToConfiguredTableAssociationTagOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagOutput {
	return o
}

func (o ConfiguredTableAssociationTagOutput) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableAssociationTag] {
	return pulumix.Output[ConfiguredTableAssociationTag]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableAssociationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableAssociationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ConfiguredTableAssociationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableAssociationTag) string { return v.Value }).(pulumi.StringOutput)
}

type ConfiguredTableAssociationTagArrayOutput struct{ *pulumi.OutputState }

func (ConfiguredTableAssociationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableAssociationTag)(nil)).Elem()
}

func (o ConfiguredTableAssociationTagArrayOutput) ToConfiguredTableAssociationTagArrayOutput() ConfiguredTableAssociationTagArrayOutput {
	return o
}

func (o ConfiguredTableAssociationTagArrayOutput) ToConfiguredTableAssociationTagArrayOutputWithContext(ctx context.Context) ConfiguredTableAssociationTagArrayOutput {
	return o
}

func (o ConfiguredTableAssociationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfiguredTableAssociationTag] {
	return pulumix.Output[[]ConfiguredTableAssociationTag]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableAssociationTagArrayOutput) Index(i pulumi.IntInput) ConfiguredTableAssociationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfiguredTableAssociationTag {
		return vs[0].([]ConfiguredTableAssociationTag)[vs[1].(int)]
	}).(ConfiguredTableAssociationTagOutput)
}

type ConfiguredTableGlueTableReference struct {
	DatabaseName string `pulumi:"databaseName"`
	TableName    string `pulumi:"tableName"`
}

// ConfiguredTableGlueTableReferenceInput is an input type that accepts ConfiguredTableGlueTableReferenceArgs and ConfiguredTableGlueTableReferenceOutput values.
// You can construct a concrete instance of `ConfiguredTableGlueTableReferenceInput` via:
//
//	ConfiguredTableGlueTableReferenceArgs{...}
type ConfiguredTableGlueTableReferenceInput interface {
	pulumi.Input

	ToConfiguredTableGlueTableReferenceOutput() ConfiguredTableGlueTableReferenceOutput
	ToConfiguredTableGlueTableReferenceOutputWithContext(context.Context) ConfiguredTableGlueTableReferenceOutput
}

type ConfiguredTableGlueTableReferenceArgs struct {
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	TableName    pulumi.StringInput `pulumi:"tableName"`
}

func (ConfiguredTableGlueTableReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableGlueTableReference)(nil)).Elem()
}

func (i ConfiguredTableGlueTableReferenceArgs) ToConfiguredTableGlueTableReferenceOutput() ConfiguredTableGlueTableReferenceOutput {
	return i.ToConfiguredTableGlueTableReferenceOutputWithContext(context.Background())
}

func (i ConfiguredTableGlueTableReferenceArgs) ToConfiguredTableGlueTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableGlueTableReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableGlueTableReferenceOutput)
}

func (i ConfiguredTableGlueTableReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableGlueTableReference] {
	return pulumix.Output[ConfiguredTableGlueTableReference]{
		OutputState: i.ToConfiguredTableGlueTableReferenceOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableGlueTableReferenceOutput struct{ *pulumi.OutputState }

func (ConfiguredTableGlueTableReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableGlueTableReference)(nil)).Elem()
}

func (o ConfiguredTableGlueTableReferenceOutput) ToConfiguredTableGlueTableReferenceOutput() ConfiguredTableGlueTableReferenceOutput {
	return o
}

func (o ConfiguredTableGlueTableReferenceOutput) ToConfiguredTableGlueTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableGlueTableReferenceOutput {
	return o
}

func (o ConfiguredTableGlueTableReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableGlueTableReference] {
	return pulumix.Output[ConfiguredTableGlueTableReference]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableGlueTableReferenceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableGlueTableReference) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o ConfiguredTableGlueTableReferenceOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableGlueTableReference) string { return v.TableName }).(pulumi.StringOutput)
}

type ConfiguredTableTableReference struct {
	Glue ConfiguredTableGlueTableReference `pulumi:"glue"`
}

// ConfiguredTableTableReferenceInput is an input type that accepts ConfiguredTableTableReferenceArgs and ConfiguredTableTableReferenceOutput values.
// You can construct a concrete instance of `ConfiguredTableTableReferenceInput` via:
//
//	ConfiguredTableTableReferenceArgs{...}
type ConfiguredTableTableReferenceInput interface {
	pulumi.Input

	ToConfiguredTableTableReferenceOutput() ConfiguredTableTableReferenceOutput
	ToConfiguredTableTableReferenceOutputWithContext(context.Context) ConfiguredTableTableReferenceOutput
}

type ConfiguredTableTableReferenceArgs struct {
	Glue ConfiguredTableGlueTableReferenceInput `pulumi:"glue"`
}

func (ConfiguredTableTableReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTableReference)(nil)).Elem()
}

func (i ConfiguredTableTableReferenceArgs) ToConfiguredTableTableReferenceOutput() ConfiguredTableTableReferenceOutput {
	return i.ToConfiguredTableTableReferenceOutputWithContext(context.Background())
}

func (i ConfiguredTableTableReferenceArgs) ToConfiguredTableTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableTableReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableTableReferenceOutput)
}

func (i ConfiguredTableTableReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableTableReference] {
	return pulumix.Output[ConfiguredTableTableReference]{
		OutputState: i.ToConfiguredTableTableReferenceOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableTableReferenceOutput struct{ *pulumi.OutputState }

func (ConfiguredTableTableReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTableReference)(nil)).Elem()
}

func (o ConfiguredTableTableReferenceOutput) ToConfiguredTableTableReferenceOutput() ConfiguredTableTableReferenceOutput {
	return o
}

func (o ConfiguredTableTableReferenceOutput) ToConfiguredTableTableReferenceOutputWithContext(ctx context.Context) ConfiguredTableTableReferenceOutput {
	return o
}

func (o ConfiguredTableTableReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableTableReference] {
	return pulumix.Output[ConfiguredTableTableReference]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableTableReferenceOutput) Glue() ConfiguredTableGlueTableReferenceOutput {
	return o.ApplyT(func(v ConfiguredTableTableReference) ConfiguredTableGlueTableReference { return v.Glue }).(ConfiguredTableGlueTableReferenceOutput)
}

type ConfiguredTableTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ConfiguredTableTagInput is an input type that accepts ConfiguredTableTagArgs and ConfiguredTableTagOutput values.
// You can construct a concrete instance of `ConfiguredTableTagInput` via:
//
//	ConfiguredTableTagArgs{...}
type ConfiguredTableTagInput interface {
	pulumi.Input

	ToConfiguredTableTagOutput() ConfiguredTableTagOutput
	ToConfiguredTableTagOutputWithContext(context.Context) ConfiguredTableTagOutput
}

type ConfiguredTableTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConfiguredTableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTag)(nil)).Elem()
}

func (i ConfiguredTableTagArgs) ToConfiguredTableTagOutput() ConfiguredTableTagOutput {
	return i.ToConfiguredTableTagOutputWithContext(context.Background())
}

func (i ConfiguredTableTagArgs) ToConfiguredTableTagOutputWithContext(ctx context.Context) ConfiguredTableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableTagOutput)
}

func (i ConfiguredTableTagArgs) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableTag] {
	return pulumix.Output[ConfiguredTableTag]{
		OutputState: i.ToConfiguredTableTagOutputWithContext(ctx).OutputState,
	}
}

// ConfiguredTableTagArrayInput is an input type that accepts ConfiguredTableTagArray and ConfiguredTableTagArrayOutput values.
// You can construct a concrete instance of `ConfiguredTableTagArrayInput` via:
//
//	ConfiguredTableTagArray{ ConfiguredTableTagArgs{...} }
type ConfiguredTableTagArrayInput interface {
	pulumi.Input

	ToConfiguredTableTagArrayOutput() ConfiguredTableTagArrayOutput
	ToConfiguredTableTagArrayOutputWithContext(context.Context) ConfiguredTableTagArrayOutput
}

type ConfiguredTableTagArray []ConfiguredTableTagInput

func (ConfiguredTableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableTag)(nil)).Elem()
}

func (i ConfiguredTableTagArray) ToConfiguredTableTagArrayOutput() ConfiguredTableTagArrayOutput {
	return i.ToConfiguredTableTagArrayOutputWithContext(context.Background())
}

func (i ConfiguredTableTagArray) ToConfiguredTableTagArrayOutputWithContext(ctx context.Context) ConfiguredTableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableTagArrayOutput)
}

func (i ConfiguredTableTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfiguredTableTag] {
	return pulumix.Output[[]ConfiguredTableTag]{
		OutputState: i.ToConfiguredTableTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableTagOutput struct{ *pulumi.OutputState }

func (ConfiguredTableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfiguredTableTag)(nil)).Elem()
}

func (o ConfiguredTableTagOutput) ToConfiguredTableTagOutput() ConfiguredTableTagOutput {
	return o
}

func (o ConfiguredTableTagOutput) ToConfiguredTableTagOutputWithContext(ctx context.Context) ConfiguredTableTagOutput {
	return o
}

func (o ConfiguredTableTagOutput) ToOutput(ctx context.Context) pulumix.Output[ConfiguredTableTag] {
	return pulumix.Output[ConfiguredTableTag]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ConfiguredTableTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConfiguredTableTag) string { return v.Value }).(pulumi.StringOutput)
}

type ConfiguredTableTagArrayOutput struct{ *pulumi.OutputState }

func (ConfiguredTableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfiguredTableTag)(nil)).Elem()
}

func (o ConfiguredTableTagArrayOutput) ToConfiguredTableTagArrayOutput() ConfiguredTableTagArrayOutput {
	return o
}

func (o ConfiguredTableTagArrayOutput) ToConfiguredTableTagArrayOutputWithContext(ctx context.Context) ConfiguredTableTagArrayOutput {
	return o
}

func (o ConfiguredTableTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfiguredTableTag] {
	return pulumix.Output[[]ConfiguredTableTag]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableTagArrayOutput) Index(i pulumi.IntInput) ConfiguredTableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfiguredTableTag {
		return vs[0].([]ConfiguredTableTag)[vs[1].(int)]
	}).(ConfiguredTableTagOutput)
}

type MembershipTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// MembershipTagInput is an input type that accepts MembershipTagArgs and MembershipTagOutput values.
// You can construct a concrete instance of `MembershipTagInput` via:
//
//	MembershipTagArgs{...}
type MembershipTagInput interface {
	pulumi.Input

	ToMembershipTagOutput() MembershipTagOutput
	ToMembershipTagOutputWithContext(context.Context) MembershipTagOutput
}

type MembershipTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (MembershipTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipTag)(nil)).Elem()
}

func (i MembershipTagArgs) ToMembershipTagOutput() MembershipTagOutput {
	return i.ToMembershipTagOutputWithContext(context.Background())
}

func (i MembershipTagArgs) ToMembershipTagOutputWithContext(ctx context.Context) MembershipTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipTagOutput)
}

func (i MembershipTagArgs) ToOutput(ctx context.Context) pulumix.Output[MembershipTag] {
	return pulumix.Output[MembershipTag]{
		OutputState: i.ToMembershipTagOutputWithContext(ctx).OutputState,
	}
}

// MembershipTagArrayInput is an input type that accepts MembershipTagArray and MembershipTagArrayOutput values.
// You can construct a concrete instance of `MembershipTagArrayInput` via:
//
//	MembershipTagArray{ MembershipTagArgs{...} }
type MembershipTagArrayInput interface {
	pulumi.Input

	ToMembershipTagArrayOutput() MembershipTagArrayOutput
	ToMembershipTagArrayOutputWithContext(context.Context) MembershipTagArrayOutput
}

type MembershipTagArray []MembershipTagInput

func (MembershipTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipTag)(nil)).Elem()
}

func (i MembershipTagArray) ToMembershipTagArrayOutput() MembershipTagArrayOutput {
	return i.ToMembershipTagArrayOutputWithContext(context.Background())
}

func (i MembershipTagArray) ToMembershipTagArrayOutputWithContext(ctx context.Context) MembershipTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipTagArrayOutput)
}

func (i MembershipTagArray) ToOutput(ctx context.Context) pulumix.Output[[]MembershipTag] {
	return pulumix.Output[[]MembershipTag]{
		OutputState: i.ToMembershipTagArrayOutputWithContext(ctx).OutputState,
	}
}

type MembershipTagOutput struct{ *pulumi.OutputState }

func (MembershipTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipTag)(nil)).Elem()
}

func (o MembershipTagOutput) ToMembershipTagOutput() MembershipTagOutput {
	return o
}

func (o MembershipTagOutput) ToMembershipTagOutputWithContext(ctx context.Context) MembershipTagOutput {
	return o
}

func (o MembershipTagOutput) ToOutput(ctx context.Context) pulumix.Output[MembershipTag] {
	return pulumix.Output[MembershipTag]{
		OutputState: o.OutputState,
	}
}

func (o MembershipTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o MembershipTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipTag) string { return v.Value }).(pulumi.StringOutput)
}

type MembershipTagArrayOutput struct{ *pulumi.OutputState }

func (MembershipTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MembershipTag)(nil)).Elem()
}

func (o MembershipTagArrayOutput) ToMembershipTagArrayOutput() MembershipTagArrayOutput {
	return o
}

func (o MembershipTagArrayOutput) ToMembershipTagArrayOutputWithContext(ctx context.Context) MembershipTagArrayOutput {
	return o
}

func (o MembershipTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MembershipTag] {
	return pulumix.Output[[]MembershipTag]{
		OutputState: o.OutputState,
	}
}

func (o MembershipTagArrayOutput) Index(i pulumi.IntInput) MembershipTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MembershipTag {
		return vs[0].([]MembershipTag)[vs[1].(int)]
	}).(MembershipTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisTemplateAnalysisParameterInput)(nil)).Elem(), AnalysisTemplateAnalysisParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisTemplateAnalysisParameterArrayInput)(nil)).Elem(), AnalysisTemplateAnalysisParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisTemplateAnalysisSourceInput)(nil)).Elem(), AnalysisTemplateAnalysisSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisTemplateTagInput)(nil)).Elem(), AnalysisTemplateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisTemplateTagArrayInput)(nil)).Elem(), AnalysisTemplateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationDataEncryptionMetadataInput)(nil)).Elem(), CollaborationDataEncryptionMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationDataEncryptionMetadataPtrInput)(nil)).Elem(), CollaborationDataEncryptionMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationMemberSpecificationInput)(nil)).Elem(), CollaborationMemberSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationMemberSpecificationArrayInput)(nil)).Elem(), CollaborationMemberSpecificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationTagInput)(nil)).Elem(), CollaborationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollaborationTagArrayInput)(nil)).Elem(), CollaborationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAnalysisRuleInput)(nil)).Elem(), ConfiguredTableAnalysisRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAnalysisRuleArrayInput)(nil)).Elem(), ConfiguredTableAnalysisRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAnalysisRulePolicyInput)(nil)).Elem(), ConfiguredTableAnalysisRulePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAssociationTagInput)(nil)).Elem(), ConfiguredTableAssociationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableAssociationTagArrayInput)(nil)).Elem(), ConfiguredTableAssociationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableGlueTableReferenceInput)(nil)).Elem(), ConfiguredTableGlueTableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableTableReferenceInput)(nil)).Elem(), ConfiguredTableTableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableTagInput)(nil)).Elem(), ConfiguredTableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableTagArrayInput)(nil)).Elem(), ConfiguredTableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipTagInput)(nil)).Elem(), MembershipTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipTagArrayInput)(nil)).Elem(), MembershipTagArray{})
	pulumi.RegisterOutputType(AnalysisTemplateAnalysisParameterOutput{})
	pulumi.RegisterOutputType(AnalysisTemplateAnalysisParameterArrayOutput{})
	pulumi.RegisterOutputType(AnalysisTemplateAnalysisSchemaOutput{})
	pulumi.RegisterOutputType(AnalysisTemplateAnalysisSchemaPtrOutput{})
	pulumi.RegisterOutputType(AnalysisTemplateAnalysisSourceOutput{})
	pulumi.RegisterOutputType(AnalysisTemplateTagOutput{})
	pulumi.RegisterOutputType(AnalysisTemplateTagArrayOutput{})
	pulumi.RegisterOutputType(CollaborationDataEncryptionMetadataOutput{})
	pulumi.RegisterOutputType(CollaborationDataEncryptionMetadataPtrOutput{})
	pulumi.RegisterOutputType(CollaborationMemberSpecificationOutput{})
	pulumi.RegisterOutputType(CollaborationMemberSpecificationArrayOutput{})
	pulumi.RegisterOutputType(CollaborationTagOutput{})
	pulumi.RegisterOutputType(CollaborationTagArrayOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAnalysisRuleOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAnalysisRuleArrayOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAnalysisRulePolicyOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAssociationTagOutput{})
	pulumi.RegisterOutputType(ConfiguredTableAssociationTagArrayOutput{})
	pulumi.RegisterOutputType(ConfiguredTableGlueTableReferenceOutput{})
	pulumi.RegisterOutputType(ConfiguredTableTableReferenceOutput{})
	pulumi.RegisterOutputType(ConfiguredTableTagOutput{})
	pulumi.RegisterOutputType(ConfiguredTableTagArrayOutput{})
	pulumi.RegisterOutputType(MembershipTagOutput{})
	pulumi.RegisterOutputType(MembershipTagArrayOutput{})
}
