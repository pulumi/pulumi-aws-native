// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanrooms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents a table that can be associated with collaborations
type ConfiguredTable struct {
	pulumi.CustomResourceState

	AllowedColumns            pulumi.StringArrayOutput               `pulumi:"allowedColumns"`
	AnalysisMethod            ConfiguredTableAnalysisMethodOutput    `pulumi:"analysisMethod"`
	AnalysisRules             ConfiguredTableAnalysisRuleArrayOutput `pulumi:"analysisRules"`
	Arn                       pulumi.StringOutput                    `pulumi:"arn"`
	ConfiguredTableIdentifier pulumi.StringOutput                    `pulumi:"configuredTableIdentifier"`
	Description               pulumi.StringPtrOutput                 `pulumi:"description"`
	Name                      pulumi.StringOutput                    `pulumi:"name"`
	TableReference            ConfiguredTableTableReferenceOutput    `pulumi:"tableReference"`
	// An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
	Tags ConfiguredTableTagArrayOutput `pulumi:"tags"`
}

// NewConfiguredTable registers a new resource with the given unique name, arguments, and options.
func NewConfiguredTable(ctx *pulumi.Context,
	name string, args *ConfiguredTableArgs, opts ...pulumi.ResourceOption) (*ConfiguredTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedColumns == nil {
		return nil, errors.New("invalid value for required argument 'AllowedColumns'")
	}
	if args.AnalysisMethod == nil {
		return nil, errors.New("invalid value for required argument 'AnalysisMethod'")
	}
	if args.TableReference == nil {
		return nil, errors.New("invalid value for required argument 'TableReference'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"allowedColumns[*]",
		"analysisMethod",
		"tableReference",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfiguredTable
	err := ctx.RegisterResource("aws-native:cleanrooms:ConfiguredTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfiguredTable gets an existing ConfiguredTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfiguredTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfiguredTableState, opts ...pulumi.ResourceOption) (*ConfiguredTable, error) {
	var resource ConfiguredTable
	err := ctx.ReadResource("aws-native:cleanrooms:ConfiguredTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfiguredTable resources.
type configuredTableState struct {
}

type ConfiguredTableState struct {
}

func (ConfiguredTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*configuredTableState)(nil)).Elem()
}

type configuredTableArgs struct {
	AllowedColumns []string                      `pulumi:"allowedColumns"`
	AnalysisMethod ConfiguredTableAnalysisMethod `pulumi:"analysisMethod"`
	AnalysisRules  []ConfiguredTableAnalysisRule `pulumi:"analysisRules"`
	Description    *string                       `pulumi:"description"`
	Name           *string                       `pulumi:"name"`
	TableReference ConfiguredTableTableReference `pulumi:"tableReference"`
	// An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
	Tags []ConfiguredTableTag `pulumi:"tags"`
}

// The set of arguments for constructing a ConfiguredTable resource.
type ConfiguredTableArgs struct {
	AllowedColumns pulumi.StringArrayInput
	AnalysisMethod ConfiguredTableAnalysisMethodInput
	AnalysisRules  ConfiguredTableAnalysisRuleArrayInput
	Description    pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	TableReference ConfiguredTableTableReferenceInput
	// An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
	Tags ConfiguredTableTagArrayInput
}

func (ConfiguredTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configuredTableArgs)(nil)).Elem()
}

type ConfiguredTableInput interface {
	pulumi.Input

	ToConfiguredTableOutput() ConfiguredTableOutput
	ToConfiguredTableOutputWithContext(ctx context.Context) ConfiguredTableOutput
}

func (*ConfiguredTable) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfiguredTable)(nil)).Elem()
}

func (i *ConfiguredTable) ToConfiguredTableOutput() ConfiguredTableOutput {
	return i.ToConfiguredTableOutputWithContext(context.Background())
}

func (i *ConfiguredTable) ToConfiguredTableOutputWithContext(ctx context.Context) ConfiguredTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfiguredTableOutput)
}

func (i *ConfiguredTable) ToOutput(ctx context.Context) pulumix.Output[*ConfiguredTable] {
	return pulumix.Output[*ConfiguredTable]{
		OutputState: i.ToConfiguredTableOutputWithContext(ctx).OutputState,
	}
}

type ConfiguredTableOutput struct{ *pulumi.OutputState }

func (ConfiguredTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfiguredTable)(nil)).Elem()
}

func (o ConfiguredTableOutput) ToConfiguredTableOutput() ConfiguredTableOutput {
	return o
}

func (o ConfiguredTableOutput) ToConfiguredTableOutputWithContext(ctx context.Context) ConfiguredTableOutput {
	return o
}

func (o ConfiguredTableOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfiguredTable] {
	return pulumix.Output[*ConfiguredTable]{
		OutputState: o.OutputState,
	}
}

func (o ConfiguredTableOutput) AllowedColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringArrayOutput { return v.AllowedColumns }).(pulumi.StringArrayOutput)
}

func (o ConfiguredTableOutput) AnalysisMethod() ConfiguredTableAnalysisMethodOutput {
	return o.ApplyT(func(v *ConfiguredTable) ConfiguredTableAnalysisMethodOutput { return v.AnalysisMethod }).(ConfiguredTableAnalysisMethodOutput)
}

func (o ConfiguredTableOutput) AnalysisRules() ConfiguredTableAnalysisRuleArrayOutput {
	return o.ApplyT(func(v *ConfiguredTable) ConfiguredTableAnalysisRuleArrayOutput { return v.AnalysisRules }).(ConfiguredTableAnalysisRuleArrayOutput)
}

func (o ConfiguredTableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ConfiguredTableOutput) ConfiguredTableIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.ConfiguredTableIdentifier }).(pulumi.StringOutput)
}

func (o ConfiguredTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConfiguredTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfiguredTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConfiguredTableOutput) TableReference() ConfiguredTableTableReferenceOutput {
	return o.ApplyT(func(v *ConfiguredTable) ConfiguredTableTableReferenceOutput { return v.TableReference }).(ConfiguredTableTableReferenceOutput)
}

// An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
func (o ConfiguredTableOutput) Tags() ConfiguredTableTagArrayOutput {
	return o.ApplyT(func(v *ConfiguredTable) ConfiguredTableTagArrayOutput { return v.Tags }).(ConfiguredTableTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfiguredTableInput)(nil)).Elem(), &ConfiguredTable{})
	pulumi.RegisterOutputType(ConfiguredTableOutput{})
}
