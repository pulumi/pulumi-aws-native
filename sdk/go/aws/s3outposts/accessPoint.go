// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3outposts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type Definition for AWS::S3Outposts::AccessPoint
type AccessPoint struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the specified AccessPoint.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon Resource Name (ARN) of the bucket you want to associate this AccessPoint with.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// A name for the AccessPoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// The access point policy associated with this access point.
	Policy pulumi.AnyOutput `pulumi:"policy"`
	// Virtual Private Cloud (VPC) from which requests can be made to the AccessPoint.
	VpcConfiguration AccessPointVpcConfigurationOutput `pulumi:"vpcConfiguration"`
}

// NewAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewAccessPoint(ctx *pulumi.Context,
	name string, args *AccessPointArgs, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.VpcConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'VpcConfiguration'")
	}
	var resource AccessPoint
	err := ctx.RegisterResource("aws-native:s3outposts:AccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPoint gets an existing AccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPointState, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	var resource AccessPoint
	err := ctx.ReadResource("aws-native:s3outposts:AccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPoint resources.
type accessPointState struct {
}

type AccessPointState struct {
}

func (AccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointState)(nil)).Elem()
}

type accessPointArgs struct {
	// The Amazon Resource Name (ARN) of the bucket you want to associate this AccessPoint with.
	Bucket string `pulumi:"bucket"`
	// A name for the AccessPoint.
	Name string `pulumi:"name"`
	// The access point policy associated with this access point.
	Policy interface{} `pulumi:"policy"`
	// Virtual Private Cloud (VPC) from which requests can be made to the AccessPoint.
	VpcConfiguration AccessPointVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a AccessPoint resource.
type AccessPointArgs struct {
	// The Amazon Resource Name (ARN) of the bucket you want to associate this AccessPoint with.
	Bucket pulumi.StringInput
	// A name for the AccessPoint.
	Name pulumi.StringInput
	// The access point policy associated with this access point.
	Policy pulumi.Input
	// Virtual Private Cloud (VPC) from which requests can be made to the AccessPoint.
	VpcConfiguration AccessPointVpcConfigurationInput
}

func (AccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointArgs)(nil)).Elem()
}

type AccessPointInput interface {
	pulumi.Input

	ToAccessPointOutput() AccessPointOutput
	ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput
}

func (*AccessPoint) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPoint)(nil))
}

func (i *AccessPoint) ToAccessPointOutput() AccessPointOutput {
	return i.ToAccessPointOutputWithContext(context.Background())
}

func (i *AccessPoint) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointOutput)
}

type AccessPointOutput struct{ *pulumi.OutputState }

func (AccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPoint)(nil))
}

func (o AccessPointOutput) ToAccessPointOutput() AccessPointOutput {
	return o
}

func (o AccessPointOutput) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointInput)(nil)).Elem(), &AccessPoint{})
	pulumi.RegisterOutputType(AccessPointOutput{})
}
