// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::SessionLogger Resource Type
type SessionLogger struct {
	pulumi.CustomResourceState

	// The additional encryption context of the session logger.
	AdditionalEncryptionContext pulumi.StringMapOutput `pulumi:"additionalEncryptionContext"`
	// The associated portal ARN.
	AssociatedPortalArns pulumi.StringArrayOutput `pulumi:"associatedPortalArns"`
	// The date the session logger resource was created.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The custom managed key of the session logger.
	CustomerManagedKey pulumi.StringPtrOutput `pulumi:"customerManagedKey"`
	// The human-readable display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The filter that specifies which events to monitor.
	EventFilter pulumi.AnyOutput `pulumi:"eventFilter"`
	// The configuration that specifies where logs are fowarded.
	LogConfiguration SessionLoggerLogConfigurationOutput `pulumi:"logConfiguration"`
	// The ARN of the session logger resource.
	SessionLoggerArn pulumi.StringOutput `pulumi:"sessionLoggerArn"`
	Tags             aws.TagArrayOutput  `pulumi:"tags"`
}

// NewSessionLogger registers a new resource with the given unique name, arguments, and options.
func NewSessionLogger(ctx *pulumi.Context,
	name string, args *SessionLoggerArgs, opts ...pulumi.ResourceOption) (*SessionLogger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventFilter == nil {
		return nil, errors.New("invalid value for required argument 'EventFilter'")
	}
	if args.LogConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'LogConfiguration'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"additionalEncryptionContext.*",
		"customerManagedKey",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SessionLogger
	err := ctx.RegisterResource("aws-native:workspacesweb:SessionLogger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSessionLogger gets an existing SessionLogger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSessionLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionLoggerState, opts ...pulumi.ResourceOption) (*SessionLogger, error) {
	var resource SessionLogger
	err := ctx.ReadResource("aws-native:workspacesweb:SessionLogger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SessionLogger resources.
type sessionLoggerState struct {
}

type SessionLoggerState struct {
}

func (SessionLoggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionLoggerState)(nil)).Elem()
}

type sessionLoggerArgs struct {
	// The additional encryption context of the session logger.
	AdditionalEncryptionContext map[string]string `pulumi:"additionalEncryptionContext"`
	// The custom managed key of the session logger.
	CustomerManagedKey *string `pulumi:"customerManagedKey"`
	// The human-readable display name.
	DisplayName *string `pulumi:"displayName"`
	// The filter that specifies which events to monitor.
	EventFilter interface{} `pulumi:"eventFilter"`
	// The configuration that specifies where logs are fowarded.
	LogConfiguration SessionLoggerLogConfiguration `pulumi:"logConfiguration"`
	Tags             []aws.Tag                     `pulumi:"tags"`
}

// The set of arguments for constructing a SessionLogger resource.
type SessionLoggerArgs struct {
	// The additional encryption context of the session logger.
	AdditionalEncryptionContext pulumi.StringMapInput
	// The custom managed key of the session logger.
	CustomerManagedKey pulumi.StringPtrInput
	// The human-readable display name.
	DisplayName pulumi.StringPtrInput
	// The filter that specifies which events to monitor.
	EventFilter pulumi.Input
	// The configuration that specifies where logs are fowarded.
	LogConfiguration SessionLoggerLogConfigurationInput
	Tags             aws.TagArrayInput
}

func (SessionLoggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionLoggerArgs)(nil)).Elem()
}

type SessionLoggerInput interface {
	pulumi.Input

	ToSessionLoggerOutput() SessionLoggerOutput
	ToSessionLoggerOutputWithContext(ctx context.Context) SessionLoggerOutput
}

func (*SessionLogger) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionLogger)(nil)).Elem()
}

func (i *SessionLogger) ToSessionLoggerOutput() SessionLoggerOutput {
	return i.ToSessionLoggerOutputWithContext(context.Background())
}

func (i *SessionLogger) ToSessionLoggerOutputWithContext(ctx context.Context) SessionLoggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionLoggerOutput)
}

type SessionLoggerOutput struct{ *pulumi.OutputState }

func (SessionLoggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionLogger)(nil)).Elem()
}

func (o SessionLoggerOutput) ToSessionLoggerOutput() SessionLoggerOutput {
	return o
}

func (o SessionLoggerOutput) ToSessionLoggerOutputWithContext(ctx context.Context) SessionLoggerOutput {
	return o
}

// The additional encryption context of the session logger.
func (o SessionLoggerOutput) AdditionalEncryptionContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringMapOutput { return v.AdditionalEncryptionContext }).(pulumi.StringMapOutput)
}

// The associated portal ARN.
func (o SessionLoggerOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringArrayOutput { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

// The date the session logger resource was created.
func (o SessionLoggerOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// The custom managed key of the session logger.
func (o SessionLoggerOutput) CustomerManagedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringPtrOutput { return v.CustomerManagedKey }).(pulumi.StringPtrOutput)
}

// The human-readable display name.
func (o SessionLoggerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The filter that specifies which events to monitor.
func (o SessionLoggerOutput) EventFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.AnyOutput { return v.EventFilter }).(pulumi.AnyOutput)
}

// The configuration that specifies where logs are fowarded.
func (o SessionLoggerOutput) LogConfiguration() SessionLoggerLogConfigurationOutput {
	return o.ApplyT(func(v *SessionLogger) SessionLoggerLogConfigurationOutput { return v.LogConfiguration }).(SessionLoggerLogConfigurationOutput)
}

// The ARN of the session logger resource.
func (o SessionLoggerOutput) SessionLoggerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringOutput { return v.SessionLoggerArn }).(pulumi.StringOutput)
}

func (o SessionLoggerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *SessionLogger) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionLoggerInput)(nil)).Elem(), &SessionLogger{})
	pulumi.RegisterOutputType(SessionLoggerOutput{})
}
