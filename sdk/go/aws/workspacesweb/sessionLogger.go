// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::SessionLogger Resource Type
type SessionLogger struct {
	pulumi.CustomResourceState

	AdditionalEncryptionContext pulumi.StringMapOutput              `pulumi:"additionalEncryptionContext"`
	AssociatedPortalArns        pulumi.StringArrayOutput            `pulumi:"associatedPortalArns"`
	CreationDate                pulumi.StringOutput                 `pulumi:"creationDate"`
	CustomerManagedKey          pulumi.StringPtrOutput              `pulumi:"customerManagedKey"`
	DisplayName                 pulumi.StringPtrOutput              `pulumi:"displayName"`
	EventFilter                 pulumi.AnyOutput                    `pulumi:"eventFilter"`
	LogConfiguration            SessionLoggerLogConfigurationOutput `pulumi:"logConfiguration"`
	SessionLoggerArn            pulumi.StringOutput                 `pulumi:"sessionLoggerArn"`
	Tags                        aws.TagArrayOutput                  `pulumi:"tags"`
}

// NewSessionLogger registers a new resource with the given unique name, arguments, and options.
func NewSessionLogger(ctx *pulumi.Context,
	name string, args *SessionLoggerArgs, opts ...pulumi.ResourceOption) (*SessionLogger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventFilter == nil {
		return nil, errors.New("invalid value for required argument 'EventFilter'")
	}
	if args.LogConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'LogConfiguration'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"additionalEncryptionContext.*",
		"customerManagedKey",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SessionLogger
	err := ctx.RegisterResource("aws-native:workspacesweb:SessionLogger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSessionLogger gets an existing SessionLogger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSessionLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionLoggerState, opts ...pulumi.ResourceOption) (*SessionLogger, error) {
	var resource SessionLogger
	err := ctx.ReadResource("aws-native:workspacesweb:SessionLogger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SessionLogger resources.
type sessionLoggerState struct {
}

type SessionLoggerState struct {
}

func (SessionLoggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionLoggerState)(nil)).Elem()
}

type sessionLoggerArgs struct {
	AdditionalEncryptionContext map[string]string             `pulumi:"additionalEncryptionContext"`
	CustomerManagedKey          *string                       `pulumi:"customerManagedKey"`
	DisplayName                 *string                       `pulumi:"displayName"`
	EventFilter                 interface{}                   `pulumi:"eventFilter"`
	LogConfiguration            SessionLoggerLogConfiguration `pulumi:"logConfiguration"`
	Tags                        []aws.Tag                     `pulumi:"tags"`
}

// The set of arguments for constructing a SessionLogger resource.
type SessionLoggerArgs struct {
	AdditionalEncryptionContext pulumi.StringMapInput
	CustomerManagedKey          pulumi.StringPtrInput
	DisplayName                 pulumi.StringPtrInput
	EventFilter                 pulumi.Input
	LogConfiguration            SessionLoggerLogConfigurationInput
	Tags                        aws.TagArrayInput
}

func (SessionLoggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionLoggerArgs)(nil)).Elem()
}

type SessionLoggerInput interface {
	pulumi.Input

	ToSessionLoggerOutput() SessionLoggerOutput
	ToSessionLoggerOutputWithContext(ctx context.Context) SessionLoggerOutput
}

func (*SessionLogger) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionLogger)(nil)).Elem()
}

func (i *SessionLogger) ToSessionLoggerOutput() SessionLoggerOutput {
	return i.ToSessionLoggerOutputWithContext(context.Background())
}

func (i *SessionLogger) ToSessionLoggerOutputWithContext(ctx context.Context) SessionLoggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionLoggerOutput)
}

type SessionLoggerOutput struct{ *pulumi.OutputState }

func (SessionLoggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionLogger)(nil)).Elem()
}

func (o SessionLoggerOutput) ToSessionLoggerOutput() SessionLoggerOutput {
	return o
}

func (o SessionLoggerOutput) ToSessionLoggerOutputWithContext(ctx context.Context) SessionLoggerOutput {
	return o
}

func (o SessionLoggerOutput) AdditionalEncryptionContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringMapOutput { return v.AdditionalEncryptionContext }).(pulumi.StringMapOutput)
}

func (o SessionLoggerOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringArrayOutput { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

func (o SessionLoggerOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o SessionLoggerOutput) CustomerManagedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringPtrOutput { return v.CustomerManagedKey }).(pulumi.StringPtrOutput)
}

func (o SessionLoggerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o SessionLoggerOutput) EventFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.AnyOutput { return v.EventFilter }).(pulumi.AnyOutput)
}

func (o SessionLoggerOutput) LogConfiguration() SessionLoggerLogConfigurationOutput {
	return o.ApplyT(func(v *SessionLogger) SessionLoggerLogConfigurationOutput { return v.LogConfiguration }).(SessionLoggerLogConfigurationOutput)
}

func (o SessionLoggerOutput) SessionLoggerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SessionLogger) pulumi.StringOutput { return v.SessionLoggerArn }).(pulumi.StringOutput)
}

func (o SessionLoggerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *SessionLogger) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionLoggerInput)(nil)).Elem(), &SessionLogger{})
	pulumi.RegisterOutputType(SessionLoggerOutput{})
}
