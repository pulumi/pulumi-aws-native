// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::UserSettings Resource Type
func LookupUserSettings(ctx *pulumi.Context, args *LookupUserSettingsArgs, opts ...pulumi.InvokeOption) (*LookupUserSettingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserSettingsResult
	err := ctx.Invoke("aws-native:workspacesweb:getUserSettings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserSettingsArgs struct {
	// The ARN of the user settings.
	UserSettingsArn string `pulumi:"userSettingsArn"`
}

type LookupUserSettingsResult struct {
	// The additional encryption context of the user settings.
	AdditionalEncryptionContext map[string]string `pulumi:"additionalEncryptionContext"`
	// A list of web portal ARNs that this user settings resource is associated with.
	AssociatedPortalArns []string `pulumi:"associatedPortalArns"`
	// The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.
	CookieSynchronizationConfiguration *UserSettingsCookieSynchronizationConfiguration `pulumi:"cookieSynchronizationConfiguration"`
	// Specifies whether the user can copy text from the streaming session to the local device.
	CopyAllowed *UserSettingsEnabledType `pulumi:"copyAllowed"`
	// The customer managed key used to encrypt sensitive information in the user settings.
	CustomerManagedKey *string `pulumi:"customerManagedKey"`
	// Specifies whether the user can use deep links that open automatically when connecting to a session.
	DeepLinkAllowed *UserSettingsEnabledType `pulumi:"deepLinkAllowed"`
	// The amount of time that a streaming session remains active after users disconnect.
	DisconnectTimeoutInMinutes *float64 `pulumi:"disconnectTimeoutInMinutes"`
	// Specifies whether the user can download files from the streaming session to the local device.
	DownloadAllowed *UserSettingsEnabledType `pulumi:"downloadAllowed"`
	// The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.
	IdleDisconnectTimeoutInMinutes *float64 `pulumi:"idleDisconnectTimeoutInMinutes"`
	// Specifies whether the user can paste text from the local device to the streaming session.
	PasteAllowed *UserSettingsEnabledType `pulumi:"pasteAllowed"`
	// Specifies whether the user can print to the local device.
	PrintAllowed *UserSettingsEnabledType `pulumi:"printAllowed"`
	// The tags to add to the user settings resource. A tag is a key-value pair.
	Tags []aws.Tag `pulumi:"tags"`
	// Specifies whether the user can upload files from the local device to the streaming session.
	UploadAllowed *UserSettingsEnabledType `pulumi:"uploadAllowed"`
	// The ARN of the user settings.
	UserSettingsArn *string `pulumi:"userSettingsArn"`
}

func LookupUserSettingsOutput(ctx *pulumi.Context, args LookupUserSettingsOutputArgs, opts ...pulumi.InvokeOption) LookupUserSettingsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserSettingsResultOutput, error) {
			args := v.(LookupUserSettingsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupUserSettingsResult
			secret, err := ctx.InvokePackageRaw("aws-native:workspacesweb:getUserSettings", args, &rv, "", opts...)
			if err != nil {
				return LookupUserSettingsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupUserSettingsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupUserSettingsResultOutput), nil
			}
			return output, nil
		}).(LookupUserSettingsResultOutput)
}

type LookupUserSettingsOutputArgs struct {
	// The ARN of the user settings.
	UserSettingsArn pulumi.StringInput `pulumi:"userSettingsArn"`
}

func (LookupUserSettingsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserSettingsArgs)(nil)).Elem()
}

type LookupUserSettingsResultOutput struct{ *pulumi.OutputState }

func (LookupUserSettingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserSettingsResult)(nil)).Elem()
}

func (o LookupUserSettingsResultOutput) ToLookupUserSettingsResultOutput() LookupUserSettingsResultOutput {
	return o
}

func (o LookupUserSettingsResultOutput) ToLookupUserSettingsResultOutputWithContext(ctx context.Context) LookupUserSettingsResultOutput {
	return o
}

// The additional encryption context of the user settings.
func (o LookupUserSettingsResultOutput) AdditionalEncryptionContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) map[string]string { return v.AdditionalEncryptionContext }).(pulumi.StringMapOutput)
}

// A list of web portal ARNs that this user settings resource is associated with.
func (o LookupUserSettingsResultOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) []string { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

// The configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser.
func (o LookupUserSettingsResultOutput) CookieSynchronizationConfiguration() UserSettingsCookieSynchronizationConfigurationPtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *UserSettingsCookieSynchronizationConfiguration {
		return v.CookieSynchronizationConfiguration
	}).(UserSettingsCookieSynchronizationConfigurationPtrOutput)
}

// Specifies whether the user can copy text from the streaming session to the local device.
func (o LookupUserSettingsResultOutput) CopyAllowed() UserSettingsEnabledTypePtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *UserSettingsEnabledType { return v.CopyAllowed }).(UserSettingsEnabledTypePtrOutput)
}

// The customer managed key used to encrypt sensitive information in the user settings.
func (o LookupUserSettingsResultOutput) CustomerManagedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *string { return v.CustomerManagedKey }).(pulumi.StringPtrOutput)
}

// Specifies whether the user can use deep links that open automatically when connecting to a session.
func (o LookupUserSettingsResultOutput) DeepLinkAllowed() UserSettingsEnabledTypePtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *UserSettingsEnabledType { return v.DeepLinkAllowed }).(UserSettingsEnabledTypePtrOutput)
}

// The amount of time that a streaming session remains active after users disconnect.
func (o LookupUserSettingsResultOutput) DisconnectTimeoutInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *float64 { return v.DisconnectTimeoutInMinutes }).(pulumi.Float64PtrOutput)
}

// Specifies whether the user can download files from the streaming session to the local device.
func (o LookupUserSettingsResultOutput) DownloadAllowed() UserSettingsEnabledTypePtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *UserSettingsEnabledType { return v.DownloadAllowed }).(UserSettingsEnabledTypePtrOutput)
}

// The amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the disconnect timeout interval begins.
func (o LookupUserSettingsResultOutput) IdleDisconnectTimeoutInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *float64 { return v.IdleDisconnectTimeoutInMinutes }).(pulumi.Float64PtrOutput)
}

// Specifies whether the user can paste text from the local device to the streaming session.
func (o LookupUserSettingsResultOutput) PasteAllowed() UserSettingsEnabledTypePtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *UserSettingsEnabledType { return v.PasteAllowed }).(UserSettingsEnabledTypePtrOutput)
}

// Specifies whether the user can print to the local device.
func (o LookupUserSettingsResultOutput) PrintAllowed() UserSettingsEnabledTypePtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *UserSettingsEnabledType { return v.PrintAllowed }).(UserSettingsEnabledTypePtrOutput)
}

// The tags to add to the user settings resource. A tag is a key-value pair.
func (o LookupUserSettingsResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// Specifies whether the user can upload files from the local device to the streaming session.
func (o LookupUserSettingsResultOutput) UploadAllowed() UserSettingsEnabledTypePtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *UserSettingsEnabledType { return v.UploadAllowed }).(UserSettingsEnabledTypePtrOutput)
}

// The ARN of the user settings.
func (o LookupUserSettingsResultOutput) UserSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserSettingsResult) *string { return v.UserSettingsArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserSettingsResultOutput{})
}
