// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::SessionLogger Resource Type
func LookupSessionLogger(ctx *pulumi.Context, args *LookupSessionLoggerArgs, opts ...pulumi.InvokeOption) (*LookupSessionLoggerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSessionLoggerResult
	err := ctx.Invoke("aws-native:workspacesweb:getSessionLogger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSessionLoggerArgs struct {
	SessionLoggerArn string `pulumi:"sessionLoggerArn"`
}

type LookupSessionLoggerResult struct {
	AssociatedPortalArns []string                       `pulumi:"associatedPortalArns"`
	CreationDate         *string                        `pulumi:"creationDate"`
	DisplayName          *string                        `pulumi:"displayName"`
	EventFilter          interface{}                    `pulumi:"eventFilter"`
	LogConfiguration     *SessionLoggerLogConfiguration `pulumi:"logConfiguration"`
	SessionLoggerArn     *string                        `pulumi:"sessionLoggerArn"`
	Tags                 []aws.Tag                      `pulumi:"tags"`
}

func LookupSessionLoggerOutput(ctx *pulumi.Context, args LookupSessionLoggerOutputArgs, opts ...pulumi.InvokeOption) LookupSessionLoggerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSessionLoggerResultOutput, error) {
			args := v.(LookupSessionLoggerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:workspacesweb:getSessionLogger", args, LookupSessionLoggerResultOutput{}, options).(LookupSessionLoggerResultOutput), nil
		}).(LookupSessionLoggerResultOutput)
}

type LookupSessionLoggerOutputArgs struct {
	SessionLoggerArn pulumi.StringInput `pulumi:"sessionLoggerArn"`
}

func (LookupSessionLoggerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSessionLoggerArgs)(nil)).Elem()
}

type LookupSessionLoggerResultOutput struct{ *pulumi.OutputState }

func (LookupSessionLoggerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSessionLoggerResult)(nil)).Elem()
}

func (o LookupSessionLoggerResultOutput) ToLookupSessionLoggerResultOutput() LookupSessionLoggerResultOutput {
	return o
}

func (o LookupSessionLoggerResultOutput) ToLookupSessionLoggerResultOutputWithContext(ctx context.Context) LookupSessionLoggerResultOutput {
	return o
}

func (o LookupSessionLoggerResultOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSessionLoggerResult) []string { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

func (o LookupSessionLoggerResultOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSessionLoggerResult) *string { return v.CreationDate }).(pulumi.StringPtrOutput)
}

func (o LookupSessionLoggerResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSessionLoggerResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o LookupSessionLoggerResultOutput) EventFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupSessionLoggerResult) interface{} { return v.EventFilter }).(pulumi.AnyOutput)
}

func (o LookupSessionLoggerResultOutput) LogConfiguration() SessionLoggerLogConfigurationPtrOutput {
	return o.ApplyT(func(v LookupSessionLoggerResult) *SessionLoggerLogConfiguration { return v.LogConfiguration }).(SessionLoggerLogConfigurationPtrOutput)
}

func (o LookupSessionLoggerResultOutput) SessionLoggerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSessionLoggerResult) *string { return v.SessionLoggerArn }).(pulumi.StringPtrOutput)
}

func (o LookupSessionLoggerResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupSessionLoggerResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSessionLoggerResultOutput{})
}
