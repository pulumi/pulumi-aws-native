// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::BrowserSettings Resource Type
func LookupBrowserSettings(ctx *pulumi.Context, args *LookupBrowserSettingsArgs, opts ...pulumi.InvokeOption) (*LookupBrowserSettingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBrowserSettingsResult
	err := ctx.Invoke("aws-native:workspacesweb:getBrowserSettings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBrowserSettingsArgs struct {
	// The ARN of the browser settings.
	BrowserSettingsArn string `pulumi:"browserSettingsArn"`
}

type LookupBrowserSettingsResult struct {
	// A list of web portal ARNs that the browser settings resource is associated with.
	AssociatedPortalArns []string `pulumi:"associatedPortalArns"`
	// A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.
	BrowserPolicy *string `pulumi:"browserPolicy"`
	// The ARN of the browser settings.
	BrowserSettingsArn *string `pulumi:"browserSettingsArn"`
	// The tags to add to the browser settings resource. A tag is a key-value pair.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupBrowserSettingsOutput(ctx *pulumi.Context, args LookupBrowserSettingsOutputArgs, opts ...pulumi.InvokeOption) LookupBrowserSettingsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBrowserSettingsResultOutput, error) {
			args := v.(LookupBrowserSettingsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupBrowserSettingsResult
			secret, err := ctx.InvokePackageRaw("aws-native:workspacesweb:getBrowserSettings", args, &rv, "", opts...)
			if err != nil {
				return LookupBrowserSettingsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupBrowserSettingsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupBrowserSettingsResultOutput), nil
			}
			return output, nil
		}).(LookupBrowserSettingsResultOutput)
}

type LookupBrowserSettingsOutputArgs struct {
	// The ARN of the browser settings.
	BrowserSettingsArn pulumi.StringInput `pulumi:"browserSettingsArn"`
}

func (LookupBrowserSettingsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrowserSettingsArgs)(nil)).Elem()
}

type LookupBrowserSettingsResultOutput struct{ *pulumi.OutputState }

func (LookupBrowserSettingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBrowserSettingsResult)(nil)).Elem()
}

func (o LookupBrowserSettingsResultOutput) ToLookupBrowserSettingsResultOutput() LookupBrowserSettingsResultOutput {
	return o
}

func (o LookupBrowserSettingsResultOutput) ToLookupBrowserSettingsResultOutputWithContext(ctx context.Context) LookupBrowserSettingsResultOutput {
	return o
}

// A list of web portal ARNs that the browser settings resource is associated with.
func (o LookupBrowserSettingsResultOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBrowserSettingsResult) []string { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

// A JSON string containing Chrome Enterprise policies that will be applied to all streaming sessions.
func (o LookupBrowserSettingsResultOutput) BrowserPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBrowserSettingsResult) *string { return v.BrowserPolicy }).(pulumi.StringPtrOutput)
}

// The ARN of the browser settings.
func (o LookupBrowserSettingsResultOutput) BrowserSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBrowserSettingsResult) *string { return v.BrowserSettingsArn }).(pulumi.StringPtrOutput)
}

// The tags to add to the browser settings resource. A tag is a key-value pair.
func (o LookupBrowserSettingsResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupBrowserSettingsResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBrowserSettingsResultOutput{})
}
