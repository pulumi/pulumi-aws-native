// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::Portal Resource Type
type Portal struct {
	pulumi.CustomResourceState

	// The additional encryption context of the portal.
	AdditionalEncryptionContext pulumi.StringMapOutput `pulumi:"additionalEncryptionContext"`
	// The type of authentication integration points used when signing into the web portal. Defaults to `Standard` .
	//
	// `Standard` web portals are authenticated directly through your identity provider (IdP). User and group access to your web portal is controlled through your IdP. You need to include an IdP resource in your template to integrate your IdP with your web portal. Completing the configuration for your IdP requires exchanging WorkSpaces Secure Browser’s SP metadata with your IdP’s IdP metadata. If your IdP requires the SP metadata first before returning the IdP metadata, you should follow these steps:
	//
	// 1. Create and deploy a CloudFormation template with a `Standard` portal with no `IdentityProvider` resource.
	//
	// 2. Retrieve the SP metadata using `Fn:GetAtt` , the WorkSpaces Secure Browser console, or by the calling the `GetPortalServiceProviderMetadata` API.
	//
	// 3. Submit the data to your IdP.
	//
	// 4. Add an `IdentityProvider` resource to your CloudFormation template.
	//
	// `IAM Identity Center` web portals are authenticated through AWS IAM Identity Center . They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration) and other identity provider information must be configured in IAM Identity Center . User and group assignment must be done through the WorkSpaces Secure Browser console. These cannot be configured in CloudFormation.
	AuthenticationType PortalAuthenticationTypePtrOutput `pulumi:"authenticationType"`
	// The ARN of the browser settings that is associated with this web portal.
	BrowserSettingsArn pulumi.StringPtrOutput `pulumi:"browserSettingsArn"`
	// The browser that users see when using a streaming session.
	BrowserType PortalBrowserTypeOutput `pulumi:"browserType"`
	// The creation date of the web portal.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The customer managed key of the web portal.
	//
	// *Pattern* : `^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$`
	CustomerManagedKey pulumi.StringPtrOutput `pulumi:"customerManagedKey"`
	// The ARN of the data protection settings.
	DataProtectionSettingsArn pulumi.StringPtrOutput `pulumi:"dataProtectionSettingsArn"`
	// The name of the web portal.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The type and resources of the underlying instance.
	InstanceType PortalInstanceTypePtrOutput `pulumi:"instanceType"`
	// The ARN of the IP access settings that is associated with the web portal.
	IpAccessSettingsArn pulumi.StringPtrOutput `pulumi:"ipAccessSettingsArn"`
	// The maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions pulumi.Float64PtrOutput `pulumi:"maxConcurrentSessions"`
	// The ARN of the network settings that is associated with the web portal.
	NetworkSettingsArn pulumi.StringPtrOutput `pulumi:"networkSettingsArn"`
	// The ARN of the web portal.
	PortalArn pulumi.StringOutput `pulumi:"portalArn"`
	// The endpoint URL of the web portal that users access in order to start streaming sessions.
	PortalEndpoint pulumi.StringOutput `pulumi:"portalEndpoint"`
	// The status of the web portal.
	PortalStatus PortalStatusOutput `pulumi:"portalStatus"`
	// The renderer that is used in streaming sessions.
	RendererType PortalRendererTypeOutput `pulumi:"rendererType"`
	// The SAML metadata of the service provider.
	ServiceProviderSamlMetadata pulumi.StringOutput    `pulumi:"serviceProviderSamlMetadata"`
	SessionLoggerArn            pulumi.StringPtrOutput `pulumi:"sessionLoggerArn"`
	// A message that explains why the web portal is in its current status.
	StatusReason pulumi.StringOutput `pulumi:"statusReason"`
	// The tags to add to the web portal. A tag is a key-value pair.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ARN of the trust store that is associated with the web portal.
	TrustStoreArn pulumi.StringPtrOutput `pulumi:"trustStoreArn"`
	// The ARN of the user access logging settings that is associated with the web portal.
	UserAccessLoggingSettingsArn pulumi.StringPtrOutput `pulumi:"userAccessLoggingSettingsArn"`
	// The ARN of the user settings that is associated with the web portal.
	UserSettingsArn pulumi.StringPtrOutput `pulumi:"userSettingsArn"`
}

// NewPortal registers a new resource with the given unique name, arguments, and options.
func NewPortal(ctx *pulumi.Context,
	name string, args *PortalArgs, opts ...pulumi.ResourceOption) (*Portal, error) {
	if args == nil {
		args = &PortalArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"additionalEncryptionContext.*",
		"customerManagedKey",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Portal
	err := ctx.RegisterResource("aws-native:workspacesweb:Portal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortal gets an existing Portal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalState, opts ...pulumi.ResourceOption) (*Portal, error) {
	var resource Portal
	err := ctx.ReadResource("aws-native:workspacesweb:Portal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Portal resources.
type portalState struct {
}

type PortalState struct {
}

func (PortalState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalState)(nil)).Elem()
}

type portalArgs struct {
	// The additional encryption context of the portal.
	AdditionalEncryptionContext map[string]string `pulumi:"additionalEncryptionContext"`
	// The type of authentication integration points used when signing into the web portal. Defaults to `Standard` .
	//
	// `Standard` web portals are authenticated directly through your identity provider (IdP). User and group access to your web portal is controlled through your IdP. You need to include an IdP resource in your template to integrate your IdP with your web portal. Completing the configuration for your IdP requires exchanging WorkSpaces Secure Browser’s SP metadata with your IdP’s IdP metadata. If your IdP requires the SP metadata first before returning the IdP metadata, you should follow these steps:
	//
	// 1. Create and deploy a CloudFormation template with a `Standard` portal with no `IdentityProvider` resource.
	//
	// 2. Retrieve the SP metadata using `Fn:GetAtt` , the WorkSpaces Secure Browser console, or by the calling the `GetPortalServiceProviderMetadata` API.
	//
	// 3. Submit the data to your IdP.
	//
	// 4. Add an `IdentityProvider` resource to your CloudFormation template.
	//
	// `IAM Identity Center` web portals are authenticated through AWS IAM Identity Center . They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration) and other identity provider information must be configured in IAM Identity Center . User and group assignment must be done through the WorkSpaces Secure Browser console. These cannot be configured in CloudFormation.
	AuthenticationType *PortalAuthenticationType `pulumi:"authenticationType"`
	// The ARN of the browser settings that is associated with this web portal.
	BrowserSettingsArn *string `pulumi:"browserSettingsArn"`
	// The customer managed key of the web portal.
	//
	// *Pattern* : `^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$`
	CustomerManagedKey *string `pulumi:"customerManagedKey"`
	// The ARN of the data protection settings.
	DataProtectionSettingsArn *string `pulumi:"dataProtectionSettingsArn"`
	// The name of the web portal.
	DisplayName *string `pulumi:"displayName"`
	// The type and resources of the underlying instance.
	InstanceType *PortalInstanceType `pulumi:"instanceType"`
	// The ARN of the IP access settings that is associated with the web portal.
	IpAccessSettingsArn *string `pulumi:"ipAccessSettingsArn"`
	// The maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions *float64 `pulumi:"maxConcurrentSessions"`
	// The ARN of the network settings that is associated with the web portal.
	NetworkSettingsArn *string `pulumi:"networkSettingsArn"`
	SessionLoggerArn   *string `pulumi:"sessionLoggerArn"`
	// The tags to add to the web portal. A tag is a key-value pair.
	Tags []aws.Tag `pulumi:"tags"`
	// The ARN of the trust store that is associated with the web portal.
	TrustStoreArn *string `pulumi:"trustStoreArn"`
	// The ARN of the user access logging settings that is associated with the web portal.
	UserAccessLoggingSettingsArn *string `pulumi:"userAccessLoggingSettingsArn"`
	// The ARN of the user settings that is associated with the web portal.
	UserSettingsArn *string `pulumi:"userSettingsArn"`
}

// The set of arguments for constructing a Portal resource.
type PortalArgs struct {
	// The additional encryption context of the portal.
	AdditionalEncryptionContext pulumi.StringMapInput
	// The type of authentication integration points used when signing into the web portal. Defaults to `Standard` .
	//
	// `Standard` web portals are authenticated directly through your identity provider (IdP). User and group access to your web portal is controlled through your IdP. You need to include an IdP resource in your template to integrate your IdP with your web portal. Completing the configuration for your IdP requires exchanging WorkSpaces Secure Browser’s SP metadata with your IdP’s IdP metadata. If your IdP requires the SP metadata first before returning the IdP metadata, you should follow these steps:
	//
	// 1. Create and deploy a CloudFormation template with a `Standard` portal with no `IdentityProvider` resource.
	//
	// 2. Retrieve the SP metadata using `Fn:GetAtt` , the WorkSpaces Secure Browser console, or by the calling the `GetPortalServiceProviderMetadata` API.
	//
	// 3. Submit the data to your IdP.
	//
	// 4. Add an `IdentityProvider` resource to your CloudFormation template.
	//
	// `IAM Identity Center` web portals are authenticated through AWS IAM Identity Center . They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration) and other identity provider information must be configured in IAM Identity Center . User and group assignment must be done through the WorkSpaces Secure Browser console. These cannot be configured in CloudFormation.
	AuthenticationType PortalAuthenticationTypePtrInput
	// The ARN of the browser settings that is associated with this web portal.
	BrowserSettingsArn pulumi.StringPtrInput
	// The customer managed key of the web portal.
	//
	// *Pattern* : `^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$`
	CustomerManagedKey pulumi.StringPtrInput
	// The ARN of the data protection settings.
	DataProtectionSettingsArn pulumi.StringPtrInput
	// The name of the web portal.
	DisplayName pulumi.StringPtrInput
	// The type and resources of the underlying instance.
	InstanceType PortalInstanceTypePtrInput
	// The ARN of the IP access settings that is associated with the web portal.
	IpAccessSettingsArn pulumi.StringPtrInput
	// The maximum number of concurrent sessions for the portal.
	MaxConcurrentSessions pulumi.Float64PtrInput
	// The ARN of the network settings that is associated with the web portal.
	NetworkSettingsArn pulumi.StringPtrInput
	SessionLoggerArn   pulumi.StringPtrInput
	// The tags to add to the web portal. A tag is a key-value pair.
	Tags aws.TagArrayInput
	// The ARN of the trust store that is associated with the web portal.
	TrustStoreArn pulumi.StringPtrInput
	// The ARN of the user access logging settings that is associated with the web portal.
	UserAccessLoggingSettingsArn pulumi.StringPtrInput
	// The ARN of the user settings that is associated with the web portal.
	UserSettingsArn pulumi.StringPtrInput
}

func (PortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalArgs)(nil)).Elem()
}

type PortalInput interface {
	pulumi.Input

	ToPortalOutput() PortalOutput
	ToPortalOutputWithContext(ctx context.Context) PortalOutput
}

func (*Portal) ElementType() reflect.Type {
	return reflect.TypeOf((**Portal)(nil)).Elem()
}

func (i *Portal) ToPortalOutput() PortalOutput {
	return i.ToPortalOutputWithContext(context.Background())
}

func (i *Portal) ToPortalOutputWithContext(ctx context.Context) PortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalOutput)
}

type PortalOutput struct{ *pulumi.OutputState }

func (PortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Portal)(nil)).Elem()
}

func (o PortalOutput) ToPortalOutput() PortalOutput {
	return o
}

func (o PortalOutput) ToPortalOutputWithContext(ctx context.Context) PortalOutput {
	return o
}

// The additional encryption context of the portal.
func (o PortalOutput) AdditionalEncryptionContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringMapOutput { return v.AdditionalEncryptionContext }).(pulumi.StringMapOutput)
}

// The type of authentication integration points used when signing into the web portal. Defaults to `Standard` .
//
// `Standard` web portals are authenticated directly through your identity provider (IdP). User and group access to your web portal is controlled through your IdP. You need to include an IdP resource in your template to integrate your IdP with your web portal. Completing the configuration for your IdP requires exchanging WorkSpaces Secure Browser’s SP metadata with your IdP’s IdP metadata. If your IdP requires the SP metadata first before returning the IdP metadata, you should follow these steps:
//
// 1. Create and deploy a CloudFormation template with a `Standard` portal with no `IdentityProvider` resource.
//
// 2. Retrieve the SP metadata using `Fn:GetAtt` , the WorkSpaces Secure Browser console, or by the calling the `GetPortalServiceProviderMetadata` API.
//
// 3. Submit the data to your IdP.
//
// 4. Add an `IdentityProvider` resource to your CloudFormation template.
//
// `IAM Identity Center` web portals are authenticated through AWS IAM Identity Center . They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration) and other identity provider information must be configured in IAM Identity Center . User and group assignment must be done through the WorkSpaces Secure Browser console. These cannot be configured in CloudFormation.
func (o PortalOutput) AuthenticationType() PortalAuthenticationTypePtrOutput {
	return o.ApplyT(func(v *Portal) PortalAuthenticationTypePtrOutput { return v.AuthenticationType }).(PortalAuthenticationTypePtrOutput)
}

// The ARN of the browser settings that is associated with this web portal.
func (o PortalOutput) BrowserSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.BrowserSettingsArn }).(pulumi.StringPtrOutput)
}

// The browser that users see when using a streaming session.
func (o PortalOutput) BrowserType() PortalBrowserTypeOutput {
	return o.ApplyT(func(v *Portal) PortalBrowserTypeOutput { return v.BrowserType }).(PortalBrowserTypeOutput)
}

// The creation date of the web portal.
func (o PortalOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// The customer managed key of the web portal.
//
// *Pattern* : `^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[a-zA-Z0-9]{1,12}:key\/[a-zA-Z0-9-]+$`
func (o PortalOutput) CustomerManagedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.CustomerManagedKey }).(pulumi.StringPtrOutput)
}

// The ARN of the data protection settings.
func (o PortalOutput) DataProtectionSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.DataProtectionSettingsArn }).(pulumi.StringPtrOutput)
}

// The name of the web portal.
func (o PortalOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The type and resources of the underlying instance.
func (o PortalOutput) InstanceType() PortalInstanceTypePtrOutput {
	return o.ApplyT(func(v *Portal) PortalInstanceTypePtrOutput { return v.InstanceType }).(PortalInstanceTypePtrOutput)
}

// The ARN of the IP access settings that is associated with the web portal.
func (o PortalOutput) IpAccessSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.IpAccessSettingsArn }).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent sessions for the portal.
func (o PortalOutput) MaxConcurrentSessions() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.Float64PtrOutput { return v.MaxConcurrentSessions }).(pulumi.Float64PtrOutput)
}

// The ARN of the network settings that is associated with the web portal.
func (o PortalOutput) NetworkSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.NetworkSettingsArn }).(pulumi.StringPtrOutput)
}

// The ARN of the web portal.
func (o PortalOutput) PortalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.PortalArn }).(pulumi.StringOutput)
}

// The endpoint URL of the web portal that users access in order to start streaming sessions.
func (o PortalOutput) PortalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.PortalEndpoint }).(pulumi.StringOutput)
}

// The status of the web portal.
func (o PortalOutput) PortalStatus() PortalStatusOutput {
	return o.ApplyT(func(v *Portal) PortalStatusOutput { return v.PortalStatus }).(PortalStatusOutput)
}

// The renderer that is used in streaming sessions.
func (o PortalOutput) RendererType() PortalRendererTypeOutput {
	return o.ApplyT(func(v *Portal) PortalRendererTypeOutput { return v.RendererType }).(PortalRendererTypeOutput)
}

// The SAML metadata of the service provider.
func (o PortalOutput) ServiceProviderSamlMetadata() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.ServiceProviderSamlMetadata }).(pulumi.StringOutput)
}

func (o PortalOutput) SessionLoggerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.SessionLoggerArn }).(pulumi.StringPtrOutput)
}

// A message that explains why the web portal is in its current status.
func (o PortalOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// The tags to add to the web portal. A tag is a key-value pair.
func (o PortalOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Portal) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ARN of the trust store that is associated with the web portal.
func (o PortalOutput) TrustStoreArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.TrustStoreArn }).(pulumi.StringPtrOutput)
}

// The ARN of the user access logging settings that is associated with the web portal.
func (o PortalOutput) UserAccessLoggingSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.UserAccessLoggingSettingsArn }).(pulumi.StringPtrOutput)
}

// The ARN of the user settings that is associated with the web portal.
func (o PortalOutput) UserSettingsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringPtrOutput { return v.UserSettingsArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalInput)(nil)).Elem(), &Portal{})
	pulumi.RegisterOutputType(PortalOutput{})
}
