// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::IdentityProvider Resource Type
func LookupIdentityProvider(ctx *pulumi.Context, args *LookupIdentityProviderArgs, opts ...pulumi.InvokeOption) (*LookupIdentityProviderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIdentityProviderResult
	err := ctx.Invoke("aws-native:workspacesweb:getIdentityProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIdentityProviderArgs struct {
	// The ARN of the identity provider.
	IdentityProviderArn string `pulumi:"identityProviderArn"`
}

type LookupIdentityProviderResult struct {
	// The ARN of the identity provider.
	IdentityProviderArn *string `pulumi:"identityProviderArn"`
	// The identity provider details. The following list describes the provider detail keys for each identity provider type.
	//
	// - For Google and Login with Amazon:
	//
	// - `client_id`
	// - `client_secret`
	// - `authorize_scopes`
	// - For Facebook:
	//
	// - `client_id`
	// - `client_secret`
	// - `authorize_scopes`
	// - `api_version`
	// - For Sign in with Apple:
	//
	// - `client_id`
	// - `team_id`
	// - `key_id`
	// - `private_key`
	// - `authorize_scopes`
	// - For OIDC providers:
	//
	// - `client_id`
	// - `client_secret`
	// - `attributes_request_method`
	// - `oidc_issuer`
	// - `authorize_scopes`
	// - `authorize_url` *if not available from discovery URL specified by oidc_issuer key*
	// - `token_url` *if not available from discovery URL specified by oidc_issuer key*
	// - `attributes_url` *if not available from discovery URL specified by oidc_issuer key*
	// - `jwks_uri` *if not available from discovery URL specified by oidc_issuer key*
	// - For SAML providers:
	//
	// - `MetadataFile` OR `MetadataURL`
	// - `IDPSignout` (boolean) *optional*
	// - `IDPInit` (boolean) *optional*
	// - `RequestSigningAlgorithm` (string) *optional* - Only accepts `rsa-sha256`
	// - `EncryptedResponses` (boolean) *optional*
	IdentityProviderDetails map[string]string `pulumi:"identityProviderDetails"`
	// The identity provider name.
	IdentityProviderName *string `pulumi:"identityProviderName"`
	// The identity provider type.
	IdentityProviderType *IdentityProviderType `pulumi:"identityProviderType"`
}

func LookupIdentityProviderOutput(ctx *pulumi.Context, args LookupIdentityProviderOutputArgs, opts ...pulumi.InvokeOption) LookupIdentityProviderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIdentityProviderResult, error) {
			args := v.(LookupIdentityProviderArgs)
			r, err := LookupIdentityProvider(ctx, &args, opts...)
			var s LookupIdentityProviderResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIdentityProviderResultOutput)
}

type LookupIdentityProviderOutputArgs struct {
	// The ARN of the identity provider.
	IdentityProviderArn pulumi.StringInput `pulumi:"identityProviderArn"`
}

func (LookupIdentityProviderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdentityProviderArgs)(nil)).Elem()
}

type LookupIdentityProviderResultOutput struct{ *pulumi.OutputState }

func (LookupIdentityProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdentityProviderResult)(nil)).Elem()
}

func (o LookupIdentityProviderResultOutput) ToLookupIdentityProviderResultOutput() LookupIdentityProviderResultOutput {
	return o
}

func (o LookupIdentityProviderResultOutput) ToLookupIdentityProviderResultOutputWithContext(ctx context.Context) LookupIdentityProviderResultOutput {
	return o
}

// The ARN of the identity provider.
func (o LookupIdentityProviderResultOutput) IdentityProviderArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIdentityProviderResult) *string { return v.IdentityProviderArn }).(pulumi.StringPtrOutput)
}

// The identity provider details. The following list describes the provider detail keys for each identity provider type.
//
// - For Google and Login with Amazon:
//
// - `client_id`
// - `client_secret`
// - `authorize_scopes`
// - For Facebook:
//
// - `client_id`
// - `client_secret`
// - `authorize_scopes`
// - `api_version`
// - For Sign in with Apple:
//
// - `client_id`
// - `team_id`
// - `key_id`
// - `private_key`
// - `authorize_scopes`
// - For OIDC providers:
//
// - `client_id`
// - `client_secret`
// - `attributes_request_method`
// - `oidc_issuer`
// - `authorize_scopes`
// - `authorize_url` *if not available from discovery URL specified by oidc_issuer key*
// - `token_url` *if not available from discovery URL specified by oidc_issuer key*
// - `attributes_url` *if not available from discovery URL specified by oidc_issuer key*
// - `jwks_uri` *if not available from discovery URL specified by oidc_issuer key*
// - For SAML providers:
//
// - `MetadataFile` OR `MetadataURL`
// - `IDPSignout` (boolean) *optional*
// - `IDPInit` (boolean) *optional*
// - `RequestSigningAlgorithm` (string) *optional* - Only accepts `rsa-sha256`
// - `EncryptedResponses` (boolean) *optional*
func (o LookupIdentityProviderResultOutput) IdentityProviderDetails() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIdentityProviderResult) map[string]string { return v.IdentityProviderDetails }).(pulumi.StringMapOutput)
}

// The identity provider name.
func (o LookupIdentityProviderResultOutput) IdentityProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIdentityProviderResult) *string { return v.IdentityProviderName }).(pulumi.StringPtrOutput)
}

// The identity provider type.
func (o LookupIdentityProviderResultOutput) IdentityProviderType() IdentityProviderTypePtrOutput {
	return o.ApplyT(func(v LookupIdentityProviderResult) *IdentityProviderType { return v.IdentityProviderType }).(IdentityProviderTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIdentityProviderResultOutput{})
}
