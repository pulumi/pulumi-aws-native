// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workspacesweb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::WorkSpacesWeb::BrowserSettings Resource Type
type BrowserSettings struct {
	pulumi.CustomResourceState

	AdditionalEncryptionContext BrowserSettingsEncryptionContextMapPtrOutput `pulumi:"additionalEncryptionContext"`
	AssociatedPortalArns        pulumi.StringArrayOutput                     `pulumi:"associatedPortalArns"`
	BrowserPolicy               pulumi.StringPtrOutput                       `pulumi:"browserPolicy"`
	BrowserSettingsArn          pulumi.StringOutput                          `pulumi:"browserSettingsArn"`
	CustomerManagedKey          pulumi.StringPtrOutput                       `pulumi:"customerManagedKey"`
	Tags                        aws.TagArrayOutput                           `pulumi:"tags"`
}

// NewBrowserSettings registers a new resource with the given unique name, arguments, and options.
func NewBrowserSettings(ctx *pulumi.Context,
	name string, args *BrowserSettingsArgs, opts ...pulumi.ResourceOption) (*BrowserSettings, error) {
	if args == nil {
		args = &BrowserSettingsArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"additionalEncryptionContext",
		"customerManagedKey",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserSettings
	err := ctx.RegisterResource("aws-native:workspacesweb:BrowserSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserSettings gets an existing BrowserSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserSettingsState, opts ...pulumi.ResourceOption) (*BrowserSettings, error) {
	var resource BrowserSettings
	err := ctx.ReadResource("aws-native:workspacesweb:BrowserSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserSettings resources.
type browserSettingsState struct {
}

type BrowserSettingsState struct {
}

func (BrowserSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserSettingsState)(nil)).Elem()
}

type browserSettingsArgs struct {
	AdditionalEncryptionContext *BrowserSettingsEncryptionContextMap `pulumi:"additionalEncryptionContext"`
	BrowserPolicy               *string                              `pulumi:"browserPolicy"`
	CustomerManagedKey          *string                              `pulumi:"customerManagedKey"`
	Tags                        []aws.Tag                            `pulumi:"tags"`
}

// The set of arguments for constructing a BrowserSettings resource.
type BrowserSettingsArgs struct {
	AdditionalEncryptionContext BrowserSettingsEncryptionContextMapPtrInput
	BrowserPolicy               pulumi.StringPtrInput
	CustomerManagedKey          pulumi.StringPtrInput
	Tags                        aws.TagArrayInput
}

func (BrowserSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserSettingsArgs)(nil)).Elem()
}

type BrowserSettingsInput interface {
	pulumi.Input

	ToBrowserSettingsOutput() BrowserSettingsOutput
	ToBrowserSettingsOutputWithContext(ctx context.Context) BrowserSettingsOutput
}

func (*BrowserSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserSettings)(nil)).Elem()
}

func (i *BrowserSettings) ToBrowserSettingsOutput() BrowserSettingsOutput {
	return i.ToBrowserSettingsOutputWithContext(context.Background())
}

func (i *BrowserSettings) ToBrowserSettingsOutputWithContext(ctx context.Context) BrowserSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserSettingsOutput)
}

type BrowserSettingsOutput struct{ *pulumi.OutputState }

func (BrowserSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserSettings)(nil)).Elem()
}

func (o BrowserSettingsOutput) ToBrowserSettingsOutput() BrowserSettingsOutput {
	return o
}

func (o BrowserSettingsOutput) ToBrowserSettingsOutputWithContext(ctx context.Context) BrowserSettingsOutput {
	return o
}

func (o BrowserSettingsOutput) AdditionalEncryptionContext() BrowserSettingsEncryptionContextMapPtrOutput {
	return o.ApplyT(func(v *BrowserSettings) BrowserSettingsEncryptionContextMapPtrOutput {
		return v.AdditionalEncryptionContext
	}).(BrowserSettingsEncryptionContextMapPtrOutput)
}

func (o BrowserSettingsOutput) AssociatedPortalArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserSettings) pulumi.StringArrayOutput { return v.AssociatedPortalArns }).(pulumi.StringArrayOutput)
}

func (o BrowserSettingsOutput) BrowserPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserSettings) pulumi.StringPtrOutput { return v.BrowserPolicy }).(pulumi.StringPtrOutput)
}

func (o BrowserSettingsOutput) BrowserSettingsArn() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserSettings) pulumi.StringOutput { return v.BrowserSettingsArn }).(pulumi.StringOutput)
}

func (o BrowserSettingsOutput) CustomerManagedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserSettings) pulumi.StringPtrOutput { return v.CustomerManagedKey }).(pulumi.StringPtrOutput)
}

func (o BrowserSettingsOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *BrowserSettings) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserSettingsInput)(nil)).Elem(), &BrowserSettings{})
	pulumi.RegisterOutputType(BrowserSettingsOutput{})
}
