// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthlake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
type FhirDatastoreDatastoreStatus string

const (
	FhirDatastoreDatastoreStatusCreating = FhirDatastoreDatastoreStatus("CREATING")
	FhirDatastoreDatastoreStatusActive   = FhirDatastoreDatastoreStatus("ACTIVE")
	FhirDatastoreDatastoreStatusDeleting = FhirDatastoreDatastoreStatus("DELETING")
	FhirDatastoreDatastoreStatusDeleted  = FhirDatastoreDatastoreStatus("DELETED")
)

type FhirDatastoreDatastoreStatusOutput struct{ *pulumi.OutputState }

func (FhirDatastoreDatastoreStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreDatastoreStatus)(nil)).Elem()
}

func (o FhirDatastoreDatastoreStatusOutput) ToFhirDatastoreDatastoreStatusOutput() FhirDatastoreDatastoreStatusOutput {
	return o
}

func (o FhirDatastoreDatastoreStatusOutput) ToFhirDatastoreDatastoreStatusOutputWithContext(ctx context.Context) FhirDatastoreDatastoreStatusOutput {
	return o
}

func (o FhirDatastoreDatastoreStatusOutput) ToFhirDatastoreDatastoreStatusPtrOutput() FhirDatastoreDatastoreStatusPtrOutput {
	return o.ToFhirDatastoreDatastoreStatusPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreStatusOutput) ToFhirDatastoreDatastoreStatusPtrOutputWithContext(ctx context.Context) FhirDatastoreDatastoreStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastoreDatastoreStatus) *FhirDatastoreDatastoreStatus {
		return &v
	}).(FhirDatastoreDatastoreStatusPtrOutput)
}

func (o FhirDatastoreDatastoreStatusOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreDatastoreStatus] {
	return pulumix.Output[FhirDatastoreDatastoreStatus]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreDatastoreStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreDatastoreStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FhirDatastoreDatastoreStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreDatastoreStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FhirDatastoreDatastoreStatusPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreDatastoreStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreDatastoreStatus)(nil)).Elem()
}

func (o FhirDatastoreDatastoreStatusPtrOutput) ToFhirDatastoreDatastoreStatusPtrOutput() FhirDatastoreDatastoreStatusPtrOutput {
	return o
}

func (o FhirDatastoreDatastoreStatusPtrOutput) ToFhirDatastoreDatastoreStatusPtrOutputWithContext(ctx context.Context) FhirDatastoreDatastoreStatusPtrOutput {
	return o
}

func (o FhirDatastoreDatastoreStatusPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreDatastoreStatus] {
	return pulumix.Output[*FhirDatastoreDatastoreStatus]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreDatastoreStatusPtrOutput) Elem() FhirDatastoreDatastoreStatusOutput {
	return o.ApplyT(func(v *FhirDatastoreDatastoreStatus) FhirDatastoreDatastoreStatus {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreDatastoreStatus
		return ret
	}).(FhirDatastoreDatastoreStatusOutput)
}

func (o FhirDatastoreDatastoreStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FhirDatastoreDatastoreStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// The FHIR version. Only R4 version data is supported.
type FhirDatastoreDatastoreTypeVersion string

const (
	FhirDatastoreDatastoreTypeVersionR4 = FhirDatastoreDatastoreTypeVersion("R4")
)

func (FhirDatastoreDatastoreTypeVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreDatastoreTypeVersion)(nil)).Elem()
}

func (e FhirDatastoreDatastoreTypeVersion) ToFhirDatastoreDatastoreTypeVersionOutput() FhirDatastoreDatastoreTypeVersionOutput {
	return pulumi.ToOutput(e).(FhirDatastoreDatastoreTypeVersionOutput)
}

func (e FhirDatastoreDatastoreTypeVersion) ToFhirDatastoreDatastoreTypeVersionOutputWithContext(ctx context.Context) FhirDatastoreDatastoreTypeVersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FhirDatastoreDatastoreTypeVersionOutput)
}

func (e FhirDatastoreDatastoreTypeVersion) ToFhirDatastoreDatastoreTypeVersionPtrOutput() FhirDatastoreDatastoreTypeVersionPtrOutput {
	return e.ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(context.Background())
}

func (e FhirDatastoreDatastoreTypeVersion) ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(ctx context.Context) FhirDatastoreDatastoreTypeVersionPtrOutput {
	return FhirDatastoreDatastoreTypeVersion(e).ToFhirDatastoreDatastoreTypeVersionOutputWithContext(ctx).ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(ctx)
}

func (e FhirDatastoreDatastoreTypeVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastoreDatastoreTypeVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastoreDatastoreTypeVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FhirDatastoreDatastoreTypeVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FhirDatastoreDatastoreTypeVersionOutput struct{ *pulumi.OutputState }

func (FhirDatastoreDatastoreTypeVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreDatastoreTypeVersion)(nil)).Elem()
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToFhirDatastoreDatastoreTypeVersionOutput() FhirDatastoreDatastoreTypeVersionOutput {
	return o
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToFhirDatastoreDatastoreTypeVersionOutputWithContext(ctx context.Context) FhirDatastoreDatastoreTypeVersionOutput {
	return o
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToFhirDatastoreDatastoreTypeVersionPtrOutput() FhirDatastoreDatastoreTypeVersionPtrOutput {
	return o.ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(ctx context.Context) FhirDatastoreDatastoreTypeVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastoreDatastoreTypeVersion) *FhirDatastoreDatastoreTypeVersion {
		return &v
	}).(FhirDatastoreDatastoreTypeVersionPtrOutput)
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreDatastoreTypeVersion] {
	return pulumix.Output[FhirDatastoreDatastoreTypeVersion]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreDatastoreTypeVersion) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreTypeVersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreDatastoreTypeVersion) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FhirDatastoreDatastoreTypeVersionPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreDatastoreTypeVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreDatastoreTypeVersion)(nil)).Elem()
}

func (o FhirDatastoreDatastoreTypeVersionPtrOutput) ToFhirDatastoreDatastoreTypeVersionPtrOutput() FhirDatastoreDatastoreTypeVersionPtrOutput {
	return o
}

func (o FhirDatastoreDatastoreTypeVersionPtrOutput) ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(ctx context.Context) FhirDatastoreDatastoreTypeVersionPtrOutput {
	return o
}

func (o FhirDatastoreDatastoreTypeVersionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreDatastoreTypeVersion] {
	return pulumix.Output[*FhirDatastoreDatastoreTypeVersion]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreDatastoreTypeVersionPtrOutput) Elem() FhirDatastoreDatastoreTypeVersionOutput {
	return o.ApplyT(func(v *FhirDatastoreDatastoreTypeVersion) FhirDatastoreDatastoreTypeVersion {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreDatastoreTypeVersion
		return ret
	}).(FhirDatastoreDatastoreTypeVersionOutput)
}

func (o FhirDatastoreDatastoreTypeVersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreDatastoreTypeVersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FhirDatastoreDatastoreTypeVersion) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FhirDatastoreDatastoreTypeVersionInput is an input type that accepts FhirDatastoreDatastoreTypeVersionArgs and FhirDatastoreDatastoreTypeVersionOutput values.
// You can construct a concrete instance of `FhirDatastoreDatastoreTypeVersionInput` via:
//
//	FhirDatastoreDatastoreTypeVersionArgs{...}
type FhirDatastoreDatastoreTypeVersionInput interface {
	pulumi.Input

	ToFhirDatastoreDatastoreTypeVersionOutput() FhirDatastoreDatastoreTypeVersionOutput
	ToFhirDatastoreDatastoreTypeVersionOutputWithContext(context.Context) FhirDatastoreDatastoreTypeVersionOutput
}

var fhirDatastoreDatastoreTypeVersionPtrType = reflect.TypeOf((**FhirDatastoreDatastoreTypeVersion)(nil)).Elem()

type FhirDatastoreDatastoreTypeVersionPtrInput interface {
	pulumi.Input

	ToFhirDatastoreDatastoreTypeVersionPtrOutput() FhirDatastoreDatastoreTypeVersionPtrOutput
	ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(context.Context) FhirDatastoreDatastoreTypeVersionPtrOutput
}

type fhirDatastoreDatastoreTypeVersionPtr string

func FhirDatastoreDatastoreTypeVersionPtr(v string) FhirDatastoreDatastoreTypeVersionPtrInput {
	return (*fhirDatastoreDatastoreTypeVersionPtr)(&v)
}

func (*fhirDatastoreDatastoreTypeVersionPtr) ElementType() reflect.Type {
	return fhirDatastoreDatastoreTypeVersionPtrType
}

func (in *fhirDatastoreDatastoreTypeVersionPtr) ToFhirDatastoreDatastoreTypeVersionPtrOutput() FhirDatastoreDatastoreTypeVersionPtrOutput {
	return pulumi.ToOutput(in).(FhirDatastoreDatastoreTypeVersionPtrOutput)
}

func (in *fhirDatastoreDatastoreTypeVersionPtr) ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(ctx context.Context) FhirDatastoreDatastoreTypeVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FhirDatastoreDatastoreTypeVersionPtrOutput)
}

func (in *fhirDatastoreDatastoreTypeVersionPtr) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreDatastoreTypeVersion] {
	return pulumix.Output[*FhirDatastoreDatastoreTypeVersion]{
		OutputState: in.ToFhirDatastoreDatastoreTypeVersionPtrOutputWithContext(ctx).OutputState,
	}
}

// Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
type FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy string

const (
	FhirDatastoreIdentityProviderConfigurationAuthorizationStrategySmartOnFhirV1 = FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy("SMART_ON_FHIR_V1")
	FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyAwsAuth       = FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy("AWS_AUTH")
)

func (FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy)(nil)).Elem()
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput {
	return pulumi.ToOutput(e).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput)
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput)
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return e.ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(context.Background())
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy(e).ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutputWithContext(ctx).ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(ctx)
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput struct{ *pulumi.OutputState }

func (FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy)(nil)).Elem()
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return o.ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) *FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy {
		return &v
	}).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput)
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy] {
	return pulumix.Output[FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy)(nil)).Elem()
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy] {
	return pulumix.Output[*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput) Elem() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput {
	return o.ApplyT(func(v *FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy
		return ret
	}).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput)
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyInput is an input type that accepts FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyArgs and FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput values.
// You can construct a concrete instance of `FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyInput` via:
//
//	FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyArgs{...}
type FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyInput interface {
	pulumi.Input

	ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput
	ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutputWithContext(context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput
}

var fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrType = reflect.TypeOf((**FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy)(nil)).Elem()

type FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrInput interface {
	pulumi.Input

	ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput
	ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput
}

type fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtr string

func FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtr(v string) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrInput {
	return (*fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtr)(&v)
}

func (*fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtr) ElementType() reflect.Type {
	return fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrType
}

func (in *fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtr) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return pulumi.ToOutput(in).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput)
}

func (in *fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtr) ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput)
}

func (in *fhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtr) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy] {
	return pulumix.Output[*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy]{
		OutputState: in.ToFhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
type FhirDatastoreKmsEncryptionConfigCmkType string

const (
	FhirDatastoreKmsEncryptionConfigCmkTypeCustomerManagedKmsKey = FhirDatastoreKmsEncryptionConfigCmkType("CUSTOMER_MANAGED_KMS_KEY")
	FhirDatastoreKmsEncryptionConfigCmkTypeAwsOwnedKmsKey        = FhirDatastoreKmsEncryptionConfigCmkType("AWS_OWNED_KMS_KEY")
)

func (FhirDatastoreKmsEncryptionConfigCmkType) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreKmsEncryptionConfigCmkType)(nil)).Elem()
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToFhirDatastoreKmsEncryptionConfigCmkTypeOutput() FhirDatastoreKmsEncryptionConfigCmkTypeOutput {
	return pulumi.ToOutput(e).(FhirDatastoreKmsEncryptionConfigCmkTypeOutput)
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToFhirDatastoreKmsEncryptionConfigCmkTypeOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigCmkTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FhirDatastoreKmsEncryptionConfigCmkTypeOutput)
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutput() FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return e.ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(context.Background())
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return FhirDatastoreKmsEncryptionConfigCmkType(e).ToFhirDatastoreKmsEncryptionConfigCmkTypeOutputWithContext(ctx).ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(ctx)
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FhirDatastoreKmsEncryptionConfigCmkType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FhirDatastoreKmsEncryptionConfigCmkTypeOutput struct{ *pulumi.OutputState }

func (FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreKmsEncryptionConfigCmkType)(nil)).Elem()
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToFhirDatastoreKmsEncryptionConfigCmkTypeOutput() FhirDatastoreKmsEncryptionConfigCmkTypeOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToFhirDatastoreKmsEncryptionConfigCmkTypeOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigCmkTypeOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutput() FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return o.ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(context.Background())
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastoreKmsEncryptionConfigCmkType) *FhirDatastoreKmsEncryptionConfigCmkType {
		return &v
	}).(FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput)
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreKmsEncryptionConfigCmkType] {
	return pulumix.Output[FhirDatastoreKmsEncryptionConfigCmkType]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreKmsEncryptionConfigCmkType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastoreKmsEncryptionConfigCmkType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreKmsEncryptionConfigCmkType)(nil)).Elem()
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutput() FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreKmsEncryptionConfigCmkType] {
	return pulumix.Output[*FhirDatastoreKmsEncryptionConfigCmkType]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput) Elem() FhirDatastoreKmsEncryptionConfigCmkTypeOutput {
	return o.ApplyT(func(v *FhirDatastoreKmsEncryptionConfigCmkType) FhirDatastoreKmsEncryptionConfigCmkType {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreKmsEncryptionConfigCmkType
		return ret
	}).(FhirDatastoreKmsEncryptionConfigCmkTypeOutput)
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FhirDatastoreKmsEncryptionConfigCmkType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FhirDatastoreKmsEncryptionConfigCmkTypeInput is an input type that accepts FhirDatastoreKmsEncryptionConfigCmkTypeArgs and FhirDatastoreKmsEncryptionConfigCmkTypeOutput values.
// You can construct a concrete instance of `FhirDatastoreKmsEncryptionConfigCmkTypeInput` via:
//
//	FhirDatastoreKmsEncryptionConfigCmkTypeArgs{...}
type FhirDatastoreKmsEncryptionConfigCmkTypeInput interface {
	pulumi.Input

	ToFhirDatastoreKmsEncryptionConfigCmkTypeOutput() FhirDatastoreKmsEncryptionConfigCmkTypeOutput
	ToFhirDatastoreKmsEncryptionConfigCmkTypeOutputWithContext(context.Context) FhirDatastoreKmsEncryptionConfigCmkTypeOutput
}

var fhirDatastoreKmsEncryptionConfigCmkTypePtrType = reflect.TypeOf((**FhirDatastoreKmsEncryptionConfigCmkType)(nil)).Elem()

type FhirDatastoreKmsEncryptionConfigCmkTypePtrInput interface {
	pulumi.Input

	ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutput() FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput
	ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(context.Context) FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput
}

type fhirDatastoreKmsEncryptionConfigCmkTypePtr string

func FhirDatastoreKmsEncryptionConfigCmkTypePtr(v string) FhirDatastoreKmsEncryptionConfigCmkTypePtrInput {
	return (*fhirDatastoreKmsEncryptionConfigCmkTypePtr)(&v)
}

func (*fhirDatastoreKmsEncryptionConfigCmkTypePtr) ElementType() reflect.Type {
	return fhirDatastoreKmsEncryptionConfigCmkTypePtrType
}

func (in *fhirDatastoreKmsEncryptionConfigCmkTypePtr) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutput() FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return pulumi.ToOutput(in).(FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput)
}

func (in *fhirDatastoreKmsEncryptionConfigCmkTypePtr) ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput)
}

func (in *fhirDatastoreKmsEncryptionConfigCmkTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreKmsEncryptionConfigCmkType] {
	return pulumix.Output[*FhirDatastoreKmsEncryptionConfigCmkType]{
		OutputState: in.ToFhirDatastoreKmsEncryptionConfigCmkTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of preloaded data. Only Synthea preloaded data is supported.
type FhirDatastorePreloadDataConfigPreloadDataType string

const (
	FhirDatastorePreloadDataConfigPreloadDataTypeSynthea = FhirDatastorePreloadDataConfigPreloadDataType("SYNTHEA")
)

func (FhirDatastorePreloadDataConfigPreloadDataType) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastorePreloadDataConfigPreloadDataType)(nil)).Elem()
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToFhirDatastorePreloadDataConfigPreloadDataTypeOutput() FhirDatastorePreloadDataConfigPreloadDataTypeOutput {
	return pulumi.ToOutput(e).(FhirDatastorePreloadDataConfigPreloadDataTypeOutput)
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToFhirDatastorePreloadDataConfigPreloadDataTypeOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPreloadDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FhirDatastorePreloadDataConfigPreloadDataTypeOutput)
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutput() FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return e.ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(context.Background())
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return FhirDatastorePreloadDataConfigPreloadDataType(e).ToFhirDatastorePreloadDataConfigPreloadDataTypeOutputWithContext(ctx).ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(ctx)
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FhirDatastorePreloadDataConfigPreloadDataType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FhirDatastorePreloadDataConfigPreloadDataTypeOutput struct{ *pulumi.OutputState }

func (FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastorePreloadDataConfigPreloadDataType)(nil)).Elem()
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToFhirDatastorePreloadDataConfigPreloadDataTypeOutput() FhirDatastorePreloadDataConfigPreloadDataTypeOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToFhirDatastorePreloadDataConfigPreloadDataTypeOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPreloadDataTypeOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutput() FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return o.ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(context.Background())
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastorePreloadDataConfigPreloadDataType) *FhirDatastorePreloadDataConfigPreloadDataType {
		return &v
	}).(FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput)
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastorePreloadDataConfigPreloadDataType] {
	return pulumix.Output[FhirDatastorePreloadDataConfigPreloadDataType]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastorePreloadDataConfigPreloadDataType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FhirDatastorePreloadDataConfigPreloadDataType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput struct{ *pulumi.OutputState }

func (FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastorePreloadDataConfigPreloadDataType)(nil)).Elem()
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutput() FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastorePreloadDataConfigPreloadDataType] {
	return pulumix.Output[*FhirDatastorePreloadDataConfigPreloadDataType]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput) Elem() FhirDatastorePreloadDataConfigPreloadDataTypeOutput {
	return o.ApplyT(func(v *FhirDatastorePreloadDataConfigPreloadDataType) FhirDatastorePreloadDataConfigPreloadDataType {
		if v != nil {
			return *v
		}
		var ret FhirDatastorePreloadDataConfigPreloadDataType
		return ret
	}).(FhirDatastorePreloadDataConfigPreloadDataTypeOutput)
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FhirDatastorePreloadDataConfigPreloadDataType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FhirDatastorePreloadDataConfigPreloadDataTypeInput is an input type that accepts FhirDatastorePreloadDataConfigPreloadDataTypeArgs and FhirDatastorePreloadDataConfigPreloadDataTypeOutput values.
// You can construct a concrete instance of `FhirDatastorePreloadDataConfigPreloadDataTypeInput` via:
//
//	FhirDatastorePreloadDataConfigPreloadDataTypeArgs{...}
type FhirDatastorePreloadDataConfigPreloadDataTypeInput interface {
	pulumi.Input

	ToFhirDatastorePreloadDataConfigPreloadDataTypeOutput() FhirDatastorePreloadDataConfigPreloadDataTypeOutput
	ToFhirDatastorePreloadDataConfigPreloadDataTypeOutputWithContext(context.Context) FhirDatastorePreloadDataConfigPreloadDataTypeOutput
}

var fhirDatastorePreloadDataConfigPreloadDataTypePtrType = reflect.TypeOf((**FhirDatastorePreloadDataConfigPreloadDataType)(nil)).Elem()

type FhirDatastorePreloadDataConfigPreloadDataTypePtrInput interface {
	pulumi.Input

	ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutput() FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput
	ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(context.Context) FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput
}

type fhirDatastorePreloadDataConfigPreloadDataTypePtr string

func FhirDatastorePreloadDataConfigPreloadDataTypePtr(v string) FhirDatastorePreloadDataConfigPreloadDataTypePtrInput {
	return (*fhirDatastorePreloadDataConfigPreloadDataTypePtr)(&v)
}

func (*fhirDatastorePreloadDataConfigPreloadDataTypePtr) ElementType() reflect.Type {
	return fhirDatastorePreloadDataConfigPreloadDataTypePtrType
}

func (in *fhirDatastorePreloadDataConfigPreloadDataTypePtr) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutput() FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return pulumi.ToOutput(in).(FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput)
}

func (in *fhirDatastorePreloadDataConfigPreloadDataTypePtr) ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput)
}

func (in *fhirDatastorePreloadDataConfigPreloadDataTypePtr) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastorePreloadDataConfigPreloadDataType] {
	return pulumix.Output[*FhirDatastorePreloadDataConfigPreloadDataType]{
		OutputState: in.ToFhirDatastorePreloadDataConfigPreloadDataTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreDatastoreTypeVersionInput)(nil)).Elem(), FhirDatastoreDatastoreTypeVersion("R4"))
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreDatastoreTypeVersionPtrInput)(nil)).Elem(), FhirDatastoreDatastoreTypeVersion("R4"))
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyInput)(nil)).Elem(), FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy("SMART_ON_FHIR_V1"))
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrInput)(nil)).Elem(), FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy("SMART_ON_FHIR_V1"))
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreKmsEncryptionConfigCmkTypeInput)(nil)).Elem(), FhirDatastoreKmsEncryptionConfigCmkType("CUSTOMER_MANAGED_KMS_KEY"))
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreKmsEncryptionConfigCmkTypePtrInput)(nil)).Elem(), FhirDatastoreKmsEncryptionConfigCmkType("CUSTOMER_MANAGED_KMS_KEY"))
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastorePreloadDataConfigPreloadDataTypeInput)(nil)).Elem(), FhirDatastorePreloadDataConfigPreloadDataType("SYNTHEA"))
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastorePreloadDataConfigPreloadDataTypePtrInput)(nil)).Elem(), FhirDatastorePreloadDataConfigPreloadDataType("SYNTHEA"))
	pulumi.RegisterOutputType(FhirDatastoreDatastoreStatusOutput{})
	pulumi.RegisterOutputType(FhirDatastoreDatastoreStatusPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastoreDatastoreTypeVersionOutput{})
	pulumi.RegisterOutputType(FhirDatastoreDatastoreTypeVersionPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput{})
	pulumi.RegisterOutputType(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastoreKmsEncryptionConfigCmkTypeOutput{})
	pulumi.RegisterOutputType(FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput{})
	pulumi.RegisterOutputType(FhirDatastorePreloadDataConfigPreloadDataTypeOutput{})
	pulumi.RegisterOutputType(FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput{})
}
