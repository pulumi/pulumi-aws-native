// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthlake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HealthLake FHIR Datastore
func LookupFhirDatastore(ctx *pulumi.Context, args *LookupFhirDatastoreArgs, opts ...pulumi.InvokeOption) (*LookupFhirDatastoreResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFhirDatastoreResult
	err := ctx.Invoke("aws-native:healthlake:getFhirDatastore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFhirDatastoreArgs struct {
	// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
	DatastoreId string `pulumi:"datastoreId"`
}

type LookupFhirDatastoreResult struct {
	CreatedAt *FhirDatastoreCreatedAt `pulumi:"createdAt"`
	// The Data Store ARN is generated during the creation of the Data Store and can be found in the output from the initial Data Store creation request.
	DatastoreArn *string `pulumi:"datastoreArn"`
	// The endpoint for the created Data Store.
	DatastoreEndpoint *string `pulumi:"datastoreEndpoint"`
	// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
	DatastoreId *string `pulumi:"datastoreId"`
	// The status of the FHIR Data Store. Possible statuses are ‘CREATING’, ‘ACTIVE’, ‘DELETING’, ‘DELETED’.
	DatastoreStatus *FhirDatastoreDatastoreStatus `pulumi:"datastoreStatus"`
	// A tag is a label consisting of a user-defined key and value. The form for tags is {"Key", "Value"}
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupFhirDatastoreOutput(ctx *pulumi.Context, args LookupFhirDatastoreOutputArgs, opts ...pulumi.InvokeOption) LookupFhirDatastoreResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFhirDatastoreResult, error) {
			args := v.(LookupFhirDatastoreArgs)
			r, err := LookupFhirDatastore(ctx, &args, opts...)
			var s LookupFhirDatastoreResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFhirDatastoreResultOutput)
}

type LookupFhirDatastoreOutputArgs struct {
	// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
	DatastoreId pulumi.StringInput `pulumi:"datastoreId"`
}

func (LookupFhirDatastoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFhirDatastoreArgs)(nil)).Elem()
}

type LookupFhirDatastoreResultOutput struct{ *pulumi.OutputState }

func (LookupFhirDatastoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFhirDatastoreResult)(nil)).Elem()
}

func (o LookupFhirDatastoreResultOutput) ToLookupFhirDatastoreResultOutput() LookupFhirDatastoreResultOutput {
	return o
}

func (o LookupFhirDatastoreResultOutput) ToLookupFhirDatastoreResultOutputWithContext(ctx context.Context) LookupFhirDatastoreResultOutput {
	return o
}

func (o LookupFhirDatastoreResultOutput) CreatedAt() FhirDatastoreCreatedAtPtrOutput {
	return o.ApplyT(func(v LookupFhirDatastoreResult) *FhirDatastoreCreatedAt { return v.CreatedAt }).(FhirDatastoreCreatedAtPtrOutput)
}

// The Data Store ARN is generated during the creation of the Data Store and can be found in the output from the initial Data Store creation request.
func (o LookupFhirDatastoreResultOutput) DatastoreArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFhirDatastoreResult) *string { return v.DatastoreArn }).(pulumi.StringPtrOutput)
}

// The endpoint for the created Data Store.
func (o LookupFhirDatastoreResultOutput) DatastoreEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFhirDatastoreResult) *string { return v.DatastoreEndpoint }).(pulumi.StringPtrOutput)
}

// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
func (o LookupFhirDatastoreResultOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFhirDatastoreResult) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The status of the FHIR Data Store. Possible statuses are ‘CREATING’, ‘ACTIVE’, ‘DELETING’, ‘DELETED’.
func (o LookupFhirDatastoreResultOutput) DatastoreStatus() FhirDatastoreDatastoreStatusPtrOutput {
	return o.ApplyT(func(v LookupFhirDatastoreResult) *FhirDatastoreDatastoreStatus { return v.DatastoreStatus }).(FhirDatastoreDatastoreStatusPtrOutput)
}

// A tag is a label consisting of a user-defined key and value. The form for tags is {"Key", "Value"}
func (o LookupFhirDatastoreResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupFhirDatastoreResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFhirDatastoreResultOutput{})
}
