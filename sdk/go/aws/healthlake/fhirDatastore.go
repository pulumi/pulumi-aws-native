// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthlake

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HealthLake FHIR Datastore
type FhirDatastore struct {
	pulumi.CustomResourceState

	CreatedAt FhirDatastoreCreatedAtOutput `pulumi:"createdAt"`
	// The Data Store ARN is generated during the creation of the Data Store and can be found in the output from the initial Data Store creation request.
	DatastoreArn pulumi.StringOutput `pulumi:"datastoreArn"`
	// The endpoint for the created Data Store.
	DatastoreEndpoint pulumi.StringOutput `pulumi:"datastoreEndpoint"`
	// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
	DatastoreId pulumi.StringOutput `pulumi:"datastoreId"`
	// The data store name (user-generated).
	DatastoreName pulumi.StringPtrOutput `pulumi:"datastoreName"`
	// The status of the FHIR Data Store. Possible statuses are ‘CREATING’, ‘ACTIVE’, ‘DELETING’, ‘DELETED’.
	DatastoreStatus FhirDatastoreDatastoreStatusOutput `pulumi:"datastoreStatus"`
	// The FHIR release version supported by the data store. Current support is for version `R4` .
	DatastoreTypeVersion FhirDatastoreDatastoreTypeVersionOutput `pulumi:"datastoreTypeVersion"`
	// The identity provider configuration selected when the data store was created.
	IdentityProviderConfiguration FhirDatastoreIdentityProviderConfigurationPtrOutput `pulumi:"identityProviderConfiguration"`
	// The preloaded Synthea data configuration for the data store.
	PreloadDataConfig FhirDatastorePreloadDataConfigPtrOutput `pulumi:"preloadDataConfig"`
	// The server-side encryption key configuration for a customer-provided encryption key specified for creating a data store.
	SseConfiguration FhirDatastoreSseConfigurationPtrOutput `pulumi:"sseConfiguration"`
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewFhirDatastore registers a new resource with the given unique name, arguments, and options.
func NewFhirDatastore(ctx *pulumi.Context,
	name string, args *FhirDatastoreArgs, opts ...pulumi.ResourceOption) (*FhirDatastore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatastoreTypeVersion == nil {
		return nil, errors.New("invalid value for required argument 'DatastoreTypeVersion'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datastoreName",
		"datastoreTypeVersion",
		"identityProviderConfiguration",
		"preloadDataConfig",
		"sseConfiguration",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FhirDatastore
	err := ctx.RegisterResource("aws-native:healthlake:FhirDatastore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFhirDatastore gets an existing FhirDatastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFhirDatastore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FhirDatastoreState, opts ...pulumi.ResourceOption) (*FhirDatastore, error) {
	var resource FhirDatastore
	err := ctx.ReadResource("aws-native:healthlake:FhirDatastore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FhirDatastore resources.
type fhirDatastoreState struct {
}

type FhirDatastoreState struct {
}

func (FhirDatastoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*fhirDatastoreState)(nil)).Elem()
}

type fhirDatastoreArgs struct {
	// The data store name (user-generated).
	DatastoreName *string `pulumi:"datastoreName"`
	// The FHIR release version supported by the data store. Current support is for version `R4` .
	DatastoreTypeVersion FhirDatastoreDatastoreTypeVersion `pulumi:"datastoreTypeVersion"`
	// The identity provider configuration selected when the data store was created.
	IdentityProviderConfiguration *FhirDatastoreIdentityProviderConfiguration `pulumi:"identityProviderConfiguration"`
	// The preloaded Synthea data configuration for the data store.
	PreloadDataConfig *FhirDatastorePreloadDataConfig `pulumi:"preloadDataConfig"`
	// The server-side encryption key configuration for a customer-provided encryption key specified for creating a data store.
	SseConfiguration *FhirDatastoreSseConfiguration `pulumi:"sseConfiguration"`
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a FhirDatastore resource.
type FhirDatastoreArgs struct {
	// The data store name (user-generated).
	DatastoreName pulumi.StringPtrInput
	// The FHIR release version supported by the data store. Current support is for version `R4` .
	DatastoreTypeVersion FhirDatastoreDatastoreTypeVersionInput
	// The identity provider configuration selected when the data store was created.
	IdentityProviderConfiguration FhirDatastoreIdentityProviderConfigurationPtrInput
	// The preloaded Synthea data configuration for the data store.
	PreloadDataConfig FhirDatastorePreloadDataConfigPtrInput
	// The server-side encryption key configuration for a customer-provided encryption key specified for creating a data store.
	SseConfiguration FhirDatastoreSseConfigurationPtrInput
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags aws.TagArrayInput
}

func (FhirDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fhirDatastoreArgs)(nil)).Elem()
}

type FhirDatastoreInput interface {
	pulumi.Input

	ToFhirDatastoreOutput() FhirDatastoreOutput
	ToFhirDatastoreOutputWithContext(ctx context.Context) FhirDatastoreOutput
}

func (*FhirDatastore) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastore)(nil)).Elem()
}

func (i *FhirDatastore) ToFhirDatastoreOutput() FhirDatastoreOutput {
	return i.ToFhirDatastoreOutputWithContext(context.Background())
}

func (i *FhirDatastore) ToFhirDatastoreOutputWithContext(ctx context.Context) FhirDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreOutput)
}

type FhirDatastoreOutput struct{ *pulumi.OutputState }

func (FhirDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastore)(nil)).Elem()
}

func (o FhirDatastoreOutput) ToFhirDatastoreOutput() FhirDatastoreOutput {
	return o
}

func (o FhirDatastoreOutput) ToFhirDatastoreOutputWithContext(ctx context.Context) FhirDatastoreOutput {
	return o
}

func (o FhirDatastoreOutput) CreatedAt() FhirDatastoreCreatedAtOutput {
	return o.ApplyT(func(v *FhirDatastore) FhirDatastoreCreatedAtOutput { return v.CreatedAt }).(FhirDatastoreCreatedAtOutput)
}

// The Data Store ARN is generated during the creation of the Data Store and can be found in the output from the initial Data Store creation request.
func (o FhirDatastoreOutput) DatastoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FhirDatastore) pulumi.StringOutput { return v.DatastoreArn }).(pulumi.StringOutput)
}

// The endpoint for the created Data Store.
func (o FhirDatastoreOutput) DatastoreEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *FhirDatastore) pulumi.StringOutput { return v.DatastoreEndpoint }).(pulumi.StringOutput)
}

// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
func (o FhirDatastoreOutput) DatastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *FhirDatastore) pulumi.StringOutput { return v.DatastoreId }).(pulumi.StringOutput)
}

// The data store name (user-generated).
func (o FhirDatastoreOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirDatastore) pulumi.StringPtrOutput { return v.DatastoreName }).(pulumi.StringPtrOutput)
}

// The status of the FHIR Data Store. Possible statuses are ‘CREATING’, ‘ACTIVE’, ‘DELETING’, ‘DELETED’.
func (o FhirDatastoreOutput) DatastoreStatus() FhirDatastoreDatastoreStatusOutput {
	return o.ApplyT(func(v *FhirDatastore) FhirDatastoreDatastoreStatusOutput { return v.DatastoreStatus }).(FhirDatastoreDatastoreStatusOutput)
}

// The FHIR release version supported by the data store. Current support is for version `R4` .
func (o FhirDatastoreOutput) DatastoreTypeVersion() FhirDatastoreDatastoreTypeVersionOutput {
	return o.ApplyT(func(v *FhirDatastore) FhirDatastoreDatastoreTypeVersionOutput { return v.DatastoreTypeVersion }).(FhirDatastoreDatastoreTypeVersionOutput)
}

// The identity provider configuration selected when the data store was created.
func (o FhirDatastoreOutput) IdentityProviderConfiguration() FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return o.ApplyT(func(v *FhirDatastore) FhirDatastoreIdentityProviderConfigurationPtrOutput {
		return v.IdentityProviderConfiguration
	}).(FhirDatastoreIdentityProviderConfigurationPtrOutput)
}

// The preloaded Synthea data configuration for the data store.
func (o FhirDatastoreOutput) PreloadDataConfig() FhirDatastorePreloadDataConfigPtrOutput {
	return o.ApplyT(func(v *FhirDatastore) FhirDatastorePreloadDataConfigPtrOutput { return v.PreloadDataConfig }).(FhirDatastorePreloadDataConfigPtrOutput)
}

// The server-side encryption key configuration for a customer-provided encryption key specified for creating a data store.
func (o FhirDatastoreOutput) SseConfiguration() FhirDatastoreSseConfigurationPtrOutput {
	return o.ApplyT(func(v *FhirDatastore) FhirDatastoreSseConfigurationPtrOutput { return v.SseConfiguration }).(FhirDatastoreSseConfigurationPtrOutput)
}

// An array of key-value pairs to apply to this resource.
//
// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
func (o FhirDatastoreOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *FhirDatastore) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreInput)(nil)).Elem(), &FhirDatastore{})
	pulumi.RegisterOutputType(FhirDatastoreOutput{})
}
