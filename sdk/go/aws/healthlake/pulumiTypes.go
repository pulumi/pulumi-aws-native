// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthlake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// The time that a Data Store was created.
type FhirDatastoreCreatedAt struct {
	// Nanoseconds.
	Nanos int `pulumi:"nanos"`
	// Seconds since epoch.
	Seconds string `pulumi:"seconds"`
}

// The time that a Data Store was created.
type FhirDatastoreCreatedAtOutput struct{ *pulumi.OutputState }

func (FhirDatastoreCreatedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreCreatedAt)(nil)).Elem()
}

func (o FhirDatastoreCreatedAtOutput) ToFhirDatastoreCreatedAtOutput() FhirDatastoreCreatedAtOutput {
	return o
}

func (o FhirDatastoreCreatedAtOutput) ToFhirDatastoreCreatedAtOutputWithContext(ctx context.Context) FhirDatastoreCreatedAtOutput {
	return o
}

func (o FhirDatastoreCreatedAtOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreCreatedAt] {
	return pulumix.Output[FhirDatastoreCreatedAt]{
		OutputState: o.OutputState,
	}
}

// Nanoseconds.
func (o FhirDatastoreCreatedAtOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v FhirDatastoreCreatedAt) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds since epoch.
func (o FhirDatastoreCreatedAtOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v FhirDatastoreCreatedAt) string { return v.Seconds }).(pulumi.StringOutput)
}

type FhirDatastoreCreatedAtPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreCreatedAtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreCreatedAt)(nil)).Elem()
}

func (o FhirDatastoreCreatedAtPtrOutput) ToFhirDatastoreCreatedAtPtrOutput() FhirDatastoreCreatedAtPtrOutput {
	return o
}

func (o FhirDatastoreCreatedAtPtrOutput) ToFhirDatastoreCreatedAtPtrOutputWithContext(ctx context.Context) FhirDatastoreCreatedAtPtrOutput {
	return o
}

func (o FhirDatastoreCreatedAtPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreCreatedAt] {
	return pulumix.Output[*FhirDatastoreCreatedAt]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreCreatedAtPtrOutput) Elem() FhirDatastoreCreatedAtOutput {
	return o.ApplyT(func(v *FhirDatastoreCreatedAt) FhirDatastoreCreatedAt {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreCreatedAt
		return ret
	}).(FhirDatastoreCreatedAtOutput)
}

// Nanoseconds.
func (o FhirDatastoreCreatedAtPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreCreatedAt) *int {
		if v == nil {
			return nil
		}
		return &v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Seconds since epoch.
func (o FhirDatastoreCreatedAtPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreCreatedAt) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

// The identity provider configuration for the datastore
type FhirDatastoreIdentityProviderConfiguration struct {
	// Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
	AuthorizationStrategy FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy `pulumi:"authorizationStrategy"`
	// Flag to indicate if fine-grained authorization will be enabled for the datastore
	FineGrainedAuthorizationEnabled *bool `pulumi:"fineGrainedAuthorizationEnabled"`
	// The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
	IdpLambdaArn *string `pulumi:"idpLambdaArn"`
	// The JSON metadata elements for identity provider configuration.
	Metadata *string `pulumi:"metadata"`
}

// FhirDatastoreIdentityProviderConfigurationInput is an input type that accepts FhirDatastoreIdentityProviderConfigurationArgs and FhirDatastoreIdentityProviderConfigurationOutput values.
// You can construct a concrete instance of `FhirDatastoreIdentityProviderConfigurationInput` via:
//
//	FhirDatastoreIdentityProviderConfigurationArgs{...}
type FhirDatastoreIdentityProviderConfigurationInput interface {
	pulumi.Input

	ToFhirDatastoreIdentityProviderConfigurationOutput() FhirDatastoreIdentityProviderConfigurationOutput
	ToFhirDatastoreIdentityProviderConfigurationOutputWithContext(context.Context) FhirDatastoreIdentityProviderConfigurationOutput
}

// The identity provider configuration for the datastore
type FhirDatastoreIdentityProviderConfigurationArgs struct {
	// Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
	AuthorizationStrategy FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyInput `pulumi:"authorizationStrategy"`
	// Flag to indicate if fine-grained authorization will be enabled for the datastore
	FineGrainedAuthorizationEnabled pulumi.BoolPtrInput `pulumi:"fineGrainedAuthorizationEnabled"`
	// The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
	IdpLambdaArn pulumi.StringPtrInput `pulumi:"idpLambdaArn"`
	// The JSON metadata elements for identity provider configuration.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
}

func (FhirDatastoreIdentityProviderConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreIdentityProviderConfiguration)(nil)).Elem()
}

func (i FhirDatastoreIdentityProviderConfigurationArgs) ToFhirDatastoreIdentityProviderConfigurationOutput() FhirDatastoreIdentityProviderConfigurationOutput {
	return i.ToFhirDatastoreIdentityProviderConfigurationOutputWithContext(context.Background())
}

func (i FhirDatastoreIdentityProviderConfigurationArgs) ToFhirDatastoreIdentityProviderConfigurationOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreIdentityProviderConfigurationOutput)
}

func (i FhirDatastoreIdentityProviderConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreIdentityProviderConfiguration] {
	return pulumix.Output[FhirDatastoreIdentityProviderConfiguration]{
		OutputState: i.ToFhirDatastoreIdentityProviderConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i FhirDatastoreIdentityProviderConfigurationArgs) ToFhirDatastoreIdentityProviderConfigurationPtrOutput() FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return i.ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(context.Background())
}

func (i FhirDatastoreIdentityProviderConfigurationArgs) ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreIdentityProviderConfigurationOutput).ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(ctx)
}

// FhirDatastoreIdentityProviderConfigurationPtrInput is an input type that accepts FhirDatastoreIdentityProviderConfigurationArgs, FhirDatastoreIdentityProviderConfigurationPtr and FhirDatastoreIdentityProviderConfigurationPtrOutput values.
// You can construct a concrete instance of `FhirDatastoreIdentityProviderConfigurationPtrInput` via:
//
//	        FhirDatastoreIdentityProviderConfigurationArgs{...}
//
//	or:
//
//	        nil
type FhirDatastoreIdentityProviderConfigurationPtrInput interface {
	pulumi.Input

	ToFhirDatastoreIdentityProviderConfigurationPtrOutput() FhirDatastoreIdentityProviderConfigurationPtrOutput
	ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(context.Context) FhirDatastoreIdentityProviderConfigurationPtrOutput
}

type fhirDatastoreIdentityProviderConfigurationPtrType FhirDatastoreIdentityProviderConfigurationArgs

func FhirDatastoreIdentityProviderConfigurationPtr(v *FhirDatastoreIdentityProviderConfigurationArgs) FhirDatastoreIdentityProviderConfigurationPtrInput {
	return (*fhirDatastoreIdentityProviderConfigurationPtrType)(v)
}

func (*fhirDatastoreIdentityProviderConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreIdentityProviderConfiguration)(nil)).Elem()
}

func (i *fhirDatastoreIdentityProviderConfigurationPtrType) ToFhirDatastoreIdentityProviderConfigurationPtrOutput() FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return i.ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(context.Background())
}

func (i *fhirDatastoreIdentityProviderConfigurationPtrType) ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreIdentityProviderConfigurationPtrOutput)
}

func (i *fhirDatastoreIdentityProviderConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreIdentityProviderConfiguration] {
	return pulumix.Output[*FhirDatastoreIdentityProviderConfiguration]{
		OutputState: i.ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The identity provider configuration for the datastore
type FhirDatastoreIdentityProviderConfigurationOutput struct{ *pulumi.OutputState }

func (FhirDatastoreIdentityProviderConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreIdentityProviderConfiguration)(nil)).Elem()
}

func (o FhirDatastoreIdentityProviderConfigurationOutput) ToFhirDatastoreIdentityProviderConfigurationOutput() FhirDatastoreIdentityProviderConfigurationOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationOutput) ToFhirDatastoreIdentityProviderConfigurationOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationOutput) ToFhirDatastoreIdentityProviderConfigurationPtrOutput() FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return o.ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreIdentityProviderConfigurationOutput) ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastoreIdentityProviderConfiguration) *FhirDatastoreIdentityProviderConfiguration {
		return &v
	}).(FhirDatastoreIdentityProviderConfigurationPtrOutput)
}

func (o FhirDatastoreIdentityProviderConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreIdentityProviderConfiguration] {
	return pulumix.Output[FhirDatastoreIdentityProviderConfiguration]{
		OutputState: o.OutputState,
	}
}

// Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
func (o FhirDatastoreIdentityProviderConfigurationOutput) AuthorizationStrategy() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput {
	return o.ApplyT(func(v FhirDatastoreIdentityProviderConfiguration) FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy {
		return v.AuthorizationStrategy
	}).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyOutput)
}

// Flag to indicate if fine-grained authorization will be enabled for the datastore
func (o FhirDatastoreIdentityProviderConfigurationOutput) FineGrainedAuthorizationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FhirDatastoreIdentityProviderConfiguration) *bool { return v.FineGrainedAuthorizationEnabled }).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
func (o FhirDatastoreIdentityProviderConfigurationOutput) IdpLambdaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FhirDatastoreIdentityProviderConfiguration) *string { return v.IdpLambdaArn }).(pulumi.StringPtrOutput)
}

// The JSON metadata elements for identity provider configuration.
func (o FhirDatastoreIdentityProviderConfigurationOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FhirDatastoreIdentityProviderConfiguration) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type FhirDatastoreIdentityProviderConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreIdentityProviderConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreIdentityProviderConfiguration)(nil)).Elem()
}

func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) ToFhirDatastoreIdentityProviderConfigurationPtrOutput() FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) ToFhirDatastoreIdentityProviderConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreIdentityProviderConfigurationPtrOutput {
	return o
}

func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreIdentityProviderConfiguration] {
	return pulumix.Output[*FhirDatastoreIdentityProviderConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) Elem() FhirDatastoreIdentityProviderConfigurationOutput {
	return o.ApplyT(func(v *FhirDatastoreIdentityProviderConfiguration) FhirDatastoreIdentityProviderConfiguration {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreIdentityProviderConfiguration
		return ret
	}).(FhirDatastoreIdentityProviderConfigurationOutput)
}

// Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) AuthorizationStrategy() FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreIdentityProviderConfiguration) *FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy {
		if v == nil {
			return nil
		}
		return &v.AuthorizationStrategy
	}).(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategyPtrOutput)
}

// Flag to indicate if fine-grained authorization will be enabled for the datastore
func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) FineGrainedAuthorizationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreIdentityProviderConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.FineGrainedAuthorizationEnabled
	}).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) IdpLambdaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreIdentityProviderConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.IdpLambdaArn
	}).(pulumi.StringPtrOutput)
}

// The JSON metadata elements for identity provider configuration.
func (o FhirDatastoreIdentityProviderConfigurationPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreIdentityProviderConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

// The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
type FhirDatastoreKmsEncryptionConfig struct {
	// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
	CmkType FhirDatastoreKmsEncryptionConfigCmkType `pulumi:"cmkType"`
	// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

// FhirDatastoreKmsEncryptionConfigInput is an input type that accepts FhirDatastoreKmsEncryptionConfigArgs and FhirDatastoreKmsEncryptionConfigOutput values.
// You can construct a concrete instance of `FhirDatastoreKmsEncryptionConfigInput` via:
//
//	FhirDatastoreKmsEncryptionConfigArgs{...}
type FhirDatastoreKmsEncryptionConfigInput interface {
	pulumi.Input

	ToFhirDatastoreKmsEncryptionConfigOutput() FhirDatastoreKmsEncryptionConfigOutput
	ToFhirDatastoreKmsEncryptionConfigOutputWithContext(context.Context) FhirDatastoreKmsEncryptionConfigOutput
}

// The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
type FhirDatastoreKmsEncryptionConfigArgs struct {
	// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
	CmkType FhirDatastoreKmsEncryptionConfigCmkTypeInput `pulumi:"cmkType"`
	// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
}

func (FhirDatastoreKmsEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (i FhirDatastoreKmsEncryptionConfigArgs) ToFhirDatastoreKmsEncryptionConfigOutput() FhirDatastoreKmsEncryptionConfigOutput {
	return i.ToFhirDatastoreKmsEncryptionConfigOutputWithContext(context.Background())
}

func (i FhirDatastoreKmsEncryptionConfigArgs) ToFhirDatastoreKmsEncryptionConfigOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreKmsEncryptionConfigOutput)
}

func (i FhirDatastoreKmsEncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreKmsEncryptionConfig] {
	return pulumix.Output[FhirDatastoreKmsEncryptionConfig]{
		OutputState: i.ToFhirDatastoreKmsEncryptionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i FhirDatastoreKmsEncryptionConfigArgs) ToFhirDatastoreKmsEncryptionConfigPtrOutput() FhirDatastoreKmsEncryptionConfigPtrOutput {
	return i.ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i FhirDatastoreKmsEncryptionConfigArgs) ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreKmsEncryptionConfigOutput).ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx)
}

// FhirDatastoreKmsEncryptionConfigPtrInput is an input type that accepts FhirDatastoreKmsEncryptionConfigArgs, FhirDatastoreKmsEncryptionConfigPtr and FhirDatastoreKmsEncryptionConfigPtrOutput values.
// You can construct a concrete instance of `FhirDatastoreKmsEncryptionConfigPtrInput` via:
//
//	        FhirDatastoreKmsEncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type FhirDatastoreKmsEncryptionConfigPtrInput interface {
	pulumi.Input

	ToFhirDatastoreKmsEncryptionConfigPtrOutput() FhirDatastoreKmsEncryptionConfigPtrOutput
	ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Context) FhirDatastoreKmsEncryptionConfigPtrOutput
}

type fhirDatastoreKmsEncryptionConfigPtrType FhirDatastoreKmsEncryptionConfigArgs

func FhirDatastoreKmsEncryptionConfigPtr(v *FhirDatastoreKmsEncryptionConfigArgs) FhirDatastoreKmsEncryptionConfigPtrInput {
	return (*fhirDatastoreKmsEncryptionConfigPtrType)(v)
}

func (*fhirDatastoreKmsEncryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (i *fhirDatastoreKmsEncryptionConfigPtrType) ToFhirDatastoreKmsEncryptionConfigPtrOutput() FhirDatastoreKmsEncryptionConfigPtrOutput {
	return i.ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *fhirDatastoreKmsEncryptionConfigPtrType) ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreKmsEncryptionConfigPtrOutput)
}

func (i *fhirDatastoreKmsEncryptionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreKmsEncryptionConfig] {
	return pulumix.Output[*FhirDatastoreKmsEncryptionConfig]{
		OutputState: i.ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
type FhirDatastoreKmsEncryptionConfigOutput struct{ *pulumi.OutputState }

func (FhirDatastoreKmsEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (o FhirDatastoreKmsEncryptionConfigOutput) ToFhirDatastoreKmsEncryptionConfigOutput() FhirDatastoreKmsEncryptionConfigOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigOutput) ToFhirDatastoreKmsEncryptionConfigOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigOutput) ToFhirDatastoreKmsEncryptionConfigPtrOutput() FhirDatastoreKmsEncryptionConfigPtrOutput {
	return o.ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreKmsEncryptionConfigOutput) ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastoreKmsEncryptionConfig) *FhirDatastoreKmsEncryptionConfig {
		return &v
	}).(FhirDatastoreKmsEncryptionConfigPtrOutput)
}

func (o FhirDatastoreKmsEncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreKmsEncryptionConfig] {
	return pulumix.Output[FhirDatastoreKmsEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
func (o FhirDatastoreKmsEncryptionConfigOutput) CmkType() FhirDatastoreKmsEncryptionConfigCmkTypeOutput {
	return o.ApplyT(func(v FhirDatastoreKmsEncryptionConfig) FhirDatastoreKmsEncryptionConfigCmkType { return v.CmkType }).(FhirDatastoreKmsEncryptionConfigCmkTypeOutput)
}

// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
func (o FhirDatastoreKmsEncryptionConfigOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FhirDatastoreKmsEncryptionConfig) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type FhirDatastoreKmsEncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreKmsEncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (o FhirDatastoreKmsEncryptionConfigPtrOutput) ToFhirDatastoreKmsEncryptionConfigPtrOutput() FhirDatastoreKmsEncryptionConfigPtrOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigPtrOutput) ToFhirDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FhirDatastoreKmsEncryptionConfigPtrOutput {
	return o
}

func (o FhirDatastoreKmsEncryptionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreKmsEncryptionConfig] {
	return pulumix.Output[*FhirDatastoreKmsEncryptionConfig]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreKmsEncryptionConfigPtrOutput) Elem() FhirDatastoreKmsEncryptionConfigOutput {
	return o.ApplyT(func(v *FhirDatastoreKmsEncryptionConfig) FhirDatastoreKmsEncryptionConfig {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreKmsEncryptionConfig
		return ret
	}).(FhirDatastoreKmsEncryptionConfigOutput)
}

// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
func (o FhirDatastoreKmsEncryptionConfigPtrOutput) CmkType() FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return o.ApplyT(func(v *FhirDatastoreKmsEncryptionConfig) *FhirDatastoreKmsEncryptionConfigCmkType {
		if v == nil {
			return nil
		}
		return &v.CmkType
	}).(FhirDatastoreKmsEncryptionConfigCmkTypePtrOutput)
}

// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
func (o FhirDatastoreKmsEncryptionConfigPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreKmsEncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
type FhirDatastorePreloadDataConfig struct {
	// The type of preloaded data. Only Synthea preloaded data is supported.
	PreloadDataType FhirDatastorePreloadDataConfigPreloadDataType `pulumi:"preloadDataType"`
}

// FhirDatastorePreloadDataConfigInput is an input type that accepts FhirDatastorePreloadDataConfigArgs and FhirDatastorePreloadDataConfigOutput values.
// You can construct a concrete instance of `FhirDatastorePreloadDataConfigInput` via:
//
//	FhirDatastorePreloadDataConfigArgs{...}
type FhirDatastorePreloadDataConfigInput interface {
	pulumi.Input

	ToFhirDatastorePreloadDataConfigOutput() FhirDatastorePreloadDataConfigOutput
	ToFhirDatastorePreloadDataConfigOutputWithContext(context.Context) FhirDatastorePreloadDataConfigOutput
}

// The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
type FhirDatastorePreloadDataConfigArgs struct {
	// The type of preloaded data. Only Synthea preloaded data is supported.
	PreloadDataType FhirDatastorePreloadDataConfigPreloadDataTypeInput `pulumi:"preloadDataType"`
}

func (FhirDatastorePreloadDataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastorePreloadDataConfig)(nil)).Elem()
}

func (i FhirDatastorePreloadDataConfigArgs) ToFhirDatastorePreloadDataConfigOutput() FhirDatastorePreloadDataConfigOutput {
	return i.ToFhirDatastorePreloadDataConfigOutputWithContext(context.Background())
}

func (i FhirDatastorePreloadDataConfigArgs) ToFhirDatastorePreloadDataConfigOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastorePreloadDataConfigOutput)
}

func (i FhirDatastorePreloadDataConfigArgs) ToOutput(ctx context.Context) pulumix.Output[FhirDatastorePreloadDataConfig] {
	return pulumix.Output[FhirDatastorePreloadDataConfig]{
		OutputState: i.ToFhirDatastorePreloadDataConfigOutputWithContext(ctx).OutputState,
	}
}

func (i FhirDatastorePreloadDataConfigArgs) ToFhirDatastorePreloadDataConfigPtrOutput() FhirDatastorePreloadDataConfigPtrOutput {
	return i.ToFhirDatastorePreloadDataConfigPtrOutputWithContext(context.Background())
}

func (i FhirDatastorePreloadDataConfigArgs) ToFhirDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastorePreloadDataConfigOutput).ToFhirDatastorePreloadDataConfigPtrOutputWithContext(ctx)
}

// FhirDatastorePreloadDataConfigPtrInput is an input type that accepts FhirDatastorePreloadDataConfigArgs, FhirDatastorePreloadDataConfigPtr and FhirDatastorePreloadDataConfigPtrOutput values.
// You can construct a concrete instance of `FhirDatastorePreloadDataConfigPtrInput` via:
//
//	        FhirDatastorePreloadDataConfigArgs{...}
//
//	or:
//
//	        nil
type FhirDatastorePreloadDataConfigPtrInput interface {
	pulumi.Input

	ToFhirDatastorePreloadDataConfigPtrOutput() FhirDatastorePreloadDataConfigPtrOutput
	ToFhirDatastorePreloadDataConfigPtrOutputWithContext(context.Context) FhirDatastorePreloadDataConfigPtrOutput
}

type fhirDatastorePreloadDataConfigPtrType FhirDatastorePreloadDataConfigArgs

func FhirDatastorePreloadDataConfigPtr(v *FhirDatastorePreloadDataConfigArgs) FhirDatastorePreloadDataConfigPtrInput {
	return (*fhirDatastorePreloadDataConfigPtrType)(v)
}

func (*fhirDatastorePreloadDataConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastorePreloadDataConfig)(nil)).Elem()
}

func (i *fhirDatastorePreloadDataConfigPtrType) ToFhirDatastorePreloadDataConfigPtrOutput() FhirDatastorePreloadDataConfigPtrOutput {
	return i.ToFhirDatastorePreloadDataConfigPtrOutputWithContext(context.Background())
}

func (i *fhirDatastorePreloadDataConfigPtrType) ToFhirDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastorePreloadDataConfigPtrOutput)
}

func (i *fhirDatastorePreloadDataConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastorePreloadDataConfig] {
	return pulumix.Output[*FhirDatastorePreloadDataConfig]{
		OutputState: i.ToFhirDatastorePreloadDataConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
type FhirDatastorePreloadDataConfigOutput struct{ *pulumi.OutputState }

func (FhirDatastorePreloadDataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastorePreloadDataConfig)(nil)).Elem()
}

func (o FhirDatastorePreloadDataConfigOutput) ToFhirDatastorePreloadDataConfigOutput() FhirDatastorePreloadDataConfigOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigOutput) ToFhirDatastorePreloadDataConfigOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigOutput) ToFhirDatastorePreloadDataConfigPtrOutput() FhirDatastorePreloadDataConfigPtrOutput {
	return o.ToFhirDatastorePreloadDataConfigPtrOutputWithContext(context.Background())
}

func (o FhirDatastorePreloadDataConfigOutput) ToFhirDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastorePreloadDataConfig) *FhirDatastorePreloadDataConfig {
		return &v
	}).(FhirDatastorePreloadDataConfigPtrOutput)
}

func (o FhirDatastorePreloadDataConfigOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastorePreloadDataConfig] {
	return pulumix.Output[FhirDatastorePreloadDataConfig]{
		OutputState: o.OutputState,
	}
}

// The type of preloaded data. Only Synthea preloaded data is supported.
func (o FhirDatastorePreloadDataConfigOutput) PreloadDataType() FhirDatastorePreloadDataConfigPreloadDataTypeOutput {
	return o.ApplyT(func(v FhirDatastorePreloadDataConfig) FhirDatastorePreloadDataConfigPreloadDataType {
		return v.PreloadDataType
	}).(FhirDatastorePreloadDataConfigPreloadDataTypeOutput)
}

type FhirDatastorePreloadDataConfigPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastorePreloadDataConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastorePreloadDataConfig)(nil)).Elem()
}

func (o FhirDatastorePreloadDataConfigPtrOutput) ToFhirDatastorePreloadDataConfigPtrOutput() FhirDatastorePreloadDataConfigPtrOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigPtrOutput) ToFhirDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FhirDatastorePreloadDataConfigPtrOutput {
	return o
}

func (o FhirDatastorePreloadDataConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastorePreloadDataConfig] {
	return pulumix.Output[*FhirDatastorePreloadDataConfig]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastorePreloadDataConfigPtrOutput) Elem() FhirDatastorePreloadDataConfigOutput {
	return o.ApplyT(func(v *FhirDatastorePreloadDataConfig) FhirDatastorePreloadDataConfig {
		if v != nil {
			return *v
		}
		var ret FhirDatastorePreloadDataConfig
		return ret
	}).(FhirDatastorePreloadDataConfigOutput)
}

// The type of preloaded data. Only Synthea preloaded data is supported.
func (o FhirDatastorePreloadDataConfigPtrOutput) PreloadDataType() FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return o.ApplyT(func(v *FhirDatastorePreloadDataConfig) *FhirDatastorePreloadDataConfigPreloadDataType {
		if v == nil {
			return nil
		}
		return &v.PreloadDataType
	}).(FhirDatastorePreloadDataConfigPreloadDataTypePtrOutput)
}

// The server-side encryption key configuration for a customer provided encryption key.
type FhirDatastoreSseConfiguration struct {
	KmsEncryptionConfig FhirDatastoreKmsEncryptionConfig `pulumi:"kmsEncryptionConfig"`
}

// FhirDatastoreSseConfigurationInput is an input type that accepts FhirDatastoreSseConfigurationArgs and FhirDatastoreSseConfigurationOutput values.
// You can construct a concrete instance of `FhirDatastoreSseConfigurationInput` via:
//
//	FhirDatastoreSseConfigurationArgs{...}
type FhirDatastoreSseConfigurationInput interface {
	pulumi.Input

	ToFhirDatastoreSseConfigurationOutput() FhirDatastoreSseConfigurationOutput
	ToFhirDatastoreSseConfigurationOutputWithContext(context.Context) FhirDatastoreSseConfigurationOutput
}

// The server-side encryption key configuration for a customer provided encryption key.
type FhirDatastoreSseConfigurationArgs struct {
	KmsEncryptionConfig FhirDatastoreKmsEncryptionConfigInput `pulumi:"kmsEncryptionConfig"`
}

func (FhirDatastoreSseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreSseConfiguration)(nil)).Elem()
}

func (i FhirDatastoreSseConfigurationArgs) ToFhirDatastoreSseConfigurationOutput() FhirDatastoreSseConfigurationOutput {
	return i.ToFhirDatastoreSseConfigurationOutputWithContext(context.Background())
}

func (i FhirDatastoreSseConfigurationArgs) ToFhirDatastoreSseConfigurationOutputWithContext(ctx context.Context) FhirDatastoreSseConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreSseConfigurationOutput)
}

func (i FhirDatastoreSseConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreSseConfiguration] {
	return pulumix.Output[FhirDatastoreSseConfiguration]{
		OutputState: i.ToFhirDatastoreSseConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i FhirDatastoreSseConfigurationArgs) ToFhirDatastoreSseConfigurationPtrOutput() FhirDatastoreSseConfigurationPtrOutput {
	return i.ToFhirDatastoreSseConfigurationPtrOutputWithContext(context.Background())
}

func (i FhirDatastoreSseConfigurationArgs) ToFhirDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreSseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreSseConfigurationOutput).ToFhirDatastoreSseConfigurationPtrOutputWithContext(ctx)
}

// FhirDatastoreSseConfigurationPtrInput is an input type that accepts FhirDatastoreSseConfigurationArgs, FhirDatastoreSseConfigurationPtr and FhirDatastoreSseConfigurationPtrOutput values.
// You can construct a concrete instance of `FhirDatastoreSseConfigurationPtrInput` via:
//
//	        FhirDatastoreSseConfigurationArgs{...}
//
//	or:
//
//	        nil
type FhirDatastoreSseConfigurationPtrInput interface {
	pulumi.Input

	ToFhirDatastoreSseConfigurationPtrOutput() FhirDatastoreSseConfigurationPtrOutput
	ToFhirDatastoreSseConfigurationPtrOutputWithContext(context.Context) FhirDatastoreSseConfigurationPtrOutput
}

type fhirDatastoreSseConfigurationPtrType FhirDatastoreSseConfigurationArgs

func FhirDatastoreSseConfigurationPtr(v *FhirDatastoreSseConfigurationArgs) FhirDatastoreSseConfigurationPtrInput {
	return (*fhirDatastoreSseConfigurationPtrType)(v)
}

func (*fhirDatastoreSseConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreSseConfiguration)(nil)).Elem()
}

func (i *fhirDatastoreSseConfigurationPtrType) ToFhirDatastoreSseConfigurationPtrOutput() FhirDatastoreSseConfigurationPtrOutput {
	return i.ToFhirDatastoreSseConfigurationPtrOutputWithContext(context.Background())
}

func (i *fhirDatastoreSseConfigurationPtrType) ToFhirDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreSseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreSseConfigurationPtrOutput)
}

func (i *fhirDatastoreSseConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreSseConfiguration] {
	return pulumix.Output[*FhirDatastoreSseConfiguration]{
		OutputState: i.ToFhirDatastoreSseConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The server-side encryption key configuration for a customer provided encryption key.
type FhirDatastoreSseConfigurationOutput struct{ *pulumi.OutputState }

func (FhirDatastoreSseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreSseConfiguration)(nil)).Elem()
}

func (o FhirDatastoreSseConfigurationOutput) ToFhirDatastoreSseConfigurationOutput() FhirDatastoreSseConfigurationOutput {
	return o
}

func (o FhirDatastoreSseConfigurationOutput) ToFhirDatastoreSseConfigurationOutputWithContext(ctx context.Context) FhirDatastoreSseConfigurationOutput {
	return o
}

func (o FhirDatastoreSseConfigurationOutput) ToFhirDatastoreSseConfigurationPtrOutput() FhirDatastoreSseConfigurationPtrOutput {
	return o.ToFhirDatastoreSseConfigurationPtrOutputWithContext(context.Background())
}

func (o FhirDatastoreSseConfigurationOutput) ToFhirDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreSseConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirDatastoreSseConfiguration) *FhirDatastoreSseConfiguration {
		return &v
	}).(FhirDatastoreSseConfigurationPtrOutput)
}

func (o FhirDatastoreSseConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreSseConfiguration] {
	return pulumix.Output[FhirDatastoreSseConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreSseConfigurationOutput) KmsEncryptionConfig() FhirDatastoreKmsEncryptionConfigOutput {
	return o.ApplyT(func(v FhirDatastoreSseConfiguration) FhirDatastoreKmsEncryptionConfig { return v.KmsEncryptionConfig }).(FhirDatastoreKmsEncryptionConfigOutput)
}

type FhirDatastoreSseConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FhirDatastoreSseConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirDatastoreSseConfiguration)(nil)).Elem()
}

func (o FhirDatastoreSseConfigurationPtrOutput) ToFhirDatastoreSseConfigurationPtrOutput() FhirDatastoreSseConfigurationPtrOutput {
	return o
}

func (o FhirDatastoreSseConfigurationPtrOutput) ToFhirDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FhirDatastoreSseConfigurationPtrOutput {
	return o
}

func (o FhirDatastoreSseConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FhirDatastoreSseConfiguration] {
	return pulumix.Output[*FhirDatastoreSseConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreSseConfigurationPtrOutput) Elem() FhirDatastoreSseConfigurationOutput {
	return o.ApplyT(func(v *FhirDatastoreSseConfiguration) FhirDatastoreSseConfiguration {
		if v != nil {
			return *v
		}
		var ret FhirDatastoreSseConfiguration
		return ret
	}).(FhirDatastoreSseConfigurationOutput)
}

func (o FhirDatastoreSseConfigurationPtrOutput) KmsEncryptionConfig() FhirDatastoreKmsEncryptionConfigPtrOutput {
	return o.ApplyT(func(v *FhirDatastoreSseConfiguration) *FhirDatastoreKmsEncryptionConfig {
		if v == nil {
			return nil
		}
		return &v.KmsEncryptionConfig
	}).(FhirDatastoreKmsEncryptionConfigPtrOutput)
}

// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
type FhirDatastoreTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// FhirDatastoreTagInput is an input type that accepts FhirDatastoreTagArgs and FhirDatastoreTagOutput values.
// You can construct a concrete instance of `FhirDatastoreTagInput` via:
//
//	FhirDatastoreTagArgs{...}
type FhirDatastoreTagInput interface {
	pulumi.Input

	ToFhirDatastoreTagOutput() FhirDatastoreTagOutput
	ToFhirDatastoreTagOutputWithContext(context.Context) FhirDatastoreTagOutput
}

// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
type FhirDatastoreTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FhirDatastoreTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreTag)(nil)).Elem()
}

func (i FhirDatastoreTagArgs) ToFhirDatastoreTagOutput() FhirDatastoreTagOutput {
	return i.ToFhirDatastoreTagOutputWithContext(context.Background())
}

func (i FhirDatastoreTagArgs) ToFhirDatastoreTagOutputWithContext(ctx context.Context) FhirDatastoreTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreTagOutput)
}

func (i FhirDatastoreTagArgs) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreTag] {
	return pulumix.Output[FhirDatastoreTag]{
		OutputState: i.ToFhirDatastoreTagOutputWithContext(ctx).OutputState,
	}
}

// FhirDatastoreTagArrayInput is an input type that accepts FhirDatastoreTagArray and FhirDatastoreTagArrayOutput values.
// You can construct a concrete instance of `FhirDatastoreTagArrayInput` via:
//
//	FhirDatastoreTagArray{ FhirDatastoreTagArgs{...} }
type FhirDatastoreTagArrayInput interface {
	pulumi.Input

	ToFhirDatastoreTagArrayOutput() FhirDatastoreTagArrayOutput
	ToFhirDatastoreTagArrayOutputWithContext(context.Context) FhirDatastoreTagArrayOutput
}

type FhirDatastoreTagArray []FhirDatastoreTagInput

func (FhirDatastoreTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FhirDatastoreTag)(nil)).Elem()
}

func (i FhirDatastoreTagArray) ToFhirDatastoreTagArrayOutput() FhirDatastoreTagArrayOutput {
	return i.ToFhirDatastoreTagArrayOutputWithContext(context.Background())
}

func (i FhirDatastoreTagArray) ToFhirDatastoreTagArrayOutputWithContext(ctx context.Context) FhirDatastoreTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirDatastoreTagArrayOutput)
}

func (i FhirDatastoreTagArray) ToOutput(ctx context.Context) pulumix.Output[[]FhirDatastoreTag] {
	return pulumix.Output[[]FhirDatastoreTag]{
		OutputState: i.ToFhirDatastoreTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
type FhirDatastoreTagOutput struct{ *pulumi.OutputState }

func (FhirDatastoreTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirDatastoreTag)(nil)).Elem()
}

func (o FhirDatastoreTagOutput) ToFhirDatastoreTagOutput() FhirDatastoreTagOutput {
	return o
}

func (o FhirDatastoreTagOutput) ToFhirDatastoreTagOutputWithContext(ctx context.Context) FhirDatastoreTagOutput {
	return o
}

func (o FhirDatastoreTagOutput) ToOutput(ctx context.Context) pulumix.Output[FhirDatastoreTag] {
	return pulumix.Output[FhirDatastoreTag]{
		OutputState: o.OutputState,
	}
}

// The key of the tag.
func (o FhirDatastoreTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FhirDatastoreTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the tag.
func (o FhirDatastoreTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FhirDatastoreTag) string { return v.Value }).(pulumi.StringOutput)
}

type FhirDatastoreTagArrayOutput struct{ *pulumi.OutputState }

func (FhirDatastoreTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FhirDatastoreTag)(nil)).Elem()
}

func (o FhirDatastoreTagArrayOutput) ToFhirDatastoreTagArrayOutput() FhirDatastoreTagArrayOutput {
	return o
}

func (o FhirDatastoreTagArrayOutput) ToFhirDatastoreTagArrayOutputWithContext(ctx context.Context) FhirDatastoreTagArrayOutput {
	return o
}

func (o FhirDatastoreTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FhirDatastoreTag] {
	return pulumix.Output[[]FhirDatastoreTag]{
		OutputState: o.OutputState,
	}
}

func (o FhirDatastoreTagArrayOutput) Index(i pulumi.IntInput) FhirDatastoreTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FhirDatastoreTag {
		return vs[0].([]FhirDatastoreTag)[vs[1].(int)]
	}).(FhirDatastoreTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreIdentityProviderConfigurationInput)(nil)).Elem(), FhirDatastoreIdentityProviderConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreIdentityProviderConfigurationPtrInput)(nil)).Elem(), FhirDatastoreIdentityProviderConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreKmsEncryptionConfigInput)(nil)).Elem(), FhirDatastoreKmsEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreKmsEncryptionConfigPtrInput)(nil)).Elem(), FhirDatastoreKmsEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastorePreloadDataConfigInput)(nil)).Elem(), FhirDatastorePreloadDataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastorePreloadDataConfigPtrInput)(nil)).Elem(), FhirDatastorePreloadDataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreSseConfigurationInput)(nil)).Elem(), FhirDatastoreSseConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreSseConfigurationPtrInput)(nil)).Elem(), FhirDatastoreSseConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreTagInput)(nil)).Elem(), FhirDatastoreTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirDatastoreTagArrayInput)(nil)).Elem(), FhirDatastoreTagArray{})
	pulumi.RegisterOutputType(FhirDatastoreCreatedAtOutput{})
	pulumi.RegisterOutputType(FhirDatastoreCreatedAtPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastoreIdentityProviderConfigurationOutput{})
	pulumi.RegisterOutputType(FhirDatastoreIdentityProviderConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastoreKmsEncryptionConfigOutput{})
	pulumi.RegisterOutputType(FhirDatastoreKmsEncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastorePreloadDataConfigOutput{})
	pulumi.RegisterOutputType(FhirDatastorePreloadDataConfigPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastoreSseConfigurationOutput{})
	pulumi.RegisterOutputType(FhirDatastoreSseConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FhirDatastoreTagOutput{})
	pulumi.RegisterOutputType(FhirDatastoreTagArrayOutput{})
}
