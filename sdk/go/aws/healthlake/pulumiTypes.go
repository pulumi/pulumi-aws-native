// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthlake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The time that a Data Store was created.
type FHIRDatastoreCreatedAt struct {
	// Nanoseconds.
	Nanos int `pulumi:"nanos"`
	// Seconds since epoch.
	Seconds string `pulumi:"seconds"`
}

// FHIRDatastoreCreatedAtInput is an input type that accepts FHIRDatastoreCreatedAtArgs and FHIRDatastoreCreatedAtOutput values.
// You can construct a concrete instance of `FHIRDatastoreCreatedAtInput` via:
//
//          FHIRDatastoreCreatedAtArgs{...}
type FHIRDatastoreCreatedAtInput interface {
	pulumi.Input

	ToFHIRDatastoreCreatedAtOutput() FHIRDatastoreCreatedAtOutput
	ToFHIRDatastoreCreatedAtOutputWithContext(context.Context) FHIRDatastoreCreatedAtOutput
}

// The time that a Data Store was created.
type FHIRDatastoreCreatedAtArgs struct {
	// Nanoseconds.
	Nanos pulumi.IntInput `pulumi:"nanos"`
	// Seconds since epoch.
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (FHIRDatastoreCreatedAtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreCreatedAt)(nil)).Elem()
}

func (i FHIRDatastoreCreatedAtArgs) ToFHIRDatastoreCreatedAtOutput() FHIRDatastoreCreatedAtOutput {
	return i.ToFHIRDatastoreCreatedAtOutputWithContext(context.Background())
}

func (i FHIRDatastoreCreatedAtArgs) ToFHIRDatastoreCreatedAtOutputWithContext(ctx context.Context) FHIRDatastoreCreatedAtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreCreatedAtOutput)
}

func (i FHIRDatastoreCreatedAtArgs) ToFHIRDatastoreCreatedAtPtrOutput() FHIRDatastoreCreatedAtPtrOutput {
	return i.ToFHIRDatastoreCreatedAtPtrOutputWithContext(context.Background())
}

func (i FHIRDatastoreCreatedAtArgs) ToFHIRDatastoreCreatedAtPtrOutputWithContext(ctx context.Context) FHIRDatastoreCreatedAtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreCreatedAtOutput).ToFHIRDatastoreCreatedAtPtrOutputWithContext(ctx)
}

// FHIRDatastoreCreatedAtPtrInput is an input type that accepts FHIRDatastoreCreatedAtArgs, FHIRDatastoreCreatedAtPtr and FHIRDatastoreCreatedAtPtrOutput values.
// You can construct a concrete instance of `FHIRDatastoreCreatedAtPtrInput` via:
//
//          FHIRDatastoreCreatedAtArgs{...}
//
//  or:
//
//          nil
type FHIRDatastoreCreatedAtPtrInput interface {
	pulumi.Input

	ToFHIRDatastoreCreatedAtPtrOutput() FHIRDatastoreCreatedAtPtrOutput
	ToFHIRDatastoreCreatedAtPtrOutputWithContext(context.Context) FHIRDatastoreCreatedAtPtrOutput
}

type fhirdatastoreCreatedAtPtrType FHIRDatastoreCreatedAtArgs

func FHIRDatastoreCreatedAtPtr(v *FHIRDatastoreCreatedAtArgs) FHIRDatastoreCreatedAtPtrInput {
	return (*fhirdatastoreCreatedAtPtrType)(v)
}

func (*fhirdatastoreCreatedAtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastoreCreatedAt)(nil)).Elem()
}

func (i *fhirdatastoreCreatedAtPtrType) ToFHIRDatastoreCreatedAtPtrOutput() FHIRDatastoreCreatedAtPtrOutput {
	return i.ToFHIRDatastoreCreatedAtPtrOutputWithContext(context.Background())
}

func (i *fhirdatastoreCreatedAtPtrType) ToFHIRDatastoreCreatedAtPtrOutputWithContext(ctx context.Context) FHIRDatastoreCreatedAtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreCreatedAtPtrOutput)
}

// The time that a Data Store was created.
type FHIRDatastoreCreatedAtOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreCreatedAtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreCreatedAt)(nil)).Elem()
}

func (o FHIRDatastoreCreatedAtOutput) ToFHIRDatastoreCreatedAtOutput() FHIRDatastoreCreatedAtOutput {
	return o
}

func (o FHIRDatastoreCreatedAtOutput) ToFHIRDatastoreCreatedAtOutputWithContext(ctx context.Context) FHIRDatastoreCreatedAtOutput {
	return o
}

func (o FHIRDatastoreCreatedAtOutput) ToFHIRDatastoreCreatedAtPtrOutput() FHIRDatastoreCreatedAtPtrOutput {
	return o.ToFHIRDatastoreCreatedAtPtrOutputWithContext(context.Background())
}

func (o FHIRDatastoreCreatedAtOutput) ToFHIRDatastoreCreatedAtPtrOutputWithContext(ctx context.Context) FHIRDatastoreCreatedAtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FHIRDatastoreCreatedAt) *FHIRDatastoreCreatedAt {
		return &v
	}).(FHIRDatastoreCreatedAtPtrOutput)
}

// Nanoseconds.
func (o FHIRDatastoreCreatedAtOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v FHIRDatastoreCreatedAt) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds since epoch.
func (o FHIRDatastoreCreatedAtOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v FHIRDatastoreCreatedAt) string { return v.Seconds }).(pulumi.StringOutput)
}

type FHIRDatastoreCreatedAtPtrOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreCreatedAtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastoreCreatedAt)(nil)).Elem()
}

func (o FHIRDatastoreCreatedAtPtrOutput) ToFHIRDatastoreCreatedAtPtrOutput() FHIRDatastoreCreatedAtPtrOutput {
	return o
}

func (o FHIRDatastoreCreatedAtPtrOutput) ToFHIRDatastoreCreatedAtPtrOutputWithContext(ctx context.Context) FHIRDatastoreCreatedAtPtrOutput {
	return o
}

func (o FHIRDatastoreCreatedAtPtrOutput) Elem() FHIRDatastoreCreatedAtOutput {
	return o.ApplyT(func(v *FHIRDatastoreCreatedAt) FHIRDatastoreCreatedAt {
		if v != nil {
			return *v
		}
		var ret FHIRDatastoreCreatedAt
		return ret
	}).(FHIRDatastoreCreatedAtOutput)
}

// Nanoseconds.
func (o FHIRDatastoreCreatedAtPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FHIRDatastoreCreatedAt) *int {
		if v == nil {
			return nil
		}
		return &v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Seconds since epoch.
func (o FHIRDatastoreCreatedAtPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FHIRDatastoreCreatedAt) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

// The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
type FHIRDatastoreKmsEncryptionConfig struct {
	// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
	CmkType FHIRDatastoreKmsEncryptionConfigCmkType `pulumi:"cmkType"`
	// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

// FHIRDatastoreKmsEncryptionConfigInput is an input type that accepts FHIRDatastoreKmsEncryptionConfigArgs and FHIRDatastoreKmsEncryptionConfigOutput values.
// You can construct a concrete instance of `FHIRDatastoreKmsEncryptionConfigInput` via:
//
//          FHIRDatastoreKmsEncryptionConfigArgs{...}
type FHIRDatastoreKmsEncryptionConfigInput interface {
	pulumi.Input

	ToFHIRDatastoreKmsEncryptionConfigOutput() FHIRDatastoreKmsEncryptionConfigOutput
	ToFHIRDatastoreKmsEncryptionConfigOutputWithContext(context.Context) FHIRDatastoreKmsEncryptionConfigOutput
}

// The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
type FHIRDatastoreKmsEncryptionConfigArgs struct {
	// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
	CmkType FHIRDatastoreKmsEncryptionConfigCmkTypeInput `pulumi:"cmkType"`
	// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
}

func (FHIRDatastoreKmsEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (i FHIRDatastoreKmsEncryptionConfigArgs) ToFHIRDatastoreKmsEncryptionConfigOutput() FHIRDatastoreKmsEncryptionConfigOutput {
	return i.ToFHIRDatastoreKmsEncryptionConfigOutputWithContext(context.Background())
}

func (i FHIRDatastoreKmsEncryptionConfigArgs) ToFHIRDatastoreKmsEncryptionConfigOutputWithContext(ctx context.Context) FHIRDatastoreKmsEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreKmsEncryptionConfigOutput)
}

func (i FHIRDatastoreKmsEncryptionConfigArgs) ToFHIRDatastoreKmsEncryptionConfigPtrOutput() FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return i.ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i FHIRDatastoreKmsEncryptionConfigArgs) ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreKmsEncryptionConfigOutput).ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx)
}

// FHIRDatastoreKmsEncryptionConfigPtrInput is an input type that accepts FHIRDatastoreKmsEncryptionConfigArgs, FHIRDatastoreKmsEncryptionConfigPtr and FHIRDatastoreKmsEncryptionConfigPtrOutput values.
// You can construct a concrete instance of `FHIRDatastoreKmsEncryptionConfigPtrInput` via:
//
//          FHIRDatastoreKmsEncryptionConfigArgs{...}
//
//  or:
//
//          nil
type FHIRDatastoreKmsEncryptionConfigPtrInput interface {
	pulumi.Input

	ToFHIRDatastoreKmsEncryptionConfigPtrOutput() FHIRDatastoreKmsEncryptionConfigPtrOutput
	ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Context) FHIRDatastoreKmsEncryptionConfigPtrOutput
}

type fhirdatastoreKmsEncryptionConfigPtrType FHIRDatastoreKmsEncryptionConfigArgs

func FHIRDatastoreKmsEncryptionConfigPtr(v *FHIRDatastoreKmsEncryptionConfigArgs) FHIRDatastoreKmsEncryptionConfigPtrInput {
	return (*fhirdatastoreKmsEncryptionConfigPtrType)(v)
}

func (*fhirdatastoreKmsEncryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (i *fhirdatastoreKmsEncryptionConfigPtrType) ToFHIRDatastoreKmsEncryptionConfigPtrOutput() FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return i.ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *fhirdatastoreKmsEncryptionConfigPtrType) ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreKmsEncryptionConfigPtrOutput)
}

// The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
type FHIRDatastoreKmsEncryptionConfigOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreKmsEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (o FHIRDatastoreKmsEncryptionConfigOutput) ToFHIRDatastoreKmsEncryptionConfigOutput() FHIRDatastoreKmsEncryptionConfigOutput {
	return o
}

func (o FHIRDatastoreKmsEncryptionConfigOutput) ToFHIRDatastoreKmsEncryptionConfigOutputWithContext(ctx context.Context) FHIRDatastoreKmsEncryptionConfigOutput {
	return o
}

func (o FHIRDatastoreKmsEncryptionConfigOutput) ToFHIRDatastoreKmsEncryptionConfigPtrOutput() FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return o.ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o FHIRDatastoreKmsEncryptionConfigOutput) ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FHIRDatastoreKmsEncryptionConfig) *FHIRDatastoreKmsEncryptionConfig {
		return &v
	}).(FHIRDatastoreKmsEncryptionConfigPtrOutput)
}

// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
func (o FHIRDatastoreKmsEncryptionConfigOutput) CmkType() FHIRDatastoreKmsEncryptionConfigCmkTypeOutput {
	return o.ApplyT(func(v FHIRDatastoreKmsEncryptionConfig) FHIRDatastoreKmsEncryptionConfigCmkType { return v.CmkType }).(FHIRDatastoreKmsEncryptionConfigCmkTypeOutput)
}

// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
func (o FHIRDatastoreKmsEncryptionConfigOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FHIRDatastoreKmsEncryptionConfig) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type FHIRDatastoreKmsEncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreKmsEncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastoreKmsEncryptionConfig)(nil)).Elem()
}

func (o FHIRDatastoreKmsEncryptionConfigPtrOutput) ToFHIRDatastoreKmsEncryptionConfigPtrOutput() FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return o
}

func (o FHIRDatastoreKmsEncryptionConfigPtrOutput) ToFHIRDatastoreKmsEncryptionConfigPtrOutputWithContext(ctx context.Context) FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return o
}

func (o FHIRDatastoreKmsEncryptionConfigPtrOutput) Elem() FHIRDatastoreKmsEncryptionConfigOutput {
	return o.ApplyT(func(v *FHIRDatastoreKmsEncryptionConfig) FHIRDatastoreKmsEncryptionConfig {
		if v != nil {
			return *v
		}
		var ret FHIRDatastoreKmsEncryptionConfig
		return ret
	}).(FHIRDatastoreKmsEncryptionConfigOutput)
}

// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
func (o FHIRDatastoreKmsEncryptionConfigPtrOutput) CmkType() FHIRDatastoreKmsEncryptionConfigCmkTypePtrOutput {
	return o.ApplyT(func(v *FHIRDatastoreKmsEncryptionConfig) *FHIRDatastoreKmsEncryptionConfigCmkType {
		if v == nil {
			return nil
		}
		return &v.CmkType
	}).(FHIRDatastoreKmsEncryptionConfigCmkTypePtrOutput)
}

// The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
func (o FHIRDatastoreKmsEncryptionConfigPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FHIRDatastoreKmsEncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
type FHIRDatastorePreloadDataConfig struct {
	// The type of preloaded data. Only Synthea preloaded data is supported.
	PreloadDataType FHIRDatastorePreloadDataConfigPreloadDataType `pulumi:"preloadDataType"`
}

// FHIRDatastorePreloadDataConfigInput is an input type that accepts FHIRDatastorePreloadDataConfigArgs and FHIRDatastorePreloadDataConfigOutput values.
// You can construct a concrete instance of `FHIRDatastorePreloadDataConfigInput` via:
//
//          FHIRDatastorePreloadDataConfigArgs{...}
type FHIRDatastorePreloadDataConfigInput interface {
	pulumi.Input

	ToFHIRDatastorePreloadDataConfigOutput() FHIRDatastorePreloadDataConfigOutput
	ToFHIRDatastorePreloadDataConfigOutputWithContext(context.Context) FHIRDatastorePreloadDataConfigOutput
}

// The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
type FHIRDatastorePreloadDataConfigArgs struct {
	// The type of preloaded data. Only Synthea preloaded data is supported.
	PreloadDataType FHIRDatastorePreloadDataConfigPreloadDataTypeInput `pulumi:"preloadDataType"`
}

func (FHIRDatastorePreloadDataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastorePreloadDataConfig)(nil)).Elem()
}

func (i FHIRDatastorePreloadDataConfigArgs) ToFHIRDatastorePreloadDataConfigOutput() FHIRDatastorePreloadDataConfigOutput {
	return i.ToFHIRDatastorePreloadDataConfigOutputWithContext(context.Background())
}

func (i FHIRDatastorePreloadDataConfigArgs) ToFHIRDatastorePreloadDataConfigOutputWithContext(ctx context.Context) FHIRDatastorePreloadDataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastorePreloadDataConfigOutput)
}

func (i FHIRDatastorePreloadDataConfigArgs) ToFHIRDatastorePreloadDataConfigPtrOutput() FHIRDatastorePreloadDataConfigPtrOutput {
	return i.ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(context.Background())
}

func (i FHIRDatastorePreloadDataConfigArgs) ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FHIRDatastorePreloadDataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastorePreloadDataConfigOutput).ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(ctx)
}

// FHIRDatastorePreloadDataConfigPtrInput is an input type that accepts FHIRDatastorePreloadDataConfigArgs, FHIRDatastorePreloadDataConfigPtr and FHIRDatastorePreloadDataConfigPtrOutput values.
// You can construct a concrete instance of `FHIRDatastorePreloadDataConfigPtrInput` via:
//
//          FHIRDatastorePreloadDataConfigArgs{...}
//
//  or:
//
//          nil
type FHIRDatastorePreloadDataConfigPtrInput interface {
	pulumi.Input

	ToFHIRDatastorePreloadDataConfigPtrOutput() FHIRDatastorePreloadDataConfigPtrOutput
	ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(context.Context) FHIRDatastorePreloadDataConfigPtrOutput
}

type fhirdatastorePreloadDataConfigPtrType FHIRDatastorePreloadDataConfigArgs

func FHIRDatastorePreloadDataConfigPtr(v *FHIRDatastorePreloadDataConfigArgs) FHIRDatastorePreloadDataConfigPtrInput {
	return (*fhirdatastorePreloadDataConfigPtrType)(v)
}

func (*fhirdatastorePreloadDataConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastorePreloadDataConfig)(nil)).Elem()
}

func (i *fhirdatastorePreloadDataConfigPtrType) ToFHIRDatastorePreloadDataConfigPtrOutput() FHIRDatastorePreloadDataConfigPtrOutput {
	return i.ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(context.Background())
}

func (i *fhirdatastorePreloadDataConfigPtrType) ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FHIRDatastorePreloadDataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastorePreloadDataConfigPtrOutput)
}

// The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
type FHIRDatastorePreloadDataConfigOutput struct{ *pulumi.OutputState }

func (FHIRDatastorePreloadDataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastorePreloadDataConfig)(nil)).Elem()
}

func (o FHIRDatastorePreloadDataConfigOutput) ToFHIRDatastorePreloadDataConfigOutput() FHIRDatastorePreloadDataConfigOutput {
	return o
}

func (o FHIRDatastorePreloadDataConfigOutput) ToFHIRDatastorePreloadDataConfigOutputWithContext(ctx context.Context) FHIRDatastorePreloadDataConfigOutput {
	return o
}

func (o FHIRDatastorePreloadDataConfigOutput) ToFHIRDatastorePreloadDataConfigPtrOutput() FHIRDatastorePreloadDataConfigPtrOutput {
	return o.ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(context.Background())
}

func (o FHIRDatastorePreloadDataConfigOutput) ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FHIRDatastorePreloadDataConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FHIRDatastorePreloadDataConfig) *FHIRDatastorePreloadDataConfig {
		return &v
	}).(FHIRDatastorePreloadDataConfigPtrOutput)
}

// The type of preloaded data. Only Synthea preloaded data is supported.
func (o FHIRDatastorePreloadDataConfigOutput) PreloadDataType() FHIRDatastorePreloadDataConfigPreloadDataTypeOutput {
	return o.ApplyT(func(v FHIRDatastorePreloadDataConfig) FHIRDatastorePreloadDataConfigPreloadDataType {
		return v.PreloadDataType
	}).(FHIRDatastorePreloadDataConfigPreloadDataTypeOutput)
}

type FHIRDatastorePreloadDataConfigPtrOutput struct{ *pulumi.OutputState }

func (FHIRDatastorePreloadDataConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastorePreloadDataConfig)(nil)).Elem()
}

func (o FHIRDatastorePreloadDataConfigPtrOutput) ToFHIRDatastorePreloadDataConfigPtrOutput() FHIRDatastorePreloadDataConfigPtrOutput {
	return o
}

func (o FHIRDatastorePreloadDataConfigPtrOutput) ToFHIRDatastorePreloadDataConfigPtrOutputWithContext(ctx context.Context) FHIRDatastorePreloadDataConfigPtrOutput {
	return o
}

func (o FHIRDatastorePreloadDataConfigPtrOutput) Elem() FHIRDatastorePreloadDataConfigOutput {
	return o.ApplyT(func(v *FHIRDatastorePreloadDataConfig) FHIRDatastorePreloadDataConfig {
		if v != nil {
			return *v
		}
		var ret FHIRDatastorePreloadDataConfig
		return ret
	}).(FHIRDatastorePreloadDataConfigOutput)
}

// The type of preloaded data. Only Synthea preloaded data is supported.
func (o FHIRDatastorePreloadDataConfigPtrOutput) PreloadDataType() FHIRDatastorePreloadDataConfigPreloadDataTypePtrOutput {
	return o.ApplyT(func(v *FHIRDatastorePreloadDataConfig) *FHIRDatastorePreloadDataConfigPreloadDataType {
		if v == nil {
			return nil
		}
		return &v.PreloadDataType
	}).(FHIRDatastorePreloadDataConfigPreloadDataTypePtrOutput)
}

// The server-side encryption key configuration for a customer provided encryption key.
type FHIRDatastoreSseConfiguration struct {
	KmsEncryptionConfig FHIRDatastoreKmsEncryptionConfig `pulumi:"kmsEncryptionConfig"`
}

// FHIRDatastoreSseConfigurationInput is an input type that accepts FHIRDatastoreSseConfigurationArgs and FHIRDatastoreSseConfigurationOutput values.
// You can construct a concrete instance of `FHIRDatastoreSseConfigurationInput` via:
//
//          FHIRDatastoreSseConfigurationArgs{...}
type FHIRDatastoreSseConfigurationInput interface {
	pulumi.Input

	ToFHIRDatastoreSseConfigurationOutput() FHIRDatastoreSseConfigurationOutput
	ToFHIRDatastoreSseConfigurationOutputWithContext(context.Context) FHIRDatastoreSseConfigurationOutput
}

// The server-side encryption key configuration for a customer provided encryption key.
type FHIRDatastoreSseConfigurationArgs struct {
	KmsEncryptionConfig FHIRDatastoreKmsEncryptionConfigInput `pulumi:"kmsEncryptionConfig"`
}

func (FHIRDatastoreSseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreSseConfiguration)(nil)).Elem()
}

func (i FHIRDatastoreSseConfigurationArgs) ToFHIRDatastoreSseConfigurationOutput() FHIRDatastoreSseConfigurationOutput {
	return i.ToFHIRDatastoreSseConfigurationOutputWithContext(context.Background())
}

func (i FHIRDatastoreSseConfigurationArgs) ToFHIRDatastoreSseConfigurationOutputWithContext(ctx context.Context) FHIRDatastoreSseConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreSseConfigurationOutput)
}

func (i FHIRDatastoreSseConfigurationArgs) ToFHIRDatastoreSseConfigurationPtrOutput() FHIRDatastoreSseConfigurationPtrOutput {
	return i.ToFHIRDatastoreSseConfigurationPtrOutputWithContext(context.Background())
}

func (i FHIRDatastoreSseConfigurationArgs) ToFHIRDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FHIRDatastoreSseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreSseConfigurationOutput).ToFHIRDatastoreSseConfigurationPtrOutputWithContext(ctx)
}

// FHIRDatastoreSseConfigurationPtrInput is an input type that accepts FHIRDatastoreSseConfigurationArgs, FHIRDatastoreSseConfigurationPtr and FHIRDatastoreSseConfigurationPtrOutput values.
// You can construct a concrete instance of `FHIRDatastoreSseConfigurationPtrInput` via:
//
//          FHIRDatastoreSseConfigurationArgs{...}
//
//  or:
//
//          nil
type FHIRDatastoreSseConfigurationPtrInput interface {
	pulumi.Input

	ToFHIRDatastoreSseConfigurationPtrOutput() FHIRDatastoreSseConfigurationPtrOutput
	ToFHIRDatastoreSseConfigurationPtrOutputWithContext(context.Context) FHIRDatastoreSseConfigurationPtrOutput
}

type fhirdatastoreSseConfigurationPtrType FHIRDatastoreSseConfigurationArgs

func FHIRDatastoreSseConfigurationPtr(v *FHIRDatastoreSseConfigurationArgs) FHIRDatastoreSseConfigurationPtrInput {
	return (*fhirdatastoreSseConfigurationPtrType)(v)
}

func (*fhirdatastoreSseConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastoreSseConfiguration)(nil)).Elem()
}

func (i *fhirdatastoreSseConfigurationPtrType) ToFHIRDatastoreSseConfigurationPtrOutput() FHIRDatastoreSseConfigurationPtrOutput {
	return i.ToFHIRDatastoreSseConfigurationPtrOutputWithContext(context.Background())
}

func (i *fhirdatastoreSseConfigurationPtrType) ToFHIRDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FHIRDatastoreSseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreSseConfigurationPtrOutput)
}

// The server-side encryption key configuration for a customer provided encryption key.
type FHIRDatastoreSseConfigurationOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreSseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreSseConfiguration)(nil)).Elem()
}

func (o FHIRDatastoreSseConfigurationOutput) ToFHIRDatastoreSseConfigurationOutput() FHIRDatastoreSseConfigurationOutput {
	return o
}

func (o FHIRDatastoreSseConfigurationOutput) ToFHIRDatastoreSseConfigurationOutputWithContext(ctx context.Context) FHIRDatastoreSseConfigurationOutput {
	return o
}

func (o FHIRDatastoreSseConfigurationOutput) ToFHIRDatastoreSseConfigurationPtrOutput() FHIRDatastoreSseConfigurationPtrOutput {
	return o.ToFHIRDatastoreSseConfigurationPtrOutputWithContext(context.Background())
}

func (o FHIRDatastoreSseConfigurationOutput) ToFHIRDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FHIRDatastoreSseConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FHIRDatastoreSseConfiguration) *FHIRDatastoreSseConfiguration {
		return &v
	}).(FHIRDatastoreSseConfigurationPtrOutput)
}

func (o FHIRDatastoreSseConfigurationOutput) KmsEncryptionConfig() FHIRDatastoreKmsEncryptionConfigOutput {
	return o.ApplyT(func(v FHIRDatastoreSseConfiguration) FHIRDatastoreKmsEncryptionConfig { return v.KmsEncryptionConfig }).(FHIRDatastoreKmsEncryptionConfigOutput)
}

type FHIRDatastoreSseConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreSseConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FHIRDatastoreSseConfiguration)(nil)).Elem()
}

func (o FHIRDatastoreSseConfigurationPtrOutput) ToFHIRDatastoreSseConfigurationPtrOutput() FHIRDatastoreSseConfigurationPtrOutput {
	return o
}

func (o FHIRDatastoreSseConfigurationPtrOutput) ToFHIRDatastoreSseConfigurationPtrOutputWithContext(ctx context.Context) FHIRDatastoreSseConfigurationPtrOutput {
	return o
}

func (o FHIRDatastoreSseConfigurationPtrOutput) Elem() FHIRDatastoreSseConfigurationOutput {
	return o.ApplyT(func(v *FHIRDatastoreSseConfiguration) FHIRDatastoreSseConfiguration {
		if v != nil {
			return *v
		}
		var ret FHIRDatastoreSseConfiguration
		return ret
	}).(FHIRDatastoreSseConfigurationOutput)
}

func (o FHIRDatastoreSseConfigurationPtrOutput) KmsEncryptionConfig() FHIRDatastoreKmsEncryptionConfigPtrOutput {
	return o.ApplyT(func(v *FHIRDatastoreSseConfiguration) *FHIRDatastoreKmsEncryptionConfig {
		if v == nil {
			return nil
		}
		return &v.KmsEncryptionConfig
	}).(FHIRDatastoreKmsEncryptionConfigPtrOutput)
}

// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
type FHIRDatastoreTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

// FHIRDatastoreTagInput is an input type that accepts FHIRDatastoreTagArgs and FHIRDatastoreTagOutput values.
// You can construct a concrete instance of `FHIRDatastoreTagInput` via:
//
//          FHIRDatastoreTagArgs{...}
type FHIRDatastoreTagInput interface {
	pulumi.Input

	ToFHIRDatastoreTagOutput() FHIRDatastoreTagOutput
	ToFHIRDatastoreTagOutputWithContext(context.Context) FHIRDatastoreTagOutput
}

// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
type FHIRDatastoreTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FHIRDatastoreTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreTag)(nil)).Elem()
}

func (i FHIRDatastoreTagArgs) ToFHIRDatastoreTagOutput() FHIRDatastoreTagOutput {
	return i.ToFHIRDatastoreTagOutputWithContext(context.Background())
}

func (i FHIRDatastoreTagArgs) ToFHIRDatastoreTagOutputWithContext(ctx context.Context) FHIRDatastoreTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreTagOutput)
}

// FHIRDatastoreTagArrayInput is an input type that accepts FHIRDatastoreTagArray and FHIRDatastoreTagArrayOutput values.
// You can construct a concrete instance of `FHIRDatastoreTagArrayInput` via:
//
//          FHIRDatastoreTagArray{ FHIRDatastoreTagArgs{...} }
type FHIRDatastoreTagArrayInput interface {
	pulumi.Input

	ToFHIRDatastoreTagArrayOutput() FHIRDatastoreTagArrayOutput
	ToFHIRDatastoreTagArrayOutputWithContext(context.Context) FHIRDatastoreTagArrayOutput
}

type FHIRDatastoreTagArray []FHIRDatastoreTagInput

func (FHIRDatastoreTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FHIRDatastoreTag)(nil)).Elem()
}

func (i FHIRDatastoreTagArray) ToFHIRDatastoreTagArrayOutput() FHIRDatastoreTagArrayOutput {
	return i.ToFHIRDatastoreTagArrayOutputWithContext(context.Background())
}

func (i FHIRDatastoreTagArray) ToFHIRDatastoreTagArrayOutputWithContext(ctx context.Context) FHIRDatastoreTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FHIRDatastoreTagArrayOutput)
}

// A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
type FHIRDatastoreTagOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FHIRDatastoreTag)(nil)).Elem()
}

func (o FHIRDatastoreTagOutput) ToFHIRDatastoreTagOutput() FHIRDatastoreTagOutput {
	return o
}

func (o FHIRDatastoreTagOutput) ToFHIRDatastoreTagOutputWithContext(ctx context.Context) FHIRDatastoreTagOutput {
	return o
}

// The key of the tag.
func (o FHIRDatastoreTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FHIRDatastoreTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the tag.
func (o FHIRDatastoreTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FHIRDatastoreTag) string { return v.Value }).(pulumi.StringOutput)
}

type FHIRDatastoreTagArrayOutput struct{ *pulumi.OutputState }

func (FHIRDatastoreTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FHIRDatastoreTag)(nil)).Elem()
}

func (o FHIRDatastoreTagArrayOutput) ToFHIRDatastoreTagArrayOutput() FHIRDatastoreTagArrayOutput {
	return o
}

func (o FHIRDatastoreTagArrayOutput) ToFHIRDatastoreTagArrayOutputWithContext(ctx context.Context) FHIRDatastoreTagArrayOutput {
	return o
}

func (o FHIRDatastoreTagArrayOutput) Index(i pulumi.IntInput) FHIRDatastoreTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FHIRDatastoreTag {
		return vs[0].([]FHIRDatastoreTag)[vs[1].(int)]
	}).(FHIRDatastoreTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreCreatedAtInput)(nil)).Elem(), FHIRDatastoreCreatedAtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreCreatedAtPtrInput)(nil)).Elem(), FHIRDatastoreCreatedAtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreKmsEncryptionConfigInput)(nil)).Elem(), FHIRDatastoreKmsEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreKmsEncryptionConfigPtrInput)(nil)).Elem(), FHIRDatastoreKmsEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastorePreloadDataConfigInput)(nil)).Elem(), FHIRDatastorePreloadDataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastorePreloadDataConfigPtrInput)(nil)).Elem(), FHIRDatastorePreloadDataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreSseConfigurationInput)(nil)).Elem(), FHIRDatastoreSseConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreSseConfigurationPtrInput)(nil)).Elem(), FHIRDatastoreSseConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreTagInput)(nil)).Elem(), FHIRDatastoreTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FHIRDatastoreTagArrayInput)(nil)).Elem(), FHIRDatastoreTagArray{})
	pulumi.RegisterOutputType(FHIRDatastoreCreatedAtOutput{})
	pulumi.RegisterOutputType(FHIRDatastoreCreatedAtPtrOutput{})
	pulumi.RegisterOutputType(FHIRDatastoreKmsEncryptionConfigOutput{})
	pulumi.RegisterOutputType(FHIRDatastoreKmsEncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(FHIRDatastorePreloadDataConfigOutput{})
	pulumi.RegisterOutputType(FHIRDatastorePreloadDataConfigPtrOutput{})
	pulumi.RegisterOutputType(FHIRDatastoreSseConfigurationOutput{})
	pulumi.RegisterOutputType(FHIRDatastoreSseConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FHIRDatastoreTagOutput{})
	pulumi.RegisterOutputType(FHIRDatastoreTagArrayOutput{})
}
