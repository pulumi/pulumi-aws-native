// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::RedshiftServerless::Workgroup Resource Type
func LookupWorkgroup(ctx *pulumi.Context, args *LookupWorkgroupArgs, opts ...pulumi.InvokeOption) (*LookupWorkgroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkgroupResult
	err := ctx.Invoke("aws-native:redshiftserverless:getWorkgroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkgroupArgs struct {
	WorkgroupName string `pulumi:"workgroupName"`
}

type LookupWorkgroupResult struct {
	EnhancedVpcRouting *bool          `pulumi:"enhancedVpcRouting"`
	Port               *int           `pulumi:"port"`
	PubliclyAccessible *bool          `pulumi:"publiclyAccessible"`
	Workgroup          *WorkgroupType `pulumi:"workgroup"`
}

func LookupWorkgroupOutput(ctx *pulumi.Context, args LookupWorkgroupOutputArgs, opts ...pulumi.InvokeOption) LookupWorkgroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkgroupResult, error) {
			args := v.(LookupWorkgroupArgs)
			r, err := LookupWorkgroup(ctx, &args, opts...)
			var s LookupWorkgroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkgroupResultOutput)
}

type LookupWorkgroupOutputArgs struct {
	WorkgroupName pulumi.StringInput `pulumi:"workgroupName"`
}

func (LookupWorkgroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkgroupArgs)(nil)).Elem()
}

type LookupWorkgroupResultOutput struct{ *pulumi.OutputState }

func (LookupWorkgroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkgroupResult)(nil)).Elem()
}

func (o LookupWorkgroupResultOutput) ToLookupWorkgroupResultOutput() LookupWorkgroupResultOutput {
	return o
}

func (o LookupWorkgroupResultOutput) ToLookupWorkgroupResultOutputWithContext(ctx context.Context) LookupWorkgroupResultOutput {
	return o
}

func (o LookupWorkgroupResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupWorkgroupResult] {
	return pulumix.Output[LookupWorkgroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupWorkgroupResultOutput) EnhancedVpcRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWorkgroupResult) *bool { return v.EnhancedVpcRouting }).(pulumi.BoolPtrOutput)
}

func (o LookupWorkgroupResultOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupWorkgroupResult) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o LookupWorkgroupResultOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWorkgroupResult) *bool { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

func (o LookupWorkgroupResultOutput) Workgroup() WorkgroupTypePtrOutput {
	return o.ApplyT(func(v LookupWorkgroupResult) *WorkgroupType { return v.Workgroup }).(WorkgroupTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkgroupResultOutput{})
}
