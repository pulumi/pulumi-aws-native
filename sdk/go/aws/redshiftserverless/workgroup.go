// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RedshiftServerless::Workgroup Resource Type
type Workgroup struct {
	pulumi.CustomResourceState

	BaseCapacity       pulumi.IntPtrOutput                 `pulumi:"baseCapacity"`
	ConfigParameters   WorkgroupConfigParameterArrayOutput `pulumi:"configParameters"`
	EnhancedVpcRouting pulumi.BoolPtrOutput                `pulumi:"enhancedVpcRouting"`
	NamespaceName      pulumi.StringPtrOutput              `pulumi:"namespaceName"`
	Port               pulumi.IntPtrOutput                 `pulumi:"port"`
	PubliclyAccessible pulumi.BoolPtrOutput                `pulumi:"publiclyAccessible"`
	SecurityGroupIds   pulumi.StringArrayOutput            `pulumi:"securityGroupIds"`
	SubnetIds          pulumi.StringArrayOutput            `pulumi:"subnetIds"`
	Tags               WorkgroupTagArrayOutput             `pulumi:"tags"`
	Workgroup          WorkgroupTypeOutput                 `pulumi:"workgroup"`
	WorkgroupName      pulumi.StringOutput                 `pulumi:"workgroupName"`
}

// NewWorkgroup registers a new resource with the given unique name, arguments, and options.
func NewWorkgroup(ctx *pulumi.Context,
	name string, args *WorkgroupArgs, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	if args == nil {
		args = &WorkgroupArgs{}
	}

	var resource Workgroup
	err := ctx.RegisterResource("aws-native:redshiftserverless:Workgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkgroup gets an existing Workgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkgroupState, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	var resource Workgroup
	err := ctx.ReadResource("aws-native:redshiftserverless:Workgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workgroup resources.
type workgroupState struct {
}

type WorkgroupState struct {
}

func (WorkgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupState)(nil)).Elem()
}

type workgroupArgs struct {
	BaseCapacity       *int                       `pulumi:"baseCapacity"`
	ConfigParameters   []WorkgroupConfigParameter `pulumi:"configParameters"`
	EnhancedVpcRouting *bool                      `pulumi:"enhancedVpcRouting"`
	NamespaceName      *string                    `pulumi:"namespaceName"`
	Port               *int                       `pulumi:"port"`
	PubliclyAccessible *bool                      `pulumi:"publiclyAccessible"`
	SecurityGroupIds   []string                   `pulumi:"securityGroupIds"`
	SubnetIds          []string                   `pulumi:"subnetIds"`
	Tags               []WorkgroupTag             `pulumi:"tags"`
	WorkgroupName      *string                    `pulumi:"workgroupName"`
}

// The set of arguments for constructing a Workgroup resource.
type WorkgroupArgs struct {
	BaseCapacity       pulumi.IntPtrInput
	ConfigParameters   WorkgroupConfigParameterArrayInput
	EnhancedVpcRouting pulumi.BoolPtrInput
	NamespaceName      pulumi.StringPtrInput
	Port               pulumi.IntPtrInput
	PubliclyAccessible pulumi.BoolPtrInput
	SecurityGroupIds   pulumi.StringArrayInput
	SubnetIds          pulumi.StringArrayInput
	Tags               WorkgroupTagArrayInput
	WorkgroupName      pulumi.StringPtrInput
}

func (WorkgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupArgs)(nil)).Elem()
}

type WorkgroupInput interface {
	pulumi.Input

	ToWorkgroupOutput() WorkgroupOutput
	ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput
}

func (*Workgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Workgroup)(nil)).Elem()
}

func (i *Workgroup) ToWorkgroupOutput() WorkgroupOutput {
	return i.ToWorkgroupOutputWithContext(context.Background())
}

func (i *Workgroup) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupOutput)
}

type WorkgroupOutput struct{ *pulumi.OutputState }

func (WorkgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workgroup)(nil)).Elem()
}

func (o WorkgroupOutput) ToWorkgroupOutput() WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) BaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.IntPtrOutput { return v.BaseCapacity }).(pulumi.IntPtrOutput)
}

func (o WorkgroupOutput) ConfigParameters() WorkgroupConfigParameterArrayOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupConfigParameterArrayOutput { return v.ConfigParameters }).(WorkgroupConfigParameterArrayOutput)
}

func (o WorkgroupOutput) EnhancedVpcRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.BoolPtrOutput { return v.EnhancedVpcRouting }).(pulumi.BoolPtrOutput)
}

func (o WorkgroupOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringPtrOutput { return v.NamespaceName }).(pulumi.StringPtrOutput)
}

func (o WorkgroupOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

func (o WorkgroupOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.BoolPtrOutput { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

func (o WorkgroupOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o WorkgroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o WorkgroupOutput) Tags() WorkgroupTagArrayOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupTagArrayOutput { return v.Tags }).(WorkgroupTagArrayOutput)
}

func (o WorkgroupOutput) Workgroup() WorkgroupTypeOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupTypeOutput { return v.Workgroup }).(WorkgroupTypeOutput)
}

func (o WorkgroupOutput) WorkgroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringOutput { return v.WorkgroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupInput)(nil)).Elem(), &Workgroup{})
	pulumi.RegisterOutputType(WorkgroupOutput{})
}
