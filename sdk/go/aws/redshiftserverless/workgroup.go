// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RedshiftServerless::Workgroup Resource Type
type Workgroup struct {
	pulumi.CustomResourceState

	// The base compute capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity pulumi.IntPtrOutput `pulumi:"baseCapacity"`
	// A list of parameters to set for finer control over a database. Available options are datestyle, enable_user_activity_logging, query_group, search_path, max_query_execution_time, and require_ssl.
	ConfigParameters WorkgroupConfigParameterArrayOutput `pulumi:"configParameters"`
	// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
	EnhancedVpcRouting pulumi.BoolPtrOutput `pulumi:"enhancedVpcRouting"`
	// The max compute capacity of the workgroup in Redshift Processing Units (RPUs).
	MaxCapacity pulumi.IntPtrOutput `pulumi:"maxCapacity"`
	// The namespace the workgroup is associated with.
	NamespaceName pulumi.StringPtrOutput `pulumi:"namespaceName"`
	// The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// A property that represents the price performance target settings for the workgroup.
	PricePerformanceTarget WorkgroupPerformanceTargetPtrOutput `pulumi:"pricePerformanceTarget"`
	// A value that specifies whether the workgroup can be accessible from a public network.
	PubliclyAccessible pulumi.BoolPtrOutput `pulumi:"publiclyAccessible"`
	// A list of security group IDs to associate with the workgroup.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// A list of subnet IDs the workgroup is associated with.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// The map of the key-value pairs used to tag the workgroup.
	Tags      aws.TagArrayOutput     `pulumi:"tags"`
	TrackName pulumi.StringPtrOutput `pulumi:"trackName"`
	// Definition for workgroup resource
	Workgroup WorkgroupTypePtrOutput `pulumi:"workgroup"`
	// The name of the workgroup.
	WorkgroupName pulumi.StringOutput `pulumi:"workgroupName"`
}

// NewWorkgroup registers a new resource with the given unique name, arguments, and options.
func NewWorkgroup(ctx *pulumi.Context,
	name string, args *WorkgroupArgs, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	if args == nil {
		args = &WorkgroupArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"namespaceName",
		"workgroupName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workgroup
	err := ctx.RegisterResource("aws-native:redshiftserverless:Workgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkgroup gets an existing Workgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkgroupState, opts ...pulumi.ResourceOption) (*Workgroup, error) {
	var resource Workgroup
	err := ctx.ReadResource("aws-native:redshiftserverless:Workgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workgroup resources.
type workgroupState struct {
}

type WorkgroupState struct {
}

func (WorkgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupState)(nil)).Elem()
}

type workgroupArgs struct {
	// The base compute capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity *int `pulumi:"baseCapacity"`
	// A list of parameters to set for finer control over a database. Available options are datestyle, enable_user_activity_logging, query_group, search_path, max_query_execution_time, and require_ssl.
	ConfigParameters []WorkgroupConfigParameter `pulumi:"configParameters"`
	// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
	EnhancedVpcRouting *bool `pulumi:"enhancedVpcRouting"`
	// The max compute capacity of the workgroup in Redshift Processing Units (RPUs).
	MaxCapacity *int `pulumi:"maxCapacity"`
	// The namespace the workgroup is associated with.
	NamespaceName *string `pulumi:"namespaceName"`
	// The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
	Port *int `pulumi:"port"`
	// A property that represents the price performance target settings for the workgroup.
	PricePerformanceTarget *WorkgroupPerformanceTarget `pulumi:"pricePerformanceTarget"`
	// A value that specifies whether the workgroup can be accessible from a public network.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// A list of security group IDs to associate with the workgroup.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs the workgroup is associated with.
	SubnetIds []string `pulumi:"subnetIds"`
	// The map of the key-value pairs used to tag the workgroup.
	Tags      []aws.Tag `pulumi:"tags"`
	TrackName *string   `pulumi:"trackName"`
	// Definition for workgroup resource
	Workgroup *WorkgroupType `pulumi:"workgroup"`
	// The name of the workgroup.
	WorkgroupName *string `pulumi:"workgroupName"`
}

// The set of arguments for constructing a Workgroup resource.
type WorkgroupArgs struct {
	// The base compute capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity pulumi.IntPtrInput
	// A list of parameters to set for finer control over a database. Available options are datestyle, enable_user_activity_logging, query_group, search_path, max_query_execution_time, and require_ssl.
	ConfigParameters WorkgroupConfigParameterArrayInput
	// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
	EnhancedVpcRouting pulumi.BoolPtrInput
	// The max compute capacity of the workgroup in Redshift Processing Units (RPUs).
	MaxCapacity pulumi.IntPtrInput
	// The namespace the workgroup is associated with.
	NamespaceName pulumi.StringPtrInput
	// The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
	Port pulumi.IntPtrInput
	// A property that represents the price performance target settings for the workgroup.
	PricePerformanceTarget WorkgroupPerformanceTargetPtrInput
	// A value that specifies whether the workgroup can be accessible from a public network.
	PubliclyAccessible pulumi.BoolPtrInput
	// A list of security group IDs to associate with the workgroup.
	SecurityGroupIds pulumi.StringArrayInput
	// A list of subnet IDs the workgroup is associated with.
	SubnetIds pulumi.StringArrayInput
	// The map of the key-value pairs used to tag the workgroup.
	Tags      aws.TagArrayInput
	TrackName pulumi.StringPtrInput
	// Definition for workgroup resource
	Workgroup WorkgroupTypePtrInput
	// The name of the workgroup.
	WorkgroupName pulumi.StringPtrInput
}

func (WorkgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workgroupArgs)(nil)).Elem()
}

type WorkgroupInput interface {
	pulumi.Input

	ToWorkgroupOutput() WorkgroupOutput
	ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput
}

func (*Workgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Workgroup)(nil)).Elem()
}

func (i *Workgroup) ToWorkgroupOutput() WorkgroupOutput {
	return i.ToWorkgroupOutputWithContext(context.Background())
}

func (i *Workgroup) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupOutput)
}

type WorkgroupOutput struct{ *pulumi.OutputState }

func (WorkgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workgroup)(nil)).Elem()
}

func (o WorkgroupOutput) ToWorkgroupOutput() WorkgroupOutput {
	return o
}

func (o WorkgroupOutput) ToWorkgroupOutputWithContext(ctx context.Context) WorkgroupOutput {
	return o
}

// The base compute capacity of the workgroup in Redshift Processing Units (RPUs).
func (o WorkgroupOutput) BaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.IntPtrOutput { return v.BaseCapacity }).(pulumi.IntPtrOutput)
}

// A list of parameters to set for finer control over a database. Available options are datestyle, enable_user_activity_logging, query_group, search_path, max_query_execution_time, and require_ssl.
func (o WorkgroupOutput) ConfigParameters() WorkgroupConfigParameterArrayOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupConfigParameterArrayOutput { return v.ConfigParameters }).(WorkgroupConfigParameterArrayOutput)
}

// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
func (o WorkgroupOutput) EnhancedVpcRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.BoolPtrOutput { return v.EnhancedVpcRouting }).(pulumi.BoolPtrOutput)
}

// The max compute capacity of the workgroup in Redshift Processing Units (RPUs).
func (o WorkgroupOutput) MaxCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.IntPtrOutput { return v.MaxCapacity }).(pulumi.IntPtrOutput)
}

// The namespace the workgroup is associated with.
func (o WorkgroupOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringPtrOutput { return v.NamespaceName }).(pulumi.StringPtrOutput)
}

// The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
func (o WorkgroupOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// A property that represents the price performance target settings for the workgroup.
func (o WorkgroupOutput) PricePerformanceTarget() WorkgroupPerformanceTargetPtrOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupPerformanceTargetPtrOutput { return v.PricePerformanceTarget }).(WorkgroupPerformanceTargetPtrOutput)
}

// A value that specifies whether the workgroup can be accessible from a public network.
func (o WorkgroupOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.BoolPtrOutput { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

// A list of security group IDs to associate with the workgroup.
func (o WorkgroupOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of subnet IDs the workgroup is associated with.
func (o WorkgroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The map of the key-value pairs used to tag the workgroup.
func (o WorkgroupOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Workgroup) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o WorkgroupOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringPtrOutput { return v.TrackName }).(pulumi.StringPtrOutput)
}

// Definition for workgroup resource
func (o WorkgroupOutput) Workgroup() WorkgroupTypePtrOutput {
	return o.ApplyT(func(v *Workgroup) WorkgroupTypePtrOutput { return v.Workgroup }).(WorkgroupTypePtrOutput)
}

// The name of the workgroup.
func (o WorkgroupOutput) WorkgroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workgroup) pulumi.StringOutput { return v.WorkgroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupInput)(nil)).Elem(), &Workgroup{})
	pulumi.RegisterOutputType(WorkgroupOutput{})
}
