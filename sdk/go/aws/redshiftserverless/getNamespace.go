// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RedshiftServerless::Namespace Resource Type
func LookupNamespace(ctx *pulumi.Context, args *LookupNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupNamespaceResult, error) {
	var rv LookupNamespaceResult
	err := ctx.Invoke("aws-native:redshiftserverless:getNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNamespaceArgs struct {
	// A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
	NamespaceName string `pulumi:"namespaceName"`
}

type LookupNamespaceResult struct {
	// The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
	AdminUsername *string `pulumi:"adminUsername"`
	// The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
	DbName *string `pulumi:"dbName"`
	// The default IAM role ARN for the namespace that is being created.
	DefaultIamRoleArn *string `pulumi:"defaultIamRoleArn"`
	// A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
	IamRoles []string `pulumi:"iamRoles"`
	// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
	LogExports []NamespaceLogExport `pulumi:"logExports"`
	Namespace  *NamespaceType       `pulumi:"namespace"`
}

func LookupNamespaceOutput(ctx *pulumi.Context, args LookupNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupNamespaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNamespaceResult, error) {
			args := v.(LookupNamespaceArgs)
			r, err := LookupNamespace(ctx, &args, opts...)
			var s LookupNamespaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNamespaceResultOutput)
}

type LookupNamespaceOutputArgs struct {
	// A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
}

func (LookupNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceArgs)(nil)).Elem()
}

type LookupNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceResult)(nil)).Elem()
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutput() LookupNamespaceResultOutput {
	return o
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutputWithContext(ctx context.Context) LookupNamespaceResultOutput {
	return o
}

// The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
func (o LookupNamespaceResultOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceResult) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
func (o LookupNamespaceResultOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceResult) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// The default IAM role ARN for the namespace that is being created.
func (o LookupNamespaceResultOutput) DefaultIamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceResult) *string { return v.DefaultIamRoleArn }).(pulumi.StringPtrOutput)
}

// A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
func (o LookupNamespaceResultOutput) IamRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNamespaceResult) []string { return v.IamRoles }).(pulumi.StringArrayOutput)
}

// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
func (o LookupNamespaceResultOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNamespaceResult) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
func (o LookupNamespaceResultOutput) LogExports() NamespaceLogExportArrayOutput {
	return o.ApplyT(func(v LookupNamespaceResult) []NamespaceLogExport { return v.LogExports }).(NamespaceLogExportArrayOutput)
}

func (o LookupNamespaceResultOutput) Namespace() NamespaceTypePtrOutput {
	return o.ApplyT(func(v LookupNamespaceResult) *NamespaceType { return v.Namespace }).(NamespaceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNamespaceResultOutput{})
}
