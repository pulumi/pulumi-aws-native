// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshiftserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type NamespaceType struct {
	// The Amazon Resource Name (ARN) for the namespace's admin user credentials secret.
	AdminPasswordSecretArn *string `pulumi:"adminPasswordSecretArn"`
	// The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret.
	AdminPasswordSecretKmsKeyId *string `pulumi:"adminPasswordSecretKmsKeyId"`
	// The username of the administrator for the first database created in the namespace.
	AdminUsername *string `pulumi:"adminUsername"`
	// The date of when the namespace was created.
	CreationDate *string `pulumi:"creationDate"`
	// The name of the first database created in the namespace.
	DbName *string `pulumi:"dbName"`
	// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.
	DefaultIamRoleArn *string `pulumi:"defaultIamRoleArn"`
	// A list of IAM roles to associate with the namespace.
	IamRoles []string `pulumi:"iamRoles"`
	// The ID of the AWS Key Management Service key used to encrypt your data.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The types of logs the namespace can export. Available export types are User log, Connection log, and User activity log.
	LogExports []NamespaceLogExport `pulumi:"logExports"`
	// The Amazon Resource Name (ARN) associated with a namespace.
	NamespaceArn *string `pulumi:"namespaceArn"`
	// The unique identifier of a namespace.
	NamespaceId *string `pulumi:"namespaceId"`
	// The name of the namespace. Must be between 3-64 alphanumeric characters in lowercase, and it cannot be a reserved word. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com//redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
	NamespaceName *string `pulumi:"namespaceName"`
	// The status of the namespace.
	Status *NamespaceStatus `pulumi:"status"`
}

type NamespaceTypeOutput struct{ *pulumi.OutputState }

func (NamespaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return o
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return o
}

// The Amazon Resource Name (ARN) for the namespace's admin user credentials secret.
func (o NamespaceTypeOutput) AdminPasswordSecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.AdminPasswordSecretArn }).(pulumi.StringPtrOutput)
}

// The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret.
func (o NamespaceTypeOutput) AdminPasswordSecretKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.AdminPasswordSecretKmsKeyId }).(pulumi.StringPtrOutput)
}

// The username of the administrator for the first database created in the namespace.
func (o NamespaceTypeOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The date of when the namespace was created.
func (o NamespaceTypeOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.CreationDate }).(pulumi.StringPtrOutput)
}

// The name of the first database created in the namespace.
func (o NamespaceTypeOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.
func (o NamespaceTypeOutput) DefaultIamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.DefaultIamRoleArn }).(pulumi.StringPtrOutput)
}

// A list of IAM roles to associate with the namespace.
func (o NamespaceTypeOutput) IamRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceType) []string { return v.IamRoles }).(pulumi.StringArrayOutput)
}

// The ID of the AWS Key Management Service key used to encrypt your data.
func (o NamespaceTypeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The types of logs the namespace can export. Available export types are User log, Connection log, and User activity log.
func (o NamespaceTypeOutput) LogExports() NamespaceLogExportArrayOutput {
	return o.ApplyT(func(v NamespaceType) []NamespaceLogExport { return v.LogExports }).(NamespaceLogExportArrayOutput)
}

// The Amazon Resource Name (ARN) associated with a namespace.
func (o NamespaceTypeOutput) NamespaceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.NamespaceArn }).(pulumi.StringPtrOutput)
}

// The unique identifier of a namespace.
func (o NamespaceTypeOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// The name of the namespace. Must be between 3-64 alphanumeric characters in lowercase, and it cannot be a reserved word. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com//redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
func (o NamespaceTypeOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceType) *string { return v.NamespaceName }).(pulumi.StringPtrOutput)
}

// The status of the namespace.
func (o NamespaceTypeOutput) Status() NamespaceStatusPtrOutput {
	return o.ApplyT(func(v NamespaceType) *NamespaceStatus { return v.Status }).(NamespaceStatusPtrOutput)
}

type NamespaceTypePtrOutput struct{ *pulumi.OutputState }

func (NamespaceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceType)(nil)).Elem()
}

func (o NamespaceTypePtrOutput) ToNamespaceTypePtrOutput() NamespaceTypePtrOutput {
	return o
}

func (o NamespaceTypePtrOutput) ToNamespaceTypePtrOutputWithContext(ctx context.Context) NamespaceTypePtrOutput {
	return o
}

func (o NamespaceTypePtrOutput) Elem() NamespaceTypeOutput {
	return o.ApplyT(func(v *NamespaceType) NamespaceType {
		if v != nil {
			return *v
		}
		var ret NamespaceType
		return ret
	}).(NamespaceTypeOutput)
}

// The Amazon Resource Name (ARN) for the namespace's admin user credentials secret.
func (o NamespaceTypePtrOutput) AdminPasswordSecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.AdminPasswordSecretArn
	}).(pulumi.StringPtrOutput)
}

// The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret.
func (o NamespaceTypePtrOutput) AdminPasswordSecretKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.AdminPasswordSecretKmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The username of the administrator for the first database created in the namespace.
func (o NamespaceTypePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The date of when the namespace was created.
func (o NamespaceTypePtrOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.CreationDate
	}).(pulumi.StringPtrOutput)
}

// The name of the first database created in the namespace.
func (o NamespaceTypePtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.
func (o NamespaceTypePtrOutput) DefaultIamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.DefaultIamRoleArn
	}).(pulumi.StringPtrOutput)
}

// A list of IAM roles to associate with the namespace.
func (o NamespaceTypePtrOutput) IamRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceType) []string {
		if v == nil {
			return nil
		}
		return v.IamRoles
	}).(pulumi.StringArrayOutput)
}

// The ID of the AWS Key Management Service key used to encrypt your data.
func (o NamespaceTypePtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The types of logs the namespace can export. Available export types are User log, Connection log, and User activity log.
func (o NamespaceTypePtrOutput) LogExports() NamespaceLogExportArrayOutput {
	return o.ApplyT(func(v *NamespaceType) []NamespaceLogExport {
		if v == nil {
			return nil
		}
		return v.LogExports
	}).(NamespaceLogExportArrayOutput)
}

// The Amazon Resource Name (ARN) associated with a namespace.
func (o NamespaceTypePtrOutput) NamespaceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceArn
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a namespace.
func (o NamespaceTypePtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// The name of the namespace. Must be between 3-64 alphanumeric characters in lowercase, and it cannot be a reserved word. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com//redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
func (o NamespaceTypePtrOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceName
	}).(pulumi.StringPtrOutput)
}

// The status of the namespace.
func (o NamespaceTypePtrOutput) Status() NamespaceStatusPtrOutput {
	return o.ApplyT(func(v *NamespaceType) *NamespaceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(NamespaceStatusPtrOutput)
}

type NamespaceSnapshotCopyConfiguration struct {
	// The ID of the KMS key to use to encrypt your snapshots in the destination AWS Region .
	DestinationKmsKeyId *string `pulumi:"destinationKmsKeyId"`
	// The destination AWS Region to copy snapshots to.
	DestinationRegion string `pulumi:"destinationRegion"`
	// The retention period of snapshots that are copied to the destination AWS Region .
	SnapshotRetentionPeriod *int `pulumi:"snapshotRetentionPeriod"`
}

// NamespaceSnapshotCopyConfigurationInput is an input type that accepts NamespaceSnapshotCopyConfigurationArgs and NamespaceSnapshotCopyConfigurationOutput values.
// You can construct a concrete instance of `NamespaceSnapshotCopyConfigurationInput` via:
//
//	NamespaceSnapshotCopyConfigurationArgs{...}
type NamespaceSnapshotCopyConfigurationInput interface {
	pulumi.Input

	ToNamespaceSnapshotCopyConfigurationOutput() NamespaceSnapshotCopyConfigurationOutput
	ToNamespaceSnapshotCopyConfigurationOutputWithContext(context.Context) NamespaceSnapshotCopyConfigurationOutput
}

type NamespaceSnapshotCopyConfigurationArgs struct {
	// The ID of the KMS key to use to encrypt your snapshots in the destination AWS Region .
	DestinationKmsKeyId pulumi.StringPtrInput `pulumi:"destinationKmsKeyId"`
	// The destination AWS Region to copy snapshots to.
	DestinationRegion pulumi.StringInput `pulumi:"destinationRegion"`
	// The retention period of snapshots that are copied to the destination AWS Region .
	SnapshotRetentionPeriod pulumi.IntPtrInput `pulumi:"snapshotRetentionPeriod"`
}

func (NamespaceSnapshotCopyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSnapshotCopyConfiguration)(nil)).Elem()
}

func (i NamespaceSnapshotCopyConfigurationArgs) ToNamespaceSnapshotCopyConfigurationOutput() NamespaceSnapshotCopyConfigurationOutput {
	return i.ToNamespaceSnapshotCopyConfigurationOutputWithContext(context.Background())
}

func (i NamespaceSnapshotCopyConfigurationArgs) ToNamespaceSnapshotCopyConfigurationOutputWithContext(ctx context.Context) NamespaceSnapshotCopyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSnapshotCopyConfigurationOutput)
}

// NamespaceSnapshotCopyConfigurationArrayInput is an input type that accepts NamespaceSnapshotCopyConfigurationArray and NamespaceSnapshotCopyConfigurationArrayOutput values.
// You can construct a concrete instance of `NamespaceSnapshotCopyConfigurationArrayInput` via:
//
//	NamespaceSnapshotCopyConfigurationArray{ NamespaceSnapshotCopyConfigurationArgs{...} }
type NamespaceSnapshotCopyConfigurationArrayInput interface {
	pulumi.Input

	ToNamespaceSnapshotCopyConfigurationArrayOutput() NamespaceSnapshotCopyConfigurationArrayOutput
	ToNamespaceSnapshotCopyConfigurationArrayOutputWithContext(context.Context) NamespaceSnapshotCopyConfigurationArrayOutput
}

type NamespaceSnapshotCopyConfigurationArray []NamespaceSnapshotCopyConfigurationInput

func (NamespaceSnapshotCopyConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceSnapshotCopyConfiguration)(nil)).Elem()
}

func (i NamespaceSnapshotCopyConfigurationArray) ToNamespaceSnapshotCopyConfigurationArrayOutput() NamespaceSnapshotCopyConfigurationArrayOutput {
	return i.ToNamespaceSnapshotCopyConfigurationArrayOutputWithContext(context.Background())
}

func (i NamespaceSnapshotCopyConfigurationArray) ToNamespaceSnapshotCopyConfigurationArrayOutputWithContext(ctx context.Context) NamespaceSnapshotCopyConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceSnapshotCopyConfigurationArrayOutput)
}

type NamespaceSnapshotCopyConfigurationOutput struct{ *pulumi.OutputState }

func (NamespaceSnapshotCopyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceSnapshotCopyConfiguration)(nil)).Elem()
}

func (o NamespaceSnapshotCopyConfigurationOutput) ToNamespaceSnapshotCopyConfigurationOutput() NamespaceSnapshotCopyConfigurationOutput {
	return o
}

func (o NamespaceSnapshotCopyConfigurationOutput) ToNamespaceSnapshotCopyConfigurationOutputWithContext(ctx context.Context) NamespaceSnapshotCopyConfigurationOutput {
	return o
}

// The ID of the KMS key to use to encrypt your snapshots in the destination AWS Region .
func (o NamespaceSnapshotCopyConfigurationOutput) DestinationKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceSnapshotCopyConfiguration) *string { return v.DestinationKmsKeyId }).(pulumi.StringPtrOutput)
}

// The destination AWS Region to copy snapshots to.
func (o NamespaceSnapshotCopyConfigurationOutput) DestinationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceSnapshotCopyConfiguration) string { return v.DestinationRegion }).(pulumi.StringOutput)
}

// The retention period of snapshots that are copied to the destination AWS Region .
func (o NamespaceSnapshotCopyConfigurationOutput) SnapshotRetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamespaceSnapshotCopyConfiguration) *int { return v.SnapshotRetentionPeriod }).(pulumi.IntPtrOutput)
}

type NamespaceSnapshotCopyConfigurationArrayOutput struct{ *pulumi.OutputState }

func (NamespaceSnapshotCopyConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceSnapshotCopyConfiguration)(nil)).Elem()
}

func (o NamespaceSnapshotCopyConfigurationArrayOutput) ToNamespaceSnapshotCopyConfigurationArrayOutput() NamespaceSnapshotCopyConfigurationArrayOutput {
	return o
}

func (o NamespaceSnapshotCopyConfigurationArrayOutput) ToNamespaceSnapshotCopyConfigurationArrayOutputWithContext(ctx context.Context) NamespaceSnapshotCopyConfigurationArrayOutput {
	return o
}

func (o NamespaceSnapshotCopyConfigurationArrayOutput) Index(i pulumi.IntInput) NamespaceSnapshotCopyConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceSnapshotCopyConfiguration {
		return vs[0].([]NamespaceSnapshotCopyConfiguration)[vs[1].(int)]
	}).(NamespaceSnapshotCopyConfigurationOutput)
}

type NamespaceTag struct {
	// The key to use in the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

type SnapshotType struct {
	// The username of the database within a snapshot.
	AdminUsername *string `pulumi:"adminUsername"`
	// The unique identifier of the KMS key used to encrypt the snapshot.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
	NamespaceArn *string `pulumi:"namespaceArn"`
	// The name of the namepsace.
	NamespaceName *string `pulumi:"namespaceName"`
	// The owner AWS ; account of the snapshot.
	OwnerAccount    *string `pulumi:"ownerAccount"`
	RetentionPeriod *int    `pulumi:"retentionPeriod"`
	// The Amazon Resource Name (ARN) of the snapshot.
	SnapshotArn *string `pulumi:"snapshotArn"`
	// The timestamp of when the snapshot was created.
	SnapshotCreateTime *string `pulumi:"snapshotCreateTime"`
	// The name of the snapshot.
	SnapshotName *string `pulumi:"snapshotName"`
	// The status of the snapshot.
	Status *SnapshotStatus `pulumi:"status"`
}

type SnapshotTypeOutput struct{ *pulumi.OutputState }

func (SnapshotTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotType)(nil)).Elem()
}

func (o SnapshotTypeOutput) ToSnapshotTypeOutput() SnapshotTypeOutput {
	return o
}

func (o SnapshotTypeOutput) ToSnapshotTypeOutputWithContext(ctx context.Context) SnapshotTypeOutput {
	return o
}

// The username of the database within a snapshot.
func (o SnapshotTypeOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The unique identifier of the KMS key used to encrypt the snapshot.
func (o SnapshotTypeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
func (o SnapshotTypeOutput) NamespaceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.NamespaceArn }).(pulumi.StringPtrOutput)
}

// The name of the namepsace.
func (o SnapshotTypeOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.NamespaceName }).(pulumi.StringPtrOutput)
}

// The owner AWS ; account of the snapshot.
func (o SnapshotTypeOutput) OwnerAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.OwnerAccount }).(pulumi.StringPtrOutput)
}

func (o SnapshotTypeOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnapshotType) *int { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) of the snapshot.
func (o SnapshotTypeOutput) SnapshotArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.SnapshotArn }).(pulumi.StringPtrOutput)
}

// The timestamp of when the snapshot was created.
func (o SnapshotTypeOutput) SnapshotCreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.SnapshotCreateTime }).(pulumi.StringPtrOutput)
}

// The name of the snapshot.
func (o SnapshotTypeOutput) SnapshotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotType) *string { return v.SnapshotName }).(pulumi.StringPtrOutput)
}

// The status of the snapshot.
func (o SnapshotTypeOutput) Status() SnapshotStatusPtrOutput {
	return o.ApplyT(func(v SnapshotType) *SnapshotStatus { return v.Status }).(SnapshotStatusPtrOutput)
}

type SnapshotTypePtrOutput struct{ *pulumi.OutputState }

func (SnapshotTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotType)(nil)).Elem()
}

func (o SnapshotTypePtrOutput) ToSnapshotTypePtrOutput() SnapshotTypePtrOutput {
	return o
}

func (o SnapshotTypePtrOutput) ToSnapshotTypePtrOutputWithContext(ctx context.Context) SnapshotTypePtrOutput {
	return o
}

func (o SnapshotTypePtrOutput) Elem() SnapshotTypeOutput {
	return o.ApplyT(func(v *SnapshotType) SnapshotType {
		if v != nil {
			return *v
		}
		var ret SnapshotType
		return ret
	}).(SnapshotTypeOutput)
}

// The username of the database within a snapshot.
func (o SnapshotTypePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the KMS key used to encrypt the snapshot.
func (o SnapshotTypePtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
func (o SnapshotTypePtrOutput) NamespaceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceArn
	}).(pulumi.StringPtrOutput)
}

// The name of the namepsace.
func (o SnapshotTypePtrOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceName
	}).(pulumi.StringPtrOutput)
}

// The owner AWS ; account of the snapshot.
func (o SnapshotTypePtrOutput) OwnerAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.OwnerAccount
	}).(pulumi.StringPtrOutput)
}

func (o SnapshotTypePtrOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *int {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) of the snapshot.
func (o SnapshotTypePtrOutput) SnapshotArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotArn
	}).(pulumi.StringPtrOutput)
}

// The timestamp of when the snapshot was created.
func (o SnapshotTypePtrOutput) SnapshotCreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotCreateTime
	}).(pulumi.StringPtrOutput)
}

// The name of the snapshot.
func (o SnapshotTypePtrOutput) SnapshotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotName
	}).(pulumi.StringPtrOutput)
}

// The status of the snapshot.
func (o SnapshotTypePtrOutput) Status() SnapshotStatusPtrOutput {
	return o.ApplyT(func(v *SnapshotType) *SnapshotStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(SnapshotStatusPtrOutput)
}

type SnapshotTag struct {
	// The key to use in the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

type WorkgroupType struct {
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity *int `pulumi:"baseCapacity"`
	// An array of parameters to set for advanced control over a database. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
	ConfigParameters []WorkgroupConfigParameter `pulumi:"configParameters"`
	// The creation date of the workgroup.
	CreationDate *string `pulumi:"creationDate"`
	// The endpoint that is created from the workgroup.
	Endpoint *WorkgroupEndpoint `pulumi:"endpoint"`
	// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
	EnhancedVpcRouting *bool `pulumi:"enhancedVpcRouting"`
	// The maximum data-warehouse capacity Amazon Redshift Serverless uses to serve queries. The max capacity is specified in RPUs.
	MaxCapacity *int `pulumi:"maxCapacity"`
	// The namespace the workgroup is associated with.
	NamespaceName *string `pulumi:"namespaceName"`
	// An object that represents the price performance target settings for the workgroup.
	PricePerformanceTarget *WorkgroupPerformanceTarget `pulumi:"pricePerformanceTarget"`
	// A value that specifies whether the workgroup can be accessible from a public network.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The status of the workgroup.
	Status *WorkgroupStatus `pulumi:"status"`
	// An array of subnet IDs the workgroup is associated with.
	SubnetIds []string `pulumi:"subnetIds"`
	// The name of the track for the workgroup.
	TrackName *string `pulumi:"trackName"`
	// The Amazon Resource Name (ARN) that links to the workgroup.
	WorkgroupArn *string `pulumi:"workgroupArn"`
	// The unique identifier of the workgroup.
	WorkgroupId *string `pulumi:"workgroupId"`
	// The name of the workgroup.
	WorkgroupName *string `pulumi:"workgroupName"`
}

// WorkgroupTypeInput is an input type that accepts WorkgroupTypeArgs and WorkgroupTypeOutput values.
// You can construct a concrete instance of `WorkgroupTypeInput` via:
//
//	WorkgroupTypeArgs{...}
type WorkgroupTypeInput interface {
	pulumi.Input

	ToWorkgroupTypeOutput() WorkgroupTypeOutput
	ToWorkgroupTypeOutputWithContext(context.Context) WorkgroupTypeOutput
}

type WorkgroupTypeArgs struct {
	// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
	BaseCapacity pulumi.IntPtrInput `pulumi:"baseCapacity"`
	// An array of parameters to set for advanced control over a database. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
	ConfigParameters WorkgroupConfigParameterArrayInput `pulumi:"configParameters"`
	// The creation date of the workgroup.
	CreationDate pulumi.StringPtrInput `pulumi:"creationDate"`
	// The endpoint that is created from the workgroup.
	Endpoint WorkgroupEndpointPtrInput `pulumi:"endpoint"`
	// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
	EnhancedVpcRouting pulumi.BoolPtrInput `pulumi:"enhancedVpcRouting"`
	// The maximum data-warehouse capacity Amazon Redshift Serverless uses to serve queries. The max capacity is specified in RPUs.
	MaxCapacity pulumi.IntPtrInput `pulumi:"maxCapacity"`
	// The namespace the workgroup is associated with.
	NamespaceName pulumi.StringPtrInput `pulumi:"namespaceName"`
	// An object that represents the price performance target settings for the workgroup.
	PricePerformanceTarget WorkgroupPerformanceTargetPtrInput `pulumi:"pricePerformanceTarget"`
	// A value that specifies whether the workgroup can be accessible from a public network.
	PubliclyAccessible pulumi.BoolPtrInput `pulumi:"publiclyAccessible"`
	// An array of security group IDs to associate with the workgroup.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The status of the workgroup.
	Status WorkgroupStatusPtrInput `pulumi:"status"`
	// An array of subnet IDs the workgroup is associated with.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The name of the track for the workgroup.
	TrackName pulumi.StringPtrInput `pulumi:"trackName"`
	// The Amazon Resource Name (ARN) that links to the workgroup.
	WorkgroupArn pulumi.StringPtrInput `pulumi:"workgroupArn"`
	// The unique identifier of the workgroup.
	WorkgroupId pulumi.StringPtrInput `pulumi:"workgroupId"`
	// The name of the workgroup.
	WorkgroupName pulumi.StringPtrInput `pulumi:"workgroupName"`
}

func (WorkgroupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupType)(nil)).Elem()
}

func (i WorkgroupTypeArgs) ToWorkgroupTypeOutput() WorkgroupTypeOutput {
	return i.ToWorkgroupTypeOutputWithContext(context.Background())
}

func (i WorkgroupTypeArgs) ToWorkgroupTypeOutputWithContext(ctx context.Context) WorkgroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupTypeOutput)
}

func (i WorkgroupTypeArgs) ToWorkgroupTypePtrOutput() WorkgroupTypePtrOutput {
	return i.ToWorkgroupTypePtrOutputWithContext(context.Background())
}

func (i WorkgroupTypeArgs) ToWorkgroupTypePtrOutputWithContext(ctx context.Context) WorkgroupTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupTypeOutput).ToWorkgroupTypePtrOutputWithContext(ctx)
}

// WorkgroupTypePtrInput is an input type that accepts WorkgroupTypeArgs, WorkgroupTypePtr and WorkgroupTypePtrOutput values.
// You can construct a concrete instance of `WorkgroupTypePtrInput` via:
//
//	        WorkgroupTypeArgs{...}
//
//	or:
//
//	        nil
type WorkgroupTypePtrInput interface {
	pulumi.Input

	ToWorkgroupTypePtrOutput() WorkgroupTypePtrOutput
	ToWorkgroupTypePtrOutputWithContext(context.Context) WorkgroupTypePtrOutput
}

type workgroupTypePtrType WorkgroupTypeArgs

func WorkgroupTypePtr(v *WorkgroupTypeArgs) WorkgroupTypePtrInput {
	return (*workgroupTypePtrType)(v)
}

func (*workgroupTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkgroupType)(nil)).Elem()
}

func (i *workgroupTypePtrType) ToWorkgroupTypePtrOutput() WorkgroupTypePtrOutput {
	return i.ToWorkgroupTypePtrOutputWithContext(context.Background())
}

func (i *workgroupTypePtrType) ToWorkgroupTypePtrOutputWithContext(ctx context.Context) WorkgroupTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupTypePtrOutput)
}

type WorkgroupTypeOutput struct{ *pulumi.OutputState }

func (WorkgroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupType)(nil)).Elem()
}

func (o WorkgroupTypeOutput) ToWorkgroupTypeOutput() WorkgroupTypeOutput {
	return o
}

func (o WorkgroupTypeOutput) ToWorkgroupTypeOutputWithContext(ctx context.Context) WorkgroupTypeOutput {
	return o
}

func (o WorkgroupTypeOutput) ToWorkgroupTypePtrOutput() WorkgroupTypePtrOutput {
	return o.ToWorkgroupTypePtrOutputWithContext(context.Background())
}

func (o WorkgroupTypeOutput) ToWorkgroupTypePtrOutputWithContext(ctx context.Context) WorkgroupTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkgroupType) *WorkgroupType {
		return &v
	}).(WorkgroupTypePtrOutput)
}

// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
func (o WorkgroupTypeOutput) BaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *int { return v.BaseCapacity }).(pulumi.IntPtrOutput)
}

// An array of parameters to set for advanced control over a database. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
func (o WorkgroupTypeOutput) ConfigParameters() WorkgroupConfigParameterArrayOutput {
	return o.ApplyT(func(v WorkgroupType) []WorkgroupConfigParameter { return v.ConfigParameters }).(WorkgroupConfigParameterArrayOutput)
}

// The creation date of the workgroup.
func (o WorkgroupTypeOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *string { return v.CreationDate }).(pulumi.StringPtrOutput)
}

// The endpoint that is created from the workgroup.
func (o WorkgroupTypeOutput) Endpoint() WorkgroupEndpointPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *WorkgroupEndpoint { return v.Endpoint }).(WorkgroupEndpointPtrOutput)
}

// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
func (o WorkgroupTypeOutput) EnhancedVpcRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *bool { return v.EnhancedVpcRouting }).(pulumi.BoolPtrOutput)
}

// The maximum data-warehouse capacity Amazon Redshift Serverless uses to serve queries. The max capacity is specified in RPUs.
func (o WorkgroupTypeOutput) MaxCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *int { return v.MaxCapacity }).(pulumi.IntPtrOutput)
}

// The namespace the workgroup is associated with.
func (o WorkgroupTypeOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *string { return v.NamespaceName }).(pulumi.StringPtrOutput)
}

// An object that represents the price performance target settings for the workgroup.
func (o WorkgroupTypeOutput) PricePerformanceTarget() WorkgroupPerformanceTargetPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *WorkgroupPerformanceTarget { return v.PricePerformanceTarget }).(WorkgroupPerformanceTargetPtrOutput)
}

// A value that specifies whether the workgroup can be accessible from a public network.
func (o WorkgroupTypeOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *bool { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

// An array of security group IDs to associate with the workgroup.
func (o WorkgroupTypeOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkgroupType) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The status of the workgroup.
func (o WorkgroupTypeOutput) Status() WorkgroupStatusPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *WorkgroupStatus { return v.Status }).(WorkgroupStatusPtrOutput)
}

// An array of subnet IDs the workgroup is associated with.
func (o WorkgroupTypeOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkgroupType) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The name of the track for the workgroup.
func (o WorkgroupTypeOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *string { return v.TrackName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) that links to the workgroup.
func (o WorkgroupTypeOutput) WorkgroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *string { return v.WorkgroupArn }).(pulumi.StringPtrOutput)
}

// The unique identifier of the workgroup.
func (o WorkgroupTypeOutput) WorkgroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *string { return v.WorkgroupId }).(pulumi.StringPtrOutput)
}

// The name of the workgroup.
func (o WorkgroupTypeOutput) WorkgroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupType) *string { return v.WorkgroupName }).(pulumi.StringPtrOutput)
}

type WorkgroupTypePtrOutput struct{ *pulumi.OutputState }

func (WorkgroupTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkgroupType)(nil)).Elem()
}

func (o WorkgroupTypePtrOutput) ToWorkgroupTypePtrOutput() WorkgroupTypePtrOutput {
	return o
}

func (o WorkgroupTypePtrOutput) ToWorkgroupTypePtrOutputWithContext(ctx context.Context) WorkgroupTypePtrOutput {
	return o
}

func (o WorkgroupTypePtrOutput) Elem() WorkgroupTypeOutput {
	return o.ApplyT(func(v *WorkgroupType) WorkgroupType {
		if v != nil {
			return *v
		}
		var ret WorkgroupType
		return ret
	}).(WorkgroupTypeOutput)
}

// The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
func (o WorkgroupTypePtrOutput) BaseCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *int {
		if v == nil {
			return nil
		}
		return v.BaseCapacity
	}).(pulumi.IntPtrOutput)
}

// An array of parameters to set for advanced control over a database. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
func (o WorkgroupTypePtrOutput) ConfigParameters() WorkgroupConfigParameterArrayOutput {
	return o.ApplyT(func(v *WorkgroupType) []WorkgroupConfigParameter {
		if v == nil {
			return nil
		}
		return v.ConfigParameters
	}).(WorkgroupConfigParameterArrayOutput)
}

// The creation date of the workgroup.
func (o WorkgroupTypePtrOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *string {
		if v == nil {
			return nil
		}
		return v.CreationDate
	}).(pulumi.StringPtrOutput)
}

// The endpoint that is created from the workgroup.
func (o WorkgroupTypePtrOutput) Endpoint() WorkgroupEndpointPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *WorkgroupEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(WorkgroupEndpointPtrOutput)
}

// The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
func (o WorkgroupTypePtrOutput) EnhancedVpcRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *bool {
		if v == nil {
			return nil
		}
		return v.EnhancedVpcRouting
	}).(pulumi.BoolPtrOutput)
}

// The maximum data-warehouse capacity Amazon Redshift Serverless uses to serve queries. The max capacity is specified in RPUs.
func (o WorkgroupTypePtrOutput) MaxCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *int {
		if v == nil {
			return nil
		}
		return v.MaxCapacity
	}).(pulumi.IntPtrOutput)
}

// The namespace the workgroup is associated with.
func (o WorkgroupTypePtrOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceName
	}).(pulumi.StringPtrOutput)
}

// An object that represents the price performance target settings for the workgroup.
func (o WorkgroupTypePtrOutput) PricePerformanceTarget() WorkgroupPerformanceTargetPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *WorkgroupPerformanceTarget {
		if v == nil {
			return nil
		}
		return v.PricePerformanceTarget
	}).(WorkgroupPerformanceTargetPtrOutput)
}

// A value that specifies whether the workgroup can be accessible from a public network.
func (o WorkgroupTypePtrOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *bool {
		if v == nil {
			return nil
		}
		return v.PubliclyAccessible
	}).(pulumi.BoolPtrOutput)
}

// An array of security group IDs to associate with the workgroup.
func (o WorkgroupTypePtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkgroupType) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// The status of the workgroup.
func (o WorkgroupTypePtrOutput) Status() WorkgroupStatusPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *WorkgroupStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(WorkgroupStatusPtrOutput)
}

// An array of subnet IDs the workgroup is associated with.
func (o WorkgroupTypePtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkgroupType) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The name of the track for the workgroup.
func (o WorkgroupTypePtrOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *string {
		if v == nil {
			return nil
		}
		return v.TrackName
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) that links to the workgroup.
func (o WorkgroupTypePtrOutput) WorkgroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *string {
		if v == nil {
			return nil
		}
		return v.WorkgroupArn
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the workgroup.
func (o WorkgroupTypePtrOutput) WorkgroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *string {
		if v == nil {
			return nil
		}
		return v.WorkgroupId
	}).(pulumi.StringPtrOutput)
}

// The name of the workgroup.
func (o WorkgroupTypePtrOutput) WorkgroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkgroupType) *string {
		if v == nil {
			return nil
		}
		return v.WorkgroupName
	}).(pulumi.StringPtrOutput)
}

type WorkgroupConfigParameter struct {
	// The key of the parameter. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
	ParameterKey *string `pulumi:"parameterKey"`
	// The value of the parameter to set.
	ParameterValue *string `pulumi:"parameterValue"`
}

// WorkgroupConfigParameterInput is an input type that accepts WorkgroupConfigParameterArgs and WorkgroupConfigParameterOutput values.
// You can construct a concrete instance of `WorkgroupConfigParameterInput` via:
//
//	WorkgroupConfigParameterArgs{...}
type WorkgroupConfigParameterInput interface {
	pulumi.Input

	ToWorkgroupConfigParameterOutput() WorkgroupConfigParameterOutput
	ToWorkgroupConfigParameterOutputWithContext(context.Context) WorkgroupConfigParameterOutput
}

type WorkgroupConfigParameterArgs struct {
	// The key of the parameter. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
	ParameterKey pulumi.StringPtrInput `pulumi:"parameterKey"`
	// The value of the parameter to set.
	ParameterValue pulumi.StringPtrInput `pulumi:"parameterValue"`
}

func (WorkgroupConfigParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigParameter)(nil)).Elem()
}

func (i WorkgroupConfigParameterArgs) ToWorkgroupConfigParameterOutput() WorkgroupConfigParameterOutput {
	return i.ToWorkgroupConfigParameterOutputWithContext(context.Background())
}

func (i WorkgroupConfigParameterArgs) ToWorkgroupConfigParameterOutputWithContext(ctx context.Context) WorkgroupConfigParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigParameterOutput)
}

// WorkgroupConfigParameterArrayInput is an input type that accepts WorkgroupConfigParameterArray and WorkgroupConfigParameterArrayOutput values.
// You can construct a concrete instance of `WorkgroupConfigParameterArrayInput` via:
//
//	WorkgroupConfigParameterArray{ WorkgroupConfigParameterArgs{...} }
type WorkgroupConfigParameterArrayInput interface {
	pulumi.Input

	ToWorkgroupConfigParameterArrayOutput() WorkgroupConfigParameterArrayOutput
	ToWorkgroupConfigParameterArrayOutputWithContext(context.Context) WorkgroupConfigParameterArrayOutput
}

type WorkgroupConfigParameterArray []WorkgroupConfigParameterInput

func (WorkgroupConfigParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkgroupConfigParameter)(nil)).Elem()
}

func (i WorkgroupConfigParameterArray) ToWorkgroupConfigParameterArrayOutput() WorkgroupConfigParameterArrayOutput {
	return i.ToWorkgroupConfigParameterArrayOutputWithContext(context.Background())
}

func (i WorkgroupConfigParameterArray) ToWorkgroupConfigParameterArrayOutputWithContext(ctx context.Context) WorkgroupConfigParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupConfigParameterArrayOutput)
}

type WorkgroupConfigParameterOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupConfigParameter)(nil)).Elem()
}

func (o WorkgroupConfigParameterOutput) ToWorkgroupConfigParameterOutput() WorkgroupConfigParameterOutput {
	return o
}

func (o WorkgroupConfigParameterOutput) ToWorkgroupConfigParameterOutputWithContext(ctx context.Context) WorkgroupConfigParameterOutput {
	return o
}

// The key of the parameter. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
func (o WorkgroupConfigParameterOutput) ParameterKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupConfigParameter) *string { return v.ParameterKey }).(pulumi.StringPtrOutput)
}

// The value of the parameter to set.
func (o WorkgroupConfigParameterOutput) ParameterValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupConfigParameter) *string { return v.ParameterValue }).(pulumi.StringPtrOutput)
}

type WorkgroupConfigParameterArrayOutput struct{ *pulumi.OutputState }

func (WorkgroupConfigParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkgroupConfigParameter)(nil)).Elem()
}

func (o WorkgroupConfigParameterArrayOutput) ToWorkgroupConfigParameterArrayOutput() WorkgroupConfigParameterArrayOutput {
	return o
}

func (o WorkgroupConfigParameterArrayOutput) ToWorkgroupConfigParameterArrayOutputWithContext(ctx context.Context) WorkgroupConfigParameterArrayOutput {
	return o
}

func (o WorkgroupConfigParameterArrayOutput) Index(i pulumi.IntInput) WorkgroupConfigParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkgroupConfigParameter {
		return vs[0].([]WorkgroupConfigParameter)[vs[1].(int)]
	}).(WorkgroupConfigParameterOutput)
}

type WorkgroupEndpoint struct {
	// The DNS address of the VPC endpoint.
	Address *string `pulumi:"address"`
	// The port that Amazon Redshift Serverless listens on.
	Port *int `pulumi:"port"`
	// An array of `VpcEndpoint` objects.
	VpcEndpoints []WorkgroupVpcEndpoint `pulumi:"vpcEndpoints"`
}

// WorkgroupEndpointInput is an input type that accepts WorkgroupEndpointArgs and WorkgroupEndpointOutput values.
// You can construct a concrete instance of `WorkgroupEndpointInput` via:
//
//	WorkgroupEndpointArgs{...}
type WorkgroupEndpointInput interface {
	pulumi.Input

	ToWorkgroupEndpointOutput() WorkgroupEndpointOutput
	ToWorkgroupEndpointOutputWithContext(context.Context) WorkgroupEndpointOutput
}

type WorkgroupEndpointArgs struct {
	// The DNS address of the VPC endpoint.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The port that Amazon Redshift Serverless listens on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// An array of `VpcEndpoint` objects.
	VpcEndpoints WorkgroupVpcEndpointArrayInput `pulumi:"vpcEndpoints"`
}

func (WorkgroupEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpoint)(nil)).Elem()
}

func (i WorkgroupEndpointArgs) ToWorkgroupEndpointOutput() WorkgroupEndpointOutput {
	return i.ToWorkgroupEndpointOutputWithContext(context.Background())
}

func (i WorkgroupEndpointArgs) ToWorkgroupEndpointOutputWithContext(ctx context.Context) WorkgroupEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupEndpointOutput)
}

func (i WorkgroupEndpointArgs) ToWorkgroupEndpointPtrOutput() WorkgroupEndpointPtrOutput {
	return i.ToWorkgroupEndpointPtrOutputWithContext(context.Background())
}

func (i WorkgroupEndpointArgs) ToWorkgroupEndpointPtrOutputWithContext(ctx context.Context) WorkgroupEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupEndpointOutput).ToWorkgroupEndpointPtrOutputWithContext(ctx)
}

// WorkgroupEndpointPtrInput is an input type that accepts WorkgroupEndpointArgs, WorkgroupEndpointPtr and WorkgroupEndpointPtrOutput values.
// You can construct a concrete instance of `WorkgroupEndpointPtrInput` via:
//
//	        WorkgroupEndpointArgs{...}
//
//	or:
//
//	        nil
type WorkgroupEndpointPtrInput interface {
	pulumi.Input

	ToWorkgroupEndpointPtrOutput() WorkgroupEndpointPtrOutput
	ToWorkgroupEndpointPtrOutputWithContext(context.Context) WorkgroupEndpointPtrOutput
}

type workgroupEndpointPtrType WorkgroupEndpointArgs

func WorkgroupEndpointPtr(v *WorkgroupEndpointArgs) WorkgroupEndpointPtrInput {
	return (*workgroupEndpointPtrType)(v)
}

func (*workgroupEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkgroupEndpoint)(nil)).Elem()
}

func (i *workgroupEndpointPtrType) ToWorkgroupEndpointPtrOutput() WorkgroupEndpointPtrOutput {
	return i.ToWorkgroupEndpointPtrOutputWithContext(context.Background())
}

func (i *workgroupEndpointPtrType) ToWorkgroupEndpointPtrOutputWithContext(ctx context.Context) WorkgroupEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupEndpointPtrOutput)
}

type WorkgroupEndpointOutput struct{ *pulumi.OutputState }

func (WorkgroupEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupEndpoint)(nil)).Elem()
}

func (o WorkgroupEndpointOutput) ToWorkgroupEndpointOutput() WorkgroupEndpointOutput {
	return o
}

func (o WorkgroupEndpointOutput) ToWorkgroupEndpointOutputWithContext(ctx context.Context) WorkgroupEndpointOutput {
	return o
}

func (o WorkgroupEndpointOutput) ToWorkgroupEndpointPtrOutput() WorkgroupEndpointPtrOutput {
	return o.ToWorkgroupEndpointPtrOutputWithContext(context.Background())
}

func (o WorkgroupEndpointOutput) ToWorkgroupEndpointPtrOutputWithContext(ctx context.Context) WorkgroupEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkgroupEndpoint) *WorkgroupEndpoint {
		return &v
	}).(WorkgroupEndpointPtrOutput)
}

// The DNS address of the VPC endpoint.
func (o WorkgroupEndpointOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupEndpoint) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The port that Amazon Redshift Serverless listens on.
func (o WorkgroupEndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkgroupEndpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// An array of `VpcEndpoint` objects.
func (o WorkgroupEndpointOutput) VpcEndpoints() WorkgroupVpcEndpointArrayOutput {
	return o.ApplyT(func(v WorkgroupEndpoint) []WorkgroupVpcEndpoint { return v.VpcEndpoints }).(WorkgroupVpcEndpointArrayOutput)
}

type WorkgroupEndpointPtrOutput struct{ *pulumi.OutputState }

func (WorkgroupEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkgroupEndpoint)(nil)).Elem()
}

func (o WorkgroupEndpointPtrOutput) ToWorkgroupEndpointPtrOutput() WorkgroupEndpointPtrOutput {
	return o
}

func (o WorkgroupEndpointPtrOutput) ToWorkgroupEndpointPtrOutputWithContext(ctx context.Context) WorkgroupEndpointPtrOutput {
	return o
}

func (o WorkgroupEndpointPtrOutput) Elem() WorkgroupEndpointOutput {
	return o.ApplyT(func(v *WorkgroupEndpoint) WorkgroupEndpoint {
		if v != nil {
			return *v
		}
		var ret WorkgroupEndpoint
		return ret
	}).(WorkgroupEndpointOutput)
}

// The DNS address of the VPC endpoint.
func (o WorkgroupEndpointPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkgroupEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The port that Amazon Redshift Serverless listens on.
func (o WorkgroupEndpointPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkgroupEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// An array of `VpcEndpoint` objects.
func (o WorkgroupEndpointPtrOutput) VpcEndpoints() WorkgroupVpcEndpointArrayOutput {
	return o.ApplyT(func(v *WorkgroupEndpoint) []WorkgroupVpcEndpoint {
		if v == nil {
			return nil
		}
		return v.VpcEndpoints
	}).(WorkgroupVpcEndpointArrayOutput)
}

type WorkgroupNetworkInterface struct {
	// The availability Zone.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId *string `pulumi:"subnetId"`
}

// WorkgroupNetworkInterfaceInput is an input type that accepts WorkgroupNetworkInterfaceArgs and WorkgroupNetworkInterfaceOutput values.
// You can construct a concrete instance of `WorkgroupNetworkInterfaceInput` via:
//
//	WorkgroupNetworkInterfaceArgs{...}
type WorkgroupNetworkInterfaceInput interface {
	pulumi.Input

	ToWorkgroupNetworkInterfaceOutput() WorkgroupNetworkInterfaceOutput
	ToWorkgroupNetworkInterfaceOutputWithContext(context.Context) WorkgroupNetworkInterfaceOutput
}

type WorkgroupNetworkInterfaceArgs struct {
	// The availability Zone.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The unique identifier of the network interface.
	NetworkInterfaceId pulumi.StringPtrInput `pulumi:"networkInterfaceId"`
	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
	// The unique identifier of the subnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (WorkgroupNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupNetworkInterface)(nil)).Elem()
}

func (i WorkgroupNetworkInterfaceArgs) ToWorkgroupNetworkInterfaceOutput() WorkgroupNetworkInterfaceOutput {
	return i.ToWorkgroupNetworkInterfaceOutputWithContext(context.Background())
}

func (i WorkgroupNetworkInterfaceArgs) ToWorkgroupNetworkInterfaceOutputWithContext(ctx context.Context) WorkgroupNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupNetworkInterfaceOutput)
}

// WorkgroupNetworkInterfaceArrayInput is an input type that accepts WorkgroupNetworkInterfaceArray and WorkgroupNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `WorkgroupNetworkInterfaceArrayInput` via:
//
//	WorkgroupNetworkInterfaceArray{ WorkgroupNetworkInterfaceArgs{...} }
type WorkgroupNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToWorkgroupNetworkInterfaceArrayOutput() WorkgroupNetworkInterfaceArrayOutput
	ToWorkgroupNetworkInterfaceArrayOutputWithContext(context.Context) WorkgroupNetworkInterfaceArrayOutput
}

type WorkgroupNetworkInterfaceArray []WorkgroupNetworkInterfaceInput

func (WorkgroupNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkgroupNetworkInterface)(nil)).Elem()
}

func (i WorkgroupNetworkInterfaceArray) ToWorkgroupNetworkInterfaceArrayOutput() WorkgroupNetworkInterfaceArrayOutput {
	return i.ToWorkgroupNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i WorkgroupNetworkInterfaceArray) ToWorkgroupNetworkInterfaceArrayOutputWithContext(ctx context.Context) WorkgroupNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupNetworkInterfaceArrayOutput)
}

type WorkgroupNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (WorkgroupNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupNetworkInterface)(nil)).Elem()
}

func (o WorkgroupNetworkInterfaceOutput) ToWorkgroupNetworkInterfaceOutput() WorkgroupNetworkInterfaceOutput {
	return o
}

func (o WorkgroupNetworkInterfaceOutput) ToWorkgroupNetworkInterfaceOutputWithContext(ctx context.Context) WorkgroupNetworkInterfaceOutput {
	return o
}

// The availability Zone.
func (o WorkgroupNetworkInterfaceOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupNetworkInterface) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The unique identifier of the network interface.
func (o WorkgroupNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupNetworkInterface) *string { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The IPv4 address of the network interface within the subnet.
func (o WorkgroupNetworkInterfaceOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupNetworkInterface) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

// The unique identifier of the subnet.
func (o WorkgroupNetworkInterfaceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupNetworkInterface) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type WorkgroupNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (WorkgroupNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkgroupNetworkInterface)(nil)).Elem()
}

func (o WorkgroupNetworkInterfaceArrayOutput) ToWorkgroupNetworkInterfaceArrayOutput() WorkgroupNetworkInterfaceArrayOutput {
	return o
}

func (o WorkgroupNetworkInterfaceArrayOutput) ToWorkgroupNetworkInterfaceArrayOutputWithContext(ctx context.Context) WorkgroupNetworkInterfaceArrayOutput {
	return o
}

func (o WorkgroupNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) WorkgroupNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkgroupNetworkInterface {
		return vs[0].([]WorkgroupNetworkInterface)[vs[1].(int)]
	}).(WorkgroupNetworkInterfaceOutput)
}

type WorkgroupPerformanceTarget struct {
	// The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.
	Level *int `pulumi:"level"`
	// Whether the price performance target is enabled for the workgroup.
	Status *WorkgroupPerformanceTargetStatus `pulumi:"status"`
}

// WorkgroupPerformanceTargetInput is an input type that accepts WorkgroupPerformanceTargetArgs and WorkgroupPerformanceTargetOutput values.
// You can construct a concrete instance of `WorkgroupPerformanceTargetInput` via:
//
//	WorkgroupPerformanceTargetArgs{...}
type WorkgroupPerformanceTargetInput interface {
	pulumi.Input

	ToWorkgroupPerformanceTargetOutput() WorkgroupPerformanceTargetOutput
	ToWorkgroupPerformanceTargetOutputWithContext(context.Context) WorkgroupPerformanceTargetOutput
}

type WorkgroupPerformanceTargetArgs struct {
	// The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.
	Level pulumi.IntPtrInput `pulumi:"level"`
	// Whether the price performance target is enabled for the workgroup.
	Status WorkgroupPerformanceTargetStatusPtrInput `pulumi:"status"`
}

func (WorkgroupPerformanceTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupPerformanceTarget)(nil)).Elem()
}

func (i WorkgroupPerformanceTargetArgs) ToWorkgroupPerformanceTargetOutput() WorkgroupPerformanceTargetOutput {
	return i.ToWorkgroupPerformanceTargetOutputWithContext(context.Background())
}

func (i WorkgroupPerformanceTargetArgs) ToWorkgroupPerformanceTargetOutputWithContext(ctx context.Context) WorkgroupPerformanceTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupPerformanceTargetOutput)
}

func (i WorkgroupPerformanceTargetArgs) ToWorkgroupPerformanceTargetPtrOutput() WorkgroupPerformanceTargetPtrOutput {
	return i.ToWorkgroupPerformanceTargetPtrOutputWithContext(context.Background())
}

func (i WorkgroupPerformanceTargetArgs) ToWorkgroupPerformanceTargetPtrOutputWithContext(ctx context.Context) WorkgroupPerformanceTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupPerformanceTargetOutput).ToWorkgroupPerformanceTargetPtrOutputWithContext(ctx)
}

// WorkgroupPerformanceTargetPtrInput is an input type that accepts WorkgroupPerformanceTargetArgs, WorkgroupPerformanceTargetPtr and WorkgroupPerformanceTargetPtrOutput values.
// You can construct a concrete instance of `WorkgroupPerformanceTargetPtrInput` via:
//
//	        WorkgroupPerformanceTargetArgs{...}
//
//	or:
//
//	        nil
type WorkgroupPerformanceTargetPtrInput interface {
	pulumi.Input

	ToWorkgroupPerformanceTargetPtrOutput() WorkgroupPerformanceTargetPtrOutput
	ToWorkgroupPerformanceTargetPtrOutputWithContext(context.Context) WorkgroupPerformanceTargetPtrOutput
}

type workgroupPerformanceTargetPtrType WorkgroupPerformanceTargetArgs

func WorkgroupPerformanceTargetPtr(v *WorkgroupPerformanceTargetArgs) WorkgroupPerformanceTargetPtrInput {
	return (*workgroupPerformanceTargetPtrType)(v)
}

func (*workgroupPerformanceTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkgroupPerformanceTarget)(nil)).Elem()
}

func (i *workgroupPerformanceTargetPtrType) ToWorkgroupPerformanceTargetPtrOutput() WorkgroupPerformanceTargetPtrOutput {
	return i.ToWorkgroupPerformanceTargetPtrOutputWithContext(context.Background())
}

func (i *workgroupPerformanceTargetPtrType) ToWorkgroupPerformanceTargetPtrOutputWithContext(ctx context.Context) WorkgroupPerformanceTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupPerformanceTargetPtrOutput)
}

type WorkgroupPerformanceTargetOutput struct{ *pulumi.OutputState }

func (WorkgroupPerformanceTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupPerformanceTarget)(nil)).Elem()
}

func (o WorkgroupPerformanceTargetOutput) ToWorkgroupPerformanceTargetOutput() WorkgroupPerformanceTargetOutput {
	return o
}

func (o WorkgroupPerformanceTargetOutput) ToWorkgroupPerformanceTargetOutputWithContext(ctx context.Context) WorkgroupPerformanceTargetOutput {
	return o
}

func (o WorkgroupPerformanceTargetOutput) ToWorkgroupPerformanceTargetPtrOutput() WorkgroupPerformanceTargetPtrOutput {
	return o.ToWorkgroupPerformanceTargetPtrOutputWithContext(context.Background())
}

func (o WorkgroupPerformanceTargetOutput) ToWorkgroupPerformanceTargetPtrOutputWithContext(ctx context.Context) WorkgroupPerformanceTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkgroupPerformanceTarget) *WorkgroupPerformanceTarget {
		return &v
	}).(WorkgroupPerformanceTargetPtrOutput)
}

// The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.
func (o WorkgroupPerformanceTargetOutput) Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkgroupPerformanceTarget) *int { return v.Level }).(pulumi.IntPtrOutput)
}

// Whether the price performance target is enabled for the workgroup.
func (o WorkgroupPerformanceTargetOutput) Status() WorkgroupPerformanceTargetStatusPtrOutput {
	return o.ApplyT(func(v WorkgroupPerformanceTarget) *WorkgroupPerformanceTargetStatus { return v.Status }).(WorkgroupPerformanceTargetStatusPtrOutput)
}

type WorkgroupPerformanceTargetPtrOutput struct{ *pulumi.OutputState }

func (WorkgroupPerformanceTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkgroupPerformanceTarget)(nil)).Elem()
}

func (o WorkgroupPerformanceTargetPtrOutput) ToWorkgroupPerformanceTargetPtrOutput() WorkgroupPerformanceTargetPtrOutput {
	return o
}

func (o WorkgroupPerformanceTargetPtrOutput) ToWorkgroupPerformanceTargetPtrOutputWithContext(ctx context.Context) WorkgroupPerformanceTargetPtrOutput {
	return o
}

func (o WorkgroupPerformanceTargetPtrOutput) Elem() WorkgroupPerformanceTargetOutput {
	return o.ApplyT(func(v *WorkgroupPerformanceTarget) WorkgroupPerformanceTarget {
		if v != nil {
			return *v
		}
		var ret WorkgroupPerformanceTarget
		return ret
	}).(WorkgroupPerformanceTargetOutput)
}

// The target price performance level for the workgroup. Valid values include 1, 25, 50, 75, and 100. These correspond to the price performance levels LOW_COST, ECONOMICAL, BALANCED, RESOURCEFUL, and HIGH_PERFORMANCE.
func (o WorkgroupPerformanceTargetPtrOutput) Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkgroupPerformanceTarget) *int {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.IntPtrOutput)
}

// Whether the price performance target is enabled for the workgroup.
func (o WorkgroupPerformanceTargetPtrOutput) Status() WorkgroupPerformanceTargetStatusPtrOutput {
	return o.ApplyT(func(v *WorkgroupPerformanceTarget) *WorkgroupPerformanceTargetStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(WorkgroupPerformanceTargetStatusPtrOutput)
}

type WorkgroupTag struct {
	// The key to use in the tag.
	Key string `pulumi:"key"`
	// The value of the tag.
	Value string `pulumi:"value"`
}

type WorkgroupVpcEndpoint struct {
	// One or more network interfaces of the endpoint. Also known as an interface endpoint.
	NetworkInterfaces []WorkgroupNetworkInterface `pulumi:"networkInterfaces"`
	// The connection endpoint ID for connecting to Amazon Redshift Serverless.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The VPC identifier that the endpoint is associated with.
	VpcId *string `pulumi:"vpcId"`
}

// WorkgroupVpcEndpointInput is an input type that accepts WorkgroupVpcEndpointArgs and WorkgroupVpcEndpointOutput values.
// You can construct a concrete instance of `WorkgroupVpcEndpointInput` via:
//
//	WorkgroupVpcEndpointArgs{...}
type WorkgroupVpcEndpointInput interface {
	pulumi.Input

	ToWorkgroupVpcEndpointOutput() WorkgroupVpcEndpointOutput
	ToWorkgroupVpcEndpointOutputWithContext(context.Context) WorkgroupVpcEndpointOutput
}

type WorkgroupVpcEndpointArgs struct {
	// One or more network interfaces of the endpoint. Also known as an interface endpoint.
	NetworkInterfaces WorkgroupNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// The connection endpoint ID for connecting to Amazon Redshift Serverless.
	VpcEndpointId pulumi.StringPtrInput `pulumi:"vpcEndpointId"`
	// The VPC identifier that the endpoint is associated with.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (WorkgroupVpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupVpcEndpoint)(nil)).Elem()
}

func (i WorkgroupVpcEndpointArgs) ToWorkgroupVpcEndpointOutput() WorkgroupVpcEndpointOutput {
	return i.ToWorkgroupVpcEndpointOutputWithContext(context.Background())
}

func (i WorkgroupVpcEndpointArgs) ToWorkgroupVpcEndpointOutputWithContext(ctx context.Context) WorkgroupVpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupVpcEndpointOutput)
}

// WorkgroupVpcEndpointArrayInput is an input type that accepts WorkgroupVpcEndpointArray and WorkgroupVpcEndpointArrayOutput values.
// You can construct a concrete instance of `WorkgroupVpcEndpointArrayInput` via:
//
//	WorkgroupVpcEndpointArray{ WorkgroupVpcEndpointArgs{...} }
type WorkgroupVpcEndpointArrayInput interface {
	pulumi.Input

	ToWorkgroupVpcEndpointArrayOutput() WorkgroupVpcEndpointArrayOutput
	ToWorkgroupVpcEndpointArrayOutputWithContext(context.Context) WorkgroupVpcEndpointArrayOutput
}

type WorkgroupVpcEndpointArray []WorkgroupVpcEndpointInput

func (WorkgroupVpcEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkgroupVpcEndpoint)(nil)).Elem()
}

func (i WorkgroupVpcEndpointArray) ToWorkgroupVpcEndpointArrayOutput() WorkgroupVpcEndpointArrayOutput {
	return i.ToWorkgroupVpcEndpointArrayOutputWithContext(context.Background())
}

func (i WorkgroupVpcEndpointArray) ToWorkgroupVpcEndpointArrayOutputWithContext(ctx context.Context) WorkgroupVpcEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkgroupVpcEndpointArrayOutput)
}

type WorkgroupVpcEndpointOutput struct{ *pulumi.OutputState }

func (WorkgroupVpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkgroupVpcEndpoint)(nil)).Elem()
}

func (o WorkgroupVpcEndpointOutput) ToWorkgroupVpcEndpointOutput() WorkgroupVpcEndpointOutput {
	return o
}

func (o WorkgroupVpcEndpointOutput) ToWorkgroupVpcEndpointOutputWithContext(ctx context.Context) WorkgroupVpcEndpointOutput {
	return o
}

// One or more network interfaces of the endpoint. Also known as an interface endpoint.
func (o WorkgroupVpcEndpointOutput) NetworkInterfaces() WorkgroupNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v WorkgroupVpcEndpoint) []WorkgroupNetworkInterface { return v.NetworkInterfaces }).(WorkgroupNetworkInterfaceArrayOutput)
}

// The connection endpoint ID for connecting to Amazon Redshift Serverless.
func (o WorkgroupVpcEndpointOutput) VpcEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupVpcEndpoint) *string { return v.VpcEndpointId }).(pulumi.StringPtrOutput)
}

// The VPC identifier that the endpoint is associated with.
func (o WorkgroupVpcEndpointOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkgroupVpcEndpoint) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type WorkgroupVpcEndpointArrayOutput struct{ *pulumi.OutputState }

func (WorkgroupVpcEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkgroupVpcEndpoint)(nil)).Elem()
}

func (o WorkgroupVpcEndpointArrayOutput) ToWorkgroupVpcEndpointArrayOutput() WorkgroupVpcEndpointArrayOutput {
	return o
}

func (o WorkgroupVpcEndpointArrayOutput) ToWorkgroupVpcEndpointArrayOutputWithContext(ctx context.Context) WorkgroupVpcEndpointArrayOutput {
	return o
}

func (o WorkgroupVpcEndpointArrayOutput) Index(i pulumi.IntInput) WorkgroupVpcEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkgroupVpcEndpoint {
		return vs[0].([]WorkgroupVpcEndpoint)[vs[1].(int)]
	}).(WorkgroupVpcEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSnapshotCopyConfigurationInput)(nil)).Elem(), NamespaceSnapshotCopyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceSnapshotCopyConfigurationArrayInput)(nil)).Elem(), NamespaceSnapshotCopyConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupTypeInput)(nil)).Elem(), WorkgroupTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupTypePtrInput)(nil)).Elem(), WorkgroupTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupConfigParameterInput)(nil)).Elem(), WorkgroupConfigParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupConfigParameterArrayInput)(nil)).Elem(), WorkgroupConfigParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupEndpointInput)(nil)).Elem(), WorkgroupEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupEndpointPtrInput)(nil)).Elem(), WorkgroupEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupNetworkInterfaceInput)(nil)).Elem(), WorkgroupNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupNetworkInterfaceArrayInput)(nil)).Elem(), WorkgroupNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupPerformanceTargetInput)(nil)).Elem(), WorkgroupPerformanceTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupPerformanceTargetPtrInput)(nil)).Elem(), WorkgroupPerformanceTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupVpcEndpointInput)(nil)).Elem(), WorkgroupVpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkgroupVpcEndpointArrayInput)(nil)).Elem(), WorkgroupVpcEndpointArray{})
	pulumi.RegisterOutputType(NamespaceTypeOutput{})
	pulumi.RegisterOutputType(NamespaceTypePtrOutput{})
	pulumi.RegisterOutputType(NamespaceSnapshotCopyConfigurationOutput{})
	pulumi.RegisterOutputType(NamespaceSnapshotCopyConfigurationArrayOutput{})
	pulumi.RegisterOutputType(SnapshotTypeOutput{})
	pulumi.RegisterOutputType(SnapshotTypePtrOutput{})
	pulumi.RegisterOutputType(WorkgroupTypeOutput{})
	pulumi.RegisterOutputType(WorkgroupTypePtrOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigParameterOutput{})
	pulumi.RegisterOutputType(WorkgroupConfigParameterArrayOutput{})
	pulumi.RegisterOutputType(WorkgroupEndpointOutput{})
	pulumi.RegisterOutputType(WorkgroupEndpointPtrOutput{})
	pulumi.RegisterOutputType(WorkgroupNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(WorkgroupNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(WorkgroupPerformanceTargetOutput{})
	pulumi.RegisterOutputType(WorkgroupPerformanceTargetPtrOutput{})
	pulumi.RegisterOutputType(WorkgroupVpcEndpointOutput{})
	pulumi.RegisterOutputType(WorkgroupVpcEndpointArrayOutput{})
}
