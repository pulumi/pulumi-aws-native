// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iotsitewise

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::IoTSiteWise::Gateway
type Gateway struct {
	pulumi.CustomResourceState

	// A list of gateway capability summaries that each contain a namespace and status.
	GatewayCapabilitySummaries GatewayGatewayCapabilitySummaryArrayOutput `pulumi:"gatewayCapabilitySummaries"`
	// The ID of the gateway device.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// A unique, friendly name for the gateway.
	GatewayName pulumi.StringOutput `pulumi:"gatewayName"`
	// The gateway's platform. You can only specify one platform in a gateway.
	GatewayPlatform GatewayGatewayPlatformOutput `pulumi:"gatewayPlatform"`
	// A list of key-value pairs that contain metadata for the gateway.
	Tags GatewayTagArrayOutput `pulumi:"tags"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayName == nil {
		return nil, errors.New("invalid value for required argument 'GatewayName'")
	}
	if args.GatewayPlatform == nil {
		return nil, errors.New("invalid value for required argument 'GatewayPlatform'")
	}
	var resource Gateway
	err := ctx.RegisterResource("aws-native:iotsitewise:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("aws-native:iotsitewise:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
}

type GatewayState struct {
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// A list of gateway capability summaries that each contain a namespace and status.
	GatewayCapabilitySummaries []GatewayGatewayCapabilitySummary `pulumi:"gatewayCapabilitySummaries"`
	// A unique, friendly name for the gateway.
	GatewayName string `pulumi:"gatewayName"`
	// The gateway's platform. You can only specify one platform in a gateway.
	GatewayPlatform GatewayGatewayPlatform `pulumi:"gatewayPlatform"`
	// A list of key-value pairs that contain metadata for the gateway.
	Tags []GatewayTag `pulumi:"tags"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// A list of gateway capability summaries that each contain a namespace and status.
	GatewayCapabilitySummaries GatewayGatewayCapabilitySummaryArrayInput
	// A unique, friendly name for the gateway.
	GatewayName pulumi.StringInput
	// The gateway's platform. You can only specify one platform in a gateway.
	GatewayPlatform GatewayGatewayPlatformInput
	// A list of key-value pairs that contain metadata for the gateway.
	Tags GatewayTagArrayInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((*Gateway)(nil))
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Gateway)(nil))
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GatewayOutput{})
}
