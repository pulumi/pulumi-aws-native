// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iotsitewise

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::IoTSiteWise::Asset
type Asset struct {
	pulumi.CustomResourceState

	// The ARN of the asset
	AssetArn         pulumi.StringOutput            `pulumi:"assetArn"`
	AssetHierarchies AssetAssetHierarchyArrayOutput `pulumi:"assetHierarchies"`
	// The ID of the asset
	AssetId pulumi.StringOutput `pulumi:"assetId"`
	// The ID of the asset model from which to create the asset.
	AssetModelId pulumi.StringOutput `pulumi:"assetModelId"`
	// A unique, friendly name for the asset.
	AssetName       pulumi.StringOutput           `pulumi:"assetName"`
	AssetProperties AssetAssetPropertyArrayOutput `pulumi:"assetProperties"`
	// A list of key-value pairs that contain metadata for the asset.
	Tags AssetTagArrayOutput `pulumi:"tags"`
}

// NewAsset registers a new resource with the given unique name, arguments, and options.
func NewAsset(ctx *pulumi.Context,
	name string, args *AssetArgs, opts ...pulumi.ResourceOption) (*Asset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssetModelId == nil {
		return nil, errors.New("invalid value for required argument 'AssetModelId'")
	}
	if args.AssetName == nil {
		return nil, errors.New("invalid value for required argument 'AssetName'")
	}
	var resource Asset
	err := ctx.RegisterResource("aws-native:iotsitewise:Asset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAsset gets an existing Asset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAsset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetState, opts ...pulumi.ResourceOption) (*Asset, error) {
	var resource Asset
	err := ctx.ReadResource("aws-native:iotsitewise:Asset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Asset resources.
type assetState struct {
}

type AssetState struct {
}

func (AssetState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetState)(nil)).Elem()
}

type assetArgs struct {
	AssetHierarchies []AssetAssetHierarchy `pulumi:"assetHierarchies"`
	// The ID of the asset model from which to create the asset.
	AssetModelId string `pulumi:"assetModelId"`
	// A unique, friendly name for the asset.
	AssetName       string               `pulumi:"assetName"`
	AssetProperties []AssetAssetProperty `pulumi:"assetProperties"`
	// A list of key-value pairs that contain metadata for the asset.
	Tags []AssetTag `pulumi:"tags"`
}

// The set of arguments for constructing a Asset resource.
type AssetArgs struct {
	AssetHierarchies AssetAssetHierarchyArrayInput
	// The ID of the asset model from which to create the asset.
	AssetModelId pulumi.StringInput
	// A unique, friendly name for the asset.
	AssetName       pulumi.StringInput
	AssetProperties AssetAssetPropertyArrayInput
	// A list of key-value pairs that contain metadata for the asset.
	Tags AssetTagArrayInput
}

func (AssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetArgs)(nil)).Elem()
}

type AssetInput interface {
	pulumi.Input

	ToAssetOutput() AssetOutput
	ToAssetOutputWithContext(ctx context.Context) AssetOutput
}

func (*Asset) ElementType() reflect.Type {
	return reflect.TypeOf((*Asset)(nil))
}

func (i *Asset) ToAssetOutput() AssetOutput {
	return i.ToAssetOutputWithContext(context.Background())
}

func (i *Asset) ToAssetOutputWithContext(ctx context.Context) AssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetOutput)
}

type AssetOutput struct{ *pulumi.OutputState }

func (AssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Asset)(nil))
}

func (o AssetOutput) ToAssetOutput() AssetOutput {
	return o
}

func (o AssetOutput) ToAssetOutputWithContext(ctx context.Context) AssetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AssetOutput{})
}
