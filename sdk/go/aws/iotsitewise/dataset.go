// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotsitewise

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::IoTSiteWise::Dataset.
type Dataset struct {
	pulumi.CustomResourceState

	// The ARN of the dataset.
	DatasetArn pulumi.StringOutput `pulumi:"datasetArn"`
	// A description about the dataset, and its functionality.
	DatasetDescription pulumi.StringPtrOutput `pulumi:"datasetDescription"`
	// The ID of the dataset.
	DatasetId pulumi.StringOutput `pulumi:"datasetId"`
	// The name of the dataset.
	DatasetName pulumi.StringOutput `pulumi:"datasetName"`
	// The data source for the dataset.
	DatasetSource DatasetSourceOutput `pulumi:"datasetSource"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetSource == nil {
		return nil, errors.New("invalid value for required argument 'DatasetSource'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dataset
	err := ctx.RegisterResource("aws-native:iotsitewise:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("aws-native:iotsitewise:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
}

type DatasetState struct {
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	// A description about the dataset, and its functionality.
	DatasetDescription *string `pulumi:"datasetDescription"`
	// The name of the dataset.
	DatasetName *string `pulumi:"datasetName"`
	// The data source for the dataset.
	DatasetSource DatasetSource `pulumi:"datasetSource"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	// A description about the dataset, and its functionality.
	DatasetDescription pulumi.StringPtrInput
	// The name of the dataset.
	DatasetName pulumi.StringPtrInput
	// The data source for the dataset.
	DatasetSource DatasetSourceInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

// The ARN of the dataset.
func (o DatasetOutput) DatasetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.DatasetArn }).(pulumi.StringOutput)
}

// A description about the dataset, and its functionality.
func (o DatasetOutput) DatasetDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringPtrOutput { return v.DatasetDescription }).(pulumi.StringPtrOutput)
}

// The ID of the dataset.
func (o DatasetOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// The name of the dataset.
func (o DatasetOutput) DatasetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.DatasetName }).(pulumi.StringOutput)
}

// The data source for the dataset.
func (o DatasetOutput) DatasetSource() DatasetSourceOutput {
	return o.ApplyT(func(v *Dataset) DatasetSourceOutput { return v.DatasetSource }).(DatasetSourceOutput)
}

// An array of key-value pairs to apply to this resource.
func (o DatasetOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Dataset) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetInput)(nil)).Elem(), &Dataset{})
	pulumi.RegisterOutputType(DatasetOutput{})
}
