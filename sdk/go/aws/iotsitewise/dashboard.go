// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iotsitewise

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::IoTSiteWise::Dashboard
type Dashboard struct {
	pulumi.CustomResourceState

	// The ARN of the dashboard.
	DashboardArn pulumi.StringOutput `pulumi:"dashboardArn"`
	// The dashboard definition specified in a JSON literal.
	DashboardDefinition pulumi.StringOutput `pulumi:"dashboardDefinition"`
	// A description for the dashboard.
	DashboardDescription pulumi.StringOutput `pulumi:"dashboardDescription"`
	// The ID of the dashboard.
	DashboardId pulumi.StringOutput `pulumi:"dashboardId"`
	// A friendly name for the dashboard.
	DashboardName pulumi.StringOutput `pulumi:"dashboardName"`
	// The ID of the project in which to create the dashboard.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// A list of key-value pairs that contain metadata for the dashboard.
	Tags DashboardTagArrayOutput `pulumi:"tags"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardDefinition == nil {
		return nil, errors.New("invalid value for required argument 'DashboardDefinition'")
	}
	if args.DashboardDescription == nil {
		return nil, errors.New("invalid value for required argument 'DashboardDescription'")
	}
	if args.DashboardName == nil {
		return nil, errors.New("invalid value for required argument 'DashboardName'")
	}
	var resource Dashboard
	err := ctx.RegisterResource("aws-native:iotsitewise:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("aws-native:iotsitewise:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
}

type DashboardState struct {
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// The dashboard definition specified in a JSON literal.
	DashboardDefinition string `pulumi:"dashboardDefinition"`
	// A description for the dashboard.
	DashboardDescription string `pulumi:"dashboardDescription"`
	// A friendly name for the dashboard.
	DashboardName string `pulumi:"dashboardName"`
	// The ID of the project in which to create the dashboard.
	ProjectId *string `pulumi:"projectId"`
	// A list of key-value pairs that contain metadata for the dashboard.
	Tags []DashboardTag `pulumi:"tags"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The dashboard definition specified in a JSON literal.
	DashboardDefinition pulumi.StringInput
	// A description for the dashboard.
	DashboardDescription pulumi.StringInput
	// A friendly name for the dashboard.
	DashboardName pulumi.StringInput
	// The ID of the project in which to create the dashboard.
	ProjectId pulumi.StringPtrInput
	// A list of key-value pairs that contain metadata for the dashboard.
	Tags DashboardTagArrayInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((*Dashboard)(nil))
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dashboard)(nil))
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterOutputType(DashboardOutput{})
}
