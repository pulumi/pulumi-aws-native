// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearchservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Amazon OpenSearchService application resource
type Application struct {
	pulumi.CustomResourceState

	// List of application configurations.
	AppConfigs ApplicationAppConfigArrayOutput `pulumi:"appConfigs"`
	// Amazon Resource Name (ARN) format.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The identifier of the application.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// List of data sources.
	DataSources ApplicationDataSourceArrayOutput `pulumi:"dataSources"`
	// The endpoint for the application.
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// Options for configuring IAM Identity Center
	IamIdentityCenterOptions IamIdentityCenterOptionsPropertiesPtrOutput `pulumi:"iamIdentityCenterOptions"`
	// The name of the application.
	Name pulumi.StringOutput `pulumi:"name"`
	// An arbitrary set of tags (key-value pairs) for this application.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		args = &ApplicationArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:opensearchservice:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:opensearchservice:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// List of application configurations.
	AppConfigs []ApplicationAppConfig `pulumi:"appConfigs"`
	// List of data sources.
	DataSources []ApplicationDataSource `pulumi:"dataSources"`
	// The endpoint for the application.
	Endpoint *string `pulumi:"endpoint"`
	// Options for configuring IAM Identity Center
	IamIdentityCenterOptions *IamIdentityCenterOptionsProperties `pulumi:"iamIdentityCenterOptions"`
	// The name of the application.
	Name *string `pulumi:"name"`
	// An arbitrary set of tags (key-value pairs) for this application.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// List of application configurations.
	AppConfigs ApplicationAppConfigArrayInput
	// List of data sources.
	DataSources ApplicationDataSourceArrayInput
	// The endpoint for the application.
	Endpoint pulumi.StringPtrInput
	// Options for configuring IAM Identity Center
	IamIdentityCenterOptions IamIdentityCenterOptionsPropertiesPtrInput
	// The name of the application.
	Name pulumi.StringPtrInput
	// An arbitrary set of tags (key-value pairs) for this application.
	Tags aws.TagArrayInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// List of application configurations.
func (o ApplicationOutput) AppConfigs() ApplicationAppConfigArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationAppConfigArrayOutput { return v.AppConfigs }).(ApplicationAppConfigArrayOutput)
}

// Amazon Resource Name (ARN) format.
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The identifier of the application.
func (o ApplicationOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// List of data sources.
func (o ApplicationOutput) DataSources() ApplicationDataSourceArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationDataSourceArrayOutput { return v.DataSources }).(ApplicationDataSourceArrayOutput)
}

// The endpoint for the application.
func (o ApplicationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Options for configuring IAM Identity Center
func (o ApplicationOutput) IamIdentityCenterOptions() IamIdentityCenterOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v *Application) IamIdentityCenterOptionsPropertiesPtrOutput { return v.IamIdentityCenterOptions }).(IamIdentityCenterOptionsPropertiesPtrOutput)
}

// The name of the application.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An arbitrary set of tags (key-value pairs) for this application.
func (o ApplicationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Application) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
