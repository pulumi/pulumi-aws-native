// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package panorama

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema for PackageVersion Resource Type
type PackageVersion struct {
	pulumi.CustomResourceState

	// Whether the package version is the latest version.
	IsLatestPatch pulumi.BoolOutput `pulumi:"isLatestPatch"`
	// Whether to mark the new version as the latest version.
	MarkLatest pulumi.BoolPtrOutput `pulumi:"markLatest"`
	// An owner account.
	OwnerAccount pulumi.StringPtrOutput `pulumi:"ownerAccount"`
	// The package version's ARN.
	PackageArn pulumi.StringOutput `pulumi:"packageArn"`
	// A package ID.
	PackageId pulumi.StringOutput `pulumi:"packageId"`
	// The package version's name.
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	// A package version.
	PackageVersion pulumi.StringOutput `pulumi:"packageVersion"`
	// A patch version.
	PatchVersion pulumi.StringOutput `pulumi:"patchVersion"`
	// The package version's registered time.
	RegisteredTime pulumi.IntOutput `pulumi:"registeredTime"`
	// The package version's status.
	Status PackageVersionStatusOutput `pulumi:"status"`
	// The package version's status description.
	StatusDescription pulumi.StringOutput `pulumi:"statusDescription"`
	// If the version was marked latest, the new version to maker as latest.
	UpdatedLatestPatchVersion pulumi.StringPtrOutput `pulumi:"updatedLatestPatchVersion"`
}

// NewPackageVersion registers a new resource with the given unique name, arguments, and options.
func NewPackageVersion(ctx *pulumi.Context,
	name string, args *PackageVersionArgs, opts ...pulumi.ResourceOption) (*PackageVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PackageId == nil {
		return nil, errors.New("invalid value for required argument 'PackageId'")
	}
	if args.PackageVersion == nil {
		return nil, errors.New("invalid value for required argument 'PackageVersion'")
	}
	if args.PatchVersion == nil {
		return nil, errors.New("invalid value for required argument 'PatchVersion'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"ownerAccount",
		"packageId",
		"packageVersion",
		"patchVersion",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PackageVersion
	err := ctx.RegisterResource("aws-native:panorama:PackageVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPackageVersion gets an existing PackageVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPackageVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PackageVersionState, opts ...pulumi.ResourceOption) (*PackageVersion, error) {
	var resource PackageVersion
	err := ctx.ReadResource("aws-native:panorama:PackageVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PackageVersion resources.
type packageVersionState struct {
}

type PackageVersionState struct {
}

func (PackageVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*packageVersionState)(nil)).Elem()
}

type packageVersionArgs struct {
	// Whether to mark the new version as the latest version.
	MarkLatest *bool `pulumi:"markLatest"`
	// An owner account.
	OwnerAccount *string `pulumi:"ownerAccount"`
	// A package ID.
	PackageId string `pulumi:"packageId"`
	// A package version.
	PackageVersion string `pulumi:"packageVersion"`
	// A patch version.
	PatchVersion string `pulumi:"patchVersion"`
	// If the version was marked latest, the new version to maker as latest.
	UpdatedLatestPatchVersion *string `pulumi:"updatedLatestPatchVersion"`
}

// The set of arguments for constructing a PackageVersion resource.
type PackageVersionArgs struct {
	// Whether to mark the new version as the latest version.
	MarkLatest pulumi.BoolPtrInput
	// An owner account.
	OwnerAccount pulumi.StringPtrInput
	// A package ID.
	PackageId pulumi.StringInput
	// A package version.
	PackageVersion pulumi.StringInput
	// A patch version.
	PatchVersion pulumi.StringInput
	// If the version was marked latest, the new version to maker as latest.
	UpdatedLatestPatchVersion pulumi.StringPtrInput
}

func (PackageVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packageVersionArgs)(nil)).Elem()
}

type PackageVersionInput interface {
	pulumi.Input

	ToPackageVersionOutput() PackageVersionOutput
	ToPackageVersionOutputWithContext(ctx context.Context) PackageVersionOutput
}

func (*PackageVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageVersion)(nil)).Elem()
}

func (i *PackageVersion) ToPackageVersionOutput() PackageVersionOutput {
	return i.ToPackageVersionOutputWithContext(context.Background())
}

func (i *PackageVersion) ToPackageVersionOutputWithContext(ctx context.Context) PackageVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageVersionOutput)
}

type PackageVersionOutput struct{ *pulumi.OutputState }

func (PackageVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageVersion)(nil)).Elem()
}

func (o PackageVersionOutput) ToPackageVersionOutput() PackageVersionOutput {
	return o
}

func (o PackageVersionOutput) ToPackageVersionOutputWithContext(ctx context.Context) PackageVersionOutput {
	return o
}

// Whether the package version is the latest version.
func (o PackageVersionOutput) IsLatestPatch() pulumi.BoolOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.BoolOutput { return v.IsLatestPatch }).(pulumi.BoolOutput)
}

// Whether to mark the new version as the latest version.
func (o PackageVersionOutput) MarkLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.BoolPtrOutput { return v.MarkLatest }).(pulumi.BoolPtrOutput)
}

// An owner account.
func (o PackageVersionOutput) OwnerAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.OwnerAccount }).(pulumi.StringPtrOutput)
}

// The package version's ARN.
func (o PackageVersionOutput) PackageArn() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.PackageArn }).(pulumi.StringOutput)
}

// A package ID.
func (o PackageVersionOutput) PackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.PackageId }).(pulumi.StringOutput)
}

// The package version's name.
func (o PackageVersionOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.PackageName }).(pulumi.StringOutput)
}

// A package version.
func (o PackageVersionOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.PackageVersion }).(pulumi.StringOutput)
}

// A patch version.
func (o PackageVersionOutput) PatchVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.PatchVersion }).(pulumi.StringOutput)
}

// The package version's registered time.
func (o PackageVersionOutput) RegisteredTime() pulumi.IntOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.IntOutput { return v.RegisteredTime }).(pulumi.IntOutput)
}

// The package version's status.
func (o PackageVersionOutput) Status() PackageVersionStatusOutput {
	return o.ApplyT(func(v *PackageVersion) PackageVersionStatusOutput { return v.Status }).(PackageVersionStatusOutput)
}

// The package version's status description.
func (o PackageVersionOutput) StatusDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringOutput { return v.StatusDescription }).(pulumi.StringOutput)
}

// If the version was marked latest, the new version to maker as latest.
func (o PackageVersionOutput) UpdatedLatestPatchVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PackageVersion) pulumi.StringPtrOutput { return v.UpdatedLatestPatchVersion }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PackageVersionInput)(nil)).Elem(), &PackageVersion{})
	pulumi.RegisterOutputType(PackageVersionOutput{})
}
