// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package panorama

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a package and storage location in an Amazon S3 access point.
type Package struct {
	pulumi.CustomResourceState

	// The package's ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// When the package was created.
	CreatedTime pulumi.IntOutput `pulumi:"createdTime"`
	// The package's ID.
	PackageId pulumi.StringOutput `pulumi:"packageId"`
	// A name for the package.
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	// A storage location.
	StorageLocation PackageStorageLocationPtrOutput `pulumi:"storageLocation"`
	// Tags for the package.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewPackage registers a new resource with the given unique name, arguments, and options.
func NewPackage(ctx *pulumi.Context,
	name string, args *PackageArgs, opts ...pulumi.ResourceOption) (*Package, error) {
	if args == nil {
		args = &PackageArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"packageName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Package
	err := ctx.RegisterResource("aws-native:panorama:Package", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPackage gets an existing Package resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PackageState, opts ...pulumi.ResourceOption) (*Package, error) {
	var resource Package
	err := ctx.ReadResource("aws-native:panorama:Package", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Package resources.
type packageState struct {
}

type PackageState struct {
}

func (PackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*packageState)(nil)).Elem()
}

type packageArgs struct {
	// A name for the package.
	PackageName *string `pulumi:"packageName"`
	// A storage location.
	StorageLocation *PackageStorageLocation `pulumi:"storageLocation"`
	// Tags for the package.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Package resource.
type PackageArgs struct {
	// A name for the package.
	PackageName pulumi.StringPtrInput
	// A storage location.
	StorageLocation PackageStorageLocationPtrInput
	// Tags for the package.
	Tags aws.TagArrayInput
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packageArgs)(nil)).Elem()
}

type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(ctx context.Context) PackageOutput
}

func (*Package) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (i *Package) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i *Package) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

// The package's ARN.
func (o PackageOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// When the package was created.
func (o PackageOutput) CreatedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Package) pulumi.IntOutput { return v.CreatedTime }).(pulumi.IntOutput)
}

// The package's ID.
func (o PackageOutput) PackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.PackageId }).(pulumi.StringOutput)
}

// A name for the package.
func (o PackageOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.PackageName }).(pulumi.StringOutput)
}

// A storage location.
func (o PackageOutput) StorageLocation() PackageStorageLocationPtrOutput {
	return o.ApplyT(func(v *Package) PackageStorageLocationPtrOutput { return v.StorageLocation }).(PackageStorageLocationPtrOutput)
}

// Tags for the package.
func (o PackageOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Package) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInput)(nil)).Elem(), &Package{})
	pulumi.RegisterOutputType(PackageOutput{})
}
