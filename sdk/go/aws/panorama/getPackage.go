// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package panorama

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a package and storage location in an Amazon S3 access point.
func LookupPackage(ctx *pulumi.Context, args *LookupPackageArgs, opts ...pulumi.InvokeOption) (*LookupPackageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPackageResult
	err := ctx.Invoke("aws-native:panorama:getPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPackageArgs struct {
	// The package's ID.
	PackageId string `pulumi:"packageId"`
}

type LookupPackageResult struct {
	// The package's ARN.
	Arn *string `pulumi:"arn"`
	// When the package was created.
	CreatedTime *int `pulumi:"createdTime"`
	// The package's ID.
	PackageId *string `pulumi:"packageId"`
	// A storage location.
	StorageLocation *PackageStorageLocation `pulumi:"storageLocation"`
	// Tags for the package.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupPackageOutput(ctx *pulumi.Context, args LookupPackageOutputArgs, opts ...pulumi.InvokeOption) LookupPackageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPackageResultOutput, error) {
			args := v.(LookupPackageArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPackageResult
			secret, err := ctx.InvokePackageRaw("aws-native:panorama:getPackage", args, &rv, "", opts...)
			if err != nil {
				return LookupPackageResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPackageResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPackageResultOutput), nil
			}
			return output, nil
		}).(LookupPackageResultOutput)
}

type LookupPackageOutputArgs struct {
	// The package's ID.
	PackageId pulumi.StringInput `pulumi:"packageId"`
}

func (LookupPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPackageArgs)(nil)).Elem()
}

type LookupPackageResultOutput struct{ *pulumi.OutputState }

func (LookupPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPackageResult)(nil)).Elem()
}

func (o LookupPackageResultOutput) ToLookupPackageResultOutput() LookupPackageResultOutput {
	return o
}

func (o LookupPackageResultOutput) ToLookupPackageResultOutputWithContext(ctx context.Context) LookupPackageResultOutput {
	return o
}

// The package's ARN.
func (o LookupPackageResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// When the package was created.
func (o LookupPackageResultOutput) CreatedTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *int { return v.CreatedTime }).(pulumi.IntPtrOutput)
}

// The package's ID.
func (o LookupPackageResultOutput) PackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *string { return v.PackageId }).(pulumi.StringPtrOutput)
}

// A storage location.
func (o LookupPackageResultOutput) StorageLocation() PackageStorageLocationPtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *PackageStorageLocation { return v.StorageLocation }).(PackageStorageLocationPtrOutput)
}

// Tags for the package.
func (o LookupPackageResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupPackageResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPackageResultOutput{})
}
