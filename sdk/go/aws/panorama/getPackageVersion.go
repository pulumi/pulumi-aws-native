// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package panorama

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema for PackageVersion Resource Type
func LookupPackageVersion(ctx *pulumi.Context, args *LookupPackageVersionArgs, opts ...pulumi.InvokeOption) (*LookupPackageVersionResult, error) {
	var rv LookupPackageVersionResult
	err := ctx.Invoke("aws-native:panorama:getPackageVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPackageVersionArgs struct {
	PackageId      string `pulumi:"packageId"`
	PackageVersion string `pulumi:"packageVersion"`
	PatchVersion   string `pulumi:"patchVersion"`
}

type LookupPackageVersionResult struct {
	IsLatestPatch             *bool                 `pulumi:"isLatestPatch"`
	MarkLatest                *bool                 `pulumi:"markLatest"`
	PackageArn                *string               `pulumi:"packageArn"`
	PackageName               *string               `pulumi:"packageName"`
	RegisteredTime            *int                  `pulumi:"registeredTime"`
	Status                    *PackageVersionStatus `pulumi:"status"`
	StatusDescription         *string               `pulumi:"statusDescription"`
	UpdatedLatestPatchVersion *string               `pulumi:"updatedLatestPatchVersion"`
}

func LookupPackageVersionOutput(ctx *pulumi.Context, args LookupPackageVersionOutputArgs, opts ...pulumi.InvokeOption) LookupPackageVersionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPackageVersionResult, error) {
			args := v.(LookupPackageVersionArgs)
			r, err := LookupPackageVersion(ctx, &args, opts...)
			var s LookupPackageVersionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPackageVersionResultOutput)
}

type LookupPackageVersionOutputArgs struct {
	PackageId      pulumi.StringInput `pulumi:"packageId"`
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	PatchVersion   pulumi.StringInput `pulumi:"patchVersion"`
}

func (LookupPackageVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPackageVersionArgs)(nil)).Elem()
}

type LookupPackageVersionResultOutput struct{ *pulumi.OutputState }

func (LookupPackageVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPackageVersionResult)(nil)).Elem()
}

func (o LookupPackageVersionResultOutput) ToLookupPackageVersionResultOutput() LookupPackageVersionResultOutput {
	return o
}

func (o LookupPackageVersionResultOutput) ToLookupPackageVersionResultOutputWithContext(ctx context.Context) LookupPackageVersionResultOutput {
	return o
}

func (o LookupPackageVersionResultOutput) IsLatestPatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *bool { return v.IsLatestPatch }).(pulumi.BoolPtrOutput)
}

func (o LookupPackageVersionResultOutput) MarkLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *bool { return v.MarkLatest }).(pulumi.BoolPtrOutput)
}

func (o LookupPackageVersionResultOutput) PackageArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *string { return v.PackageArn }).(pulumi.StringPtrOutput)
}

func (o LookupPackageVersionResultOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

func (o LookupPackageVersionResultOutput) RegisteredTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *int { return v.RegisteredTime }).(pulumi.IntPtrOutput)
}

func (o LookupPackageVersionResultOutput) Status() PackageVersionStatusPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *PackageVersionStatus { return v.Status }).(PackageVersionStatusPtrOutput)
}

func (o LookupPackageVersionResultOutput) StatusDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *string { return v.StatusDescription }).(pulumi.StringPtrOutput)
}

func (o LookupPackageVersionResultOutput) UpdatedLatestPatchVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageVersionResult) *string { return v.UpdatedLatestPatchVersion }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPackageVersionResultOutput{})
}
