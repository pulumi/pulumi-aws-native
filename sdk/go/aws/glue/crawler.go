// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Crawler
type Crawler struct {
	pulumi.CustomResourceState

	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
	Classifiers pulumi.StringArrayOutput `pulumi:"classifiers"`
	// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html) .
	Configuration pulumi.StringPtrOutput `pulumi:"configuration"`
	// The name of the `SecurityConfiguration` structure to be used by this crawler.
	CrawlerSecurityConfiguration pulumi.StringPtrOutput `pulumi:"crawlerSecurityConfiguration"`
	// The name of the database in which the crawler's output is stored.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// A description of the crawler.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether the crawler should use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
	LakeFormationConfiguration CrawlerLakeFormationConfigurationPtrOutput `pulumi:"lakeFormationConfiguration"`
	// The name of the crawler.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
	RecrawlPolicy CrawlerRecrawlPolicyPtrOutput `pulumi:"recrawlPolicy"`
	// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
	Role pulumi.StringOutput `pulumi:"role"`
	// For scheduled crawlers, the schedule when the crawler runs.
	Schedule CrawlerSchedulePtrOutput `pulumi:"schedule"`
	// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The `SchemaChangePolicy` does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the `SchemaChangePolicy` on a crawler.
	//
	// The SchemaChangePolicy consists of two components, `UpdateBehavior` and `DeleteBehavior` .
	SchemaChangePolicy CrawlerSchemaChangePolicyPtrOutput `pulumi:"schemaChangePolicy"`
	// The prefix added to the names of tables that are created.
	TablePrefix pulumi.StringPtrOutput `pulumi:"tablePrefix"`
	// The tags to use with this crawler.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Crawler` for more information about the expected schema for this property.
	Tags pulumi.AnyOutput `pulumi:"tags"`
	// A collection of targets to crawl.
	Targets CrawlerTargetsOutput `pulumi:"targets"`
}

// NewCrawler registers a new resource with the given unique name, arguments, and options.
func NewCrawler(ctx *pulumi.Context,
	name string, args *CrawlerArgs, opts ...pulumi.ResourceOption) (*Crawler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Crawler
	err := ctx.RegisterResource("aws-native:glue:Crawler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrawler gets an existing Crawler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrawler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrawlerState, opts ...pulumi.ResourceOption) (*Crawler, error) {
	var resource Crawler
	err := ctx.ReadResource("aws-native:glue:Crawler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Crawler resources.
type crawlerState struct {
}

type CrawlerState struct {
}

func (CrawlerState) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerState)(nil)).Elem()
}

type crawlerArgs struct {
	// A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
	Classifiers []string `pulumi:"classifiers"`
	// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html) .
	Configuration *string `pulumi:"configuration"`
	// The name of the `SecurityConfiguration` structure to be used by this crawler.
	CrawlerSecurityConfiguration *string `pulumi:"crawlerSecurityConfiguration"`
	// The name of the database in which the crawler's output is stored.
	DatabaseName *string `pulumi:"databaseName"`
	// A description of the crawler.
	Description *string `pulumi:"description"`
	// Specifies whether the crawler should use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
	LakeFormationConfiguration *CrawlerLakeFormationConfiguration `pulumi:"lakeFormationConfiguration"`
	// The name of the crawler.
	Name *string `pulumi:"name"`
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
	RecrawlPolicy *CrawlerRecrawlPolicy `pulumi:"recrawlPolicy"`
	// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
	Role string `pulumi:"role"`
	// For scheduled crawlers, the schedule when the crawler runs.
	Schedule *CrawlerSchedule `pulumi:"schedule"`
	// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The `SchemaChangePolicy` does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the `SchemaChangePolicy` on a crawler.
	//
	// The SchemaChangePolicy consists of two components, `UpdateBehavior` and `DeleteBehavior` .
	SchemaChangePolicy *CrawlerSchemaChangePolicy `pulumi:"schemaChangePolicy"`
	// The prefix added to the names of tables that are created.
	TablePrefix *string `pulumi:"tablePrefix"`
	// The tags to use with this crawler.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Crawler` for more information about the expected schema for this property.
	Tags interface{} `pulumi:"tags"`
	// A collection of targets to crawl.
	Targets CrawlerTargets `pulumi:"targets"`
}

// The set of arguments for constructing a Crawler resource.
type CrawlerArgs struct {
	// A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
	Classifiers pulumi.StringArrayInput
	// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html) .
	Configuration pulumi.StringPtrInput
	// The name of the `SecurityConfiguration` structure to be used by this crawler.
	CrawlerSecurityConfiguration pulumi.StringPtrInput
	// The name of the database in which the crawler's output is stored.
	DatabaseName pulumi.StringPtrInput
	// A description of the crawler.
	Description pulumi.StringPtrInput
	// Specifies whether the crawler should use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
	LakeFormationConfiguration CrawlerLakeFormationConfigurationPtrInput
	// The name of the crawler.
	Name pulumi.StringPtrInput
	// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
	RecrawlPolicy CrawlerRecrawlPolicyPtrInput
	// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
	Role pulumi.StringInput
	// For scheduled crawlers, the schedule when the crawler runs.
	Schedule CrawlerSchedulePtrInput
	// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The `SchemaChangePolicy` does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the `SchemaChangePolicy` on a crawler.
	//
	// The SchemaChangePolicy consists of two components, `UpdateBehavior` and `DeleteBehavior` .
	SchemaChangePolicy CrawlerSchemaChangePolicyPtrInput
	// The prefix added to the names of tables that are created.
	TablePrefix pulumi.StringPtrInput
	// The tags to use with this crawler.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Crawler` for more information about the expected schema for this property.
	Tags pulumi.Input
	// A collection of targets to crawl.
	Targets CrawlerTargetsInput
}

func (CrawlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crawlerArgs)(nil)).Elem()
}

type CrawlerInput interface {
	pulumi.Input

	ToCrawlerOutput() CrawlerOutput
	ToCrawlerOutputWithContext(ctx context.Context) CrawlerOutput
}

func (*Crawler) ElementType() reflect.Type {
	return reflect.TypeOf((**Crawler)(nil)).Elem()
}

func (i *Crawler) ToCrawlerOutput() CrawlerOutput {
	return i.ToCrawlerOutputWithContext(context.Background())
}

func (i *Crawler) ToCrawlerOutputWithContext(ctx context.Context) CrawlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerOutput)
}

type CrawlerOutput struct{ *pulumi.OutputState }

func (CrawlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Crawler)(nil)).Elem()
}

func (o CrawlerOutput) ToCrawlerOutput() CrawlerOutput {
	return o
}

func (o CrawlerOutput) ToCrawlerOutputWithContext(ctx context.Context) CrawlerOutput {
	return o
}

func (o CrawlerOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
func (o CrawlerOutput) Classifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringArrayOutput { return v.Classifiers }).(pulumi.StringArrayOutput)
}

// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html) .
func (o CrawlerOutput) Configuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.Configuration }).(pulumi.StringPtrOutput)
}

// The name of the `SecurityConfiguration` structure to be used by this crawler.
func (o CrawlerOutput) CrawlerSecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.CrawlerSecurityConfiguration }).(pulumi.StringPtrOutput)
}

// The name of the database in which the crawler's output is stored.
func (o CrawlerOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// A description of the crawler.
func (o CrawlerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the crawler should use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
func (o CrawlerOutput) LakeFormationConfiguration() CrawlerLakeFormationConfigurationPtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerLakeFormationConfigurationPtrOutput { return v.LakeFormationConfiguration }).(CrawlerLakeFormationConfigurationPtrOutput)
}

// The name of the crawler.
func (o CrawlerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
func (o CrawlerOutput) RecrawlPolicy() CrawlerRecrawlPolicyPtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerRecrawlPolicyPtrOutput { return v.RecrawlPolicy }).(CrawlerRecrawlPolicyPtrOutput)
}

// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
func (o CrawlerOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// For scheduled crawlers, the schedule when the crawler runs.
func (o CrawlerOutput) Schedule() CrawlerSchedulePtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerSchedulePtrOutput { return v.Schedule }).(CrawlerSchedulePtrOutput)
}

// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The `SchemaChangePolicy` does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the `SchemaChangePolicy` on a crawler.
//
// The SchemaChangePolicy consists of two components, `UpdateBehavior` and `DeleteBehavior` .
func (o CrawlerOutput) SchemaChangePolicy() CrawlerSchemaChangePolicyPtrOutput {
	return o.ApplyT(func(v *Crawler) CrawlerSchemaChangePolicyPtrOutput { return v.SchemaChangePolicy }).(CrawlerSchemaChangePolicyPtrOutput)
}

// The prefix added to the names of tables that are created.
func (o CrawlerOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crawler) pulumi.StringPtrOutput { return v.TablePrefix }).(pulumi.StringPtrOutput)
}

// The tags to use with this crawler.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Crawler` for more information about the expected schema for this property.
func (o CrawlerOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Crawler) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

// A collection of targets to crawl.
func (o CrawlerOutput) Targets() CrawlerTargetsOutput {
	return o.ApplyT(func(v *Crawler) CrawlerTargetsOutput { return v.Targets }).(CrawlerTargetsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerInput)(nil)).Elem(), &Crawler{})
	pulumi.RegisterOutputType(CrawlerOutput{})
}
