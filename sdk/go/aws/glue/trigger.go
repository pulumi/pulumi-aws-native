// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Trigger
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewTrigger(ctx, "onDemandJobTrigger", &glue.TriggerArgs{
//				Type:        pulumi.String("ON_DEMAND"),
//				Description: pulumi.String("DESCRIPTION_ON_DEMAND"),
//				Actions: glue.TriggerActionArray{
//					&glue.TriggerActionArgs{
//						JobName: pulumi.String("prod-job2"),
//					},
//				},
//				Name: pulumi.String("prod-trigger1-ondemand"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewTrigger(ctx, "onDemandJobTrigger", &glue.TriggerArgs{
//				Type:        pulumi.String("ON_DEMAND"),
//				Description: pulumi.String("DESCRIPTION_ON_DEMAND"),
//				Actions: glue.TriggerActionArray{
//					&glue.TriggerActionArgs{
//						JobName: pulumi.String("prod-job2"),
//					},
//				},
//				Name: pulumi.String("prod-trigger1-ondemand"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewTrigger(ctx, "scheduledJobTrigger", &glue.TriggerArgs{
//				Type:        pulumi.String("SCHEDULED"),
//				Description: pulumi.String("DESCRIPTION_SCHEDULED"),
//				Schedule:    pulumi.String("cron(0 */2 * * ? *)"),
//				Actions: glue.TriggerActionArray{
//					&glue.TriggerActionArgs{
//						JobName: pulumi.String("prod-job2"),
//					},
//					&glue.TriggerActionArgs{
//						JobName: pulumi.String("prod-job3"),
//						Arguments: pulumi.Any(map[string]interface{}{
//							"--job-bookmark-option": "job-bookmark-enable",
//						}),
//					},
//				},
//				Name: pulumi.String("prod-trigger1-scheduled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/glue"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := glue.NewTrigger(ctx, "scheduledJobTrigger", &glue.TriggerArgs{
//				Type:        pulumi.String("SCHEDULED"),
//				Description: pulumi.String("DESCRIPTION_SCHEDULED"),
//				Schedule:    pulumi.String("cron(0 */2 * * ? *)"),
//				Actions: glue.TriggerActionArray{
//					&glue.TriggerActionArgs{
//						JobName: pulumi.String("prod-job2"),
//					},
//					&glue.TriggerActionArgs{
//						JobName: pulumi.String("prod-job3"),
//						Arguments: pulumi.Any(map[string]interface{}{
//							"--job-bookmark-option": "job-bookmark-enable",
//						}),
//					},
//				},
//				Name: pulumi.String("prod-trigger1-scheduled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Trigger struct {
	pulumi.CustomResourceState

	// The actions initiated by this trigger.
	Actions TriggerActionArrayOutput `pulumi:"actions"`
	// Reserved for future use.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A description of this trigger.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
	EventBatchingCondition TriggerEventBatchingConditionPtrOutput `pulumi:"eventBatchingCondition"`
	// The name of the trigger.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The predicate of this trigger, which defines when it will fire.
	Predicate TriggerPredicatePtrOutput `pulumi:"predicate"`
	// A `cron` expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html) in the *AWS Glue Developer Guide* . For example, to run something every day at 12:15 UTC, specify `cron(15 12 * * ? *)` .
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation pulumi.BoolPtrOutput `pulumi:"startOnCreation"`
	// The tags to use with this trigger.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
	Tags pulumi.AnyOutput `pulumi:"tags"`
	// The type of trigger that this is.
	Type pulumi.StringOutput `pulumi:"type"`
	// The name of the workflow associated with the trigger.
	WorkflowName pulumi.StringPtrOutput `pulumi:"workflowName"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"type",
		"workflowName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trigger
	err := ctx.RegisterResource("aws-native:glue:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("aws-native:glue:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
}

type TriggerState struct {
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// The actions initiated by this trigger.
	Actions []TriggerAction `pulumi:"actions"`
	// A description of this trigger.
	Description *string `pulumi:"description"`
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
	EventBatchingCondition *TriggerEventBatchingCondition `pulumi:"eventBatchingCondition"`
	// The name of the trigger.
	Name *string `pulumi:"name"`
	// The predicate of this trigger, which defines when it will fire.
	Predicate *TriggerPredicate `pulumi:"predicate"`
	// A `cron` expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html) in the *AWS Glue Developer Guide* . For example, to run something every day at 12:15 UTC, specify `cron(15 12 * * ? *)` .
	Schedule *string `pulumi:"schedule"`
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation *bool `pulumi:"startOnCreation"`
	// The tags to use with this trigger.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
	Tags interface{} `pulumi:"tags"`
	// The type of trigger that this is.
	Type string `pulumi:"type"`
	// The name of the workflow associated with the trigger.
	WorkflowName *string `pulumi:"workflowName"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// The actions initiated by this trigger.
	Actions TriggerActionArrayInput
	// A description of this trigger.
	Description pulumi.StringPtrInput
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
	EventBatchingCondition TriggerEventBatchingConditionPtrInput
	// The name of the trigger.
	Name pulumi.StringPtrInput
	// The predicate of this trigger, which defines when it will fire.
	Predicate TriggerPredicatePtrInput
	// A `cron` expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html) in the *AWS Glue Developer Guide* . For example, to run something every day at 12:15 UTC, specify `cron(15 12 * * ? *)` .
	Schedule pulumi.StringPtrInput
	// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
	StartOnCreation pulumi.BoolPtrInput
	// The tags to use with this trigger.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
	Tags pulumi.Input
	// The type of trigger that this is.
	Type pulumi.StringInput
	// The name of the workflow associated with the trigger.
	WorkflowName pulumi.StringPtrInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

// The actions initiated by this trigger.
func (o TriggerOutput) Actions() TriggerActionArrayOutput {
	return o.ApplyT(func(v *Trigger) TriggerActionArrayOutput { return v.Actions }).(TriggerActionArrayOutput)
}

// Reserved for future use.
func (o TriggerOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A description of this trigger.
func (o TriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
func (o TriggerOutput) EventBatchingCondition() TriggerEventBatchingConditionPtrOutput {
	return o.ApplyT(func(v *Trigger) TriggerEventBatchingConditionPtrOutput { return v.EventBatchingCondition }).(TriggerEventBatchingConditionPtrOutput)
}

// The name of the trigger.
func (o TriggerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The predicate of this trigger, which defines when it will fire.
func (o TriggerOutput) Predicate() TriggerPredicatePtrOutput {
	return o.ApplyT(func(v *Trigger) TriggerPredicatePtrOutput { return v.Predicate }).(TriggerPredicatePtrOutput)
}

// A `cron` expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html) in the *AWS Glue Developer Guide* . For example, to run something every day at 12:15 UTC, specify `cron(15 12 * * ? *)` .
func (o TriggerOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
func (o TriggerOutput) StartOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.BoolPtrOutput { return v.StartOnCreation }).(pulumi.BoolPtrOutput)
}

// The tags to use with this trigger.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
func (o TriggerOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Trigger) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

// The type of trigger that this is.
func (o TriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The name of the workflow associated with the trigger.
func (o TriggerOutput) WorkflowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.WorkflowName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerInput)(nil)).Elem(), &Trigger{})
	pulumi.RegisterOutputType(TriggerOutput{})
}
