// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Trigger
//
// Deprecated: Trigger is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Trigger struct {
	pulumi.CustomResourceState

	Actions         TriggerActionArrayOutput  `pulumi:"actions"`
	Description     pulumi.StringPtrOutput    `pulumi:"description"`
	Name            pulumi.StringPtrOutput    `pulumi:"name"`
	Predicate       TriggerPredicatePtrOutput `pulumi:"predicate"`
	Schedule        pulumi.StringPtrOutput    `pulumi:"schedule"`
	StartOnCreation pulumi.BoolPtrOutput      `pulumi:"startOnCreation"`
	Tags            pulumi.AnyOutput          `pulumi:"tags"`
	Type            pulumi.StringOutput       `pulumi:"type"`
	WorkflowName    pulumi.StringPtrOutput    `pulumi:"workflowName"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Trigger
	err := ctx.RegisterResource("aws-native:glue:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("aws-native:glue:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
}

type TriggerState struct {
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	Actions         []TriggerAction   `pulumi:"actions"`
	Description     *string           `pulumi:"description"`
	Name            *string           `pulumi:"name"`
	Predicate       *TriggerPredicate `pulumi:"predicate"`
	Schedule        *string           `pulumi:"schedule"`
	StartOnCreation *bool             `pulumi:"startOnCreation"`
	Tags            interface{}       `pulumi:"tags"`
	Type            string            `pulumi:"type"`
	WorkflowName    *string           `pulumi:"workflowName"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	Actions         TriggerActionArrayInput
	Description     pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Predicate       TriggerPredicatePtrInput
	Schedule        pulumi.StringPtrInput
	StartOnCreation pulumi.BoolPtrInput
	Tags            pulumi.Input
	Type            pulumi.StringInput
	WorkflowName    pulumi.StringPtrInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((*Trigger)(nil))
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Trigger)(nil))
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerInput)(nil)).Elem(), &Trigger{})
	pulumi.RegisterOutputType(TriggerOutput{})
}
