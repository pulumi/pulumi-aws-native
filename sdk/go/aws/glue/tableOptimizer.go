// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::Glue::TableOptimizer
//
// Deprecated: TableOptimizer is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type TableOptimizer struct {
	pulumi.CustomResourceState

	CatalogId                   pulumi.StringOutput               `pulumi:"catalogId"`
	DatabaseName                pulumi.StringOutput               `pulumi:"databaseName"`
	TableName                   pulumi.StringOutput               `pulumi:"tableName"`
	TableOptimizerConfiguration TableOptimizerConfigurationOutput `pulumi:"tableOptimizerConfiguration"`
	Type                        pulumi.StringOutput               `pulumi:"type"`
}

// NewTableOptimizer registers a new resource with the given unique name, arguments, and options.
func NewTableOptimizer(ctx *pulumi.Context,
	name string, args *TableOptimizerArgs, opts ...pulumi.ResourceOption) (*TableOptimizer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	if args.TableOptimizerConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'TableOptimizerConfiguration'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"catalogId",
		"databaseName",
		"tableName",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TableOptimizer
	err := ctx.RegisterResource("aws-native:glue:TableOptimizer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableOptimizer gets an existing TableOptimizer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableOptimizer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableOptimizerState, opts ...pulumi.ResourceOption) (*TableOptimizer, error) {
	var resource TableOptimizer
	err := ctx.ReadResource("aws-native:glue:TableOptimizer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableOptimizer resources.
type tableOptimizerState struct {
}

type TableOptimizerState struct {
}

func (TableOptimizerState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableOptimizerState)(nil)).Elem()
}

type tableOptimizerArgs struct {
	CatalogId                   string                      `pulumi:"catalogId"`
	DatabaseName                string                      `pulumi:"databaseName"`
	TableName                   string                      `pulumi:"tableName"`
	TableOptimizerConfiguration TableOptimizerConfiguration `pulumi:"tableOptimizerConfiguration"`
	Type                        string                      `pulumi:"type"`
}

// The set of arguments for constructing a TableOptimizer resource.
type TableOptimizerArgs struct {
	CatalogId                   pulumi.StringInput
	DatabaseName                pulumi.StringInput
	TableName                   pulumi.StringInput
	TableOptimizerConfiguration TableOptimizerConfigurationInput
	Type                        pulumi.StringInput
}

func (TableOptimizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableOptimizerArgs)(nil)).Elem()
}

type TableOptimizerInput interface {
	pulumi.Input

	ToTableOptimizerOutput() TableOptimizerOutput
	ToTableOptimizerOutputWithContext(ctx context.Context) TableOptimizerOutput
}

func (*TableOptimizer) ElementType() reflect.Type {
	return reflect.TypeOf((**TableOptimizer)(nil)).Elem()
}

func (i *TableOptimizer) ToTableOptimizerOutput() TableOptimizerOutput {
	return i.ToTableOptimizerOutputWithContext(context.Background())
}

func (i *TableOptimizer) ToTableOptimizerOutputWithContext(ctx context.Context) TableOptimizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOptimizerOutput)
}

func (i *TableOptimizer) ToOutput(ctx context.Context) pulumix.Output[*TableOptimizer] {
	return pulumix.Output[*TableOptimizer]{
		OutputState: i.ToTableOptimizerOutputWithContext(ctx).OutputState,
	}
}

type TableOptimizerOutput struct{ *pulumi.OutputState }

func (TableOptimizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableOptimizer)(nil)).Elem()
}

func (o TableOptimizerOutput) ToTableOptimizerOutput() TableOptimizerOutput {
	return o
}

func (o TableOptimizerOutput) ToTableOptimizerOutputWithContext(ctx context.Context) TableOptimizerOutput {
	return o
}

func (o TableOptimizerOutput) ToOutput(ctx context.Context) pulumix.Output[*TableOptimizer] {
	return pulumix.Output[*TableOptimizer]{
		OutputState: o.OutputState,
	}
}

func (o TableOptimizerOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *TableOptimizer) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

func (o TableOptimizerOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *TableOptimizer) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o TableOptimizerOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *TableOptimizer) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

func (o TableOptimizerOutput) TableOptimizerConfiguration() TableOptimizerConfigurationOutput {
	return o.ApplyT(func(v *TableOptimizer) TableOptimizerConfigurationOutput { return v.TableOptimizerConfiguration }).(TableOptimizerConfigurationOutput)
}

func (o TableOptimizerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TableOptimizer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableOptimizerInput)(nil)).Elem(), &TableOptimizer{})
	pulumi.RegisterOutputType(TableOptimizerOutput{})
}
