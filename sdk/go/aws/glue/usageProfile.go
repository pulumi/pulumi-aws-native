// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This creates a Resource of UsageProfile type.
type UsageProfile struct {
	pulumi.CustomResourceState

	// UsageProfile configuration for supported service ex: (Jobs, Sessions).
	Configuration UsageProfileProfileConfigurationPtrOutput `pulumi:"configuration"`
	// Creation time.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// The description of the UsageProfile.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the UsageProfile.
	Name pulumi.StringOutput `pulumi:"name"`
	// The tags to be applied to this UsageProfiles.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewUsageProfile registers a new resource with the given unique name, arguments, and options.
func NewUsageProfile(ctx *pulumi.Context,
	name string, args *UsageProfileArgs, opts ...pulumi.ResourceOption) (*UsageProfile, error) {
	if args == nil {
		args = &UsageProfileArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsageProfile
	err := ctx.RegisterResource("aws-native:glue:UsageProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsageProfile gets an existing UsageProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsageProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsageProfileState, opts ...pulumi.ResourceOption) (*UsageProfile, error) {
	var resource UsageProfile
	err := ctx.ReadResource("aws-native:glue:UsageProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsageProfile resources.
type usageProfileState struct {
}

type UsageProfileState struct {
}

func (UsageProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*usageProfileState)(nil)).Elem()
}

type usageProfileArgs struct {
	// UsageProfile configuration for supported service ex: (Jobs, Sessions).
	Configuration *UsageProfileProfileConfiguration `pulumi:"configuration"`
	// The description of the UsageProfile.
	Description *string `pulumi:"description"`
	// The name of the UsageProfile.
	Name *string `pulumi:"name"`
	// The tags to be applied to this UsageProfiles.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a UsageProfile resource.
type UsageProfileArgs struct {
	// UsageProfile configuration for supported service ex: (Jobs, Sessions).
	Configuration UsageProfileProfileConfigurationPtrInput
	// The description of the UsageProfile.
	Description pulumi.StringPtrInput
	// The name of the UsageProfile.
	Name pulumi.StringPtrInput
	// The tags to be applied to this UsageProfiles.
	Tags aws.TagArrayInput
}

func (UsageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usageProfileArgs)(nil)).Elem()
}

type UsageProfileInput interface {
	pulumi.Input

	ToUsageProfileOutput() UsageProfileOutput
	ToUsageProfileOutputWithContext(ctx context.Context) UsageProfileOutput
}

func (*UsageProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageProfile)(nil)).Elem()
}

func (i *UsageProfile) ToUsageProfileOutput() UsageProfileOutput {
	return i.ToUsageProfileOutputWithContext(context.Background())
}

func (i *UsageProfile) ToUsageProfileOutputWithContext(ctx context.Context) UsageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageProfileOutput)
}

type UsageProfileOutput struct{ *pulumi.OutputState }

func (UsageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageProfile)(nil)).Elem()
}

func (o UsageProfileOutput) ToUsageProfileOutput() UsageProfileOutput {
	return o
}

func (o UsageProfileOutput) ToUsageProfileOutputWithContext(ctx context.Context) UsageProfileOutput {
	return o
}

// UsageProfile configuration for supported service ex: (Jobs, Sessions).
func (o UsageProfileOutput) Configuration() UsageProfileProfileConfigurationPtrOutput {
	return o.ApplyT(func(v *UsageProfile) UsageProfileProfileConfigurationPtrOutput { return v.Configuration }).(UsageProfileProfileConfigurationPtrOutput)
}

// Creation time.
func (o UsageProfileOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageProfile) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the UsageProfile.
func (o UsageProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsageProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the UsageProfile.
func (o UsageProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The tags to be applied to this UsageProfiles.
func (o UsageProfileOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *UsageProfile) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsageProfileInput)(nil)).Elem(), &UsageProfile{})
	pulumi.RegisterOutputType(UsageProfileOutput{})
}
