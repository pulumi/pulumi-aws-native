// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Job
func LookupJob(ctx *pulumi.Context, args *LookupJobArgs, opts ...pulumi.InvokeOption) (*LookupJobResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupJobResult
	err := ctx.Invoke("aws-native:glue:getJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupJobArgs struct {
	// The ID of this job run.
	Id string `pulumi:"id"`
}

type LookupJobResult struct {
	// This parameter is no longer supported. Use `MaxCapacity` instead.
	//
	// The number of capacity units that are allocated to this job.
	AllocatedCapacity *float64 `pulumi:"allocatedCapacity"`
	// The code that executes a job.
	Command *JobCommand `pulumi:"command"`
	// The connections used for this job.
	Connections *JobConnectionsList `pulumi:"connections"`
	// The default arguments for this job, specified as name-value pairs.
	//
	// You can specify arguments here that your own job-execution script consumes, in addition to arguments that AWS Glue itself consumes.
	//
	// For information about how to specify and consume your own job arguments, see [Calling AWS Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) in the *AWS Glue Developer Guide* .
	//
	// For information about the key-value pairs that AWS Glue consumes to set up your job, see [Special Parameters Used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) in the *AWS Glue Developer Guide* .
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
	DefaultArguments interface{} `pulumi:"defaultArguments"`
	// A description of the job.
	Description *string `pulumi:"description"`
	// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.
	//
	// The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary.
	//
	// Only jobs with AWS Glue version 3.0 and above and command type `glueetl` will be allowed to set `ExecutionClass` to `FLEX` . The flexible execution class is available for Spark jobs.
	ExecutionClass *string `pulumi:"executionClass"`
	// The maximum number of concurrent runs that are allowed for this job.
	ExecutionProperty *JobExecutionProperty `pulumi:"executionProperty"`
	// Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark.
	//
	// For more information about the available AWS Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide.
	//
	// Jobs that are created without specifying a Glue version default to the latest Glue version available.
	GlueVersion *string `pulumi:"glueVersion"`
	// The ID of this job run.
	Id *string `pulumi:"id"`
	// A mode that describes how a job was created. Valid values are:
	//
	// - `SCRIPT` - The job was created using the AWS Glue Studio script editor.
	// - `VISUAL` - The job was created using the AWS Glue Studio visual editor.
	// - `NOTEBOOK` - The job was created using an interactive sessions notebook.
	//
	// When the `JobMode` field is missing or null, `SCRIPT` is assigned as the default value.
	JobMode *string `pulumi:"jobMode"`
	// This field is reserved for future use.
	LogUri *string `pulumi:"logUri"`
	// This field specifies a day of the week and hour for a maintenance window for streaming jobs. AWS Glue periodically performs maintenance activities. During these maintenance windows, AWS Glue will need to restart your streaming jobs.
	//
	// AWS Glue will restart the job within 3 hours of the specified maintenance window. For instance, if you set up the maintenance window for Monday at 10:00AM GMT, your jobs will be restarted between 10:00AM GMT to 1:00PM GMT.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
	//
	// Do not set `Max Capacity` if using `WorkerType` and `NumberOfWorkers` .
	//
	// The value that can be allocated for `MaxCapacity` depends on whether you are running a Python shell job or an Apache Spark ETL job:
	//
	// - When you specify a Python shell job ( `JobCommand.Name` ="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
	// - When you specify an Apache Spark ETL job ( `JobCommand.Name` ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
	MaxCapacity *float64 `pulumi:"maxCapacity"`
	// The maximum number of times to retry this job after a JobRun fails.
	MaxRetries *float64 `pulumi:"maxRetries"`
	// Non-overridable arguments for this job, specified as name-value pairs.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
	NonOverridableArguments interface{} `pulumi:"nonOverridableArguments"`
	// Specifies configuration properties of a notification.
	NotificationProperty *JobNotificationProperty `pulumi:"notificationProperty"`
	// The number of workers of a defined `workerType` that are allocated when a job runs.
	//
	// The maximum number of workers you can define are 299 for `G.1X` , and 149 for `G.2X` .
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
	Role *string `pulumi:"role"`
	// The name of the `SecurityConfiguration` structure to be used with this job.
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// The tags to use with this job.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
	Tags interface{} `pulumi:"tags"`
	// The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
	Timeout *int `pulumi:"timeout"`
	// The type of predefined worker that is allocated when a job runs. Accepts a value of G.1X, G.2X, G.4X, G.8X or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
	//
	// - For the `G.1X` worker type, each worker maps to 1 DPU (4 vCPUs, 16 GB of memory) with 84GB disk (approximately 34GB free), and provides 1 executor per worker. We recommend this worker type for workloads such as data transforms, joins, and queries, to offers a scalable and cost effective way to run most jobs.
	// - For the `G.2X` worker type, each worker maps to 2 DPU (8 vCPUs, 32 GB of memory) with 128GB disk (approximately 77GB free), and provides 1 executor per worker. We recommend this worker type for workloads such as data transforms, joins, and queries, to offers a scalable and cost effective way to run most jobs.
	// - For the `G.4X` worker type, each worker maps to 4 DPU (16 vCPUs, 64 GB of memory) with 256GB disk (approximately 235GB free), and provides 1 executor per worker. We recommend this worker type for jobs whose workloads contain your most demanding transforms, aggregations, joins, and queries. This worker type is available only for AWS Glue version 3.0 or later Spark ETL jobs in the following AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
	// - For the `G.8X` worker type, each worker maps to 8 DPU (32 vCPUs, 128 GB of memory) with 512GB disk (approximately 487GB free), and provides 1 executor per worker. We recommend this worker type for jobs whose workloads contain your most demanding transforms, aggregations, joins, and queries. This worker type is available only for AWS Glue version 3.0 or later Spark ETL jobs, in the same AWS Regions as supported for the `G.4X` worker type.
	// - For the `G.025X` worker type, each worker maps to 0.25 DPU (2 vCPUs, 4 GB of memory) with 84GB disk (approximately 34GB free), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for AWS Glue version 3.0 streaming jobs.
	// - For the `Z.2X` worker type, each worker maps to 2 M-DPU (8vCPUs, 64 GB of memory) with 128 GB disk (approximately 120GB free), and provides up to 8 Ray workers based on the autoscaler.
	WorkerType *string `pulumi:"workerType"`
}

func LookupJobOutput(ctx *pulumi.Context, args LookupJobOutputArgs, opts ...pulumi.InvokeOption) LookupJobResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupJobResultOutput, error) {
			args := v.(LookupJobArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupJobResult
			secret, err := ctx.InvokePackageRaw("aws-native:glue:getJob", args, &rv, "", opts...)
			if err != nil {
				return LookupJobResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupJobResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupJobResultOutput), nil
			}
			return output, nil
		}).(LookupJobResultOutput)
}

type LookupJobOutputArgs struct {
	// The ID of this job run.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobArgs)(nil)).Elem()
}

type LookupJobResultOutput struct{ *pulumi.OutputState }

func (LookupJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobResult)(nil)).Elem()
}

func (o LookupJobResultOutput) ToLookupJobResultOutput() LookupJobResultOutput {
	return o
}

func (o LookupJobResultOutput) ToLookupJobResultOutputWithContext(ctx context.Context) LookupJobResultOutput {
	return o
}

// This parameter is no longer supported. Use `MaxCapacity` instead.
//
// The number of capacity units that are allocated to this job.
func (o LookupJobResultOutput) AllocatedCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupJobResult) *float64 { return v.AllocatedCapacity }).(pulumi.Float64PtrOutput)
}

// The code that executes a job.
func (o LookupJobResultOutput) Command() JobCommandPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *JobCommand { return v.Command }).(JobCommandPtrOutput)
}

// The connections used for this job.
func (o LookupJobResultOutput) Connections() JobConnectionsListPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *JobConnectionsList { return v.Connections }).(JobConnectionsListPtrOutput)
}

// The default arguments for this job, specified as name-value pairs.
//
// You can specify arguments here that your own job-execution script consumes, in addition to arguments that AWS Glue itself consumes.
//
// For information about how to specify and consume your own job arguments, see [Calling AWS Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) in the *AWS Glue Developer Guide* .
//
// For information about the key-value pairs that AWS Glue consumes to set up your job, see [Special Parameters Used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) in the *AWS Glue Developer Guide* .
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
func (o LookupJobResultOutput) DefaultArguments() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupJobResult) interface{} { return v.DefaultArguments }).(pulumi.AnyOutput)
}

// A description of the job.
func (o LookupJobResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.
//
// The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary.
//
// Only jobs with AWS Glue version 3.0 and above and command type `glueetl` will be allowed to set `ExecutionClass` to `FLEX` . The flexible execution class is available for Spark jobs.
func (o LookupJobResultOutput) ExecutionClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.ExecutionClass }).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent runs that are allowed for this job.
func (o LookupJobResultOutput) ExecutionProperty() JobExecutionPropertyPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *JobExecutionProperty { return v.ExecutionProperty }).(JobExecutionPropertyPtrOutput)
}

// Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark.
//
// For more information about the available AWS Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide.
//
// Jobs that are created without specifying a Glue version default to the latest Glue version available.
func (o LookupJobResultOutput) GlueVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.GlueVersion }).(pulumi.StringPtrOutput)
}

// The ID of this job run.
func (o LookupJobResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A mode that describes how a job was created. Valid values are:
//
// - `SCRIPT` - The job was created using the AWS Glue Studio script editor.
// - `VISUAL` - The job was created using the AWS Glue Studio visual editor.
// - `NOTEBOOK` - The job was created using an interactive sessions notebook.
//
// When the `JobMode` field is missing or null, `SCRIPT` is assigned as the default value.
func (o LookupJobResultOutput) JobMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.JobMode }).(pulumi.StringPtrOutput)
}

// This field is reserved for future use.
func (o LookupJobResultOutput) LogUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.LogUri }).(pulumi.StringPtrOutput)
}

// This field specifies a day of the week and hour for a maintenance window for streaming jobs. AWS Glue periodically performs maintenance activities. During these maintenance windows, AWS Glue will need to restart your streaming jobs.
//
// AWS Glue will restart the job within 3 hours of the specified maintenance window. For instance, if you set up the maintenance window for Monday at 10:00AM GMT, your jobs will be restarted between 10:00AM GMT to 1:00PM GMT.
func (o LookupJobResultOutput) MaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.MaintenanceWindow }).(pulumi.StringPtrOutput)
}

// The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
//
// Do not set `Max Capacity` if using `WorkerType` and `NumberOfWorkers` .
//
// The value that can be allocated for `MaxCapacity` depends on whether you are running a Python shell job or an Apache Spark ETL job:
//
// - When you specify a Python shell job ( `JobCommand.Name` ="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
// - When you specify an Apache Spark ETL job ( `JobCommand.Name` ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
func (o LookupJobResultOutput) MaxCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupJobResult) *float64 { return v.MaxCapacity }).(pulumi.Float64PtrOutput)
}

// The maximum number of times to retry this job after a JobRun fails.
func (o LookupJobResultOutput) MaxRetries() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupJobResult) *float64 { return v.MaxRetries }).(pulumi.Float64PtrOutput)
}

// Non-overridable arguments for this job, specified as name-value pairs.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
func (o LookupJobResultOutput) NonOverridableArguments() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupJobResult) interface{} { return v.NonOverridableArguments }).(pulumi.AnyOutput)
}

// Specifies configuration properties of a notification.
func (o LookupJobResultOutput) NotificationProperty() JobNotificationPropertyPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *JobNotificationProperty { return v.NotificationProperty }).(JobNotificationPropertyPtrOutput)
}

// The number of workers of a defined `workerType` that are allocated when a job runs.
//
// The maximum number of workers you can define are 299 for `G.1X` , and 149 for `G.2X` .
func (o LookupJobResultOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
func (o LookupJobResultOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// The name of the `SecurityConfiguration` structure to be used with this job.
func (o LookupJobResultOutput) SecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.SecurityConfiguration }).(pulumi.StringPtrOutput)
}

// The tags to use with this job.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
func (o LookupJobResultOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupJobResult) interface{} { return v.Tags }).(pulumi.AnyOutput)
}

// The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
func (o LookupJobResultOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The type of predefined worker that is allocated when a job runs. Accepts a value of G.1X, G.2X, G.4X, G.8X or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.
//
// - For the `G.1X` worker type, each worker maps to 1 DPU (4 vCPUs, 16 GB of memory) with 84GB disk (approximately 34GB free), and provides 1 executor per worker. We recommend this worker type for workloads such as data transforms, joins, and queries, to offers a scalable and cost effective way to run most jobs.
// - For the `G.2X` worker type, each worker maps to 2 DPU (8 vCPUs, 32 GB of memory) with 128GB disk (approximately 77GB free), and provides 1 executor per worker. We recommend this worker type for workloads such as data transforms, joins, and queries, to offers a scalable and cost effective way to run most jobs.
// - For the `G.4X` worker type, each worker maps to 4 DPU (16 vCPUs, 64 GB of memory) with 256GB disk (approximately 235GB free), and provides 1 executor per worker. We recommend this worker type for jobs whose workloads contain your most demanding transforms, aggregations, joins, and queries. This worker type is available only for AWS Glue version 3.0 or later Spark ETL jobs in the following AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
// - For the `G.8X` worker type, each worker maps to 8 DPU (32 vCPUs, 128 GB of memory) with 512GB disk (approximately 487GB free), and provides 1 executor per worker. We recommend this worker type for jobs whose workloads contain your most demanding transforms, aggregations, joins, and queries. This worker type is available only for AWS Glue version 3.0 or later Spark ETL jobs, in the same AWS Regions as supported for the `G.4X` worker type.
// - For the `G.025X` worker type, each worker maps to 0.25 DPU (2 vCPUs, 4 GB of memory) with 84GB disk (approximately 34GB free), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for AWS Glue version 3.0 streaming jobs.
// - For the `Z.2X` worker type, each worker maps to 2 M-DPU (8vCPUs, 64 GB of memory) with 128 GB disk (approximately 120GB free), and provides up to 8 Ray workers based on the autoscaler.
func (o LookupJobResultOutput) WorkerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJobResult) *string { return v.WorkerType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupJobResultOutput{})
}
