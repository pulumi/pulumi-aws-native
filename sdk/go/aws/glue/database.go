// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Database
type Database struct {
	pulumi.CustomResourceState

	// The AWS account ID for the account in which to create the catalog object.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// The metadata for the database.
	DatabaseInput DatabaseInputTypeOutput `pulumi:"databaseInput"`
	// The name of the database. For hive compatibility, this is folded to lowercase when it is store.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	if args.DatabaseInput == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseInput'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"databaseName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("aws-native:glue:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("aws-native:glue:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
}

type DatabaseState struct {
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// The AWS account ID for the account in which to create the catalog object.
	CatalogId string `pulumi:"catalogId"`
	// The metadata for the database.
	DatabaseInput DatabaseInputType `pulumi:"databaseInput"`
	// The name of the database. For hive compatibility, this is folded to lowercase when it is store.
	DatabaseName *string `pulumi:"databaseName"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// The AWS account ID for the account in which to create the catalog object.
	CatalogId pulumi.StringInput
	// The metadata for the database.
	DatabaseInput DatabaseInputTypeInput
	// The name of the database. For hive compatibility, this is folded to lowercase when it is store.
	DatabaseName pulumi.StringPtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// The AWS account ID for the account in which to create the catalog object.
func (o DatabaseOutput) CatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CatalogId }).(pulumi.StringOutput)
}

// The metadata for the database.
func (o DatabaseOutput) DatabaseInput() DatabaseInputTypeOutput {
	return o.ApplyT(func(v *Database) DatabaseInputTypeOutput { return v.DatabaseInput }).(DatabaseInputTypeOutput)
}

// The name of the database. For hive compatibility, this is folded to lowercase when it is store.
func (o DatabaseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterOutputType(DatabaseOutput{})
}
