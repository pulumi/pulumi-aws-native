// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents an individual schema version of a schema defined in Glue Schema Registry.
type SchemaVersion struct {
	pulumi.CustomResourceState

	Schema SchemaVersionSchemaOutput `pulumi:"schema"`
	// Complete definition of the schema in plain-text.
	SchemaDefinition pulumi.StringOutput `pulumi:"schemaDefinition"`
	// Represents the version ID associated with the schema version.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewSchemaVersion registers a new resource with the given unique name, arguments, and options.
func NewSchemaVersion(ctx *pulumi.Context,
	name string, args *SchemaVersionArgs, opts ...pulumi.ResourceOption) (*SchemaVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.SchemaDefinition == nil {
		return nil, errors.New("invalid value for required argument 'SchemaDefinition'")
	}
	var resource SchemaVersion
	err := ctx.RegisterResource("aws-native:glue:SchemaVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaVersion gets an existing SchemaVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaVersionState, opts ...pulumi.ResourceOption) (*SchemaVersion, error) {
	var resource SchemaVersion
	err := ctx.ReadResource("aws-native:glue:SchemaVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaVersion resources.
type schemaVersionState struct {
}

type SchemaVersionState struct {
}

func (SchemaVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaVersionState)(nil)).Elem()
}

type schemaVersionArgs struct {
	Schema SchemaVersionSchema `pulumi:"schema"`
	// Complete definition of the schema in plain-text.
	SchemaDefinition string `pulumi:"schemaDefinition"`
}

// The set of arguments for constructing a SchemaVersion resource.
type SchemaVersionArgs struct {
	Schema SchemaVersionSchemaInput
	// Complete definition of the schema in plain-text.
	SchemaDefinition pulumi.StringInput
}

func (SchemaVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaVersionArgs)(nil)).Elem()
}

type SchemaVersionInput interface {
	pulumi.Input

	ToSchemaVersionOutput() SchemaVersionOutput
	ToSchemaVersionOutputWithContext(ctx context.Context) SchemaVersionOutput
}

func (*SchemaVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersion)(nil))
}

func (i *SchemaVersion) ToSchemaVersionOutput() SchemaVersionOutput {
	return i.ToSchemaVersionOutputWithContext(context.Background())
}

func (i *SchemaVersion) ToSchemaVersionOutputWithContext(ctx context.Context) SchemaVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionOutput)
}

type SchemaVersionOutput struct{ *pulumi.OutputState }

func (SchemaVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersion)(nil))
}

func (o SchemaVersionOutput) ToSchemaVersionOutput() SchemaVersionOutput {
	return o
}

func (o SchemaVersionOutput) ToSchemaVersionOutputWithContext(ctx context.Context) SchemaVersionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SchemaVersionOutput{})
}
