// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Database
func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("aws-native:glue:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDatabaseArgs struct {
	// The name of the database. For hive compatibility, this is folded to lowercase when it is store.
	DatabaseName string `pulumi:"databaseName"`
}

type LookupDatabaseResult struct {
	// The AWS account ID for the account in which to create the catalog object.
	CatalogId *string `pulumi:"catalogId"`
	// The metadata for the database.
	DatabaseInput *DatabaseInputType `pulumi:"databaseInput"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseResultOutput, error) {
			args := v.(LookupDatabaseArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDatabaseResult
			secret, err := ctx.InvokePackageRaw("aws-native:glue:getDatabase", args, &rv, "", opts...)
			if err != nil {
				return LookupDatabaseResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDatabaseResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDatabaseResultOutput), nil
			}
			return output, nil
		}).(LookupDatabaseResultOutput)
}

type LookupDatabaseOutputArgs struct {
	// The name of the database. For hive compatibility, this is folded to lowercase when it is store.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
}

func (LookupDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseArgs)(nil)).Elem()
}

type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutput() LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutputWithContext(ctx context.Context) LookupDatabaseResultOutput {
	return o
}

// The AWS account ID for the account in which to create the catalog object.
func (o LookupDatabaseResultOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

// The metadata for the database.
func (o LookupDatabaseResultOutput) DatabaseInput() DatabaseInputTypePtrOutput {
	return o.ApplyT(func(v LookupDatabaseResult) *DatabaseInputType { return v.DatabaseInput }).(DatabaseInputTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseResultOutput{})
}
