// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Classifier
func LookupClassifier(ctx *pulumi.Context, args *LookupClassifierArgs, opts ...pulumi.InvokeOption) (*LookupClassifierResult, error) {
	var rv LookupClassifierResult
	err := ctx.Invoke("aws-native:glue:getClassifier", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClassifierArgs struct {
	Id string `pulumi:"id"`
}

type LookupClassifierResult struct {
	CsvClassifier  *ClassifierCsvClassifier  `pulumi:"csvClassifier"`
	GrokClassifier *ClassifierGrokClassifier `pulumi:"grokClassifier"`
	Id             *string                   `pulumi:"id"`
	JsonClassifier *ClassifierJsonClassifier `pulumi:"jsonClassifier"`
	XMLClassifier  *ClassifierXMLClassifier  `pulumi:"xMLClassifier"`
}

func LookupClassifierOutput(ctx *pulumi.Context, args LookupClassifierOutputArgs, opts ...pulumi.InvokeOption) LookupClassifierResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClassifierResult, error) {
			args := v.(LookupClassifierArgs)
			r, err := LookupClassifier(ctx, &args, opts...)
			var s LookupClassifierResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClassifierResultOutput)
}

type LookupClassifierOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupClassifierOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClassifierArgs)(nil)).Elem()
}

type LookupClassifierResultOutput struct{ *pulumi.OutputState }

func (LookupClassifierResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClassifierResult)(nil)).Elem()
}

func (o LookupClassifierResultOutput) ToLookupClassifierResultOutput() LookupClassifierResultOutput {
	return o
}

func (o LookupClassifierResultOutput) ToLookupClassifierResultOutputWithContext(ctx context.Context) LookupClassifierResultOutput {
	return o
}

func (o LookupClassifierResultOutput) CsvClassifier() ClassifierCsvClassifierPtrOutput {
	return o.ApplyT(func(v LookupClassifierResult) *ClassifierCsvClassifier { return v.CsvClassifier }).(ClassifierCsvClassifierPtrOutput)
}

func (o LookupClassifierResultOutput) GrokClassifier() ClassifierGrokClassifierPtrOutput {
	return o.ApplyT(func(v LookupClassifierResult) *ClassifierGrokClassifier { return v.GrokClassifier }).(ClassifierGrokClassifierPtrOutput)
}

func (o LookupClassifierResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClassifierResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupClassifierResultOutput) JsonClassifier() ClassifierJsonClassifierPtrOutput {
	return o.ApplyT(func(v LookupClassifierResult) *ClassifierJsonClassifier { return v.JsonClassifier }).(ClassifierJsonClassifierPtrOutput)
}

func (o LookupClassifierResultOutput) XMLClassifier() ClassifierXMLClassifierPtrOutput {
	return o.ApplyT(func(v LookupClassifierResult) *ClassifierXMLClassifier { return v.XMLClassifier }).(ClassifierXMLClassifierPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClassifierResultOutput{})
}
