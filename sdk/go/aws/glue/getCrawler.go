// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Crawler
func LookupCrawler(ctx *pulumi.Context, args *LookupCrawlerArgs, opts ...pulumi.InvokeOption) (*LookupCrawlerResult, error) {
	var rv LookupCrawlerResult
	err := ctx.Invoke("aws-native:glue:getCrawler", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCrawlerArgs struct {
	Id string `pulumi:"id"`
}

type LookupCrawlerResult struct {
	Classifiers                  []string                   `pulumi:"classifiers"`
	Configuration                *string                    `pulumi:"configuration"`
	CrawlerSecurityConfiguration *string                    `pulumi:"crawlerSecurityConfiguration"`
	DatabaseName                 *string                    `pulumi:"databaseName"`
	Description                  *string                    `pulumi:"description"`
	Id                           *string                    `pulumi:"id"`
	RecrawlPolicy                *CrawlerRecrawlPolicy      `pulumi:"recrawlPolicy"`
	Role                         *string                    `pulumi:"role"`
	Schedule                     *CrawlerSchedule           `pulumi:"schedule"`
	SchemaChangePolicy           *CrawlerSchemaChangePolicy `pulumi:"schemaChangePolicy"`
	TablePrefix                  *string                    `pulumi:"tablePrefix"`
	Tags                         interface{}                `pulumi:"tags"`
	Targets                      *CrawlerTargets            `pulumi:"targets"`
}

func LookupCrawlerOutput(ctx *pulumi.Context, args LookupCrawlerOutputArgs, opts ...pulumi.InvokeOption) LookupCrawlerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCrawlerResult, error) {
			args := v.(LookupCrawlerArgs)
			r, err := LookupCrawler(ctx, &args, opts...)
			var s LookupCrawlerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCrawlerResultOutput)
}

type LookupCrawlerOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCrawlerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCrawlerArgs)(nil)).Elem()
}

type LookupCrawlerResultOutput struct{ *pulumi.OutputState }

func (LookupCrawlerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCrawlerResult)(nil)).Elem()
}

func (o LookupCrawlerResultOutput) ToLookupCrawlerResultOutput() LookupCrawlerResultOutput {
	return o
}

func (o LookupCrawlerResultOutput) ToLookupCrawlerResultOutputWithContext(ctx context.Context) LookupCrawlerResultOutput {
	return o
}

func (o LookupCrawlerResultOutput) Classifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCrawlerResult) []string { return v.Classifiers }).(pulumi.StringArrayOutput)
}

func (o LookupCrawlerResultOutput) Configuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *string { return v.Configuration }).(pulumi.StringPtrOutput)
}

func (o LookupCrawlerResultOutput) CrawlerSecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *string { return v.CrawlerSecurityConfiguration }).(pulumi.StringPtrOutput)
}

func (o LookupCrawlerResultOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func (o LookupCrawlerResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupCrawlerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupCrawlerResultOutput) RecrawlPolicy() CrawlerRecrawlPolicyPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *CrawlerRecrawlPolicy { return v.RecrawlPolicy }).(CrawlerRecrawlPolicyPtrOutput)
}

func (o LookupCrawlerResultOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o LookupCrawlerResultOutput) Schedule() CrawlerSchedulePtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *CrawlerSchedule { return v.Schedule }).(CrawlerSchedulePtrOutput)
}

func (o LookupCrawlerResultOutput) SchemaChangePolicy() CrawlerSchemaChangePolicyPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *CrawlerSchemaChangePolicy { return v.SchemaChangePolicy }).(CrawlerSchemaChangePolicyPtrOutput)
}

func (o LookupCrawlerResultOutput) TablePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *string { return v.TablePrefix }).(pulumi.StringPtrOutput)
}

func (o LookupCrawlerResultOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupCrawlerResult) interface{} { return v.Tags }).(pulumi.AnyOutput)
}

func (o LookupCrawlerResultOutput) Targets() CrawlerTargetsPtrOutput {
	return o.ApplyT(func(v LookupCrawlerResult) *CrawlerTargets { return v.Targets }).(CrawlerTargetsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCrawlerResultOutput{})
}
