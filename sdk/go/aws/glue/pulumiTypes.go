// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RegistryTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// Identifier for the registry which the schema is part of.
type SchemaRegistry struct {
	// Amazon Resource Name for the Registry.
	Arn *string `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name *string `pulumi:"name"`
}

// SchemaRegistryInput is an input type that accepts SchemaRegistryArgs and SchemaRegistryOutput values.
// You can construct a concrete instance of `SchemaRegistryInput` via:
//
//	SchemaRegistryArgs{...}
type SchemaRegistryInput interface {
	pulumi.Input

	ToSchemaRegistryOutput() SchemaRegistryOutput
	ToSchemaRegistryOutputWithContext(context.Context) SchemaRegistryOutput
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryArgs struct {
	// Amazon Resource Name for the Registry.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return i.ToSchemaRegistryOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput)
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput).ToSchemaRegistryPtrOutputWithContext(ctx)
}

// SchemaRegistryPtrInput is an input type that accepts SchemaRegistryArgs, SchemaRegistryPtr and SchemaRegistryPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryPtrInput` via:
//
//	        SchemaRegistryArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryPtrInput interface {
	pulumi.Input

	ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput
	ToSchemaRegistryPtrOutputWithContext(context.Context) SchemaRegistryPtrOutput
}

type schemaRegistryPtrType SchemaRegistryArgs

func SchemaRegistryPtr(v *SchemaRegistryArgs) SchemaRegistryPtrInput {
	return (*schemaRegistryPtrType)(v)
}

func (*schemaRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryPtrOutput)
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryOutput struct{ *pulumi.OutputState }

func (SchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistry) *SchemaRegistry {
		return &v
	}).(SchemaRegistryPtrOutput)
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SchemaRegistryPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) Elem() SchemaRegistryOutput {
	return o.ApplyT(func(v *SchemaRegistry) SchemaRegistry {
		if v != nil {
			return *v
		}
		var ret SchemaRegistry
		return ret
	}).(SchemaRegistryOutput)
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type SchemaTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionType struct {
	// Indicates if the latest version needs to be updated.
	IsLatest *bool `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber *int `pulumi:"versionNumber"`
}

// SchemaVersionTypeInput is an input type that accepts SchemaVersionTypeArgs and SchemaVersionTypeOutput values.
// You can construct a concrete instance of `SchemaVersionTypeInput` via:
//
//	SchemaVersionTypeArgs{...}
type SchemaVersionTypeInput interface {
	pulumi.Input

	ToSchemaVersionTypeOutput() SchemaVersionTypeOutput
	ToSchemaVersionTypeOutputWithContext(context.Context) SchemaVersionTypeOutput
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeArgs struct {
	// Indicates if the latest version needs to be updated.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber pulumi.IntPtrInput `pulumi:"versionNumber"`
}

func (SchemaVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return i.ToSchemaVersionTypeOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput)
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput).ToSchemaVersionTypePtrOutputWithContext(ctx)
}

// SchemaVersionTypePtrInput is an input type that accepts SchemaVersionTypeArgs, SchemaVersionTypePtr and SchemaVersionTypePtrOutput values.
// You can construct a concrete instance of `SchemaVersionTypePtrInput` via:
//
//	        SchemaVersionTypeArgs{...}
//
//	or:
//
//	        nil
type SchemaVersionTypePtrInput interface {
	pulumi.Input

	ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput
	ToSchemaVersionTypePtrOutputWithContext(context.Context) SchemaVersionTypePtrOutput
}

type schemaVersionTypePtrType SchemaVersionTypeArgs

func SchemaVersionTypePtr(v *SchemaVersionTypeArgs) SchemaVersionTypePtrInput {
	return (*schemaVersionTypePtrType)(v)
}

func (*schemaVersionTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypePtrOutput)
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaVersionType) *SchemaVersionType {
		return &v
	}).(SchemaVersionTypePtrOutput)
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypeOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypeOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *int { return v.VersionNumber }).(pulumi.IntPtrOutput)
}

type SchemaVersionTypePtrOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) Elem() SchemaVersionTypeOutput {
	return o.ApplyT(func(v *SchemaVersionType) SchemaVersionType {
		if v != nil {
			return *v
		}
		var ret SchemaVersionType
		return ret
	}).(SchemaVersionTypeOutput)
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypePtrOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *bool {
		if v == nil {
			return nil
		}
		return v.IsLatest
	}).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypePtrOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *int {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.IntPtrOutput)
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchema struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName *string `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn *string `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName *string `pulumi:"schemaName"`
}

// SchemaVersionSchemaInput is an input type that accepts SchemaVersionSchemaArgs and SchemaVersionSchemaOutput values.
// You can construct a concrete instance of `SchemaVersionSchemaInput` via:
//
//	SchemaVersionSchemaArgs{...}
type SchemaVersionSchemaInput interface {
	pulumi.Input

	ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput
	ToSchemaVersionSchemaOutputWithContext(context.Context) SchemaVersionSchemaOutput
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaArgs struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName pulumi.StringPtrInput `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn pulumi.StringPtrInput `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SchemaVersionSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return i.ToSchemaVersionSchemaOutputWithContext(context.Background())
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionSchemaOutput)
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaOutput struct{ *pulumi.OutputState }

func (SchemaVersionSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return o
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return o
}

// Name of the registry to identify where the Schema is located.
func (o SchemaVersionSchemaOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
func (o SchemaVersionSchemaOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

// Name of the schema. This parameter requires RegistryName to be provided.
func (o SchemaVersionSchemaOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryPtrInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypeInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypePtrInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionSchemaInput)(nil)).Elem(), SchemaVersionSchemaArgs{})
	pulumi.RegisterOutputType(SchemaRegistryOutput{})
	pulumi.RegisterOutputType(SchemaRegistryPtrOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypeOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypePtrOutput{})
	pulumi.RegisterOutputType(SchemaVersionSchemaOutput{})
}
