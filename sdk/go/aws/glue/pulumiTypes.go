// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies an AWS Glue Data Catalog target.
type CrawlerCatalogTarget struct {
	// The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a NETWORK Connection type.
	ConnectionName *string `pulumi:"connectionName"`
	// The name of the database to be synchronized.
	DatabaseName *string `pulumi:"databaseName"`
	// A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
	DlqEventQueueArn *string `pulumi:"dlqEventQueueArn"`
	// A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
	EventQueueArn *string `pulumi:"eventQueueArn"`
	// A list of the tables to be synchronized.
	Tables []string `pulumi:"tables"`
}

// CrawlerCatalogTargetInput is an input type that accepts CrawlerCatalogTargetArgs and CrawlerCatalogTargetOutput values.
// You can construct a concrete instance of `CrawlerCatalogTargetInput` via:
//
//	CrawlerCatalogTargetArgs{...}
type CrawlerCatalogTargetInput interface {
	pulumi.Input

	ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput
	ToCrawlerCatalogTargetOutputWithContext(context.Context) CrawlerCatalogTargetOutput
}

// Specifies an AWS Glue Data Catalog target.
type CrawlerCatalogTargetArgs struct {
	// The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a NETWORK Connection type.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// The name of the database to be synchronized.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
	DlqEventQueueArn pulumi.StringPtrInput `pulumi:"dlqEventQueueArn"`
	// A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
	EventQueueArn pulumi.StringPtrInput `pulumi:"eventQueueArn"`
	// A list of the tables to be synchronized.
	Tables pulumi.StringArrayInput `pulumi:"tables"`
}

func (CrawlerCatalogTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return i.ToCrawlerCatalogTargetOutputWithContext(context.Background())
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerCatalogTargetOutput)
}

// CrawlerCatalogTargetArrayInput is an input type that accepts CrawlerCatalogTargetArray and CrawlerCatalogTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerCatalogTargetArrayInput` via:
//
//	CrawlerCatalogTargetArray{ CrawlerCatalogTargetArgs{...} }
type CrawlerCatalogTargetArrayInput interface {
	pulumi.Input

	ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput
	ToCrawlerCatalogTargetArrayOutputWithContext(context.Context) CrawlerCatalogTargetArrayOutput
}

type CrawlerCatalogTargetArray []CrawlerCatalogTargetInput

func (CrawlerCatalogTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerCatalogTarget)(nil)).Elem()
}

func (i CrawlerCatalogTargetArray) ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput {
	return i.ToCrawlerCatalogTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerCatalogTargetArray) ToCrawlerCatalogTargetArrayOutputWithContext(ctx context.Context) CrawlerCatalogTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerCatalogTargetArrayOutput)
}

// Specifies an AWS Glue Data Catalog target.
type CrawlerCatalogTargetOutput struct{ *pulumi.OutputState }

func (CrawlerCatalogTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return o
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return o
}

// The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a NETWORK Connection type.
func (o CrawlerCatalogTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// The name of the database to be synchronized.
func (o CrawlerCatalogTargetOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
func (o CrawlerCatalogTargetOutput) DlqEventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.DlqEventQueueArn }).(pulumi.StringPtrOutput)
}

// A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
func (o CrawlerCatalogTargetOutput) EventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.EventQueueArn }).(pulumi.StringPtrOutput)
}

// A list of the tables to be synchronized.
func (o CrawlerCatalogTargetOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

type CrawlerCatalogTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerCatalogTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerCatalogTarget)(nil)).Elem()
}

func (o CrawlerCatalogTargetArrayOutput) ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput {
	return o
}

func (o CrawlerCatalogTargetArrayOutput) ToCrawlerCatalogTargetArrayOutputWithContext(ctx context.Context) CrawlerCatalogTargetArrayOutput {
	return o
}

func (o CrawlerCatalogTargetArrayOutput) Index(i pulumi.IntInput) CrawlerCatalogTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerCatalogTarget {
		return vs[0].([]CrawlerCatalogTarget)[vs[1].(int)]
	}).(CrawlerCatalogTargetOutput)
}

// Specifies a Delta data store to crawl one or more Delta tables.
type CrawlerDeltaTarget struct {
	// The name of the connection to use to connect to the Delta table target.
	ConnectionName *string `pulumi:"connectionName"`
	// Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
	CreateNativeDeltaTable *bool `pulumi:"createNativeDeltaTable"`
	// A list of the Amazon S3 paths to the Delta tables.
	DeltaTables []string `pulumi:"deltaTables"`
	// Specifies whether to write the manifest files to the Delta table path.
	WriteManifest *bool `pulumi:"writeManifest"`
}

// CrawlerDeltaTargetInput is an input type that accepts CrawlerDeltaTargetArgs and CrawlerDeltaTargetOutput values.
// You can construct a concrete instance of `CrawlerDeltaTargetInput` via:
//
//	CrawlerDeltaTargetArgs{...}
type CrawlerDeltaTargetInput interface {
	pulumi.Input

	ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput
	ToCrawlerDeltaTargetOutputWithContext(context.Context) CrawlerDeltaTargetOutput
}

// Specifies a Delta data store to crawl one or more Delta tables.
type CrawlerDeltaTargetArgs struct {
	// The name of the connection to use to connect to the Delta table target.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
	CreateNativeDeltaTable pulumi.BoolPtrInput `pulumi:"createNativeDeltaTable"`
	// A list of the Amazon S3 paths to the Delta tables.
	DeltaTables pulumi.StringArrayInput `pulumi:"deltaTables"`
	// Specifies whether to write the manifest files to the Delta table path.
	WriteManifest pulumi.BoolPtrInput `pulumi:"writeManifest"`
}

func (CrawlerDeltaTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDeltaTarget)(nil)).Elem()
}

func (i CrawlerDeltaTargetArgs) ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput {
	return i.ToCrawlerDeltaTargetOutputWithContext(context.Background())
}

func (i CrawlerDeltaTargetArgs) ToCrawlerDeltaTargetOutputWithContext(ctx context.Context) CrawlerDeltaTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDeltaTargetOutput)
}

// CrawlerDeltaTargetArrayInput is an input type that accepts CrawlerDeltaTargetArray and CrawlerDeltaTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerDeltaTargetArrayInput` via:
//
//	CrawlerDeltaTargetArray{ CrawlerDeltaTargetArgs{...} }
type CrawlerDeltaTargetArrayInput interface {
	pulumi.Input

	ToCrawlerDeltaTargetArrayOutput() CrawlerDeltaTargetArrayOutput
	ToCrawlerDeltaTargetArrayOutputWithContext(context.Context) CrawlerDeltaTargetArrayOutput
}

type CrawlerDeltaTargetArray []CrawlerDeltaTargetInput

func (CrawlerDeltaTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDeltaTarget)(nil)).Elem()
}

func (i CrawlerDeltaTargetArray) ToCrawlerDeltaTargetArrayOutput() CrawlerDeltaTargetArrayOutput {
	return i.ToCrawlerDeltaTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerDeltaTargetArray) ToCrawlerDeltaTargetArrayOutputWithContext(ctx context.Context) CrawlerDeltaTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDeltaTargetArrayOutput)
}

// Specifies a Delta data store to crawl one or more Delta tables.
type CrawlerDeltaTargetOutput struct{ *pulumi.OutputState }

func (CrawlerDeltaTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDeltaTarget)(nil)).Elem()
}

func (o CrawlerDeltaTargetOutput) ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput {
	return o
}

func (o CrawlerDeltaTargetOutput) ToCrawlerDeltaTargetOutputWithContext(ctx context.Context) CrawlerDeltaTargetOutput {
	return o
}

// The name of the connection to use to connect to the Delta table target.
func (o CrawlerDeltaTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
func (o CrawlerDeltaTargetOutput) CreateNativeDeltaTable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) *bool { return v.CreateNativeDeltaTable }).(pulumi.BoolPtrOutput)
}

// A list of the Amazon S3 paths to the Delta tables.
func (o CrawlerDeltaTargetOutput) DeltaTables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) []string { return v.DeltaTables }).(pulumi.StringArrayOutput)
}

// Specifies whether to write the manifest files to the Delta table path.
func (o CrawlerDeltaTargetOutput) WriteManifest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) *bool { return v.WriteManifest }).(pulumi.BoolPtrOutput)
}

type CrawlerDeltaTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerDeltaTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDeltaTarget)(nil)).Elem()
}

func (o CrawlerDeltaTargetArrayOutput) ToCrawlerDeltaTargetArrayOutput() CrawlerDeltaTargetArrayOutput {
	return o
}

func (o CrawlerDeltaTargetArrayOutput) ToCrawlerDeltaTargetArrayOutputWithContext(ctx context.Context) CrawlerDeltaTargetArrayOutput {
	return o
}

func (o CrawlerDeltaTargetArrayOutput) Index(i pulumi.IntInput) CrawlerDeltaTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerDeltaTarget {
		return vs[0].([]CrawlerDeltaTarget)[vs[1].(int)]
	}).(CrawlerDeltaTargetOutput)
}

// Specifies an Amazon DynamoDB table to crawl.
type CrawlerDynamoDbTarget struct {
	// The name of the DynamoDB table to crawl.
	Path *string `pulumi:"path"`
}

// CrawlerDynamoDbTargetInput is an input type that accepts CrawlerDynamoDbTargetArgs and CrawlerDynamoDbTargetOutput values.
// You can construct a concrete instance of `CrawlerDynamoDbTargetInput` via:
//
//	CrawlerDynamoDbTargetArgs{...}
type CrawlerDynamoDbTargetInput interface {
	pulumi.Input

	ToCrawlerDynamoDbTargetOutput() CrawlerDynamoDbTargetOutput
	ToCrawlerDynamoDbTargetOutputWithContext(context.Context) CrawlerDynamoDbTargetOutput
}

// Specifies an Amazon DynamoDB table to crawl.
type CrawlerDynamoDbTargetArgs struct {
	// The name of the DynamoDB table to crawl.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (CrawlerDynamoDbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamoDbTarget)(nil)).Elem()
}

func (i CrawlerDynamoDbTargetArgs) ToCrawlerDynamoDbTargetOutput() CrawlerDynamoDbTargetOutput {
	return i.ToCrawlerDynamoDbTargetOutputWithContext(context.Background())
}

func (i CrawlerDynamoDbTargetArgs) ToCrawlerDynamoDbTargetOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDynamoDbTargetOutput)
}

// CrawlerDynamoDbTargetArrayInput is an input type that accepts CrawlerDynamoDbTargetArray and CrawlerDynamoDbTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerDynamoDbTargetArrayInput` via:
//
//	CrawlerDynamoDbTargetArray{ CrawlerDynamoDbTargetArgs{...} }
type CrawlerDynamoDbTargetArrayInput interface {
	pulumi.Input

	ToCrawlerDynamoDbTargetArrayOutput() CrawlerDynamoDbTargetArrayOutput
	ToCrawlerDynamoDbTargetArrayOutputWithContext(context.Context) CrawlerDynamoDbTargetArrayOutput
}

type CrawlerDynamoDbTargetArray []CrawlerDynamoDbTargetInput

func (CrawlerDynamoDbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDynamoDbTarget)(nil)).Elem()
}

func (i CrawlerDynamoDbTargetArray) ToCrawlerDynamoDbTargetArrayOutput() CrawlerDynamoDbTargetArrayOutput {
	return i.ToCrawlerDynamoDbTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerDynamoDbTargetArray) ToCrawlerDynamoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDynamoDbTargetArrayOutput)
}

// Specifies an Amazon DynamoDB table to crawl.
type CrawlerDynamoDbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerDynamoDbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamoDbTarget)(nil)).Elem()
}

func (o CrawlerDynamoDbTargetOutput) ToCrawlerDynamoDbTargetOutput() CrawlerDynamoDbTargetOutput {
	return o
}

func (o CrawlerDynamoDbTargetOutput) ToCrawlerDynamoDbTargetOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetOutput {
	return o
}

// The name of the DynamoDB table to crawl.
func (o CrawlerDynamoDbTargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerDynamoDbTarget) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type CrawlerDynamoDbTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerDynamoDbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDynamoDbTarget)(nil)).Elem()
}

func (o CrawlerDynamoDbTargetArrayOutput) ToCrawlerDynamoDbTargetArrayOutput() CrawlerDynamoDbTargetArrayOutput {
	return o
}

func (o CrawlerDynamoDbTargetArrayOutput) ToCrawlerDynamoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetArrayOutput {
	return o
}

func (o CrawlerDynamoDbTargetArrayOutput) Index(i pulumi.IntInput) CrawlerDynamoDbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerDynamoDbTarget {
		return vs[0].([]CrawlerDynamoDbTarget)[vs[1].(int)]
	}).(CrawlerDynamoDbTargetOutput)
}

// Specifies Apache Iceberg data store targets.
type CrawlerIcebergTarget struct {
	// The name of the connection to use to connect to the Iceberg target.
	ConnectionName *string `pulumi:"connectionName"`
	// A list of global patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time.
	MaximumTraversalDepth *int `pulumi:"maximumTraversalDepth"`
	// One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix .
	Paths []string `pulumi:"paths"`
}

// CrawlerIcebergTargetInput is an input type that accepts CrawlerIcebergTargetArgs and CrawlerIcebergTargetOutput values.
// You can construct a concrete instance of `CrawlerIcebergTargetInput` via:
//
//	CrawlerIcebergTargetArgs{...}
type CrawlerIcebergTargetInput interface {
	pulumi.Input

	ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput
	ToCrawlerIcebergTargetOutputWithContext(context.Context) CrawlerIcebergTargetOutput
}

// Specifies Apache Iceberg data store targets.
type CrawlerIcebergTargetArgs struct {
	// The name of the connection to use to connect to the Iceberg target.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// A list of global patterns used to exclude from the crawl.
	Exclusions pulumi.StringArrayInput `pulumi:"exclusions"`
	// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time.
	MaximumTraversalDepth pulumi.IntPtrInput `pulumi:"maximumTraversalDepth"`
	// One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix .
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (CrawlerIcebergTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerIcebergTarget)(nil)).Elem()
}

func (i CrawlerIcebergTargetArgs) ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput {
	return i.ToCrawlerIcebergTargetOutputWithContext(context.Background())
}

func (i CrawlerIcebergTargetArgs) ToCrawlerIcebergTargetOutputWithContext(ctx context.Context) CrawlerIcebergTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerIcebergTargetOutput)
}

// CrawlerIcebergTargetArrayInput is an input type that accepts CrawlerIcebergTargetArray and CrawlerIcebergTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerIcebergTargetArrayInput` via:
//
//	CrawlerIcebergTargetArray{ CrawlerIcebergTargetArgs{...} }
type CrawlerIcebergTargetArrayInput interface {
	pulumi.Input

	ToCrawlerIcebergTargetArrayOutput() CrawlerIcebergTargetArrayOutput
	ToCrawlerIcebergTargetArrayOutputWithContext(context.Context) CrawlerIcebergTargetArrayOutput
}

type CrawlerIcebergTargetArray []CrawlerIcebergTargetInput

func (CrawlerIcebergTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerIcebergTarget)(nil)).Elem()
}

func (i CrawlerIcebergTargetArray) ToCrawlerIcebergTargetArrayOutput() CrawlerIcebergTargetArrayOutput {
	return i.ToCrawlerIcebergTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerIcebergTargetArray) ToCrawlerIcebergTargetArrayOutputWithContext(ctx context.Context) CrawlerIcebergTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerIcebergTargetArrayOutput)
}

// Specifies Apache Iceberg data store targets.
type CrawlerIcebergTargetOutput struct{ *pulumi.OutputState }

func (CrawlerIcebergTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerIcebergTarget)(nil)).Elem()
}

func (o CrawlerIcebergTargetOutput) ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput {
	return o
}

func (o CrawlerIcebergTargetOutput) ToCrawlerIcebergTargetOutputWithContext(ctx context.Context) CrawlerIcebergTargetOutput {
	return o
}

// The name of the connection to use to connect to the Iceberg target.
func (o CrawlerIcebergTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// A list of global patterns used to exclude from the crawl.
func (o CrawlerIcebergTargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

// The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time.
func (o CrawlerIcebergTargetOutput) MaximumTraversalDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) *int { return v.MaximumTraversalDepth }).(pulumi.IntPtrOutput)
}

// One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix .
func (o CrawlerIcebergTargetOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type CrawlerIcebergTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerIcebergTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerIcebergTarget)(nil)).Elem()
}

func (o CrawlerIcebergTargetArrayOutput) ToCrawlerIcebergTargetArrayOutput() CrawlerIcebergTargetArrayOutput {
	return o
}

func (o CrawlerIcebergTargetArrayOutput) ToCrawlerIcebergTargetArrayOutputWithContext(ctx context.Context) CrawlerIcebergTargetArrayOutput {
	return o
}

func (o CrawlerIcebergTargetArrayOutput) Index(i pulumi.IntInput) CrawlerIcebergTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerIcebergTarget {
		return vs[0].([]CrawlerIcebergTarget)[vs[1].(int)]
	}).(CrawlerIcebergTargetOutput)
}

// Specifies a JDBC data store to crawl.
type CrawlerJdbcTarget struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName *string `pulumi:"connectionName"`
	// Specify a value of RAWTYPES or COMMENTS to enable additional metadata in table responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.
	//
	// If you do not need additional metadata, keep the field empty.
	EnableAdditionalMetadata []string `pulumi:"enableAdditionalMetadata"`
	// A list of glob patterns used to exclude from the crawl. For more information, see Catalog Tables with a Crawler.
	Exclusions []string `pulumi:"exclusions"`
	// The path of the JDBC target.
	Path *string `pulumi:"path"`
}

// CrawlerJdbcTargetInput is an input type that accepts CrawlerJdbcTargetArgs and CrawlerJdbcTargetOutput values.
// You can construct a concrete instance of `CrawlerJdbcTargetInput` via:
//
//	CrawlerJdbcTargetArgs{...}
type CrawlerJdbcTargetInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput
	ToCrawlerJdbcTargetOutputWithContext(context.Context) CrawlerJdbcTargetOutput
}

// Specifies a JDBC data store to crawl.
type CrawlerJdbcTargetArgs struct {
	// The name of the connection to use to connect to the JDBC target.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// Specify a value of RAWTYPES or COMMENTS to enable additional metadata in table responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.
	//
	// If you do not need additional metadata, keep the field empty.
	EnableAdditionalMetadata pulumi.StringArrayInput `pulumi:"enableAdditionalMetadata"`
	// A list of glob patterns used to exclude from the crawl. For more information, see Catalog Tables with a Crawler.
	Exclusions pulumi.StringArrayInput `pulumi:"exclusions"`
	// The path of the JDBC target.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (CrawlerJdbcTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return i.ToCrawlerJdbcTargetOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetOutput)
}

// CrawlerJdbcTargetArrayInput is an input type that accepts CrawlerJdbcTargetArray and CrawlerJdbcTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerJdbcTargetArrayInput` via:
//
//	CrawlerJdbcTargetArray{ CrawlerJdbcTargetArgs{...} }
type CrawlerJdbcTargetArrayInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput
	ToCrawlerJdbcTargetArrayOutputWithContext(context.Context) CrawlerJdbcTargetArrayOutput
}

type CrawlerJdbcTargetArray []CrawlerJdbcTargetInput

func (CrawlerJdbcTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return i.ToCrawlerJdbcTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetArrayOutput)
}

// Specifies a JDBC data store to crawl.
type CrawlerJdbcTargetOutput struct{ *pulumi.OutputState }

func (CrawlerJdbcTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return o
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return o
}

// The name of the connection to use to connect to the JDBC target.
func (o CrawlerJdbcTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// Specify a value of RAWTYPES or COMMENTS to enable additional metadata in table responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.
//
// If you do not need additional metadata, keep the field empty.
func (o CrawlerJdbcTargetOutput) EnableAdditionalMetadata() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) []string { return v.EnableAdditionalMetadata }).(pulumi.StringArrayOutput)
}

// A list of glob patterns used to exclude from the crawl. For more information, see Catalog Tables with a Crawler.
func (o CrawlerJdbcTargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

// The path of the JDBC target.
func (o CrawlerJdbcTargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type CrawlerJdbcTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerJdbcTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) Index(i pulumi.IntInput) CrawlerJdbcTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerJdbcTarget {
		return vs[0].([]CrawlerJdbcTarget)[vs[1].(int)]
	}).(CrawlerJdbcTargetOutput)
}

// Specifies AWS Lake Formation configuration settings for the crawler
type CrawlerLakeFormationConfiguration struct {
	// Required for cross account crawls. For same account crawls as the target data, this can be left as null.
	AccountId *string `pulumi:"accountId"`
	// Specifies whether to use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
	UseLakeFormationCredentials *bool `pulumi:"useLakeFormationCredentials"`
}

// CrawlerLakeFormationConfigurationInput is an input type that accepts CrawlerLakeFormationConfigurationArgs and CrawlerLakeFormationConfigurationOutput values.
// You can construct a concrete instance of `CrawlerLakeFormationConfigurationInput` via:
//
//	CrawlerLakeFormationConfigurationArgs{...}
type CrawlerLakeFormationConfigurationInput interface {
	pulumi.Input

	ToCrawlerLakeFormationConfigurationOutput() CrawlerLakeFormationConfigurationOutput
	ToCrawlerLakeFormationConfigurationOutputWithContext(context.Context) CrawlerLakeFormationConfigurationOutput
}

// Specifies AWS Lake Formation configuration settings for the crawler
type CrawlerLakeFormationConfigurationArgs struct {
	// Required for cross account crawls. For same account crawls as the target data, this can be left as null.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Specifies whether to use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
	UseLakeFormationCredentials pulumi.BoolPtrInput `pulumi:"useLakeFormationCredentials"`
}

func (CrawlerLakeFormationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerLakeFormationConfiguration)(nil)).Elem()
}

func (i CrawlerLakeFormationConfigurationArgs) ToCrawlerLakeFormationConfigurationOutput() CrawlerLakeFormationConfigurationOutput {
	return i.ToCrawlerLakeFormationConfigurationOutputWithContext(context.Background())
}

func (i CrawlerLakeFormationConfigurationArgs) ToCrawlerLakeFormationConfigurationOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerLakeFormationConfigurationOutput)
}

func (i CrawlerLakeFormationConfigurationArgs) ToCrawlerLakeFormationConfigurationPtrOutput() CrawlerLakeFormationConfigurationPtrOutput {
	return i.ToCrawlerLakeFormationConfigurationPtrOutputWithContext(context.Background())
}

func (i CrawlerLakeFormationConfigurationArgs) ToCrawlerLakeFormationConfigurationPtrOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerLakeFormationConfigurationOutput).ToCrawlerLakeFormationConfigurationPtrOutputWithContext(ctx)
}

// CrawlerLakeFormationConfigurationPtrInput is an input type that accepts CrawlerLakeFormationConfigurationArgs, CrawlerLakeFormationConfigurationPtr and CrawlerLakeFormationConfigurationPtrOutput values.
// You can construct a concrete instance of `CrawlerLakeFormationConfigurationPtrInput` via:
//
//	        CrawlerLakeFormationConfigurationArgs{...}
//
//	or:
//
//	        nil
type CrawlerLakeFormationConfigurationPtrInput interface {
	pulumi.Input

	ToCrawlerLakeFormationConfigurationPtrOutput() CrawlerLakeFormationConfigurationPtrOutput
	ToCrawlerLakeFormationConfigurationPtrOutputWithContext(context.Context) CrawlerLakeFormationConfigurationPtrOutput
}

type crawlerLakeFormationConfigurationPtrType CrawlerLakeFormationConfigurationArgs

func CrawlerLakeFormationConfigurationPtr(v *CrawlerLakeFormationConfigurationArgs) CrawlerLakeFormationConfigurationPtrInput {
	return (*crawlerLakeFormationConfigurationPtrType)(v)
}

func (*crawlerLakeFormationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerLakeFormationConfiguration)(nil)).Elem()
}

func (i *crawlerLakeFormationConfigurationPtrType) ToCrawlerLakeFormationConfigurationPtrOutput() CrawlerLakeFormationConfigurationPtrOutput {
	return i.ToCrawlerLakeFormationConfigurationPtrOutputWithContext(context.Background())
}

func (i *crawlerLakeFormationConfigurationPtrType) ToCrawlerLakeFormationConfigurationPtrOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerLakeFormationConfigurationPtrOutput)
}

// Specifies AWS Lake Formation configuration settings for the crawler
type CrawlerLakeFormationConfigurationOutput struct{ *pulumi.OutputState }

func (CrawlerLakeFormationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerLakeFormationConfiguration)(nil)).Elem()
}

func (o CrawlerLakeFormationConfigurationOutput) ToCrawlerLakeFormationConfigurationOutput() CrawlerLakeFormationConfigurationOutput {
	return o
}

func (o CrawlerLakeFormationConfigurationOutput) ToCrawlerLakeFormationConfigurationOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationOutput {
	return o
}

func (o CrawlerLakeFormationConfigurationOutput) ToCrawlerLakeFormationConfigurationPtrOutput() CrawlerLakeFormationConfigurationPtrOutput {
	return o.ToCrawlerLakeFormationConfigurationPtrOutputWithContext(context.Background())
}

func (o CrawlerLakeFormationConfigurationOutput) ToCrawlerLakeFormationConfigurationPtrOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrawlerLakeFormationConfiguration) *CrawlerLakeFormationConfiguration {
		return &v
	}).(CrawlerLakeFormationConfigurationPtrOutput)
}

// Required for cross account crawls. For same account crawls as the target data, this can be left as null.
func (o CrawlerLakeFormationConfigurationOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerLakeFormationConfiguration) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Specifies whether to use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
func (o CrawlerLakeFormationConfigurationOutput) UseLakeFormationCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CrawlerLakeFormationConfiguration) *bool { return v.UseLakeFormationCredentials }).(pulumi.BoolPtrOutput)
}

type CrawlerLakeFormationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CrawlerLakeFormationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerLakeFormationConfiguration)(nil)).Elem()
}

func (o CrawlerLakeFormationConfigurationPtrOutput) ToCrawlerLakeFormationConfigurationPtrOutput() CrawlerLakeFormationConfigurationPtrOutput {
	return o
}

func (o CrawlerLakeFormationConfigurationPtrOutput) ToCrawlerLakeFormationConfigurationPtrOutputWithContext(ctx context.Context) CrawlerLakeFormationConfigurationPtrOutput {
	return o
}

func (o CrawlerLakeFormationConfigurationPtrOutput) Elem() CrawlerLakeFormationConfigurationOutput {
	return o.ApplyT(func(v *CrawlerLakeFormationConfiguration) CrawlerLakeFormationConfiguration {
		if v != nil {
			return *v
		}
		var ret CrawlerLakeFormationConfiguration
		return ret
	}).(CrawlerLakeFormationConfigurationOutput)
}

// Required for cross account crawls. For same account crawls as the target data, this can be left as null.
func (o CrawlerLakeFormationConfigurationPtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerLakeFormationConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AccountId
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
func (o CrawlerLakeFormationConfigurationPtrOutput) UseLakeFormationCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CrawlerLakeFormationConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.UseLakeFormationCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies an Amazon DocumentDB or MongoDB data store to crawl.
type CrawlerMongoDbTarget struct {
	// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
	ConnectionName *string `pulumi:"connectionName"`
	// The path of the Amazon DocumentDB or MongoDB target (database/collection).
	Path *string `pulumi:"path"`
}

// CrawlerMongoDbTargetInput is an input type that accepts CrawlerMongoDbTargetArgs and CrawlerMongoDbTargetOutput values.
// You can construct a concrete instance of `CrawlerMongoDbTargetInput` via:
//
//	CrawlerMongoDbTargetArgs{...}
type CrawlerMongoDbTargetInput interface {
	pulumi.Input

	ToCrawlerMongoDbTargetOutput() CrawlerMongoDbTargetOutput
	ToCrawlerMongoDbTargetOutputWithContext(context.Context) CrawlerMongoDbTargetOutput
}

// Specifies an Amazon DocumentDB or MongoDB data store to crawl.
type CrawlerMongoDbTargetArgs struct {
	// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// The path of the Amazon DocumentDB or MongoDB target (database/collection).
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (CrawlerMongoDbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongoDbTarget)(nil)).Elem()
}

func (i CrawlerMongoDbTargetArgs) ToCrawlerMongoDbTargetOutput() CrawlerMongoDbTargetOutput {
	return i.ToCrawlerMongoDbTargetOutputWithContext(context.Background())
}

func (i CrawlerMongoDbTargetArgs) ToCrawlerMongoDbTargetOutputWithContext(ctx context.Context) CrawlerMongoDbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMongoDbTargetOutput)
}

// CrawlerMongoDbTargetArrayInput is an input type that accepts CrawlerMongoDbTargetArray and CrawlerMongoDbTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerMongoDbTargetArrayInput` via:
//
//	CrawlerMongoDbTargetArray{ CrawlerMongoDbTargetArgs{...} }
type CrawlerMongoDbTargetArrayInput interface {
	pulumi.Input

	ToCrawlerMongoDbTargetArrayOutput() CrawlerMongoDbTargetArrayOutput
	ToCrawlerMongoDbTargetArrayOutputWithContext(context.Context) CrawlerMongoDbTargetArrayOutput
}

type CrawlerMongoDbTargetArray []CrawlerMongoDbTargetInput

func (CrawlerMongoDbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerMongoDbTarget)(nil)).Elem()
}

func (i CrawlerMongoDbTargetArray) ToCrawlerMongoDbTargetArrayOutput() CrawlerMongoDbTargetArrayOutput {
	return i.ToCrawlerMongoDbTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerMongoDbTargetArray) ToCrawlerMongoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerMongoDbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMongoDbTargetArrayOutput)
}

// Specifies an Amazon DocumentDB or MongoDB data store to crawl.
type CrawlerMongoDbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerMongoDbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongoDbTarget)(nil)).Elem()
}

func (o CrawlerMongoDbTargetOutput) ToCrawlerMongoDbTargetOutput() CrawlerMongoDbTargetOutput {
	return o
}

func (o CrawlerMongoDbTargetOutput) ToCrawlerMongoDbTargetOutputWithContext(ctx context.Context) CrawlerMongoDbTargetOutput {
	return o
}

// The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
func (o CrawlerMongoDbTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerMongoDbTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// The path of the Amazon DocumentDB or MongoDB target (database/collection).
func (o CrawlerMongoDbTargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerMongoDbTarget) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type CrawlerMongoDbTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerMongoDbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerMongoDbTarget)(nil)).Elem()
}

func (o CrawlerMongoDbTargetArrayOutput) ToCrawlerMongoDbTargetArrayOutput() CrawlerMongoDbTargetArrayOutput {
	return o
}

func (o CrawlerMongoDbTargetArrayOutput) ToCrawlerMongoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerMongoDbTargetArrayOutput {
	return o
}

func (o CrawlerMongoDbTargetArrayOutput) Index(i pulumi.IntInput) CrawlerMongoDbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerMongoDbTarget {
		return vs[0].([]CrawlerMongoDbTarget)[vs[1].(int)]
	}).(CrawlerMongoDbTargetOutput)
}

// When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see Incremental Crawls in AWS Glue in the developer guide.
type CrawlerRecrawlPolicy struct {
	// Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events.
	RecrawlBehavior *string `pulumi:"recrawlBehavior"`
}

// CrawlerRecrawlPolicyInput is an input type that accepts CrawlerRecrawlPolicyArgs and CrawlerRecrawlPolicyOutput values.
// You can construct a concrete instance of `CrawlerRecrawlPolicyInput` via:
//
//	CrawlerRecrawlPolicyArgs{...}
type CrawlerRecrawlPolicyInput interface {
	pulumi.Input

	ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput
	ToCrawlerRecrawlPolicyOutputWithContext(context.Context) CrawlerRecrawlPolicyOutput
}

// When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see Incremental Crawls in AWS Glue in the developer guide.
type CrawlerRecrawlPolicyArgs struct {
	// Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events.
	RecrawlBehavior pulumi.StringPtrInput `pulumi:"recrawlBehavior"`
}

func (CrawlerRecrawlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerRecrawlPolicy)(nil)).Elem()
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput {
	return i.ToCrawlerRecrawlPolicyOutputWithContext(context.Background())
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerRecrawlPolicyOutput)
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return i.ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Background())
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerRecrawlPolicyOutput).ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx)
}

// CrawlerRecrawlPolicyPtrInput is an input type that accepts CrawlerRecrawlPolicyArgs, CrawlerRecrawlPolicyPtr and CrawlerRecrawlPolicyPtrOutput values.
// You can construct a concrete instance of `CrawlerRecrawlPolicyPtrInput` via:
//
//	        CrawlerRecrawlPolicyArgs{...}
//
//	or:
//
//	        nil
type CrawlerRecrawlPolicyPtrInput interface {
	pulumi.Input

	ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput
	ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Context) CrawlerRecrawlPolicyPtrOutput
}

type crawlerRecrawlPolicyPtrType CrawlerRecrawlPolicyArgs

func CrawlerRecrawlPolicyPtr(v *CrawlerRecrawlPolicyArgs) CrawlerRecrawlPolicyPtrInput {
	return (*crawlerRecrawlPolicyPtrType)(v)
}

func (*crawlerRecrawlPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerRecrawlPolicy)(nil)).Elem()
}

func (i *crawlerRecrawlPolicyPtrType) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return i.ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Background())
}

func (i *crawlerRecrawlPolicyPtrType) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerRecrawlPolicyPtrOutput)
}

// When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see Incremental Crawls in AWS Glue in the developer guide.
type CrawlerRecrawlPolicyOutput struct{ *pulumi.OutputState }

func (CrawlerRecrawlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerRecrawlPolicy)(nil)).Elem()
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput {
	return o
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyOutput {
	return o
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return o.ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Background())
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrawlerRecrawlPolicy) *CrawlerRecrawlPolicy {
		return &v
	}).(CrawlerRecrawlPolicyPtrOutput)
}

// Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events.
func (o CrawlerRecrawlPolicyOutput) RecrawlBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerRecrawlPolicy) *string { return v.RecrawlBehavior }).(pulumi.StringPtrOutput)
}

type CrawlerRecrawlPolicyPtrOutput struct{ *pulumi.OutputState }

func (CrawlerRecrawlPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerRecrawlPolicy)(nil)).Elem()
}

func (o CrawlerRecrawlPolicyPtrOutput) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return o
}

func (o CrawlerRecrawlPolicyPtrOutput) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return o
}

func (o CrawlerRecrawlPolicyPtrOutput) Elem() CrawlerRecrawlPolicyOutput {
	return o.ApplyT(func(v *CrawlerRecrawlPolicy) CrawlerRecrawlPolicy {
		if v != nil {
			return *v
		}
		var ret CrawlerRecrawlPolicy
		return ret
	}).(CrawlerRecrawlPolicyOutput)
}

// Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events.
func (o CrawlerRecrawlPolicyPtrOutput) RecrawlBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerRecrawlPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RecrawlBehavior
	}).(pulumi.StringPtrOutput)
}

// Specifies a data store in Amazon Simple Storage Service (Amazon S3).
type CrawlerS3Target struct {
	// The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC).
	ConnectionName *string `pulumi:"connectionName"`
	// A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
	DlqEventQueueArn *string `pulumi:"dlqEventQueueArn"`
	// A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
	EventQueueArn *string `pulumi:"eventQueueArn"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions []string `pulumi:"exclusions"`
	// The path to the Amazon S3 target.
	Path *string `pulumi:"path"`
	// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
	SampleSize *int `pulumi:"sampleSize"`
}

// CrawlerS3TargetInput is an input type that accepts CrawlerS3TargetArgs and CrawlerS3TargetOutput values.
// You can construct a concrete instance of `CrawlerS3TargetInput` via:
//
//	CrawlerS3TargetArgs{...}
type CrawlerS3TargetInput interface {
	pulumi.Input

	ToCrawlerS3TargetOutput() CrawlerS3TargetOutput
	ToCrawlerS3TargetOutputWithContext(context.Context) CrawlerS3TargetOutput
}

// Specifies a data store in Amazon Simple Storage Service (Amazon S3).
type CrawlerS3TargetArgs struct {
	// The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC).
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
	DlqEventQueueArn pulumi.StringPtrInput `pulumi:"dlqEventQueueArn"`
	// A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
	EventQueueArn pulumi.StringPtrInput `pulumi:"eventQueueArn"`
	// A list of glob patterns used to exclude from the crawl.
	Exclusions pulumi.StringArrayInput `pulumi:"exclusions"`
	// The path to the Amazon S3 target.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
	SampleSize pulumi.IntPtrInput `pulumi:"sampleSize"`
}

func (CrawlerS3TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return i.ToCrawlerS3TargetOutputWithContext(context.Background())
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerS3TargetOutput)
}

// CrawlerS3TargetArrayInput is an input type that accepts CrawlerS3TargetArray and CrawlerS3TargetArrayOutput values.
// You can construct a concrete instance of `CrawlerS3TargetArrayInput` via:
//
//	CrawlerS3TargetArray{ CrawlerS3TargetArgs{...} }
type CrawlerS3TargetArrayInput interface {
	pulumi.Input

	ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput
	ToCrawlerS3TargetArrayOutputWithContext(context.Context) CrawlerS3TargetArrayOutput
}

type CrawlerS3TargetArray []CrawlerS3TargetInput

func (CrawlerS3TargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerS3Target)(nil)).Elem()
}

func (i CrawlerS3TargetArray) ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput {
	return i.ToCrawlerS3TargetArrayOutputWithContext(context.Background())
}

func (i CrawlerS3TargetArray) ToCrawlerS3TargetArrayOutputWithContext(ctx context.Context) CrawlerS3TargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerS3TargetArrayOutput)
}

// Specifies a data store in Amazon Simple Storage Service (Amazon S3).
type CrawlerS3TargetOutput struct{ *pulumi.OutputState }

func (CrawlerS3TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return o
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return o
}

// The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC).
func (o CrawlerS3TargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
func (o CrawlerS3TargetOutput) DlqEventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.DlqEventQueueArn }).(pulumi.StringPtrOutput)
}

// A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
func (o CrawlerS3TargetOutput) EventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.EventQueueArn }).(pulumi.StringPtrOutput)
}

// A list of glob patterns used to exclude from the crawl.
func (o CrawlerS3TargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerS3Target) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

// The path to the Amazon S3 target.
func (o CrawlerS3TargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
func (o CrawlerS3TargetOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *int { return v.SampleSize }).(pulumi.IntPtrOutput)
}

type CrawlerS3TargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerS3TargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerS3Target)(nil)).Elem()
}

func (o CrawlerS3TargetArrayOutput) ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput {
	return o
}

func (o CrawlerS3TargetArrayOutput) ToCrawlerS3TargetArrayOutputWithContext(ctx context.Context) CrawlerS3TargetArrayOutput {
	return o
}

func (o CrawlerS3TargetArrayOutput) Index(i pulumi.IntInput) CrawlerS3TargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerS3Target {
		return vs[0].([]CrawlerS3Target)[vs[1].(int)]
	}).(CrawlerS3TargetOutput)
}

// A scheduling object using a cron statement to schedule an event.
type CrawlerSchedule struct {
	// A cron expression used to specify the schedule. For more information, see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, specify cron(15 12 * * ? *).
	ScheduleExpression *string `pulumi:"scheduleExpression"`
}

// CrawlerScheduleInput is an input type that accepts CrawlerScheduleArgs and CrawlerScheduleOutput values.
// You can construct a concrete instance of `CrawlerScheduleInput` via:
//
//	CrawlerScheduleArgs{...}
type CrawlerScheduleInput interface {
	pulumi.Input

	ToCrawlerScheduleOutput() CrawlerScheduleOutput
	ToCrawlerScheduleOutputWithContext(context.Context) CrawlerScheduleOutput
}

// A scheduling object using a cron statement to schedule an event.
type CrawlerScheduleArgs struct {
	// A cron expression used to specify the schedule. For more information, see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, specify cron(15 12 * * ? *).
	ScheduleExpression pulumi.StringPtrInput `pulumi:"scheduleExpression"`
}

func (CrawlerScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchedule)(nil)).Elem()
}

func (i CrawlerScheduleArgs) ToCrawlerScheduleOutput() CrawlerScheduleOutput {
	return i.ToCrawlerScheduleOutputWithContext(context.Background())
}

func (i CrawlerScheduleArgs) ToCrawlerScheduleOutputWithContext(ctx context.Context) CrawlerScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerScheduleOutput)
}

func (i CrawlerScheduleArgs) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return i.ToCrawlerSchedulePtrOutputWithContext(context.Background())
}

func (i CrawlerScheduleArgs) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerScheduleOutput).ToCrawlerSchedulePtrOutputWithContext(ctx)
}

// CrawlerSchedulePtrInput is an input type that accepts CrawlerScheduleArgs, CrawlerSchedulePtr and CrawlerSchedulePtrOutput values.
// You can construct a concrete instance of `CrawlerSchedulePtrInput` via:
//
//	        CrawlerScheduleArgs{...}
//
//	or:
//
//	        nil
type CrawlerSchedulePtrInput interface {
	pulumi.Input

	ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput
	ToCrawlerSchedulePtrOutputWithContext(context.Context) CrawlerSchedulePtrOutput
}

type crawlerSchedulePtrType CrawlerScheduleArgs

func CrawlerSchedulePtr(v *CrawlerScheduleArgs) CrawlerSchedulePtrInput {
	return (*crawlerSchedulePtrType)(v)
}

func (*crawlerSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchedule)(nil)).Elem()
}

func (i *crawlerSchedulePtrType) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return i.ToCrawlerSchedulePtrOutputWithContext(context.Background())
}

func (i *crawlerSchedulePtrType) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchedulePtrOutput)
}

// A scheduling object using a cron statement to schedule an event.
type CrawlerScheduleOutput struct{ *pulumi.OutputState }

func (CrawlerScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchedule)(nil)).Elem()
}

func (o CrawlerScheduleOutput) ToCrawlerScheduleOutput() CrawlerScheduleOutput {
	return o
}

func (o CrawlerScheduleOutput) ToCrawlerScheduleOutputWithContext(ctx context.Context) CrawlerScheduleOutput {
	return o
}

func (o CrawlerScheduleOutput) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return o.ToCrawlerSchedulePtrOutputWithContext(context.Background())
}

func (o CrawlerScheduleOutput) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrawlerSchedule) *CrawlerSchedule {
		return &v
	}).(CrawlerSchedulePtrOutput)
}

// A cron expression used to specify the schedule. For more information, see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, specify cron(15 12 * * ? *).
func (o CrawlerScheduleOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchedule) *string { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

type CrawlerSchedulePtrOutput struct{ *pulumi.OutputState }

func (CrawlerSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchedule)(nil)).Elem()
}

func (o CrawlerSchedulePtrOutput) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return o
}

func (o CrawlerSchedulePtrOutput) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return o
}

func (o CrawlerSchedulePtrOutput) Elem() CrawlerScheduleOutput {
	return o.ApplyT(func(v *CrawlerSchedule) CrawlerSchedule {
		if v != nil {
			return *v
		}
		var ret CrawlerSchedule
		return ret
	}).(CrawlerScheduleOutput)
}

// A cron expression used to specify the schedule. For more information, see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, specify cron(15 12 * * ? *).
func (o CrawlerSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The SchemaChangePolicy does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the SchemaChangePolicy on a crawler. The SchemaChangePolicy consists of two components, UpdateBehavior and DeleteBehavior.
type CrawlerSchemaChangePolicy struct {
	// The deletion behavior when the crawler finds a deleted object. A value of LOG specifies that if a table or partition is found to no longer exist, do not delete it, only log that it was found to no longer exist. A value of DELETE_FROM_DATABASE specifies that if a table or partition is found to have been removed, delete it from the database. A value of DEPRECATE_IN_DATABASE specifies that if a table has been found to no longer exist, to add a property to the table that says 'DEPRECATED' and includes a timestamp with the time of deprecation.
	DeleteBehavior *string `pulumi:"deleteBehavior"`
	// The update behavior when the crawler finds a changed schema. A value of LOG specifies that if a table or a partition already exists, and a change is detected, do not update it, only log that a change was detected. Add new tables and new partitions (including on existing tables). A value of UPDATE_IN_DATABASE specifies that if a table or partition already exists, and a change is detected, update it. Add new tables and partitions.
	UpdateBehavior *string `pulumi:"updateBehavior"`
}

// CrawlerSchemaChangePolicyInput is an input type that accepts CrawlerSchemaChangePolicyArgs and CrawlerSchemaChangePolicyOutput values.
// You can construct a concrete instance of `CrawlerSchemaChangePolicyInput` via:
//
//	CrawlerSchemaChangePolicyArgs{...}
type CrawlerSchemaChangePolicyInput interface {
	pulumi.Input

	ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput
	ToCrawlerSchemaChangePolicyOutputWithContext(context.Context) CrawlerSchemaChangePolicyOutput
}

// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The SchemaChangePolicy does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the SchemaChangePolicy on a crawler. The SchemaChangePolicy consists of two components, UpdateBehavior and DeleteBehavior.
type CrawlerSchemaChangePolicyArgs struct {
	// The deletion behavior when the crawler finds a deleted object. A value of LOG specifies that if a table or partition is found to no longer exist, do not delete it, only log that it was found to no longer exist. A value of DELETE_FROM_DATABASE specifies that if a table or partition is found to have been removed, delete it from the database. A value of DEPRECATE_IN_DATABASE specifies that if a table has been found to no longer exist, to add a property to the table that says 'DEPRECATED' and includes a timestamp with the time of deprecation.
	DeleteBehavior pulumi.StringPtrInput `pulumi:"deleteBehavior"`
	// The update behavior when the crawler finds a changed schema. A value of LOG specifies that if a table or a partition already exists, and a change is detected, do not update it, only log that a change was detected. Add new tables and new partitions (including on existing tables). A value of UPDATE_IN_DATABASE specifies that if a table or partition already exists, and a change is detected, update it. Add new tables and partitions.
	UpdateBehavior pulumi.StringPtrInput `pulumi:"updateBehavior"`
}

func (CrawlerSchemaChangePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return i.ToCrawlerSchemaChangePolicyOutputWithContext(context.Background())
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyOutput)
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return i.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyOutput).ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx)
}

// CrawlerSchemaChangePolicyPtrInput is an input type that accepts CrawlerSchemaChangePolicyArgs, CrawlerSchemaChangePolicyPtr and CrawlerSchemaChangePolicyPtrOutput values.
// You can construct a concrete instance of `CrawlerSchemaChangePolicyPtrInput` via:
//
//	        CrawlerSchemaChangePolicyArgs{...}
//
//	or:
//
//	        nil
type CrawlerSchemaChangePolicyPtrInput interface {
	pulumi.Input

	ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput
	ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Context) CrawlerSchemaChangePolicyPtrOutput
}

type crawlerSchemaChangePolicyPtrType CrawlerSchemaChangePolicyArgs

func CrawlerSchemaChangePolicyPtr(v *CrawlerSchemaChangePolicyArgs) CrawlerSchemaChangePolicyPtrInput {
	return (*crawlerSchemaChangePolicyPtrType)(v)
}

func (*crawlerSchemaChangePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (i *crawlerSchemaChangePolicyPtrType) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return i.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (i *crawlerSchemaChangePolicyPtrType) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyPtrOutput)
}

// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The SchemaChangePolicy does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the SchemaChangePolicy on a crawler. The SchemaChangePolicy consists of two components, UpdateBehavior and DeleteBehavior.
type CrawlerSchemaChangePolicyOutput struct{ *pulumi.OutputState }

func (CrawlerSchemaChangePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return o.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrawlerSchemaChangePolicy) *CrawlerSchemaChangePolicy {
		return &v
	}).(CrawlerSchemaChangePolicyPtrOutput)
}

// The deletion behavior when the crawler finds a deleted object. A value of LOG specifies that if a table or partition is found to no longer exist, do not delete it, only log that it was found to no longer exist. A value of DELETE_FROM_DATABASE specifies that if a table or partition is found to have been removed, delete it from the database. A value of DEPRECATE_IN_DATABASE specifies that if a table has been found to no longer exist, to add a property to the table that says 'DEPRECATED' and includes a timestamp with the time of deprecation.
func (o CrawlerSchemaChangePolicyOutput) DeleteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchemaChangePolicy) *string { return v.DeleteBehavior }).(pulumi.StringPtrOutput)
}

// The update behavior when the crawler finds a changed schema. A value of LOG specifies that if a table or a partition already exists, and a change is detected, do not update it, only log that a change was detected. Add new tables and new partitions (including on existing tables). A value of UPDATE_IN_DATABASE specifies that if a table or partition already exists, and a change is detected, update it. Add new tables and partitions.
func (o CrawlerSchemaChangePolicyOutput) UpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchemaChangePolicy) *string { return v.UpdateBehavior }).(pulumi.StringPtrOutput)
}

type CrawlerSchemaChangePolicyPtrOutput struct{ *pulumi.OutputState }

func (CrawlerSchemaChangePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (o CrawlerSchemaChangePolicyPtrOutput) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return o
}

func (o CrawlerSchemaChangePolicyPtrOutput) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return o
}

func (o CrawlerSchemaChangePolicyPtrOutput) Elem() CrawlerSchemaChangePolicyOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) CrawlerSchemaChangePolicy {
		if v != nil {
			return *v
		}
		var ret CrawlerSchemaChangePolicy
		return ret
	}).(CrawlerSchemaChangePolicyOutput)
}

// The deletion behavior when the crawler finds a deleted object. A value of LOG specifies that if a table or partition is found to no longer exist, do not delete it, only log that it was found to no longer exist. A value of DELETE_FROM_DATABASE specifies that if a table or partition is found to have been removed, delete it from the database. A value of DEPRECATE_IN_DATABASE specifies that if a table has been found to no longer exist, to add a property to the table that says 'DEPRECATED' and includes a timestamp with the time of deprecation.
func (o CrawlerSchemaChangePolicyPtrOutput) DeleteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeleteBehavior
	}).(pulumi.StringPtrOutput)
}

// The update behavior when the crawler finds a changed schema. A value of LOG specifies that if a table or a partition already exists, and a change is detected, do not update it, only log that a change was detected. Add new tables and new partitions (including on existing tables). A value of UPDATE_IN_DATABASE specifies that if a table or partition already exists, and a change is detected, update it. Add new tables and partitions.
func (o CrawlerSchemaChangePolicyPtrOutput) UpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Specifies data stores to crawl.
type CrawlerTargets struct {
	// Specifies AWS Glue Data Catalog targets.
	CatalogTargets []CrawlerCatalogTarget `pulumi:"catalogTargets"`
	// Specifies an array of Delta data store targets.
	DeltaTargets []CrawlerDeltaTarget `pulumi:"deltaTargets"`
	// Specifies Amazon DynamoDB targets.
	DynamoDbTargets []CrawlerDynamoDbTarget `pulumi:"dynamoDbTargets"`
	// Specifies Apache Iceberg data store targets.
	IcebergTargets []CrawlerIcebergTarget `pulumi:"icebergTargets"`
	// Specifies JDBC targets.
	JdbcTargets []CrawlerJdbcTarget `pulumi:"jdbcTargets"`
	// A list of Mongo DB targets.
	MongoDbTargets []CrawlerMongoDbTarget `pulumi:"mongoDbTargets"`
	// Specifies Amazon Simple Storage Service (Amazon S3) targets.
	S3Targets []CrawlerS3Target `pulumi:"s3Targets"`
}

// CrawlerTargetsInput is an input type that accepts CrawlerTargetsArgs and CrawlerTargetsOutput values.
// You can construct a concrete instance of `CrawlerTargetsInput` via:
//
//	CrawlerTargetsArgs{...}
type CrawlerTargetsInput interface {
	pulumi.Input

	ToCrawlerTargetsOutput() CrawlerTargetsOutput
	ToCrawlerTargetsOutputWithContext(context.Context) CrawlerTargetsOutput
}

// Specifies data stores to crawl.
type CrawlerTargetsArgs struct {
	// Specifies AWS Glue Data Catalog targets.
	CatalogTargets CrawlerCatalogTargetArrayInput `pulumi:"catalogTargets"`
	// Specifies an array of Delta data store targets.
	DeltaTargets CrawlerDeltaTargetArrayInput `pulumi:"deltaTargets"`
	// Specifies Amazon DynamoDB targets.
	DynamoDbTargets CrawlerDynamoDbTargetArrayInput `pulumi:"dynamoDbTargets"`
	// Specifies Apache Iceberg data store targets.
	IcebergTargets CrawlerIcebergTargetArrayInput `pulumi:"icebergTargets"`
	// Specifies JDBC targets.
	JdbcTargets CrawlerJdbcTargetArrayInput `pulumi:"jdbcTargets"`
	// A list of Mongo DB targets.
	MongoDbTargets CrawlerMongoDbTargetArrayInput `pulumi:"mongoDbTargets"`
	// Specifies Amazon Simple Storage Service (Amazon S3) targets.
	S3Targets CrawlerS3TargetArrayInput `pulumi:"s3Targets"`
}

func (CrawlerTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerTargets)(nil)).Elem()
}

func (i CrawlerTargetsArgs) ToCrawlerTargetsOutput() CrawlerTargetsOutput {
	return i.ToCrawlerTargetsOutputWithContext(context.Background())
}

func (i CrawlerTargetsArgs) ToCrawlerTargetsOutputWithContext(ctx context.Context) CrawlerTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerTargetsOutput)
}

// Specifies data stores to crawl.
type CrawlerTargetsOutput struct{ *pulumi.OutputState }

func (CrawlerTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerTargets)(nil)).Elem()
}

func (o CrawlerTargetsOutput) ToCrawlerTargetsOutput() CrawlerTargetsOutput {
	return o
}

func (o CrawlerTargetsOutput) ToCrawlerTargetsOutputWithContext(ctx context.Context) CrawlerTargetsOutput {
	return o
}

// Specifies AWS Glue Data Catalog targets.
func (o CrawlerTargetsOutput) CatalogTargets() CrawlerCatalogTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerCatalogTarget { return v.CatalogTargets }).(CrawlerCatalogTargetArrayOutput)
}

// Specifies an array of Delta data store targets.
func (o CrawlerTargetsOutput) DeltaTargets() CrawlerDeltaTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerDeltaTarget { return v.DeltaTargets }).(CrawlerDeltaTargetArrayOutput)
}

// Specifies Amazon DynamoDB targets.
func (o CrawlerTargetsOutput) DynamoDbTargets() CrawlerDynamoDbTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerDynamoDbTarget { return v.DynamoDbTargets }).(CrawlerDynamoDbTargetArrayOutput)
}

// Specifies Apache Iceberg data store targets.
func (o CrawlerTargetsOutput) IcebergTargets() CrawlerIcebergTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerIcebergTarget { return v.IcebergTargets }).(CrawlerIcebergTargetArrayOutput)
}

// Specifies JDBC targets.
func (o CrawlerTargetsOutput) JdbcTargets() CrawlerJdbcTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerJdbcTarget { return v.JdbcTargets }).(CrawlerJdbcTargetArrayOutput)
}

// A list of Mongo DB targets.
func (o CrawlerTargetsOutput) MongoDbTargets() CrawlerMongoDbTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerMongoDbTarget { return v.MongoDbTargets }).(CrawlerMongoDbTargetArrayOutput)
}

// Specifies Amazon Simple Storage Service (Amazon S3) targets.
func (o CrawlerTargetsOutput) S3Targets() CrawlerS3TargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerS3Target { return v.S3Targets }).(CrawlerS3TargetArrayOutput)
}

type CrawlerTargetsPtrOutput struct{ *pulumi.OutputState }

func (CrawlerTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerTargets)(nil)).Elem()
}

func (o CrawlerTargetsPtrOutput) ToCrawlerTargetsPtrOutput() CrawlerTargetsPtrOutput {
	return o
}

func (o CrawlerTargetsPtrOutput) ToCrawlerTargetsPtrOutputWithContext(ctx context.Context) CrawlerTargetsPtrOutput {
	return o
}

func (o CrawlerTargetsPtrOutput) Elem() CrawlerTargetsOutput {
	return o.ApplyT(func(v *CrawlerTargets) CrawlerTargets {
		if v != nil {
			return *v
		}
		var ret CrawlerTargets
		return ret
	}).(CrawlerTargetsOutput)
}

// Specifies AWS Glue Data Catalog targets.
func (o CrawlerTargetsPtrOutput) CatalogTargets() CrawlerCatalogTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerCatalogTarget {
		if v == nil {
			return nil
		}
		return v.CatalogTargets
	}).(CrawlerCatalogTargetArrayOutput)
}

// Specifies an array of Delta data store targets.
func (o CrawlerTargetsPtrOutput) DeltaTargets() CrawlerDeltaTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerDeltaTarget {
		if v == nil {
			return nil
		}
		return v.DeltaTargets
	}).(CrawlerDeltaTargetArrayOutput)
}

// Specifies Amazon DynamoDB targets.
func (o CrawlerTargetsPtrOutput) DynamoDbTargets() CrawlerDynamoDbTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerDynamoDbTarget {
		if v == nil {
			return nil
		}
		return v.DynamoDbTargets
	}).(CrawlerDynamoDbTargetArrayOutput)
}

// Specifies Apache Iceberg data store targets.
func (o CrawlerTargetsPtrOutput) IcebergTargets() CrawlerIcebergTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerIcebergTarget {
		if v == nil {
			return nil
		}
		return v.IcebergTargets
	}).(CrawlerIcebergTargetArrayOutput)
}

// Specifies JDBC targets.
func (o CrawlerTargetsPtrOutput) JdbcTargets() CrawlerJdbcTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerJdbcTarget {
		if v == nil {
			return nil
		}
		return v.JdbcTargets
	}).(CrawlerJdbcTargetArrayOutput)
}

// A list of Mongo DB targets.
func (o CrawlerTargetsPtrOutput) MongoDbTargets() CrawlerMongoDbTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerMongoDbTarget {
		if v == nil {
			return nil
		}
		return v.MongoDbTargets
	}).(CrawlerMongoDbTargetArrayOutput)
}

// Specifies Amazon Simple Storage Service (Amazon S3) targets.
func (o CrawlerTargetsPtrOutput) S3Targets() CrawlerS3TargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerS3Target {
		if v == nil {
			return nil
		}
		return v.S3Targets
	}).(CrawlerS3TargetArrayOutput)
}

// The AWS Lake Formation principal.
type DatabaseDataLakePrincipal struct {
	// An identifier for the AWS Lake Formation principal.
	DataLakePrincipalIdentifier *string `pulumi:"dataLakePrincipalIdentifier"`
}

// DatabaseDataLakePrincipalInput is an input type that accepts DatabaseDataLakePrincipalArgs and DatabaseDataLakePrincipalOutput values.
// You can construct a concrete instance of `DatabaseDataLakePrincipalInput` via:
//
//	DatabaseDataLakePrincipalArgs{...}
type DatabaseDataLakePrincipalInput interface {
	pulumi.Input

	ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput
	ToDatabaseDataLakePrincipalOutputWithContext(context.Context) DatabaseDataLakePrincipalOutput
}

// The AWS Lake Formation principal.
type DatabaseDataLakePrincipalArgs struct {
	// An identifier for the AWS Lake Formation principal.
	DataLakePrincipalIdentifier pulumi.StringPtrInput `pulumi:"dataLakePrincipalIdentifier"`
}

func (DatabaseDataLakePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataLakePrincipal)(nil)).Elem()
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput {
	return i.ToDatabaseDataLakePrincipalOutputWithContext(context.Background())
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalOutput)
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return i.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalOutput).ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx)
}

// DatabaseDataLakePrincipalPtrInput is an input type that accepts DatabaseDataLakePrincipalArgs, DatabaseDataLakePrincipalPtr and DatabaseDataLakePrincipalPtrOutput values.
// You can construct a concrete instance of `DatabaseDataLakePrincipalPtrInput` via:
//
//	        DatabaseDataLakePrincipalArgs{...}
//
//	or:
//
//	        nil
type DatabaseDataLakePrincipalPtrInput interface {
	pulumi.Input

	ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput
	ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Context) DatabaseDataLakePrincipalPtrOutput
}

type databaseDataLakePrincipalPtrType DatabaseDataLakePrincipalArgs

func DatabaseDataLakePrincipalPtr(v *DatabaseDataLakePrincipalArgs) DatabaseDataLakePrincipalPtrInput {
	return (*databaseDataLakePrincipalPtrType)(v)
}

func (*databaseDataLakePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataLakePrincipal)(nil)).Elem()
}

func (i *databaseDataLakePrincipalPtrType) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return i.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (i *databaseDataLakePrincipalPtrType) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalPtrOutput)
}

// The AWS Lake Formation principal.
type DatabaseDataLakePrincipalOutput struct{ *pulumi.OutputState }

func (DatabaseDataLakePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataLakePrincipal)(nil)).Elem()
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput {
	return o
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalOutput {
	return o
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return o.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseDataLakePrincipal) *DatabaseDataLakePrincipal {
		return &v
	}).(DatabaseDataLakePrincipalPtrOutput)
}

// An identifier for the AWS Lake Formation principal.
func (o DatabaseDataLakePrincipalOutput) DataLakePrincipalIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDataLakePrincipal) *string { return v.DataLakePrincipalIdentifier }).(pulumi.StringPtrOutput)
}

type DatabaseDataLakePrincipalPtrOutput struct{ *pulumi.OutputState }

func (DatabaseDataLakePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataLakePrincipal)(nil)).Elem()
}

func (o DatabaseDataLakePrincipalPtrOutput) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return o
}

func (o DatabaseDataLakePrincipalPtrOutput) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return o
}

func (o DatabaseDataLakePrincipalPtrOutput) Elem() DatabaseDataLakePrincipalOutput {
	return o.ApplyT(func(v *DatabaseDataLakePrincipal) DatabaseDataLakePrincipal {
		if v != nil {
			return *v
		}
		var ret DatabaseDataLakePrincipal
		return ret
	}).(DatabaseDataLakePrincipalOutput)
}

// An identifier for the AWS Lake Formation principal.
func (o DatabaseDataLakePrincipalPtrOutput) DataLakePrincipalIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataLakePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.DataLakePrincipalIdentifier
	}).(pulumi.StringPtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
type DatabaseFederatedDatabase struct {
	// The name of the connection to the external metastore.
	ConnectionName *string `pulumi:"connectionName"`
	// A unique identifier for the federated database.
	Identifier *string `pulumi:"identifier"`
}

// DatabaseFederatedDatabaseInput is an input type that accepts DatabaseFederatedDatabaseArgs and DatabaseFederatedDatabaseOutput values.
// You can construct a concrete instance of `DatabaseFederatedDatabaseInput` via:
//
//	DatabaseFederatedDatabaseArgs{...}
type DatabaseFederatedDatabaseInput interface {
	pulumi.Input

	ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput
	ToDatabaseFederatedDatabaseOutputWithContext(context.Context) DatabaseFederatedDatabaseOutput
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
type DatabaseFederatedDatabaseArgs struct {
	// The name of the connection to the external metastore.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// A unique identifier for the federated database.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (DatabaseFederatedDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFederatedDatabase)(nil)).Elem()
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput {
	return i.ToDatabaseFederatedDatabaseOutputWithContext(context.Background())
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabaseOutputWithContext(ctx context.Context) DatabaseFederatedDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabaseOutput)
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return i.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabaseOutput).ToDatabaseFederatedDatabasePtrOutputWithContext(ctx)
}

// DatabaseFederatedDatabasePtrInput is an input type that accepts DatabaseFederatedDatabaseArgs, DatabaseFederatedDatabasePtr and DatabaseFederatedDatabasePtrOutput values.
// You can construct a concrete instance of `DatabaseFederatedDatabasePtrInput` via:
//
//	        DatabaseFederatedDatabaseArgs{...}
//
//	or:
//
//	        nil
type DatabaseFederatedDatabasePtrInput interface {
	pulumi.Input

	ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput
	ToDatabaseFederatedDatabasePtrOutputWithContext(context.Context) DatabaseFederatedDatabasePtrOutput
}

type databaseFederatedDatabasePtrType DatabaseFederatedDatabaseArgs

func DatabaseFederatedDatabasePtr(v *DatabaseFederatedDatabaseArgs) DatabaseFederatedDatabasePtrInput {
	return (*databaseFederatedDatabasePtrType)(v)
}

func (*databaseFederatedDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseFederatedDatabase)(nil)).Elem()
}

func (i *databaseFederatedDatabasePtrType) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return i.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (i *databaseFederatedDatabasePtrType) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabasePtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
type DatabaseFederatedDatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseFederatedDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFederatedDatabase)(nil)).Elem()
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput {
	return o
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabaseOutputWithContext(ctx context.Context) DatabaseFederatedDatabaseOutput {
	return o
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return o.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseFederatedDatabase) *DatabaseFederatedDatabase {
		return &v
	}).(DatabaseFederatedDatabasePtrOutput)
}

// The name of the connection to the external metastore.
func (o DatabaseFederatedDatabaseOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFederatedDatabase) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// A unique identifier for the federated database.
func (o DatabaseFederatedDatabaseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFederatedDatabase) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type DatabaseFederatedDatabasePtrOutput struct{ *pulumi.OutputState }

func (DatabaseFederatedDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseFederatedDatabase)(nil)).Elem()
}

func (o DatabaseFederatedDatabasePtrOutput) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return o
}

func (o DatabaseFederatedDatabasePtrOutput) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return o
}

func (o DatabaseFederatedDatabasePtrOutput) Elem() DatabaseFederatedDatabaseOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) DatabaseFederatedDatabase {
		if v != nil {
			return *v
		}
		var ret DatabaseFederatedDatabase
		return ret
	}).(DatabaseFederatedDatabaseOutput)
}

// The name of the connection to the external metastore.
func (o DatabaseFederatedDatabasePtrOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionName
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for the federated database.
func (o DatabaseFederatedDatabasePtrOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Identifier
	}).(pulumi.StringPtrOutput)
}

// A structure that describes a target database for resource linking.
type DatabaseIdentifier struct {
	// The ID of the Data Catalog in which the database resides.
	CatalogId *string `pulumi:"catalogId"`
	// The name of the catalog database.
	DatabaseName *string `pulumi:"databaseName"`
	// Region of the target database.
	Region *string `pulumi:"region"`
}

// DatabaseIdentifierInput is an input type that accepts DatabaseIdentifierArgs and DatabaseIdentifierOutput values.
// You can construct a concrete instance of `DatabaseIdentifierInput` via:
//
//	DatabaseIdentifierArgs{...}
type DatabaseIdentifierInput interface {
	pulumi.Input

	ToDatabaseIdentifierOutput() DatabaseIdentifierOutput
	ToDatabaseIdentifierOutputWithContext(context.Context) DatabaseIdentifierOutput
}

// A structure that describes a target database for resource linking.
type DatabaseIdentifierArgs struct {
	// The ID of the Data Catalog in which the database resides.
	CatalogId pulumi.StringPtrInput `pulumi:"catalogId"`
	// The name of the catalog database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Region of the target database.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (DatabaseIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIdentifier)(nil)).Elem()
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierOutput() DatabaseIdentifierOutput {
	return i.ToDatabaseIdentifierOutputWithContext(context.Background())
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierOutputWithContext(ctx context.Context) DatabaseIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierOutput)
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return i.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierOutput).ToDatabaseIdentifierPtrOutputWithContext(ctx)
}

// DatabaseIdentifierPtrInput is an input type that accepts DatabaseIdentifierArgs, DatabaseIdentifierPtr and DatabaseIdentifierPtrOutput values.
// You can construct a concrete instance of `DatabaseIdentifierPtrInput` via:
//
//	        DatabaseIdentifierArgs{...}
//
//	or:
//
//	        nil
type DatabaseIdentifierPtrInput interface {
	pulumi.Input

	ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput
	ToDatabaseIdentifierPtrOutputWithContext(context.Context) DatabaseIdentifierPtrOutput
}

type databaseIdentifierPtrType DatabaseIdentifierArgs

func DatabaseIdentifierPtr(v *DatabaseIdentifierArgs) DatabaseIdentifierPtrInput {
	return (*databaseIdentifierPtrType)(v)
}

func (*databaseIdentifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIdentifier)(nil)).Elem()
}

func (i *databaseIdentifierPtrType) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return i.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (i *databaseIdentifierPtrType) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierPtrOutput)
}

// A structure that describes a target database for resource linking.
type DatabaseIdentifierOutput struct{ *pulumi.OutputState }

func (DatabaseIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIdentifier)(nil)).Elem()
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierOutput() DatabaseIdentifierOutput {
	return o
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierOutputWithContext(ctx context.Context) DatabaseIdentifierOutput {
	return o
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return o.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseIdentifier) *DatabaseIdentifier {
		return &v
	}).(DatabaseIdentifierPtrOutput)
}

// The ID of the Data Catalog in which the database resides.
func (o DatabaseIdentifierOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

// The name of the catalog database.
func (o DatabaseIdentifierOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Region of the target database.
func (o DatabaseIdentifierOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type DatabaseIdentifierPtrOutput struct{ *pulumi.OutputState }

func (DatabaseIdentifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIdentifier)(nil)).Elem()
}

func (o DatabaseIdentifierPtrOutput) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return o
}

func (o DatabaseIdentifierPtrOutput) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return o
}

func (o DatabaseIdentifierPtrOutput) Elem() DatabaseIdentifierOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) DatabaseIdentifier {
		if v != nil {
			return *v
		}
		var ret DatabaseIdentifier
		return ret
	}).(DatabaseIdentifierOutput)
}

// The ID of the Data Catalog in which the database resides.
func (o DatabaseIdentifierPtrOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.CatalogId
	}).(pulumi.StringPtrOutput)
}

// The name of the catalog database.
func (o DatabaseIdentifierPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Region of the target database.
func (o DatabaseIdentifierPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The structure used to create or update a database.
type DatabaseInputType struct {
	// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
	CreateTableDefaultPermissions []DatabasePrincipalPrivileges `pulumi:"createTableDefaultPermissions"`
	// A description of the database.
	Description *string `pulumi:"description"`
	// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
	FederatedDatabase *DatabaseFederatedDatabase `pulumi:"federatedDatabase"`
	// The location of the database (for example, an HDFS path).
	LocationUri *string `pulumi:"locationUri"`
	// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
	Name *string `pulumi:"name"`
	// These key-value pairs define parameters and properties of the database.
	Parameters interface{} `pulumi:"parameters"`
	// A DatabaseIdentifier structure that describes a target database for resource linking.
	TargetDatabase *DatabaseIdentifier `pulumi:"targetDatabase"`
}

// DatabaseInputTypeInput is an input type that accepts DatabaseInputTypeArgs and DatabaseInputTypeOutput values.
// You can construct a concrete instance of `DatabaseInputTypeInput` via:
//
//	DatabaseInputTypeArgs{...}
type DatabaseInputTypeInput interface {
	pulumi.Input

	ToDatabaseInputTypeOutput() DatabaseInputTypeOutput
	ToDatabaseInputTypeOutputWithContext(context.Context) DatabaseInputTypeOutput
}

// The structure used to create or update a database.
type DatabaseInputTypeArgs struct {
	// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
	CreateTableDefaultPermissions DatabasePrincipalPrivilegesArrayInput `pulumi:"createTableDefaultPermissions"`
	// A description of the database.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
	FederatedDatabase DatabaseFederatedDatabasePtrInput `pulumi:"federatedDatabase"`
	// The location of the database (for example, an HDFS path).
	LocationUri pulumi.StringPtrInput `pulumi:"locationUri"`
	// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// These key-value pairs define parameters and properties of the database.
	Parameters pulumi.Input `pulumi:"parameters"`
	// A DatabaseIdentifier structure that describes a target database for resource linking.
	TargetDatabase DatabaseIdentifierPtrInput `pulumi:"targetDatabase"`
}

func (DatabaseInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInputType)(nil)).Elem()
}

func (i DatabaseInputTypeArgs) ToDatabaseInputTypeOutput() DatabaseInputTypeOutput {
	return i.ToDatabaseInputTypeOutputWithContext(context.Background())
}

func (i DatabaseInputTypeArgs) ToDatabaseInputTypeOutputWithContext(ctx context.Context) DatabaseInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInputTypeOutput)
}

// The structure used to create or update a database.
type DatabaseInputTypeOutput struct{ *pulumi.OutputState }

func (DatabaseInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInputType)(nil)).Elem()
}

func (o DatabaseInputTypeOutput) ToDatabaseInputTypeOutput() DatabaseInputTypeOutput {
	return o
}

func (o DatabaseInputTypeOutput) ToDatabaseInputTypeOutputWithContext(ctx context.Context) DatabaseInputTypeOutput {
	return o
}

// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
func (o DatabaseInputTypeOutput) CreateTableDefaultPermissions() DatabasePrincipalPrivilegesArrayOutput {
	return o.ApplyT(func(v DatabaseInputType) []DatabasePrincipalPrivileges { return v.CreateTableDefaultPermissions }).(DatabasePrincipalPrivilegesArrayOutput)
}

// A description of the database.
func (o DatabaseInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
func (o DatabaseInputTypeOutput) FederatedDatabase() DatabaseFederatedDatabasePtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *DatabaseFederatedDatabase { return v.FederatedDatabase }).(DatabaseFederatedDatabasePtrOutput)
}

// The location of the database (for example, an HDFS path).
func (o DatabaseInputTypeOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.LocationUri }).(pulumi.StringPtrOutput)
}

// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
func (o DatabaseInputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// These key-value pairs define parameters and properties of the database.
func (o DatabaseInputTypeOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabaseInputType) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// A DatabaseIdentifier structure that describes a target database for resource linking.
func (o DatabaseInputTypeOutput) TargetDatabase() DatabaseIdentifierPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *DatabaseIdentifier { return v.TargetDatabase }).(DatabaseIdentifierPtrOutput)
}

type DatabaseInputTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInputType)(nil)).Elem()
}

func (o DatabaseInputTypePtrOutput) ToDatabaseInputTypePtrOutput() DatabaseInputTypePtrOutput {
	return o
}

func (o DatabaseInputTypePtrOutput) ToDatabaseInputTypePtrOutputWithContext(ctx context.Context) DatabaseInputTypePtrOutput {
	return o
}

func (o DatabaseInputTypePtrOutput) Elem() DatabaseInputTypeOutput {
	return o.ApplyT(func(v *DatabaseInputType) DatabaseInputType {
		if v != nil {
			return *v
		}
		var ret DatabaseInputType
		return ret
	}).(DatabaseInputTypeOutput)
}

// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
func (o DatabaseInputTypePtrOutput) CreateTableDefaultPermissions() DatabasePrincipalPrivilegesArrayOutput {
	return o.ApplyT(func(v *DatabaseInputType) []DatabasePrincipalPrivileges {
		if v == nil {
			return nil
		}
		return v.CreateTableDefaultPermissions
	}).(DatabasePrincipalPrivilegesArrayOutput)
}

// A description of the database.
func (o DatabaseInputTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
func (o DatabaseInputTypePtrOutput) FederatedDatabase() DatabaseFederatedDatabasePtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *DatabaseFederatedDatabase {
		if v == nil {
			return nil
		}
		return v.FederatedDatabase
	}).(DatabaseFederatedDatabasePtrOutput)
}

// The location of the database (for example, an HDFS path).
func (o DatabaseInputTypePtrOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.LocationUri
	}).(pulumi.StringPtrOutput)
}

// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
func (o DatabaseInputTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// These key-value pairs define parameters and properties of the database.
func (o DatabaseInputTypePtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *DatabaseInputType) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

// A DatabaseIdentifier structure that describes a target database for resource linking.
func (o DatabaseInputTypePtrOutput) TargetDatabase() DatabaseIdentifierPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *DatabaseIdentifier {
		if v == nil {
			return nil
		}
		return v.TargetDatabase
	}).(DatabaseIdentifierPtrOutput)
}

// The permissions granted to a principal.
type DatabasePrincipalPrivileges struct {
	// The permissions that are granted to the principal.
	Permissions []string `pulumi:"permissions"`
	// The principal who is granted permissions.
	Principal *DatabaseDataLakePrincipal `pulumi:"principal"`
}

// DatabasePrincipalPrivilegesInput is an input type that accepts DatabasePrincipalPrivilegesArgs and DatabasePrincipalPrivilegesOutput values.
// You can construct a concrete instance of `DatabasePrincipalPrivilegesInput` via:
//
//	DatabasePrincipalPrivilegesArgs{...}
type DatabasePrincipalPrivilegesInput interface {
	pulumi.Input

	ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput
	ToDatabasePrincipalPrivilegesOutputWithContext(context.Context) DatabasePrincipalPrivilegesOutput
}

// The permissions granted to a principal.
type DatabasePrincipalPrivilegesArgs struct {
	// The permissions that are granted to the principal.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
	// The principal who is granted permissions.
	Principal DatabaseDataLakePrincipalPtrInput `pulumi:"principal"`
}

func (DatabasePrincipalPrivilegesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrincipalPrivileges)(nil)).Elem()
}

func (i DatabasePrincipalPrivilegesArgs) ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput {
	return i.ToDatabasePrincipalPrivilegesOutputWithContext(context.Background())
}

func (i DatabasePrincipalPrivilegesArgs) ToDatabasePrincipalPrivilegesOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePrincipalPrivilegesOutput)
}

// DatabasePrincipalPrivilegesArrayInput is an input type that accepts DatabasePrincipalPrivilegesArray and DatabasePrincipalPrivilegesArrayOutput values.
// You can construct a concrete instance of `DatabasePrincipalPrivilegesArrayInput` via:
//
//	DatabasePrincipalPrivilegesArray{ DatabasePrincipalPrivilegesArgs{...} }
type DatabasePrincipalPrivilegesArrayInput interface {
	pulumi.Input

	ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput
	ToDatabasePrincipalPrivilegesArrayOutputWithContext(context.Context) DatabasePrincipalPrivilegesArrayOutput
}

type DatabasePrincipalPrivilegesArray []DatabasePrincipalPrivilegesInput

func (DatabasePrincipalPrivilegesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePrincipalPrivileges)(nil)).Elem()
}

func (i DatabasePrincipalPrivilegesArray) ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput {
	return i.ToDatabasePrincipalPrivilegesArrayOutputWithContext(context.Background())
}

func (i DatabasePrincipalPrivilegesArray) ToDatabasePrincipalPrivilegesArrayOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePrincipalPrivilegesArrayOutput)
}

// The permissions granted to a principal.
type DatabasePrincipalPrivilegesOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalPrivilegesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrincipalPrivileges)(nil)).Elem()
}

func (o DatabasePrincipalPrivilegesOutput) ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput {
	return o
}

func (o DatabasePrincipalPrivilegesOutput) ToDatabasePrincipalPrivilegesOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesOutput {
	return o
}

// The permissions that are granted to the principal.
func (o DatabasePrincipalPrivilegesOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabasePrincipalPrivileges) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The principal who is granted permissions.
func (o DatabasePrincipalPrivilegesOutput) Principal() DatabaseDataLakePrincipalPtrOutput {
	return o.ApplyT(func(v DatabasePrincipalPrivileges) *DatabaseDataLakePrincipal { return v.Principal }).(DatabaseDataLakePrincipalPtrOutput)
}

type DatabasePrincipalPrivilegesArrayOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalPrivilegesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePrincipalPrivileges)(nil)).Elem()
}

func (o DatabasePrincipalPrivilegesArrayOutput) ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput {
	return o
}

func (o DatabasePrincipalPrivilegesArrayOutput) ToDatabasePrincipalPrivilegesArrayOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesArrayOutput {
	return o
}

func (o DatabasePrincipalPrivilegesArrayOutput) Index(i pulumi.IntInput) DatabasePrincipalPrivilegesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasePrincipalPrivileges {
		return vs[0].([]DatabasePrincipalPrivileges)[vs[1].(int)]
	}).(DatabasePrincipalPrivilegesOutput)
}

type JobCommand struct {
	// The name of the job command. For an Apache Spark ETL job, this must be `glueetl` . For a Python shell job, it must be `pythonshell` . For an Apache Spark streaming ETL job, this must be `gluestreaming` . For a Ray job, this must be `glueray` .
	Name *string `pulumi:"name"`
	// The Python version being used to execute a Python shell job. Allowed values are 3 or 3.9. Version 2 is deprecated.
	PythonVersion *string `pulumi:"pythonVersion"`
	// In Ray jobs, Runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html) in the AWS Glue Developer Guide.
	Runtime *string `pulumi:"runtime"`
	// Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job (required).
	ScriptLocation *string `pulumi:"scriptLocation"`
}

// JobCommandInput is an input type that accepts JobCommandArgs and JobCommandOutput values.
// You can construct a concrete instance of `JobCommandInput` via:
//
//	JobCommandArgs{...}
type JobCommandInput interface {
	pulumi.Input

	ToJobCommandOutput() JobCommandOutput
	ToJobCommandOutputWithContext(context.Context) JobCommandOutput
}

type JobCommandArgs struct {
	// The name of the job command. For an Apache Spark ETL job, this must be `glueetl` . For a Python shell job, it must be `pythonshell` . For an Apache Spark streaming ETL job, this must be `gluestreaming` . For a Ray job, this must be `glueray` .
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The Python version being used to execute a Python shell job. Allowed values are 3 or 3.9. Version 2 is deprecated.
	PythonVersion pulumi.StringPtrInput `pulumi:"pythonVersion"`
	// In Ray jobs, Runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html) in the AWS Glue Developer Guide.
	Runtime pulumi.StringPtrInput `pulumi:"runtime"`
	// Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job (required).
	ScriptLocation pulumi.StringPtrInput `pulumi:"scriptLocation"`
}

func (JobCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (i JobCommandArgs) ToJobCommandOutput() JobCommandOutput {
	return i.ToJobCommandOutputWithContext(context.Background())
}

func (i JobCommandArgs) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCommandOutput)
}

type JobCommandOutput struct{ *pulumi.OutputState }

func (JobCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (o JobCommandOutput) ToJobCommandOutput() JobCommandOutput {
	return o
}

func (o JobCommandOutput) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return o
}

// The name of the job command. For an Apache Spark ETL job, this must be `glueetl` . For a Python shell job, it must be `pythonshell` . For an Apache Spark streaming ETL job, this must be `gluestreaming` . For a Ray job, this must be `glueray` .
func (o JobCommandOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Python version being used to execute a Python shell job. Allowed values are 3 or 3.9. Version 2 is deprecated.
func (o JobCommandOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.PythonVersion }).(pulumi.StringPtrOutput)
}

// In Ray jobs, Runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html) in the AWS Glue Developer Guide.
func (o JobCommandOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

// Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job (required).
func (o JobCommandOutput) ScriptLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.ScriptLocation }).(pulumi.StringPtrOutput)
}

type JobCommandPtrOutput struct{ *pulumi.OutputState }

func (JobCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCommand)(nil)).Elem()
}

func (o JobCommandPtrOutput) ToJobCommandPtrOutput() JobCommandPtrOutput {
	return o
}

func (o JobCommandPtrOutput) ToJobCommandPtrOutputWithContext(ctx context.Context) JobCommandPtrOutput {
	return o
}

func (o JobCommandPtrOutput) Elem() JobCommandOutput {
	return o.ApplyT(func(v *JobCommand) JobCommand {
		if v != nil {
			return *v
		}
		var ret JobCommand
		return ret
	}).(JobCommandOutput)
}

// The name of the job command. For an Apache Spark ETL job, this must be `glueetl` . For a Python shell job, it must be `pythonshell` . For an Apache Spark streaming ETL job, this must be `gluestreaming` . For a Ray job, this must be `glueray` .
func (o JobCommandPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Python version being used to execute a Python shell job. Allowed values are 3 or 3.9. Version 2 is deprecated.
func (o JobCommandPtrOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.PythonVersion
	}).(pulumi.StringPtrOutput)
}

// In Ray jobs, Runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html) in the AWS Glue Developer Guide.
func (o JobCommandPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

// Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job (required).
func (o JobCommandPtrOutput) ScriptLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.ScriptLocation
	}).(pulumi.StringPtrOutput)
}

type JobConnectionsList struct {
	// A list of connections used by the job.
	Connections []string `pulumi:"connections"`
}

// JobConnectionsListInput is an input type that accepts JobConnectionsListArgs and JobConnectionsListOutput values.
// You can construct a concrete instance of `JobConnectionsListInput` via:
//
//	JobConnectionsListArgs{...}
type JobConnectionsListInput interface {
	pulumi.Input

	ToJobConnectionsListOutput() JobConnectionsListOutput
	ToJobConnectionsListOutputWithContext(context.Context) JobConnectionsListOutput
}

type JobConnectionsListArgs struct {
	// A list of connections used by the job.
	Connections pulumi.StringArrayInput `pulumi:"connections"`
}

func (JobConnectionsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConnectionsList)(nil)).Elem()
}

func (i JobConnectionsListArgs) ToJobConnectionsListOutput() JobConnectionsListOutput {
	return i.ToJobConnectionsListOutputWithContext(context.Background())
}

func (i JobConnectionsListArgs) ToJobConnectionsListOutputWithContext(ctx context.Context) JobConnectionsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConnectionsListOutput)
}

func (i JobConnectionsListArgs) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return i.ToJobConnectionsListPtrOutputWithContext(context.Background())
}

func (i JobConnectionsListArgs) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConnectionsListOutput).ToJobConnectionsListPtrOutputWithContext(ctx)
}

// JobConnectionsListPtrInput is an input type that accepts JobConnectionsListArgs, JobConnectionsListPtr and JobConnectionsListPtrOutput values.
// You can construct a concrete instance of `JobConnectionsListPtrInput` via:
//
//	        JobConnectionsListArgs{...}
//
//	or:
//
//	        nil
type JobConnectionsListPtrInput interface {
	pulumi.Input

	ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput
	ToJobConnectionsListPtrOutputWithContext(context.Context) JobConnectionsListPtrOutput
}

type jobConnectionsListPtrType JobConnectionsListArgs

func JobConnectionsListPtr(v *JobConnectionsListArgs) JobConnectionsListPtrInput {
	return (*jobConnectionsListPtrType)(v)
}

func (*jobConnectionsListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConnectionsList)(nil)).Elem()
}

func (i *jobConnectionsListPtrType) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return i.ToJobConnectionsListPtrOutputWithContext(context.Background())
}

func (i *jobConnectionsListPtrType) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConnectionsListPtrOutput)
}

type JobConnectionsListOutput struct{ *pulumi.OutputState }

func (JobConnectionsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConnectionsList)(nil)).Elem()
}

func (o JobConnectionsListOutput) ToJobConnectionsListOutput() JobConnectionsListOutput {
	return o
}

func (o JobConnectionsListOutput) ToJobConnectionsListOutputWithContext(ctx context.Context) JobConnectionsListOutput {
	return o
}

func (o JobConnectionsListOutput) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return o.ToJobConnectionsListPtrOutputWithContext(context.Background())
}

func (o JobConnectionsListOutput) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConnectionsList) *JobConnectionsList {
		return &v
	}).(JobConnectionsListPtrOutput)
}

// A list of connections used by the job.
func (o JobConnectionsListOutput) Connections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConnectionsList) []string { return v.Connections }).(pulumi.StringArrayOutput)
}

type JobConnectionsListPtrOutput struct{ *pulumi.OutputState }

func (JobConnectionsListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConnectionsList)(nil)).Elem()
}

func (o JobConnectionsListPtrOutput) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return o
}

func (o JobConnectionsListPtrOutput) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return o
}

func (o JobConnectionsListPtrOutput) Elem() JobConnectionsListOutput {
	return o.ApplyT(func(v *JobConnectionsList) JobConnectionsList {
		if v != nil {
			return *v
		}
		var ret JobConnectionsList
		return ret
	}).(JobConnectionsListOutput)
}

// A list of connections used by the job.
func (o JobConnectionsListPtrOutput) Connections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConnectionsList) []string {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(pulumi.StringArrayOutput)
}

type JobExecutionProperty struct {
	// The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
	MaxConcurrentRuns *float64 `pulumi:"maxConcurrentRuns"`
}

// JobExecutionPropertyInput is an input type that accepts JobExecutionPropertyArgs and JobExecutionPropertyOutput values.
// You can construct a concrete instance of `JobExecutionPropertyInput` via:
//
//	JobExecutionPropertyArgs{...}
type JobExecutionPropertyInput interface {
	pulumi.Input

	ToJobExecutionPropertyOutput() JobExecutionPropertyOutput
	ToJobExecutionPropertyOutputWithContext(context.Context) JobExecutionPropertyOutput
}

type JobExecutionPropertyArgs struct {
	// The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
	MaxConcurrentRuns pulumi.Float64PtrInput `pulumi:"maxConcurrentRuns"`
}

func (JobExecutionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return i.ToJobExecutionPropertyOutputWithContext(context.Background())
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyOutput)
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return i.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyOutput).ToJobExecutionPropertyPtrOutputWithContext(ctx)
}

// JobExecutionPropertyPtrInput is an input type that accepts JobExecutionPropertyArgs, JobExecutionPropertyPtr and JobExecutionPropertyPtrOutput values.
// You can construct a concrete instance of `JobExecutionPropertyPtrInput` via:
//
//	        JobExecutionPropertyArgs{...}
//
//	or:
//
//	        nil
type JobExecutionPropertyPtrInput interface {
	pulumi.Input

	ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput
	ToJobExecutionPropertyPtrOutputWithContext(context.Context) JobExecutionPropertyPtrOutput
}

type jobExecutionPropertyPtrType JobExecutionPropertyArgs

func JobExecutionPropertyPtr(v *JobExecutionPropertyArgs) JobExecutionPropertyPtrInput {
	return (*jobExecutionPropertyPtrType)(v)
}

func (*jobExecutionPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionProperty)(nil)).Elem()
}

func (i *jobExecutionPropertyPtrType) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return i.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (i *jobExecutionPropertyPtrType) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyPtrOutput)
}

type JobExecutionPropertyOutput struct{ *pulumi.OutputState }

func (JobExecutionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return o.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobExecutionProperty) *JobExecutionProperty {
		return &v
	}).(JobExecutionPropertyPtrOutput)
}

// The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
func (o JobExecutionPropertyOutput) MaxConcurrentRuns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v JobExecutionProperty) *float64 { return v.MaxConcurrentRuns }).(pulumi.Float64PtrOutput)
}

type JobExecutionPropertyPtrOutput struct{ *pulumi.OutputState }

func (JobExecutionPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionProperty)(nil)).Elem()
}

func (o JobExecutionPropertyPtrOutput) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return o
}

func (o JobExecutionPropertyPtrOutput) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return o
}

func (o JobExecutionPropertyPtrOutput) Elem() JobExecutionPropertyOutput {
	return o.ApplyT(func(v *JobExecutionProperty) JobExecutionProperty {
		if v != nil {
			return *v
		}
		var ret JobExecutionProperty
		return ret
	}).(JobExecutionPropertyOutput)
}

// The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
func (o JobExecutionPropertyPtrOutput) MaxConcurrentRuns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *JobExecutionProperty) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRuns
	}).(pulumi.Float64PtrOutput)
}

type JobNotificationProperty struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

// JobNotificationPropertyInput is an input type that accepts JobNotificationPropertyArgs and JobNotificationPropertyOutput values.
// You can construct a concrete instance of `JobNotificationPropertyInput` via:
//
//	JobNotificationPropertyArgs{...}
type JobNotificationPropertyInput interface {
	pulumi.Input

	ToJobNotificationPropertyOutput() JobNotificationPropertyOutput
	ToJobNotificationPropertyOutputWithContext(context.Context) JobNotificationPropertyOutput
}

type JobNotificationPropertyArgs struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification.
	NotifyDelayAfter pulumi.IntPtrInput `pulumi:"notifyDelayAfter"`
}

func (JobNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return i.ToJobNotificationPropertyOutputWithContext(context.Background())
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyOutput)
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return i.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyOutput).ToJobNotificationPropertyPtrOutputWithContext(ctx)
}

// JobNotificationPropertyPtrInput is an input type that accepts JobNotificationPropertyArgs, JobNotificationPropertyPtr and JobNotificationPropertyPtrOutput values.
// You can construct a concrete instance of `JobNotificationPropertyPtrInput` via:
//
//	        JobNotificationPropertyArgs{...}
//
//	or:
//
//	        nil
type JobNotificationPropertyPtrInput interface {
	pulumi.Input

	ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput
	ToJobNotificationPropertyPtrOutputWithContext(context.Context) JobNotificationPropertyPtrOutput
}

type jobNotificationPropertyPtrType JobNotificationPropertyArgs

func JobNotificationPropertyPtr(v *JobNotificationPropertyArgs) JobNotificationPropertyPtrInput {
	return (*jobNotificationPropertyPtrType)(v)
}

func (*jobNotificationPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobNotificationProperty)(nil)).Elem()
}

func (i *jobNotificationPropertyPtrType) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return i.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i *jobNotificationPropertyPtrType) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyPtrOutput)
}

type JobNotificationPropertyOutput struct{ *pulumi.OutputState }

func (JobNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return o.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobNotificationProperty) *JobNotificationProperty {
		return &v
	}).(JobNotificationPropertyPtrOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o JobNotificationPropertyOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobNotificationProperty) *int { return v.NotifyDelayAfter }).(pulumi.IntPtrOutput)
}

type JobNotificationPropertyPtrOutput struct{ *pulumi.OutputState }

func (JobNotificationPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobNotificationProperty)(nil)).Elem()
}

func (o JobNotificationPropertyPtrOutput) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return o
}

func (o JobNotificationPropertyPtrOutput) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return o
}

func (o JobNotificationPropertyPtrOutput) Elem() JobNotificationPropertyOutput {
	return o.ApplyT(func(v *JobNotificationProperty) JobNotificationProperty {
		if v != nil {
			return *v
		}
		var ret JobNotificationProperty
		return ret
	}).(JobNotificationPropertyOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification.
func (o JobNotificationPropertyPtrOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobNotificationProperty) *int {
		if v == nil {
			return nil
		}
		return v.NotifyDelayAfter
	}).(pulumi.IntPtrOutput)
}

type RegistryTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// Identifier for the registry which the schema is part of.
type SchemaRegistry struct {
	// Amazon Resource Name for the Registry.
	Arn *string `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name *string `pulumi:"name"`
}

// SchemaRegistryInput is an input type that accepts SchemaRegistryArgs and SchemaRegistryOutput values.
// You can construct a concrete instance of `SchemaRegistryInput` via:
//
//	SchemaRegistryArgs{...}
type SchemaRegistryInput interface {
	pulumi.Input

	ToSchemaRegistryOutput() SchemaRegistryOutput
	ToSchemaRegistryOutputWithContext(context.Context) SchemaRegistryOutput
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryArgs struct {
	// Amazon Resource Name for the Registry.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return i.ToSchemaRegistryOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput)
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput).ToSchemaRegistryPtrOutputWithContext(ctx)
}

// SchemaRegistryPtrInput is an input type that accepts SchemaRegistryArgs, SchemaRegistryPtr and SchemaRegistryPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryPtrInput` via:
//
//	        SchemaRegistryArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryPtrInput interface {
	pulumi.Input

	ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput
	ToSchemaRegistryPtrOutputWithContext(context.Context) SchemaRegistryPtrOutput
}

type schemaRegistryPtrType SchemaRegistryArgs

func SchemaRegistryPtr(v *SchemaRegistryArgs) SchemaRegistryPtrInput {
	return (*schemaRegistryPtrType)(v)
}

func (*schemaRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryPtrOutput)
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryOutput struct{ *pulumi.OutputState }

func (SchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistry) *SchemaRegistry {
		return &v
	}).(SchemaRegistryPtrOutput)
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SchemaRegistryPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) Elem() SchemaRegistryOutput {
	return o.ApplyT(func(v *SchemaRegistry) SchemaRegistry {
		if v != nil {
			return *v
		}
		var ret SchemaRegistry
		return ret
	}).(SchemaRegistryOutput)
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type SchemaTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionType struct {
	// Indicates if the latest version needs to be updated.
	IsLatest *bool `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber *int `pulumi:"versionNumber"`
}

// SchemaVersionTypeInput is an input type that accepts SchemaVersionTypeArgs and SchemaVersionTypeOutput values.
// You can construct a concrete instance of `SchemaVersionTypeInput` via:
//
//	SchemaVersionTypeArgs{...}
type SchemaVersionTypeInput interface {
	pulumi.Input

	ToSchemaVersionTypeOutput() SchemaVersionTypeOutput
	ToSchemaVersionTypeOutputWithContext(context.Context) SchemaVersionTypeOutput
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeArgs struct {
	// Indicates if the latest version needs to be updated.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber pulumi.IntPtrInput `pulumi:"versionNumber"`
}

func (SchemaVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return i.ToSchemaVersionTypeOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput)
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput).ToSchemaVersionTypePtrOutputWithContext(ctx)
}

// SchemaVersionTypePtrInput is an input type that accepts SchemaVersionTypeArgs, SchemaVersionTypePtr and SchemaVersionTypePtrOutput values.
// You can construct a concrete instance of `SchemaVersionTypePtrInput` via:
//
//	        SchemaVersionTypeArgs{...}
//
//	or:
//
//	        nil
type SchemaVersionTypePtrInput interface {
	pulumi.Input

	ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput
	ToSchemaVersionTypePtrOutputWithContext(context.Context) SchemaVersionTypePtrOutput
}

type schemaVersionTypePtrType SchemaVersionTypeArgs

func SchemaVersionTypePtr(v *SchemaVersionTypeArgs) SchemaVersionTypePtrInput {
	return (*schemaVersionTypePtrType)(v)
}

func (*schemaVersionTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypePtrOutput)
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaVersionType) *SchemaVersionType {
		return &v
	}).(SchemaVersionTypePtrOutput)
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypeOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypeOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *int { return v.VersionNumber }).(pulumi.IntPtrOutput)
}

type SchemaVersionTypePtrOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) Elem() SchemaVersionTypeOutput {
	return o.ApplyT(func(v *SchemaVersionType) SchemaVersionType {
		if v != nil {
			return *v
		}
		var ret SchemaVersionType
		return ret
	}).(SchemaVersionTypeOutput)
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypePtrOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *bool {
		if v == nil {
			return nil
		}
		return v.IsLatest
	}).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypePtrOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *int {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.IntPtrOutput)
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchema struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName *string `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn *string `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName *string `pulumi:"schemaName"`
}

// SchemaVersionSchemaInput is an input type that accepts SchemaVersionSchemaArgs and SchemaVersionSchemaOutput values.
// You can construct a concrete instance of `SchemaVersionSchemaInput` via:
//
//	SchemaVersionSchemaArgs{...}
type SchemaVersionSchemaInput interface {
	pulumi.Input

	ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput
	ToSchemaVersionSchemaOutputWithContext(context.Context) SchemaVersionSchemaOutput
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaArgs struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName pulumi.StringPtrInput `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn pulumi.StringPtrInput `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SchemaVersionSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return i.ToSchemaVersionSchemaOutputWithContext(context.Background())
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionSchemaOutput)
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaOutput struct{ *pulumi.OutputState }

func (SchemaVersionSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return o
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return o
}

// Name of the registry to identify where the Schema is located.
func (o SchemaVersionSchemaOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
func (o SchemaVersionSchemaOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

// Name of the schema. This parameter requires RegistryName to be provided.
func (o SchemaVersionSchemaOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The actions initiated by this trigger.
type TriggerAction struct {
	// The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.
	Arguments interface{} `pulumi:"arguments"`
	// The name of the crawler to be used with this action.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of a job to be executed.
	JobName *string `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification.
	NotificationProperty *TriggerNotificationProperty `pulumi:"notificationProperty"`
	// The name of the SecurityConfiguration structure to be used with this action.
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
	Timeout *int `pulumi:"timeout"`
}

// TriggerActionInput is an input type that accepts TriggerActionArgs and TriggerActionOutput values.
// You can construct a concrete instance of `TriggerActionInput` via:
//
//	TriggerActionArgs{...}
type TriggerActionInput interface {
	pulumi.Input

	ToTriggerActionOutput() TriggerActionOutput
	ToTriggerActionOutputWithContext(context.Context) TriggerActionOutput
}

// The actions initiated by this trigger.
type TriggerActionArgs struct {
	// The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.
	Arguments pulumi.Input `pulumi:"arguments"`
	// The name of the crawler to be used with this action.
	CrawlerName pulumi.StringPtrInput `pulumi:"crawlerName"`
	// The name of a job to be executed.
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification.
	NotificationProperty TriggerNotificationPropertyPtrInput `pulumi:"notificationProperty"`
	// The name of the SecurityConfiguration structure to be used with this action.
	SecurityConfiguration pulumi.StringPtrInput `pulumi:"securityConfiguration"`
	// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (TriggerActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (i TriggerActionArgs) ToTriggerActionOutput() TriggerActionOutput {
	return i.ToTriggerActionOutputWithContext(context.Background())
}

func (i TriggerActionArgs) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionOutput)
}

// TriggerActionArrayInput is an input type that accepts TriggerActionArray and TriggerActionArrayOutput values.
// You can construct a concrete instance of `TriggerActionArrayInput` via:
//
//	TriggerActionArray{ TriggerActionArgs{...} }
type TriggerActionArrayInput interface {
	pulumi.Input

	ToTriggerActionArrayOutput() TriggerActionArrayOutput
	ToTriggerActionArrayOutputWithContext(context.Context) TriggerActionArrayOutput
}

type TriggerActionArray []TriggerActionInput

func (TriggerActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (i TriggerActionArray) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return i.ToTriggerActionArrayOutputWithContext(context.Background())
}

func (i TriggerActionArray) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionArrayOutput)
}

// The actions initiated by this trigger.
type TriggerActionOutput struct{ *pulumi.OutputState }

func (TriggerActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (o TriggerActionOutput) ToTriggerActionOutput() TriggerActionOutput {
	return o
}

func (o TriggerActionOutput) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return o
}

// The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.
func (o TriggerActionOutput) Arguments() pulumi.AnyOutput {
	return o.ApplyT(func(v TriggerAction) interface{} { return v.Arguments }).(pulumi.AnyOutput)
}

// The name of the crawler to be used with this action.
func (o TriggerActionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

// The name of a job to be executed.
func (o TriggerActionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// Specifies configuration properties of a job run notification.
func (o TriggerActionOutput) NotificationProperty() TriggerNotificationPropertyPtrOutput {
	return o.ApplyT(func(v TriggerAction) *TriggerNotificationProperty { return v.NotificationProperty }).(TriggerNotificationPropertyPtrOutput)
}

// The name of the SecurityConfiguration structure to be used with this action.
func (o TriggerActionOutput) SecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.SecurityConfiguration }).(pulumi.StringPtrOutput)
}

// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
func (o TriggerActionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerAction) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TriggerActionArrayOutput struct{ *pulumi.OutputState }

func (TriggerActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) Index(i pulumi.IntInput) TriggerActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerAction {
		return vs[0].([]TriggerAction)[vs[1].(int)]
	}).(TriggerActionOutput)
}

// Defines a condition under which a trigger fires.
type TriggerCondition struct {
	// The state of the crawler to which this condition applies.
	CrawlState *string `pulumi:"crawlState"`
	// The name of the crawler to which this condition applies.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
	JobName *string `pulumi:"jobName"`
	// A logical operator.
	LogicalOperator *string `pulumi:"logicalOperator"`
	// The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED.
	State *string `pulumi:"state"`
}

// TriggerConditionInput is an input type that accepts TriggerConditionArgs and TriggerConditionOutput values.
// You can construct a concrete instance of `TriggerConditionInput` via:
//
//	TriggerConditionArgs{...}
type TriggerConditionInput interface {
	pulumi.Input

	ToTriggerConditionOutput() TriggerConditionOutput
	ToTriggerConditionOutputWithContext(context.Context) TriggerConditionOutput
}

// Defines a condition under which a trigger fires.
type TriggerConditionArgs struct {
	// The state of the crawler to which this condition applies.
	CrawlState pulumi.StringPtrInput `pulumi:"crawlState"`
	// The name of the crawler to which this condition applies.
	CrawlerName pulumi.StringPtrInput `pulumi:"crawlerName"`
	// The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// A logical operator.
	LogicalOperator pulumi.StringPtrInput `pulumi:"logicalOperator"`
	// The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (TriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArgs) ToTriggerConditionOutput() TriggerConditionOutput {
	return i.ToTriggerConditionOutputWithContext(context.Background())
}

func (i TriggerConditionArgs) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionOutput)
}

// TriggerConditionArrayInput is an input type that accepts TriggerConditionArray and TriggerConditionArrayOutput values.
// You can construct a concrete instance of `TriggerConditionArrayInput` via:
//
//	TriggerConditionArray{ TriggerConditionArgs{...} }
type TriggerConditionArrayInput interface {
	pulumi.Input

	ToTriggerConditionArrayOutput() TriggerConditionArrayOutput
	ToTriggerConditionArrayOutputWithContext(context.Context) TriggerConditionArrayOutput
}

type TriggerConditionArray []TriggerConditionInput

func (TriggerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArray) ToTriggerConditionArrayOutput() TriggerConditionArrayOutput {
	return i.ToTriggerConditionArrayOutputWithContext(context.Background())
}

func (i TriggerConditionArray) ToTriggerConditionArrayOutputWithContext(ctx context.Context) TriggerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionArrayOutput)
}

// Defines a condition under which a trigger fires.
type TriggerConditionOutput struct{ *pulumi.OutputState }

func (TriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (o TriggerConditionOutput) ToTriggerConditionOutput() TriggerConditionOutput {
	return o
}

func (o TriggerConditionOutput) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return o
}

// The state of the crawler to which this condition applies.
func (o TriggerConditionOutput) CrawlState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.CrawlState }).(pulumi.StringPtrOutput)
}

// The name of the crawler to which this condition applies.
func (o TriggerConditionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

// The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
func (o TriggerConditionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// A logical operator.
func (o TriggerConditionOutput) LogicalOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.LogicalOperator }).(pulumi.StringPtrOutput)
}

// The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED.
func (o TriggerConditionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TriggerConditionArrayOutput struct{ *pulumi.OutputState }

func (TriggerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerCondition)(nil)).Elem()
}

func (o TriggerConditionArrayOutput) ToTriggerConditionArrayOutput() TriggerConditionArrayOutput {
	return o
}

func (o TriggerConditionArrayOutput) ToTriggerConditionArrayOutputWithContext(ctx context.Context) TriggerConditionArrayOutput {
	return o
}

func (o TriggerConditionArrayOutput) Index(i pulumi.IntInput) TriggerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerCondition {
		return vs[0].([]TriggerCondition)[vs[1].(int)]
	}).(TriggerConditionOutput)
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
type TriggerEventBatchingCondition struct {
	// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
	BatchSize int `pulumi:"batchSize"`
	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
	BatchWindow *int `pulumi:"batchWindow"`
}

// TriggerEventBatchingConditionInput is an input type that accepts TriggerEventBatchingConditionArgs and TriggerEventBatchingConditionOutput values.
// You can construct a concrete instance of `TriggerEventBatchingConditionInput` via:
//
//	TriggerEventBatchingConditionArgs{...}
type TriggerEventBatchingConditionInput interface {
	pulumi.Input

	ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput
	ToTriggerEventBatchingConditionOutputWithContext(context.Context) TriggerEventBatchingConditionOutput
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
type TriggerEventBatchingConditionArgs struct {
	// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
	BatchSize pulumi.IntInput `pulumi:"batchSize"`
	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
	BatchWindow pulumi.IntPtrInput `pulumi:"batchWindow"`
}

func (TriggerEventBatchingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return i.ToTriggerEventBatchingConditionOutputWithContext(context.Background())
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionOutput)
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return i.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionOutput).ToTriggerEventBatchingConditionPtrOutputWithContext(ctx)
}

// TriggerEventBatchingConditionPtrInput is an input type that accepts TriggerEventBatchingConditionArgs, TriggerEventBatchingConditionPtr and TriggerEventBatchingConditionPtrOutput values.
// You can construct a concrete instance of `TriggerEventBatchingConditionPtrInput` via:
//
//	        TriggerEventBatchingConditionArgs{...}
//
//	or:
//
//	        nil
type TriggerEventBatchingConditionPtrInput interface {
	pulumi.Input

	ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput
	ToTriggerEventBatchingConditionPtrOutputWithContext(context.Context) TriggerEventBatchingConditionPtrOutput
}

type triggerEventBatchingConditionPtrType TriggerEventBatchingConditionArgs

func TriggerEventBatchingConditionPtr(v *TriggerEventBatchingConditionArgs) TriggerEventBatchingConditionPtrInput {
	return (*triggerEventBatchingConditionPtrType)(v)
}

func (*triggerEventBatchingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEventBatchingCondition)(nil)).Elem()
}

func (i *triggerEventBatchingConditionPtrType) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return i.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (i *triggerEventBatchingConditionPtrType) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionPtrOutput)
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
type TriggerEventBatchingConditionOutput struct{ *pulumi.OutputState }

func (TriggerEventBatchingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return o.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerEventBatchingCondition) *TriggerEventBatchingCondition {
		return &v
	}).(TriggerEventBatchingConditionPtrOutput)
}

// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
func (o TriggerEventBatchingConditionOutput) BatchSize() pulumi.IntOutput {
	return o.ApplyT(func(v TriggerEventBatchingCondition) int { return v.BatchSize }).(pulumi.IntOutput)
}

// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
func (o TriggerEventBatchingConditionOutput) BatchWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerEventBatchingCondition) *int { return v.BatchWindow }).(pulumi.IntPtrOutput)
}

type TriggerEventBatchingConditionPtrOutput struct{ *pulumi.OutputState }

func (TriggerEventBatchingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEventBatchingCondition)(nil)).Elem()
}

func (o TriggerEventBatchingConditionPtrOutput) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return o
}

func (o TriggerEventBatchingConditionPtrOutput) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return o
}

func (o TriggerEventBatchingConditionPtrOutput) Elem() TriggerEventBatchingConditionOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) TriggerEventBatchingCondition {
		if v != nil {
			return *v
		}
		var ret TriggerEventBatchingCondition
		return ret
	}).(TriggerEventBatchingConditionOutput)
}

// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
func (o TriggerEventBatchingConditionPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) *int {
		if v == nil {
			return nil
		}
		return &v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
func (o TriggerEventBatchingConditionPtrOutput) BatchWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) *int {
		if v == nil {
			return nil
		}
		return v.BatchWindow
	}).(pulumi.IntPtrOutput)
}

// Specifies configuration properties of a job run notification.
type TriggerNotificationProperty struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

// TriggerNotificationPropertyInput is an input type that accepts TriggerNotificationPropertyArgs and TriggerNotificationPropertyOutput values.
// You can construct a concrete instance of `TriggerNotificationPropertyInput` via:
//
//	TriggerNotificationPropertyArgs{...}
type TriggerNotificationPropertyInput interface {
	pulumi.Input

	ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput
	ToTriggerNotificationPropertyOutputWithContext(context.Context) TriggerNotificationPropertyOutput
}

// Specifies configuration properties of a job run notification.
type TriggerNotificationPropertyArgs struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification
	NotifyDelayAfter pulumi.IntPtrInput `pulumi:"notifyDelayAfter"`
}

func (TriggerNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNotificationProperty)(nil)).Elem()
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput {
	return i.ToTriggerNotificationPropertyOutputWithContext(context.Background())
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyOutputWithContext(ctx context.Context) TriggerNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyOutput)
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return i.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyOutput).ToTriggerNotificationPropertyPtrOutputWithContext(ctx)
}

// TriggerNotificationPropertyPtrInput is an input type that accepts TriggerNotificationPropertyArgs, TriggerNotificationPropertyPtr and TriggerNotificationPropertyPtrOutput values.
// You can construct a concrete instance of `TriggerNotificationPropertyPtrInput` via:
//
//	        TriggerNotificationPropertyArgs{...}
//
//	or:
//
//	        nil
type TriggerNotificationPropertyPtrInput interface {
	pulumi.Input

	ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput
	ToTriggerNotificationPropertyPtrOutputWithContext(context.Context) TriggerNotificationPropertyPtrOutput
}

type triggerNotificationPropertyPtrType TriggerNotificationPropertyArgs

func TriggerNotificationPropertyPtr(v *TriggerNotificationPropertyArgs) TriggerNotificationPropertyPtrInput {
	return (*triggerNotificationPropertyPtrType)(v)
}

func (*triggerNotificationPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNotificationProperty)(nil)).Elem()
}

func (i *triggerNotificationPropertyPtrType) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return i.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i *triggerNotificationPropertyPtrType) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyPtrOutput)
}

// Specifies configuration properties of a job run notification.
type TriggerNotificationPropertyOutput struct{ *pulumi.OutputState }

func (TriggerNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNotificationProperty)(nil)).Elem()
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput {
	return o
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyOutputWithContext(ctx context.Context) TriggerNotificationPropertyOutput {
	return o
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return o.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerNotificationProperty) *TriggerNotificationProperty {
		return &v
	}).(TriggerNotificationPropertyPtrOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification
func (o TriggerNotificationPropertyOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerNotificationProperty) *int { return v.NotifyDelayAfter }).(pulumi.IntPtrOutput)
}

type TriggerNotificationPropertyPtrOutput struct{ *pulumi.OutputState }

func (TriggerNotificationPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNotificationProperty)(nil)).Elem()
}

func (o TriggerNotificationPropertyPtrOutput) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return o
}

func (o TriggerNotificationPropertyPtrOutput) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return o
}

func (o TriggerNotificationPropertyPtrOutput) Elem() TriggerNotificationPropertyOutput {
	return o.ApplyT(func(v *TriggerNotificationProperty) TriggerNotificationProperty {
		if v != nil {
			return *v
		}
		var ret TriggerNotificationProperty
		return ret
	}).(TriggerNotificationPropertyOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification
func (o TriggerNotificationPropertyPtrOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerNotificationProperty) *int {
		if v == nil {
			return nil
		}
		return v.NotifyDelayAfter
	}).(pulumi.IntPtrOutput)
}

// The predicate of this trigger, which defines when it will fire.
type TriggerPredicate struct {
	// A list of the conditions that determine when the trigger will fire.
	Conditions []TriggerCondition `pulumi:"conditions"`
	// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
	Logical *string `pulumi:"logical"`
}

// TriggerPredicateInput is an input type that accepts TriggerPredicateArgs and TriggerPredicateOutput values.
// You can construct a concrete instance of `TriggerPredicateInput` via:
//
//	TriggerPredicateArgs{...}
type TriggerPredicateInput interface {
	pulumi.Input

	ToTriggerPredicateOutput() TriggerPredicateOutput
	ToTriggerPredicateOutputWithContext(context.Context) TriggerPredicateOutput
}

// The predicate of this trigger, which defines when it will fire.
type TriggerPredicateArgs struct {
	// A list of the conditions that determine when the trigger will fire.
	Conditions TriggerConditionArrayInput `pulumi:"conditions"`
	// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
	Logical pulumi.StringPtrInput `pulumi:"logical"`
}

func (TriggerPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return i.ToTriggerPredicateOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput)
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput).ToTriggerPredicatePtrOutputWithContext(ctx)
}

// TriggerPredicatePtrInput is an input type that accepts TriggerPredicateArgs, TriggerPredicatePtr and TriggerPredicatePtrOutput values.
// You can construct a concrete instance of `TriggerPredicatePtrInput` via:
//
//	        TriggerPredicateArgs{...}
//
//	or:
//
//	        nil
type TriggerPredicatePtrInput interface {
	pulumi.Input

	ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput
	ToTriggerPredicatePtrOutputWithContext(context.Context) TriggerPredicatePtrOutput
}

type triggerPredicatePtrType TriggerPredicateArgs

func TriggerPredicatePtr(v *TriggerPredicateArgs) TriggerPredicatePtrInput {
	return (*triggerPredicatePtrType)(v)
}

func (*triggerPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicatePtrOutput)
}

// The predicate of this trigger, which defines when it will fire.
type TriggerPredicateOutput struct{ *pulumi.OutputState }

func (TriggerPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerPredicate) *TriggerPredicate {
		return &v
	}).(TriggerPredicatePtrOutput)
}

// A list of the conditions that determine when the trigger will fire.
func (o TriggerPredicateOutput) Conditions() TriggerConditionArrayOutput {
	return o.ApplyT(func(v TriggerPredicate) []TriggerCondition { return v.Conditions }).(TriggerConditionArrayOutput)
}

// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
func (o TriggerPredicateOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicate) *string { return v.Logical }).(pulumi.StringPtrOutput)
}

type TriggerPredicatePtrOutput struct{ *pulumi.OutputState }

func (TriggerPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) Elem() TriggerPredicateOutput {
	return o.ApplyT(func(v *TriggerPredicate) TriggerPredicate {
		if v != nil {
			return *v
		}
		var ret TriggerPredicate
		return ret
	}).(TriggerPredicateOutput)
}

// A list of the conditions that determine when the trigger will fire.
func (o TriggerPredicatePtrOutput) Conditions() TriggerConditionArrayOutput {
	return o.ApplyT(func(v *TriggerPredicate) []TriggerCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(TriggerConditionArrayOutput)
}

// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
func (o TriggerPredicatePtrOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Logical
	}).(pulumi.StringPtrOutput)
}

type UsageProfileConfigurationObject struct {
	AllowedValues []string `pulumi:"allowedValues"`
	DefaultValue  *string  `pulumi:"defaultValue"`
	MaxValue      *string  `pulumi:"maxValue"`
	MinValue      *string  `pulumi:"minValue"`
}

// UsageProfileConfigurationObjectInput is an input type that accepts UsageProfileConfigurationObjectArgs and UsageProfileConfigurationObjectOutput values.
// You can construct a concrete instance of `UsageProfileConfigurationObjectInput` via:
//
//	UsageProfileConfigurationObjectArgs{...}
type UsageProfileConfigurationObjectInput interface {
	pulumi.Input

	ToUsageProfileConfigurationObjectOutput() UsageProfileConfigurationObjectOutput
	ToUsageProfileConfigurationObjectOutputWithContext(context.Context) UsageProfileConfigurationObjectOutput
}

type UsageProfileConfigurationObjectArgs struct {
	AllowedValues pulumi.StringArrayInput `pulumi:"allowedValues"`
	DefaultValue  pulumi.StringPtrInput   `pulumi:"defaultValue"`
	MaxValue      pulumi.StringPtrInput   `pulumi:"maxValue"`
	MinValue      pulumi.StringPtrInput   `pulumi:"minValue"`
}

func (UsageProfileConfigurationObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsageProfileConfigurationObject)(nil)).Elem()
}

func (i UsageProfileConfigurationObjectArgs) ToUsageProfileConfigurationObjectOutput() UsageProfileConfigurationObjectOutput {
	return i.ToUsageProfileConfigurationObjectOutputWithContext(context.Background())
}

func (i UsageProfileConfigurationObjectArgs) ToUsageProfileConfigurationObjectOutputWithContext(ctx context.Context) UsageProfileConfigurationObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageProfileConfigurationObjectOutput)
}

// UsageProfileConfigurationObjectMapInput is an input type that accepts UsageProfileConfigurationObjectMap and UsageProfileConfigurationObjectMapOutput values.
// You can construct a concrete instance of `UsageProfileConfigurationObjectMapInput` via:
//
//	UsageProfileConfigurationObjectMap{ "key": UsageProfileConfigurationObjectArgs{...} }
type UsageProfileConfigurationObjectMapInput interface {
	pulumi.Input

	ToUsageProfileConfigurationObjectMapOutput() UsageProfileConfigurationObjectMapOutput
	ToUsageProfileConfigurationObjectMapOutputWithContext(context.Context) UsageProfileConfigurationObjectMapOutput
}

type UsageProfileConfigurationObjectMap map[string]UsageProfileConfigurationObjectInput

func (UsageProfileConfigurationObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UsageProfileConfigurationObject)(nil)).Elem()
}

func (i UsageProfileConfigurationObjectMap) ToUsageProfileConfigurationObjectMapOutput() UsageProfileConfigurationObjectMapOutput {
	return i.ToUsageProfileConfigurationObjectMapOutputWithContext(context.Background())
}

func (i UsageProfileConfigurationObjectMap) ToUsageProfileConfigurationObjectMapOutputWithContext(ctx context.Context) UsageProfileConfigurationObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageProfileConfigurationObjectMapOutput)
}

type UsageProfileConfigurationObjectOutput struct{ *pulumi.OutputState }

func (UsageProfileConfigurationObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsageProfileConfigurationObject)(nil)).Elem()
}

func (o UsageProfileConfigurationObjectOutput) ToUsageProfileConfigurationObjectOutput() UsageProfileConfigurationObjectOutput {
	return o
}

func (o UsageProfileConfigurationObjectOutput) ToUsageProfileConfigurationObjectOutputWithContext(ctx context.Context) UsageProfileConfigurationObjectOutput {
	return o
}

func (o UsageProfileConfigurationObjectOutput) AllowedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsageProfileConfigurationObject) []string { return v.AllowedValues }).(pulumi.StringArrayOutput)
}

func (o UsageProfileConfigurationObjectOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsageProfileConfigurationObject) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

func (o UsageProfileConfigurationObjectOutput) MaxValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsageProfileConfigurationObject) *string { return v.MaxValue }).(pulumi.StringPtrOutput)
}

func (o UsageProfileConfigurationObjectOutput) MinValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsageProfileConfigurationObject) *string { return v.MinValue }).(pulumi.StringPtrOutput)
}

type UsageProfileConfigurationObjectMapOutput struct{ *pulumi.OutputState }

func (UsageProfileConfigurationObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UsageProfileConfigurationObject)(nil)).Elem()
}

func (o UsageProfileConfigurationObjectMapOutput) ToUsageProfileConfigurationObjectMapOutput() UsageProfileConfigurationObjectMapOutput {
	return o
}

func (o UsageProfileConfigurationObjectMapOutput) ToUsageProfileConfigurationObjectMapOutputWithContext(ctx context.Context) UsageProfileConfigurationObjectMapOutput {
	return o
}

func (o UsageProfileConfigurationObjectMapOutput) MapIndex(k pulumi.StringInput) UsageProfileConfigurationObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UsageProfileConfigurationObject {
		return vs[0].(map[string]UsageProfileConfigurationObject)[vs[1].(string)]
	}).(UsageProfileConfigurationObjectOutput)
}

type UsageProfileProfileConfiguration struct {
	JobConfiguration     map[string]UsageProfileConfigurationObject `pulumi:"jobConfiguration"`
	SessionConfiguration map[string]UsageProfileConfigurationObject `pulumi:"sessionConfiguration"`
}

// UsageProfileProfileConfigurationInput is an input type that accepts UsageProfileProfileConfigurationArgs and UsageProfileProfileConfigurationOutput values.
// You can construct a concrete instance of `UsageProfileProfileConfigurationInput` via:
//
//	UsageProfileProfileConfigurationArgs{...}
type UsageProfileProfileConfigurationInput interface {
	pulumi.Input

	ToUsageProfileProfileConfigurationOutput() UsageProfileProfileConfigurationOutput
	ToUsageProfileProfileConfigurationOutputWithContext(context.Context) UsageProfileProfileConfigurationOutput
}

type UsageProfileProfileConfigurationArgs struct {
	JobConfiguration     UsageProfileConfigurationObjectMapInput `pulumi:"jobConfiguration"`
	SessionConfiguration UsageProfileConfigurationObjectMapInput `pulumi:"sessionConfiguration"`
}

func (UsageProfileProfileConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsageProfileProfileConfiguration)(nil)).Elem()
}

func (i UsageProfileProfileConfigurationArgs) ToUsageProfileProfileConfigurationOutput() UsageProfileProfileConfigurationOutput {
	return i.ToUsageProfileProfileConfigurationOutputWithContext(context.Background())
}

func (i UsageProfileProfileConfigurationArgs) ToUsageProfileProfileConfigurationOutputWithContext(ctx context.Context) UsageProfileProfileConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageProfileProfileConfigurationOutput)
}

func (i UsageProfileProfileConfigurationArgs) ToUsageProfileProfileConfigurationPtrOutput() UsageProfileProfileConfigurationPtrOutput {
	return i.ToUsageProfileProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i UsageProfileProfileConfigurationArgs) ToUsageProfileProfileConfigurationPtrOutputWithContext(ctx context.Context) UsageProfileProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageProfileProfileConfigurationOutput).ToUsageProfileProfileConfigurationPtrOutputWithContext(ctx)
}

// UsageProfileProfileConfigurationPtrInput is an input type that accepts UsageProfileProfileConfigurationArgs, UsageProfileProfileConfigurationPtr and UsageProfileProfileConfigurationPtrOutput values.
// You can construct a concrete instance of `UsageProfileProfileConfigurationPtrInput` via:
//
//	        UsageProfileProfileConfigurationArgs{...}
//
//	or:
//
//	        nil
type UsageProfileProfileConfigurationPtrInput interface {
	pulumi.Input

	ToUsageProfileProfileConfigurationPtrOutput() UsageProfileProfileConfigurationPtrOutput
	ToUsageProfileProfileConfigurationPtrOutputWithContext(context.Context) UsageProfileProfileConfigurationPtrOutput
}

type usageProfileProfileConfigurationPtrType UsageProfileProfileConfigurationArgs

func UsageProfileProfileConfigurationPtr(v *UsageProfileProfileConfigurationArgs) UsageProfileProfileConfigurationPtrInput {
	return (*usageProfileProfileConfigurationPtrType)(v)
}

func (*usageProfileProfileConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageProfileProfileConfiguration)(nil)).Elem()
}

func (i *usageProfileProfileConfigurationPtrType) ToUsageProfileProfileConfigurationPtrOutput() UsageProfileProfileConfigurationPtrOutput {
	return i.ToUsageProfileProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i *usageProfileProfileConfigurationPtrType) ToUsageProfileProfileConfigurationPtrOutputWithContext(ctx context.Context) UsageProfileProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageProfileProfileConfigurationPtrOutput)
}

type UsageProfileProfileConfigurationOutput struct{ *pulumi.OutputState }

func (UsageProfileProfileConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsageProfileProfileConfiguration)(nil)).Elem()
}

func (o UsageProfileProfileConfigurationOutput) ToUsageProfileProfileConfigurationOutput() UsageProfileProfileConfigurationOutput {
	return o
}

func (o UsageProfileProfileConfigurationOutput) ToUsageProfileProfileConfigurationOutputWithContext(ctx context.Context) UsageProfileProfileConfigurationOutput {
	return o
}

func (o UsageProfileProfileConfigurationOutput) ToUsageProfileProfileConfigurationPtrOutput() UsageProfileProfileConfigurationPtrOutput {
	return o.ToUsageProfileProfileConfigurationPtrOutputWithContext(context.Background())
}

func (o UsageProfileProfileConfigurationOutput) ToUsageProfileProfileConfigurationPtrOutputWithContext(ctx context.Context) UsageProfileProfileConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsageProfileProfileConfiguration) *UsageProfileProfileConfiguration {
		return &v
	}).(UsageProfileProfileConfigurationPtrOutput)
}

func (o UsageProfileProfileConfigurationOutput) JobConfiguration() UsageProfileConfigurationObjectMapOutput {
	return o.ApplyT(func(v UsageProfileProfileConfiguration) map[string]UsageProfileConfigurationObject {
		return v.JobConfiguration
	}).(UsageProfileConfigurationObjectMapOutput)
}

func (o UsageProfileProfileConfigurationOutput) SessionConfiguration() UsageProfileConfigurationObjectMapOutput {
	return o.ApplyT(func(v UsageProfileProfileConfiguration) map[string]UsageProfileConfigurationObject {
		return v.SessionConfiguration
	}).(UsageProfileConfigurationObjectMapOutput)
}

type UsageProfileProfileConfigurationPtrOutput struct{ *pulumi.OutputState }

func (UsageProfileProfileConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageProfileProfileConfiguration)(nil)).Elem()
}

func (o UsageProfileProfileConfigurationPtrOutput) ToUsageProfileProfileConfigurationPtrOutput() UsageProfileProfileConfigurationPtrOutput {
	return o
}

func (o UsageProfileProfileConfigurationPtrOutput) ToUsageProfileProfileConfigurationPtrOutputWithContext(ctx context.Context) UsageProfileProfileConfigurationPtrOutput {
	return o
}

func (o UsageProfileProfileConfigurationPtrOutput) Elem() UsageProfileProfileConfigurationOutput {
	return o.ApplyT(func(v *UsageProfileProfileConfiguration) UsageProfileProfileConfiguration {
		if v != nil {
			return *v
		}
		var ret UsageProfileProfileConfiguration
		return ret
	}).(UsageProfileProfileConfigurationOutput)
}

func (o UsageProfileProfileConfigurationPtrOutput) JobConfiguration() UsageProfileConfigurationObjectMapOutput {
	return o.ApplyT(func(v *UsageProfileProfileConfiguration) map[string]UsageProfileConfigurationObject {
		if v == nil {
			return nil
		}
		return v.JobConfiguration
	}).(UsageProfileConfigurationObjectMapOutput)
}

func (o UsageProfileProfileConfigurationPtrOutput) SessionConfiguration() UsageProfileConfigurationObjectMapOutput {
	return o.ApplyT(func(v *UsageProfileProfileConfiguration) map[string]UsageProfileConfigurationObject {
		if v == nil {
			return nil
		}
		return v.SessionConfiguration
	}).(UsageProfileConfigurationObjectMapOutput)
}

type UsageProfileTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerCatalogTargetInput)(nil)).Elem(), CrawlerCatalogTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerCatalogTargetArrayInput)(nil)).Elem(), CrawlerCatalogTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDeltaTargetInput)(nil)).Elem(), CrawlerDeltaTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDeltaTargetArrayInput)(nil)).Elem(), CrawlerDeltaTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDynamoDbTargetInput)(nil)).Elem(), CrawlerDynamoDbTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDynamoDbTargetArrayInput)(nil)).Elem(), CrawlerDynamoDbTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerIcebergTargetInput)(nil)).Elem(), CrawlerIcebergTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerIcebergTargetArrayInput)(nil)).Elem(), CrawlerIcebergTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerJdbcTargetInput)(nil)).Elem(), CrawlerJdbcTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerJdbcTargetArrayInput)(nil)).Elem(), CrawlerJdbcTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerLakeFormationConfigurationInput)(nil)).Elem(), CrawlerLakeFormationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerLakeFormationConfigurationPtrInput)(nil)).Elem(), CrawlerLakeFormationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerMongoDbTargetInput)(nil)).Elem(), CrawlerMongoDbTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerMongoDbTargetArrayInput)(nil)).Elem(), CrawlerMongoDbTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerRecrawlPolicyInput)(nil)).Elem(), CrawlerRecrawlPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerRecrawlPolicyPtrInput)(nil)).Elem(), CrawlerRecrawlPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerS3TargetInput)(nil)).Elem(), CrawlerS3TargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerS3TargetArrayInput)(nil)).Elem(), CrawlerS3TargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerScheduleInput)(nil)).Elem(), CrawlerScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerSchedulePtrInput)(nil)).Elem(), CrawlerScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerSchemaChangePolicyInput)(nil)).Elem(), CrawlerSchemaChangePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerSchemaChangePolicyPtrInput)(nil)).Elem(), CrawlerSchemaChangePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerTargetsInput)(nil)).Elem(), CrawlerTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataLakePrincipalInput)(nil)).Elem(), DatabaseDataLakePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataLakePrincipalPtrInput)(nil)).Elem(), DatabaseDataLakePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFederatedDatabaseInput)(nil)).Elem(), DatabaseFederatedDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFederatedDatabasePtrInput)(nil)).Elem(), DatabaseFederatedDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIdentifierInput)(nil)).Elem(), DatabaseIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIdentifierPtrInput)(nil)).Elem(), DatabaseIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInputTypeInput)(nil)).Elem(), DatabaseInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePrincipalPrivilegesInput)(nil)).Elem(), DatabasePrincipalPrivilegesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePrincipalPrivilegesArrayInput)(nil)).Elem(), DatabasePrincipalPrivilegesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCommandInput)(nil)).Elem(), JobCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConnectionsListInput)(nil)).Elem(), JobConnectionsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConnectionsListPtrInput)(nil)).Elem(), JobConnectionsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionPropertyInput)(nil)).Elem(), JobExecutionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionPropertyPtrInput)(nil)).Elem(), JobExecutionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobNotificationPropertyInput)(nil)).Elem(), JobNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobNotificationPropertyPtrInput)(nil)).Elem(), JobNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryPtrInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypeInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypePtrInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionSchemaInput)(nil)).Elem(), SchemaVersionSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerActionInput)(nil)).Elem(), TriggerActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerActionArrayInput)(nil)).Elem(), TriggerActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerConditionInput)(nil)).Elem(), TriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerConditionArrayInput)(nil)).Elem(), TriggerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEventBatchingConditionInput)(nil)).Elem(), TriggerEventBatchingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEventBatchingConditionPtrInput)(nil)).Elem(), TriggerEventBatchingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNotificationPropertyInput)(nil)).Elem(), TriggerNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNotificationPropertyPtrInput)(nil)).Elem(), TriggerNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerPredicateInput)(nil)).Elem(), TriggerPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerPredicatePtrInput)(nil)).Elem(), TriggerPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageProfileConfigurationObjectInput)(nil)).Elem(), UsageProfileConfigurationObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageProfileConfigurationObjectMapInput)(nil)).Elem(), UsageProfileConfigurationObjectMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageProfileProfileConfigurationInput)(nil)).Elem(), UsageProfileProfileConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageProfileProfileConfigurationPtrInput)(nil)).Elem(), UsageProfileProfileConfigurationArgs{})
	pulumi.RegisterOutputType(CrawlerCatalogTargetOutput{})
	pulumi.RegisterOutputType(CrawlerCatalogTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerDeltaTargetOutput{})
	pulumi.RegisterOutputType(CrawlerDeltaTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerDynamoDbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerDynamoDbTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerIcebergTargetOutput{})
	pulumi.RegisterOutputType(CrawlerIcebergTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerLakeFormationConfigurationOutput{})
	pulumi.RegisterOutputType(CrawlerLakeFormationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CrawlerMongoDbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerMongoDbTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerRecrawlPolicyOutput{})
	pulumi.RegisterOutputType(CrawlerRecrawlPolicyPtrOutput{})
	pulumi.RegisterOutputType(CrawlerS3TargetOutput{})
	pulumi.RegisterOutputType(CrawlerS3TargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerScheduleOutput{})
	pulumi.RegisterOutputType(CrawlerSchedulePtrOutput{})
	pulumi.RegisterOutputType(CrawlerSchemaChangePolicyOutput{})
	pulumi.RegisterOutputType(CrawlerSchemaChangePolicyPtrOutput{})
	pulumi.RegisterOutputType(CrawlerTargetsOutput{})
	pulumi.RegisterOutputType(CrawlerTargetsPtrOutput{})
	pulumi.RegisterOutputType(DatabaseDataLakePrincipalOutput{})
	pulumi.RegisterOutputType(DatabaseDataLakePrincipalPtrOutput{})
	pulumi.RegisterOutputType(DatabaseFederatedDatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseFederatedDatabasePtrOutput{})
	pulumi.RegisterOutputType(DatabaseIdentifierOutput{})
	pulumi.RegisterOutputType(DatabaseIdentifierPtrOutput{})
	pulumi.RegisterOutputType(DatabaseInputTypeOutput{})
	pulumi.RegisterOutputType(DatabaseInputTypePtrOutput{})
	pulumi.RegisterOutputType(DatabasePrincipalPrivilegesOutput{})
	pulumi.RegisterOutputType(DatabasePrincipalPrivilegesArrayOutput{})
	pulumi.RegisterOutputType(JobCommandOutput{})
	pulumi.RegisterOutputType(JobCommandPtrOutput{})
	pulumi.RegisterOutputType(JobConnectionsListOutput{})
	pulumi.RegisterOutputType(JobConnectionsListPtrOutput{})
	pulumi.RegisterOutputType(JobExecutionPropertyOutput{})
	pulumi.RegisterOutputType(JobExecutionPropertyPtrOutput{})
	pulumi.RegisterOutputType(JobNotificationPropertyOutput{})
	pulumi.RegisterOutputType(JobNotificationPropertyPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryOutput{})
	pulumi.RegisterOutputType(SchemaRegistryPtrOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypeOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypePtrOutput{})
	pulumi.RegisterOutputType(SchemaVersionSchemaOutput{})
	pulumi.RegisterOutputType(TriggerActionOutput{})
	pulumi.RegisterOutputType(TriggerActionArrayOutput{})
	pulumi.RegisterOutputType(TriggerConditionOutput{})
	pulumi.RegisterOutputType(TriggerConditionArrayOutput{})
	pulumi.RegisterOutputType(TriggerEventBatchingConditionOutput{})
	pulumi.RegisterOutputType(TriggerEventBatchingConditionPtrOutput{})
	pulumi.RegisterOutputType(TriggerNotificationPropertyOutput{})
	pulumi.RegisterOutputType(TriggerNotificationPropertyPtrOutput{})
	pulumi.RegisterOutputType(TriggerPredicateOutput{})
	pulumi.RegisterOutputType(TriggerPredicatePtrOutput{})
	pulumi.RegisterOutputType(UsageProfileConfigurationObjectOutput{})
	pulumi.RegisterOutputType(UsageProfileConfigurationObjectMapOutput{})
	pulumi.RegisterOutputType(UsageProfileProfileConfigurationOutput{})
	pulumi.RegisterOutputType(UsageProfileProfileConfigurationPtrOutput{})
}
