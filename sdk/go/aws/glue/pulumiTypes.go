// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ClassifierCsvClassifier struct {
	AllowSingleColumn        *bool    `pulumi:"allowSingleColumn"`
	ContainsCustomDatatype   []string `pulumi:"containsCustomDatatype"`
	ContainsHeader           *string  `pulumi:"containsHeader"`
	CustomDatatypeConfigured *bool    `pulumi:"customDatatypeConfigured"`
	Delimiter                *string  `pulumi:"delimiter"`
	DisableValueTrimming     *bool    `pulumi:"disableValueTrimming"`
	Header                   []string `pulumi:"header"`
	Name                     *string  `pulumi:"name"`
	QuoteSymbol              *string  `pulumi:"quoteSymbol"`
}

// ClassifierCsvClassifierInput is an input type that accepts ClassifierCsvClassifierArgs and ClassifierCsvClassifierOutput values.
// You can construct a concrete instance of `ClassifierCsvClassifierInput` via:
//
//	ClassifierCsvClassifierArgs{...}
type ClassifierCsvClassifierInput interface {
	pulumi.Input

	ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput
	ToClassifierCsvClassifierOutputWithContext(context.Context) ClassifierCsvClassifierOutput
}

type ClassifierCsvClassifierArgs struct {
	AllowSingleColumn        pulumi.BoolPtrInput     `pulumi:"allowSingleColumn"`
	ContainsCustomDatatype   pulumi.StringArrayInput `pulumi:"containsCustomDatatype"`
	ContainsHeader           pulumi.StringPtrInput   `pulumi:"containsHeader"`
	CustomDatatypeConfigured pulumi.BoolPtrInput     `pulumi:"customDatatypeConfigured"`
	Delimiter                pulumi.StringPtrInput   `pulumi:"delimiter"`
	DisableValueTrimming     pulumi.BoolPtrInput     `pulumi:"disableValueTrimming"`
	Header                   pulumi.StringArrayInput `pulumi:"header"`
	Name                     pulumi.StringPtrInput   `pulumi:"name"`
	QuoteSymbol              pulumi.StringPtrInput   `pulumi:"quoteSymbol"`
}

func (ClassifierCsvClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierCsvClassifier)(nil)).Elem()
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput {
	return i.ToClassifierCsvClassifierOutputWithContext(context.Background())
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierOutputWithContext(ctx context.Context) ClassifierCsvClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierCsvClassifierOutput)
}

func (i ClassifierCsvClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[ClassifierCsvClassifier] {
	return pulumix.Output[ClassifierCsvClassifier]{
		OutputState: i.ToClassifierCsvClassifierOutputWithContext(ctx).OutputState,
	}
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return i.ToClassifierCsvClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierCsvClassifierArgs) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierCsvClassifierOutput).ToClassifierCsvClassifierPtrOutputWithContext(ctx)
}

// ClassifierCsvClassifierPtrInput is an input type that accepts ClassifierCsvClassifierArgs, ClassifierCsvClassifierPtr and ClassifierCsvClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierCsvClassifierPtrInput` via:
//
//	        ClassifierCsvClassifierArgs{...}
//
//	or:
//
//	        nil
type ClassifierCsvClassifierPtrInput interface {
	pulumi.Input

	ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput
	ToClassifierCsvClassifierPtrOutputWithContext(context.Context) ClassifierCsvClassifierPtrOutput
}

type classifierCsvClassifierPtrType ClassifierCsvClassifierArgs

func ClassifierCsvClassifierPtr(v *ClassifierCsvClassifierArgs) ClassifierCsvClassifierPtrInput {
	return (*classifierCsvClassifierPtrType)(v)
}

func (*classifierCsvClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierCsvClassifier)(nil)).Elem()
}

func (i *classifierCsvClassifierPtrType) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return i.ToClassifierCsvClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierCsvClassifierPtrType) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierCsvClassifierPtrOutput)
}

func (i *classifierCsvClassifierPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClassifierCsvClassifier] {
	return pulumix.Output[*ClassifierCsvClassifier]{
		OutputState: i.ToClassifierCsvClassifierPtrOutputWithContext(ctx).OutputState,
	}
}

type ClassifierCsvClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierCsvClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierCsvClassifier)(nil)).Elem()
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierOutput() ClassifierCsvClassifierOutput {
	return o
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierOutputWithContext(ctx context.Context) ClassifierCsvClassifierOutput {
	return o
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return o.ToClassifierCsvClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierCsvClassifierOutput) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassifierCsvClassifier) *ClassifierCsvClassifier {
		return &v
	}).(ClassifierCsvClassifierPtrOutput)
}

func (o ClassifierCsvClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierCsvClassifier] {
	return pulumix.Output[ClassifierCsvClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierCsvClassifierOutput) AllowSingleColumn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *bool { return v.AllowSingleColumn }).(pulumi.BoolPtrOutput)
}

func (o ClassifierCsvClassifierOutput) ContainsCustomDatatype() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) []string { return v.ContainsCustomDatatype }).(pulumi.StringArrayOutput)
}

func (o ClassifierCsvClassifierOutput) ContainsHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *string { return v.ContainsHeader }).(pulumi.StringPtrOutput)
}

func (o ClassifierCsvClassifierOutput) CustomDatatypeConfigured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *bool { return v.CustomDatatypeConfigured }).(pulumi.BoolPtrOutput)
}

func (o ClassifierCsvClassifierOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

func (o ClassifierCsvClassifierOutput) DisableValueTrimming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *bool { return v.DisableValueTrimming }).(pulumi.BoolPtrOutput)
}

func (o ClassifierCsvClassifierOutput) Header() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) []string { return v.Header }).(pulumi.StringArrayOutput)
}

func (o ClassifierCsvClassifierOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClassifierCsvClassifierOutput) QuoteSymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierCsvClassifier) *string { return v.QuoteSymbol }).(pulumi.StringPtrOutput)
}

type ClassifierCsvClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierCsvClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierCsvClassifier)(nil)).Elem()
}

func (o ClassifierCsvClassifierPtrOutput) ToClassifierCsvClassifierPtrOutput() ClassifierCsvClassifierPtrOutput {
	return o
}

func (o ClassifierCsvClassifierPtrOutput) ToClassifierCsvClassifierPtrOutputWithContext(ctx context.Context) ClassifierCsvClassifierPtrOutput {
	return o
}

func (o ClassifierCsvClassifierPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClassifierCsvClassifier] {
	return pulumix.Output[*ClassifierCsvClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierCsvClassifierPtrOutput) Elem() ClassifierCsvClassifierOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) ClassifierCsvClassifier {
		if v != nil {
			return *v
		}
		var ret ClassifierCsvClassifier
		return ret
	}).(ClassifierCsvClassifierOutput)
}

func (o ClassifierCsvClassifierPtrOutput) AllowSingleColumn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSingleColumn
	}).(pulumi.BoolPtrOutput)
}

func (o ClassifierCsvClassifierPtrOutput) ContainsCustomDatatype() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) []string {
		if v == nil {
			return nil
		}
		return v.ContainsCustomDatatype
	}).(pulumi.StringArrayOutput)
}

func (o ClassifierCsvClassifierPtrOutput) ContainsHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *string {
		if v == nil {
			return nil
		}
		return v.ContainsHeader
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierCsvClassifierPtrOutput) CustomDatatypeConfigured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *bool {
		if v == nil {
			return nil
		}
		return v.CustomDatatypeConfigured
	}).(pulumi.BoolPtrOutput)
}

func (o ClassifierCsvClassifierPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierCsvClassifierPtrOutput) DisableValueTrimming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *bool {
		if v == nil {
			return nil
		}
		return v.DisableValueTrimming
	}).(pulumi.BoolPtrOutput)
}

func (o ClassifierCsvClassifierPtrOutput) Header() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) []string {
		if v == nil {
			return nil
		}
		return v.Header
	}).(pulumi.StringArrayOutput)
}

func (o ClassifierCsvClassifierPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierCsvClassifierPtrOutput) QuoteSymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierCsvClassifier) *string {
		if v == nil {
			return nil
		}
		return v.QuoteSymbol
	}).(pulumi.StringPtrOutput)
}

type ClassifierGrokClassifier struct {
	Classification string  `pulumi:"classification"`
	CustomPatterns *string `pulumi:"customPatterns"`
	GrokPattern    string  `pulumi:"grokPattern"`
	Name           *string `pulumi:"name"`
}

// ClassifierGrokClassifierInput is an input type that accepts ClassifierGrokClassifierArgs and ClassifierGrokClassifierOutput values.
// You can construct a concrete instance of `ClassifierGrokClassifierInput` via:
//
//	ClassifierGrokClassifierArgs{...}
type ClassifierGrokClassifierInput interface {
	pulumi.Input

	ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput
	ToClassifierGrokClassifierOutputWithContext(context.Context) ClassifierGrokClassifierOutput
}

type ClassifierGrokClassifierArgs struct {
	Classification pulumi.StringInput    `pulumi:"classification"`
	CustomPatterns pulumi.StringPtrInput `pulumi:"customPatterns"`
	GrokPattern    pulumi.StringInput    `pulumi:"grokPattern"`
	Name           pulumi.StringPtrInput `pulumi:"name"`
}

func (ClassifierGrokClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return i.ToClassifierGrokClassifierOutputWithContext(context.Background())
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierOutput)
}

func (i ClassifierGrokClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[ClassifierGrokClassifier] {
	return pulumix.Output[ClassifierGrokClassifier]{
		OutputState: i.ToClassifierGrokClassifierOutputWithContext(ctx).OutputState,
	}
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return i.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierGrokClassifierArgs) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierOutput).ToClassifierGrokClassifierPtrOutputWithContext(ctx)
}

// ClassifierGrokClassifierPtrInput is an input type that accepts ClassifierGrokClassifierArgs, ClassifierGrokClassifierPtr and ClassifierGrokClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierGrokClassifierPtrInput` via:
//
//	        ClassifierGrokClassifierArgs{...}
//
//	or:
//
//	        nil
type ClassifierGrokClassifierPtrInput interface {
	pulumi.Input

	ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput
	ToClassifierGrokClassifierPtrOutputWithContext(context.Context) ClassifierGrokClassifierPtrOutput
}

type classifierGrokClassifierPtrType ClassifierGrokClassifierArgs

func ClassifierGrokClassifierPtr(v *ClassifierGrokClassifierArgs) ClassifierGrokClassifierPtrInput {
	return (*classifierGrokClassifierPtrType)(v)
}

func (*classifierGrokClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierGrokClassifier)(nil)).Elem()
}

func (i *classifierGrokClassifierPtrType) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return i.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierGrokClassifierPtrType) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierGrokClassifierPtrOutput)
}

func (i *classifierGrokClassifierPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClassifierGrokClassifier] {
	return pulumix.Output[*ClassifierGrokClassifier]{
		OutputState: i.ToClassifierGrokClassifierPtrOutputWithContext(ctx).OutputState,
	}
}

type ClassifierGrokClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierGrokClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierGrokClassifier)(nil)).Elem()
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutput() ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierOutputWithContext(ctx context.Context) ClassifierGrokClassifierOutput {
	return o
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return o.ToClassifierGrokClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierGrokClassifierOutput) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassifierGrokClassifier) *ClassifierGrokClassifier {
		return &v
	}).(ClassifierGrokClassifierPtrOutput)
}

func (o ClassifierGrokClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierGrokClassifier] {
	return pulumix.Output[ClassifierGrokClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierGrokClassifierOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

func (o ClassifierGrokClassifierOutput) CustomPatterns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) *string { return v.CustomPatterns }).(pulumi.StringPtrOutput)
}

func (o ClassifierGrokClassifierOutput) GrokPattern() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) string { return v.GrokPattern }).(pulumi.StringOutput)
}

func (o ClassifierGrokClassifierOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierGrokClassifier) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClassifierGrokClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierGrokClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierGrokClassifier)(nil)).Elem()
}

func (o ClassifierGrokClassifierPtrOutput) ToClassifierGrokClassifierPtrOutput() ClassifierGrokClassifierPtrOutput {
	return o
}

func (o ClassifierGrokClassifierPtrOutput) ToClassifierGrokClassifierPtrOutputWithContext(ctx context.Context) ClassifierGrokClassifierPtrOutput {
	return o
}

func (o ClassifierGrokClassifierPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClassifierGrokClassifier] {
	return pulumix.Output[*ClassifierGrokClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierGrokClassifierPtrOutput) Elem() ClassifierGrokClassifierOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) ClassifierGrokClassifier {
		if v != nil {
			return *v
		}
		var ret ClassifierGrokClassifier
		return ret
	}).(ClassifierGrokClassifierOutput)
}

func (o ClassifierGrokClassifierPtrOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.Classification
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierGrokClassifierPtrOutput) CustomPatterns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) *string {
		if v == nil {
			return nil
		}
		return v.CustomPatterns
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierGrokClassifierPtrOutput) GrokPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.GrokPattern
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierGrokClassifierPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierGrokClassifier) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ClassifierJsonClassifier struct {
	JsonPath string  `pulumi:"jsonPath"`
	Name     *string `pulumi:"name"`
}

// ClassifierJsonClassifierInput is an input type that accepts ClassifierJsonClassifierArgs and ClassifierJsonClassifierOutput values.
// You can construct a concrete instance of `ClassifierJsonClassifierInput` via:
//
//	ClassifierJsonClassifierArgs{...}
type ClassifierJsonClassifierInput interface {
	pulumi.Input

	ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput
	ToClassifierJsonClassifierOutputWithContext(context.Context) ClassifierJsonClassifierOutput
}

type ClassifierJsonClassifierArgs struct {
	JsonPath pulumi.StringInput    `pulumi:"jsonPath"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
}

func (ClassifierJsonClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierJsonClassifier)(nil)).Elem()
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput {
	return i.ToClassifierJsonClassifierOutputWithContext(context.Background())
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierOutputWithContext(ctx context.Context) ClassifierJsonClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierJsonClassifierOutput)
}

func (i ClassifierJsonClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[ClassifierJsonClassifier] {
	return pulumix.Output[ClassifierJsonClassifier]{
		OutputState: i.ToClassifierJsonClassifierOutputWithContext(ctx).OutputState,
	}
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return i.ToClassifierJsonClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierJsonClassifierArgs) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierJsonClassifierOutput).ToClassifierJsonClassifierPtrOutputWithContext(ctx)
}

// ClassifierJsonClassifierPtrInput is an input type that accepts ClassifierJsonClassifierArgs, ClassifierJsonClassifierPtr and ClassifierJsonClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierJsonClassifierPtrInput` via:
//
//	        ClassifierJsonClassifierArgs{...}
//
//	or:
//
//	        nil
type ClassifierJsonClassifierPtrInput interface {
	pulumi.Input

	ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput
	ToClassifierJsonClassifierPtrOutputWithContext(context.Context) ClassifierJsonClassifierPtrOutput
}

type classifierJsonClassifierPtrType ClassifierJsonClassifierArgs

func ClassifierJsonClassifierPtr(v *ClassifierJsonClassifierArgs) ClassifierJsonClassifierPtrInput {
	return (*classifierJsonClassifierPtrType)(v)
}

func (*classifierJsonClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierJsonClassifier)(nil)).Elem()
}

func (i *classifierJsonClassifierPtrType) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return i.ToClassifierJsonClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierJsonClassifierPtrType) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierJsonClassifierPtrOutput)
}

func (i *classifierJsonClassifierPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClassifierJsonClassifier] {
	return pulumix.Output[*ClassifierJsonClassifier]{
		OutputState: i.ToClassifierJsonClassifierPtrOutputWithContext(ctx).OutputState,
	}
}

type ClassifierJsonClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierJsonClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierJsonClassifier)(nil)).Elem()
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierOutput() ClassifierJsonClassifierOutput {
	return o
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierOutputWithContext(ctx context.Context) ClassifierJsonClassifierOutput {
	return o
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return o.ToClassifierJsonClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierJsonClassifierOutput) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassifierJsonClassifier) *ClassifierJsonClassifier {
		return &v
	}).(ClassifierJsonClassifierPtrOutput)
}

func (o ClassifierJsonClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierJsonClassifier] {
	return pulumix.Output[ClassifierJsonClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierJsonClassifierOutput) JsonPath() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierJsonClassifier) string { return v.JsonPath }).(pulumi.StringOutput)
}

func (o ClassifierJsonClassifierOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierJsonClassifier) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClassifierJsonClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierJsonClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierJsonClassifier)(nil)).Elem()
}

func (o ClassifierJsonClassifierPtrOutput) ToClassifierJsonClassifierPtrOutput() ClassifierJsonClassifierPtrOutput {
	return o
}

func (o ClassifierJsonClassifierPtrOutput) ToClassifierJsonClassifierPtrOutputWithContext(ctx context.Context) ClassifierJsonClassifierPtrOutput {
	return o
}

func (o ClassifierJsonClassifierPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClassifierJsonClassifier] {
	return pulumix.Output[*ClassifierJsonClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierJsonClassifierPtrOutput) Elem() ClassifierJsonClassifierOutput {
	return o.ApplyT(func(v *ClassifierJsonClassifier) ClassifierJsonClassifier {
		if v != nil {
			return *v
		}
		var ret ClassifierJsonClassifier
		return ret
	}).(ClassifierJsonClassifierOutput)
}

func (o ClassifierJsonClassifierPtrOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierJsonClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.JsonPath
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierJsonClassifierPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierJsonClassifier) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ClassifierXmlClassifier struct {
	Classification string  `pulumi:"classification"`
	Name           *string `pulumi:"name"`
	RowTag         string  `pulumi:"rowTag"`
}

// ClassifierXmlClassifierInput is an input type that accepts ClassifierXmlClassifierArgs and ClassifierXmlClassifierOutput values.
// You can construct a concrete instance of `ClassifierXmlClassifierInput` via:
//
//	ClassifierXmlClassifierArgs{...}
type ClassifierXmlClassifierInput interface {
	pulumi.Input

	ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput
	ToClassifierXmlClassifierOutputWithContext(context.Context) ClassifierXmlClassifierOutput
}

type ClassifierXmlClassifierArgs struct {
	Classification pulumi.StringInput    `pulumi:"classification"`
	Name           pulumi.StringPtrInput `pulumi:"name"`
	RowTag         pulumi.StringInput    `pulumi:"rowTag"`
}

func (ClassifierXmlClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return i.ToClassifierXmlClassifierOutputWithContext(context.Background())
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierOutput)
}

func (i ClassifierXmlClassifierArgs) ToOutput(ctx context.Context) pulumix.Output[ClassifierXmlClassifier] {
	return pulumix.Output[ClassifierXmlClassifier]{
		OutputState: i.ToClassifierXmlClassifierOutputWithContext(ctx).OutputState,
	}
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return i.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (i ClassifierXmlClassifierArgs) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierOutput).ToClassifierXmlClassifierPtrOutputWithContext(ctx)
}

// ClassifierXmlClassifierPtrInput is an input type that accepts ClassifierXmlClassifierArgs, ClassifierXmlClassifierPtr and ClassifierXmlClassifierPtrOutput values.
// You can construct a concrete instance of `ClassifierXmlClassifierPtrInput` via:
//
//	        ClassifierXmlClassifierArgs{...}
//
//	or:
//
//	        nil
type ClassifierXmlClassifierPtrInput interface {
	pulumi.Input

	ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput
	ToClassifierXmlClassifierPtrOutputWithContext(context.Context) ClassifierXmlClassifierPtrOutput
}

type classifierXmlClassifierPtrType ClassifierXmlClassifierArgs

func ClassifierXmlClassifierPtr(v *ClassifierXmlClassifierArgs) ClassifierXmlClassifierPtrInput {
	return (*classifierXmlClassifierPtrType)(v)
}

func (*classifierXmlClassifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierXmlClassifier)(nil)).Elem()
}

func (i *classifierXmlClassifierPtrType) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return i.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (i *classifierXmlClassifierPtrType) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassifierXmlClassifierPtrOutput)
}

func (i *classifierXmlClassifierPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClassifierXmlClassifier] {
	return pulumix.Output[*ClassifierXmlClassifier]{
		OutputState: i.ToClassifierXmlClassifierPtrOutputWithContext(ctx).OutputState,
	}
}

type ClassifierXmlClassifierOutput struct{ *pulumi.OutputState }

func (ClassifierXmlClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassifierXmlClassifier)(nil)).Elem()
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutput() ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierOutputWithContext(ctx context.Context) ClassifierXmlClassifierOutput {
	return o
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return o.ToClassifierXmlClassifierPtrOutputWithContext(context.Background())
}

func (o ClassifierXmlClassifierOutput) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassifierXmlClassifier) *ClassifierXmlClassifier {
		return &v
	}).(ClassifierXmlClassifierPtrOutput)
}

func (o ClassifierXmlClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[ClassifierXmlClassifier] {
	return pulumix.Output[ClassifierXmlClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierXmlClassifierOutput) Classification() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierXmlClassifier) string { return v.Classification }).(pulumi.StringOutput)
}

func (o ClassifierXmlClassifierOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassifierXmlClassifier) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClassifierXmlClassifierOutput) RowTag() pulumi.StringOutput {
	return o.ApplyT(func(v ClassifierXmlClassifier) string { return v.RowTag }).(pulumi.StringOutput)
}

type ClassifierXmlClassifierPtrOutput struct{ *pulumi.OutputState }

func (ClassifierXmlClassifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassifierXmlClassifier)(nil)).Elem()
}

func (o ClassifierXmlClassifierPtrOutput) ToClassifierXmlClassifierPtrOutput() ClassifierXmlClassifierPtrOutput {
	return o
}

func (o ClassifierXmlClassifierPtrOutput) ToClassifierXmlClassifierPtrOutputWithContext(ctx context.Context) ClassifierXmlClassifierPtrOutput {
	return o
}

func (o ClassifierXmlClassifierPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClassifierXmlClassifier] {
	return pulumix.Output[*ClassifierXmlClassifier]{
		OutputState: o.OutputState,
	}
}

func (o ClassifierXmlClassifierPtrOutput) Elem() ClassifierXmlClassifierOutput {
	return o.ApplyT(func(v *ClassifierXmlClassifier) ClassifierXmlClassifier {
		if v != nil {
			return *v
		}
		var ret ClassifierXmlClassifier
		return ret
	}).(ClassifierXmlClassifierOutput)
}

func (o ClassifierXmlClassifierPtrOutput) Classification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierXmlClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.Classification
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierXmlClassifierPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierXmlClassifier) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ClassifierXmlClassifierPtrOutput) RowTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassifierXmlClassifier) *string {
		if v == nil {
			return nil
		}
		return &v.RowTag
	}).(pulumi.StringPtrOutput)
}

type ConnectionInputType struct {
	ConnectionProperties           interface{}                               `pulumi:"connectionProperties"`
	ConnectionType                 string                                    `pulumi:"connectionType"`
	Description                    *string                                   `pulumi:"description"`
	MatchCriteria                  []string                                  `pulumi:"matchCriteria"`
	Name                           *string                                   `pulumi:"name"`
	PhysicalConnectionRequirements *ConnectionPhysicalConnectionRequirements `pulumi:"physicalConnectionRequirements"`
}

// ConnectionInputTypeInput is an input type that accepts ConnectionInputTypeArgs and ConnectionInputTypeOutput values.
// You can construct a concrete instance of `ConnectionInputTypeInput` via:
//
//	ConnectionInputTypeArgs{...}
type ConnectionInputTypeInput interface {
	pulumi.Input

	ToConnectionInputTypeOutput() ConnectionInputTypeOutput
	ToConnectionInputTypeOutputWithContext(context.Context) ConnectionInputTypeOutput
}

type ConnectionInputTypeArgs struct {
	ConnectionProperties           pulumi.Input                                     `pulumi:"connectionProperties"`
	ConnectionType                 pulumi.StringInput                               `pulumi:"connectionType"`
	Description                    pulumi.StringPtrInput                            `pulumi:"description"`
	MatchCriteria                  pulumi.StringArrayInput                          `pulumi:"matchCriteria"`
	Name                           pulumi.StringPtrInput                            `pulumi:"name"`
	PhysicalConnectionRequirements ConnectionPhysicalConnectionRequirementsPtrInput `pulumi:"physicalConnectionRequirements"`
}

func (ConnectionInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInputType)(nil)).Elem()
}

func (i ConnectionInputTypeArgs) ToConnectionInputTypeOutput() ConnectionInputTypeOutput {
	return i.ToConnectionInputTypeOutputWithContext(context.Background())
}

func (i ConnectionInputTypeArgs) ToConnectionInputTypeOutputWithContext(ctx context.Context) ConnectionInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInputTypeOutput)
}

func (i ConnectionInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectionInputType] {
	return pulumix.Output[ConnectionInputType]{
		OutputState: i.ToConnectionInputTypeOutputWithContext(ctx).OutputState,
	}
}

type ConnectionInputTypeOutput struct{ *pulumi.OutputState }

func (ConnectionInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInputType)(nil)).Elem()
}

func (o ConnectionInputTypeOutput) ToConnectionInputTypeOutput() ConnectionInputTypeOutput {
	return o
}

func (o ConnectionInputTypeOutput) ToConnectionInputTypeOutputWithContext(ctx context.Context) ConnectionInputTypeOutput {
	return o
}

func (o ConnectionInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionInputType] {
	return pulumix.Output[ConnectionInputType]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionInputTypeOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ConnectionInputType) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

func (o ConnectionInputTypeOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionInputType) string { return v.ConnectionType }).(pulumi.StringOutput)
}

func (o ConnectionInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConnectionInputTypeOutput) MatchCriteria() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionInputType) []string { return v.MatchCriteria }).(pulumi.StringArrayOutput)
}

func (o ConnectionInputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ConnectionInputTypeOutput) PhysicalConnectionRequirements() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o.ApplyT(func(v ConnectionInputType) *ConnectionPhysicalConnectionRequirements {
		return v.PhysicalConnectionRequirements
	}).(ConnectionPhysicalConnectionRequirementsPtrOutput)
}

type ConnectionInputTypePtrOutput struct{ *pulumi.OutputState }

func (ConnectionInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInputType)(nil)).Elem()
}

func (o ConnectionInputTypePtrOutput) ToConnectionInputTypePtrOutput() ConnectionInputTypePtrOutput {
	return o
}

func (o ConnectionInputTypePtrOutput) ToConnectionInputTypePtrOutputWithContext(ctx context.Context) ConnectionInputTypePtrOutput {
	return o
}

func (o ConnectionInputTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectionInputType] {
	return pulumix.Output[*ConnectionInputType]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionInputTypePtrOutput) Elem() ConnectionInputTypeOutput {
	return o.ApplyT(func(v *ConnectionInputType) ConnectionInputType {
		if v != nil {
			return *v
		}
		var ret ConnectionInputType
		return ret
	}).(ConnectionInputTypeOutput)
}

func (o ConnectionInputTypePtrOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *ConnectionInputType) interface{} {
		if v == nil {
			return nil
		}
		return v.ConnectionProperties
	}).(pulumi.AnyOutput)
}

func (o ConnectionInputTypePtrOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInputType) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionType
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionInputTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInputType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionInputTypePtrOutput) MatchCriteria() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectionInputType) []string {
		if v == nil {
			return nil
		}
		return v.MatchCriteria
	}).(pulumi.StringArrayOutput)
}

func (o ConnectionInputTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInputType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionInputTypePtrOutput) PhysicalConnectionRequirements() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o.ApplyT(func(v *ConnectionInputType) *ConnectionPhysicalConnectionRequirements {
		if v == nil {
			return nil
		}
		return v.PhysicalConnectionRequirements
	}).(ConnectionPhysicalConnectionRequirementsPtrOutput)
}

type ConnectionPhysicalConnectionRequirements struct {
	AvailabilityZone    *string  `pulumi:"availabilityZone"`
	SecurityGroupIdList []string `pulumi:"securityGroupIdList"`
	SubnetId            *string  `pulumi:"subnetId"`
}

// ConnectionPhysicalConnectionRequirementsInput is an input type that accepts ConnectionPhysicalConnectionRequirementsArgs and ConnectionPhysicalConnectionRequirementsOutput values.
// You can construct a concrete instance of `ConnectionPhysicalConnectionRequirementsInput` via:
//
//	ConnectionPhysicalConnectionRequirementsArgs{...}
type ConnectionPhysicalConnectionRequirementsInput interface {
	pulumi.Input

	ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput
	ToConnectionPhysicalConnectionRequirementsOutputWithContext(context.Context) ConnectionPhysicalConnectionRequirementsOutput
}

type ConnectionPhysicalConnectionRequirementsArgs struct {
	AvailabilityZone    pulumi.StringPtrInput   `pulumi:"availabilityZone"`
	SecurityGroupIdList pulumi.StringArrayInput `pulumi:"securityGroupIdList"`
	SubnetId            pulumi.StringPtrInput   `pulumi:"subnetId"`
}

func (ConnectionPhysicalConnectionRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput {
	return i.ToConnectionPhysicalConnectionRequirementsOutputWithContext(context.Background())
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPhysicalConnectionRequirementsOutput)
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectionPhysicalConnectionRequirements] {
	return pulumix.Output[ConnectionPhysicalConnectionRequirements]{
		OutputState: i.ToConnectionPhysicalConnectionRequirementsOutputWithContext(ctx).OutputState,
	}
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return i.ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Background())
}

func (i ConnectionPhysicalConnectionRequirementsArgs) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPhysicalConnectionRequirementsOutput).ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx)
}

// ConnectionPhysicalConnectionRequirementsPtrInput is an input type that accepts ConnectionPhysicalConnectionRequirementsArgs, ConnectionPhysicalConnectionRequirementsPtr and ConnectionPhysicalConnectionRequirementsPtrOutput values.
// You can construct a concrete instance of `ConnectionPhysicalConnectionRequirementsPtrInput` via:
//
//	        ConnectionPhysicalConnectionRequirementsArgs{...}
//
//	or:
//
//	        nil
type ConnectionPhysicalConnectionRequirementsPtrInput interface {
	pulumi.Input

	ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput
	ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput
}

type connectionPhysicalConnectionRequirementsPtrType ConnectionPhysicalConnectionRequirementsArgs

func ConnectionPhysicalConnectionRequirementsPtr(v *ConnectionPhysicalConnectionRequirementsArgs) ConnectionPhysicalConnectionRequirementsPtrInput {
	return (*connectionPhysicalConnectionRequirementsPtrType)(v)
}

func (*connectionPhysicalConnectionRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (i *connectionPhysicalConnectionRequirementsPtrType) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return i.ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Background())
}

func (i *connectionPhysicalConnectionRequirementsPtrType) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPhysicalConnectionRequirementsPtrOutput)
}

func (i *connectionPhysicalConnectionRequirementsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConnectionPhysicalConnectionRequirements] {
	return pulumix.Output[*ConnectionPhysicalConnectionRequirements]{
		OutputState: i.ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx).OutputState,
	}
}

type ConnectionPhysicalConnectionRequirementsOutput struct{ *pulumi.OutputState }

func (ConnectionPhysicalConnectionRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsOutput() ConnectionPhysicalConnectionRequirementsOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o.ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(context.Background())
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionPhysicalConnectionRequirements) *ConnectionPhysicalConnectionRequirements {
		return &v
	}).(ConnectionPhysicalConnectionRequirementsPtrOutput)
}

func (o ConnectionPhysicalConnectionRequirementsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionPhysicalConnectionRequirements] {
	return pulumix.Output[ConnectionPhysicalConnectionRequirements]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionPhysicalConnectionRequirementsOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPhysicalConnectionRequirements) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o ConnectionPhysicalConnectionRequirementsOutput) SecurityGroupIdList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionPhysicalConnectionRequirements) []string { return v.SecurityGroupIdList }).(pulumi.StringArrayOutput)
}

func (o ConnectionPhysicalConnectionRequirementsOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPhysicalConnectionRequirements) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type ConnectionPhysicalConnectionRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPhysicalConnectionRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPhysicalConnectionRequirements)(nil)).Elem()
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) ToConnectionPhysicalConnectionRequirementsPtrOutput() ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) ToConnectionPhysicalConnectionRequirementsPtrOutputWithContext(ctx context.Context) ConnectionPhysicalConnectionRequirementsPtrOutput {
	return o
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectionPhysicalConnectionRequirements] {
	return pulumix.Output[*ConnectionPhysicalConnectionRequirements]{
		OutputState: o.OutputState,
	}
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) Elem() ConnectionPhysicalConnectionRequirementsOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) ConnectionPhysicalConnectionRequirements {
		if v != nil {
			return *v
		}
		var ret ConnectionPhysicalConnectionRequirements
		return ret
	}).(ConnectionPhysicalConnectionRequirementsOutput)
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) SecurityGroupIdList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIdList
	}).(pulumi.StringArrayOutput)
}

func (o ConnectionPhysicalConnectionRequirementsPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPhysicalConnectionRequirements) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type CrawlerCatalogTarget struct {
	ConnectionName   *string  `pulumi:"connectionName"`
	DatabaseName     *string  `pulumi:"databaseName"`
	DlqEventQueueArn *string  `pulumi:"dlqEventQueueArn"`
	EventQueueArn    *string  `pulumi:"eventQueueArn"`
	Tables           []string `pulumi:"tables"`
}

// CrawlerCatalogTargetInput is an input type that accepts CrawlerCatalogTargetArgs and CrawlerCatalogTargetOutput values.
// You can construct a concrete instance of `CrawlerCatalogTargetInput` via:
//
//	CrawlerCatalogTargetArgs{...}
type CrawlerCatalogTargetInput interface {
	pulumi.Input

	ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput
	ToCrawlerCatalogTargetOutputWithContext(context.Context) CrawlerCatalogTargetOutput
}

type CrawlerCatalogTargetArgs struct {
	ConnectionName   pulumi.StringPtrInput   `pulumi:"connectionName"`
	DatabaseName     pulumi.StringPtrInput   `pulumi:"databaseName"`
	DlqEventQueueArn pulumi.StringPtrInput   `pulumi:"dlqEventQueueArn"`
	EventQueueArn    pulumi.StringPtrInput   `pulumi:"eventQueueArn"`
	Tables           pulumi.StringArrayInput `pulumi:"tables"`
}

func (CrawlerCatalogTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return i.ToCrawlerCatalogTargetOutputWithContext(context.Background())
}

func (i CrawlerCatalogTargetArgs) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerCatalogTargetOutput)
}

func (i CrawlerCatalogTargetArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerCatalogTarget] {
	return pulumix.Output[CrawlerCatalogTarget]{
		OutputState: i.ToCrawlerCatalogTargetOutputWithContext(ctx).OutputState,
	}
}

// CrawlerCatalogTargetArrayInput is an input type that accepts CrawlerCatalogTargetArray and CrawlerCatalogTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerCatalogTargetArrayInput` via:
//
//	CrawlerCatalogTargetArray{ CrawlerCatalogTargetArgs{...} }
type CrawlerCatalogTargetArrayInput interface {
	pulumi.Input

	ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput
	ToCrawlerCatalogTargetArrayOutputWithContext(context.Context) CrawlerCatalogTargetArrayOutput
}

type CrawlerCatalogTargetArray []CrawlerCatalogTargetInput

func (CrawlerCatalogTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerCatalogTarget)(nil)).Elem()
}

func (i CrawlerCatalogTargetArray) ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput {
	return i.ToCrawlerCatalogTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerCatalogTargetArray) ToCrawlerCatalogTargetArrayOutputWithContext(ctx context.Context) CrawlerCatalogTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerCatalogTargetArrayOutput)
}

func (i CrawlerCatalogTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerCatalogTarget] {
	return pulumix.Output[[]CrawlerCatalogTarget]{
		OutputState: i.ToCrawlerCatalogTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type CrawlerCatalogTargetOutput struct{ *pulumi.OutputState }

func (CrawlerCatalogTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerCatalogTarget)(nil)).Elem()
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutput() CrawlerCatalogTargetOutput {
	return o
}

func (o CrawlerCatalogTargetOutput) ToCrawlerCatalogTargetOutputWithContext(ctx context.Context) CrawlerCatalogTargetOutput {
	return o
}

func (o CrawlerCatalogTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerCatalogTarget] {
	return pulumix.Output[CrawlerCatalogTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerCatalogTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o CrawlerCatalogTargetOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func (o CrawlerCatalogTargetOutput) DlqEventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.DlqEventQueueArn }).(pulumi.StringPtrOutput)
}

func (o CrawlerCatalogTargetOutput) EventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) *string { return v.EventQueueArn }).(pulumi.StringPtrOutput)
}

func (o CrawlerCatalogTargetOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerCatalogTarget) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

type CrawlerCatalogTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerCatalogTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerCatalogTarget)(nil)).Elem()
}

func (o CrawlerCatalogTargetArrayOutput) ToCrawlerCatalogTargetArrayOutput() CrawlerCatalogTargetArrayOutput {
	return o
}

func (o CrawlerCatalogTargetArrayOutput) ToCrawlerCatalogTargetArrayOutputWithContext(ctx context.Context) CrawlerCatalogTargetArrayOutput {
	return o
}

func (o CrawlerCatalogTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerCatalogTarget] {
	return pulumix.Output[[]CrawlerCatalogTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerCatalogTargetArrayOutput) Index(i pulumi.IntInput) CrawlerCatalogTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerCatalogTarget {
		return vs[0].([]CrawlerCatalogTarget)[vs[1].(int)]
	}).(CrawlerCatalogTargetOutput)
}

type CrawlerDeltaTarget struct {
	ConnectionName         *string  `pulumi:"connectionName"`
	CreateNativeDeltaTable *bool    `pulumi:"createNativeDeltaTable"`
	DeltaTables            []string `pulumi:"deltaTables"`
	WriteManifest          *bool    `pulumi:"writeManifest"`
}

// CrawlerDeltaTargetInput is an input type that accepts CrawlerDeltaTargetArgs and CrawlerDeltaTargetOutput values.
// You can construct a concrete instance of `CrawlerDeltaTargetInput` via:
//
//	CrawlerDeltaTargetArgs{...}
type CrawlerDeltaTargetInput interface {
	pulumi.Input

	ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput
	ToCrawlerDeltaTargetOutputWithContext(context.Context) CrawlerDeltaTargetOutput
}

type CrawlerDeltaTargetArgs struct {
	ConnectionName         pulumi.StringPtrInput   `pulumi:"connectionName"`
	CreateNativeDeltaTable pulumi.BoolPtrInput     `pulumi:"createNativeDeltaTable"`
	DeltaTables            pulumi.StringArrayInput `pulumi:"deltaTables"`
	WriteManifest          pulumi.BoolPtrInput     `pulumi:"writeManifest"`
}

func (CrawlerDeltaTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDeltaTarget)(nil)).Elem()
}

func (i CrawlerDeltaTargetArgs) ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput {
	return i.ToCrawlerDeltaTargetOutputWithContext(context.Background())
}

func (i CrawlerDeltaTargetArgs) ToCrawlerDeltaTargetOutputWithContext(ctx context.Context) CrawlerDeltaTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDeltaTargetOutput)
}

func (i CrawlerDeltaTargetArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerDeltaTarget] {
	return pulumix.Output[CrawlerDeltaTarget]{
		OutputState: i.ToCrawlerDeltaTargetOutputWithContext(ctx).OutputState,
	}
}

// CrawlerDeltaTargetArrayInput is an input type that accepts CrawlerDeltaTargetArray and CrawlerDeltaTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerDeltaTargetArrayInput` via:
//
//	CrawlerDeltaTargetArray{ CrawlerDeltaTargetArgs{...} }
type CrawlerDeltaTargetArrayInput interface {
	pulumi.Input

	ToCrawlerDeltaTargetArrayOutput() CrawlerDeltaTargetArrayOutput
	ToCrawlerDeltaTargetArrayOutputWithContext(context.Context) CrawlerDeltaTargetArrayOutput
}

type CrawlerDeltaTargetArray []CrawlerDeltaTargetInput

func (CrawlerDeltaTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDeltaTarget)(nil)).Elem()
}

func (i CrawlerDeltaTargetArray) ToCrawlerDeltaTargetArrayOutput() CrawlerDeltaTargetArrayOutput {
	return i.ToCrawlerDeltaTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerDeltaTargetArray) ToCrawlerDeltaTargetArrayOutputWithContext(ctx context.Context) CrawlerDeltaTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDeltaTargetArrayOutput)
}

func (i CrawlerDeltaTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerDeltaTarget] {
	return pulumix.Output[[]CrawlerDeltaTarget]{
		OutputState: i.ToCrawlerDeltaTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type CrawlerDeltaTargetOutput struct{ *pulumi.OutputState }

func (CrawlerDeltaTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDeltaTarget)(nil)).Elem()
}

func (o CrawlerDeltaTargetOutput) ToCrawlerDeltaTargetOutput() CrawlerDeltaTargetOutput {
	return o
}

func (o CrawlerDeltaTargetOutput) ToCrawlerDeltaTargetOutputWithContext(ctx context.Context) CrawlerDeltaTargetOutput {
	return o
}

func (o CrawlerDeltaTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerDeltaTarget] {
	return pulumix.Output[CrawlerDeltaTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerDeltaTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o CrawlerDeltaTargetOutput) CreateNativeDeltaTable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) *bool { return v.CreateNativeDeltaTable }).(pulumi.BoolPtrOutput)
}

func (o CrawlerDeltaTargetOutput) DeltaTables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) []string { return v.DeltaTables }).(pulumi.StringArrayOutput)
}

func (o CrawlerDeltaTargetOutput) WriteManifest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CrawlerDeltaTarget) *bool { return v.WriteManifest }).(pulumi.BoolPtrOutput)
}

type CrawlerDeltaTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerDeltaTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDeltaTarget)(nil)).Elem()
}

func (o CrawlerDeltaTargetArrayOutput) ToCrawlerDeltaTargetArrayOutput() CrawlerDeltaTargetArrayOutput {
	return o
}

func (o CrawlerDeltaTargetArrayOutput) ToCrawlerDeltaTargetArrayOutputWithContext(ctx context.Context) CrawlerDeltaTargetArrayOutput {
	return o
}

func (o CrawlerDeltaTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerDeltaTarget] {
	return pulumix.Output[[]CrawlerDeltaTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerDeltaTargetArrayOutput) Index(i pulumi.IntInput) CrawlerDeltaTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerDeltaTarget {
		return vs[0].([]CrawlerDeltaTarget)[vs[1].(int)]
	}).(CrawlerDeltaTargetOutput)
}

type CrawlerDynamoDbTarget struct {
	Path *string `pulumi:"path"`
}

// CrawlerDynamoDbTargetInput is an input type that accepts CrawlerDynamoDbTargetArgs and CrawlerDynamoDbTargetOutput values.
// You can construct a concrete instance of `CrawlerDynamoDbTargetInput` via:
//
//	CrawlerDynamoDbTargetArgs{...}
type CrawlerDynamoDbTargetInput interface {
	pulumi.Input

	ToCrawlerDynamoDbTargetOutput() CrawlerDynamoDbTargetOutput
	ToCrawlerDynamoDbTargetOutputWithContext(context.Context) CrawlerDynamoDbTargetOutput
}

type CrawlerDynamoDbTargetArgs struct {
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (CrawlerDynamoDbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamoDbTarget)(nil)).Elem()
}

func (i CrawlerDynamoDbTargetArgs) ToCrawlerDynamoDbTargetOutput() CrawlerDynamoDbTargetOutput {
	return i.ToCrawlerDynamoDbTargetOutputWithContext(context.Background())
}

func (i CrawlerDynamoDbTargetArgs) ToCrawlerDynamoDbTargetOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDynamoDbTargetOutput)
}

func (i CrawlerDynamoDbTargetArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerDynamoDbTarget] {
	return pulumix.Output[CrawlerDynamoDbTarget]{
		OutputState: i.ToCrawlerDynamoDbTargetOutputWithContext(ctx).OutputState,
	}
}

// CrawlerDynamoDbTargetArrayInput is an input type that accepts CrawlerDynamoDbTargetArray and CrawlerDynamoDbTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerDynamoDbTargetArrayInput` via:
//
//	CrawlerDynamoDbTargetArray{ CrawlerDynamoDbTargetArgs{...} }
type CrawlerDynamoDbTargetArrayInput interface {
	pulumi.Input

	ToCrawlerDynamoDbTargetArrayOutput() CrawlerDynamoDbTargetArrayOutput
	ToCrawlerDynamoDbTargetArrayOutputWithContext(context.Context) CrawlerDynamoDbTargetArrayOutput
}

type CrawlerDynamoDbTargetArray []CrawlerDynamoDbTargetInput

func (CrawlerDynamoDbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDynamoDbTarget)(nil)).Elem()
}

func (i CrawlerDynamoDbTargetArray) ToCrawlerDynamoDbTargetArrayOutput() CrawlerDynamoDbTargetArrayOutput {
	return i.ToCrawlerDynamoDbTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerDynamoDbTargetArray) ToCrawlerDynamoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerDynamoDbTargetArrayOutput)
}

func (i CrawlerDynamoDbTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerDynamoDbTarget] {
	return pulumix.Output[[]CrawlerDynamoDbTarget]{
		OutputState: i.ToCrawlerDynamoDbTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type CrawlerDynamoDbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerDynamoDbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerDynamoDbTarget)(nil)).Elem()
}

func (o CrawlerDynamoDbTargetOutput) ToCrawlerDynamoDbTargetOutput() CrawlerDynamoDbTargetOutput {
	return o
}

func (o CrawlerDynamoDbTargetOutput) ToCrawlerDynamoDbTargetOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetOutput {
	return o
}

func (o CrawlerDynamoDbTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerDynamoDbTarget] {
	return pulumix.Output[CrawlerDynamoDbTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerDynamoDbTargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerDynamoDbTarget) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type CrawlerDynamoDbTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerDynamoDbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerDynamoDbTarget)(nil)).Elem()
}

func (o CrawlerDynamoDbTargetArrayOutput) ToCrawlerDynamoDbTargetArrayOutput() CrawlerDynamoDbTargetArrayOutput {
	return o
}

func (o CrawlerDynamoDbTargetArrayOutput) ToCrawlerDynamoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerDynamoDbTargetArrayOutput {
	return o
}

func (o CrawlerDynamoDbTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerDynamoDbTarget] {
	return pulumix.Output[[]CrawlerDynamoDbTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerDynamoDbTargetArrayOutput) Index(i pulumi.IntInput) CrawlerDynamoDbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerDynamoDbTarget {
		return vs[0].([]CrawlerDynamoDbTarget)[vs[1].(int)]
	}).(CrawlerDynamoDbTargetOutput)
}

type CrawlerIcebergTarget struct {
	ConnectionName        *string  `pulumi:"connectionName"`
	Exclusions            []string `pulumi:"exclusions"`
	MaximumTraversalDepth *int     `pulumi:"maximumTraversalDepth"`
	Paths                 []string `pulumi:"paths"`
}

// CrawlerIcebergTargetInput is an input type that accepts CrawlerIcebergTargetArgs and CrawlerIcebergTargetOutput values.
// You can construct a concrete instance of `CrawlerIcebergTargetInput` via:
//
//	CrawlerIcebergTargetArgs{...}
type CrawlerIcebergTargetInput interface {
	pulumi.Input

	ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput
	ToCrawlerIcebergTargetOutputWithContext(context.Context) CrawlerIcebergTargetOutput
}

type CrawlerIcebergTargetArgs struct {
	ConnectionName        pulumi.StringPtrInput   `pulumi:"connectionName"`
	Exclusions            pulumi.StringArrayInput `pulumi:"exclusions"`
	MaximumTraversalDepth pulumi.IntPtrInput      `pulumi:"maximumTraversalDepth"`
	Paths                 pulumi.StringArrayInput `pulumi:"paths"`
}

func (CrawlerIcebergTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerIcebergTarget)(nil)).Elem()
}

func (i CrawlerIcebergTargetArgs) ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput {
	return i.ToCrawlerIcebergTargetOutputWithContext(context.Background())
}

func (i CrawlerIcebergTargetArgs) ToCrawlerIcebergTargetOutputWithContext(ctx context.Context) CrawlerIcebergTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerIcebergTargetOutput)
}

func (i CrawlerIcebergTargetArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerIcebergTarget] {
	return pulumix.Output[CrawlerIcebergTarget]{
		OutputState: i.ToCrawlerIcebergTargetOutputWithContext(ctx).OutputState,
	}
}

// CrawlerIcebergTargetArrayInput is an input type that accepts CrawlerIcebergTargetArray and CrawlerIcebergTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerIcebergTargetArrayInput` via:
//
//	CrawlerIcebergTargetArray{ CrawlerIcebergTargetArgs{...} }
type CrawlerIcebergTargetArrayInput interface {
	pulumi.Input

	ToCrawlerIcebergTargetArrayOutput() CrawlerIcebergTargetArrayOutput
	ToCrawlerIcebergTargetArrayOutputWithContext(context.Context) CrawlerIcebergTargetArrayOutput
}

type CrawlerIcebergTargetArray []CrawlerIcebergTargetInput

func (CrawlerIcebergTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerIcebergTarget)(nil)).Elem()
}

func (i CrawlerIcebergTargetArray) ToCrawlerIcebergTargetArrayOutput() CrawlerIcebergTargetArrayOutput {
	return i.ToCrawlerIcebergTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerIcebergTargetArray) ToCrawlerIcebergTargetArrayOutputWithContext(ctx context.Context) CrawlerIcebergTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerIcebergTargetArrayOutput)
}

func (i CrawlerIcebergTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerIcebergTarget] {
	return pulumix.Output[[]CrawlerIcebergTarget]{
		OutputState: i.ToCrawlerIcebergTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type CrawlerIcebergTargetOutput struct{ *pulumi.OutputState }

func (CrawlerIcebergTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerIcebergTarget)(nil)).Elem()
}

func (o CrawlerIcebergTargetOutput) ToCrawlerIcebergTargetOutput() CrawlerIcebergTargetOutput {
	return o
}

func (o CrawlerIcebergTargetOutput) ToCrawlerIcebergTargetOutputWithContext(ctx context.Context) CrawlerIcebergTargetOutput {
	return o
}

func (o CrawlerIcebergTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerIcebergTarget] {
	return pulumix.Output[CrawlerIcebergTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerIcebergTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o CrawlerIcebergTargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

func (o CrawlerIcebergTargetOutput) MaximumTraversalDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) *int { return v.MaximumTraversalDepth }).(pulumi.IntPtrOutput)
}

func (o CrawlerIcebergTargetOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerIcebergTarget) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type CrawlerIcebergTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerIcebergTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerIcebergTarget)(nil)).Elem()
}

func (o CrawlerIcebergTargetArrayOutput) ToCrawlerIcebergTargetArrayOutput() CrawlerIcebergTargetArrayOutput {
	return o
}

func (o CrawlerIcebergTargetArrayOutput) ToCrawlerIcebergTargetArrayOutputWithContext(ctx context.Context) CrawlerIcebergTargetArrayOutput {
	return o
}

func (o CrawlerIcebergTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerIcebergTarget] {
	return pulumix.Output[[]CrawlerIcebergTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerIcebergTargetArrayOutput) Index(i pulumi.IntInput) CrawlerIcebergTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerIcebergTarget {
		return vs[0].([]CrawlerIcebergTarget)[vs[1].(int)]
	}).(CrawlerIcebergTargetOutput)
}

type CrawlerJdbcTarget struct {
	ConnectionName *string  `pulumi:"connectionName"`
	Exclusions     []string `pulumi:"exclusions"`
	Path           *string  `pulumi:"path"`
}

// CrawlerJdbcTargetInput is an input type that accepts CrawlerJdbcTargetArgs and CrawlerJdbcTargetOutput values.
// You can construct a concrete instance of `CrawlerJdbcTargetInput` via:
//
//	CrawlerJdbcTargetArgs{...}
type CrawlerJdbcTargetInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput
	ToCrawlerJdbcTargetOutputWithContext(context.Context) CrawlerJdbcTargetOutput
}

type CrawlerJdbcTargetArgs struct {
	ConnectionName pulumi.StringPtrInput   `pulumi:"connectionName"`
	Exclusions     pulumi.StringArrayInput `pulumi:"exclusions"`
	Path           pulumi.StringPtrInput   `pulumi:"path"`
}

func (CrawlerJdbcTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return i.ToCrawlerJdbcTargetOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArgs) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetOutput)
}

func (i CrawlerJdbcTargetArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerJdbcTarget] {
	return pulumix.Output[CrawlerJdbcTarget]{
		OutputState: i.ToCrawlerJdbcTargetOutputWithContext(ctx).OutputState,
	}
}

// CrawlerJdbcTargetArrayInput is an input type that accepts CrawlerJdbcTargetArray and CrawlerJdbcTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerJdbcTargetArrayInput` via:
//
//	CrawlerJdbcTargetArray{ CrawlerJdbcTargetArgs{...} }
type CrawlerJdbcTargetArrayInput interface {
	pulumi.Input

	ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput
	ToCrawlerJdbcTargetArrayOutputWithContext(context.Context) CrawlerJdbcTargetArrayOutput
}

type CrawlerJdbcTargetArray []CrawlerJdbcTargetInput

func (CrawlerJdbcTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return i.ToCrawlerJdbcTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerJdbcTargetArray) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerJdbcTargetArrayOutput)
}

func (i CrawlerJdbcTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerJdbcTarget] {
	return pulumix.Output[[]CrawlerJdbcTarget]{
		OutputState: i.ToCrawlerJdbcTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type CrawlerJdbcTargetOutput struct{ *pulumi.OutputState }

func (CrawlerJdbcTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutput() CrawlerJdbcTargetOutput {
	return o
}

func (o CrawlerJdbcTargetOutput) ToCrawlerJdbcTargetOutputWithContext(ctx context.Context) CrawlerJdbcTargetOutput {
	return o
}

func (o CrawlerJdbcTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerJdbcTarget] {
	return pulumix.Output[CrawlerJdbcTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerJdbcTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o CrawlerJdbcTargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

func (o CrawlerJdbcTargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerJdbcTarget) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type CrawlerJdbcTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerJdbcTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerJdbcTarget)(nil)).Elem()
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutput() CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) ToCrawlerJdbcTargetArrayOutputWithContext(ctx context.Context) CrawlerJdbcTargetArrayOutput {
	return o
}

func (o CrawlerJdbcTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerJdbcTarget] {
	return pulumix.Output[[]CrawlerJdbcTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerJdbcTargetArrayOutput) Index(i pulumi.IntInput) CrawlerJdbcTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerJdbcTarget {
		return vs[0].([]CrawlerJdbcTarget)[vs[1].(int)]
	}).(CrawlerJdbcTargetOutput)
}

type CrawlerMongoDbTarget struct {
	ConnectionName *string `pulumi:"connectionName"`
	Path           *string `pulumi:"path"`
}

// CrawlerMongoDbTargetInput is an input type that accepts CrawlerMongoDbTargetArgs and CrawlerMongoDbTargetOutput values.
// You can construct a concrete instance of `CrawlerMongoDbTargetInput` via:
//
//	CrawlerMongoDbTargetArgs{...}
type CrawlerMongoDbTargetInput interface {
	pulumi.Input

	ToCrawlerMongoDbTargetOutput() CrawlerMongoDbTargetOutput
	ToCrawlerMongoDbTargetOutputWithContext(context.Context) CrawlerMongoDbTargetOutput
}

type CrawlerMongoDbTargetArgs struct {
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	Path           pulumi.StringPtrInput `pulumi:"path"`
}

func (CrawlerMongoDbTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongoDbTarget)(nil)).Elem()
}

func (i CrawlerMongoDbTargetArgs) ToCrawlerMongoDbTargetOutput() CrawlerMongoDbTargetOutput {
	return i.ToCrawlerMongoDbTargetOutputWithContext(context.Background())
}

func (i CrawlerMongoDbTargetArgs) ToCrawlerMongoDbTargetOutputWithContext(ctx context.Context) CrawlerMongoDbTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMongoDbTargetOutput)
}

func (i CrawlerMongoDbTargetArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerMongoDbTarget] {
	return pulumix.Output[CrawlerMongoDbTarget]{
		OutputState: i.ToCrawlerMongoDbTargetOutputWithContext(ctx).OutputState,
	}
}

// CrawlerMongoDbTargetArrayInput is an input type that accepts CrawlerMongoDbTargetArray and CrawlerMongoDbTargetArrayOutput values.
// You can construct a concrete instance of `CrawlerMongoDbTargetArrayInput` via:
//
//	CrawlerMongoDbTargetArray{ CrawlerMongoDbTargetArgs{...} }
type CrawlerMongoDbTargetArrayInput interface {
	pulumi.Input

	ToCrawlerMongoDbTargetArrayOutput() CrawlerMongoDbTargetArrayOutput
	ToCrawlerMongoDbTargetArrayOutputWithContext(context.Context) CrawlerMongoDbTargetArrayOutput
}

type CrawlerMongoDbTargetArray []CrawlerMongoDbTargetInput

func (CrawlerMongoDbTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerMongoDbTarget)(nil)).Elem()
}

func (i CrawlerMongoDbTargetArray) ToCrawlerMongoDbTargetArrayOutput() CrawlerMongoDbTargetArrayOutput {
	return i.ToCrawlerMongoDbTargetArrayOutputWithContext(context.Background())
}

func (i CrawlerMongoDbTargetArray) ToCrawlerMongoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerMongoDbTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerMongoDbTargetArrayOutput)
}

func (i CrawlerMongoDbTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerMongoDbTarget] {
	return pulumix.Output[[]CrawlerMongoDbTarget]{
		OutputState: i.ToCrawlerMongoDbTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type CrawlerMongoDbTargetOutput struct{ *pulumi.OutputState }

func (CrawlerMongoDbTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerMongoDbTarget)(nil)).Elem()
}

func (o CrawlerMongoDbTargetOutput) ToCrawlerMongoDbTargetOutput() CrawlerMongoDbTargetOutput {
	return o
}

func (o CrawlerMongoDbTargetOutput) ToCrawlerMongoDbTargetOutputWithContext(ctx context.Context) CrawlerMongoDbTargetOutput {
	return o
}

func (o CrawlerMongoDbTargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerMongoDbTarget] {
	return pulumix.Output[CrawlerMongoDbTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerMongoDbTargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerMongoDbTarget) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o CrawlerMongoDbTargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerMongoDbTarget) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type CrawlerMongoDbTargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerMongoDbTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerMongoDbTarget)(nil)).Elem()
}

func (o CrawlerMongoDbTargetArrayOutput) ToCrawlerMongoDbTargetArrayOutput() CrawlerMongoDbTargetArrayOutput {
	return o
}

func (o CrawlerMongoDbTargetArrayOutput) ToCrawlerMongoDbTargetArrayOutputWithContext(ctx context.Context) CrawlerMongoDbTargetArrayOutput {
	return o
}

func (o CrawlerMongoDbTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerMongoDbTarget] {
	return pulumix.Output[[]CrawlerMongoDbTarget]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerMongoDbTargetArrayOutput) Index(i pulumi.IntInput) CrawlerMongoDbTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerMongoDbTarget {
		return vs[0].([]CrawlerMongoDbTarget)[vs[1].(int)]
	}).(CrawlerMongoDbTargetOutput)
}

type CrawlerRecrawlPolicy struct {
	RecrawlBehavior *string `pulumi:"recrawlBehavior"`
}

// CrawlerRecrawlPolicyInput is an input type that accepts CrawlerRecrawlPolicyArgs and CrawlerRecrawlPolicyOutput values.
// You can construct a concrete instance of `CrawlerRecrawlPolicyInput` via:
//
//	CrawlerRecrawlPolicyArgs{...}
type CrawlerRecrawlPolicyInput interface {
	pulumi.Input

	ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput
	ToCrawlerRecrawlPolicyOutputWithContext(context.Context) CrawlerRecrawlPolicyOutput
}

type CrawlerRecrawlPolicyArgs struct {
	RecrawlBehavior pulumi.StringPtrInput `pulumi:"recrawlBehavior"`
}

func (CrawlerRecrawlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerRecrawlPolicy)(nil)).Elem()
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput {
	return i.ToCrawlerRecrawlPolicyOutputWithContext(context.Background())
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerRecrawlPolicyOutput)
}

func (i CrawlerRecrawlPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerRecrawlPolicy] {
	return pulumix.Output[CrawlerRecrawlPolicy]{
		OutputState: i.ToCrawlerRecrawlPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return i.ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Background())
}

func (i CrawlerRecrawlPolicyArgs) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerRecrawlPolicyOutput).ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx)
}

// CrawlerRecrawlPolicyPtrInput is an input type that accepts CrawlerRecrawlPolicyArgs, CrawlerRecrawlPolicyPtr and CrawlerRecrawlPolicyPtrOutput values.
// You can construct a concrete instance of `CrawlerRecrawlPolicyPtrInput` via:
//
//	        CrawlerRecrawlPolicyArgs{...}
//
//	or:
//
//	        nil
type CrawlerRecrawlPolicyPtrInput interface {
	pulumi.Input

	ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput
	ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Context) CrawlerRecrawlPolicyPtrOutput
}

type crawlerRecrawlPolicyPtrType CrawlerRecrawlPolicyArgs

func CrawlerRecrawlPolicyPtr(v *CrawlerRecrawlPolicyArgs) CrawlerRecrawlPolicyPtrInput {
	return (*crawlerRecrawlPolicyPtrType)(v)
}

func (*crawlerRecrawlPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerRecrawlPolicy)(nil)).Elem()
}

func (i *crawlerRecrawlPolicyPtrType) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return i.ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Background())
}

func (i *crawlerRecrawlPolicyPtrType) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerRecrawlPolicyPtrOutput)
}

func (i *crawlerRecrawlPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*CrawlerRecrawlPolicy] {
	return pulumix.Output[*CrawlerRecrawlPolicy]{
		OutputState: i.ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type CrawlerRecrawlPolicyOutput struct{ *pulumi.OutputState }

func (CrawlerRecrawlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerRecrawlPolicy)(nil)).Elem()
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyOutput() CrawlerRecrawlPolicyOutput {
	return o
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyOutput {
	return o
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return o.ToCrawlerRecrawlPolicyPtrOutputWithContext(context.Background())
}

func (o CrawlerRecrawlPolicyOutput) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrawlerRecrawlPolicy) *CrawlerRecrawlPolicy {
		return &v
	}).(CrawlerRecrawlPolicyPtrOutput)
}

func (o CrawlerRecrawlPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerRecrawlPolicy] {
	return pulumix.Output[CrawlerRecrawlPolicy]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerRecrawlPolicyOutput) RecrawlBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerRecrawlPolicy) *string { return v.RecrawlBehavior }).(pulumi.StringPtrOutput)
}

type CrawlerRecrawlPolicyPtrOutput struct{ *pulumi.OutputState }

func (CrawlerRecrawlPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerRecrawlPolicy)(nil)).Elem()
}

func (o CrawlerRecrawlPolicyPtrOutput) ToCrawlerRecrawlPolicyPtrOutput() CrawlerRecrawlPolicyPtrOutput {
	return o
}

func (o CrawlerRecrawlPolicyPtrOutput) ToCrawlerRecrawlPolicyPtrOutputWithContext(ctx context.Context) CrawlerRecrawlPolicyPtrOutput {
	return o
}

func (o CrawlerRecrawlPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CrawlerRecrawlPolicy] {
	return pulumix.Output[*CrawlerRecrawlPolicy]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerRecrawlPolicyPtrOutput) Elem() CrawlerRecrawlPolicyOutput {
	return o.ApplyT(func(v *CrawlerRecrawlPolicy) CrawlerRecrawlPolicy {
		if v != nil {
			return *v
		}
		var ret CrawlerRecrawlPolicy
		return ret
	}).(CrawlerRecrawlPolicyOutput)
}

func (o CrawlerRecrawlPolicyPtrOutput) RecrawlBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerRecrawlPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RecrawlBehavior
	}).(pulumi.StringPtrOutput)
}

type CrawlerS3Target struct {
	ConnectionName   *string  `pulumi:"connectionName"`
	DlqEventQueueArn *string  `pulumi:"dlqEventQueueArn"`
	EventQueueArn    *string  `pulumi:"eventQueueArn"`
	Exclusions       []string `pulumi:"exclusions"`
	Path             *string  `pulumi:"path"`
	SampleSize       *int     `pulumi:"sampleSize"`
}

// CrawlerS3TargetInput is an input type that accepts CrawlerS3TargetArgs and CrawlerS3TargetOutput values.
// You can construct a concrete instance of `CrawlerS3TargetInput` via:
//
//	CrawlerS3TargetArgs{...}
type CrawlerS3TargetInput interface {
	pulumi.Input

	ToCrawlerS3TargetOutput() CrawlerS3TargetOutput
	ToCrawlerS3TargetOutputWithContext(context.Context) CrawlerS3TargetOutput
}

type CrawlerS3TargetArgs struct {
	ConnectionName   pulumi.StringPtrInput   `pulumi:"connectionName"`
	DlqEventQueueArn pulumi.StringPtrInput   `pulumi:"dlqEventQueueArn"`
	EventQueueArn    pulumi.StringPtrInput   `pulumi:"eventQueueArn"`
	Exclusions       pulumi.StringArrayInput `pulumi:"exclusions"`
	Path             pulumi.StringPtrInput   `pulumi:"path"`
	SampleSize       pulumi.IntPtrInput      `pulumi:"sampleSize"`
}

func (CrawlerS3TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return i.ToCrawlerS3TargetOutputWithContext(context.Background())
}

func (i CrawlerS3TargetArgs) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerS3TargetOutput)
}

func (i CrawlerS3TargetArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerS3Target] {
	return pulumix.Output[CrawlerS3Target]{
		OutputState: i.ToCrawlerS3TargetOutputWithContext(ctx).OutputState,
	}
}

// CrawlerS3TargetArrayInput is an input type that accepts CrawlerS3TargetArray and CrawlerS3TargetArrayOutput values.
// You can construct a concrete instance of `CrawlerS3TargetArrayInput` via:
//
//	CrawlerS3TargetArray{ CrawlerS3TargetArgs{...} }
type CrawlerS3TargetArrayInput interface {
	pulumi.Input

	ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput
	ToCrawlerS3TargetArrayOutputWithContext(context.Context) CrawlerS3TargetArrayOutput
}

type CrawlerS3TargetArray []CrawlerS3TargetInput

func (CrawlerS3TargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerS3Target)(nil)).Elem()
}

func (i CrawlerS3TargetArray) ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput {
	return i.ToCrawlerS3TargetArrayOutputWithContext(context.Background())
}

func (i CrawlerS3TargetArray) ToCrawlerS3TargetArrayOutputWithContext(ctx context.Context) CrawlerS3TargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerS3TargetArrayOutput)
}

func (i CrawlerS3TargetArray) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerS3Target] {
	return pulumix.Output[[]CrawlerS3Target]{
		OutputState: i.ToCrawlerS3TargetArrayOutputWithContext(ctx).OutputState,
	}
}

type CrawlerS3TargetOutput struct{ *pulumi.OutputState }

func (CrawlerS3TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerS3Target)(nil)).Elem()
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutput() CrawlerS3TargetOutput {
	return o
}

func (o CrawlerS3TargetOutput) ToCrawlerS3TargetOutputWithContext(ctx context.Context) CrawlerS3TargetOutput {
	return o
}

func (o CrawlerS3TargetOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerS3Target] {
	return pulumix.Output[CrawlerS3Target]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerS3TargetOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o CrawlerS3TargetOutput) DlqEventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.DlqEventQueueArn }).(pulumi.StringPtrOutput)
}

func (o CrawlerS3TargetOutput) EventQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.EventQueueArn }).(pulumi.StringPtrOutput)
}

func (o CrawlerS3TargetOutput) Exclusions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CrawlerS3Target) []string { return v.Exclusions }).(pulumi.StringArrayOutput)
}

func (o CrawlerS3TargetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o CrawlerS3TargetOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CrawlerS3Target) *int { return v.SampleSize }).(pulumi.IntPtrOutput)
}

type CrawlerS3TargetArrayOutput struct{ *pulumi.OutputState }

func (CrawlerS3TargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CrawlerS3Target)(nil)).Elem()
}

func (o CrawlerS3TargetArrayOutput) ToCrawlerS3TargetArrayOutput() CrawlerS3TargetArrayOutput {
	return o
}

func (o CrawlerS3TargetArrayOutput) ToCrawlerS3TargetArrayOutputWithContext(ctx context.Context) CrawlerS3TargetArrayOutput {
	return o
}

func (o CrawlerS3TargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CrawlerS3Target] {
	return pulumix.Output[[]CrawlerS3Target]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerS3TargetArrayOutput) Index(i pulumi.IntInput) CrawlerS3TargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CrawlerS3Target {
		return vs[0].([]CrawlerS3Target)[vs[1].(int)]
	}).(CrawlerS3TargetOutput)
}

type CrawlerSchedule struct {
	ScheduleExpression *string `pulumi:"scheduleExpression"`
}

// CrawlerScheduleInput is an input type that accepts CrawlerScheduleArgs and CrawlerScheduleOutput values.
// You can construct a concrete instance of `CrawlerScheduleInput` via:
//
//	CrawlerScheduleArgs{...}
type CrawlerScheduleInput interface {
	pulumi.Input

	ToCrawlerScheduleOutput() CrawlerScheduleOutput
	ToCrawlerScheduleOutputWithContext(context.Context) CrawlerScheduleOutput
}

type CrawlerScheduleArgs struct {
	ScheduleExpression pulumi.StringPtrInput `pulumi:"scheduleExpression"`
}

func (CrawlerScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchedule)(nil)).Elem()
}

func (i CrawlerScheduleArgs) ToCrawlerScheduleOutput() CrawlerScheduleOutput {
	return i.ToCrawlerScheduleOutputWithContext(context.Background())
}

func (i CrawlerScheduleArgs) ToCrawlerScheduleOutputWithContext(ctx context.Context) CrawlerScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerScheduleOutput)
}

func (i CrawlerScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerSchedule] {
	return pulumix.Output[CrawlerSchedule]{
		OutputState: i.ToCrawlerScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i CrawlerScheduleArgs) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return i.ToCrawlerSchedulePtrOutputWithContext(context.Background())
}

func (i CrawlerScheduleArgs) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerScheduleOutput).ToCrawlerSchedulePtrOutputWithContext(ctx)
}

// CrawlerSchedulePtrInput is an input type that accepts CrawlerScheduleArgs, CrawlerSchedulePtr and CrawlerSchedulePtrOutput values.
// You can construct a concrete instance of `CrawlerSchedulePtrInput` via:
//
//	        CrawlerScheduleArgs{...}
//
//	or:
//
//	        nil
type CrawlerSchedulePtrInput interface {
	pulumi.Input

	ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput
	ToCrawlerSchedulePtrOutputWithContext(context.Context) CrawlerSchedulePtrOutput
}

type crawlerSchedulePtrType CrawlerScheduleArgs

func CrawlerSchedulePtr(v *CrawlerScheduleArgs) CrawlerSchedulePtrInput {
	return (*crawlerSchedulePtrType)(v)
}

func (*crawlerSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchedule)(nil)).Elem()
}

func (i *crawlerSchedulePtrType) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return i.ToCrawlerSchedulePtrOutputWithContext(context.Background())
}

func (i *crawlerSchedulePtrType) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchedulePtrOutput)
}

func (i *crawlerSchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*CrawlerSchedule] {
	return pulumix.Output[*CrawlerSchedule]{
		OutputState: i.ToCrawlerSchedulePtrOutputWithContext(ctx).OutputState,
	}
}

type CrawlerScheduleOutput struct{ *pulumi.OutputState }

func (CrawlerScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchedule)(nil)).Elem()
}

func (o CrawlerScheduleOutput) ToCrawlerScheduleOutput() CrawlerScheduleOutput {
	return o
}

func (o CrawlerScheduleOutput) ToCrawlerScheduleOutputWithContext(ctx context.Context) CrawlerScheduleOutput {
	return o
}

func (o CrawlerScheduleOutput) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return o.ToCrawlerSchedulePtrOutputWithContext(context.Background())
}

func (o CrawlerScheduleOutput) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrawlerSchedule) *CrawlerSchedule {
		return &v
	}).(CrawlerSchedulePtrOutput)
}

func (o CrawlerScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerSchedule] {
	return pulumix.Output[CrawlerSchedule]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerScheduleOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchedule) *string { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

type CrawlerSchedulePtrOutput struct{ *pulumi.OutputState }

func (CrawlerSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchedule)(nil)).Elem()
}

func (o CrawlerSchedulePtrOutput) ToCrawlerSchedulePtrOutput() CrawlerSchedulePtrOutput {
	return o
}

func (o CrawlerSchedulePtrOutput) ToCrawlerSchedulePtrOutputWithContext(ctx context.Context) CrawlerSchedulePtrOutput {
	return o
}

func (o CrawlerSchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CrawlerSchedule] {
	return pulumix.Output[*CrawlerSchedule]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerSchedulePtrOutput) Elem() CrawlerScheduleOutput {
	return o.ApplyT(func(v *CrawlerSchedule) CrawlerSchedule {
		if v != nil {
			return *v
		}
		var ret CrawlerSchedule
		return ret
	}).(CrawlerScheduleOutput)
}

func (o CrawlerSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

type CrawlerSchemaChangePolicy struct {
	DeleteBehavior *string `pulumi:"deleteBehavior"`
	UpdateBehavior *string `pulumi:"updateBehavior"`
}

// CrawlerSchemaChangePolicyInput is an input type that accepts CrawlerSchemaChangePolicyArgs and CrawlerSchemaChangePolicyOutput values.
// You can construct a concrete instance of `CrawlerSchemaChangePolicyInput` via:
//
//	CrawlerSchemaChangePolicyArgs{...}
type CrawlerSchemaChangePolicyInput interface {
	pulumi.Input

	ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput
	ToCrawlerSchemaChangePolicyOutputWithContext(context.Context) CrawlerSchemaChangePolicyOutput
}

type CrawlerSchemaChangePolicyArgs struct {
	DeleteBehavior pulumi.StringPtrInput `pulumi:"deleteBehavior"`
	UpdateBehavior pulumi.StringPtrInput `pulumi:"updateBehavior"`
}

func (CrawlerSchemaChangePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return i.ToCrawlerSchemaChangePolicyOutputWithContext(context.Background())
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyOutput)
}

func (i CrawlerSchemaChangePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerSchemaChangePolicy] {
	return pulumix.Output[CrawlerSchemaChangePolicy]{
		OutputState: i.ToCrawlerSchemaChangePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return i.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (i CrawlerSchemaChangePolicyArgs) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyOutput).ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx)
}

// CrawlerSchemaChangePolicyPtrInput is an input type that accepts CrawlerSchemaChangePolicyArgs, CrawlerSchemaChangePolicyPtr and CrawlerSchemaChangePolicyPtrOutput values.
// You can construct a concrete instance of `CrawlerSchemaChangePolicyPtrInput` via:
//
//	        CrawlerSchemaChangePolicyArgs{...}
//
//	or:
//
//	        nil
type CrawlerSchemaChangePolicyPtrInput interface {
	pulumi.Input

	ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput
	ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Context) CrawlerSchemaChangePolicyPtrOutput
}

type crawlerSchemaChangePolicyPtrType CrawlerSchemaChangePolicyArgs

func CrawlerSchemaChangePolicyPtr(v *CrawlerSchemaChangePolicyArgs) CrawlerSchemaChangePolicyPtrInput {
	return (*crawlerSchemaChangePolicyPtrType)(v)
}

func (*crawlerSchemaChangePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (i *crawlerSchemaChangePolicyPtrType) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return i.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (i *crawlerSchemaChangePolicyPtrType) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerSchemaChangePolicyPtrOutput)
}

func (i *crawlerSchemaChangePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*CrawlerSchemaChangePolicy] {
	return pulumix.Output[*CrawlerSchemaChangePolicy]{
		OutputState: i.ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type CrawlerSchemaChangePolicyOutput struct{ *pulumi.OutputState }

func (CrawlerSchemaChangePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutput() CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyOutput {
	return o
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return o.ToCrawlerSchemaChangePolicyPtrOutputWithContext(context.Background())
}

func (o CrawlerSchemaChangePolicyOutput) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CrawlerSchemaChangePolicy) *CrawlerSchemaChangePolicy {
		return &v
	}).(CrawlerSchemaChangePolicyPtrOutput)
}

func (o CrawlerSchemaChangePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerSchemaChangePolicy] {
	return pulumix.Output[CrawlerSchemaChangePolicy]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerSchemaChangePolicyOutput) DeleteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchemaChangePolicy) *string { return v.DeleteBehavior }).(pulumi.StringPtrOutput)
}

func (o CrawlerSchemaChangePolicyOutput) UpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrawlerSchemaChangePolicy) *string { return v.UpdateBehavior }).(pulumi.StringPtrOutput)
}

type CrawlerSchemaChangePolicyPtrOutput struct{ *pulumi.OutputState }

func (CrawlerSchemaChangePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerSchemaChangePolicy)(nil)).Elem()
}

func (o CrawlerSchemaChangePolicyPtrOutput) ToCrawlerSchemaChangePolicyPtrOutput() CrawlerSchemaChangePolicyPtrOutput {
	return o
}

func (o CrawlerSchemaChangePolicyPtrOutput) ToCrawlerSchemaChangePolicyPtrOutputWithContext(ctx context.Context) CrawlerSchemaChangePolicyPtrOutput {
	return o
}

func (o CrawlerSchemaChangePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CrawlerSchemaChangePolicy] {
	return pulumix.Output[*CrawlerSchemaChangePolicy]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerSchemaChangePolicyPtrOutput) Elem() CrawlerSchemaChangePolicyOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) CrawlerSchemaChangePolicy {
		if v != nil {
			return *v
		}
		var ret CrawlerSchemaChangePolicy
		return ret
	}).(CrawlerSchemaChangePolicyOutput)
}

func (o CrawlerSchemaChangePolicyPtrOutput) DeleteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) *string {
		if v == nil {
			return nil
		}
		return v.DeleteBehavior
	}).(pulumi.StringPtrOutput)
}

func (o CrawlerSchemaChangePolicyPtrOutput) UpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrawlerSchemaChangePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpdateBehavior
	}).(pulumi.StringPtrOutput)
}

type CrawlerTargets struct {
	CatalogTargets  []CrawlerCatalogTarget  `pulumi:"catalogTargets"`
	DeltaTargets    []CrawlerDeltaTarget    `pulumi:"deltaTargets"`
	DynamoDbTargets []CrawlerDynamoDbTarget `pulumi:"dynamoDbTargets"`
	IcebergTargets  []CrawlerIcebergTarget  `pulumi:"icebergTargets"`
	JdbcTargets     []CrawlerJdbcTarget     `pulumi:"jdbcTargets"`
	MongoDbTargets  []CrawlerMongoDbTarget  `pulumi:"mongoDbTargets"`
	S3Targets       []CrawlerS3Target       `pulumi:"s3Targets"`
}

// CrawlerTargetsInput is an input type that accepts CrawlerTargetsArgs and CrawlerTargetsOutput values.
// You can construct a concrete instance of `CrawlerTargetsInput` via:
//
//	CrawlerTargetsArgs{...}
type CrawlerTargetsInput interface {
	pulumi.Input

	ToCrawlerTargetsOutput() CrawlerTargetsOutput
	ToCrawlerTargetsOutputWithContext(context.Context) CrawlerTargetsOutput
}

type CrawlerTargetsArgs struct {
	CatalogTargets  CrawlerCatalogTargetArrayInput  `pulumi:"catalogTargets"`
	DeltaTargets    CrawlerDeltaTargetArrayInput    `pulumi:"deltaTargets"`
	DynamoDbTargets CrawlerDynamoDbTargetArrayInput `pulumi:"dynamoDbTargets"`
	IcebergTargets  CrawlerIcebergTargetArrayInput  `pulumi:"icebergTargets"`
	JdbcTargets     CrawlerJdbcTargetArrayInput     `pulumi:"jdbcTargets"`
	MongoDbTargets  CrawlerMongoDbTargetArrayInput  `pulumi:"mongoDbTargets"`
	S3Targets       CrawlerS3TargetArrayInput       `pulumi:"s3Targets"`
}

func (CrawlerTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerTargets)(nil)).Elem()
}

func (i CrawlerTargetsArgs) ToCrawlerTargetsOutput() CrawlerTargetsOutput {
	return i.ToCrawlerTargetsOutputWithContext(context.Background())
}

func (i CrawlerTargetsArgs) ToCrawlerTargetsOutputWithContext(ctx context.Context) CrawlerTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrawlerTargetsOutput)
}

func (i CrawlerTargetsArgs) ToOutput(ctx context.Context) pulumix.Output[CrawlerTargets] {
	return pulumix.Output[CrawlerTargets]{
		OutputState: i.ToCrawlerTargetsOutputWithContext(ctx).OutputState,
	}
}

type CrawlerTargetsOutput struct{ *pulumi.OutputState }

func (CrawlerTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrawlerTargets)(nil)).Elem()
}

func (o CrawlerTargetsOutput) ToCrawlerTargetsOutput() CrawlerTargetsOutput {
	return o
}

func (o CrawlerTargetsOutput) ToCrawlerTargetsOutputWithContext(ctx context.Context) CrawlerTargetsOutput {
	return o
}

func (o CrawlerTargetsOutput) ToOutput(ctx context.Context) pulumix.Output[CrawlerTargets] {
	return pulumix.Output[CrawlerTargets]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerTargetsOutput) CatalogTargets() CrawlerCatalogTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerCatalogTarget { return v.CatalogTargets }).(CrawlerCatalogTargetArrayOutput)
}

func (o CrawlerTargetsOutput) DeltaTargets() CrawlerDeltaTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerDeltaTarget { return v.DeltaTargets }).(CrawlerDeltaTargetArrayOutput)
}

func (o CrawlerTargetsOutput) DynamoDbTargets() CrawlerDynamoDbTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerDynamoDbTarget { return v.DynamoDbTargets }).(CrawlerDynamoDbTargetArrayOutput)
}

func (o CrawlerTargetsOutput) IcebergTargets() CrawlerIcebergTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerIcebergTarget { return v.IcebergTargets }).(CrawlerIcebergTargetArrayOutput)
}

func (o CrawlerTargetsOutput) JdbcTargets() CrawlerJdbcTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerJdbcTarget { return v.JdbcTargets }).(CrawlerJdbcTargetArrayOutput)
}

func (o CrawlerTargetsOutput) MongoDbTargets() CrawlerMongoDbTargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerMongoDbTarget { return v.MongoDbTargets }).(CrawlerMongoDbTargetArrayOutput)
}

func (o CrawlerTargetsOutput) S3Targets() CrawlerS3TargetArrayOutput {
	return o.ApplyT(func(v CrawlerTargets) []CrawlerS3Target { return v.S3Targets }).(CrawlerS3TargetArrayOutput)
}

type CrawlerTargetsPtrOutput struct{ *pulumi.OutputState }

func (CrawlerTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrawlerTargets)(nil)).Elem()
}

func (o CrawlerTargetsPtrOutput) ToCrawlerTargetsPtrOutput() CrawlerTargetsPtrOutput {
	return o
}

func (o CrawlerTargetsPtrOutput) ToCrawlerTargetsPtrOutputWithContext(ctx context.Context) CrawlerTargetsPtrOutput {
	return o
}

func (o CrawlerTargetsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CrawlerTargets] {
	return pulumix.Output[*CrawlerTargets]{
		OutputState: o.OutputState,
	}
}

func (o CrawlerTargetsPtrOutput) Elem() CrawlerTargetsOutput {
	return o.ApplyT(func(v *CrawlerTargets) CrawlerTargets {
		if v != nil {
			return *v
		}
		var ret CrawlerTargets
		return ret
	}).(CrawlerTargetsOutput)
}

func (o CrawlerTargetsPtrOutput) CatalogTargets() CrawlerCatalogTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerCatalogTarget {
		if v == nil {
			return nil
		}
		return v.CatalogTargets
	}).(CrawlerCatalogTargetArrayOutput)
}

func (o CrawlerTargetsPtrOutput) DeltaTargets() CrawlerDeltaTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerDeltaTarget {
		if v == nil {
			return nil
		}
		return v.DeltaTargets
	}).(CrawlerDeltaTargetArrayOutput)
}

func (o CrawlerTargetsPtrOutput) DynamoDbTargets() CrawlerDynamoDbTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerDynamoDbTarget {
		if v == nil {
			return nil
		}
		return v.DynamoDbTargets
	}).(CrawlerDynamoDbTargetArrayOutput)
}

func (o CrawlerTargetsPtrOutput) IcebergTargets() CrawlerIcebergTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerIcebergTarget {
		if v == nil {
			return nil
		}
		return v.IcebergTargets
	}).(CrawlerIcebergTargetArrayOutput)
}

func (o CrawlerTargetsPtrOutput) JdbcTargets() CrawlerJdbcTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerJdbcTarget {
		if v == nil {
			return nil
		}
		return v.JdbcTargets
	}).(CrawlerJdbcTargetArrayOutput)
}

func (o CrawlerTargetsPtrOutput) MongoDbTargets() CrawlerMongoDbTargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerMongoDbTarget {
		if v == nil {
			return nil
		}
		return v.MongoDbTargets
	}).(CrawlerMongoDbTargetArrayOutput)
}

func (o CrawlerTargetsPtrOutput) S3Targets() CrawlerS3TargetArrayOutput {
	return o.ApplyT(func(v *CrawlerTargets) []CrawlerS3Target {
		if v == nil {
			return nil
		}
		return v.S3Targets
	}).(CrawlerS3TargetArrayOutput)
}

type DataCatalogEncryptionSettingsType struct {
	ConnectionPasswordEncryption *DataCatalogEncryptionSettingsConnectionPasswordEncryption `pulumi:"connectionPasswordEncryption"`
	EncryptionAtRest             *DataCatalogEncryptionSettingsEncryptionAtRest             `pulumi:"encryptionAtRest"`
}

// DataCatalogEncryptionSettingsTypeInput is an input type that accepts DataCatalogEncryptionSettingsTypeArgs and DataCatalogEncryptionSettingsTypeOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsTypeInput` via:
//
//	DataCatalogEncryptionSettingsTypeArgs{...}
type DataCatalogEncryptionSettingsTypeInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsTypeOutput() DataCatalogEncryptionSettingsTypeOutput
	ToDataCatalogEncryptionSettingsTypeOutputWithContext(context.Context) DataCatalogEncryptionSettingsTypeOutput
}

type DataCatalogEncryptionSettingsTypeArgs struct {
	ConnectionPasswordEncryption DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput `pulumi:"connectionPasswordEncryption"`
	EncryptionAtRest             DataCatalogEncryptionSettingsEncryptionAtRestPtrInput             `pulumi:"encryptionAtRest"`
}

func (DataCatalogEncryptionSettingsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsType)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsTypeArgs) ToDataCatalogEncryptionSettingsTypeOutput() DataCatalogEncryptionSettingsTypeOutput {
	return i.ToDataCatalogEncryptionSettingsTypeOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsTypeArgs) ToDataCatalogEncryptionSettingsTypeOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsTypeOutput)
}

func (i DataCatalogEncryptionSettingsTypeArgs) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsType] {
	return pulumix.Output[DataCatalogEncryptionSettingsType]{
		OutputState: i.ToDataCatalogEncryptionSettingsTypeOutputWithContext(ctx).OutputState,
	}
}

type DataCatalogEncryptionSettingsTypeOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsType)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsTypeOutput) ToDataCatalogEncryptionSettingsTypeOutput() DataCatalogEncryptionSettingsTypeOutput {
	return o
}

func (o DataCatalogEncryptionSettingsTypeOutput) ToDataCatalogEncryptionSettingsTypeOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsTypeOutput {
	return o
}

func (o DataCatalogEncryptionSettingsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsType] {
	return pulumix.Output[DataCatalogEncryptionSettingsType]{
		OutputState: o.OutputState,
	}
}

func (o DataCatalogEncryptionSettingsTypeOutput) ConnectionPasswordEncryption() DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsType) *DataCatalogEncryptionSettingsConnectionPasswordEncryption {
		return v.ConnectionPasswordEncryption
	}).(DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput)
}

func (o DataCatalogEncryptionSettingsTypeOutput) EncryptionAtRest() DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsType) *DataCatalogEncryptionSettingsEncryptionAtRest {
		return v.EncryptionAtRest
	}).(DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput)
}

type DataCatalogEncryptionSettingsTypePtrOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsType)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsTypePtrOutput) ToDataCatalogEncryptionSettingsTypePtrOutput() DataCatalogEncryptionSettingsTypePtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsTypePtrOutput) ToDataCatalogEncryptionSettingsTypePtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsTypePtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsType] {
	return pulumix.Output[*DataCatalogEncryptionSettingsType]{
		OutputState: o.OutputState,
	}
}

func (o DataCatalogEncryptionSettingsTypePtrOutput) Elem() DataCatalogEncryptionSettingsTypeOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsType) DataCatalogEncryptionSettingsType {
		if v != nil {
			return *v
		}
		var ret DataCatalogEncryptionSettingsType
		return ret
	}).(DataCatalogEncryptionSettingsTypeOutput)
}

func (o DataCatalogEncryptionSettingsTypePtrOutput) ConnectionPasswordEncryption() DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsType) *DataCatalogEncryptionSettingsConnectionPasswordEncryption {
		if v == nil {
			return nil
		}
		return v.ConnectionPasswordEncryption
	}).(DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput)
}

func (o DataCatalogEncryptionSettingsTypePtrOutput) EncryptionAtRest() DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsType) *DataCatalogEncryptionSettingsEncryptionAtRest {
		if v == nil {
			return nil
		}
		return v.EncryptionAtRest
	}).(DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput)
}

type DataCatalogEncryptionSettingsConnectionPasswordEncryption struct {
	KmsKeyId                          *string `pulumi:"kmsKeyId"`
	ReturnConnectionPasswordEncrypted *bool   `pulumi:"returnConnectionPasswordEncrypted"`
}

// DataCatalogEncryptionSettingsConnectionPasswordEncryptionInput is an input type that accepts DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs and DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsConnectionPasswordEncryptionInput` via:
//
//	DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs{...}
type DataCatalogEncryptionSettingsConnectionPasswordEncryptionInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput
	ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput
}

type DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs struct {
	KmsKeyId                          pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	ReturnConnectionPasswordEncrypted pulumi.BoolPtrInput   `pulumi:"returnConnectionPasswordEncrypted"`
}

func (DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return i.ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput)
}

func (i DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsConnectionPasswordEncryption] {
	return pulumix.Output[DataCatalogEncryptionSettingsConnectionPasswordEncryption]{
		OutputState: i.ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return i.ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput).ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx)
}

// DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput is an input type that accepts DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs, DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtr and DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput` via:
//
//	        DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs{...}
//
//	or:
//
//	        nil
type DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput
	ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput
}

type dataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs

func DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtr(v *DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs) DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput {
	return (*dataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType)(v)
}

func (*dataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (i *dataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return i.ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Background())
}

func (i *dataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput)
}

func (i *dataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsConnectionPasswordEncryption] {
	return pulumix.Output[*DataCatalogEncryptionSettingsConnectionPasswordEncryption]{
		OutputState: i.ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o.ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(context.Background())
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCatalogEncryptionSettingsConnectionPasswordEncryption) *DataCatalogEncryptionSettingsConnectionPasswordEncryption {
		return &v
	}).(DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput)
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsConnectionPasswordEncryption] {
	return pulumix.Output[DataCatalogEncryptionSettingsConnectionPasswordEncryption]{
		OutputState: o.OutputState,
	}
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsConnectionPasswordEncryption) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput) ReturnConnectionPasswordEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsConnectionPasswordEncryption) *bool {
		return v.ReturnConnectionPasswordEncrypted
	}).(pulumi.BoolPtrOutput)
}

type DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsConnectionPasswordEncryption)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput() DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ToDataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsConnectionPasswordEncryption] {
	return pulumix.Output[*DataCatalogEncryptionSettingsConnectionPasswordEncryption]{
		OutputState: o.OutputState,
	}
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) Elem() DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsConnectionPasswordEncryption) DataCatalogEncryptionSettingsConnectionPasswordEncryption {
		if v != nil {
			return *v
		}
		var ret DataCatalogEncryptionSettingsConnectionPasswordEncryption
		return ret
	}).(DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput)
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsConnectionPasswordEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput) ReturnConnectionPasswordEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsConnectionPasswordEncryption) *bool {
		if v == nil {
			return nil
		}
		return v.ReturnConnectionPasswordEncrypted
	}).(pulumi.BoolPtrOutput)
}

type DataCatalogEncryptionSettingsEncryptionAtRest struct {
	CatalogEncryptionMode *string `pulumi:"catalogEncryptionMode"`
	SseAwsKmsKeyId        *string `pulumi:"sseAwsKmsKeyId"`
}

// DataCatalogEncryptionSettingsEncryptionAtRestInput is an input type that accepts DataCatalogEncryptionSettingsEncryptionAtRestArgs and DataCatalogEncryptionSettingsEncryptionAtRestOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsEncryptionAtRestInput` via:
//
//	DataCatalogEncryptionSettingsEncryptionAtRestArgs{...}
type DataCatalogEncryptionSettingsEncryptionAtRestInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsEncryptionAtRestOutput
	ToDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(context.Context) DataCatalogEncryptionSettingsEncryptionAtRestOutput
}

type DataCatalogEncryptionSettingsEncryptionAtRestArgs struct {
	CatalogEncryptionMode pulumi.StringPtrInput `pulumi:"catalogEncryptionMode"`
	SseAwsKmsKeyId        pulumi.StringPtrInput `pulumi:"sseAwsKmsKeyId"`
}

func (DataCatalogEncryptionSettingsEncryptionAtRestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (i DataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return i.ToDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsEncryptionAtRestOutput)
}

func (i DataCatalogEncryptionSettingsEncryptionAtRestArgs) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsEncryptionAtRest] {
	return pulumix.Output[DataCatalogEncryptionSettingsEncryptionAtRest]{
		OutputState: i.ToDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(ctx).OutputState,
	}
}

func (i DataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return i.ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (i DataCatalogEncryptionSettingsEncryptionAtRestArgs) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsEncryptionAtRestOutput).ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx)
}

// DataCatalogEncryptionSettingsEncryptionAtRestPtrInput is an input type that accepts DataCatalogEncryptionSettingsEncryptionAtRestArgs, DataCatalogEncryptionSettingsEncryptionAtRestPtr and DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput values.
// You can construct a concrete instance of `DataCatalogEncryptionSettingsEncryptionAtRestPtrInput` via:
//
//	        DataCatalogEncryptionSettingsEncryptionAtRestArgs{...}
//
//	or:
//
//	        nil
type DataCatalogEncryptionSettingsEncryptionAtRestPtrInput interface {
	pulumi.Input

	ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput
	ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Context) DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput
}

type dataCatalogEncryptionSettingsEncryptionAtRestPtrType DataCatalogEncryptionSettingsEncryptionAtRestArgs

func DataCatalogEncryptionSettingsEncryptionAtRestPtr(v *DataCatalogEncryptionSettingsEncryptionAtRestArgs) DataCatalogEncryptionSettingsEncryptionAtRestPtrInput {
	return (*dataCatalogEncryptionSettingsEncryptionAtRestPtrType)(v)
}

func (*dataCatalogEncryptionSettingsEncryptionAtRestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (i *dataCatalogEncryptionSettingsEncryptionAtRestPtrType) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return i.ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (i *dataCatalogEncryptionSettingsEncryptionAtRestPtrType) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput)
}

func (i *dataCatalogEncryptionSettingsEncryptionAtRestPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsEncryptionAtRest] {
	return pulumix.Output[*DataCatalogEncryptionSettingsEncryptionAtRest]{
		OutputState: i.ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCatalogEncryptionSettingsEncryptionAtRestOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsEncryptionAtRestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsEncryptionAtRestOutput() DataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsEncryptionAtRestOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o.ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(context.Background())
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestOutput) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCatalogEncryptionSettingsEncryptionAtRest) *DataCatalogEncryptionSettingsEncryptionAtRest {
		return &v
	}).(DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput)
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestOutput) ToOutput(ctx context.Context) pulumix.Output[DataCatalogEncryptionSettingsEncryptionAtRest] {
	return pulumix.Output[DataCatalogEncryptionSettingsEncryptionAtRest]{
		OutputState: o.OutputState,
	}
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestOutput) CatalogEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsEncryptionAtRest) *string { return v.CatalogEncryptionMode }).(pulumi.StringPtrOutput)
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestOutput) SseAwsKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCatalogEncryptionSettingsEncryptionAtRest) *string { return v.SseAwsKmsKeyId }).(pulumi.StringPtrOutput)
}

type DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput struct{ *pulumi.OutputState }

func (DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogEncryptionSettingsEncryptionAtRest)(nil)).Elem()
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutput() DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) ToDataCatalogEncryptionSettingsEncryptionAtRestPtrOutputWithContext(ctx context.Context) DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput {
	return o
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCatalogEncryptionSettingsEncryptionAtRest] {
	return pulumix.Output[*DataCatalogEncryptionSettingsEncryptionAtRest]{
		OutputState: o.OutputState,
	}
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) Elem() DataCatalogEncryptionSettingsEncryptionAtRestOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsEncryptionAtRest) DataCatalogEncryptionSettingsEncryptionAtRest {
		if v != nil {
			return *v
		}
		var ret DataCatalogEncryptionSettingsEncryptionAtRest
		return ret
	}).(DataCatalogEncryptionSettingsEncryptionAtRestOutput)
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) CatalogEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsEncryptionAtRest) *string {
		if v == nil {
			return nil
		}
		return v.CatalogEncryptionMode
	}).(pulumi.StringPtrOutput)
}

func (o DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput) SseAwsKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCatalogEncryptionSettingsEncryptionAtRest) *string {
		if v == nil {
			return nil
		}
		return v.SseAwsKmsKeyId
	}).(pulumi.StringPtrOutput)
}

type DataQualityRulesetDataQualityTargetTable struct {
	DatabaseName *string `pulumi:"databaseName"`
	TableName    *string `pulumi:"tableName"`
}

// DataQualityRulesetDataQualityTargetTableInput is an input type that accepts DataQualityRulesetDataQualityTargetTableArgs and DataQualityRulesetDataQualityTargetTableOutput values.
// You can construct a concrete instance of `DataQualityRulesetDataQualityTargetTableInput` via:
//
//	DataQualityRulesetDataQualityTargetTableArgs{...}
type DataQualityRulesetDataQualityTargetTableInput interface {
	pulumi.Input

	ToDataQualityRulesetDataQualityTargetTableOutput() DataQualityRulesetDataQualityTargetTableOutput
	ToDataQualityRulesetDataQualityTargetTableOutputWithContext(context.Context) DataQualityRulesetDataQualityTargetTableOutput
}

type DataQualityRulesetDataQualityTargetTableArgs struct {
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	TableName    pulumi.StringPtrInput `pulumi:"tableName"`
}

func (DataQualityRulesetDataQualityTargetTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataQualityRulesetDataQualityTargetTable)(nil)).Elem()
}

func (i DataQualityRulesetDataQualityTargetTableArgs) ToDataQualityRulesetDataQualityTargetTableOutput() DataQualityRulesetDataQualityTargetTableOutput {
	return i.ToDataQualityRulesetDataQualityTargetTableOutputWithContext(context.Background())
}

func (i DataQualityRulesetDataQualityTargetTableArgs) ToDataQualityRulesetDataQualityTargetTableOutputWithContext(ctx context.Context) DataQualityRulesetDataQualityTargetTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataQualityRulesetDataQualityTargetTableOutput)
}

func (i DataQualityRulesetDataQualityTargetTableArgs) ToOutput(ctx context.Context) pulumix.Output[DataQualityRulesetDataQualityTargetTable] {
	return pulumix.Output[DataQualityRulesetDataQualityTargetTable]{
		OutputState: i.ToDataQualityRulesetDataQualityTargetTableOutputWithContext(ctx).OutputState,
	}
}

func (i DataQualityRulesetDataQualityTargetTableArgs) ToDataQualityRulesetDataQualityTargetTablePtrOutput() DataQualityRulesetDataQualityTargetTablePtrOutput {
	return i.ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(context.Background())
}

func (i DataQualityRulesetDataQualityTargetTableArgs) ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(ctx context.Context) DataQualityRulesetDataQualityTargetTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataQualityRulesetDataQualityTargetTableOutput).ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(ctx)
}

// DataQualityRulesetDataQualityTargetTablePtrInput is an input type that accepts DataQualityRulesetDataQualityTargetTableArgs, DataQualityRulesetDataQualityTargetTablePtr and DataQualityRulesetDataQualityTargetTablePtrOutput values.
// You can construct a concrete instance of `DataQualityRulesetDataQualityTargetTablePtrInput` via:
//
//	        DataQualityRulesetDataQualityTargetTableArgs{...}
//
//	or:
//
//	        nil
type DataQualityRulesetDataQualityTargetTablePtrInput interface {
	pulumi.Input

	ToDataQualityRulesetDataQualityTargetTablePtrOutput() DataQualityRulesetDataQualityTargetTablePtrOutput
	ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(context.Context) DataQualityRulesetDataQualityTargetTablePtrOutput
}

type dataQualityRulesetDataQualityTargetTablePtrType DataQualityRulesetDataQualityTargetTableArgs

func DataQualityRulesetDataQualityTargetTablePtr(v *DataQualityRulesetDataQualityTargetTableArgs) DataQualityRulesetDataQualityTargetTablePtrInput {
	return (*dataQualityRulesetDataQualityTargetTablePtrType)(v)
}

func (*dataQualityRulesetDataQualityTargetTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataQualityRulesetDataQualityTargetTable)(nil)).Elem()
}

func (i *dataQualityRulesetDataQualityTargetTablePtrType) ToDataQualityRulesetDataQualityTargetTablePtrOutput() DataQualityRulesetDataQualityTargetTablePtrOutput {
	return i.ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(context.Background())
}

func (i *dataQualityRulesetDataQualityTargetTablePtrType) ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(ctx context.Context) DataQualityRulesetDataQualityTargetTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataQualityRulesetDataQualityTargetTablePtrOutput)
}

func (i *dataQualityRulesetDataQualityTargetTablePtrType) ToOutput(ctx context.Context) pulumix.Output[*DataQualityRulesetDataQualityTargetTable] {
	return pulumix.Output[*DataQualityRulesetDataQualityTargetTable]{
		OutputState: i.ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(ctx).OutputState,
	}
}

type DataQualityRulesetDataQualityTargetTableOutput struct{ *pulumi.OutputState }

func (DataQualityRulesetDataQualityTargetTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataQualityRulesetDataQualityTargetTable)(nil)).Elem()
}

func (o DataQualityRulesetDataQualityTargetTableOutput) ToDataQualityRulesetDataQualityTargetTableOutput() DataQualityRulesetDataQualityTargetTableOutput {
	return o
}

func (o DataQualityRulesetDataQualityTargetTableOutput) ToDataQualityRulesetDataQualityTargetTableOutputWithContext(ctx context.Context) DataQualityRulesetDataQualityTargetTableOutput {
	return o
}

func (o DataQualityRulesetDataQualityTargetTableOutput) ToDataQualityRulesetDataQualityTargetTablePtrOutput() DataQualityRulesetDataQualityTargetTablePtrOutput {
	return o.ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(context.Background())
}

func (o DataQualityRulesetDataQualityTargetTableOutput) ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(ctx context.Context) DataQualityRulesetDataQualityTargetTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataQualityRulesetDataQualityTargetTable) *DataQualityRulesetDataQualityTargetTable {
		return &v
	}).(DataQualityRulesetDataQualityTargetTablePtrOutput)
}

func (o DataQualityRulesetDataQualityTargetTableOutput) ToOutput(ctx context.Context) pulumix.Output[DataQualityRulesetDataQualityTargetTable] {
	return pulumix.Output[DataQualityRulesetDataQualityTargetTable]{
		OutputState: o.OutputState,
	}
}

func (o DataQualityRulesetDataQualityTargetTableOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataQualityRulesetDataQualityTargetTable) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func (o DataQualityRulesetDataQualityTargetTableOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataQualityRulesetDataQualityTargetTable) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type DataQualityRulesetDataQualityTargetTablePtrOutput struct{ *pulumi.OutputState }

func (DataQualityRulesetDataQualityTargetTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataQualityRulesetDataQualityTargetTable)(nil)).Elem()
}

func (o DataQualityRulesetDataQualityTargetTablePtrOutput) ToDataQualityRulesetDataQualityTargetTablePtrOutput() DataQualityRulesetDataQualityTargetTablePtrOutput {
	return o
}

func (o DataQualityRulesetDataQualityTargetTablePtrOutput) ToDataQualityRulesetDataQualityTargetTablePtrOutputWithContext(ctx context.Context) DataQualityRulesetDataQualityTargetTablePtrOutput {
	return o
}

func (o DataQualityRulesetDataQualityTargetTablePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataQualityRulesetDataQualityTargetTable] {
	return pulumix.Output[*DataQualityRulesetDataQualityTargetTable]{
		OutputState: o.OutputState,
	}
}

func (o DataQualityRulesetDataQualityTargetTablePtrOutput) Elem() DataQualityRulesetDataQualityTargetTableOutput {
	return o.ApplyT(func(v *DataQualityRulesetDataQualityTargetTable) DataQualityRulesetDataQualityTargetTable {
		if v != nil {
			return *v
		}
		var ret DataQualityRulesetDataQualityTargetTable
		return ret
	}).(DataQualityRulesetDataQualityTargetTableOutput)
}

func (o DataQualityRulesetDataQualityTargetTablePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataQualityRulesetDataQualityTargetTable) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

func (o DataQualityRulesetDataQualityTargetTablePtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataQualityRulesetDataQualityTargetTable) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

type DatabaseDataLakePrincipal struct {
	DataLakePrincipalIdentifier *string `pulumi:"dataLakePrincipalIdentifier"`
}

// DatabaseDataLakePrincipalInput is an input type that accepts DatabaseDataLakePrincipalArgs and DatabaseDataLakePrincipalOutput values.
// You can construct a concrete instance of `DatabaseDataLakePrincipalInput` via:
//
//	DatabaseDataLakePrincipalArgs{...}
type DatabaseDataLakePrincipalInput interface {
	pulumi.Input

	ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput
	ToDatabaseDataLakePrincipalOutputWithContext(context.Context) DatabaseDataLakePrincipalOutput
}

type DatabaseDataLakePrincipalArgs struct {
	DataLakePrincipalIdentifier pulumi.StringPtrInput `pulumi:"dataLakePrincipalIdentifier"`
}

func (DatabaseDataLakePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataLakePrincipal)(nil)).Elem()
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput {
	return i.ToDatabaseDataLakePrincipalOutputWithContext(context.Background())
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalOutput)
}

func (i DatabaseDataLakePrincipalArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseDataLakePrincipal] {
	return pulumix.Output[DatabaseDataLakePrincipal]{
		OutputState: i.ToDatabaseDataLakePrincipalOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return i.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalOutput).ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx)
}

// DatabaseDataLakePrincipalPtrInput is an input type that accepts DatabaseDataLakePrincipalArgs, DatabaseDataLakePrincipalPtr and DatabaseDataLakePrincipalPtrOutput values.
// You can construct a concrete instance of `DatabaseDataLakePrincipalPtrInput` via:
//
//	        DatabaseDataLakePrincipalArgs{...}
//
//	or:
//
//	        nil
type DatabaseDataLakePrincipalPtrInput interface {
	pulumi.Input

	ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput
	ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Context) DatabaseDataLakePrincipalPtrOutput
}

type databaseDataLakePrincipalPtrType DatabaseDataLakePrincipalArgs

func DatabaseDataLakePrincipalPtr(v *DatabaseDataLakePrincipalArgs) DatabaseDataLakePrincipalPtrInput {
	return (*databaseDataLakePrincipalPtrType)(v)
}

func (*databaseDataLakePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataLakePrincipal)(nil)).Elem()
}

func (i *databaseDataLakePrincipalPtrType) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return i.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (i *databaseDataLakePrincipalPtrType) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalPtrOutput)
}

func (i *databaseDataLakePrincipalPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseDataLakePrincipal] {
	return pulumix.Output[*DatabaseDataLakePrincipal]{
		OutputState: i.ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseDataLakePrincipalOutput struct{ *pulumi.OutputState }

func (DatabaseDataLakePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataLakePrincipal)(nil)).Elem()
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput {
	return o
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalOutput {
	return o
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return o.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseDataLakePrincipal) *DatabaseDataLakePrincipal {
		return &v
	}).(DatabaseDataLakePrincipalPtrOutput)
}

func (o DatabaseDataLakePrincipalOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseDataLakePrincipal] {
	return pulumix.Output[DatabaseDataLakePrincipal]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseDataLakePrincipalOutput) DataLakePrincipalIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDataLakePrincipal) *string { return v.DataLakePrincipalIdentifier }).(pulumi.StringPtrOutput)
}

type DatabaseDataLakePrincipalPtrOutput struct{ *pulumi.OutputState }

func (DatabaseDataLakePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataLakePrincipal)(nil)).Elem()
}

func (o DatabaseDataLakePrincipalPtrOutput) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return o
}

func (o DatabaseDataLakePrincipalPtrOutput) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return o
}

func (o DatabaseDataLakePrincipalPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseDataLakePrincipal] {
	return pulumix.Output[*DatabaseDataLakePrincipal]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseDataLakePrincipalPtrOutput) Elem() DatabaseDataLakePrincipalOutput {
	return o.ApplyT(func(v *DatabaseDataLakePrincipal) DatabaseDataLakePrincipal {
		if v != nil {
			return *v
		}
		var ret DatabaseDataLakePrincipal
		return ret
	}).(DatabaseDataLakePrincipalOutput)
}

func (o DatabaseDataLakePrincipalPtrOutput) DataLakePrincipalIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataLakePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.DataLakePrincipalIdentifier
	}).(pulumi.StringPtrOutput)
}

type DatabaseFederatedDatabase struct {
	ConnectionName *string `pulumi:"connectionName"`
	Identifier     *string `pulumi:"identifier"`
}

// DatabaseFederatedDatabaseInput is an input type that accepts DatabaseFederatedDatabaseArgs and DatabaseFederatedDatabaseOutput values.
// You can construct a concrete instance of `DatabaseFederatedDatabaseInput` via:
//
//	DatabaseFederatedDatabaseArgs{...}
type DatabaseFederatedDatabaseInput interface {
	pulumi.Input

	ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput
	ToDatabaseFederatedDatabaseOutputWithContext(context.Context) DatabaseFederatedDatabaseOutput
}

type DatabaseFederatedDatabaseArgs struct {
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	Identifier     pulumi.StringPtrInput `pulumi:"identifier"`
}

func (DatabaseFederatedDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFederatedDatabase)(nil)).Elem()
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput {
	return i.ToDatabaseFederatedDatabaseOutputWithContext(context.Background())
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabaseOutputWithContext(ctx context.Context) DatabaseFederatedDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabaseOutput)
}

func (i DatabaseFederatedDatabaseArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseFederatedDatabase] {
	return pulumix.Output[DatabaseFederatedDatabase]{
		OutputState: i.ToDatabaseFederatedDatabaseOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return i.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabaseOutput).ToDatabaseFederatedDatabasePtrOutputWithContext(ctx)
}

// DatabaseFederatedDatabasePtrInput is an input type that accepts DatabaseFederatedDatabaseArgs, DatabaseFederatedDatabasePtr and DatabaseFederatedDatabasePtrOutput values.
// You can construct a concrete instance of `DatabaseFederatedDatabasePtrInput` via:
//
//	        DatabaseFederatedDatabaseArgs{...}
//
//	or:
//
//	        nil
type DatabaseFederatedDatabasePtrInput interface {
	pulumi.Input

	ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput
	ToDatabaseFederatedDatabasePtrOutputWithContext(context.Context) DatabaseFederatedDatabasePtrOutput
}

type databaseFederatedDatabasePtrType DatabaseFederatedDatabaseArgs

func DatabaseFederatedDatabasePtr(v *DatabaseFederatedDatabaseArgs) DatabaseFederatedDatabasePtrInput {
	return (*databaseFederatedDatabasePtrType)(v)
}

func (*databaseFederatedDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseFederatedDatabase)(nil)).Elem()
}

func (i *databaseFederatedDatabasePtrType) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return i.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (i *databaseFederatedDatabasePtrType) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabasePtrOutput)
}

func (i *databaseFederatedDatabasePtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseFederatedDatabase] {
	return pulumix.Output[*DatabaseFederatedDatabase]{
		OutputState: i.ToDatabaseFederatedDatabasePtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseFederatedDatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseFederatedDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFederatedDatabase)(nil)).Elem()
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput {
	return o
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabaseOutputWithContext(ctx context.Context) DatabaseFederatedDatabaseOutput {
	return o
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return o.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseFederatedDatabase) *DatabaseFederatedDatabase {
		return &v
	}).(DatabaseFederatedDatabasePtrOutput)
}

func (o DatabaseFederatedDatabaseOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseFederatedDatabase] {
	return pulumix.Output[DatabaseFederatedDatabase]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseFederatedDatabaseOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFederatedDatabase) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o DatabaseFederatedDatabaseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFederatedDatabase) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type DatabaseFederatedDatabasePtrOutput struct{ *pulumi.OutputState }

func (DatabaseFederatedDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseFederatedDatabase)(nil)).Elem()
}

func (o DatabaseFederatedDatabasePtrOutput) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return o
}

func (o DatabaseFederatedDatabasePtrOutput) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return o
}

func (o DatabaseFederatedDatabasePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseFederatedDatabase] {
	return pulumix.Output[*DatabaseFederatedDatabase]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseFederatedDatabasePtrOutput) Elem() DatabaseFederatedDatabaseOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) DatabaseFederatedDatabase {
		if v != nil {
			return *v
		}
		var ret DatabaseFederatedDatabase
		return ret
	}).(DatabaseFederatedDatabaseOutput)
}

func (o DatabaseFederatedDatabasePtrOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionName
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseFederatedDatabasePtrOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Identifier
	}).(pulumi.StringPtrOutput)
}

type DatabaseIdentifier struct {
	CatalogId    *string `pulumi:"catalogId"`
	DatabaseName *string `pulumi:"databaseName"`
	Region       *string `pulumi:"region"`
}

// DatabaseIdentifierInput is an input type that accepts DatabaseIdentifierArgs and DatabaseIdentifierOutput values.
// You can construct a concrete instance of `DatabaseIdentifierInput` via:
//
//	DatabaseIdentifierArgs{...}
type DatabaseIdentifierInput interface {
	pulumi.Input

	ToDatabaseIdentifierOutput() DatabaseIdentifierOutput
	ToDatabaseIdentifierOutputWithContext(context.Context) DatabaseIdentifierOutput
}

type DatabaseIdentifierArgs struct {
	CatalogId    pulumi.StringPtrInput `pulumi:"catalogId"`
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	Region       pulumi.StringPtrInput `pulumi:"region"`
}

func (DatabaseIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIdentifier)(nil)).Elem()
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierOutput() DatabaseIdentifierOutput {
	return i.ToDatabaseIdentifierOutputWithContext(context.Background())
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierOutputWithContext(ctx context.Context) DatabaseIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierOutput)
}

func (i DatabaseIdentifierArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseIdentifier] {
	return pulumix.Output[DatabaseIdentifier]{
		OutputState: i.ToDatabaseIdentifierOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return i.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierOutput).ToDatabaseIdentifierPtrOutputWithContext(ctx)
}

// DatabaseIdentifierPtrInput is an input type that accepts DatabaseIdentifierArgs, DatabaseIdentifierPtr and DatabaseIdentifierPtrOutput values.
// You can construct a concrete instance of `DatabaseIdentifierPtrInput` via:
//
//	        DatabaseIdentifierArgs{...}
//
//	or:
//
//	        nil
type DatabaseIdentifierPtrInput interface {
	pulumi.Input

	ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput
	ToDatabaseIdentifierPtrOutputWithContext(context.Context) DatabaseIdentifierPtrOutput
}

type databaseIdentifierPtrType DatabaseIdentifierArgs

func DatabaseIdentifierPtr(v *DatabaseIdentifierArgs) DatabaseIdentifierPtrInput {
	return (*databaseIdentifierPtrType)(v)
}

func (*databaseIdentifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIdentifier)(nil)).Elem()
}

func (i *databaseIdentifierPtrType) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return i.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (i *databaseIdentifierPtrType) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierPtrOutput)
}

func (i *databaseIdentifierPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseIdentifier] {
	return pulumix.Output[*DatabaseIdentifier]{
		OutputState: i.ToDatabaseIdentifierPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseIdentifierOutput struct{ *pulumi.OutputState }

func (DatabaseIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIdentifier)(nil)).Elem()
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierOutput() DatabaseIdentifierOutput {
	return o
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierOutputWithContext(ctx context.Context) DatabaseIdentifierOutput {
	return o
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return o.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseIdentifier) *DatabaseIdentifier {
		return &v
	}).(DatabaseIdentifierPtrOutput)
}

func (o DatabaseIdentifierOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseIdentifier] {
	return pulumix.Output[DatabaseIdentifier]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseIdentifierOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o DatabaseIdentifierOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func (o DatabaseIdentifierOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type DatabaseIdentifierPtrOutput struct{ *pulumi.OutputState }

func (DatabaseIdentifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIdentifier)(nil)).Elem()
}

func (o DatabaseIdentifierPtrOutput) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return o
}

func (o DatabaseIdentifierPtrOutput) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return o
}

func (o DatabaseIdentifierPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseIdentifier] {
	return pulumix.Output[*DatabaseIdentifier]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseIdentifierPtrOutput) Elem() DatabaseIdentifierOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) DatabaseIdentifier {
		if v != nil {
			return *v
		}
		var ret DatabaseIdentifier
		return ret
	}).(DatabaseIdentifierOutput)
}

func (o DatabaseIdentifierPtrOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.CatalogId
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIdentifierPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseIdentifierPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

type DatabaseInputType struct {
	CreateTableDefaultPermissions []DatabasePrincipalPrivileges `pulumi:"createTableDefaultPermissions"`
	Description                   *string                       `pulumi:"description"`
	FederatedDatabase             *DatabaseFederatedDatabase    `pulumi:"federatedDatabase"`
	LocationUri                   *string                       `pulumi:"locationUri"`
	Name                          *string                       `pulumi:"name"`
	Parameters                    interface{}                   `pulumi:"parameters"`
	TargetDatabase                *DatabaseIdentifier           `pulumi:"targetDatabase"`
}

// DatabaseInputTypeInput is an input type that accepts DatabaseInputTypeArgs and DatabaseInputTypeOutput values.
// You can construct a concrete instance of `DatabaseInputTypeInput` via:
//
//	DatabaseInputTypeArgs{...}
type DatabaseInputTypeInput interface {
	pulumi.Input

	ToDatabaseInputTypeOutput() DatabaseInputTypeOutput
	ToDatabaseInputTypeOutputWithContext(context.Context) DatabaseInputTypeOutput
}

type DatabaseInputTypeArgs struct {
	CreateTableDefaultPermissions DatabasePrincipalPrivilegesArrayInput `pulumi:"createTableDefaultPermissions"`
	Description                   pulumi.StringPtrInput                 `pulumi:"description"`
	FederatedDatabase             DatabaseFederatedDatabasePtrInput     `pulumi:"federatedDatabase"`
	LocationUri                   pulumi.StringPtrInput                 `pulumi:"locationUri"`
	Name                          pulumi.StringPtrInput                 `pulumi:"name"`
	Parameters                    pulumi.Input                          `pulumi:"parameters"`
	TargetDatabase                DatabaseIdentifierPtrInput            `pulumi:"targetDatabase"`
}

func (DatabaseInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInputType)(nil)).Elem()
}

func (i DatabaseInputTypeArgs) ToDatabaseInputTypeOutput() DatabaseInputTypeOutput {
	return i.ToDatabaseInputTypeOutputWithContext(context.Background())
}

func (i DatabaseInputTypeArgs) ToDatabaseInputTypeOutputWithContext(ctx context.Context) DatabaseInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInputTypeOutput)
}

func (i DatabaseInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseInputType] {
	return pulumix.Output[DatabaseInputType]{
		OutputState: i.ToDatabaseInputTypeOutputWithContext(ctx).OutputState,
	}
}

type DatabaseInputTypeOutput struct{ *pulumi.OutputState }

func (DatabaseInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInputType)(nil)).Elem()
}

func (o DatabaseInputTypeOutput) ToDatabaseInputTypeOutput() DatabaseInputTypeOutput {
	return o
}

func (o DatabaseInputTypeOutput) ToDatabaseInputTypeOutputWithContext(ctx context.Context) DatabaseInputTypeOutput {
	return o
}

func (o DatabaseInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseInputType] {
	return pulumix.Output[DatabaseInputType]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseInputTypeOutput) CreateTableDefaultPermissions() DatabasePrincipalPrivilegesArrayOutput {
	return o.ApplyT(func(v DatabaseInputType) []DatabasePrincipalPrivileges { return v.CreateTableDefaultPermissions }).(DatabasePrincipalPrivilegesArrayOutput)
}

func (o DatabaseInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatabaseInputTypeOutput) FederatedDatabase() DatabaseFederatedDatabasePtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *DatabaseFederatedDatabase { return v.FederatedDatabase }).(DatabaseFederatedDatabasePtrOutput)
}

func (o DatabaseInputTypeOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.LocationUri }).(pulumi.StringPtrOutput)
}

func (o DatabaseInputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DatabaseInputTypeOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabaseInputType) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

func (o DatabaseInputTypeOutput) TargetDatabase() DatabaseIdentifierPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *DatabaseIdentifier { return v.TargetDatabase }).(DatabaseIdentifierPtrOutput)
}

type DatabaseInputTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInputType)(nil)).Elem()
}

func (o DatabaseInputTypePtrOutput) ToDatabaseInputTypePtrOutput() DatabaseInputTypePtrOutput {
	return o
}

func (o DatabaseInputTypePtrOutput) ToDatabaseInputTypePtrOutputWithContext(ctx context.Context) DatabaseInputTypePtrOutput {
	return o
}

func (o DatabaseInputTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseInputType] {
	return pulumix.Output[*DatabaseInputType]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseInputTypePtrOutput) Elem() DatabaseInputTypeOutput {
	return o.ApplyT(func(v *DatabaseInputType) DatabaseInputType {
		if v != nil {
			return *v
		}
		var ret DatabaseInputType
		return ret
	}).(DatabaseInputTypeOutput)
}

func (o DatabaseInputTypePtrOutput) CreateTableDefaultPermissions() DatabasePrincipalPrivilegesArrayOutput {
	return o.ApplyT(func(v *DatabaseInputType) []DatabasePrincipalPrivileges {
		if v == nil {
			return nil
		}
		return v.CreateTableDefaultPermissions
	}).(DatabasePrincipalPrivilegesArrayOutput)
}

func (o DatabaseInputTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseInputTypePtrOutput) FederatedDatabase() DatabaseFederatedDatabasePtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *DatabaseFederatedDatabase {
		if v == nil {
			return nil
		}
		return v.FederatedDatabase
	}).(DatabaseFederatedDatabasePtrOutput)
}

func (o DatabaseInputTypePtrOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.LocationUri
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseInputTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o DatabaseInputTypePtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *DatabaseInputType) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

func (o DatabaseInputTypePtrOutput) TargetDatabase() DatabaseIdentifierPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *DatabaseIdentifier {
		if v == nil {
			return nil
		}
		return v.TargetDatabase
	}).(DatabaseIdentifierPtrOutput)
}

type DatabasePrincipalPrivileges struct {
	Permissions []string                   `pulumi:"permissions"`
	Principal   *DatabaseDataLakePrincipal `pulumi:"principal"`
}

// DatabasePrincipalPrivilegesInput is an input type that accepts DatabasePrincipalPrivilegesArgs and DatabasePrincipalPrivilegesOutput values.
// You can construct a concrete instance of `DatabasePrincipalPrivilegesInput` via:
//
//	DatabasePrincipalPrivilegesArgs{...}
type DatabasePrincipalPrivilegesInput interface {
	pulumi.Input

	ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput
	ToDatabasePrincipalPrivilegesOutputWithContext(context.Context) DatabasePrincipalPrivilegesOutput
}

type DatabasePrincipalPrivilegesArgs struct {
	Permissions pulumi.StringArrayInput           `pulumi:"permissions"`
	Principal   DatabaseDataLakePrincipalPtrInput `pulumi:"principal"`
}

func (DatabasePrincipalPrivilegesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrincipalPrivileges)(nil)).Elem()
}

func (i DatabasePrincipalPrivilegesArgs) ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput {
	return i.ToDatabasePrincipalPrivilegesOutputWithContext(context.Background())
}

func (i DatabasePrincipalPrivilegesArgs) ToDatabasePrincipalPrivilegesOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePrincipalPrivilegesOutput)
}

func (i DatabasePrincipalPrivilegesArgs) ToOutput(ctx context.Context) pulumix.Output[DatabasePrincipalPrivileges] {
	return pulumix.Output[DatabasePrincipalPrivileges]{
		OutputState: i.ToDatabasePrincipalPrivilegesOutputWithContext(ctx).OutputState,
	}
}

// DatabasePrincipalPrivilegesArrayInput is an input type that accepts DatabasePrincipalPrivilegesArray and DatabasePrincipalPrivilegesArrayOutput values.
// You can construct a concrete instance of `DatabasePrincipalPrivilegesArrayInput` via:
//
//	DatabasePrincipalPrivilegesArray{ DatabasePrincipalPrivilegesArgs{...} }
type DatabasePrincipalPrivilegesArrayInput interface {
	pulumi.Input

	ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput
	ToDatabasePrincipalPrivilegesArrayOutputWithContext(context.Context) DatabasePrincipalPrivilegesArrayOutput
}

type DatabasePrincipalPrivilegesArray []DatabasePrincipalPrivilegesInput

func (DatabasePrincipalPrivilegesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePrincipalPrivileges)(nil)).Elem()
}

func (i DatabasePrincipalPrivilegesArray) ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput {
	return i.ToDatabasePrincipalPrivilegesArrayOutputWithContext(context.Background())
}

func (i DatabasePrincipalPrivilegesArray) ToDatabasePrincipalPrivilegesArrayOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePrincipalPrivilegesArrayOutput)
}

func (i DatabasePrincipalPrivilegesArray) ToOutput(ctx context.Context) pulumix.Output[[]DatabasePrincipalPrivileges] {
	return pulumix.Output[[]DatabasePrincipalPrivileges]{
		OutputState: i.ToDatabasePrincipalPrivilegesArrayOutputWithContext(ctx).OutputState,
	}
}

type DatabasePrincipalPrivilegesOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalPrivilegesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrincipalPrivileges)(nil)).Elem()
}

func (o DatabasePrincipalPrivilegesOutput) ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput {
	return o
}

func (o DatabasePrincipalPrivilegesOutput) ToDatabasePrincipalPrivilegesOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesOutput {
	return o
}

func (o DatabasePrincipalPrivilegesOutput) ToOutput(ctx context.Context) pulumix.Output[DatabasePrincipalPrivileges] {
	return pulumix.Output[DatabasePrincipalPrivileges]{
		OutputState: o.OutputState,
	}
}

func (o DatabasePrincipalPrivilegesOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabasePrincipalPrivileges) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

func (o DatabasePrincipalPrivilegesOutput) Principal() DatabaseDataLakePrincipalPtrOutput {
	return o.ApplyT(func(v DatabasePrincipalPrivileges) *DatabaseDataLakePrincipal { return v.Principal }).(DatabaseDataLakePrincipalPtrOutput)
}

type DatabasePrincipalPrivilegesArrayOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalPrivilegesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePrincipalPrivileges)(nil)).Elem()
}

func (o DatabasePrincipalPrivilegesArrayOutput) ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput {
	return o
}

func (o DatabasePrincipalPrivilegesArrayOutput) ToDatabasePrincipalPrivilegesArrayOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesArrayOutput {
	return o
}

func (o DatabasePrincipalPrivilegesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatabasePrincipalPrivileges] {
	return pulumix.Output[[]DatabasePrincipalPrivileges]{
		OutputState: o.OutputState,
	}
}

func (o DatabasePrincipalPrivilegesArrayOutput) Index(i pulumi.IntInput) DatabasePrincipalPrivilegesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasePrincipalPrivileges {
		return vs[0].([]DatabasePrincipalPrivileges)[vs[1].(int)]
	}).(DatabasePrincipalPrivilegesOutput)
}

type JobCommand struct {
	Name           *string `pulumi:"name"`
	PythonVersion  *string `pulumi:"pythonVersion"`
	Runtime        *string `pulumi:"runtime"`
	ScriptLocation *string `pulumi:"scriptLocation"`
}

// JobCommandInput is an input type that accepts JobCommandArgs and JobCommandOutput values.
// You can construct a concrete instance of `JobCommandInput` via:
//
//	JobCommandArgs{...}
type JobCommandInput interface {
	pulumi.Input

	ToJobCommandOutput() JobCommandOutput
	ToJobCommandOutputWithContext(context.Context) JobCommandOutput
}

type JobCommandArgs struct {
	Name           pulumi.StringPtrInput `pulumi:"name"`
	PythonVersion  pulumi.StringPtrInput `pulumi:"pythonVersion"`
	Runtime        pulumi.StringPtrInput `pulumi:"runtime"`
	ScriptLocation pulumi.StringPtrInput `pulumi:"scriptLocation"`
}

func (JobCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (i JobCommandArgs) ToJobCommandOutput() JobCommandOutput {
	return i.ToJobCommandOutputWithContext(context.Background())
}

func (i JobCommandArgs) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCommandOutput)
}

func (i JobCommandArgs) ToOutput(ctx context.Context) pulumix.Output[JobCommand] {
	return pulumix.Output[JobCommand]{
		OutputState: i.ToJobCommandOutputWithContext(ctx).OutputState,
	}
}

type JobCommandOutput struct{ *pulumi.OutputState }

func (JobCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCommand)(nil)).Elem()
}

func (o JobCommandOutput) ToJobCommandOutput() JobCommandOutput {
	return o
}

func (o JobCommandOutput) ToJobCommandOutputWithContext(ctx context.Context) JobCommandOutput {
	return o
}

func (o JobCommandOutput) ToOutput(ctx context.Context) pulumix.Output[JobCommand] {
	return pulumix.Output[JobCommand]{
		OutputState: o.OutputState,
	}
}

func (o JobCommandOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobCommandOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.PythonVersion }).(pulumi.StringPtrOutput)
}

func (o JobCommandOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

func (o JobCommandOutput) ScriptLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCommand) *string { return v.ScriptLocation }).(pulumi.StringPtrOutput)
}

type JobCommandPtrOutput struct{ *pulumi.OutputState }

func (JobCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCommand)(nil)).Elem()
}

func (o JobCommandPtrOutput) ToJobCommandPtrOutput() JobCommandPtrOutput {
	return o
}

func (o JobCommandPtrOutput) ToJobCommandPtrOutputWithContext(ctx context.Context) JobCommandPtrOutput {
	return o
}

func (o JobCommandPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobCommand] {
	return pulumix.Output[*JobCommand]{
		OutputState: o.OutputState,
	}
}

func (o JobCommandPtrOutput) Elem() JobCommandOutput {
	return o.ApplyT(func(v *JobCommand) JobCommand {
		if v != nil {
			return *v
		}
		var ret JobCommand
		return ret
	}).(JobCommandOutput)
}

func (o JobCommandPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o JobCommandPtrOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.PythonVersion
	}).(pulumi.StringPtrOutput)
}

func (o JobCommandPtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

func (o JobCommandPtrOutput) ScriptLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCommand) *string {
		if v == nil {
			return nil
		}
		return v.ScriptLocation
	}).(pulumi.StringPtrOutput)
}

type JobConnectionsList struct {
	Connections []string `pulumi:"connections"`
}

// JobConnectionsListInput is an input type that accepts JobConnectionsListArgs and JobConnectionsListOutput values.
// You can construct a concrete instance of `JobConnectionsListInput` via:
//
//	JobConnectionsListArgs{...}
type JobConnectionsListInput interface {
	pulumi.Input

	ToJobConnectionsListOutput() JobConnectionsListOutput
	ToJobConnectionsListOutputWithContext(context.Context) JobConnectionsListOutput
}

type JobConnectionsListArgs struct {
	Connections pulumi.StringArrayInput `pulumi:"connections"`
}

func (JobConnectionsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConnectionsList)(nil)).Elem()
}

func (i JobConnectionsListArgs) ToJobConnectionsListOutput() JobConnectionsListOutput {
	return i.ToJobConnectionsListOutputWithContext(context.Background())
}

func (i JobConnectionsListArgs) ToJobConnectionsListOutputWithContext(ctx context.Context) JobConnectionsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConnectionsListOutput)
}

func (i JobConnectionsListArgs) ToOutput(ctx context.Context) pulumix.Output[JobConnectionsList] {
	return pulumix.Output[JobConnectionsList]{
		OutputState: i.ToJobConnectionsListOutputWithContext(ctx).OutputState,
	}
}

func (i JobConnectionsListArgs) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return i.ToJobConnectionsListPtrOutputWithContext(context.Background())
}

func (i JobConnectionsListArgs) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConnectionsListOutput).ToJobConnectionsListPtrOutputWithContext(ctx)
}

// JobConnectionsListPtrInput is an input type that accepts JobConnectionsListArgs, JobConnectionsListPtr and JobConnectionsListPtrOutput values.
// You can construct a concrete instance of `JobConnectionsListPtrInput` via:
//
//	        JobConnectionsListArgs{...}
//
//	or:
//
//	        nil
type JobConnectionsListPtrInput interface {
	pulumi.Input

	ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput
	ToJobConnectionsListPtrOutputWithContext(context.Context) JobConnectionsListPtrOutput
}

type jobConnectionsListPtrType JobConnectionsListArgs

func JobConnectionsListPtr(v *JobConnectionsListArgs) JobConnectionsListPtrInput {
	return (*jobConnectionsListPtrType)(v)
}

func (*jobConnectionsListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConnectionsList)(nil)).Elem()
}

func (i *jobConnectionsListPtrType) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return i.ToJobConnectionsListPtrOutputWithContext(context.Background())
}

func (i *jobConnectionsListPtrType) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConnectionsListPtrOutput)
}

func (i *jobConnectionsListPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobConnectionsList] {
	return pulumix.Output[*JobConnectionsList]{
		OutputState: i.ToJobConnectionsListPtrOutputWithContext(ctx).OutputState,
	}
}

type JobConnectionsListOutput struct{ *pulumi.OutputState }

func (JobConnectionsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConnectionsList)(nil)).Elem()
}

func (o JobConnectionsListOutput) ToJobConnectionsListOutput() JobConnectionsListOutput {
	return o
}

func (o JobConnectionsListOutput) ToJobConnectionsListOutputWithContext(ctx context.Context) JobConnectionsListOutput {
	return o
}

func (o JobConnectionsListOutput) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return o.ToJobConnectionsListPtrOutputWithContext(context.Background())
}

func (o JobConnectionsListOutput) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConnectionsList) *JobConnectionsList {
		return &v
	}).(JobConnectionsListPtrOutput)
}

func (o JobConnectionsListOutput) ToOutput(ctx context.Context) pulumix.Output[JobConnectionsList] {
	return pulumix.Output[JobConnectionsList]{
		OutputState: o.OutputState,
	}
}

func (o JobConnectionsListOutput) Connections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConnectionsList) []string { return v.Connections }).(pulumi.StringArrayOutput)
}

type JobConnectionsListPtrOutput struct{ *pulumi.OutputState }

func (JobConnectionsListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConnectionsList)(nil)).Elem()
}

func (o JobConnectionsListPtrOutput) ToJobConnectionsListPtrOutput() JobConnectionsListPtrOutput {
	return o
}

func (o JobConnectionsListPtrOutput) ToJobConnectionsListPtrOutputWithContext(ctx context.Context) JobConnectionsListPtrOutput {
	return o
}

func (o JobConnectionsListPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConnectionsList] {
	return pulumix.Output[*JobConnectionsList]{
		OutputState: o.OutputState,
	}
}

func (o JobConnectionsListPtrOutput) Elem() JobConnectionsListOutput {
	return o.ApplyT(func(v *JobConnectionsList) JobConnectionsList {
		if v != nil {
			return *v
		}
		var ret JobConnectionsList
		return ret
	}).(JobConnectionsListOutput)
}

func (o JobConnectionsListPtrOutput) Connections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConnectionsList) []string {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(pulumi.StringArrayOutput)
}

type JobExecutionProperty struct {
	MaxConcurrentRuns *float64 `pulumi:"maxConcurrentRuns"`
}

// JobExecutionPropertyInput is an input type that accepts JobExecutionPropertyArgs and JobExecutionPropertyOutput values.
// You can construct a concrete instance of `JobExecutionPropertyInput` via:
//
//	JobExecutionPropertyArgs{...}
type JobExecutionPropertyInput interface {
	pulumi.Input

	ToJobExecutionPropertyOutput() JobExecutionPropertyOutput
	ToJobExecutionPropertyOutputWithContext(context.Context) JobExecutionPropertyOutput
}

type JobExecutionPropertyArgs struct {
	MaxConcurrentRuns pulumi.Float64PtrInput `pulumi:"maxConcurrentRuns"`
}

func (JobExecutionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return i.ToJobExecutionPropertyOutputWithContext(context.Background())
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyOutput)
}

func (i JobExecutionPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[JobExecutionProperty] {
	return pulumix.Output[JobExecutionProperty]{
		OutputState: i.ToJobExecutionPropertyOutputWithContext(ctx).OutputState,
	}
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return i.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (i JobExecutionPropertyArgs) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyOutput).ToJobExecutionPropertyPtrOutputWithContext(ctx)
}

// JobExecutionPropertyPtrInput is an input type that accepts JobExecutionPropertyArgs, JobExecutionPropertyPtr and JobExecutionPropertyPtrOutput values.
// You can construct a concrete instance of `JobExecutionPropertyPtrInput` via:
//
//	        JobExecutionPropertyArgs{...}
//
//	or:
//
//	        nil
type JobExecutionPropertyPtrInput interface {
	pulumi.Input

	ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput
	ToJobExecutionPropertyPtrOutputWithContext(context.Context) JobExecutionPropertyPtrOutput
}

type jobExecutionPropertyPtrType JobExecutionPropertyArgs

func JobExecutionPropertyPtr(v *JobExecutionPropertyArgs) JobExecutionPropertyPtrInput {
	return (*jobExecutionPropertyPtrType)(v)
}

func (*jobExecutionPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionProperty)(nil)).Elem()
}

func (i *jobExecutionPropertyPtrType) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return i.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (i *jobExecutionPropertyPtrType) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionPropertyPtrOutput)
}

func (i *jobExecutionPropertyPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobExecutionProperty] {
	return pulumix.Output[*JobExecutionProperty]{
		OutputState: i.ToJobExecutionPropertyPtrOutputWithContext(ctx).OutputState,
	}
}

type JobExecutionPropertyOutput struct{ *pulumi.OutputState }

func (JobExecutionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionProperty)(nil)).Elem()
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutput() JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyOutputWithContext(ctx context.Context) JobExecutionPropertyOutput {
	return o
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return o.ToJobExecutionPropertyPtrOutputWithContext(context.Background())
}

func (o JobExecutionPropertyOutput) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobExecutionProperty) *JobExecutionProperty {
		return &v
	}).(JobExecutionPropertyPtrOutput)
}

func (o JobExecutionPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[JobExecutionProperty] {
	return pulumix.Output[JobExecutionProperty]{
		OutputState: o.OutputState,
	}
}

func (o JobExecutionPropertyOutput) MaxConcurrentRuns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v JobExecutionProperty) *float64 { return v.MaxConcurrentRuns }).(pulumi.Float64PtrOutput)
}

type JobExecutionPropertyPtrOutput struct{ *pulumi.OutputState }

func (JobExecutionPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionProperty)(nil)).Elem()
}

func (o JobExecutionPropertyPtrOutput) ToJobExecutionPropertyPtrOutput() JobExecutionPropertyPtrOutput {
	return o
}

func (o JobExecutionPropertyPtrOutput) ToJobExecutionPropertyPtrOutputWithContext(ctx context.Context) JobExecutionPropertyPtrOutput {
	return o
}

func (o JobExecutionPropertyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobExecutionProperty] {
	return pulumix.Output[*JobExecutionProperty]{
		OutputState: o.OutputState,
	}
}

func (o JobExecutionPropertyPtrOutput) Elem() JobExecutionPropertyOutput {
	return o.ApplyT(func(v *JobExecutionProperty) JobExecutionProperty {
		if v != nil {
			return *v
		}
		var ret JobExecutionProperty
		return ret
	}).(JobExecutionPropertyOutput)
}

func (o JobExecutionPropertyPtrOutput) MaxConcurrentRuns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *JobExecutionProperty) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRuns
	}).(pulumi.Float64PtrOutput)
}

type JobNotificationProperty struct {
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

// JobNotificationPropertyInput is an input type that accepts JobNotificationPropertyArgs and JobNotificationPropertyOutput values.
// You can construct a concrete instance of `JobNotificationPropertyInput` via:
//
//	JobNotificationPropertyArgs{...}
type JobNotificationPropertyInput interface {
	pulumi.Input

	ToJobNotificationPropertyOutput() JobNotificationPropertyOutput
	ToJobNotificationPropertyOutputWithContext(context.Context) JobNotificationPropertyOutput
}

type JobNotificationPropertyArgs struct {
	NotifyDelayAfter pulumi.IntPtrInput `pulumi:"notifyDelayAfter"`
}

func (JobNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return i.ToJobNotificationPropertyOutputWithContext(context.Background())
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyOutput)
}

func (i JobNotificationPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[JobNotificationProperty] {
	return pulumix.Output[JobNotificationProperty]{
		OutputState: i.ToJobNotificationPropertyOutputWithContext(ctx).OutputState,
	}
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return i.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i JobNotificationPropertyArgs) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyOutput).ToJobNotificationPropertyPtrOutputWithContext(ctx)
}

// JobNotificationPropertyPtrInput is an input type that accepts JobNotificationPropertyArgs, JobNotificationPropertyPtr and JobNotificationPropertyPtrOutput values.
// You can construct a concrete instance of `JobNotificationPropertyPtrInput` via:
//
//	        JobNotificationPropertyArgs{...}
//
//	or:
//
//	        nil
type JobNotificationPropertyPtrInput interface {
	pulumi.Input

	ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput
	ToJobNotificationPropertyPtrOutputWithContext(context.Context) JobNotificationPropertyPtrOutput
}

type jobNotificationPropertyPtrType JobNotificationPropertyArgs

func JobNotificationPropertyPtr(v *JobNotificationPropertyArgs) JobNotificationPropertyPtrInput {
	return (*jobNotificationPropertyPtrType)(v)
}

func (*jobNotificationPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobNotificationProperty)(nil)).Elem()
}

func (i *jobNotificationPropertyPtrType) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return i.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i *jobNotificationPropertyPtrType) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobNotificationPropertyPtrOutput)
}

func (i *jobNotificationPropertyPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobNotificationProperty] {
	return pulumix.Output[*JobNotificationProperty]{
		OutputState: i.ToJobNotificationPropertyPtrOutputWithContext(ctx).OutputState,
	}
}

type JobNotificationPropertyOutput struct{ *pulumi.OutputState }

func (JobNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobNotificationProperty)(nil)).Elem()
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutput() JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyOutputWithContext(ctx context.Context) JobNotificationPropertyOutput {
	return o
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return o.ToJobNotificationPropertyPtrOutputWithContext(context.Background())
}

func (o JobNotificationPropertyOutput) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobNotificationProperty) *JobNotificationProperty {
		return &v
	}).(JobNotificationPropertyPtrOutput)
}

func (o JobNotificationPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[JobNotificationProperty] {
	return pulumix.Output[JobNotificationProperty]{
		OutputState: o.OutputState,
	}
}

func (o JobNotificationPropertyOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobNotificationProperty) *int { return v.NotifyDelayAfter }).(pulumi.IntPtrOutput)
}

type JobNotificationPropertyPtrOutput struct{ *pulumi.OutputState }

func (JobNotificationPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobNotificationProperty)(nil)).Elem()
}

func (o JobNotificationPropertyPtrOutput) ToJobNotificationPropertyPtrOutput() JobNotificationPropertyPtrOutput {
	return o
}

func (o JobNotificationPropertyPtrOutput) ToJobNotificationPropertyPtrOutputWithContext(ctx context.Context) JobNotificationPropertyPtrOutput {
	return o
}

func (o JobNotificationPropertyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobNotificationProperty] {
	return pulumix.Output[*JobNotificationProperty]{
		OutputState: o.OutputState,
	}
}

func (o JobNotificationPropertyPtrOutput) Elem() JobNotificationPropertyOutput {
	return o.ApplyT(func(v *JobNotificationProperty) JobNotificationProperty {
		if v != nil {
			return *v
		}
		var ret JobNotificationProperty
		return ret
	}).(JobNotificationPropertyOutput)
}

func (o JobNotificationPropertyPtrOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobNotificationProperty) *int {
		if v == nil {
			return nil
		}
		return v.NotifyDelayAfter
	}).(pulumi.IntPtrOutput)
}

type MlTransformFindMatchesParameters struct {
	AccuracyCostTradeoff    *float64 `pulumi:"accuracyCostTradeoff"`
	EnforceProvidedLabels   *bool    `pulumi:"enforceProvidedLabels"`
	PrecisionRecallTradeoff *float64 `pulumi:"precisionRecallTradeoff"`
	PrimaryKeyColumnName    string   `pulumi:"primaryKeyColumnName"`
}

// MlTransformFindMatchesParametersInput is an input type that accepts MlTransformFindMatchesParametersArgs and MlTransformFindMatchesParametersOutput values.
// You can construct a concrete instance of `MlTransformFindMatchesParametersInput` via:
//
//	MlTransformFindMatchesParametersArgs{...}
type MlTransformFindMatchesParametersInput interface {
	pulumi.Input

	ToMlTransformFindMatchesParametersOutput() MlTransformFindMatchesParametersOutput
	ToMlTransformFindMatchesParametersOutputWithContext(context.Context) MlTransformFindMatchesParametersOutput
}

type MlTransformFindMatchesParametersArgs struct {
	AccuracyCostTradeoff    pulumi.Float64PtrInput `pulumi:"accuracyCostTradeoff"`
	EnforceProvidedLabels   pulumi.BoolPtrInput    `pulumi:"enforceProvidedLabels"`
	PrecisionRecallTradeoff pulumi.Float64PtrInput `pulumi:"precisionRecallTradeoff"`
	PrimaryKeyColumnName    pulumi.StringInput     `pulumi:"primaryKeyColumnName"`
}

func (MlTransformFindMatchesParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformFindMatchesParameters)(nil)).Elem()
}

func (i MlTransformFindMatchesParametersArgs) ToMlTransformFindMatchesParametersOutput() MlTransformFindMatchesParametersOutput {
	return i.ToMlTransformFindMatchesParametersOutputWithContext(context.Background())
}

func (i MlTransformFindMatchesParametersArgs) ToMlTransformFindMatchesParametersOutputWithContext(ctx context.Context) MlTransformFindMatchesParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformFindMatchesParametersOutput)
}

func (i MlTransformFindMatchesParametersArgs) ToOutput(ctx context.Context) pulumix.Output[MlTransformFindMatchesParameters] {
	return pulumix.Output[MlTransformFindMatchesParameters]{
		OutputState: i.ToMlTransformFindMatchesParametersOutputWithContext(ctx).OutputState,
	}
}

func (i MlTransformFindMatchesParametersArgs) ToMlTransformFindMatchesParametersPtrOutput() MlTransformFindMatchesParametersPtrOutput {
	return i.ToMlTransformFindMatchesParametersPtrOutputWithContext(context.Background())
}

func (i MlTransformFindMatchesParametersArgs) ToMlTransformFindMatchesParametersPtrOutputWithContext(ctx context.Context) MlTransformFindMatchesParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformFindMatchesParametersOutput).ToMlTransformFindMatchesParametersPtrOutputWithContext(ctx)
}

// MlTransformFindMatchesParametersPtrInput is an input type that accepts MlTransformFindMatchesParametersArgs, MlTransformFindMatchesParametersPtr and MlTransformFindMatchesParametersPtrOutput values.
// You can construct a concrete instance of `MlTransformFindMatchesParametersPtrInput` via:
//
//	        MlTransformFindMatchesParametersArgs{...}
//
//	or:
//
//	        nil
type MlTransformFindMatchesParametersPtrInput interface {
	pulumi.Input

	ToMlTransformFindMatchesParametersPtrOutput() MlTransformFindMatchesParametersPtrOutput
	ToMlTransformFindMatchesParametersPtrOutputWithContext(context.Context) MlTransformFindMatchesParametersPtrOutput
}

type mlTransformFindMatchesParametersPtrType MlTransformFindMatchesParametersArgs

func MlTransformFindMatchesParametersPtr(v *MlTransformFindMatchesParametersArgs) MlTransformFindMatchesParametersPtrInput {
	return (*mlTransformFindMatchesParametersPtrType)(v)
}

func (*mlTransformFindMatchesParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransformFindMatchesParameters)(nil)).Elem()
}

func (i *mlTransformFindMatchesParametersPtrType) ToMlTransformFindMatchesParametersPtrOutput() MlTransformFindMatchesParametersPtrOutput {
	return i.ToMlTransformFindMatchesParametersPtrOutputWithContext(context.Background())
}

func (i *mlTransformFindMatchesParametersPtrType) ToMlTransformFindMatchesParametersPtrOutputWithContext(ctx context.Context) MlTransformFindMatchesParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformFindMatchesParametersPtrOutput)
}

func (i *mlTransformFindMatchesParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*MlTransformFindMatchesParameters] {
	return pulumix.Output[*MlTransformFindMatchesParameters]{
		OutputState: i.ToMlTransformFindMatchesParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type MlTransformFindMatchesParametersOutput struct{ *pulumi.OutputState }

func (MlTransformFindMatchesParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformFindMatchesParameters)(nil)).Elem()
}

func (o MlTransformFindMatchesParametersOutput) ToMlTransformFindMatchesParametersOutput() MlTransformFindMatchesParametersOutput {
	return o
}

func (o MlTransformFindMatchesParametersOutput) ToMlTransformFindMatchesParametersOutputWithContext(ctx context.Context) MlTransformFindMatchesParametersOutput {
	return o
}

func (o MlTransformFindMatchesParametersOutput) ToMlTransformFindMatchesParametersPtrOutput() MlTransformFindMatchesParametersPtrOutput {
	return o.ToMlTransformFindMatchesParametersPtrOutputWithContext(context.Background())
}

func (o MlTransformFindMatchesParametersOutput) ToMlTransformFindMatchesParametersPtrOutputWithContext(ctx context.Context) MlTransformFindMatchesParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MlTransformFindMatchesParameters) *MlTransformFindMatchesParameters {
		return &v
	}).(MlTransformFindMatchesParametersPtrOutput)
}

func (o MlTransformFindMatchesParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MlTransformFindMatchesParameters] {
	return pulumix.Output[MlTransformFindMatchesParameters]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformFindMatchesParametersOutput) AccuracyCostTradeoff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MlTransformFindMatchesParameters) *float64 { return v.AccuracyCostTradeoff }).(pulumi.Float64PtrOutput)
}

func (o MlTransformFindMatchesParametersOutput) EnforceProvidedLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MlTransformFindMatchesParameters) *bool { return v.EnforceProvidedLabels }).(pulumi.BoolPtrOutput)
}

func (o MlTransformFindMatchesParametersOutput) PrecisionRecallTradeoff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MlTransformFindMatchesParameters) *float64 { return v.PrecisionRecallTradeoff }).(pulumi.Float64PtrOutput)
}

func (o MlTransformFindMatchesParametersOutput) PrimaryKeyColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v MlTransformFindMatchesParameters) string { return v.PrimaryKeyColumnName }).(pulumi.StringOutput)
}

type MlTransformFindMatchesParametersPtrOutput struct{ *pulumi.OutputState }

func (MlTransformFindMatchesParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransformFindMatchesParameters)(nil)).Elem()
}

func (o MlTransformFindMatchesParametersPtrOutput) ToMlTransformFindMatchesParametersPtrOutput() MlTransformFindMatchesParametersPtrOutput {
	return o
}

func (o MlTransformFindMatchesParametersPtrOutput) ToMlTransformFindMatchesParametersPtrOutputWithContext(ctx context.Context) MlTransformFindMatchesParametersPtrOutput {
	return o
}

func (o MlTransformFindMatchesParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MlTransformFindMatchesParameters] {
	return pulumix.Output[*MlTransformFindMatchesParameters]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformFindMatchesParametersPtrOutput) Elem() MlTransformFindMatchesParametersOutput {
	return o.ApplyT(func(v *MlTransformFindMatchesParameters) MlTransformFindMatchesParameters {
		if v != nil {
			return *v
		}
		var ret MlTransformFindMatchesParameters
		return ret
	}).(MlTransformFindMatchesParametersOutput)
}

func (o MlTransformFindMatchesParametersPtrOutput) AccuracyCostTradeoff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MlTransformFindMatchesParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.AccuracyCostTradeoff
	}).(pulumi.Float64PtrOutput)
}

func (o MlTransformFindMatchesParametersPtrOutput) EnforceProvidedLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MlTransformFindMatchesParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnforceProvidedLabels
	}).(pulumi.BoolPtrOutput)
}

func (o MlTransformFindMatchesParametersPtrOutput) PrecisionRecallTradeoff() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MlTransformFindMatchesParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.PrecisionRecallTradeoff
	}).(pulumi.Float64PtrOutput)
}

func (o MlTransformFindMatchesParametersPtrOutput) PrimaryKeyColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransformFindMatchesParameters) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryKeyColumnName
	}).(pulumi.StringPtrOutput)
}

type MlTransformGlueTables struct {
	CatalogId      *string `pulumi:"catalogId"`
	ConnectionName *string `pulumi:"connectionName"`
	DatabaseName   string  `pulumi:"databaseName"`
	TableName      string  `pulumi:"tableName"`
}

// MlTransformGlueTablesInput is an input type that accepts MlTransformGlueTablesArgs and MlTransformGlueTablesOutput values.
// You can construct a concrete instance of `MlTransformGlueTablesInput` via:
//
//	MlTransformGlueTablesArgs{...}
type MlTransformGlueTablesInput interface {
	pulumi.Input

	ToMlTransformGlueTablesOutput() MlTransformGlueTablesOutput
	ToMlTransformGlueTablesOutputWithContext(context.Context) MlTransformGlueTablesOutput
}

type MlTransformGlueTablesArgs struct {
	CatalogId      pulumi.StringPtrInput `pulumi:"catalogId"`
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	DatabaseName   pulumi.StringInput    `pulumi:"databaseName"`
	TableName      pulumi.StringInput    `pulumi:"tableName"`
}

func (MlTransformGlueTablesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformGlueTables)(nil)).Elem()
}

func (i MlTransformGlueTablesArgs) ToMlTransformGlueTablesOutput() MlTransformGlueTablesOutput {
	return i.ToMlTransformGlueTablesOutputWithContext(context.Background())
}

func (i MlTransformGlueTablesArgs) ToMlTransformGlueTablesOutputWithContext(ctx context.Context) MlTransformGlueTablesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformGlueTablesOutput)
}

func (i MlTransformGlueTablesArgs) ToOutput(ctx context.Context) pulumix.Output[MlTransformGlueTables] {
	return pulumix.Output[MlTransformGlueTables]{
		OutputState: i.ToMlTransformGlueTablesOutputWithContext(ctx).OutputState,
	}
}

// MlTransformGlueTablesArrayInput is an input type that accepts MlTransformGlueTablesArray and MlTransformGlueTablesArrayOutput values.
// You can construct a concrete instance of `MlTransformGlueTablesArrayInput` via:
//
//	MlTransformGlueTablesArray{ MlTransformGlueTablesArgs{...} }
type MlTransformGlueTablesArrayInput interface {
	pulumi.Input

	ToMlTransformGlueTablesArrayOutput() MlTransformGlueTablesArrayOutput
	ToMlTransformGlueTablesArrayOutputWithContext(context.Context) MlTransformGlueTablesArrayOutput
}

type MlTransformGlueTablesArray []MlTransformGlueTablesInput

func (MlTransformGlueTablesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MlTransformGlueTables)(nil)).Elem()
}

func (i MlTransformGlueTablesArray) ToMlTransformGlueTablesArrayOutput() MlTransformGlueTablesArrayOutput {
	return i.ToMlTransformGlueTablesArrayOutputWithContext(context.Background())
}

func (i MlTransformGlueTablesArray) ToMlTransformGlueTablesArrayOutputWithContext(ctx context.Context) MlTransformGlueTablesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformGlueTablesArrayOutput)
}

func (i MlTransformGlueTablesArray) ToOutput(ctx context.Context) pulumix.Output[[]MlTransformGlueTables] {
	return pulumix.Output[[]MlTransformGlueTables]{
		OutputState: i.ToMlTransformGlueTablesArrayOutputWithContext(ctx).OutputState,
	}
}

type MlTransformGlueTablesOutput struct{ *pulumi.OutputState }

func (MlTransformGlueTablesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformGlueTables)(nil)).Elem()
}

func (o MlTransformGlueTablesOutput) ToMlTransformGlueTablesOutput() MlTransformGlueTablesOutput {
	return o
}

func (o MlTransformGlueTablesOutput) ToMlTransformGlueTablesOutputWithContext(ctx context.Context) MlTransformGlueTablesOutput {
	return o
}

func (o MlTransformGlueTablesOutput) ToOutput(ctx context.Context) pulumix.Output[MlTransformGlueTables] {
	return pulumix.Output[MlTransformGlueTables]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformGlueTablesOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MlTransformGlueTables) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o MlTransformGlueTablesOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MlTransformGlueTables) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

func (o MlTransformGlueTablesOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MlTransformGlueTables) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o MlTransformGlueTablesOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MlTransformGlueTables) string { return v.TableName }).(pulumi.StringOutput)
}

type MlTransformGlueTablesArrayOutput struct{ *pulumi.OutputState }

func (MlTransformGlueTablesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MlTransformGlueTables)(nil)).Elem()
}

func (o MlTransformGlueTablesArrayOutput) ToMlTransformGlueTablesArrayOutput() MlTransformGlueTablesArrayOutput {
	return o
}

func (o MlTransformGlueTablesArrayOutput) ToMlTransformGlueTablesArrayOutputWithContext(ctx context.Context) MlTransformGlueTablesArrayOutput {
	return o
}

func (o MlTransformGlueTablesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MlTransformGlueTables] {
	return pulumix.Output[[]MlTransformGlueTables]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformGlueTablesArrayOutput) Index(i pulumi.IntInput) MlTransformGlueTablesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MlTransformGlueTables {
		return vs[0].([]MlTransformGlueTables)[vs[1].(int)]
	}).(MlTransformGlueTablesOutput)
}

type MlTransformInputRecordTables struct {
	GlueTables []MlTransformGlueTables `pulumi:"glueTables"`
}

// MlTransformInputRecordTablesInput is an input type that accepts MlTransformInputRecordTablesArgs and MlTransformInputRecordTablesOutput values.
// You can construct a concrete instance of `MlTransformInputRecordTablesInput` via:
//
//	MlTransformInputRecordTablesArgs{...}
type MlTransformInputRecordTablesInput interface {
	pulumi.Input

	ToMlTransformInputRecordTablesOutput() MlTransformInputRecordTablesOutput
	ToMlTransformInputRecordTablesOutputWithContext(context.Context) MlTransformInputRecordTablesOutput
}

type MlTransformInputRecordTablesArgs struct {
	GlueTables MlTransformGlueTablesArrayInput `pulumi:"glueTables"`
}

func (MlTransformInputRecordTablesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformInputRecordTables)(nil)).Elem()
}

func (i MlTransformInputRecordTablesArgs) ToMlTransformInputRecordTablesOutput() MlTransformInputRecordTablesOutput {
	return i.ToMlTransformInputRecordTablesOutputWithContext(context.Background())
}

func (i MlTransformInputRecordTablesArgs) ToMlTransformInputRecordTablesOutputWithContext(ctx context.Context) MlTransformInputRecordTablesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformInputRecordTablesOutput)
}

func (i MlTransformInputRecordTablesArgs) ToOutput(ctx context.Context) pulumix.Output[MlTransformInputRecordTables] {
	return pulumix.Output[MlTransformInputRecordTables]{
		OutputState: i.ToMlTransformInputRecordTablesOutputWithContext(ctx).OutputState,
	}
}

type MlTransformInputRecordTablesOutput struct{ *pulumi.OutputState }

func (MlTransformInputRecordTablesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformInputRecordTables)(nil)).Elem()
}

func (o MlTransformInputRecordTablesOutput) ToMlTransformInputRecordTablesOutput() MlTransformInputRecordTablesOutput {
	return o
}

func (o MlTransformInputRecordTablesOutput) ToMlTransformInputRecordTablesOutputWithContext(ctx context.Context) MlTransformInputRecordTablesOutput {
	return o
}

func (o MlTransformInputRecordTablesOutput) ToOutput(ctx context.Context) pulumix.Output[MlTransformInputRecordTables] {
	return pulumix.Output[MlTransformInputRecordTables]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformInputRecordTablesOutput) GlueTables() MlTransformGlueTablesArrayOutput {
	return o.ApplyT(func(v MlTransformInputRecordTables) []MlTransformGlueTables { return v.GlueTables }).(MlTransformGlueTablesArrayOutput)
}

type MlTransformMlUserDataEncryption struct {
	KmsKeyId                 *string `pulumi:"kmsKeyId"`
	MlUserDataEncryptionMode string  `pulumi:"mlUserDataEncryptionMode"`
}

// MlTransformMlUserDataEncryptionInput is an input type that accepts MlTransformMlUserDataEncryptionArgs and MlTransformMlUserDataEncryptionOutput values.
// You can construct a concrete instance of `MlTransformMlUserDataEncryptionInput` via:
//
//	MlTransformMlUserDataEncryptionArgs{...}
type MlTransformMlUserDataEncryptionInput interface {
	pulumi.Input

	ToMlTransformMlUserDataEncryptionOutput() MlTransformMlUserDataEncryptionOutput
	ToMlTransformMlUserDataEncryptionOutputWithContext(context.Context) MlTransformMlUserDataEncryptionOutput
}

type MlTransformMlUserDataEncryptionArgs struct {
	KmsKeyId                 pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	MlUserDataEncryptionMode pulumi.StringInput    `pulumi:"mlUserDataEncryptionMode"`
}

func (MlTransformMlUserDataEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformMlUserDataEncryption)(nil)).Elem()
}

func (i MlTransformMlUserDataEncryptionArgs) ToMlTransformMlUserDataEncryptionOutput() MlTransformMlUserDataEncryptionOutput {
	return i.ToMlTransformMlUserDataEncryptionOutputWithContext(context.Background())
}

func (i MlTransformMlUserDataEncryptionArgs) ToMlTransformMlUserDataEncryptionOutputWithContext(ctx context.Context) MlTransformMlUserDataEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformMlUserDataEncryptionOutput)
}

func (i MlTransformMlUserDataEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[MlTransformMlUserDataEncryption] {
	return pulumix.Output[MlTransformMlUserDataEncryption]{
		OutputState: i.ToMlTransformMlUserDataEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i MlTransformMlUserDataEncryptionArgs) ToMlTransformMlUserDataEncryptionPtrOutput() MlTransformMlUserDataEncryptionPtrOutput {
	return i.ToMlTransformMlUserDataEncryptionPtrOutputWithContext(context.Background())
}

func (i MlTransformMlUserDataEncryptionArgs) ToMlTransformMlUserDataEncryptionPtrOutputWithContext(ctx context.Context) MlTransformMlUserDataEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformMlUserDataEncryptionOutput).ToMlTransformMlUserDataEncryptionPtrOutputWithContext(ctx)
}

// MlTransformMlUserDataEncryptionPtrInput is an input type that accepts MlTransformMlUserDataEncryptionArgs, MlTransformMlUserDataEncryptionPtr and MlTransformMlUserDataEncryptionPtrOutput values.
// You can construct a concrete instance of `MlTransformMlUserDataEncryptionPtrInput` via:
//
//	        MlTransformMlUserDataEncryptionArgs{...}
//
//	or:
//
//	        nil
type MlTransformMlUserDataEncryptionPtrInput interface {
	pulumi.Input

	ToMlTransformMlUserDataEncryptionPtrOutput() MlTransformMlUserDataEncryptionPtrOutput
	ToMlTransformMlUserDataEncryptionPtrOutputWithContext(context.Context) MlTransformMlUserDataEncryptionPtrOutput
}

type mlTransformMlUserDataEncryptionPtrType MlTransformMlUserDataEncryptionArgs

func MlTransformMlUserDataEncryptionPtr(v *MlTransformMlUserDataEncryptionArgs) MlTransformMlUserDataEncryptionPtrInput {
	return (*mlTransformMlUserDataEncryptionPtrType)(v)
}

func (*mlTransformMlUserDataEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransformMlUserDataEncryption)(nil)).Elem()
}

func (i *mlTransformMlUserDataEncryptionPtrType) ToMlTransformMlUserDataEncryptionPtrOutput() MlTransformMlUserDataEncryptionPtrOutput {
	return i.ToMlTransformMlUserDataEncryptionPtrOutputWithContext(context.Background())
}

func (i *mlTransformMlUserDataEncryptionPtrType) ToMlTransformMlUserDataEncryptionPtrOutputWithContext(ctx context.Context) MlTransformMlUserDataEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformMlUserDataEncryptionPtrOutput)
}

func (i *mlTransformMlUserDataEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*MlTransformMlUserDataEncryption] {
	return pulumix.Output[*MlTransformMlUserDataEncryption]{
		OutputState: i.ToMlTransformMlUserDataEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type MlTransformMlUserDataEncryptionOutput struct{ *pulumi.OutputState }

func (MlTransformMlUserDataEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformMlUserDataEncryption)(nil)).Elem()
}

func (o MlTransformMlUserDataEncryptionOutput) ToMlTransformMlUserDataEncryptionOutput() MlTransformMlUserDataEncryptionOutput {
	return o
}

func (o MlTransformMlUserDataEncryptionOutput) ToMlTransformMlUserDataEncryptionOutputWithContext(ctx context.Context) MlTransformMlUserDataEncryptionOutput {
	return o
}

func (o MlTransformMlUserDataEncryptionOutput) ToMlTransformMlUserDataEncryptionPtrOutput() MlTransformMlUserDataEncryptionPtrOutput {
	return o.ToMlTransformMlUserDataEncryptionPtrOutputWithContext(context.Background())
}

func (o MlTransformMlUserDataEncryptionOutput) ToMlTransformMlUserDataEncryptionPtrOutputWithContext(ctx context.Context) MlTransformMlUserDataEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MlTransformMlUserDataEncryption) *MlTransformMlUserDataEncryption {
		return &v
	}).(MlTransformMlUserDataEncryptionPtrOutput)
}

func (o MlTransformMlUserDataEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[MlTransformMlUserDataEncryption] {
	return pulumix.Output[MlTransformMlUserDataEncryption]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformMlUserDataEncryptionOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MlTransformMlUserDataEncryption) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o MlTransformMlUserDataEncryptionOutput) MlUserDataEncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v MlTransformMlUserDataEncryption) string { return v.MlUserDataEncryptionMode }).(pulumi.StringOutput)
}

type MlTransformMlUserDataEncryptionPtrOutput struct{ *pulumi.OutputState }

func (MlTransformMlUserDataEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransformMlUserDataEncryption)(nil)).Elem()
}

func (o MlTransformMlUserDataEncryptionPtrOutput) ToMlTransformMlUserDataEncryptionPtrOutput() MlTransformMlUserDataEncryptionPtrOutput {
	return o
}

func (o MlTransformMlUserDataEncryptionPtrOutput) ToMlTransformMlUserDataEncryptionPtrOutputWithContext(ctx context.Context) MlTransformMlUserDataEncryptionPtrOutput {
	return o
}

func (o MlTransformMlUserDataEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MlTransformMlUserDataEncryption] {
	return pulumix.Output[*MlTransformMlUserDataEncryption]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformMlUserDataEncryptionPtrOutput) Elem() MlTransformMlUserDataEncryptionOutput {
	return o.ApplyT(func(v *MlTransformMlUserDataEncryption) MlTransformMlUserDataEncryption {
		if v != nil {
			return *v
		}
		var ret MlTransformMlUserDataEncryption
		return ret
	}).(MlTransformMlUserDataEncryptionOutput)
}

func (o MlTransformMlUserDataEncryptionPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransformMlUserDataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o MlTransformMlUserDataEncryptionPtrOutput) MlUserDataEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransformMlUserDataEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.MlUserDataEncryptionMode
	}).(pulumi.StringPtrOutput)
}

type MlTransformTransformEncryption struct {
	MlUserDataEncryption             *MlTransformMlUserDataEncryption `pulumi:"mlUserDataEncryption"`
	TaskRunSecurityConfigurationName *string                          `pulumi:"taskRunSecurityConfigurationName"`
}

// MlTransformTransformEncryptionInput is an input type that accepts MlTransformTransformEncryptionArgs and MlTransformTransformEncryptionOutput values.
// You can construct a concrete instance of `MlTransformTransformEncryptionInput` via:
//
//	MlTransformTransformEncryptionArgs{...}
type MlTransformTransformEncryptionInput interface {
	pulumi.Input

	ToMlTransformTransformEncryptionOutput() MlTransformTransformEncryptionOutput
	ToMlTransformTransformEncryptionOutputWithContext(context.Context) MlTransformTransformEncryptionOutput
}

type MlTransformTransformEncryptionArgs struct {
	MlUserDataEncryption             MlTransformMlUserDataEncryptionPtrInput `pulumi:"mlUserDataEncryption"`
	TaskRunSecurityConfigurationName pulumi.StringPtrInput                   `pulumi:"taskRunSecurityConfigurationName"`
}

func (MlTransformTransformEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformTransformEncryption)(nil)).Elem()
}

func (i MlTransformTransformEncryptionArgs) ToMlTransformTransformEncryptionOutput() MlTransformTransformEncryptionOutput {
	return i.ToMlTransformTransformEncryptionOutputWithContext(context.Background())
}

func (i MlTransformTransformEncryptionArgs) ToMlTransformTransformEncryptionOutputWithContext(ctx context.Context) MlTransformTransformEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformTransformEncryptionOutput)
}

func (i MlTransformTransformEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[MlTransformTransformEncryption] {
	return pulumix.Output[MlTransformTransformEncryption]{
		OutputState: i.ToMlTransformTransformEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i MlTransformTransformEncryptionArgs) ToMlTransformTransformEncryptionPtrOutput() MlTransformTransformEncryptionPtrOutput {
	return i.ToMlTransformTransformEncryptionPtrOutputWithContext(context.Background())
}

func (i MlTransformTransformEncryptionArgs) ToMlTransformTransformEncryptionPtrOutputWithContext(ctx context.Context) MlTransformTransformEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformTransformEncryptionOutput).ToMlTransformTransformEncryptionPtrOutputWithContext(ctx)
}

// MlTransformTransformEncryptionPtrInput is an input type that accepts MlTransformTransformEncryptionArgs, MlTransformTransformEncryptionPtr and MlTransformTransformEncryptionPtrOutput values.
// You can construct a concrete instance of `MlTransformTransformEncryptionPtrInput` via:
//
//	        MlTransformTransformEncryptionArgs{...}
//
//	or:
//
//	        nil
type MlTransformTransformEncryptionPtrInput interface {
	pulumi.Input

	ToMlTransformTransformEncryptionPtrOutput() MlTransformTransformEncryptionPtrOutput
	ToMlTransformTransformEncryptionPtrOutputWithContext(context.Context) MlTransformTransformEncryptionPtrOutput
}

type mlTransformTransformEncryptionPtrType MlTransformTransformEncryptionArgs

func MlTransformTransformEncryptionPtr(v *MlTransformTransformEncryptionArgs) MlTransformTransformEncryptionPtrInput {
	return (*mlTransformTransformEncryptionPtrType)(v)
}

func (*mlTransformTransformEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransformTransformEncryption)(nil)).Elem()
}

func (i *mlTransformTransformEncryptionPtrType) ToMlTransformTransformEncryptionPtrOutput() MlTransformTransformEncryptionPtrOutput {
	return i.ToMlTransformTransformEncryptionPtrOutputWithContext(context.Background())
}

func (i *mlTransformTransformEncryptionPtrType) ToMlTransformTransformEncryptionPtrOutputWithContext(ctx context.Context) MlTransformTransformEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformTransformEncryptionPtrOutput)
}

func (i *mlTransformTransformEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*MlTransformTransformEncryption] {
	return pulumix.Output[*MlTransformTransformEncryption]{
		OutputState: i.ToMlTransformTransformEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type MlTransformTransformEncryptionOutput struct{ *pulumi.OutputState }

func (MlTransformTransformEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformTransformEncryption)(nil)).Elem()
}

func (o MlTransformTransformEncryptionOutput) ToMlTransformTransformEncryptionOutput() MlTransformTransformEncryptionOutput {
	return o
}

func (o MlTransformTransformEncryptionOutput) ToMlTransformTransformEncryptionOutputWithContext(ctx context.Context) MlTransformTransformEncryptionOutput {
	return o
}

func (o MlTransformTransformEncryptionOutput) ToMlTransformTransformEncryptionPtrOutput() MlTransformTransformEncryptionPtrOutput {
	return o.ToMlTransformTransformEncryptionPtrOutputWithContext(context.Background())
}

func (o MlTransformTransformEncryptionOutput) ToMlTransformTransformEncryptionPtrOutputWithContext(ctx context.Context) MlTransformTransformEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MlTransformTransformEncryption) *MlTransformTransformEncryption {
		return &v
	}).(MlTransformTransformEncryptionPtrOutput)
}

func (o MlTransformTransformEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[MlTransformTransformEncryption] {
	return pulumix.Output[MlTransformTransformEncryption]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformTransformEncryptionOutput) MlUserDataEncryption() MlTransformMlUserDataEncryptionPtrOutput {
	return o.ApplyT(func(v MlTransformTransformEncryption) *MlTransformMlUserDataEncryption { return v.MlUserDataEncryption }).(MlTransformMlUserDataEncryptionPtrOutput)
}

func (o MlTransformTransformEncryptionOutput) TaskRunSecurityConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MlTransformTransformEncryption) *string { return v.TaskRunSecurityConfigurationName }).(pulumi.StringPtrOutput)
}

type MlTransformTransformEncryptionPtrOutput struct{ *pulumi.OutputState }

func (MlTransformTransformEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransformTransformEncryption)(nil)).Elem()
}

func (o MlTransformTransformEncryptionPtrOutput) ToMlTransformTransformEncryptionPtrOutput() MlTransformTransformEncryptionPtrOutput {
	return o
}

func (o MlTransformTransformEncryptionPtrOutput) ToMlTransformTransformEncryptionPtrOutputWithContext(ctx context.Context) MlTransformTransformEncryptionPtrOutput {
	return o
}

func (o MlTransformTransformEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MlTransformTransformEncryption] {
	return pulumix.Output[*MlTransformTransformEncryption]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformTransformEncryptionPtrOutput) Elem() MlTransformTransformEncryptionOutput {
	return o.ApplyT(func(v *MlTransformTransformEncryption) MlTransformTransformEncryption {
		if v != nil {
			return *v
		}
		var ret MlTransformTransformEncryption
		return ret
	}).(MlTransformTransformEncryptionOutput)
}

func (o MlTransformTransformEncryptionPtrOutput) MlUserDataEncryption() MlTransformMlUserDataEncryptionPtrOutput {
	return o.ApplyT(func(v *MlTransformTransformEncryption) *MlTransformMlUserDataEncryption {
		if v == nil {
			return nil
		}
		return v.MlUserDataEncryption
	}).(MlTransformMlUserDataEncryptionPtrOutput)
}

func (o MlTransformTransformEncryptionPtrOutput) TaskRunSecurityConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransformTransformEncryption) *string {
		if v == nil {
			return nil
		}
		return v.TaskRunSecurityConfigurationName
	}).(pulumi.StringPtrOutput)
}

type MlTransformTransformParameters struct {
	FindMatchesParameters *MlTransformFindMatchesParameters `pulumi:"findMatchesParameters"`
	TransformType         string                            `pulumi:"transformType"`
}

// MlTransformTransformParametersInput is an input type that accepts MlTransformTransformParametersArgs and MlTransformTransformParametersOutput values.
// You can construct a concrete instance of `MlTransformTransformParametersInput` via:
//
//	MlTransformTransformParametersArgs{...}
type MlTransformTransformParametersInput interface {
	pulumi.Input

	ToMlTransformTransformParametersOutput() MlTransformTransformParametersOutput
	ToMlTransformTransformParametersOutputWithContext(context.Context) MlTransformTransformParametersOutput
}

type MlTransformTransformParametersArgs struct {
	FindMatchesParameters MlTransformFindMatchesParametersPtrInput `pulumi:"findMatchesParameters"`
	TransformType         pulumi.StringInput                       `pulumi:"transformType"`
}

func (MlTransformTransformParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformTransformParameters)(nil)).Elem()
}

func (i MlTransformTransformParametersArgs) ToMlTransformTransformParametersOutput() MlTransformTransformParametersOutput {
	return i.ToMlTransformTransformParametersOutputWithContext(context.Background())
}

func (i MlTransformTransformParametersArgs) ToMlTransformTransformParametersOutputWithContext(ctx context.Context) MlTransformTransformParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformTransformParametersOutput)
}

func (i MlTransformTransformParametersArgs) ToOutput(ctx context.Context) pulumix.Output[MlTransformTransformParameters] {
	return pulumix.Output[MlTransformTransformParameters]{
		OutputState: i.ToMlTransformTransformParametersOutputWithContext(ctx).OutputState,
	}
}

type MlTransformTransformParametersOutput struct{ *pulumi.OutputState }

func (MlTransformTransformParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlTransformTransformParameters)(nil)).Elem()
}

func (o MlTransformTransformParametersOutput) ToMlTransformTransformParametersOutput() MlTransformTransformParametersOutput {
	return o
}

func (o MlTransformTransformParametersOutput) ToMlTransformTransformParametersOutputWithContext(ctx context.Context) MlTransformTransformParametersOutput {
	return o
}

func (o MlTransformTransformParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MlTransformTransformParameters] {
	return pulumix.Output[MlTransformTransformParameters]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformTransformParametersOutput) FindMatchesParameters() MlTransformFindMatchesParametersPtrOutput {
	return o.ApplyT(func(v MlTransformTransformParameters) *MlTransformFindMatchesParameters {
		return v.FindMatchesParameters
	}).(MlTransformFindMatchesParametersPtrOutput)
}

func (o MlTransformTransformParametersOutput) TransformType() pulumi.StringOutput {
	return o.ApplyT(func(v MlTransformTransformParameters) string { return v.TransformType }).(pulumi.StringOutput)
}

type MlTransformTransformParametersPtrOutput struct{ *pulumi.OutputState }

func (MlTransformTransformParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransformTransformParameters)(nil)).Elem()
}

func (o MlTransformTransformParametersPtrOutput) ToMlTransformTransformParametersPtrOutput() MlTransformTransformParametersPtrOutput {
	return o
}

func (o MlTransformTransformParametersPtrOutput) ToMlTransformTransformParametersPtrOutputWithContext(ctx context.Context) MlTransformTransformParametersPtrOutput {
	return o
}

func (o MlTransformTransformParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MlTransformTransformParameters] {
	return pulumix.Output[*MlTransformTransformParameters]{
		OutputState: o.OutputState,
	}
}

func (o MlTransformTransformParametersPtrOutput) Elem() MlTransformTransformParametersOutput {
	return o.ApplyT(func(v *MlTransformTransformParameters) MlTransformTransformParameters {
		if v != nil {
			return *v
		}
		var ret MlTransformTransformParameters
		return ret
	}).(MlTransformTransformParametersOutput)
}

func (o MlTransformTransformParametersPtrOutput) FindMatchesParameters() MlTransformFindMatchesParametersPtrOutput {
	return o.ApplyT(func(v *MlTransformTransformParameters) *MlTransformFindMatchesParameters {
		if v == nil {
			return nil
		}
		return v.FindMatchesParameters
	}).(MlTransformFindMatchesParametersPtrOutput)
}

func (o MlTransformTransformParametersPtrOutput) TransformType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransformTransformParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TransformType
	}).(pulumi.StringPtrOutput)
}

type PartitionColumn struct {
	Comment *string `pulumi:"comment"`
	Name    string  `pulumi:"name"`
	Type    *string `pulumi:"type"`
}

// PartitionColumnInput is an input type that accepts PartitionColumnArgs and PartitionColumnOutput values.
// You can construct a concrete instance of `PartitionColumnInput` via:
//
//	PartitionColumnArgs{...}
type PartitionColumnInput interface {
	pulumi.Input

	ToPartitionColumnOutput() PartitionColumnOutput
	ToPartitionColumnOutputWithContext(context.Context) PartitionColumnOutput
}

type PartitionColumnArgs struct {
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	Name    pulumi.StringInput    `pulumi:"name"`
	Type    pulumi.StringPtrInput `pulumi:"type"`
}

func (PartitionColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionColumn)(nil)).Elem()
}

func (i PartitionColumnArgs) ToPartitionColumnOutput() PartitionColumnOutput {
	return i.ToPartitionColumnOutputWithContext(context.Background())
}

func (i PartitionColumnArgs) ToPartitionColumnOutputWithContext(ctx context.Context) PartitionColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionColumnOutput)
}

func (i PartitionColumnArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionColumn] {
	return pulumix.Output[PartitionColumn]{
		OutputState: i.ToPartitionColumnOutputWithContext(ctx).OutputState,
	}
}

// PartitionColumnArrayInput is an input type that accepts PartitionColumnArray and PartitionColumnArrayOutput values.
// You can construct a concrete instance of `PartitionColumnArrayInput` via:
//
//	PartitionColumnArray{ PartitionColumnArgs{...} }
type PartitionColumnArrayInput interface {
	pulumi.Input

	ToPartitionColumnArrayOutput() PartitionColumnArrayOutput
	ToPartitionColumnArrayOutputWithContext(context.Context) PartitionColumnArrayOutput
}

type PartitionColumnArray []PartitionColumnInput

func (PartitionColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionColumn)(nil)).Elem()
}

func (i PartitionColumnArray) ToPartitionColumnArrayOutput() PartitionColumnArrayOutput {
	return i.ToPartitionColumnArrayOutputWithContext(context.Background())
}

func (i PartitionColumnArray) ToPartitionColumnArrayOutputWithContext(ctx context.Context) PartitionColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionColumnArrayOutput)
}

func (i PartitionColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]PartitionColumn] {
	return pulumix.Output[[]PartitionColumn]{
		OutputState: i.ToPartitionColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type PartitionColumnOutput struct{ *pulumi.OutputState }

func (PartitionColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionColumn)(nil)).Elem()
}

func (o PartitionColumnOutput) ToPartitionColumnOutput() PartitionColumnOutput {
	return o
}

func (o PartitionColumnOutput) ToPartitionColumnOutputWithContext(ctx context.Context) PartitionColumnOutput {
	return o
}

func (o PartitionColumnOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionColumn] {
	return pulumix.Output[PartitionColumn]{
		OutputState: o.OutputState,
	}
}

func (o PartitionColumnOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionColumn) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o PartitionColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PartitionColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o PartitionColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PartitionColumnArrayOutput struct{ *pulumi.OutputState }

func (PartitionColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionColumn)(nil)).Elem()
}

func (o PartitionColumnArrayOutput) ToPartitionColumnArrayOutput() PartitionColumnArrayOutput {
	return o
}

func (o PartitionColumnArrayOutput) ToPartitionColumnArrayOutputWithContext(ctx context.Context) PartitionColumnArrayOutput {
	return o
}

func (o PartitionColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PartitionColumn] {
	return pulumix.Output[[]PartitionColumn]{
		OutputState: o.OutputState,
	}
}

func (o PartitionColumnArrayOutput) Index(i pulumi.IntInput) PartitionColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartitionColumn {
		return vs[0].([]PartitionColumn)[vs[1].(int)]
	}).(PartitionColumnOutput)
}

type PartitionInputType struct {
	Parameters        interface{}                 `pulumi:"parameters"`
	StorageDescriptor *PartitionStorageDescriptor `pulumi:"storageDescriptor"`
	Values            []string                    `pulumi:"values"`
}

// PartitionInputTypeInput is an input type that accepts PartitionInputTypeArgs and PartitionInputTypeOutput values.
// You can construct a concrete instance of `PartitionInputTypeInput` via:
//
//	PartitionInputTypeArgs{...}
type PartitionInputTypeInput interface {
	pulumi.Input

	ToPartitionInputTypeOutput() PartitionInputTypeOutput
	ToPartitionInputTypeOutputWithContext(context.Context) PartitionInputTypeOutput
}

type PartitionInputTypeArgs struct {
	Parameters        pulumi.Input                       `pulumi:"parameters"`
	StorageDescriptor PartitionStorageDescriptorPtrInput `pulumi:"storageDescriptor"`
	Values            pulumi.StringArrayInput            `pulumi:"values"`
}

func (PartitionInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionInputType)(nil)).Elem()
}

func (i PartitionInputTypeArgs) ToPartitionInputTypeOutput() PartitionInputTypeOutput {
	return i.ToPartitionInputTypeOutputWithContext(context.Background())
}

func (i PartitionInputTypeArgs) ToPartitionInputTypeOutputWithContext(ctx context.Context) PartitionInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionInputTypeOutput)
}

func (i PartitionInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionInputType] {
	return pulumix.Output[PartitionInputType]{
		OutputState: i.ToPartitionInputTypeOutputWithContext(ctx).OutputState,
	}
}

type PartitionInputTypeOutput struct{ *pulumi.OutputState }

func (PartitionInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionInputType)(nil)).Elem()
}

func (o PartitionInputTypeOutput) ToPartitionInputTypeOutput() PartitionInputTypeOutput {
	return o
}

func (o PartitionInputTypeOutput) ToPartitionInputTypeOutputWithContext(ctx context.Context) PartitionInputTypeOutput {
	return o
}

func (o PartitionInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionInputType] {
	return pulumix.Output[PartitionInputType]{
		OutputState: o.OutputState,
	}
}

func (o PartitionInputTypeOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v PartitionInputType) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

func (o PartitionInputTypeOutput) StorageDescriptor() PartitionStorageDescriptorPtrOutput {
	return o.ApplyT(func(v PartitionInputType) *PartitionStorageDescriptor { return v.StorageDescriptor }).(PartitionStorageDescriptorPtrOutput)
}

func (o PartitionInputTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PartitionInputType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type PartitionInputTypePtrOutput struct{ *pulumi.OutputState }

func (PartitionInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionInputType)(nil)).Elem()
}

func (o PartitionInputTypePtrOutput) ToPartitionInputTypePtrOutput() PartitionInputTypePtrOutput {
	return o
}

func (o PartitionInputTypePtrOutput) ToPartitionInputTypePtrOutputWithContext(ctx context.Context) PartitionInputTypePtrOutput {
	return o
}

func (o PartitionInputTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PartitionInputType] {
	return pulumix.Output[*PartitionInputType]{
		OutputState: o.OutputState,
	}
}

func (o PartitionInputTypePtrOutput) Elem() PartitionInputTypeOutput {
	return o.ApplyT(func(v *PartitionInputType) PartitionInputType {
		if v != nil {
			return *v
		}
		var ret PartitionInputType
		return ret
	}).(PartitionInputTypeOutput)
}

func (o PartitionInputTypePtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *PartitionInputType) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

func (o PartitionInputTypePtrOutput) StorageDescriptor() PartitionStorageDescriptorPtrOutput {
	return o.ApplyT(func(v *PartitionInputType) *PartitionStorageDescriptor {
		if v == nil {
			return nil
		}
		return v.StorageDescriptor
	}).(PartitionStorageDescriptorPtrOutput)
}

func (o PartitionInputTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartitionInputType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type PartitionOrder struct {
	Column    string `pulumi:"column"`
	SortOrder *int   `pulumi:"sortOrder"`
}

// PartitionOrderInput is an input type that accepts PartitionOrderArgs and PartitionOrderOutput values.
// You can construct a concrete instance of `PartitionOrderInput` via:
//
//	PartitionOrderArgs{...}
type PartitionOrderInput interface {
	pulumi.Input

	ToPartitionOrderOutput() PartitionOrderOutput
	ToPartitionOrderOutputWithContext(context.Context) PartitionOrderOutput
}

type PartitionOrderArgs struct {
	Column    pulumi.StringInput `pulumi:"column"`
	SortOrder pulumi.IntPtrInput `pulumi:"sortOrder"`
}

func (PartitionOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionOrder)(nil)).Elem()
}

func (i PartitionOrderArgs) ToPartitionOrderOutput() PartitionOrderOutput {
	return i.ToPartitionOrderOutputWithContext(context.Background())
}

func (i PartitionOrderArgs) ToPartitionOrderOutputWithContext(ctx context.Context) PartitionOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionOrderOutput)
}

func (i PartitionOrderArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionOrder] {
	return pulumix.Output[PartitionOrder]{
		OutputState: i.ToPartitionOrderOutputWithContext(ctx).OutputState,
	}
}

// PartitionOrderArrayInput is an input type that accepts PartitionOrderArray and PartitionOrderArrayOutput values.
// You can construct a concrete instance of `PartitionOrderArrayInput` via:
//
//	PartitionOrderArray{ PartitionOrderArgs{...} }
type PartitionOrderArrayInput interface {
	pulumi.Input

	ToPartitionOrderArrayOutput() PartitionOrderArrayOutput
	ToPartitionOrderArrayOutputWithContext(context.Context) PartitionOrderArrayOutput
}

type PartitionOrderArray []PartitionOrderInput

func (PartitionOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionOrder)(nil)).Elem()
}

func (i PartitionOrderArray) ToPartitionOrderArrayOutput() PartitionOrderArrayOutput {
	return i.ToPartitionOrderArrayOutputWithContext(context.Background())
}

func (i PartitionOrderArray) ToPartitionOrderArrayOutputWithContext(ctx context.Context) PartitionOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionOrderArrayOutput)
}

func (i PartitionOrderArray) ToOutput(ctx context.Context) pulumix.Output[[]PartitionOrder] {
	return pulumix.Output[[]PartitionOrder]{
		OutputState: i.ToPartitionOrderArrayOutputWithContext(ctx).OutputState,
	}
}

type PartitionOrderOutput struct{ *pulumi.OutputState }

func (PartitionOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionOrder)(nil)).Elem()
}

func (o PartitionOrderOutput) ToPartitionOrderOutput() PartitionOrderOutput {
	return o
}

func (o PartitionOrderOutput) ToPartitionOrderOutputWithContext(ctx context.Context) PartitionOrderOutput {
	return o
}

func (o PartitionOrderOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionOrder] {
	return pulumix.Output[PartitionOrder]{
		OutputState: o.OutputState,
	}
}

func (o PartitionOrderOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v PartitionOrder) string { return v.Column }).(pulumi.StringOutput)
}

func (o PartitionOrderOutput) SortOrder() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PartitionOrder) *int { return v.SortOrder }).(pulumi.IntPtrOutput)
}

type PartitionOrderArrayOutput struct{ *pulumi.OutputState }

func (PartitionOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionOrder)(nil)).Elem()
}

func (o PartitionOrderArrayOutput) ToPartitionOrderArrayOutput() PartitionOrderArrayOutput {
	return o
}

func (o PartitionOrderArrayOutput) ToPartitionOrderArrayOutputWithContext(ctx context.Context) PartitionOrderArrayOutput {
	return o
}

func (o PartitionOrderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PartitionOrder] {
	return pulumix.Output[[]PartitionOrder]{
		OutputState: o.OutputState,
	}
}

func (o PartitionOrderArrayOutput) Index(i pulumi.IntInput) PartitionOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartitionOrder {
		return vs[0].([]PartitionOrder)[vs[1].(int)]
	}).(PartitionOrderOutput)
}

type PartitionSchemaId struct {
	RegistryName *string `pulumi:"registryName"`
	SchemaArn    *string `pulumi:"schemaArn"`
	SchemaName   *string `pulumi:"schemaName"`
}

// PartitionSchemaIdInput is an input type that accepts PartitionSchemaIdArgs and PartitionSchemaIdOutput values.
// You can construct a concrete instance of `PartitionSchemaIdInput` via:
//
//	PartitionSchemaIdArgs{...}
type PartitionSchemaIdInput interface {
	pulumi.Input

	ToPartitionSchemaIdOutput() PartitionSchemaIdOutput
	ToPartitionSchemaIdOutputWithContext(context.Context) PartitionSchemaIdOutput
}

type PartitionSchemaIdArgs struct {
	RegistryName pulumi.StringPtrInput `pulumi:"registryName"`
	SchemaArn    pulumi.StringPtrInput `pulumi:"schemaArn"`
	SchemaName   pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (PartitionSchemaIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemaId)(nil)).Elem()
}

func (i PartitionSchemaIdArgs) ToPartitionSchemaIdOutput() PartitionSchemaIdOutput {
	return i.ToPartitionSchemaIdOutputWithContext(context.Background())
}

func (i PartitionSchemaIdArgs) ToPartitionSchemaIdOutputWithContext(ctx context.Context) PartitionSchemaIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemaIdOutput)
}

func (i PartitionSchemaIdArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionSchemaId] {
	return pulumix.Output[PartitionSchemaId]{
		OutputState: i.ToPartitionSchemaIdOutputWithContext(ctx).OutputState,
	}
}

func (i PartitionSchemaIdArgs) ToPartitionSchemaIdPtrOutput() PartitionSchemaIdPtrOutput {
	return i.ToPartitionSchemaIdPtrOutputWithContext(context.Background())
}

func (i PartitionSchemaIdArgs) ToPartitionSchemaIdPtrOutputWithContext(ctx context.Context) PartitionSchemaIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemaIdOutput).ToPartitionSchemaIdPtrOutputWithContext(ctx)
}

// PartitionSchemaIdPtrInput is an input type that accepts PartitionSchemaIdArgs, PartitionSchemaIdPtr and PartitionSchemaIdPtrOutput values.
// You can construct a concrete instance of `PartitionSchemaIdPtrInput` via:
//
//	        PartitionSchemaIdArgs{...}
//
//	or:
//
//	        nil
type PartitionSchemaIdPtrInput interface {
	pulumi.Input

	ToPartitionSchemaIdPtrOutput() PartitionSchemaIdPtrOutput
	ToPartitionSchemaIdPtrOutputWithContext(context.Context) PartitionSchemaIdPtrOutput
}

type partitionSchemaIdPtrType PartitionSchemaIdArgs

func PartitionSchemaIdPtr(v *PartitionSchemaIdArgs) PartitionSchemaIdPtrInput {
	return (*partitionSchemaIdPtrType)(v)
}

func (*partitionSchemaIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemaId)(nil)).Elem()
}

func (i *partitionSchemaIdPtrType) ToPartitionSchemaIdPtrOutput() PartitionSchemaIdPtrOutput {
	return i.ToPartitionSchemaIdPtrOutputWithContext(context.Background())
}

func (i *partitionSchemaIdPtrType) ToPartitionSchemaIdPtrOutputWithContext(ctx context.Context) PartitionSchemaIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemaIdPtrOutput)
}

func (i *partitionSchemaIdPtrType) ToOutput(ctx context.Context) pulumix.Output[*PartitionSchemaId] {
	return pulumix.Output[*PartitionSchemaId]{
		OutputState: i.ToPartitionSchemaIdPtrOutputWithContext(ctx).OutputState,
	}
}

type PartitionSchemaIdOutput struct{ *pulumi.OutputState }

func (PartitionSchemaIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemaId)(nil)).Elem()
}

func (o PartitionSchemaIdOutput) ToPartitionSchemaIdOutput() PartitionSchemaIdOutput {
	return o
}

func (o PartitionSchemaIdOutput) ToPartitionSchemaIdOutputWithContext(ctx context.Context) PartitionSchemaIdOutput {
	return o
}

func (o PartitionSchemaIdOutput) ToPartitionSchemaIdPtrOutput() PartitionSchemaIdPtrOutput {
	return o.ToPartitionSchemaIdPtrOutputWithContext(context.Background())
}

func (o PartitionSchemaIdOutput) ToPartitionSchemaIdPtrOutputWithContext(ctx context.Context) PartitionSchemaIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartitionSchemaId) *PartitionSchemaId {
		return &v
	}).(PartitionSchemaIdPtrOutput)
}

func (o PartitionSchemaIdOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionSchemaId] {
	return pulumix.Output[PartitionSchemaId]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSchemaIdOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionSchemaId) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

func (o PartitionSchemaIdOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionSchemaId) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

func (o PartitionSchemaIdOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionSchemaId) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type PartitionSchemaIdPtrOutput struct{ *pulumi.OutputState }

func (PartitionSchemaIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemaId)(nil)).Elem()
}

func (o PartitionSchemaIdPtrOutput) ToPartitionSchemaIdPtrOutput() PartitionSchemaIdPtrOutput {
	return o
}

func (o PartitionSchemaIdPtrOutput) ToPartitionSchemaIdPtrOutputWithContext(ctx context.Context) PartitionSchemaIdPtrOutput {
	return o
}

func (o PartitionSchemaIdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PartitionSchemaId] {
	return pulumix.Output[*PartitionSchemaId]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSchemaIdPtrOutput) Elem() PartitionSchemaIdOutput {
	return o.ApplyT(func(v *PartitionSchemaId) PartitionSchemaId {
		if v != nil {
			return *v
		}
		var ret PartitionSchemaId
		return ret
	}).(PartitionSchemaIdOutput)
}

func (o PartitionSchemaIdPtrOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSchemaId) *string {
		if v == nil {
			return nil
		}
		return v.RegistryName
	}).(pulumi.StringPtrOutput)
}

func (o PartitionSchemaIdPtrOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSchemaId) *string {
		if v == nil {
			return nil
		}
		return v.SchemaArn
	}).(pulumi.StringPtrOutput)
}

func (o PartitionSchemaIdPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSchemaId) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type PartitionSchemaReference struct {
	SchemaId            *PartitionSchemaId `pulumi:"schemaId"`
	SchemaVersionId     *string            `pulumi:"schemaVersionId"`
	SchemaVersionNumber *int               `pulumi:"schemaVersionNumber"`
}

// PartitionSchemaReferenceInput is an input type that accepts PartitionSchemaReferenceArgs and PartitionSchemaReferenceOutput values.
// You can construct a concrete instance of `PartitionSchemaReferenceInput` via:
//
//	PartitionSchemaReferenceArgs{...}
type PartitionSchemaReferenceInput interface {
	pulumi.Input

	ToPartitionSchemaReferenceOutput() PartitionSchemaReferenceOutput
	ToPartitionSchemaReferenceOutputWithContext(context.Context) PartitionSchemaReferenceOutput
}

type PartitionSchemaReferenceArgs struct {
	SchemaId            PartitionSchemaIdPtrInput `pulumi:"schemaId"`
	SchemaVersionId     pulumi.StringPtrInput     `pulumi:"schemaVersionId"`
	SchemaVersionNumber pulumi.IntPtrInput        `pulumi:"schemaVersionNumber"`
}

func (PartitionSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemaReference)(nil)).Elem()
}

func (i PartitionSchemaReferenceArgs) ToPartitionSchemaReferenceOutput() PartitionSchemaReferenceOutput {
	return i.ToPartitionSchemaReferenceOutputWithContext(context.Background())
}

func (i PartitionSchemaReferenceArgs) ToPartitionSchemaReferenceOutputWithContext(ctx context.Context) PartitionSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemaReferenceOutput)
}

func (i PartitionSchemaReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionSchemaReference] {
	return pulumix.Output[PartitionSchemaReference]{
		OutputState: i.ToPartitionSchemaReferenceOutputWithContext(ctx).OutputState,
	}
}

func (i PartitionSchemaReferenceArgs) ToPartitionSchemaReferencePtrOutput() PartitionSchemaReferencePtrOutput {
	return i.ToPartitionSchemaReferencePtrOutputWithContext(context.Background())
}

func (i PartitionSchemaReferenceArgs) ToPartitionSchemaReferencePtrOutputWithContext(ctx context.Context) PartitionSchemaReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemaReferenceOutput).ToPartitionSchemaReferencePtrOutputWithContext(ctx)
}

// PartitionSchemaReferencePtrInput is an input type that accepts PartitionSchemaReferenceArgs, PartitionSchemaReferencePtr and PartitionSchemaReferencePtrOutput values.
// You can construct a concrete instance of `PartitionSchemaReferencePtrInput` via:
//
//	        PartitionSchemaReferenceArgs{...}
//
//	or:
//
//	        nil
type PartitionSchemaReferencePtrInput interface {
	pulumi.Input

	ToPartitionSchemaReferencePtrOutput() PartitionSchemaReferencePtrOutput
	ToPartitionSchemaReferencePtrOutputWithContext(context.Context) PartitionSchemaReferencePtrOutput
}

type partitionSchemaReferencePtrType PartitionSchemaReferenceArgs

func PartitionSchemaReferencePtr(v *PartitionSchemaReferenceArgs) PartitionSchemaReferencePtrInput {
	return (*partitionSchemaReferencePtrType)(v)
}

func (*partitionSchemaReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemaReference)(nil)).Elem()
}

func (i *partitionSchemaReferencePtrType) ToPartitionSchemaReferencePtrOutput() PartitionSchemaReferencePtrOutput {
	return i.ToPartitionSchemaReferencePtrOutputWithContext(context.Background())
}

func (i *partitionSchemaReferencePtrType) ToPartitionSchemaReferencePtrOutputWithContext(ctx context.Context) PartitionSchemaReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemaReferencePtrOutput)
}

func (i *partitionSchemaReferencePtrType) ToOutput(ctx context.Context) pulumix.Output[*PartitionSchemaReference] {
	return pulumix.Output[*PartitionSchemaReference]{
		OutputState: i.ToPartitionSchemaReferencePtrOutputWithContext(ctx).OutputState,
	}
}

type PartitionSchemaReferenceOutput struct{ *pulumi.OutputState }

func (PartitionSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemaReference)(nil)).Elem()
}

func (o PartitionSchemaReferenceOutput) ToPartitionSchemaReferenceOutput() PartitionSchemaReferenceOutput {
	return o
}

func (o PartitionSchemaReferenceOutput) ToPartitionSchemaReferenceOutputWithContext(ctx context.Context) PartitionSchemaReferenceOutput {
	return o
}

func (o PartitionSchemaReferenceOutput) ToPartitionSchemaReferencePtrOutput() PartitionSchemaReferencePtrOutput {
	return o.ToPartitionSchemaReferencePtrOutputWithContext(context.Background())
}

func (o PartitionSchemaReferenceOutput) ToPartitionSchemaReferencePtrOutputWithContext(ctx context.Context) PartitionSchemaReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartitionSchemaReference) *PartitionSchemaReference {
		return &v
	}).(PartitionSchemaReferencePtrOutput)
}

func (o PartitionSchemaReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionSchemaReference] {
	return pulumix.Output[PartitionSchemaReference]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSchemaReferenceOutput) SchemaId() PartitionSchemaIdPtrOutput {
	return o.ApplyT(func(v PartitionSchemaReference) *PartitionSchemaId { return v.SchemaId }).(PartitionSchemaIdPtrOutput)
}

func (o PartitionSchemaReferenceOutput) SchemaVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionSchemaReference) *string { return v.SchemaVersionId }).(pulumi.StringPtrOutput)
}

func (o PartitionSchemaReferenceOutput) SchemaVersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PartitionSchemaReference) *int { return v.SchemaVersionNumber }).(pulumi.IntPtrOutput)
}

type PartitionSchemaReferencePtrOutput struct{ *pulumi.OutputState }

func (PartitionSchemaReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemaReference)(nil)).Elem()
}

func (o PartitionSchemaReferencePtrOutput) ToPartitionSchemaReferencePtrOutput() PartitionSchemaReferencePtrOutput {
	return o
}

func (o PartitionSchemaReferencePtrOutput) ToPartitionSchemaReferencePtrOutputWithContext(ctx context.Context) PartitionSchemaReferencePtrOutput {
	return o
}

func (o PartitionSchemaReferencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PartitionSchemaReference] {
	return pulumix.Output[*PartitionSchemaReference]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSchemaReferencePtrOutput) Elem() PartitionSchemaReferenceOutput {
	return o.ApplyT(func(v *PartitionSchemaReference) PartitionSchemaReference {
		if v != nil {
			return *v
		}
		var ret PartitionSchemaReference
		return ret
	}).(PartitionSchemaReferenceOutput)
}

func (o PartitionSchemaReferencePtrOutput) SchemaId() PartitionSchemaIdPtrOutput {
	return o.ApplyT(func(v *PartitionSchemaReference) *PartitionSchemaId {
		if v == nil {
			return nil
		}
		return v.SchemaId
	}).(PartitionSchemaIdPtrOutput)
}

func (o PartitionSchemaReferencePtrOutput) SchemaVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSchemaReference) *string {
		if v == nil {
			return nil
		}
		return v.SchemaVersionId
	}).(pulumi.StringPtrOutput)
}

func (o PartitionSchemaReferencePtrOutput) SchemaVersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PartitionSchemaReference) *int {
		if v == nil {
			return nil
		}
		return v.SchemaVersionNumber
	}).(pulumi.IntPtrOutput)
}

type PartitionSerdeInfo struct {
	Name                 *string     `pulumi:"name"`
	Parameters           interface{} `pulumi:"parameters"`
	SerializationLibrary *string     `pulumi:"serializationLibrary"`
}

// PartitionSerdeInfoInput is an input type that accepts PartitionSerdeInfoArgs and PartitionSerdeInfoOutput values.
// You can construct a concrete instance of `PartitionSerdeInfoInput` via:
//
//	PartitionSerdeInfoArgs{...}
type PartitionSerdeInfoInput interface {
	pulumi.Input

	ToPartitionSerdeInfoOutput() PartitionSerdeInfoOutput
	ToPartitionSerdeInfoOutputWithContext(context.Context) PartitionSerdeInfoOutput
}

type PartitionSerdeInfoArgs struct {
	Name                 pulumi.StringPtrInput `pulumi:"name"`
	Parameters           pulumi.Input          `pulumi:"parameters"`
	SerializationLibrary pulumi.StringPtrInput `pulumi:"serializationLibrary"`
}

func (PartitionSerdeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSerdeInfo)(nil)).Elem()
}

func (i PartitionSerdeInfoArgs) ToPartitionSerdeInfoOutput() PartitionSerdeInfoOutput {
	return i.ToPartitionSerdeInfoOutputWithContext(context.Background())
}

func (i PartitionSerdeInfoArgs) ToPartitionSerdeInfoOutputWithContext(ctx context.Context) PartitionSerdeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSerdeInfoOutput)
}

func (i PartitionSerdeInfoArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionSerdeInfo] {
	return pulumix.Output[PartitionSerdeInfo]{
		OutputState: i.ToPartitionSerdeInfoOutputWithContext(ctx).OutputState,
	}
}

func (i PartitionSerdeInfoArgs) ToPartitionSerdeInfoPtrOutput() PartitionSerdeInfoPtrOutput {
	return i.ToPartitionSerdeInfoPtrOutputWithContext(context.Background())
}

func (i PartitionSerdeInfoArgs) ToPartitionSerdeInfoPtrOutputWithContext(ctx context.Context) PartitionSerdeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSerdeInfoOutput).ToPartitionSerdeInfoPtrOutputWithContext(ctx)
}

// PartitionSerdeInfoPtrInput is an input type that accepts PartitionSerdeInfoArgs, PartitionSerdeInfoPtr and PartitionSerdeInfoPtrOutput values.
// You can construct a concrete instance of `PartitionSerdeInfoPtrInput` via:
//
//	        PartitionSerdeInfoArgs{...}
//
//	or:
//
//	        nil
type PartitionSerdeInfoPtrInput interface {
	pulumi.Input

	ToPartitionSerdeInfoPtrOutput() PartitionSerdeInfoPtrOutput
	ToPartitionSerdeInfoPtrOutputWithContext(context.Context) PartitionSerdeInfoPtrOutput
}

type partitionSerdeInfoPtrType PartitionSerdeInfoArgs

func PartitionSerdeInfoPtr(v *PartitionSerdeInfoArgs) PartitionSerdeInfoPtrInput {
	return (*partitionSerdeInfoPtrType)(v)
}

func (*partitionSerdeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSerdeInfo)(nil)).Elem()
}

func (i *partitionSerdeInfoPtrType) ToPartitionSerdeInfoPtrOutput() PartitionSerdeInfoPtrOutput {
	return i.ToPartitionSerdeInfoPtrOutputWithContext(context.Background())
}

func (i *partitionSerdeInfoPtrType) ToPartitionSerdeInfoPtrOutputWithContext(ctx context.Context) PartitionSerdeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSerdeInfoPtrOutput)
}

func (i *partitionSerdeInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*PartitionSerdeInfo] {
	return pulumix.Output[*PartitionSerdeInfo]{
		OutputState: i.ToPartitionSerdeInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type PartitionSerdeInfoOutput struct{ *pulumi.OutputState }

func (PartitionSerdeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSerdeInfo)(nil)).Elem()
}

func (o PartitionSerdeInfoOutput) ToPartitionSerdeInfoOutput() PartitionSerdeInfoOutput {
	return o
}

func (o PartitionSerdeInfoOutput) ToPartitionSerdeInfoOutputWithContext(ctx context.Context) PartitionSerdeInfoOutput {
	return o
}

func (o PartitionSerdeInfoOutput) ToPartitionSerdeInfoPtrOutput() PartitionSerdeInfoPtrOutput {
	return o.ToPartitionSerdeInfoPtrOutputWithContext(context.Background())
}

func (o PartitionSerdeInfoOutput) ToPartitionSerdeInfoPtrOutputWithContext(ctx context.Context) PartitionSerdeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartitionSerdeInfo) *PartitionSerdeInfo {
		return &v
	}).(PartitionSerdeInfoPtrOutput)
}

func (o PartitionSerdeInfoOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionSerdeInfo] {
	return pulumix.Output[PartitionSerdeInfo]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSerdeInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionSerdeInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PartitionSerdeInfoOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v PartitionSerdeInfo) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

func (o PartitionSerdeInfoOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionSerdeInfo) *string { return v.SerializationLibrary }).(pulumi.StringPtrOutput)
}

type PartitionSerdeInfoPtrOutput struct{ *pulumi.OutputState }

func (PartitionSerdeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSerdeInfo)(nil)).Elem()
}

func (o PartitionSerdeInfoPtrOutput) ToPartitionSerdeInfoPtrOutput() PartitionSerdeInfoPtrOutput {
	return o
}

func (o PartitionSerdeInfoPtrOutput) ToPartitionSerdeInfoPtrOutputWithContext(ctx context.Context) PartitionSerdeInfoPtrOutput {
	return o
}

func (o PartitionSerdeInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PartitionSerdeInfo] {
	return pulumix.Output[*PartitionSerdeInfo]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSerdeInfoPtrOutput) Elem() PartitionSerdeInfoOutput {
	return o.ApplyT(func(v *PartitionSerdeInfo) PartitionSerdeInfo {
		if v != nil {
			return *v
		}
		var ret PartitionSerdeInfo
		return ret
	}).(PartitionSerdeInfoOutput)
}

func (o PartitionSerdeInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSerdeInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o PartitionSerdeInfoPtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *PartitionSerdeInfo) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

func (o PartitionSerdeInfoPtrOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSerdeInfo) *string {
		if v == nil {
			return nil
		}
		return v.SerializationLibrary
	}).(pulumi.StringPtrOutput)
}

type PartitionSkewedInfo struct {
	SkewedColumnNames             []string    `pulumi:"skewedColumnNames"`
	SkewedColumnValueLocationMaps interface{} `pulumi:"skewedColumnValueLocationMaps"`
	SkewedColumnValues            []string    `pulumi:"skewedColumnValues"`
}

// PartitionSkewedInfoInput is an input type that accepts PartitionSkewedInfoArgs and PartitionSkewedInfoOutput values.
// You can construct a concrete instance of `PartitionSkewedInfoInput` via:
//
//	PartitionSkewedInfoArgs{...}
type PartitionSkewedInfoInput interface {
	pulumi.Input

	ToPartitionSkewedInfoOutput() PartitionSkewedInfoOutput
	ToPartitionSkewedInfoOutputWithContext(context.Context) PartitionSkewedInfoOutput
}

type PartitionSkewedInfoArgs struct {
	SkewedColumnNames             pulumi.StringArrayInput `pulumi:"skewedColumnNames"`
	SkewedColumnValueLocationMaps pulumi.Input            `pulumi:"skewedColumnValueLocationMaps"`
	SkewedColumnValues            pulumi.StringArrayInput `pulumi:"skewedColumnValues"`
}

func (PartitionSkewedInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSkewedInfo)(nil)).Elem()
}

func (i PartitionSkewedInfoArgs) ToPartitionSkewedInfoOutput() PartitionSkewedInfoOutput {
	return i.ToPartitionSkewedInfoOutputWithContext(context.Background())
}

func (i PartitionSkewedInfoArgs) ToPartitionSkewedInfoOutputWithContext(ctx context.Context) PartitionSkewedInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSkewedInfoOutput)
}

func (i PartitionSkewedInfoArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionSkewedInfo] {
	return pulumix.Output[PartitionSkewedInfo]{
		OutputState: i.ToPartitionSkewedInfoOutputWithContext(ctx).OutputState,
	}
}

func (i PartitionSkewedInfoArgs) ToPartitionSkewedInfoPtrOutput() PartitionSkewedInfoPtrOutput {
	return i.ToPartitionSkewedInfoPtrOutputWithContext(context.Background())
}

func (i PartitionSkewedInfoArgs) ToPartitionSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSkewedInfoOutput).ToPartitionSkewedInfoPtrOutputWithContext(ctx)
}

// PartitionSkewedInfoPtrInput is an input type that accepts PartitionSkewedInfoArgs, PartitionSkewedInfoPtr and PartitionSkewedInfoPtrOutput values.
// You can construct a concrete instance of `PartitionSkewedInfoPtrInput` via:
//
//	        PartitionSkewedInfoArgs{...}
//
//	or:
//
//	        nil
type PartitionSkewedInfoPtrInput interface {
	pulumi.Input

	ToPartitionSkewedInfoPtrOutput() PartitionSkewedInfoPtrOutput
	ToPartitionSkewedInfoPtrOutputWithContext(context.Context) PartitionSkewedInfoPtrOutput
}

type partitionSkewedInfoPtrType PartitionSkewedInfoArgs

func PartitionSkewedInfoPtr(v *PartitionSkewedInfoArgs) PartitionSkewedInfoPtrInput {
	return (*partitionSkewedInfoPtrType)(v)
}

func (*partitionSkewedInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSkewedInfo)(nil)).Elem()
}

func (i *partitionSkewedInfoPtrType) ToPartitionSkewedInfoPtrOutput() PartitionSkewedInfoPtrOutput {
	return i.ToPartitionSkewedInfoPtrOutputWithContext(context.Background())
}

func (i *partitionSkewedInfoPtrType) ToPartitionSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSkewedInfoPtrOutput)
}

func (i *partitionSkewedInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*PartitionSkewedInfo] {
	return pulumix.Output[*PartitionSkewedInfo]{
		OutputState: i.ToPartitionSkewedInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type PartitionSkewedInfoOutput struct{ *pulumi.OutputState }

func (PartitionSkewedInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSkewedInfo)(nil)).Elem()
}

func (o PartitionSkewedInfoOutput) ToPartitionSkewedInfoOutput() PartitionSkewedInfoOutput {
	return o
}

func (o PartitionSkewedInfoOutput) ToPartitionSkewedInfoOutputWithContext(ctx context.Context) PartitionSkewedInfoOutput {
	return o
}

func (o PartitionSkewedInfoOutput) ToPartitionSkewedInfoPtrOutput() PartitionSkewedInfoPtrOutput {
	return o.ToPartitionSkewedInfoPtrOutputWithContext(context.Background())
}

func (o PartitionSkewedInfoOutput) ToPartitionSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionSkewedInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartitionSkewedInfo) *PartitionSkewedInfo {
		return &v
	}).(PartitionSkewedInfoPtrOutput)
}

func (o PartitionSkewedInfoOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionSkewedInfo] {
	return pulumix.Output[PartitionSkewedInfo]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSkewedInfoOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PartitionSkewedInfo) []string { return v.SkewedColumnNames }).(pulumi.StringArrayOutput)
}

func (o PartitionSkewedInfoOutput) SkewedColumnValueLocationMaps() pulumi.AnyOutput {
	return o.ApplyT(func(v PartitionSkewedInfo) interface{} { return v.SkewedColumnValueLocationMaps }).(pulumi.AnyOutput)
}

func (o PartitionSkewedInfoOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PartitionSkewedInfo) []string { return v.SkewedColumnValues }).(pulumi.StringArrayOutput)
}

type PartitionSkewedInfoPtrOutput struct{ *pulumi.OutputState }

func (PartitionSkewedInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSkewedInfo)(nil)).Elem()
}

func (o PartitionSkewedInfoPtrOutput) ToPartitionSkewedInfoPtrOutput() PartitionSkewedInfoPtrOutput {
	return o
}

func (o PartitionSkewedInfoPtrOutput) ToPartitionSkewedInfoPtrOutputWithContext(ctx context.Context) PartitionSkewedInfoPtrOutput {
	return o
}

func (o PartitionSkewedInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PartitionSkewedInfo] {
	return pulumix.Output[*PartitionSkewedInfo]{
		OutputState: o.OutputState,
	}
}

func (o PartitionSkewedInfoPtrOutput) Elem() PartitionSkewedInfoOutput {
	return o.ApplyT(func(v *PartitionSkewedInfo) PartitionSkewedInfo {
		if v != nil {
			return *v
		}
		var ret PartitionSkewedInfo
		return ret
	}).(PartitionSkewedInfoOutput)
}

func (o PartitionSkewedInfoPtrOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartitionSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnNames
	}).(pulumi.StringArrayOutput)
}

func (o PartitionSkewedInfoPtrOutput) SkewedColumnValueLocationMaps() pulumi.AnyOutput {
	return o.ApplyT(func(v *PartitionSkewedInfo) interface{} {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValueLocationMaps
	}).(pulumi.AnyOutput)
}

func (o PartitionSkewedInfoPtrOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartitionSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValues
	}).(pulumi.StringArrayOutput)
}

type PartitionStorageDescriptor struct {
	BucketColumns          []string                  `pulumi:"bucketColumns"`
	Columns                []PartitionColumn         `pulumi:"columns"`
	Compressed             *bool                     `pulumi:"compressed"`
	InputFormat            *string                   `pulumi:"inputFormat"`
	Location               *string                   `pulumi:"location"`
	NumberOfBuckets        *int                      `pulumi:"numberOfBuckets"`
	OutputFormat           *string                   `pulumi:"outputFormat"`
	Parameters             interface{}               `pulumi:"parameters"`
	SchemaReference        *PartitionSchemaReference `pulumi:"schemaReference"`
	SerdeInfo              *PartitionSerdeInfo       `pulumi:"serdeInfo"`
	SkewedInfo             *PartitionSkewedInfo      `pulumi:"skewedInfo"`
	SortColumns            []PartitionOrder          `pulumi:"sortColumns"`
	StoredAsSubDirectories *bool                     `pulumi:"storedAsSubDirectories"`
}

// PartitionStorageDescriptorInput is an input type that accepts PartitionStorageDescriptorArgs and PartitionStorageDescriptorOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorInput` via:
//
//	PartitionStorageDescriptorArgs{...}
type PartitionStorageDescriptorInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput
	ToPartitionStorageDescriptorOutputWithContext(context.Context) PartitionStorageDescriptorOutput
}

type PartitionStorageDescriptorArgs struct {
	BucketColumns          pulumi.StringArrayInput          `pulumi:"bucketColumns"`
	Columns                PartitionColumnArrayInput        `pulumi:"columns"`
	Compressed             pulumi.BoolPtrInput              `pulumi:"compressed"`
	InputFormat            pulumi.StringPtrInput            `pulumi:"inputFormat"`
	Location               pulumi.StringPtrInput            `pulumi:"location"`
	NumberOfBuckets        pulumi.IntPtrInput               `pulumi:"numberOfBuckets"`
	OutputFormat           pulumi.StringPtrInput            `pulumi:"outputFormat"`
	Parameters             pulumi.Input                     `pulumi:"parameters"`
	SchemaReference        PartitionSchemaReferencePtrInput `pulumi:"schemaReference"`
	SerdeInfo              PartitionSerdeInfoPtrInput       `pulumi:"serdeInfo"`
	SkewedInfo             PartitionSkewedInfoPtrInput      `pulumi:"skewedInfo"`
	SortColumns            PartitionOrderArrayInput         `pulumi:"sortColumns"`
	StoredAsSubDirectories pulumi.BoolPtrInput              `pulumi:"storedAsSubDirectories"`
}

func (PartitionStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptor)(nil)).Elem()
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput {
	return i.ToPartitionStorageDescriptorOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorOutputWithContext(ctx context.Context) PartitionStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorOutput)
}

func (i PartitionStorageDescriptorArgs) ToOutput(ctx context.Context) pulumix.Output[PartitionStorageDescriptor] {
	return pulumix.Output[PartitionStorageDescriptor]{
		OutputState: i.ToPartitionStorageDescriptorOutputWithContext(ctx).OutputState,
	}
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return i.ToPartitionStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i PartitionStorageDescriptorArgs) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorOutput).ToPartitionStorageDescriptorPtrOutputWithContext(ctx)
}

// PartitionStorageDescriptorPtrInput is an input type that accepts PartitionStorageDescriptorArgs, PartitionStorageDescriptorPtr and PartitionStorageDescriptorPtrOutput values.
// You can construct a concrete instance of `PartitionStorageDescriptorPtrInput` via:
//
//	        PartitionStorageDescriptorArgs{...}
//
//	or:
//
//	        nil
type PartitionStorageDescriptorPtrInput interface {
	pulumi.Input

	ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput
	ToPartitionStorageDescriptorPtrOutputWithContext(context.Context) PartitionStorageDescriptorPtrOutput
}

type partitionStorageDescriptorPtrType PartitionStorageDescriptorArgs

func PartitionStorageDescriptorPtr(v *PartitionStorageDescriptorArgs) PartitionStorageDescriptorPtrInput {
	return (*partitionStorageDescriptorPtrType)(v)
}

func (*partitionStorageDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptor)(nil)).Elem()
}

func (i *partitionStorageDescriptorPtrType) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return i.ToPartitionStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i *partitionStorageDescriptorPtrType) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionStorageDescriptorPtrOutput)
}

func (i *partitionStorageDescriptorPtrType) ToOutput(ctx context.Context) pulumix.Output[*PartitionStorageDescriptor] {
	return pulumix.Output[*PartitionStorageDescriptor]{
		OutputState: i.ToPartitionStorageDescriptorPtrOutputWithContext(ctx).OutputState,
	}
}

type PartitionStorageDescriptorOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionStorageDescriptor)(nil)).Elem()
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorOutput() PartitionStorageDescriptorOutput {
	return o
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorOutputWithContext(ctx context.Context) PartitionStorageDescriptorOutput {
	return o
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return o.ToPartitionStorageDescriptorPtrOutputWithContext(context.Background())
}

func (o PartitionStorageDescriptorOutput) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartitionStorageDescriptor) *PartitionStorageDescriptor {
		return &v
	}).(PartitionStorageDescriptorPtrOutput)
}

func (o PartitionStorageDescriptorOutput) ToOutput(ctx context.Context) pulumix.Output[PartitionStorageDescriptor] {
	return pulumix.Output[PartitionStorageDescriptor]{
		OutputState: o.OutputState,
	}
}

func (o PartitionStorageDescriptorOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) []string { return v.BucketColumns }).(pulumi.StringArrayOutput)
}

func (o PartitionStorageDescriptorOutput) Columns() PartitionColumnArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) []PartitionColumn { return v.Columns }).(PartitionColumnArrayOutput)
}

func (o PartitionStorageDescriptorOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *bool { return v.Compressed }).(pulumi.BoolPtrOutput)
}

func (o PartitionStorageDescriptorOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *string { return v.InputFormat }).(pulumi.StringPtrOutput)
}

func (o PartitionStorageDescriptorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o PartitionStorageDescriptorOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *int { return v.NumberOfBuckets }).(pulumi.IntPtrOutput)
}

func (o PartitionStorageDescriptorOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *string { return v.OutputFormat }).(pulumi.StringPtrOutput)
}

func (o PartitionStorageDescriptorOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

func (o PartitionStorageDescriptorOutput) SchemaReference() PartitionSchemaReferencePtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *PartitionSchemaReference { return v.SchemaReference }).(PartitionSchemaReferencePtrOutput)
}

func (o PartitionStorageDescriptorOutput) SerdeInfo() PartitionSerdeInfoPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *PartitionSerdeInfo { return v.SerdeInfo }).(PartitionSerdeInfoPtrOutput)
}

func (o PartitionStorageDescriptorOutput) SkewedInfo() PartitionSkewedInfoPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *PartitionSkewedInfo { return v.SkewedInfo }).(PartitionSkewedInfoPtrOutput)
}

func (o PartitionStorageDescriptorOutput) SortColumns() PartitionOrderArrayOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) []PartitionOrder { return v.SortColumns }).(PartitionOrderArrayOutput)
}

func (o PartitionStorageDescriptorOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PartitionStorageDescriptor) *bool { return v.StoredAsSubDirectories }).(pulumi.BoolPtrOutput)
}

type PartitionStorageDescriptorPtrOutput struct{ *pulumi.OutputState }

func (PartitionStorageDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionStorageDescriptor)(nil)).Elem()
}

func (o PartitionStorageDescriptorPtrOutput) ToPartitionStorageDescriptorPtrOutput() PartitionStorageDescriptorPtrOutput {
	return o
}

func (o PartitionStorageDescriptorPtrOutput) ToPartitionStorageDescriptorPtrOutputWithContext(ctx context.Context) PartitionStorageDescriptorPtrOutput {
	return o
}

func (o PartitionStorageDescriptorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PartitionStorageDescriptor] {
	return pulumix.Output[*PartitionStorageDescriptor]{
		OutputState: o.OutputState,
	}
}

func (o PartitionStorageDescriptorPtrOutput) Elem() PartitionStorageDescriptorOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) PartitionStorageDescriptor {
		if v != nil {
			return *v
		}
		var ret PartitionStorageDescriptor
		return ret
	}).(PartitionStorageDescriptorOutput)
}

func (o PartitionStorageDescriptorPtrOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) []string {
		if v == nil {
			return nil
		}
		return v.BucketColumns
	}).(pulumi.StringArrayOutput)
}

func (o PartitionStorageDescriptorPtrOutput) Columns() PartitionColumnArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) []PartitionColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(PartitionColumnArrayOutput)
}

func (o PartitionStorageDescriptorPtrOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.Compressed
	}).(pulumi.BoolPtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.InputFormat
	}).(pulumi.StringPtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfBuckets
	}).(pulumi.IntPtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.OutputFormat
	}).(pulumi.StringPtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

func (o PartitionStorageDescriptorPtrOutput) SchemaReference() PartitionSchemaReferencePtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *PartitionSchemaReference {
		if v == nil {
			return nil
		}
		return v.SchemaReference
	}).(PartitionSchemaReferencePtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) SerdeInfo() PartitionSerdeInfoPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *PartitionSerdeInfo {
		if v == nil {
			return nil
		}
		return v.SerdeInfo
	}).(PartitionSerdeInfoPtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) SkewedInfo() PartitionSkewedInfoPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *PartitionSkewedInfo {
		if v == nil {
			return nil
		}
		return v.SkewedInfo
	}).(PartitionSkewedInfoPtrOutput)
}

func (o PartitionStorageDescriptorPtrOutput) SortColumns() PartitionOrderArrayOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) []PartitionOrder {
		if v == nil {
			return nil
		}
		return v.SortColumns
	}).(PartitionOrderArrayOutput)
}

func (o PartitionStorageDescriptorPtrOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PartitionStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.StoredAsSubDirectories
	}).(pulumi.BoolPtrOutput)
}

type RegistryTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// RegistryTagInput is an input type that accepts RegistryTagArgs and RegistryTagOutput values.
// You can construct a concrete instance of `RegistryTagInput` via:
//
//	RegistryTagArgs{...}
type RegistryTagInput interface {
	pulumi.Input

	ToRegistryTagOutput() RegistryTagOutput
	ToRegistryTagOutputWithContext(context.Context) RegistryTagOutput
}

type RegistryTagArgs struct {
	// A key to identify the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Corresponding tag value for the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RegistryTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTag)(nil)).Elem()
}

func (i RegistryTagArgs) ToRegistryTagOutput() RegistryTagOutput {
	return i.ToRegistryTagOutputWithContext(context.Background())
}

func (i RegistryTagArgs) ToRegistryTagOutputWithContext(ctx context.Context) RegistryTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTagOutput)
}

func (i RegistryTagArgs) ToOutput(ctx context.Context) pulumix.Output[RegistryTag] {
	return pulumix.Output[RegistryTag]{
		OutputState: i.ToRegistryTagOutputWithContext(ctx).OutputState,
	}
}

// RegistryTagArrayInput is an input type that accepts RegistryTagArray and RegistryTagArrayOutput values.
// You can construct a concrete instance of `RegistryTagArrayInput` via:
//
//	RegistryTagArray{ RegistryTagArgs{...} }
type RegistryTagArrayInput interface {
	pulumi.Input

	ToRegistryTagArrayOutput() RegistryTagArrayOutput
	ToRegistryTagArrayOutputWithContext(context.Context) RegistryTagArrayOutput
}

type RegistryTagArray []RegistryTagInput

func (RegistryTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTag)(nil)).Elem()
}

func (i RegistryTagArray) ToRegistryTagArrayOutput() RegistryTagArrayOutput {
	return i.ToRegistryTagArrayOutputWithContext(context.Background())
}

func (i RegistryTagArray) ToRegistryTagArrayOutputWithContext(ctx context.Context) RegistryTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTagArrayOutput)
}

func (i RegistryTagArray) ToOutput(ctx context.Context) pulumix.Output[[]RegistryTag] {
	return pulumix.Output[[]RegistryTag]{
		OutputState: i.ToRegistryTagArrayOutputWithContext(ctx).OutputState,
	}
}

type RegistryTagOutput struct{ *pulumi.OutputState }

func (RegistryTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryTag)(nil)).Elem()
}

func (o RegistryTagOutput) ToRegistryTagOutput() RegistryTagOutput {
	return o
}

func (o RegistryTagOutput) ToRegistryTagOutputWithContext(ctx context.Context) RegistryTagOutput {
	return o
}

func (o RegistryTagOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryTag] {
	return pulumix.Output[RegistryTag]{
		OutputState: o.OutputState,
	}
}

// A key to identify the tag.
func (o RegistryTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTag) string { return v.Key }).(pulumi.StringOutput)
}

// Corresponding tag value for the key.
func (o RegistryTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryTag) string { return v.Value }).(pulumi.StringOutput)
}

type RegistryTagArrayOutput struct{ *pulumi.OutputState }

func (RegistryTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryTag)(nil)).Elem()
}

func (o RegistryTagArrayOutput) ToRegistryTagArrayOutput() RegistryTagArrayOutput {
	return o
}

func (o RegistryTagArrayOutput) ToRegistryTagArrayOutputWithContext(ctx context.Context) RegistryTagArrayOutput {
	return o
}

func (o RegistryTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RegistryTag] {
	return pulumix.Output[[]RegistryTag]{
		OutputState: o.OutputState,
	}
}

func (o RegistryTagArrayOutput) Index(i pulumi.IntInput) RegistryTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryTag {
		return vs[0].([]RegistryTag)[vs[1].(int)]
	}).(RegistryTagOutput)
}

// Identifier for the registry which the schema is part of.
type SchemaRegistry struct {
	// Amazon Resource Name for the Registry.
	Arn *string `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name *string `pulumi:"name"`
}

// SchemaRegistryInput is an input type that accepts SchemaRegistryArgs and SchemaRegistryOutput values.
// You can construct a concrete instance of `SchemaRegistryInput` via:
//
//	SchemaRegistryArgs{...}
type SchemaRegistryInput interface {
	pulumi.Input

	ToSchemaRegistryOutput() SchemaRegistryOutput
	ToSchemaRegistryOutputWithContext(context.Context) SchemaRegistryOutput
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryArgs struct {
	// Amazon Resource Name for the Registry.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return i.ToSchemaRegistryOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput)
}

func (i SchemaRegistryArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistry] {
	return pulumix.Output[SchemaRegistry]{
		OutputState: i.ToSchemaRegistryOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput).ToSchemaRegistryPtrOutputWithContext(ctx)
}

// SchemaRegistryPtrInput is an input type that accepts SchemaRegistryArgs, SchemaRegistryPtr and SchemaRegistryPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryPtrInput` via:
//
//	        SchemaRegistryArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryPtrInput interface {
	pulumi.Input

	ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput
	ToSchemaRegistryPtrOutputWithContext(context.Context) SchemaRegistryPtrOutput
}

type schemaRegistryPtrType SchemaRegistryArgs

func SchemaRegistryPtr(v *SchemaRegistryArgs) SchemaRegistryPtrInput {
	return (*schemaRegistryPtrType)(v)
}

func (*schemaRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryPtrOutput)
}

func (i *schemaRegistryPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistry] {
	return pulumix.Output[*SchemaRegistry]{
		OutputState: i.ToSchemaRegistryPtrOutputWithContext(ctx).OutputState,
	}
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryOutput struct{ *pulumi.OutputState }

func (SchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistry) *SchemaRegistry {
		return &v
	}).(SchemaRegistryPtrOutput)
}

func (o SchemaRegistryOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaRegistry] {
	return pulumix.Output[SchemaRegistry]{
		OutputState: o.OutputState,
	}
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SchemaRegistryPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaRegistry] {
	return pulumix.Output[*SchemaRegistry]{
		OutputState: o.OutputState,
	}
}

func (o SchemaRegistryPtrOutput) Elem() SchemaRegistryOutput {
	return o.ApplyT(func(v *SchemaRegistry) SchemaRegistry {
		if v != nil {
			return *v
		}
		var ret SchemaRegistry
		return ret
	}).(SchemaRegistryOutput)
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type SchemaTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// SchemaTagInput is an input type that accepts SchemaTagArgs and SchemaTagOutput values.
// You can construct a concrete instance of `SchemaTagInput` via:
//
//	SchemaTagArgs{...}
type SchemaTagInput interface {
	pulumi.Input

	ToSchemaTagOutput() SchemaTagOutput
	ToSchemaTagOutputWithContext(context.Context) SchemaTagOutput
}

type SchemaTagArgs struct {
	// A key to identify the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Corresponding tag value for the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SchemaTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaTag)(nil)).Elem()
}

func (i SchemaTagArgs) ToSchemaTagOutput() SchemaTagOutput {
	return i.ToSchemaTagOutputWithContext(context.Background())
}

func (i SchemaTagArgs) ToSchemaTagOutputWithContext(ctx context.Context) SchemaTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaTagOutput)
}

func (i SchemaTagArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaTag] {
	return pulumix.Output[SchemaTag]{
		OutputState: i.ToSchemaTagOutputWithContext(ctx).OutputState,
	}
}

// SchemaTagArrayInput is an input type that accepts SchemaTagArray and SchemaTagArrayOutput values.
// You can construct a concrete instance of `SchemaTagArrayInput` via:
//
//	SchemaTagArray{ SchemaTagArgs{...} }
type SchemaTagArrayInput interface {
	pulumi.Input

	ToSchemaTagArrayOutput() SchemaTagArrayOutput
	ToSchemaTagArrayOutputWithContext(context.Context) SchemaTagArrayOutput
}

type SchemaTagArray []SchemaTagInput

func (SchemaTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaTag)(nil)).Elem()
}

func (i SchemaTagArray) ToSchemaTagArrayOutput() SchemaTagArrayOutput {
	return i.ToSchemaTagArrayOutputWithContext(context.Background())
}

func (i SchemaTagArray) ToSchemaTagArrayOutputWithContext(ctx context.Context) SchemaTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaTagArrayOutput)
}

func (i SchemaTagArray) ToOutput(ctx context.Context) pulumix.Output[[]SchemaTag] {
	return pulumix.Output[[]SchemaTag]{
		OutputState: i.ToSchemaTagArrayOutputWithContext(ctx).OutputState,
	}
}

type SchemaTagOutput struct{ *pulumi.OutputState }

func (SchemaTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaTag)(nil)).Elem()
}

func (o SchemaTagOutput) ToSchemaTagOutput() SchemaTagOutput {
	return o
}

func (o SchemaTagOutput) ToSchemaTagOutputWithContext(ctx context.Context) SchemaTagOutput {
	return o
}

func (o SchemaTagOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaTag] {
	return pulumix.Output[SchemaTag]{
		OutputState: o.OutputState,
	}
}

// A key to identify the tag.
func (o SchemaTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaTag) string { return v.Key }).(pulumi.StringOutput)
}

// Corresponding tag value for the key.
func (o SchemaTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaTag) string { return v.Value }).(pulumi.StringOutput)
}

type SchemaTagArrayOutput struct{ *pulumi.OutputState }

func (SchemaTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaTag)(nil)).Elem()
}

func (o SchemaTagArrayOutput) ToSchemaTagArrayOutput() SchemaTagArrayOutput {
	return o
}

func (o SchemaTagArrayOutput) ToSchemaTagArrayOutputWithContext(ctx context.Context) SchemaTagArrayOutput {
	return o
}

func (o SchemaTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchemaTag] {
	return pulumix.Output[[]SchemaTag]{
		OutputState: o.OutputState,
	}
}

func (o SchemaTagArrayOutput) Index(i pulumi.IntInput) SchemaTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaTag {
		return vs[0].([]SchemaTag)[vs[1].(int)]
	}).(SchemaTagOutput)
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionType struct {
	// Indicates if the latest version needs to be updated.
	IsLatest *bool `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber *int `pulumi:"versionNumber"`
}

// SchemaVersionTypeInput is an input type that accepts SchemaVersionTypeArgs and SchemaVersionTypeOutput values.
// You can construct a concrete instance of `SchemaVersionTypeInput` via:
//
//	SchemaVersionTypeArgs{...}
type SchemaVersionTypeInput interface {
	pulumi.Input

	ToSchemaVersionTypeOutput() SchemaVersionTypeOutput
	ToSchemaVersionTypeOutputWithContext(context.Context) SchemaVersionTypeOutput
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeArgs struct {
	// Indicates if the latest version needs to be updated.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber pulumi.IntPtrInput `pulumi:"versionNumber"`
}

func (SchemaVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return i.ToSchemaVersionTypeOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput)
}

func (i SchemaVersionTypeArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaVersionType] {
	return pulumix.Output[SchemaVersionType]{
		OutputState: i.ToSchemaVersionTypeOutputWithContext(ctx).OutputState,
	}
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput).ToSchemaVersionTypePtrOutputWithContext(ctx)
}

// SchemaVersionTypePtrInput is an input type that accepts SchemaVersionTypeArgs, SchemaVersionTypePtr and SchemaVersionTypePtrOutput values.
// You can construct a concrete instance of `SchemaVersionTypePtrInput` via:
//
//	        SchemaVersionTypeArgs{...}
//
//	or:
//
//	        nil
type SchemaVersionTypePtrInput interface {
	pulumi.Input

	ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput
	ToSchemaVersionTypePtrOutputWithContext(context.Context) SchemaVersionTypePtrOutput
}

type schemaVersionTypePtrType SchemaVersionTypeArgs

func SchemaVersionTypePtr(v *SchemaVersionTypeArgs) SchemaVersionTypePtrInput {
	return (*schemaVersionTypePtrType)(v)
}

func (*schemaVersionTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypePtrOutput)
}

func (i *schemaVersionTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*SchemaVersionType] {
	return pulumix.Output[*SchemaVersionType]{
		OutputState: i.ToSchemaVersionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaVersionType) *SchemaVersionType {
		return &v
	}).(SchemaVersionTypePtrOutput)
}

func (o SchemaVersionTypeOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaVersionType] {
	return pulumix.Output[SchemaVersionType]{
		OutputState: o.OutputState,
	}
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypeOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypeOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *int { return v.VersionNumber }).(pulumi.IntPtrOutput)
}

type SchemaVersionTypePtrOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchemaVersionType] {
	return pulumix.Output[*SchemaVersionType]{
		OutputState: o.OutputState,
	}
}

func (o SchemaVersionTypePtrOutput) Elem() SchemaVersionTypeOutput {
	return o.ApplyT(func(v *SchemaVersionType) SchemaVersionType {
		if v != nil {
			return *v
		}
		var ret SchemaVersionType
		return ret
	}).(SchemaVersionTypeOutput)
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypePtrOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *bool {
		if v == nil {
			return nil
		}
		return v.IsLatest
	}).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypePtrOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *int {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.IntPtrOutput)
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchema struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName *string `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn *string `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName *string `pulumi:"schemaName"`
}

// SchemaVersionSchemaInput is an input type that accepts SchemaVersionSchemaArgs and SchemaVersionSchemaOutput values.
// You can construct a concrete instance of `SchemaVersionSchemaInput` via:
//
//	SchemaVersionSchemaArgs{...}
type SchemaVersionSchemaInput interface {
	pulumi.Input

	ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput
	ToSchemaVersionSchemaOutputWithContext(context.Context) SchemaVersionSchemaOutput
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaArgs struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName pulumi.StringPtrInput `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn pulumi.StringPtrInput `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SchemaVersionSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return i.ToSchemaVersionSchemaOutputWithContext(context.Background())
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionSchemaOutput)
}

func (i SchemaVersionSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaVersionSchema] {
	return pulumix.Output[SchemaVersionSchema]{
		OutputState: i.ToSchemaVersionSchemaOutputWithContext(ctx).OutputState,
	}
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaOutput struct{ *pulumi.OutputState }

func (SchemaVersionSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return o
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return o
}

func (o SchemaVersionSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaVersionSchema] {
	return pulumix.Output[SchemaVersionSchema]{
		OutputState: o.OutputState,
	}
}

// Name of the registry to identify where the Schema is located.
func (o SchemaVersionSchemaOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
func (o SchemaVersionSchemaOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

// Name of the schema. This parameter requires RegistryName to be provided.
func (o SchemaVersionSchemaOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type SecurityConfigurationCloudWatchEncryption struct {
	CloudWatchEncryptionMode *string `pulumi:"cloudWatchEncryptionMode"`
	KmsKeyArn                *string `pulumi:"kmsKeyArn"`
}

// SecurityConfigurationCloudWatchEncryptionInput is an input type that accepts SecurityConfigurationCloudWatchEncryptionArgs and SecurityConfigurationCloudWatchEncryptionOutput values.
// You can construct a concrete instance of `SecurityConfigurationCloudWatchEncryptionInput` via:
//
//	SecurityConfigurationCloudWatchEncryptionArgs{...}
type SecurityConfigurationCloudWatchEncryptionInput interface {
	pulumi.Input

	ToSecurityConfigurationCloudWatchEncryptionOutput() SecurityConfigurationCloudWatchEncryptionOutput
	ToSecurityConfigurationCloudWatchEncryptionOutputWithContext(context.Context) SecurityConfigurationCloudWatchEncryptionOutput
}

type SecurityConfigurationCloudWatchEncryptionArgs struct {
	CloudWatchEncryptionMode pulumi.StringPtrInput `pulumi:"cloudWatchEncryptionMode"`
	KmsKeyArn                pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
}

func (SecurityConfigurationCloudWatchEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationCloudWatchEncryption)(nil)).Elem()
}

func (i SecurityConfigurationCloudWatchEncryptionArgs) ToSecurityConfigurationCloudWatchEncryptionOutput() SecurityConfigurationCloudWatchEncryptionOutput {
	return i.ToSecurityConfigurationCloudWatchEncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationCloudWatchEncryptionArgs) ToSecurityConfigurationCloudWatchEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationCloudWatchEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationCloudWatchEncryptionOutput)
}

func (i SecurityConfigurationCloudWatchEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationCloudWatchEncryption] {
	return pulumix.Output[SecurityConfigurationCloudWatchEncryption]{
		OutputState: i.ToSecurityConfigurationCloudWatchEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i SecurityConfigurationCloudWatchEncryptionArgs) ToSecurityConfigurationCloudWatchEncryptionPtrOutput() SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return i.ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(context.Background())
}

func (i SecurityConfigurationCloudWatchEncryptionArgs) ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationCloudWatchEncryptionOutput).ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(ctx)
}

// SecurityConfigurationCloudWatchEncryptionPtrInput is an input type that accepts SecurityConfigurationCloudWatchEncryptionArgs, SecurityConfigurationCloudWatchEncryptionPtr and SecurityConfigurationCloudWatchEncryptionPtrOutput values.
// You can construct a concrete instance of `SecurityConfigurationCloudWatchEncryptionPtrInput` via:
//
//	        SecurityConfigurationCloudWatchEncryptionArgs{...}
//
//	or:
//
//	        nil
type SecurityConfigurationCloudWatchEncryptionPtrInput interface {
	pulumi.Input

	ToSecurityConfigurationCloudWatchEncryptionPtrOutput() SecurityConfigurationCloudWatchEncryptionPtrOutput
	ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(context.Context) SecurityConfigurationCloudWatchEncryptionPtrOutput
}

type securityConfigurationCloudWatchEncryptionPtrType SecurityConfigurationCloudWatchEncryptionArgs

func SecurityConfigurationCloudWatchEncryptionPtr(v *SecurityConfigurationCloudWatchEncryptionArgs) SecurityConfigurationCloudWatchEncryptionPtrInput {
	return (*securityConfigurationCloudWatchEncryptionPtrType)(v)
}

func (*securityConfigurationCloudWatchEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationCloudWatchEncryption)(nil)).Elem()
}

func (i *securityConfigurationCloudWatchEncryptionPtrType) ToSecurityConfigurationCloudWatchEncryptionPtrOutput() SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return i.ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(context.Background())
}

func (i *securityConfigurationCloudWatchEncryptionPtrType) ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationCloudWatchEncryptionPtrOutput)
}

func (i *securityConfigurationCloudWatchEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationCloudWatchEncryption] {
	return pulumix.Output[*SecurityConfigurationCloudWatchEncryption]{
		OutputState: i.ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type SecurityConfigurationCloudWatchEncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationCloudWatchEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationCloudWatchEncryption)(nil)).Elem()
}

func (o SecurityConfigurationCloudWatchEncryptionOutput) ToSecurityConfigurationCloudWatchEncryptionOutput() SecurityConfigurationCloudWatchEncryptionOutput {
	return o
}

func (o SecurityConfigurationCloudWatchEncryptionOutput) ToSecurityConfigurationCloudWatchEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationCloudWatchEncryptionOutput {
	return o
}

func (o SecurityConfigurationCloudWatchEncryptionOutput) ToSecurityConfigurationCloudWatchEncryptionPtrOutput() SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return o.ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(context.Background())
}

func (o SecurityConfigurationCloudWatchEncryptionOutput) ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityConfigurationCloudWatchEncryption) *SecurityConfigurationCloudWatchEncryption {
		return &v
	}).(SecurityConfigurationCloudWatchEncryptionPtrOutput)
}

func (o SecurityConfigurationCloudWatchEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationCloudWatchEncryption] {
	return pulumix.Output[SecurityConfigurationCloudWatchEncryption]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationCloudWatchEncryptionOutput) CloudWatchEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationCloudWatchEncryption) *string { return v.CloudWatchEncryptionMode }).(pulumi.StringPtrOutput)
}

func (o SecurityConfigurationCloudWatchEncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationCloudWatchEncryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

type SecurityConfigurationCloudWatchEncryptionPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationCloudWatchEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationCloudWatchEncryption)(nil)).Elem()
}

func (o SecurityConfigurationCloudWatchEncryptionPtrOutput) ToSecurityConfigurationCloudWatchEncryptionPtrOutput() SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationCloudWatchEncryptionPtrOutput) ToSecurityConfigurationCloudWatchEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationCloudWatchEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationCloudWatchEncryption] {
	return pulumix.Output[*SecurityConfigurationCloudWatchEncryption]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationCloudWatchEncryptionPtrOutput) Elem() SecurityConfigurationCloudWatchEncryptionOutput {
	return o.ApplyT(func(v *SecurityConfigurationCloudWatchEncryption) SecurityConfigurationCloudWatchEncryption {
		if v != nil {
			return *v
		}
		var ret SecurityConfigurationCloudWatchEncryption
		return ret
	}).(SecurityConfigurationCloudWatchEncryptionOutput)
}

func (o SecurityConfigurationCloudWatchEncryptionPtrOutput) CloudWatchEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationCloudWatchEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CloudWatchEncryptionMode
	}).(pulumi.StringPtrOutput)
}

func (o SecurityConfigurationCloudWatchEncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationCloudWatchEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type SecurityConfigurationEncryptionConfiguration struct {
	CloudWatchEncryption   *SecurityConfigurationCloudWatchEncryption   `pulumi:"cloudWatchEncryption"`
	JobBookmarksEncryption *SecurityConfigurationJobBookmarksEncryption `pulumi:"jobBookmarksEncryption"`
	S3Encryptions          *SecurityConfigurationS3Encryptions          `pulumi:"s3Encryptions"`
}

// SecurityConfigurationEncryptionConfigurationInput is an input type that accepts SecurityConfigurationEncryptionConfigurationArgs and SecurityConfigurationEncryptionConfigurationOutput values.
// You can construct a concrete instance of `SecurityConfigurationEncryptionConfigurationInput` via:
//
//	SecurityConfigurationEncryptionConfigurationArgs{...}
type SecurityConfigurationEncryptionConfigurationInput interface {
	pulumi.Input

	ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput
	ToSecurityConfigurationEncryptionConfigurationOutputWithContext(context.Context) SecurityConfigurationEncryptionConfigurationOutput
}

type SecurityConfigurationEncryptionConfigurationArgs struct {
	CloudWatchEncryption   SecurityConfigurationCloudWatchEncryptionPtrInput   `pulumi:"cloudWatchEncryption"`
	JobBookmarksEncryption SecurityConfigurationJobBookmarksEncryptionPtrInput `pulumi:"jobBookmarksEncryption"`
	S3Encryptions          SecurityConfigurationS3EncryptionsPtrInput          `pulumi:"s3Encryptions"`
}

func (SecurityConfigurationEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput {
	return i.ToSecurityConfigurationEncryptionConfigurationOutputWithContext(context.Background())
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToSecurityConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationEncryptionConfigurationOutput)
}

func (i SecurityConfigurationEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationEncryptionConfiguration] {
	return pulumix.Output[SecurityConfigurationEncryptionConfiguration]{
		OutputState: i.ToSecurityConfigurationEncryptionConfigurationOutputWithContext(ctx).OutputState,
	}
}

type SecurityConfigurationEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationOutput() SecurityConfigurationEncryptionConfigurationOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToSecurityConfigurationEncryptionConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationEncryptionConfiguration] {
	return pulumix.Output[SecurityConfigurationEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationEncryptionConfigurationOutput) CloudWatchEncryption() SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationCloudWatchEncryption {
		return v.CloudWatchEncryption
	}).(SecurityConfigurationCloudWatchEncryptionPtrOutput)
}

func (o SecurityConfigurationEncryptionConfigurationOutput) JobBookmarksEncryption() SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationJobBookmarksEncryption {
		return v.JobBookmarksEncryption
	}).(SecurityConfigurationJobBookmarksEncryptionPtrOutput)
}

func (o SecurityConfigurationEncryptionConfigurationOutput) S3Encryptions() SecurityConfigurationS3EncryptionsPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationS3Encryptions {
		return v.S3Encryptions
	}).(SecurityConfigurationS3EncryptionsPtrOutput)
}

type SecurityConfigurationEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationEncryptionConfiguration)(nil)).Elem()
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) ToSecurityConfigurationEncryptionConfigurationPtrOutput() SecurityConfigurationEncryptionConfigurationPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) ToSecurityConfigurationEncryptionConfigurationPtrOutputWithContext(ctx context.Context) SecurityConfigurationEncryptionConfigurationPtrOutput {
	return o
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationEncryptionConfiguration] {
	return pulumix.Output[*SecurityConfigurationEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) Elem() SecurityConfigurationEncryptionConfigurationOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) SecurityConfigurationEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret SecurityConfigurationEncryptionConfiguration
		return ret
	}).(SecurityConfigurationEncryptionConfigurationOutput)
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) CloudWatchEncryption() SecurityConfigurationCloudWatchEncryptionPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationCloudWatchEncryption {
		if v == nil {
			return nil
		}
		return v.CloudWatchEncryption
	}).(SecurityConfigurationCloudWatchEncryptionPtrOutput)
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) JobBookmarksEncryption() SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationJobBookmarksEncryption {
		if v == nil {
			return nil
		}
		return v.JobBookmarksEncryption
	}).(SecurityConfigurationJobBookmarksEncryptionPtrOutput)
}

func (o SecurityConfigurationEncryptionConfigurationPtrOutput) S3Encryptions() SecurityConfigurationS3EncryptionsPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationEncryptionConfiguration) *SecurityConfigurationS3Encryptions {
		if v == nil {
			return nil
		}
		return v.S3Encryptions
	}).(SecurityConfigurationS3EncryptionsPtrOutput)
}

type SecurityConfigurationJobBookmarksEncryption struct {
	JobBookmarksEncryptionMode *string `pulumi:"jobBookmarksEncryptionMode"`
	KmsKeyArn                  *string `pulumi:"kmsKeyArn"`
}

// SecurityConfigurationJobBookmarksEncryptionInput is an input type that accepts SecurityConfigurationJobBookmarksEncryptionArgs and SecurityConfigurationJobBookmarksEncryptionOutput values.
// You can construct a concrete instance of `SecurityConfigurationJobBookmarksEncryptionInput` via:
//
//	SecurityConfigurationJobBookmarksEncryptionArgs{...}
type SecurityConfigurationJobBookmarksEncryptionInput interface {
	pulumi.Input

	ToSecurityConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationJobBookmarksEncryptionOutput
	ToSecurityConfigurationJobBookmarksEncryptionOutputWithContext(context.Context) SecurityConfigurationJobBookmarksEncryptionOutput
}

type SecurityConfigurationJobBookmarksEncryptionArgs struct {
	JobBookmarksEncryptionMode pulumi.StringPtrInput `pulumi:"jobBookmarksEncryptionMode"`
	KmsKeyArn                  pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
}

func (SecurityConfigurationJobBookmarksEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (i SecurityConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationJobBookmarksEncryptionOutput {
	return i.ToSecurityConfigurationJobBookmarksEncryptionOutputWithContext(context.Background())
}

func (i SecurityConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationJobBookmarksEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationJobBookmarksEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationJobBookmarksEncryptionOutput)
}

func (i SecurityConfigurationJobBookmarksEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationJobBookmarksEncryption] {
	return pulumix.Output[SecurityConfigurationJobBookmarksEncryption]{
		OutputState: i.ToSecurityConfigurationJobBookmarksEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i SecurityConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return i.ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Background())
}

func (i SecurityConfigurationJobBookmarksEncryptionArgs) ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationJobBookmarksEncryptionOutput).ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx)
}

// SecurityConfigurationJobBookmarksEncryptionPtrInput is an input type that accepts SecurityConfigurationJobBookmarksEncryptionArgs, SecurityConfigurationJobBookmarksEncryptionPtr and SecurityConfigurationJobBookmarksEncryptionPtrOutput values.
// You can construct a concrete instance of `SecurityConfigurationJobBookmarksEncryptionPtrInput` via:
//
//	        SecurityConfigurationJobBookmarksEncryptionArgs{...}
//
//	or:
//
//	        nil
type SecurityConfigurationJobBookmarksEncryptionPtrInput interface {
	pulumi.Input

	ToSecurityConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationJobBookmarksEncryptionPtrOutput
	ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Context) SecurityConfigurationJobBookmarksEncryptionPtrOutput
}

type securityConfigurationJobBookmarksEncryptionPtrType SecurityConfigurationJobBookmarksEncryptionArgs

func SecurityConfigurationJobBookmarksEncryptionPtr(v *SecurityConfigurationJobBookmarksEncryptionArgs) SecurityConfigurationJobBookmarksEncryptionPtrInput {
	return (*securityConfigurationJobBookmarksEncryptionPtrType)(v)
}

func (*securityConfigurationJobBookmarksEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (i *securityConfigurationJobBookmarksEncryptionPtrType) ToSecurityConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return i.ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Background())
}

func (i *securityConfigurationJobBookmarksEncryptionPtrType) ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationJobBookmarksEncryptionPtrOutput)
}

func (i *securityConfigurationJobBookmarksEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationJobBookmarksEncryption] {
	return pulumix.Output[*SecurityConfigurationJobBookmarksEncryption]{
		OutputState: i.ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type SecurityConfigurationJobBookmarksEncryptionOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationJobBookmarksEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (o SecurityConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationJobBookmarksEncryptionOutput() SecurityConfigurationJobBookmarksEncryptionOutput {
	return o
}

func (o SecurityConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationJobBookmarksEncryptionOutputWithContext(ctx context.Context) SecurityConfigurationJobBookmarksEncryptionOutput {
	return o
}

func (o SecurityConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return o.ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(context.Background())
}

func (o SecurityConfigurationJobBookmarksEncryptionOutput) ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityConfigurationJobBookmarksEncryption) *SecurityConfigurationJobBookmarksEncryption {
		return &v
	}).(SecurityConfigurationJobBookmarksEncryptionPtrOutput)
}

func (o SecurityConfigurationJobBookmarksEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationJobBookmarksEncryption] {
	return pulumix.Output[SecurityConfigurationJobBookmarksEncryption]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationJobBookmarksEncryptionOutput) JobBookmarksEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationJobBookmarksEncryption) *string { return v.JobBookmarksEncryptionMode }).(pulumi.StringPtrOutput)
}

func (o SecurityConfigurationJobBookmarksEncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityConfigurationJobBookmarksEncryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

type SecurityConfigurationJobBookmarksEncryptionPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationJobBookmarksEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationJobBookmarksEncryption)(nil)).Elem()
}

func (o SecurityConfigurationJobBookmarksEncryptionPtrOutput) ToSecurityConfigurationJobBookmarksEncryptionPtrOutput() SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationJobBookmarksEncryptionPtrOutput) ToSecurityConfigurationJobBookmarksEncryptionPtrOutputWithContext(ctx context.Context) SecurityConfigurationJobBookmarksEncryptionPtrOutput {
	return o
}

func (o SecurityConfigurationJobBookmarksEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationJobBookmarksEncryption] {
	return pulumix.Output[*SecurityConfigurationJobBookmarksEncryption]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationJobBookmarksEncryptionPtrOutput) Elem() SecurityConfigurationJobBookmarksEncryptionOutput {
	return o.ApplyT(func(v *SecurityConfigurationJobBookmarksEncryption) SecurityConfigurationJobBookmarksEncryption {
		if v != nil {
			return *v
		}
		var ret SecurityConfigurationJobBookmarksEncryption
		return ret
	}).(SecurityConfigurationJobBookmarksEncryptionOutput)
}

func (o SecurityConfigurationJobBookmarksEncryptionPtrOutput) JobBookmarksEncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationJobBookmarksEncryption) *string {
		if v == nil {
			return nil
		}
		return v.JobBookmarksEncryptionMode
	}).(pulumi.StringPtrOutput)
}

func (o SecurityConfigurationJobBookmarksEncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfigurationJobBookmarksEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type SecurityConfigurationS3Encryptions struct {
}

// SecurityConfigurationS3EncryptionsInput is an input type that accepts SecurityConfigurationS3EncryptionsArgs and SecurityConfigurationS3EncryptionsOutput values.
// You can construct a concrete instance of `SecurityConfigurationS3EncryptionsInput` via:
//
//	SecurityConfigurationS3EncryptionsArgs{...}
type SecurityConfigurationS3EncryptionsInput interface {
	pulumi.Input

	ToSecurityConfigurationS3EncryptionsOutput() SecurityConfigurationS3EncryptionsOutput
	ToSecurityConfigurationS3EncryptionsOutputWithContext(context.Context) SecurityConfigurationS3EncryptionsOutput
}

type SecurityConfigurationS3EncryptionsArgs struct {
}

func (SecurityConfigurationS3EncryptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationS3Encryptions)(nil)).Elem()
}

func (i SecurityConfigurationS3EncryptionsArgs) ToSecurityConfigurationS3EncryptionsOutput() SecurityConfigurationS3EncryptionsOutput {
	return i.ToSecurityConfigurationS3EncryptionsOutputWithContext(context.Background())
}

func (i SecurityConfigurationS3EncryptionsArgs) ToSecurityConfigurationS3EncryptionsOutputWithContext(ctx context.Context) SecurityConfigurationS3EncryptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationS3EncryptionsOutput)
}

func (i SecurityConfigurationS3EncryptionsArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationS3Encryptions] {
	return pulumix.Output[SecurityConfigurationS3Encryptions]{
		OutputState: i.ToSecurityConfigurationS3EncryptionsOutputWithContext(ctx).OutputState,
	}
}

func (i SecurityConfigurationS3EncryptionsArgs) ToSecurityConfigurationS3EncryptionsPtrOutput() SecurityConfigurationS3EncryptionsPtrOutput {
	return i.ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(context.Background())
}

func (i SecurityConfigurationS3EncryptionsArgs) ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(ctx context.Context) SecurityConfigurationS3EncryptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationS3EncryptionsOutput).ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(ctx)
}

// SecurityConfigurationS3EncryptionsPtrInput is an input type that accepts SecurityConfigurationS3EncryptionsArgs, SecurityConfigurationS3EncryptionsPtr and SecurityConfigurationS3EncryptionsPtrOutput values.
// You can construct a concrete instance of `SecurityConfigurationS3EncryptionsPtrInput` via:
//
//	        SecurityConfigurationS3EncryptionsArgs{...}
//
//	or:
//
//	        nil
type SecurityConfigurationS3EncryptionsPtrInput interface {
	pulumi.Input

	ToSecurityConfigurationS3EncryptionsPtrOutput() SecurityConfigurationS3EncryptionsPtrOutput
	ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(context.Context) SecurityConfigurationS3EncryptionsPtrOutput
}

type securityConfigurationS3EncryptionsPtrType SecurityConfigurationS3EncryptionsArgs

func SecurityConfigurationS3EncryptionsPtr(v *SecurityConfigurationS3EncryptionsArgs) SecurityConfigurationS3EncryptionsPtrInput {
	return (*securityConfigurationS3EncryptionsPtrType)(v)
}

func (*securityConfigurationS3EncryptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationS3Encryptions)(nil)).Elem()
}

func (i *securityConfigurationS3EncryptionsPtrType) ToSecurityConfigurationS3EncryptionsPtrOutput() SecurityConfigurationS3EncryptionsPtrOutput {
	return i.ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(context.Background())
}

func (i *securityConfigurationS3EncryptionsPtrType) ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(ctx context.Context) SecurityConfigurationS3EncryptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationS3EncryptionsPtrOutput)
}

func (i *securityConfigurationS3EncryptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationS3Encryptions] {
	return pulumix.Output[*SecurityConfigurationS3Encryptions]{
		OutputState: i.ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type SecurityConfigurationS3EncryptionsOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationS3EncryptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigurationS3Encryptions)(nil)).Elem()
}

func (o SecurityConfigurationS3EncryptionsOutput) ToSecurityConfigurationS3EncryptionsOutput() SecurityConfigurationS3EncryptionsOutput {
	return o
}

func (o SecurityConfigurationS3EncryptionsOutput) ToSecurityConfigurationS3EncryptionsOutputWithContext(ctx context.Context) SecurityConfigurationS3EncryptionsOutput {
	return o
}

func (o SecurityConfigurationS3EncryptionsOutput) ToSecurityConfigurationS3EncryptionsPtrOutput() SecurityConfigurationS3EncryptionsPtrOutput {
	return o.ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(context.Background())
}

func (o SecurityConfigurationS3EncryptionsOutput) ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(ctx context.Context) SecurityConfigurationS3EncryptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityConfigurationS3Encryptions) *SecurityConfigurationS3Encryptions {
		return &v
	}).(SecurityConfigurationS3EncryptionsPtrOutput)
}

func (o SecurityConfigurationS3EncryptionsOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigurationS3Encryptions] {
	return pulumix.Output[SecurityConfigurationS3Encryptions]{
		OutputState: o.OutputState,
	}
}

type SecurityConfigurationS3EncryptionsPtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationS3EncryptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigurationS3Encryptions)(nil)).Elem()
}

func (o SecurityConfigurationS3EncryptionsPtrOutput) ToSecurityConfigurationS3EncryptionsPtrOutput() SecurityConfigurationS3EncryptionsPtrOutput {
	return o
}

func (o SecurityConfigurationS3EncryptionsPtrOutput) ToSecurityConfigurationS3EncryptionsPtrOutputWithContext(ctx context.Context) SecurityConfigurationS3EncryptionsPtrOutput {
	return o
}

func (o SecurityConfigurationS3EncryptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigurationS3Encryptions] {
	return pulumix.Output[*SecurityConfigurationS3Encryptions]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigurationS3EncryptionsPtrOutput) Elem() SecurityConfigurationS3EncryptionsOutput {
	return o.ApplyT(func(v *SecurityConfigurationS3Encryptions) SecurityConfigurationS3Encryptions {
		if v != nil {
			return *v
		}
		var ret SecurityConfigurationS3Encryptions
		return ret
	}).(SecurityConfigurationS3EncryptionsOutput)
}

type TableColumn struct {
	Comment *string `pulumi:"comment"`
	Name    string  `pulumi:"name"`
	Type    *string `pulumi:"type"`
}

// TableColumnInput is an input type that accepts TableColumnArgs and TableColumnOutput values.
// You can construct a concrete instance of `TableColumnInput` via:
//
//	TableColumnArgs{...}
type TableColumnInput interface {
	pulumi.Input

	ToTableColumnOutput() TableColumnOutput
	ToTableColumnOutputWithContext(context.Context) TableColumnOutput
}

type TableColumnArgs struct {
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	Name    pulumi.StringInput    `pulumi:"name"`
	Type    pulumi.StringPtrInput `pulumi:"type"`
}

func (TableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (i TableColumnArgs) ToTableColumnOutput() TableColumnOutput {
	return i.ToTableColumnOutputWithContext(context.Background())
}

func (i TableColumnArgs) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnOutput)
}

func (i TableColumnArgs) ToOutput(ctx context.Context) pulumix.Output[TableColumn] {
	return pulumix.Output[TableColumn]{
		OutputState: i.ToTableColumnOutputWithContext(ctx).OutputState,
	}
}

// TableColumnArrayInput is an input type that accepts TableColumnArray and TableColumnArrayOutput values.
// You can construct a concrete instance of `TableColumnArrayInput` via:
//
//	TableColumnArray{ TableColumnArgs{...} }
type TableColumnArrayInput interface {
	pulumi.Input

	ToTableColumnArrayOutput() TableColumnArrayOutput
	ToTableColumnArrayOutputWithContext(context.Context) TableColumnArrayOutput
}

type TableColumnArray []TableColumnInput

func (TableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (i TableColumnArray) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return i.ToTableColumnArrayOutputWithContext(context.Background())
}

func (i TableColumnArray) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnArrayOutput)
}

func (i TableColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]TableColumn] {
	return pulumix.Output[[]TableColumn]{
		OutputState: i.ToTableColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type TableColumnOutput struct{ *pulumi.OutputState }

func (TableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (o TableColumnOutput) ToTableColumnOutput() TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToOutput(ctx context.Context) pulumix.Output[TableColumn] {
	return pulumix.Output[TableColumn]{
		OutputState: o.OutputState,
	}
}

func (o TableColumnOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumn) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o TableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o TableColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TableColumnArrayOutput struct{ *pulumi.OutputState }

func (TableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TableColumn] {
	return pulumix.Output[[]TableColumn]{
		OutputState: o.OutputState,
	}
}

func (o TableColumnArrayOutput) Index(i pulumi.IntInput) TableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumn {
		return vs[0].([]TableColumn)[vs[1].(int)]
	}).(TableColumnOutput)
}

type TableIcebergInput struct {
	MetadataOperation *TableMetadataOperation `pulumi:"metadataOperation"`
	Version           *string                 `pulumi:"version"`
}

// TableIcebergInputInput is an input type that accepts TableIcebergInputArgs and TableIcebergInputOutput values.
// You can construct a concrete instance of `TableIcebergInputInput` via:
//
//	TableIcebergInputArgs{...}
type TableIcebergInputInput interface {
	pulumi.Input

	ToTableIcebergInputOutput() TableIcebergInputOutput
	ToTableIcebergInputOutputWithContext(context.Context) TableIcebergInputOutput
}

type TableIcebergInputArgs struct {
	MetadataOperation TableMetadataOperationPtrInput `pulumi:"metadataOperation"`
	Version           pulumi.StringPtrInput          `pulumi:"version"`
}

func (TableIcebergInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableIcebergInput)(nil)).Elem()
}

func (i TableIcebergInputArgs) ToTableIcebergInputOutput() TableIcebergInputOutput {
	return i.ToTableIcebergInputOutputWithContext(context.Background())
}

func (i TableIcebergInputArgs) ToTableIcebergInputOutputWithContext(ctx context.Context) TableIcebergInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableIcebergInputOutput)
}

func (i TableIcebergInputArgs) ToOutput(ctx context.Context) pulumix.Output[TableIcebergInput] {
	return pulumix.Output[TableIcebergInput]{
		OutputState: i.ToTableIcebergInputOutputWithContext(ctx).OutputState,
	}
}

func (i TableIcebergInputArgs) ToTableIcebergInputPtrOutput() TableIcebergInputPtrOutput {
	return i.ToTableIcebergInputPtrOutputWithContext(context.Background())
}

func (i TableIcebergInputArgs) ToTableIcebergInputPtrOutputWithContext(ctx context.Context) TableIcebergInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableIcebergInputOutput).ToTableIcebergInputPtrOutputWithContext(ctx)
}

// TableIcebergInputPtrInput is an input type that accepts TableIcebergInputArgs, TableIcebergInputPtr and TableIcebergInputPtrOutput values.
// You can construct a concrete instance of `TableIcebergInputPtrInput` via:
//
//	        TableIcebergInputArgs{...}
//
//	or:
//
//	        nil
type TableIcebergInputPtrInput interface {
	pulumi.Input

	ToTableIcebergInputPtrOutput() TableIcebergInputPtrOutput
	ToTableIcebergInputPtrOutputWithContext(context.Context) TableIcebergInputPtrOutput
}

type tableIcebergInputPtrType TableIcebergInputArgs

func TableIcebergInputPtr(v *TableIcebergInputArgs) TableIcebergInputPtrInput {
	return (*tableIcebergInputPtrType)(v)
}

func (*tableIcebergInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableIcebergInput)(nil)).Elem()
}

func (i *tableIcebergInputPtrType) ToTableIcebergInputPtrOutput() TableIcebergInputPtrOutput {
	return i.ToTableIcebergInputPtrOutputWithContext(context.Background())
}

func (i *tableIcebergInputPtrType) ToTableIcebergInputPtrOutputWithContext(ctx context.Context) TableIcebergInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableIcebergInputPtrOutput)
}

func (i *tableIcebergInputPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableIcebergInput] {
	return pulumix.Output[*TableIcebergInput]{
		OutputState: i.ToTableIcebergInputPtrOutputWithContext(ctx).OutputState,
	}
}

type TableIcebergInputOutput struct{ *pulumi.OutputState }

func (TableIcebergInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableIcebergInput)(nil)).Elem()
}

func (o TableIcebergInputOutput) ToTableIcebergInputOutput() TableIcebergInputOutput {
	return o
}

func (o TableIcebergInputOutput) ToTableIcebergInputOutputWithContext(ctx context.Context) TableIcebergInputOutput {
	return o
}

func (o TableIcebergInputOutput) ToTableIcebergInputPtrOutput() TableIcebergInputPtrOutput {
	return o.ToTableIcebergInputPtrOutputWithContext(context.Background())
}

func (o TableIcebergInputOutput) ToTableIcebergInputPtrOutputWithContext(ctx context.Context) TableIcebergInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableIcebergInput) *TableIcebergInput {
		return &v
	}).(TableIcebergInputPtrOutput)
}

func (o TableIcebergInputOutput) ToOutput(ctx context.Context) pulumix.Output[TableIcebergInput] {
	return pulumix.Output[TableIcebergInput]{
		OutputState: o.OutputState,
	}
}

func (o TableIcebergInputOutput) MetadataOperation() TableMetadataOperationPtrOutput {
	return o.ApplyT(func(v TableIcebergInput) *TableMetadataOperation { return v.MetadataOperation }).(TableMetadataOperationPtrOutput)
}

func (o TableIcebergInputOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableIcebergInput) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type TableIcebergInputPtrOutput struct{ *pulumi.OutputState }

func (TableIcebergInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableIcebergInput)(nil)).Elem()
}

func (o TableIcebergInputPtrOutput) ToTableIcebergInputPtrOutput() TableIcebergInputPtrOutput {
	return o
}

func (o TableIcebergInputPtrOutput) ToTableIcebergInputPtrOutputWithContext(ctx context.Context) TableIcebergInputPtrOutput {
	return o
}

func (o TableIcebergInputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableIcebergInput] {
	return pulumix.Output[*TableIcebergInput]{
		OutputState: o.OutputState,
	}
}

func (o TableIcebergInputPtrOutput) Elem() TableIcebergInputOutput {
	return o.ApplyT(func(v *TableIcebergInput) TableIcebergInput {
		if v != nil {
			return *v
		}
		var ret TableIcebergInput
		return ret
	}).(TableIcebergInputOutput)
}

func (o TableIcebergInputPtrOutput) MetadataOperation() TableMetadataOperationPtrOutput {
	return o.ApplyT(func(v *TableIcebergInput) *TableMetadataOperation {
		if v == nil {
			return nil
		}
		return v.MetadataOperation
	}).(TableMetadataOperationPtrOutput)
}

func (o TableIcebergInputPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableIcebergInput) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type TableIdentifier struct {
	CatalogId    *string `pulumi:"catalogId"`
	DatabaseName *string `pulumi:"databaseName"`
	Name         *string `pulumi:"name"`
	Region       *string `pulumi:"region"`
}

// TableIdentifierInput is an input type that accepts TableIdentifierArgs and TableIdentifierOutput values.
// You can construct a concrete instance of `TableIdentifierInput` via:
//
//	TableIdentifierArgs{...}
type TableIdentifierInput interface {
	pulumi.Input

	ToTableIdentifierOutput() TableIdentifierOutput
	ToTableIdentifierOutputWithContext(context.Context) TableIdentifierOutput
}

type TableIdentifierArgs struct {
	CatalogId    pulumi.StringPtrInput `pulumi:"catalogId"`
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
	Region       pulumi.StringPtrInput `pulumi:"region"`
}

func (TableIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableIdentifier)(nil)).Elem()
}

func (i TableIdentifierArgs) ToTableIdentifierOutput() TableIdentifierOutput {
	return i.ToTableIdentifierOutputWithContext(context.Background())
}

func (i TableIdentifierArgs) ToTableIdentifierOutputWithContext(ctx context.Context) TableIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableIdentifierOutput)
}

func (i TableIdentifierArgs) ToOutput(ctx context.Context) pulumix.Output[TableIdentifier] {
	return pulumix.Output[TableIdentifier]{
		OutputState: i.ToTableIdentifierOutputWithContext(ctx).OutputState,
	}
}

func (i TableIdentifierArgs) ToTableIdentifierPtrOutput() TableIdentifierPtrOutput {
	return i.ToTableIdentifierPtrOutputWithContext(context.Background())
}

func (i TableIdentifierArgs) ToTableIdentifierPtrOutputWithContext(ctx context.Context) TableIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableIdentifierOutput).ToTableIdentifierPtrOutputWithContext(ctx)
}

// TableIdentifierPtrInput is an input type that accepts TableIdentifierArgs, TableIdentifierPtr and TableIdentifierPtrOutput values.
// You can construct a concrete instance of `TableIdentifierPtrInput` via:
//
//	        TableIdentifierArgs{...}
//
//	or:
//
//	        nil
type TableIdentifierPtrInput interface {
	pulumi.Input

	ToTableIdentifierPtrOutput() TableIdentifierPtrOutput
	ToTableIdentifierPtrOutputWithContext(context.Context) TableIdentifierPtrOutput
}

type tableIdentifierPtrType TableIdentifierArgs

func TableIdentifierPtr(v *TableIdentifierArgs) TableIdentifierPtrInput {
	return (*tableIdentifierPtrType)(v)
}

func (*tableIdentifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableIdentifier)(nil)).Elem()
}

func (i *tableIdentifierPtrType) ToTableIdentifierPtrOutput() TableIdentifierPtrOutput {
	return i.ToTableIdentifierPtrOutputWithContext(context.Background())
}

func (i *tableIdentifierPtrType) ToTableIdentifierPtrOutputWithContext(ctx context.Context) TableIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableIdentifierPtrOutput)
}

func (i *tableIdentifierPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableIdentifier] {
	return pulumix.Output[*TableIdentifier]{
		OutputState: i.ToTableIdentifierPtrOutputWithContext(ctx).OutputState,
	}
}

type TableIdentifierOutput struct{ *pulumi.OutputState }

func (TableIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableIdentifier)(nil)).Elem()
}

func (o TableIdentifierOutput) ToTableIdentifierOutput() TableIdentifierOutput {
	return o
}

func (o TableIdentifierOutput) ToTableIdentifierOutputWithContext(ctx context.Context) TableIdentifierOutput {
	return o
}

func (o TableIdentifierOutput) ToTableIdentifierPtrOutput() TableIdentifierPtrOutput {
	return o.ToTableIdentifierPtrOutputWithContext(context.Background())
}

func (o TableIdentifierOutput) ToTableIdentifierPtrOutputWithContext(ctx context.Context) TableIdentifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableIdentifier) *TableIdentifier {
		return &v
	}).(TableIdentifierPtrOutput)
}

func (o TableIdentifierOutput) ToOutput(ctx context.Context) pulumix.Output[TableIdentifier] {
	return pulumix.Output[TableIdentifier]{
		OutputState: o.OutputState,
	}
}

func (o TableIdentifierOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableIdentifier) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o TableIdentifierOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableIdentifier) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

func (o TableIdentifierOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableIdentifier) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TableIdentifierOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableIdentifier) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type TableIdentifierPtrOutput struct{ *pulumi.OutputState }

func (TableIdentifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableIdentifier)(nil)).Elem()
}

func (o TableIdentifierPtrOutput) ToTableIdentifierPtrOutput() TableIdentifierPtrOutput {
	return o
}

func (o TableIdentifierPtrOutput) ToTableIdentifierPtrOutputWithContext(ctx context.Context) TableIdentifierPtrOutput {
	return o
}

func (o TableIdentifierPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableIdentifier] {
	return pulumix.Output[*TableIdentifier]{
		OutputState: o.OutputState,
	}
}

func (o TableIdentifierPtrOutput) Elem() TableIdentifierOutput {
	return o.ApplyT(func(v *TableIdentifier) TableIdentifier {
		if v != nil {
			return *v
		}
		var ret TableIdentifier
		return ret
	}).(TableIdentifierOutput)
}

func (o TableIdentifierPtrOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.CatalogId
	}).(pulumi.StringPtrOutput)
}

func (o TableIdentifierPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

func (o TableIdentifierPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o TableIdentifierPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

type TableInputType struct {
	Description       *string                 `pulumi:"description"`
	Name              *string                 `pulumi:"name"`
	Owner             *string                 `pulumi:"owner"`
	Parameters        interface{}             `pulumi:"parameters"`
	PartitionKeys     []TableColumn           `pulumi:"partitionKeys"`
	Retention         *int                    `pulumi:"retention"`
	StorageDescriptor *TableStorageDescriptor `pulumi:"storageDescriptor"`
	TableType         *string                 `pulumi:"tableType"`
	TargetTable       *TableIdentifier        `pulumi:"targetTable"`
	ViewExpandedText  *string                 `pulumi:"viewExpandedText"`
	ViewOriginalText  *string                 `pulumi:"viewOriginalText"`
}

// TableInputTypeInput is an input type that accepts TableInputTypeArgs and TableInputTypeOutput values.
// You can construct a concrete instance of `TableInputTypeInput` via:
//
//	TableInputTypeArgs{...}
type TableInputTypeInput interface {
	pulumi.Input

	ToTableInputTypeOutput() TableInputTypeOutput
	ToTableInputTypeOutputWithContext(context.Context) TableInputTypeOutput
}

type TableInputTypeArgs struct {
	Description       pulumi.StringPtrInput          `pulumi:"description"`
	Name              pulumi.StringPtrInput          `pulumi:"name"`
	Owner             pulumi.StringPtrInput          `pulumi:"owner"`
	Parameters        pulumi.Input                   `pulumi:"parameters"`
	PartitionKeys     TableColumnArrayInput          `pulumi:"partitionKeys"`
	Retention         pulumi.IntPtrInput             `pulumi:"retention"`
	StorageDescriptor TableStorageDescriptorPtrInput `pulumi:"storageDescriptor"`
	TableType         pulumi.StringPtrInput          `pulumi:"tableType"`
	TargetTable       TableIdentifierPtrInput        `pulumi:"targetTable"`
	ViewExpandedText  pulumi.StringPtrInput          `pulumi:"viewExpandedText"`
	ViewOriginalText  pulumi.StringPtrInput          `pulumi:"viewOriginalText"`
}

func (TableInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableInputType)(nil)).Elem()
}

func (i TableInputTypeArgs) ToTableInputTypeOutput() TableInputTypeOutput {
	return i.ToTableInputTypeOutputWithContext(context.Background())
}

func (i TableInputTypeArgs) ToTableInputTypeOutputWithContext(ctx context.Context) TableInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableInputTypeOutput)
}

func (i TableInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[TableInputType] {
	return pulumix.Output[TableInputType]{
		OutputState: i.ToTableInputTypeOutputWithContext(ctx).OutputState,
	}
}

type TableInputTypeOutput struct{ *pulumi.OutputState }

func (TableInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableInputType)(nil)).Elem()
}

func (o TableInputTypeOutput) ToTableInputTypeOutput() TableInputTypeOutput {
	return o
}

func (o TableInputTypeOutput) ToTableInputTypeOutputWithContext(ctx context.Context) TableInputTypeOutput {
	return o
}

func (o TableInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TableInputType] {
	return pulumix.Output[TableInputType]{
		OutputState: o.OutputState,
	}
}

func (o TableInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TableInputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableInputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TableInputTypeOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableInputType) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

func (o TableInputTypeOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v TableInputType) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

func (o TableInputTypeOutput) PartitionKeys() TableColumnArrayOutput {
	return o.ApplyT(func(v TableInputType) []TableColumn { return v.PartitionKeys }).(TableColumnArrayOutput)
}

func (o TableInputTypeOutput) Retention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableInputType) *int { return v.Retention }).(pulumi.IntPtrOutput)
}

func (o TableInputTypeOutput) StorageDescriptor() TableStorageDescriptorPtrOutput {
	return o.ApplyT(func(v TableInputType) *TableStorageDescriptor { return v.StorageDescriptor }).(TableStorageDescriptorPtrOutput)
}

func (o TableInputTypeOutput) TableType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableInputType) *string { return v.TableType }).(pulumi.StringPtrOutput)
}

func (o TableInputTypeOutput) TargetTable() TableIdentifierPtrOutput {
	return o.ApplyT(func(v TableInputType) *TableIdentifier { return v.TargetTable }).(TableIdentifierPtrOutput)
}

func (o TableInputTypeOutput) ViewExpandedText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableInputType) *string { return v.ViewExpandedText }).(pulumi.StringPtrOutput)
}

func (o TableInputTypeOutput) ViewOriginalText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableInputType) *string { return v.ViewOriginalText }).(pulumi.StringPtrOutput)
}

type TableInputTypePtrOutput struct{ *pulumi.OutputState }

func (TableInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableInputType)(nil)).Elem()
}

func (o TableInputTypePtrOutput) ToTableInputTypePtrOutput() TableInputTypePtrOutput {
	return o
}

func (o TableInputTypePtrOutput) ToTableInputTypePtrOutputWithContext(ctx context.Context) TableInputTypePtrOutput {
	return o
}

func (o TableInputTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableInputType] {
	return pulumix.Output[*TableInputType]{
		OutputState: o.OutputState,
	}
}

func (o TableInputTypePtrOutput) Elem() TableInputTypeOutput {
	return o.ApplyT(func(v *TableInputType) TableInputType {
		if v != nil {
			return *v
		}
		var ret TableInputType
		return ret
	}).(TableInputTypeOutput)
}

func (o TableInputTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableInputType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o TableInputTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableInputType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o TableInputTypePtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableInputType) *string {
		if v == nil {
			return nil
		}
		return v.Owner
	}).(pulumi.StringPtrOutput)
}

func (o TableInputTypePtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableInputType) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

func (o TableInputTypePtrOutput) PartitionKeys() TableColumnArrayOutput {
	return o.ApplyT(func(v *TableInputType) []TableColumn {
		if v == nil {
			return nil
		}
		return v.PartitionKeys
	}).(TableColumnArrayOutput)
}

func (o TableInputTypePtrOutput) Retention() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableInputType) *int {
		if v == nil {
			return nil
		}
		return v.Retention
	}).(pulumi.IntPtrOutput)
}

func (o TableInputTypePtrOutput) StorageDescriptor() TableStorageDescriptorPtrOutput {
	return o.ApplyT(func(v *TableInputType) *TableStorageDescriptor {
		if v == nil {
			return nil
		}
		return v.StorageDescriptor
	}).(TableStorageDescriptorPtrOutput)
}

func (o TableInputTypePtrOutput) TableType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableInputType) *string {
		if v == nil {
			return nil
		}
		return v.TableType
	}).(pulumi.StringPtrOutput)
}

func (o TableInputTypePtrOutput) TargetTable() TableIdentifierPtrOutput {
	return o.ApplyT(func(v *TableInputType) *TableIdentifier {
		if v == nil {
			return nil
		}
		return v.TargetTable
	}).(TableIdentifierPtrOutput)
}

func (o TableInputTypePtrOutput) ViewExpandedText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableInputType) *string {
		if v == nil {
			return nil
		}
		return v.ViewExpandedText
	}).(pulumi.StringPtrOutput)
}

func (o TableInputTypePtrOutput) ViewOriginalText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableInputType) *string {
		if v == nil {
			return nil
		}
		return v.ViewOriginalText
	}).(pulumi.StringPtrOutput)
}

type TableMetadataOperation struct {
}

// TableMetadataOperationInput is an input type that accepts TableMetadataOperationArgs and TableMetadataOperationOutput values.
// You can construct a concrete instance of `TableMetadataOperationInput` via:
//
//	TableMetadataOperationArgs{...}
type TableMetadataOperationInput interface {
	pulumi.Input

	ToTableMetadataOperationOutput() TableMetadataOperationOutput
	ToTableMetadataOperationOutputWithContext(context.Context) TableMetadataOperationOutput
}

type TableMetadataOperationArgs struct {
}

func (TableMetadataOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMetadataOperation)(nil)).Elem()
}

func (i TableMetadataOperationArgs) ToTableMetadataOperationOutput() TableMetadataOperationOutput {
	return i.ToTableMetadataOperationOutputWithContext(context.Background())
}

func (i TableMetadataOperationArgs) ToTableMetadataOperationOutputWithContext(ctx context.Context) TableMetadataOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMetadataOperationOutput)
}

func (i TableMetadataOperationArgs) ToOutput(ctx context.Context) pulumix.Output[TableMetadataOperation] {
	return pulumix.Output[TableMetadataOperation]{
		OutputState: i.ToTableMetadataOperationOutputWithContext(ctx).OutputState,
	}
}

func (i TableMetadataOperationArgs) ToTableMetadataOperationPtrOutput() TableMetadataOperationPtrOutput {
	return i.ToTableMetadataOperationPtrOutputWithContext(context.Background())
}

func (i TableMetadataOperationArgs) ToTableMetadataOperationPtrOutputWithContext(ctx context.Context) TableMetadataOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMetadataOperationOutput).ToTableMetadataOperationPtrOutputWithContext(ctx)
}

// TableMetadataOperationPtrInput is an input type that accepts TableMetadataOperationArgs, TableMetadataOperationPtr and TableMetadataOperationPtrOutput values.
// You can construct a concrete instance of `TableMetadataOperationPtrInput` via:
//
//	        TableMetadataOperationArgs{...}
//
//	or:
//
//	        nil
type TableMetadataOperationPtrInput interface {
	pulumi.Input

	ToTableMetadataOperationPtrOutput() TableMetadataOperationPtrOutput
	ToTableMetadataOperationPtrOutputWithContext(context.Context) TableMetadataOperationPtrOutput
}

type tableMetadataOperationPtrType TableMetadataOperationArgs

func TableMetadataOperationPtr(v *TableMetadataOperationArgs) TableMetadataOperationPtrInput {
	return (*tableMetadataOperationPtrType)(v)
}

func (*tableMetadataOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMetadataOperation)(nil)).Elem()
}

func (i *tableMetadataOperationPtrType) ToTableMetadataOperationPtrOutput() TableMetadataOperationPtrOutput {
	return i.ToTableMetadataOperationPtrOutputWithContext(context.Background())
}

func (i *tableMetadataOperationPtrType) ToTableMetadataOperationPtrOutputWithContext(ctx context.Context) TableMetadataOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMetadataOperationPtrOutput)
}

func (i *tableMetadataOperationPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableMetadataOperation] {
	return pulumix.Output[*TableMetadataOperation]{
		OutputState: i.ToTableMetadataOperationPtrOutputWithContext(ctx).OutputState,
	}
}

type TableMetadataOperationOutput struct{ *pulumi.OutputState }

func (TableMetadataOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMetadataOperation)(nil)).Elem()
}

func (o TableMetadataOperationOutput) ToTableMetadataOperationOutput() TableMetadataOperationOutput {
	return o
}

func (o TableMetadataOperationOutput) ToTableMetadataOperationOutputWithContext(ctx context.Context) TableMetadataOperationOutput {
	return o
}

func (o TableMetadataOperationOutput) ToTableMetadataOperationPtrOutput() TableMetadataOperationPtrOutput {
	return o.ToTableMetadataOperationPtrOutputWithContext(context.Background())
}

func (o TableMetadataOperationOutput) ToTableMetadataOperationPtrOutputWithContext(ctx context.Context) TableMetadataOperationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableMetadataOperation) *TableMetadataOperation {
		return &v
	}).(TableMetadataOperationPtrOutput)
}

func (o TableMetadataOperationOutput) ToOutput(ctx context.Context) pulumix.Output[TableMetadataOperation] {
	return pulumix.Output[TableMetadataOperation]{
		OutputState: o.OutputState,
	}
}

type TableMetadataOperationPtrOutput struct{ *pulumi.OutputState }

func (TableMetadataOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableMetadataOperation)(nil)).Elem()
}

func (o TableMetadataOperationPtrOutput) ToTableMetadataOperationPtrOutput() TableMetadataOperationPtrOutput {
	return o
}

func (o TableMetadataOperationPtrOutput) ToTableMetadataOperationPtrOutputWithContext(ctx context.Context) TableMetadataOperationPtrOutput {
	return o
}

func (o TableMetadataOperationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableMetadataOperation] {
	return pulumix.Output[*TableMetadataOperation]{
		OutputState: o.OutputState,
	}
}

func (o TableMetadataOperationPtrOutput) Elem() TableMetadataOperationOutput {
	return o.ApplyT(func(v *TableMetadataOperation) TableMetadataOperation {
		if v != nil {
			return *v
		}
		var ret TableMetadataOperation
		return ret
	}).(TableMetadataOperationOutput)
}

type TableOpenTableFormatInput struct {
	IcebergInput *TableIcebergInput `pulumi:"icebergInput"`
}

// TableOpenTableFormatInputInput is an input type that accepts TableOpenTableFormatInputArgs and TableOpenTableFormatInputOutput values.
// You can construct a concrete instance of `TableOpenTableFormatInputInput` via:
//
//	TableOpenTableFormatInputArgs{...}
type TableOpenTableFormatInputInput interface {
	pulumi.Input

	ToTableOpenTableFormatInputOutput() TableOpenTableFormatInputOutput
	ToTableOpenTableFormatInputOutputWithContext(context.Context) TableOpenTableFormatInputOutput
}

type TableOpenTableFormatInputArgs struct {
	IcebergInput TableIcebergInputPtrInput `pulumi:"icebergInput"`
}

func (TableOpenTableFormatInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableOpenTableFormatInput)(nil)).Elem()
}

func (i TableOpenTableFormatInputArgs) ToTableOpenTableFormatInputOutput() TableOpenTableFormatInputOutput {
	return i.ToTableOpenTableFormatInputOutputWithContext(context.Background())
}

func (i TableOpenTableFormatInputArgs) ToTableOpenTableFormatInputOutputWithContext(ctx context.Context) TableOpenTableFormatInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOpenTableFormatInputOutput)
}

func (i TableOpenTableFormatInputArgs) ToOutput(ctx context.Context) pulumix.Output[TableOpenTableFormatInput] {
	return pulumix.Output[TableOpenTableFormatInput]{
		OutputState: i.ToTableOpenTableFormatInputOutputWithContext(ctx).OutputState,
	}
}

func (i TableOpenTableFormatInputArgs) ToTableOpenTableFormatInputPtrOutput() TableOpenTableFormatInputPtrOutput {
	return i.ToTableOpenTableFormatInputPtrOutputWithContext(context.Background())
}

func (i TableOpenTableFormatInputArgs) ToTableOpenTableFormatInputPtrOutputWithContext(ctx context.Context) TableOpenTableFormatInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOpenTableFormatInputOutput).ToTableOpenTableFormatInputPtrOutputWithContext(ctx)
}

// TableOpenTableFormatInputPtrInput is an input type that accepts TableOpenTableFormatInputArgs, TableOpenTableFormatInputPtr and TableOpenTableFormatInputPtrOutput values.
// You can construct a concrete instance of `TableOpenTableFormatInputPtrInput` via:
//
//	        TableOpenTableFormatInputArgs{...}
//
//	or:
//
//	        nil
type TableOpenTableFormatInputPtrInput interface {
	pulumi.Input

	ToTableOpenTableFormatInputPtrOutput() TableOpenTableFormatInputPtrOutput
	ToTableOpenTableFormatInputPtrOutputWithContext(context.Context) TableOpenTableFormatInputPtrOutput
}

type tableOpenTableFormatInputPtrType TableOpenTableFormatInputArgs

func TableOpenTableFormatInputPtr(v *TableOpenTableFormatInputArgs) TableOpenTableFormatInputPtrInput {
	return (*tableOpenTableFormatInputPtrType)(v)
}

func (*tableOpenTableFormatInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableOpenTableFormatInput)(nil)).Elem()
}

func (i *tableOpenTableFormatInputPtrType) ToTableOpenTableFormatInputPtrOutput() TableOpenTableFormatInputPtrOutput {
	return i.ToTableOpenTableFormatInputPtrOutputWithContext(context.Background())
}

func (i *tableOpenTableFormatInputPtrType) ToTableOpenTableFormatInputPtrOutputWithContext(ctx context.Context) TableOpenTableFormatInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOpenTableFormatInputPtrOutput)
}

func (i *tableOpenTableFormatInputPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableOpenTableFormatInput] {
	return pulumix.Output[*TableOpenTableFormatInput]{
		OutputState: i.ToTableOpenTableFormatInputPtrOutputWithContext(ctx).OutputState,
	}
}

type TableOpenTableFormatInputOutput struct{ *pulumi.OutputState }

func (TableOpenTableFormatInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableOpenTableFormatInput)(nil)).Elem()
}

func (o TableOpenTableFormatInputOutput) ToTableOpenTableFormatInputOutput() TableOpenTableFormatInputOutput {
	return o
}

func (o TableOpenTableFormatInputOutput) ToTableOpenTableFormatInputOutputWithContext(ctx context.Context) TableOpenTableFormatInputOutput {
	return o
}

func (o TableOpenTableFormatInputOutput) ToTableOpenTableFormatInputPtrOutput() TableOpenTableFormatInputPtrOutput {
	return o.ToTableOpenTableFormatInputPtrOutputWithContext(context.Background())
}

func (o TableOpenTableFormatInputOutput) ToTableOpenTableFormatInputPtrOutputWithContext(ctx context.Context) TableOpenTableFormatInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableOpenTableFormatInput) *TableOpenTableFormatInput {
		return &v
	}).(TableOpenTableFormatInputPtrOutput)
}

func (o TableOpenTableFormatInputOutput) ToOutput(ctx context.Context) pulumix.Output[TableOpenTableFormatInput] {
	return pulumix.Output[TableOpenTableFormatInput]{
		OutputState: o.OutputState,
	}
}

func (o TableOpenTableFormatInputOutput) IcebergInput() TableIcebergInputPtrOutput {
	return o.ApplyT(func(v TableOpenTableFormatInput) *TableIcebergInput { return v.IcebergInput }).(TableIcebergInputPtrOutput)
}

type TableOpenTableFormatInputPtrOutput struct{ *pulumi.OutputState }

func (TableOpenTableFormatInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableOpenTableFormatInput)(nil)).Elem()
}

func (o TableOpenTableFormatInputPtrOutput) ToTableOpenTableFormatInputPtrOutput() TableOpenTableFormatInputPtrOutput {
	return o
}

func (o TableOpenTableFormatInputPtrOutput) ToTableOpenTableFormatInputPtrOutputWithContext(ctx context.Context) TableOpenTableFormatInputPtrOutput {
	return o
}

func (o TableOpenTableFormatInputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableOpenTableFormatInput] {
	return pulumix.Output[*TableOpenTableFormatInput]{
		OutputState: o.OutputState,
	}
}

func (o TableOpenTableFormatInputPtrOutput) Elem() TableOpenTableFormatInputOutput {
	return o.ApplyT(func(v *TableOpenTableFormatInput) TableOpenTableFormatInput {
		if v != nil {
			return *v
		}
		var ret TableOpenTableFormatInput
		return ret
	}).(TableOpenTableFormatInputOutput)
}

func (o TableOpenTableFormatInputPtrOutput) IcebergInput() TableIcebergInputPtrOutput {
	return o.ApplyT(func(v *TableOpenTableFormatInput) *TableIcebergInput {
		if v == nil {
			return nil
		}
		return v.IcebergInput
	}).(TableIcebergInputPtrOutput)
}

type TableOrder struct {
	Column    string `pulumi:"column"`
	SortOrder int    `pulumi:"sortOrder"`
}

// TableOrderInput is an input type that accepts TableOrderArgs and TableOrderOutput values.
// You can construct a concrete instance of `TableOrderInput` via:
//
//	TableOrderArgs{...}
type TableOrderInput interface {
	pulumi.Input

	ToTableOrderOutput() TableOrderOutput
	ToTableOrderOutputWithContext(context.Context) TableOrderOutput
}

type TableOrderArgs struct {
	Column    pulumi.StringInput `pulumi:"column"`
	SortOrder pulumi.IntInput    `pulumi:"sortOrder"`
}

func (TableOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableOrder)(nil)).Elem()
}

func (i TableOrderArgs) ToTableOrderOutput() TableOrderOutput {
	return i.ToTableOrderOutputWithContext(context.Background())
}

func (i TableOrderArgs) ToTableOrderOutputWithContext(ctx context.Context) TableOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOrderOutput)
}

func (i TableOrderArgs) ToOutput(ctx context.Context) pulumix.Output[TableOrder] {
	return pulumix.Output[TableOrder]{
		OutputState: i.ToTableOrderOutputWithContext(ctx).OutputState,
	}
}

// TableOrderArrayInput is an input type that accepts TableOrderArray and TableOrderArrayOutput values.
// You can construct a concrete instance of `TableOrderArrayInput` via:
//
//	TableOrderArray{ TableOrderArgs{...} }
type TableOrderArrayInput interface {
	pulumi.Input

	ToTableOrderArrayOutput() TableOrderArrayOutput
	ToTableOrderArrayOutputWithContext(context.Context) TableOrderArrayOutput
}

type TableOrderArray []TableOrderInput

func (TableOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableOrder)(nil)).Elem()
}

func (i TableOrderArray) ToTableOrderArrayOutput() TableOrderArrayOutput {
	return i.ToTableOrderArrayOutputWithContext(context.Background())
}

func (i TableOrderArray) ToTableOrderArrayOutputWithContext(ctx context.Context) TableOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOrderArrayOutput)
}

func (i TableOrderArray) ToOutput(ctx context.Context) pulumix.Output[[]TableOrder] {
	return pulumix.Output[[]TableOrder]{
		OutputState: i.ToTableOrderArrayOutputWithContext(ctx).OutputState,
	}
}

type TableOrderOutput struct{ *pulumi.OutputState }

func (TableOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableOrder)(nil)).Elem()
}

func (o TableOrderOutput) ToTableOrderOutput() TableOrderOutput {
	return o
}

func (o TableOrderOutput) ToTableOrderOutputWithContext(ctx context.Context) TableOrderOutput {
	return o
}

func (o TableOrderOutput) ToOutput(ctx context.Context) pulumix.Output[TableOrder] {
	return pulumix.Output[TableOrder]{
		OutputState: o.OutputState,
	}
}

func (o TableOrderOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v TableOrder) string { return v.Column }).(pulumi.StringOutput)
}

func (o TableOrderOutput) SortOrder() pulumi.IntOutput {
	return o.ApplyT(func(v TableOrder) int { return v.SortOrder }).(pulumi.IntOutput)
}

type TableOrderArrayOutput struct{ *pulumi.OutputState }

func (TableOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableOrder)(nil)).Elem()
}

func (o TableOrderArrayOutput) ToTableOrderArrayOutput() TableOrderArrayOutput {
	return o
}

func (o TableOrderArrayOutput) ToTableOrderArrayOutputWithContext(ctx context.Context) TableOrderArrayOutput {
	return o
}

func (o TableOrderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TableOrder] {
	return pulumix.Output[[]TableOrder]{
		OutputState: o.OutputState,
	}
}

func (o TableOrderArrayOutput) Index(i pulumi.IntInput) TableOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableOrder {
		return vs[0].([]TableOrder)[vs[1].(int)]
	}).(TableOrderOutput)
}

type TableSchemaId struct {
	RegistryName *string `pulumi:"registryName"`
	SchemaArn    *string `pulumi:"schemaArn"`
	SchemaName   *string `pulumi:"schemaName"`
}

// TableSchemaIdInput is an input type that accepts TableSchemaIdArgs and TableSchemaIdOutput values.
// You can construct a concrete instance of `TableSchemaIdInput` via:
//
//	TableSchemaIdArgs{...}
type TableSchemaIdInput interface {
	pulumi.Input

	ToTableSchemaIdOutput() TableSchemaIdOutput
	ToTableSchemaIdOutputWithContext(context.Context) TableSchemaIdOutput
}

type TableSchemaIdArgs struct {
	RegistryName pulumi.StringPtrInput `pulumi:"registryName"`
	SchemaArn    pulumi.StringPtrInput `pulumi:"schemaArn"`
	SchemaName   pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (TableSchemaIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaId)(nil)).Elem()
}

func (i TableSchemaIdArgs) ToTableSchemaIdOutput() TableSchemaIdOutput {
	return i.ToTableSchemaIdOutputWithContext(context.Background())
}

func (i TableSchemaIdArgs) ToTableSchemaIdOutputWithContext(ctx context.Context) TableSchemaIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaIdOutput)
}

func (i TableSchemaIdArgs) ToOutput(ctx context.Context) pulumix.Output[TableSchemaId] {
	return pulumix.Output[TableSchemaId]{
		OutputState: i.ToTableSchemaIdOutputWithContext(ctx).OutputState,
	}
}

func (i TableSchemaIdArgs) ToTableSchemaIdPtrOutput() TableSchemaIdPtrOutput {
	return i.ToTableSchemaIdPtrOutputWithContext(context.Background())
}

func (i TableSchemaIdArgs) ToTableSchemaIdPtrOutputWithContext(ctx context.Context) TableSchemaIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaIdOutput).ToTableSchemaIdPtrOutputWithContext(ctx)
}

// TableSchemaIdPtrInput is an input type that accepts TableSchemaIdArgs, TableSchemaIdPtr and TableSchemaIdPtrOutput values.
// You can construct a concrete instance of `TableSchemaIdPtrInput` via:
//
//	        TableSchemaIdArgs{...}
//
//	or:
//
//	        nil
type TableSchemaIdPtrInput interface {
	pulumi.Input

	ToTableSchemaIdPtrOutput() TableSchemaIdPtrOutput
	ToTableSchemaIdPtrOutputWithContext(context.Context) TableSchemaIdPtrOutput
}

type tableSchemaIdPtrType TableSchemaIdArgs

func TableSchemaIdPtr(v *TableSchemaIdArgs) TableSchemaIdPtrInput {
	return (*tableSchemaIdPtrType)(v)
}

func (*tableSchemaIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaId)(nil)).Elem()
}

func (i *tableSchemaIdPtrType) ToTableSchemaIdPtrOutput() TableSchemaIdPtrOutput {
	return i.ToTableSchemaIdPtrOutputWithContext(context.Background())
}

func (i *tableSchemaIdPtrType) ToTableSchemaIdPtrOutputWithContext(ctx context.Context) TableSchemaIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaIdPtrOutput)
}

func (i *tableSchemaIdPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaId] {
	return pulumix.Output[*TableSchemaId]{
		OutputState: i.ToTableSchemaIdPtrOutputWithContext(ctx).OutputState,
	}
}

type TableSchemaIdOutput struct{ *pulumi.OutputState }

func (TableSchemaIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaId)(nil)).Elem()
}

func (o TableSchemaIdOutput) ToTableSchemaIdOutput() TableSchemaIdOutput {
	return o
}

func (o TableSchemaIdOutput) ToTableSchemaIdOutputWithContext(ctx context.Context) TableSchemaIdOutput {
	return o
}

func (o TableSchemaIdOutput) ToTableSchemaIdPtrOutput() TableSchemaIdPtrOutput {
	return o.ToTableSchemaIdPtrOutputWithContext(context.Background())
}

func (o TableSchemaIdOutput) ToTableSchemaIdPtrOutputWithContext(ctx context.Context) TableSchemaIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSchemaId) *TableSchemaId {
		return &v
	}).(TableSchemaIdPtrOutput)
}

func (o TableSchemaIdOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaId] {
	return pulumix.Output[TableSchemaId]{
		OutputState: o.OutputState,
	}
}

func (o TableSchemaIdOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaId) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

func (o TableSchemaIdOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaId) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

func (o TableSchemaIdOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaId) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type TableSchemaIdPtrOutput struct{ *pulumi.OutputState }

func (TableSchemaIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaId)(nil)).Elem()
}

func (o TableSchemaIdPtrOutput) ToTableSchemaIdPtrOutput() TableSchemaIdPtrOutput {
	return o
}

func (o TableSchemaIdPtrOutput) ToTableSchemaIdPtrOutputWithContext(ctx context.Context) TableSchemaIdPtrOutput {
	return o
}

func (o TableSchemaIdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaId] {
	return pulumix.Output[*TableSchemaId]{
		OutputState: o.OutputState,
	}
}

func (o TableSchemaIdPtrOutput) Elem() TableSchemaIdOutput {
	return o.ApplyT(func(v *TableSchemaId) TableSchemaId {
		if v != nil {
			return *v
		}
		var ret TableSchemaId
		return ret
	}).(TableSchemaIdOutput)
}

func (o TableSchemaIdPtrOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSchemaId) *string {
		if v == nil {
			return nil
		}
		return v.RegistryName
	}).(pulumi.StringPtrOutput)
}

func (o TableSchemaIdPtrOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSchemaId) *string {
		if v == nil {
			return nil
		}
		return v.SchemaArn
	}).(pulumi.StringPtrOutput)
}

func (o TableSchemaIdPtrOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSchemaId) *string {
		if v == nil {
			return nil
		}
		return v.SchemaName
	}).(pulumi.StringPtrOutput)
}

type TableSchemaReference struct {
	SchemaId            *TableSchemaId `pulumi:"schemaId"`
	SchemaVersionId     *string        `pulumi:"schemaVersionId"`
	SchemaVersionNumber *int           `pulumi:"schemaVersionNumber"`
}

// TableSchemaReferenceInput is an input type that accepts TableSchemaReferenceArgs and TableSchemaReferenceOutput values.
// You can construct a concrete instance of `TableSchemaReferenceInput` via:
//
//	TableSchemaReferenceArgs{...}
type TableSchemaReferenceInput interface {
	pulumi.Input

	ToTableSchemaReferenceOutput() TableSchemaReferenceOutput
	ToTableSchemaReferenceOutputWithContext(context.Context) TableSchemaReferenceOutput
}

type TableSchemaReferenceArgs struct {
	SchemaId            TableSchemaIdPtrInput `pulumi:"schemaId"`
	SchemaVersionId     pulumi.StringPtrInput `pulumi:"schemaVersionId"`
	SchemaVersionNumber pulumi.IntPtrInput    `pulumi:"schemaVersionNumber"`
}

func (TableSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaReference)(nil)).Elem()
}

func (i TableSchemaReferenceArgs) ToTableSchemaReferenceOutput() TableSchemaReferenceOutput {
	return i.ToTableSchemaReferenceOutputWithContext(context.Background())
}

func (i TableSchemaReferenceArgs) ToTableSchemaReferenceOutputWithContext(ctx context.Context) TableSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaReferenceOutput)
}

func (i TableSchemaReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[TableSchemaReference] {
	return pulumix.Output[TableSchemaReference]{
		OutputState: i.ToTableSchemaReferenceOutputWithContext(ctx).OutputState,
	}
}

func (i TableSchemaReferenceArgs) ToTableSchemaReferencePtrOutput() TableSchemaReferencePtrOutput {
	return i.ToTableSchemaReferencePtrOutputWithContext(context.Background())
}

func (i TableSchemaReferenceArgs) ToTableSchemaReferencePtrOutputWithContext(ctx context.Context) TableSchemaReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaReferenceOutput).ToTableSchemaReferencePtrOutputWithContext(ctx)
}

// TableSchemaReferencePtrInput is an input type that accepts TableSchemaReferenceArgs, TableSchemaReferencePtr and TableSchemaReferencePtrOutput values.
// You can construct a concrete instance of `TableSchemaReferencePtrInput` via:
//
//	        TableSchemaReferenceArgs{...}
//
//	or:
//
//	        nil
type TableSchemaReferencePtrInput interface {
	pulumi.Input

	ToTableSchemaReferencePtrOutput() TableSchemaReferencePtrOutput
	ToTableSchemaReferencePtrOutputWithContext(context.Context) TableSchemaReferencePtrOutput
}

type tableSchemaReferencePtrType TableSchemaReferenceArgs

func TableSchemaReferencePtr(v *TableSchemaReferenceArgs) TableSchemaReferencePtrInput {
	return (*tableSchemaReferencePtrType)(v)
}

func (*tableSchemaReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaReference)(nil)).Elem()
}

func (i *tableSchemaReferencePtrType) ToTableSchemaReferencePtrOutput() TableSchemaReferencePtrOutput {
	return i.ToTableSchemaReferencePtrOutputWithContext(context.Background())
}

func (i *tableSchemaReferencePtrType) ToTableSchemaReferencePtrOutputWithContext(ctx context.Context) TableSchemaReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaReferencePtrOutput)
}

func (i *tableSchemaReferencePtrType) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaReference] {
	return pulumix.Output[*TableSchemaReference]{
		OutputState: i.ToTableSchemaReferencePtrOutputWithContext(ctx).OutputState,
	}
}

type TableSchemaReferenceOutput struct{ *pulumi.OutputState }

func (TableSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaReference)(nil)).Elem()
}

func (o TableSchemaReferenceOutput) ToTableSchemaReferenceOutput() TableSchemaReferenceOutput {
	return o
}

func (o TableSchemaReferenceOutput) ToTableSchemaReferenceOutputWithContext(ctx context.Context) TableSchemaReferenceOutput {
	return o
}

func (o TableSchemaReferenceOutput) ToTableSchemaReferencePtrOutput() TableSchemaReferencePtrOutput {
	return o.ToTableSchemaReferencePtrOutputWithContext(context.Background())
}

func (o TableSchemaReferenceOutput) ToTableSchemaReferencePtrOutputWithContext(ctx context.Context) TableSchemaReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSchemaReference) *TableSchemaReference {
		return &v
	}).(TableSchemaReferencePtrOutput)
}

func (o TableSchemaReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[TableSchemaReference] {
	return pulumix.Output[TableSchemaReference]{
		OutputState: o.OutputState,
	}
}

func (o TableSchemaReferenceOutput) SchemaId() TableSchemaIdPtrOutput {
	return o.ApplyT(func(v TableSchemaReference) *TableSchemaId { return v.SchemaId }).(TableSchemaIdPtrOutput)
}

func (o TableSchemaReferenceOutput) SchemaVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaReference) *string { return v.SchemaVersionId }).(pulumi.StringPtrOutput)
}

func (o TableSchemaReferenceOutput) SchemaVersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableSchemaReference) *int { return v.SchemaVersionNumber }).(pulumi.IntPtrOutput)
}

type TableSchemaReferencePtrOutput struct{ *pulumi.OutputState }

func (TableSchemaReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchemaReference)(nil)).Elem()
}

func (o TableSchemaReferencePtrOutput) ToTableSchemaReferencePtrOutput() TableSchemaReferencePtrOutput {
	return o
}

func (o TableSchemaReferencePtrOutput) ToTableSchemaReferencePtrOutputWithContext(ctx context.Context) TableSchemaReferencePtrOutput {
	return o
}

func (o TableSchemaReferencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableSchemaReference] {
	return pulumix.Output[*TableSchemaReference]{
		OutputState: o.OutputState,
	}
}

func (o TableSchemaReferencePtrOutput) Elem() TableSchemaReferenceOutput {
	return o.ApplyT(func(v *TableSchemaReference) TableSchemaReference {
		if v != nil {
			return *v
		}
		var ret TableSchemaReference
		return ret
	}).(TableSchemaReferenceOutput)
}

func (o TableSchemaReferencePtrOutput) SchemaId() TableSchemaIdPtrOutput {
	return o.ApplyT(func(v *TableSchemaReference) *TableSchemaId {
		if v == nil {
			return nil
		}
		return v.SchemaId
	}).(TableSchemaIdPtrOutput)
}

func (o TableSchemaReferencePtrOutput) SchemaVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSchemaReference) *string {
		if v == nil {
			return nil
		}
		return v.SchemaVersionId
	}).(pulumi.StringPtrOutput)
}

func (o TableSchemaReferencePtrOutput) SchemaVersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableSchemaReference) *int {
		if v == nil {
			return nil
		}
		return v.SchemaVersionNumber
	}).(pulumi.IntPtrOutput)
}

type TableSerdeInfo struct {
	Name                 *string     `pulumi:"name"`
	Parameters           interface{} `pulumi:"parameters"`
	SerializationLibrary *string     `pulumi:"serializationLibrary"`
}

// TableSerdeInfoInput is an input type that accepts TableSerdeInfoArgs and TableSerdeInfoOutput values.
// You can construct a concrete instance of `TableSerdeInfoInput` via:
//
//	TableSerdeInfoArgs{...}
type TableSerdeInfoInput interface {
	pulumi.Input

	ToTableSerdeInfoOutput() TableSerdeInfoOutput
	ToTableSerdeInfoOutputWithContext(context.Context) TableSerdeInfoOutput
}

type TableSerdeInfoArgs struct {
	Name                 pulumi.StringPtrInput `pulumi:"name"`
	Parameters           pulumi.Input          `pulumi:"parameters"`
	SerializationLibrary pulumi.StringPtrInput `pulumi:"serializationLibrary"`
}

func (TableSerdeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSerdeInfo)(nil)).Elem()
}

func (i TableSerdeInfoArgs) ToTableSerdeInfoOutput() TableSerdeInfoOutput {
	return i.ToTableSerdeInfoOutputWithContext(context.Background())
}

func (i TableSerdeInfoArgs) ToTableSerdeInfoOutputWithContext(ctx context.Context) TableSerdeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSerdeInfoOutput)
}

func (i TableSerdeInfoArgs) ToOutput(ctx context.Context) pulumix.Output[TableSerdeInfo] {
	return pulumix.Output[TableSerdeInfo]{
		OutputState: i.ToTableSerdeInfoOutputWithContext(ctx).OutputState,
	}
}

func (i TableSerdeInfoArgs) ToTableSerdeInfoPtrOutput() TableSerdeInfoPtrOutput {
	return i.ToTableSerdeInfoPtrOutputWithContext(context.Background())
}

func (i TableSerdeInfoArgs) ToTableSerdeInfoPtrOutputWithContext(ctx context.Context) TableSerdeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSerdeInfoOutput).ToTableSerdeInfoPtrOutputWithContext(ctx)
}

// TableSerdeInfoPtrInput is an input type that accepts TableSerdeInfoArgs, TableSerdeInfoPtr and TableSerdeInfoPtrOutput values.
// You can construct a concrete instance of `TableSerdeInfoPtrInput` via:
//
//	        TableSerdeInfoArgs{...}
//
//	or:
//
//	        nil
type TableSerdeInfoPtrInput interface {
	pulumi.Input

	ToTableSerdeInfoPtrOutput() TableSerdeInfoPtrOutput
	ToTableSerdeInfoPtrOutputWithContext(context.Context) TableSerdeInfoPtrOutput
}

type tableSerdeInfoPtrType TableSerdeInfoArgs

func TableSerdeInfoPtr(v *TableSerdeInfoArgs) TableSerdeInfoPtrInput {
	return (*tableSerdeInfoPtrType)(v)
}

func (*tableSerdeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSerdeInfo)(nil)).Elem()
}

func (i *tableSerdeInfoPtrType) ToTableSerdeInfoPtrOutput() TableSerdeInfoPtrOutput {
	return i.ToTableSerdeInfoPtrOutputWithContext(context.Background())
}

func (i *tableSerdeInfoPtrType) ToTableSerdeInfoPtrOutputWithContext(ctx context.Context) TableSerdeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSerdeInfoPtrOutput)
}

func (i *tableSerdeInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableSerdeInfo] {
	return pulumix.Output[*TableSerdeInfo]{
		OutputState: i.ToTableSerdeInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type TableSerdeInfoOutput struct{ *pulumi.OutputState }

func (TableSerdeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSerdeInfo)(nil)).Elem()
}

func (o TableSerdeInfoOutput) ToTableSerdeInfoOutput() TableSerdeInfoOutput {
	return o
}

func (o TableSerdeInfoOutput) ToTableSerdeInfoOutputWithContext(ctx context.Context) TableSerdeInfoOutput {
	return o
}

func (o TableSerdeInfoOutput) ToTableSerdeInfoPtrOutput() TableSerdeInfoPtrOutput {
	return o.ToTableSerdeInfoPtrOutputWithContext(context.Background())
}

func (o TableSerdeInfoOutput) ToTableSerdeInfoPtrOutputWithContext(ctx context.Context) TableSerdeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSerdeInfo) *TableSerdeInfo {
		return &v
	}).(TableSerdeInfoPtrOutput)
}

func (o TableSerdeInfoOutput) ToOutput(ctx context.Context) pulumix.Output[TableSerdeInfo] {
	return pulumix.Output[TableSerdeInfo]{
		OutputState: o.OutputState,
	}
}

func (o TableSerdeInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSerdeInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TableSerdeInfoOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v TableSerdeInfo) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

func (o TableSerdeInfoOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSerdeInfo) *string { return v.SerializationLibrary }).(pulumi.StringPtrOutput)
}

type TableSerdeInfoPtrOutput struct{ *pulumi.OutputState }

func (TableSerdeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSerdeInfo)(nil)).Elem()
}

func (o TableSerdeInfoPtrOutput) ToTableSerdeInfoPtrOutput() TableSerdeInfoPtrOutput {
	return o
}

func (o TableSerdeInfoPtrOutput) ToTableSerdeInfoPtrOutputWithContext(ctx context.Context) TableSerdeInfoPtrOutput {
	return o
}

func (o TableSerdeInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableSerdeInfo] {
	return pulumix.Output[*TableSerdeInfo]{
		OutputState: o.OutputState,
	}
}

func (o TableSerdeInfoPtrOutput) Elem() TableSerdeInfoOutput {
	return o.ApplyT(func(v *TableSerdeInfo) TableSerdeInfo {
		if v != nil {
			return *v
		}
		var ret TableSerdeInfo
		return ret
	}).(TableSerdeInfoOutput)
}

func (o TableSerdeInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSerdeInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o TableSerdeInfoPtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableSerdeInfo) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

func (o TableSerdeInfoPtrOutput) SerializationLibrary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSerdeInfo) *string {
		if v == nil {
			return nil
		}
		return v.SerializationLibrary
	}).(pulumi.StringPtrOutput)
}

type TableSkewedInfo struct {
	SkewedColumnNames             []string    `pulumi:"skewedColumnNames"`
	SkewedColumnValueLocationMaps interface{} `pulumi:"skewedColumnValueLocationMaps"`
	SkewedColumnValues            []string    `pulumi:"skewedColumnValues"`
}

// TableSkewedInfoInput is an input type that accepts TableSkewedInfoArgs and TableSkewedInfoOutput values.
// You can construct a concrete instance of `TableSkewedInfoInput` via:
//
//	TableSkewedInfoArgs{...}
type TableSkewedInfoInput interface {
	pulumi.Input

	ToTableSkewedInfoOutput() TableSkewedInfoOutput
	ToTableSkewedInfoOutputWithContext(context.Context) TableSkewedInfoOutput
}

type TableSkewedInfoArgs struct {
	SkewedColumnNames             pulumi.StringArrayInput `pulumi:"skewedColumnNames"`
	SkewedColumnValueLocationMaps pulumi.Input            `pulumi:"skewedColumnValueLocationMaps"`
	SkewedColumnValues            pulumi.StringArrayInput `pulumi:"skewedColumnValues"`
}

func (TableSkewedInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSkewedInfo)(nil)).Elem()
}

func (i TableSkewedInfoArgs) ToTableSkewedInfoOutput() TableSkewedInfoOutput {
	return i.ToTableSkewedInfoOutputWithContext(context.Background())
}

func (i TableSkewedInfoArgs) ToTableSkewedInfoOutputWithContext(ctx context.Context) TableSkewedInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSkewedInfoOutput)
}

func (i TableSkewedInfoArgs) ToOutput(ctx context.Context) pulumix.Output[TableSkewedInfo] {
	return pulumix.Output[TableSkewedInfo]{
		OutputState: i.ToTableSkewedInfoOutputWithContext(ctx).OutputState,
	}
}

func (i TableSkewedInfoArgs) ToTableSkewedInfoPtrOutput() TableSkewedInfoPtrOutput {
	return i.ToTableSkewedInfoPtrOutputWithContext(context.Background())
}

func (i TableSkewedInfoArgs) ToTableSkewedInfoPtrOutputWithContext(ctx context.Context) TableSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSkewedInfoOutput).ToTableSkewedInfoPtrOutputWithContext(ctx)
}

// TableSkewedInfoPtrInput is an input type that accepts TableSkewedInfoArgs, TableSkewedInfoPtr and TableSkewedInfoPtrOutput values.
// You can construct a concrete instance of `TableSkewedInfoPtrInput` via:
//
//	        TableSkewedInfoArgs{...}
//
//	or:
//
//	        nil
type TableSkewedInfoPtrInput interface {
	pulumi.Input

	ToTableSkewedInfoPtrOutput() TableSkewedInfoPtrOutput
	ToTableSkewedInfoPtrOutputWithContext(context.Context) TableSkewedInfoPtrOutput
}

type tableSkewedInfoPtrType TableSkewedInfoArgs

func TableSkewedInfoPtr(v *TableSkewedInfoArgs) TableSkewedInfoPtrInput {
	return (*tableSkewedInfoPtrType)(v)
}

func (*tableSkewedInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSkewedInfo)(nil)).Elem()
}

func (i *tableSkewedInfoPtrType) ToTableSkewedInfoPtrOutput() TableSkewedInfoPtrOutput {
	return i.ToTableSkewedInfoPtrOutputWithContext(context.Background())
}

func (i *tableSkewedInfoPtrType) ToTableSkewedInfoPtrOutputWithContext(ctx context.Context) TableSkewedInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSkewedInfoPtrOutput)
}

func (i *tableSkewedInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableSkewedInfo] {
	return pulumix.Output[*TableSkewedInfo]{
		OutputState: i.ToTableSkewedInfoPtrOutputWithContext(ctx).OutputState,
	}
}

type TableSkewedInfoOutput struct{ *pulumi.OutputState }

func (TableSkewedInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSkewedInfo)(nil)).Elem()
}

func (o TableSkewedInfoOutput) ToTableSkewedInfoOutput() TableSkewedInfoOutput {
	return o
}

func (o TableSkewedInfoOutput) ToTableSkewedInfoOutputWithContext(ctx context.Context) TableSkewedInfoOutput {
	return o
}

func (o TableSkewedInfoOutput) ToTableSkewedInfoPtrOutput() TableSkewedInfoPtrOutput {
	return o.ToTableSkewedInfoPtrOutputWithContext(context.Background())
}

func (o TableSkewedInfoOutput) ToTableSkewedInfoPtrOutputWithContext(ctx context.Context) TableSkewedInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSkewedInfo) *TableSkewedInfo {
		return &v
	}).(TableSkewedInfoPtrOutput)
}

func (o TableSkewedInfoOutput) ToOutput(ctx context.Context) pulumix.Output[TableSkewedInfo] {
	return pulumix.Output[TableSkewedInfo]{
		OutputState: o.OutputState,
	}
}

func (o TableSkewedInfoOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableSkewedInfo) []string { return v.SkewedColumnNames }).(pulumi.StringArrayOutput)
}

func (o TableSkewedInfoOutput) SkewedColumnValueLocationMaps() pulumi.AnyOutput {
	return o.ApplyT(func(v TableSkewedInfo) interface{} { return v.SkewedColumnValueLocationMaps }).(pulumi.AnyOutput)
}

func (o TableSkewedInfoOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableSkewedInfo) []string { return v.SkewedColumnValues }).(pulumi.StringArrayOutput)
}

type TableSkewedInfoPtrOutput struct{ *pulumi.OutputState }

func (TableSkewedInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSkewedInfo)(nil)).Elem()
}

func (o TableSkewedInfoPtrOutput) ToTableSkewedInfoPtrOutput() TableSkewedInfoPtrOutput {
	return o
}

func (o TableSkewedInfoPtrOutput) ToTableSkewedInfoPtrOutputWithContext(ctx context.Context) TableSkewedInfoPtrOutput {
	return o
}

func (o TableSkewedInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableSkewedInfo] {
	return pulumix.Output[*TableSkewedInfo]{
		OutputState: o.OutputState,
	}
}

func (o TableSkewedInfoPtrOutput) Elem() TableSkewedInfoOutput {
	return o.ApplyT(func(v *TableSkewedInfo) TableSkewedInfo {
		if v != nil {
			return *v
		}
		var ret TableSkewedInfo
		return ret
	}).(TableSkewedInfoOutput)
}

func (o TableSkewedInfoPtrOutput) SkewedColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnNames
	}).(pulumi.StringArrayOutput)
}

func (o TableSkewedInfoPtrOutput) SkewedColumnValueLocationMaps() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableSkewedInfo) interface{} {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValueLocationMaps
	}).(pulumi.AnyOutput)
}

func (o TableSkewedInfoPtrOutput) SkewedColumnValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableSkewedInfo) []string {
		if v == nil {
			return nil
		}
		return v.SkewedColumnValues
	}).(pulumi.StringArrayOutput)
}

type TableStorageDescriptor struct {
	BucketColumns          []string              `pulumi:"bucketColumns"`
	Columns                []TableColumn         `pulumi:"columns"`
	Compressed             *bool                 `pulumi:"compressed"`
	InputFormat            *string               `pulumi:"inputFormat"`
	Location               *string               `pulumi:"location"`
	NumberOfBuckets        *int                  `pulumi:"numberOfBuckets"`
	OutputFormat           *string               `pulumi:"outputFormat"`
	Parameters             interface{}           `pulumi:"parameters"`
	SchemaReference        *TableSchemaReference `pulumi:"schemaReference"`
	SerdeInfo              *TableSerdeInfo       `pulumi:"serdeInfo"`
	SkewedInfo             *TableSkewedInfo      `pulumi:"skewedInfo"`
	SortColumns            []TableOrder          `pulumi:"sortColumns"`
	StoredAsSubDirectories *bool                 `pulumi:"storedAsSubDirectories"`
}

// TableStorageDescriptorInput is an input type that accepts TableStorageDescriptorArgs and TableStorageDescriptorOutput values.
// You can construct a concrete instance of `TableStorageDescriptorInput` via:
//
//	TableStorageDescriptorArgs{...}
type TableStorageDescriptorInput interface {
	pulumi.Input

	ToTableStorageDescriptorOutput() TableStorageDescriptorOutput
	ToTableStorageDescriptorOutputWithContext(context.Context) TableStorageDescriptorOutput
}

type TableStorageDescriptorArgs struct {
	BucketColumns          pulumi.StringArrayInput      `pulumi:"bucketColumns"`
	Columns                TableColumnArrayInput        `pulumi:"columns"`
	Compressed             pulumi.BoolPtrInput          `pulumi:"compressed"`
	InputFormat            pulumi.StringPtrInput        `pulumi:"inputFormat"`
	Location               pulumi.StringPtrInput        `pulumi:"location"`
	NumberOfBuckets        pulumi.IntPtrInput           `pulumi:"numberOfBuckets"`
	OutputFormat           pulumi.StringPtrInput        `pulumi:"outputFormat"`
	Parameters             pulumi.Input                 `pulumi:"parameters"`
	SchemaReference        TableSchemaReferencePtrInput `pulumi:"schemaReference"`
	SerdeInfo              TableSerdeInfoPtrInput       `pulumi:"serdeInfo"`
	SkewedInfo             TableSkewedInfoPtrInput      `pulumi:"skewedInfo"`
	SortColumns            TableOrderArrayInput         `pulumi:"sortColumns"`
	StoredAsSubDirectories pulumi.BoolPtrInput          `pulumi:"storedAsSubDirectories"`
}

func (TableStorageDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableStorageDescriptor)(nil)).Elem()
}

func (i TableStorageDescriptorArgs) ToTableStorageDescriptorOutput() TableStorageDescriptorOutput {
	return i.ToTableStorageDescriptorOutputWithContext(context.Background())
}

func (i TableStorageDescriptorArgs) ToTableStorageDescriptorOutputWithContext(ctx context.Context) TableStorageDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableStorageDescriptorOutput)
}

func (i TableStorageDescriptorArgs) ToOutput(ctx context.Context) pulumix.Output[TableStorageDescriptor] {
	return pulumix.Output[TableStorageDescriptor]{
		OutputState: i.ToTableStorageDescriptorOutputWithContext(ctx).OutputState,
	}
}

func (i TableStorageDescriptorArgs) ToTableStorageDescriptorPtrOutput() TableStorageDescriptorPtrOutput {
	return i.ToTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i TableStorageDescriptorArgs) ToTableStorageDescriptorPtrOutputWithContext(ctx context.Context) TableStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableStorageDescriptorOutput).ToTableStorageDescriptorPtrOutputWithContext(ctx)
}

// TableStorageDescriptorPtrInput is an input type that accepts TableStorageDescriptorArgs, TableStorageDescriptorPtr and TableStorageDescriptorPtrOutput values.
// You can construct a concrete instance of `TableStorageDescriptorPtrInput` via:
//
//	        TableStorageDescriptorArgs{...}
//
//	or:
//
//	        nil
type TableStorageDescriptorPtrInput interface {
	pulumi.Input

	ToTableStorageDescriptorPtrOutput() TableStorageDescriptorPtrOutput
	ToTableStorageDescriptorPtrOutputWithContext(context.Context) TableStorageDescriptorPtrOutput
}

type tableStorageDescriptorPtrType TableStorageDescriptorArgs

func TableStorageDescriptorPtr(v *TableStorageDescriptorArgs) TableStorageDescriptorPtrInput {
	return (*tableStorageDescriptorPtrType)(v)
}

func (*tableStorageDescriptorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableStorageDescriptor)(nil)).Elem()
}

func (i *tableStorageDescriptorPtrType) ToTableStorageDescriptorPtrOutput() TableStorageDescriptorPtrOutput {
	return i.ToTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (i *tableStorageDescriptorPtrType) ToTableStorageDescriptorPtrOutputWithContext(ctx context.Context) TableStorageDescriptorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableStorageDescriptorPtrOutput)
}

func (i *tableStorageDescriptorPtrType) ToOutput(ctx context.Context) pulumix.Output[*TableStorageDescriptor] {
	return pulumix.Output[*TableStorageDescriptor]{
		OutputState: i.ToTableStorageDescriptorPtrOutputWithContext(ctx).OutputState,
	}
}

type TableStorageDescriptorOutput struct{ *pulumi.OutputState }

func (TableStorageDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableStorageDescriptor)(nil)).Elem()
}

func (o TableStorageDescriptorOutput) ToTableStorageDescriptorOutput() TableStorageDescriptorOutput {
	return o
}

func (o TableStorageDescriptorOutput) ToTableStorageDescriptorOutputWithContext(ctx context.Context) TableStorageDescriptorOutput {
	return o
}

func (o TableStorageDescriptorOutput) ToTableStorageDescriptorPtrOutput() TableStorageDescriptorPtrOutput {
	return o.ToTableStorageDescriptorPtrOutputWithContext(context.Background())
}

func (o TableStorageDescriptorOutput) ToTableStorageDescriptorPtrOutputWithContext(ctx context.Context) TableStorageDescriptorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableStorageDescriptor) *TableStorageDescriptor {
		return &v
	}).(TableStorageDescriptorPtrOutput)
}

func (o TableStorageDescriptorOutput) ToOutput(ctx context.Context) pulumix.Output[TableStorageDescriptor] {
	return pulumix.Output[TableStorageDescriptor]{
		OutputState: o.OutputState,
	}
}

func (o TableStorageDescriptorOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableStorageDescriptor) []string { return v.BucketColumns }).(pulumi.StringArrayOutput)
}

func (o TableStorageDescriptorOutput) Columns() TableColumnArrayOutput {
	return o.ApplyT(func(v TableStorageDescriptor) []TableColumn { return v.Columns }).(TableColumnArrayOutput)
}

func (o TableStorageDescriptorOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *bool { return v.Compressed }).(pulumi.BoolPtrOutput)
}

func (o TableStorageDescriptorOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *string { return v.InputFormat }).(pulumi.StringPtrOutput)
}

func (o TableStorageDescriptorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o TableStorageDescriptorOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *int { return v.NumberOfBuckets }).(pulumi.IntPtrOutput)
}

func (o TableStorageDescriptorOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *string { return v.OutputFormat }).(pulumi.StringPtrOutput)
}

func (o TableStorageDescriptorOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v TableStorageDescriptor) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

func (o TableStorageDescriptorOutput) SchemaReference() TableSchemaReferencePtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *TableSchemaReference { return v.SchemaReference }).(TableSchemaReferencePtrOutput)
}

func (o TableStorageDescriptorOutput) SerdeInfo() TableSerdeInfoPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *TableSerdeInfo { return v.SerdeInfo }).(TableSerdeInfoPtrOutput)
}

func (o TableStorageDescriptorOutput) SkewedInfo() TableSkewedInfoPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *TableSkewedInfo { return v.SkewedInfo }).(TableSkewedInfoPtrOutput)
}

func (o TableStorageDescriptorOutput) SortColumns() TableOrderArrayOutput {
	return o.ApplyT(func(v TableStorageDescriptor) []TableOrder { return v.SortColumns }).(TableOrderArrayOutput)
}

func (o TableStorageDescriptorOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableStorageDescriptor) *bool { return v.StoredAsSubDirectories }).(pulumi.BoolPtrOutput)
}

type TableStorageDescriptorPtrOutput struct{ *pulumi.OutputState }

func (TableStorageDescriptorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableStorageDescriptor)(nil)).Elem()
}

func (o TableStorageDescriptorPtrOutput) ToTableStorageDescriptorPtrOutput() TableStorageDescriptorPtrOutput {
	return o
}

func (o TableStorageDescriptorPtrOutput) ToTableStorageDescriptorPtrOutputWithContext(ctx context.Context) TableStorageDescriptorPtrOutput {
	return o
}

func (o TableStorageDescriptorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TableStorageDescriptor] {
	return pulumix.Output[*TableStorageDescriptor]{
		OutputState: o.OutputState,
	}
}

func (o TableStorageDescriptorPtrOutput) Elem() TableStorageDescriptorOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) TableStorageDescriptor {
		if v != nil {
			return *v
		}
		var ret TableStorageDescriptor
		return ret
	}).(TableStorageDescriptorOutput)
}

func (o TableStorageDescriptorPtrOutput) BucketColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) []string {
		if v == nil {
			return nil
		}
		return v.BucketColumns
	}).(pulumi.StringArrayOutput)
}

func (o TableStorageDescriptorPtrOutput) Columns() TableColumnArrayOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) []TableColumn {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(TableColumnArrayOutput)
}

func (o TableStorageDescriptorPtrOutput) Compressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.Compressed
	}).(pulumi.BoolPtrOutput)
}

func (o TableStorageDescriptorPtrOutput) InputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.InputFormat
	}).(pulumi.StringPtrOutput)
}

func (o TableStorageDescriptorPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o TableStorageDescriptorPtrOutput) NumberOfBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfBuckets
	}).(pulumi.IntPtrOutput)
}

func (o TableStorageDescriptorPtrOutput) OutputFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *string {
		if v == nil {
			return nil
		}
		return v.OutputFormat
	}).(pulumi.StringPtrOutput)
}

func (o TableStorageDescriptorPtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

func (o TableStorageDescriptorPtrOutput) SchemaReference() TableSchemaReferencePtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *TableSchemaReference {
		if v == nil {
			return nil
		}
		return v.SchemaReference
	}).(TableSchemaReferencePtrOutput)
}

func (o TableStorageDescriptorPtrOutput) SerdeInfo() TableSerdeInfoPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *TableSerdeInfo {
		if v == nil {
			return nil
		}
		return v.SerdeInfo
	}).(TableSerdeInfoPtrOutput)
}

func (o TableStorageDescriptorPtrOutput) SkewedInfo() TableSkewedInfoPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *TableSkewedInfo {
		if v == nil {
			return nil
		}
		return v.SkewedInfo
	}).(TableSkewedInfoPtrOutput)
}

func (o TableStorageDescriptorPtrOutput) SortColumns() TableOrderArrayOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) []TableOrder {
		if v == nil {
			return nil
		}
		return v.SortColumns
	}).(TableOrderArrayOutput)
}

func (o TableStorageDescriptorPtrOutput) StoredAsSubDirectories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableStorageDescriptor) *bool {
		if v == nil {
			return nil
		}
		return v.StoredAsSubDirectories
	}).(pulumi.BoolPtrOutput)
}

type TriggerAction struct {
	Arguments             interface{}                  `pulumi:"arguments"`
	CrawlerName           *string                      `pulumi:"crawlerName"`
	JobName               *string                      `pulumi:"jobName"`
	NotificationProperty  *TriggerNotificationProperty `pulumi:"notificationProperty"`
	SecurityConfiguration *string                      `pulumi:"securityConfiguration"`
	Timeout               *int                         `pulumi:"timeout"`
}

// TriggerActionInput is an input type that accepts TriggerActionArgs and TriggerActionOutput values.
// You can construct a concrete instance of `TriggerActionInput` via:
//
//	TriggerActionArgs{...}
type TriggerActionInput interface {
	pulumi.Input

	ToTriggerActionOutput() TriggerActionOutput
	ToTriggerActionOutputWithContext(context.Context) TriggerActionOutput
}

type TriggerActionArgs struct {
	Arguments             pulumi.Input                        `pulumi:"arguments"`
	CrawlerName           pulumi.StringPtrInput               `pulumi:"crawlerName"`
	JobName               pulumi.StringPtrInput               `pulumi:"jobName"`
	NotificationProperty  TriggerNotificationPropertyPtrInput `pulumi:"notificationProperty"`
	SecurityConfiguration pulumi.StringPtrInput               `pulumi:"securityConfiguration"`
	Timeout               pulumi.IntPtrInput                  `pulumi:"timeout"`
}

func (TriggerActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (i TriggerActionArgs) ToTriggerActionOutput() TriggerActionOutput {
	return i.ToTriggerActionOutputWithContext(context.Background())
}

func (i TriggerActionArgs) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionOutput)
}

func (i TriggerActionArgs) ToOutput(ctx context.Context) pulumix.Output[TriggerAction] {
	return pulumix.Output[TriggerAction]{
		OutputState: i.ToTriggerActionOutputWithContext(ctx).OutputState,
	}
}

// TriggerActionArrayInput is an input type that accepts TriggerActionArray and TriggerActionArrayOutput values.
// You can construct a concrete instance of `TriggerActionArrayInput` via:
//
//	TriggerActionArray{ TriggerActionArgs{...} }
type TriggerActionArrayInput interface {
	pulumi.Input

	ToTriggerActionArrayOutput() TriggerActionArrayOutput
	ToTriggerActionArrayOutputWithContext(context.Context) TriggerActionArrayOutput
}

type TriggerActionArray []TriggerActionInput

func (TriggerActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (i TriggerActionArray) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return i.ToTriggerActionArrayOutputWithContext(context.Background())
}

func (i TriggerActionArray) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionArrayOutput)
}

func (i TriggerActionArray) ToOutput(ctx context.Context) pulumix.Output[[]TriggerAction] {
	return pulumix.Output[[]TriggerAction]{
		OutputState: i.ToTriggerActionArrayOutputWithContext(ctx).OutputState,
	}
}

type TriggerActionOutput struct{ *pulumi.OutputState }

func (TriggerActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (o TriggerActionOutput) ToTriggerActionOutput() TriggerActionOutput {
	return o
}

func (o TriggerActionOutput) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return o
}

func (o TriggerActionOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerAction] {
	return pulumix.Output[TriggerAction]{
		OutputState: o.OutputState,
	}
}

func (o TriggerActionOutput) Arguments() pulumi.AnyOutput {
	return o.ApplyT(func(v TriggerAction) interface{} { return v.Arguments }).(pulumi.AnyOutput)
}

func (o TriggerActionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

func (o TriggerActionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

func (o TriggerActionOutput) NotificationProperty() TriggerNotificationPropertyPtrOutput {
	return o.ApplyT(func(v TriggerAction) *TriggerNotificationProperty { return v.NotificationProperty }).(TriggerNotificationPropertyPtrOutput)
}

func (o TriggerActionOutput) SecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.SecurityConfiguration }).(pulumi.StringPtrOutput)
}

func (o TriggerActionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerAction) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TriggerActionArrayOutput struct{ *pulumi.OutputState }

func (TriggerActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TriggerAction] {
	return pulumix.Output[[]TriggerAction]{
		OutputState: o.OutputState,
	}
}

func (o TriggerActionArrayOutput) Index(i pulumi.IntInput) TriggerActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerAction {
		return vs[0].([]TriggerAction)[vs[1].(int)]
	}).(TriggerActionOutput)
}

type TriggerCondition struct {
	CrawlState      *string `pulumi:"crawlState"`
	CrawlerName     *string `pulumi:"crawlerName"`
	JobName         *string `pulumi:"jobName"`
	LogicalOperator *string `pulumi:"logicalOperator"`
	State           *string `pulumi:"state"`
}

// TriggerConditionInput is an input type that accepts TriggerConditionArgs and TriggerConditionOutput values.
// You can construct a concrete instance of `TriggerConditionInput` via:
//
//	TriggerConditionArgs{...}
type TriggerConditionInput interface {
	pulumi.Input

	ToTriggerConditionOutput() TriggerConditionOutput
	ToTriggerConditionOutputWithContext(context.Context) TriggerConditionOutput
}

type TriggerConditionArgs struct {
	CrawlState      pulumi.StringPtrInput `pulumi:"crawlState"`
	CrawlerName     pulumi.StringPtrInput `pulumi:"crawlerName"`
	JobName         pulumi.StringPtrInput `pulumi:"jobName"`
	LogicalOperator pulumi.StringPtrInput `pulumi:"logicalOperator"`
	State           pulumi.StringPtrInput `pulumi:"state"`
}

func (TriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArgs) ToTriggerConditionOutput() TriggerConditionOutput {
	return i.ToTriggerConditionOutputWithContext(context.Background())
}

func (i TriggerConditionArgs) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionOutput)
}

func (i TriggerConditionArgs) ToOutput(ctx context.Context) pulumix.Output[TriggerCondition] {
	return pulumix.Output[TriggerCondition]{
		OutputState: i.ToTriggerConditionOutputWithContext(ctx).OutputState,
	}
}

// TriggerConditionArrayInput is an input type that accepts TriggerConditionArray and TriggerConditionArrayOutput values.
// You can construct a concrete instance of `TriggerConditionArrayInput` via:
//
//	TriggerConditionArray{ TriggerConditionArgs{...} }
type TriggerConditionArrayInput interface {
	pulumi.Input

	ToTriggerConditionArrayOutput() TriggerConditionArrayOutput
	ToTriggerConditionArrayOutputWithContext(context.Context) TriggerConditionArrayOutput
}

type TriggerConditionArray []TriggerConditionInput

func (TriggerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArray) ToTriggerConditionArrayOutput() TriggerConditionArrayOutput {
	return i.ToTriggerConditionArrayOutputWithContext(context.Background())
}

func (i TriggerConditionArray) ToTriggerConditionArrayOutputWithContext(ctx context.Context) TriggerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionArrayOutput)
}

func (i TriggerConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]TriggerCondition] {
	return pulumix.Output[[]TriggerCondition]{
		OutputState: i.ToTriggerConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type TriggerConditionOutput struct{ *pulumi.OutputState }

func (TriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (o TriggerConditionOutput) ToTriggerConditionOutput() TriggerConditionOutput {
	return o
}

func (o TriggerConditionOutput) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return o
}

func (o TriggerConditionOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerCondition] {
	return pulumix.Output[TriggerCondition]{
		OutputState: o.OutputState,
	}
}

func (o TriggerConditionOutput) CrawlState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.CrawlState }).(pulumi.StringPtrOutput)
}

func (o TriggerConditionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

func (o TriggerConditionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

func (o TriggerConditionOutput) LogicalOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.LogicalOperator }).(pulumi.StringPtrOutput)
}

func (o TriggerConditionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TriggerConditionArrayOutput struct{ *pulumi.OutputState }

func (TriggerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerCondition)(nil)).Elem()
}

func (o TriggerConditionArrayOutput) ToTriggerConditionArrayOutput() TriggerConditionArrayOutput {
	return o
}

func (o TriggerConditionArrayOutput) ToTriggerConditionArrayOutputWithContext(ctx context.Context) TriggerConditionArrayOutput {
	return o
}

func (o TriggerConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TriggerCondition] {
	return pulumix.Output[[]TriggerCondition]{
		OutputState: o.OutputState,
	}
}

func (o TriggerConditionArrayOutput) Index(i pulumi.IntInput) TriggerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerCondition {
		return vs[0].([]TriggerCondition)[vs[1].(int)]
	}).(TriggerConditionOutput)
}

type TriggerEventBatchingCondition struct {
	BatchSize   int  `pulumi:"batchSize"`
	BatchWindow *int `pulumi:"batchWindow"`
}

// TriggerEventBatchingConditionInput is an input type that accepts TriggerEventBatchingConditionArgs and TriggerEventBatchingConditionOutput values.
// You can construct a concrete instance of `TriggerEventBatchingConditionInput` via:
//
//	TriggerEventBatchingConditionArgs{...}
type TriggerEventBatchingConditionInput interface {
	pulumi.Input

	ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput
	ToTriggerEventBatchingConditionOutputWithContext(context.Context) TriggerEventBatchingConditionOutput
}

type TriggerEventBatchingConditionArgs struct {
	BatchSize   pulumi.IntInput    `pulumi:"batchSize"`
	BatchWindow pulumi.IntPtrInput `pulumi:"batchWindow"`
}

func (TriggerEventBatchingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return i.ToTriggerEventBatchingConditionOutputWithContext(context.Background())
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionOutput)
}

func (i TriggerEventBatchingConditionArgs) ToOutput(ctx context.Context) pulumix.Output[TriggerEventBatchingCondition] {
	return pulumix.Output[TriggerEventBatchingCondition]{
		OutputState: i.ToTriggerEventBatchingConditionOutputWithContext(ctx).OutputState,
	}
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return i.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionOutput).ToTriggerEventBatchingConditionPtrOutputWithContext(ctx)
}

// TriggerEventBatchingConditionPtrInput is an input type that accepts TriggerEventBatchingConditionArgs, TriggerEventBatchingConditionPtr and TriggerEventBatchingConditionPtrOutput values.
// You can construct a concrete instance of `TriggerEventBatchingConditionPtrInput` via:
//
//	        TriggerEventBatchingConditionArgs{...}
//
//	or:
//
//	        nil
type TriggerEventBatchingConditionPtrInput interface {
	pulumi.Input

	ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput
	ToTriggerEventBatchingConditionPtrOutputWithContext(context.Context) TriggerEventBatchingConditionPtrOutput
}

type triggerEventBatchingConditionPtrType TriggerEventBatchingConditionArgs

func TriggerEventBatchingConditionPtr(v *TriggerEventBatchingConditionArgs) TriggerEventBatchingConditionPtrInput {
	return (*triggerEventBatchingConditionPtrType)(v)
}

func (*triggerEventBatchingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEventBatchingCondition)(nil)).Elem()
}

func (i *triggerEventBatchingConditionPtrType) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return i.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (i *triggerEventBatchingConditionPtrType) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionPtrOutput)
}

func (i *triggerEventBatchingConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*TriggerEventBatchingCondition] {
	return pulumix.Output[*TriggerEventBatchingCondition]{
		OutputState: i.ToTriggerEventBatchingConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type TriggerEventBatchingConditionOutput struct{ *pulumi.OutputState }

func (TriggerEventBatchingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return o.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerEventBatchingCondition) *TriggerEventBatchingCondition {
		return &v
	}).(TriggerEventBatchingConditionPtrOutput)
}

func (o TriggerEventBatchingConditionOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerEventBatchingCondition] {
	return pulumix.Output[TriggerEventBatchingCondition]{
		OutputState: o.OutputState,
	}
}

func (o TriggerEventBatchingConditionOutput) BatchSize() pulumi.IntOutput {
	return o.ApplyT(func(v TriggerEventBatchingCondition) int { return v.BatchSize }).(pulumi.IntOutput)
}

func (o TriggerEventBatchingConditionOutput) BatchWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerEventBatchingCondition) *int { return v.BatchWindow }).(pulumi.IntPtrOutput)
}

type TriggerEventBatchingConditionPtrOutput struct{ *pulumi.OutputState }

func (TriggerEventBatchingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEventBatchingCondition)(nil)).Elem()
}

func (o TriggerEventBatchingConditionPtrOutput) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return o
}

func (o TriggerEventBatchingConditionPtrOutput) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return o
}

func (o TriggerEventBatchingConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TriggerEventBatchingCondition] {
	return pulumix.Output[*TriggerEventBatchingCondition]{
		OutputState: o.OutputState,
	}
}

func (o TriggerEventBatchingConditionPtrOutput) Elem() TriggerEventBatchingConditionOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) TriggerEventBatchingCondition {
		if v != nil {
			return *v
		}
		var ret TriggerEventBatchingCondition
		return ret
	}).(TriggerEventBatchingConditionOutput)
}

func (o TriggerEventBatchingConditionPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) *int {
		if v == nil {
			return nil
		}
		return &v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o TriggerEventBatchingConditionPtrOutput) BatchWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) *int {
		if v == nil {
			return nil
		}
		return v.BatchWindow
	}).(pulumi.IntPtrOutput)
}

type TriggerNotificationProperty struct {
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

// TriggerNotificationPropertyInput is an input type that accepts TriggerNotificationPropertyArgs and TriggerNotificationPropertyOutput values.
// You can construct a concrete instance of `TriggerNotificationPropertyInput` via:
//
//	TriggerNotificationPropertyArgs{...}
type TriggerNotificationPropertyInput interface {
	pulumi.Input

	ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput
	ToTriggerNotificationPropertyOutputWithContext(context.Context) TriggerNotificationPropertyOutput
}

type TriggerNotificationPropertyArgs struct {
	NotifyDelayAfter pulumi.IntPtrInput `pulumi:"notifyDelayAfter"`
}

func (TriggerNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNotificationProperty)(nil)).Elem()
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput {
	return i.ToTriggerNotificationPropertyOutputWithContext(context.Background())
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyOutputWithContext(ctx context.Context) TriggerNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyOutput)
}

func (i TriggerNotificationPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[TriggerNotificationProperty] {
	return pulumix.Output[TriggerNotificationProperty]{
		OutputState: i.ToTriggerNotificationPropertyOutputWithContext(ctx).OutputState,
	}
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return i.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyOutput).ToTriggerNotificationPropertyPtrOutputWithContext(ctx)
}

// TriggerNotificationPropertyPtrInput is an input type that accepts TriggerNotificationPropertyArgs, TriggerNotificationPropertyPtr and TriggerNotificationPropertyPtrOutput values.
// You can construct a concrete instance of `TriggerNotificationPropertyPtrInput` via:
//
//	        TriggerNotificationPropertyArgs{...}
//
//	or:
//
//	        nil
type TriggerNotificationPropertyPtrInput interface {
	pulumi.Input

	ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput
	ToTriggerNotificationPropertyPtrOutputWithContext(context.Context) TriggerNotificationPropertyPtrOutput
}

type triggerNotificationPropertyPtrType TriggerNotificationPropertyArgs

func TriggerNotificationPropertyPtr(v *TriggerNotificationPropertyArgs) TriggerNotificationPropertyPtrInput {
	return (*triggerNotificationPropertyPtrType)(v)
}

func (*triggerNotificationPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNotificationProperty)(nil)).Elem()
}

func (i *triggerNotificationPropertyPtrType) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return i.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i *triggerNotificationPropertyPtrType) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyPtrOutput)
}

func (i *triggerNotificationPropertyPtrType) ToOutput(ctx context.Context) pulumix.Output[*TriggerNotificationProperty] {
	return pulumix.Output[*TriggerNotificationProperty]{
		OutputState: i.ToTriggerNotificationPropertyPtrOutputWithContext(ctx).OutputState,
	}
}

type TriggerNotificationPropertyOutput struct{ *pulumi.OutputState }

func (TriggerNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNotificationProperty)(nil)).Elem()
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput {
	return o
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyOutputWithContext(ctx context.Context) TriggerNotificationPropertyOutput {
	return o
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return o.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerNotificationProperty) *TriggerNotificationProperty {
		return &v
	}).(TriggerNotificationPropertyPtrOutput)
}

func (o TriggerNotificationPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerNotificationProperty] {
	return pulumix.Output[TriggerNotificationProperty]{
		OutputState: o.OutputState,
	}
}

func (o TriggerNotificationPropertyOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerNotificationProperty) *int { return v.NotifyDelayAfter }).(pulumi.IntPtrOutput)
}

type TriggerNotificationPropertyPtrOutput struct{ *pulumi.OutputState }

func (TriggerNotificationPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNotificationProperty)(nil)).Elem()
}

func (o TriggerNotificationPropertyPtrOutput) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return o
}

func (o TriggerNotificationPropertyPtrOutput) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return o
}

func (o TriggerNotificationPropertyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TriggerNotificationProperty] {
	return pulumix.Output[*TriggerNotificationProperty]{
		OutputState: o.OutputState,
	}
}

func (o TriggerNotificationPropertyPtrOutput) Elem() TriggerNotificationPropertyOutput {
	return o.ApplyT(func(v *TriggerNotificationProperty) TriggerNotificationProperty {
		if v != nil {
			return *v
		}
		var ret TriggerNotificationProperty
		return ret
	}).(TriggerNotificationPropertyOutput)
}

func (o TriggerNotificationPropertyPtrOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerNotificationProperty) *int {
		if v == nil {
			return nil
		}
		return v.NotifyDelayAfter
	}).(pulumi.IntPtrOutput)
}

type TriggerPredicate struct {
	Conditions []TriggerCondition `pulumi:"conditions"`
	Logical    *string            `pulumi:"logical"`
}

// TriggerPredicateInput is an input type that accepts TriggerPredicateArgs and TriggerPredicateOutput values.
// You can construct a concrete instance of `TriggerPredicateInput` via:
//
//	TriggerPredicateArgs{...}
type TriggerPredicateInput interface {
	pulumi.Input

	ToTriggerPredicateOutput() TriggerPredicateOutput
	ToTriggerPredicateOutputWithContext(context.Context) TriggerPredicateOutput
}

type TriggerPredicateArgs struct {
	Conditions TriggerConditionArrayInput `pulumi:"conditions"`
	Logical    pulumi.StringPtrInput      `pulumi:"logical"`
}

func (TriggerPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return i.ToTriggerPredicateOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput)
}

func (i TriggerPredicateArgs) ToOutput(ctx context.Context) pulumix.Output[TriggerPredicate] {
	return pulumix.Output[TriggerPredicate]{
		OutputState: i.ToTriggerPredicateOutputWithContext(ctx).OutputState,
	}
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput).ToTriggerPredicatePtrOutputWithContext(ctx)
}

// TriggerPredicatePtrInput is an input type that accepts TriggerPredicateArgs, TriggerPredicatePtr and TriggerPredicatePtrOutput values.
// You can construct a concrete instance of `TriggerPredicatePtrInput` via:
//
//	        TriggerPredicateArgs{...}
//
//	or:
//
//	        nil
type TriggerPredicatePtrInput interface {
	pulumi.Input

	ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput
	ToTriggerPredicatePtrOutputWithContext(context.Context) TriggerPredicatePtrOutput
}

type triggerPredicatePtrType TriggerPredicateArgs

func TriggerPredicatePtr(v *TriggerPredicateArgs) TriggerPredicatePtrInput {
	return (*triggerPredicatePtrType)(v)
}

func (*triggerPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicatePtrOutput)
}

func (i *triggerPredicatePtrType) ToOutput(ctx context.Context) pulumix.Output[*TriggerPredicate] {
	return pulumix.Output[*TriggerPredicate]{
		OutputState: i.ToTriggerPredicatePtrOutputWithContext(ctx).OutputState,
	}
}

type TriggerPredicateOutput struct{ *pulumi.OutputState }

func (TriggerPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerPredicate) *TriggerPredicate {
		return &v
	}).(TriggerPredicatePtrOutput)
}

func (o TriggerPredicateOutput) ToOutput(ctx context.Context) pulumix.Output[TriggerPredicate] {
	return pulumix.Output[TriggerPredicate]{
		OutputState: o.OutputState,
	}
}

func (o TriggerPredicateOutput) Conditions() TriggerConditionArrayOutput {
	return o.ApplyT(func(v TriggerPredicate) []TriggerCondition { return v.Conditions }).(TriggerConditionArrayOutput)
}

func (o TriggerPredicateOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicate) *string { return v.Logical }).(pulumi.StringPtrOutput)
}

type TriggerPredicatePtrOutput struct{ *pulumi.OutputState }

func (TriggerPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TriggerPredicate] {
	return pulumix.Output[*TriggerPredicate]{
		OutputState: o.OutputState,
	}
}

func (o TriggerPredicatePtrOutput) Elem() TriggerPredicateOutput {
	return o.ApplyT(func(v *TriggerPredicate) TriggerPredicate {
		if v != nil {
			return *v
		}
		var ret TriggerPredicate
		return ret
	}).(TriggerPredicateOutput)
}

func (o TriggerPredicatePtrOutput) Conditions() TriggerConditionArrayOutput {
	return o.ApplyT(func(v *TriggerPredicate) []TriggerCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(TriggerConditionArrayOutput)
}

func (o TriggerPredicatePtrOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Logical
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierCsvClassifierInput)(nil)).Elem(), ClassifierCsvClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierCsvClassifierPtrInput)(nil)).Elem(), ClassifierCsvClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierGrokClassifierInput)(nil)).Elem(), ClassifierGrokClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierGrokClassifierPtrInput)(nil)).Elem(), ClassifierGrokClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierJsonClassifierInput)(nil)).Elem(), ClassifierJsonClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierJsonClassifierPtrInput)(nil)).Elem(), ClassifierJsonClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierXmlClassifierInput)(nil)).Elem(), ClassifierXmlClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassifierXmlClassifierPtrInput)(nil)).Elem(), ClassifierXmlClassifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInputTypeInput)(nil)).Elem(), ConnectionInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPhysicalConnectionRequirementsInput)(nil)).Elem(), ConnectionPhysicalConnectionRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPhysicalConnectionRequirementsPtrInput)(nil)).Elem(), ConnectionPhysicalConnectionRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerCatalogTargetInput)(nil)).Elem(), CrawlerCatalogTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerCatalogTargetArrayInput)(nil)).Elem(), CrawlerCatalogTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDeltaTargetInput)(nil)).Elem(), CrawlerDeltaTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDeltaTargetArrayInput)(nil)).Elem(), CrawlerDeltaTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDynamoDbTargetInput)(nil)).Elem(), CrawlerDynamoDbTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerDynamoDbTargetArrayInput)(nil)).Elem(), CrawlerDynamoDbTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerIcebergTargetInput)(nil)).Elem(), CrawlerIcebergTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerIcebergTargetArrayInput)(nil)).Elem(), CrawlerIcebergTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerJdbcTargetInput)(nil)).Elem(), CrawlerJdbcTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerJdbcTargetArrayInput)(nil)).Elem(), CrawlerJdbcTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerMongoDbTargetInput)(nil)).Elem(), CrawlerMongoDbTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerMongoDbTargetArrayInput)(nil)).Elem(), CrawlerMongoDbTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerRecrawlPolicyInput)(nil)).Elem(), CrawlerRecrawlPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerRecrawlPolicyPtrInput)(nil)).Elem(), CrawlerRecrawlPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerS3TargetInput)(nil)).Elem(), CrawlerS3TargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerS3TargetArrayInput)(nil)).Elem(), CrawlerS3TargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerScheduleInput)(nil)).Elem(), CrawlerScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerSchedulePtrInput)(nil)).Elem(), CrawlerScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerSchemaChangePolicyInput)(nil)).Elem(), CrawlerSchemaChangePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerSchemaChangePolicyPtrInput)(nil)).Elem(), CrawlerSchemaChangePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CrawlerTargetsInput)(nil)).Elem(), CrawlerTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogEncryptionSettingsTypeInput)(nil)).Elem(), DataCatalogEncryptionSettingsTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogEncryptionSettingsConnectionPasswordEncryptionInput)(nil)).Elem(), DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrInput)(nil)).Elem(), DataCatalogEncryptionSettingsConnectionPasswordEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogEncryptionSettingsEncryptionAtRestInput)(nil)).Elem(), DataCatalogEncryptionSettingsEncryptionAtRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogEncryptionSettingsEncryptionAtRestPtrInput)(nil)).Elem(), DataCatalogEncryptionSettingsEncryptionAtRestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataQualityRulesetDataQualityTargetTableInput)(nil)).Elem(), DataQualityRulesetDataQualityTargetTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataQualityRulesetDataQualityTargetTablePtrInput)(nil)).Elem(), DataQualityRulesetDataQualityTargetTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataLakePrincipalInput)(nil)).Elem(), DatabaseDataLakePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataLakePrincipalPtrInput)(nil)).Elem(), DatabaseDataLakePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFederatedDatabaseInput)(nil)).Elem(), DatabaseFederatedDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFederatedDatabasePtrInput)(nil)).Elem(), DatabaseFederatedDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIdentifierInput)(nil)).Elem(), DatabaseIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIdentifierPtrInput)(nil)).Elem(), DatabaseIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInputTypeInput)(nil)).Elem(), DatabaseInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePrincipalPrivilegesInput)(nil)).Elem(), DatabasePrincipalPrivilegesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePrincipalPrivilegesArrayInput)(nil)).Elem(), DatabasePrincipalPrivilegesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCommandInput)(nil)).Elem(), JobCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConnectionsListInput)(nil)).Elem(), JobConnectionsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConnectionsListPtrInput)(nil)).Elem(), JobConnectionsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionPropertyInput)(nil)).Elem(), JobExecutionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionPropertyPtrInput)(nil)).Elem(), JobExecutionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobNotificationPropertyInput)(nil)).Elem(), JobNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobNotificationPropertyPtrInput)(nil)).Elem(), JobNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformFindMatchesParametersInput)(nil)).Elem(), MlTransformFindMatchesParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformFindMatchesParametersPtrInput)(nil)).Elem(), MlTransformFindMatchesParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformGlueTablesInput)(nil)).Elem(), MlTransformGlueTablesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformGlueTablesArrayInput)(nil)).Elem(), MlTransformGlueTablesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformInputRecordTablesInput)(nil)).Elem(), MlTransformInputRecordTablesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformMlUserDataEncryptionInput)(nil)).Elem(), MlTransformMlUserDataEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformMlUserDataEncryptionPtrInput)(nil)).Elem(), MlTransformMlUserDataEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformTransformEncryptionInput)(nil)).Elem(), MlTransformTransformEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformTransformEncryptionPtrInput)(nil)).Elem(), MlTransformTransformEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformTransformParametersInput)(nil)).Elem(), MlTransformTransformParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionColumnInput)(nil)).Elem(), PartitionColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionColumnArrayInput)(nil)).Elem(), PartitionColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionInputTypeInput)(nil)).Elem(), PartitionInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionOrderInput)(nil)).Elem(), PartitionOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionOrderArrayInput)(nil)).Elem(), PartitionOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSchemaIdInput)(nil)).Elem(), PartitionSchemaIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSchemaIdPtrInput)(nil)).Elem(), PartitionSchemaIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSchemaReferenceInput)(nil)).Elem(), PartitionSchemaReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSchemaReferencePtrInput)(nil)).Elem(), PartitionSchemaReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSerdeInfoInput)(nil)).Elem(), PartitionSerdeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSerdeInfoPtrInput)(nil)).Elem(), PartitionSerdeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSkewedInfoInput)(nil)).Elem(), PartitionSkewedInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionSkewedInfoPtrInput)(nil)).Elem(), PartitionSkewedInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionStorageDescriptorInput)(nil)).Elem(), PartitionStorageDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitionStorageDescriptorPtrInput)(nil)).Elem(), PartitionStorageDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTagInput)(nil)).Elem(), RegistryTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTagArrayInput)(nil)).Elem(), RegistryTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryPtrInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaTagInput)(nil)).Elem(), SchemaTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaTagArrayInput)(nil)).Elem(), SchemaTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypeInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypePtrInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionSchemaInput)(nil)).Elem(), SchemaVersionSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationCloudWatchEncryptionInput)(nil)).Elem(), SecurityConfigurationCloudWatchEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationCloudWatchEncryptionPtrInput)(nil)).Elem(), SecurityConfigurationCloudWatchEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationEncryptionConfigurationInput)(nil)).Elem(), SecurityConfigurationEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationJobBookmarksEncryptionInput)(nil)).Elem(), SecurityConfigurationJobBookmarksEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationJobBookmarksEncryptionPtrInput)(nil)).Elem(), SecurityConfigurationJobBookmarksEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationS3EncryptionsInput)(nil)).Elem(), SecurityConfigurationS3EncryptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationS3EncryptionsPtrInput)(nil)).Elem(), SecurityConfigurationS3EncryptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnInput)(nil)).Elem(), TableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnArrayInput)(nil)).Elem(), TableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableIcebergInputInput)(nil)).Elem(), TableIcebergInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableIcebergInputPtrInput)(nil)).Elem(), TableIcebergInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableIdentifierInput)(nil)).Elem(), TableIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableIdentifierPtrInput)(nil)).Elem(), TableIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableInputTypeInput)(nil)).Elem(), TableInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMetadataOperationInput)(nil)).Elem(), TableMetadataOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMetadataOperationPtrInput)(nil)).Elem(), TableMetadataOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableOpenTableFormatInputInput)(nil)).Elem(), TableOpenTableFormatInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableOpenTableFormatInputPtrInput)(nil)).Elem(), TableOpenTableFormatInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableOrderInput)(nil)).Elem(), TableOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableOrderArrayInput)(nil)).Elem(), TableOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaIdInput)(nil)).Elem(), TableSchemaIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaIdPtrInput)(nil)).Elem(), TableSchemaIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaReferenceInput)(nil)).Elem(), TableSchemaReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaReferencePtrInput)(nil)).Elem(), TableSchemaReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSerdeInfoInput)(nil)).Elem(), TableSerdeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSerdeInfoPtrInput)(nil)).Elem(), TableSerdeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSkewedInfoInput)(nil)).Elem(), TableSkewedInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSkewedInfoPtrInput)(nil)).Elem(), TableSkewedInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableStorageDescriptorInput)(nil)).Elem(), TableStorageDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableStorageDescriptorPtrInput)(nil)).Elem(), TableStorageDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerActionInput)(nil)).Elem(), TriggerActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerActionArrayInput)(nil)).Elem(), TriggerActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerConditionInput)(nil)).Elem(), TriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerConditionArrayInput)(nil)).Elem(), TriggerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEventBatchingConditionInput)(nil)).Elem(), TriggerEventBatchingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEventBatchingConditionPtrInput)(nil)).Elem(), TriggerEventBatchingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNotificationPropertyInput)(nil)).Elem(), TriggerNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNotificationPropertyPtrInput)(nil)).Elem(), TriggerNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerPredicateInput)(nil)).Elem(), TriggerPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerPredicatePtrInput)(nil)).Elem(), TriggerPredicateArgs{})
	pulumi.RegisterOutputType(ClassifierCsvClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierCsvClassifierPtrOutput{})
	pulumi.RegisterOutputType(ClassifierGrokClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierGrokClassifierPtrOutput{})
	pulumi.RegisterOutputType(ClassifierJsonClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierJsonClassifierPtrOutput{})
	pulumi.RegisterOutputType(ClassifierXmlClassifierOutput{})
	pulumi.RegisterOutputType(ClassifierXmlClassifierPtrOutput{})
	pulumi.RegisterOutputType(ConnectionInputTypeOutput{})
	pulumi.RegisterOutputType(ConnectionInputTypePtrOutput{})
	pulumi.RegisterOutputType(ConnectionPhysicalConnectionRequirementsOutput{})
	pulumi.RegisterOutputType(ConnectionPhysicalConnectionRequirementsPtrOutput{})
	pulumi.RegisterOutputType(CrawlerCatalogTargetOutput{})
	pulumi.RegisterOutputType(CrawlerCatalogTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerDeltaTargetOutput{})
	pulumi.RegisterOutputType(CrawlerDeltaTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerDynamoDbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerDynamoDbTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerIcebergTargetOutput{})
	pulumi.RegisterOutputType(CrawlerIcebergTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetOutput{})
	pulumi.RegisterOutputType(CrawlerJdbcTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerMongoDbTargetOutput{})
	pulumi.RegisterOutputType(CrawlerMongoDbTargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerRecrawlPolicyOutput{})
	pulumi.RegisterOutputType(CrawlerRecrawlPolicyPtrOutput{})
	pulumi.RegisterOutputType(CrawlerS3TargetOutput{})
	pulumi.RegisterOutputType(CrawlerS3TargetArrayOutput{})
	pulumi.RegisterOutputType(CrawlerScheduleOutput{})
	pulumi.RegisterOutputType(CrawlerSchedulePtrOutput{})
	pulumi.RegisterOutputType(CrawlerSchemaChangePolicyOutput{})
	pulumi.RegisterOutputType(CrawlerSchemaChangePolicyPtrOutput{})
	pulumi.RegisterOutputType(CrawlerTargetsOutput{})
	pulumi.RegisterOutputType(CrawlerTargetsPtrOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsTypeOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsTypePtrOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsConnectionPasswordEncryptionOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsConnectionPasswordEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsEncryptionAtRestOutput{})
	pulumi.RegisterOutputType(DataCatalogEncryptionSettingsEncryptionAtRestPtrOutput{})
	pulumi.RegisterOutputType(DataQualityRulesetDataQualityTargetTableOutput{})
	pulumi.RegisterOutputType(DataQualityRulesetDataQualityTargetTablePtrOutput{})
	pulumi.RegisterOutputType(DatabaseDataLakePrincipalOutput{})
	pulumi.RegisterOutputType(DatabaseDataLakePrincipalPtrOutput{})
	pulumi.RegisterOutputType(DatabaseFederatedDatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseFederatedDatabasePtrOutput{})
	pulumi.RegisterOutputType(DatabaseIdentifierOutput{})
	pulumi.RegisterOutputType(DatabaseIdentifierPtrOutput{})
	pulumi.RegisterOutputType(DatabaseInputTypeOutput{})
	pulumi.RegisterOutputType(DatabaseInputTypePtrOutput{})
	pulumi.RegisterOutputType(DatabasePrincipalPrivilegesOutput{})
	pulumi.RegisterOutputType(DatabasePrincipalPrivilegesArrayOutput{})
	pulumi.RegisterOutputType(JobCommandOutput{})
	pulumi.RegisterOutputType(JobCommandPtrOutput{})
	pulumi.RegisterOutputType(JobConnectionsListOutput{})
	pulumi.RegisterOutputType(JobConnectionsListPtrOutput{})
	pulumi.RegisterOutputType(JobExecutionPropertyOutput{})
	pulumi.RegisterOutputType(JobExecutionPropertyPtrOutput{})
	pulumi.RegisterOutputType(JobNotificationPropertyOutput{})
	pulumi.RegisterOutputType(JobNotificationPropertyPtrOutput{})
	pulumi.RegisterOutputType(MlTransformFindMatchesParametersOutput{})
	pulumi.RegisterOutputType(MlTransformFindMatchesParametersPtrOutput{})
	pulumi.RegisterOutputType(MlTransformGlueTablesOutput{})
	pulumi.RegisterOutputType(MlTransformGlueTablesArrayOutput{})
	pulumi.RegisterOutputType(MlTransformInputRecordTablesOutput{})
	pulumi.RegisterOutputType(MlTransformMlUserDataEncryptionOutput{})
	pulumi.RegisterOutputType(MlTransformMlUserDataEncryptionPtrOutput{})
	pulumi.RegisterOutputType(MlTransformTransformEncryptionOutput{})
	pulumi.RegisterOutputType(MlTransformTransformEncryptionPtrOutput{})
	pulumi.RegisterOutputType(MlTransformTransformParametersOutput{})
	pulumi.RegisterOutputType(MlTransformTransformParametersPtrOutput{})
	pulumi.RegisterOutputType(PartitionColumnOutput{})
	pulumi.RegisterOutputType(PartitionColumnArrayOutput{})
	pulumi.RegisterOutputType(PartitionInputTypeOutput{})
	pulumi.RegisterOutputType(PartitionInputTypePtrOutput{})
	pulumi.RegisterOutputType(PartitionOrderOutput{})
	pulumi.RegisterOutputType(PartitionOrderArrayOutput{})
	pulumi.RegisterOutputType(PartitionSchemaIdOutput{})
	pulumi.RegisterOutputType(PartitionSchemaIdPtrOutput{})
	pulumi.RegisterOutputType(PartitionSchemaReferenceOutput{})
	pulumi.RegisterOutputType(PartitionSchemaReferencePtrOutput{})
	pulumi.RegisterOutputType(PartitionSerdeInfoOutput{})
	pulumi.RegisterOutputType(PartitionSerdeInfoPtrOutput{})
	pulumi.RegisterOutputType(PartitionSkewedInfoOutput{})
	pulumi.RegisterOutputType(PartitionSkewedInfoPtrOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorOutput{})
	pulumi.RegisterOutputType(PartitionStorageDescriptorPtrOutput{})
	pulumi.RegisterOutputType(RegistryTagOutput{})
	pulumi.RegisterOutputType(RegistryTagArrayOutput{})
	pulumi.RegisterOutputType(SchemaRegistryOutput{})
	pulumi.RegisterOutputType(SchemaRegistryPtrOutput{})
	pulumi.RegisterOutputType(SchemaTagOutput{})
	pulumi.RegisterOutputType(SchemaTagArrayOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypeOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypePtrOutput{})
	pulumi.RegisterOutputType(SchemaVersionSchemaOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationCloudWatchEncryptionOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationCloudWatchEncryptionPtrOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationJobBookmarksEncryptionOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationJobBookmarksEncryptionPtrOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationS3EncryptionsOutput{})
	pulumi.RegisterOutputType(SecurityConfigurationS3EncryptionsPtrOutput{})
	pulumi.RegisterOutputType(TableColumnOutput{})
	pulumi.RegisterOutputType(TableColumnArrayOutput{})
	pulumi.RegisterOutputType(TableIcebergInputOutput{})
	pulumi.RegisterOutputType(TableIcebergInputPtrOutput{})
	pulumi.RegisterOutputType(TableIdentifierOutput{})
	pulumi.RegisterOutputType(TableIdentifierPtrOutput{})
	pulumi.RegisterOutputType(TableInputTypeOutput{})
	pulumi.RegisterOutputType(TableInputTypePtrOutput{})
	pulumi.RegisterOutputType(TableMetadataOperationOutput{})
	pulumi.RegisterOutputType(TableMetadataOperationPtrOutput{})
	pulumi.RegisterOutputType(TableOpenTableFormatInputOutput{})
	pulumi.RegisterOutputType(TableOpenTableFormatInputPtrOutput{})
	pulumi.RegisterOutputType(TableOrderOutput{})
	pulumi.RegisterOutputType(TableOrderArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaIdOutput{})
	pulumi.RegisterOutputType(TableSchemaIdPtrOutput{})
	pulumi.RegisterOutputType(TableSchemaReferenceOutput{})
	pulumi.RegisterOutputType(TableSchemaReferencePtrOutput{})
	pulumi.RegisterOutputType(TableSerdeInfoOutput{})
	pulumi.RegisterOutputType(TableSerdeInfoPtrOutput{})
	pulumi.RegisterOutputType(TableSkewedInfoOutput{})
	pulumi.RegisterOutputType(TableSkewedInfoPtrOutput{})
	pulumi.RegisterOutputType(TableStorageDescriptorOutput{})
	pulumi.RegisterOutputType(TableStorageDescriptorPtrOutput{})
	pulumi.RegisterOutputType(TriggerActionOutput{})
	pulumi.RegisterOutputType(TriggerActionArrayOutput{})
	pulumi.RegisterOutputType(TriggerConditionOutput{})
	pulumi.RegisterOutputType(TriggerConditionArrayOutput{})
	pulumi.RegisterOutputType(TriggerEventBatchingConditionOutput{})
	pulumi.RegisterOutputType(TriggerEventBatchingConditionPtrOutput{})
	pulumi.RegisterOutputType(TriggerNotificationPropertyOutput{})
	pulumi.RegisterOutputType(TriggerNotificationPropertyPtrOutput{})
	pulumi.RegisterOutputType(TriggerPredicateOutput{})
	pulumi.RegisterOutputType(TriggerPredicatePtrOutput{})
}
