// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The AWS Lake Formation principal.
type DatabaseDataLakePrincipal struct {
	// An identifier for the AWS Lake Formation principal.
	DataLakePrincipalIdentifier *string `pulumi:"dataLakePrincipalIdentifier"`
}

// DatabaseDataLakePrincipalInput is an input type that accepts DatabaseDataLakePrincipalArgs and DatabaseDataLakePrincipalOutput values.
// You can construct a concrete instance of `DatabaseDataLakePrincipalInput` via:
//
//	DatabaseDataLakePrincipalArgs{...}
type DatabaseDataLakePrincipalInput interface {
	pulumi.Input

	ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput
	ToDatabaseDataLakePrincipalOutputWithContext(context.Context) DatabaseDataLakePrincipalOutput
}

// The AWS Lake Formation principal.
type DatabaseDataLakePrincipalArgs struct {
	// An identifier for the AWS Lake Formation principal.
	DataLakePrincipalIdentifier pulumi.StringPtrInput `pulumi:"dataLakePrincipalIdentifier"`
}

func (DatabaseDataLakePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataLakePrincipal)(nil)).Elem()
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput {
	return i.ToDatabaseDataLakePrincipalOutputWithContext(context.Background())
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalOutput)
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return i.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (i DatabaseDataLakePrincipalArgs) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalOutput).ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx)
}

// DatabaseDataLakePrincipalPtrInput is an input type that accepts DatabaseDataLakePrincipalArgs, DatabaseDataLakePrincipalPtr and DatabaseDataLakePrincipalPtrOutput values.
// You can construct a concrete instance of `DatabaseDataLakePrincipalPtrInput` via:
//
//	        DatabaseDataLakePrincipalArgs{...}
//
//	or:
//
//	        nil
type DatabaseDataLakePrincipalPtrInput interface {
	pulumi.Input

	ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput
	ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Context) DatabaseDataLakePrincipalPtrOutput
}

type databaseDataLakePrincipalPtrType DatabaseDataLakePrincipalArgs

func DatabaseDataLakePrincipalPtr(v *DatabaseDataLakePrincipalArgs) DatabaseDataLakePrincipalPtrInput {
	return (*databaseDataLakePrincipalPtrType)(v)
}

func (*databaseDataLakePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataLakePrincipal)(nil)).Elem()
}

func (i *databaseDataLakePrincipalPtrType) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return i.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (i *databaseDataLakePrincipalPtrType) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDataLakePrincipalPtrOutput)
}

// The AWS Lake Formation principal.
type DatabaseDataLakePrincipalOutput struct{ *pulumi.OutputState }

func (DatabaseDataLakePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDataLakePrincipal)(nil)).Elem()
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalOutput() DatabaseDataLakePrincipalOutput {
	return o
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalOutput {
	return o
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return o.ToDatabaseDataLakePrincipalPtrOutputWithContext(context.Background())
}

func (o DatabaseDataLakePrincipalOutput) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseDataLakePrincipal) *DatabaseDataLakePrincipal {
		return &v
	}).(DatabaseDataLakePrincipalPtrOutput)
}

// An identifier for the AWS Lake Formation principal.
func (o DatabaseDataLakePrincipalOutput) DataLakePrincipalIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDataLakePrincipal) *string { return v.DataLakePrincipalIdentifier }).(pulumi.StringPtrOutput)
}

type DatabaseDataLakePrincipalPtrOutput struct{ *pulumi.OutputState }

func (DatabaseDataLakePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDataLakePrincipal)(nil)).Elem()
}

func (o DatabaseDataLakePrincipalPtrOutput) ToDatabaseDataLakePrincipalPtrOutput() DatabaseDataLakePrincipalPtrOutput {
	return o
}

func (o DatabaseDataLakePrincipalPtrOutput) ToDatabaseDataLakePrincipalPtrOutputWithContext(ctx context.Context) DatabaseDataLakePrincipalPtrOutput {
	return o
}

func (o DatabaseDataLakePrincipalPtrOutput) Elem() DatabaseDataLakePrincipalOutput {
	return o.ApplyT(func(v *DatabaseDataLakePrincipal) DatabaseDataLakePrincipal {
		if v != nil {
			return *v
		}
		var ret DatabaseDataLakePrincipal
		return ret
	}).(DatabaseDataLakePrincipalOutput)
}

// An identifier for the AWS Lake Formation principal.
func (o DatabaseDataLakePrincipalPtrOutput) DataLakePrincipalIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDataLakePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.DataLakePrincipalIdentifier
	}).(pulumi.StringPtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
type DatabaseFederatedDatabase struct {
	// The name of the connection to the external metastore.
	ConnectionName *string `pulumi:"connectionName"`
	// A unique identifier for the federated database.
	Identifier *string `pulumi:"identifier"`
}

// DatabaseFederatedDatabaseInput is an input type that accepts DatabaseFederatedDatabaseArgs and DatabaseFederatedDatabaseOutput values.
// You can construct a concrete instance of `DatabaseFederatedDatabaseInput` via:
//
//	DatabaseFederatedDatabaseArgs{...}
type DatabaseFederatedDatabaseInput interface {
	pulumi.Input

	ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput
	ToDatabaseFederatedDatabaseOutputWithContext(context.Context) DatabaseFederatedDatabaseOutput
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
type DatabaseFederatedDatabaseArgs struct {
	// The name of the connection to the external metastore.
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// A unique identifier for the federated database.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (DatabaseFederatedDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFederatedDatabase)(nil)).Elem()
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput {
	return i.ToDatabaseFederatedDatabaseOutputWithContext(context.Background())
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabaseOutputWithContext(ctx context.Context) DatabaseFederatedDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabaseOutput)
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return i.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (i DatabaseFederatedDatabaseArgs) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabaseOutput).ToDatabaseFederatedDatabasePtrOutputWithContext(ctx)
}

// DatabaseFederatedDatabasePtrInput is an input type that accepts DatabaseFederatedDatabaseArgs, DatabaseFederatedDatabasePtr and DatabaseFederatedDatabasePtrOutput values.
// You can construct a concrete instance of `DatabaseFederatedDatabasePtrInput` via:
//
//	        DatabaseFederatedDatabaseArgs{...}
//
//	or:
//
//	        nil
type DatabaseFederatedDatabasePtrInput interface {
	pulumi.Input

	ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput
	ToDatabaseFederatedDatabasePtrOutputWithContext(context.Context) DatabaseFederatedDatabasePtrOutput
}

type databaseFederatedDatabasePtrType DatabaseFederatedDatabaseArgs

func DatabaseFederatedDatabasePtr(v *DatabaseFederatedDatabaseArgs) DatabaseFederatedDatabasePtrInput {
	return (*databaseFederatedDatabasePtrType)(v)
}

func (*databaseFederatedDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseFederatedDatabase)(nil)).Elem()
}

func (i *databaseFederatedDatabasePtrType) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return i.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (i *databaseFederatedDatabasePtrType) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFederatedDatabasePtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
type DatabaseFederatedDatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseFederatedDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFederatedDatabase)(nil)).Elem()
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabaseOutput() DatabaseFederatedDatabaseOutput {
	return o
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabaseOutputWithContext(ctx context.Context) DatabaseFederatedDatabaseOutput {
	return o
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return o.ToDatabaseFederatedDatabasePtrOutputWithContext(context.Background())
}

func (o DatabaseFederatedDatabaseOutput) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseFederatedDatabase) *DatabaseFederatedDatabase {
		return &v
	}).(DatabaseFederatedDatabasePtrOutput)
}

// The name of the connection to the external metastore.
func (o DatabaseFederatedDatabaseOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFederatedDatabase) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// A unique identifier for the federated database.
func (o DatabaseFederatedDatabaseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFederatedDatabase) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type DatabaseFederatedDatabasePtrOutput struct{ *pulumi.OutputState }

func (DatabaseFederatedDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseFederatedDatabase)(nil)).Elem()
}

func (o DatabaseFederatedDatabasePtrOutput) ToDatabaseFederatedDatabasePtrOutput() DatabaseFederatedDatabasePtrOutput {
	return o
}

func (o DatabaseFederatedDatabasePtrOutput) ToDatabaseFederatedDatabasePtrOutputWithContext(ctx context.Context) DatabaseFederatedDatabasePtrOutput {
	return o
}

func (o DatabaseFederatedDatabasePtrOutput) Elem() DatabaseFederatedDatabaseOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) DatabaseFederatedDatabase {
		if v != nil {
			return *v
		}
		var ret DatabaseFederatedDatabase
		return ret
	}).(DatabaseFederatedDatabaseOutput)
}

// The name of the connection to the external metastore.
func (o DatabaseFederatedDatabasePtrOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionName
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for the federated database.
func (o DatabaseFederatedDatabasePtrOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseFederatedDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Identifier
	}).(pulumi.StringPtrOutput)
}

// A structure that describes a target database for resource linking.
type DatabaseIdentifier struct {
	// The ID of the Data Catalog in which the database resides.
	CatalogId *string `pulumi:"catalogId"`
	// The name of the catalog database.
	DatabaseName *string `pulumi:"databaseName"`
	// Region of the target database.
	Region *string `pulumi:"region"`
}

// DatabaseIdentifierInput is an input type that accepts DatabaseIdentifierArgs and DatabaseIdentifierOutput values.
// You can construct a concrete instance of `DatabaseIdentifierInput` via:
//
//	DatabaseIdentifierArgs{...}
type DatabaseIdentifierInput interface {
	pulumi.Input

	ToDatabaseIdentifierOutput() DatabaseIdentifierOutput
	ToDatabaseIdentifierOutputWithContext(context.Context) DatabaseIdentifierOutput
}

// A structure that describes a target database for resource linking.
type DatabaseIdentifierArgs struct {
	// The ID of the Data Catalog in which the database resides.
	CatalogId pulumi.StringPtrInput `pulumi:"catalogId"`
	// The name of the catalog database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Region of the target database.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (DatabaseIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIdentifier)(nil)).Elem()
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierOutput() DatabaseIdentifierOutput {
	return i.ToDatabaseIdentifierOutputWithContext(context.Background())
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierOutputWithContext(ctx context.Context) DatabaseIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierOutput)
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return i.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (i DatabaseIdentifierArgs) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierOutput).ToDatabaseIdentifierPtrOutputWithContext(ctx)
}

// DatabaseIdentifierPtrInput is an input type that accepts DatabaseIdentifierArgs, DatabaseIdentifierPtr and DatabaseIdentifierPtrOutput values.
// You can construct a concrete instance of `DatabaseIdentifierPtrInput` via:
//
//	        DatabaseIdentifierArgs{...}
//
//	or:
//
//	        nil
type DatabaseIdentifierPtrInput interface {
	pulumi.Input

	ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput
	ToDatabaseIdentifierPtrOutputWithContext(context.Context) DatabaseIdentifierPtrOutput
}

type databaseIdentifierPtrType DatabaseIdentifierArgs

func DatabaseIdentifierPtr(v *DatabaseIdentifierArgs) DatabaseIdentifierPtrInput {
	return (*databaseIdentifierPtrType)(v)
}

func (*databaseIdentifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIdentifier)(nil)).Elem()
}

func (i *databaseIdentifierPtrType) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return i.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (i *databaseIdentifierPtrType) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseIdentifierPtrOutput)
}

// A structure that describes a target database for resource linking.
type DatabaseIdentifierOutput struct{ *pulumi.OutputState }

func (DatabaseIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseIdentifier)(nil)).Elem()
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierOutput() DatabaseIdentifierOutput {
	return o
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierOutputWithContext(ctx context.Context) DatabaseIdentifierOutput {
	return o
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return o.ToDatabaseIdentifierPtrOutputWithContext(context.Background())
}

func (o DatabaseIdentifierOutput) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseIdentifier) *DatabaseIdentifier {
		return &v
	}).(DatabaseIdentifierPtrOutput)
}

// The ID of the Data Catalog in which the database resides.
func (o DatabaseIdentifierOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

// The name of the catalog database.
func (o DatabaseIdentifierOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Region of the target database.
func (o DatabaseIdentifierOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseIdentifier) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type DatabaseIdentifierPtrOutput struct{ *pulumi.OutputState }

func (DatabaseIdentifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseIdentifier)(nil)).Elem()
}

func (o DatabaseIdentifierPtrOutput) ToDatabaseIdentifierPtrOutput() DatabaseIdentifierPtrOutput {
	return o
}

func (o DatabaseIdentifierPtrOutput) ToDatabaseIdentifierPtrOutputWithContext(ctx context.Context) DatabaseIdentifierPtrOutput {
	return o
}

func (o DatabaseIdentifierPtrOutput) Elem() DatabaseIdentifierOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) DatabaseIdentifier {
		if v != nil {
			return *v
		}
		var ret DatabaseIdentifier
		return ret
	}).(DatabaseIdentifierOutput)
}

// The ID of the Data Catalog in which the database resides.
func (o DatabaseIdentifierPtrOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.CatalogId
	}).(pulumi.StringPtrOutput)
}

// The name of the catalog database.
func (o DatabaseIdentifierPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Region of the target database.
func (o DatabaseIdentifierPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseIdentifier) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The structure used to create or update a database.
type DatabaseInputType struct {
	// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
	CreateTableDefaultPermissions []DatabasePrincipalPrivileges `pulumi:"createTableDefaultPermissions"`
	// A description of the database.
	Description *string `pulumi:"description"`
	// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
	FederatedDatabase *DatabaseFederatedDatabase `pulumi:"federatedDatabase"`
	// The location of the database (for example, an HDFS path).
	LocationUri *string `pulumi:"locationUri"`
	// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
	Name *string `pulumi:"name"`
	// These key-value pairs define parameters and properties of the database.
	Parameters interface{} `pulumi:"parameters"`
	// A DatabaseIdentifier structure that describes a target database for resource linking.
	TargetDatabase *DatabaseIdentifier `pulumi:"targetDatabase"`
}

// DatabaseInputTypeInput is an input type that accepts DatabaseInputTypeArgs and DatabaseInputTypeOutput values.
// You can construct a concrete instance of `DatabaseInputTypeInput` via:
//
//	DatabaseInputTypeArgs{...}
type DatabaseInputTypeInput interface {
	pulumi.Input

	ToDatabaseInputTypeOutput() DatabaseInputTypeOutput
	ToDatabaseInputTypeOutputWithContext(context.Context) DatabaseInputTypeOutput
}

// The structure used to create or update a database.
type DatabaseInputTypeArgs struct {
	// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
	CreateTableDefaultPermissions DatabasePrincipalPrivilegesArrayInput `pulumi:"createTableDefaultPermissions"`
	// A description of the database.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
	FederatedDatabase DatabaseFederatedDatabasePtrInput `pulumi:"federatedDatabase"`
	// The location of the database (for example, an HDFS path).
	LocationUri pulumi.StringPtrInput `pulumi:"locationUri"`
	// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// These key-value pairs define parameters and properties of the database.
	Parameters pulumi.Input `pulumi:"parameters"`
	// A DatabaseIdentifier structure that describes a target database for resource linking.
	TargetDatabase DatabaseIdentifierPtrInput `pulumi:"targetDatabase"`
}

func (DatabaseInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInputType)(nil)).Elem()
}

func (i DatabaseInputTypeArgs) ToDatabaseInputTypeOutput() DatabaseInputTypeOutput {
	return i.ToDatabaseInputTypeOutputWithContext(context.Background())
}

func (i DatabaseInputTypeArgs) ToDatabaseInputTypeOutputWithContext(ctx context.Context) DatabaseInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInputTypeOutput)
}

// The structure used to create or update a database.
type DatabaseInputTypeOutput struct{ *pulumi.OutputState }

func (DatabaseInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInputType)(nil)).Elem()
}

func (o DatabaseInputTypeOutput) ToDatabaseInputTypeOutput() DatabaseInputTypeOutput {
	return o
}

func (o DatabaseInputTypeOutput) ToDatabaseInputTypeOutputWithContext(ctx context.Context) DatabaseInputTypeOutput {
	return o
}

// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
func (o DatabaseInputTypeOutput) CreateTableDefaultPermissions() DatabasePrincipalPrivilegesArrayOutput {
	return o.ApplyT(func(v DatabaseInputType) []DatabasePrincipalPrivileges { return v.CreateTableDefaultPermissions }).(DatabasePrincipalPrivilegesArrayOutput)
}

// A description of the database.
func (o DatabaseInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
func (o DatabaseInputTypeOutput) FederatedDatabase() DatabaseFederatedDatabasePtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *DatabaseFederatedDatabase { return v.FederatedDatabase }).(DatabaseFederatedDatabasePtrOutput)
}

// The location of the database (for example, an HDFS path).
func (o DatabaseInputTypeOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.LocationUri }).(pulumi.StringPtrOutput)
}

// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
func (o DatabaseInputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// These key-value pairs define parameters and properties of the database.
func (o DatabaseInputTypeOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabaseInputType) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// A DatabaseIdentifier structure that describes a target database for resource linking.
func (o DatabaseInputTypeOutput) TargetDatabase() DatabaseIdentifierPtrOutput {
	return o.ApplyT(func(v DatabaseInputType) *DatabaseIdentifier { return v.TargetDatabase }).(DatabaseIdentifierPtrOutput)
}

type DatabaseInputTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseInputType)(nil)).Elem()
}

func (o DatabaseInputTypePtrOutput) ToDatabaseInputTypePtrOutput() DatabaseInputTypePtrOutput {
	return o
}

func (o DatabaseInputTypePtrOutput) ToDatabaseInputTypePtrOutputWithContext(ctx context.Context) DatabaseInputTypePtrOutput {
	return o
}

func (o DatabaseInputTypePtrOutput) Elem() DatabaseInputTypeOutput {
	return o.ApplyT(func(v *DatabaseInputType) DatabaseInputType {
		if v != nil {
			return *v
		}
		var ret DatabaseInputType
		return ret
	}).(DatabaseInputTypeOutput)
}

// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
func (o DatabaseInputTypePtrOutput) CreateTableDefaultPermissions() DatabasePrincipalPrivilegesArrayOutput {
	return o.ApplyT(func(v *DatabaseInputType) []DatabasePrincipalPrivileges {
		if v == nil {
			return nil
		}
		return v.CreateTableDefaultPermissions
	}).(DatabasePrincipalPrivilegesArrayOutput)
}

// A description of the database.
func (o DatabaseInputTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
func (o DatabaseInputTypePtrOutput) FederatedDatabase() DatabaseFederatedDatabasePtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *DatabaseFederatedDatabase {
		if v == nil {
			return nil
		}
		return v.FederatedDatabase
	}).(DatabaseFederatedDatabasePtrOutput)
}

// The location of the database (for example, an HDFS path).
func (o DatabaseInputTypePtrOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.LocationUri
	}).(pulumi.StringPtrOutput)
}

// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
func (o DatabaseInputTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// These key-value pairs define parameters and properties of the database.
func (o DatabaseInputTypePtrOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *DatabaseInputType) interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.AnyOutput)
}

// A DatabaseIdentifier structure that describes a target database for resource linking.
func (o DatabaseInputTypePtrOutput) TargetDatabase() DatabaseIdentifierPtrOutput {
	return o.ApplyT(func(v *DatabaseInputType) *DatabaseIdentifier {
		if v == nil {
			return nil
		}
		return v.TargetDatabase
	}).(DatabaseIdentifierPtrOutput)
}

// The permissions granted to a principal.
type DatabasePrincipalPrivileges struct {
	// The permissions that are granted to the principal.
	Permissions []string `pulumi:"permissions"`
	// The principal who is granted permissions.
	Principal *DatabaseDataLakePrincipal `pulumi:"principal"`
}

// DatabasePrincipalPrivilegesInput is an input type that accepts DatabasePrincipalPrivilegesArgs and DatabasePrincipalPrivilegesOutput values.
// You can construct a concrete instance of `DatabasePrincipalPrivilegesInput` via:
//
//	DatabasePrincipalPrivilegesArgs{...}
type DatabasePrincipalPrivilegesInput interface {
	pulumi.Input

	ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput
	ToDatabasePrincipalPrivilegesOutputWithContext(context.Context) DatabasePrincipalPrivilegesOutput
}

// The permissions granted to a principal.
type DatabasePrincipalPrivilegesArgs struct {
	// The permissions that are granted to the principal.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
	// The principal who is granted permissions.
	Principal DatabaseDataLakePrincipalPtrInput `pulumi:"principal"`
}

func (DatabasePrincipalPrivilegesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrincipalPrivileges)(nil)).Elem()
}

func (i DatabasePrincipalPrivilegesArgs) ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput {
	return i.ToDatabasePrincipalPrivilegesOutputWithContext(context.Background())
}

func (i DatabasePrincipalPrivilegesArgs) ToDatabasePrincipalPrivilegesOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePrincipalPrivilegesOutput)
}

// DatabasePrincipalPrivilegesArrayInput is an input type that accepts DatabasePrincipalPrivilegesArray and DatabasePrincipalPrivilegesArrayOutput values.
// You can construct a concrete instance of `DatabasePrincipalPrivilegesArrayInput` via:
//
//	DatabasePrincipalPrivilegesArray{ DatabasePrincipalPrivilegesArgs{...} }
type DatabasePrincipalPrivilegesArrayInput interface {
	pulumi.Input

	ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput
	ToDatabasePrincipalPrivilegesArrayOutputWithContext(context.Context) DatabasePrincipalPrivilegesArrayOutput
}

type DatabasePrincipalPrivilegesArray []DatabasePrincipalPrivilegesInput

func (DatabasePrincipalPrivilegesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePrincipalPrivileges)(nil)).Elem()
}

func (i DatabasePrincipalPrivilegesArray) ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput {
	return i.ToDatabasePrincipalPrivilegesArrayOutputWithContext(context.Background())
}

func (i DatabasePrincipalPrivilegesArray) ToDatabasePrincipalPrivilegesArrayOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePrincipalPrivilegesArrayOutput)
}

// The permissions granted to a principal.
type DatabasePrincipalPrivilegesOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalPrivilegesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePrincipalPrivileges)(nil)).Elem()
}

func (o DatabasePrincipalPrivilegesOutput) ToDatabasePrincipalPrivilegesOutput() DatabasePrincipalPrivilegesOutput {
	return o
}

func (o DatabasePrincipalPrivilegesOutput) ToDatabasePrincipalPrivilegesOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesOutput {
	return o
}

// The permissions that are granted to the principal.
func (o DatabasePrincipalPrivilegesOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabasePrincipalPrivileges) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The principal who is granted permissions.
func (o DatabasePrincipalPrivilegesOutput) Principal() DatabaseDataLakePrincipalPtrOutput {
	return o.ApplyT(func(v DatabasePrincipalPrivileges) *DatabaseDataLakePrincipal { return v.Principal }).(DatabaseDataLakePrincipalPtrOutput)
}

type DatabasePrincipalPrivilegesArrayOutput struct{ *pulumi.OutputState }

func (DatabasePrincipalPrivilegesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePrincipalPrivileges)(nil)).Elem()
}

func (o DatabasePrincipalPrivilegesArrayOutput) ToDatabasePrincipalPrivilegesArrayOutput() DatabasePrincipalPrivilegesArrayOutput {
	return o
}

func (o DatabasePrincipalPrivilegesArrayOutput) ToDatabasePrincipalPrivilegesArrayOutputWithContext(ctx context.Context) DatabasePrincipalPrivilegesArrayOutput {
	return o
}

func (o DatabasePrincipalPrivilegesArrayOutput) Index(i pulumi.IntInput) DatabasePrincipalPrivilegesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasePrincipalPrivileges {
		return vs[0].([]DatabasePrincipalPrivileges)[vs[1].(int)]
	}).(DatabasePrincipalPrivilegesOutput)
}

type RegistryTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// Identifier for the registry which the schema is part of.
type SchemaRegistry struct {
	// Amazon Resource Name for the Registry.
	Arn *string `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name *string `pulumi:"name"`
}

// SchemaRegistryInput is an input type that accepts SchemaRegistryArgs and SchemaRegistryOutput values.
// You can construct a concrete instance of `SchemaRegistryInput` via:
//
//	SchemaRegistryArgs{...}
type SchemaRegistryInput interface {
	pulumi.Input

	ToSchemaRegistryOutput() SchemaRegistryOutput
	ToSchemaRegistryOutputWithContext(context.Context) SchemaRegistryOutput
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryArgs struct {
	// Amazon Resource Name for the Registry.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// Name of the registry in which the schema will be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return i.ToSchemaRegistryOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput)
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryArgs) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput).ToSchemaRegistryPtrOutputWithContext(ctx)
}

// SchemaRegistryPtrInput is an input type that accepts SchemaRegistryArgs, SchemaRegistryPtr and SchemaRegistryPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryPtrInput` via:
//
//	        SchemaRegistryArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryPtrInput interface {
	pulumi.Input

	ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput
	ToSchemaRegistryPtrOutputWithContext(context.Context) SchemaRegistryPtrOutput
}

type schemaRegistryPtrType SchemaRegistryArgs

func SchemaRegistryPtr(v *SchemaRegistryArgs) SchemaRegistryPtrInput {
	return (*schemaRegistryPtrType)(v)
}

func (*schemaRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return i.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryPtrType) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryPtrOutput)
}

// Identifier for the registry which the schema is part of.
type SchemaRegistryOutput struct{ *pulumi.OutputState }

func (SchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o.ToSchemaRegistryPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistry) *SchemaRegistry {
		return &v
	}).(SchemaRegistryPtrOutput)
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistry) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SchemaRegistryPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutput() SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) ToSchemaRegistryPtrOutputWithContext(ctx context.Context) SchemaRegistryPtrOutput {
	return o
}

func (o SchemaRegistryPtrOutput) Elem() SchemaRegistryOutput {
	return o.ApplyT(func(v *SchemaRegistry) SchemaRegistry {
		if v != nil {
			return *v
		}
		var ret SchemaRegistry
		return ret
	}).(SchemaRegistryOutput)
}

// Amazon Resource Name for the Registry.
func (o SchemaRegistryPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// Name of the registry in which the schema will be created.
func (o SchemaRegistryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type SchemaTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionType struct {
	// Indicates if the latest version needs to be updated.
	IsLatest *bool `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber *int `pulumi:"versionNumber"`
}

// SchemaVersionTypeInput is an input type that accepts SchemaVersionTypeArgs and SchemaVersionTypeOutput values.
// You can construct a concrete instance of `SchemaVersionTypeInput` via:
//
//	SchemaVersionTypeArgs{...}
type SchemaVersionTypeInput interface {
	pulumi.Input

	ToSchemaVersionTypeOutput() SchemaVersionTypeOutput
	ToSchemaVersionTypeOutputWithContext(context.Context) SchemaVersionTypeOutput
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeArgs struct {
	// Indicates if the latest version needs to be updated.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// Indicates the version number in the schema to update.
	VersionNumber pulumi.IntPtrInput `pulumi:"versionNumber"`
}

func (SchemaVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return i.ToSchemaVersionTypeOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput)
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i SchemaVersionTypeArgs) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypeOutput).ToSchemaVersionTypePtrOutputWithContext(ctx)
}

// SchemaVersionTypePtrInput is an input type that accepts SchemaVersionTypeArgs, SchemaVersionTypePtr and SchemaVersionTypePtrOutput values.
// You can construct a concrete instance of `SchemaVersionTypePtrInput` via:
//
//	        SchemaVersionTypeArgs{...}
//
//	or:
//
//	        nil
type SchemaVersionTypePtrInput interface {
	pulumi.Input

	ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput
	ToSchemaVersionTypePtrOutputWithContext(context.Context) SchemaVersionTypePtrOutput
}

type schemaVersionTypePtrType SchemaVersionTypeArgs

func SchemaVersionTypePtr(v *SchemaVersionTypeArgs) SchemaVersionTypePtrInput {
	return (*schemaVersionTypePtrType)(v)
}

func (*schemaVersionTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return i.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (i *schemaVersionTypePtrType) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionTypePtrOutput)
}

// Specify checkpoint version for update. This is only required to update the Compatibility.
type SchemaVersionTypeOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutput() SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypeOutputWithContext(ctx context.Context) SchemaVersionTypeOutput {
	return o
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o.ToSchemaVersionTypePtrOutputWithContext(context.Background())
}

func (o SchemaVersionTypeOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaVersionType) *SchemaVersionType {
		return &v
	}).(SchemaVersionTypePtrOutput)
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypeOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypeOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaVersionType) *int { return v.VersionNumber }).(pulumi.IntPtrOutput)
}

type SchemaVersionTypePtrOutput struct{ *pulumi.OutputState }

func (SchemaVersionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaVersionType)(nil)).Elem()
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutput() SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) ToSchemaVersionTypePtrOutputWithContext(ctx context.Context) SchemaVersionTypePtrOutput {
	return o
}

func (o SchemaVersionTypePtrOutput) Elem() SchemaVersionTypeOutput {
	return o.ApplyT(func(v *SchemaVersionType) SchemaVersionType {
		if v != nil {
			return *v
		}
		var ret SchemaVersionType
		return ret
	}).(SchemaVersionTypeOutput)
}

// Indicates if the latest version needs to be updated.
func (o SchemaVersionTypePtrOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *bool {
		if v == nil {
			return nil
		}
		return v.IsLatest
	}).(pulumi.BoolPtrOutput)
}

// Indicates the version number in the schema to update.
func (o SchemaVersionTypePtrOutput) VersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaVersionType) *int {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.IntPtrOutput)
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchema struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName *string `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn *string `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName *string `pulumi:"schemaName"`
}

// SchemaVersionSchemaInput is an input type that accepts SchemaVersionSchemaArgs and SchemaVersionSchemaOutput values.
// You can construct a concrete instance of `SchemaVersionSchemaInput` via:
//
//	SchemaVersionSchemaArgs{...}
type SchemaVersionSchemaInput interface {
	pulumi.Input

	ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput
	ToSchemaVersionSchemaOutputWithContext(context.Context) SchemaVersionSchemaOutput
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaArgs struct {
	// Name of the registry to identify where the Schema is located.
	RegistryName pulumi.StringPtrInput `pulumi:"registryName"`
	// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
	SchemaArn pulumi.StringPtrInput `pulumi:"schemaArn"`
	// Name of the schema. This parameter requires RegistryName to be provided.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (SchemaVersionSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return i.ToSchemaVersionSchemaOutputWithContext(context.Background())
}

func (i SchemaVersionSchemaArgs) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaVersionSchemaOutput)
}

// Identifier for the schema where the schema version will be created.
type SchemaVersionSchemaOutput struct{ *pulumi.OutputState }

func (SchemaVersionSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaVersionSchema)(nil)).Elem()
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutput() SchemaVersionSchemaOutput {
	return o
}

func (o SchemaVersionSchemaOutput) ToSchemaVersionSchemaOutputWithContext(ctx context.Context) SchemaVersionSchemaOutput {
	return o
}

// Name of the registry to identify where the Schema is located.
func (o SchemaVersionSchemaOutput) RegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.RegistryName }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
func (o SchemaVersionSchemaOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

// Name of the schema. This parameter requires RegistryName to be provided.
func (o SchemaVersionSchemaOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaVersionSchema) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The actions initiated by this trigger.
type TriggerAction struct {
	// The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.
	Arguments interface{} `pulumi:"arguments"`
	// The name of the crawler to be used with this action.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of a job to be executed.
	JobName *string `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification.
	NotificationProperty *TriggerNotificationProperty `pulumi:"notificationProperty"`
	// The name of the SecurityConfiguration structure to be used with this action.
	SecurityConfiguration *string `pulumi:"securityConfiguration"`
	// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
	Timeout *int `pulumi:"timeout"`
}

// TriggerActionInput is an input type that accepts TriggerActionArgs and TriggerActionOutput values.
// You can construct a concrete instance of `TriggerActionInput` via:
//
//	TriggerActionArgs{...}
type TriggerActionInput interface {
	pulumi.Input

	ToTriggerActionOutput() TriggerActionOutput
	ToTriggerActionOutputWithContext(context.Context) TriggerActionOutput
}

// The actions initiated by this trigger.
type TriggerActionArgs struct {
	// The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.
	Arguments pulumi.Input `pulumi:"arguments"`
	// The name of the crawler to be used with this action.
	CrawlerName pulumi.StringPtrInput `pulumi:"crawlerName"`
	// The name of a job to be executed.
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// Specifies configuration properties of a job run notification.
	NotificationProperty TriggerNotificationPropertyPtrInput `pulumi:"notificationProperty"`
	// The name of the SecurityConfiguration structure to be used with this action.
	SecurityConfiguration pulumi.StringPtrInput `pulumi:"securityConfiguration"`
	// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (TriggerActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (i TriggerActionArgs) ToTriggerActionOutput() TriggerActionOutput {
	return i.ToTriggerActionOutputWithContext(context.Background())
}

func (i TriggerActionArgs) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionOutput)
}

// TriggerActionArrayInput is an input type that accepts TriggerActionArray and TriggerActionArrayOutput values.
// You can construct a concrete instance of `TriggerActionArrayInput` via:
//
//	TriggerActionArray{ TriggerActionArgs{...} }
type TriggerActionArrayInput interface {
	pulumi.Input

	ToTriggerActionArrayOutput() TriggerActionArrayOutput
	ToTriggerActionArrayOutputWithContext(context.Context) TriggerActionArrayOutput
}

type TriggerActionArray []TriggerActionInput

func (TriggerActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (i TriggerActionArray) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return i.ToTriggerActionArrayOutputWithContext(context.Background())
}

func (i TriggerActionArray) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerActionArrayOutput)
}

// The actions initiated by this trigger.
type TriggerActionOutput struct{ *pulumi.OutputState }

func (TriggerActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerAction)(nil)).Elem()
}

func (o TriggerActionOutput) ToTriggerActionOutput() TriggerActionOutput {
	return o
}

func (o TriggerActionOutput) ToTriggerActionOutputWithContext(ctx context.Context) TriggerActionOutput {
	return o
}

// The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.
func (o TriggerActionOutput) Arguments() pulumi.AnyOutput {
	return o.ApplyT(func(v TriggerAction) interface{} { return v.Arguments }).(pulumi.AnyOutput)
}

// The name of the crawler to be used with this action.
func (o TriggerActionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

// The name of a job to be executed.
func (o TriggerActionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// Specifies configuration properties of a job run notification.
func (o TriggerActionOutput) NotificationProperty() TriggerNotificationPropertyPtrOutput {
	return o.ApplyT(func(v TriggerAction) *TriggerNotificationProperty { return v.NotificationProperty }).(TriggerNotificationPropertyPtrOutput)
}

// The name of the SecurityConfiguration structure to be used with this action.
func (o TriggerActionOutput) SecurityConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerAction) *string { return v.SecurityConfiguration }).(pulumi.StringPtrOutput)
}

// The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
func (o TriggerActionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerAction) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TriggerActionArrayOutput struct{ *pulumi.OutputState }

func (TriggerActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerAction)(nil)).Elem()
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutput() TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) ToTriggerActionArrayOutputWithContext(ctx context.Context) TriggerActionArrayOutput {
	return o
}

func (o TriggerActionArrayOutput) Index(i pulumi.IntInput) TriggerActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerAction {
		return vs[0].([]TriggerAction)[vs[1].(int)]
	}).(TriggerActionOutput)
}

// Defines a condition under which a trigger fires.
type TriggerCondition struct {
	// The state of the crawler to which this condition applies.
	CrawlState *string `pulumi:"crawlState"`
	// The name of the crawler to which this condition applies.
	CrawlerName *string `pulumi:"crawlerName"`
	// The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
	JobName *string `pulumi:"jobName"`
	// A logical operator.
	LogicalOperator *string `pulumi:"logicalOperator"`
	// The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED.
	State *string `pulumi:"state"`
}

// TriggerConditionInput is an input type that accepts TriggerConditionArgs and TriggerConditionOutput values.
// You can construct a concrete instance of `TriggerConditionInput` via:
//
//	TriggerConditionArgs{...}
type TriggerConditionInput interface {
	pulumi.Input

	ToTriggerConditionOutput() TriggerConditionOutput
	ToTriggerConditionOutputWithContext(context.Context) TriggerConditionOutput
}

// Defines a condition under which a trigger fires.
type TriggerConditionArgs struct {
	// The state of the crawler to which this condition applies.
	CrawlState pulumi.StringPtrInput `pulumi:"crawlState"`
	// The name of the crawler to which this condition applies.
	CrawlerName pulumi.StringPtrInput `pulumi:"crawlerName"`
	// The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// A logical operator.
	LogicalOperator pulumi.StringPtrInput `pulumi:"logicalOperator"`
	// The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (TriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArgs) ToTriggerConditionOutput() TriggerConditionOutput {
	return i.ToTriggerConditionOutputWithContext(context.Background())
}

func (i TriggerConditionArgs) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionOutput)
}

// TriggerConditionArrayInput is an input type that accepts TriggerConditionArray and TriggerConditionArrayOutput values.
// You can construct a concrete instance of `TriggerConditionArrayInput` via:
//
//	TriggerConditionArray{ TriggerConditionArgs{...} }
type TriggerConditionArrayInput interface {
	pulumi.Input

	ToTriggerConditionArrayOutput() TriggerConditionArrayOutput
	ToTriggerConditionArrayOutputWithContext(context.Context) TriggerConditionArrayOutput
}

type TriggerConditionArray []TriggerConditionInput

func (TriggerConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArray) ToTriggerConditionArrayOutput() TriggerConditionArrayOutput {
	return i.ToTriggerConditionArrayOutputWithContext(context.Background())
}

func (i TriggerConditionArray) ToTriggerConditionArrayOutputWithContext(ctx context.Context) TriggerConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionArrayOutput)
}

// Defines a condition under which a trigger fires.
type TriggerConditionOutput struct{ *pulumi.OutputState }

func (TriggerConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (o TriggerConditionOutput) ToTriggerConditionOutput() TriggerConditionOutput {
	return o
}

func (o TriggerConditionOutput) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return o
}

// The state of the crawler to which this condition applies.
func (o TriggerConditionOutput) CrawlState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.CrawlState }).(pulumi.StringPtrOutput)
}

// The name of the crawler to which this condition applies.
func (o TriggerConditionOutput) CrawlerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.CrawlerName }).(pulumi.StringPtrOutput)
}

// The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
func (o TriggerConditionOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// A logical operator.
func (o TriggerConditionOutput) LogicalOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.LogicalOperator }).(pulumi.StringPtrOutput)
}

// The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED.
func (o TriggerConditionOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerCondition) *string { return v.State }).(pulumi.StringPtrOutput)
}

type TriggerConditionArrayOutput struct{ *pulumi.OutputState }

func (TriggerConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerCondition)(nil)).Elem()
}

func (o TriggerConditionArrayOutput) ToTriggerConditionArrayOutput() TriggerConditionArrayOutput {
	return o
}

func (o TriggerConditionArrayOutput) ToTriggerConditionArrayOutputWithContext(ctx context.Context) TriggerConditionArrayOutput {
	return o
}

func (o TriggerConditionArrayOutput) Index(i pulumi.IntInput) TriggerConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerCondition {
		return vs[0].([]TriggerCondition)[vs[1].(int)]
	}).(TriggerConditionOutput)
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
type TriggerEventBatchingCondition struct {
	// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
	BatchSize int `pulumi:"batchSize"`
	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
	BatchWindow *int `pulumi:"batchWindow"`
}

// TriggerEventBatchingConditionInput is an input type that accepts TriggerEventBatchingConditionArgs and TriggerEventBatchingConditionOutput values.
// You can construct a concrete instance of `TriggerEventBatchingConditionInput` via:
//
//	TriggerEventBatchingConditionArgs{...}
type TriggerEventBatchingConditionInput interface {
	pulumi.Input

	ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput
	ToTriggerEventBatchingConditionOutputWithContext(context.Context) TriggerEventBatchingConditionOutput
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
type TriggerEventBatchingConditionArgs struct {
	// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
	BatchSize pulumi.IntInput `pulumi:"batchSize"`
	// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
	BatchWindow pulumi.IntPtrInput `pulumi:"batchWindow"`
}

func (TriggerEventBatchingConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return i.ToTriggerEventBatchingConditionOutputWithContext(context.Background())
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionOutput)
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return i.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (i TriggerEventBatchingConditionArgs) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionOutput).ToTriggerEventBatchingConditionPtrOutputWithContext(ctx)
}

// TriggerEventBatchingConditionPtrInput is an input type that accepts TriggerEventBatchingConditionArgs, TriggerEventBatchingConditionPtr and TriggerEventBatchingConditionPtrOutput values.
// You can construct a concrete instance of `TriggerEventBatchingConditionPtrInput` via:
//
//	        TriggerEventBatchingConditionArgs{...}
//
//	or:
//
//	        nil
type TriggerEventBatchingConditionPtrInput interface {
	pulumi.Input

	ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput
	ToTriggerEventBatchingConditionPtrOutputWithContext(context.Context) TriggerEventBatchingConditionPtrOutput
}

type triggerEventBatchingConditionPtrType TriggerEventBatchingConditionArgs

func TriggerEventBatchingConditionPtr(v *TriggerEventBatchingConditionArgs) TriggerEventBatchingConditionPtrInput {
	return (*triggerEventBatchingConditionPtrType)(v)
}

func (*triggerEventBatchingConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEventBatchingCondition)(nil)).Elem()
}

func (i *triggerEventBatchingConditionPtrType) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return i.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (i *triggerEventBatchingConditionPtrType) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEventBatchingConditionPtrOutput)
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
type TriggerEventBatchingConditionOutput struct{ *pulumi.OutputState }

func (TriggerEventBatchingConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEventBatchingCondition)(nil)).Elem()
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutput() TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionOutputWithContext(ctx context.Context) TriggerEventBatchingConditionOutput {
	return o
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return o.ToTriggerEventBatchingConditionPtrOutputWithContext(context.Background())
}

func (o TriggerEventBatchingConditionOutput) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerEventBatchingCondition) *TriggerEventBatchingCondition {
		return &v
	}).(TriggerEventBatchingConditionPtrOutput)
}

// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
func (o TriggerEventBatchingConditionOutput) BatchSize() pulumi.IntOutput {
	return o.ApplyT(func(v TriggerEventBatchingCondition) int { return v.BatchSize }).(pulumi.IntOutput)
}

// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
func (o TriggerEventBatchingConditionOutput) BatchWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerEventBatchingCondition) *int { return v.BatchWindow }).(pulumi.IntPtrOutput)
}

type TriggerEventBatchingConditionPtrOutput struct{ *pulumi.OutputState }

func (TriggerEventBatchingConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEventBatchingCondition)(nil)).Elem()
}

func (o TriggerEventBatchingConditionPtrOutput) ToTriggerEventBatchingConditionPtrOutput() TriggerEventBatchingConditionPtrOutput {
	return o
}

func (o TriggerEventBatchingConditionPtrOutput) ToTriggerEventBatchingConditionPtrOutputWithContext(ctx context.Context) TriggerEventBatchingConditionPtrOutput {
	return o
}

func (o TriggerEventBatchingConditionPtrOutput) Elem() TriggerEventBatchingConditionOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) TriggerEventBatchingCondition {
		if v != nil {
			return *v
		}
		var ret TriggerEventBatchingCondition
		return ret
	}).(TriggerEventBatchingConditionOutput)
}

// Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
func (o TriggerEventBatchingConditionPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) *int {
		if v == nil {
			return nil
		}
		return &v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
func (o TriggerEventBatchingConditionPtrOutput) BatchWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerEventBatchingCondition) *int {
		if v == nil {
			return nil
		}
		return v.BatchWindow
	}).(pulumi.IntPtrOutput)
}

// Specifies configuration properties of a job run notification.
type TriggerNotificationProperty struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification
	NotifyDelayAfter *int `pulumi:"notifyDelayAfter"`
}

// TriggerNotificationPropertyInput is an input type that accepts TriggerNotificationPropertyArgs and TriggerNotificationPropertyOutput values.
// You can construct a concrete instance of `TriggerNotificationPropertyInput` via:
//
//	TriggerNotificationPropertyArgs{...}
type TriggerNotificationPropertyInput interface {
	pulumi.Input

	ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput
	ToTriggerNotificationPropertyOutputWithContext(context.Context) TriggerNotificationPropertyOutput
}

// Specifies configuration properties of a job run notification.
type TriggerNotificationPropertyArgs struct {
	// After a job run starts, the number of minutes to wait before sending a job run delay notification
	NotifyDelayAfter pulumi.IntPtrInput `pulumi:"notifyDelayAfter"`
}

func (TriggerNotificationPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNotificationProperty)(nil)).Elem()
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput {
	return i.ToTriggerNotificationPropertyOutputWithContext(context.Background())
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyOutputWithContext(ctx context.Context) TriggerNotificationPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyOutput)
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return i.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i TriggerNotificationPropertyArgs) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyOutput).ToTriggerNotificationPropertyPtrOutputWithContext(ctx)
}

// TriggerNotificationPropertyPtrInput is an input type that accepts TriggerNotificationPropertyArgs, TriggerNotificationPropertyPtr and TriggerNotificationPropertyPtrOutput values.
// You can construct a concrete instance of `TriggerNotificationPropertyPtrInput` via:
//
//	        TriggerNotificationPropertyArgs{...}
//
//	or:
//
//	        nil
type TriggerNotificationPropertyPtrInput interface {
	pulumi.Input

	ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput
	ToTriggerNotificationPropertyPtrOutputWithContext(context.Context) TriggerNotificationPropertyPtrOutput
}

type triggerNotificationPropertyPtrType TriggerNotificationPropertyArgs

func TriggerNotificationPropertyPtr(v *TriggerNotificationPropertyArgs) TriggerNotificationPropertyPtrInput {
	return (*triggerNotificationPropertyPtrType)(v)
}

func (*triggerNotificationPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNotificationProperty)(nil)).Elem()
}

func (i *triggerNotificationPropertyPtrType) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return i.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (i *triggerNotificationPropertyPtrType) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerNotificationPropertyPtrOutput)
}

// Specifies configuration properties of a job run notification.
type TriggerNotificationPropertyOutput struct{ *pulumi.OutputState }

func (TriggerNotificationPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerNotificationProperty)(nil)).Elem()
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyOutput() TriggerNotificationPropertyOutput {
	return o
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyOutputWithContext(ctx context.Context) TriggerNotificationPropertyOutput {
	return o
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return o.ToTriggerNotificationPropertyPtrOutputWithContext(context.Background())
}

func (o TriggerNotificationPropertyOutput) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerNotificationProperty) *TriggerNotificationProperty {
		return &v
	}).(TriggerNotificationPropertyPtrOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification
func (o TriggerNotificationPropertyOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerNotificationProperty) *int { return v.NotifyDelayAfter }).(pulumi.IntPtrOutput)
}

type TriggerNotificationPropertyPtrOutput struct{ *pulumi.OutputState }

func (TriggerNotificationPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerNotificationProperty)(nil)).Elem()
}

func (o TriggerNotificationPropertyPtrOutput) ToTriggerNotificationPropertyPtrOutput() TriggerNotificationPropertyPtrOutput {
	return o
}

func (o TriggerNotificationPropertyPtrOutput) ToTriggerNotificationPropertyPtrOutputWithContext(ctx context.Context) TriggerNotificationPropertyPtrOutput {
	return o
}

func (o TriggerNotificationPropertyPtrOutput) Elem() TriggerNotificationPropertyOutput {
	return o.ApplyT(func(v *TriggerNotificationProperty) TriggerNotificationProperty {
		if v != nil {
			return *v
		}
		var ret TriggerNotificationProperty
		return ret
	}).(TriggerNotificationPropertyOutput)
}

// After a job run starts, the number of minutes to wait before sending a job run delay notification
func (o TriggerNotificationPropertyPtrOutput) NotifyDelayAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerNotificationProperty) *int {
		if v == nil {
			return nil
		}
		return v.NotifyDelayAfter
	}).(pulumi.IntPtrOutput)
}

// The predicate of this trigger, which defines when it will fire.
type TriggerPredicate struct {
	// A list of the conditions that determine when the trigger will fire.
	Conditions []TriggerCondition `pulumi:"conditions"`
	// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
	Logical *string `pulumi:"logical"`
}

// TriggerPredicateInput is an input type that accepts TriggerPredicateArgs and TriggerPredicateOutput values.
// You can construct a concrete instance of `TriggerPredicateInput` via:
//
//	TriggerPredicateArgs{...}
type TriggerPredicateInput interface {
	pulumi.Input

	ToTriggerPredicateOutput() TriggerPredicateOutput
	ToTriggerPredicateOutputWithContext(context.Context) TriggerPredicateOutput
}

// The predicate of this trigger, which defines when it will fire.
type TriggerPredicateArgs struct {
	// A list of the conditions that determine when the trigger will fire.
	Conditions TriggerConditionArrayInput `pulumi:"conditions"`
	// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
	Logical pulumi.StringPtrInput `pulumi:"logical"`
}

func (TriggerPredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return i.ToTriggerPredicateOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput)
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i TriggerPredicateArgs) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicateOutput).ToTriggerPredicatePtrOutputWithContext(ctx)
}

// TriggerPredicatePtrInput is an input type that accepts TriggerPredicateArgs, TriggerPredicatePtr and TriggerPredicatePtrOutput values.
// You can construct a concrete instance of `TriggerPredicatePtrInput` via:
//
//	        TriggerPredicateArgs{...}
//
//	or:
//
//	        nil
type TriggerPredicatePtrInput interface {
	pulumi.Input

	ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput
	ToTriggerPredicatePtrOutputWithContext(context.Context) TriggerPredicatePtrOutput
}

type triggerPredicatePtrType TriggerPredicateArgs

func TriggerPredicatePtr(v *TriggerPredicateArgs) TriggerPredicatePtrInput {
	return (*triggerPredicatePtrType)(v)
}

func (*triggerPredicatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return i.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (i *triggerPredicatePtrType) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPredicatePtrOutput)
}

// The predicate of this trigger, which defines when it will fire.
type TriggerPredicateOutput struct{ *pulumi.OutputState }

func (TriggerPredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutput() TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicateOutputWithContext(ctx context.Context) TriggerPredicateOutput {
	return o
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o.ToTriggerPredicatePtrOutputWithContext(context.Background())
}

func (o TriggerPredicateOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerPredicate) *TriggerPredicate {
		return &v
	}).(TriggerPredicatePtrOutput)
}

// A list of the conditions that determine when the trigger will fire.
func (o TriggerPredicateOutput) Conditions() TriggerConditionArrayOutput {
	return o.ApplyT(func(v TriggerPredicate) []TriggerCondition { return v.Conditions }).(TriggerConditionArrayOutput)
}

// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
func (o TriggerPredicateOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerPredicate) *string { return v.Logical }).(pulumi.StringPtrOutput)
}

type TriggerPredicatePtrOutput struct{ *pulumi.OutputState }

func (TriggerPredicatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerPredicate)(nil)).Elem()
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutput() TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) ToTriggerPredicatePtrOutputWithContext(ctx context.Context) TriggerPredicatePtrOutput {
	return o
}

func (o TriggerPredicatePtrOutput) Elem() TriggerPredicateOutput {
	return o.ApplyT(func(v *TriggerPredicate) TriggerPredicate {
		if v != nil {
			return *v
		}
		var ret TriggerPredicate
		return ret
	}).(TriggerPredicateOutput)
}

// A list of the conditions that determine when the trigger will fire.
func (o TriggerPredicatePtrOutput) Conditions() TriggerConditionArrayOutput {
	return o.ApplyT(func(v *TriggerPredicate) []TriggerCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(TriggerConditionArrayOutput)
}

// An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
func (o TriggerPredicatePtrOutput) Logical() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerPredicate) *string {
		if v == nil {
			return nil
		}
		return v.Logical
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataLakePrincipalInput)(nil)).Elem(), DatabaseDataLakePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDataLakePrincipalPtrInput)(nil)).Elem(), DatabaseDataLakePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFederatedDatabaseInput)(nil)).Elem(), DatabaseFederatedDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFederatedDatabasePtrInput)(nil)).Elem(), DatabaseFederatedDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIdentifierInput)(nil)).Elem(), DatabaseIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseIdentifierPtrInput)(nil)).Elem(), DatabaseIdentifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInputTypeInput)(nil)).Elem(), DatabaseInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePrincipalPrivilegesInput)(nil)).Elem(), DatabasePrincipalPrivilegesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePrincipalPrivilegesArrayInput)(nil)).Elem(), DatabasePrincipalPrivilegesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryPtrInput)(nil)).Elem(), SchemaRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypeInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionTypePtrInput)(nil)).Elem(), SchemaVersionTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaVersionSchemaInput)(nil)).Elem(), SchemaVersionSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerActionInput)(nil)).Elem(), TriggerActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerActionArrayInput)(nil)).Elem(), TriggerActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerConditionInput)(nil)).Elem(), TriggerConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerConditionArrayInput)(nil)).Elem(), TriggerConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEventBatchingConditionInput)(nil)).Elem(), TriggerEventBatchingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEventBatchingConditionPtrInput)(nil)).Elem(), TriggerEventBatchingConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNotificationPropertyInput)(nil)).Elem(), TriggerNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerNotificationPropertyPtrInput)(nil)).Elem(), TriggerNotificationPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerPredicateInput)(nil)).Elem(), TriggerPredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerPredicatePtrInput)(nil)).Elem(), TriggerPredicateArgs{})
	pulumi.RegisterOutputType(DatabaseDataLakePrincipalOutput{})
	pulumi.RegisterOutputType(DatabaseDataLakePrincipalPtrOutput{})
	pulumi.RegisterOutputType(DatabaseFederatedDatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseFederatedDatabasePtrOutput{})
	pulumi.RegisterOutputType(DatabaseIdentifierOutput{})
	pulumi.RegisterOutputType(DatabaseIdentifierPtrOutput{})
	pulumi.RegisterOutputType(DatabaseInputTypeOutput{})
	pulumi.RegisterOutputType(DatabaseInputTypePtrOutput{})
	pulumi.RegisterOutputType(DatabasePrincipalPrivilegesOutput{})
	pulumi.RegisterOutputType(DatabasePrincipalPrivilegesArrayOutput{})
	pulumi.RegisterOutputType(SchemaRegistryOutput{})
	pulumi.RegisterOutputType(SchemaRegistryPtrOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypeOutput{})
	pulumi.RegisterOutputType(SchemaVersionTypePtrOutput{})
	pulumi.RegisterOutputType(SchemaVersionSchemaOutput{})
	pulumi.RegisterOutputType(TriggerActionOutput{})
	pulumi.RegisterOutputType(TriggerActionArrayOutput{})
	pulumi.RegisterOutputType(TriggerConditionOutput{})
	pulumi.RegisterOutputType(TriggerConditionArrayOutput{})
	pulumi.RegisterOutputType(TriggerEventBatchingConditionOutput{})
	pulumi.RegisterOutputType(TriggerEventBatchingConditionPtrOutput{})
	pulumi.RegisterOutputType(TriggerNotificationPropertyOutput{})
	pulumi.RegisterOutputType(TriggerNotificationPropertyPtrOutput{})
	pulumi.RegisterOutputType(TriggerPredicateOutput{})
	pulumi.RegisterOutputType(TriggerPredicatePtrOutput{})
}
