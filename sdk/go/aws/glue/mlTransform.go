// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::MLTransform
//
// Deprecated: MlTransform is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type MlTransform struct {
	pulumi.CustomResourceState

	Description         pulumi.StringPtrOutput                  `pulumi:"description"`
	GlueVersion         pulumi.StringPtrOutput                  `pulumi:"glueVersion"`
	InputRecordTables   MlTransformInputRecordTablesOutput      `pulumi:"inputRecordTables"`
	MaxCapacity         pulumi.Float64PtrOutput                 `pulumi:"maxCapacity"`
	MaxRetries          pulumi.IntPtrOutput                     `pulumi:"maxRetries"`
	Name                pulumi.StringPtrOutput                  `pulumi:"name"`
	NumberOfWorkers     pulumi.IntPtrOutput                     `pulumi:"numberOfWorkers"`
	Role                pulumi.StringOutput                     `pulumi:"role"`
	Tags                pulumi.AnyOutput                        `pulumi:"tags"`
	Timeout             pulumi.IntPtrOutput                     `pulumi:"timeout"`
	TransformEncryption MlTransformTransformEncryptionPtrOutput `pulumi:"transformEncryption"`
	TransformParameters MlTransformTransformParametersOutput    `pulumi:"transformParameters"`
	WorkerType          pulumi.StringPtrOutput                  `pulumi:"workerType"`
}

// NewMlTransform registers a new resource with the given unique name, arguments, and options.
func NewMlTransform(ctx *pulumi.Context,
	name string, args *MlTransformArgs, opts ...pulumi.ResourceOption) (*MlTransform, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputRecordTables == nil {
		return nil, errors.New("invalid value for required argument 'InputRecordTables'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TransformParameters == nil {
		return nil, errors.New("invalid value for required argument 'TransformParameters'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"inputRecordTables",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MlTransform
	err := ctx.RegisterResource("aws-native:glue:MlTransform", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMlTransform gets an existing MlTransform resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMlTransform(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MlTransformState, opts ...pulumi.ResourceOption) (*MlTransform, error) {
	var resource MlTransform
	err := ctx.ReadResource("aws-native:glue:MlTransform", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MlTransform resources.
type mlTransformState struct {
}

type MlTransformState struct {
}

func (MlTransformState) ElementType() reflect.Type {
	return reflect.TypeOf((*mlTransformState)(nil)).Elem()
}

type mlTransformArgs struct {
	Description         *string                         `pulumi:"description"`
	GlueVersion         *string                         `pulumi:"glueVersion"`
	InputRecordTables   MlTransformInputRecordTables    `pulumi:"inputRecordTables"`
	MaxCapacity         *float64                        `pulumi:"maxCapacity"`
	MaxRetries          *int                            `pulumi:"maxRetries"`
	Name                *string                         `pulumi:"name"`
	NumberOfWorkers     *int                            `pulumi:"numberOfWorkers"`
	Role                string                          `pulumi:"role"`
	Tags                interface{}                     `pulumi:"tags"`
	Timeout             *int                            `pulumi:"timeout"`
	TransformEncryption *MlTransformTransformEncryption `pulumi:"transformEncryption"`
	TransformParameters MlTransformTransformParameters  `pulumi:"transformParameters"`
	WorkerType          *string                         `pulumi:"workerType"`
}

// The set of arguments for constructing a MlTransform resource.
type MlTransformArgs struct {
	Description         pulumi.StringPtrInput
	GlueVersion         pulumi.StringPtrInput
	InputRecordTables   MlTransformInputRecordTablesInput
	MaxCapacity         pulumi.Float64PtrInput
	MaxRetries          pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	NumberOfWorkers     pulumi.IntPtrInput
	Role                pulumi.StringInput
	Tags                pulumi.Input
	Timeout             pulumi.IntPtrInput
	TransformEncryption MlTransformTransformEncryptionPtrInput
	TransformParameters MlTransformTransformParametersInput
	WorkerType          pulumi.StringPtrInput
}

func (MlTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mlTransformArgs)(nil)).Elem()
}

type MlTransformInput interface {
	pulumi.Input

	ToMlTransformOutput() MlTransformOutput
	ToMlTransformOutputWithContext(ctx context.Context) MlTransformOutput
}

func (*MlTransform) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransform)(nil)).Elem()
}

func (i *MlTransform) ToMlTransformOutput() MlTransformOutput {
	return i.ToMlTransformOutputWithContext(context.Background())
}

func (i *MlTransform) ToMlTransformOutputWithContext(ctx context.Context) MlTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MlTransformOutput)
}

type MlTransformOutput struct{ *pulumi.OutputState }

func (MlTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MlTransform)(nil)).Elem()
}

func (o MlTransformOutput) ToMlTransformOutput() MlTransformOutput {
	return o
}

func (o MlTransformOutput) ToMlTransformOutputWithContext(ctx context.Context) MlTransformOutput {
	return o
}

func (o MlTransformOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MlTransformOutput) GlueVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.StringPtrOutput { return v.GlueVersion }).(pulumi.StringPtrOutput)
}

func (o MlTransformOutput) InputRecordTables() MlTransformInputRecordTablesOutput {
	return o.ApplyT(func(v *MlTransform) MlTransformInputRecordTablesOutput { return v.InputRecordTables }).(MlTransformInputRecordTablesOutput)
}

func (o MlTransformOutput) MaxCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.Float64PtrOutput { return v.MaxCapacity }).(pulumi.Float64PtrOutput)
}

func (o MlTransformOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.IntPtrOutput { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

func (o MlTransformOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o MlTransformOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.IntPtrOutput { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

func (o MlTransformOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o MlTransformOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

func (o MlTransformOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o MlTransformOutput) TransformEncryption() MlTransformTransformEncryptionPtrOutput {
	return o.ApplyT(func(v *MlTransform) MlTransformTransformEncryptionPtrOutput { return v.TransformEncryption }).(MlTransformTransformEncryptionPtrOutput)
}

func (o MlTransformOutput) TransformParameters() MlTransformTransformParametersOutput {
	return o.ApplyT(func(v *MlTransform) MlTransformTransformParametersOutput { return v.TransformParameters }).(MlTransformTransformParametersOutput)
}

func (o MlTransformOutput) WorkerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MlTransform) pulumi.StringPtrOutput { return v.WorkerType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MlTransformInput)(nil)).Elem(), &MlTransform{})
	pulumi.RegisterOutputType(MlTransformOutput{})
}
