// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Trigger
func LookupTrigger(ctx *pulumi.Context, args *LookupTriggerArgs, opts ...pulumi.InvokeOption) (*LookupTriggerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTriggerResult
	err := ctx.Invoke("aws-native:glue:getTrigger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTriggerArgs struct {
	// The name of the trigger.
	Name string `pulumi:"name"`
}

type LookupTriggerResult struct {
	// The actions initiated by this trigger.
	Actions []TriggerAction `pulumi:"actions"`
	// A description of this trigger.
	Description *string `pulumi:"description"`
	// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
	EventBatchingCondition *TriggerEventBatchingCondition `pulumi:"eventBatchingCondition"`
	// The predicate of this trigger, which defines when it will fire.
	Predicate *TriggerPredicate `pulumi:"predicate"`
	// A cron expression used to specify the schedule.
	Schedule *string `pulumi:"schedule"`
	// The tags to use with this trigger.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
	Tags interface{} `pulumi:"tags"`
}

func LookupTriggerOutput(ctx *pulumi.Context, args LookupTriggerOutputArgs, opts ...pulumi.InvokeOption) LookupTriggerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTriggerResult, error) {
			args := v.(LookupTriggerArgs)
			r, err := LookupTrigger(ctx, &args, opts...)
			var s LookupTriggerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTriggerResultOutput)
}

type LookupTriggerOutputArgs struct {
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupTriggerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerArgs)(nil)).Elem()
}

type LookupTriggerResultOutput struct{ *pulumi.OutputState }

func (LookupTriggerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerResult)(nil)).Elem()
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutput() LookupTriggerResultOutput {
	return o
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutputWithContext(ctx context.Context) LookupTriggerResultOutput {
	return o
}

// The actions initiated by this trigger.
func (o LookupTriggerResultOutput) Actions() TriggerActionArrayOutput {
	return o.ApplyT(func(v LookupTriggerResult) []TriggerAction { return v.Actions }).(TriggerActionArrayOutput)
}

// A description of this trigger.
func (o LookupTriggerResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
func (o LookupTriggerResultOutput) EventBatchingCondition() TriggerEventBatchingConditionPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *TriggerEventBatchingCondition { return v.EventBatchingCondition }).(TriggerEventBatchingConditionPtrOutput)
}

// The predicate of this trigger, which defines when it will fire.
func (o LookupTriggerResultOutput) Predicate() TriggerPredicatePtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *TriggerPredicate { return v.Predicate }).(TriggerPredicatePtrOutput)
}

// A cron expression used to specify the schedule.
func (o LookupTriggerResultOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The tags to use with this trigger.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
func (o LookupTriggerResultOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupTriggerResult) interface{} { return v.Tags }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTriggerResultOutput{})
}
