// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Glue::Trigger
func LookupTrigger(ctx *pulumi.Context, args *LookupTriggerArgs, opts ...pulumi.InvokeOption) (*LookupTriggerResult, error) {
	var rv LookupTriggerResult
	err := ctx.Invoke("aws-native:glue:getTrigger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTriggerArgs struct {
	Id string `pulumi:"id"`
}

type LookupTriggerResult struct {
	Actions         []TriggerAction   `pulumi:"actions"`
	Description     *string           `pulumi:"description"`
	Id              *string           `pulumi:"id"`
	Predicate       *TriggerPredicate `pulumi:"predicate"`
	Schedule        *string           `pulumi:"schedule"`
	StartOnCreation *bool             `pulumi:"startOnCreation"`
	Tags            interface{}       `pulumi:"tags"`
	Type            *string           `pulumi:"type"`
}

func LookupTriggerOutput(ctx *pulumi.Context, args LookupTriggerOutputArgs, opts ...pulumi.InvokeOption) LookupTriggerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTriggerResult, error) {
			args := v.(LookupTriggerArgs)
			r, err := LookupTrigger(ctx, &args, opts...)
			var s LookupTriggerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTriggerResultOutput)
}

type LookupTriggerOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTriggerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerArgs)(nil)).Elem()
}

type LookupTriggerResultOutput struct{ *pulumi.OutputState }

func (LookupTriggerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerResult)(nil)).Elem()
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutput() LookupTriggerResultOutput {
	return o
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutputWithContext(ctx context.Context) LookupTriggerResultOutput {
	return o
}

func (o LookupTriggerResultOutput) Actions() TriggerActionArrayOutput {
	return o.ApplyT(func(v LookupTriggerResult) []TriggerAction { return v.Actions }).(TriggerActionArrayOutput)
}

func (o LookupTriggerResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupTriggerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupTriggerResultOutput) Predicate() TriggerPredicatePtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *TriggerPredicate { return v.Predicate }).(TriggerPredicatePtrOutput)
}

func (o LookupTriggerResultOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

func (o LookupTriggerResultOutput) StartOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *bool { return v.StartOnCreation }).(pulumi.BoolPtrOutput)
}

func (o LookupTriggerResultOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupTriggerResult) interface{} { return v.Tags }).(pulumi.AnyOutput)
}

func (o LookupTriggerResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTriggerResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTriggerResultOutput{})
}
