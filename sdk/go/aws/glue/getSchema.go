// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents a schema of Glue Schema Registry.
func LookupSchema(ctx *pulumi.Context, args *LookupSchemaArgs, opts ...pulumi.InvokeOption) (*LookupSchemaResult, error) {
	var rv LookupSchemaResult
	err := ctx.Invoke("aws-native:glue:getSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSchemaArgs struct {
	// Amazon Resource Name for the Schema.
	Arn string `pulumi:"arn"`
}

type LookupSchemaResult struct {
	// Amazon Resource Name for the Schema.
	Arn               *string            `pulumi:"arn"`
	CheckpointVersion *SchemaVersionType `pulumi:"checkpointVersion"`
	// Compatibility setting for the schema.
	Compatibility *SchemaCompatibility `pulumi:"compatibility"`
	// A description of the schema. If description is not provided, there will not be any default value for this.
	Description *string `pulumi:"description"`
	// Represents the version ID associated with the initial schema version.
	InitialSchemaVersionId *string `pulumi:"initialSchemaVersionId"`
	// List of tags to tag the schema
	Tags []SchemaTag `pulumi:"tags"`
}

func LookupSchemaOutput(ctx *pulumi.Context, args LookupSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaResult, error) {
			args := v.(LookupSchemaArgs)
			r, err := LookupSchema(ctx, &args, opts...)
			var s LookupSchemaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSchemaResultOutput)
}

type LookupSchemaOutputArgs struct {
	// Amazon Resource Name for the Schema.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaArgs)(nil)).Elem()
}

type LookupSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaResult)(nil)).Elem()
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutput() LookupSchemaResultOutput {
	return o
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutputWithContext(ctx context.Context) LookupSchemaResultOutput {
	return o
}

// Amazon Resource Name for the Schema.
func (o LookupSchemaResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupSchemaResultOutput) CheckpointVersion() SchemaVersionTypePtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *SchemaVersionType { return v.CheckpointVersion }).(SchemaVersionTypePtrOutput)
}

// Compatibility setting for the schema.
func (o LookupSchemaResultOutput) Compatibility() SchemaCompatibilityPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *SchemaCompatibility { return v.Compatibility }).(SchemaCompatibilityPtrOutput)
}

// A description of the schema. If description is not provided, there will not be any default value for this.
func (o LookupSchemaResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Represents the version ID associated with the initial schema version.
func (o LookupSchemaResultOutput) InitialSchemaVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *string { return v.InitialSchemaVersionId }).(pulumi.StringPtrOutput)
}

// List of tags to tag the schema
func (o LookupSchemaResultOutput) Tags() SchemaTagArrayOutput {
	return o.ApplyT(func(v LookupSchemaResult) []SchemaTag { return v.Tags }).(SchemaTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaResultOutput{})
}
