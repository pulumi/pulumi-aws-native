// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::MemoryDB::SubnetGroup resource creates an Amazon MemoryDB Subnet Group.
type SubnetGroup struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the subnet group.
	ARN pulumi.StringOutput `pulumi:"aRN"`
	// An optional description of the subnet group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
	SubnetGroupName pulumi.StringOutput `pulumi:"subnetGroupName"`
	// A list of VPC subnet IDs for the subnet group.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// An array of key-value pairs to apply to this subnet group.
	Tags SubnetGroupTagArrayOutput `pulumi:"tags"`
}

// NewSubnetGroup registers a new resource with the given unique name, arguments, and options.
func NewSubnetGroup(ctx *pulumi.Context,
	name string, args *SubnetGroupArgs, opts ...pulumi.ResourceOption) (*SubnetGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	var resource SubnetGroup
	err := ctx.RegisterResource("aws-native:memorydb:SubnetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetGroup gets an existing SubnetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetGroupState, opts ...pulumi.ResourceOption) (*SubnetGroup, error) {
	var resource SubnetGroup
	err := ctx.ReadResource("aws-native:memorydb:SubnetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetGroup resources.
type subnetGroupState struct {
}

type SubnetGroupState struct {
}

func (SubnetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetGroupState)(nil)).Elem()
}

type subnetGroupArgs struct {
	// An optional description of the subnet group.
	Description *string `pulumi:"description"`
	// The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// A list of VPC subnet IDs for the subnet group.
	SubnetIds []string `pulumi:"subnetIds"`
	// An array of key-value pairs to apply to this subnet group.
	Tags []SubnetGroupTag `pulumi:"tags"`
}

// The set of arguments for constructing a SubnetGroup resource.
type SubnetGroupArgs struct {
	// An optional description of the subnet group.
	Description pulumi.StringPtrInput
	// The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
	SubnetGroupName pulumi.StringPtrInput
	// A list of VPC subnet IDs for the subnet group.
	SubnetIds pulumi.StringArrayInput
	// An array of key-value pairs to apply to this subnet group.
	Tags SubnetGroupTagArrayInput
}

func (SubnetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetGroupArgs)(nil)).Elem()
}

type SubnetGroupInput interface {
	pulumi.Input

	ToSubnetGroupOutput() SubnetGroupOutput
	ToSubnetGroupOutputWithContext(ctx context.Context) SubnetGroupOutput
}

func (*SubnetGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetGroup)(nil)).Elem()
}

func (i *SubnetGroup) ToSubnetGroupOutput() SubnetGroupOutput {
	return i.ToSubnetGroupOutputWithContext(context.Background())
}

func (i *SubnetGroup) ToSubnetGroupOutputWithContext(ctx context.Context) SubnetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetGroupOutput)
}

type SubnetGroupOutput struct{ *pulumi.OutputState }

func (SubnetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetGroup)(nil)).Elem()
}

func (o SubnetGroupOutput) ToSubnetGroupOutput() SubnetGroupOutput {
	return o
}

func (o SubnetGroupOutput) ToSubnetGroupOutputWithContext(ctx context.Context) SubnetGroupOutput {
	return o
}

// The Amazon Resource Name (ARN) of the subnet group.
func (o SubnetGroupOutput) ARN() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetGroup) pulumi.StringOutput { return v.ARN }).(pulumi.StringOutput)
}

// An optional description of the subnet group.
func (o SubnetGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
func (o SubnetGroupOutput) SubnetGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetGroup) pulumi.StringOutput { return v.SubnetGroupName }).(pulumi.StringOutput)
}

// A list of VPC subnet IDs for the subnet group.
func (o SubnetGroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubnetGroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// An array of key-value pairs to apply to this subnet group.
func (o SubnetGroupOutput) Tags() SubnetGroupTagArrayOutput {
	return o.ApplyT(func(v *SubnetGroup) SubnetGroupTagArrayOutput { return v.Tags }).(SubnetGroupTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetGroupInput)(nil)).Elem(), &SubnetGroup{})
	pulumi.RegisterOutputType(SubnetGroupOutput{})
}
