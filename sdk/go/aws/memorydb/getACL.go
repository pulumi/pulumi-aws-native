// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MemoryDB::ACL
func LookupACL(ctx *pulumi.Context, args *LookupACLArgs, opts ...pulumi.InvokeOption) (*LookupACLResult, error) {
	var rv LookupACLResult
	err := ctx.Invoke("aws-native:memorydb:getACL", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupACLArgs struct {
	// The name of the acl.
	ACLName string `pulumi:"aCLName"`
}

type LookupACLResult struct {
	// The Amazon Resource Name (ARN) of the acl.
	Arn *string `pulumi:"arn"`
	// Indicates acl status. Can be "creating", "active", "modifying", "deleting".
	Status *string `pulumi:"status"`
	// An array of key-value pairs to apply to this cluster.
	Tags []ACLTag `pulumi:"tags"`
	// List of users associated to this acl.
	UserNames []string `pulumi:"userNames"`
}

func LookupACLOutput(ctx *pulumi.Context, args LookupACLOutputArgs, opts ...pulumi.InvokeOption) LookupACLResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupACLResult, error) {
			args := v.(LookupACLArgs)
			r, err := LookupACL(ctx, &args, opts...)
			var s LookupACLResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupACLResultOutput)
}

type LookupACLOutputArgs struct {
	// The name of the acl.
	ACLName pulumi.StringInput `pulumi:"aCLName"`
}

func (LookupACLOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupACLArgs)(nil)).Elem()
}

type LookupACLResultOutput struct{ *pulumi.OutputState }

func (LookupACLResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupACLResult)(nil)).Elem()
}

func (o LookupACLResultOutput) ToLookupACLResultOutput() LookupACLResultOutput {
	return o
}

func (o LookupACLResultOutput) ToLookupACLResultOutputWithContext(ctx context.Context) LookupACLResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the acl.
func (o LookupACLResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupACLResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Indicates acl status. Can be "creating", "active", "modifying", "deleting".
func (o LookupACLResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupACLResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this cluster.
func (o LookupACLResultOutput) Tags() ACLTagArrayOutput {
	return o.ApplyT(func(v LookupACLResult) []ACLTag { return v.Tags }).(ACLTagArrayOutput)
}

// List of users associated to this acl.
func (o LookupACLResultOutput) UserNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupACLResult) []string { return v.UserNames }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupACLResultOutput{})
}
