// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::MemoryDB::Cluster resource creates an Amazon MemoryDB Cluster.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	var rv LookupClusterResult
	err := ctx.Invoke("aws-native:memorydb:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	// The name of the cluster. This value must be unique as it also serves as the cluster identifier.
	ClusterName string `pulumi:"clusterName"`
}

type LookupClusterResult struct {
	// The name of the Access Control List to associate with the cluster.
	ACLName *string `pulumi:"aCLName"`
	// The Amazon Resource Name (ARN) of the cluster.
	ARN *string `pulumi:"aRN"`
	// A flag that enables automatic minor version upgrade when set to true.
	//
	// You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// The cluster endpoint.
	ClusterEndpoint *ClusterEndpoint `pulumi:"clusterEndpoint"`
	// An optional description of the cluster.
	Description *string `pulumi:"description"`
	// The Redis engine version used by the cluster.
	EngineVersion *string `pulumi:"engineVersion"`
	// The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
	FinalSnapshotName *string `pulumi:"finalSnapshotName"`
	// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// The compute and memory capacity of the nodes in the cluster.
	NodeType *string `pulumi:"nodeType"`
	// The number of replicas to apply to each shard. The limit is 5.
	NumReplicasPerShard *int `pulumi:"numReplicasPerShard"`
	// The number of shards the cluster will contain.
	NumShards *int `pulumi:"numShards"`
	// The name of the parameter group associated with the cluster.
	ParameterGroupName *string `pulumi:"parameterGroupName"`
	// The status of the parameter group used by the cluster.
	ParameterGroupStatus *string `pulumi:"parameterGroupStatus"`
	// One or more Amazon VPC security groups associated with this cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
	SnapshotRetentionLimit *int `pulumi:"snapshotRetentionLimit"`
	// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
	SnapshotWindow *string `pulumi:"snapshotWindow"`
	// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
	// The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
	SnsTopicStatus *string `pulumi:"snsTopicStatus"`
	// The status of the cluster. For example, Available, Updating, Creating.
	Status *string `pulumi:"status"`
	// The name of the subnet group to be used for the cluster.
	SubnetGroupName *string `pulumi:"subnetGroupName"`
	// An array of key-value pairs to apply to this cluster.
	Tags []ClusterTag `pulumi:"tags"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	// The name of the cluster. This value must be unique as it also serves as the cluster identifier.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// The name of the Access Control List to associate with the cluster.
func (o LookupClusterResultOutput) ACLName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.ACLName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the cluster.
func (o LookupClusterResultOutput) ARN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.ARN }).(pulumi.StringPtrOutput)
}

// A flag that enables automatic minor version upgrade when set to true.
//
// You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
func (o LookupClusterResultOutput) AutoMinorVersionUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *bool { return v.AutoMinorVersionUpgrade }).(pulumi.BoolPtrOutput)
}

// The cluster endpoint.
func (o LookupClusterResultOutput) ClusterEndpoint() ClusterEndpointPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterEndpoint { return v.ClusterEndpoint }).(ClusterEndpointPtrOutput)
}

// An optional description of the cluster.
func (o LookupClusterResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Redis engine version used by the cluster.
func (o LookupClusterResultOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
func (o LookupClusterResultOutput) FinalSnapshotName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.FinalSnapshotName }).(pulumi.StringPtrOutput)
}

// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
func (o LookupClusterResultOutput) MaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.MaintenanceWindow }).(pulumi.StringPtrOutput)
}

// The compute and memory capacity of the nodes in the cluster.
func (o LookupClusterResultOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The number of replicas to apply to each shard. The limit is 5.
func (o LookupClusterResultOutput) NumReplicasPerShard() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *int { return v.NumReplicasPerShard }).(pulumi.IntPtrOutput)
}

// The number of shards the cluster will contain.
func (o LookupClusterResultOutput) NumShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *int { return v.NumShards }).(pulumi.IntPtrOutput)
}

// The name of the parameter group associated with the cluster.
func (o LookupClusterResultOutput) ParameterGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.ParameterGroupName }).(pulumi.StringPtrOutput)
}

// The status of the parameter group used by the cluster.
func (o LookupClusterResultOutput) ParameterGroupStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.ParameterGroupStatus }).(pulumi.StringPtrOutput)
}

// One or more Amazon VPC security groups associated with this cluster.
func (o LookupClusterResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
func (o LookupClusterResultOutput) SnapshotRetentionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *int { return v.SnapshotRetentionLimit }).(pulumi.IntPtrOutput)
}

// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
func (o LookupClusterResultOutput) SnapshotWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.SnapshotWindow }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
func (o LookupClusterResultOutput) SnsTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.SnsTopicArn }).(pulumi.StringPtrOutput)
}

// The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
func (o LookupClusterResultOutput) SnsTopicStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.SnsTopicStatus }).(pulumi.StringPtrOutput)
}

// The status of the cluster. For example, Available, Updating, Creating.
func (o LookupClusterResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The name of the subnet group to be used for the cluster.
func (o LookupClusterResultOutput) SubnetGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.SubnetGroupName }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this cluster.
func (o LookupClusterResultOutput) Tags() ClusterTagArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterTag { return v.Tags }).(ClusterTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
