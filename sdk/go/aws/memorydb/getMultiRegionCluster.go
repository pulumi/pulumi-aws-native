// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::MemoryDB::Multi Region Cluster resource creates an Amazon MemoryDB Multi Region Cluster.
func LookupMultiRegionCluster(ctx *pulumi.Context, args *LookupMultiRegionClusterArgs, opts ...pulumi.InvokeOption) (*LookupMultiRegionClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMultiRegionClusterResult
	err := ctx.Invoke("aws-native:memorydb:getMultiRegionCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMultiRegionClusterArgs struct {
	// The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
	MultiRegionClusterName string `pulumi:"multiRegionClusterName"`
}

type LookupMultiRegionClusterResult struct {
	// The Amazon Resource Name (ARN) of the multi region cluster.
	Arn *string `pulumi:"arn"`
	// Description of the multi region cluster.
	Description *string `pulumi:"description"`
	// The engine type used by the multi region cluster.
	Engine *string `pulumi:"engine"`
	// The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
	MultiRegionClusterName *string `pulumi:"multiRegionClusterName"`
	// The compute and memory capacity of the nodes in the multi region cluster.
	NodeType *string `pulumi:"nodeType"`
	// The number of shards the multi region cluster will contain.
	NumShards *int `pulumi:"numShards"`
	// The status of the multi region cluster. For example, Available, Updating, Creating.
	Status *string `pulumi:"status"`
	// An array of key-value pairs to apply to this multi region cluster.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupMultiRegionClusterOutput(ctx *pulumi.Context, args LookupMultiRegionClusterOutputArgs, opts ...pulumi.InvokeOption) LookupMultiRegionClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMultiRegionClusterResultOutput, error) {
			args := v.(LookupMultiRegionClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:memorydb:getMultiRegionCluster", args, LookupMultiRegionClusterResultOutput{}, options).(LookupMultiRegionClusterResultOutput), nil
		}).(LookupMultiRegionClusterResultOutput)
}

type LookupMultiRegionClusterOutputArgs struct {
	// The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
	MultiRegionClusterName pulumi.StringInput `pulumi:"multiRegionClusterName"`
}

func (LookupMultiRegionClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultiRegionClusterArgs)(nil)).Elem()
}

type LookupMultiRegionClusterResultOutput struct{ *pulumi.OutputState }

func (LookupMultiRegionClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMultiRegionClusterResult)(nil)).Elem()
}

func (o LookupMultiRegionClusterResultOutput) ToLookupMultiRegionClusterResultOutput() LookupMultiRegionClusterResultOutput {
	return o
}

func (o LookupMultiRegionClusterResultOutput) ToLookupMultiRegionClusterResultOutputWithContext(ctx context.Context) LookupMultiRegionClusterResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the multi region cluster.
func (o LookupMultiRegionClusterResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Description of the multi region cluster.
func (o LookupMultiRegionClusterResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The engine type used by the multi region cluster.
func (o LookupMultiRegionClusterResultOutput) Engine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) *string { return v.Engine }).(pulumi.StringPtrOutput)
}

// The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
func (o LookupMultiRegionClusterResultOutput) MultiRegionClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) *string { return v.MultiRegionClusterName }).(pulumi.StringPtrOutput)
}

// The compute and memory capacity of the nodes in the multi region cluster.
func (o LookupMultiRegionClusterResultOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The number of shards the multi region cluster will contain.
func (o LookupMultiRegionClusterResultOutput) NumShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) *int { return v.NumShards }).(pulumi.IntPtrOutput)
}

// The status of the multi region cluster. For example, Available, Updating, Creating.
func (o LookupMultiRegionClusterResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this multi region cluster.
func (o LookupMultiRegionClusterResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupMultiRegionClusterResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMultiRegionClusterResultOutput{})
}
