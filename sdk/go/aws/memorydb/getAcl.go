// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::MemoryDB::ACL
func LookupAcl(ctx *pulumi.Context, args *LookupAclArgs, opts ...pulumi.InvokeOption) (*LookupAclResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAclResult
	err := ctx.Invoke("aws-native:memorydb:getAcl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAclArgs struct {
	// The name of the acl.
	AclName string `pulumi:"aclName"`
}

type LookupAclResult struct {
	// The Amazon Resource Name (ARN) of the acl.
	Arn *string `pulumi:"arn"`
	// Indicates acl status. Can be "creating", "active", "modifying", "deleting".
	Status *string `pulumi:"status"`
	// An array of key-value pairs to apply to this cluster.
	Tags []AclTag `pulumi:"tags"`
	// List of users associated to this acl.
	UserNames []string `pulumi:"userNames"`
}

func LookupAclOutput(ctx *pulumi.Context, args LookupAclOutputArgs, opts ...pulumi.InvokeOption) LookupAclResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAclResult, error) {
			args := v.(LookupAclArgs)
			r, err := LookupAcl(ctx, &args, opts...)
			var s LookupAclResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAclResultOutput)
}

type LookupAclOutputArgs struct {
	// The name of the acl.
	AclName pulumi.StringInput `pulumi:"aclName"`
}

func (LookupAclOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclArgs)(nil)).Elem()
}

type LookupAclResultOutput struct{ *pulumi.OutputState }

func (LookupAclResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAclResult)(nil)).Elem()
}

func (o LookupAclResultOutput) ToLookupAclResultOutput() LookupAclResultOutput {
	return o
}

func (o LookupAclResultOutput) ToLookupAclResultOutputWithContext(ctx context.Context) LookupAclResultOutput {
	return o
}

func (o LookupAclResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupAclResult] {
	return pulumix.Output[LookupAclResult]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the acl.
func (o LookupAclResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAclResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Indicates acl status. Can be "creating", "active", "modifying", "deleting".
func (o LookupAclResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAclResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this cluster.
func (o LookupAclResultOutput) Tags() AclTagArrayOutput {
	return o.ApplyT(func(v LookupAclResult) []AclTag { return v.Tags }).(AclTagArrayOutput)
}

// List of users associated to this acl.
func (o LookupAclResultOutput) UserNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAclResult) []string { return v.UserNames }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAclResultOutput{})
}
