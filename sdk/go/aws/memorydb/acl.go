// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package memorydb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::MemoryDB::ACL
//
// Deprecated: ACL is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type ACL struct {
	pulumi.CustomResourceState

	// The name of the acl.
	ACLName pulumi.StringOutput `pulumi:"aCLName"`
	// The Amazon Resource Name (ARN) of the acl.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Indicates acl status. Can be "creating", "active", "modifying", "deleting".
	Status pulumi.StringOutput `pulumi:"status"`
	// An array of key-value pairs to apply to this cluster.
	Tags ACLTagArrayOutput `pulumi:"tags"`
	// List of users associated to this acl.
	UserNames pulumi.StringArrayOutput `pulumi:"userNames"`
}

// NewACL registers a new resource with the given unique name, arguments, and options.
func NewACL(ctx *pulumi.Context,
	name string, args *ACLArgs, opts ...pulumi.ResourceOption) (*ACL, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ACLName == nil {
		return nil, errors.New("invalid value for required argument 'ACLName'")
	}
	var resource ACL
	err := ctx.RegisterResource("aws-native:memorydb:ACL", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetACL gets an existing ACL resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetACL(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ACLState, opts ...pulumi.ResourceOption) (*ACL, error) {
	var resource ACL
	err := ctx.ReadResource("aws-native:memorydb:ACL", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ACL resources.
type aclState struct {
}

type ACLState struct {
}

func (ACLState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// The name of the acl.
	ACLName string `pulumi:"aCLName"`
	// An array of key-value pairs to apply to this cluster.
	Tags []ACLTag `pulumi:"tags"`
	// List of users associated to this acl.
	UserNames []string `pulumi:"userNames"`
}

// The set of arguments for constructing a ACL resource.
type ACLArgs struct {
	// The name of the acl.
	ACLName pulumi.StringInput
	// An array of key-value pairs to apply to this cluster.
	Tags ACLTagArrayInput
	// List of users associated to this acl.
	UserNames pulumi.StringArrayInput
}

func (ACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type ACLInput interface {
	pulumi.Input

	ToACLOutput() ACLOutput
	ToACLOutputWithContext(ctx context.Context) ACLOutput
}

func (*ACL) ElementType() reflect.Type {
	return reflect.TypeOf((*ACL)(nil))
}

func (i *ACL) ToACLOutput() ACLOutput {
	return i.ToACLOutputWithContext(context.Background())
}

func (i *ACL) ToACLOutputWithContext(ctx context.Context) ACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLOutput)
}

type ACLOutput struct{ *pulumi.OutputState }

func (ACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACL)(nil))
}

func (o ACLOutput) ToACLOutput() ACLOutput {
	return o
}

func (o ACLOutput) ToACLOutputWithContext(ctx context.Context) ACLOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ACLOutput{})
}
