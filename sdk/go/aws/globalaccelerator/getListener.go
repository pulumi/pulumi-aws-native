// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package globalaccelerator

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::GlobalAccelerator::Listener
func LookupListener(ctx *pulumi.Context, args *LookupListenerArgs, opts ...pulumi.InvokeOption) (*LookupListenerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupListenerResult
	err := ctx.Invoke("aws-native:globalaccelerator:getListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupListenerArgs struct {
	// The Amazon Resource Name (ARN) of the listener.
	ListenerArn string `pulumi:"listenerArn"`
}

type LookupListenerResult struct {
	// Client affinity lets you direct all requests from a user to the same endpoint.
	ClientAffinity *ListenerClientAffinity `pulumi:"clientAffinity"`
	// The Amazon Resource Name (ARN) of the listener.
	ListenerArn *string `pulumi:"listenerArn"`
	// The list of port ranges for the connections from clients to the accelerator.
	PortRanges []ListenerPortRange `pulumi:"portRanges"`
	// The protocol for the listener.
	Protocol *ListenerProtocol `pulumi:"protocol"`
}

func LookupListenerOutput(ctx *pulumi.Context, args LookupListenerOutputArgs, opts ...pulumi.InvokeOption) LookupListenerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupListenerResultOutput, error) {
			args := v.(LookupListenerArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupListenerResult
			secret, err := ctx.InvokePackageRaw("aws-native:globalaccelerator:getListener", args, &rv, "", opts...)
			if err != nil {
				return LookupListenerResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupListenerResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupListenerResultOutput), nil
			}
			return output, nil
		}).(LookupListenerResultOutput)
}

type LookupListenerOutputArgs struct {
	// The Amazon Resource Name (ARN) of the listener.
	ListenerArn pulumi.StringInput `pulumi:"listenerArn"`
}

func (LookupListenerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerArgs)(nil)).Elem()
}

type LookupListenerResultOutput struct{ *pulumi.OutputState }

func (LookupListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerResult)(nil)).Elem()
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutput() LookupListenerResultOutput {
	return o
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutputWithContext(ctx context.Context) LookupListenerResultOutput {
	return o
}

// Client affinity lets you direct all requests from a user to the same endpoint.
func (o LookupListenerResultOutput) ClientAffinity() ListenerClientAffinityPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *ListenerClientAffinity { return v.ClientAffinity }).(ListenerClientAffinityPtrOutput)
}

// The Amazon Resource Name (ARN) of the listener.
func (o LookupListenerResultOutput) ListenerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *string { return v.ListenerArn }).(pulumi.StringPtrOutput)
}

// The list of port ranges for the connections from clients to the accelerator.
func (o LookupListenerResultOutput) PortRanges() ListenerPortRangeArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []ListenerPortRange { return v.PortRanges }).(ListenerPortRangeArrayOutput)
}

// The protocol for the listener.
func (o LookupListenerResultOutput) Protocol() ListenerProtocolPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *ListenerProtocol { return v.Protocol }).(ListenerProtocolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupListenerResultOutput{})
}
