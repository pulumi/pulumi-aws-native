// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package neptunegraph

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::NeptuneGraph::Graph resource creates an Amazon NeptuneGraph Graph.
type Graph struct {
	pulumi.CustomResourceState

	// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
	//
	// _Default_: If not specified, the default value is true.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Graph resource ARN
	GraphArn pulumi.StringOutput `pulumi:"graphArn"`
	// The auto-generated id assigned by the service.
	GraphId pulumi.StringOutput `pulumi:"graphId"`
	// Contains a user-supplied name for the Graph.
	//
	// If you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.
	//
	// _Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	GraphName pulumi.StringPtrOutput `pulumi:"graphName"`
	// Memory for the Graph.
	ProvisionedMemory pulumi.IntOutput `pulumi:"provisionedMemory"`
	// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.
	//
	// When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.
	//
	// When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
	//
	// _Default_: If not specified, the default value is false.
	PublicConnectivity pulumi.BoolPtrOutput `pulumi:"publicConnectivity"`
	// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.
	//
	// Replica Count should always be less than or equal to 2.
	//
	// _Default_: If not specified, the default value is 1.
	ReplicaCount pulumi.IntPtrOutput `pulumi:"replicaCount"`
	// The tags associated with this graph.
	Tags GraphTagArrayOutput `pulumi:"tags"`
	// Vector Search Configuration
	VectorSearchConfiguration GraphVectorSearchConfigurationPtrOutput `pulumi:"vectorSearchConfiguration"`
}

// NewGraph registers a new resource with the given unique name, arguments, and options.
func NewGraph(ctx *pulumi.Context,
	name string, args *GraphArgs, opts ...pulumi.ResourceOption) (*Graph, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProvisionedMemory == nil {
		return nil, errors.New("invalid value for required argument 'ProvisionedMemory'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"graphName",
		"replicaCount",
		"vectorSearchConfiguration",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Graph
	err := ctx.RegisterResource("aws-native:neptunegraph:Graph", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGraph gets an existing Graph resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGraph(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GraphState, opts ...pulumi.ResourceOption) (*Graph, error) {
	var resource Graph
	err := ctx.ReadResource("aws-native:neptunegraph:Graph", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Graph resources.
type graphState struct {
}

type GraphState struct {
}

func (GraphState) ElementType() reflect.Type {
	return reflect.TypeOf((*graphState)(nil)).Elem()
}

type graphArgs struct {
	// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
	//
	// _Default_: If not specified, the default value is true.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Contains a user-supplied name for the Graph.
	//
	// If you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.
	//
	// _Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	GraphName *string `pulumi:"graphName"`
	// Memory for the Graph.
	ProvisionedMemory int `pulumi:"provisionedMemory"`
	// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.
	//
	// When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.
	//
	// When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
	//
	// _Default_: If not specified, the default value is false.
	PublicConnectivity *bool `pulumi:"publicConnectivity"`
	// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.
	//
	// Replica Count should always be less than or equal to 2.
	//
	// _Default_: If not specified, the default value is 1.
	ReplicaCount *int `pulumi:"replicaCount"`
	// The tags associated with this graph.
	Tags []GraphTag `pulumi:"tags"`
	// Vector Search Configuration
	VectorSearchConfiguration *GraphVectorSearchConfiguration `pulumi:"vectorSearchConfiguration"`
}

// The set of arguments for constructing a Graph resource.
type GraphArgs struct {
	// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
	//
	// _Default_: If not specified, the default value is true.
	DeletionProtection pulumi.BoolPtrInput
	// Contains a user-supplied name for the Graph.
	//
	// If you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.
	//
	// _Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	GraphName pulumi.StringPtrInput
	// Memory for the Graph.
	ProvisionedMemory pulumi.IntInput
	// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.
	//
	// When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.
	//
	// When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
	//
	// _Default_: If not specified, the default value is false.
	PublicConnectivity pulumi.BoolPtrInput
	// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.
	//
	// Replica Count should always be less than or equal to 2.
	//
	// _Default_: If not specified, the default value is 1.
	ReplicaCount pulumi.IntPtrInput
	// The tags associated with this graph.
	Tags GraphTagArrayInput
	// Vector Search Configuration
	VectorSearchConfiguration GraphVectorSearchConfigurationPtrInput
}

func (GraphArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*graphArgs)(nil)).Elem()
}

type GraphInput interface {
	pulumi.Input

	ToGraphOutput() GraphOutput
	ToGraphOutputWithContext(ctx context.Context) GraphOutput
}

func (*Graph) ElementType() reflect.Type {
	return reflect.TypeOf((**Graph)(nil)).Elem()
}

func (i *Graph) ToGraphOutput() GraphOutput {
	return i.ToGraphOutputWithContext(context.Background())
}

func (i *Graph) ToGraphOutputWithContext(ctx context.Context) GraphOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphOutput)
}

func (i *Graph) ToOutput(ctx context.Context) pulumix.Output[*Graph] {
	return pulumix.Output[*Graph]{
		OutputState: i.ToGraphOutputWithContext(ctx).OutputState,
	}
}

type GraphOutput struct{ *pulumi.OutputState }

func (GraphOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Graph)(nil)).Elem()
}

func (o GraphOutput) ToGraphOutput() GraphOutput {
	return o
}

func (o GraphOutput) ToGraphOutputWithContext(ctx context.Context) GraphOutput {
	return o
}

func (o GraphOutput) ToOutput(ctx context.Context) pulumix.Output[*Graph] {
	return pulumix.Output[*Graph]{
		OutputState: o.OutputState,
	}
}

// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
//
// _Default_: If not specified, the default value is true.
func (o GraphOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Graph) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
func (o GraphOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Graph) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Graph resource ARN
func (o GraphOutput) GraphArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Graph) pulumi.StringOutput { return v.GraphArn }).(pulumi.StringOutput)
}

// The auto-generated id assigned by the service.
func (o GraphOutput) GraphId() pulumi.StringOutput {
	return o.ApplyT(func(v *Graph) pulumi.StringOutput { return v.GraphId }).(pulumi.StringOutput)
}

// Contains a user-supplied name for the Graph.
//
// If you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.
//
// _Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
func (o GraphOutput) GraphName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Graph) pulumi.StringPtrOutput { return v.GraphName }).(pulumi.StringPtrOutput)
}

// Memory for the Graph.
func (o GraphOutput) ProvisionedMemory() pulumi.IntOutput {
	return o.ApplyT(func(v *Graph) pulumi.IntOutput { return v.ProvisionedMemory }).(pulumi.IntOutput)
}

// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.
//
// When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.
//
// When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
//
// _Default_: If not specified, the default value is false.
func (o GraphOutput) PublicConnectivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Graph) pulumi.BoolPtrOutput { return v.PublicConnectivity }).(pulumi.BoolPtrOutput)
}

// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.
//
// Replica Count should always be less than or equal to 2.
//
// _Default_: If not specified, the default value is 1.
func (o GraphOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Graph) pulumi.IntPtrOutput { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// The tags associated with this graph.
func (o GraphOutput) Tags() GraphTagArrayOutput {
	return o.ApplyT(func(v *Graph) GraphTagArrayOutput { return v.Tags }).(GraphTagArrayOutput)
}

// Vector Search Configuration
func (o GraphOutput) VectorSearchConfiguration() GraphVectorSearchConfigurationPtrOutput {
	return o.ApplyT(func(v *Graph) GraphVectorSearchConfigurationPtrOutput { return v.VectorSearchConfiguration }).(GraphVectorSearchConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GraphInput)(nil)).Elem(), &Graph{})
	pulumi.RegisterOutputType(GraphOutput{})
}
