// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmguiconnect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The set of preferences used for recording RDP connections in the requesting AWS account and AWS Region. This includes details such as which S3 bucket recordings are stored in.
type ConnectionRecordingPreferencesProperties struct {
	KmsKeyArn             string                           `pulumi:"kmsKeyArn"`
	RecordingDestinations PreferencesRecordingDestinations `pulumi:"recordingDestinations"`
}

// ConnectionRecordingPreferencesPropertiesInput is an input type that accepts ConnectionRecordingPreferencesPropertiesArgs and ConnectionRecordingPreferencesPropertiesOutput values.
// You can construct a concrete instance of `ConnectionRecordingPreferencesPropertiesInput` via:
//
//	ConnectionRecordingPreferencesPropertiesArgs{...}
type ConnectionRecordingPreferencesPropertiesInput interface {
	pulumi.Input

	ToConnectionRecordingPreferencesPropertiesOutput() ConnectionRecordingPreferencesPropertiesOutput
	ToConnectionRecordingPreferencesPropertiesOutputWithContext(context.Context) ConnectionRecordingPreferencesPropertiesOutput
}

// The set of preferences used for recording RDP connections in the requesting AWS account and AWS Region. This includes details such as which S3 bucket recordings are stored in.
type ConnectionRecordingPreferencesPropertiesArgs struct {
	KmsKeyArn             pulumi.StringInput                    `pulumi:"kmsKeyArn"`
	RecordingDestinations PreferencesRecordingDestinationsInput `pulumi:"recordingDestinations"`
}

func (ConnectionRecordingPreferencesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionRecordingPreferencesProperties)(nil)).Elem()
}

func (i ConnectionRecordingPreferencesPropertiesArgs) ToConnectionRecordingPreferencesPropertiesOutput() ConnectionRecordingPreferencesPropertiesOutput {
	return i.ToConnectionRecordingPreferencesPropertiesOutputWithContext(context.Background())
}

func (i ConnectionRecordingPreferencesPropertiesArgs) ToConnectionRecordingPreferencesPropertiesOutputWithContext(ctx context.Context) ConnectionRecordingPreferencesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRecordingPreferencesPropertiesOutput)
}

func (i ConnectionRecordingPreferencesPropertiesArgs) ToConnectionRecordingPreferencesPropertiesPtrOutput() ConnectionRecordingPreferencesPropertiesPtrOutput {
	return i.ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectionRecordingPreferencesPropertiesArgs) ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(ctx context.Context) ConnectionRecordingPreferencesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRecordingPreferencesPropertiesOutput).ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(ctx)
}

// ConnectionRecordingPreferencesPropertiesPtrInput is an input type that accepts ConnectionRecordingPreferencesPropertiesArgs, ConnectionRecordingPreferencesPropertiesPtr and ConnectionRecordingPreferencesPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectionRecordingPreferencesPropertiesPtrInput` via:
//
//	        ConnectionRecordingPreferencesPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectionRecordingPreferencesPropertiesPtrInput interface {
	pulumi.Input

	ToConnectionRecordingPreferencesPropertiesPtrOutput() ConnectionRecordingPreferencesPropertiesPtrOutput
	ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(context.Context) ConnectionRecordingPreferencesPropertiesPtrOutput
}

type connectionRecordingPreferencesPropertiesPtrType ConnectionRecordingPreferencesPropertiesArgs

func ConnectionRecordingPreferencesPropertiesPtr(v *ConnectionRecordingPreferencesPropertiesArgs) ConnectionRecordingPreferencesPropertiesPtrInput {
	return (*connectionRecordingPreferencesPropertiesPtrType)(v)
}

func (*connectionRecordingPreferencesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionRecordingPreferencesProperties)(nil)).Elem()
}

func (i *connectionRecordingPreferencesPropertiesPtrType) ToConnectionRecordingPreferencesPropertiesPtrOutput() ConnectionRecordingPreferencesPropertiesPtrOutput {
	return i.ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectionRecordingPreferencesPropertiesPtrType) ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(ctx context.Context) ConnectionRecordingPreferencesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionRecordingPreferencesPropertiesPtrOutput)
}

// The set of preferences used for recording RDP connections in the requesting AWS account and AWS Region. This includes details such as which S3 bucket recordings are stored in.
type ConnectionRecordingPreferencesPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectionRecordingPreferencesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionRecordingPreferencesProperties)(nil)).Elem()
}

func (o ConnectionRecordingPreferencesPropertiesOutput) ToConnectionRecordingPreferencesPropertiesOutput() ConnectionRecordingPreferencesPropertiesOutput {
	return o
}

func (o ConnectionRecordingPreferencesPropertiesOutput) ToConnectionRecordingPreferencesPropertiesOutputWithContext(ctx context.Context) ConnectionRecordingPreferencesPropertiesOutput {
	return o
}

func (o ConnectionRecordingPreferencesPropertiesOutput) ToConnectionRecordingPreferencesPropertiesPtrOutput() ConnectionRecordingPreferencesPropertiesPtrOutput {
	return o.ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectionRecordingPreferencesPropertiesOutput) ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(ctx context.Context) ConnectionRecordingPreferencesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionRecordingPreferencesProperties) *ConnectionRecordingPreferencesProperties {
		return &v
	}).(ConnectionRecordingPreferencesPropertiesPtrOutput)
}

func (o ConnectionRecordingPreferencesPropertiesOutput) KmsKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionRecordingPreferencesProperties) string { return v.KmsKeyArn }).(pulumi.StringOutput)
}

func (o ConnectionRecordingPreferencesPropertiesOutput) RecordingDestinations() PreferencesRecordingDestinationsOutput {
	return o.ApplyT(func(v ConnectionRecordingPreferencesProperties) PreferencesRecordingDestinations {
		return v.RecordingDestinations
	}).(PreferencesRecordingDestinationsOutput)
}

type ConnectionRecordingPreferencesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectionRecordingPreferencesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionRecordingPreferencesProperties)(nil)).Elem()
}

func (o ConnectionRecordingPreferencesPropertiesPtrOutput) ToConnectionRecordingPreferencesPropertiesPtrOutput() ConnectionRecordingPreferencesPropertiesPtrOutput {
	return o
}

func (o ConnectionRecordingPreferencesPropertiesPtrOutput) ToConnectionRecordingPreferencesPropertiesPtrOutputWithContext(ctx context.Context) ConnectionRecordingPreferencesPropertiesPtrOutput {
	return o
}

func (o ConnectionRecordingPreferencesPropertiesPtrOutput) Elem() ConnectionRecordingPreferencesPropertiesOutput {
	return o.ApplyT(func(v *ConnectionRecordingPreferencesProperties) ConnectionRecordingPreferencesProperties {
		if v != nil {
			return *v
		}
		var ret ConnectionRecordingPreferencesProperties
		return ret
	}).(ConnectionRecordingPreferencesPropertiesOutput)
}

func (o ConnectionRecordingPreferencesPropertiesPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionRecordingPreferencesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

func (o ConnectionRecordingPreferencesPropertiesPtrOutput) RecordingDestinations() PreferencesRecordingDestinationsPtrOutput {
	return o.ApplyT(func(v *ConnectionRecordingPreferencesProperties) *PreferencesRecordingDestinations {
		if v == nil {
			return nil
		}
		return &v.RecordingDestinations
	}).(PreferencesRecordingDestinationsPtrOutput)
}

// Determines where recordings of RDP connections are stored.
type PreferencesRecordingDestinations struct {
	S3Buckets []PreferencesS3Bucket `pulumi:"s3Buckets"`
}

// PreferencesRecordingDestinationsInput is an input type that accepts PreferencesRecordingDestinationsArgs and PreferencesRecordingDestinationsOutput values.
// You can construct a concrete instance of `PreferencesRecordingDestinationsInput` via:
//
//	PreferencesRecordingDestinationsArgs{...}
type PreferencesRecordingDestinationsInput interface {
	pulumi.Input

	ToPreferencesRecordingDestinationsOutput() PreferencesRecordingDestinationsOutput
	ToPreferencesRecordingDestinationsOutputWithContext(context.Context) PreferencesRecordingDestinationsOutput
}

// Determines where recordings of RDP connections are stored.
type PreferencesRecordingDestinationsArgs struct {
	S3Buckets PreferencesS3BucketArrayInput `pulumi:"s3Buckets"`
}

func (PreferencesRecordingDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferencesRecordingDestinations)(nil)).Elem()
}

func (i PreferencesRecordingDestinationsArgs) ToPreferencesRecordingDestinationsOutput() PreferencesRecordingDestinationsOutput {
	return i.ToPreferencesRecordingDestinationsOutputWithContext(context.Background())
}

func (i PreferencesRecordingDestinationsArgs) ToPreferencesRecordingDestinationsOutputWithContext(ctx context.Context) PreferencesRecordingDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferencesRecordingDestinationsOutput)
}

func (i PreferencesRecordingDestinationsArgs) ToPreferencesRecordingDestinationsPtrOutput() PreferencesRecordingDestinationsPtrOutput {
	return i.ToPreferencesRecordingDestinationsPtrOutputWithContext(context.Background())
}

func (i PreferencesRecordingDestinationsArgs) ToPreferencesRecordingDestinationsPtrOutputWithContext(ctx context.Context) PreferencesRecordingDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferencesRecordingDestinationsOutput).ToPreferencesRecordingDestinationsPtrOutputWithContext(ctx)
}

// PreferencesRecordingDestinationsPtrInput is an input type that accepts PreferencesRecordingDestinationsArgs, PreferencesRecordingDestinationsPtr and PreferencesRecordingDestinationsPtrOutput values.
// You can construct a concrete instance of `PreferencesRecordingDestinationsPtrInput` via:
//
//	        PreferencesRecordingDestinationsArgs{...}
//
//	or:
//
//	        nil
type PreferencesRecordingDestinationsPtrInput interface {
	pulumi.Input

	ToPreferencesRecordingDestinationsPtrOutput() PreferencesRecordingDestinationsPtrOutput
	ToPreferencesRecordingDestinationsPtrOutputWithContext(context.Context) PreferencesRecordingDestinationsPtrOutput
}

type preferencesRecordingDestinationsPtrType PreferencesRecordingDestinationsArgs

func PreferencesRecordingDestinationsPtr(v *PreferencesRecordingDestinationsArgs) PreferencesRecordingDestinationsPtrInput {
	return (*preferencesRecordingDestinationsPtrType)(v)
}

func (*preferencesRecordingDestinationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreferencesRecordingDestinations)(nil)).Elem()
}

func (i *preferencesRecordingDestinationsPtrType) ToPreferencesRecordingDestinationsPtrOutput() PreferencesRecordingDestinationsPtrOutput {
	return i.ToPreferencesRecordingDestinationsPtrOutputWithContext(context.Background())
}

func (i *preferencesRecordingDestinationsPtrType) ToPreferencesRecordingDestinationsPtrOutputWithContext(ctx context.Context) PreferencesRecordingDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferencesRecordingDestinationsPtrOutput)
}

// Determines where recordings of RDP connections are stored.
type PreferencesRecordingDestinationsOutput struct{ *pulumi.OutputState }

func (PreferencesRecordingDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferencesRecordingDestinations)(nil)).Elem()
}

func (o PreferencesRecordingDestinationsOutput) ToPreferencesRecordingDestinationsOutput() PreferencesRecordingDestinationsOutput {
	return o
}

func (o PreferencesRecordingDestinationsOutput) ToPreferencesRecordingDestinationsOutputWithContext(ctx context.Context) PreferencesRecordingDestinationsOutput {
	return o
}

func (o PreferencesRecordingDestinationsOutput) ToPreferencesRecordingDestinationsPtrOutput() PreferencesRecordingDestinationsPtrOutput {
	return o.ToPreferencesRecordingDestinationsPtrOutputWithContext(context.Background())
}

func (o PreferencesRecordingDestinationsOutput) ToPreferencesRecordingDestinationsPtrOutputWithContext(ctx context.Context) PreferencesRecordingDestinationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PreferencesRecordingDestinations) *PreferencesRecordingDestinations {
		return &v
	}).(PreferencesRecordingDestinationsPtrOutput)
}

func (o PreferencesRecordingDestinationsOutput) S3Buckets() PreferencesS3BucketArrayOutput {
	return o.ApplyT(func(v PreferencesRecordingDestinations) []PreferencesS3Bucket { return v.S3Buckets }).(PreferencesS3BucketArrayOutput)
}

type PreferencesRecordingDestinationsPtrOutput struct{ *pulumi.OutputState }

func (PreferencesRecordingDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreferencesRecordingDestinations)(nil)).Elem()
}

func (o PreferencesRecordingDestinationsPtrOutput) ToPreferencesRecordingDestinationsPtrOutput() PreferencesRecordingDestinationsPtrOutput {
	return o
}

func (o PreferencesRecordingDestinationsPtrOutput) ToPreferencesRecordingDestinationsPtrOutputWithContext(ctx context.Context) PreferencesRecordingDestinationsPtrOutput {
	return o
}

func (o PreferencesRecordingDestinationsPtrOutput) Elem() PreferencesRecordingDestinationsOutput {
	return o.ApplyT(func(v *PreferencesRecordingDestinations) PreferencesRecordingDestinations {
		if v != nil {
			return *v
		}
		var ret PreferencesRecordingDestinations
		return ret
	}).(PreferencesRecordingDestinationsOutput)
}

func (o PreferencesRecordingDestinationsPtrOutput) S3Buckets() PreferencesS3BucketArrayOutput {
	return o.ApplyT(func(v *PreferencesRecordingDestinations) []PreferencesS3Bucket {
		if v == nil {
			return nil
		}
		return v.S3Buckets
	}).(PreferencesS3BucketArrayOutput)
}

// The S3 bucket where RDP connection recordings are stored.
type PreferencesS3Bucket struct {
	BucketName  string `pulumi:"bucketName"`
	BucketOwner string `pulumi:"bucketOwner"`
}

// PreferencesS3BucketInput is an input type that accepts PreferencesS3BucketArgs and PreferencesS3BucketOutput values.
// You can construct a concrete instance of `PreferencesS3BucketInput` via:
//
//	PreferencesS3BucketArgs{...}
type PreferencesS3BucketInput interface {
	pulumi.Input

	ToPreferencesS3BucketOutput() PreferencesS3BucketOutput
	ToPreferencesS3BucketOutputWithContext(context.Context) PreferencesS3BucketOutput
}

// The S3 bucket where RDP connection recordings are stored.
type PreferencesS3BucketArgs struct {
	BucketName  pulumi.StringInput `pulumi:"bucketName"`
	BucketOwner pulumi.StringInput `pulumi:"bucketOwner"`
}

func (PreferencesS3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferencesS3Bucket)(nil)).Elem()
}

func (i PreferencesS3BucketArgs) ToPreferencesS3BucketOutput() PreferencesS3BucketOutput {
	return i.ToPreferencesS3BucketOutputWithContext(context.Background())
}

func (i PreferencesS3BucketArgs) ToPreferencesS3BucketOutputWithContext(ctx context.Context) PreferencesS3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferencesS3BucketOutput)
}

// PreferencesS3BucketArrayInput is an input type that accepts PreferencesS3BucketArray and PreferencesS3BucketArrayOutput values.
// You can construct a concrete instance of `PreferencesS3BucketArrayInput` via:
//
//	PreferencesS3BucketArray{ PreferencesS3BucketArgs{...} }
type PreferencesS3BucketArrayInput interface {
	pulumi.Input

	ToPreferencesS3BucketArrayOutput() PreferencesS3BucketArrayOutput
	ToPreferencesS3BucketArrayOutputWithContext(context.Context) PreferencesS3BucketArrayOutput
}

type PreferencesS3BucketArray []PreferencesS3BucketInput

func (PreferencesS3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PreferencesS3Bucket)(nil)).Elem()
}

func (i PreferencesS3BucketArray) ToPreferencesS3BucketArrayOutput() PreferencesS3BucketArrayOutput {
	return i.ToPreferencesS3BucketArrayOutputWithContext(context.Background())
}

func (i PreferencesS3BucketArray) ToPreferencesS3BucketArrayOutputWithContext(ctx context.Context) PreferencesS3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreferencesS3BucketArrayOutput)
}

// The S3 bucket where RDP connection recordings are stored.
type PreferencesS3BucketOutput struct{ *pulumi.OutputState }

func (PreferencesS3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreferencesS3Bucket)(nil)).Elem()
}

func (o PreferencesS3BucketOutput) ToPreferencesS3BucketOutput() PreferencesS3BucketOutput {
	return o
}

func (o PreferencesS3BucketOutput) ToPreferencesS3BucketOutputWithContext(ctx context.Context) PreferencesS3BucketOutput {
	return o
}

func (o PreferencesS3BucketOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v PreferencesS3Bucket) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o PreferencesS3BucketOutput) BucketOwner() pulumi.StringOutput {
	return o.ApplyT(func(v PreferencesS3Bucket) string { return v.BucketOwner }).(pulumi.StringOutput)
}

type PreferencesS3BucketArrayOutput struct{ *pulumi.OutputState }

func (PreferencesS3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PreferencesS3Bucket)(nil)).Elem()
}

func (o PreferencesS3BucketArrayOutput) ToPreferencesS3BucketArrayOutput() PreferencesS3BucketArrayOutput {
	return o
}

func (o PreferencesS3BucketArrayOutput) ToPreferencesS3BucketArrayOutputWithContext(ctx context.Context) PreferencesS3BucketArrayOutput {
	return o
}

func (o PreferencesS3BucketArrayOutput) Index(i pulumi.IntInput) PreferencesS3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PreferencesS3Bucket {
		return vs[0].([]PreferencesS3Bucket)[vs[1].(int)]
	}).(PreferencesS3BucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRecordingPreferencesPropertiesInput)(nil)).Elem(), ConnectionRecordingPreferencesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionRecordingPreferencesPropertiesPtrInput)(nil)).Elem(), ConnectionRecordingPreferencesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferencesRecordingDestinationsInput)(nil)).Elem(), PreferencesRecordingDestinationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferencesRecordingDestinationsPtrInput)(nil)).Elem(), PreferencesRecordingDestinationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferencesS3BucketInput)(nil)).Elem(), PreferencesS3BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreferencesS3BucketArrayInput)(nil)).Elem(), PreferencesS3BucketArray{})
	pulumi.RegisterOutputType(ConnectionRecordingPreferencesPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectionRecordingPreferencesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PreferencesRecordingDestinationsOutput{})
	pulumi.RegisterOutputType(PreferencesRecordingDestinationsPtrOutput{})
	pulumi.RegisterOutputType(PreferencesS3BucketOutput{})
	pulumi.RegisterOutputType(PreferencesS3BucketArrayOutput{})
}
