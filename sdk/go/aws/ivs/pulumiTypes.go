// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ChannelMultitrackInputConfiguration struct {
	// Indicates whether multitrack input is enabled. Can be set to true only if channel type is STANDARD. Setting enabled to true with any other channel type will cause an exception. If true, then policy, maximumResolution, and containerFormat are required, and containerFormat must be set to FRAGMENTED_MP4. Default: false.
	Enabled *bool `pulumi:"enabled"`
	// Maximum resolution for multitrack input. Required if enabled is true.
	MaximumResolution *ChannelMultitrackInputConfigurationMaximumResolution `pulumi:"maximumResolution"`
	// Indicates whether multitrack input is allowed or required. Required if enabled is true.
	Policy *ChannelMultitrackInputConfigurationPolicy `pulumi:"policy"`
}

// ChannelMultitrackInputConfigurationInput is an input type that accepts ChannelMultitrackInputConfigurationArgs and ChannelMultitrackInputConfigurationOutput values.
// You can construct a concrete instance of `ChannelMultitrackInputConfigurationInput` via:
//
//	ChannelMultitrackInputConfigurationArgs{...}
type ChannelMultitrackInputConfigurationInput interface {
	pulumi.Input

	ToChannelMultitrackInputConfigurationOutput() ChannelMultitrackInputConfigurationOutput
	ToChannelMultitrackInputConfigurationOutputWithContext(context.Context) ChannelMultitrackInputConfigurationOutput
}

type ChannelMultitrackInputConfigurationArgs struct {
	// Indicates whether multitrack input is enabled. Can be set to true only if channel type is STANDARD. Setting enabled to true with any other channel type will cause an exception. If true, then policy, maximumResolution, and containerFormat are required, and containerFormat must be set to FRAGMENTED_MP4. Default: false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Maximum resolution for multitrack input. Required if enabled is true.
	MaximumResolution ChannelMultitrackInputConfigurationMaximumResolutionPtrInput `pulumi:"maximumResolution"`
	// Indicates whether multitrack input is allowed or required. Required if enabled is true.
	Policy ChannelMultitrackInputConfigurationPolicyPtrInput `pulumi:"policy"`
}

func (ChannelMultitrackInputConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMultitrackInputConfiguration)(nil)).Elem()
}

func (i ChannelMultitrackInputConfigurationArgs) ToChannelMultitrackInputConfigurationOutput() ChannelMultitrackInputConfigurationOutput {
	return i.ToChannelMultitrackInputConfigurationOutputWithContext(context.Background())
}

func (i ChannelMultitrackInputConfigurationArgs) ToChannelMultitrackInputConfigurationOutputWithContext(ctx context.Context) ChannelMultitrackInputConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelMultitrackInputConfigurationOutput)
}

func (i ChannelMultitrackInputConfigurationArgs) ToChannelMultitrackInputConfigurationPtrOutput() ChannelMultitrackInputConfigurationPtrOutput {
	return i.ToChannelMultitrackInputConfigurationPtrOutputWithContext(context.Background())
}

func (i ChannelMultitrackInputConfigurationArgs) ToChannelMultitrackInputConfigurationPtrOutputWithContext(ctx context.Context) ChannelMultitrackInputConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelMultitrackInputConfigurationOutput).ToChannelMultitrackInputConfigurationPtrOutputWithContext(ctx)
}

// ChannelMultitrackInputConfigurationPtrInput is an input type that accepts ChannelMultitrackInputConfigurationArgs, ChannelMultitrackInputConfigurationPtr and ChannelMultitrackInputConfigurationPtrOutput values.
// You can construct a concrete instance of `ChannelMultitrackInputConfigurationPtrInput` via:
//
//	        ChannelMultitrackInputConfigurationArgs{...}
//
//	or:
//
//	        nil
type ChannelMultitrackInputConfigurationPtrInput interface {
	pulumi.Input

	ToChannelMultitrackInputConfigurationPtrOutput() ChannelMultitrackInputConfigurationPtrOutput
	ToChannelMultitrackInputConfigurationPtrOutputWithContext(context.Context) ChannelMultitrackInputConfigurationPtrOutput
}

type channelMultitrackInputConfigurationPtrType ChannelMultitrackInputConfigurationArgs

func ChannelMultitrackInputConfigurationPtr(v *ChannelMultitrackInputConfigurationArgs) ChannelMultitrackInputConfigurationPtrInput {
	return (*channelMultitrackInputConfigurationPtrType)(v)
}

func (*channelMultitrackInputConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelMultitrackInputConfiguration)(nil)).Elem()
}

func (i *channelMultitrackInputConfigurationPtrType) ToChannelMultitrackInputConfigurationPtrOutput() ChannelMultitrackInputConfigurationPtrOutput {
	return i.ToChannelMultitrackInputConfigurationPtrOutputWithContext(context.Background())
}

func (i *channelMultitrackInputConfigurationPtrType) ToChannelMultitrackInputConfigurationPtrOutputWithContext(ctx context.Context) ChannelMultitrackInputConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelMultitrackInputConfigurationPtrOutput)
}

type ChannelMultitrackInputConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelMultitrackInputConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelMultitrackInputConfiguration)(nil)).Elem()
}

func (o ChannelMultitrackInputConfigurationOutput) ToChannelMultitrackInputConfigurationOutput() ChannelMultitrackInputConfigurationOutput {
	return o
}

func (o ChannelMultitrackInputConfigurationOutput) ToChannelMultitrackInputConfigurationOutputWithContext(ctx context.Context) ChannelMultitrackInputConfigurationOutput {
	return o
}

func (o ChannelMultitrackInputConfigurationOutput) ToChannelMultitrackInputConfigurationPtrOutput() ChannelMultitrackInputConfigurationPtrOutput {
	return o.ToChannelMultitrackInputConfigurationPtrOutputWithContext(context.Background())
}

func (o ChannelMultitrackInputConfigurationOutput) ToChannelMultitrackInputConfigurationPtrOutputWithContext(ctx context.Context) ChannelMultitrackInputConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelMultitrackInputConfiguration) *ChannelMultitrackInputConfiguration {
		return &v
	}).(ChannelMultitrackInputConfigurationPtrOutput)
}

// Indicates whether multitrack input is enabled. Can be set to true only if channel type is STANDARD. Setting enabled to true with any other channel type will cause an exception. If true, then policy, maximumResolution, and containerFormat are required, and containerFormat must be set to FRAGMENTED_MP4. Default: false.
func (o ChannelMultitrackInputConfigurationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelMultitrackInputConfiguration) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Maximum resolution for multitrack input. Required if enabled is true.
func (o ChannelMultitrackInputConfigurationOutput) MaximumResolution() ChannelMultitrackInputConfigurationMaximumResolutionPtrOutput {
	return o.ApplyT(func(v ChannelMultitrackInputConfiguration) *ChannelMultitrackInputConfigurationMaximumResolution {
		return v.MaximumResolution
	}).(ChannelMultitrackInputConfigurationMaximumResolutionPtrOutput)
}

// Indicates whether multitrack input is allowed or required. Required if enabled is true.
func (o ChannelMultitrackInputConfigurationOutput) Policy() ChannelMultitrackInputConfigurationPolicyPtrOutput {
	return o.ApplyT(func(v ChannelMultitrackInputConfiguration) *ChannelMultitrackInputConfigurationPolicy {
		return v.Policy
	}).(ChannelMultitrackInputConfigurationPolicyPtrOutput)
}

type ChannelMultitrackInputConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ChannelMultitrackInputConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelMultitrackInputConfiguration)(nil)).Elem()
}

func (o ChannelMultitrackInputConfigurationPtrOutput) ToChannelMultitrackInputConfigurationPtrOutput() ChannelMultitrackInputConfigurationPtrOutput {
	return o
}

func (o ChannelMultitrackInputConfigurationPtrOutput) ToChannelMultitrackInputConfigurationPtrOutputWithContext(ctx context.Context) ChannelMultitrackInputConfigurationPtrOutput {
	return o
}

func (o ChannelMultitrackInputConfigurationPtrOutput) Elem() ChannelMultitrackInputConfigurationOutput {
	return o.ApplyT(func(v *ChannelMultitrackInputConfiguration) ChannelMultitrackInputConfiguration {
		if v != nil {
			return *v
		}
		var ret ChannelMultitrackInputConfiguration
		return ret
	}).(ChannelMultitrackInputConfigurationOutput)
}

// Indicates whether multitrack input is enabled. Can be set to true only if channel type is STANDARD. Setting enabled to true with any other channel type will cause an exception. If true, then policy, maximumResolution, and containerFormat are required, and containerFormat must be set to FRAGMENTED_MP4. Default: false.
func (o ChannelMultitrackInputConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelMultitrackInputConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Maximum resolution for multitrack input. Required if enabled is true.
func (o ChannelMultitrackInputConfigurationPtrOutput) MaximumResolution() ChannelMultitrackInputConfigurationMaximumResolutionPtrOutput {
	return o.ApplyT(func(v *ChannelMultitrackInputConfiguration) *ChannelMultitrackInputConfigurationMaximumResolution {
		if v == nil {
			return nil
		}
		return v.MaximumResolution
	}).(ChannelMultitrackInputConfigurationMaximumResolutionPtrOutput)
}

// Indicates whether multitrack input is allowed or required. Required if enabled is true.
func (o ChannelMultitrackInputConfigurationPtrOutput) Policy() ChannelMultitrackInputConfigurationPolicyPtrOutput {
	return o.ApplyT(func(v *ChannelMultitrackInputConfiguration) *ChannelMultitrackInputConfigurationPolicy {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(ChannelMultitrackInputConfigurationPolicyPtrOutput)
}

type ChannelTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type EncoderConfigurationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type IngestConfigurationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type PlaybackKeyPairTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type PlaybackRestrictionPolicyTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type PublicKeyTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfiguration struct {
	// An S3 destination configuration where recorded videos will be stored. See the [S3DestinationConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivs-recordingconfiguration-s3destinationconfiguration.html) property type for more information.
	S3 *RecordingConfigurationS3DestinationConfiguration `pulumi:"s3"`
}

// RecordingConfigurationDestinationConfigurationInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs and RecordingConfigurationDestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationInput` via:
//
//	RecordingConfigurationDestinationConfigurationArgs{...}
type RecordingConfigurationDestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput
	ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationOutput
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationArgs struct {
	// An S3 destination configuration where recorded videos will be stored. See the [S3DestinationConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivs-recordingconfiguration-s3destinationconfiguration.html) property type for more information.
	S3 RecordingConfigurationS3DestinationConfigurationPtrInput `pulumi:"s3"`
}

func (RecordingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput)
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return o
}

// An S3 destination configuration where recorded videos will be stored. See the [S3DestinationConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivs-recordingconfiguration-s3destinationconfiguration.html) property type for more information.
func (o RecordingConfigurationDestinationConfigurationOutput) S3() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationDestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return v.S3
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfiguration struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection *RecordingConfigurationRenditionConfigurationRenditionSelection `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions []RecordingConfigurationRenditionConfigurationRenditionsItem `pulumi:"renditions"`
}

// RecordingConfigurationRenditionConfigurationInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs and RecordingConfigurationRenditionConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationInput` via:
//
//	RecordingConfigurationRenditionConfigurationArgs{...}
type RecordingConfigurationRenditionConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput
	ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationOutput
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationArgs struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection RecordingConfigurationRenditionConfigurationRenditionSelectionPtrInput `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions RecordingConfigurationRenditionConfigurationRenditionsItemArrayInput `pulumi:"renditions"`
}

func (RecordingConfigurationRenditionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return i.ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput)
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput).ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationRenditionConfigurationPtrInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs, RecordingConfigurationRenditionConfigurationPtr and RecordingConfigurationRenditionConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationPtrInput` via:
//
//	        RecordingConfigurationRenditionConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationRenditionConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput
	ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationPtrOutput
}

type recordingConfigurationRenditionConfigurationPtrType RecordingConfigurationRenditionConfigurationArgs

func RecordingConfigurationRenditionConfigurationPtr(v *RecordingConfigurationRenditionConfigurationArgs) RecordingConfigurationRenditionConfigurationPtrInput {
	return (*recordingConfigurationRenditionConfigurationPtrType)(v)
}

func (*recordingConfigurationRenditionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfiguration {
		return &v
	}).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

type RecordingConfigurationRenditionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) Elem() RecordingConfigurationRenditionConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) RecordingConfigurationRenditionConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationRenditionConfiguration
		return ret
	}).(RecordingConfigurationRenditionConfigurationOutput)
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		if v == nil {
			return nil
		}
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		if v == nil {
			return nil
		}
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfiguration struct {
	// Location (S3 bucket name) where recorded videos will be stored.
	BucketName string `pulumi:"bucketName"`
}

// RecordingConfigurationS3DestinationConfigurationInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs and RecordingConfigurationS3DestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationInput` via:
//
//	RecordingConfigurationS3DestinationConfigurationArgs{...}
type RecordingConfigurationS3DestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput
	ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationOutput
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationArgs struct {
	// Location (S3 bucket name) where recorded videos will be stored.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (RecordingConfigurationS3DestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput).ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationS3DestinationConfigurationPtrInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs, RecordingConfigurationS3DestinationConfigurationPtr and RecordingConfigurationS3DestinationConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationPtrInput` via:
//
//	        RecordingConfigurationS3DestinationConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationS3DestinationConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput
	ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput
}

type recordingConfigurationS3DestinationConfigurationPtrType RecordingConfigurationS3DestinationConfigurationArgs

func RecordingConfigurationS3DestinationConfigurationPtr(v *RecordingConfigurationS3DestinationConfigurationArgs) RecordingConfigurationS3DestinationConfigurationPtrInput {
	return (*recordingConfigurationS3DestinationConfigurationPtrType)(v)
}

func (*recordingConfigurationS3DestinationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationS3DestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return &v
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Location (S3 bucket name) where recorded videos will be stored.
func (o RecordingConfigurationS3DestinationConfigurationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationS3DestinationConfiguration) string { return v.BucketName }).(pulumi.StringOutput)
}

type RecordingConfigurationS3DestinationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) Elem() RecordingConfigurationS3DestinationConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) RecordingConfigurationS3DestinationConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationS3DestinationConfiguration
		return ret
	}).(RecordingConfigurationS3DestinationConfigurationOutput)
}

// Location (S3 bucket name) where recorded videos will be stored.
func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

type RecordingConfigurationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfiguration struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode *RecordingConfigurationThumbnailConfigurationRecordingMode `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution *RecordingConfigurationThumbnailConfigurationResolution `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage []RecordingConfigurationThumbnailConfigurationStorageItem `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds *int `pulumi:"targetIntervalSeconds"`
}

// RecordingConfigurationThumbnailConfigurationInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs and RecordingConfigurationThumbnailConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationInput` via:
//
//	RecordingConfigurationThumbnailConfigurationArgs{...}
type RecordingConfigurationThumbnailConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput
	ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationOutput
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationArgs struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode RecordingConfigurationThumbnailConfigurationRecordingModePtrInput `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution RecordingConfigurationThumbnailConfigurationResolutionPtrInput `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage RecordingConfigurationThumbnailConfigurationStorageItemArrayInput `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds pulumi.IntPtrInput `pulumi:"targetIntervalSeconds"`
}

func (RecordingConfigurationThumbnailConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput)
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput).ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationThumbnailConfigurationPtrInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs, RecordingConfigurationThumbnailConfigurationPtr and RecordingConfigurationThumbnailConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationPtrInput` via:
//
//	        RecordingConfigurationThumbnailConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationThumbnailConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput
	ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput
}

type recordingConfigurationThumbnailConfigurationPtrType RecordingConfigurationThumbnailConfigurationArgs

func RecordingConfigurationThumbnailConfigurationPtr(v *RecordingConfigurationThumbnailConfigurationArgs) RecordingConfigurationThumbnailConfigurationPtrInput {
	return (*recordingConfigurationThumbnailConfigurationPtrType)(v)
}

func (*recordingConfigurationThumbnailConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfiguration {
		return &v
	}).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *int { return v.TargetIntervalSeconds }).(pulumi.IntPtrOutput)
}

type RecordingConfigurationThumbnailConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Elem() RecordingConfigurationThumbnailConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) RecordingConfigurationThumbnailConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationThumbnailConfiguration
		return ret
	}).(RecordingConfigurationThumbnailConfigurationOutput)
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		if v == nil {
			return nil
		}
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TargetIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

// Configuration object for individual participant recording, to attach to the new stage.
type StageAutoParticipantRecordingConfiguration struct {
	// HLS configuration object for individual participant recording.
	HlsConfiguration *StageAutoParticipantRecordingConfigurationHlsConfigurationProperties `pulumi:"hlsConfiguration"`
	// Types of media to be recorded. Default: AUDIO_VIDEO.
	MediaTypes []StageAutoParticipantRecordingConfigurationMediaTypesItem `pulumi:"mediaTypes"`
	// If a stage publisher disconnects and then reconnects within the specified interval, the multiple recordings will be considered a single recording and merged together. The default value is 0, which disables merging.
	RecordingReconnectWindowSeconds *int `pulumi:"recordingReconnectWindowSeconds"`
	// ARN of the StorageConfiguration resource to use for individual participant recording.
	StorageConfigurationArn string `pulumi:"storageConfigurationArn"`
	// A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.
	ThumbnailConfiguration *StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties `pulumi:"thumbnailConfiguration"`
}

// StageAutoParticipantRecordingConfigurationInput is an input type that accepts StageAutoParticipantRecordingConfigurationArgs and StageAutoParticipantRecordingConfigurationOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationInput` via:
//
//	StageAutoParticipantRecordingConfigurationArgs{...}
type StageAutoParticipantRecordingConfigurationInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationOutput() StageAutoParticipantRecordingConfigurationOutput
	ToStageAutoParticipantRecordingConfigurationOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationOutput
}

// Configuration object for individual participant recording, to attach to the new stage.
type StageAutoParticipantRecordingConfigurationArgs struct {
	// HLS configuration object for individual participant recording.
	HlsConfiguration StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrInput `pulumi:"hlsConfiguration"`
	// Types of media to be recorded. Default: AUDIO_VIDEO.
	MediaTypes StageAutoParticipantRecordingConfigurationMediaTypesItemArrayInput `pulumi:"mediaTypes"`
	// If a stage publisher disconnects and then reconnects within the specified interval, the multiple recordings will be considered a single recording and merged together. The default value is 0, which disables merging.
	RecordingReconnectWindowSeconds pulumi.IntPtrInput `pulumi:"recordingReconnectWindowSeconds"`
	// ARN of the StorageConfiguration resource to use for individual participant recording.
	StorageConfigurationArn pulumi.StringInput `pulumi:"storageConfigurationArn"`
	// A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.
	ThumbnailConfiguration StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrInput `pulumi:"thumbnailConfiguration"`
}

func (StageAutoParticipantRecordingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfiguration)(nil)).Elem()
}

func (i StageAutoParticipantRecordingConfigurationArgs) ToStageAutoParticipantRecordingConfigurationOutput() StageAutoParticipantRecordingConfigurationOutput {
	return i.ToStageAutoParticipantRecordingConfigurationOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationArgs) ToStageAutoParticipantRecordingConfigurationOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationOutput)
}

func (i StageAutoParticipantRecordingConfigurationArgs) ToStageAutoParticipantRecordingConfigurationPtrOutput() StageAutoParticipantRecordingConfigurationPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationArgs) ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationOutput).ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(ctx)
}

// StageAutoParticipantRecordingConfigurationPtrInput is an input type that accepts StageAutoParticipantRecordingConfigurationArgs, StageAutoParticipantRecordingConfigurationPtr and StageAutoParticipantRecordingConfigurationPtrOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationPtrInput` via:
//
//	        StageAutoParticipantRecordingConfigurationArgs{...}
//
//	or:
//
//	        nil
type StageAutoParticipantRecordingConfigurationPtrInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationPtrOutput() StageAutoParticipantRecordingConfigurationPtrOutput
	ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationPtrOutput
}

type stageAutoParticipantRecordingConfigurationPtrType StageAutoParticipantRecordingConfigurationArgs

func StageAutoParticipantRecordingConfigurationPtr(v *StageAutoParticipantRecordingConfigurationArgs) StageAutoParticipantRecordingConfigurationPtrInput {
	return (*stageAutoParticipantRecordingConfigurationPtrType)(v)
}

func (*stageAutoParticipantRecordingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfiguration)(nil)).Elem()
}

func (i *stageAutoParticipantRecordingConfigurationPtrType) ToStageAutoParticipantRecordingConfigurationPtrOutput() StageAutoParticipantRecordingConfigurationPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(context.Background())
}

func (i *stageAutoParticipantRecordingConfigurationPtrType) ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationPtrOutput)
}

// Configuration object for individual participant recording, to attach to the new stage.
type StageAutoParticipantRecordingConfigurationOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfiguration)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationOutput) ToStageAutoParticipantRecordingConfigurationOutput() StageAutoParticipantRecordingConfigurationOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationOutput) ToStageAutoParticipantRecordingConfigurationOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationOutput) ToStageAutoParticipantRecordingConfigurationPtrOutput() StageAutoParticipantRecordingConfigurationPtrOutput {
	return o.ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(context.Background())
}

func (o StageAutoParticipantRecordingConfigurationOutput) ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StageAutoParticipantRecordingConfiguration) *StageAutoParticipantRecordingConfiguration {
		return &v
	}).(StageAutoParticipantRecordingConfigurationPtrOutput)
}

// HLS configuration object for individual participant recording.
func (o StageAutoParticipantRecordingConfigurationOutput) HlsConfiguration() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfiguration) *StageAutoParticipantRecordingConfigurationHlsConfigurationProperties {
		return v.HlsConfiguration
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput)
}

// Types of media to be recorded. Default: AUDIO_VIDEO.
func (o StageAutoParticipantRecordingConfigurationOutput) MediaTypes() StageAutoParticipantRecordingConfigurationMediaTypesItemArrayOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfiguration) []StageAutoParticipantRecordingConfigurationMediaTypesItem {
		return v.MediaTypes
	}).(StageAutoParticipantRecordingConfigurationMediaTypesItemArrayOutput)
}

// If a stage publisher disconnects and then reconnects within the specified interval, the multiple recordings will be considered a single recording and merged together. The default value is 0, which disables merging.
func (o StageAutoParticipantRecordingConfigurationOutput) RecordingReconnectWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfiguration) *int { return v.RecordingReconnectWindowSeconds }).(pulumi.IntPtrOutput)
}

// ARN of the StorageConfiguration resource to use for individual participant recording.
func (o StageAutoParticipantRecordingConfigurationOutput) StorageConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfiguration) string { return v.StorageConfigurationArn }).(pulumi.StringOutput)
}

// A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.
func (o StageAutoParticipantRecordingConfigurationOutput) ThumbnailConfiguration() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfiguration) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties {
		return v.ThumbnailConfiguration
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput)
}

type StageAutoParticipantRecordingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfiguration)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationPtrOutput) ToStageAutoParticipantRecordingConfigurationPtrOutput() StageAutoParticipantRecordingConfigurationPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationPtrOutput) ToStageAutoParticipantRecordingConfigurationPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationPtrOutput) Elem() StageAutoParticipantRecordingConfigurationOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfiguration) StageAutoParticipantRecordingConfiguration {
		if v != nil {
			return *v
		}
		var ret StageAutoParticipantRecordingConfiguration
		return ret
	}).(StageAutoParticipantRecordingConfigurationOutput)
}

// HLS configuration object for individual participant recording.
func (o StageAutoParticipantRecordingConfigurationPtrOutput) HlsConfiguration() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfiguration) *StageAutoParticipantRecordingConfigurationHlsConfigurationProperties {
		if v == nil {
			return nil
		}
		return v.HlsConfiguration
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput)
}

// Types of media to be recorded. Default: AUDIO_VIDEO.
func (o StageAutoParticipantRecordingConfigurationPtrOutput) MediaTypes() StageAutoParticipantRecordingConfigurationMediaTypesItemArrayOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfiguration) []StageAutoParticipantRecordingConfigurationMediaTypesItem {
		if v == nil {
			return nil
		}
		return v.MediaTypes
	}).(StageAutoParticipantRecordingConfigurationMediaTypesItemArrayOutput)
}

// If a stage publisher disconnects and then reconnects within the specified interval, the multiple recordings will be considered a single recording and merged together. The default value is 0, which disables merging.
func (o StageAutoParticipantRecordingConfigurationPtrOutput) RecordingReconnectWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RecordingReconnectWindowSeconds
	}).(pulumi.IntPtrOutput)
}

// ARN of the StorageConfiguration resource to use for individual participant recording.
func (o StageAutoParticipantRecordingConfigurationPtrOutput) StorageConfigurationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.StorageConfigurationArn
	}).(pulumi.StringPtrOutput)
}

// A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.
func (o StageAutoParticipantRecordingConfigurationPtrOutput) ThumbnailConfiguration() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfiguration) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties {
		if v == nil {
			return nil
		}
		return v.ThumbnailConfiguration
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput)
}

// HLS configuration object for individual participant recording.
type StageAutoParticipantRecordingConfigurationHlsConfigurationProperties struct {
	// An object representing a configuration of participant HLS recordings for individual participant recording.
	ParticipantRecordingHlsConfiguration *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties `pulumi:"participantRecordingHlsConfiguration"`
}

// StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesInput is an input type that accepts StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs and StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesInput` via:
//
//	StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs{...}
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput
	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput
}

// HLS configuration object for individual participant recording.
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs struct {
	// An object representing a configuration of participant HLS recordings for individual participant recording.
	ParticipantRecordingHlsConfiguration StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrInput `pulumi:"participantRecordingHlsConfiguration"`
}

func (StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationProperties)(nil)).Elem()
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput {
	return i.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput)
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput).ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(ctx)
}

// StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrInput is an input type that accepts StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs, StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtr and StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrInput` via:
//
//	        StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs{...}
//
//	or:
//
//	        nil
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput
	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput
}

type stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrType StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs

func StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtr(v *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrInput {
	return (*stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrType)(v)
}

func (*stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationHlsConfigurationProperties)(nil)).Elem()
}

func (i *stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput)
}

// HLS configuration object for individual participant recording.
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return o.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StageAutoParticipantRecordingConfigurationHlsConfigurationProperties) *StageAutoParticipantRecordingConfigurationHlsConfigurationProperties {
		return &v
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput)
}

// An object representing a configuration of participant HLS recordings for individual participant recording.
func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput) ParticipantRecordingHlsConfiguration() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfigurationHlsConfigurationProperties) *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties {
		return v.ParticipantRecordingHlsConfiguration
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput)
}

type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationHlsConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput) Elem() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationHlsConfigurationProperties) StageAutoParticipantRecordingConfigurationHlsConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret StageAutoParticipantRecordingConfigurationHlsConfigurationProperties
		return ret
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput)
}

// An object representing a configuration of participant HLS recordings for individual participant recording.
func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput) ParticipantRecordingHlsConfiguration() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationHlsConfigurationProperties) *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties {
		if v == nil {
			return nil
		}
		return v.ParticipantRecordingHlsConfiguration
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput)
}

// An object representing a configuration of participant HLS recordings for individual participant recording.
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties struct {
	// Defines the target duration for recorded segments generated when recording a stage participant. Segments may have durations longer than the specified value when needed to ensure each segment begins with a keyframe. Default: 6.
	TargetSegmentDurationSeconds *int `pulumi:"targetSegmentDurationSeconds"`
}

// StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesInput is an input type that accepts StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs and StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesInput` via:
//
//	StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs{...}
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput
	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput
}

// An object representing a configuration of participant HLS recordings for individual participant recording.
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs struct {
	// Defines the target duration for recorded segments generated when recording a stage participant. Segments may have durations longer than the specified value when needed to ensure each segment begins with a keyframe. Default: 6.
	TargetSegmentDurationSeconds pulumi.IntPtrInput `pulumi:"targetSegmentDurationSeconds"`
}

func (StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties)(nil)).Elem()
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput {
	return i.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput)
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput).ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(ctx)
}

// StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrInput is an input type that accepts StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs, StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtr and StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrInput` via:
//
//	        StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs{...}
//
//	or:
//
//	        nil
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput
	ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput
}

type stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrType StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs

func StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtr(v *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrInput {
	return (*stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrType)(v)
}

func (*stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties)(nil)).Elem()
}

func (i *stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *stageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput)
}

// An object representing a configuration of participant HLS recordings for individual participant recording.
type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return o.ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties) *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties {
		return &v
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput)
}

// Defines the target duration for recorded segments generated when recording a stage participant. Segments may have durations longer than the specified value when needed to ensure each segment begins with a keyframe. Default: 6.
func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput) TargetSegmentDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties) *int {
		return v.TargetSegmentDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput) Elem() StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties) StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties
		return ret
	}).(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput)
}

// Defines the target duration for recorded segments generated when recording a stage participant. Segments may have durations longer than the specified value when needed to ensure each segment begins with a keyframe. Default: 6.
func (o StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput) TargetSegmentDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationProperties) *int {
		if v == nil {
			return nil
		}
		return v.TargetSegmentDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties struct {
	// An object representing a configuration of thumbnails for recorded video from an individual participant.
	ParticipantThumbnailConfiguration *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties `pulumi:"participantThumbnailConfiguration"`
}

// StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesInput is an input type that accepts StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs and StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesInput` via:
//
//	StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs{...}
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput
	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput
}

// A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs struct {
	// An object representing a configuration of thumbnails for recorded video from an individual participant.
	ParticipantThumbnailConfiguration StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrInput `pulumi:"participantThumbnailConfiguration"`
}

func (StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties)(nil)).Elem()
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput {
	return i.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput)
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput).ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(ctx)
}

// StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrInput is an input type that accepts StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs, StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtr and StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrInput` via:
//
//	        StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs{...}
//
//	or:
//
//	        nil
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput
	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput
}

type stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrType StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs

func StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtr(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrInput {
	return (*stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrType)(v)
}

func (*stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties)(nil)).Elem()
}

func (i *stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput)
}

// A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return o.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties {
		return &v
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput)
}

// An object representing a configuration of thumbnails for recorded video from an individual participant.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput) ParticipantThumbnailConfiguration() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties {
		return v.ParticipantThumbnailConfiguration
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput)
}

type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput) Elem() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties) StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties
		return ret
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput)
}

// An object representing a configuration of thumbnails for recorded video from an individual participant.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput) ParticipantThumbnailConfiguration() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationProperties) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties {
		if v == nil {
			return nil
		}
		return v.ParticipantThumbnailConfiguration
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput)
}

// An object representing a configuration of thumbnails for recorded video from an individual participant.
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties struct {
	// Thumbnail recording mode. Default: DISABLED.
	RecordingMode *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingMode `pulumi:"recordingMode"`
	// Indicates the format in which thumbnails are recorded. SEQUENTIAL records all generated thumbnails in a serial manner, to the media/thumbnails/high directory. LATEST saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg and overwrites it at the interval specified by targetIntervalSeconds. You can enable both SEQUENTIAL and LATEST. Default: SEQUENTIAL.
	Storage []StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItem `pulumi:"storage"`
	// The targeted thumbnail-generation interval in seconds. This is configurable only if recordingMode is INTERVAL. Default: 60.
	TargetIntervalSeconds *int `pulumi:"targetIntervalSeconds"`
}

// StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesInput is an input type that accepts StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs and StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesInput` via:
//
//	StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs{...}
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput
	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput
}

// An object representing a configuration of thumbnails for recorded video from an individual participant.
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs struct {
	// Thumbnail recording mode. Default: DISABLED.
	RecordingMode StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingModePtrInput `pulumi:"recordingMode"`
	// Indicates the format in which thumbnails are recorded. SEQUENTIAL records all generated thumbnails in a serial manner, to the media/thumbnails/high directory. LATEST saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg and overwrites it at the interval specified by targetIntervalSeconds. You can enable both SEQUENTIAL and LATEST. Default: SEQUENTIAL.
	Storage StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItemArrayInput `pulumi:"storage"`
	// The targeted thumbnail-generation interval in seconds. This is configurable only if recordingMode is INTERVAL. Default: 60.
	TargetIntervalSeconds pulumi.IntPtrInput `pulumi:"targetIntervalSeconds"`
}

func (StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties)(nil)).Elem()
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput {
	return i.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput)
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput).ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(ctx)
}

// StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrInput is an input type that accepts StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs, StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtr and StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrInput` via:
//
//	        StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs{...}
//
//	or:
//
//	        nil
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput
	ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput
}

type stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrType StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs

func StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtr(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrInput {
	return (*stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrType)(v)
}

func (*stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties)(nil)).Elem()
}

func (i *stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return i.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *stageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrType) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput)
}

// An object representing a configuration of thumbnails for recorded video from an individual participant.
type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return o.ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties {
		return &v
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput)
}

// Thumbnail recording mode. Default: DISABLED.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) RecordingMode() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingModePtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingMode {
		return v.RecordingMode
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingModePtrOutput)
}

// Indicates the format in which thumbnails are recorded. SEQUENTIAL records all generated thumbnails in a serial manner, to the media/thumbnails/high directory. LATEST saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg and overwrites it at the interval specified by targetIntervalSeconds. You can enable both SEQUENTIAL and LATEST. Default: SEQUENTIAL.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) Storage() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItemArrayOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) []StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItem {
		return v.Storage
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItemArrayOutput)
}

// The targeted thumbnail-generation interval in seconds. This is configurable only if recordingMode is INTERVAL. Default: 60.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) *int {
		return v.TargetIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

type StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties)(nil)).Elem()
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput) ToStageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutputWithContext(ctx context.Context) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput {
	return o
}

func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput) Elem() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties
		return ret
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput)
}

// Thumbnail recording mode. Default: DISABLED.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput) RecordingMode() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingModePtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingMode {
		if v == nil {
			return nil
		}
		return v.RecordingMode
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesRecordingModePtrOutput)
}

// Indicates the format in which thumbnails are recorded. SEQUENTIAL records all generated thumbnails in a serial manner, to the media/thumbnails/high directory. LATEST saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg and overwrites it at the interval specified by targetIntervalSeconds. You can enable both SEQUENTIAL and LATEST. Default: SEQUENTIAL.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput) Storage() StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItemArrayOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) []StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItem {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesStorageItemArrayOutput)
}

// The targeted thumbnail-generation interval in seconds. This is configurable only if recordingMode is INTERVAL. Default: 60.
func (o StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationProperties) *int {
		if v == nil {
			return nil
		}
		return v.TargetIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

type StageTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A complex type that describes an S3 location where recorded videos will be stored.
type StorageConfigurationS3StorageConfiguration struct {
	// Location (S3 bucket name) where recorded videos will be stored. Note that the StorageConfiguration and S3 bucket must be in the same region as the Composition.
	BucketName string `pulumi:"bucketName"`
}

// StorageConfigurationS3StorageConfigurationInput is an input type that accepts StorageConfigurationS3StorageConfigurationArgs and StorageConfigurationS3StorageConfigurationOutput values.
// You can construct a concrete instance of `StorageConfigurationS3StorageConfigurationInput` via:
//
//	StorageConfigurationS3StorageConfigurationArgs{...}
type StorageConfigurationS3StorageConfigurationInput interface {
	pulumi.Input

	ToStorageConfigurationS3StorageConfigurationOutput() StorageConfigurationS3StorageConfigurationOutput
	ToStorageConfigurationS3StorageConfigurationOutputWithContext(context.Context) StorageConfigurationS3StorageConfigurationOutput
}

// A complex type that describes an S3 location where recorded videos will be stored.
type StorageConfigurationS3StorageConfigurationArgs struct {
	// Location (S3 bucket name) where recorded videos will be stored. Note that the StorageConfiguration and S3 bucket must be in the same region as the Composition.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (StorageConfigurationS3StorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageConfigurationS3StorageConfiguration)(nil)).Elem()
}

func (i StorageConfigurationS3StorageConfigurationArgs) ToStorageConfigurationS3StorageConfigurationOutput() StorageConfigurationS3StorageConfigurationOutput {
	return i.ToStorageConfigurationS3StorageConfigurationOutputWithContext(context.Background())
}

func (i StorageConfigurationS3StorageConfigurationArgs) ToStorageConfigurationS3StorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationS3StorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageConfigurationS3StorageConfigurationOutput)
}

// A complex type that describes an S3 location where recorded videos will be stored.
type StorageConfigurationS3StorageConfigurationOutput struct{ *pulumi.OutputState }

func (StorageConfigurationS3StorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageConfigurationS3StorageConfiguration)(nil)).Elem()
}

func (o StorageConfigurationS3StorageConfigurationOutput) ToStorageConfigurationS3StorageConfigurationOutput() StorageConfigurationS3StorageConfigurationOutput {
	return o
}

func (o StorageConfigurationS3StorageConfigurationOutput) ToStorageConfigurationS3StorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationS3StorageConfigurationOutput {
	return o
}

// Location (S3 bucket name) where recorded videos will be stored. Note that the StorageConfiguration and S3 bucket must be in the same region as the Composition.
func (o StorageConfigurationS3StorageConfigurationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v StorageConfigurationS3StorageConfiguration) string { return v.BucketName }).(pulumi.StringOutput)
}

type StorageConfigurationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type StreamKeyTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
type VideoProperties struct {
	// Bitrate for generated output, in bps. Default: 2500000.
	Bitrate *int `pulumi:"bitrate"`
	// Video frame rate, in fps. Default: 30.
	Framerate *float64 `pulumi:"framerate"`
	// Video-resolution height. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
	Height *int `pulumi:"height"`
	// Video-resolution width. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
	Width *int `pulumi:"width"`
}

// VideoPropertiesInput is an input type that accepts VideoPropertiesArgs and VideoPropertiesOutput values.
// You can construct a concrete instance of `VideoPropertiesInput` via:
//
//	VideoPropertiesArgs{...}
type VideoPropertiesInput interface {
	pulumi.Input

	ToVideoPropertiesOutput() VideoPropertiesOutput
	ToVideoPropertiesOutputWithContext(context.Context) VideoPropertiesOutput
}

// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
type VideoPropertiesArgs struct {
	// Bitrate for generated output, in bps. Default: 2500000.
	Bitrate pulumi.IntPtrInput `pulumi:"bitrate"`
	// Video frame rate, in fps. Default: 30.
	Framerate pulumi.Float64PtrInput `pulumi:"framerate"`
	// Video-resolution height. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// Video-resolution width. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (VideoPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoProperties)(nil)).Elem()
}

func (i VideoPropertiesArgs) ToVideoPropertiesOutput() VideoPropertiesOutput {
	return i.ToVideoPropertiesOutputWithContext(context.Background())
}

func (i VideoPropertiesArgs) ToVideoPropertiesOutputWithContext(ctx context.Context) VideoPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoPropertiesOutput)
}

func (i VideoPropertiesArgs) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return i.ToVideoPropertiesPtrOutputWithContext(context.Background())
}

func (i VideoPropertiesArgs) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoPropertiesOutput).ToVideoPropertiesPtrOutputWithContext(ctx)
}

// VideoPropertiesPtrInput is an input type that accepts VideoPropertiesArgs, VideoPropertiesPtr and VideoPropertiesPtrOutput values.
// You can construct a concrete instance of `VideoPropertiesPtrInput` via:
//
//	        VideoPropertiesArgs{...}
//
//	or:
//
//	        nil
type VideoPropertiesPtrInput interface {
	pulumi.Input

	ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput
	ToVideoPropertiesPtrOutputWithContext(context.Context) VideoPropertiesPtrOutput
}

type videoPropertiesPtrType VideoPropertiesArgs

func VideoPropertiesPtr(v *VideoPropertiesArgs) VideoPropertiesPtrInput {
	return (*videoPropertiesPtrType)(v)
}

func (*videoPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoProperties)(nil)).Elem()
}

func (i *videoPropertiesPtrType) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return i.ToVideoPropertiesPtrOutputWithContext(context.Background())
}

func (i *videoPropertiesPtrType) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoPropertiesPtrOutput)
}

// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
type VideoPropertiesOutput struct{ *pulumi.OutputState }

func (VideoPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoProperties)(nil)).Elem()
}

func (o VideoPropertiesOutput) ToVideoPropertiesOutput() VideoPropertiesOutput {
	return o
}

func (o VideoPropertiesOutput) ToVideoPropertiesOutputWithContext(ctx context.Context) VideoPropertiesOutput {
	return o
}

func (o VideoPropertiesOutput) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return o.ToVideoPropertiesPtrOutputWithContext(context.Background())
}

func (o VideoPropertiesOutput) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VideoProperties) *VideoProperties {
		return &v
	}).(VideoPropertiesPtrOutput)
}

// Bitrate for generated output, in bps. Default: 2500000.
func (o VideoPropertiesOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoProperties) *int { return v.Bitrate }).(pulumi.IntPtrOutput)
}

// Video frame rate, in fps. Default: 30.
func (o VideoPropertiesOutput) Framerate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VideoProperties) *float64 { return v.Framerate }).(pulumi.Float64PtrOutput)
}

// Video-resolution height. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
func (o VideoPropertiesOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoProperties) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// Video-resolution width. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
func (o VideoPropertiesOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoProperties) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type VideoPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VideoPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoProperties)(nil)).Elem()
}

func (o VideoPropertiesPtrOutput) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return o
}

func (o VideoPropertiesPtrOutput) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return o
}

func (o VideoPropertiesPtrOutput) Elem() VideoPropertiesOutput {
	return o.ApplyT(func(v *VideoProperties) VideoProperties {
		if v != nil {
			return *v
		}
		var ret VideoProperties
		return ret
	}).(VideoPropertiesOutput)
}

// Bitrate for generated output, in bps. Default: 2500000.
func (o VideoPropertiesPtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoProperties) *int {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// Video frame rate, in fps. Default: 30.
func (o VideoPropertiesPtrOutput) Framerate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VideoProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.Framerate
	}).(pulumi.Float64PtrOutput)
}

// Video-resolution height. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
func (o VideoPropertiesPtrOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoProperties) *int {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.IntPtrOutput)
}

// Video-resolution width. This must be an even number. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
func (o VideoPropertiesPtrOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoProperties) *int {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelMultitrackInputConfigurationInput)(nil)).Elem(), ChannelMultitrackInputConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelMultitrackInputConfigurationPtrInput)(nil)).Elem(), ChannelMultitrackInputConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationDestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationPtrInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrInput)(nil)).Elem(), StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageConfigurationS3StorageConfigurationInput)(nil)).Elem(), StorageConfigurationS3StorageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoPropertiesInput)(nil)).Elem(), VideoPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoPropertiesPtrInput)(nil)).Elem(), VideoPropertiesArgs{})
	pulumi.RegisterOutputType(ChannelMultitrackInputConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelMultitrackInputConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationHlsConfigurationPropertiesParticipantRecordingHlsConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(StageAutoParticipantRecordingConfigurationThumbnailConfigurationPropertiesParticipantThumbnailConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StorageConfigurationS3StorageConfigurationOutput{})
	pulumi.RegisterOutputType(VideoPropertiesOutput{})
	pulumi.RegisterOutputType(VideoPropertiesPtrOutput{})
}
