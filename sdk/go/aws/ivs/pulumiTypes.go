// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ChannelTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type EncoderConfigurationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type PlaybackKeyPairTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type PlaybackRestrictionPolicyTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfiguration struct {
	// The S3DestinationConfiguration property type describes an S3 location where recorded videos will be stored.
	S3 *RecordingConfigurationS3DestinationConfiguration `pulumi:"s3"`
}

// RecordingConfigurationDestinationConfigurationInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs and RecordingConfigurationDestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationInput` via:
//
//	RecordingConfigurationDestinationConfigurationArgs{...}
type RecordingConfigurationDestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput
	ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationOutput
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationArgs struct {
	// The S3DestinationConfiguration property type describes an S3 location where recorded videos will be stored.
	S3 RecordingConfigurationS3DestinationConfigurationPtrInput `pulumi:"s3"`
}

func (RecordingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput)
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return o
}

// The S3DestinationConfiguration property type describes an S3 location where recorded videos will be stored.
func (o RecordingConfigurationDestinationConfigurationOutput) S3() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationDestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return v.S3
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfiguration struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection *RecordingConfigurationRenditionConfigurationRenditionSelection `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions []RecordingConfigurationRenditionConfigurationRenditionsItem `pulumi:"renditions"`
}

// RecordingConfigurationRenditionConfigurationInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs and RecordingConfigurationRenditionConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationInput` via:
//
//	RecordingConfigurationRenditionConfigurationArgs{...}
type RecordingConfigurationRenditionConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput
	ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationOutput
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationArgs struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection RecordingConfigurationRenditionConfigurationRenditionSelectionPtrInput `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions RecordingConfigurationRenditionConfigurationRenditionsItemArrayInput `pulumi:"renditions"`
}

func (RecordingConfigurationRenditionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return i.ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput)
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput).ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationRenditionConfigurationPtrInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs, RecordingConfigurationRenditionConfigurationPtr and RecordingConfigurationRenditionConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationPtrInput` via:
//
//	        RecordingConfigurationRenditionConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationRenditionConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput
	ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationPtrOutput
}

type recordingConfigurationRenditionConfigurationPtrType RecordingConfigurationRenditionConfigurationArgs

func RecordingConfigurationRenditionConfigurationPtr(v *RecordingConfigurationRenditionConfigurationArgs) RecordingConfigurationRenditionConfigurationPtrInput {
	return (*recordingConfigurationRenditionConfigurationPtrType)(v)
}

func (*recordingConfigurationRenditionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfiguration {
		return &v
	}).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

type RecordingConfigurationRenditionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) Elem() RecordingConfigurationRenditionConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) RecordingConfigurationRenditionConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationRenditionConfiguration
		return ret
	}).(RecordingConfigurationRenditionConfigurationOutput)
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		if v == nil {
			return nil
		}
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		if v == nil {
			return nil
		}
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfiguration struct {
	// Location (S3 bucket name) where recorded videos will be stored.
	BucketName string `pulumi:"bucketName"`
}

// RecordingConfigurationS3DestinationConfigurationInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs and RecordingConfigurationS3DestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationInput` via:
//
//	RecordingConfigurationS3DestinationConfigurationArgs{...}
type RecordingConfigurationS3DestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput
	ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationOutput
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationArgs struct {
	// Location (S3 bucket name) where recorded videos will be stored.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (RecordingConfigurationS3DestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput).ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationS3DestinationConfigurationPtrInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs, RecordingConfigurationS3DestinationConfigurationPtr and RecordingConfigurationS3DestinationConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationPtrInput` via:
//
//	        RecordingConfigurationS3DestinationConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationS3DestinationConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput
	ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput
}

type recordingConfigurationS3DestinationConfigurationPtrType RecordingConfigurationS3DestinationConfigurationArgs

func RecordingConfigurationS3DestinationConfigurationPtr(v *RecordingConfigurationS3DestinationConfigurationArgs) RecordingConfigurationS3DestinationConfigurationPtrInput {
	return (*recordingConfigurationS3DestinationConfigurationPtrType)(v)
}

func (*recordingConfigurationS3DestinationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationS3DestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return &v
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Location (S3 bucket name) where recorded videos will be stored.
func (o RecordingConfigurationS3DestinationConfigurationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationS3DestinationConfiguration) string { return v.BucketName }).(pulumi.StringOutput)
}

type RecordingConfigurationS3DestinationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) Elem() RecordingConfigurationS3DestinationConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) RecordingConfigurationS3DestinationConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationS3DestinationConfiguration
		return ret
	}).(RecordingConfigurationS3DestinationConfigurationOutput)
}

// Location (S3 bucket name) where recorded videos will be stored.
func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

type RecordingConfigurationTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfiguration struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode *RecordingConfigurationThumbnailConfigurationRecordingMode `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution *RecordingConfigurationThumbnailConfigurationResolution `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage []RecordingConfigurationThumbnailConfigurationStorageItem `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds *int `pulumi:"targetIntervalSeconds"`
}

// RecordingConfigurationThumbnailConfigurationInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs and RecordingConfigurationThumbnailConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationInput` via:
//
//	RecordingConfigurationThumbnailConfigurationArgs{...}
type RecordingConfigurationThumbnailConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput
	ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationOutput
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationArgs struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode RecordingConfigurationThumbnailConfigurationRecordingModePtrInput `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution RecordingConfigurationThumbnailConfigurationResolutionPtrInput `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage RecordingConfigurationThumbnailConfigurationStorageItemArrayInput `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds pulumi.IntPtrInput `pulumi:"targetIntervalSeconds"`
}

func (RecordingConfigurationThumbnailConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput)
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput).ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationThumbnailConfigurationPtrInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs, RecordingConfigurationThumbnailConfigurationPtr and RecordingConfigurationThumbnailConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationPtrInput` via:
//
//	        RecordingConfigurationThumbnailConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationThumbnailConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput
	ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput
}

type recordingConfigurationThumbnailConfigurationPtrType RecordingConfigurationThumbnailConfigurationArgs

func RecordingConfigurationThumbnailConfigurationPtr(v *RecordingConfigurationThumbnailConfigurationArgs) RecordingConfigurationThumbnailConfigurationPtrInput {
	return (*recordingConfigurationThumbnailConfigurationPtrType)(v)
}

func (*recordingConfigurationThumbnailConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfiguration {
		return &v
	}).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *int { return v.TargetIntervalSeconds }).(pulumi.IntPtrOutput)
}

type RecordingConfigurationThumbnailConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Elem() RecordingConfigurationThumbnailConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) RecordingConfigurationThumbnailConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationThumbnailConfiguration
		return ret
	}).(RecordingConfigurationThumbnailConfigurationOutput)
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		if v == nil {
			return nil
		}
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TargetIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

type StageTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

// A complex type that describes an S3 location where recorded videos will be stored.
type StorageConfigurationS3StorageConfiguration struct {
	// Location (S3 bucket name) where recorded videos will be stored. Note that the StorageConfiguration and S3 bucket must be in the same region as the Composition.
	BucketName string `pulumi:"bucketName"`
}

// StorageConfigurationS3StorageConfigurationInput is an input type that accepts StorageConfigurationS3StorageConfigurationArgs and StorageConfigurationS3StorageConfigurationOutput values.
// You can construct a concrete instance of `StorageConfigurationS3StorageConfigurationInput` via:
//
//	StorageConfigurationS3StorageConfigurationArgs{...}
type StorageConfigurationS3StorageConfigurationInput interface {
	pulumi.Input

	ToStorageConfigurationS3StorageConfigurationOutput() StorageConfigurationS3StorageConfigurationOutput
	ToStorageConfigurationS3StorageConfigurationOutputWithContext(context.Context) StorageConfigurationS3StorageConfigurationOutput
}

// A complex type that describes an S3 location where recorded videos will be stored.
type StorageConfigurationS3StorageConfigurationArgs struct {
	// Location (S3 bucket name) where recorded videos will be stored. Note that the StorageConfiguration and S3 bucket must be in the same region as the Composition.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (StorageConfigurationS3StorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageConfigurationS3StorageConfiguration)(nil)).Elem()
}

func (i StorageConfigurationS3StorageConfigurationArgs) ToStorageConfigurationS3StorageConfigurationOutput() StorageConfigurationS3StorageConfigurationOutput {
	return i.ToStorageConfigurationS3StorageConfigurationOutputWithContext(context.Background())
}

func (i StorageConfigurationS3StorageConfigurationArgs) ToStorageConfigurationS3StorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationS3StorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageConfigurationS3StorageConfigurationOutput)
}

// A complex type that describes an S3 location where recorded videos will be stored.
type StorageConfigurationS3StorageConfigurationOutput struct{ *pulumi.OutputState }

func (StorageConfigurationS3StorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageConfigurationS3StorageConfiguration)(nil)).Elem()
}

func (o StorageConfigurationS3StorageConfigurationOutput) ToStorageConfigurationS3StorageConfigurationOutput() StorageConfigurationS3StorageConfigurationOutput {
	return o
}

func (o StorageConfigurationS3StorageConfigurationOutput) ToStorageConfigurationS3StorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationS3StorageConfigurationOutput {
	return o
}

// Location (S3 bucket name) where recorded videos will be stored. Note that the StorageConfiguration and S3 bucket must be in the same region as the Composition.
func (o StorageConfigurationS3StorageConfigurationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v StorageConfigurationS3StorageConfiguration) string { return v.BucketName }).(pulumi.StringOutput)
}

type StorageConfigurationTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

type StreamKeyTag struct {
	// One part of a key-value pair that makes up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key string `pulumi:"key"`
	// The optional part of a key-value pair that makes up a tag. A `value` acts as a descriptor within a tag category (key).
	Value string `pulumi:"value"`
}

// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
type VideoProperties struct {
	// Bitrate for generated output, in bps. Default: 2500000.
	Bitrate *int `pulumi:"bitrate"`
	// Video frame rate, in fps. Default: 30.
	Framerate *float64 `pulumi:"framerate"`
	// Video-resolution height. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
	Height *int `pulumi:"height"`
	// Video-resolution width. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
	Width *int `pulumi:"width"`
}

// VideoPropertiesInput is an input type that accepts VideoPropertiesArgs and VideoPropertiesOutput values.
// You can construct a concrete instance of `VideoPropertiesInput` via:
//
//	VideoPropertiesArgs{...}
type VideoPropertiesInput interface {
	pulumi.Input

	ToVideoPropertiesOutput() VideoPropertiesOutput
	ToVideoPropertiesOutputWithContext(context.Context) VideoPropertiesOutput
}

// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
type VideoPropertiesArgs struct {
	// Bitrate for generated output, in bps. Default: 2500000.
	Bitrate pulumi.IntPtrInput `pulumi:"bitrate"`
	// Video frame rate, in fps. Default: 30.
	Framerate pulumi.Float64PtrInput `pulumi:"framerate"`
	// Video-resolution height. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// Video-resolution width. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (VideoPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoProperties)(nil)).Elem()
}

func (i VideoPropertiesArgs) ToVideoPropertiesOutput() VideoPropertiesOutput {
	return i.ToVideoPropertiesOutputWithContext(context.Background())
}

func (i VideoPropertiesArgs) ToVideoPropertiesOutputWithContext(ctx context.Context) VideoPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoPropertiesOutput)
}

func (i VideoPropertiesArgs) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return i.ToVideoPropertiesPtrOutputWithContext(context.Background())
}

func (i VideoPropertiesArgs) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoPropertiesOutput).ToVideoPropertiesPtrOutputWithContext(ctx)
}

// VideoPropertiesPtrInput is an input type that accepts VideoPropertiesArgs, VideoPropertiesPtr and VideoPropertiesPtrOutput values.
// You can construct a concrete instance of `VideoPropertiesPtrInput` via:
//
//	        VideoPropertiesArgs{...}
//
//	or:
//
//	        nil
type VideoPropertiesPtrInput interface {
	pulumi.Input

	ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput
	ToVideoPropertiesPtrOutputWithContext(context.Context) VideoPropertiesPtrOutput
}

type videoPropertiesPtrType VideoPropertiesArgs

func VideoPropertiesPtr(v *VideoPropertiesArgs) VideoPropertiesPtrInput {
	return (*videoPropertiesPtrType)(v)
}

func (*videoPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoProperties)(nil)).Elem()
}

func (i *videoPropertiesPtrType) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return i.ToVideoPropertiesPtrOutputWithContext(context.Background())
}

func (i *videoPropertiesPtrType) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoPropertiesPtrOutput)
}

// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
type VideoPropertiesOutput struct{ *pulumi.OutputState }

func (VideoPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoProperties)(nil)).Elem()
}

func (o VideoPropertiesOutput) ToVideoPropertiesOutput() VideoPropertiesOutput {
	return o
}

func (o VideoPropertiesOutput) ToVideoPropertiesOutputWithContext(ctx context.Context) VideoPropertiesOutput {
	return o
}

func (o VideoPropertiesOutput) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return o.ToVideoPropertiesPtrOutputWithContext(context.Background())
}

func (o VideoPropertiesOutput) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VideoProperties) *VideoProperties {
		return &v
	}).(VideoPropertiesPtrOutput)
}

// Bitrate for generated output, in bps. Default: 2500000.
func (o VideoPropertiesOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoProperties) *int { return v.Bitrate }).(pulumi.IntPtrOutput)
}

// Video frame rate, in fps. Default: 30.
func (o VideoPropertiesOutput) Framerate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VideoProperties) *float64 { return v.Framerate }).(pulumi.Float64PtrOutput)
}

// Video-resolution height. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
func (o VideoPropertiesOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoProperties) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// Video-resolution width. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
func (o VideoPropertiesOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoProperties) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type VideoPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VideoPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoProperties)(nil)).Elem()
}

func (o VideoPropertiesPtrOutput) ToVideoPropertiesPtrOutput() VideoPropertiesPtrOutput {
	return o
}

func (o VideoPropertiesPtrOutput) ToVideoPropertiesPtrOutputWithContext(ctx context.Context) VideoPropertiesPtrOutput {
	return o
}

func (o VideoPropertiesPtrOutput) Elem() VideoPropertiesOutput {
	return o.ApplyT(func(v *VideoProperties) VideoProperties {
		if v != nil {
			return *v
		}
		var ret VideoProperties
		return ret
	}).(VideoPropertiesOutput)
}

// Bitrate for generated output, in bps. Default: 2500000.
func (o VideoPropertiesPtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoProperties) *int {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// Video frame rate, in fps. Default: 30.
func (o VideoPropertiesPtrOutput) Framerate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VideoProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.Framerate
	}).(pulumi.Float64PtrOutput)
}

// Video-resolution height. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
func (o VideoPropertiesPtrOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoProperties) *int {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.IntPtrOutput)
}

// Video-resolution width. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
func (o VideoPropertiesPtrOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoProperties) *int {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationDestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageConfigurationS3StorageConfigurationInput)(nil)).Elem(), StorageConfigurationS3StorageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoPropertiesInput)(nil)).Elem(), VideoPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoPropertiesPtrInput)(nil)).Elem(), VideoPropertiesArgs{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StorageConfigurationS3StorageConfigurationOutput{})
	pulumi.RegisterOutputType(VideoPropertiesOutput{})
	pulumi.RegisterOutputType(VideoPropertiesPtrOutput{})
}
