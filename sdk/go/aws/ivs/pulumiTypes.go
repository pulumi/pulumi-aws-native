// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ChannelTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type PlaybackKeyPairTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfiguration struct {
	S3 *RecordingConfigurationS3DestinationConfiguration `pulumi:"s3"`
}

// RecordingConfigurationDestinationConfigurationInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs and RecordingConfigurationDestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationInput` via:
//
//	RecordingConfigurationDestinationConfigurationArgs{...}
type RecordingConfigurationDestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput
	ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationOutput
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationArgs struct {
	S3 RecordingConfigurationS3DestinationConfigurationPtrInput `pulumi:"s3"`
}

func (RecordingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput)
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) S3() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationDestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return v.S3
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfiguration struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection *RecordingConfigurationRenditionConfigurationRenditionSelection `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions []RecordingConfigurationRenditionConfigurationRenditionsItem `pulumi:"renditions"`
}

// RecordingConfigurationRenditionConfigurationInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs and RecordingConfigurationRenditionConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationInput` via:
//
//	RecordingConfigurationRenditionConfigurationArgs{...}
type RecordingConfigurationRenditionConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput
	ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationOutput
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationArgs struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection RecordingConfigurationRenditionConfigurationRenditionSelectionPtrInput `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions RecordingConfigurationRenditionConfigurationRenditionsItemArrayInput `pulumi:"renditions"`
}

func (RecordingConfigurationRenditionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return i.ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput)
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput).ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationRenditionConfigurationPtrInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs, RecordingConfigurationRenditionConfigurationPtr and RecordingConfigurationRenditionConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationPtrInput` via:
//
//	        RecordingConfigurationRenditionConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationRenditionConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput
	ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationPtrOutput
}

type recordingConfigurationRenditionConfigurationPtrType RecordingConfigurationRenditionConfigurationArgs

func RecordingConfigurationRenditionConfigurationPtr(v *RecordingConfigurationRenditionConfigurationArgs) RecordingConfigurationRenditionConfigurationPtrInput {
	return (*recordingConfigurationRenditionConfigurationPtrType)(v)
}

func (*recordingConfigurationRenditionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfiguration {
		return &v
	}).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

type RecordingConfigurationRenditionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) Elem() RecordingConfigurationRenditionConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) RecordingConfigurationRenditionConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationRenditionConfiguration
		return ret
	}).(RecordingConfigurationRenditionConfigurationOutput)
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		if v == nil {
			return nil
		}
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		if v == nil {
			return nil
		}
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfiguration struct {
	BucketName string `pulumi:"bucketName"`
}

// RecordingConfigurationS3DestinationConfigurationInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs and RecordingConfigurationS3DestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationInput` via:
//
//	RecordingConfigurationS3DestinationConfigurationArgs{...}
type RecordingConfigurationS3DestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput
	ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationOutput
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationArgs struct {
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (RecordingConfigurationS3DestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput).ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationS3DestinationConfigurationPtrInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs, RecordingConfigurationS3DestinationConfigurationPtr and RecordingConfigurationS3DestinationConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationPtrInput` via:
//
//	        RecordingConfigurationS3DestinationConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationS3DestinationConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput
	ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput
}

type recordingConfigurationS3DestinationConfigurationPtrType RecordingConfigurationS3DestinationConfigurationArgs

func RecordingConfigurationS3DestinationConfigurationPtr(v *RecordingConfigurationS3DestinationConfigurationArgs) RecordingConfigurationS3DestinationConfigurationPtrInput {
	return (*recordingConfigurationS3DestinationConfigurationPtrType)(v)
}

func (*recordingConfigurationS3DestinationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationS3DestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return &v
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationS3DestinationConfiguration) string { return v.BucketName }).(pulumi.StringOutput)
}

type RecordingConfigurationS3DestinationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) Elem() RecordingConfigurationS3DestinationConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) RecordingConfigurationS3DestinationConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationS3DestinationConfiguration
		return ret
	}).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

type RecordingConfigurationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfiguration struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode *RecordingConfigurationThumbnailConfigurationRecordingMode `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution *RecordingConfigurationThumbnailConfigurationResolution `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage []RecordingConfigurationThumbnailConfigurationStorageItem `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds *int `pulumi:"targetIntervalSeconds"`
}

// RecordingConfigurationThumbnailConfigurationInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs and RecordingConfigurationThumbnailConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationInput` via:
//
//	RecordingConfigurationThumbnailConfigurationArgs{...}
type RecordingConfigurationThumbnailConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput
	ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationOutput
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationArgs struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode RecordingConfigurationThumbnailConfigurationRecordingModePtrInput `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution RecordingConfigurationThumbnailConfigurationResolutionPtrInput `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage RecordingConfigurationThumbnailConfigurationStorageItemArrayInput `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds pulumi.IntPtrInput `pulumi:"targetIntervalSeconds"`
}

func (RecordingConfigurationThumbnailConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput)
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput).ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationThumbnailConfigurationPtrInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs, RecordingConfigurationThumbnailConfigurationPtr and RecordingConfigurationThumbnailConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationPtrInput` via:
//
//	        RecordingConfigurationThumbnailConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationThumbnailConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput
	ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput
}

type recordingConfigurationThumbnailConfigurationPtrType RecordingConfigurationThumbnailConfigurationArgs

func RecordingConfigurationThumbnailConfigurationPtr(v *RecordingConfigurationThumbnailConfigurationArgs) RecordingConfigurationThumbnailConfigurationPtrInput {
	return (*recordingConfigurationThumbnailConfigurationPtrType)(v)
}

func (*recordingConfigurationThumbnailConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfiguration {
		return &v
	}).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *int { return v.TargetIntervalSeconds }).(pulumi.IntPtrOutput)
}

type RecordingConfigurationThumbnailConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Elem() RecordingConfigurationThumbnailConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) RecordingConfigurationThumbnailConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationThumbnailConfiguration
		return ret
	}).(RecordingConfigurationThumbnailConfigurationOutput)
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		if v == nil {
			return nil
		}
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TargetIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

type StageTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type StreamKeyTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationDestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationPtrOutput{})
}
