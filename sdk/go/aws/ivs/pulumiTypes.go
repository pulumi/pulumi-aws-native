// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ChannelTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ChannelTagInput is an input type that accepts ChannelTagArgs and ChannelTagOutput values.
// You can construct a concrete instance of `ChannelTagInput` via:
//
//	ChannelTagArgs{...}
type ChannelTagInput interface {
	pulumi.Input

	ToChannelTagOutput() ChannelTagOutput
	ToChannelTagOutputWithContext(context.Context) ChannelTagOutput
}

type ChannelTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ChannelTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTag)(nil)).Elem()
}

func (i ChannelTagArgs) ToChannelTagOutput() ChannelTagOutput {
	return i.ToChannelTagOutputWithContext(context.Background())
}

func (i ChannelTagArgs) ToChannelTagOutputWithContext(ctx context.Context) ChannelTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTagOutput)
}

func (i ChannelTagArgs) ToOutput(ctx context.Context) pulumix.Output[ChannelTag] {
	return pulumix.Output[ChannelTag]{
		OutputState: i.ToChannelTagOutputWithContext(ctx).OutputState,
	}
}

// ChannelTagArrayInput is an input type that accepts ChannelTagArray and ChannelTagArrayOutput values.
// You can construct a concrete instance of `ChannelTagArrayInput` via:
//
//	ChannelTagArray{ ChannelTagArgs{...} }
type ChannelTagArrayInput interface {
	pulumi.Input

	ToChannelTagArrayOutput() ChannelTagArrayOutput
	ToChannelTagArrayOutputWithContext(context.Context) ChannelTagArrayOutput
}

type ChannelTagArray []ChannelTagInput

func (ChannelTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelTag)(nil)).Elem()
}

func (i ChannelTagArray) ToChannelTagArrayOutput() ChannelTagArrayOutput {
	return i.ToChannelTagArrayOutputWithContext(context.Background())
}

func (i ChannelTagArray) ToChannelTagArrayOutputWithContext(ctx context.Context) ChannelTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTagArrayOutput)
}

func (i ChannelTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ChannelTag] {
	return pulumix.Output[[]ChannelTag]{
		OutputState: i.ToChannelTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ChannelTagOutput struct{ *pulumi.OutputState }

func (ChannelTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTag)(nil)).Elem()
}

func (o ChannelTagOutput) ToChannelTagOutput() ChannelTagOutput {
	return o
}

func (o ChannelTagOutput) ToChannelTagOutputWithContext(ctx context.Context) ChannelTagOutput {
	return o
}

func (o ChannelTagOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelTag] {
	return pulumix.Output[ChannelTag]{
		OutputState: o.OutputState,
	}
}

func (o ChannelTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ChannelTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelTag) string { return v.Value }).(pulumi.StringOutput)
}

type ChannelTagArrayOutput struct{ *pulumi.OutputState }

func (ChannelTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelTag)(nil)).Elem()
}

func (o ChannelTagArrayOutput) ToChannelTagArrayOutput() ChannelTagArrayOutput {
	return o
}

func (o ChannelTagArrayOutput) ToChannelTagArrayOutputWithContext(ctx context.Context) ChannelTagArrayOutput {
	return o
}

func (o ChannelTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ChannelTag] {
	return pulumix.Output[[]ChannelTag]{
		OutputState: o.OutputState,
	}
}

func (o ChannelTagArrayOutput) Index(i pulumi.IntInput) ChannelTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelTag {
		return vs[0].([]ChannelTag)[vs[1].(int)]
	}).(ChannelTagOutput)
}

type PlaybackKeyPairTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// PlaybackKeyPairTagInput is an input type that accepts PlaybackKeyPairTagArgs and PlaybackKeyPairTagOutput values.
// You can construct a concrete instance of `PlaybackKeyPairTagInput` via:
//
//	PlaybackKeyPairTagArgs{...}
type PlaybackKeyPairTagInput interface {
	pulumi.Input

	ToPlaybackKeyPairTagOutput() PlaybackKeyPairTagOutput
	ToPlaybackKeyPairTagOutputWithContext(context.Context) PlaybackKeyPairTagOutput
}

type PlaybackKeyPairTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PlaybackKeyPairTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackKeyPairTag)(nil)).Elem()
}

func (i PlaybackKeyPairTagArgs) ToPlaybackKeyPairTagOutput() PlaybackKeyPairTagOutput {
	return i.ToPlaybackKeyPairTagOutputWithContext(context.Background())
}

func (i PlaybackKeyPairTagArgs) ToPlaybackKeyPairTagOutputWithContext(ctx context.Context) PlaybackKeyPairTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairTagOutput)
}

func (i PlaybackKeyPairTagArgs) ToOutput(ctx context.Context) pulumix.Output[PlaybackKeyPairTag] {
	return pulumix.Output[PlaybackKeyPairTag]{
		OutputState: i.ToPlaybackKeyPairTagOutputWithContext(ctx).OutputState,
	}
}

// PlaybackKeyPairTagArrayInput is an input type that accepts PlaybackKeyPairTagArray and PlaybackKeyPairTagArrayOutput values.
// You can construct a concrete instance of `PlaybackKeyPairTagArrayInput` via:
//
//	PlaybackKeyPairTagArray{ PlaybackKeyPairTagArgs{...} }
type PlaybackKeyPairTagArrayInput interface {
	pulumi.Input

	ToPlaybackKeyPairTagArrayOutput() PlaybackKeyPairTagArrayOutput
	ToPlaybackKeyPairTagArrayOutputWithContext(context.Context) PlaybackKeyPairTagArrayOutput
}

type PlaybackKeyPairTagArray []PlaybackKeyPairTagInput

func (PlaybackKeyPairTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaybackKeyPairTag)(nil)).Elem()
}

func (i PlaybackKeyPairTagArray) ToPlaybackKeyPairTagArrayOutput() PlaybackKeyPairTagArrayOutput {
	return i.ToPlaybackKeyPairTagArrayOutputWithContext(context.Background())
}

func (i PlaybackKeyPairTagArray) ToPlaybackKeyPairTagArrayOutputWithContext(ctx context.Context) PlaybackKeyPairTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairTagArrayOutput)
}

func (i PlaybackKeyPairTagArray) ToOutput(ctx context.Context) pulumix.Output[[]PlaybackKeyPairTag] {
	return pulumix.Output[[]PlaybackKeyPairTag]{
		OutputState: i.ToPlaybackKeyPairTagArrayOutputWithContext(ctx).OutputState,
	}
}

type PlaybackKeyPairTagOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackKeyPairTag)(nil)).Elem()
}

func (o PlaybackKeyPairTagOutput) ToPlaybackKeyPairTagOutput() PlaybackKeyPairTagOutput {
	return o
}

func (o PlaybackKeyPairTagOutput) ToPlaybackKeyPairTagOutputWithContext(ctx context.Context) PlaybackKeyPairTagOutput {
	return o
}

func (o PlaybackKeyPairTagOutput) ToOutput(ctx context.Context) pulumix.Output[PlaybackKeyPairTag] {
	return pulumix.Output[PlaybackKeyPairTag]{
		OutputState: o.OutputState,
	}
}

func (o PlaybackKeyPairTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PlaybackKeyPairTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PlaybackKeyPairTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PlaybackKeyPairTag) string { return v.Value }).(pulumi.StringOutput)
}

type PlaybackKeyPairTagArrayOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaybackKeyPairTag)(nil)).Elem()
}

func (o PlaybackKeyPairTagArrayOutput) ToPlaybackKeyPairTagArrayOutput() PlaybackKeyPairTagArrayOutput {
	return o
}

func (o PlaybackKeyPairTagArrayOutput) ToPlaybackKeyPairTagArrayOutputWithContext(ctx context.Context) PlaybackKeyPairTagArrayOutput {
	return o
}

func (o PlaybackKeyPairTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PlaybackKeyPairTag] {
	return pulumix.Output[[]PlaybackKeyPairTag]{
		OutputState: o.OutputState,
	}
}

func (o PlaybackKeyPairTagArrayOutput) Index(i pulumi.IntInput) PlaybackKeyPairTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlaybackKeyPairTag {
		return vs[0].([]PlaybackKeyPairTag)[vs[1].(int)]
	}).(PlaybackKeyPairTagOutput)
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfiguration struct {
	S3 *RecordingConfigurationS3DestinationConfiguration `pulumi:"s3"`
}

// RecordingConfigurationDestinationConfigurationInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs and RecordingConfigurationDestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationInput` via:
//
//	RecordingConfigurationDestinationConfigurationArgs{...}
type RecordingConfigurationDestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput
	ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationOutput
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationArgs struct {
	S3 RecordingConfigurationS3DestinationConfigurationPtrInput `pulumi:"s3"`
}

func (RecordingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput)
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationDestinationConfiguration] {
	return pulumix.Output[RecordingConfigurationDestinationConfiguration]{
		OutputState: i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx).OutputState,
	}
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationDestinationConfiguration] {
	return pulumix.Output[RecordingConfigurationDestinationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o RecordingConfigurationDestinationConfigurationOutput) S3() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationDestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return v.S3
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfiguration struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection *RecordingConfigurationRenditionConfigurationRenditionSelection `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions []RecordingConfigurationRenditionConfigurationRenditionsItem `pulumi:"renditions"`
}

// RecordingConfigurationRenditionConfigurationInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs and RecordingConfigurationRenditionConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationInput` via:
//
//	RecordingConfigurationRenditionConfigurationArgs{...}
type RecordingConfigurationRenditionConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput
	ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationOutput
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationArgs struct {
	// Resolution Selection indicates which set of renditions are recorded for a stream.
	RenditionSelection RecordingConfigurationRenditionConfigurationRenditionSelectionPtrInput `pulumi:"renditionSelection"`
	// Renditions indicates which renditions are recorded for a stream.
	Renditions RecordingConfigurationRenditionConfigurationRenditionsItemArrayInput `pulumi:"renditions"`
}

func (RecordingConfigurationRenditionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return i.ToRecordingConfigurationRenditionConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput)
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationRenditionConfiguration] {
	return pulumix.Output[RecordingConfigurationRenditionConfiguration]{
		OutputState: i.ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationRenditionConfigurationArgs) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationOutput).ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationRenditionConfigurationPtrInput is an input type that accepts RecordingConfigurationRenditionConfigurationArgs, RecordingConfigurationRenditionConfigurationPtr and RecordingConfigurationRenditionConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationRenditionConfigurationPtrInput` via:
//
//	        RecordingConfigurationRenditionConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationRenditionConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput
	ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationRenditionConfigurationPtrOutput
}

type recordingConfigurationRenditionConfigurationPtrType RecordingConfigurationRenditionConfigurationArgs

func RecordingConfigurationRenditionConfigurationPtr(v *RecordingConfigurationRenditionConfigurationArgs) RecordingConfigurationRenditionConfigurationPtrInput {
	return (*recordingConfigurationRenditionConfigurationPtrType)(v)
}

func (*recordingConfigurationRenditionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

func (i *recordingConfigurationRenditionConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationRenditionConfiguration] {
	return pulumix.Output[*RecordingConfigurationRenditionConfiguration]{
		OutputState: i.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Rendition Configuration describes which renditions should be recorded for a stream.
type RecordingConfigurationRenditionConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutput() RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfiguration {
		return &v
	}).(RecordingConfigurationRenditionConfigurationPtrOutput)
}

func (o RecordingConfigurationRenditionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationRenditionConfiguration] {
	return pulumix.Output[RecordingConfigurationRenditionConfiguration]{
		OutputState: o.OutputState,
	}
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

type RecordingConfigurationRenditionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationRenditionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationRenditionConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutput() RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToRecordingConfigurationRenditionConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationRenditionConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationRenditionConfiguration] {
	return pulumix.Output[*RecordingConfigurationRenditionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o RecordingConfigurationRenditionConfigurationPtrOutput) Elem() RecordingConfigurationRenditionConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) RecordingConfigurationRenditionConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationRenditionConfiguration
		return ret
	}).(RecordingConfigurationRenditionConfigurationOutput)
}

// Resolution Selection indicates which set of renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) RenditionSelection() RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) *RecordingConfigurationRenditionConfigurationRenditionSelection {
		if v == nil {
			return nil
		}
		return v.RenditionSelection
	}).(RecordingConfigurationRenditionConfigurationRenditionSelectionPtrOutput)
}

// Renditions indicates which renditions are recorded for a stream.
func (o RecordingConfigurationRenditionConfigurationPtrOutput) Renditions() RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationRenditionConfiguration) []RecordingConfigurationRenditionConfigurationRenditionsItem {
		if v == nil {
			return nil
		}
		return v.Renditions
	}).(RecordingConfigurationRenditionConfigurationRenditionsItemArrayOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfiguration struct {
	BucketName string `pulumi:"bucketName"`
}

// RecordingConfigurationS3DestinationConfigurationInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs and RecordingConfigurationS3DestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationInput` via:
//
//	RecordingConfigurationS3DestinationConfigurationArgs{...}
type RecordingConfigurationS3DestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput
	ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationOutput
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationArgs struct {
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (RecordingConfigurationS3DestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationS3DestinationConfiguration] {
	return pulumix.Output[RecordingConfigurationS3DestinationConfiguration]{
		OutputState: i.ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput).ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationS3DestinationConfigurationPtrInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs, RecordingConfigurationS3DestinationConfigurationPtr and RecordingConfigurationS3DestinationConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationPtrInput` via:
//
//	        RecordingConfigurationS3DestinationConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationS3DestinationConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput
	ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput
}

type recordingConfigurationS3DestinationConfigurationPtrType RecordingConfigurationS3DestinationConfigurationArgs

func RecordingConfigurationS3DestinationConfigurationPtr(v *RecordingConfigurationS3DestinationConfigurationArgs) RecordingConfigurationS3DestinationConfigurationPtrInput {
	return (*recordingConfigurationS3DestinationConfigurationPtrType)(v)
}

func (*recordingConfigurationS3DestinationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationS3DestinationConfiguration] {
	return pulumix.Output[*RecordingConfigurationS3DestinationConfiguration]{
		OutputState: i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationS3DestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return &v
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationS3DestinationConfiguration] {
	return pulumix.Output[RecordingConfigurationS3DestinationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationS3DestinationConfiguration) string { return v.BucketName }).(pulumi.StringOutput)
}

type RecordingConfigurationS3DestinationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationS3DestinationConfiguration] {
	return pulumix.Output[*RecordingConfigurationS3DestinationConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) Elem() RecordingConfigurationS3DestinationConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) RecordingConfigurationS3DestinationConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationS3DestinationConfiguration
		return ret
	}).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

type RecordingConfigurationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// RecordingConfigurationTagInput is an input type that accepts RecordingConfigurationTagArgs and RecordingConfigurationTagOutput values.
// You can construct a concrete instance of `RecordingConfigurationTagInput` via:
//
//	RecordingConfigurationTagArgs{...}
type RecordingConfigurationTagInput interface {
	pulumi.Input

	ToRecordingConfigurationTagOutput() RecordingConfigurationTagOutput
	ToRecordingConfigurationTagOutputWithContext(context.Context) RecordingConfigurationTagOutput
}

type RecordingConfigurationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RecordingConfigurationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationTag)(nil)).Elem()
}

func (i RecordingConfigurationTagArgs) ToRecordingConfigurationTagOutput() RecordingConfigurationTagOutput {
	return i.ToRecordingConfigurationTagOutputWithContext(context.Background())
}

func (i RecordingConfigurationTagArgs) ToRecordingConfigurationTagOutputWithContext(ctx context.Context) RecordingConfigurationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationTagOutput)
}

func (i RecordingConfigurationTagArgs) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationTag] {
	return pulumix.Output[RecordingConfigurationTag]{
		OutputState: i.ToRecordingConfigurationTagOutputWithContext(ctx).OutputState,
	}
}

// RecordingConfigurationTagArrayInput is an input type that accepts RecordingConfigurationTagArray and RecordingConfigurationTagArrayOutput values.
// You can construct a concrete instance of `RecordingConfigurationTagArrayInput` via:
//
//	RecordingConfigurationTagArray{ RecordingConfigurationTagArgs{...} }
type RecordingConfigurationTagArrayInput interface {
	pulumi.Input

	ToRecordingConfigurationTagArrayOutput() RecordingConfigurationTagArrayOutput
	ToRecordingConfigurationTagArrayOutputWithContext(context.Context) RecordingConfigurationTagArrayOutput
}

type RecordingConfigurationTagArray []RecordingConfigurationTagInput

func (RecordingConfigurationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordingConfigurationTag)(nil)).Elem()
}

func (i RecordingConfigurationTagArray) ToRecordingConfigurationTagArrayOutput() RecordingConfigurationTagArrayOutput {
	return i.ToRecordingConfigurationTagArrayOutputWithContext(context.Background())
}

func (i RecordingConfigurationTagArray) ToRecordingConfigurationTagArrayOutputWithContext(ctx context.Context) RecordingConfigurationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationTagArrayOutput)
}

func (i RecordingConfigurationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]RecordingConfigurationTag] {
	return pulumix.Output[[]RecordingConfigurationTag]{
		OutputState: i.ToRecordingConfigurationTagArrayOutputWithContext(ctx).OutputState,
	}
}

type RecordingConfigurationTagOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationTag)(nil)).Elem()
}

func (o RecordingConfigurationTagOutput) ToRecordingConfigurationTagOutput() RecordingConfigurationTagOutput {
	return o
}

func (o RecordingConfigurationTagOutput) ToRecordingConfigurationTagOutputWithContext(ctx context.Context) RecordingConfigurationTagOutput {
	return o
}

func (o RecordingConfigurationTagOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationTag] {
	return pulumix.Output[RecordingConfigurationTag]{
		OutputState: o.OutputState,
	}
}

func (o RecordingConfigurationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o RecordingConfigurationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationTag) string { return v.Value }).(pulumi.StringOutput)
}

type RecordingConfigurationTagArrayOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordingConfigurationTag)(nil)).Elem()
}

func (o RecordingConfigurationTagArrayOutput) ToRecordingConfigurationTagArrayOutput() RecordingConfigurationTagArrayOutput {
	return o
}

func (o RecordingConfigurationTagArrayOutput) ToRecordingConfigurationTagArrayOutputWithContext(ctx context.Context) RecordingConfigurationTagArrayOutput {
	return o
}

func (o RecordingConfigurationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RecordingConfigurationTag] {
	return pulumix.Output[[]RecordingConfigurationTag]{
		OutputState: o.OutputState,
	}
}

func (o RecordingConfigurationTagArrayOutput) Index(i pulumi.IntInput) RecordingConfigurationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordingConfigurationTag {
		return vs[0].([]RecordingConfigurationTag)[vs[1].(int)]
	}).(RecordingConfigurationTagOutput)
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfiguration struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode *RecordingConfigurationThumbnailConfigurationRecordingMode `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution *RecordingConfigurationThumbnailConfigurationResolution `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage []RecordingConfigurationThumbnailConfigurationStorageItem `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds *int `pulumi:"targetIntervalSeconds"`
}

// RecordingConfigurationThumbnailConfigurationInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs and RecordingConfigurationThumbnailConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationInput` via:
//
//	RecordingConfigurationThumbnailConfigurationArgs{...}
type RecordingConfigurationThumbnailConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput
	ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationOutput
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationArgs struct {
	// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
	RecordingMode RecordingConfigurationThumbnailConfigurationRecordingModePtrInput `pulumi:"recordingMode"`
	// Resolution indicates the desired resolution of recorded thumbnails.
	Resolution RecordingConfigurationThumbnailConfigurationResolutionPtrInput `pulumi:"resolution"`
	// Storage indicates the format in which thumbnails are recorded.
	Storage RecordingConfigurationThumbnailConfigurationStorageItemArrayInput `pulumi:"storage"`
	// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
	TargetIntervalSeconds pulumi.IntPtrInput `pulumi:"targetIntervalSeconds"`
}

func (RecordingConfigurationThumbnailConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput)
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationThumbnailConfiguration] {
	return pulumix.Output[RecordingConfigurationThumbnailConfiguration]{
		OutputState: i.ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationThumbnailConfigurationArgs) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationOutput).ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationThumbnailConfigurationPtrInput is an input type that accepts RecordingConfigurationThumbnailConfigurationArgs, RecordingConfigurationThumbnailConfigurationPtr and RecordingConfigurationThumbnailConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationThumbnailConfigurationPtrInput` via:
//
//	        RecordingConfigurationThumbnailConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecordingConfigurationThumbnailConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput
	ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput
}

type recordingConfigurationThumbnailConfigurationPtrType RecordingConfigurationThumbnailConfigurationArgs

func RecordingConfigurationThumbnailConfigurationPtr(v *RecordingConfigurationThumbnailConfigurationArgs) RecordingConfigurationThumbnailConfigurationPtrInput {
	return (*recordingConfigurationThumbnailConfigurationPtrType)(v)
}

func (*recordingConfigurationThumbnailConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

func (i *recordingConfigurationThumbnailConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationThumbnailConfiguration] {
	return pulumix.Output[*RecordingConfigurationThumbnailConfiguration]{
		OutputState: i.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Recording Thumbnail Configuration.
type RecordingConfigurationThumbnailConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutput() RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfiguration {
		return &v
	}).(RecordingConfigurationThumbnailConfigurationPtrOutput)
}

func (o RecordingConfigurationThumbnailConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[RecordingConfigurationThumbnailConfiguration] {
	return pulumix.Output[RecordingConfigurationThumbnailConfiguration]{
		OutputState: o.OutputState,
	}
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordingConfigurationThumbnailConfiguration) *int { return v.TargetIntervalSeconds }).(pulumi.IntPtrOutput)
}

type RecordingConfigurationThumbnailConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationThumbnailConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationThumbnailConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutput() RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToRecordingConfigurationThumbnailConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationThumbnailConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RecordingConfigurationThumbnailConfiguration] {
	return pulumix.Output[*RecordingConfigurationThumbnailConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Elem() RecordingConfigurationThumbnailConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) RecordingConfigurationThumbnailConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationThumbnailConfiguration
		return ret
	}).(RecordingConfigurationThumbnailConfigurationOutput)
}

// Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) RecordingMode() RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationRecordingMode {
		if v == nil {
			return nil
		}
		return v.RecordingMode
	}).(RecordingConfigurationThumbnailConfigurationRecordingModePtrOutput)
}

// Resolution indicates the desired resolution of recorded thumbnails.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Resolution() RecordingConfigurationThumbnailConfigurationResolutionPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *RecordingConfigurationThumbnailConfigurationResolution {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(RecordingConfigurationThumbnailConfigurationResolutionPtrOutput)
}

// Storage indicates the format in which thumbnails are recorded.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) Storage() RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) []RecordingConfigurationThumbnailConfigurationStorageItem {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(RecordingConfigurationThumbnailConfigurationStorageItemArrayOutput)
}

// Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
func (o RecordingConfigurationThumbnailConfigurationPtrOutput) TargetIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationThumbnailConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TargetIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

type StreamKeyTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// StreamKeyTagInput is an input type that accepts StreamKeyTagArgs and StreamKeyTagOutput values.
// You can construct a concrete instance of `StreamKeyTagInput` via:
//
//	StreamKeyTagArgs{...}
type StreamKeyTagInput interface {
	pulumi.Input

	ToStreamKeyTagOutput() StreamKeyTagOutput
	ToStreamKeyTagOutputWithContext(context.Context) StreamKeyTagOutput
}

type StreamKeyTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (StreamKeyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamKeyTag)(nil)).Elem()
}

func (i StreamKeyTagArgs) ToStreamKeyTagOutput() StreamKeyTagOutput {
	return i.ToStreamKeyTagOutputWithContext(context.Background())
}

func (i StreamKeyTagArgs) ToStreamKeyTagOutputWithContext(ctx context.Context) StreamKeyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamKeyTagOutput)
}

func (i StreamKeyTagArgs) ToOutput(ctx context.Context) pulumix.Output[StreamKeyTag] {
	return pulumix.Output[StreamKeyTag]{
		OutputState: i.ToStreamKeyTagOutputWithContext(ctx).OutputState,
	}
}

// StreamKeyTagArrayInput is an input type that accepts StreamKeyTagArray and StreamKeyTagArrayOutput values.
// You can construct a concrete instance of `StreamKeyTagArrayInput` via:
//
//	StreamKeyTagArray{ StreamKeyTagArgs{...} }
type StreamKeyTagArrayInput interface {
	pulumi.Input

	ToStreamKeyTagArrayOutput() StreamKeyTagArrayOutput
	ToStreamKeyTagArrayOutputWithContext(context.Context) StreamKeyTagArrayOutput
}

type StreamKeyTagArray []StreamKeyTagInput

func (StreamKeyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamKeyTag)(nil)).Elem()
}

func (i StreamKeyTagArray) ToStreamKeyTagArrayOutput() StreamKeyTagArrayOutput {
	return i.ToStreamKeyTagArrayOutputWithContext(context.Background())
}

func (i StreamKeyTagArray) ToStreamKeyTagArrayOutputWithContext(ctx context.Context) StreamKeyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamKeyTagArrayOutput)
}

func (i StreamKeyTagArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamKeyTag] {
	return pulumix.Output[[]StreamKeyTag]{
		OutputState: i.ToStreamKeyTagArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamKeyTagOutput struct{ *pulumi.OutputState }

func (StreamKeyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamKeyTag)(nil)).Elem()
}

func (o StreamKeyTagOutput) ToStreamKeyTagOutput() StreamKeyTagOutput {
	return o
}

func (o StreamKeyTagOutput) ToStreamKeyTagOutputWithContext(ctx context.Context) StreamKeyTagOutput {
	return o
}

func (o StreamKeyTagOutput) ToOutput(ctx context.Context) pulumix.Output[StreamKeyTag] {
	return pulumix.Output[StreamKeyTag]{
		OutputState: o.OutputState,
	}
}

func (o StreamKeyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StreamKeyTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o StreamKeyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StreamKeyTag) string { return v.Value }).(pulumi.StringOutput)
}

type StreamKeyTagArrayOutput struct{ *pulumi.OutputState }

func (StreamKeyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamKeyTag)(nil)).Elem()
}

func (o StreamKeyTagArrayOutput) ToStreamKeyTagArrayOutput() StreamKeyTagArrayOutput {
	return o
}

func (o StreamKeyTagArrayOutput) ToStreamKeyTagArrayOutputWithContext(ctx context.Context) StreamKeyTagArrayOutput {
	return o
}

func (o StreamKeyTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamKeyTag] {
	return pulumix.Output[[]StreamKeyTag]{
		OutputState: o.OutputState,
	}
}

func (o StreamKeyTagArrayOutput) Index(i pulumi.IntInput) StreamKeyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamKeyTag {
		return vs[0].([]StreamKeyTag)[vs[1].(int)]
	}).(StreamKeyTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelTagInput)(nil)).Elem(), ChannelTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelTagArrayInput)(nil)).Elem(), ChannelTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackKeyPairTagInput)(nil)).Elem(), PlaybackKeyPairTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackKeyPairTagArrayInput)(nil)).Elem(), PlaybackKeyPairTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationDestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationDestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationRenditionConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationRenditionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationS3DestinationConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationS3DestinationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationTagInput)(nil)).Elem(), RecordingConfigurationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationTagArrayInput)(nil)).Elem(), RecordingConfigurationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordingConfigurationThumbnailConfigurationPtrInput)(nil)).Elem(), RecordingConfigurationThumbnailConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamKeyTagInput)(nil)).Elem(), StreamKeyTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamKeyTagArrayInput)(nil)).Elem(), StreamKeyTagArray{})
	pulumi.RegisterOutputType(ChannelTagOutput{})
	pulumi.RegisterOutputType(ChannelTagArrayOutput{})
	pulumi.RegisterOutputType(PlaybackKeyPairTagOutput{})
	pulumi.RegisterOutputType(PlaybackKeyPairTagArrayOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationRenditionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationTagOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationTagArrayOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationThumbnailConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamKeyTagOutput{})
	pulumi.RegisterOutputType(StreamKeyTagArrayOutput{})
}
