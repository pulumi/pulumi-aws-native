// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ChannelTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ChannelTagInput is an input type that accepts ChannelTagArgs and ChannelTagOutput values.
// You can construct a concrete instance of `ChannelTagInput` via:
//
//          ChannelTagArgs{...}
type ChannelTagInput interface {
	pulumi.Input

	ToChannelTagOutput() ChannelTagOutput
	ToChannelTagOutputWithContext(context.Context) ChannelTagOutput
}

type ChannelTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ChannelTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTag)(nil)).Elem()
}

func (i ChannelTagArgs) ToChannelTagOutput() ChannelTagOutput {
	return i.ToChannelTagOutputWithContext(context.Background())
}

func (i ChannelTagArgs) ToChannelTagOutputWithContext(ctx context.Context) ChannelTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTagOutput)
}

// ChannelTagArrayInput is an input type that accepts ChannelTagArray and ChannelTagArrayOutput values.
// You can construct a concrete instance of `ChannelTagArrayInput` via:
//
//          ChannelTagArray{ ChannelTagArgs{...} }
type ChannelTagArrayInput interface {
	pulumi.Input

	ToChannelTagArrayOutput() ChannelTagArrayOutput
	ToChannelTagArrayOutputWithContext(context.Context) ChannelTagArrayOutput
}

type ChannelTagArray []ChannelTagInput

func (ChannelTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelTag)(nil)).Elem()
}

func (i ChannelTagArray) ToChannelTagArrayOutput() ChannelTagArrayOutput {
	return i.ToChannelTagArrayOutputWithContext(context.Background())
}

func (i ChannelTagArray) ToChannelTagArrayOutputWithContext(ctx context.Context) ChannelTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTagArrayOutput)
}

type ChannelTagOutput struct{ *pulumi.OutputState }

func (ChannelTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTag)(nil)).Elem()
}

func (o ChannelTagOutput) ToChannelTagOutput() ChannelTagOutput {
	return o
}

func (o ChannelTagOutput) ToChannelTagOutputWithContext(ctx context.Context) ChannelTagOutput {
	return o
}

func (o ChannelTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ChannelTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelTag) string { return v.Value }).(pulumi.StringOutput)
}

type ChannelTagArrayOutput struct{ *pulumi.OutputState }

func (ChannelTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelTag)(nil)).Elem()
}

func (o ChannelTagArrayOutput) ToChannelTagArrayOutput() ChannelTagArrayOutput {
	return o
}

func (o ChannelTagArrayOutput) ToChannelTagArrayOutputWithContext(ctx context.Context) ChannelTagArrayOutput {
	return o
}

func (o ChannelTagArrayOutput) Index(i pulumi.IntInput) ChannelTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelTag {
		return vs[0].([]ChannelTag)[vs[1].(int)]
	}).(ChannelTagOutput)
}

type PlaybackKeyPairTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// PlaybackKeyPairTagInput is an input type that accepts PlaybackKeyPairTagArgs and PlaybackKeyPairTagOutput values.
// You can construct a concrete instance of `PlaybackKeyPairTagInput` via:
//
//          PlaybackKeyPairTagArgs{...}
type PlaybackKeyPairTagInput interface {
	pulumi.Input

	ToPlaybackKeyPairTagOutput() PlaybackKeyPairTagOutput
	ToPlaybackKeyPairTagOutputWithContext(context.Context) PlaybackKeyPairTagOutput
}

type PlaybackKeyPairTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PlaybackKeyPairTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackKeyPairTag)(nil)).Elem()
}

func (i PlaybackKeyPairTagArgs) ToPlaybackKeyPairTagOutput() PlaybackKeyPairTagOutput {
	return i.ToPlaybackKeyPairTagOutputWithContext(context.Background())
}

func (i PlaybackKeyPairTagArgs) ToPlaybackKeyPairTagOutputWithContext(ctx context.Context) PlaybackKeyPairTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairTagOutput)
}

// PlaybackKeyPairTagArrayInput is an input type that accepts PlaybackKeyPairTagArray and PlaybackKeyPairTagArrayOutput values.
// You can construct a concrete instance of `PlaybackKeyPairTagArrayInput` via:
//
//          PlaybackKeyPairTagArray{ PlaybackKeyPairTagArgs{...} }
type PlaybackKeyPairTagArrayInput interface {
	pulumi.Input

	ToPlaybackKeyPairTagArrayOutput() PlaybackKeyPairTagArrayOutput
	ToPlaybackKeyPairTagArrayOutputWithContext(context.Context) PlaybackKeyPairTagArrayOutput
}

type PlaybackKeyPairTagArray []PlaybackKeyPairTagInput

func (PlaybackKeyPairTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaybackKeyPairTag)(nil)).Elem()
}

func (i PlaybackKeyPairTagArray) ToPlaybackKeyPairTagArrayOutput() PlaybackKeyPairTagArrayOutput {
	return i.ToPlaybackKeyPairTagArrayOutputWithContext(context.Background())
}

func (i PlaybackKeyPairTagArray) ToPlaybackKeyPairTagArrayOutputWithContext(ctx context.Context) PlaybackKeyPairTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairTagArrayOutput)
}

type PlaybackKeyPairTagOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackKeyPairTag)(nil)).Elem()
}

func (o PlaybackKeyPairTagOutput) ToPlaybackKeyPairTagOutput() PlaybackKeyPairTagOutput {
	return o
}

func (o PlaybackKeyPairTagOutput) ToPlaybackKeyPairTagOutputWithContext(ctx context.Context) PlaybackKeyPairTagOutput {
	return o
}

func (o PlaybackKeyPairTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PlaybackKeyPairTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PlaybackKeyPairTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PlaybackKeyPairTag) string { return v.Value }).(pulumi.StringOutput)
}

type PlaybackKeyPairTagArrayOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaybackKeyPairTag)(nil)).Elem()
}

func (o PlaybackKeyPairTagArrayOutput) ToPlaybackKeyPairTagArrayOutput() PlaybackKeyPairTagArrayOutput {
	return o
}

func (o PlaybackKeyPairTagArrayOutput) ToPlaybackKeyPairTagArrayOutputWithContext(ctx context.Context) PlaybackKeyPairTagArrayOutput {
	return o
}

func (o PlaybackKeyPairTagArrayOutput) Index(i pulumi.IntInput) PlaybackKeyPairTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlaybackKeyPairTag {
		return vs[0].([]PlaybackKeyPairTag)[vs[1].(int)]
	}).(PlaybackKeyPairTagOutput)
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfiguration struct {
	S3 RecordingConfigurationS3DestinationConfiguration `pulumi:"s3"`
}

// RecordingConfigurationDestinationConfigurationInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs and RecordingConfigurationDestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationInput` via:
//
//          RecordingConfigurationDestinationConfigurationArgs{...}
type RecordingConfigurationDestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput
	ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationOutput
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationArgs struct {
	S3 RecordingConfigurationS3DestinationConfigurationInput `pulumi:"s3"`
}

func (RecordingConfigurationDestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return i.ToRecordingConfigurationDestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput)
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationDestinationConfigurationArgs) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationOutput).ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationDestinationConfigurationPtrInput is an input type that accepts RecordingConfigurationDestinationConfigurationArgs, RecordingConfigurationDestinationConfigurationPtr and RecordingConfigurationDestinationConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationDestinationConfigurationPtrInput` via:
//
//          RecordingConfigurationDestinationConfigurationArgs{...}
//
//  or:
//
//          nil
type RecordingConfigurationDestinationConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput
	ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationDestinationConfigurationPtrOutput
}

type recordingConfigurationDestinationConfigurationPtrType RecordingConfigurationDestinationConfigurationArgs

func RecordingConfigurationDestinationConfigurationPtr(v *RecordingConfigurationDestinationConfigurationArgs) RecordingConfigurationDestinationConfigurationPtrInput {
	return (*recordingConfigurationDestinationConfigurationPtrType)(v)
}

func (*recordingConfigurationDestinationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationDestinationConfigurationPtrType) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationDestinationConfigurationPtrType) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationDestinationConfigurationPtrOutput)
}

// Recording Destination Configuration.
type RecordingConfigurationDestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutput() RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return o.ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationDestinationConfigurationOutput) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationDestinationConfiguration) *RecordingConfigurationDestinationConfiguration {
		return &v
	}).(RecordingConfigurationDestinationConfigurationPtrOutput)
}

func (o RecordingConfigurationDestinationConfigurationOutput) S3() RecordingConfigurationS3DestinationConfigurationOutput {
	return o.ApplyT(func(v RecordingConfigurationDestinationConfiguration) RecordingConfigurationS3DestinationConfiguration {
		return v.S3
	}).(RecordingConfigurationS3DestinationConfigurationOutput)
}

type RecordingConfigurationDestinationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationDestinationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationDestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationDestinationConfigurationPtrOutput) ToRecordingConfigurationDestinationConfigurationPtrOutput() RecordingConfigurationDestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationPtrOutput) ToRecordingConfigurationDestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationDestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationDestinationConfigurationPtrOutput) Elem() RecordingConfigurationDestinationConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationDestinationConfiguration) RecordingConfigurationDestinationConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationDestinationConfiguration
		return ret
	}).(RecordingConfigurationDestinationConfigurationOutput)
}

func (o RecordingConfigurationDestinationConfigurationPtrOutput) S3() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationDestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		if v == nil {
			return nil
		}
		return &v.S3
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfiguration struct {
	BucketName string `pulumi:"bucketName"`
}

// RecordingConfigurationS3DestinationConfigurationInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs and RecordingConfigurationS3DestinationConfigurationOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationInput` via:
//
//          RecordingConfigurationS3DestinationConfigurationArgs{...}
type RecordingConfigurationS3DestinationConfigurationInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput
	ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationOutput
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationArgs struct {
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (RecordingConfigurationS3DestinationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i RecordingConfigurationS3DestinationConfigurationArgs) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationOutput).ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx)
}

// RecordingConfigurationS3DestinationConfigurationPtrInput is an input type that accepts RecordingConfigurationS3DestinationConfigurationArgs, RecordingConfigurationS3DestinationConfigurationPtr and RecordingConfigurationS3DestinationConfigurationPtrOutput values.
// You can construct a concrete instance of `RecordingConfigurationS3DestinationConfigurationPtrInput` via:
//
//          RecordingConfigurationS3DestinationConfigurationArgs{...}
//
//  or:
//
//          nil
type RecordingConfigurationS3DestinationConfigurationPtrInput interface {
	pulumi.Input

	ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput
	ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput
}

type recordingConfigurationS3DestinationConfigurationPtrType RecordingConfigurationS3DestinationConfigurationArgs

func RecordingConfigurationS3DestinationConfigurationPtr(v *RecordingConfigurationS3DestinationConfigurationArgs) RecordingConfigurationS3DestinationConfigurationPtrInput {
	return (*recordingConfigurationS3DestinationConfigurationPtrType)(v)
}

func (*recordingConfigurationS3DestinationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return i.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (i *recordingConfigurationS3DestinationConfigurationPtrType) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

// Recording S3 Destination Configuration.
type RecordingConfigurationS3DestinationConfigurationOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutput() RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(context.Background())
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecordingConfigurationS3DestinationConfiguration) *RecordingConfigurationS3DestinationConfiguration {
		return &v
	}).(RecordingConfigurationS3DestinationConfigurationPtrOutput)
}

func (o RecordingConfigurationS3DestinationConfigurationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationS3DestinationConfiguration) string { return v.BucketName }).(pulumi.StringOutput)
}

type RecordingConfigurationS3DestinationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationS3DestinationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordingConfigurationS3DestinationConfiguration)(nil)).Elem()
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutput() RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) ToRecordingConfigurationS3DestinationConfigurationPtrOutputWithContext(ctx context.Context) RecordingConfigurationS3DestinationConfigurationPtrOutput {
	return o
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) Elem() RecordingConfigurationS3DestinationConfigurationOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) RecordingConfigurationS3DestinationConfiguration {
		if v != nil {
			return *v
		}
		var ret RecordingConfigurationS3DestinationConfiguration
		return ret
	}).(RecordingConfigurationS3DestinationConfigurationOutput)
}

func (o RecordingConfigurationS3DestinationConfigurationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordingConfigurationS3DestinationConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

type RecordingConfigurationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// RecordingConfigurationTagInput is an input type that accepts RecordingConfigurationTagArgs and RecordingConfigurationTagOutput values.
// You can construct a concrete instance of `RecordingConfigurationTagInput` via:
//
//          RecordingConfigurationTagArgs{...}
type RecordingConfigurationTagInput interface {
	pulumi.Input

	ToRecordingConfigurationTagOutput() RecordingConfigurationTagOutput
	ToRecordingConfigurationTagOutputWithContext(context.Context) RecordingConfigurationTagOutput
}

type RecordingConfigurationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RecordingConfigurationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationTag)(nil)).Elem()
}

func (i RecordingConfigurationTagArgs) ToRecordingConfigurationTagOutput() RecordingConfigurationTagOutput {
	return i.ToRecordingConfigurationTagOutputWithContext(context.Background())
}

func (i RecordingConfigurationTagArgs) ToRecordingConfigurationTagOutputWithContext(ctx context.Context) RecordingConfigurationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationTagOutput)
}

// RecordingConfigurationTagArrayInput is an input type that accepts RecordingConfigurationTagArray and RecordingConfigurationTagArrayOutput values.
// You can construct a concrete instance of `RecordingConfigurationTagArrayInput` via:
//
//          RecordingConfigurationTagArray{ RecordingConfigurationTagArgs{...} }
type RecordingConfigurationTagArrayInput interface {
	pulumi.Input

	ToRecordingConfigurationTagArrayOutput() RecordingConfigurationTagArrayOutput
	ToRecordingConfigurationTagArrayOutputWithContext(context.Context) RecordingConfigurationTagArrayOutput
}

type RecordingConfigurationTagArray []RecordingConfigurationTagInput

func (RecordingConfigurationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordingConfigurationTag)(nil)).Elem()
}

func (i RecordingConfigurationTagArray) ToRecordingConfigurationTagArrayOutput() RecordingConfigurationTagArrayOutput {
	return i.ToRecordingConfigurationTagArrayOutputWithContext(context.Background())
}

func (i RecordingConfigurationTagArray) ToRecordingConfigurationTagArrayOutputWithContext(ctx context.Context) RecordingConfigurationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordingConfigurationTagArrayOutput)
}

type RecordingConfigurationTagOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordingConfigurationTag)(nil)).Elem()
}

func (o RecordingConfigurationTagOutput) ToRecordingConfigurationTagOutput() RecordingConfigurationTagOutput {
	return o
}

func (o RecordingConfigurationTagOutput) ToRecordingConfigurationTagOutputWithContext(ctx context.Context) RecordingConfigurationTagOutput {
	return o
}

func (o RecordingConfigurationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o RecordingConfigurationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RecordingConfigurationTag) string { return v.Value }).(pulumi.StringOutput)
}

type RecordingConfigurationTagArrayOutput struct{ *pulumi.OutputState }

func (RecordingConfigurationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordingConfigurationTag)(nil)).Elem()
}

func (o RecordingConfigurationTagArrayOutput) ToRecordingConfigurationTagArrayOutput() RecordingConfigurationTagArrayOutput {
	return o
}

func (o RecordingConfigurationTagArrayOutput) ToRecordingConfigurationTagArrayOutputWithContext(ctx context.Context) RecordingConfigurationTagArrayOutput {
	return o
}

func (o RecordingConfigurationTagArrayOutput) Index(i pulumi.IntInput) RecordingConfigurationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordingConfigurationTag {
		return vs[0].([]RecordingConfigurationTag)[vs[1].(int)]
	}).(RecordingConfigurationTagOutput)
}

type StreamKeyTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// StreamKeyTagInput is an input type that accepts StreamKeyTagArgs and StreamKeyTagOutput values.
// You can construct a concrete instance of `StreamKeyTagInput` via:
//
//          StreamKeyTagArgs{...}
type StreamKeyTagInput interface {
	pulumi.Input

	ToStreamKeyTagOutput() StreamKeyTagOutput
	ToStreamKeyTagOutputWithContext(context.Context) StreamKeyTagOutput
}

type StreamKeyTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (StreamKeyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamKeyTag)(nil)).Elem()
}

func (i StreamKeyTagArgs) ToStreamKeyTagOutput() StreamKeyTagOutput {
	return i.ToStreamKeyTagOutputWithContext(context.Background())
}

func (i StreamKeyTagArgs) ToStreamKeyTagOutputWithContext(ctx context.Context) StreamKeyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamKeyTagOutput)
}

// StreamKeyTagArrayInput is an input type that accepts StreamKeyTagArray and StreamKeyTagArrayOutput values.
// You can construct a concrete instance of `StreamKeyTagArrayInput` via:
//
//          StreamKeyTagArray{ StreamKeyTagArgs{...} }
type StreamKeyTagArrayInput interface {
	pulumi.Input

	ToStreamKeyTagArrayOutput() StreamKeyTagArrayOutput
	ToStreamKeyTagArrayOutputWithContext(context.Context) StreamKeyTagArrayOutput
}

type StreamKeyTagArray []StreamKeyTagInput

func (StreamKeyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamKeyTag)(nil)).Elem()
}

func (i StreamKeyTagArray) ToStreamKeyTagArrayOutput() StreamKeyTagArrayOutput {
	return i.ToStreamKeyTagArrayOutputWithContext(context.Background())
}

func (i StreamKeyTagArray) ToStreamKeyTagArrayOutputWithContext(ctx context.Context) StreamKeyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamKeyTagArrayOutput)
}

type StreamKeyTagOutput struct{ *pulumi.OutputState }

func (StreamKeyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamKeyTag)(nil)).Elem()
}

func (o StreamKeyTagOutput) ToStreamKeyTagOutput() StreamKeyTagOutput {
	return o
}

func (o StreamKeyTagOutput) ToStreamKeyTagOutputWithContext(ctx context.Context) StreamKeyTagOutput {
	return o
}

func (o StreamKeyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StreamKeyTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o StreamKeyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StreamKeyTag) string { return v.Value }).(pulumi.StringOutput)
}

type StreamKeyTagArrayOutput struct{ *pulumi.OutputState }

func (StreamKeyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamKeyTag)(nil)).Elem()
}

func (o StreamKeyTagArrayOutput) ToStreamKeyTagArrayOutput() StreamKeyTagArrayOutput {
	return o
}

func (o StreamKeyTagArrayOutput) ToStreamKeyTagArrayOutputWithContext(ctx context.Context) StreamKeyTagArrayOutput {
	return o
}

func (o StreamKeyTagArrayOutput) Index(i pulumi.IntInput) StreamKeyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamKeyTag {
		return vs[0].([]StreamKeyTag)[vs[1].(int)]
	}).(StreamKeyTagOutput)
}

func init() {
	pulumi.RegisterOutputType(ChannelTagOutput{})
	pulumi.RegisterOutputType(ChannelTagArrayOutput{})
	pulumi.RegisterOutputType(PlaybackKeyPairTagOutput{})
	pulumi.RegisterOutputType(PlaybackKeyPairTagArrayOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationDestinationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationS3DestinationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationTagOutput{})
	pulumi.RegisterOutputType(RecordingConfigurationTagArrayOutput{})
	pulumi.RegisterOutputType(StreamKeyTagOutput{})
	pulumi.RegisterOutputType(StreamKeyTagArrayOutput{})
}
