// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IVS::EncoderConfiguration.
type EncoderConfiguration struct {
	pulumi.CustomResourceState

	// Encoder configuration identifier.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Encoder configuration name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
	Video VideoPropertiesPtrOutput `pulumi:"video"`
}

// NewEncoderConfiguration registers a new resource with the given unique name, arguments, and options.
func NewEncoderConfiguration(ctx *pulumi.Context,
	name string, args *EncoderConfigurationArgs, opts ...pulumi.ResourceOption) (*EncoderConfiguration, error) {
	if args == nil {
		args = &EncoderConfigurationArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"video",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EncoderConfiguration
	err := ctx.RegisterResource("aws-native:ivs:EncoderConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEncoderConfiguration gets an existing EncoderConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEncoderConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EncoderConfigurationState, opts ...pulumi.ResourceOption) (*EncoderConfiguration, error) {
	var resource EncoderConfiguration
	err := ctx.ReadResource("aws-native:ivs:EncoderConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EncoderConfiguration resources.
type encoderConfigurationState struct {
}

type EncoderConfigurationState struct {
}

func (EncoderConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*encoderConfigurationState)(nil)).Elem()
}

type encoderConfigurationArgs struct {
	// Encoder configuration name.
	Name *string `pulumi:"name"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
	Video *VideoProperties `pulumi:"video"`
}

// The set of arguments for constructing a EncoderConfiguration resource.
type EncoderConfigurationArgs struct {
	// Encoder configuration name.
	Name pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
	// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
	Video VideoPropertiesPtrInput
}

func (EncoderConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*encoderConfigurationArgs)(nil)).Elem()
}

type EncoderConfigurationInput interface {
	pulumi.Input

	ToEncoderConfigurationOutput() EncoderConfigurationOutput
	ToEncoderConfigurationOutputWithContext(ctx context.Context) EncoderConfigurationOutput
}

func (*EncoderConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**EncoderConfiguration)(nil)).Elem()
}

func (i *EncoderConfiguration) ToEncoderConfigurationOutput() EncoderConfigurationOutput {
	return i.ToEncoderConfigurationOutputWithContext(context.Background())
}

func (i *EncoderConfiguration) ToEncoderConfigurationOutputWithContext(ctx context.Context) EncoderConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncoderConfigurationOutput)
}

type EncoderConfigurationOutput struct{ *pulumi.OutputState }

func (EncoderConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncoderConfiguration)(nil)).Elem()
}

func (o EncoderConfigurationOutput) ToEncoderConfigurationOutput() EncoderConfigurationOutput {
	return o
}

func (o EncoderConfigurationOutput) ToEncoderConfigurationOutputWithContext(ctx context.Context) EncoderConfigurationOutput {
	return o
}

// Encoder configuration identifier.
func (o EncoderConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EncoderConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Encoder configuration name.
func (o EncoderConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncoderConfiguration) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o EncoderConfigurationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *EncoderConfiguration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
func (o EncoderConfigurationOutput) Video() VideoPropertiesPtrOutput {
	return o.ApplyT(func(v *EncoderConfiguration) VideoPropertiesPtrOutput { return v.Video }).(VideoPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EncoderConfigurationInput)(nil)).Elem(), &EncoderConfiguration{})
	pulumi.RegisterOutputType(EncoderConfigurationOutput{})
}
