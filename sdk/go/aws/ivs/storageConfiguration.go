// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IVS::StorageConfiguration
type StorageConfiguration struct {
	pulumi.CustomResourceState

	// Storage Configuration ARN is automatically generated on creation and assigned as the unique identifier.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Storage Configuration Name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The S3StorageConfiguration property type describes an S3 location where recorded videos will be stored.
	S3 StorageConfigurationS3StorageConfigurationOutput `pulumi:"s3"`
	// A list of key-value pairs that contain metadata for the asset model.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewStorageConfiguration registers a new resource with the given unique name, arguments, and options.
func NewStorageConfiguration(ctx *pulumi.Context,
	name string, args *StorageConfigurationArgs, opts ...pulumi.ResourceOption) (*StorageConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.S3 == nil {
		return nil, errors.New("invalid value for required argument 'S3'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"s3",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageConfiguration
	err := ctx.RegisterResource("aws-native:ivs:StorageConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageConfiguration gets an existing StorageConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageConfigurationState, opts ...pulumi.ResourceOption) (*StorageConfiguration, error) {
	var resource StorageConfiguration
	err := ctx.ReadResource("aws-native:ivs:StorageConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageConfiguration resources.
type storageConfigurationState struct {
}

type StorageConfigurationState struct {
}

func (StorageConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageConfigurationState)(nil)).Elem()
}

type storageConfigurationArgs struct {
	// Storage Configuration Name.
	Name *string `pulumi:"name"`
	// The S3StorageConfiguration property type describes an S3 location where recorded videos will be stored.
	S3 StorageConfigurationS3StorageConfiguration `pulumi:"s3"`
	// A list of key-value pairs that contain metadata for the asset model.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a StorageConfiguration resource.
type StorageConfigurationArgs struct {
	// Storage Configuration Name.
	Name pulumi.StringPtrInput
	// The S3StorageConfiguration property type describes an S3 location where recorded videos will be stored.
	S3 StorageConfigurationS3StorageConfigurationInput
	// A list of key-value pairs that contain metadata for the asset model.
	Tags aws.TagArrayInput
}

func (StorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageConfigurationArgs)(nil)).Elem()
}

type StorageConfigurationInput interface {
	pulumi.Input

	ToStorageConfigurationOutput() StorageConfigurationOutput
	ToStorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationOutput
}

func (*StorageConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageConfiguration)(nil)).Elem()
}

func (i *StorageConfiguration) ToStorageConfigurationOutput() StorageConfigurationOutput {
	return i.ToStorageConfigurationOutputWithContext(context.Background())
}

func (i *StorageConfiguration) ToStorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageConfigurationOutput)
}

type StorageConfigurationOutput struct{ *pulumi.OutputState }

func (StorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageConfiguration)(nil)).Elem()
}

func (o StorageConfigurationOutput) ToStorageConfigurationOutput() StorageConfigurationOutput {
	return o
}

func (o StorageConfigurationOutput) ToStorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationOutput {
	return o
}

// Storage Configuration ARN is automatically generated on creation and assigned as the unique identifier.
func (o StorageConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Storage Configuration Name.
func (o StorageConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageConfiguration) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The S3StorageConfiguration property type describes an S3 location where recorded videos will be stored.
func (o StorageConfigurationOutput) S3() StorageConfigurationS3StorageConfigurationOutput {
	return o.ApplyT(func(v *StorageConfiguration) StorageConfigurationS3StorageConfigurationOutput { return v.S3 }).(StorageConfigurationS3StorageConfigurationOutput)
}

// A list of key-value pairs that contain metadata for the asset model.
func (o StorageConfigurationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *StorageConfiguration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageConfigurationInput)(nil)).Elem(), &StorageConfiguration{})
	pulumi.RegisterOutputType(StorageConfigurationOutput{})
}
