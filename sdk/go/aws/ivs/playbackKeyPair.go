// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ivs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html
type PlaybackKeyPair struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput `pulumi:"arn"`
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-publickeymaterial
	PublicKeyMaterial pulumi.StringOutput `pulumi:"publicKeyMaterial"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-tags
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewPlaybackKeyPair registers a new resource with the given unique name, arguments, and options.
func NewPlaybackKeyPair(ctx *pulumi.Context,
	name string, args *PlaybackKeyPairArgs, opts ...pulumi.ResourceOption) (*PlaybackKeyPair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKeyMaterial == nil {
		return nil, errors.New("invalid value for required argument 'PublicKeyMaterial'")
	}
	var resource PlaybackKeyPair
	err := ctx.RegisterResource("aws-native:IVS:PlaybackKeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaybackKeyPair gets an existing PlaybackKeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaybackKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaybackKeyPairState, opts ...pulumi.ResourceOption) (*PlaybackKeyPair, error) {
	var resource PlaybackKeyPair
	err := ctx.ReadResource("aws-native:IVS:PlaybackKeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlaybackKeyPair resources.
type playbackKeyPairState struct {
}

type PlaybackKeyPairState struct {
}

func (PlaybackKeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackKeyPairState)(nil)).Elem()
}

type playbackKeyPairArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-name
	Name *string `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-publickeymaterial
	PublicKeyMaterial string `pulumi:"publicKeyMaterial"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-tags
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a PlaybackKeyPair resource.
type PlaybackKeyPairArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-name
	Name pulumi.StringPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-publickeymaterial
	PublicKeyMaterial pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html#cfn-ivs-playbackkeypair-tags
	Tags aws.TagArrayInput
}

func (PlaybackKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackKeyPairArgs)(nil)).Elem()
}

type PlaybackKeyPairInput interface {
	pulumi.Input

	ToPlaybackKeyPairOutput() PlaybackKeyPairOutput
	ToPlaybackKeyPairOutputWithContext(ctx context.Context) PlaybackKeyPairOutput
}

func (*PlaybackKeyPair) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackKeyPair)(nil))
}

func (i *PlaybackKeyPair) ToPlaybackKeyPairOutput() PlaybackKeyPairOutput {
	return i.ToPlaybackKeyPairOutputWithContext(context.Background())
}

func (i *PlaybackKeyPair) ToPlaybackKeyPairOutputWithContext(ctx context.Context) PlaybackKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackKeyPairOutput)
}

type PlaybackKeyPairOutput struct{ *pulumi.OutputState }

func (PlaybackKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackKeyPair)(nil))
}

func (o PlaybackKeyPairOutput) ToPlaybackKeyPairOutput() PlaybackKeyPairOutput {
	return o
}

func (o PlaybackKeyPairOutput) ToPlaybackKeyPairOutputWithContext(ctx context.Context) PlaybackKeyPairOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PlaybackKeyPairOutput{})
}
