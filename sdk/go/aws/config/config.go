// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

// The access key for API operations. You can retrieve this from the ‘Security & Credentials’ section of the AWS console.
func GetAccessKey(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:accessKey")
}

// List of allowed AWS account IDs to prevent you from mistakenly using an incorrect one. Conflicts with `forbiddenAccountIds`.
func GetAllowedAccountIds(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:allowedAccountIds")
}

// Configuration for retrieving temporary credentials from the STS service.
func GetAssumeRole(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:assumeRole")
}

// Configuration block with resource tag settings to apply across all resources handled by this provider. This is designed to replace redundant per-resource `tags` configurations. Provider tags can be overridden with new values, but not excluded from specific resources. To override provider tag values, use the `tags` argument within a resource to configure new tag values for matching keys.
func GetDefaultTags(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:defaultTags")
}

// Configuration block for customizing service endpoints.
func GetEndpoints(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:endpoints")
}

// List of forbidden AWS account IDs to prevent you from mistakenly using the wrong one (and potentially end up destroying a live environment). Conflicts with `allowedAccountIds`.
func GetForbiddenAccountIds(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:forbiddenAccountIds")
}

// Configuration block with resource tag settings to ignore across all resources handled by this provider (except any individual service tag resources such as `ec2.Tag`) for situations where external systems are managing certain resource tags.
func GetIgnoreTags(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:ignoreTags")
}

// Explicitly allow the provider to perform "insecure" SSL requests. If omitted,default value is `false`.
func GetInsecure(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "aws-native:insecure")
}

// The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.
func GetMaxRetries(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "aws-native:maxRetries")
}

// The profile for API operations. If not set, the default profile created with `aws configure` will be used.
func GetProfile(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:profile")
}

// The region where AWS operations will take place. Examples are `us-east-1`, `us-west-2`, etc.
func GetRegion(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:region")
}

// Set this to true to force the request to use path-style addressing, i.e., `http://s3.amazonaws.com/BUCKET/KEY`. By default, the S3 client will use virtual hosted bucket addressing when possible (`http://BUCKET.s3.amazonaws.com/KEY`). Specific to the Amazon S3 service.
func GetS3ForcePathStyle(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "aws-native:s3ForcePathStyle")
}

// The secret key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console.
func GetSecretKey(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:secretKey")
}

// The path to the shared credentials file. If not set this defaults to `~/.aws/credentials`.
func GetSharedCredentialsFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:sharedCredentialsFile")
}

// Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS available/implemented.
func GetSkipCredentialsValidation(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "aws-native:skipCredentialsValidation")
	if err == nil {
		return v
	}
	return true
}

// Skip getting the supported EC2 platforms. Used by users that don't have `ec2:DescribeAccountAttributes` permissions.
func GetSkipGetEc2Platforms(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "aws-native:skipGetEc2Platforms")
	if err == nil {
		return v
	}
	return true
}

// Skip the AWS Metadata API check. Useful for AWS API implementations that do not have a metadata API endpoint. Setting to true prevents Pulumi from authenticating via the Metadata API. You may need to use other authentication methods like static credentials, configuration variables, or environment variables.
func GetSkipMetadataApiCheck(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "aws-native:skipMetadataApiCheck")
	if err == nil {
		return v
	}
	return true
}

// Skip static validation of region name. Used by users of alternative AWS-like APIs or users with access to regions that are not public.
func GetSkipRegionValidation(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "aws-native:skipRegionValidation")
	if err == nil {
		return v
	}
	return true
}

// Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.
func GetSkipRequestingAccountId(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "aws-native:skipRequestingAccountId")
}

// Session token for validating temporary credentials. Typically provided after successful identity federation or Multi-Factor Authentication (MFA) login. With MFA login, this is the session token provided afterward, not the 6 digit MFA code used to get temporary credentials.
func GetToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "aws-native:token")
}
