// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Backup::LogicallyAirGappedBackupVault
func LookupLogicallyAirGappedBackupVault(ctx *pulumi.Context, args *LookupLogicallyAirGappedBackupVaultArgs, opts ...pulumi.InvokeOption) (*LookupLogicallyAirGappedBackupVaultResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogicallyAirGappedBackupVaultResult
	err := ctx.Invoke("aws-native:backup:getLogicallyAirGappedBackupVault", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLogicallyAirGappedBackupVaultArgs struct {
	// The name of a logical container where backups are stored. Logically air-gapped backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.
	BackupVaultName string `pulumi:"backupVaultName"`
}

type LookupLogicallyAirGappedBackupVaultResult struct {
	// The backup vault access policy document in JSON format.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Backup::LogicallyAirGappedBackupVault` for more information about the expected schema for this property.
	AccessPolicy interface{} `pulumi:"accessPolicy"`
	// The ARN of the backup vault.
	BackupVaultArn *string `pulumi:"backupVaultArn"`
	// The tags to assign to the vault.
	BackupVaultTags map[string]string `pulumi:"backupVaultTags"`
	// The ARN of the server-side encryption key.
	EncryptionKeyArn *string `pulumi:"encryptionKeyArn"`
	// Returns event notifications for the specified backup vault.
	Notifications *LogicallyAirGappedBackupVaultNotificationObjectType `pulumi:"notifications"`
	// The vault state. The possible values are `CREATING` , `AVAILABLE` , and `FAILED` .
	VaultState *string `pulumi:"vaultState"`
	// The vault type. The possible values are `BACKUP_VAULT` and `LOGICALLY_AIR_GAPPED_BACKUP_VAULT` .
	VaultType *string `pulumi:"vaultType"`
}

func LookupLogicallyAirGappedBackupVaultOutput(ctx *pulumi.Context, args LookupLogicallyAirGappedBackupVaultOutputArgs, opts ...pulumi.InvokeOption) LookupLogicallyAirGappedBackupVaultResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLogicallyAirGappedBackupVaultResultOutput, error) {
			args := v.(LookupLogicallyAirGappedBackupVaultArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:backup:getLogicallyAirGappedBackupVault", args, LookupLogicallyAirGappedBackupVaultResultOutput{}, options).(LookupLogicallyAirGappedBackupVaultResultOutput), nil
		}).(LookupLogicallyAirGappedBackupVaultResultOutput)
}

type LookupLogicallyAirGappedBackupVaultOutputArgs struct {
	// The name of a logical container where backups are stored. Logically air-gapped backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.
	BackupVaultName pulumi.StringInput `pulumi:"backupVaultName"`
}

func (LookupLogicallyAirGappedBackupVaultOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogicallyAirGappedBackupVaultArgs)(nil)).Elem()
}

type LookupLogicallyAirGappedBackupVaultResultOutput struct{ *pulumi.OutputState }

func (LookupLogicallyAirGappedBackupVaultResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogicallyAirGappedBackupVaultResult)(nil)).Elem()
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) ToLookupLogicallyAirGappedBackupVaultResultOutput() LookupLogicallyAirGappedBackupVaultResultOutput {
	return o
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) ToLookupLogicallyAirGappedBackupVaultResultOutputWithContext(ctx context.Context) LookupLogicallyAirGappedBackupVaultResultOutput {
	return o
}

// The backup vault access policy document in JSON format.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Backup::LogicallyAirGappedBackupVault` for more information about the expected schema for this property.
func (o LookupLogicallyAirGappedBackupVaultResultOutput) AccessPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) interface{} { return v.AccessPolicy }).(pulumi.AnyOutput)
}

// The ARN of the backup vault.
func (o LookupLogicallyAirGappedBackupVaultResultOutput) BackupVaultArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.BackupVaultArn }).(pulumi.StringPtrOutput)
}

// The tags to assign to the vault.
func (o LookupLogicallyAirGappedBackupVaultResultOutput) BackupVaultTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) map[string]string { return v.BackupVaultTags }).(pulumi.StringMapOutput)
}

// The ARN of the server-side encryption key.
func (o LookupLogicallyAirGappedBackupVaultResultOutput) EncryptionKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.EncryptionKeyArn }).(pulumi.StringPtrOutput)
}

// Returns event notifications for the specified backup vault.
func (o LookupLogicallyAirGappedBackupVaultResultOutput) Notifications() LogicallyAirGappedBackupVaultNotificationObjectTypePtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *LogicallyAirGappedBackupVaultNotificationObjectType {
		return v.Notifications
	}).(LogicallyAirGappedBackupVaultNotificationObjectTypePtrOutput)
}

// The vault state. The possible values are `CREATING` , `AVAILABLE` , and `FAILED` .
func (o LookupLogicallyAirGappedBackupVaultResultOutput) VaultState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.VaultState }).(pulumi.StringPtrOutput)
}

// The vault type. The possible values are `BACKUP_VAULT` and `LOGICALLY_AIR_GAPPED_BACKUP_VAULT` .
func (o LookupLogicallyAirGappedBackupVaultResultOutput) VaultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.VaultType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogicallyAirGappedBackupVaultResultOutput{})
}
