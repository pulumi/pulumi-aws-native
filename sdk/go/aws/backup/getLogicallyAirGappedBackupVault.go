// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Backup::LogicallyAirGappedBackupVault
func LookupLogicallyAirGappedBackupVault(ctx *pulumi.Context, args *LookupLogicallyAirGappedBackupVaultArgs, opts ...pulumi.InvokeOption) (*LookupLogicallyAirGappedBackupVaultResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogicallyAirGappedBackupVaultResult
	err := ctx.Invoke("aws-native:backup:getLogicallyAirGappedBackupVault", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLogicallyAirGappedBackupVaultArgs struct {
	BackupVaultName string `pulumi:"backupVaultName"`
}

type LookupLogicallyAirGappedBackupVaultResult struct {
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Backup::LogicallyAirGappedBackupVault` for more information about the expected schema for this property.
	AccessPolicy     interface{}                                          `pulumi:"accessPolicy"`
	BackupVaultArn   *string                                              `pulumi:"backupVaultArn"`
	BackupVaultTags  map[string]string                                    `pulumi:"backupVaultTags"`
	EncryptionKeyArn *string                                              `pulumi:"encryptionKeyArn"`
	Notifications    *LogicallyAirGappedBackupVaultNotificationObjectType `pulumi:"notifications"`
	VaultState       *string                                              `pulumi:"vaultState"`
	VaultType        *string                                              `pulumi:"vaultType"`
}

func LookupLogicallyAirGappedBackupVaultOutput(ctx *pulumi.Context, args LookupLogicallyAirGappedBackupVaultOutputArgs, opts ...pulumi.InvokeOption) LookupLogicallyAirGappedBackupVaultResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLogicallyAirGappedBackupVaultResultOutput, error) {
			args := v.(LookupLogicallyAirGappedBackupVaultArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupLogicallyAirGappedBackupVaultResult
			secret, err := ctx.InvokePackageRaw("aws-native:backup:getLogicallyAirGappedBackupVault", args, &rv, "", opts...)
			if err != nil {
				return LookupLogicallyAirGappedBackupVaultResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupLogicallyAirGappedBackupVaultResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupLogicallyAirGappedBackupVaultResultOutput), nil
			}
			return output, nil
		}).(LookupLogicallyAirGappedBackupVaultResultOutput)
}

type LookupLogicallyAirGappedBackupVaultOutputArgs struct {
	BackupVaultName pulumi.StringInput `pulumi:"backupVaultName"`
}

func (LookupLogicallyAirGappedBackupVaultOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogicallyAirGappedBackupVaultArgs)(nil)).Elem()
}

type LookupLogicallyAirGappedBackupVaultResultOutput struct{ *pulumi.OutputState }

func (LookupLogicallyAirGappedBackupVaultResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogicallyAirGappedBackupVaultResult)(nil)).Elem()
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) ToLookupLogicallyAirGappedBackupVaultResultOutput() LookupLogicallyAirGappedBackupVaultResultOutput {
	return o
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) ToLookupLogicallyAirGappedBackupVaultResultOutputWithContext(ctx context.Context) LookupLogicallyAirGappedBackupVaultResultOutput {
	return o
}

// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Backup::LogicallyAirGappedBackupVault` for more information about the expected schema for this property.
func (o LookupLogicallyAirGappedBackupVaultResultOutput) AccessPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) interface{} { return v.AccessPolicy }).(pulumi.AnyOutput)
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) BackupVaultArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.BackupVaultArn }).(pulumi.StringPtrOutput)
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) BackupVaultTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) map[string]string { return v.BackupVaultTags }).(pulumi.StringMapOutput)
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) EncryptionKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.EncryptionKeyArn }).(pulumi.StringPtrOutput)
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) Notifications() LogicallyAirGappedBackupVaultNotificationObjectTypePtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *LogicallyAirGappedBackupVaultNotificationObjectType {
		return v.Notifications
	}).(LogicallyAirGappedBackupVaultNotificationObjectTypePtrOutput)
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) VaultState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.VaultState }).(pulumi.StringPtrOutput)
}

func (o LookupLogicallyAirGappedBackupVaultResultOutput) VaultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogicallyAirGappedBackupVaultResult) *string { return v.VaultType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogicallyAirGappedBackupVaultResultOutput{})
}
