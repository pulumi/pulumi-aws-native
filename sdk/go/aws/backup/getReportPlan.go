// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains detailed information about a report plan in AWS Backup Audit Manager.
func LookupReportPlan(ctx *pulumi.Context, args *LookupReportPlanArgs, opts ...pulumi.InvokeOption) (*LookupReportPlanResult, error) {
	var rv LookupReportPlanResult
	err := ctx.Invoke("aws-native:backup:getReportPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupReportPlanArgs struct {
	// An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
	ReportPlanArn string `pulumi:"reportPlanArn"`
}

type LookupReportPlanResult struct {
	// A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
	ReportDeliveryChannel *ReportDeliveryChannelProperties `pulumi:"reportDeliveryChannel"`
	// An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
	ReportPlanArn *string `pulumi:"reportPlanArn"`
	// An optional description of the report plan with a maximum of 1,024 characters.
	ReportPlanDescription *string `pulumi:"reportPlanDescription"`
	// Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
	ReportPlanTags []ReportPlanTag `pulumi:"reportPlanTags"`
	// Identifies the report template for the report. Reports are built using a report template.
	ReportSetting *ReportSettingProperties `pulumi:"reportSetting"`
}

func LookupReportPlanOutput(ctx *pulumi.Context, args LookupReportPlanOutputArgs, opts ...pulumi.InvokeOption) LookupReportPlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReportPlanResult, error) {
			args := v.(LookupReportPlanArgs)
			r, err := LookupReportPlan(ctx, &args, opts...)
			return *r, err
		}).(LookupReportPlanResultOutput)
}

type LookupReportPlanOutputArgs struct {
	// An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
	ReportPlanArn pulumi.StringInput `pulumi:"reportPlanArn"`
}

func (LookupReportPlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReportPlanArgs)(nil)).Elem()
}

type LookupReportPlanResultOutput struct{ *pulumi.OutputState }

func (LookupReportPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReportPlanResult)(nil)).Elem()
}

func (o LookupReportPlanResultOutput) ToLookupReportPlanResultOutput() LookupReportPlanResultOutput {
	return o
}

func (o LookupReportPlanResultOutput) ToLookupReportPlanResultOutputWithContext(ctx context.Context) LookupReportPlanResultOutput {
	return o
}

// A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
func (o LookupReportPlanResultOutput) ReportDeliveryChannel() ReportDeliveryChannelPropertiesPtrOutput {
	return o.ApplyT(func(v LookupReportPlanResult) *ReportDeliveryChannelProperties { return v.ReportDeliveryChannel }).(ReportDeliveryChannelPropertiesPtrOutput)
}

// An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
func (o LookupReportPlanResultOutput) ReportPlanArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupReportPlanResult) *string { return v.ReportPlanArn }).(pulumi.StringPtrOutput)
}

// An optional description of the report plan with a maximum of 1,024 characters.
func (o LookupReportPlanResultOutput) ReportPlanDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupReportPlanResult) *string { return v.ReportPlanDescription }).(pulumi.StringPtrOutput)
}

// Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
func (o LookupReportPlanResultOutput) ReportPlanTags() ReportPlanTagArrayOutput {
	return o.ApplyT(func(v LookupReportPlanResult) []ReportPlanTag { return v.ReportPlanTags }).(ReportPlanTagArrayOutput)
}

// Identifies the report template for the report. Reports are built using a report template.
func (o LookupReportPlanResultOutput) ReportSetting() ReportSettingPropertiesPtrOutput {
	return o.ApplyT(func(v LookupReportPlanResult) *ReportSettingProperties { return v.ReportSetting }).(ReportSettingPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReportPlanResultOutput{})
}
