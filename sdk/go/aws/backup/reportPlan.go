// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains detailed information about a report plan in AWS Backup Audit Manager.
type ReportPlan struct {
	pulumi.CustomResourceState

	// A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
	ReportDeliveryChannel ReportDeliveryChannelPropertiesOutput `pulumi:"reportDeliveryChannel"`
	// An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
	ReportPlanArn pulumi.StringOutput `pulumi:"reportPlanArn"`
	// An optional description of the report plan with a maximum of 1,024 characters.
	ReportPlanDescription pulumi.StringPtrOutput `pulumi:"reportPlanDescription"`
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
	ReportPlanName pulumi.StringPtrOutput `pulumi:"reportPlanName"`
	// Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
	ReportPlanTags ReportPlanTagArrayOutput `pulumi:"reportPlanTags"`
	// Identifies the report template for the report. Reports are built using a report template.
	ReportSetting ReportSettingPropertiesOutput `pulumi:"reportSetting"`
}

// NewReportPlan registers a new resource with the given unique name, arguments, and options.
func NewReportPlan(ctx *pulumi.Context,
	name string, args *ReportPlanArgs, opts ...pulumi.ResourceOption) (*ReportPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReportDeliveryChannel == nil {
		return nil, errors.New("invalid value for required argument 'ReportDeliveryChannel'")
	}
	if args.ReportSetting == nil {
		return nil, errors.New("invalid value for required argument 'ReportSetting'")
	}
	var resource ReportPlan
	err := ctx.RegisterResource("aws-native:backup:ReportPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportPlan gets an existing ReportPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportPlanState, opts ...pulumi.ResourceOption) (*ReportPlan, error) {
	var resource ReportPlan
	err := ctx.ReadResource("aws-native:backup:ReportPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportPlan resources.
type reportPlanState struct {
}

type ReportPlanState struct {
}

func (ReportPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportPlanState)(nil)).Elem()
}

type reportPlanArgs struct {
	// A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
	ReportDeliveryChannel ReportDeliveryChannelProperties `pulumi:"reportDeliveryChannel"`
	// An optional description of the report plan with a maximum of 1,024 characters.
	ReportPlanDescription *string `pulumi:"reportPlanDescription"`
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
	ReportPlanName *string `pulumi:"reportPlanName"`
	// Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
	ReportPlanTags []ReportPlanTag `pulumi:"reportPlanTags"`
	// Identifies the report template for the report. Reports are built using a report template.
	ReportSetting ReportSettingProperties `pulumi:"reportSetting"`
}

// The set of arguments for constructing a ReportPlan resource.
type ReportPlanArgs struct {
	// A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
	ReportDeliveryChannel ReportDeliveryChannelPropertiesInput
	// An optional description of the report plan with a maximum of 1,024 characters.
	ReportPlanDescription pulumi.StringPtrInput
	// The unique name of the report plan. The name must be between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
	ReportPlanName pulumi.StringPtrInput
	// Metadata that you can assign to help organize the report plans that you create. Each tag is a key-value pair.
	ReportPlanTags ReportPlanTagArrayInput
	// Identifies the report template for the report. Reports are built using a report template.
	ReportSetting ReportSettingPropertiesInput
}

func (ReportPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportPlanArgs)(nil)).Elem()
}

type ReportPlanInput interface {
	pulumi.Input

	ToReportPlanOutput() ReportPlanOutput
	ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput
}

func (*ReportPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlan)(nil))
}

func (i *ReportPlan) ToReportPlanOutput() ReportPlanOutput {
	return i.ToReportPlanOutputWithContext(context.Background())
}

func (i *ReportPlan) ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportPlanOutput)
}

type ReportPlanOutput struct{ *pulumi.OutputState }

func (ReportPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportPlan)(nil))
}

func (o ReportPlanOutput) ToReportPlanOutput() ReportPlanOutput {
	return o
}

func (o ReportPlanOutput) ToReportPlanOutputWithContext(ctx context.Context) ReportPlanOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ReportPlanOutput{})
}
