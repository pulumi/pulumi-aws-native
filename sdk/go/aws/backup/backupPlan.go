// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Backup::BackupPlan
type BackupPlan struct {
	pulumi.CustomResourceState

	// Specifies an object containing properties used to create a backup plan.
	BackupPlan BackupPlanResourceTypeOutput `pulumi:"backupPlan"`
	// An Amazon Resource Name (ARN) that uniquely identifies a backup plan; for example, `arn:aws:backup:us-east-1:123456789012:plan:8F81F553-3A74-4A3F-B93D-B3360DC80C50` .
	BackupPlanArn pulumi.StringOutput `pulumi:"backupPlanArn"`
	// Uniquely identifies a backup plan.
	BackupPlanId pulumi.StringOutput `pulumi:"backupPlanId"`
	// The tags to assign to the backup plan.
	BackupPlanTags pulumi.StringMapOutput `pulumi:"backupPlanTags"`
	// Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes long. Version Ids cannot be edited.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewBackupPlan registers a new resource with the given unique name, arguments, and options.
func NewBackupPlan(ctx *pulumi.Context,
	name string, args *BackupPlanArgs, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPlan == nil {
		return nil, errors.New("invalid value for required argument 'BackupPlan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupPlan
	err := ctx.RegisterResource("aws-native:backup:BackupPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPlan gets an existing BackupPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPlanState, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	var resource BackupPlan
	err := ctx.ReadResource("aws-native:backup:BackupPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPlan resources.
type backupPlanState struct {
}

type BackupPlanState struct {
}

func (BackupPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanState)(nil)).Elem()
}

type backupPlanArgs struct {
	// Specifies an object containing properties used to create a backup plan.
	BackupPlan BackupPlanResourceType `pulumi:"backupPlan"`
	// The tags to assign to the backup plan.
	BackupPlanTags map[string]string `pulumi:"backupPlanTags"`
}

// The set of arguments for constructing a BackupPlan resource.
type BackupPlanArgs struct {
	// Specifies an object containing properties used to create a backup plan.
	BackupPlan BackupPlanResourceTypeInput
	// The tags to assign to the backup plan.
	BackupPlanTags pulumi.StringMapInput
}

func (BackupPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanArgs)(nil)).Elem()
}

type BackupPlanInput interface {
	pulumi.Input

	ToBackupPlanOutput() BackupPlanOutput
	ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput
}

func (*BackupPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (i *BackupPlan) ToBackupPlanOutput() BackupPlanOutput {
	return i.ToBackupPlanOutputWithContext(context.Background())
}

func (i *BackupPlan) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanOutput)
}

type BackupPlanOutput struct{ *pulumi.OutputState }

func (BackupPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (o BackupPlanOutput) ToBackupPlanOutput() BackupPlanOutput {
	return o
}

func (o BackupPlanOutput) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return o
}

// Specifies an object containing properties used to create a backup plan.
func (o BackupPlanOutput) BackupPlan() BackupPlanResourceTypeOutput {
	return o.ApplyT(func(v *BackupPlan) BackupPlanResourceTypeOutput { return v.BackupPlan }).(BackupPlanResourceTypeOutput)
}

// An Amazon Resource Name (ARN) that uniquely identifies a backup plan; for example, `arn:aws:backup:us-east-1:123456789012:plan:8F81F553-3A74-4A3F-B93D-B3360DC80C50` .
func (o BackupPlanOutput) BackupPlanArn() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.BackupPlanArn }).(pulumi.StringOutput)
}

// Uniquely identifies a backup plan.
func (o BackupPlanOutput) BackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.BackupPlanId }).(pulumi.StringOutput)
}

// The tags to assign to the backup plan.
func (o BackupPlanOutput) BackupPlanTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringMapOutput { return v.BackupPlanTags }).(pulumi.StringMapOutput)
}

// Unique, randomly generated, Unicode, UTF-8 encoded strings that are at most 1,024 bytes long. Version Ids cannot be edited.
func (o BackupPlanOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanInput)(nil)).Elem(), &BackupPlan{})
	pulumi.RegisterOutputType(BackupPlanOutput{})
}
