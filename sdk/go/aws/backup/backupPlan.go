// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Backup::BackupPlan
type BackupPlan struct {
	pulumi.CustomResourceState

	BackupPlan     BackupPlanBackupPlanResourceTypeOutput `pulumi:"backupPlan"`
	BackupPlanArn  pulumi.StringOutput                    `pulumi:"backupPlanArn"`
	BackupPlanId   pulumi.StringOutput                    `pulumi:"backupPlanId"`
	BackupPlanTags pulumi.AnyOutput                       `pulumi:"backupPlanTags"`
	VersionId      pulumi.StringOutput                    `pulumi:"versionId"`
}

// NewBackupPlan registers a new resource with the given unique name, arguments, and options.
func NewBackupPlan(ctx *pulumi.Context,
	name string, args *BackupPlanArgs, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPlan == nil {
		return nil, errors.New("invalid value for required argument 'BackupPlan'")
	}
	var resource BackupPlan
	err := ctx.RegisterResource("aws-native:backup:BackupPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPlan gets an existing BackupPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPlanState, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	var resource BackupPlan
	err := ctx.ReadResource("aws-native:backup:BackupPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPlan resources.
type backupPlanState struct {
}

type BackupPlanState struct {
}

func (BackupPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanState)(nil)).Elem()
}

type backupPlanArgs struct {
	BackupPlan     BackupPlanBackupPlanResourceType `pulumi:"backupPlan"`
	BackupPlanTags interface{}                      `pulumi:"backupPlanTags"`
}

// The set of arguments for constructing a BackupPlan resource.
type BackupPlanArgs struct {
	BackupPlan     BackupPlanBackupPlanResourceTypeInput
	BackupPlanTags pulumi.Input
}

func (BackupPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanArgs)(nil)).Elem()
}

type BackupPlanInput interface {
	pulumi.Input

	ToBackupPlanOutput() BackupPlanOutput
	ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput
}

func (*BackupPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupPlan)(nil))
}

func (i *BackupPlan) ToBackupPlanOutput() BackupPlanOutput {
	return i.ToBackupPlanOutputWithContext(context.Background())
}

func (i *BackupPlan) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanOutput)
}

type BackupPlanOutput struct{ *pulumi.OutputState }

func (BackupPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupPlan)(nil))
}

func (o BackupPlanOutput) ToBackupPlanOutput() BackupPlanOutput {
	return o
}

func (o BackupPlanOutput) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(BackupPlanOutput{})
}
