// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Backup::BackupSelection
type BackupSelection struct {
	pulumi.CustomResourceState

	// Uniquely identifies the backup selection.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Uniquely identifies a backup plan.
	BackupPlanId pulumi.StringOutput `pulumi:"backupPlanId"`
	// Specifies an object containing properties used to assign a set of resources to a backup plan.
	BackupSelection BackupSelectionResourceTypeOutput `pulumi:"backupSelection"`
	// Uniquely identifies a request to assign a set of resources to a backup plan.
	SelectionId pulumi.StringOutput `pulumi:"selectionId"`
}

// NewBackupSelection registers a new resource with the given unique name, arguments, and options.
func NewBackupSelection(ctx *pulumi.Context,
	name string, args *BackupSelectionArgs, opts ...pulumi.ResourceOption) (*BackupSelection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPlanId == nil {
		return nil, errors.New("invalid value for required argument 'BackupPlanId'")
	}
	if args.BackupSelection == nil {
		return nil, errors.New("invalid value for required argument 'BackupSelection'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"backupPlanId",
		"backupSelection",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupSelection
	err := ctx.RegisterResource("aws-native:backup:BackupSelection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupSelection gets an existing BackupSelection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupSelection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupSelectionState, opts ...pulumi.ResourceOption) (*BackupSelection, error) {
	var resource BackupSelection
	err := ctx.ReadResource("aws-native:backup:BackupSelection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupSelection resources.
type backupSelectionState struct {
}

type BackupSelectionState struct {
}

func (BackupSelectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupSelectionState)(nil)).Elem()
}

type backupSelectionArgs struct {
	// Uniquely identifies a backup plan.
	BackupPlanId string `pulumi:"backupPlanId"`
	// Specifies an object containing properties used to assign a set of resources to a backup plan.
	BackupSelection BackupSelectionResourceType `pulumi:"backupSelection"`
}

// The set of arguments for constructing a BackupSelection resource.
type BackupSelectionArgs struct {
	// Uniquely identifies a backup plan.
	BackupPlanId pulumi.StringInput
	// Specifies an object containing properties used to assign a set of resources to a backup plan.
	BackupSelection BackupSelectionResourceTypeInput
}

func (BackupSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupSelectionArgs)(nil)).Elem()
}

type BackupSelectionInput interface {
	pulumi.Input

	ToBackupSelectionOutput() BackupSelectionOutput
	ToBackupSelectionOutputWithContext(ctx context.Context) BackupSelectionOutput
}

func (*BackupSelection) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSelection)(nil)).Elem()
}

func (i *BackupSelection) ToBackupSelectionOutput() BackupSelectionOutput {
	return i.ToBackupSelectionOutputWithContext(context.Background())
}

func (i *BackupSelection) ToBackupSelectionOutputWithContext(ctx context.Context) BackupSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSelectionOutput)
}

type BackupSelectionOutput struct{ *pulumi.OutputState }

func (BackupSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSelection)(nil)).Elem()
}

func (o BackupSelectionOutput) ToBackupSelectionOutput() BackupSelectionOutput {
	return o
}

func (o BackupSelectionOutput) ToBackupSelectionOutputWithContext(ctx context.Context) BackupSelectionOutput {
	return o
}

// Uniquely identifies the backup selection.
func (o BackupSelectionOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSelection) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Uniquely identifies a backup plan.
func (o BackupSelectionOutput) BackupPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSelection) pulumi.StringOutput { return v.BackupPlanId }).(pulumi.StringOutput)
}

// Specifies an object containing properties used to assign a set of resources to a backup plan.
func (o BackupSelectionOutput) BackupSelection() BackupSelectionResourceTypeOutput {
	return o.ApplyT(func(v *BackupSelection) BackupSelectionResourceTypeOutput { return v.BackupSelection }).(BackupSelectionResourceTypeOutput)
}

// Uniquely identifies a request to assign a set of resources to a backup plan.
func (o BackupSelectionOutput) SelectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSelection) pulumi.StringOutput { return v.SelectionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupSelectionInput)(nil)).Elem(), &BackupSelection{})
	pulumi.RegisterOutputType(BackupSelectionOutput{})
}
