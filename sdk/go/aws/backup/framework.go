// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains detailed information about a framework. Frameworks contain controls, which evaluate and report on your backup events and resources. Frameworks generate daily compliance results.
type Framework struct {
	pulumi.CustomResourceState

	// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC). The value of `CreationTime` is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
	CreationTime pulumi.Float64Output `pulumi:"creationTime"`
	// The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`
	DeploymentStatus pulumi.StringOutput `pulumi:"deploymentStatus"`
	// An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource
	FrameworkArn pulumi.StringOutput `pulumi:"frameworkArn"`
	// Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
	FrameworkControls FrameworkControlArrayOutput `pulumi:"frameworkControls"`
	// An optional description of the framework with a maximum 1,024 characters.
	FrameworkDescription pulumi.StringPtrOutput `pulumi:"frameworkDescription"`
	// The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
	FrameworkName pulumi.StringPtrOutput `pulumi:"frameworkName"`
	// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:
	//
	// `ACTIVE` when recording is turned on for all resources governed by the framework.
	//
	// `PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.
	//
	// `INACTIVE` when recording is turned off for all resources governed by the framework.
	//
	// `UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.
	FrameworkStatus pulumi.StringOutput `pulumi:"frameworkStatus"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	FrameworkTags FrameworkTagArrayOutput `pulumi:"frameworkTags"`
}

// NewFramework registers a new resource with the given unique name, arguments, and options.
func NewFramework(ctx *pulumi.Context,
	name string, args *FrameworkArgs, opts ...pulumi.ResourceOption) (*Framework, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FrameworkControls == nil {
		return nil, errors.New("invalid value for required argument 'FrameworkControls'")
	}
	var resource Framework
	err := ctx.RegisterResource("aws-native:backup:Framework", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFramework gets an existing Framework resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFramework(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrameworkState, opts ...pulumi.ResourceOption) (*Framework, error) {
	var resource Framework
	err := ctx.ReadResource("aws-native:backup:Framework", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Framework resources.
type frameworkState struct {
}

type FrameworkState struct {
}

func (FrameworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkState)(nil)).Elem()
}

type frameworkArgs struct {
	// Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
	FrameworkControls []FrameworkControl `pulumi:"frameworkControls"`
	// An optional description of the framework with a maximum 1,024 characters.
	FrameworkDescription *string `pulumi:"frameworkDescription"`
	// The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
	FrameworkName *string `pulumi:"frameworkName"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	FrameworkTags []FrameworkTag `pulumi:"frameworkTags"`
}

// The set of arguments for constructing a Framework resource.
type FrameworkArgs struct {
	// Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
	FrameworkControls FrameworkControlArrayInput
	// An optional description of the framework with a maximum 1,024 characters.
	FrameworkDescription pulumi.StringPtrInput
	// The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
	FrameworkName pulumi.StringPtrInput
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	FrameworkTags FrameworkTagArrayInput
}

func (FrameworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frameworkArgs)(nil)).Elem()
}

type FrameworkInput interface {
	pulumi.Input

	ToFrameworkOutput() FrameworkOutput
	ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput
}

func (*Framework) ElementType() reflect.Type {
	return reflect.TypeOf((*Framework)(nil))
}

func (i *Framework) ToFrameworkOutput() FrameworkOutput {
	return i.ToFrameworkOutputWithContext(context.Background())
}

func (i *Framework) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrameworkOutput)
}

type FrameworkOutput struct{ *pulumi.OutputState }

func (FrameworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Framework)(nil))
}

func (o FrameworkOutput) ToFrameworkOutput() FrameworkOutput {
	return o
}

func (o FrameworkOutput) ToFrameworkOutputWithContext(ctx context.Context) FrameworkOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FrameworkOutput{})
}
