// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rekognition

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::Rekognition::Collection type creates an Amazon Rekognition Collection. A collection is a logical grouping of information about detected faces which can later be referenced for searches on the group
type Collection struct {
	pulumi.CustomResourceState

	Arn          pulumi.StringOutput `pulumi:"arn"`
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// An array of key-value pairs to apply to this resource.
	Tags CollectionTagArrayOutput `pulumi:"tags"`
}

// NewCollection registers a new resource with the given unique name, arguments, and options.
func NewCollection(ctx *pulumi.Context,
	name string, args *CollectionArgs, opts ...pulumi.ResourceOption) (*Collection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	var resource Collection
	err := ctx.RegisterResource("aws-native:rekognition:Collection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollection gets an existing Collection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectionState, opts ...pulumi.ResourceOption) (*Collection, error) {
	var resource Collection
	err := ctx.ReadResource("aws-native:rekognition:Collection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Collection resources.
type collectionState struct {
}

type CollectionState struct {
}

func (CollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectionState)(nil)).Elem()
}

type collectionArgs struct {
	CollectionId string `pulumi:"collectionId"`
	// An array of key-value pairs to apply to this resource.
	Tags []CollectionTag `pulumi:"tags"`
}

// The set of arguments for constructing a Collection resource.
type CollectionArgs struct {
	CollectionId pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags CollectionTagArrayInput
}

func (CollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectionArgs)(nil)).Elem()
}

type CollectionInput interface {
	pulumi.Input

	ToCollectionOutput() CollectionOutput
	ToCollectionOutputWithContext(ctx context.Context) CollectionOutput
}

func (*Collection) ElementType() reflect.Type {
	return reflect.TypeOf((**Collection)(nil)).Elem()
}

func (i *Collection) ToCollectionOutput() CollectionOutput {
	return i.ToCollectionOutputWithContext(context.Background())
}

func (i *Collection) ToCollectionOutputWithContext(ctx context.Context) CollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionOutput)
}

type CollectionOutput struct{ *pulumi.OutputState }

func (CollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Collection)(nil)).Elem()
}

func (o CollectionOutput) ToCollectionOutput() CollectionOutput {
	return o
}

func (o CollectionOutput) ToCollectionOutputWithContext(ctx context.Context) CollectionOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionInput)(nil)).Elem(), &Collection{})
	pulumi.RegisterOutputType(CollectionOutput{})
}
