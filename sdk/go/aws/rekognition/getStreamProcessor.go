// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rekognition

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::Rekognition::StreamProcessor type is used to create an Amazon Rekognition StreamProcessor that you can use to analyze streaming videos.
func LookupStreamProcessor(ctx *pulumi.Context, args *LookupStreamProcessorArgs, opts ...pulumi.InvokeOption) (*LookupStreamProcessorResult, error) {
	var rv LookupStreamProcessorResult
	err := ctx.Invoke("aws-native:rekognition:getStreamProcessor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStreamProcessorArgs struct {
	// Name of the stream processor. It's an identifier you assign to the stream processor. You can use it to manage the stream processor.
	Name string `pulumi:"name"`
}

type LookupStreamProcessorResult struct {
	Arn *string `pulumi:"arn"`
	// Current status of the stream processor.
	Status *string `pulumi:"status"`
	// Detailed status message about the stream processor.
	StatusMessage *string `pulumi:"statusMessage"`
	// An array of key-value pairs to apply to this resource.
	Tags []StreamProcessorTag `pulumi:"tags"`
}

func LookupStreamProcessorOutput(ctx *pulumi.Context, args LookupStreamProcessorOutputArgs, opts ...pulumi.InvokeOption) LookupStreamProcessorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStreamProcessorResult, error) {
			args := v.(LookupStreamProcessorArgs)
			r, err := LookupStreamProcessor(ctx, &args, opts...)
			var s LookupStreamProcessorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStreamProcessorResultOutput)
}

type LookupStreamProcessorOutputArgs struct {
	// Name of the stream processor. It's an identifier you assign to the stream processor. You can use it to manage the stream processor.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupStreamProcessorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamProcessorArgs)(nil)).Elem()
}

type LookupStreamProcessorResultOutput struct{ *pulumi.OutputState }

func (LookupStreamProcessorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamProcessorResult)(nil)).Elem()
}

func (o LookupStreamProcessorResultOutput) ToLookupStreamProcessorResultOutput() LookupStreamProcessorResultOutput {
	return o
}

func (o LookupStreamProcessorResultOutput) ToLookupStreamProcessorResultOutputWithContext(ctx context.Context) LookupStreamProcessorResultOutput {
	return o
}

func (o LookupStreamProcessorResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamProcessorResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Current status of the stream processor.
func (o LookupStreamProcessorResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamProcessorResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Detailed status message about the stream processor.
func (o LookupStreamProcessorResultOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamProcessorResult) *string { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupStreamProcessorResultOutput) Tags() StreamProcessorTagArrayOutput {
	return o.ApplyT(func(v LookupStreamProcessorResult) []StreamProcessorTag { return v.Tags }).(StreamProcessorTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamProcessorResultOutput{})
}
