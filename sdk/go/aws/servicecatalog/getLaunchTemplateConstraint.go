// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ServiceCatalog::LaunchTemplateConstraint
func LookupLaunchTemplateConstraint(ctx *pulumi.Context, args *LookupLaunchTemplateConstraintArgs, opts ...pulumi.InvokeOption) (*LookupLaunchTemplateConstraintResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLaunchTemplateConstraintResult
	err := ctx.Invoke("aws-native:servicecatalog:getLaunchTemplateConstraint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLaunchTemplateConstraintArgs struct {
	// Unique identifier for the constraint
	Id string `pulumi:"id"`
}

type LookupLaunchTemplateConstraintResult struct {
	// The description of the constraint.
	Description *string `pulumi:"description"`
	// Unique identifier for the constraint
	Id *string `pulumi:"id"`
	// A json encoded string of the template constraint rules
	Rules *string `pulumi:"rules"`
}

func LookupLaunchTemplateConstraintOutput(ctx *pulumi.Context, args LookupLaunchTemplateConstraintOutputArgs, opts ...pulumi.InvokeOption) LookupLaunchTemplateConstraintResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLaunchTemplateConstraintResultOutput, error) {
			args := v.(LookupLaunchTemplateConstraintArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:servicecatalog:getLaunchTemplateConstraint", args, LookupLaunchTemplateConstraintResultOutput{}, options).(LookupLaunchTemplateConstraintResultOutput), nil
		}).(LookupLaunchTemplateConstraintResultOutput)
}

type LookupLaunchTemplateConstraintOutputArgs struct {
	// Unique identifier for the constraint
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupLaunchTemplateConstraintOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchTemplateConstraintArgs)(nil)).Elem()
}

type LookupLaunchTemplateConstraintResultOutput struct{ *pulumi.OutputState }

func (LookupLaunchTemplateConstraintResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchTemplateConstraintResult)(nil)).Elem()
}

func (o LookupLaunchTemplateConstraintResultOutput) ToLookupLaunchTemplateConstraintResultOutput() LookupLaunchTemplateConstraintResultOutput {
	return o
}

func (o LookupLaunchTemplateConstraintResultOutput) ToLookupLaunchTemplateConstraintResultOutputWithContext(ctx context.Context) LookupLaunchTemplateConstraintResultOutput {
	return o
}

// The description of the constraint.
func (o LookupLaunchTemplateConstraintResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchTemplateConstraintResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the constraint
func (o LookupLaunchTemplateConstraintResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchTemplateConstraintResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A json encoded string of the template constraint rules
func (o LookupLaunchTemplateConstraintResultOutput) Rules() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchTemplateConstraintResult) *string { return v.Rules }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLaunchTemplateConstraintResultOutput{})
}
