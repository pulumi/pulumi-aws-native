// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ServiceCatalog::LaunchNotificationConstraint
//
// Deprecated: LaunchNotificationConstraint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type LaunchNotificationConstraint struct {
	pulumi.CustomResourceState

	AcceptLanguage   pulumi.StringPtrOutput   `pulumi:"acceptLanguage"`
	Description      pulumi.StringPtrOutput   `pulumi:"description"`
	NotificationArns pulumi.StringArrayOutput `pulumi:"notificationArns"`
	PortfolioId      pulumi.StringOutput      `pulumi:"portfolioId"`
	ProductId        pulumi.StringOutput      `pulumi:"productId"`
}

// NewLaunchNotificationConstraint registers a new resource with the given unique name, arguments, and options.
func NewLaunchNotificationConstraint(ctx *pulumi.Context,
	name string, args *LaunchNotificationConstraintArgs, opts ...pulumi.ResourceOption) (*LaunchNotificationConstraint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationArns == nil {
		return nil, errors.New("invalid value for required argument 'NotificationArns'")
	}
	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	var resource LaunchNotificationConstraint
	err := ctx.RegisterResource("aws-native:servicecatalog:LaunchNotificationConstraint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLaunchNotificationConstraint gets an existing LaunchNotificationConstraint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLaunchNotificationConstraint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LaunchNotificationConstraintState, opts ...pulumi.ResourceOption) (*LaunchNotificationConstraint, error) {
	var resource LaunchNotificationConstraint
	err := ctx.ReadResource("aws-native:servicecatalog:LaunchNotificationConstraint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LaunchNotificationConstraint resources.
type launchNotificationConstraintState struct {
}

type LaunchNotificationConstraintState struct {
}

func (LaunchNotificationConstraintState) ElementType() reflect.Type {
	return reflect.TypeOf((*launchNotificationConstraintState)(nil)).Elem()
}

type launchNotificationConstraintArgs struct {
	AcceptLanguage   *string  `pulumi:"acceptLanguage"`
	Description      *string  `pulumi:"description"`
	NotificationArns []string `pulumi:"notificationArns"`
	PortfolioId      string   `pulumi:"portfolioId"`
	ProductId        string   `pulumi:"productId"`
}

// The set of arguments for constructing a LaunchNotificationConstraint resource.
type LaunchNotificationConstraintArgs struct {
	AcceptLanguage   pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	NotificationArns pulumi.StringArrayInput
	PortfolioId      pulumi.StringInput
	ProductId        pulumi.StringInput
}

func (LaunchNotificationConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*launchNotificationConstraintArgs)(nil)).Elem()
}

type LaunchNotificationConstraintInput interface {
	pulumi.Input

	ToLaunchNotificationConstraintOutput() LaunchNotificationConstraintOutput
	ToLaunchNotificationConstraintOutputWithContext(ctx context.Context) LaunchNotificationConstraintOutput
}

func (*LaunchNotificationConstraint) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchNotificationConstraint)(nil))
}

func (i *LaunchNotificationConstraint) ToLaunchNotificationConstraintOutput() LaunchNotificationConstraintOutput {
	return i.ToLaunchNotificationConstraintOutputWithContext(context.Background())
}

func (i *LaunchNotificationConstraint) ToLaunchNotificationConstraintOutputWithContext(ctx context.Context) LaunchNotificationConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchNotificationConstraintOutput)
}

type LaunchNotificationConstraintOutput struct{ *pulumi.OutputState }

func (LaunchNotificationConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchNotificationConstraint)(nil))
}

func (o LaunchNotificationConstraintOutput) ToLaunchNotificationConstraintOutput() LaunchNotificationConstraintOutput {
	return o
}

func (o LaunchNotificationConstraintOutput) ToLaunchNotificationConstraintOutputWithContext(ctx context.Context) LaunchNotificationConstraintOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LaunchNotificationConstraintOutput{})
}
