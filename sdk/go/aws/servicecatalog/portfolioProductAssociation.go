// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ServiceCatalog::PortfolioProductAssociation
type PortfolioProductAssociation struct {
	pulumi.CustomResourceState

	// The language code.
	AcceptLanguage pulumi.StringPtrOutput `pulumi:"acceptLanguage"`
	// The portfolio identifier.
	PortfolioId pulumi.StringPtrOutput `pulumi:"portfolioId"`
	// The product identifier.
	ProductId pulumi.StringPtrOutput `pulumi:"productId"`
	// The identifier of the source portfolio. The source portfolio must be a portfolio imported from a different account than the one creating the association. This account must have previously shared this portfolio with the account creating the association.
	SourcePortfolioId pulumi.StringPtrOutput `pulumi:"sourcePortfolioId"`
}

// NewPortfolioProductAssociation registers a new resource with the given unique name, arguments, and options.
func NewPortfolioProductAssociation(ctx *pulumi.Context,
	name string, args *PortfolioProductAssociationArgs, opts ...pulumi.ResourceOption) (*PortfolioProductAssociation, error) {
	if args == nil {
		args = &PortfolioProductAssociationArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"acceptLanguage",
		"portfolioId",
		"productId",
		"sourcePortfolioId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PortfolioProductAssociation
	err := ctx.RegisterResource("aws-native:servicecatalog:PortfolioProductAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortfolioProductAssociation gets an existing PortfolioProductAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortfolioProductAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortfolioProductAssociationState, opts ...pulumi.ResourceOption) (*PortfolioProductAssociation, error) {
	var resource PortfolioProductAssociation
	err := ctx.ReadResource("aws-native:servicecatalog:PortfolioProductAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortfolioProductAssociation resources.
type portfolioProductAssociationState struct {
}

type PortfolioProductAssociationState struct {
}

func (PortfolioProductAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioProductAssociationState)(nil)).Elem()
}

type portfolioProductAssociationArgs struct {
	// The language code.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The portfolio identifier.
	PortfolioId *string `pulumi:"portfolioId"`
	// The product identifier.
	ProductId *string `pulumi:"productId"`
	// The identifier of the source portfolio. The source portfolio must be a portfolio imported from a different account than the one creating the association. This account must have previously shared this portfolio with the account creating the association.
	SourcePortfolioId *string `pulumi:"sourcePortfolioId"`
}

// The set of arguments for constructing a PortfolioProductAssociation resource.
type PortfolioProductAssociationArgs struct {
	// The language code.
	AcceptLanguage pulumi.StringPtrInput
	// The portfolio identifier.
	PortfolioId pulumi.StringPtrInput
	// The product identifier.
	ProductId pulumi.StringPtrInput
	// The identifier of the source portfolio. The source portfolio must be a portfolio imported from a different account than the one creating the association. This account must have previously shared this portfolio with the account creating the association.
	SourcePortfolioId pulumi.StringPtrInput
}

func (PortfolioProductAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portfolioProductAssociationArgs)(nil)).Elem()
}

type PortfolioProductAssociationInput interface {
	pulumi.Input

	ToPortfolioProductAssociationOutput() PortfolioProductAssociationOutput
	ToPortfolioProductAssociationOutputWithContext(ctx context.Context) PortfolioProductAssociationOutput
}

func (*PortfolioProductAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**PortfolioProductAssociation)(nil)).Elem()
}

func (i *PortfolioProductAssociation) ToPortfolioProductAssociationOutput() PortfolioProductAssociationOutput {
	return i.ToPortfolioProductAssociationOutputWithContext(context.Background())
}

func (i *PortfolioProductAssociation) ToPortfolioProductAssociationOutputWithContext(ctx context.Context) PortfolioProductAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortfolioProductAssociationOutput)
}

type PortfolioProductAssociationOutput struct{ *pulumi.OutputState }

func (PortfolioProductAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortfolioProductAssociation)(nil)).Elem()
}

func (o PortfolioProductAssociationOutput) ToPortfolioProductAssociationOutput() PortfolioProductAssociationOutput {
	return o
}

func (o PortfolioProductAssociationOutput) ToPortfolioProductAssociationOutputWithContext(ctx context.Context) PortfolioProductAssociationOutput {
	return o
}

// The language code.
func (o PortfolioProductAssociationOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortfolioProductAssociation) pulumi.StringPtrOutput { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

// The portfolio identifier.
func (o PortfolioProductAssociationOutput) PortfolioId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortfolioProductAssociation) pulumi.StringPtrOutput { return v.PortfolioId }).(pulumi.StringPtrOutput)
}

// The product identifier.
func (o PortfolioProductAssociationOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortfolioProductAssociation) pulumi.StringPtrOutput { return v.ProductId }).(pulumi.StringPtrOutput)
}

// The identifier of the source portfolio. The source portfolio must be a portfolio imported from a different account than the one creating the association. This account must have previously shared this portfolio with the account creating the association.
func (o PortfolioProductAssociationOutput) SourcePortfolioId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortfolioProductAssociation) pulumi.StringPtrOutput { return v.SourcePortfolioId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortfolioProductAssociationInput)(nil)).Elem(), &PortfolioProductAssociation{})
	pulumi.RegisterOutputType(PortfolioProductAssociationOutput{})
}
