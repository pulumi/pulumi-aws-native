// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ServiceCatalog::StackSetConstraint
//
// Deprecated: StackSetConstraint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type StackSetConstraint struct {
	pulumi.CustomResourceState

	AcceptLanguage       pulumi.StringPtrOutput   `pulumi:"acceptLanguage"`
	AccountList          pulumi.StringArrayOutput `pulumi:"accountList"`
	AdminRole            pulumi.StringOutput      `pulumi:"adminRole"`
	Description          pulumi.StringOutput      `pulumi:"description"`
	ExecutionRole        pulumi.StringOutput      `pulumi:"executionRole"`
	PortfolioId          pulumi.StringOutput      `pulumi:"portfolioId"`
	ProductId            pulumi.StringOutput      `pulumi:"productId"`
	RegionList           pulumi.StringArrayOutput `pulumi:"regionList"`
	StackInstanceControl pulumi.StringOutput      `pulumi:"stackInstanceControl"`
}

// NewStackSetConstraint registers a new resource with the given unique name, arguments, and options.
func NewStackSetConstraint(ctx *pulumi.Context,
	name string, args *StackSetConstraintArgs, opts ...pulumi.ResourceOption) (*StackSetConstraint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountList == nil {
		return nil, errors.New("invalid value for required argument 'AccountList'")
	}
	if args.AdminRole == nil {
		return nil, errors.New("invalid value for required argument 'AdminRole'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.ExecutionRole == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRole'")
	}
	if args.PortfolioId == nil {
		return nil, errors.New("invalid value for required argument 'PortfolioId'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.RegionList == nil {
		return nil, errors.New("invalid value for required argument 'RegionList'")
	}
	if args.StackInstanceControl == nil {
		return nil, errors.New("invalid value for required argument 'StackInstanceControl'")
	}
	var resource StackSetConstraint
	err := ctx.RegisterResource("aws-native:servicecatalog:StackSetConstraint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackSetConstraint gets an existing StackSetConstraint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackSetConstraint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackSetConstraintState, opts ...pulumi.ResourceOption) (*StackSetConstraint, error) {
	var resource StackSetConstraint
	err := ctx.ReadResource("aws-native:servicecatalog:StackSetConstraint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackSetConstraint resources.
type stackSetConstraintState struct {
}

type StackSetConstraintState struct {
}

func (StackSetConstraintState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackSetConstraintState)(nil)).Elem()
}

type stackSetConstraintArgs struct {
	AcceptLanguage       *string  `pulumi:"acceptLanguage"`
	AccountList          []string `pulumi:"accountList"`
	AdminRole            string   `pulumi:"adminRole"`
	Description          string   `pulumi:"description"`
	ExecutionRole        string   `pulumi:"executionRole"`
	PortfolioId          string   `pulumi:"portfolioId"`
	ProductId            string   `pulumi:"productId"`
	RegionList           []string `pulumi:"regionList"`
	StackInstanceControl string   `pulumi:"stackInstanceControl"`
}

// The set of arguments for constructing a StackSetConstraint resource.
type StackSetConstraintArgs struct {
	AcceptLanguage       pulumi.StringPtrInput
	AccountList          pulumi.StringArrayInput
	AdminRole            pulumi.StringInput
	Description          pulumi.StringInput
	ExecutionRole        pulumi.StringInput
	PortfolioId          pulumi.StringInput
	ProductId            pulumi.StringInput
	RegionList           pulumi.StringArrayInput
	StackInstanceControl pulumi.StringInput
}

func (StackSetConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackSetConstraintArgs)(nil)).Elem()
}

type StackSetConstraintInput interface {
	pulumi.Input

	ToStackSetConstraintOutput() StackSetConstraintOutput
	ToStackSetConstraintOutputWithContext(ctx context.Context) StackSetConstraintOutput
}

func (*StackSetConstraint) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetConstraint)(nil))
}

func (i *StackSetConstraint) ToStackSetConstraintOutput() StackSetConstraintOutput {
	return i.ToStackSetConstraintOutputWithContext(context.Background())
}

func (i *StackSetConstraint) ToStackSetConstraintOutputWithContext(ctx context.Context) StackSetConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetConstraintOutput)
}

type StackSetConstraintOutput struct{ *pulumi.OutputState }

func (StackSetConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetConstraint)(nil))
}

func (o StackSetConstraintOutput) ToStackSetConstraintOutput() StackSetConstraintOutput {
	return o
}

func (o StackSetConstraintOutput) ToStackSetConstraintOutputWithContext(ctx context.Context) StackSetConstraintOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StackSetConstraintOutput{})
}
