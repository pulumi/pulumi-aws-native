// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::ServiceCatalog::ResourceUpdateConstraint
func LookupResourceUpdateConstraint(ctx *pulumi.Context, args *LookupResourceUpdateConstraintArgs, opts ...pulumi.InvokeOption) (*LookupResourceUpdateConstraintResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourceUpdateConstraintResult
	err := ctx.Invoke("aws-native:servicecatalog:getResourceUpdateConstraint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupResourceUpdateConstraintArgs struct {
	// Unique identifier for the constraint
	Id string `pulumi:"id"`
}

type LookupResourceUpdateConstraintResult struct {
	// The description of the constraint
	Description *string `pulumi:"description"`
	// Unique identifier for the constraint
	Id *string `pulumi:"id"`
	// ALLOWED or NOT_ALLOWED, to permit or prevent changes to the tags on provisioned instances of the specified portfolio / product combination
	TagUpdateOnProvisionedProduct *string `pulumi:"tagUpdateOnProvisionedProduct"`
}

func LookupResourceUpdateConstraintOutput(ctx *pulumi.Context, args LookupResourceUpdateConstraintOutputArgs, opts ...pulumi.InvokeOption) LookupResourceUpdateConstraintResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupResourceUpdateConstraintResultOutput, error) {
			args := v.(LookupResourceUpdateConstraintArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:servicecatalog:getResourceUpdateConstraint", args, LookupResourceUpdateConstraintResultOutput{}, options).(LookupResourceUpdateConstraintResultOutput), nil
		}).(LookupResourceUpdateConstraintResultOutput)
}

type LookupResourceUpdateConstraintOutputArgs struct {
	// Unique identifier for the constraint
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupResourceUpdateConstraintOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceUpdateConstraintArgs)(nil)).Elem()
}

type LookupResourceUpdateConstraintResultOutput struct{ *pulumi.OutputState }

func (LookupResourceUpdateConstraintResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceUpdateConstraintResult)(nil)).Elem()
}

func (o LookupResourceUpdateConstraintResultOutput) ToLookupResourceUpdateConstraintResultOutput() LookupResourceUpdateConstraintResultOutput {
	return o
}

func (o LookupResourceUpdateConstraintResultOutput) ToLookupResourceUpdateConstraintResultOutputWithContext(ctx context.Context) LookupResourceUpdateConstraintResultOutput {
	return o
}

// The description of the constraint
func (o LookupResourceUpdateConstraintResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceUpdateConstraintResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the constraint
func (o LookupResourceUpdateConstraintResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceUpdateConstraintResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// ALLOWED or NOT_ALLOWED, to permit or prevent changes to the tags on provisioned instances of the specified portfolio / product combination
func (o LookupResourceUpdateConstraintResultOutput) TagUpdateOnProvisionedProduct() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceUpdateConstraintResult) *string { return v.TagUpdateOnProvisionedProduct }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResourceUpdateConstraintResultOutput{})
}
