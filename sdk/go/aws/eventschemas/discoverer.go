// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventschemas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EventSchemas::Discoverer
type Discoverer struct {
	pulumi.CustomResourceState

	// Defines whether event schemas from other accounts are discovered. Default is True.
	CrossAccount pulumi.BoolPtrOutput `pulumi:"crossAccount"`
	// A description for the discoverer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ARN of the discoverer.
	DiscovererArn pulumi.StringOutput `pulumi:"discovererArn"`
	// The Id of the discoverer.
	DiscovererId pulumi.StringOutput `pulumi:"discovererId"`
	// The ARN of the event bus.
	SourceArn pulumi.StringOutput `pulumi:"sourceArn"`
	// Defines the current state of the discoverer.
	State pulumi.StringOutput `pulumi:"state"`
	// Tags associated with the resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDiscoverer registers a new resource with the given unique name, arguments, and options.
func NewDiscoverer(ctx *pulumi.Context,
	name string, args *DiscovererArgs, opts ...pulumi.ResourceOption) (*Discoverer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"sourceArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Discoverer
	err := ctx.RegisterResource("aws-native:eventschemas:Discoverer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiscoverer gets an existing Discoverer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiscoverer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiscovererState, opts ...pulumi.ResourceOption) (*Discoverer, error) {
	var resource Discoverer
	err := ctx.ReadResource("aws-native:eventschemas:Discoverer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Discoverer resources.
type discovererState struct {
}

type DiscovererState struct {
}

func (DiscovererState) ElementType() reflect.Type {
	return reflect.TypeOf((*discovererState)(nil)).Elem()
}

type discovererArgs struct {
	// Defines whether event schemas from other accounts are discovered. Default is True.
	CrossAccount *bool `pulumi:"crossAccount"`
	// A description for the discoverer.
	Description *string `pulumi:"description"`
	// The ARN of the event bus.
	SourceArn string `pulumi:"sourceArn"`
	// Tags associated with the resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Discoverer resource.
type DiscovererArgs struct {
	// Defines whether event schemas from other accounts are discovered. Default is True.
	CrossAccount pulumi.BoolPtrInput
	// A description for the discoverer.
	Description pulumi.StringPtrInput
	// The ARN of the event bus.
	SourceArn pulumi.StringInput
	// Tags associated with the resource.
	Tags aws.TagArrayInput
}

func (DiscovererArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*discovererArgs)(nil)).Elem()
}

type DiscovererInput interface {
	pulumi.Input

	ToDiscovererOutput() DiscovererOutput
	ToDiscovererOutputWithContext(ctx context.Context) DiscovererOutput
}

func (*Discoverer) ElementType() reflect.Type {
	return reflect.TypeOf((**Discoverer)(nil)).Elem()
}

func (i *Discoverer) ToDiscovererOutput() DiscovererOutput {
	return i.ToDiscovererOutputWithContext(context.Background())
}

func (i *Discoverer) ToDiscovererOutputWithContext(ctx context.Context) DiscovererOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscovererOutput)
}

type DiscovererOutput struct{ *pulumi.OutputState }

func (DiscovererOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Discoverer)(nil)).Elem()
}

func (o DiscovererOutput) ToDiscovererOutput() DiscovererOutput {
	return o
}

func (o DiscovererOutput) ToDiscovererOutputWithContext(ctx context.Context) DiscovererOutput {
	return o
}

// Defines whether event schemas from other accounts are discovered. Default is True.
func (o DiscovererOutput) CrossAccount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Discoverer) pulumi.BoolPtrOutput { return v.CrossAccount }).(pulumi.BoolPtrOutput)
}

// A description for the discoverer.
func (o DiscovererOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Discoverer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ARN of the discoverer.
func (o DiscovererOutput) DiscovererArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Discoverer) pulumi.StringOutput { return v.DiscovererArn }).(pulumi.StringOutput)
}

// The Id of the discoverer.
func (o DiscovererOutput) DiscovererId() pulumi.StringOutput {
	return o.ApplyT(func(v *Discoverer) pulumi.StringOutput { return v.DiscovererId }).(pulumi.StringOutput)
}

// The ARN of the event bus.
func (o DiscovererOutput) SourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Discoverer) pulumi.StringOutput { return v.SourceArn }).(pulumi.StringOutput)
}

// Defines the current state of the discoverer.
func (o DiscovererOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Discoverer) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Tags associated with the resource.
func (o DiscovererOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Discoverer) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiscovererInput)(nil)).Elem(), &Discoverer{})
	pulumi.RegisterOutputType(DiscovererOutput{})
}
