// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package groundstation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS Ground Station config resource type for CloudFormation.
type Config struct {
	pulumi.CustomResourceState

	// The ARN of the config, such as `arn:aws:groundstation:us-east-2:1234567890:config/tracking/9940bf3b-d2ba-427e-9906-842b5e5d2296` .
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the config, such as `9940bf3b-d2ba-427e-9906-842b5e5d2296` .
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Object containing the parameters of a config. Only one subtype may be specified per config. See the subtype definitions for a description of each config subtype.
	ConfigData ConfigDataOutput `pulumi:"configData"`
	// The name of the config object.
	Name pulumi.StringOutput `pulumi:"name"`
	// Tags assigned to a resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of the config, such as `tracking` .
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewConfig registers a new resource with the given unique name, arguments, and options.
func NewConfig(ctx *pulumi.Context,
	name string, args *ConfigArgs, opts ...pulumi.ResourceOption) (*Config, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigData == nil {
		return nil, errors.New("invalid value for required argument 'ConfigData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Config
	err := ctx.RegisterResource("aws-native:groundstation:Config", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfig gets an existing Config resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigState, opts ...pulumi.ResourceOption) (*Config, error) {
	var resource Config
	err := ctx.ReadResource("aws-native:groundstation:Config", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Config resources.
type configState struct {
}

type ConfigState struct {
}

func (ConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*configState)(nil)).Elem()
}

type configArgs struct {
	// Object containing the parameters of a config. Only one subtype may be specified per config. See the subtype definitions for a description of each config subtype.
	ConfigData ConfigData `pulumi:"configData"`
	// The name of the config object.
	Name *string `pulumi:"name"`
	// Tags assigned to a resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Config resource.
type ConfigArgs struct {
	// Object containing the parameters of a config. Only one subtype may be specified per config. See the subtype definitions for a description of each config subtype.
	ConfigData ConfigDataInput
	// The name of the config object.
	Name pulumi.StringPtrInput
	// Tags assigned to a resource.
	Tags aws.TagArrayInput
}

func (ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configArgs)(nil)).Elem()
}

type ConfigInput interface {
	pulumi.Input

	ToConfigOutput() ConfigOutput
	ToConfigOutputWithContext(ctx context.Context) ConfigOutput
}

func (*Config) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (i *Config) ToConfigOutput() ConfigOutput {
	return i.ToConfigOutputWithContext(context.Background())
}

func (i *Config) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigOutput)
}

type ConfigOutput struct{ *pulumi.OutputState }

func (ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (o ConfigOutput) ToConfigOutput() ConfigOutput {
	return o
}

func (o ConfigOutput) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return o
}

// The ARN of the config, such as `arn:aws:groundstation:us-east-2:1234567890:config/tracking/9940bf3b-d2ba-427e-9906-842b5e5d2296` .
func (o ConfigOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Config) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the config, such as `9940bf3b-d2ba-427e-9906-842b5e5d2296` .
func (o ConfigOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Config) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Object containing the parameters of a config. Only one subtype may be specified per config. See the subtype definitions for a description of each config subtype.
func (o ConfigOutput) ConfigData() ConfigDataOutput {
	return o.ApplyT(func(v *Config) ConfigDataOutput { return v.ConfigData }).(ConfigDataOutput)
}

// The name of the config object.
func (o ConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Config) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Tags assigned to a resource.
func (o ConfigOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Config) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of the config, such as `tracking` .
func (o ConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Config) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigInput)(nil)).Elem(), &Config{})
	pulumi.RegisterOutputType(ConfigOutput{})
}
