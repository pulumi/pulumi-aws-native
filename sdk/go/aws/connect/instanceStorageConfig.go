// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Connect::InstanceStorageConfig
type InstanceStorageConfig struct {
	pulumi.CustomResourceState

	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// Connect Instance ID with which the storage config will be associated
	InstanceArn              pulumi.StringOutput                                    `pulumi:"instanceArn"`
	KinesisFirehoseConfig    InstanceStorageConfigKinesisFirehoseConfigPtrOutput    `pulumi:"kinesisFirehoseConfig"`
	KinesisStreamConfig      InstanceStorageConfigKinesisStreamConfigPtrOutput      `pulumi:"kinesisStreamConfig"`
	KinesisVideoStreamConfig InstanceStorageConfigKinesisVideoStreamConfigPtrOutput `pulumi:"kinesisVideoStreamConfig"`
	ResourceType             InstanceStorageConfigInstanceStorageResourceTypeOutput `pulumi:"resourceType"`
	S3Config                 InstanceStorageConfigS3ConfigPtrOutput                 `pulumi:"s3Config"`
	StorageType              InstanceStorageConfigStorageTypeOutput                 `pulumi:"storageType"`
}

// NewInstanceStorageConfig registers a new resource with the given unique name, arguments, and options.
func NewInstanceStorageConfig(ctx *pulumi.Context,
	name string, args *InstanceStorageConfigArgs, opts ...pulumi.ResourceOption) (*InstanceStorageConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	var resource InstanceStorageConfig
	err := ctx.RegisterResource("aws-native:connect:InstanceStorageConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceStorageConfig gets an existing InstanceStorageConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceStorageConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceStorageConfigState, opts ...pulumi.ResourceOption) (*InstanceStorageConfig, error) {
	var resource InstanceStorageConfig
	err := ctx.ReadResource("aws-native:connect:InstanceStorageConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceStorageConfig resources.
type instanceStorageConfigState struct {
}

type InstanceStorageConfigState struct {
}

func (InstanceStorageConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStorageConfigState)(nil)).Elem()
}

type instanceStorageConfigArgs struct {
	// Connect Instance ID with which the storage config will be associated
	InstanceArn              string                                           `pulumi:"instanceArn"`
	KinesisFirehoseConfig    *InstanceStorageConfigKinesisFirehoseConfig      `pulumi:"kinesisFirehoseConfig"`
	KinesisStreamConfig      *InstanceStorageConfigKinesisStreamConfig        `pulumi:"kinesisStreamConfig"`
	KinesisVideoStreamConfig *InstanceStorageConfigKinesisVideoStreamConfig   `pulumi:"kinesisVideoStreamConfig"`
	ResourceType             InstanceStorageConfigInstanceStorageResourceType `pulumi:"resourceType"`
	S3Config                 *InstanceStorageConfigS3Config                   `pulumi:"s3Config"`
	StorageType              InstanceStorageConfigStorageType                 `pulumi:"storageType"`
}

// The set of arguments for constructing a InstanceStorageConfig resource.
type InstanceStorageConfigArgs struct {
	// Connect Instance ID with which the storage config will be associated
	InstanceArn              pulumi.StringInput
	KinesisFirehoseConfig    InstanceStorageConfigKinesisFirehoseConfigPtrInput
	KinesisStreamConfig      InstanceStorageConfigKinesisStreamConfigPtrInput
	KinesisVideoStreamConfig InstanceStorageConfigKinesisVideoStreamConfigPtrInput
	ResourceType             InstanceStorageConfigInstanceStorageResourceTypeInput
	S3Config                 InstanceStorageConfigS3ConfigPtrInput
	StorageType              InstanceStorageConfigStorageTypeInput
}

func (InstanceStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStorageConfigArgs)(nil)).Elem()
}

type InstanceStorageConfigInput interface {
	pulumi.Input

	ToInstanceStorageConfigOutput() InstanceStorageConfigOutput
	ToInstanceStorageConfigOutputWithContext(ctx context.Context) InstanceStorageConfigOutput
}

func (*InstanceStorageConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStorageConfig)(nil)).Elem()
}

func (i *InstanceStorageConfig) ToInstanceStorageConfigOutput() InstanceStorageConfigOutput {
	return i.ToInstanceStorageConfigOutputWithContext(context.Background())
}

func (i *InstanceStorageConfig) ToInstanceStorageConfigOutputWithContext(ctx context.Context) InstanceStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStorageConfigOutput)
}

type InstanceStorageConfigOutput struct{ *pulumi.OutputState }

func (InstanceStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStorageConfig)(nil)).Elem()
}

func (o InstanceStorageConfigOutput) ToInstanceStorageConfigOutput() InstanceStorageConfigOutput {
	return o
}

func (o InstanceStorageConfigOutput) ToInstanceStorageConfigOutputWithContext(ctx context.Context) InstanceStorageConfigOutput {
	return o
}

func (o InstanceStorageConfigOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// Connect Instance ID with which the storage config will be associated
func (o InstanceStorageConfigOutput) InstanceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) pulumi.StringOutput { return v.InstanceArn }).(pulumi.StringOutput)
}

func (o InstanceStorageConfigOutput) KinesisFirehoseConfig() InstanceStorageConfigKinesisFirehoseConfigPtrOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) InstanceStorageConfigKinesisFirehoseConfigPtrOutput {
		return v.KinesisFirehoseConfig
	}).(InstanceStorageConfigKinesisFirehoseConfigPtrOutput)
}

func (o InstanceStorageConfigOutput) KinesisStreamConfig() InstanceStorageConfigKinesisStreamConfigPtrOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) InstanceStorageConfigKinesisStreamConfigPtrOutput {
		return v.KinesisStreamConfig
	}).(InstanceStorageConfigKinesisStreamConfigPtrOutput)
}

func (o InstanceStorageConfigOutput) KinesisVideoStreamConfig() InstanceStorageConfigKinesisVideoStreamConfigPtrOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) InstanceStorageConfigKinesisVideoStreamConfigPtrOutput {
		return v.KinesisVideoStreamConfig
	}).(InstanceStorageConfigKinesisVideoStreamConfigPtrOutput)
}

func (o InstanceStorageConfigOutput) ResourceType() InstanceStorageConfigInstanceStorageResourceTypeOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) InstanceStorageConfigInstanceStorageResourceTypeOutput {
		return v.ResourceType
	}).(InstanceStorageConfigInstanceStorageResourceTypeOutput)
}

func (o InstanceStorageConfigOutput) S3Config() InstanceStorageConfigS3ConfigPtrOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) InstanceStorageConfigS3ConfigPtrOutput { return v.S3Config }).(InstanceStorageConfigS3ConfigPtrOutput)
}

func (o InstanceStorageConfigOutput) StorageType() InstanceStorageConfigStorageTypeOutput {
	return o.ApplyT(func(v *InstanceStorageConfig) InstanceStorageConfigStorageTypeOutput { return v.StorageType }).(InstanceStorageConfigStorageTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStorageConfigInput)(nil)).Elem(), &InstanceStorageConfig{})
	pulumi.RegisterOutputType(InstanceStorageConfigOutput{})
}
