// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS:Connect::Rule
type Rule struct {
	pulumi.CustomResourceState

	// The list of actions that will be executed when a rule is triggered.
	Actions RuleActionsOutput `pulumi:"actions"`
	// The conditions of a rule.
	Function pulumi.StringOutput `pulumi:"function"`
	// The Amazon Resource Name (ARN) of the instance.
	InstanceArn pulumi.StringOutput `pulumi:"instanceArn"`
	// The name of the rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The publish status of a rule, either draft or published.
	PublishStatus RulePublishStatusOutput `pulumi:"publishStatus"`
	// The Amazon Resource Name (ARN) of the rule.
	RuleArn pulumi.StringOutput `pulumi:"ruleArn"`
	// One or more tags.
	Tags RuleTagArrayOutput `pulumi:"tags"`
	// The event source that triggers the rule.
	TriggerEventSource RuleTriggerEventSourceOutput `pulumi:"triggerEventSource"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Function == nil {
		return nil, errors.New("invalid value for required argument 'Function'")
	}
	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	if args.PublishStatus == nil {
		return nil, errors.New("invalid value for required argument 'PublishStatus'")
	}
	if args.TriggerEventSource == nil {
		return nil, errors.New("invalid value for required argument 'TriggerEventSource'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"instanceArn",
		"triggerEventSource",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("aws-native:connect:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("aws-native:connect:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
}

type RuleState struct {
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The list of actions that will be executed when a rule is triggered.
	Actions RuleActions `pulumi:"actions"`
	// The conditions of a rule.
	Function string `pulumi:"function"`
	// The Amazon Resource Name (ARN) of the instance.
	InstanceArn string `pulumi:"instanceArn"`
	// The name of the rule.
	Name *string `pulumi:"name"`
	// The publish status of a rule, either draft or published.
	PublishStatus RulePublishStatus `pulumi:"publishStatus"`
	// One or more tags.
	Tags []RuleTag `pulumi:"tags"`
	// The event source that triggers the rule.
	TriggerEventSource RuleTriggerEventSource `pulumi:"triggerEventSource"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The list of actions that will be executed when a rule is triggered.
	Actions RuleActionsInput
	// The conditions of a rule.
	Function pulumi.StringInput
	// The Amazon Resource Name (ARN) of the instance.
	InstanceArn pulumi.StringInput
	// The name of the rule.
	Name pulumi.StringPtrInput
	// The publish status of a rule, either draft or published.
	PublishStatus RulePublishStatusInput
	// One or more tags.
	Tags RuleTagArrayInput
	// The event source that triggers the rule.
	TriggerEventSource RuleTriggerEventSourceInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

func (i *Rule) ToOutput(ctx context.Context) pulumix.Output[*Rule] {
	return pulumix.Output[*Rule]{
		OutputState: i.ToRuleOutputWithContext(ctx).OutputState,
	}
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

func (o RuleOutput) ToOutput(ctx context.Context) pulumix.Output[*Rule] {
	return pulumix.Output[*Rule]{
		OutputState: o.OutputState,
	}
}

// The list of actions that will be executed when a rule is triggered.
func (o RuleOutput) Actions() RuleActionsOutput {
	return o.ApplyT(func(v *Rule) RuleActionsOutput { return v.Actions }).(RuleActionsOutput)
}

// The conditions of a rule.
func (o RuleOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the instance.
func (o RuleOutput) InstanceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.InstanceArn }).(pulumi.StringOutput)
}

// The name of the rule.
func (o RuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The publish status of a rule, either draft or published.
func (o RuleOutput) PublishStatus() RulePublishStatusOutput {
	return o.ApplyT(func(v *Rule) RulePublishStatusOutput { return v.PublishStatus }).(RulePublishStatusOutput)
}

// The Amazon Resource Name (ARN) of the rule.
func (o RuleOutput) RuleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.RuleArn }).(pulumi.StringOutput)
}

// One or more tags.
func (o RuleOutput) Tags() RuleTagArrayOutput {
	return o.ApplyT(func(v *Rule) RuleTagArrayOutput { return v.Tags }).(RuleTagArrayOutput)
}

// The event source that triggers the rule.
func (o RuleOutput) TriggerEventSource() RuleTriggerEventSourceOutput {
	return o.ApplyT(func(v *Rule) RuleTriggerEventSourceOutput { return v.TriggerEventSource }).(RuleTriggerEventSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterOutputType(RuleOutput{})
}
