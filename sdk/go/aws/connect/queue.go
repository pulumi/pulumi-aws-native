// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Connect::Queue
type Queue struct {
	pulumi.CustomResourceState

	// The description of the queue.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The identifier for the hours of operation.
	HoursOfOperationArn pulumi.StringOutput `pulumi:"hoursOfOperationArn"`
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringOutput `pulumi:"instanceArn"`
	// The maximum number of contacts that can be in the queue before it is considered full.
	MaxContacts pulumi.IntPtrOutput `pulumi:"maxContacts"`
	// The name of the queue.
	Name pulumi.StringOutput `pulumi:"name"`
	// The outbound caller ID name, number, and outbound whisper flow.
	OutboundCallerConfig QueueOutboundCallerConfigPtrOutput `pulumi:"outboundCallerConfig"`
	// The Amazon Resource Name (ARN) for the queue.
	QueueArn pulumi.StringOutput `pulumi:"queueArn"`
	// The quick connects available to agents who are working the queue.
	QuickConnectArns pulumi.StringArrayOutput `pulumi:"quickConnectArns"`
	// The status of the queue.
	Status QueueStatusPtrOutput `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of queue.
	Type QueueTypeOutput `pulumi:"type"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HoursOfOperationArn == nil {
		return nil, errors.New("invalid value for required argument 'HoursOfOperationArn'")
	}
	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queue
	err := ctx.RegisterResource("aws-native:connect:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("aws-native:connect:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
}

type QueueState struct {
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	// The description of the queue.
	Description *string `pulumi:"description"`
	// The identifier for the hours of operation.
	HoursOfOperationArn string `pulumi:"hoursOfOperationArn"`
	// The identifier of the Amazon Connect instance.
	InstanceArn string `pulumi:"instanceArn"`
	// The maximum number of contacts that can be in the queue before it is considered full.
	MaxContacts *int `pulumi:"maxContacts"`
	// The name of the queue.
	Name *string `pulumi:"name"`
	// The outbound caller ID name, number, and outbound whisper flow.
	OutboundCallerConfig *QueueOutboundCallerConfig `pulumi:"outboundCallerConfig"`
	// The quick connects available to agents who are working the queue.
	QuickConnectArns []string `pulumi:"quickConnectArns"`
	// The status of the queue.
	Status *QueueStatus `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	// The description of the queue.
	Description pulumi.StringPtrInput
	// The identifier for the hours of operation.
	HoursOfOperationArn pulumi.StringInput
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringInput
	// The maximum number of contacts that can be in the queue before it is considered full.
	MaxContacts pulumi.IntPtrInput
	// The name of the queue.
	Name pulumi.StringPtrInput
	// The outbound caller ID name, number, and outbound whisper flow.
	OutboundCallerConfig QueueOutboundCallerConfigPtrInput
	// The quick connects available to agents who are working the queue.
	QuickConnectArns pulumi.StringArrayInput
	// The status of the queue.
	Status QueueStatusPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

// The description of the queue.
func (o QueueOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The identifier for the hours of operation.
func (o QueueOutput) HoursOfOperationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.HoursOfOperationArn }).(pulumi.StringOutput)
}

// The identifier of the Amazon Connect instance.
func (o QueueOutput) InstanceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.InstanceArn }).(pulumi.StringOutput)
}

// The maximum number of contacts that can be in the queue before it is considered full.
func (o QueueOutput) MaxContacts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntPtrOutput { return v.MaxContacts }).(pulumi.IntPtrOutput)
}

// The name of the queue.
func (o QueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The outbound caller ID name, number, and outbound whisper flow.
func (o QueueOutput) OutboundCallerConfig() QueueOutboundCallerConfigPtrOutput {
	return o.ApplyT(func(v *Queue) QueueOutboundCallerConfigPtrOutput { return v.OutboundCallerConfig }).(QueueOutboundCallerConfigPtrOutput)
}

// The Amazon Resource Name (ARN) for the queue.
func (o QueueOutput) QueueArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.QueueArn }).(pulumi.StringOutput)
}

// The quick connects available to agents who are working the queue.
func (o QueueOutput) QuickConnectArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringArrayOutput { return v.QuickConnectArns }).(pulumi.StringArrayOutput)
}

// The status of the queue.
func (o QueueOutput) Status() QueueStatusPtrOutput {
	return o.ApplyT(func(v *Queue) QueueStatusPtrOutput { return v.Status }).(QueueStatusPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o QueueOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Queue) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of queue.
func (o QueueOutput) Type() QueueTypeOutput {
	return o.ApplyT(func(v *Queue) QueueTypeOutput { return v.Type }).(QueueTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterOutputType(QueueOutput{})
}
