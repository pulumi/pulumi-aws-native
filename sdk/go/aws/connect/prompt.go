// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Connect::Prompt
type Prompt struct {
	pulumi.CustomResourceState

	// The description of the prompt.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringOutput `pulumi:"instanceArn"`
	// The name of the prompt.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Resource Name (ARN) for the prompt.
	PromptArn pulumi.StringOutput `pulumi:"promptArn"`
	// S3 URI of the customer's audio file for creating prompts resource..
	S3Uri pulumi.StringPtrOutput `pulumi:"s3Uri"`
	// An array of key-value pairs to apply to this resource.
	Tags PromptTagArrayOutput `pulumi:"tags"`
}

// NewPrompt registers a new resource with the given unique name, arguments, and options.
func NewPrompt(ctx *pulumi.Context,
	name string, args *PromptArgs, opts ...pulumi.ResourceOption) (*Prompt, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Prompt
	err := ctx.RegisterResource("aws-native:connect:Prompt", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrompt gets an existing Prompt resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrompt(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PromptState, opts ...pulumi.ResourceOption) (*Prompt, error) {
	var resource Prompt
	err := ctx.ReadResource("aws-native:connect:Prompt", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Prompt resources.
type promptState struct {
}

type PromptState struct {
}

func (PromptState) ElementType() reflect.Type {
	return reflect.TypeOf((*promptState)(nil)).Elem()
}

type promptArgs struct {
	// The description of the prompt.
	Description *string `pulumi:"description"`
	// The identifier of the Amazon Connect instance.
	InstanceArn string `pulumi:"instanceArn"`
	// The name of the prompt.
	Name *string `pulumi:"name"`
	// S3 URI of the customer's audio file for creating prompts resource..
	S3Uri *string `pulumi:"s3Uri"`
	// An array of key-value pairs to apply to this resource.
	Tags []PromptTag `pulumi:"tags"`
}

// The set of arguments for constructing a Prompt resource.
type PromptArgs struct {
	// The description of the prompt.
	Description pulumi.StringPtrInput
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringInput
	// The name of the prompt.
	Name pulumi.StringPtrInput
	// S3 URI of the customer's audio file for creating prompts resource..
	S3Uri pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags PromptTagArrayInput
}

func (PromptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*promptArgs)(nil)).Elem()
}

type PromptInput interface {
	pulumi.Input

	ToPromptOutput() PromptOutput
	ToPromptOutputWithContext(ctx context.Context) PromptOutput
}

func (*Prompt) ElementType() reflect.Type {
	return reflect.TypeOf((**Prompt)(nil)).Elem()
}

func (i *Prompt) ToPromptOutput() PromptOutput {
	return i.ToPromptOutputWithContext(context.Background())
}

func (i *Prompt) ToPromptOutputWithContext(ctx context.Context) PromptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromptOutput)
}

type PromptOutput struct{ *pulumi.OutputState }

func (PromptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Prompt)(nil)).Elem()
}

func (o PromptOutput) ToPromptOutput() PromptOutput {
	return o
}

func (o PromptOutput) ToPromptOutputWithContext(ctx context.Context) PromptOutput {
	return o
}

// The description of the prompt.
func (o PromptOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Prompt) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The identifier of the Amazon Connect instance.
func (o PromptOutput) InstanceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Prompt) pulumi.StringOutput { return v.InstanceArn }).(pulumi.StringOutput)
}

// The name of the prompt.
func (o PromptOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Prompt) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) for the prompt.
func (o PromptOutput) PromptArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Prompt) pulumi.StringOutput { return v.PromptArn }).(pulumi.StringOutput)
}

// S3 URI of the customer's audio file for creating prompts resource..
func (o PromptOutput) S3Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Prompt) pulumi.StringPtrOutput { return v.S3Uri }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o PromptOutput) Tags() PromptTagArrayOutput {
	return o.ApplyT(func(v *Prompt) PromptTagArrayOutput { return v.Tags }).(PromptTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PromptInput)(nil)).Elem(), &Prompt{})
	pulumi.RegisterOutputType(PromptOutput{})
}
