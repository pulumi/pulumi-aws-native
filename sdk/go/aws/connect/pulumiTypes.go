// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A key-value pair to associate with a resource.
type ContactFlowModuleTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ContactFlowModuleTagInput is an input type that accepts ContactFlowModuleTagArgs and ContactFlowModuleTagOutput values.
// You can construct a concrete instance of `ContactFlowModuleTagInput` via:
//
//          ContactFlowModuleTagArgs{...}
type ContactFlowModuleTagInput interface {
	pulumi.Input

	ToContactFlowModuleTagOutput() ContactFlowModuleTagOutput
	ToContactFlowModuleTagOutputWithContext(context.Context) ContactFlowModuleTagOutput
}

// A key-value pair to associate with a resource.
type ContactFlowModuleTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContactFlowModuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactFlowModuleTag)(nil)).Elem()
}

func (i ContactFlowModuleTagArgs) ToContactFlowModuleTagOutput() ContactFlowModuleTagOutput {
	return i.ToContactFlowModuleTagOutputWithContext(context.Background())
}

func (i ContactFlowModuleTagArgs) ToContactFlowModuleTagOutputWithContext(ctx context.Context) ContactFlowModuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowModuleTagOutput)
}

// ContactFlowModuleTagArrayInput is an input type that accepts ContactFlowModuleTagArray and ContactFlowModuleTagArrayOutput values.
// You can construct a concrete instance of `ContactFlowModuleTagArrayInput` via:
//
//          ContactFlowModuleTagArray{ ContactFlowModuleTagArgs{...} }
type ContactFlowModuleTagArrayInput interface {
	pulumi.Input

	ToContactFlowModuleTagArrayOutput() ContactFlowModuleTagArrayOutput
	ToContactFlowModuleTagArrayOutputWithContext(context.Context) ContactFlowModuleTagArrayOutput
}

type ContactFlowModuleTagArray []ContactFlowModuleTagInput

func (ContactFlowModuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactFlowModuleTag)(nil)).Elem()
}

func (i ContactFlowModuleTagArray) ToContactFlowModuleTagArrayOutput() ContactFlowModuleTagArrayOutput {
	return i.ToContactFlowModuleTagArrayOutputWithContext(context.Background())
}

func (i ContactFlowModuleTagArray) ToContactFlowModuleTagArrayOutputWithContext(ctx context.Context) ContactFlowModuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowModuleTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ContactFlowModuleTagOutput struct{ *pulumi.OutputState }

func (ContactFlowModuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactFlowModuleTag)(nil)).Elem()
}

func (o ContactFlowModuleTagOutput) ToContactFlowModuleTagOutput() ContactFlowModuleTagOutput {
	return o
}

func (o ContactFlowModuleTagOutput) ToContactFlowModuleTagOutputWithContext(ctx context.Context) ContactFlowModuleTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ContactFlowModuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ContactFlowModuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ContactFlowModuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContactFlowModuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type ContactFlowModuleTagArrayOutput struct{ *pulumi.OutputState }

func (ContactFlowModuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactFlowModuleTag)(nil)).Elem()
}

func (o ContactFlowModuleTagArrayOutput) ToContactFlowModuleTagArrayOutput() ContactFlowModuleTagArrayOutput {
	return o
}

func (o ContactFlowModuleTagArrayOutput) ToContactFlowModuleTagArrayOutputWithContext(ctx context.Context) ContactFlowModuleTagArrayOutput {
	return o
}

func (o ContactFlowModuleTagArrayOutput) Index(i pulumi.IntInput) ContactFlowModuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactFlowModuleTag {
		return vs[0].([]ContactFlowModuleTag)[vs[1].(int)]
	}).(ContactFlowModuleTagOutput)
}

// A key-value pair to associate with a resource.
type ContactFlowTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ContactFlowTagInput is an input type that accepts ContactFlowTagArgs and ContactFlowTagOutput values.
// You can construct a concrete instance of `ContactFlowTagInput` via:
//
//          ContactFlowTagArgs{...}
type ContactFlowTagInput interface {
	pulumi.Input

	ToContactFlowTagOutput() ContactFlowTagOutput
	ToContactFlowTagOutputWithContext(context.Context) ContactFlowTagOutput
}

// A key-value pair to associate with a resource.
type ContactFlowTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContactFlowTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactFlowTag)(nil)).Elem()
}

func (i ContactFlowTagArgs) ToContactFlowTagOutput() ContactFlowTagOutput {
	return i.ToContactFlowTagOutputWithContext(context.Background())
}

func (i ContactFlowTagArgs) ToContactFlowTagOutputWithContext(ctx context.Context) ContactFlowTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowTagOutput)
}

// ContactFlowTagArrayInput is an input type that accepts ContactFlowTagArray and ContactFlowTagArrayOutput values.
// You can construct a concrete instance of `ContactFlowTagArrayInput` via:
//
//          ContactFlowTagArray{ ContactFlowTagArgs{...} }
type ContactFlowTagArrayInput interface {
	pulumi.Input

	ToContactFlowTagArrayOutput() ContactFlowTagArrayOutput
	ToContactFlowTagArrayOutputWithContext(context.Context) ContactFlowTagArrayOutput
}

type ContactFlowTagArray []ContactFlowTagInput

func (ContactFlowTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactFlowTag)(nil)).Elem()
}

func (i ContactFlowTagArray) ToContactFlowTagArrayOutput() ContactFlowTagArrayOutput {
	return i.ToContactFlowTagArrayOutputWithContext(context.Background())
}

func (i ContactFlowTagArray) ToContactFlowTagArrayOutputWithContext(ctx context.Context) ContactFlowTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactFlowTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ContactFlowTagOutput struct{ *pulumi.OutputState }

func (ContactFlowTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactFlowTag)(nil)).Elem()
}

func (o ContactFlowTagOutput) ToContactFlowTagOutput() ContactFlowTagOutput {
	return o
}

func (o ContactFlowTagOutput) ToContactFlowTagOutputWithContext(ctx context.Context) ContactFlowTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ContactFlowTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ContactFlowTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ContactFlowTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContactFlowTag) string { return v.Value }).(pulumi.StringOutput)
}

type ContactFlowTagArrayOutput struct{ *pulumi.OutputState }

func (ContactFlowTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactFlowTag)(nil)).Elem()
}

func (o ContactFlowTagArrayOutput) ToContactFlowTagArrayOutput() ContactFlowTagArrayOutput {
	return o
}

func (o ContactFlowTagArrayOutput) ToContactFlowTagArrayOutputWithContext(ctx context.Context) ContactFlowTagArrayOutput {
	return o
}

func (o ContactFlowTagArrayOutput) Index(i pulumi.IntInput) ContactFlowTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactFlowTag {
		return vs[0].([]ContactFlowTag)[vs[1].(int)]
	}).(ContactFlowTagOutput)
}

// Contains information about the hours of operation.
type HoursOfOperationConfig struct {
	// The day that the hours of operation applies to.
	Day HoursOfOperationConfigDay `pulumi:"day"`
	// The end time that your contact center closes.
	EndTime HoursOfOperationTimeSlice `pulumi:"endTime"`
	// The start time that your contact center opens.
	StartTime HoursOfOperationTimeSlice `pulumi:"startTime"`
}

// HoursOfOperationConfigInput is an input type that accepts HoursOfOperationConfigArgs and HoursOfOperationConfigOutput values.
// You can construct a concrete instance of `HoursOfOperationConfigInput` via:
//
//          HoursOfOperationConfigArgs{...}
type HoursOfOperationConfigInput interface {
	pulumi.Input

	ToHoursOfOperationConfigOutput() HoursOfOperationConfigOutput
	ToHoursOfOperationConfigOutputWithContext(context.Context) HoursOfOperationConfigOutput
}

// Contains information about the hours of operation.
type HoursOfOperationConfigArgs struct {
	// The day that the hours of operation applies to.
	Day HoursOfOperationConfigDayInput `pulumi:"day"`
	// The end time that your contact center closes.
	EndTime HoursOfOperationTimeSliceInput `pulumi:"endTime"`
	// The start time that your contact center opens.
	StartTime HoursOfOperationTimeSliceInput `pulumi:"startTime"`
}

func (HoursOfOperationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfig)(nil)).Elem()
}

func (i HoursOfOperationConfigArgs) ToHoursOfOperationConfigOutput() HoursOfOperationConfigOutput {
	return i.ToHoursOfOperationConfigOutputWithContext(context.Background())
}

func (i HoursOfOperationConfigArgs) ToHoursOfOperationConfigOutputWithContext(ctx context.Context) HoursOfOperationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationConfigOutput)
}

// HoursOfOperationConfigArrayInput is an input type that accepts HoursOfOperationConfigArray and HoursOfOperationConfigArrayOutput values.
// You can construct a concrete instance of `HoursOfOperationConfigArrayInput` via:
//
//          HoursOfOperationConfigArray{ HoursOfOperationConfigArgs{...} }
type HoursOfOperationConfigArrayInput interface {
	pulumi.Input

	ToHoursOfOperationConfigArrayOutput() HoursOfOperationConfigArrayOutput
	ToHoursOfOperationConfigArrayOutputWithContext(context.Context) HoursOfOperationConfigArrayOutput
}

type HoursOfOperationConfigArray []HoursOfOperationConfigInput

func (HoursOfOperationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HoursOfOperationConfig)(nil)).Elem()
}

func (i HoursOfOperationConfigArray) ToHoursOfOperationConfigArrayOutput() HoursOfOperationConfigArrayOutput {
	return i.ToHoursOfOperationConfigArrayOutputWithContext(context.Background())
}

func (i HoursOfOperationConfigArray) ToHoursOfOperationConfigArrayOutputWithContext(ctx context.Context) HoursOfOperationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationConfigArrayOutput)
}

// Contains information about the hours of operation.
type HoursOfOperationConfigOutput struct{ *pulumi.OutputState }

func (HoursOfOperationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationConfig)(nil)).Elem()
}

func (o HoursOfOperationConfigOutput) ToHoursOfOperationConfigOutput() HoursOfOperationConfigOutput {
	return o
}

func (o HoursOfOperationConfigOutput) ToHoursOfOperationConfigOutputWithContext(ctx context.Context) HoursOfOperationConfigOutput {
	return o
}

// The day that the hours of operation applies to.
func (o HoursOfOperationConfigOutput) Day() HoursOfOperationConfigDayOutput {
	return o.ApplyT(func(v HoursOfOperationConfig) HoursOfOperationConfigDay { return v.Day }).(HoursOfOperationConfigDayOutput)
}

// The end time that your contact center closes.
func (o HoursOfOperationConfigOutput) EndTime() HoursOfOperationTimeSliceOutput {
	return o.ApplyT(func(v HoursOfOperationConfig) HoursOfOperationTimeSlice { return v.EndTime }).(HoursOfOperationTimeSliceOutput)
}

// The start time that your contact center opens.
func (o HoursOfOperationConfigOutput) StartTime() HoursOfOperationTimeSliceOutput {
	return o.ApplyT(func(v HoursOfOperationConfig) HoursOfOperationTimeSlice { return v.StartTime }).(HoursOfOperationTimeSliceOutput)
}

type HoursOfOperationConfigArrayOutput struct{ *pulumi.OutputState }

func (HoursOfOperationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HoursOfOperationConfig)(nil)).Elem()
}

func (o HoursOfOperationConfigArrayOutput) ToHoursOfOperationConfigArrayOutput() HoursOfOperationConfigArrayOutput {
	return o
}

func (o HoursOfOperationConfigArrayOutput) ToHoursOfOperationConfigArrayOutputWithContext(ctx context.Context) HoursOfOperationConfigArrayOutput {
	return o
}

func (o HoursOfOperationConfigArrayOutput) Index(i pulumi.IntInput) HoursOfOperationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HoursOfOperationConfig {
		return vs[0].([]HoursOfOperationConfig)[vs[1].(int)]
	}).(HoursOfOperationConfigOutput)
}

// A key-value pair to associate with a resource.
type HoursOfOperationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// HoursOfOperationTagInput is an input type that accepts HoursOfOperationTagArgs and HoursOfOperationTagOutput values.
// You can construct a concrete instance of `HoursOfOperationTagInput` via:
//
//          HoursOfOperationTagArgs{...}
type HoursOfOperationTagInput interface {
	pulumi.Input

	ToHoursOfOperationTagOutput() HoursOfOperationTagOutput
	ToHoursOfOperationTagOutputWithContext(context.Context) HoursOfOperationTagOutput
}

// A key-value pair to associate with a resource.
type HoursOfOperationTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (HoursOfOperationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationTag)(nil)).Elem()
}

func (i HoursOfOperationTagArgs) ToHoursOfOperationTagOutput() HoursOfOperationTagOutput {
	return i.ToHoursOfOperationTagOutputWithContext(context.Background())
}

func (i HoursOfOperationTagArgs) ToHoursOfOperationTagOutputWithContext(ctx context.Context) HoursOfOperationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationTagOutput)
}

// HoursOfOperationTagArrayInput is an input type that accepts HoursOfOperationTagArray and HoursOfOperationTagArrayOutput values.
// You can construct a concrete instance of `HoursOfOperationTagArrayInput` via:
//
//          HoursOfOperationTagArray{ HoursOfOperationTagArgs{...} }
type HoursOfOperationTagArrayInput interface {
	pulumi.Input

	ToHoursOfOperationTagArrayOutput() HoursOfOperationTagArrayOutput
	ToHoursOfOperationTagArrayOutputWithContext(context.Context) HoursOfOperationTagArrayOutput
}

type HoursOfOperationTagArray []HoursOfOperationTagInput

func (HoursOfOperationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HoursOfOperationTag)(nil)).Elem()
}

func (i HoursOfOperationTagArray) ToHoursOfOperationTagArrayOutput() HoursOfOperationTagArrayOutput {
	return i.ToHoursOfOperationTagArrayOutputWithContext(context.Background())
}

func (i HoursOfOperationTagArray) ToHoursOfOperationTagArrayOutputWithContext(ctx context.Context) HoursOfOperationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationTagArrayOutput)
}

// A key-value pair to associate with a resource.
type HoursOfOperationTagOutput struct{ *pulumi.OutputState }

func (HoursOfOperationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationTag)(nil)).Elem()
}

func (o HoursOfOperationTagOutput) ToHoursOfOperationTagOutput() HoursOfOperationTagOutput {
	return o
}

func (o HoursOfOperationTagOutput) ToHoursOfOperationTagOutputWithContext(ctx context.Context) HoursOfOperationTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o HoursOfOperationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v HoursOfOperationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o HoursOfOperationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HoursOfOperationTag) string { return v.Value }).(pulumi.StringOutput)
}

type HoursOfOperationTagArrayOutput struct{ *pulumi.OutputState }

func (HoursOfOperationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HoursOfOperationTag)(nil)).Elem()
}

func (o HoursOfOperationTagArrayOutput) ToHoursOfOperationTagArrayOutput() HoursOfOperationTagArrayOutput {
	return o
}

func (o HoursOfOperationTagArrayOutput) ToHoursOfOperationTagArrayOutputWithContext(ctx context.Context) HoursOfOperationTagArrayOutput {
	return o
}

func (o HoursOfOperationTagArrayOutput) Index(i pulumi.IntInput) HoursOfOperationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HoursOfOperationTag {
		return vs[0].([]HoursOfOperationTag)[vs[1].(int)]
	}).(HoursOfOperationTagOutput)
}

// The start time or end time for an hours of operation.
type HoursOfOperationTimeSlice struct {
	// The hours.
	Hours int `pulumi:"hours"`
	// The minutes.
	Minutes int `pulumi:"minutes"`
}

// HoursOfOperationTimeSliceInput is an input type that accepts HoursOfOperationTimeSliceArgs and HoursOfOperationTimeSliceOutput values.
// You can construct a concrete instance of `HoursOfOperationTimeSliceInput` via:
//
//          HoursOfOperationTimeSliceArgs{...}
type HoursOfOperationTimeSliceInput interface {
	pulumi.Input

	ToHoursOfOperationTimeSliceOutput() HoursOfOperationTimeSliceOutput
	ToHoursOfOperationTimeSliceOutputWithContext(context.Context) HoursOfOperationTimeSliceOutput
}

// The start time or end time for an hours of operation.
type HoursOfOperationTimeSliceArgs struct {
	// The hours.
	Hours pulumi.IntInput `pulumi:"hours"`
	// The minutes.
	Minutes pulumi.IntInput `pulumi:"minutes"`
}

func (HoursOfOperationTimeSliceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationTimeSlice)(nil)).Elem()
}

func (i HoursOfOperationTimeSliceArgs) ToHoursOfOperationTimeSliceOutput() HoursOfOperationTimeSliceOutput {
	return i.ToHoursOfOperationTimeSliceOutputWithContext(context.Background())
}

func (i HoursOfOperationTimeSliceArgs) ToHoursOfOperationTimeSliceOutputWithContext(ctx context.Context) HoursOfOperationTimeSliceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HoursOfOperationTimeSliceOutput)
}

// The start time or end time for an hours of operation.
type HoursOfOperationTimeSliceOutput struct{ *pulumi.OutputState }

func (HoursOfOperationTimeSliceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HoursOfOperationTimeSlice)(nil)).Elem()
}

func (o HoursOfOperationTimeSliceOutput) ToHoursOfOperationTimeSliceOutput() HoursOfOperationTimeSliceOutput {
	return o
}

func (o HoursOfOperationTimeSliceOutput) ToHoursOfOperationTimeSliceOutputWithContext(ctx context.Context) HoursOfOperationTimeSliceOutput {
	return o
}

// The hours.
func (o HoursOfOperationTimeSliceOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v HoursOfOperationTimeSlice) int { return v.Hours }).(pulumi.IntOutput)
}

// The minutes.
func (o HoursOfOperationTimeSliceOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v HoursOfOperationTimeSlice) int { return v.Minutes }).(pulumi.IntOutput)
}

// Configuration settings for the quick connect.
type QuickConnectConfig struct {
	PhoneConfig      *QuickConnectPhoneNumberQuickConnectConfig `pulumi:"phoneConfig"`
	QueueConfig      *QuickConnectQueueQuickConnectConfig       `pulumi:"queueConfig"`
	QuickConnectType QuickConnectType                           `pulumi:"quickConnectType"`
	UserConfig       *QuickConnectUserQuickConnectConfig        `pulumi:"userConfig"`
}

// QuickConnectConfigInput is an input type that accepts QuickConnectConfigArgs and QuickConnectConfigOutput values.
// You can construct a concrete instance of `QuickConnectConfigInput` via:
//
//          QuickConnectConfigArgs{...}
type QuickConnectConfigInput interface {
	pulumi.Input

	ToQuickConnectConfigOutput() QuickConnectConfigOutput
	ToQuickConnectConfigOutputWithContext(context.Context) QuickConnectConfigOutput
}

// Configuration settings for the quick connect.
type QuickConnectConfigArgs struct {
	PhoneConfig      QuickConnectPhoneNumberQuickConnectConfigPtrInput `pulumi:"phoneConfig"`
	QueueConfig      QuickConnectQueueQuickConnectConfigPtrInput       `pulumi:"queueConfig"`
	QuickConnectType QuickConnectTypeInput                             `pulumi:"quickConnectType"`
	UserConfig       QuickConnectUserQuickConnectConfigPtrInput        `pulumi:"userConfig"`
}

func (QuickConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectConfig)(nil)).Elem()
}

func (i QuickConnectConfigArgs) ToQuickConnectConfigOutput() QuickConnectConfigOutput {
	return i.ToQuickConnectConfigOutputWithContext(context.Background())
}

func (i QuickConnectConfigArgs) ToQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectConfigOutput)
}

func (i QuickConnectConfigArgs) ToQuickConnectConfigPtrOutput() QuickConnectConfigPtrOutput {
	return i.ToQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i QuickConnectConfigArgs) ToQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectConfigOutput).ToQuickConnectConfigPtrOutputWithContext(ctx)
}

// QuickConnectConfigPtrInput is an input type that accepts QuickConnectConfigArgs, QuickConnectConfigPtr and QuickConnectConfigPtrOutput values.
// You can construct a concrete instance of `QuickConnectConfigPtrInput` via:
//
//          QuickConnectConfigArgs{...}
//
//  or:
//
//          nil
type QuickConnectConfigPtrInput interface {
	pulumi.Input

	ToQuickConnectConfigPtrOutput() QuickConnectConfigPtrOutput
	ToQuickConnectConfigPtrOutputWithContext(context.Context) QuickConnectConfigPtrOutput
}

type quickConnectConfigPtrType QuickConnectConfigArgs

func QuickConnectConfigPtr(v *QuickConnectConfigArgs) QuickConnectConfigPtrInput {
	return (*quickConnectConfigPtrType)(v)
}

func (*quickConnectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectConfig)(nil)).Elem()
}

func (i *quickConnectConfigPtrType) ToQuickConnectConfigPtrOutput() QuickConnectConfigPtrOutput {
	return i.ToQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i *quickConnectConfigPtrType) ToQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectConfigPtrOutput)
}

// Configuration settings for the quick connect.
type QuickConnectConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectConfigOutput) ToQuickConnectConfigOutput() QuickConnectConfigOutput {
	return o
}

func (o QuickConnectConfigOutput) ToQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectConfigOutput {
	return o
}

func (o QuickConnectConfigOutput) ToQuickConnectConfigPtrOutput() QuickConnectConfigPtrOutput {
	return o.ToQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (o QuickConnectConfigOutput) ToQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuickConnectConfig) *QuickConnectConfig {
		return &v
	}).(QuickConnectConfigPtrOutput)
}

func (o QuickConnectConfigOutput) PhoneConfig() QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return o.ApplyT(func(v QuickConnectConfig) *QuickConnectPhoneNumberQuickConnectConfig { return v.PhoneConfig }).(QuickConnectPhoneNumberQuickConnectConfigPtrOutput)
}

func (o QuickConnectConfigOutput) QueueConfig() QuickConnectQueueQuickConnectConfigPtrOutput {
	return o.ApplyT(func(v QuickConnectConfig) *QuickConnectQueueQuickConnectConfig { return v.QueueConfig }).(QuickConnectQueueQuickConnectConfigPtrOutput)
}

func (o QuickConnectConfigOutput) QuickConnectType() QuickConnectTypeOutput {
	return o.ApplyT(func(v QuickConnectConfig) QuickConnectType { return v.QuickConnectType }).(QuickConnectTypeOutput)
}

func (o QuickConnectConfigOutput) UserConfig() QuickConnectUserQuickConnectConfigPtrOutput {
	return o.ApplyT(func(v QuickConnectConfig) *QuickConnectUserQuickConnectConfig { return v.UserConfig }).(QuickConnectUserQuickConnectConfigPtrOutput)
}

type QuickConnectConfigPtrOutput struct{ *pulumi.OutputState }

func (QuickConnectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectConfigPtrOutput) ToQuickConnectConfigPtrOutput() QuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectConfigPtrOutput) ToQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectConfigPtrOutput) Elem() QuickConnectConfigOutput {
	return o.ApplyT(func(v *QuickConnectConfig) QuickConnectConfig {
		if v != nil {
			return *v
		}
		var ret QuickConnectConfig
		return ret
	}).(QuickConnectConfigOutput)
}

func (o QuickConnectConfigPtrOutput) PhoneConfig() QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return o.ApplyT(func(v *QuickConnectConfig) *QuickConnectPhoneNumberQuickConnectConfig {
		if v == nil {
			return nil
		}
		return v.PhoneConfig
	}).(QuickConnectPhoneNumberQuickConnectConfigPtrOutput)
}

func (o QuickConnectConfigPtrOutput) QueueConfig() QuickConnectQueueQuickConnectConfigPtrOutput {
	return o.ApplyT(func(v *QuickConnectConfig) *QuickConnectQueueQuickConnectConfig {
		if v == nil {
			return nil
		}
		return v.QueueConfig
	}).(QuickConnectQueueQuickConnectConfigPtrOutput)
}

func (o QuickConnectConfigPtrOutput) QuickConnectType() QuickConnectTypePtrOutput {
	return o.ApplyT(func(v *QuickConnectConfig) *QuickConnectType {
		if v == nil {
			return nil
		}
		return &v.QuickConnectType
	}).(QuickConnectTypePtrOutput)
}

func (o QuickConnectConfigPtrOutput) UserConfig() QuickConnectUserQuickConnectConfigPtrOutput {
	return o.ApplyT(func(v *QuickConnectConfig) *QuickConnectUserQuickConnectConfig {
		if v == nil {
			return nil
		}
		return v.UserConfig
	}).(QuickConnectUserQuickConnectConfigPtrOutput)
}

// The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
type QuickConnectPhoneNumberQuickConnectConfig struct {
	PhoneNumber string `pulumi:"phoneNumber"`
}

// QuickConnectPhoneNumberQuickConnectConfigInput is an input type that accepts QuickConnectPhoneNumberQuickConnectConfigArgs and QuickConnectPhoneNumberQuickConnectConfigOutput values.
// You can construct a concrete instance of `QuickConnectPhoneNumberQuickConnectConfigInput` via:
//
//          QuickConnectPhoneNumberQuickConnectConfigArgs{...}
type QuickConnectPhoneNumberQuickConnectConfigInput interface {
	pulumi.Input

	ToQuickConnectPhoneNumberQuickConnectConfigOutput() QuickConnectPhoneNumberQuickConnectConfigOutput
	ToQuickConnectPhoneNumberQuickConnectConfigOutputWithContext(context.Context) QuickConnectPhoneNumberQuickConnectConfigOutput
}

// The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
type QuickConnectPhoneNumberQuickConnectConfigArgs struct {
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (QuickConnectPhoneNumberQuickConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectPhoneNumberQuickConnectConfig)(nil)).Elem()
}

func (i QuickConnectPhoneNumberQuickConnectConfigArgs) ToQuickConnectPhoneNumberQuickConnectConfigOutput() QuickConnectPhoneNumberQuickConnectConfigOutput {
	return i.ToQuickConnectPhoneNumberQuickConnectConfigOutputWithContext(context.Background())
}

func (i QuickConnectPhoneNumberQuickConnectConfigArgs) ToQuickConnectPhoneNumberQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectPhoneNumberQuickConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectPhoneNumberQuickConnectConfigOutput)
}

func (i QuickConnectPhoneNumberQuickConnectConfigArgs) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutput() QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return i.ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i QuickConnectPhoneNumberQuickConnectConfigArgs) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectPhoneNumberQuickConnectConfigOutput).ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(ctx)
}

// QuickConnectPhoneNumberQuickConnectConfigPtrInput is an input type that accepts QuickConnectPhoneNumberQuickConnectConfigArgs, QuickConnectPhoneNumberQuickConnectConfigPtr and QuickConnectPhoneNumberQuickConnectConfigPtrOutput values.
// You can construct a concrete instance of `QuickConnectPhoneNumberQuickConnectConfigPtrInput` via:
//
//          QuickConnectPhoneNumberQuickConnectConfigArgs{...}
//
//  or:
//
//          nil
type QuickConnectPhoneNumberQuickConnectConfigPtrInput interface {
	pulumi.Input

	ToQuickConnectPhoneNumberQuickConnectConfigPtrOutput() QuickConnectPhoneNumberQuickConnectConfigPtrOutput
	ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(context.Context) QuickConnectPhoneNumberQuickConnectConfigPtrOutput
}

type quickConnectPhoneNumberQuickConnectConfigPtrType QuickConnectPhoneNumberQuickConnectConfigArgs

func QuickConnectPhoneNumberQuickConnectConfigPtr(v *QuickConnectPhoneNumberQuickConnectConfigArgs) QuickConnectPhoneNumberQuickConnectConfigPtrInput {
	return (*quickConnectPhoneNumberQuickConnectConfigPtrType)(v)
}

func (*quickConnectPhoneNumberQuickConnectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectPhoneNumberQuickConnectConfig)(nil)).Elem()
}

func (i *quickConnectPhoneNumberQuickConnectConfigPtrType) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutput() QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return i.ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i *quickConnectPhoneNumberQuickConnectConfigPtrType) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectPhoneNumberQuickConnectConfigPtrOutput)
}

// The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
type QuickConnectPhoneNumberQuickConnectConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectPhoneNumberQuickConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectPhoneNumberQuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectPhoneNumberQuickConnectConfigOutput) ToQuickConnectPhoneNumberQuickConnectConfigOutput() QuickConnectPhoneNumberQuickConnectConfigOutput {
	return o
}

func (o QuickConnectPhoneNumberQuickConnectConfigOutput) ToQuickConnectPhoneNumberQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectPhoneNumberQuickConnectConfigOutput {
	return o
}

func (o QuickConnectPhoneNumberQuickConnectConfigOutput) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutput() QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return o.ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (o QuickConnectPhoneNumberQuickConnectConfigOutput) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuickConnectPhoneNumberQuickConnectConfig) *QuickConnectPhoneNumberQuickConnectConfig {
		return &v
	}).(QuickConnectPhoneNumberQuickConnectConfigPtrOutput)
}

func (o QuickConnectPhoneNumberQuickConnectConfigOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v QuickConnectPhoneNumberQuickConnectConfig) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type QuickConnectPhoneNumberQuickConnectConfigPtrOutput struct{ *pulumi.OutputState }

func (QuickConnectPhoneNumberQuickConnectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectPhoneNumberQuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectPhoneNumberQuickConnectConfigPtrOutput) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutput() QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectPhoneNumberQuickConnectConfigPtrOutput) ToQuickConnectPhoneNumberQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectPhoneNumberQuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectPhoneNumberQuickConnectConfigPtrOutput) Elem() QuickConnectPhoneNumberQuickConnectConfigOutput {
	return o.ApplyT(func(v *QuickConnectPhoneNumberQuickConnectConfig) QuickConnectPhoneNumberQuickConnectConfig {
		if v != nil {
			return *v
		}
		var ret QuickConnectPhoneNumberQuickConnectConfig
		return ret
	}).(QuickConnectPhoneNumberQuickConnectConfigOutput)
}

func (o QuickConnectPhoneNumberQuickConnectConfigPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuickConnectPhoneNumberQuickConnectConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

// The queue configuration. This is required only if QuickConnectType is QUEUE.
type QuickConnectQueueQuickConnectConfig struct {
	ContactFlowArn string `pulumi:"contactFlowArn"`
	QueueArn       string `pulumi:"queueArn"`
}

// QuickConnectQueueQuickConnectConfigInput is an input type that accepts QuickConnectQueueQuickConnectConfigArgs and QuickConnectQueueQuickConnectConfigOutput values.
// You can construct a concrete instance of `QuickConnectQueueQuickConnectConfigInput` via:
//
//          QuickConnectQueueQuickConnectConfigArgs{...}
type QuickConnectQueueQuickConnectConfigInput interface {
	pulumi.Input

	ToQuickConnectQueueQuickConnectConfigOutput() QuickConnectQueueQuickConnectConfigOutput
	ToQuickConnectQueueQuickConnectConfigOutputWithContext(context.Context) QuickConnectQueueQuickConnectConfigOutput
}

// The queue configuration. This is required only if QuickConnectType is QUEUE.
type QuickConnectQueueQuickConnectConfigArgs struct {
	ContactFlowArn pulumi.StringInput `pulumi:"contactFlowArn"`
	QueueArn       pulumi.StringInput `pulumi:"queueArn"`
}

func (QuickConnectQueueQuickConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQueueQuickConnectConfig)(nil)).Elem()
}

func (i QuickConnectQueueQuickConnectConfigArgs) ToQuickConnectQueueQuickConnectConfigOutput() QuickConnectQueueQuickConnectConfigOutput {
	return i.ToQuickConnectQueueQuickConnectConfigOutputWithContext(context.Background())
}

func (i QuickConnectQueueQuickConnectConfigArgs) ToQuickConnectQueueQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectQueueQuickConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectQueueQuickConnectConfigOutput)
}

func (i QuickConnectQueueQuickConnectConfigArgs) ToQuickConnectQueueQuickConnectConfigPtrOutput() QuickConnectQueueQuickConnectConfigPtrOutput {
	return i.ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i QuickConnectQueueQuickConnectConfigArgs) ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectQueueQuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectQueueQuickConnectConfigOutput).ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(ctx)
}

// QuickConnectQueueQuickConnectConfigPtrInput is an input type that accepts QuickConnectQueueQuickConnectConfigArgs, QuickConnectQueueQuickConnectConfigPtr and QuickConnectQueueQuickConnectConfigPtrOutput values.
// You can construct a concrete instance of `QuickConnectQueueQuickConnectConfigPtrInput` via:
//
//          QuickConnectQueueQuickConnectConfigArgs{...}
//
//  or:
//
//          nil
type QuickConnectQueueQuickConnectConfigPtrInput interface {
	pulumi.Input

	ToQuickConnectQueueQuickConnectConfigPtrOutput() QuickConnectQueueQuickConnectConfigPtrOutput
	ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(context.Context) QuickConnectQueueQuickConnectConfigPtrOutput
}

type quickConnectQueueQuickConnectConfigPtrType QuickConnectQueueQuickConnectConfigArgs

func QuickConnectQueueQuickConnectConfigPtr(v *QuickConnectQueueQuickConnectConfigArgs) QuickConnectQueueQuickConnectConfigPtrInput {
	return (*quickConnectQueueQuickConnectConfigPtrType)(v)
}

func (*quickConnectQueueQuickConnectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectQueueQuickConnectConfig)(nil)).Elem()
}

func (i *quickConnectQueueQuickConnectConfigPtrType) ToQuickConnectQueueQuickConnectConfigPtrOutput() QuickConnectQueueQuickConnectConfigPtrOutput {
	return i.ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i *quickConnectQueueQuickConnectConfigPtrType) ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectQueueQuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectQueueQuickConnectConfigPtrOutput)
}

// The queue configuration. This is required only if QuickConnectType is QUEUE.
type QuickConnectQueueQuickConnectConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectQueueQuickConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectQueueQuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectQueueQuickConnectConfigOutput) ToQuickConnectQueueQuickConnectConfigOutput() QuickConnectQueueQuickConnectConfigOutput {
	return o
}

func (o QuickConnectQueueQuickConnectConfigOutput) ToQuickConnectQueueQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectQueueQuickConnectConfigOutput {
	return o
}

func (o QuickConnectQueueQuickConnectConfigOutput) ToQuickConnectQueueQuickConnectConfigPtrOutput() QuickConnectQueueQuickConnectConfigPtrOutput {
	return o.ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (o QuickConnectQueueQuickConnectConfigOutput) ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectQueueQuickConnectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuickConnectQueueQuickConnectConfig) *QuickConnectQueueQuickConnectConfig {
		return &v
	}).(QuickConnectQueueQuickConnectConfigPtrOutput)
}

func (o QuickConnectQueueQuickConnectConfigOutput) ContactFlowArn() pulumi.StringOutput {
	return o.ApplyT(func(v QuickConnectQueueQuickConnectConfig) string { return v.ContactFlowArn }).(pulumi.StringOutput)
}

func (o QuickConnectQueueQuickConnectConfigOutput) QueueArn() pulumi.StringOutput {
	return o.ApplyT(func(v QuickConnectQueueQuickConnectConfig) string { return v.QueueArn }).(pulumi.StringOutput)
}

type QuickConnectQueueQuickConnectConfigPtrOutput struct{ *pulumi.OutputState }

func (QuickConnectQueueQuickConnectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectQueueQuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectQueueQuickConnectConfigPtrOutput) ToQuickConnectQueueQuickConnectConfigPtrOutput() QuickConnectQueueQuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectQueueQuickConnectConfigPtrOutput) ToQuickConnectQueueQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectQueueQuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectQueueQuickConnectConfigPtrOutput) Elem() QuickConnectQueueQuickConnectConfigOutput {
	return o.ApplyT(func(v *QuickConnectQueueQuickConnectConfig) QuickConnectQueueQuickConnectConfig {
		if v != nil {
			return *v
		}
		var ret QuickConnectQueueQuickConnectConfig
		return ret
	}).(QuickConnectQueueQuickConnectConfigOutput)
}

func (o QuickConnectQueueQuickConnectConfigPtrOutput) ContactFlowArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuickConnectQueueQuickConnectConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ContactFlowArn
	}).(pulumi.StringPtrOutput)
}

func (o QuickConnectQueueQuickConnectConfigPtrOutput) QueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuickConnectQueueQuickConnectConfig) *string {
		if v == nil {
			return nil
		}
		return &v.QueueArn
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type QuickConnectTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// QuickConnectTagInput is an input type that accepts QuickConnectTagArgs and QuickConnectTagOutput values.
// You can construct a concrete instance of `QuickConnectTagInput` via:
//
//          QuickConnectTagArgs{...}
type QuickConnectTagInput interface {
	pulumi.Input

	ToQuickConnectTagOutput() QuickConnectTagOutput
	ToQuickConnectTagOutputWithContext(context.Context) QuickConnectTagOutput
}

// A key-value pair to associate with a resource.
type QuickConnectTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (QuickConnectTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectTag)(nil)).Elem()
}

func (i QuickConnectTagArgs) ToQuickConnectTagOutput() QuickConnectTagOutput {
	return i.ToQuickConnectTagOutputWithContext(context.Background())
}

func (i QuickConnectTagArgs) ToQuickConnectTagOutputWithContext(ctx context.Context) QuickConnectTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectTagOutput)
}

// QuickConnectTagArrayInput is an input type that accepts QuickConnectTagArray and QuickConnectTagArrayOutput values.
// You can construct a concrete instance of `QuickConnectTagArrayInput` via:
//
//          QuickConnectTagArray{ QuickConnectTagArgs{...} }
type QuickConnectTagArrayInput interface {
	pulumi.Input

	ToQuickConnectTagArrayOutput() QuickConnectTagArrayOutput
	ToQuickConnectTagArrayOutputWithContext(context.Context) QuickConnectTagArrayOutput
}

type QuickConnectTagArray []QuickConnectTagInput

func (QuickConnectTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuickConnectTag)(nil)).Elem()
}

func (i QuickConnectTagArray) ToQuickConnectTagArrayOutput() QuickConnectTagArrayOutput {
	return i.ToQuickConnectTagArrayOutputWithContext(context.Background())
}

func (i QuickConnectTagArray) ToQuickConnectTagArrayOutputWithContext(ctx context.Context) QuickConnectTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectTagArrayOutput)
}

// A key-value pair to associate with a resource.
type QuickConnectTagOutput struct{ *pulumi.OutputState }

func (QuickConnectTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectTag)(nil)).Elem()
}

func (o QuickConnectTagOutput) ToQuickConnectTagOutput() QuickConnectTagOutput {
	return o
}

func (o QuickConnectTagOutput) ToQuickConnectTagOutputWithContext(ctx context.Context) QuickConnectTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o QuickConnectTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v QuickConnectTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o QuickConnectTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v QuickConnectTag) string { return v.Value }).(pulumi.StringOutput)
}

type QuickConnectTagArrayOutput struct{ *pulumi.OutputState }

func (QuickConnectTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuickConnectTag)(nil)).Elem()
}

func (o QuickConnectTagArrayOutput) ToQuickConnectTagArrayOutput() QuickConnectTagArrayOutput {
	return o
}

func (o QuickConnectTagArrayOutput) ToQuickConnectTagArrayOutputWithContext(ctx context.Context) QuickConnectTagArrayOutput {
	return o
}

func (o QuickConnectTagArrayOutput) Index(i pulumi.IntInput) QuickConnectTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuickConnectTag {
		return vs[0].([]QuickConnectTag)[vs[1].(int)]
	}).(QuickConnectTagOutput)
}

// The user configuration. This is required only if QuickConnectType is USER.
type QuickConnectUserQuickConnectConfig struct {
	ContactFlowArn string `pulumi:"contactFlowArn"`
	UserArn        string `pulumi:"userArn"`
}

// QuickConnectUserQuickConnectConfigInput is an input type that accepts QuickConnectUserQuickConnectConfigArgs and QuickConnectUserQuickConnectConfigOutput values.
// You can construct a concrete instance of `QuickConnectUserQuickConnectConfigInput` via:
//
//          QuickConnectUserQuickConnectConfigArgs{...}
type QuickConnectUserQuickConnectConfigInput interface {
	pulumi.Input

	ToQuickConnectUserQuickConnectConfigOutput() QuickConnectUserQuickConnectConfigOutput
	ToQuickConnectUserQuickConnectConfigOutputWithContext(context.Context) QuickConnectUserQuickConnectConfigOutput
}

// The user configuration. This is required only if QuickConnectType is USER.
type QuickConnectUserQuickConnectConfigArgs struct {
	ContactFlowArn pulumi.StringInput `pulumi:"contactFlowArn"`
	UserArn        pulumi.StringInput `pulumi:"userArn"`
}

func (QuickConnectUserQuickConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectUserQuickConnectConfig)(nil)).Elem()
}

func (i QuickConnectUserQuickConnectConfigArgs) ToQuickConnectUserQuickConnectConfigOutput() QuickConnectUserQuickConnectConfigOutput {
	return i.ToQuickConnectUserQuickConnectConfigOutputWithContext(context.Background())
}

func (i QuickConnectUserQuickConnectConfigArgs) ToQuickConnectUserQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectUserQuickConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectUserQuickConnectConfigOutput)
}

func (i QuickConnectUserQuickConnectConfigArgs) ToQuickConnectUserQuickConnectConfigPtrOutput() QuickConnectUserQuickConnectConfigPtrOutput {
	return i.ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i QuickConnectUserQuickConnectConfigArgs) ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectUserQuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectUserQuickConnectConfigOutput).ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(ctx)
}

// QuickConnectUserQuickConnectConfigPtrInput is an input type that accepts QuickConnectUserQuickConnectConfigArgs, QuickConnectUserQuickConnectConfigPtr and QuickConnectUserQuickConnectConfigPtrOutput values.
// You can construct a concrete instance of `QuickConnectUserQuickConnectConfigPtrInput` via:
//
//          QuickConnectUserQuickConnectConfigArgs{...}
//
//  or:
//
//          nil
type QuickConnectUserQuickConnectConfigPtrInput interface {
	pulumi.Input

	ToQuickConnectUserQuickConnectConfigPtrOutput() QuickConnectUserQuickConnectConfigPtrOutput
	ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(context.Context) QuickConnectUserQuickConnectConfigPtrOutput
}

type quickConnectUserQuickConnectConfigPtrType QuickConnectUserQuickConnectConfigArgs

func QuickConnectUserQuickConnectConfigPtr(v *QuickConnectUserQuickConnectConfigArgs) QuickConnectUserQuickConnectConfigPtrInput {
	return (*quickConnectUserQuickConnectConfigPtrType)(v)
}

func (*quickConnectUserQuickConnectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectUserQuickConnectConfig)(nil)).Elem()
}

func (i *quickConnectUserQuickConnectConfigPtrType) ToQuickConnectUserQuickConnectConfigPtrOutput() QuickConnectUserQuickConnectConfigPtrOutput {
	return i.ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (i *quickConnectUserQuickConnectConfigPtrType) ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectUserQuickConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectUserQuickConnectConfigPtrOutput)
}

// The user configuration. This is required only if QuickConnectType is USER.
type QuickConnectUserQuickConnectConfigOutput struct{ *pulumi.OutputState }

func (QuickConnectUserQuickConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnectUserQuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectUserQuickConnectConfigOutput) ToQuickConnectUserQuickConnectConfigOutput() QuickConnectUserQuickConnectConfigOutput {
	return o
}

func (o QuickConnectUserQuickConnectConfigOutput) ToQuickConnectUserQuickConnectConfigOutputWithContext(ctx context.Context) QuickConnectUserQuickConnectConfigOutput {
	return o
}

func (o QuickConnectUserQuickConnectConfigOutput) ToQuickConnectUserQuickConnectConfigPtrOutput() QuickConnectUserQuickConnectConfigPtrOutput {
	return o.ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(context.Background())
}

func (o QuickConnectUserQuickConnectConfigOutput) ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectUserQuickConnectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuickConnectUserQuickConnectConfig) *QuickConnectUserQuickConnectConfig {
		return &v
	}).(QuickConnectUserQuickConnectConfigPtrOutput)
}

func (o QuickConnectUserQuickConnectConfigOutput) ContactFlowArn() pulumi.StringOutput {
	return o.ApplyT(func(v QuickConnectUserQuickConnectConfig) string { return v.ContactFlowArn }).(pulumi.StringOutput)
}

func (o QuickConnectUserQuickConnectConfigOutput) UserArn() pulumi.StringOutput {
	return o.ApplyT(func(v QuickConnectUserQuickConnectConfig) string { return v.UserArn }).(pulumi.StringOutput)
}

type QuickConnectUserQuickConnectConfigPtrOutput struct{ *pulumi.OutputState }

func (QuickConnectUserQuickConnectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuickConnectUserQuickConnectConfig)(nil)).Elem()
}

func (o QuickConnectUserQuickConnectConfigPtrOutput) ToQuickConnectUserQuickConnectConfigPtrOutput() QuickConnectUserQuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectUserQuickConnectConfigPtrOutput) ToQuickConnectUserQuickConnectConfigPtrOutputWithContext(ctx context.Context) QuickConnectUserQuickConnectConfigPtrOutput {
	return o
}

func (o QuickConnectUserQuickConnectConfigPtrOutput) Elem() QuickConnectUserQuickConnectConfigOutput {
	return o.ApplyT(func(v *QuickConnectUserQuickConnectConfig) QuickConnectUserQuickConnectConfig {
		if v != nil {
			return *v
		}
		var ret QuickConnectUserQuickConnectConfig
		return ret
	}).(QuickConnectUserQuickConnectConfigOutput)
}

func (o QuickConnectUserQuickConnectConfigPtrOutput) ContactFlowArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuickConnectUserQuickConnectConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ContactFlowArn
	}).(pulumi.StringPtrOutput)
}

func (o QuickConnectUserQuickConnectConfigPtrOutput) UserArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QuickConnectUserQuickConnectConfig) *string {
		if v == nil {
			return nil
		}
		return &v.UserArn
	}).(pulumi.StringPtrOutput)
}

// Contains information about the identity of a user.
type UserIdentityInfo struct {
	Email     *string `pulumi:"email"`
	FirstName *string `pulumi:"firstName"`
	LastName  *string `pulumi:"lastName"`
}

// UserIdentityInfoInput is an input type that accepts UserIdentityInfoArgs and UserIdentityInfoOutput values.
// You can construct a concrete instance of `UserIdentityInfoInput` via:
//
//          UserIdentityInfoArgs{...}
type UserIdentityInfoInput interface {
	pulumi.Input

	ToUserIdentityInfoOutput() UserIdentityInfoOutput
	ToUserIdentityInfoOutputWithContext(context.Context) UserIdentityInfoOutput
}

// Contains information about the identity of a user.
type UserIdentityInfoArgs struct {
	Email     pulumi.StringPtrInput `pulumi:"email"`
	FirstName pulumi.StringPtrInput `pulumi:"firstName"`
	LastName  pulumi.StringPtrInput `pulumi:"lastName"`
}

func (UserIdentityInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityInfo)(nil)).Elem()
}

func (i UserIdentityInfoArgs) ToUserIdentityInfoOutput() UserIdentityInfoOutput {
	return i.ToUserIdentityInfoOutputWithContext(context.Background())
}

func (i UserIdentityInfoArgs) ToUserIdentityInfoOutputWithContext(ctx context.Context) UserIdentityInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityInfoOutput)
}

func (i UserIdentityInfoArgs) ToUserIdentityInfoPtrOutput() UserIdentityInfoPtrOutput {
	return i.ToUserIdentityInfoPtrOutputWithContext(context.Background())
}

func (i UserIdentityInfoArgs) ToUserIdentityInfoPtrOutputWithContext(ctx context.Context) UserIdentityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityInfoOutput).ToUserIdentityInfoPtrOutputWithContext(ctx)
}

// UserIdentityInfoPtrInput is an input type that accepts UserIdentityInfoArgs, UserIdentityInfoPtr and UserIdentityInfoPtrOutput values.
// You can construct a concrete instance of `UserIdentityInfoPtrInput` via:
//
//          UserIdentityInfoArgs{...}
//
//  or:
//
//          nil
type UserIdentityInfoPtrInput interface {
	pulumi.Input

	ToUserIdentityInfoPtrOutput() UserIdentityInfoPtrOutput
	ToUserIdentityInfoPtrOutputWithContext(context.Context) UserIdentityInfoPtrOutput
}

type userIdentityInfoPtrType UserIdentityInfoArgs

func UserIdentityInfoPtr(v *UserIdentityInfoArgs) UserIdentityInfoPtrInput {
	return (*userIdentityInfoPtrType)(v)
}

func (*userIdentityInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentityInfo)(nil)).Elem()
}

func (i *userIdentityInfoPtrType) ToUserIdentityInfoPtrOutput() UserIdentityInfoPtrOutput {
	return i.ToUserIdentityInfoPtrOutputWithContext(context.Background())
}

func (i *userIdentityInfoPtrType) ToUserIdentityInfoPtrOutputWithContext(ctx context.Context) UserIdentityInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityInfoPtrOutput)
}

// Contains information about the identity of a user.
type UserIdentityInfoOutput struct{ *pulumi.OutputState }

func (UserIdentityInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityInfo)(nil)).Elem()
}

func (o UserIdentityInfoOutput) ToUserIdentityInfoOutput() UserIdentityInfoOutput {
	return o
}

func (o UserIdentityInfoOutput) ToUserIdentityInfoOutputWithContext(ctx context.Context) UserIdentityInfoOutput {
	return o
}

func (o UserIdentityInfoOutput) ToUserIdentityInfoPtrOutput() UserIdentityInfoPtrOutput {
	return o.ToUserIdentityInfoPtrOutputWithContext(context.Background())
}

func (o UserIdentityInfoOutput) ToUserIdentityInfoPtrOutputWithContext(ctx context.Context) UserIdentityInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserIdentityInfo) *UserIdentityInfo {
		return &v
	}).(UserIdentityInfoPtrOutput)
}

func (o UserIdentityInfoOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityInfo) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o UserIdentityInfoOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityInfo) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

func (o UserIdentityInfoOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityInfo) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

type UserIdentityInfoPtrOutput struct{ *pulumi.OutputState }

func (UserIdentityInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentityInfo)(nil)).Elem()
}

func (o UserIdentityInfoPtrOutput) ToUserIdentityInfoPtrOutput() UserIdentityInfoPtrOutput {
	return o
}

func (o UserIdentityInfoPtrOutput) ToUserIdentityInfoPtrOutputWithContext(ctx context.Context) UserIdentityInfoPtrOutput {
	return o
}

func (o UserIdentityInfoPtrOutput) Elem() UserIdentityInfoOutput {
	return o.ApplyT(func(v *UserIdentityInfo) UserIdentityInfo {
		if v != nil {
			return *v
		}
		var ret UserIdentityInfo
		return ret
	}).(UserIdentityInfoOutput)
}

func (o UserIdentityInfoPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

func (o UserIdentityInfoPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.FirstName
	}).(pulumi.StringPtrOutput)
}

func (o UserIdentityInfoPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentityInfo) *string {
		if v == nil {
			return nil
		}
		return v.LastName
	}).(pulumi.StringPtrOutput)
}

// Contains information about the phone configuration settings for a user.
type UserPhoneConfig struct {
	AfterContactWorkTimeLimit *int          `pulumi:"afterContactWorkTimeLimit"`
	AutoAccept                *bool         `pulumi:"autoAccept"`
	DeskPhoneNumber           *string       `pulumi:"deskPhoneNumber"`
	PhoneType                 UserPhoneType `pulumi:"phoneType"`
}

// UserPhoneConfigInput is an input type that accepts UserPhoneConfigArgs and UserPhoneConfigOutput values.
// You can construct a concrete instance of `UserPhoneConfigInput` via:
//
//          UserPhoneConfigArgs{...}
type UserPhoneConfigInput interface {
	pulumi.Input

	ToUserPhoneConfigOutput() UserPhoneConfigOutput
	ToUserPhoneConfigOutputWithContext(context.Context) UserPhoneConfigOutput
}

// Contains information about the phone configuration settings for a user.
type UserPhoneConfigArgs struct {
	AfterContactWorkTimeLimit pulumi.IntPtrInput    `pulumi:"afterContactWorkTimeLimit"`
	AutoAccept                pulumi.BoolPtrInput   `pulumi:"autoAccept"`
	DeskPhoneNumber           pulumi.StringPtrInput `pulumi:"deskPhoneNumber"`
	PhoneType                 UserPhoneTypeInput    `pulumi:"phoneType"`
}

func (UserPhoneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPhoneConfig)(nil)).Elem()
}

func (i UserPhoneConfigArgs) ToUserPhoneConfigOutput() UserPhoneConfigOutput {
	return i.ToUserPhoneConfigOutputWithContext(context.Background())
}

func (i UserPhoneConfigArgs) ToUserPhoneConfigOutputWithContext(ctx context.Context) UserPhoneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPhoneConfigOutput)
}

func (i UserPhoneConfigArgs) ToUserPhoneConfigPtrOutput() UserPhoneConfigPtrOutput {
	return i.ToUserPhoneConfigPtrOutputWithContext(context.Background())
}

func (i UserPhoneConfigArgs) ToUserPhoneConfigPtrOutputWithContext(ctx context.Context) UserPhoneConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPhoneConfigOutput).ToUserPhoneConfigPtrOutputWithContext(ctx)
}

// UserPhoneConfigPtrInput is an input type that accepts UserPhoneConfigArgs, UserPhoneConfigPtr and UserPhoneConfigPtrOutput values.
// You can construct a concrete instance of `UserPhoneConfigPtrInput` via:
//
//          UserPhoneConfigArgs{...}
//
//  or:
//
//          nil
type UserPhoneConfigPtrInput interface {
	pulumi.Input

	ToUserPhoneConfigPtrOutput() UserPhoneConfigPtrOutput
	ToUserPhoneConfigPtrOutputWithContext(context.Context) UserPhoneConfigPtrOutput
}

type userPhoneConfigPtrType UserPhoneConfigArgs

func UserPhoneConfigPtr(v *UserPhoneConfigArgs) UserPhoneConfigPtrInput {
	return (*userPhoneConfigPtrType)(v)
}

func (*userPhoneConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPhoneConfig)(nil)).Elem()
}

func (i *userPhoneConfigPtrType) ToUserPhoneConfigPtrOutput() UserPhoneConfigPtrOutput {
	return i.ToUserPhoneConfigPtrOutputWithContext(context.Background())
}

func (i *userPhoneConfigPtrType) ToUserPhoneConfigPtrOutputWithContext(ctx context.Context) UserPhoneConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPhoneConfigPtrOutput)
}

// Contains information about the phone configuration settings for a user.
type UserPhoneConfigOutput struct{ *pulumi.OutputState }

func (UserPhoneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPhoneConfig)(nil)).Elem()
}

func (o UserPhoneConfigOutput) ToUserPhoneConfigOutput() UserPhoneConfigOutput {
	return o
}

func (o UserPhoneConfigOutput) ToUserPhoneConfigOutputWithContext(ctx context.Context) UserPhoneConfigOutput {
	return o
}

func (o UserPhoneConfigOutput) ToUserPhoneConfigPtrOutput() UserPhoneConfigPtrOutput {
	return o.ToUserPhoneConfigPtrOutputWithContext(context.Background())
}

func (o UserPhoneConfigOutput) ToUserPhoneConfigPtrOutputWithContext(ctx context.Context) UserPhoneConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPhoneConfig) *UserPhoneConfig {
		return &v
	}).(UserPhoneConfigPtrOutput)
}

func (o UserPhoneConfigOutput) AfterContactWorkTimeLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserPhoneConfig) *int { return v.AfterContactWorkTimeLimit }).(pulumi.IntPtrOutput)
}

func (o UserPhoneConfigOutput) AutoAccept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserPhoneConfig) *bool { return v.AutoAccept }).(pulumi.BoolPtrOutput)
}

func (o UserPhoneConfigOutput) DeskPhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPhoneConfig) *string { return v.DeskPhoneNumber }).(pulumi.StringPtrOutput)
}

func (o UserPhoneConfigOutput) PhoneType() UserPhoneTypeOutput {
	return o.ApplyT(func(v UserPhoneConfig) UserPhoneType { return v.PhoneType }).(UserPhoneTypeOutput)
}

type UserPhoneConfigPtrOutput struct{ *pulumi.OutputState }

func (UserPhoneConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPhoneConfig)(nil)).Elem()
}

func (o UserPhoneConfigPtrOutput) ToUserPhoneConfigPtrOutput() UserPhoneConfigPtrOutput {
	return o
}

func (o UserPhoneConfigPtrOutput) ToUserPhoneConfigPtrOutputWithContext(ctx context.Context) UserPhoneConfigPtrOutput {
	return o
}

func (o UserPhoneConfigPtrOutput) Elem() UserPhoneConfigOutput {
	return o.ApplyT(func(v *UserPhoneConfig) UserPhoneConfig {
		if v != nil {
			return *v
		}
		var ret UserPhoneConfig
		return ret
	}).(UserPhoneConfigOutput)
}

func (o UserPhoneConfigPtrOutput) AfterContactWorkTimeLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserPhoneConfig) *int {
		if v == nil {
			return nil
		}
		return v.AfterContactWorkTimeLimit
	}).(pulumi.IntPtrOutput)
}

func (o UserPhoneConfigPtrOutput) AutoAccept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserPhoneConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AutoAccept
	}).(pulumi.BoolPtrOutput)
}

func (o UserPhoneConfigPtrOutput) DeskPhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPhoneConfig) *string {
		if v == nil {
			return nil
		}
		return v.DeskPhoneNumber
	}).(pulumi.StringPtrOutput)
}

func (o UserPhoneConfigPtrOutput) PhoneType() UserPhoneTypePtrOutput {
	return o.ApplyT(func(v *UserPhoneConfig) *UserPhoneType {
		if v == nil {
			return nil
		}
		return &v.PhoneType
	}).(UserPhoneTypePtrOutput)
}

// A key-value pair to associate with a resource.
type UserTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// UserTagInput is an input type that accepts UserTagArgs and UserTagOutput values.
// You can construct a concrete instance of `UserTagInput` via:
//
//          UserTagArgs{...}
type UserTagInput interface {
	pulumi.Input

	ToUserTagOutput() UserTagOutput
	ToUserTagOutputWithContext(context.Context) UserTagOutput
}

// A key-value pair to associate with a resource.
type UserTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (UserTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (i UserTagArgs) ToUserTagOutput() UserTagOutput {
	return i.ToUserTagOutputWithContext(context.Background())
}

func (i UserTagArgs) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagOutput)
}

// UserTagArrayInput is an input type that accepts UserTagArray and UserTagArrayOutput values.
// You can construct a concrete instance of `UserTagArrayInput` via:
//
//          UserTagArray{ UserTagArgs{...} }
type UserTagArrayInput interface {
	pulumi.Input

	ToUserTagArrayOutput() UserTagArrayOutput
	ToUserTagArrayOutputWithContext(context.Context) UserTagArrayOutput
}

type UserTagArray []UserTagInput

func (UserTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (i UserTagArray) ToUserTagArrayOutput() UserTagArrayOutput {
	return i.ToUserTagArrayOutputWithContext(context.Background())
}

func (i UserTagArray) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagArrayOutput)
}

// A key-value pair to associate with a resource.
type UserTagOutput struct{ *pulumi.OutputState }

func (UserTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (o UserTagOutput) ToUserTagOutput() UserTagOutput {
	return o
}

func (o UserTagOutput) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o UserTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o UserTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Value }).(pulumi.StringOutput)
}

type UserTagArrayOutput struct{ *pulumi.OutputState }

func (UserTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (o UserTagArrayOutput) ToUserTagArrayOutput() UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) Index(i pulumi.IntInput) UserTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserTag {
		return vs[0].([]UserTag)[vs[1].(int)]
	}).(UserTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowModuleTagInput)(nil)).Elem(), ContactFlowModuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowModuleTagArrayInput)(nil)).Elem(), ContactFlowModuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowTagInput)(nil)).Elem(), ContactFlowTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactFlowTagArrayInput)(nil)).Elem(), ContactFlowTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationConfigInput)(nil)).Elem(), HoursOfOperationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationConfigArrayInput)(nil)).Elem(), HoursOfOperationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationTagInput)(nil)).Elem(), HoursOfOperationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationTagArrayInput)(nil)).Elem(), HoursOfOperationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HoursOfOperationTimeSliceInput)(nil)).Elem(), HoursOfOperationTimeSliceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectConfigInput)(nil)).Elem(), QuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectConfigPtrInput)(nil)).Elem(), QuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectPhoneNumberQuickConnectConfigInput)(nil)).Elem(), QuickConnectPhoneNumberQuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectPhoneNumberQuickConnectConfigPtrInput)(nil)).Elem(), QuickConnectPhoneNumberQuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectQueueQuickConnectConfigInput)(nil)).Elem(), QuickConnectQueueQuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectQueueQuickConnectConfigPtrInput)(nil)).Elem(), QuickConnectQueueQuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectTagInput)(nil)).Elem(), QuickConnectTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectTagArrayInput)(nil)).Elem(), QuickConnectTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectUserQuickConnectConfigInput)(nil)).Elem(), QuickConnectUserQuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectUserQuickConnectConfigPtrInput)(nil)).Elem(), QuickConnectUserQuickConnectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserIdentityInfoInput)(nil)).Elem(), UserIdentityInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserIdentityInfoPtrInput)(nil)).Elem(), UserIdentityInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPhoneConfigInput)(nil)).Elem(), UserPhoneConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPhoneConfigPtrInput)(nil)).Elem(), UserPhoneConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagInput)(nil)).Elem(), UserTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagArrayInput)(nil)).Elem(), UserTagArray{})
	pulumi.RegisterOutputType(ContactFlowModuleTagOutput{})
	pulumi.RegisterOutputType(ContactFlowModuleTagArrayOutput{})
	pulumi.RegisterOutputType(ContactFlowTagOutput{})
	pulumi.RegisterOutputType(ContactFlowTagArrayOutput{})
	pulumi.RegisterOutputType(HoursOfOperationConfigOutput{})
	pulumi.RegisterOutputType(HoursOfOperationConfigArrayOutput{})
	pulumi.RegisterOutputType(HoursOfOperationTagOutput{})
	pulumi.RegisterOutputType(HoursOfOperationTagArrayOutput{})
	pulumi.RegisterOutputType(HoursOfOperationTimeSliceOutput{})
	pulumi.RegisterOutputType(QuickConnectConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectConfigPtrOutput{})
	pulumi.RegisterOutputType(QuickConnectPhoneNumberQuickConnectConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectPhoneNumberQuickConnectConfigPtrOutput{})
	pulumi.RegisterOutputType(QuickConnectQueueQuickConnectConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectQueueQuickConnectConfigPtrOutput{})
	pulumi.RegisterOutputType(QuickConnectTagOutput{})
	pulumi.RegisterOutputType(QuickConnectTagArrayOutput{})
	pulumi.RegisterOutputType(QuickConnectUserQuickConnectConfigOutput{})
	pulumi.RegisterOutputType(QuickConnectUserQuickConnectConfigPtrOutput{})
	pulumi.RegisterOutputType(UserIdentityInfoOutput{})
	pulumi.RegisterOutputType(UserIdentityInfoPtrOutput{})
	pulumi.RegisterOutputType(UserPhoneConfigOutput{})
	pulumi.RegisterOutputType(UserPhoneConfigPtrOutput{})
	pulumi.RegisterOutputType(UserTagOutput{})
	pulumi.RegisterOutputType(UserTagArrayOutput{})
}
