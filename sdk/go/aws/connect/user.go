// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Connect::User
type User struct {
	pulumi.CustomResourceState

	// The identifier of the user account in the directory used for identity management.
	DirectoryUserId pulumi.StringPtrOutput `pulumi:"directoryUserId"`
	// The identifier of the hierarchy group for the user.
	HierarchyGroupArn pulumi.StringPtrOutput `pulumi:"hierarchyGroupArn"`
	// The information about the identity of the user.
	IdentityInfo UserIdentityInfoPtrOutput `pulumi:"identityInfo"`
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringOutput `pulumi:"instanceArn"`
	// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The phone settings for the user.
	PhoneConfig UserPhoneConfigOutput `pulumi:"phoneConfig"`
	// The identifier of the routing profile for the user.
	RoutingProfileArn pulumi.StringOutput `pulumi:"routingProfileArn"`
	// One or more security profile arns for the user
	SecurityProfileArns pulumi.StringArrayOutput `pulumi:"securityProfileArns"`
	// One or more tags.
	Tags UserTagArrayOutput `pulumi:"tags"`
	// The Amazon Resource Name (ARN) for the user.
	UserArn pulumi.StringOutput `pulumi:"userArn"`
	// The user name for the account.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	if args.PhoneConfig == nil {
		return nil, errors.New("invalid value for required argument 'PhoneConfig'")
	}
	if args.RoutingProfileArn == nil {
		return nil, errors.New("invalid value for required argument 'RoutingProfileArn'")
	}
	if args.SecurityProfileArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityProfileArns'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource User
	err := ctx.RegisterResource("aws-native:connect:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws-native:connect:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
}

type UserState struct {
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The identifier of the user account in the directory used for identity management.
	DirectoryUserId *string `pulumi:"directoryUserId"`
	// The identifier of the hierarchy group for the user.
	HierarchyGroupArn *string `pulumi:"hierarchyGroupArn"`
	// The information about the identity of the user.
	IdentityInfo *UserIdentityInfo `pulumi:"identityInfo"`
	// The identifier of the Amazon Connect instance.
	InstanceArn string `pulumi:"instanceArn"`
	// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
	Password *string `pulumi:"password"`
	// The phone settings for the user.
	PhoneConfig UserPhoneConfig `pulumi:"phoneConfig"`
	// The identifier of the routing profile for the user.
	RoutingProfileArn string `pulumi:"routingProfileArn"`
	// One or more security profile arns for the user
	SecurityProfileArns []string `pulumi:"securityProfileArns"`
	// One or more tags.
	Tags []UserTag `pulumi:"tags"`
	// The user name for the account.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The identifier of the user account in the directory used for identity management.
	DirectoryUserId pulumi.StringPtrInput
	// The identifier of the hierarchy group for the user.
	HierarchyGroupArn pulumi.StringPtrInput
	// The information about the identity of the user.
	IdentityInfo UserIdentityInfoPtrInput
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringInput
	// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
	Password pulumi.StringPtrInput
	// The phone settings for the user.
	PhoneConfig UserPhoneConfigInput
	// The identifier of the routing profile for the user.
	RoutingProfileArn pulumi.StringInput
	// One or more security profile arns for the user
	SecurityProfileArns pulumi.StringArrayInput
	// One or more tags.
	Tags UserTagArrayInput
	// The user name for the account.
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil))
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil))
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterOutputType(UserOutput{})
}
