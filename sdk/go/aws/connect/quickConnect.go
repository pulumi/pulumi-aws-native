// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Connect::QuickConnect
type QuickConnect struct {
	pulumi.CustomResourceState

	// The description of the quick connect.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringOutput `pulumi:"instanceArn"`
	// The name of the quick connect.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Resource Name (ARN) for the quick connect.
	QuickConnectArn pulumi.StringOutput `pulumi:"quickConnectArn"`
	// Configuration settings for the quick connect.
	QuickConnectConfig QuickConnectConfigOutput `pulumi:"quickConnectConfig"`
	// One or more tags.
	Tags QuickConnectTagArrayOutput `pulumi:"tags"`
}

// NewQuickConnect registers a new resource with the given unique name, arguments, and options.
func NewQuickConnect(ctx *pulumi.Context,
	name string, args *QuickConnectArgs, opts ...pulumi.ResourceOption) (*QuickConnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.QuickConnectConfig == nil {
		return nil, errors.New("invalid value for required argument 'QuickConnectConfig'")
	}
	var resource QuickConnect
	err := ctx.RegisterResource("aws-native:connect:QuickConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuickConnect gets an existing QuickConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuickConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QuickConnectState, opts ...pulumi.ResourceOption) (*QuickConnect, error) {
	var resource QuickConnect
	err := ctx.ReadResource("aws-native:connect:QuickConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QuickConnect resources.
type quickConnectState struct {
}

type QuickConnectState struct {
}

func (QuickConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*quickConnectState)(nil)).Elem()
}

type quickConnectArgs struct {
	// The description of the quick connect.
	Description *string `pulumi:"description"`
	// The identifier of the Amazon Connect instance.
	InstanceArn string `pulumi:"instanceArn"`
	// The name of the quick connect.
	Name string `pulumi:"name"`
	// Configuration settings for the quick connect.
	QuickConnectConfig QuickConnectConfig `pulumi:"quickConnectConfig"`
	// One or more tags.
	Tags []QuickConnectTag `pulumi:"tags"`
}

// The set of arguments for constructing a QuickConnect resource.
type QuickConnectArgs struct {
	// The description of the quick connect.
	Description pulumi.StringPtrInput
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringInput
	// The name of the quick connect.
	Name pulumi.StringInput
	// Configuration settings for the quick connect.
	QuickConnectConfig QuickConnectConfigInput
	// One or more tags.
	Tags QuickConnectTagArrayInput
}

func (QuickConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*quickConnectArgs)(nil)).Elem()
}

type QuickConnectInput interface {
	pulumi.Input

	ToQuickConnectOutput() QuickConnectOutput
	ToQuickConnectOutputWithContext(ctx context.Context) QuickConnectOutput
}

func (*QuickConnect) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnect)(nil))
}

func (i *QuickConnect) ToQuickConnectOutput() QuickConnectOutput {
	return i.ToQuickConnectOutputWithContext(context.Background())
}

func (i *QuickConnect) ToQuickConnectOutputWithContext(ctx context.Context) QuickConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickConnectOutput)
}

type QuickConnectOutput struct{ *pulumi.OutputState }

func (QuickConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickConnect)(nil))
}

func (o QuickConnectOutput) ToQuickConnectOutput() QuickConnectOutput {
	return o
}

func (o QuickConnectOutput) ToQuickConnectOutputWithContext(ctx context.Context) QuickConnectOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QuickConnectInput)(nil)).Elem(), &QuickConnect{})
	pulumi.RegisterOutputType(QuickConnectOutput{})
}
