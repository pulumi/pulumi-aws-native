// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Connect::EmailAddress
type EmailAddress struct {
	pulumi.CustomResourceState

	// A description for the email address.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name for the email address.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Email address to be created for this instance
	EmailAddress pulumi.StringOutput `pulumi:"emailAddress"`
	// The identifier of the email address.
	EmailAddressArn pulumi.StringOutput `pulumi:"emailAddressArn"`
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringOutput `pulumi:"instanceArn"`
	// One or more tags.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewEmailAddress registers a new resource with the given unique name, arguments, and options.
func NewEmailAddress(ctx *pulumi.Context,
	name string, args *EmailAddressArgs, opts ...pulumi.ResourceOption) (*EmailAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	if args.InstanceArn == nil {
		return nil, errors.New("invalid value for required argument 'InstanceArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"emailAddress",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailAddress
	err := ctx.RegisterResource("aws-native:connect:EmailAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailAddress gets an existing EmailAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailAddressState, opts ...pulumi.ResourceOption) (*EmailAddress, error) {
	var resource EmailAddress
	err := ctx.ReadResource("aws-native:connect:EmailAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailAddress resources.
type emailAddressState struct {
}

type EmailAddressState struct {
}

func (EmailAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailAddressState)(nil)).Elem()
}

type emailAddressArgs struct {
	// A description for the email address.
	Description *string `pulumi:"description"`
	// The display name for the email address.
	DisplayName *string `pulumi:"displayName"`
	// Email address to be created for this instance
	EmailAddress string `pulumi:"emailAddress"`
	// The identifier of the Amazon Connect instance.
	InstanceArn string `pulumi:"instanceArn"`
	// One or more tags.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a EmailAddress resource.
type EmailAddressArgs struct {
	// A description for the email address.
	Description pulumi.StringPtrInput
	// The display name for the email address.
	DisplayName pulumi.StringPtrInput
	// Email address to be created for this instance
	EmailAddress pulumi.StringInput
	// The identifier of the Amazon Connect instance.
	InstanceArn pulumi.StringInput
	// One or more tags.
	Tags aws.TagArrayInput
}

func (EmailAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailAddressArgs)(nil)).Elem()
}

type EmailAddressInput interface {
	pulumi.Input

	ToEmailAddressOutput() EmailAddressOutput
	ToEmailAddressOutputWithContext(ctx context.Context) EmailAddressOutput
}

func (*EmailAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailAddress)(nil)).Elem()
}

func (i *EmailAddress) ToEmailAddressOutput() EmailAddressOutput {
	return i.ToEmailAddressOutputWithContext(context.Background())
}

func (i *EmailAddress) ToEmailAddressOutputWithContext(ctx context.Context) EmailAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailAddressOutput)
}

type EmailAddressOutput struct{ *pulumi.OutputState }

func (EmailAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailAddress)(nil)).Elem()
}

func (o EmailAddressOutput) ToEmailAddressOutput() EmailAddressOutput {
	return o
}

func (o EmailAddressOutput) ToEmailAddressOutputWithContext(ctx context.Context) EmailAddressOutput {
	return o
}

// A description for the email address.
func (o EmailAddressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailAddress) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the email address.
func (o EmailAddressOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailAddress) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Email address to be created for this instance
func (o EmailAddressOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailAddress) pulumi.StringOutput { return v.EmailAddress }).(pulumi.StringOutput)
}

// The identifier of the email address.
func (o EmailAddressOutput) EmailAddressArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailAddress) pulumi.StringOutput { return v.EmailAddressArn }).(pulumi.StringOutput)
}

// The identifier of the Amazon Connect instance.
func (o EmailAddressOutput) InstanceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailAddress) pulumi.StringOutput { return v.InstanceArn }).(pulumi.StringOutput)
}

// One or more tags.
func (o EmailAddressOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *EmailAddress) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailAddressInput)(nil)).Elem(), &EmailAddress{})
	pulumi.RegisterOutputType(EmailAddressOutput{})
}
