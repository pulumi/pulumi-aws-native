// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::Connect::TaskTemplate.
func LookupTaskTemplate(ctx *pulumi.Context, args *LookupTaskTemplateArgs, opts ...pulumi.InvokeOption) (*LookupTaskTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaskTemplateResult
	err := ctx.Invoke("aws-native:connect:getTaskTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTaskTemplateArgs struct {
	// The identifier (arn) of the task template.
	Arn string `pulumi:"arn"`
}

type LookupTaskTemplateResult struct {
	// The identifier (arn) of the task template.
	Arn         *string `pulumi:"arn"`
	ClientToken *string `pulumi:"clientToken"`
	// The constraints for the task template
	Constraints *ConstraintsProperties `pulumi:"constraints"`
	// The identifier of the contact flow.
	ContactFlowArn *string                         `pulumi:"contactFlowArn"`
	Defaults       []TaskTemplateDefaultFieldValue `pulumi:"defaults"`
	// The description of the task template.
	Description *string `pulumi:"description"`
	// The list of task template's fields
	Fields []TaskTemplateField `pulumi:"fields"`
	// The identifier (arn) of the instance.
	InstanceArn *string `pulumi:"instanceArn"`
	// The name of the task template.
	Name   *string             `pulumi:"name"`
	Status *TaskTemplateStatus `pulumi:"status"`
	// One or more tags.
	Tags []TaskTemplateTag `pulumi:"tags"`
}

func LookupTaskTemplateOutput(ctx *pulumi.Context, args LookupTaskTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupTaskTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTaskTemplateResult, error) {
			args := v.(LookupTaskTemplateArgs)
			r, err := LookupTaskTemplate(ctx, &args, opts...)
			var s LookupTaskTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTaskTemplateResultOutput)
}

type LookupTaskTemplateOutputArgs struct {
	// The identifier (arn) of the task template.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupTaskTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskTemplateArgs)(nil)).Elem()
}

type LookupTaskTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupTaskTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskTemplateResult)(nil)).Elem()
}

func (o LookupTaskTemplateResultOutput) ToLookupTaskTemplateResultOutput() LookupTaskTemplateResultOutput {
	return o
}

func (o LookupTaskTemplateResultOutput) ToLookupTaskTemplateResultOutputWithContext(ctx context.Context) LookupTaskTemplateResultOutput {
	return o
}

func (o LookupTaskTemplateResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupTaskTemplateResult] {
	return pulumix.Output[LookupTaskTemplateResult]{
		OutputState: o.OutputState,
	}
}

// The identifier (arn) of the task template.
func (o LookupTaskTemplateResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupTaskTemplateResultOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *string { return v.ClientToken }).(pulumi.StringPtrOutput)
}

// The constraints for the task template
func (o LookupTaskTemplateResultOutput) Constraints() ConstraintsPropertiesPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *ConstraintsProperties { return v.Constraints }).(ConstraintsPropertiesPtrOutput)
}

// The identifier of the contact flow.
func (o LookupTaskTemplateResultOutput) ContactFlowArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *string { return v.ContactFlowArn }).(pulumi.StringPtrOutput)
}

func (o LookupTaskTemplateResultOutput) Defaults() TaskTemplateDefaultFieldValueArrayOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) []TaskTemplateDefaultFieldValue { return v.Defaults }).(TaskTemplateDefaultFieldValueArrayOutput)
}

// The description of the task template.
func (o LookupTaskTemplateResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of task template's fields
func (o LookupTaskTemplateResultOutput) Fields() TaskTemplateFieldArrayOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) []TaskTemplateField { return v.Fields }).(TaskTemplateFieldArrayOutput)
}

// The identifier (arn) of the instance.
func (o LookupTaskTemplateResultOutput) InstanceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *string { return v.InstanceArn }).(pulumi.StringPtrOutput)
}

// The name of the task template.
func (o LookupTaskTemplateResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupTaskTemplateResultOutput) Status() TaskTemplateStatusPtrOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) *TaskTemplateStatus { return v.Status }).(TaskTemplateStatusPtrOutput)
}

// One or more tags.
func (o LookupTaskTemplateResultOutput) Tags() TaskTemplateTagArrayOutput {
	return o.ApplyT(func(v LookupTaskTemplateResult) []TaskTemplateTag { return v.Tags }).(TaskTemplateTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaskTemplateResultOutput{})
}
