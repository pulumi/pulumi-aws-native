// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package connect

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Connect::QuickConnect
func LookupQuickConnect(ctx *pulumi.Context, args *LookupQuickConnectArgs, opts ...pulumi.InvokeOption) (*LookupQuickConnectResult, error) {
	var rv LookupQuickConnectResult
	err := ctx.Invoke("aws-native:connect:getQuickConnect", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupQuickConnectArgs struct {
	// The Amazon Resource Name (ARN) for the quick connect.
	QuickConnectArn string `pulumi:"quickConnectArn"`
}

type LookupQuickConnectResult struct {
	// The description of the quick connect.
	Description *string `pulumi:"description"`
	// The identifier of the Amazon Connect instance.
	InstanceArn *string `pulumi:"instanceArn"`
	// The name of the quick connect.
	Name *string `pulumi:"name"`
	// The Amazon Resource Name (ARN) for the quick connect.
	QuickConnectArn *string `pulumi:"quickConnectArn"`
	// Configuration settings for the quick connect.
	QuickConnectConfig *QuickConnectConfig `pulumi:"quickConnectConfig"`
	// One or more tags.
	Tags []QuickConnectTag `pulumi:"tags"`
}

func LookupQuickConnectOutput(ctx *pulumi.Context, args LookupQuickConnectOutputArgs, opts ...pulumi.InvokeOption) LookupQuickConnectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQuickConnectResult, error) {
			args := v.(LookupQuickConnectArgs)
			r, err := LookupQuickConnect(ctx, &args, opts...)
			var s LookupQuickConnectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQuickConnectResultOutput)
}

type LookupQuickConnectOutputArgs struct {
	// The Amazon Resource Name (ARN) for the quick connect.
	QuickConnectArn pulumi.StringInput `pulumi:"quickConnectArn"`
}

func (LookupQuickConnectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQuickConnectArgs)(nil)).Elem()
}

type LookupQuickConnectResultOutput struct{ *pulumi.OutputState }

func (LookupQuickConnectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQuickConnectResult)(nil)).Elem()
}

func (o LookupQuickConnectResultOutput) ToLookupQuickConnectResultOutput() LookupQuickConnectResultOutput {
	return o
}

func (o LookupQuickConnectResultOutput) ToLookupQuickConnectResultOutputWithContext(ctx context.Context) LookupQuickConnectResultOutput {
	return o
}

// The description of the quick connect.
func (o LookupQuickConnectResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQuickConnectResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The identifier of the Amazon Connect instance.
func (o LookupQuickConnectResultOutput) InstanceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQuickConnectResult) *string { return v.InstanceArn }).(pulumi.StringPtrOutput)
}

// The name of the quick connect.
func (o LookupQuickConnectResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQuickConnectResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the quick connect.
func (o LookupQuickConnectResultOutput) QuickConnectArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQuickConnectResult) *string { return v.QuickConnectArn }).(pulumi.StringPtrOutput)
}

// Configuration settings for the quick connect.
func (o LookupQuickConnectResultOutput) QuickConnectConfig() QuickConnectConfigPtrOutput {
	return o.ApplyT(func(v LookupQuickConnectResult) *QuickConnectConfig { return v.QuickConnectConfig }).(QuickConnectConfigPtrOutput)
}

// One or more tags.
func (o LookupQuickConnectResultOutput) Tags() QuickConnectTagArrayOutput {
	return o.ApplyT(func(v LookupQuickConnectResult) []QuickConnectTag { return v.Tags }).(QuickConnectTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQuickConnectResultOutput{})
}
