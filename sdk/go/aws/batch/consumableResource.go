// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Batch::ConsumableResource
type ConsumableResource struct {
	pulumi.CustomResourceState

	// Available Quantity of ConsumableResource.
	AvailableQuantity pulumi.IntOutput `pulumi:"availableQuantity"`
	// The Amazon Resource Name (ARN) of the consumable resource.
	ConsumableResourceArn pulumi.StringOutput `pulumi:"consumableResourceArn"`
	// Name of ConsumableResource.
	ConsumableResourceName pulumi.StringPtrOutput `pulumi:"consumableResourceName"`
	// The Unix timestamp (in milliseconds) for when the consumable resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// In-use Quantity of ConsumableResource.
	InUseQuantity pulumi.IntOutput `pulumi:"inUseQuantity"`
	// Indicates whether the resource is available to be re-used after a job completes. Can be one of:
	//
	// - `REPLENISHABLE`
	// - `NON_REPLENISHABLE`
	ResourceType ConsumableResourceResourceTypeOutput `pulumi:"resourceType"`
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Total Quantity of ConsumableResource.
	TotalQuantity pulumi.IntOutput `pulumi:"totalQuantity"`
}

// NewConsumableResource registers a new resource with the given unique name, arguments, and options.
func NewConsumableResource(ctx *pulumi.Context,
	name string, args *ConsumableResourceArgs, opts ...pulumi.ResourceOption) (*ConsumableResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.TotalQuantity == nil {
		return nil, errors.New("invalid value for required argument 'TotalQuantity'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"consumableResourceName",
		"resourceType",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumableResource
	err := ctx.RegisterResource("aws-native:batch:ConsumableResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumableResource gets an existing ConsumableResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumableResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumableResourceState, opts ...pulumi.ResourceOption) (*ConsumableResource, error) {
	var resource ConsumableResource
	err := ctx.ReadResource("aws-native:batch:ConsumableResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumableResource resources.
type consumableResourceState struct {
}

type ConsumableResourceState struct {
}

func (ConsumableResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumableResourceState)(nil)).Elem()
}

type consumableResourceArgs struct {
	// Name of ConsumableResource.
	ConsumableResourceName *string `pulumi:"consumableResourceName"`
	// Indicates whether the resource is available to be re-used after a job completes. Can be one of:
	//
	// - `REPLENISHABLE`
	// - `NON_REPLENISHABLE`
	ResourceType ConsumableResourceResourceType `pulumi:"resourceType"`
	// A key-value pair to associate with a resource.
	Tags map[string]string `pulumi:"tags"`
	// Total Quantity of ConsumableResource.
	TotalQuantity int `pulumi:"totalQuantity"`
}

// The set of arguments for constructing a ConsumableResource resource.
type ConsumableResourceArgs struct {
	// Name of ConsumableResource.
	ConsumableResourceName pulumi.StringPtrInput
	// Indicates whether the resource is available to be re-used after a job completes. Can be one of:
	//
	// - `REPLENISHABLE`
	// - `NON_REPLENISHABLE`
	ResourceType ConsumableResourceResourceTypeInput
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapInput
	// Total Quantity of ConsumableResource.
	TotalQuantity pulumi.IntInput
}

func (ConsumableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumableResourceArgs)(nil)).Elem()
}

type ConsumableResourceInput interface {
	pulumi.Input

	ToConsumableResourceOutput() ConsumableResourceOutput
	ToConsumableResourceOutputWithContext(ctx context.Context) ConsumableResourceOutput
}

func (*ConsumableResource) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumableResource)(nil)).Elem()
}

func (i *ConsumableResource) ToConsumableResourceOutput() ConsumableResourceOutput {
	return i.ToConsumableResourceOutputWithContext(context.Background())
}

func (i *ConsumableResource) ToConsumableResourceOutputWithContext(ctx context.Context) ConsumableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumableResourceOutput)
}

type ConsumableResourceOutput struct{ *pulumi.OutputState }

func (ConsumableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumableResource)(nil)).Elem()
}

func (o ConsumableResourceOutput) ToConsumableResourceOutput() ConsumableResourceOutput {
	return o
}

func (o ConsumableResourceOutput) ToConsumableResourceOutputWithContext(ctx context.Context) ConsumableResourceOutput {
	return o
}

// Available Quantity of ConsumableResource.
func (o ConsumableResourceOutput) AvailableQuantity() pulumi.IntOutput {
	return o.ApplyT(func(v *ConsumableResource) pulumi.IntOutput { return v.AvailableQuantity }).(pulumi.IntOutput)
}

// The Amazon Resource Name (ARN) of the consumable resource.
func (o ConsumableResourceOutput) ConsumableResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumableResource) pulumi.StringOutput { return v.ConsumableResourceArn }).(pulumi.StringOutput)
}

// Name of ConsumableResource.
func (o ConsumableResourceOutput) ConsumableResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsumableResource) pulumi.StringPtrOutput { return v.ConsumableResourceName }).(pulumi.StringPtrOutput)
}

// The Unix timestamp (in milliseconds) for when the consumable resource was created.
func (o ConsumableResourceOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *ConsumableResource) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// In-use Quantity of ConsumableResource.
func (o ConsumableResourceOutput) InUseQuantity() pulumi.IntOutput {
	return o.ApplyT(func(v *ConsumableResource) pulumi.IntOutput { return v.InUseQuantity }).(pulumi.IntOutput)
}

// Indicates whether the resource is available to be re-used after a job completes. Can be one of:
//
// - `REPLENISHABLE`
// - `NON_REPLENISHABLE`
func (o ConsumableResourceOutput) ResourceType() ConsumableResourceResourceTypeOutput {
	return o.ApplyT(func(v *ConsumableResource) ConsumableResourceResourceTypeOutput { return v.ResourceType }).(ConsumableResourceResourceTypeOutput)
}

// A key-value pair to associate with a resource.
func (o ConsumableResourceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConsumableResource) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Total Quantity of ConsumableResource.
func (o ConsumableResourceOutput) TotalQuantity() pulumi.IntOutput {
	return o.ApplyT(func(v *ConsumableResource) pulumi.IntOutput { return v.TotalQuantity }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumableResourceInput)(nil)).Elem(), &ConsumableResource{})
	pulumi.RegisterOutputType(ConsumableResourceOutput{})
}
