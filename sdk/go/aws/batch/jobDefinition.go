// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Batch::JobDefinition
type JobDefinition struct {
	pulumi.CustomResourceState

	// Contains a list of consumable resources required by the job.
	ConsumableResourceProperties JobDefinitionConsumableResourcePropertiesPtrOutput `pulumi:"consumableResourceProperties"`
	// An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
	ContainerProperties JobDefinitionContainerPropertiesPtrOutput `pulumi:"containerProperties"`
	// An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
	EcsProperties JobDefinitionEcsPropertiesPtrOutput `pulumi:"ecsProperties"`
	// An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
	EksProperties JobDefinitionEksPropertiesPtrOutput `pulumi:"eksProperties"`
	// The job definition ARN, such as `batch: *us-east-1* : *111122223333* :job-definition/ *test-gpu* : *2*` .
	JobDefinitionArn pulumi.StringOutput `pulumi:"jobDefinitionArn"`
	// The name of the job definition.
	JobDefinitionName pulumi.StringPtrOutput `pulumi:"jobDefinitionName"`
	// An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
	//
	// > If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
	NodeProperties JobDefinitionNodePropertiesPtrOutput `pulumi:"nodeProperties"`
	// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
	PlatformCapabilities pulumi.StringArrayOutput `pulumi:"platformCapabilities"`
	// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
	PropagateTags           pulumi.BoolPtrOutput                          `pulumi:"propagateTags"`
	ResourceRetentionPolicy JobDefinitionResourceRetentionPolicyPtrOutput `pulumi:"resourceRetentionPolicy"`
	// The retry strategy to use for failed jobs that are submitted with this job definition.
	RetryStrategy JobDefinitionRetryStrategyPtrOutput `pulumi:"retryStrategy"`
	// The scheduling priority of the job definition. This only affects jobs in job queues with a fair-share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
	SchedulingPriority pulumi.IntPtrOutput `pulumi:"schedulingPriority"`
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
	Timeout JobDefinitionJobTimeoutPtrOutput `pulumi:"timeout"`
	// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
	//
	// - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
	// - If the value is `multinode` , then `nodeProperties` is required.
	//
	// > If the job is run on Fargate resources, then `multinode` isn't supported.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewJobDefinition registers a new resource with the given unique name, arguments, and options.
func NewJobDefinition(ctx *pulumi.Context,
	name string, args *JobDefinitionArgs, opts ...pulumi.ResourceOption) (*JobDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"jobDefinitionName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobDefinition
	err := ctx.RegisterResource("aws-native:batch:JobDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobDefinition gets an existing JobDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobDefinitionState, opts ...pulumi.ResourceOption) (*JobDefinition, error) {
	var resource JobDefinition
	err := ctx.ReadResource("aws-native:batch:JobDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobDefinition resources.
type jobDefinitionState struct {
}

type JobDefinitionState struct {
}

func (JobDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobDefinitionState)(nil)).Elem()
}

type jobDefinitionArgs struct {
	// Contains a list of consumable resources required by the job.
	ConsumableResourceProperties *JobDefinitionConsumableResourceProperties `pulumi:"consumableResourceProperties"`
	// An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
	ContainerProperties *JobDefinitionContainerProperties `pulumi:"containerProperties"`
	// An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
	EcsProperties *JobDefinitionEcsProperties `pulumi:"ecsProperties"`
	// An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
	EksProperties *JobDefinitionEksProperties `pulumi:"eksProperties"`
	// The name of the job definition.
	JobDefinitionName *string `pulumi:"jobDefinitionName"`
	// An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
	//
	// > If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
	NodeProperties *JobDefinitionNodeProperties `pulumi:"nodeProperties"`
	// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
	Parameters map[string]string `pulumi:"parameters"`
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
	PlatformCapabilities []string `pulumi:"platformCapabilities"`
	// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
	PropagateTags           *bool                                 `pulumi:"propagateTags"`
	ResourceRetentionPolicy *JobDefinitionResourceRetentionPolicy `pulumi:"resourceRetentionPolicy"`
	// The retry strategy to use for failed jobs that are submitted with this job definition.
	RetryStrategy *JobDefinitionRetryStrategy `pulumi:"retryStrategy"`
	// The scheduling priority of the job definition. This only affects jobs in job queues with a fair-share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
	SchedulingPriority *int `pulumi:"schedulingPriority"`
	// A key-value pair to associate with a resource.
	Tags map[string]string `pulumi:"tags"`
	// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
	Timeout *JobDefinitionJobTimeout `pulumi:"timeout"`
	// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
	//
	// - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
	// - If the value is `multinode` , then `nodeProperties` is required.
	//
	// > If the job is run on Fargate resources, then `multinode` isn't supported.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a JobDefinition resource.
type JobDefinitionArgs struct {
	// Contains a list of consumable resources required by the job.
	ConsumableResourceProperties JobDefinitionConsumableResourcePropertiesPtrInput
	// An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
	ContainerProperties JobDefinitionContainerPropertiesPtrInput
	// An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
	EcsProperties JobDefinitionEcsPropertiesPtrInput
	// An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
	EksProperties JobDefinitionEksPropertiesPtrInput
	// The name of the job definition.
	JobDefinitionName pulumi.StringPtrInput
	// An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
	//
	// > If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
	NodeProperties JobDefinitionNodePropertiesPtrInput
	// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
	Parameters pulumi.StringMapInput
	// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
	PlatformCapabilities pulumi.StringArrayInput
	// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
	PropagateTags           pulumi.BoolPtrInput
	ResourceRetentionPolicy JobDefinitionResourceRetentionPolicyPtrInput
	// The retry strategy to use for failed jobs that are submitted with this job definition.
	RetryStrategy JobDefinitionRetryStrategyPtrInput
	// The scheduling priority of the job definition. This only affects jobs in job queues with a fair-share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
	SchedulingPriority pulumi.IntPtrInput
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapInput
	// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
	Timeout JobDefinitionJobTimeoutPtrInput
	// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
	//
	// - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
	// - If the value is `multinode` , then `nodeProperties` is required.
	//
	// > If the job is run on Fargate resources, then `multinode` isn't supported.
	Type pulumi.StringInput
}

func (JobDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobDefinitionArgs)(nil)).Elem()
}

type JobDefinitionInput interface {
	pulumi.Input

	ToJobDefinitionOutput() JobDefinitionOutput
	ToJobDefinitionOutputWithContext(ctx context.Context) JobDefinitionOutput
}

func (*JobDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinition)(nil)).Elem()
}

func (i *JobDefinition) ToJobDefinitionOutput() JobDefinitionOutput {
	return i.ToJobDefinitionOutputWithContext(context.Background())
}

func (i *JobDefinition) ToJobDefinitionOutputWithContext(ctx context.Context) JobDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionOutput)
}

type JobDefinitionOutput struct{ *pulumi.OutputState }

func (JobDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinition)(nil)).Elem()
}

func (o JobDefinitionOutput) ToJobDefinitionOutput() JobDefinitionOutput {
	return o
}

func (o JobDefinitionOutput) ToJobDefinitionOutputWithContext(ctx context.Context) JobDefinitionOutput {
	return o
}

// Contains a list of consumable resources required by the job.
func (o JobDefinitionOutput) ConsumableResourceProperties() JobDefinitionConsumableResourcePropertiesPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionConsumableResourcePropertiesPtrOutput {
		return v.ConsumableResourceProperties
	}).(JobDefinitionConsumableResourcePropertiesPtrOutput)
}

// An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
func (o JobDefinitionOutput) ContainerProperties() JobDefinitionContainerPropertiesPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionContainerPropertiesPtrOutput { return v.ContainerProperties }).(JobDefinitionContainerPropertiesPtrOutput)
}

// An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
func (o JobDefinitionOutput) EcsProperties() JobDefinitionEcsPropertiesPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionEcsPropertiesPtrOutput { return v.EcsProperties }).(JobDefinitionEcsPropertiesPtrOutput)
}

// An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
func (o JobDefinitionOutput) EksProperties() JobDefinitionEksPropertiesPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionEksPropertiesPtrOutput { return v.EksProperties }).(JobDefinitionEksPropertiesPtrOutput)
}

// The job definition ARN, such as `batch: *us-east-1* : *111122223333* :job-definition/ *test-gpu* : *2*` .
func (o JobDefinitionOutput) JobDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.StringOutput { return v.JobDefinitionArn }).(pulumi.StringOutput)
}

// The name of the job definition.
func (o JobDefinitionOutput) JobDefinitionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.StringPtrOutput { return v.JobDefinitionName }).(pulumi.StringPtrOutput)
}

// An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
//
// > If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
func (o JobDefinitionOutput) NodeProperties() JobDefinitionNodePropertiesPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionNodePropertiesPtrOutput { return v.NodeProperties }).(JobDefinitionNodePropertiesPtrOutput)
}

// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
func (o JobDefinitionOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
func (o JobDefinitionOutput) PlatformCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.StringArrayOutput { return v.PlatformCapabilities }).(pulumi.StringArrayOutput)
}

// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
func (o JobDefinitionOutput) PropagateTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.BoolPtrOutput { return v.PropagateTags }).(pulumi.BoolPtrOutput)
}

func (o JobDefinitionOutput) ResourceRetentionPolicy() JobDefinitionResourceRetentionPolicyPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionResourceRetentionPolicyPtrOutput { return v.ResourceRetentionPolicy }).(JobDefinitionResourceRetentionPolicyPtrOutput)
}

// The retry strategy to use for failed jobs that are submitted with this job definition.
func (o JobDefinitionOutput) RetryStrategy() JobDefinitionRetryStrategyPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionRetryStrategyPtrOutput { return v.RetryStrategy }).(JobDefinitionRetryStrategyPtrOutput)
}

// The scheduling priority of the job definition. This only affects jobs in job queues with a fair-share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
func (o JobDefinitionOutput) SchedulingPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.IntPtrOutput { return v.SchedulingPriority }).(pulumi.IntPtrOutput)
}

// A key-value pair to associate with a resource.
func (o JobDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
func (o JobDefinitionOutput) Timeout() JobDefinitionJobTimeoutPtrOutput {
	return o.ApplyT(func(v *JobDefinition) JobDefinitionJobTimeoutPtrOutput { return v.Timeout }).(JobDefinitionJobTimeoutPtrOutput)
}

// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
//
// - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
// - If the value is `multinode` , then `nodeProperties` is required.
//
// > If the job is run on Fargate resources, then `multinode` isn't supported.
func (o JobDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *JobDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionInput)(nil)).Elem(), &JobDefinition{})
	pulumi.RegisterOutputType(JobDefinitionOutput{})
}
