// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Batch::ConsumableResource
func LookupConsumableResource(ctx *pulumi.Context, args *LookupConsumableResourceArgs, opts ...pulumi.InvokeOption) (*LookupConsumableResourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConsumableResourceResult
	err := ctx.Invoke("aws-native:batch:getConsumableResource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConsumableResourceArgs struct {
	// The Amazon Resource Name (ARN) of the consumable resource.
	ConsumableResourceArn string `pulumi:"consumableResourceArn"`
}

type LookupConsumableResourceResult struct {
	// Available Quantity of ConsumableResource.
	AvailableQuantity *int `pulumi:"availableQuantity"`
	// The Amazon Resource Name (ARN) of the consumable resource.
	ConsumableResourceArn *string `pulumi:"consumableResourceArn"`
	// The Unix timestamp (in milliseconds) for when the consumable resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// In-use Quantity of ConsumableResource.
	InUseQuantity *int `pulumi:"inUseQuantity"`
	// Total Quantity of ConsumableResource.
	TotalQuantity *int `pulumi:"totalQuantity"`
}

func LookupConsumableResourceOutput(ctx *pulumi.Context, args LookupConsumableResourceOutputArgs, opts ...pulumi.InvokeOption) LookupConsumableResourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConsumableResourceResultOutput, error) {
			args := v.(LookupConsumableResourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:batch:getConsumableResource", args, LookupConsumableResourceResultOutput{}, options).(LookupConsumableResourceResultOutput), nil
		}).(LookupConsumableResourceResultOutput)
}

type LookupConsumableResourceOutputArgs struct {
	// The Amazon Resource Name (ARN) of the consumable resource.
	ConsumableResourceArn pulumi.StringInput `pulumi:"consumableResourceArn"`
}

func (LookupConsumableResourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConsumableResourceArgs)(nil)).Elem()
}

type LookupConsumableResourceResultOutput struct{ *pulumi.OutputState }

func (LookupConsumableResourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConsumableResourceResult)(nil)).Elem()
}

func (o LookupConsumableResourceResultOutput) ToLookupConsumableResourceResultOutput() LookupConsumableResourceResultOutput {
	return o
}

func (o LookupConsumableResourceResultOutput) ToLookupConsumableResourceResultOutputWithContext(ctx context.Context) LookupConsumableResourceResultOutput {
	return o
}

// Available Quantity of ConsumableResource.
func (o LookupConsumableResourceResultOutput) AvailableQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupConsumableResourceResult) *int { return v.AvailableQuantity }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) of the consumable resource.
func (o LookupConsumableResourceResultOutput) ConsumableResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConsumableResourceResult) *string { return v.ConsumableResourceArn }).(pulumi.StringPtrOutput)
}

// The Unix timestamp (in milliseconds) for when the consumable resource was created.
func (o LookupConsumableResourceResultOutput) CreatedAt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupConsumableResourceResult) *int { return v.CreatedAt }).(pulumi.IntPtrOutput)
}

// In-use Quantity of ConsumableResource.
func (o LookupConsumableResourceResultOutput) InUseQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupConsumableResourceResult) *int { return v.InUseQuantity }).(pulumi.IntPtrOutput)
}

// Total Quantity of ConsumableResource.
func (o LookupConsumableResourceResultOutput) TotalQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupConsumableResourceResult) *int { return v.TotalQuantity }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConsumableResourceResultOutput{})
}
