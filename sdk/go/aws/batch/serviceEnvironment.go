// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Batch::ServiceEnvironment
type ServiceEnvironment struct {
	pulumi.CustomResourceState

	CapacityLimits         ServiceEnvironmentCapacityLimitArrayOutput `pulumi:"capacityLimits"`
	ServiceEnvironmentArn  pulumi.StringOutput                        `pulumi:"serviceEnvironmentArn"`
	ServiceEnvironmentName pulumi.StringPtrOutput                     `pulumi:"serviceEnvironmentName"`
	ServiceEnvironmentType pulumi.StringOutput                        `pulumi:"serviceEnvironmentType"`
	State                  pulumi.StringPtrOutput                     `pulumi:"state"`
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewServiceEnvironment registers a new resource with the given unique name, arguments, and options.
func NewServiceEnvironment(ctx *pulumi.Context,
	name string, args *ServiceEnvironmentArgs, opts ...pulumi.ResourceOption) (*ServiceEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapacityLimits == nil {
		return nil, errors.New("invalid value for required argument 'CapacityLimits'")
	}
	if args.ServiceEnvironmentType == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEnvironmentType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"serviceEnvironmentName",
		"serviceEnvironmentType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceEnvironment
	err := ctx.RegisterResource("aws-native:batch:ServiceEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceEnvironment gets an existing ServiceEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceEnvironmentState, opts ...pulumi.ResourceOption) (*ServiceEnvironment, error) {
	var resource ServiceEnvironment
	err := ctx.ReadResource("aws-native:batch:ServiceEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceEnvironment resources.
type serviceEnvironmentState struct {
}

type ServiceEnvironmentState struct {
}

func (ServiceEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEnvironmentState)(nil)).Elem()
}

type serviceEnvironmentArgs struct {
	CapacityLimits         []ServiceEnvironmentCapacityLimit `pulumi:"capacityLimits"`
	ServiceEnvironmentName *string                           `pulumi:"serviceEnvironmentName"`
	ServiceEnvironmentType string                            `pulumi:"serviceEnvironmentType"`
	State                  *string                           `pulumi:"state"`
	// A key-value pair to associate with a resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ServiceEnvironment resource.
type ServiceEnvironmentArgs struct {
	CapacityLimits         ServiceEnvironmentCapacityLimitArrayInput
	ServiceEnvironmentName pulumi.StringPtrInput
	ServiceEnvironmentType pulumi.StringInput
	State                  pulumi.StringPtrInput
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapInput
}

func (ServiceEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEnvironmentArgs)(nil)).Elem()
}

type ServiceEnvironmentInput interface {
	pulumi.Input

	ToServiceEnvironmentOutput() ServiceEnvironmentOutput
	ToServiceEnvironmentOutputWithContext(ctx context.Context) ServiceEnvironmentOutput
}

func (*ServiceEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEnvironment)(nil)).Elem()
}

func (i *ServiceEnvironment) ToServiceEnvironmentOutput() ServiceEnvironmentOutput {
	return i.ToServiceEnvironmentOutputWithContext(context.Background())
}

func (i *ServiceEnvironment) ToServiceEnvironmentOutputWithContext(ctx context.Context) ServiceEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEnvironmentOutput)
}

type ServiceEnvironmentOutput struct{ *pulumi.OutputState }

func (ServiceEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEnvironment)(nil)).Elem()
}

func (o ServiceEnvironmentOutput) ToServiceEnvironmentOutput() ServiceEnvironmentOutput {
	return o
}

func (o ServiceEnvironmentOutput) ToServiceEnvironmentOutputWithContext(ctx context.Context) ServiceEnvironmentOutput {
	return o
}

func (o ServiceEnvironmentOutput) CapacityLimits() ServiceEnvironmentCapacityLimitArrayOutput {
	return o.ApplyT(func(v *ServiceEnvironment) ServiceEnvironmentCapacityLimitArrayOutput { return v.CapacityLimits }).(ServiceEnvironmentCapacityLimitArrayOutput)
}

func (o ServiceEnvironmentOutput) ServiceEnvironmentArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEnvironment) pulumi.StringOutput { return v.ServiceEnvironmentArn }).(pulumi.StringOutput)
}

func (o ServiceEnvironmentOutput) ServiceEnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEnvironment) pulumi.StringPtrOutput { return v.ServiceEnvironmentName }).(pulumi.StringPtrOutput)
}

func (o ServiceEnvironmentOutput) ServiceEnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEnvironment) pulumi.StringOutput { return v.ServiceEnvironmentType }).(pulumi.StringOutput)
}

func (o ServiceEnvironmentOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEnvironment) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
func (o ServiceEnvironmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceEnvironment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEnvironmentInput)(nil)).Elem(), &ServiceEnvironment{})
	pulumi.RegisterOutputType(ServiceEnvironmentOutput{})
}
