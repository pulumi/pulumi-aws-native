// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ComputeEnvironmentComputeResources struct {
	// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) . For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the *AWS Batch User Guide* .
	//
	// When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . `BEST_FIT` is not supported when updating a compute environment.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
	//
	// - **BEST_FIT (default)** - AWS Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, AWS Batch waits for the additional instances to be available. If there aren't enough instances available, or if the user is reaching [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) then additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with `BEST_FIT` then the Spot Fleet IAM role must be specified.
	// - **BEST_FIT_PROGRESSIVE** - AWS Batch will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the previously selected instance types aren't available, AWS Batch will select new instance types.
	// - **SPOT_CAPACITY_OPTIMIZED** - AWS Batch will select one or more instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.
	// - **SPOT_PRICE_CAPACITY_OPTIMIZED** - The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources.
	//
	// > We recommend that you use `SPOT_PRICE_CAPACITY_OPTIMIZED` rather than `SPOT_CAPACITY_OPTIMIZED` in most instances.
	//
	// With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` , and `SPOT_PRICE_CAPACITY_OPTIMIZED` allocation strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to go above `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty.
	//
	// When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	BidPercentage *int `pulumi:"bidPercentage"`
	// The desired number of vCPUS in the compute environment. AWS Batch modifies this value between the minimum and maximum values based on job queue demand.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > AWS Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters. > When you update the `desiredvCpus` setting, the value must be between the `minvCpus` and `maxvCpus` values.
	// >
	// > Additionally, the updated `desiredvCpus` value must be greater than or equal to the current `desiredvCpus` value. For more information, see [Troubleshooting AWS Batch](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#error-desired-vcpus-update) in the *AWS Batch User Guide* .
	DesiredvCpus *int `pulumi:"desiredvCpus"`
	// Provides information used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If `Ec2Configuration` isn't specified, the default is `ECS_AL2` .
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . To remove the Amazon EC2 configuration and any custom AMI ID specified in `imageIdOverride` , set this value to an empty string.
	//
	// One or two values can be provided.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	Ec2Configuration []ComputeEnvironmentEc2ConfigurationObject `pulumi:"ec2Configuration"`
	// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string.
	//
	// When updating a compute environment, changing the Amazon EC2 key pair requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	Ec2KeyPair *string `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the `imageIdOverride` member of the `Ec2Configuration` structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string.
	//
	// When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
	ImageId *string `pulumi:"imageId"`
	// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. Required for Amazon EC2 instances. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, `*ecsInstanceRole*` or `arn:aws:iam:: *<aws_account_id>* :instance-profile/ *ecsInstanceRole*` . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the *AWS Batch User Guide* .
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	InstanceRole *string `pulumi:"instanceRole"`
	// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, `c5` or `p3` ), or you can specify specific sizes within a family (such as `c5.8xlarge` ). You can also choose `optimal` to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. > Currently, `optimal` uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a [CreateComputeEnvironment](https://docs.aws.amazon.com/batch/latest/APIReference/API_CreateComputeEnvironment.html) API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch Template Support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the ** . Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the `updateToLatestImageVersion` parameter must be set to `true` .
	//
	// When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the ** .
	//
	// > This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	LaunchTemplate *ComputeEnvironmentLaunchTemplateSpecification `pulumi:"launchTemplate"`
	// The maximum number of Amazon EC2 vCPUs that an environment can reach.
	//
	// > With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED` (recommended) strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to exceed `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
	MaxvCpus int `pulumi:"maxvCpus"`
	// The minimum number of vCPUs that an environment should maintain (even if the compute environment is `DISABLED` ).
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	MinvCpus *int `pulumi:"minvCpus"`
	// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for Linux Instances* .
	//
	// When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	PlacementGroup *string `pulumi:"placementGroup"`
	// The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the security groups from the compute resource.
	//
	// When updating a compute environment, changing the Amazon EC2 security groups requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a `SPOT` compute environment. This role is required if the allocation strategy set to `BEST_FIT` or if the allocation strategy isn't specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer *AmazonEC2SpotFleetTaggingRole* managed policy. The previously recommended *AmazonEC2SpotFleetRole* managed policy doesn't have the required permissions to tag Spot Instances. For more information, see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the *AWS Batch User Guide* .
	SpotIamFleetRole *string `pulumi:"spotIamFleetRole"`
	// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the *Amazon VPC User Guide* .
	//
	// When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > AWS Batch on Amazon EC2 and AWS Batch on Amazon EKS support Local Zones. For more information, see [Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the *Amazon EC2 User Guide for Linux Instances* , [Amazon EKS and AWS Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the *Amazon EKS User Guide* and [Amazon ECS clusters in Local Zones, Wavelength Zones, and AWS Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the *Amazon ECS Developer Guide* .
	// >
	// > AWS Batch on Fargate doesn't currently support Local Zones.
	Subnets []string `pulumi:"subnets"`
	// A key-value pair to associate with a resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of compute environment: `EC2` , `SPOT` , `FARGATE` , or `FARGATE_SPOT` . For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the *AWS Batch User Guide* .
	//
	// If you choose `SPOT` , you must also specify an Amazon EC2 Spot Fleet role with the `spotIamFleetRole` parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
	//
	// When updating compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// When updating the type of a compute environment, changing between `EC2` and `SPOT` or between `FARGATE` and `FARGATE_SPOT` will initiate an infrastructure update, but if you switch between `EC2` and `FARGATE` , AWS CloudFormation will create a new compute environment.
	Type string `pulumi:"type"`
	// Specifies whether the AMI ID is updated to the latest one that's supported by AWS Batch when the compute environment has an infrastructure update. The default value is `false` .
	//
	// > An AMI ID can either be specified in the `imageId` or `imageIdOverride` parameters or be determined by the launch template that's specified in the `launchTemplate` parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the *AWS Batch User Guide* .
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	UpdateToLatestImageVersion *bool `pulumi:"updateToLatestImageVersion"`
}

// ComputeEnvironmentComputeResourcesInput is an input type that accepts ComputeEnvironmentComputeResourcesArgs and ComputeEnvironmentComputeResourcesOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesInput` via:
//
//	ComputeEnvironmentComputeResourcesArgs{...}
type ComputeEnvironmentComputeResourcesInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput
	ToComputeEnvironmentComputeResourcesOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesOutput
}

type ComputeEnvironmentComputeResourcesArgs struct {
	// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) . For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the *AWS Batch User Guide* .
	//
	// When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . `BEST_FIT` is not supported when updating a compute environment.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
	//
	// - **BEST_FIT (default)** - AWS Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, AWS Batch waits for the additional instances to be available. If there aren't enough instances available, or if the user is reaching [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) then additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with `BEST_FIT` then the Spot Fleet IAM role must be specified.
	// - **BEST_FIT_PROGRESSIVE** - AWS Batch will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the previously selected instance types aren't available, AWS Batch will select new instance types.
	// - **SPOT_CAPACITY_OPTIMIZED** - AWS Batch will select one or more instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.
	// - **SPOT_PRICE_CAPACITY_OPTIMIZED** - The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources.
	//
	// > We recommend that you use `SPOT_PRICE_CAPACITY_OPTIMIZED` rather than `SPOT_CAPACITY_OPTIMIZED` in most instances.
	//
	// With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` , and `SPOT_PRICE_CAPACITY_OPTIMIZED` allocation strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to go above `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
	AllocationStrategy pulumi.StringPtrInput `pulumi:"allocationStrategy"`
	// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty.
	//
	// When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	BidPercentage pulumi.IntPtrInput `pulumi:"bidPercentage"`
	// The desired number of vCPUS in the compute environment. AWS Batch modifies this value between the minimum and maximum values based on job queue demand.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > AWS Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters. > When you update the `desiredvCpus` setting, the value must be between the `minvCpus` and `maxvCpus` values.
	// >
	// > Additionally, the updated `desiredvCpus` value must be greater than or equal to the current `desiredvCpus` value. For more information, see [Troubleshooting AWS Batch](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#error-desired-vcpus-update) in the *AWS Batch User Guide* .
	DesiredvCpus pulumi.IntPtrInput `pulumi:"desiredvCpus"`
	// Provides information used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If `Ec2Configuration` isn't specified, the default is `ECS_AL2` .
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . To remove the Amazon EC2 configuration and any custom AMI ID specified in `imageIdOverride` , set this value to an empty string.
	//
	// One or two values can be provided.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	Ec2Configuration ComputeEnvironmentEc2ConfigurationObjectArrayInput `pulumi:"ec2Configuration"`
	// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string.
	//
	// When updating a compute environment, changing the Amazon EC2 key pair requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	Ec2KeyPair pulumi.StringPtrInput `pulumi:"ec2KeyPair"`
	// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the `imageIdOverride` member of the `Ec2Configuration` structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string.
	//
	// When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. Required for Amazon EC2 instances. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, `*ecsInstanceRole*` or `arn:aws:iam:: *<aws_account_id>* :instance-profile/ *ecsInstanceRole*` . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the *AWS Batch User Guide* .
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	InstanceRole pulumi.StringPtrInput `pulumi:"instanceRole"`
	// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, `c5` or `p3` ), or you can specify specific sizes within a family (such as `c5.8xlarge` ). You can also choose `optimal` to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. > Currently, `optimal` uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
	InstanceTypes pulumi.StringArrayInput `pulumi:"instanceTypes"`
	// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a [CreateComputeEnvironment](https://docs.aws.amazon.com/batch/latest/APIReference/API_CreateComputeEnvironment.html) API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch Template Support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the ** . Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the `updateToLatestImageVersion` parameter must be set to `true` .
	//
	// When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the ** .
	//
	// > This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
	LaunchTemplate ComputeEnvironmentLaunchTemplateSpecificationPtrInput `pulumi:"launchTemplate"`
	// The maximum number of Amazon EC2 vCPUs that an environment can reach.
	//
	// > With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED` (recommended) strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to exceed `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
	MaxvCpus pulumi.IntInput `pulumi:"maxvCpus"`
	// The minimum number of vCPUs that an environment should maintain (even if the compute environment is `DISABLED` ).
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	MinvCpus pulumi.IntPtrInput `pulumi:"minvCpus"`
	// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for Linux Instances* .
	//
	// When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
	PlacementGroup pulumi.StringPtrInput `pulumi:"placementGroup"`
	// The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the security groups from the compute resource.
	//
	// When updating a compute environment, changing the Amazon EC2 security groups requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a `SPOT` compute environment. This role is required if the allocation strategy set to `BEST_FIT` or if the allocation strategy isn't specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer *AmazonEC2SpotFleetTaggingRole* managed policy. The previously recommended *AmazonEC2SpotFleetRole* managed policy doesn't have the required permissions to tag Spot Instances. For more information, see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the *AWS Batch User Guide* .
	SpotIamFleetRole pulumi.StringPtrInput `pulumi:"spotIamFleetRole"`
	// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the *Amazon VPC User Guide* .
	//
	// When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// > AWS Batch on Amazon EC2 and AWS Batch on Amazon EKS support Local Zones. For more information, see [Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the *Amazon EC2 User Guide for Linux Instances* , [Amazon EKS and AWS Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the *Amazon EKS User Guide* and [Amazon ECS clusters in Local Zones, Wavelength Zones, and AWS Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the *Amazon ECS Developer Guide* .
	// >
	// > AWS Batch on Fargate doesn't currently support Local Zones.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
	// A key-value pair to associate with a resource.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of compute environment: `EC2` , `SPOT` , `FARGATE` , or `FARGATE_SPOT` . For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the *AWS Batch User Guide* .
	//
	// If you choose `SPOT` , you must also specify an Amazon EC2 Spot Fleet role with the `spotIamFleetRole` parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
	//
	// When updating compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// When updating the type of a compute environment, changing between `EC2` and `SPOT` or between `FARGATE` and `FARGATE_SPOT` will initiate an infrastructure update, but if you switch between `EC2` and `FARGATE` , AWS CloudFormation will create a new compute environment.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the AMI ID is updated to the latest one that's supported by AWS Batch when the compute environment has an infrastructure update. The default value is `false` .
	//
	// > An AMI ID can either be specified in the `imageId` or `imageIdOverride` parameters or be determined by the launch template that's specified in the `launchTemplate` parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the *AWS Batch User Guide* .
	//
	// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	UpdateToLatestImageVersion pulumi.BoolPtrInput `pulumi:"updateToLatestImageVersion"`
}

func (ComputeEnvironmentComputeResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return i.ToComputeEnvironmentComputeResourcesOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesOutput)
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return i.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentComputeResourcesArgs) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesOutput).ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx)
}

// ComputeEnvironmentComputeResourcesPtrInput is an input type that accepts ComputeEnvironmentComputeResourcesArgs, ComputeEnvironmentComputeResourcesPtr and ComputeEnvironmentComputeResourcesPtrOutput values.
// You can construct a concrete instance of `ComputeEnvironmentComputeResourcesPtrInput` via:
//
//	        ComputeEnvironmentComputeResourcesArgs{...}
//
//	or:
//
//	        nil
type ComputeEnvironmentComputeResourcesPtrInput interface {
	pulumi.Input

	ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput
	ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Context) ComputeEnvironmentComputeResourcesPtrOutput
}

type computeEnvironmentComputeResourcesPtrType ComputeEnvironmentComputeResourcesArgs

func ComputeEnvironmentComputeResourcesPtr(v *ComputeEnvironmentComputeResourcesArgs) ComputeEnvironmentComputeResourcesPtrInput {
	return (*computeEnvironmentComputeResourcesPtrType)(v)
}

func (*computeEnvironmentComputeResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (i *computeEnvironmentComputeResourcesPtrType) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return i.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentComputeResourcesPtrType) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentComputeResourcesPtrOutput)
}

type ComputeEnvironmentComputeResourcesOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutput() ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return o.ToComputeEnvironmentComputeResourcesPtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentComputeResourcesOutput) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnvironmentComputeResources) *ComputeEnvironmentComputeResources {
		return &v
	}).(ComputeEnvironmentComputeResourcesPtrOutput)
}

// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) . For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the *AWS Batch User Guide* .
//
// When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . `BEST_FIT` is not supported when updating a compute environment.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
//
// - **BEST_FIT (default)** - AWS Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, AWS Batch waits for the additional instances to be available. If there aren't enough instances available, or if the user is reaching [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) then additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with `BEST_FIT` then the Spot Fleet IAM role must be specified.
// - **BEST_FIT_PROGRESSIVE** - AWS Batch will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the previously selected instance types aren't available, AWS Batch will select new instance types.
// - **SPOT_CAPACITY_OPTIMIZED** - AWS Batch will select one or more instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.
// - **SPOT_PRICE_CAPACITY_OPTIMIZED** - The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources.
//
// > We recommend that you use `SPOT_PRICE_CAPACITY_OPTIMIZED` rather than `SPOT_CAPACITY_OPTIMIZED` in most instances.
//
// With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` , and `SPOT_PRICE_CAPACITY_OPTIMIZED` allocation strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to go above `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
func (o ComputeEnvironmentComputeResourcesOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty.
//
// When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesOutput) BidPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *int { return v.BidPercentage }).(pulumi.IntPtrOutput)
}

// The desired number of vCPUS in the compute environment. AWS Batch modifies this value between the minimum and maximum values based on job queue demand.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > AWS Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters. > When you update the `desiredvCpus` setting, the value must be between the `minvCpus` and `maxvCpus` values.
// >
// > Additionally, the updated `desiredvCpus` value must be greater than or equal to the current `desiredvCpus` value. For more information, see [Troubleshooting AWS Batch](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#error-desired-vcpus-update) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesOutput) DesiredvCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *int { return v.DesiredvCpus }).(pulumi.IntPtrOutput)
}

// Provides information used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If `Ec2Configuration` isn't specified, the default is `ECS_AL2` .
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . To remove the Amazon EC2 configuration and any custom AMI ID specified in `imageIdOverride` , set this value to an empty string.
//
// One or two values can be provided.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesOutput) Ec2Configuration() ComputeEnvironmentEc2ConfigurationObjectArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []ComputeEnvironmentEc2ConfigurationObject {
		return v.Ec2Configuration
	}).(ComputeEnvironmentEc2ConfigurationObjectArrayOutput)
}

// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string.
//
// When updating a compute environment, changing the Amazon EC2 key pair requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesOutput) Ec2KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.Ec2KeyPair }).(pulumi.StringPtrOutput)
}

// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the `imageIdOverride` member of the `Ec2Configuration` structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string.
//
// When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o ComputeEnvironmentComputeResourcesOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. Required for Amazon EC2 instances. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, `*ecsInstanceRole*` or `arn:aws:iam:: *<aws_account_id>* :instance-profile/ *ecsInstanceRole*` . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the *AWS Batch User Guide* .
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.InstanceRole }).(pulumi.StringPtrOutput)
}

// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, `c5` or `p3` ), or you can specify specific sizes within a family (such as `c5.8xlarge` ). You can also choose `optimal` to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. > Currently, `optimal` uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
func (o ComputeEnvironmentComputeResourcesOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []string { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a [CreateComputeEnvironment](https://docs.aws.amazon.com/batch/latest/APIReference/API_CreateComputeEnvironment.html) API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch Template Support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the ** . Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the `updateToLatestImageVersion` parameter must be set to `true` .
//
// When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the ** .
//
// > This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesOutput) LaunchTemplate() ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *ComputeEnvironmentLaunchTemplateSpecification {
		return v.LaunchTemplate
	}).(ComputeEnvironmentLaunchTemplateSpecificationPtrOutput)
}

// The maximum number of Amazon EC2 vCPUs that an environment can reach.
//
// > With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED` (recommended) strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to exceed `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
func (o ComputeEnvironmentComputeResourcesOutput) MaxvCpus() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) int { return v.MaxvCpus }).(pulumi.IntOutput)
}

// The minimum number of vCPUs that an environment should maintain (even if the compute environment is `DISABLED` ).
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesOutput) MinvCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *int { return v.MinvCpus }).(pulumi.IntPtrOutput)
}

// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for Linux Instances* .
//
// When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesOutput) PlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.PlacementGroup }).(pulumi.StringPtrOutput)
}

// The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the security groups from the compute resource.
//
// When updating a compute environment, changing the Amazon EC2 security groups requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a `SPOT` compute environment. This role is required if the allocation strategy set to `BEST_FIT` or if the allocation strategy isn't specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer *AmazonEC2SpotFleetTaggingRole* managed policy. The previously recommended *AmazonEC2SpotFleetRole* managed policy doesn't have the required permissions to tag Spot Instances. For more information, see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesOutput) SpotIamFleetRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *string { return v.SpotIamFleetRole }).(pulumi.StringPtrOutput)
}

// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the *Amazon VPC User Guide* .
//
// When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > AWS Batch on Amazon EC2 and AWS Batch on Amazon EKS support Local Zones. For more information, see [Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the *Amazon EC2 User Guide for Linux Instances* , [Amazon EKS and AWS Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the *Amazon EKS User Guide* and [Amazon ECS clusters in Local Zones, Wavelength Zones, and AWS Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the *Amazon ECS Developer Guide* .
// >
// > AWS Batch on Fargate doesn't currently support Local Zones.
func (o ComputeEnvironmentComputeResourcesOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// A key-value pair to associate with a resource.
func (o ComputeEnvironmentComputeResourcesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of compute environment: `EC2` , `SPOT` , `FARGATE` , or `FARGATE_SPOT` . For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the *AWS Batch User Guide* .
//
// If you choose `SPOT` , you must also specify an Amazon EC2 Spot Fleet role with the `spotIamFleetRole` parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
//
// When updating compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// When updating the type of a compute environment, changing between `EC2` and `SPOT` or between `FARGATE` and `FARGATE_SPOT` will initiate an infrastructure update, but if you switch between `EC2` and `FARGATE` , AWS CloudFormation will create a new compute environment.
func (o ComputeEnvironmentComputeResourcesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the AMI ID is updated to the latest one that's supported by AWS Batch when the compute environment has an infrastructure update. The default value is `false` .
//
// > An AMI ID can either be specified in the `imageId` or `imageIdOverride` parameters or be determined by the launch template that's specified in the `launchTemplate` parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the *AWS Batch User Guide* .
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesOutput) UpdateToLatestImageVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentComputeResources) *bool { return v.UpdateToLatestImageVersion }).(pulumi.BoolPtrOutput)
}

type ComputeEnvironmentComputeResourcesPtrOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentComputeResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentComputeResources)(nil)).Elem()
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) ToComputeEnvironmentComputeResourcesPtrOutput() ComputeEnvironmentComputeResourcesPtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) ToComputeEnvironmentComputeResourcesPtrOutputWithContext(ctx context.Context) ComputeEnvironmentComputeResourcesPtrOutput {
	return o
}

func (o ComputeEnvironmentComputeResourcesPtrOutput) Elem() ComputeEnvironmentComputeResourcesOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) ComputeEnvironmentComputeResources {
		if v != nil {
			return *v
		}
		var ret ComputeEnvironmentComputeResources
		return ret
	}).(ComputeEnvironmentComputeResourcesOutput)
}

// The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) . For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the *AWS Batch User Guide* .
//
// When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . `BEST_FIT` is not supported when updating a compute environment.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
//
// - **BEST_FIT (default)** - AWS Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, AWS Batch waits for the additional instances to be available. If there aren't enough instances available, or if the user is reaching [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) then additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with `BEST_FIT` then the Spot Fleet IAM role must be specified.
// - **BEST_FIT_PROGRESSIVE** - AWS Batch will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the previously selected instance types aren't available, AWS Batch will select new instance types.
// - **SPOT_CAPACITY_OPTIMIZED** - AWS Batch will select one or more instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.
// - **SPOT_PRICE_CAPACITY_OPTIMIZED** - The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources.
//
// > We recommend that you use `SPOT_PRICE_CAPACITY_OPTIMIZED` rather than `SPOT_CAPACITY_OPTIMIZED` in most instances.
//
// With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` , and `SPOT_PRICE_CAPACITY_OPTIMIZED` allocation strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to go above `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
func (o ComputeEnvironmentComputeResourcesPtrOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.AllocationStrategy
	}).(pulumi.StringPtrOutput)
}

// The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty.
//
// When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesPtrOutput) BidPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return v.BidPercentage
	}).(pulumi.IntPtrOutput)
}

// The desired number of vCPUS in the compute environment. AWS Batch modifies this value between the minimum and maximum values based on job queue demand.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > AWS Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters. > When you update the `desiredvCpus` setting, the value must be between the `minvCpus` and `maxvCpus` values.
// >
// > Additionally, the updated `desiredvCpus` value must be greater than or equal to the current `desiredvCpus` value. For more information, see [Troubleshooting AWS Batch](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#error-desired-vcpus-update) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesPtrOutput) DesiredvCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return v.DesiredvCpus
	}).(pulumi.IntPtrOutput)
}

// Provides information used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If `Ec2Configuration` isn't specified, the default is `ECS_AL2` .
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . To remove the Amazon EC2 configuration and any custom AMI ID specified in `imageIdOverride` , set this value to an empty string.
//
// One or two values can be provided.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Ec2Configuration() ComputeEnvironmentEc2ConfigurationObjectArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []ComputeEnvironmentEc2ConfigurationObject {
		if v == nil {
			return nil
		}
		return v.Ec2Configuration
	}).(ComputeEnvironmentEc2ConfigurationObjectArrayOutput)
}

// The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string.
//
// When updating a compute environment, changing the Amazon EC2 key pair requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Ec2KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.Ec2KeyPair
	}).(pulumi.StringPtrOutput)
}

// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the `imageIdOverride` member of the `Ec2Configuration` structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string.
//
// When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o ComputeEnvironmentComputeResourcesPtrOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.ImageId
	}).(pulumi.StringPtrOutput)
}

// The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. Required for Amazon EC2 instances. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, `*ecsInstanceRole*` or `arn:aws:iam:: *<aws_account_id>* :instance-profile/ *ecsInstanceRole*` . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the *AWS Batch User Guide* .
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesPtrOutput) InstanceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.InstanceRole
	}).(pulumi.StringPtrOutput)
}

// The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, `c5` or `p3` ), or you can specify specific sizes within a family (such as `c5.8xlarge` ). You can also choose `optimal` to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. > Currently, `optimal` uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
func (o ComputeEnvironmentComputeResourcesPtrOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []string {
		if v == nil {
			return nil
		}
		return v.InstanceTypes
	}).(pulumi.StringArrayOutput)
}

// The launch template to use for your compute resources. Any other compute resource parameters that you specify in a [CreateComputeEnvironment](https://docs.aws.amazon.com/batch/latest/APIReference/API_CreateComputeEnvironment.html) API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch Template Support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the ** . Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the `updateToLatestImageVersion` parameter must be set to `true` .
//
// When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the ** .
//
// > This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
func (o ComputeEnvironmentComputeResourcesPtrOutput) LaunchTemplate() ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *ComputeEnvironmentLaunchTemplateSpecification {
		if v == nil {
			return nil
		}
		return v.LaunchTemplate
	}).(ComputeEnvironmentLaunchTemplateSpecificationPtrOutput)
}

// The maximum number of Amazon EC2 vCPUs that an environment can reach.
//
// > With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED` (recommended) strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to exceed `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
func (o ComputeEnvironmentComputeResourcesPtrOutput) MaxvCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return &v.MaxvCpus
	}).(pulumi.IntPtrOutput)
}

// The minimum number of vCPUs that an environment should maintain (even if the compute environment is `DISABLED` ).
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesPtrOutput) MinvCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *int {
		if v == nil {
			return nil
		}
		return v.MinvCpus
	}).(pulumi.IntPtrOutput)
}

// The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for Linux Instances* .
//
// When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
func (o ComputeEnvironmentComputeResourcesPtrOutput) PlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.PlacementGroup
	}).(pulumi.StringPtrOutput)
}

// The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the security groups from the compute resource.
//
// When updating a compute environment, changing the Amazon EC2 security groups requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a `SPOT` compute environment. This role is required if the allocation strategy set to `BEST_FIT` or if the allocation strategy isn't specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer *AmazonEC2SpotFleetTaggingRole* managed policy. The previously recommended *AmazonEC2SpotFleetRole* managed policy doesn't have the required permissions to tag Spot Instances. For more information, see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesPtrOutput) SpotIamFleetRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return v.SpotIamFleetRole
	}).(pulumi.StringPtrOutput)
}

// The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the *Amazon VPC User Guide* .
//
// When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// > AWS Batch on Amazon EC2 and AWS Batch on Amazon EKS support Local Zones. For more information, see [Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the *Amazon EC2 User Guide for Linux Instances* , [Amazon EKS and AWS Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the *Amazon EKS User Guide* and [Amazon ECS clusters in Local Zones, Wavelength Zones, and AWS Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the *Amazon ECS Developer Guide* .
// >
// > AWS Batch on Fargate doesn't currently support Local Zones.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

// A key-value pair to associate with a resource.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The type of compute environment: `EC2` , `SPOT` , `FARGATE` , or `FARGATE_SPOT` . For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the *AWS Batch User Guide* .
//
// If you choose `SPOT` , you must also specify an Amazon EC2 Spot Fleet role with the `spotIamFleetRole` parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
//
// When updating compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// When updating the type of a compute environment, changing between `EC2` and `SPOT` or between `FARGATE` and `FARGATE_SPOT` will initiate an infrastructure update, but if you switch between `EC2` and `FARGATE` , AWS CloudFormation will create a new compute environment.
func (o ComputeEnvironmentComputeResourcesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the AMI ID is updated to the latest one that's supported by AWS Batch when the compute environment has an infrastructure update. The default value is `false` .
//
// > An AMI ID can either be specified in the `imageId` or `imageIdOverride` parameters or be determined by the launch template that's specified in the `launchTemplate` parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the *AWS Batch User Guide* .
//
// When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
func (o ComputeEnvironmentComputeResourcesPtrOutput) UpdateToLatestImageVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentComputeResources) *bool {
		if v == nil {
			return nil
		}
		return v.UpdateToLatestImageVersion
	}).(pulumi.BoolPtrOutput)
}

type ComputeEnvironmentEc2ConfigurationObject struct {
	// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` set in the `computeResource` object.
	//
	// > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
	ImageIdOverride *string `pulumi:"imageIdOverride"`
	// The Kubernetes version for the compute environment. If you don't specify a value, the latest version that AWS Batch supports is used.
	ImageKubernetesVersion *string `pulumi:"imageKubernetesVersion"`
	// The image type to match with the instance type to select an AMI. The supported values are different for `ECS` and `EKS` resources.
	//
	// - **ECS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) ( `ECS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon ECS optimized AMI for that image type that's supported by AWS Batch is used.
	//
	// - **ECS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) : Default for all non-GPU instance families.
	// - **ECS_AL2_NVIDIA** - [Amazon Linux 2 (GPU)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami) : Default for all GPU instance families (for example `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
	// - **ECS_AL2023** - [Amazon Linux 2023](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) : AWS Batch supports Amazon Linux 2023.
	//
	// > Amazon Linux 2023 does not support `A1` instances.
	// - **ECS_AL1** - [Amazon Linux](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami) . Amazon Linux has reached the end-of-life of standard support. For more information, see [Amazon Linux AMI](https://docs.aws.amazon.com/amazon-linux-ami/) .
	// - **EKS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon EKS-optimized Amazon Linux AMI](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) ( `EKS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon EKS optimized AMI for that image type that AWS Batch supports is used.
	//
	// - **EKS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all non-GPU instance families.
	// - **EKS_AL2_NVIDIA** - [Amazon Linux 2 (accelerated)](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all GPU instance families (for example, `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
	ImageType string `pulumi:"imageType"`
}

// ComputeEnvironmentEc2ConfigurationObjectInput is an input type that accepts ComputeEnvironmentEc2ConfigurationObjectArgs and ComputeEnvironmentEc2ConfigurationObjectOutput values.
// You can construct a concrete instance of `ComputeEnvironmentEc2ConfigurationObjectInput` via:
//
//	ComputeEnvironmentEc2ConfigurationObjectArgs{...}
type ComputeEnvironmentEc2ConfigurationObjectInput interface {
	pulumi.Input

	ToComputeEnvironmentEc2ConfigurationObjectOutput() ComputeEnvironmentEc2ConfigurationObjectOutput
	ToComputeEnvironmentEc2ConfigurationObjectOutputWithContext(context.Context) ComputeEnvironmentEc2ConfigurationObjectOutput
}

type ComputeEnvironmentEc2ConfigurationObjectArgs struct {
	// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` set in the `computeResource` object.
	//
	// > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
	ImageIdOverride pulumi.StringPtrInput `pulumi:"imageIdOverride"`
	// The Kubernetes version for the compute environment. If you don't specify a value, the latest version that AWS Batch supports is used.
	ImageKubernetesVersion pulumi.StringPtrInput `pulumi:"imageKubernetesVersion"`
	// The image type to match with the instance type to select an AMI. The supported values are different for `ECS` and `EKS` resources.
	//
	// - **ECS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) ( `ECS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon ECS optimized AMI for that image type that's supported by AWS Batch is used.
	//
	// - **ECS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) : Default for all non-GPU instance families.
	// - **ECS_AL2_NVIDIA** - [Amazon Linux 2 (GPU)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami) : Default for all GPU instance families (for example `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
	// - **ECS_AL2023** - [Amazon Linux 2023](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) : AWS Batch supports Amazon Linux 2023.
	//
	// > Amazon Linux 2023 does not support `A1` instances.
	// - **ECS_AL1** - [Amazon Linux](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami) . Amazon Linux has reached the end-of-life of standard support. For more information, see [Amazon Linux AMI](https://docs.aws.amazon.com/amazon-linux-ami/) .
	// - **EKS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon EKS-optimized Amazon Linux AMI](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) ( `EKS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon EKS optimized AMI for that image type that AWS Batch supports is used.
	//
	// - **EKS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all non-GPU instance families.
	// - **EKS_AL2_NVIDIA** - [Amazon Linux 2 (accelerated)](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all GPU instance families (for example, `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
	ImageType pulumi.StringInput `pulumi:"imageType"`
}

func (ComputeEnvironmentEc2ConfigurationObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEc2ConfigurationObject)(nil)).Elem()
}

func (i ComputeEnvironmentEc2ConfigurationObjectArgs) ToComputeEnvironmentEc2ConfigurationObjectOutput() ComputeEnvironmentEc2ConfigurationObjectOutput {
	return i.ToComputeEnvironmentEc2ConfigurationObjectOutputWithContext(context.Background())
}

func (i ComputeEnvironmentEc2ConfigurationObjectArgs) ToComputeEnvironmentEc2ConfigurationObjectOutputWithContext(ctx context.Context) ComputeEnvironmentEc2ConfigurationObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEc2ConfigurationObjectOutput)
}

// ComputeEnvironmentEc2ConfigurationObjectArrayInput is an input type that accepts ComputeEnvironmentEc2ConfigurationObjectArray and ComputeEnvironmentEc2ConfigurationObjectArrayOutput values.
// You can construct a concrete instance of `ComputeEnvironmentEc2ConfigurationObjectArrayInput` via:
//
//	ComputeEnvironmentEc2ConfigurationObjectArray{ ComputeEnvironmentEc2ConfigurationObjectArgs{...} }
type ComputeEnvironmentEc2ConfigurationObjectArrayInput interface {
	pulumi.Input

	ToComputeEnvironmentEc2ConfigurationObjectArrayOutput() ComputeEnvironmentEc2ConfigurationObjectArrayOutput
	ToComputeEnvironmentEc2ConfigurationObjectArrayOutputWithContext(context.Context) ComputeEnvironmentEc2ConfigurationObjectArrayOutput
}

type ComputeEnvironmentEc2ConfigurationObjectArray []ComputeEnvironmentEc2ConfigurationObjectInput

func (ComputeEnvironmentEc2ConfigurationObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeEnvironmentEc2ConfigurationObject)(nil)).Elem()
}

func (i ComputeEnvironmentEc2ConfigurationObjectArray) ToComputeEnvironmentEc2ConfigurationObjectArrayOutput() ComputeEnvironmentEc2ConfigurationObjectArrayOutput {
	return i.ToComputeEnvironmentEc2ConfigurationObjectArrayOutputWithContext(context.Background())
}

func (i ComputeEnvironmentEc2ConfigurationObjectArray) ToComputeEnvironmentEc2ConfigurationObjectArrayOutputWithContext(ctx context.Context) ComputeEnvironmentEc2ConfigurationObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEc2ConfigurationObjectArrayOutput)
}

type ComputeEnvironmentEc2ConfigurationObjectOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentEc2ConfigurationObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEc2ConfigurationObject)(nil)).Elem()
}

func (o ComputeEnvironmentEc2ConfigurationObjectOutput) ToComputeEnvironmentEc2ConfigurationObjectOutput() ComputeEnvironmentEc2ConfigurationObjectOutput {
	return o
}

func (o ComputeEnvironmentEc2ConfigurationObjectOutput) ToComputeEnvironmentEc2ConfigurationObjectOutputWithContext(ctx context.Context) ComputeEnvironmentEc2ConfigurationObjectOutput {
	return o
}

// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` set in the `computeResource` object.
//
// > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o ComputeEnvironmentEc2ConfigurationObjectOutput) ImageIdOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentEc2ConfigurationObject) *string { return v.ImageIdOverride }).(pulumi.StringPtrOutput)
}

// The Kubernetes version for the compute environment. If you don't specify a value, the latest version that AWS Batch supports is used.
func (o ComputeEnvironmentEc2ConfigurationObjectOutput) ImageKubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentEc2ConfigurationObject) *string { return v.ImageKubernetesVersion }).(pulumi.StringPtrOutput)
}

// The image type to match with the instance type to select an AMI. The supported values are different for `ECS` and `EKS` resources.
//
// - **ECS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) ( `ECS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon ECS optimized AMI for that image type that's supported by AWS Batch is used.
//
// - **ECS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) : Default for all non-GPU instance families.
// - **ECS_AL2_NVIDIA** - [Amazon Linux 2 (GPU)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami) : Default for all GPU instance families (for example `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
// - **ECS_AL2023** - [Amazon Linux 2023](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) : AWS Batch supports Amazon Linux 2023.
//
// > Amazon Linux 2023 does not support `A1` instances.
// - **ECS_AL1** - [Amazon Linux](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami) . Amazon Linux has reached the end-of-life of standard support. For more information, see [Amazon Linux AMI](https://docs.aws.amazon.com/amazon-linux-ami/) .
// - **EKS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon EKS-optimized Amazon Linux AMI](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) ( `EKS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon EKS optimized AMI for that image type that AWS Batch supports is used.
//
// - **EKS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all non-GPU instance families.
// - **EKS_AL2_NVIDIA** - [Amazon Linux 2 (accelerated)](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all GPU instance families (for example, `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
func (o ComputeEnvironmentEc2ConfigurationObjectOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnvironmentEc2ConfigurationObject) string { return v.ImageType }).(pulumi.StringOutput)
}

type ComputeEnvironmentEc2ConfigurationObjectArrayOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentEc2ConfigurationObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeEnvironmentEc2ConfigurationObject)(nil)).Elem()
}

func (o ComputeEnvironmentEc2ConfigurationObjectArrayOutput) ToComputeEnvironmentEc2ConfigurationObjectArrayOutput() ComputeEnvironmentEc2ConfigurationObjectArrayOutput {
	return o
}

func (o ComputeEnvironmentEc2ConfigurationObjectArrayOutput) ToComputeEnvironmentEc2ConfigurationObjectArrayOutputWithContext(ctx context.Context) ComputeEnvironmentEc2ConfigurationObjectArrayOutput {
	return o
}

func (o ComputeEnvironmentEc2ConfigurationObjectArrayOutput) Index(i pulumi.IntInput) ComputeEnvironmentEc2ConfigurationObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeEnvironmentEc2ConfigurationObject {
		return vs[0].([]ComputeEnvironmentEc2ConfigurationObject)[vs[1].(int)]
	}).(ComputeEnvironmentEc2ConfigurationObjectOutput)
}

type ComputeEnvironmentEksConfiguration struct {
	// The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is `arn: *aws* :eks: *us-east-1* : *123456789012* :cluster/ *ClusterForBatch*` .
	EksClusterArn string `pulumi:"eksClusterArn"`
	// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to `default` , can't start with " `kube-` ," and must match this regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$` . For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the Kubernetes documentation.
	KubernetesNamespace string `pulumi:"kubernetesNamespace"`
}

// ComputeEnvironmentEksConfigurationInput is an input type that accepts ComputeEnvironmentEksConfigurationArgs and ComputeEnvironmentEksConfigurationOutput values.
// You can construct a concrete instance of `ComputeEnvironmentEksConfigurationInput` via:
//
//	ComputeEnvironmentEksConfigurationArgs{...}
type ComputeEnvironmentEksConfigurationInput interface {
	pulumi.Input

	ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput
	ToComputeEnvironmentEksConfigurationOutputWithContext(context.Context) ComputeEnvironmentEksConfigurationOutput
}

type ComputeEnvironmentEksConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is `arn: *aws* :eks: *us-east-1* : *123456789012* :cluster/ *ClusterForBatch*` .
	EksClusterArn pulumi.StringInput `pulumi:"eksClusterArn"`
	// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to `default` , can't start with " `kube-` ," and must match this regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$` . For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the Kubernetes documentation.
	KubernetesNamespace pulumi.StringInput `pulumi:"kubernetesNamespace"`
}

func (ComputeEnvironmentEksConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput {
	return i.ToComputeEnvironmentEksConfigurationOutputWithContext(context.Background())
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEksConfigurationOutput)
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return i.ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentEksConfigurationArgs) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEksConfigurationOutput).ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx)
}

// ComputeEnvironmentEksConfigurationPtrInput is an input type that accepts ComputeEnvironmentEksConfigurationArgs, ComputeEnvironmentEksConfigurationPtr and ComputeEnvironmentEksConfigurationPtrOutput values.
// You can construct a concrete instance of `ComputeEnvironmentEksConfigurationPtrInput` via:
//
//	        ComputeEnvironmentEksConfigurationArgs{...}
//
//	or:
//
//	        nil
type ComputeEnvironmentEksConfigurationPtrInput interface {
	pulumi.Input

	ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput
	ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Context) ComputeEnvironmentEksConfigurationPtrOutput
}

type computeEnvironmentEksConfigurationPtrType ComputeEnvironmentEksConfigurationArgs

func ComputeEnvironmentEksConfigurationPtr(v *ComputeEnvironmentEksConfigurationArgs) ComputeEnvironmentEksConfigurationPtrInput {
	return (*computeEnvironmentEksConfigurationPtrType)(v)
}

func (*computeEnvironmentEksConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (i *computeEnvironmentEksConfigurationPtrType) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return i.ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentEksConfigurationPtrType) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentEksConfigurationPtrOutput)
}

type ComputeEnvironmentEksConfigurationOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentEksConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationOutput() ComputeEnvironmentEksConfigurationOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return o.ToComputeEnvironmentEksConfigurationPtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentEksConfigurationOutput) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnvironmentEksConfiguration) *ComputeEnvironmentEksConfiguration {
		return &v
	}).(ComputeEnvironmentEksConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is `arn: *aws* :eks: *us-east-1* : *123456789012* :cluster/ *ClusterForBatch*` .
func (o ComputeEnvironmentEksConfigurationOutput) EksClusterArn() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnvironmentEksConfiguration) string { return v.EksClusterArn }).(pulumi.StringOutput)
}

// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to `default` , can't start with " `kube-` ," and must match this regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$` . For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the Kubernetes documentation.
func (o ComputeEnvironmentEksConfigurationOutput) KubernetesNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnvironmentEksConfiguration) string { return v.KubernetesNamespace }).(pulumi.StringOutput)
}

type ComputeEnvironmentEksConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentEksConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentEksConfiguration)(nil)).Elem()
}

func (o ComputeEnvironmentEksConfigurationPtrOutput) ToComputeEnvironmentEksConfigurationPtrOutput() ComputeEnvironmentEksConfigurationPtrOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationPtrOutput) ToComputeEnvironmentEksConfigurationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentEksConfigurationPtrOutput {
	return o
}

func (o ComputeEnvironmentEksConfigurationPtrOutput) Elem() ComputeEnvironmentEksConfigurationOutput {
	return o.ApplyT(func(v *ComputeEnvironmentEksConfiguration) ComputeEnvironmentEksConfiguration {
		if v != nil {
			return *v
		}
		var ret ComputeEnvironmentEksConfiguration
		return ret
	}).(ComputeEnvironmentEksConfigurationOutput)
}

// The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is `arn: *aws* :eks: *us-east-1* : *123456789012* :cluster/ *ClusterForBatch*` .
func (o ComputeEnvironmentEksConfigurationPtrOutput) EksClusterArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentEksConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.EksClusterArn
	}).(pulumi.StringPtrOutput)
}

// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to `default` , can't start with " `kube-` ," and must match this regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$` . For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the Kubernetes documentation.
func (o ComputeEnvironmentEksConfigurationPtrOutput) KubernetesNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentEksConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KubernetesNamespace
	}).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentLaunchTemplateSpecification struct {
	// The ID of the launch template.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName *string `pulumi:"launchTemplateName"`
	// A launch template to use in place of the default launch template. You must specify either the launch template ID or launch template name in the request, but not both.
	//
	// You can specify up to ten (10) launch template overrides that are associated to unique instance types or families for each compute environment.
	//
	// > To unset all override templates for a compute environment, you can pass an empty array to the [UpdateComputeEnvironment.overrides](https://docs.aws.amazon.com/batch/latest/APIReference/API_UpdateComputeEnvironment.html) parameter, or not include the `overrides` parameter when submitting the `UpdateComputeEnvironment` API operation.
	Overrides []ComputeEnvironmentLaunchTemplateSpecificationOverride `pulumi:"overrides"`
	// The version number of the launch template, `$Default` , or `$Latest` .
	//
	// If the value is `$Default` , the default version of the launch template is used. If the value is `$Latest` , the latest version of the launch template is used.
	//
	// > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Default` or `$Latest` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// Default: `$Default`
	//
	// Latest: `$Latest`
	Version *string `pulumi:"version"`
}

// ComputeEnvironmentLaunchTemplateSpecificationInput is an input type that accepts ComputeEnvironmentLaunchTemplateSpecificationArgs and ComputeEnvironmentLaunchTemplateSpecificationOutput values.
// You can construct a concrete instance of `ComputeEnvironmentLaunchTemplateSpecificationInput` via:
//
//	ComputeEnvironmentLaunchTemplateSpecificationArgs{...}
type ComputeEnvironmentLaunchTemplateSpecificationInput interface {
	pulumi.Input

	ToComputeEnvironmentLaunchTemplateSpecificationOutput() ComputeEnvironmentLaunchTemplateSpecificationOutput
	ToComputeEnvironmentLaunchTemplateSpecificationOutputWithContext(context.Context) ComputeEnvironmentLaunchTemplateSpecificationOutput
}

type ComputeEnvironmentLaunchTemplateSpecificationArgs struct {
	// The ID of the launch template.
	LaunchTemplateId pulumi.StringPtrInput `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName pulumi.StringPtrInput `pulumi:"launchTemplateName"`
	// A launch template to use in place of the default launch template. You must specify either the launch template ID or launch template name in the request, but not both.
	//
	// You can specify up to ten (10) launch template overrides that are associated to unique instance types or families for each compute environment.
	//
	// > To unset all override templates for a compute environment, you can pass an empty array to the [UpdateComputeEnvironment.overrides](https://docs.aws.amazon.com/batch/latest/APIReference/API_UpdateComputeEnvironment.html) parameter, or not include the `overrides` parameter when submitting the `UpdateComputeEnvironment` API operation.
	Overrides ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayInput `pulumi:"overrides"`
	// The version number of the launch template, `$Default` , or `$Latest` .
	//
	// If the value is `$Default` , the default version of the launch template is used. If the value is `$Latest` , the latest version of the launch template is used.
	//
	// > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Default` or `$Latest` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// Default: `$Default`
	//
	// Latest: `$Latest`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ComputeEnvironmentLaunchTemplateSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecification)(nil)).Elem()
}

func (i ComputeEnvironmentLaunchTemplateSpecificationArgs) ToComputeEnvironmentLaunchTemplateSpecificationOutput() ComputeEnvironmentLaunchTemplateSpecificationOutput {
	return i.ToComputeEnvironmentLaunchTemplateSpecificationOutputWithContext(context.Background())
}

func (i ComputeEnvironmentLaunchTemplateSpecificationArgs) ToComputeEnvironmentLaunchTemplateSpecificationOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentLaunchTemplateSpecificationOutput)
}

func (i ComputeEnvironmentLaunchTemplateSpecificationArgs) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutput() ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return i.ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentLaunchTemplateSpecificationArgs) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentLaunchTemplateSpecificationOutput).ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(ctx)
}

// ComputeEnvironmentLaunchTemplateSpecificationPtrInput is an input type that accepts ComputeEnvironmentLaunchTemplateSpecificationArgs, ComputeEnvironmentLaunchTemplateSpecificationPtr and ComputeEnvironmentLaunchTemplateSpecificationPtrOutput values.
// You can construct a concrete instance of `ComputeEnvironmentLaunchTemplateSpecificationPtrInput` via:
//
//	        ComputeEnvironmentLaunchTemplateSpecificationArgs{...}
//
//	or:
//
//	        nil
type ComputeEnvironmentLaunchTemplateSpecificationPtrInput interface {
	pulumi.Input

	ToComputeEnvironmentLaunchTemplateSpecificationPtrOutput() ComputeEnvironmentLaunchTemplateSpecificationPtrOutput
	ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(context.Context) ComputeEnvironmentLaunchTemplateSpecificationPtrOutput
}

type computeEnvironmentLaunchTemplateSpecificationPtrType ComputeEnvironmentLaunchTemplateSpecificationArgs

func ComputeEnvironmentLaunchTemplateSpecificationPtr(v *ComputeEnvironmentLaunchTemplateSpecificationArgs) ComputeEnvironmentLaunchTemplateSpecificationPtrInput {
	return (*computeEnvironmentLaunchTemplateSpecificationPtrType)(v)
}

func (*computeEnvironmentLaunchTemplateSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentLaunchTemplateSpecification)(nil)).Elem()
}

func (i *computeEnvironmentLaunchTemplateSpecificationPtrType) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutput() ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return i.ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentLaunchTemplateSpecificationPtrType) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentLaunchTemplateSpecificationPtrOutput)
}

type ComputeEnvironmentLaunchTemplateSpecificationOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentLaunchTemplateSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecification)(nil)).Elem()
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) ToComputeEnvironmentLaunchTemplateSpecificationOutput() ComputeEnvironmentLaunchTemplateSpecificationOutput {
	return o
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) ToComputeEnvironmentLaunchTemplateSpecificationOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationOutput {
	return o
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutput() ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return o.ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnvironmentLaunchTemplateSpecification) *ComputeEnvironmentLaunchTemplateSpecification {
		return &v
	}).(ComputeEnvironmentLaunchTemplateSpecificationPtrOutput)
}

// The ID of the launch template.
func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecification) *string { return v.LaunchTemplateId }).(pulumi.StringPtrOutput)
}

// The name of the launch template.
func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) LaunchTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecification) *string { return v.LaunchTemplateName }).(pulumi.StringPtrOutput)
}

// A launch template to use in place of the default launch template. You must specify either the launch template ID or launch template name in the request, but not both.
//
// You can specify up to ten (10) launch template overrides that are associated to unique instance types or families for each compute environment.
//
// > To unset all override templates for a compute environment, you can pass an empty array to the [UpdateComputeEnvironment.overrides](https://docs.aws.amazon.com/batch/latest/APIReference/API_UpdateComputeEnvironment.html) parameter, or not include the `overrides` parameter when submitting the `UpdateComputeEnvironment` API operation.
func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) Overrides() ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecification) []ComputeEnvironmentLaunchTemplateSpecificationOverride {
		return v.Overrides
	}).(ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput)
}

// The version number of the launch template, `$Default` , or `$Latest` .
//
// If the value is `$Default` , the default version of the launch template is used. If the value is `$Latest` , the latest version of the launch template is used.
//
// > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Default` or `$Latest` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// Default: `$Default`
//
// Latest: `$Latest`
func (o ComputeEnvironmentLaunchTemplateSpecificationOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecification) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentLaunchTemplateSpecificationPtrOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentLaunchTemplateSpecification)(nil)).Elem()
}

func (o ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutput() ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return o
}

func (o ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) ToComputeEnvironmentLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationPtrOutput {
	return o
}

func (o ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) Elem() ComputeEnvironmentLaunchTemplateSpecificationOutput {
	return o.ApplyT(func(v *ComputeEnvironmentLaunchTemplateSpecification) ComputeEnvironmentLaunchTemplateSpecification {
		if v != nil {
			return *v
		}
		var ret ComputeEnvironmentLaunchTemplateSpecification
		return ret
	}).(ComputeEnvironmentLaunchTemplateSpecificationOutput)
}

// The ID of the launch template.
func (o ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.LaunchTemplateId
	}).(pulumi.StringPtrOutput)
}

// The name of the launch template.
func (o ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) LaunchTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.LaunchTemplateName
	}).(pulumi.StringPtrOutput)
}

// A launch template to use in place of the default launch template. You must specify either the launch template ID or launch template name in the request, but not both.
//
// You can specify up to ten (10) launch template overrides that are associated to unique instance types or families for each compute environment.
//
// > To unset all override templates for a compute environment, you can pass an empty array to the [UpdateComputeEnvironment.overrides](https://docs.aws.amazon.com/batch/latest/APIReference/API_UpdateComputeEnvironment.html) parameter, or not include the `overrides` parameter when submitting the `UpdateComputeEnvironment` API operation.
func (o ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) Overrides() ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput {
	return o.ApplyT(func(v *ComputeEnvironmentLaunchTemplateSpecification) []ComputeEnvironmentLaunchTemplateSpecificationOverride {
		if v == nil {
			return nil
		}
		return v.Overrides
	}).(ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput)
}

// The version number of the launch template, `$Default` , or `$Latest` .
//
// If the value is `$Default` , the default version of the launch template is used. If the value is `$Latest` , the latest version of the launch template is used.
//
// > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Default` or `$Latest` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// Default: `$Default`
//
// Latest: `$Latest`
func (o ComputeEnvironmentLaunchTemplateSpecificationPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentLaunchTemplateSpecificationOverride struct {
	// The ID of the launch template.
	//
	// *Note:* If you specify the `launchTemplateId` you can't specify the `launchTemplateName` as well.
	LaunchTemplateId *string `pulumi:"launchTemplateId"`
	// The name of the launch template.
	//
	// *Note:* If you specify the `launchTemplateName` you can't specify the `launchTemplateId` as well.
	LaunchTemplateName *string `pulumi:"launchTemplateName"`
	// The instance type or family that this override launch template should be applied to.
	//
	// This parameter is required when defining a launch template override.
	//
	// Information included in this parameter must meet the following requirements:
	//
	// - Must be a valid Amazon EC2 instance type or family.
	// - `optimal` isn't allowed.
	// - `targetInstanceTypes` can target only instance types and families that are included within the [`ComputeResource.instanceTypes`](https://docs.aws.amazon.com/batch/latest/APIReference/API_ComputeResource.html#Batch-Type-ComputeResource-instanceTypes) set. `targetInstanceTypes` doesn't need to include all of the instances from the `instanceType` set, but at least a subset. For example, if `ComputeResource.instanceTypes` includes `[m5, g5]` , `targetInstanceTypes` can include `[m5.2xlarge]` and `[m5.large]` but not `[c5.large]` .
	// - `targetInstanceTypes` included within the same launch template override or across launch template overrides can't overlap for the same compute environment. For example, you can't define one launch template override to target an instance family and another define an instance type within this same family.
	TargetInstanceTypes []string `pulumi:"targetInstanceTypes"`
	// The version number of the launch template, `$Default` , or `$Latest` .
	//
	// If the value is `$Default` , the default version of the launch template is used. If the value is `$Latest` , the latest version of the launch template is used.
	//
	// > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Default` or `$Latest` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// Default: `$Default`
	//
	// Latest: `$Latest`
	Version *string `pulumi:"version"`
}

// ComputeEnvironmentLaunchTemplateSpecificationOverrideInput is an input type that accepts ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs and ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput values.
// You can construct a concrete instance of `ComputeEnvironmentLaunchTemplateSpecificationOverrideInput` via:
//
//	ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs{...}
type ComputeEnvironmentLaunchTemplateSpecificationOverrideInput interface {
	pulumi.Input

	ToComputeEnvironmentLaunchTemplateSpecificationOverrideOutput() ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput
	ToComputeEnvironmentLaunchTemplateSpecificationOverrideOutputWithContext(context.Context) ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput
}

type ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs struct {
	// The ID of the launch template.
	//
	// *Note:* If you specify the `launchTemplateId` you can't specify the `launchTemplateName` as well.
	LaunchTemplateId pulumi.StringPtrInput `pulumi:"launchTemplateId"`
	// The name of the launch template.
	//
	// *Note:* If you specify the `launchTemplateName` you can't specify the `launchTemplateId` as well.
	LaunchTemplateName pulumi.StringPtrInput `pulumi:"launchTemplateName"`
	// The instance type or family that this override launch template should be applied to.
	//
	// This parameter is required when defining a launch template override.
	//
	// Information included in this parameter must meet the following requirements:
	//
	// - Must be a valid Amazon EC2 instance type or family.
	// - `optimal` isn't allowed.
	// - `targetInstanceTypes` can target only instance types and families that are included within the [`ComputeResource.instanceTypes`](https://docs.aws.amazon.com/batch/latest/APIReference/API_ComputeResource.html#Batch-Type-ComputeResource-instanceTypes) set. `targetInstanceTypes` doesn't need to include all of the instances from the `instanceType` set, but at least a subset. For example, if `ComputeResource.instanceTypes` includes `[m5, g5]` , `targetInstanceTypes` can include `[m5.2xlarge]` and `[m5.large]` but not `[c5.large]` .
	// - `targetInstanceTypes` included within the same launch template override or across launch template overrides can't overlap for the same compute environment. For example, you can't define one launch template override to target an instance family and another define an instance type within this same family.
	TargetInstanceTypes pulumi.StringArrayInput `pulumi:"targetInstanceTypes"`
	// The version number of the launch template, `$Default` , or `$Latest` .
	//
	// If the value is `$Default` , the default version of the launch template is used. If the value is `$Latest` , the latest version of the launch template is used.
	//
	// > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Default` or `$Latest` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
	//
	// Default: `$Default`
	//
	// Latest: `$Latest`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecificationOverride)(nil)).Elem()
}

func (i ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs) ToComputeEnvironmentLaunchTemplateSpecificationOverrideOutput() ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput {
	return i.ToComputeEnvironmentLaunchTemplateSpecificationOverrideOutputWithContext(context.Background())
}

func (i ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs) ToComputeEnvironmentLaunchTemplateSpecificationOverrideOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput)
}

// ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayInput is an input type that accepts ComputeEnvironmentLaunchTemplateSpecificationOverrideArray and ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput values.
// You can construct a concrete instance of `ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayInput` via:
//
//	ComputeEnvironmentLaunchTemplateSpecificationOverrideArray{ ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs{...} }
type ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayInput interface {
	pulumi.Input

	ToComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput() ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput
	ToComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutputWithContext(context.Context) ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput
}

type ComputeEnvironmentLaunchTemplateSpecificationOverrideArray []ComputeEnvironmentLaunchTemplateSpecificationOverrideInput

func (ComputeEnvironmentLaunchTemplateSpecificationOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeEnvironmentLaunchTemplateSpecificationOverride)(nil)).Elem()
}

func (i ComputeEnvironmentLaunchTemplateSpecificationOverrideArray) ToComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput() ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput {
	return i.ToComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutputWithContext(context.Background())
}

func (i ComputeEnvironmentLaunchTemplateSpecificationOverrideArray) ToComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput)
}

type ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecificationOverride)(nil)).Elem()
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput) ToComputeEnvironmentLaunchTemplateSpecificationOverrideOutput() ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput {
	return o
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput) ToComputeEnvironmentLaunchTemplateSpecificationOverrideOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput {
	return o
}

// The ID of the launch template.
//
// *Note:* If you specify the `launchTemplateId` you can't specify the `launchTemplateName` as well.
func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecificationOverride) *string { return v.LaunchTemplateId }).(pulumi.StringPtrOutput)
}

// The name of the launch template.
//
// *Note:* If you specify the `launchTemplateName` you can't specify the `launchTemplateId` as well.
func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput) LaunchTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecificationOverride) *string { return v.LaunchTemplateName }).(pulumi.StringPtrOutput)
}

// The instance type or family that this override launch template should be applied to.
//
// This parameter is required when defining a launch template override.
//
// Information included in this parameter must meet the following requirements:
//
// - Must be a valid Amazon EC2 instance type or family.
// - `optimal` isn't allowed.
// - `targetInstanceTypes` can target only instance types and families that are included within the [`ComputeResource.instanceTypes`](https://docs.aws.amazon.com/batch/latest/APIReference/API_ComputeResource.html#Batch-Type-ComputeResource-instanceTypes) set. `targetInstanceTypes` doesn't need to include all of the instances from the `instanceType` set, but at least a subset. For example, if `ComputeResource.instanceTypes` includes `[m5, g5]` , `targetInstanceTypes` can include `[m5.2xlarge]` and `[m5.large]` but not `[c5.large]` .
// - `targetInstanceTypes` included within the same launch template override or across launch template overrides can't overlap for the same compute environment. For example, you can't define one launch template override to target an instance family and another define an instance type within this same family.
func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput) TargetInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecificationOverride) []string { return v.TargetInstanceTypes }).(pulumi.StringArrayOutput)
}

// The version number of the launch template, `$Default` , or `$Latest` .
//
// If the value is `$Default` , the default version of the launch template is used. If the value is `$Latest` , the latest version of the launch template is used.
//
// > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Default` or `$Latest` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
//
// Default: `$Default`
//
// Latest: `$Latest`
func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentLaunchTemplateSpecificationOverride) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeEnvironmentLaunchTemplateSpecificationOverride)(nil)).Elem()
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput) ToComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput() ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput {
	return o
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput) ToComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutputWithContext(ctx context.Context) ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput {
	return o
}

func (o ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput) Index(i pulumi.IntInput) ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeEnvironmentLaunchTemplateSpecificationOverride {
		return vs[0].([]ComputeEnvironmentLaunchTemplateSpecificationOverride)[vs[1].(int)]
	}).(ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput)
}

type ComputeEnvironmentUpdatePolicy struct {
	// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
	JobExecutionTimeoutMinutes *int `pulumi:"jobExecutionTimeoutMinutes"`
	// Specifies whether jobs are automatically terminated when the compute environment infrastructure is updated. The default value is `false` .
	TerminateJobsOnUpdate *bool `pulumi:"terminateJobsOnUpdate"`
}

// ComputeEnvironmentUpdatePolicyInput is an input type that accepts ComputeEnvironmentUpdatePolicyArgs and ComputeEnvironmentUpdatePolicyOutput values.
// You can construct a concrete instance of `ComputeEnvironmentUpdatePolicyInput` via:
//
//	ComputeEnvironmentUpdatePolicyArgs{...}
type ComputeEnvironmentUpdatePolicyInput interface {
	pulumi.Input

	ToComputeEnvironmentUpdatePolicyOutput() ComputeEnvironmentUpdatePolicyOutput
	ToComputeEnvironmentUpdatePolicyOutputWithContext(context.Context) ComputeEnvironmentUpdatePolicyOutput
}

type ComputeEnvironmentUpdatePolicyArgs struct {
	// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
	JobExecutionTimeoutMinutes pulumi.IntPtrInput `pulumi:"jobExecutionTimeoutMinutes"`
	// Specifies whether jobs are automatically terminated when the compute environment infrastructure is updated. The default value is `false` .
	TerminateJobsOnUpdate pulumi.BoolPtrInput `pulumi:"terminateJobsOnUpdate"`
}

func (ComputeEnvironmentUpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentUpdatePolicy)(nil)).Elem()
}

func (i ComputeEnvironmentUpdatePolicyArgs) ToComputeEnvironmentUpdatePolicyOutput() ComputeEnvironmentUpdatePolicyOutput {
	return i.ToComputeEnvironmentUpdatePolicyOutputWithContext(context.Background())
}

func (i ComputeEnvironmentUpdatePolicyArgs) ToComputeEnvironmentUpdatePolicyOutputWithContext(ctx context.Context) ComputeEnvironmentUpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentUpdatePolicyOutput)
}

func (i ComputeEnvironmentUpdatePolicyArgs) ToComputeEnvironmentUpdatePolicyPtrOutput() ComputeEnvironmentUpdatePolicyPtrOutput {
	return i.ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i ComputeEnvironmentUpdatePolicyArgs) ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(ctx context.Context) ComputeEnvironmentUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentUpdatePolicyOutput).ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(ctx)
}

// ComputeEnvironmentUpdatePolicyPtrInput is an input type that accepts ComputeEnvironmentUpdatePolicyArgs, ComputeEnvironmentUpdatePolicyPtr and ComputeEnvironmentUpdatePolicyPtrOutput values.
// You can construct a concrete instance of `ComputeEnvironmentUpdatePolicyPtrInput` via:
//
//	        ComputeEnvironmentUpdatePolicyArgs{...}
//
//	or:
//
//	        nil
type ComputeEnvironmentUpdatePolicyPtrInput interface {
	pulumi.Input

	ToComputeEnvironmentUpdatePolicyPtrOutput() ComputeEnvironmentUpdatePolicyPtrOutput
	ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(context.Context) ComputeEnvironmentUpdatePolicyPtrOutput
}

type computeEnvironmentUpdatePolicyPtrType ComputeEnvironmentUpdatePolicyArgs

func ComputeEnvironmentUpdatePolicyPtr(v *ComputeEnvironmentUpdatePolicyArgs) ComputeEnvironmentUpdatePolicyPtrInput {
	return (*computeEnvironmentUpdatePolicyPtrType)(v)
}

func (*computeEnvironmentUpdatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentUpdatePolicy)(nil)).Elem()
}

func (i *computeEnvironmentUpdatePolicyPtrType) ToComputeEnvironmentUpdatePolicyPtrOutput() ComputeEnvironmentUpdatePolicyPtrOutput {
	return i.ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i *computeEnvironmentUpdatePolicyPtrType) ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(ctx context.Context) ComputeEnvironmentUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnvironmentUpdatePolicyPtrOutput)
}

type ComputeEnvironmentUpdatePolicyOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentUpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnvironmentUpdatePolicy)(nil)).Elem()
}

func (o ComputeEnvironmentUpdatePolicyOutput) ToComputeEnvironmentUpdatePolicyOutput() ComputeEnvironmentUpdatePolicyOutput {
	return o
}

func (o ComputeEnvironmentUpdatePolicyOutput) ToComputeEnvironmentUpdatePolicyOutputWithContext(ctx context.Context) ComputeEnvironmentUpdatePolicyOutput {
	return o
}

func (o ComputeEnvironmentUpdatePolicyOutput) ToComputeEnvironmentUpdatePolicyPtrOutput() ComputeEnvironmentUpdatePolicyPtrOutput {
	return o.ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(context.Background())
}

func (o ComputeEnvironmentUpdatePolicyOutput) ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(ctx context.Context) ComputeEnvironmentUpdatePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnvironmentUpdatePolicy) *ComputeEnvironmentUpdatePolicy {
		return &v
	}).(ComputeEnvironmentUpdatePolicyPtrOutput)
}

// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
func (o ComputeEnvironmentUpdatePolicyOutput) JobExecutionTimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentUpdatePolicy) *int { return v.JobExecutionTimeoutMinutes }).(pulumi.IntPtrOutput)
}

// Specifies whether jobs are automatically terminated when the compute environment infrastructure is updated. The default value is `false` .
func (o ComputeEnvironmentUpdatePolicyOutput) TerminateJobsOnUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeEnvironmentUpdatePolicy) *bool { return v.TerminateJobsOnUpdate }).(pulumi.BoolPtrOutput)
}

type ComputeEnvironmentUpdatePolicyPtrOutput struct{ *pulumi.OutputState }

func (ComputeEnvironmentUpdatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnvironmentUpdatePolicy)(nil)).Elem()
}

func (o ComputeEnvironmentUpdatePolicyPtrOutput) ToComputeEnvironmentUpdatePolicyPtrOutput() ComputeEnvironmentUpdatePolicyPtrOutput {
	return o
}

func (o ComputeEnvironmentUpdatePolicyPtrOutput) ToComputeEnvironmentUpdatePolicyPtrOutputWithContext(ctx context.Context) ComputeEnvironmentUpdatePolicyPtrOutput {
	return o
}

func (o ComputeEnvironmentUpdatePolicyPtrOutput) Elem() ComputeEnvironmentUpdatePolicyOutput {
	return o.ApplyT(func(v *ComputeEnvironmentUpdatePolicy) ComputeEnvironmentUpdatePolicy {
		if v != nil {
			return *v
		}
		var ret ComputeEnvironmentUpdatePolicy
		return ret
	}).(ComputeEnvironmentUpdatePolicyOutput)
}

// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
func (o ComputeEnvironmentUpdatePolicyPtrOutput) JobExecutionTimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentUpdatePolicy) *int {
		if v == nil {
			return nil
		}
		return v.JobExecutionTimeoutMinutes
	}).(pulumi.IntPtrOutput)
}

// Specifies whether jobs are automatically terminated when the compute environment infrastructure is updated. The default value is `false` .
func (o ComputeEnvironmentUpdatePolicyPtrOutput) TerminateJobsOnUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeEnvironmentUpdatePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.TerminateJobsOnUpdate
	}).(pulumi.BoolPtrOutput)
}

type JobDefinitionConsumableResourceProperties struct {
	// The list of consumable resources required by a job.
	ConsumableResourceList []JobDefinitionConsumableResourceRequirement `pulumi:"consumableResourceList"`
}

// JobDefinitionConsumableResourcePropertiesInput is an input type that accepts JobDefinitionConsumableResourcePropertiesArgs and JobDefinitionConsumableResourcePropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionConsumableResourcePropertiesInput` via:
//
//	JobDefinitionConsumableResourcePropertiesArgs{...}
type JobDefinitionConsumableResourcePropertiesInput interface {
	pulumi.Input

	ToJobDefinitionConsumableResourcePropertiesOutput() JobDefinitionConsumableResourcePropertiesOutput
	ToJobDefinitionConsumableResourcePropertiesOutputWithContext(context.Context) JobDefinitionConsumableResourcePropertiesOutput
}

type JobDefinitionConsumableResourcePropertiesArgs struct {
	// The list of consumable resources required by a job.
	ConsumableResourceList JobDefinitionConsumableResourceRequirementArrayInput `pulumi:"consumableResourceList"`
}

func (JobDefinitionConsumableResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionConsumableResourceProperties)(nil)).Elem()
}

func (i JobDefinitionConsumableResourcePropertiesArgs) ToJobDefinitionConsumableResourcePropertiesOutput() JobDefinitionConsumableResourcePropertiesOutput {
	return i.ToJobDefinitionConsumableResourcePropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionConsumableResourcePropertiesArgs) ToJobDefinitionConsumableResourcePropertiesOutputWithContext(ctx context.Context) JobDefinitionConsumableResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionConsumableResourcePropertiesOutput)
}

func (i JobDefinitionConsumableResourcePropertiesArgs) ToJobDefinitionConsumableResourcePropertiesPtrOutput() JobDefinitionConsumableResourcePropertiesPtrOutput {
	return i.ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionConsumableResourcePropertiesArgs) ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionConsumableResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionConsumableResourcePropertiesOutput).ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionConsumableResourcePropertiesPtrInput is an input type that accepts JobDefinitionConsumableResourcePropertiesArgs, JobDefinitionConsumableResourcePropertiesPtr and JobDefinitionConsumableResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionConsumableResourcePropertiesPtrInput` via:
//
//	        JobDefinitionConsumableResourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionConsumableResourcePropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionConsumableResourcePropertiesPtrOutput() JobDefinitionConsumableResourcePropertiesPtrOutput
	ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(context.Context) JobDefinitionConsumableResourcePropertiesPtrOutput
}

type jobDefinitionConsumableResourcePropertiesPtrType JobDefinitionConsumableResourcePropertiesArgs

func JobDefinitionConsumableResourcePropertiesPtr(v *JobDefinitionConsumableResourcePropertiesArgs) JobDefinitionConsumableResourcePropertiesPtrInput {
	return (*jobDefinitionConsumableResourcePropertiesPtrType)(v)
}

func (*jobDefinitionConsumableResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionConsumableResourceProperties)(nil)).Elem()
}

func (i *jobDefinitionConsumableResourcePropertiesPtrType) ToJobDefinitionConsumableResourcePropertiesPtrOutput() JobDefinitionConsumableResourcePropertiesPtrOutput {
	return i.ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionConsumableResourcePropertiesPtrType) ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionConsumableResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionConsumableResourcePropertiesPtrOutput)
}

type JobDefinitionConsumableResourcePropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionConsumableResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionConsumableResourceProperties)(nil)).Elem()
}

func (o JobDefinitionConsumableResourcePropertiesOutput) ToJobDefinitionConsumableResourcePropertiesOutput() JobDefinitionConsumableResourcePropertiesOutput {
	return o
}

func (o JobDefinitionConsumableResourcePropertiesOutput) ToJobDefinitionConsumableResourcePropertiesOutputWithContext(ctx context.Context) JobDefinitionConsumableResourcePropertiesOutput {
	return o
}

func (o JobDefinitionConsumableResourcePropertiesOutput) ToJobDefinitionConsumableResourcePropertiesPtrOutput() JobDefinitionConsumableResourcePropertiesPtrOutput {
	return o.ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionConsumableResourcePropertiesOutput) ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionConsumableResourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionConsumableResourceProperties) *JobDefinitionConsumableResourceProperties {
		return &v
	}).(JobDefinitionConsumableResourcePropertiesPtrOutput)
}

// The list of consumable resources required by a job.
func (o JobDefinitionConsumableResourcePropertiesOutput) ConsumableResourceList() JobDefinitionConsumableResourceRequirementArrayOutput {
	return o.ApplyT(func(v JobDefinitionConsumableResourceProperties) []JobDefinitionConsumableResourceRequirement {
		return v.ConsumableResourceList
	}).(JobDefinitionConsumableResourceRequirementArrayOutput)
}

type JobDefinitionConsumableResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionConsumableResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionConsumableResourceProperties)(nil)).Elem()
}

func (o JobDefinitionConsumableResourcePropertiesPtrOutput) ToJobDefinitionConsumableResourcePropertiesPtrOutput() JobDefinitionConsumableResourcePropertiesPtrOutput {
	return o
}

func (o JobDefinitionConsumableResourcePropertiesPtrOutput) ToJobDefinitionConsumableResourcePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionConsumableResourcePropertiesPtrOutput {
	return o
}

func (o JobDefinitionConsumableResourcePropertiesPtrOutput) Elem() JobDefinitionConsumableResourcePropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionConsumableResourceProperties) JobDefinitionConsumableResourceProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionConsumableResourceProperties
		return ret
	}).(JobDefinitionConsumableResourcePropertiesOutput)
}

// The list of consumable resources required by a job.
func (o JobDefinitionConsumableResourcePropertiesPtrOutput) ConsumableResourceList() JobDefinitionConsumableResourceRequirementArrayOutput {
	return o.ApplyT(func(v *JobDefinitionConsumableResourceProperties) []JobDefinitionConsumableResourceRequirement {
		if v == nil {
			return nil
		}
		return v.ConsumableResourceList
	}).(JobDefinitionConsumableResourceRequirementArrayOutput)
}

type JobDefinitionConsumableResourceRequirement struct {
	// The ARN of the consumable resource the job definition should consume.
	ConsumableResource string `pulumi:"consumableResource"`
	// The quantity of the consumable resource that is needed.
	Quantity int `pulumi:"quantity"`
}

// JobDefinitionConsumableResourceRequirementInput is an input type that accepts JobDefinitionConsumableResourceRequirementArgs and JobDefinitionConsumableResourceRequirementOutput values.
// You can construct a concrete instance of `JobDefinitionConsumableResourceRequirementInput` via:
//
//	JobDefinitionConsumableResourceRequirementArgs{...}
type JobDefinitionConsumableResourceRequirementInput interface {
	pulumi.Input

	ToJobDefinitionConsumableResourceRequirementOutput() JobDefinitionConsumableResourceRequirementOutput
	ToJobDefinitionConsumableResourceRequirementOutputWithContext(context.Context) JobDefinitionConsumableResourceRequirementOutput
}

type JobDefinitionConsumableResourceRequirementArgs struct {
	// The ARN of the consumable resource the job definition should consume.
	ConsumableResource pulumi.StringInput `pulumi:"consumableResource"`
	// The quantity of the consumable resource that is needed.
	Quantity pulumi.IntInput `pulumi:"quantity"`
}

func (JobDefinitionConsumableResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionConsumableResourceRequirement)(nil)).Elem()
}

func (i JobDefinitionConsumableResourceRequirementArgs) ToJobDefinitionConsumableResourceRequirementOutput() JobDefinitionConsumableResourceRequirementOutput {
	return i.ToJobDefinitionConsumableResourceRequirementOutputWithContext(context.Background())
}

func (i JobDefinitionConsumableResourceRequirementArgs) ToJobDefinitionConsumableResourceRequirementOutputWithContext(ctx context.Context) JobDefinitionConsumableResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionConsumableResourceRequirementOutput)
}

// JobDefinitionConsumableResourceRequirementArrayInput is an input type that accepts JobDefinitionConsumableResourceRequirementArray and JobDefinitionConsumableResourceRequirementArrayOutput values.
// You can construct a concrete instance of `JobDefinitionConsumableResourceRequirementArrayInput` via:
//
//	JobDefinitionConsumableResourceRequirementArray{ JobDefinitionConsumableResourceRequirementArgs{...} }
type JobDefinitionConsumableResourceRequirementArrayInput interface {
	pulumi.Input

	ToJobDefinitionConsumableResourceRequirementArrayOutput() JobDefinitionConsumableResourceRequirementArrayOutput
	ToJobDefinitionConsumableResourceRequirementArrayOutputWithContext(context.Context) JobDefinitionConsumableResourceRequirementArrayOutput
}

type JobDefinitionConsumableResourceRequirementArray []JobDefinitionConsumableResourceRequirementInput

func (JobDefinitionConsumableResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionConsumableResourceRequirement)(nil)).Elem()
}

func (i JobDefinitionConsumableResourceRequirementArray) ToJobDefinitionConsumableResourceRequirementArrayOutput() JobDefinitionConsumableResourceRequirementArrayOutput {
	return i.ToJobDefinitionConsumableResourceRequirementArrayOutputWithContext(context.Background())
}

func (i JobDefinitionConsumableResourceRequirementArray) ToJobDefinitionConsumableResourceRequirementArrayOutputWithContext(ctx context.Context) JobDefinitionConsumableResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionConsumableResourceRequirementArrayOutput)
}

type JobDefinitionConsumableResourceRequirementOutput struct{ *pulumi.OutputState }

func (JobDefinitionConsumableResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionConsumableResourceRequirement)(nil)).Elem()
}

func (o JobDefinitionConsumableResourceRequirementOutput) ToJobDefinitionConsumableResourceRequirementOutput() JobDefinitionConsumableResourceRequirementOutput {
	return o
}

func (o JobDefinitionConsumableResourceRequirementOutput) ToJobDefinitionConsumableResourceRequirementOutputWithContext(ctx context.Context) JobDefinitionConsumableResourceRequirementOutput {
	return o
}

// The ARN of the consumable resource the job definition should consume.
func (o JobDefinitionConsumableResourceRequirementOutput) ConsumableResource() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionConsumableResourceRequirement) string { return v.ConsumableResource }).(pulumi.StringOutput)
}

// The quantity of the consumable resource that is needed.
func (o JobDefinitionConsumableResourceRequirementOutput) Quantity() pulumi.IntOutput {
	return o.ApplyT(func(v JobDefinitionConsumableResourceRequirement) int { return v.Quantity }).(pulumi.IntOutput)
}

type JobDefinitionConsumableResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionConsumableResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionConsumableResourceRequirement)(nil)).Elem()
}

func (o JobDefinitionConsumableResourceRequirementArrayOutput) ToJobDefinitionConsumableResourceRequirementArrayOutput() JobDefinitionConsumableResourceRequirementArrayOutput {
	return o
}

func (o JobDefinitionConsumableResourceRequirementArrayOutput) ToJobDefinitionConsumableResourceRequirementArrayOutputWithContext(ctx context.Context) JobDefinitionConsumableResourceRequirementArrayOutput {
	return o
}

func (o JobDefinitionConsumableResourceRequirementArrayOutput) Index(i pulumi.IntInput) JobDefinitionConsumableResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionConsumableResourceRequirement {
		return vs[0].([]JobDefinitionConsumableResourceRequirement)[vs[1].(int)]
	}).(JobDefinitionConsumableResourceRequirementOutput)
}

type JobDefinitionContainerProperties struct {
	// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
	Command []string `pulumi:"command"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
	Environment []JobDefinitionEnvironment `pulumi:"environment"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
	EphemeralStorage *JobDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
	FargatePlatformConfiguration *JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties `pulumi:"fargatePlatformConfiguration"`
	// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
	//
	// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
	// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
	// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
	// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
	// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
	Image string `pulumi:"image"`
	// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
	JobRoleArn *string `pulumi:"jobRoleArn"`
	// Linux-specific modifications that are applied to the container, such as details for device mappings.
	LinuxParameters *JobDefinitionLinuxParameters `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//
	// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
	//
	// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	//
	// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
	LogConfiguration *JobDefinitionLogConfiguration `pulumi:"logConfiguration"`
	// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
	Memory *int `pulumi:"memory"`
	// The mount points for data volumes in your container. This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--volume` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	MountPoints []JobDefinitionMountPoint `pulumi:"mountPoints"`
	// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
	NetworkConfiguration *JobDefinitionNetworkConfiguration `pulumi:"networkConfiguration"`
	// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
	Privileged *bool `pulumi:"privileged"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
	ReadonlyRootFilesystem *bool `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials *JobDefinitionRepositoryCredentials `pulumi:"repositoryCredentials"`
	// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
	ResourceRequirements []JobDefinitionResourceRequirement `pulumi:"resourceRequirements"`
	// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
	RuntimePlatform *JobDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
	Secrets []JobDefinitionSecret `pulumi:"secrets"`
	// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
	Ulimits []JobDefinitionUlimit `pulumi:"ulimits"`
	// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	User *string `pulumi:"user"`
	// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
	//
	// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
	Vcpus *int `pulumi:"vcpus"`
	// A list of data volumes used in a job.
	Volumes []JobDefinitionVolume `pulumi:"volumes"`
}

// JobDefinitionContainerPropertiesInput is an input type that accepts JobDefinitionContainerPropertiesArgs and JobDefinitionContainerPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionContainerPropertiesInput` via:
//
//	JobDefinitionContainerPropertiesArgs{...}
type JobDefinitionContainerPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionContainerPropertiesOutput() JobDefinitionContainerPropertiesOutput
	ToJobDefinitionContainerPropertiesOutputWithContext(context.Context) JobDefinitionContainerPropertiesOutput
}

type JobDefinitionContainerPropertiesArgs struct {
	// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand pulumi.BoolPtrInput `pulumi:"enableExecuteCommand"`
	// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
	Environment JobDefinitionEnvironmentArrayInput `pulumi:"environment"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
	EphemeralStorage JobDefinitionEphemeralStoragePtrInput `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn pulumi.StringPtrInput `pulumi:"executionRoleArn"`
	// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
	FargatePlatformConfiguration JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrInput `pulumi:"fargatePlatformConfiguration"`
	// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
	//
	// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
	// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
	// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
	// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
	// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
	Image pulumi.StringInput `pulumi:"image"`
	// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
	JobRoleArn pulumi.StringPtrInput `pulumi:"jobRoleArn"`
	// Linux-specific modifications that are applied to the container, such as details for device mappings.
	LinuxParameters JobDefinitionLinuxParametersPtrInput `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//
	// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
	//
	// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	//
	// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
	LogConfiguration JobDefinitionLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The mount points for data volumes in your container. This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--volume` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	MountPoints JobDefinitionMountPointArrayInput `pulumi:"mountPoints"`
	// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
	NetworkConfiguration JobDefinitionNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
	ReadonlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials JobDefinitionRepositoryCredentialsPtrInput `pulumi:"repositoryCredentials"`
	// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
	ResourceRequirements JobDefinitionResourceRequirementArrayInput `pulumi:"resourceRequirements"`
	// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
	RuntimePlatform JobDefinitionRuntimePlatformPtrInput `pulumi:"runtimePlatform"`
	// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
	Secrets JobDefinitionSecretArrayInput `pulumi:"secrets"`
	// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
	Ulimits JobDefinitionUlimitArrayInput `pulumi:"ulimits"`
	// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	User pulumi.StringPtrInput `pulumi:"user"`
	// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
	//
	// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
	Vcpus pulumi.IntPtrInput `pulumi:"vcpus"`
	// A list of data volumes used in a job.
	Volumes JobDefinitionVolumeArrayInput `pulumi:"volumes"`
}

func (JobDefinitionContainerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionContainerProperties)(nil)).Elem()
}

func (i JobDefinitionContainerPropertiesArgs) ToJobDefinitionContainerPropertiesOutput() JobDefinitionContainerPropertiesOutput {
	return i.ToJobDefinitionContainerPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionContainerPropertiesArgs) ToJobDefinitionContainerPropertiesOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionContainerPropertiesOutput)
}

func (i JobDefinitionContainerPropertiesArgs) ToJobDefinitionContainerPropertiesPtrOutput() JobDefinitionContainerPropertiesPtrOutput {
	return i.ToJobDefinitionContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionContainerPropertiesArgs) ToJobDefinitionContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionContainerPropertiesOutput).ToJobDefinitionContainerPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionContainerPropertiesPtrInput is an input type that accepts JobDefinitionContainerPropertiesArgs, JobDefinitionContainerPropertiesPtr and JobDefinitionContainerPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionContainerPropertiesPtrInput` via:
//
//	        JobDefinitionContainerPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionContainerPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionContainerPropertiesPtrOutput() JobDefinitionContainerPropertiesPtrOutput
	ToJobDefinitionContainerPropertiesPtrOutputWithContext(context.Context) JobDefinitionContainerPropertiesPtrOutput
}

type jobDefinitionContainerPropertiesPtrType JobDefinitionContainerPropertiesArgs

func JobDefinitionContainerPropertiesPtr(v *JobDefinitionContainerPropertiesArgs) JobDefinitionContainerPropertiesPtrInput {
	return (*jobDefinitionContainerPropertiesPtrType)(v)
}

func (*jobDefinitionContainerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionContainerProperties)(nil)).Elem()
}

func (i *jobDefinitionContainerPropertiesPtrType) ToJobDefinitionContainerPropertiesPtrOutput() JobDefinitionContainerPropertiesPtrOutput {
	return i.ToJobDefinitionContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionContainerPropertiesPtrType) ToJobDefinitionContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionContainerPropertiesPtrOutput)
}

type JobDefinitionContainerPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionContainerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionContainerProperties)(nil)).Elem()
}

func (o JobDefinitionContainerPropertiesOutput) ToJobDefinitionContainerPropertiesOutput() JobDefinitionContainerPropertiesOutput {
	return o
}

func (o JobDefinitionContainerPropertiesOutput) ToJobDefinitionContainerPropertiesOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesOutput {
	return o
}

func (o JobDefinitionContainerPropertiesOutput) ToJobDefinitionContainerPropertiesPtrOutput() JobDefinitionContainerPropertiesPtrOutput {
	return o.ToJobDefinitionContainerPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionContainerPropertiesOutput) ToJobDefinitionContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionContainerProperties) *JobDefinitionContainerProperties {
		return &v
	}).(JobDefinitionContainerPropertiesPtrOutput)
}

// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
func (o JobDefinitionContainerPropertiesOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
func (o JobDefinitionContainerPropertiesOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
func (o JobDefinitionContainerPropertiesOutput) Environment() JobDefinitionEnvironmentArrayOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) []JobDefinitionEnvironment { return v.Environment }).(JobDefinitionEnvironmentArrayOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
func (o JobDefinitionContainerPropertiesOutput) EphemeralStorage() JobDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *JobDefinitionEphemeralStorage { return v.EphemeralStorage }).(JobDefinitionEphemeralStoragePtrOutput)
}

// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
func (o JobDefinitionContainerPropertiesOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *string { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
func (o JobDefinitionContainerPropertiesOutput) FargatePlatformConfiguration() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties {
		return v.FargatePlatformConfiguration
	}).(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput)
}

// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
//
// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
func (o JobDefinitionContainerPropertiesOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) string { return v.Image }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionContainerPropertiesOutput) JobRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *string { return v.JobRoleArn }).(pulumi.StringPtrOutput)
}

// Linux-specific modifications that are applied to the container, such as details for device mappings.
func (o JobDefinitionContainerPropertiesOutput) LinuxParameters() JobDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *JobDefinitionLinuxParameters { return v.LinuxParameters }).(JobDefinitionLinuxParametersPtrOutput)
}

// The log configuration specification for the container.
//
// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
//
// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
//
// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionContainerPropertiesOutput) LogConfiguration() JobDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *JobDefinitionLogConfiguration { return v.LogConfiguration }).(JobDefinitionLogConfigurationPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
func (o JobDefinitionContainerPropertiesOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The mount points for data volumes in your container. This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--volume` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
func (o JobDefinitionContainerPropertiesOutput) MountPoints() JobDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) []JobDefinitionMountPoint { return v.MountPoints }).(JobDefinitionMountPointArrayOutput)
}

// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
func (o JobDefinitionContainerPropertiesOutput) NetworkConfiguration() JobDefinitionNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *JobDefinitionNetworkConfiguration {
		return v.NetworkConfiguration
	}).(JobDefinitionNetworkConfigurationPtrOutput)
}

// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
func (o JobDefinitionContainerPropertiesOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
func (o JobDefinitionContainerPropertiesOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *bool { return v.ReadonlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The private repository authentication credentials to use.
func (o JobDefinitionContainerPropertiesOutput) RepositoryCredentials() JobDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *JobDefinitionRepositoryCredentials {
		return v.RepositoryCredentials
	}).(JobDefinitionRepositoryCredentialsPtrOutput)
}

// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
func (o JobDefinitionContainerPropertiesOutput) ResourceRequirements() JobDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) []JobDefinitionResourceRequirement {
		return v.ResourceRequirements
	}).(JobDefinitionResourceRequirementArrayOutput)
}

// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
func (o JobDefinitionContainerPropertiesOutput) RuntimePlatform() JobDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *JobDefinitionRuntimePlatform { return v.RuntimePlatform }).(JobDefinitionRuntimePlatformPtrOutput)
}

// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
func (o JobDefinitionContainerPropertiesOutput) Secrets() JobDefinitionSecretArrayOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) []JobDefinitionSecret { return v.Secrets }).(JobDefinitionSecretArrayOutput)
}

// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
func (o JobDefinitionContainerPropertiesOutput) Ulimits() JobDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) []JobDefinitionUlimit { return v.Ulimits }).(JobDefinitionUlimitArrayOutput)
}

// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
func (o JobDefinitionContainerPropertiesOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *string { return v.User }).(pulumi.StringPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
//
// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
func (o JobDefinitionContainerPropertiesOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

// A list of data volumes used in a job.
func (o JobDefinitionContainerPropertiesOutput) Volumes() JobDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v JobDefinitionContainerProperties) []JobDefinitionVolume { return v.Volumes }).(JobDefinitionVolumeArrayOutput)
}

type JobDefinitionContainerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionContainerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionContainerProperties)(nil)).Elem()
}

func (o JobDefinitionContainerPropertiesPtrOutput) ToJobDefinitionContainerPropertiesPtrOutput() JobDefinitionContainerPropertiesPtrOutput {
	return o
}

func (o JobDefinitionContainerPropertiesPtrOutput) ToJobDefinitionContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesPtrOutput {
	return o
}

func (o JobDefinitionContainerPropertiesPtrOutput) Elem() JobDefinitionContainerPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) JobDefinitionContainerProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionContainerProperties
		return ret
	}).(JobDefinitionContainerPropertiesOutput)
}

// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
func (o JobDefinitionContainerPropertiesPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
func (o JobDefinitionContainerPropertiesPtrOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExecuteCommand
	}).(pulumi.BoolPtrOutput)
}

// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
func (o JobDefinitionContainerPropertiesPtrOutput) Environment() JobDefinitionEnvironmentArrayOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) []JobDefinitionEnvironment {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(JobDefinitionEnvironmentArrayOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
func (o JobDefinitionContainerPropertiesPtrOutput) EphemeralStorage() JobDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *JobDefinitionEphemeralStorage {
		if v == nil {
			return nil
		}
		return v.EphemeralStorage
	}).(JobDefinitionEphemeralStoragePtrOutput)
}

// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
func (o JobDefinitionContainerPropertiesPtrOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionRoleArn
	}).(pulumi.StringPtrOutput)
}

// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
func (o JobDefinitionContainerPropertiesPtrOutput) FargatePlatformConfiguration() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties {
		if v == nil {
			return nil
		}
		return v.FargatePlatformConfiguration
	}).(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput)
}

// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
//
// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
func (o JobDefinitionContainerPropertiesPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionContainerPropertiesPtrOutput) JobRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *string {
		if v == nil {
			return nil
		}
		return v.JobRoleArn
	}).(pulumi.StringPtrOutput)
}

// Linux-specific modifications that are applied to the container, such as details for device mappings.
func (o JobDefinitionContainerPropertiesPtrOutput) LinuxParameters() JobDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *JobDefinitionLinuxParameters {
		if v == nil {
			return nil
		}
		return v.LinuxParameters
	}).(JobDefinitionLinuxParametersPtrOutput)
}

// The log configuration specification for the container.
//
// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
//
// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
//
// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionContainerPropertiesPtrOutput) LogConfiguration() JobDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *JobDefinitionLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(JobDefinitionLogConfigurationPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
func (o JobDefinitionContainerPropertiesPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

// The mount points for data volumes in your container. This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--volume` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
func (o JobDefinitionContainerPropertiesPtrOutput) MountPoints() JobDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) []JobDefinitionMountPoint {
		if v == nil {
			return nil
		}
		return v.MountPoints
	}).(JobDefinitionMountPointArrayOutput)
}

// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
func (o JobDefinitionContainerPropertiesPtrOutput) NetworkConfiguration() JobDefinitionNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *JobDefinitionNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(JobDefinitionNetworkConfigurationPtrOutput)
}

// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
func (o JobDefinitionContainerPropertiesPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
func (o JobDefinitionContainerPropertiesPtrOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ReadonlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The private repository authentication credentials to use.
func (o JobDefinitionContainerPropertiesPtrOutput) RepositoryCredentials() JobDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *JobDefinitionRepositoryCredentials {
		if v == nil {
			return nil
		}
		return v.RepositoryCredentials
	}).(JobDefinitionRepositoryCredentialsPtrOutput)
}

// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
func (o JobDefinitionContainerPropertiesPtrOutput) ResourceRequirements() JobDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) []JobDefinitionResourceRequirement {
		if v == nil {
			return nil
		}
		return v.ResourceRequirements
	}).(JobDefinitionResourceRequirementArrayOutput)
}

// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
func (o JobDefinitionContainerPropertiesPtrOutput) RuntimePlatform() JobDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *JobDefinitionRuntimePlatform {
		if v == nil {
			return nil
		}
		return v.RuntimePlatform
	}).(JobDefinitionRuntimePlatformPtrOutput)
}

// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
func (o JobDefinitionContainerPropertiesPtrOutput) Secrets() JobDefinitionSecretArrayOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) []JobDefinitionSecret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(JobDefinitionSecretArrayOutput)
}

// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
func (o JobDefinitionContainerPropertiesPtrOutput) Ulimits() JobDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) []JobDefinitionUlimit {
		if v == nil {
			return nil
		}
		return v.Ulimits
	}).(JobDefinitionUlimitArrayOutput)
}

// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
func (o JobDefinitionContainerPropertiesPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
//
// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
func (o JobDefinitionContainerPropertiesPtrOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) *int {
		if v == nil {
			return nil
		}
		return v.Vcpus
	}).(pulumi.IntPtrOutput)
}

// A list of data volumes used in a job.
func (o JobDefinitionContainerPropertiesPtrOutput) Volumes() JobDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v *JobDefinitionContainerProperties) []JobDefinitionVolume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(JobDefinitionVolumeArrayOutput)
}

// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
type JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties struct {
	PlatformVersion *string `pulumi:"platformVersion"`
}

// JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesInput is an input type that accepts JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs and JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesInput` via:
//
//	JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs{...}
type JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput
	ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutputWithContext(context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput
}

// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
type JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs struct {
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
}

func (JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties)(nil)).Elem()
}

func (i JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput {
	return i.ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput)
}

func (i JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return i.ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput).ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrInput is an input type that accepts JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs, JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtr and JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrInput` via:
//
//	        JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput
	ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput
}

type jobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrType JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs

func JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtr(v *JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrInput {
	return (*jobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrType)(v)
}

func (*jobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties)(nil)).Elem()
}

func (i *jobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrType) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return i.ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrType) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput)
}

// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
type JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties)(nil)).Elem()
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput {
	return o
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput {
	return o
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return o.ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties) *JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties {
		return &v
	}).(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput)
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties) *string {
		return v.PlatformVersion
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties)(nil)).Elem()
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return o
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput) ToJobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput {
	return o
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput) Elem() JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties) JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties
		return ret
	}).(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput)
}

func (o JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionContainerPropertiesFargatePlatformConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.PlatformVersion
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionDevice struct {
	// The path inside the container that's used to expose the host device. By default, the `hostPath` value is used.
	ContainerPath *string `pulumi:"containerPath"`
	// The path for the device on the host container instance.
	HostPath *string `pulumi:"hostPath"`
	// The explicit permissions to provide to the container for the device. By default, the container has permissions for `read` , `write` , and `mknod` for the device.
	Permissions []string `pulumi:"permissions"`
}

// JobDefinitionDeviceInput is an input type that accepts JobDefinitionDeviceArgs and JobDefinitionDeviceOutput values.
// You can construct a concrete instance of `JobDefinitionDeviceInput` via:
//
//	JobDefinitionDeviceArgs{...}
type JobDefinitionDeviceInput interface {
	pulumi.Input

	ToJobDefinitionDeviceOutput() JobDefinitionDeviceOutput
	ToJobDefinitionDeviceOutputWithContext(context.Context) JobDefinitionDeviceOutput
}

type JobDefinitionDeviceArgs struct {
	// The path inside the container that's used to expose the host device. By default, the `hostPath` value is used.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// The path for the device on the host container instance.
	HostPath pulumi.StringPtrInput `pulumi:"hostPath"`
	// The explicit permissions to provide to the container for the device. By default, the container has permissions for `read` , `write` , and `mknod` for the device.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (JobDefinitionDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionDevice)(nil)).Elem()
}

func (i JobDefinitionDeviceArgs) ToJobDefinitionDeviceOutput() JobDefinitionDeviceOutput {
	return i.ToJobDefinitionDeviceOutputWithContext(context.Background())
}

func (i JobDefinitionDeviceArgs) ToJobDefinitionDeviceOutputWithContext(ctx context.Context) JobDefinitionDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionDeviceOutput)
}

// JobDefinitionDeviceArrayInput is an input type that accepts JobDefinitionDeviceArray and JobDefinitionDeviceArrayOutput values.
// You can construct a concrete instance of `JobDefinitionDeviceArrayInput` via:
//
//	JobDefinitionDeviceArray{ JobDefinitionDeviceArgs{...} }
type JobDefinitionDeviceArrayInput interface {
	pulumi.Input

	ToJobDefinitionDeviceArrayOutput() JobDefinitionDeviceArrayOutput
	ToJobDefinitionDeviceArrayOutputWithContext(context.Context) JobDefinitionDeviceArrayOutput
}

type JobDefinitionDeviceArray []JobDefinitionDeviceInput

func (JobDefinitionDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionDevice)(nil)).Elem()
}

func (i JobDefinitionDeviceArray) ToJobDefinitionDeviceArrayOutput() JobDefinitionDeviceArrayOutput {
	return i.ToJobDefinitionDeviceArrayOutputWithContext(context.Background())
}

func (i JobDefinitionDeviceArray) ToJobDefinitionDeviceArrayOutputWithContext(ctx context.Context) JobDefinitionDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionDeviceArrayOutput)
}

type JobDefinitionDeviceOutput struct{ *pulumi.OutputState }

func (JobDefinitionDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionDevice)(nil)).Elem()
}

func (o JobDefinitionDeviceOutput) ToJobDefinitionDeviceOutput() JobDefinitionDeviceOutput {
	return o
}

func (o JobDefinitionDeviceOutput) ToJobDefinitionDeviceOutputWithContext(ctx context.Context) JobDefinitionDeviceOutput {
	return o
}

// The path inside the container that's used to expose the host device. By default, the `hostPath` value is used.
func (o JobDefinitionDeviceOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionDevice) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// The path for the device on the host container instance.
func (o JobDefinitionDeviceOutput) HostPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionDevice) *string { return v.HostPath }).(pulumi.StringPtrOutput)
}

// The explicit permissions to provide to the container for the device. By default, the container has permissions for `read` , `write` , and `mknod` for the device.
func (o JobDefinitionDeviceOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionDevice) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type JobDefinitionDeviceArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionDevice)(nil)).Elem()
}

func (o JobDefinitionDeviceArrayOutput) ToJobDefinitionDeviceArrayOutput() JobDefinitionDeviceArrayOutput {
	return o
}

func (o JobDefinitionDeviceArrayOutput) ToJobDefinitionDeviceArrayOutputWithContext(ctx context.Context) JobDefinitionDeviceArrayOutput {
	return o
}

func (o JobDefinitionDeviceArrayOutput) Index(i pulumi.IntInput) JobDefinitionDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionDevice {
		return vs[0].([]JobDefinitionDevice)[vs[1].(int)]
	}).(JobDefinitionDeviceOutput)
}

type JobDefinitionEcsProperties struct {
	// An object that contains the properties for the Amazon ECS task definition of a job.
	//
	// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
	TaskProperties []JobDefinitionEcsTaskProperties `pulumi:"taskProperties"`
}

// JobDefinitionEcsPropertiesInput is an input type that accepts JobDefinitionEcsPropertiesArgs and JobDefinitionEcsPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionEcsPropertiesInput` via:
//
//	JobDefinitionEcsPropertiesArgs{...}
type JobDefinitionEcsPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionEcsPropertiesOutput() JobDefinitionEcsPropertiesOutput
	ToJobDefinitionEcsPropertiesOutputWithContext(context.Context) JobDefinitionEcsPropertiesOutput
}

type JobDefinitionEcsPropertiesArgs struct {
	// An object that contains the properties for the Amazon ECS task definition of a job.
	//
	// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
	TaskProperties JobDefinitionEcsTaskPropertiesArrayInput `pulumi:"taskProperties"`
}

func (JobDefinitionEcsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEcsProperties)(nil)).Elem()
}

func (i JobDefinitionEcsPropertiesArgs) ToJobDefinitionEcsPropertiesOutput() JobDefinitionEcsPropertiesOutput {
	return i.ToJobDefinitionEcsPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionEcsPropertiesArgs) ToJobDefinitionEcsPropertiesOutputWithContext(ctx context.Context) JobDefinitionEcsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEcsPropertiesOutput)
}

func (i JobDefinitionEcsPropertiesArgs) ToJobDefinitionEcsPropertiesPtrOutput() JobDefinitionEcsPropertiesPtrOutput {
	return i.ToJobDefinitionEcsPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEcsPropertiesArgs) ToJobDefinitionEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEcsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEcsPropertiesOutput).ToJobDefinitionEcsPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionEcsPropertiesPtrInput is an input type that accepts JobDefinitionEcsPropertiesArgs, JobDefinitionEcsPropertiesPtr and JobDefinitionEcsPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEcsPropertiesPtrInput` via:
//
//	        JobDefinitionEcsPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEcsPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionEcsPropertiesPtrOutput() JobDefinitionEcsPropertiesPtrOutput
	ToJobDefinitionEcsPropertiesPtrOutputWithContext(context.Context) JobDefinitionEcsPropertiesPtrOutput
}

type jobDefinitionEcsPropertiesPtrType JobDefinitionEcsPropertiesArgs

func JobDefinitionEcsPropertiesPtr(v *JobDefinitionEcsPropertiesArgs) JobDefinitionEcsPropertiesPtrInput {
	return (*jobDefinitionEcsPropertiesPtrType)(v)
}

func (*jobDefinitionEcsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEcsProperties)(nil)).Elem()
}

func (i *jobDefinitionEcsPropertiesPtrType) ToJobDefinitionEcsPropertiesPtrOutput() JobDefinitionEcsPropertiesPtrOutput {
	return i.ToJobDefinitionEcsPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEcsPropertiesPtrType) ToJobDefinitionEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEcsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEcsPropertiesPtrOutput)
}

type JobDefinitionEcsPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionEcsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEcsProperties)(nil)).Elem()
}

func (o JobDefinitionEcsPropertiesOutput) ToJobDefinitionEcsPropertiesOutput() JobDefinitionEcsPropertiesOutput {
	return o
}

func (o JobDefinitionEcsPropertiesOutput) ToJobDefinitionEcsPropertiesOutputWithContext(ctx context.Context) JobDefinitionEcsPropertiesOutput {
	return o
}

func (o JobDefinitionEcsPropertiesOutput) ToJobDefinitionEcsPropertiesPtrOutput() JobDefinitionEcsPropertiesPtrOutput {
	return o.ToJobDefinitionEcsPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEcsPropertiesOutput) ToJobDefinitionEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEcsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEcsProperties) *JobDefinitionEcsProperties {
		return &v
	}).(JobDefinitionEcsPropertiesPtrOutput)
}

// An object that contains the properties for the Amazon ECS task definition of a job.
//
// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
func (o JobDefinitionEcsPropertiesOutput) TaskProperties() JobDefinitionEcsTaskPropertiesArrayOutput {
	return o.ApplyT(func(v JobDefinitionEcsProperties) []JobDefinitionEcsTaskProperties { return v.TaskProperties }).(JobDefinitionEcsTaskPropertiesArrayOutput)
}

type JobDefinitionEcsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEcsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEcsProperties)(nil)).Elem()
}

func (o JobDefinitionEcsPropertiesPtrOutput) ToJobDefinitionEcsPropertiesPtrOutput() JobDefinitionEcsPropertiesPtrOutput {
	return o
}

func (o JobDefinitionEcsPropertiesPtrOutput) ToJobDefinitionEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEcsPropertiesPtrOutput {
	return o
}

func (o JobDefinitionEcsPropertiesPtrOutput) Elem() JobDefinitionEcsPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionEcsProperties) JobDefinitionEcsProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEcsProperties
		return ret
	}).(JobDefinitionEcsPropertiesOutput)
}

// An object that contains the properties for the Amazon ECS task definition of a job.
//
// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
func (o JobDefinitionEcsPropertiesPtrOutput) TaskProperties() JobDefinitionEcsTaskPropertiesArrayOutput {
	return o.ApplyT(func(v *JobDefinitionEcsProperties) []JobDefinitionEcsTaskProperties {
		if v == nil {
			return nil
		}
		return v.TaskProperties
	}).(JobDefinitionEcsTaskPropertiesArrayOutput)
}

type JobDefinitionEcsTaskProperties struct {
	// This object is a list of containers.
	Containers []JobDefinitionTaskContainerProperties `pulumi:"containers"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
	EphemeralStorage *JobDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
	//
	// If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified `task` share the same IPC resources.
	//
	// If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
	//
	// If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
	IpcMode *string `pulumi:"ipcMode"`
	// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
	NetworkConfiguration *JobDefinitionNetworkConfiguration `pulumi:"networkConfiguration"`
	// The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
	//
	// If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified task share the same process namespace.
	//
	// If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
	PidMode *string `pulumi:"pidMode"`
	// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the `LATEST` platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see [AWS Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
	PlatformVersion *string `pulumi:"platformVersion"`
	// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
	RuntimePlatform *JobDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
	//
	// > This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
	TaskRoleArn *string `pulumi:"taskRoleArn"`
	// A list of volumes that are associated with the job.
	Volumes []JobDefinitionVolume `pulumi:"volumes"`
}

// JobDefinitionEcsTaskPropertiesInput is an input type that accepts JobDefinitionEcsTaskPropertiesArgs and JobDefinitionEcsTaskPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionEcsTaskPropertiesInput` via:
//
//	JobDefinitionEcsTaskPropertiesArgs{...}
type JobDefinitionEcsTaskPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionEcsTaskPropertiesOutput() JobDefinitionEcsTaskPropertiesOutput
	ToJobDefinitionEcsTaskPropertiesOutputWithContext(context.Context) JobDefinitionEcsTaskPropertiesOutput
}

type JobDefinitionEcsTaskPropertiesArgs struct {
	// This object is a list of containers.
	Containers JobDefinitionTaskContainerPropertiesArrayInput `pulumi:"containers"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand pulumi.BoolPtrInput `pulumi:"enableExecuteCommand"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
	EphemeralStorage JobDefinitionEphemeralStoragePtrInput `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn pulumi.StringPtrInput `pulumi:"executionRoleArn"`
	// The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
	//
	// If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified `task` share the same IPC resources.
	//
	// If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
	//
	// If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
	IpcMode pulumi.StringPtrInput `pulumi:"ipcMode"`
	// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
	NetworkConfiguration JobDefinitionNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
	//
	// If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified task share the same process namespace.
	//
	// If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
	PidMode pulumi.StringPtrInput `pulumi:"pidMode"`
	// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the `LATEST` platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see [AWS Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
	PlatformVersion pulumi.StringPtrInput `pulumi:"platformVersion"`
	// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
	RuntimePlatform JobDefinitionRuntimePlatformPtrInput `pulumi:"runtimePlatform"`
	// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
	//
	// > This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
	TaskRoleArn pulumi.StringPtrInput `pulumi:"taskRoleArn"`
	// A list of volumes that are associated with the job.
	Volumes JobDefinitionVolumeArrayInput `pulumi:"volumes"`
}

func (JobDefinitionEcsTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEcsTaskProperties)(nil)).Elem()
}

func (i JobDefinitionEcsTaskPropertiesArgs) ToJobDefinitionEcsTaskPropertiesOutput() JobDefinitionEcsTaskPropertiesOutput {
	return i.ToJobDefinitionEcsTaskPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionEcsTaskPropertiesArgs) ToJobDefinitionEcsTaskPropertiesOutputWithContext(ctx context.Context) JobDefinitionEcsTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEcsTaskPropertiesOutput)
}

// JobDefinitionEcsTaskPropertiesArrayInput is an input type that accepts JobDefinitionEcsTaskPropertiesArray and JobDefinitionEcsTaskPropertiesArrayOutput values.
// You can construct a concrete instance of `JobDefinitionEcsTaskPropertiesArrayInput` via:
//
//	JobDefinitionEcsTaskPropertiesArray{ JobDefinitionEcsTaskPropertiesArgs{...} }
type JobDefinitionEcsTaskPropertiesArrayInput interface {
	pulumi.Input

	ToJobDefinitionEcsTaskPropertiesArrayOutput() JobDefinitionEcsTaskPropertiesArrayOutput
	ToJobDefinitionEcsTaskPropertiesArrayOutputWithContext(context.Context) JobDefinitionEcsTaskPropertiesArrayOutput
}

type JobDefinitionEcsTaskPropertiesArray []JobDefinitionEcsTaskPropertiesInput

func (JobDefinitionEcsTaskPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEcsTaskProperties)(nil)).Elem()
}

func (i JobDefinitionEcsTaskPropertiesArray) ToJobDefinitionEcsTaskPropertiesArrayOutput() JobDefinitionEcsTaskPropertiesArrayOutput {
	return i.ToJobDefinitionEcsTaskPropertiesArrayOutputWithContext(context.Background())
}

func (i JobDefinitionEcsTaskPropertiesArray) ToJobDefinitionEcsTaskPropertiesArrayOutputWithContext(ctx context.Context) JobDefinitionEcsTaskPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEcsTaskPropertiesArrayOutput)
}

type JobDefinitionEcsTaskPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionEcsTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEcsTaskProperties)(nil)).Elem()
}

func (o JobDefinitionEcsTaskPropertiesOutput) ToJobDefinitionEcsTaskPropertiesOutput() JobDefinitionEcsTaskPropertiesOutput {
	return o
}

func (o JobDefinitionEcsTaskPropertiesOutput) ToJobDefinitionEcsTaskPropertiesOutputWithContext(ctx context.Context) JobDefinitionEcsTaskPropertiesOutput {
	return o
}

// This object is a list of containers.
func (o JobDefinitionEcsTaskPropertiesOutput) Containers() JobDefinitionTaskContainerPropertiesArrayOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) []JobDefinitionTaskContainerProperties { return v.Containers }).(JobDefinitionTaskContainerPropertiesArrayOutput)
}

// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
func (o JobDefinitionEcsTaskPropertiesOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
func (o JobDefinitionEcsTaskPropertiesOutput) EphemeralStorage() JobDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *JobDefinitionEphemeralStorage { return v.EphemeralStorage }).(JobDefinitionEphemeralStoragePtrOutput)
}

// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
func (o JobDefinitionEcsTaskPropertiesOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *string { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
//
// If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
//
// If `task` is specified, all containers within the specified `task` share the same IPC resources.
//
// If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
//
// If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
func (o JobDefinitionEcsTaskPropertiesOutput) IpcMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *string { return v.IpcMode }).(pulumi.StringPtrOutput)
}

// The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
func (o JobDefinitionEcsTaskPropertiesOutput) NetworkConfiguration() JobDefinitionNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *JobDefinitionNetworkConfiguration {
		return v.NetworkConfiguration
	}).(JobDefinitionNetworkConfigurationPtrOutput)
}

// The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
//
// If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
//
// If `task` is specified, all containers within the specified task share the same process namespace.
//
// If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
func (o JobDefinitionEcsTaskPropertiesOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *string { return v.PidMode }).(pulumi.StringPtrOutput)
}

// The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the `LATEST` platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see [AWS Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionEcsTaskPropertiesOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
func (o JobDefinitionEcsTaskPropertiesOutput) RuntimePlatform() JobDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *JobDefinitionRuntimePlatform { return v.RuntimePlatform }).(JobDefinitionRuntimePlatformPtrOutput)
}

// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
//
// > This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
func (o JobDefinitionEcsTaskPropertiesOutput) TaskRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) *string { return v.TaskRoleArn }).(pulumi.StringPtrOutput)
}

// A list of volumes that are associated with the job.
func (o JobDefinitionEcsTaskPropertiesOutput) Volumes() JobDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v JobDefinitionEcsTaskProperties) []JobDefinitionVolume { return v.Volumes }).(JobDefinitionVolumeArrayOutput)
}

type JobDefinitionEcsTaskPropertiesArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionEcsTaskPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEcsTaskProperties)(nil)).Elem()
}

func (o JobDefinitionEcsTaskPropertiesArrayOutput) ToJobDefinitionEcsTaskPropertiesArrayOutput() JobDefinitionEcsTaskPropertiesArrayOutput {
	return o
}

func (o JobDefinitionEcsTaskPropertiesArrayOutput) ToJobDefinitionEcsTaskPropertiesArrayOutputWithContext(ctx context.Context) JobDefinitionEcsTaskPropertiesArrayOutput {
	return o
}

func (o JobDefinitionEcsTaskPropertiesArrayOutput) Index(i pulumi.IntInput) JobDefinitionEcsTaskPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionEcsTaskProperties {
		return vs[0].([]JobDefinitionEcsTaskProperties)[vs[1].(int)]
	}).(JobDefinitionEcsTaskPropertiesOutput)
}

type JobDefinitionEfsAuthorizationConfig struct {
	// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the `EFSVolumeConfiguration` must either be omitted or set to `/` which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the `EFSVolumeConfiguration` . For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide* .
	AccessPointId *string `pulumi:"accessPointId"`
	// Whether or not to use the AWS Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the `EFSVolumeConfiguration` . If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the *AWS Batch User Guide* . EFS IAM authorization requires that `TransitEncryption` be `ENABLED` and that a `JobRoleArn` is specified.
	Iam *string `pulumi:"iam"`
}

// JobDefinitionEfsAuthorizationConfigInput is an input type that accepts JobDefinitionEfsAuthorizationConfigArgs and JobDefinitionEfsAuthorizationConfigOutput values.
// You can construct a concrete instance of `JobDefinitionEfsAuthorizationConfigInput` via:
//
//	JobDefinitionEfsAuthorizationConfigArgs{...}
type JobDefinitionEfsAuthorizationConfigInput interface {
	pulumi.Input

	ToJobDefinitionEfsAuthorizationConfigOutput() JobDefinitionEfsAuthorizationConfigOutput
	ToJobDefinitionEfsAuthorizationConfigOutputWithContext(context.Context) JobDefinitionEfsAuthorizationConfigOutput
}

type JobDefinitionEfsAuthorizationConfigArgs struct {
	// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the `EFSVolumeConfiguration` must either be omitted or set to `/` which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the `EFSVolumeConfiguration` . For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide* .
	AccessPointId pulumi.StringPtrInput `pulumi:"accessPointId"`
	// Whether or not to use the AWS Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the `EFSVolumeConfiguration` . If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the *AWS Batch User Guide* . EFS IAM authorization requires that `TransitEncryption` be `ENABLED` and that a `JobRoleArn` is specified.
	Iam pulumi.StringPtrInput `pulumi:"iam"`
}

func (JobDefinitionEfsAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEfsAuthorizationConfig)(nil)).Elem()
}

func (i JobDefinitionEfsAuthorizationConfigArgs) ToJobDefinitionEfsAuthorizationConfigOutput() JobDefinitionEfsAuthorizationConfigOutput {
	return i.ToJobDefinitionEfsAuthorizationConfigOutputWithContext(context.Background())
}

func (i JobDefinitionEfsAuthorizationConfigArgs) ToJobDefinitionEfsAuthorizationConfigOutputWithContext(ctx context.Context) JobDefinitionEfsAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEfsAuthorizationConfigOutput)
}

func (i JobDefinitionEfsAuthorizationConfigArgs) ToJobDefinitionEfsAuthorizationConfigPtrOutput() JobDefinitionEfsAuthorizationConfigPtrOutput {
	return i.ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEfsAuthorizationConfigArgs) ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(ctx context.Context) JobDefinitionEfsAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEfsAuthorizationConfigOutput).ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(ctx)
}

// JobDefinitionEfsAuthorizationConfigPtrInput is an input type that accepts JobDefinitionEfsAuthorizationConfigArgs, JobDefinitionEfsAuthorizationConfigPtr and JobDefinitionEfsAuthorizationConfigPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEfsAuthorizationConfigPtrInput` via:
//
//	        JobDefinitionEfsAuthorizationConfigArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEfsAuthorizationConfigPtrInput interface {
	pulumi.Input

	ToJobDefinitionEfsAuthorizationConfigPtrOutput() JobDefinitionEfsAuthorizationConfigPtrOutput
	ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(context.Context) JobDefinitionEfsAuthorizationConfigPtrOutput
}

type jobDefinitionEfsAuthorizationConfigPtrType JobDefinitionEfsAuthorizationConfigArgs

func JobDefinitionEfsAuthorizationConfigPtr(v *JobDefinitionEfsAuthorizationConfigArgs) JobDefinitionEfsAuthorizationConfigPtrInput {
	return (*jobDefinitionEfsAuthorizationConfigPtrType)(v)
}

func (*jobDefinitionEfsAuthorizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEfsAuthorizationConfig)(nil)).Elem()
}

func (i *jobDefinitionEfsAuthorizationConfigPtrType) ToJobDefinitionEfsAuthorizationConfigPtrOutput() JobDefinitionEfsAuthorizationConfigPtrOutput {
	return i.ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEfsAuthorizationConfigPtrType) ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(ctx context.Context) JobDefinitionEfsAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEfsAuthorizationConfigPtrOutput)
}

type JobDefinitionEfsAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (JobDefinitionEfsAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEfsAuthorizationConfig)(nil)).Elem()
}

func (o JobDefinitionEfsAuthorizationConfigOutput) ToJobDefinitionEfsAuthorizationConfigOutput() JobDefinitionEfsAuthorizationConfigOutput {
	return o
}

func (o JobDefinitionEfsAuthorizationConfigOutput) ToJobDefinitionEfsAuthorizationConfigOutputWithContext(ctx context.Context) JobDefinitionEfsAuthorizationConfigOutput {
	return o
}

func (o JobDefinitionEfsAuthorizationConfigOutput) ToJobDefinitionEfsAuthorizationConfigPtrOutput() JobDefinitionEfsAuthorizationConfigPtrOutput {
	return o.ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEfsAuthorizationConfigOutput) ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(ctx context.Context) JobDefinitionEfsAuthorizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEfsAuthorizationConfig) *JobDefinitionEfsAuthorizationConfig {
		return &v
	}).(JobDefinitionEfsAuthorizationConfigPtrOutput)
}

// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the `EFSVolumeConfiguration` must either be omitted or set to `/` which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the `EFSVolumeConfiguration` . For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide* .
func (o JobDefinitionEfsAuthorizationConfigOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEfsAuthorizationConfig) *string { return v.AccessPointId }).(pulumi.StringPtrOutput)
}

// Whether or not to use the AWS Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the `EFSVolumeConfiguration` . If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the *AWS Batch User Guide* . EFS IAM authorization requires that `TransitEncryption` be `ENABLED` and that a `JobRoleArn` is specified.
func (o JobDefinitionEfsAuthorizationConfigOutput) Iam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEfsAuthorizationConfig) *string { return v.Iam }).(pulumi.StringPtrOutput)
}

type JobDefinitionEfsAuthorizationConfigPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEfsAuthorizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEfsAuthorizationConfig)(nil)).Elem()
}

func (o JobDefinitionEfsAuthorizationConfigPtrOutput) ToJobDefinitionEfsAuthorizationConfigPtrOutput() JobDefinitionEfsAuthorizationConfigPtrOutput {
	return o
}

func (o JobDefinitionEfsAuthorizationConfigPtrOutput) ToJobDefinitionEfsAuthorizationConfigPtrOutputWithContext(ctx context.Context) JobDefinitionEfsAuthorizationConfigPtrOutput {
	return o
}

func (o JobDefinitionEfsAuthorizationConfigPtrOutput) Elem() JobDefinitionEfsAuthorizationConfigOutput {
	return o.ApplyT(func(v *JobDefinitionEfsAuthorizationConfig) JobDefinitionEfsAuthorizationConfig {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEfsAuthorizationConfig
		return ret
	}).(JobDefinitionEfsAuthorizationConfigOutput)
}

// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the `EFSVolumeConfiguration` must either be omitted or set to `/` which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the `EFSVolumeConfiguration` . For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide* .
func (o JobDefinitionEfsAuthorizationConfigPtrOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEfsAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.AccessPointId
	}).(pulumi.StringPtrOutput)
}

// Whether or not to use the AWS Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the `EFSVolumeConfiguration` . If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the *AWS Batch User Guide* . EFS IAM authorization requires that `TransitEncryption` be `ENABLED` and that a `JobRoleArn` is specified.
func (o JobDefinitionEfsAuthorizationConfigPtrOutput) Iam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEfsAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionEfsVolumeConfiguration struct {
	// The authorization configuration details for the Amazon EFS file system.
	AuthorizationConfig *JobDefinitionEfsAuthorizationConfig `pulumi:"authorizationConfig"`
	// The Amazon EFS file system ID to use.
	FileSystemId string `pulumi:"fileSystemId"`
	// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying `/` has the same effect as omitting this parameter. The maximum length is 4,096 characters.
	//
	// > If an EFS access point is specified in the `authorizationConfig` , the root directory parameter must either be omitted or set to `/` , which enforces the path set on the Amazon EFS access point.
	RootDirectory *string `pulumi:"rootDirectory"`
	// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide* .
	TransitEncryption *string `pulumi:"transitEncryption"`
	// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide* .
	TransitEncryptionPort *int `pulumi:"transitEncryptionPort"`
}

// JobDefinitionEfsVolumeConfigurationInput is an input type that accepts JobDefinitionEfsVolumeConfigurationArgs and JobDefinitionEfsVolumeConfigurationOutput values.
// You can construct a concrete instance of `JobDefinitionEfsVolumeConfigurationInput` via:
//
//	JobDefinitionEfsVolumeConfigurationArgs{...}
type JobDefinitionEfsVolumeConfigurationInput interface {
	pulumi.Input

	ToJobDefinitionEfsVolumeConfigurationOutput() JobDefinitionEfsVolumeConfigurationOutput
	ToJobDefinitionEfsVolumeConfigurationOutputWithContext(context.Context) JobDefinitionEfsVolumeConfigurationOutput
}

type JobDefinitionEfsVolumeConfigurationArgs struct {
	// The authorization configuration details for the Amazon EFS file system.
	AuthorizationConfig JobDefinitionEfsAuthorizationConfigPtrInput `pulumi:"authorizationConfig"`
	// The Amazon EFS file system ID to use.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying `/` has the same effect as omitting this parameter. The maximum length is 4,096 characters.
	//
	// > If an EFS access point is specified in the `authorizationConfig` , the root directory parameter must either be omitted or set to `/` , which enforces the path set on the Amazon EFS access point.
	RootDirectory pulumi.StringPtrInput `pulumi:"rootDirectory"`
	// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide* .
	TransitEncryption pulumi.StringPtrInput `pulumi:"transitEncryption"`
	// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide* .
	TransitEncryptionPort pulumi.IntPtrInput `pulumi:"transitEncryptionPort"`
}

func (JobDefinitionEfsVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (i JobDefinitionEfsVolumeConfigurationArgs) ToJobDefinitionEfsVolumeConfigurationOutput() JobDefinitionEfsVolumeConfigurationOutput {
	return i.ToJobDefinitionEfsVolumeConfigurationOutputWithContext(context.Background())
}

func (i JobDefinitionEfsVolumeConfigurationArgs) ToJobDefinitionEfsVolumeConfigurationOutputWithContext(ctx context.Context) JobDefinitionEfsVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEfsVolumeConfigurationOutput)
}

func (i JobDefinitionEfsVolumeConfigurationArgs) ToJobDefinitionEfsVolumeConfigurationPtrOutput() JobDefinitionEfsVolumeConfigurationPtrOutput {
	return i.ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEfsVolumeConfigurationArgs) ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEfsVolumeConfigurationOutput).ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx)
}

// JobDefinitionEfsVolumeConfigurationPtrInput is an input type that accepts JobDefinitionEfsVolumeConfigurationArgs, JobDefinitionEfsVolumeConfigurationPtr and JobDefinitionEfsVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEfsVolumeConfigurationPtrInput` via:
//
//	        JobDefinitionEfsVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEfsVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToJobDefinitionEfsVolumeConfigurationPtrOutput() JobDefinitionEfsVolumeConfigurationPtrOutput
	ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Context) JobDefinitionEfsVolumeConfigurationPtrOutput
}

type jobDefinitionEfsVolumeConfigurationPtrType JobDefinitionEfsVolumeConfigurationArgs

func JobDefinitionEfsVolumeConfigurationPtr(v *JobDefinitionEfsVolumeConfigurationArgs) JobDefinitionEfsVolumeConfigurationPtrInput {
	return (*jobDefinitionEfsVolumeConfigurationPtrType)(v)
}

func (*jobDefinitionEfsVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (i *jobDefinitionEfsVolumeConfigurationPtrType) ToJobDefinitionEfsVolumeConfigurationPtrOutput() JobDefinitionEfsVolumeConfigurationPtrOutput {
	return i.ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEfsVolumeConfigurationPtrType) ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEfsVolumeConfigurationPtrOutput)
}

type JobDefinitionEfsVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (JobDefinitionEfsVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (o JobDefinitionEfsVolumeConfigurationOutput) ToJobDefinitionEfsVolumeConfigurationOutput() JobDefinitionEfsVolumeConfigurationOutput {
	return o
}

func (o JobDefinitionEfsVolumeConfigurationOutput) ToJobDefinitionEfsVolumeConfigurationOutputWithContext(ctx context.Context) JobDefinitionEfsVolumeConfigurationOutput {
	return o
}

func (o JobDefinitionEfsVolumeConfigurationOutput) ToJobDefinitionEfsVolumeConfigurationPtrOutput() JobDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEfsVolumeConfigurationOutput) ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEfsVolumeConfiguration) *JobDefinitionEfsVolumeConfiguration {
		return &v
	}).(JobDefinitionEfsVolumeConfigurationPtrOutput)
}

// The authorization configuration details for the Amazon EFS file system.
func (o JobDefinitionEfsVolumeConfigurationOutput) AuthorizationConfig() JobDefinitionEfsAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v JobDefinitionEfsVolumeConfiguration) *JobDefinitionEfsAuthorizationConfig {
		return v.AuthorizationConfig
	}).(JobDefinitionEfsAuthorizationConfigPtrOutput)
}

// The Amazon EFS file system ID to use.
func (o JobDefinitionEfsVolumeConfigurationOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionEfsVolumeConfiguration) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying `/` has the same effect as omitting this parameter. The maximum length is 4,096 characters.
//
// > If an EFS access point is specified in the `authorizationConfig` , the root directory parameter must either be omitted or set to `/` , which enforces the path set on the Amazon EFS access point.
func (o JobDefinitionEfsVolumeConfigurationOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEfsVolumeConfiguration) *string { return v.RootDirectory }).(pulumi.StringPtrOutput)
}

// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide* .
func (o JobDefinitionEfsVolumeConfigurationOutput) TransitEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEfsVolumeConfiguration) *string { return v.TransitEncryption }).(pulumi.StringPtrOutput)
}

// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide* .
func (o JobDefinitionEfsVolumeConfigurationOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionEfsVolumeConfiguration) *int { return v.TransitEncryptionPort }).(pulumi.IntPtrOutput)
}

type JobDefinitionEfsVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEfsVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (o JobDefinitionEfsVolumeConfigurationPtrOutput) ToJobDefinitionEfsVolumeConfigurationPtrOutput() JobDefinitionEfsVolumeConfigurationPtrOutput {
	return o
}

func (o JobDefinitionEfsVolumeConfigurationPtrOutput) ToJobDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionEfsVolumeConfigurationPtrOutput {
	return o
}

func (o JobDefinitionEfsVolumeConfigurationPtrOutput) Elem() JobDefinitionEfsVolumeConfigurationOutput {
	return o.ApplyT(func(v *JobDefinitionEfsVolumeConfiguration) JobDefinitionEfsVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEfsVolumeConfiguration
		return ret
	}).(JobDefinitionEfsVolumeConfigurationOutput)
}

// The authorization configuration details for the Amazon EFS file system.
func (o JobDefinitionEfsVolumeConfigurationPtrOutput) AuthorizationConfig() JobDefinitionEfsAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEfsVolumeConfiguration) *JobDefinitionEfsAuthorizationConfig {
		if v == nil {
			return nil
		}
		return v.AuthorizationConfig
	}).(JobDefinitionEfsAuthorizationConfigPtrOutput)
}

// The Amazon EFS file system ID to use.
func (o JobDefinitionEfsVolumeConfigurationPtrOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FileSystemId
	}).(pulumi.StringPtrOutput)
}

// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying `/` has the same effect as omitting this parameter. The maximum length is 4,096 characters.
//
// > If an EFS access point is specified in the `authorizationConfig` , the root directory parameter must either be omitted or set to `/` , which enforces the path set on the Amazon EFS access point.
func (o JobDefinitionEfsVolumeConfigurationPtrOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootDirectory
	}).(pulumi.StringPtrOutput)
}

// Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide* .
func (o JobDefinitionEfsVolumeConfigurationPtrOutput) TransitEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TransitEncryption
	}).(pulumi.StringPtrOutput)
}

// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide* .
func (o JobDefinitionEfsVolumeConfigurationPtrOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEfsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TransitEncryptionPort
	}).(pulumi.IntPtrOutput)
}

type JobDefinitionEksContainer struct {
	// An array of arguments to the entrypoint. If this isn't specified, the `CMD` of the container image is used. This corresponds to the `args` member in the [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment.
	//
	// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` , and the resulting string isn't expanded. For example, `$$(VAR_NAME)` is passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command and arguments for a pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the *Kubernetes documentation* .
	Args []string `pulumi:"args"`
	// The entrypoint for the container. This isn't run within a shell. If this isn't specified, the `ENTRYPOINT` of the container image is used. Environment variable references are expanded using the container's environment.
	//
	// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` and the resulting string isn't expanded. For example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. The entrypoint can't be updated. For more information, see [ENTRYPOINT](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint) in the *Dockerfile reference* and [Define a command and arguments for a container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) and [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the *Kubernetes documentation* .
	Command []string `pulumi:"command"`
	// The environment variables to pass to a container.
	//
	// > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
	Env []JobDefinitionEksContainerEnvironmentVariable `pulumi:"env"`
	// The Docker image used to start the container.
	Image string `pulumi:"image"`
	// The image pull policy for the container. Supported values are `Always` , `IfNotPresent` , and `Never` . This parameter defaults to `IfNotPresent` . However, if the `:latest` tag is specified, it defaults to `Always` . For more information, see [Updating images](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the *Kubernetes documentation* .
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// The name of the container. If the name isn't specified, the default name " `Default` " is used. Each container in a pod must have a unique name.
	Name *string `pulumi:"name"`
	// The type and amount of resources to assign to a container. The supported resources include `memory` , `cpu` , and `nvidia.com/gpu` . For more information, see [Resource management for pods and containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the *Kubernetes documentation* .
	Resources *JobDefinitionEksContainerResourceRequirements `pulumi:"resources"`
	// The security context for a job. For more information, see [Configure a security context for a pod or container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the *Kubernetes documentation* .
	SecurityContext *JobDefinitionEksContainerSecurityContext `pulumi:"securityContext"`
	// The volume mounts for the container. AWS Batch supports `emptyDir` , `hostPath` , and `secret` volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/) in the *Kubernetes documentation* .
	VolumeMounts []JobDefinitionEksContainerVolumeMount `pulumi:"volumeMounts"`
}

// JobDefinitionEksContainerInput is an input type that accepts JobDefinitionEksContainerArgs and JobDefinitionEksContainerOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerInput` via:
//
//	JobDefinitionEksContainerArgs{...}
type JobDefinitionEksContainerInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerOutput() JobDefinitionEksContainerOutput
	ToJobDefinitionEksContainerOutputWithContext(context.Context) JobDefinitionEksContainerOutput
}

type JobDefinitionEksContainerArgs struct {
	// An array of arguments to the entrypoint. If this isn't specified, the `CMD` of the container image is used. This corresponds to the `args` member in the [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment.
	//
	// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` , and the resulting string isn't expanded. For example, `$$(VAR_NAME)` is passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command and arguments for a pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the *Kubernetes documentation* .
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The entrypoint for the container. This isn't run within a shell. If this isn't specified, the `ENTRYPOINT` of the container image is used. Environment variable references are expanded using the container's environment.
	//
	// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` and the resulting string isn't expanded. For example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. The entrypoint can't be updated. For more information, see [ENTRYPOINT](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint) in the *Dockerfile reference* and [Define a command and arguments for a container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) and [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the *Kubernetes documentation* .
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The environment variables to pass to a container.
	//
	// > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
	Env JobDefinitionEksContainerEnvironmentVariableArrayInput `pulumi:"env"`
	// The Docker image used to start the container.
	Image pulumi.StringInput `pulumi:"image"`
	// The image pull policy for the container. Supported values are `Always` , `IfNotPresent` , and `Never` . This parameter defaults to `IfNotPresent` . However, if the `:latest` tag is specified, it defaults to `Always` . For more information, see [Updating images](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the *Kubernetes documentation* .
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// The name of the container. If the name isn't specified, the default name " `Default` " is used. Each container in a pod must have a unique name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type and amount of resources to assign to a container. The supported resources include `memory` , `cpu` , and `nvidia.com/gpu` . For more information, see [Resource management for pods and containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the *Kubernetes documentation* .
	Resources JobDefinitionEksContainerResourceRequirementsPtrInput `pulumi:"resources"`
	// The security context for a job. For more information, see [Configure a security context for a pod or container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the *Kubernetes documentation* .
	SecurityContext JobDefinitionEksContainerSecurityContextPtrInput `pulumi:"securityContext"`
	// The volume mounts for the container. AWS Batch supports `emptyDir` , `hostPath` , and `secret` volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/) in the *Kubernetes documentation* .
	VolumeMounts JobDefinitionEksContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (JobDefinitionEksContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainer)(nil)).Elem()
}

func (i JobDefinitionEksContainerArgs) ToJobDefinitionEksContainerOutput() JobDefinitionEksContainerOutput {
	return i.ToJobDefinitionEksContainerOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerArgs) ToJobDefinitionEksContainerOutputWithContext(ctx context.Context) JobDefinitionEksContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerOutput)
}

// JobDefinitionEksContainerArrayInput is an input type that accepts JobDefinitionEksContainerArray and JobDefinitionEksContainerArrayOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerArrayInput` via:
//
//	JobDefinitionEksContainerArray{ JobDefinitionEksContainerArgs{...} }
type JobDefinitionEksContainerArrayInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerArrayOutput() JobDefinitionEksContainerArrayOutput
	ToJobDefinitionEksContainerArrayOutputWithContext(context.Context) JobDefinitionEksContainerArrayOutput
}

type JobDefinitionEksContainerArray []JobDefinitionEksContainerInput

func (JobDefinitionEksContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksContainer)(nil)).Elem()
}

func (i JobDefinitionEksContainerArray) ToJobDefinitionEksContainerArrayOutput() JobDefinitionEksContainerArrayOutput {
	return i.ToJobDefinitionEksContainerArrayOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerArray) ToJobDefinitionEksContainerArrayOutputWithContext(ctx context.Context) JobDefinitionEksContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerArrayOutput)
}

type JobDefinitionEksContainerOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainer)(nil)).Elem()
}

func (o JobDefinitionEksContainerOutput) ToJobDefinitionEksContainerOutput() JobDefinitionEksContainerOutput {
	return o
}

func (o JobDefinitionEksContainerOutput) ToJobDefinitionEksContainerOutputWithContext(ctx context.Context) JobDefinitionEksContainerOutput {
	return o
}

// An array of arguments to the entrypoint. If this isn't specified, the `CMD` of the container image is used. This corresponds to the `args` member in the [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment.
//
// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` , and the resulting string isn't expanded. For example, `$$(VAR_NAME)` is passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command and arguments for a pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The entrypoint for the container. This isn't run within a shell. If this isn't specified, the `ENTRYPOINT` of the container image is used. Environment variable references are expanded using the container's environment.
//
// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` and the resulting string isn't expanded. For example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. The entrypoint can't be updated. For more information, see [ENTRYPOINT](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint) in the *Dockerfile reference* and [Define a command and arguments for a container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) and [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to pass to a container.
//
// > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
func (o JobDefinitionEksContainerOutput) Env() JobDefinitionEksContainerEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) []JobDefinitionEksContainerEnvironmentVariable { return v.Env }).(JobDefinitionEksContainerEnvironmentVariableArrayOutput)
}

// The Docker image used to start the container.
func (o JobDefinitionEksContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) string { return v.Image }).(pulumi.StringOutput)
}

// The image pull policy for the container. Supported values are `Always` , `IfNotPresent` , and `Never` . This parameter defaults to `IfNotPresent` . However, if the `:latest` tag is specified, it defaults to `Always` . For more information, see [Updating images](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// The name of the container. If the name isn't specified, the default name " `Default` " is used. Each container in a pod must have a unique name.
func (o JobDefinitionEksContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type and amount of resources to assign to a container. The supported resources include `memory` , `cpu` , and `nvidia.com/gpu` . For more information, see [Resource management for pods and containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerOutput) Resources() JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) *JobDefinitionEksContainerResourceRequirements { return v.Resources }).(JobDefinitionEksContainerResourceRequirementsPtrOutput)
}

// The security context for a job. For more information, see [Configure a security context for a pod or container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerOutput) SecurityContext() JobDefinitionEksContainerSecurityContextPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) *JobDefinitionEksContainerSecurityContext { return v.SecurityContext }).(JobDefinitionEksContainerSecurityContextPtrOutput)
}

// The volume mounts for the container. AWS Batch supports `emptyDir` , `hostPath` , and `secret` volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerOutput) VolumeMounts() JobDefinitionEksContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksContainer) []JobDefinitionEksContainerVolumeMount { return v.VolumeMounts }).(JobDefinitionEksContainerVolumeMountArrayOutput)
}

type JobDefinitionEksContainerArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksContainer)(nil)).Elem()
}

func (o JobDefinitionEksContainerArrayOutput) ToJobDefinitionEksContainerArrayOutput() JobDefinitionEksContainerArrayOutput {
	return o
}

func (o JobDefinitionEksContainerArrayOutput) ToJobDefinitionEksContainerArrayOutputWithContext(ctx context.Context) JobDefinitionEksContainerArrayOutput {
	return o
}

func (o JobDefinitionEksContainerArrayOutput) Index(i pulumi.IntInput) JobDefinitionEksContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionEksContainer {
		return vs[0].([]JobDefinitionEksContainer)[vs[1].(int)]
	}).(JobDefinitionEksContainerOutput)
}

type JobDefinitionEksContainerEnvironmentVariable struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// JobDefinitionEksContainerEnvironmentVariableInput is an input type that accepts JobDefinitionEksContainerEnvironmentVariableArgs and JobDefinitionEksContainerEnvironmentVariableOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerEnvironmentVariableInput` via:
//
//	JobDefinitionEksContainerEnvironmentVariableArgs{...}
type JobDefinitionEksContainerEnvironmentVariableInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerEnvironmentVariableOutput() JobDefinitionEksContainerEnvironmentVariableOutput
	ToJobDefinitionEksContainerEnvironmentVariableOutputWithContext(context.Context) JobDefinitionEksContainerEnvironmentVariableOutput
}

type JobDefinitionEksContainerEnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (JobDefinitionEksContainerEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerEnvironmentVariable)(nil)).Elem()
}

func (i JobDefinitionEksContainerEnvironmentVariableArgs) ToJobDefinitionEksContainerEnvironmentVariableOutput() JobDefinitionEksContainerEnvironmentVariableOutput {
	return i.ToJobDefinitionEksContainerEnvironmentVariableOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerEnvironmentVariableArgs) ToJobDefinitionEksContainerEnvironmentVariableOutputWithContext(ctx context.Context) JobDefinitionEksContainerEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerEnvironmentVariableOutput)
}

// JobDefinitionEksContainerEnvironmentVariableArrayInput is an input type that accepts JobDefinitionEksContainerEnvironmentVariableArray and JobDefinitionEksContainerEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerEnvironmentVariableArrayInput` via:
//
//	JobDefinitionEksContainerEnvironmentVariableArray{ JobDefinitionEksContainerEnvironmentVariableArgs{...} }
type JobDefinitionEksContainerEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerEnvironmentVariableArrayOutput() JobDefinitionEksContainerEnvironmentVariableArrayOutput
	ToJobDefinitionEksContainerEnvironmentVariableArrayOutputWithContext(context.Context) JobDefinitionEksContainerEnvironmentVariableArrayOutput
}

type JobDefinitionEksContainerEnvironmentVariableArray []JobDefinitionEksContainerEnvironmentVariableInput

func (JobDefinitionEksContainerEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksContainerEnvironmentVariable)(nil)).Elem()
}

func (i JobDefinitionEksContainerEnvironmentVariableArray) ToJobDefinitionEksContainerEnvironmentVariableArrayOutput() JobDefinitionEksContainerEnvironmentVariableArrayOutput {
	return i.ToJobDefinitionEksContainerEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerEnvironmentVariableArray) ToJobDefinitionEksContainerEnvironmentVariableArrayOutputWithContext(ctx context.Context) JobDefinitionEksContainerEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerEnvironmentVariableArrayOutput)
}

type JobDefinitionEksContainerEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerEnvironmentVariable)(nil)).Elem()
}

func (o JobDefinitionEksContainerEnvironmentVariableOutput) ToJobDefinitionEksContainerEnvironmentVariableOutput() JobDefinitionEksContainerEnvironmentVariableOutput {
	return o
}

func (o JobDefinitionEksContainerEnvironmentVariableOutput) ToJobDefinitionEksContainerEnvironmentVariableOutputWithContext(ctx context.Context) JobDefinitionEksContainerEnvironmentVariableOutput {
	return o
}

// The name of the environment variable.
func (o JobDefinitionEksContainerEnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerEnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o JobDefinitionEksContainerEnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerEnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type JobDefinitionEksContainerEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksContainerEnvironmentVariable)(nil)).Elem()
}

func (o JobDefinitionEksContainerEnvironmentVariableArrayOutput) ToJobDefinitionEksContainerEnvironmentVariableArrayOutput() JobDefinitionEksContainerEnvironmentVariableArrayOutput {
	return o
}

func (o JobDefinitionEksContainerEnvironmentVariableArrayOutput) ToJobDefinitionEksContainerEnvironmentVariableArrayOutputWithContext(ctx context.Context) JobDefinitionEksContainerEnvironmentVariableArrayOutput {
	return o
}

func (o JobDefinitionEksContainerEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) JobDefinitionEksContainerEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionEksContainerEnvironmentVariable {
		return vs[0].([]JobDefinitionEksContainerEnvironmentVariable)[vs[1].(int)]
	}).(JobDefinitionEksContainerEnvironmentVariableOutput)
}

type JobDefinitionEksContainerResourceRequirements struct {
	// The type and quantity of the resources to reserve for the container. The values vary based on the `name` that's specified. Resources can be requested using either the `limits` or the `requests` objects.
	//
	// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	//
	// > To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
	// - **cpu** - The number of CPUs that's reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both places, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
	// - **nvidia.com/gpu** - The number of GPUs that's reserved for the container. Values must be a whole integer. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	Limits map[string]string `pulumi:"limits"`
	// The type and quantity of the resources to request for the container. The values vary based on the `name` that's specified. Resources can be requested by using either the `limits` or the `requests` objects.
	//
	// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	//
	// > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
	// - **cpu** - The number of CPUs that are reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
	// - **nvidia.com/gpu** - The number of GPUs that are reserved for the container. Values must be a whole integer. `nvidia.com/gpu` can be specified in `limits` , `requests` , or both. If `nvidia.com/gpu` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	Requests map[string]string `pulumi:"requests"`
}

// JobDefinitionEksContainerResourceRequirementsInput is an input type that accepts JobDefinitionEksContainerResourceRequirementsArgs and JobDefinitionEksContainerResourceRequirementsOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerResourceRequirementsInput` via:
//
//	JobDefinitionEksContainerResourceRequirementsArgs{...}
type JobDefinitionEksContainerResourceRequirementsInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerResourceRequirementsOutput() JobDefinitionEksContainerResourceRequirementsOutput
	ToJobDefinitionEksContainerResourceRequirementsOutputWithContext(context.Context) JobDefinitionEksContainerResourceRequirementsOutput
}

type JobDefinitionEksContainerResourceRequirementsArgs struct {
	// The type and quantity of the resources to reserve for the container. The values vary based on the `name` that's specified. Resources can be requested using either the `limits` or the `requests` objects.
	//
	// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	//
	// > To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
	// - **cpu** - The number of CPUs that's reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both places, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
	// - **nvidia.com/gpu** - The number of GPUs that's reserved for the container. Values must be a whole integer. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// The type and quantity of the resources to request for the container. The values vary based on the `name` that's specified. Resources can be requested by using either the `limits` or the `requests` objects.
	//
	// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	//
	// > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
	// - **cpu** - The number of CPUs that are reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
	// - **nvidia.com/gpu** - The number of GPUs that are reserved for the container. Values must be a whole integer. `nvidia.com/gpu` can be specified in `limits` , `requests` , or both. If `nvidia.com/gpu` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (JobDefinitionEksContainerResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerResourceRequirements)(nil)).Elem()
}

func (i JobDefinitionEksContainerResourceRequirementsArgs) ToJobDefinitionEksContainerResourceRequirementsOutput() JobDefinitionEksContainerResourceRequirementsOutput {
	return i.ToJobDefinitionEksContainerResourceRequirementsOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerResourceRequirementsArgs) ToJobDefinitionEksContainerResourceRequirementsOutputWithContext(ctx context.Context) JobDefinitionEksContainerResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerResourceRequirementsOutput)
}

func (i JobDefinitionEksContainerResourceRequirementsArgs) ToJobDefinitionEksContainerResourceRequirementsPtrOutput() JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return i.ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerResourceRequirementsArgs) ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerResourceRequirementsOutput).ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(ctx)
}

// JobDefinitionEksContainerResourceRequirementsPtrInput is an input type that accepts JobDefinitionEksContainerResourceRequirementsArgs, JobDefinitionEksContainerResourceRequirementsPtr and JobDefinitionEksContainerResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerResourceRequirementsPtrInput` via:
//
//	        JobDefinitionEksContainerResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksContainerResourceRequirementsPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerResourceRequirementsPtrOutput() JobDefinitionEksContainerResourceRequirementsPtrOutput
	ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(context.Context) JobDefinitionEksContainerResourceRequirementsPtrOutput
}

type jobDefinitionEksContainerResourceRequirementsPtrType JobDefinitionEksContainerResourceRequirementsArgs

func JobDefinitionEksContainerResourceRequirementsPtr(v *JobDefinitionEksContainerResourceRequirementsArgs) JobDefinitionEksContainerResourceRequirementsPtrInput {
	return (*jobDefinitionEksContainerResourceRequirementsPtrType)(v)
}

func (*jobDefinitionEksContainerResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksContainerResourceRequirements)(nil)).Elem()
}

func (i *jobDefinitionEksContainerResourceRequirementsPtrType) ToJobDefinitionEksContainerResourceRequirementsPtrOutput() JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return i.ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksContainerResourceRequirementsPtrType) ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerResourceRequirementsPtrOutput)
}

type JobDefinitionEksContainerResourceRequirementsOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerResourceRequirements)(nil)).Elem()
}

func (o JobDefinitionEksContainerResourceRequirementsOutput) ToJobDefinitionEksContainerResourceRequirementsOutput() JobDefinitionEksContainerResourceRequirementsOutput {
	return o
}

func (o JobDefinitionEksContainerResourceRequirementsOutput) ToJobDefinitionEksContainerResourceRequirementsOutputWithContext(ctx context.Context) JobDefinitionEksContainerResourceRequirementsOutput {
	return o
}

func (o JobDefinitionEksContainerResourceRequirementsOutput) ToJobDefinitionEksContainerResourceRequirementsPtrOutput() JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return o.ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksContainerResourceRequirementsOutput) ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksContainerResourceRequirements) *JobDefinitionEksContainerResourceRequirements {
		return &v
	}).(JobDefinitionEksContainerResourceRequirementsPtrOutput)
}

// The type and quantity of the resources to reserve for the container. The values vary based on the `name` that's specified. Resources can be requested using either the `limits` or the `requests` objects.
//
// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
//
// > To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
// - **cpu** - The number of CPUs that's reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both places, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
// - **nvidia.com/gpu** - The number of GPUs that's reserved for the container. Values must be a whole integer. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
func (o JobDefinitionEksContainerResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// The type and quantity of the resources to request for the container. The values vary based on the `name` that's specified. Resources can be requested by using either the `limits` or the `requests` objects.
//
// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
//
// > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
// - **cpu** - The number of CPUs that are reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
// - **nvidia.com/gpu** - The number of GPUs that are reserved for the container. Values must be a whole integer. `nvidia.com/gpu` can be specified in `limits` , `requests` , or both. If `nvidia.com/gpu` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
func (o JobDefinitionEksContainerResourceRequirementsOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerResourceRequirements) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type JobDefinitionEksContainerResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksContainerResourceRequirements)(nil)).Elem()
}

func (o JobDefinitionEksContainerResourceRequirementsPtrOutput) ToJobDefinitionEksContainerResourceRequirementsPtrOutput() JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return o
}

func (o JobDefinitionEksContainerResourceRequirementsPtrOutput) ToJobDefinitionEksContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerResourceRequirementsPtrOutput {
	return o
}

func (o JobDefinitionEksContainerResourceRequirementsPtrOutput) Elem() JobDefinitionEksContainerResourceRequirementsOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerResourceRequirements) JobDefinitionEksContainerResourceRequirements {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksContainerResourceRequirements
		return ret
	}).(JobDefinitionEksContainerResourceRequirementsOutput)
}

// The type and quantity of the resources to reserve for the container. The values vary based on the `name` that's specified. Resources can be requested using either the `limits` or the `requests` objects.
//
// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
//
// > To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
// - **cpu** - The number of CPUs that's reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both places, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
// - **nvidia.com/gpu** - The number of GPUs that's reserved for the container. Values must be a whole integer. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
func (o JobDefinitionEksContainerResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// The type and quantity of the resources to request for the container. The values vary based on the `name` that's specified. Resources can be requested by using either the `limits` or the `requests` objects.
//
// - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
//
// > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
// - **cpu** - The number of CPUs that are reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
// - **nvidia.com/gpu** - The number of GPUs that are reserved for the container. Values must be a whole integer. `nvidia.com/gpu` can be specified in `limits` , `requests` , or both. If `nvidia.com/gpu` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
func (o JobDefinitionEksContainerResourceRequirementsPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

type JobDefinitionEksContainerSecurityContext struct {
	// Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process. The default value is `false` .
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// When this parameter is `true` , the container is given elevated permissions on the host container instance. The level of permissions are similar to the `root` user permissions. The default value is `false` . This parameter maps to `privileged` policy in the [Privileged pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged) in the *Kubernetes documentation* .
	Privileged *bool `pulumi:"privileged"`
	// When this parameter is `true` , the container is given read-only access to its root file system. The default value is `false` . This parameter maps to `ReadOnlyRootFilesystem` policy in the [Volumes and file systems pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems) in the *Kubernetes documentation* .
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// When this parameter is specified, the container is run as the specified group ID ( `gid` ). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to `RunAsGroup` and `MustRunAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
	RunAsGroup *int `pulumi:"runAsGroup"`
	// When this parameter is specified, the container is run as a user with a `uid` other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// When this parameter is specified, the container is run as the specified user ID ( `uid` ). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to `RunAsUser` and `MustRanAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
	RunAsUser *int `pulumi:"runAsUser"`
}

// JobDefinitionEksContainerSecurityContextInput is an input type that accepts JobDefinitionEksContainerSecurityContextArgs and JobDefinitionEksContainerSecurityContextOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerSecurityContextInput` via:
//
//	JobDefinitionEksContainerSecurityContextArgs{...}
type JobDefinitionEksContainerSecurityContextInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerSecurityContextOutput() JobDefinitionEksContainerSecurityContextOutput
	ToJobDefinitionEksContainerSecurityContextOutputWithContext(context.Context) JobDefinitionEksContainerSecurityContextOutput
}

type JobDefinitionEksContainerSecurityContextArgs struct {
	// Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process. The default value is `false` .
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// When this parameter is `true` , the container is given elevated permissions on the host container instance. The level of permissions are similar to the `root` user permissions. The default value is `false` . This parameter maps to `privileged` policy in the [Privileged pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged) in the *Kubernetes documentation* .
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// When this parameter is `true` , the container is given read-only access to its root file system. The default value is `false` . This parameter maps to `ReadOnlyRootFilesystem` policy in the [Volumes and file systems pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems) in the *Kubernetes documentation* .
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// When this parameter is specified, the container is run as the specified group ID ( `gid` ). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to `RunAsGroup` and `MustRunAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// When this parameter is specified, the container is run as a user with a `uid` other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// When this parameter is specified, the container is run as the specified user ID ( `uid` ). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to `RunAsUser` and `MustRanAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
}

func (JobDefinitionEksContainerSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerSecurityContext)(nil)).Elem()
}

func (i JobDefinitionEksContainerSecurityContextArgs) ToJobDefinitionEksContainerSecurityContextOutput() JobDefinitionEksContainerSecurityContextOutput {
	return i.ToJobDefinitionEksContainerSecurityContextOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerSecurityContextArgs) ToJobDefinitionEksContainerSecurityContextOutputWithContext(ctx context.Context) JobDefinitionEksContainerSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerSecurityContextOutput)
}

func (i JobDefinitionEksContainerSecurityContextArgs) ToJobDefinitionEksContainerSecurityContextPtrOutput() JobDefinitionEksContainerSecurityContextPtrOutput {
	return i.ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerSecurityContextArgs) ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerSecurityContextOutput).ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(ctx)
}

// JobDefinitionEksContainerSecurityContextPtrInput is an input type that accepts JobDefinitionEksContainerSecurityContextArgs, JobDefinitionEksContainerSecurityContextPtr and JobDefinitionEksContainerSecurityContextPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerSecurityContextPtrInput` via:
//
//	        JobDefinitionEksContainerSecurityContextArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksContainerSecurityContextPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerSecurityContextPtrOutput() JobDefinitionEksContainerSecurityContextPtrOutput
	ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(context.Context) JobDefinitionEksContainerSecurityContextPtrOutput
}

type jobDefinitionEksContainerSecurityContextPtrType JobDefinitionEksContainerSecurityContextArgs

func JobDefinitionEksContainerSecurityContextPtr(v *JobDefinitionEksContainerSecurityContextArgs) JobDefinitionEksContainerSecurityContextPtrInput {
	return (*jobDefinitionEksContainerSecurityContextPtrType)(v)
}

func (*jobDefinitionEksContainerSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksContainerSecurityContext)(nil)).Elem()
}

func (i *jobDefinitionEksContainerSecurityContextPtrType) ToJobDefinitionEksContainerSecurityContextPtrOutput() JobDefinitionEksContainerSecurityContextPtrOutput {
	return i.ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksContainerSecurityContextPtrType) ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerSecurityContextPtrOutput)
}

type JobDefinitionEksContainerSecurityContextOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerSecurityContext)(nil)).Elem()
}

func (o JobDefinitionEksContainerSecurityContextOutput) ToJobDefinitionEksContainerSecurityContextOutput() JobDefinitionEksContainerSecurityContextOutput {
	return o
}

func (o JobDefinitionEksContainerSecurityContextOutput) ToJobDefinitionEksContainerSecurityContextOutputWithContext(ctx context.Context) JobDefinitionEksContainerSecurityContextOutput {
	return o
}

func (o JobDefinitionEksContainerSecurityContextOutput) ToJobDefinitionEksContainerSecurityContextPtrOutput() JobDefinitionEksContainerSecurityContextPtrOutput {
	return o.ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksContainerSecurityContextOutput) ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerSecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksContainerSecurityContext) *JobDefinitionEksContainerSecurityContext {
		return &v
	}).(JobDefinitionEksContainerSecurityContextPtrOutput)
}

// Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process. The default value is `false` .
func (o JobDefinitionEksContainerSecurityContextOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerSecurityContext) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// When this parameter is `true` , the container is given elevated permissions on the host container instance. The level of permissions are similar to the `root` user permissions. The default value is `false` . This parameter maps to `privileged` policy in the [Privileged pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerSecurityContext) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// When this parameter is `true` , the container is given read-only access to its root file system. The default value is `false` . This parameter maps to `ReadOnlyRootFilesystem` policy in the [Volumes and file systems pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerSecurityContext) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// When this parameter is specified, the container is run as the specified group ID ( `gid` ). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to `RunAsGroup` and `MustRunAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// When this parameter is specified, the container is run as a user with a `uid` other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// When this parameter is specified, the container is run as the specified user ID ( `uid` ). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to `RunAsUser` and `MustRanAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

type JobDefinitionEksContainerSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksContainerSecurityContext)(nil)).Elem()
}

func (o JobDefinitionEksContainerSecurityContextPtrOutput) ToJobDefinitionEksContainerSecurityContextPtrOutput() JobDefinitionEksContainerSecurityContextPtrOutput {
	return o
}

func (o JobDefinitionEksContainerSecurityContextPtrOutput) ToJobDefinitionEksContainerSecurityContextPtrOutputWithContext(ctx context.Context) JobDefinitionEksContainerSecurityContextPtrOutput {
	return o
}

func (o JobDefinitionEksContainerSecurityContextPtrOutput) Elem() JobDefinitionEksContainerSecurityContextOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerSecurityContext) JobDefinitionEksContainerSecurityContext {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksContainerSecurityContext
		return ret
	}).(JobDefinitionEksContainerSecurityContextOutput)
}

// Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process. The default value is `false` .
func (o JobDefinitionEksContainerSecurityContextPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// When this parameter is `true` , the container is given elevated permissions on the host container instance. The level of permissions are similar to the `root` user permissions. The default value is `false` . This parameter maps to `privileged` policy in the [Privileged pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// When this parameter is `true` , the container is given read-only access to its root file system. The default value is `false` . This parameter maps to `ReadOnlyRootFilesystem` policy in the [Volumes and file systems pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// When this parameter is specified, the container is run as the specified group ID ( `gid` ). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to `RunAsGroup` and `MustRunAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// When this parameter is specified, the container is run as a user with a `uid` other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// When this parameter is specified, the container is run as the specified user ID ( `uid` ). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to `RunAsUser` and `MustRanAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
func (o JobDefinitionEksContainerSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksContainerSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

type JobDefinitionEksContainerVolumeMount struct {
	// The path on the container where the volume is mounted.
	MountPath *string `pulumi:"mountPath"`
	// The name the volume mount. This must match the name of one of the volumes in the pod.
	Name *string `pulumi:"name"`
	// If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
	ReadOnly *bool `pulumi:"readOnly"`
	// A sub-path inside the referenced volume instead of its root.
	SubPath *string `pulumi:"subPath"`
}

// JobDefinitionEksContainerVolumeMountInput is an input type that accepts JobDefinitionEksContainerVolumeMountArgs and JobDefinitionEksContainerVolumeMountOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerVolumeMountInput` via:
//
//	JobDefinitionEksContainerVolumeMountArgs{...}
type JobDefinitionEksContainerVolumeMountInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerVolumeMountOutput() JobDefinitionEksContainerVolumeMountOutput
	ToJobDefinitionEksContainerVolumeMountOutputWithContext(context.Context) JobDefinitionEksContainerVolumeMountOutput
}

type JobDefinitionEksContainerVolumeMountArgs struct {
	// The path on the container where the volume is mounted.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// The name the volume mount. This must match the name of one of the volumes in the pod.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// A sub-path inside the referenced volume instead of its root.
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
}

func (JobDefinitionEksContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerVolumeMount)(nil)).Elem()
}

func (i JobDefinitionEksContainerVolumeMountArgs) ToJobDefinitionEksContainerVolumeMountOutput() JobDefinitionEksContainerVolumeMountOutput {
	return i.ToJobDefinitionEksContainerVolumeMountOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerVolumeMountArgs) ToJobDefinitionEksContainerVolumeMountOutputWithContext(ctx context.Context) JobDefinitionEksContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerVolumeMountOutput)
}

// JobDefinitionEksContainerVolumeMountArrayInput is an input type that accepts JobDefinitionEksContainerVolumeMountArray and JobDefinitionEksContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `JobDefinitionEksContainerVolumeMountArrayInput` via:
//
//	JobDefinitionEksContainerVolumeMountArray{ JobDefinitionEksContainerVolumeMountArgs{...} }
type JobDefinitionEksContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToJobDefinitionEksContainerVolumeMountArrayOutput() JobDefinitionEksContainerVolumeMountArrayOutput
	ToJobDefinitionEksContainerVolumeMountArrayOutputWithContext(context.Context) JobDefinitionEksContainerVolumeMountArrayOutput
}

type JobDefinitionEksContainerVolumeMountArray []JobDefinitionEksContainerVolumeMountInput

func (JobDefinitionEksContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksContainerVolumeMount)(nil)).Elem()
}

func (i JobDefinitionEksContainerVolumeMountArray) ToJobDefinitionEksContainerVolumeMountArrayOutput() JobDefinitionEksContainerVolumeMountArrayOutput {
	return i.ToJobDefinitionEksContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i JobDefinitionEksContainerVolumeMountArray) ToJobDefinitionEksContainerVolumeMountArrayOutputWithContext(ctx context.Context) JobDefinitionEksContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksContainerVolumeMountArrayOutput)
}

type JobDefinitionEksContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksContainerVolumeMount)(nil)).Elem()
}

func (o JobDefinitionEksContainerVolumeMountOutput) ToJobDefinitionEksContainerVolumeMountOutput() JobDefinitionEksContainerVolumeMountOutput {
	return o
}

func (o JobDefinitionEksContainerVolumeMountOutput) ToJobDefinitionEksContainerVolumeMountOutputWithContext(ctx context.Context) JobDefinitionEksContainerVolumeMountOutput {
	return o
}

// The path on the container where the volume is mounted.
func (o JobDefinitionEksContainerVolumeMountOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerVolumeMount) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// The name the volume mount. This must match the name of one of the volumes in the pod.
func (o JobDefinitionEksContainerVolumeMountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerVolumeMount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
func (o JobDefinitionEksContainerVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// A sub-path inside the referenced volume instead of its root.
func (o JobDefinitionEksContainerVolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksContainerVolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

type JobDefinitionEksContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksContainerVolumeMount)(nil)).Elem()
}

func (o JobDefinitionEksContainerVolumeMountArrayOutput) ToJobDefinitionEksContainerVolumeMountArrayOutput() JobDefinitionEksContainerVolumeMountArrayOutput {
	return o
}

func (o JobDefinitionEksContainerVolumeMountArrayOutput) ToJobDefinitionEksContainerVolumeMountArrayOutputWithContext(ctx context.Context) JobDefinitionEksContainerVolumeMountArrayOutput {
	return o
}

func (o JobDefinitionEksContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) JobDefinitionEksContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionEksContainerVolumeMount {
		return vs[0].([]JobDefinitionEksContainerVolumeMount)[vs[1].(int)]
	}).(JobDefinitionEksContainerVolumeMountOutput)
}

type JobDefinitionEksEmptyDir struct {
	// The medium to store the volume. The default value is an empty string, which uses the storage of the node.
	//
	// - **""** - *(Default)* Use the disk storage of the node.
	// - **"Memory"** - Use the `tmpfs` volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
	Medium *string `pulumi:"medium"`
	// The maximum size of the volume. By default, there's no maximum size defined.
	SizeLimit *string `pulumi:"sizeLimit"`
}

// JobDefinitionEksEmptyDirInput is an input type that accepts JobDefinitionEksEmptyDirArgs and JobDefinitionEksEmptyDirOutput values.
// You can construct a concrete instance of `JobDefinitionEksEmptyDirInput` via:
//
//	JobDefinitionEksEmptyDirArgs{...}
type JobDefinitionEksEmptyDirInput interface {
	pulumi.Input

	ToJobDefinitionEksEmptyDirOutput() JobDefinitionEksEmptyDirOutput
	ToJobDefinitionEksEmptyDirOutputWithContext(context.Context) JobDefinitionEksEmptyDirOutput
}

type JobDefinitionEksEmptyDirArgs struct {
	// The medium to store the volume. The default value is an empty string, which uses the storage of the node.
	//
	// - **""** - *(Default)* Use the disk storage of the node.
	// - **"Memory"** - Use the `tmpfs` volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// The maximum size of the volume. By default, there's no maximum size defined.
	SizeLimit pulumi.StringPtrInput `pulumi:"sizeLimit"`
}

func (JobDefinitionEksEmptyDirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksEmptyDir)(nil)).Elem()
}

func (i JobDefinitionEksEmptyDirArgs) ToJobDefinitionEksEmptyDirOutput() JobDefinitionEksEmptyDirOutput {
	return i.ToJobDefinitionEksEmptyDirOutputWithContext(context.Background())
}

func (i JobDefinitionEksEmptyDirArgs) ToJobDefinitionEksEmptyDirOutputWithContext(ctx context.Context) JobDefinitionEksEmptyDirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksEmptyDirOutput)
}

func (i JobDefinitionEksEmptyDirArgs) ToJobDefinitionEksEmptyDirPtrOutput() JobDefinitionEksEmptyDirPtrOutput {
	return i.ToJobDefinitionEksEmptyDirPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksEmptyDirArgs) ToJobDefinitionEksEmptyDirPtrOutputWithContext(ctx context.Context) JobDefinitionEksEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksEmptyDirOutput).ToJobDefinitionEksEmptyDirPtrOutputWithContext(ctx)
}

// JobDefinitionEksEmptyDirPtrInput is an input type that accepts JobDefinitionEksEmptyDirArgs, JobDefinitionEksEmptyDirPtr and JobDefinitionEksEmptyDirPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksEmptyDirPtrInput` via:
//
//	        JobDefinitionEksEmptyDirArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksEmptyDirPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksEmptyDirPtrOutput() JobDefinitionEksEmptyDirPtrOutput
	ToJobDefinitionEksEmptyDirPtrOutputWithContext(context.Context) JobDefinitionEksEmptyDirPtrOutput
}

type jobDefinitionEksEmptyDirPtrType JobDefinitionEksEmptyDirArgs

func JobDefinitionEksEmptyDirPtr(v *JobDefinitionEksEmptyDirArgs) JobDefinitionEksEmptyDirPtrInput {
	return (*jobDefinitionEksEmptyDirPtrType)(v)
}

func (*jobDefinitionEksEmptyDirPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksEmptyDir)(nil)).Elem()
}

func (i *jobDefinitionEksEmptyDirPtrType) ToJobDefinitionEksEmptyDirPtrOutput() JobDefinitionEksEmptyDirPtrOutput {
	return i.ToJobDefinitionEksEmptyDirPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksEmptyDirPtrType) ToJobDefinitionEksEmptyDirPtrOutputWithContext(ctx context.Context) JobDefinitionEksEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksEmptyDirPtrOutput)
}

type JobDefinitionEksEmptyDirOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksEmptyDirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksEmptyDir)(nil)).Elem()
}

func (o JobDefinitionEksEmptyDirOutput) ToJobDefinitionEksEmptyDirOutput() JobDefinitionEksEmptyDirOutput {
	return o
}

func (o JobDefinitionEksEmptyDirOutput) ToJobDefinitionEksEmptyDirOutputWithContext(ctx context.Context) JobDefinitionEksEmptyDirOutput {
	return o
}

func (o JobDefinitionEksEmptyDirOutput) ToJobDefinitionEksEmptyDirPtrOutput() JobDefinitionEksEmptyDirPtrOutput {
	return o.ToJobDefinitionEksEmptyDirPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksEmptyDirOutput) ToJobDefinitionEksEmptyDirPtrOutputWithContext(ctx context.Context) JobDefinitionEksEmptyDirPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksEmptyDir) *JobDefinitionEksEmptyDir {
		return &v
	}).(JobDefinitionEksEmptyDirPtrOutput)
}

// The medium to store the volume. The default value is an empty string, which uses the storage of the node.
//
// - **""** - *(Default)* Use the disk storage of the node.
// - **"Memory"** - Use the `tmpfs` volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
func (o JobDefinitionEksEmptyDirOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksEmptyDir) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// The maximum size of the volume. By default, there's no maximum size defined.
func (o JobDefinitionEksEmptyDirOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksEmptyDir) *string { return v.SizeLimit }).(pulumi.StringPtrOutput)
}

type JobDefinitionEksEmptyDirPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksEmptyDirPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksEmptyDir)(nil)).Elem()
}

func (o JobDefinitionEksEmptyDirPtrOutput) ToJobDefinitionEksEmptyDirPtrOutput() JobDefinitionEksEmptyDirPtrOutput {
	return o
}

func (o JobDefinitionEksEmptyDirPtrOutput) ToJobDefinitionEksEmptyDirPtrOutputWithContext(ctx context.Context) JobDefinitionEksEmptyDirPtrOutput {
	return o
}

func (o JobDefinitionEksEmptyDirPtrOutput) Elem() JobDefinitionEksEmptyDirOutput {
	return o.ApplyT(func(v *JobDefinitionEksEmptyDir) JobDefinitionEksEmptyDir {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksEmptyDir
		return ret
	}).(JobDefinitionEksEmptyDirOutput)
}

// The medium to store the volume. The default value is an empty string, which uses the storage of the node.
//
// - **""** - *(Default)* Use the disk storage of the node.
// - **"Memory"** - Use the `tmpfs` volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
func (o JobDefinitionEksEmptyDirPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// The maximum size of the volume. By default, there's no maximum size defined.
func (o JobDefinitionEksEmptyDirPtrOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionEksHostPath struct {
	// The path of the file or directory on the host to mount into containers on the pod.
	Path *string `pulumi:"path"`
}

// JobDefinitionEksHostPathInput is an input type that accepts JobDefinitionEksHostPathArgs and JobDefinitionEksHostPathOutput values.
// You can construct a concrete instance of `JobDefinitionEksHostPathInput` via:
//
//	JobDefinitionEksHostPathArgs{...}
type JobDefinitionEksHostPathInput interface {
	pulumi.Input

	ToJobDefinitionEksHostPathOutput() JobDefinitionEksHostPathOutput
	ToJobDefinitionEksHostPathOutputWithContext(context.Context) JobDefinitionEksHostPathOutput
}

type JobDefinitionEksHostPathArgs struct {
	// The path of the file or directory on the host to mount into containers on the pod.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (JobDefinitionEksHostPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksHostPath)(nil)).Elem()
}

func (i JobDefinitionEksHostPathArgs) ToJobDefinitionEksHostPathOutput() JobDefinitionEksHostPathOutput {
	return i.ToJobDefinitionEksHostPathOutputWithContext(context.Background())
}

func (i JobDefinitionEksHostPathArgs) ToJobDefinitionEksHostPathOutputWithContext(ctx context.Context) JobDefinitionEksHostPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksHostPathOutput)
}

func (i JobDefinitionEksHostPathArgs) ToJobDefinitionEksHostPathPtrOutput() JobDefinitionEksHostPathPtrOutput {
	return i.ToJobDefinitionEksHostPathPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksHostPathArgs) ToJobDefinitionEksHostPathPtrOutputWithContext(ctx context.Context) JobDefinitionEksHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksHostPathOutput).ToJobDefinitionEksHostPathPtrOutputWithContext(ctx)
}

// JobDefinitionEksHostPathPtrInput is an input type that accepts JobDefinitionEksHostPathArgs, JobDefinitionEksHostPathPtr and JobDefinitionEksHostPathPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksHostPathPtrInput` via:
//
//	        JobDefinitionEksHostPathArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksHostPathPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksHostPathPtrOutput() JobDefinitionEksHostPathPtrOutput
	ToJobDefinitionEksHostPathPtrOutputWithContext(context.Context) JobDefinitionEksHostPathPtrOutput
}

type jobDefinitionEksHostPathPtrType JobDefinitionEksHostPathArgs

func JobDefinitionEksHostPathPtr(v *JobDefinitionEksHostPathArgs) JobDefinitionEksHostPathPtrInput {
	return (*jobDefinitionEksHostPathPtrType)(v)
}

func (*jobDefinitionEksHostPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksHostPath)(nil)).Elem()
}

func (i *jobDefinitionEksHostPathPtrType) ToJobDefinitionEksHostPathPtrOutput() JobDefinitionEksHostPathPtrOutput {
	return i.ToJobDefinitionEksHostPathPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksHostPathPtrType) ToJobDefinitionEksHostPathPtrOutputWithContext(ctx context.Context) JobDefinitionEksHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksHostPathPtrOutput)
}

type JobDefinitionEksHostPathOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksHostPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksHostPath)(nil)).Elem()
}

func (o JobDefinitionEksHostPathOutput) ToJobDefinitionEksHostPathOutput() JobDefinitionEksHostPathOutput {
	return o
}

func (o JobDefinitionEksHostPathOutput) ToJobDefinitionEksHostPathOutputWithContext(ctx context.Context) JobDefinitionEksHostPathOutput {
	return o
}

func (o JobDefinitionEksHostPathOutput) ToJobDefinitionEksHostPathPtrOutput() JobDefinitionEksHostPathPtrOutput {
	return o.ToJobDefinitionEksHostPathPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksHostPathOutput) ToJobDefinitionEksHostPathPtrOutputWithContext(ctx context.Context) JobDefinitionEksHostPathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksHostPath) *JobDefinitionEksHostPath {
		return &v
	}).(JobDefinitionEksHostPathPtrOutput)
}

// The path of the file or directory on the host to mount into containers on the pod.
func (o JobDefinitionEksHostPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksHostPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type JobDefinitionEksHostPathPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksHostPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksHostPath)(nil)).Elem()
}

func (o JobDefinitionEksHostPathPtrOutput) ToJobDefinitionEksHostPathPtrOutput() JobDefinitionEksHostPathPtrOutput {
	return o
}

func (o JobDefinitionEksHostPathPtrOutput) ToJobDefinitionEksHostPathPtrOutputWithContext(ctx context.Context) JobDefinitionEksHostPathPtrOutput {
	return o
}

func (o JobDefinitionEksHostPathPtrOutput) Elem() JobDefinitionEksHostPathOutput {
	return o.ApplyT(func(v *JobDefinitionEksHostPath) JobDefinitionEksHostPath {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksHostPath
		return ret
	}).(JobDefinitionEksHostPathOutput)
}

// The path of the file or directory on the host to mount into containers on the pod.
func (o JobDefinitionEksHostPathPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksHostPath) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionEksMetadata struct {
	// Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).
	//
	// - The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).
	// - The name segment is required and must be 63 characters or less. It can include alphanumeric characters ([a-z0-9A-Z]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.
	//
	// > Annotation values must be 255 characters or less.
	//
	// Annotations can be added or modified at any time. Each resource can have multiple annotations.
	Annotations map[string]string `pulumi:"annotations"`
	// Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.
	Labels map[string]string `pulumi:"labels"`
	// The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. AWS Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:
	//
	// - 1-63 characters long
	// - Can't be set to default
	// - Can't start with `kube`
	// - Must match the following regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`
	//
	// For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the *Kubernetes documentation* . This namespace can be different from the `kubernetesNamespace` set in the compute environment's `EksConfiguration` , but must have identical role-based access control (RBAC) roles as the compute environment's `kubernetesNamespace` . For multi-node parallel jobs, the same value must be provided across all the node ranges.
	Namespace *string `pulumi:"namespace"`
}

// JobDefinitionEksMetadataInput is an input type that accepts JobDefinitionEksMetadataArgs and JobDefinitionEksMetadataOutput values.
// You can construct a concrete instance of `JobDefinitionEksMetadataInput` via:
//
//	JobDefinitionEksMetadataArgs{...}
type JobDefinitionEksMetadataInput interface {
	pulumi.Input

	ToJobDefinitionEksMetadataOutput() JobDefinitionEksMetadataOutput
	ToJobDefinitionEksMetadataOutputWithContext(context.Context) JobDefinitionEksMetadataOutput
}

type JobDefinitionEksMetadataArgs struct {
	// Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).
	//
	// - The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).
	// - The name segment is required and must be 63 characters or less. It can include alphanumeric characters ([a-z0-9A-Z]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.
	//
	// > Annotation values must be 255 characters or less.
	//
	// Annotations can be added or modified at any time. Each resource can have multiple annotations.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. AWS Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:
	//
	// - 1-63 characters long
	// - Can't be set to default
	// - Can't start with `kube`
	// - Must match the following regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`
	//
	// For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the *Kubernetes documentation* . This namespace can be different from the `kubernetesNamespace` set in the compute environment's `EksConfiguration` , but must have identical role-based access control (RBAC) roles as the compute environment's `kubernetesNamespace` . For multi-node parallel jobs, the same value must be provided across all the node ranges.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (JobDefinitionEksMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksMetadata)(nil)).Elem()
}

func (i JobDefinitionEksMetadataArgs) ToJobDefinitionEksMetadataOutput() JobDefinitionEksMetadataOutput {
	return i.ToJobDefinitionEksMetadataOutputWithContext(context.Background())
}

func (i JobDefinitionEksMetadataArgs) ToJobDefinitionEksMetadataOutputWithContext(ctx context.Context) JobDefinitionEksMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksMetadataOutput)
}

func (i JobDefinitionEksMetadataArgs) ToJobDefinitionEksMetadataPtrOutput() JobDefinitionEksMetadataPtrOutput {
	return i.ToJobDefinitionEksMetadataPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksMetadataArgs) ToJobDefinitionEksMetadataPtrOutputWithContext(ctx context.Context) JobDefinitionEksMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksMetadataOutput).ToJobDefinitionEksMetadataPtrOutputWithContext(ctx)
}

// JobDefinitionEksMetadataPtrInput is an input type that accepts JobDefinitionEksMetadataArgs, JobDefinitionEksMetadataPtr and JobDefinitionEksMetadataPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksMetadataPtrInput` via:
//
//	        JobDefinitionEksMetadataArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksMetadataPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksMetadataPtrOutput() JobDefinitionEksMetadataPtrOutput
	ToJobDefinitionEksMetadataPtrOutputWithContext(context.Context) JobDefinitionEksMetadataPtrOutput
}

type jobDefinitionEksMetadataPtrType JobDefinitionEksMetadataArgs

func JobDefinitionEksMetadataPtr(v *JobDefinitionEksMetadataArgs) JobDefinitionEksMetadataPtrInput {
	return (*jobDefinitionEksMetadataPtrType)(v)
}

func (*jobDefinitionEksMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksMetadata)(nil)).Elem()
}

func (i *jobDefinitionEksMetadataPtrType) ToJobDefinitionEksMetadataPtrOutput() JobDefinitionEksMetadataPtrOutput {
	return i.ToJobDefinitionEksMetadataPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksMetadataPtrType) ToJobDefinitionEksMetadataPtrOutputWithContext(ctx context.Context) JobDefinitionEksMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksMetadataPtrOutput)
}

type JobDefinitionEksMetadataOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksMetadata)(nil)).Elem()
}

func (o JobDefinitionEksMetadataOutput) ToJobDefinitionEksMetadataOutput() JobDefinitionEksMetadataOutput {
	return o
}

func (o JobDefinitionEksMetadataOutput) ToJobDefinitionEksMetadataOutputWithContext(ctx context.Context) JobDefinitionEksMetadataOutput {
	return o
}

func (o JobDefinitionEksMetadataOutput) ToJobDefinitionEksMetadataPtrOutput() JobDefinitionEksMetadataPtrOutput {
	return o.ToJobDefinitionEksMetadataPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksMetadataOutput) ToJobDefinitionEksMetadataPtrOutputWithContext(ctx context.Context) JobDefinitionEksMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksMetadata) *JobDefinitionEksMetadata {
		return &v
	}).(JobDefinitionEksMetadataPtrOutput)
}

// Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).
//
// - The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).
// - The name segment is required and must be 63 characters or less. It can include alphanumeric characters ([a-z0-9A-Z]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.
//
// > Annotation values must be 255 characters or less.
//
// Annotations can be added or modified at any time. Each resource can have multiple annotations.
func (o JobDefinitionEksMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionEksMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.
func (o JobDefinitionEksMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionEksMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. AWS Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:
//
// - 1-63 characters long
// - Can't be set to default
// - Can't start with `kube`
// - Must match the following regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`
//
// For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the *Kubernetes documentation* . This namespace can be different from the `kubernetesNamespace` set in the compute environment's `EksConfiguration` , but must have identical role-based access control (RBAC) roles as the compute environment's `kubernetesNamespace` . For multi-node parallel jobs, the same value must be provided across all the node ranges.
func (o JobDefinitionEksMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type JobDefinitionEksMetadataPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksMetadata)(nil)).Elem()
}

func (o JobDefinitionEksMetadataPtrOutput) ToJobDefinitionEksMetadataPtrOutput() JobDefinitionEksMetadataPtrOutput {
	return o
}

func (o JobDefinitionEksMetadataPtrOutput) ToJobDefinitionEksMetadataPtrOutputWithContext(ctx context.Context) JobDefinitionEksMetadataPtrOutput {
	return o
}

func (o JobDefinitionEksMetadataPtrOutput) Elem() JobDefinitionEksMetadataOutput {
	return o.ApplyT(func(v *JobDefinitionEksMetadata) JobDefinitionEksMetadata {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksMetadata
		return ret
	}).(JobDefinitionEksMetadataOutput)
}

// Key-value pairs used to attach arbitrary, non-identifying metadata to Kubernetes objects. Valid annotation keys have two segments: an optional prefix and a name, separated by a slash (/).
//
// - The prefix is optional and must be 253 characters or less. If specified, the prefix must be a DNS subdomain− a series of DNS labels separated by dots (.), and it must end with a slash (/).
// - The name segment is required and must be 63 characters or less. It can include alphanumeric characters ([a-z0-9A-Z]), dashes (-), underscores (_), and dots (.), but must begin and end with an alphanumeric character.
//
// > Annotation values must be 255 characters or less.
//
// Annotations can be added or modified at any time. Each resource can have multiple annotations.
func (o JobDefinitionEksMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionEksMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.
func (o JobDefinitionEksMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionEksMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The namespace of the Amazon EKS cluster. In Kubernetes, namespaces provide a mechanism for isolating groups of resources within a single cluster. Names of resources need to be unique within a namespace, but not across namespaces. AWS Batch places Batch Job pods in this namespace. If this field is provided, the value can't be empty or null. It must meet the following requirements:
//
// - 1-63 characters long
// - Can't be set to default
// - Can't start with `kube`
// - Must match the following regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`
//
// For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the *Kubernetes documentation* . This namespace can be different from the `kubernetesNamespace` set in the compute environment's `EksConfiguration` , but must have identical role-based access control (RBAC) roles as the compute environment's `kubernetesNamespace` . For multi-node parallel jobs, the same value must be provided across all the node ranges.
func (o JobDefinitionEksMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionEksPersistentVolumeClaim struct {
	// The name of the `persistentVolumeClaim` bounded to a `persistentVolume` . For more information, see [Persistent Volume Claims](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) in the *Kubernetes documentation* .
	ClaimName string `pulumi:"claimName"`
	// An optional boolean value indicating if the mount is read only. Default is false. For more information, see [Read Only Mounts](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts) in the *Kubernetes documentation* .
	ReadOnly *bool `pulumi:"readOnly"`
}

// JobDefinitionEksPersistentVolumeClaimInput is an input type that accepts JobDefinitionEksPersistentVolumeClaimArgs and JobDefinitionEksPersistentVolumeClaimOutput values.
// You can construct a concrete instance of `JobDefinitionEksPersistentVolumeClaimInput` via:
//
//	JobDefinitionEksPersistentVolumeClaimArgs{...}
type JobDefinitionEksPersistentVolumeClaimInput interface {
	pulumi.Input

	ToJobDefinitionEksPersistentVolumeClaimOutput() JobDefinitionEksPersistentVolumeClaimOutput
	ToJobDefinitionEksPersistentVolumeClaimOutputWithContext(context.Context) JobDefinitionEksPersistentVolumeClaimOutput
}

type JobDefinitionEksPersistentVolumeClaimArgs struct {
	// The name of the `persistentVolumeClaim` bounded to a `persistentVolume` . For more information, see [Persistent Volume Claims](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) in the *Kubernetes documentation* .
	ClaimName pulumi.StringInput `pulumi:"claimName"`
	// An optional boolean value indicating if the mount is read only. Default is false. For more information, see [Read Only Mounts](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts) in the *Kubernetes documentation* .
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (JobDefinitionEksPersistentVolumeClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksPersistentVolumeClaim)(nil)).Elem()
}

func (i JobDefinitionEksPersistentVolumeClaimArgs) ToJobDefinitionEksPersistentVolumeClaimOutput() JobDefinitionEksPersistentVolumeClaimOutput {
	return i.ToJobDefinitionEksPersistentVolumeClaimOutputWithContext(context.Background())
}

func (i JobDefinitionEksPersistentVolumeClaimArgs) ToJobDefinitionEksPersistentVolumeClaimOutputWithContext(ctx context.Context) JobDefinitionEksPersistentVolumeClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPersistentVolumeClaimOutput)
}

func (i JobDefinitionEksPersistentVolumeClaimArgs) ToJobDefinitionEksPersistentVolumeClaimPtrOutput() JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return i.ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksPersistentVolumeClaimArgs) ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPersistentVolumeClaimOutput).ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(ctx)
}

// JobDefinitionEksPersistentVolumeClaimPtrInput is an input type that accepts JobDefinitionEksPersistentVolumeClaimArgs, JobDefinitionEksPersistentVolumeClaimPtr and JobDefinitionEksPersistentVolumeClaimPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksPersistentVolumeClaimPtrInput` via:
//
//	        JobDefinitionEksPersistentVolumeClaimArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksPersistentVolumeClaimPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksPersistentVolumeClaimPtrOutput() JobDefinitionEksPersistentVolumeClaimPtrOutput
	ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(context.Context) JobDefinitionEksPersistentVolumeClaimPtrOutput
}

type jobDefinitionEksPersistentVolumeClaimPtrType JobDefinitionEksPersistentVolumeClaimArgs

func JobDefinitionEksPersistentVolumeClaimPtr(v *JobDefinitionEksPersistentVolumeClaimArgs) JobDefinitionEksPersistentVolumeClaimPtrInput {
	return (*jobDefinitionEksPersistentVolumeClaimPtrType)(v)
}

func (*jobDefinitionEksPersistentVolumeClaimPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksPersistentVolumeClaim)(nil)).Elem()
}

func (i *jobDefinitionEksPersistentVolumeClaimPtrType) ToJobDefinitionEksPersistentVolumeClaimPtrOutput() JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return i.ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksPersistentVolumeClaimPtrType) ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPersistentVolumeClaimPtrOutput)
}

type JobDefinitionEksPersistentVolumeClaimOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksPersistentVolumeClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksPersistentVolumeClaim)(nil)).Elem()
}

func (o JobDefinitionEksPersistentVolumeClaimOutput) ToJobDefinitionEksPersistentVolumeClaimOutput() JobDefinitionEksPersistentVolumeClaimOutput {
	return o
}

func (o JobDefinitionEksPersistentVolumeClaimOutput) ToJobDefinitionEksPersistentVolumeClaimOutputWithContext(ctx context.Context) JobDefinitionEksPersistentVolumeClaimOutput {
	return o
}

func (o JobDefinitionEksPersistentVolumeClaimOutput) ToJobDefinitionEksPersistentVolumeClaimPtrOutput() JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return o.ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksPersistentVolumeClaimOutput) ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksPersistentVolumeClaim) *JobDefinitionEksPersistentVolumeClaim {
		return &v
	}).(JobDefinitionEksPersistentVolumeClaimPtrOutput)
}

// The name of the `persistentVolumeClaim` bounded to a `persistentVolume` . For more information, see [Persistent Volume Claims](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) in the *Kubernetes documentation* .
func (o JobDefinitionEksPersistentVolumeClaimOutput) ClaimName() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionEksPersistentVolumeClaim) string { return v.ClaimName }).(pulumi.StringOutput)
}

// An optional boolean value indicating if the mount is read only. Default is false. For more information, see [Read Only Mounts](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts) in the *Kubernetes documentation* .
func (o JobDefinitionEksPersistentVolumeClaimOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksPersistentVolumeClaim) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type JobDefinitionEksPersistentVolumeClaimPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksPersistentVolumeClaimPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksPersistentVolumeClaim)(nil)).Elem()
}

func (o JobDefinitionEksPersistentVolumeClaimPtrOutput) ToJobDefinitionEksPersistentVolumeClaimPtrOutput() JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return o
}

func (o JobDefinitionEksPersistentVolumeClaimPtrOutput) ToJobDefinitionEksPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return o
}

func (o JobDefinitionEksPersistentVolumeClaimPtrOutput) Elem() JobDefinitionEksPersistentVolumeClaimOutput {
	return o.ApplyT(func(v *JobDefinitionEksPersistentVolumeClaim) JobDefinitionEksPersistentVolumeClaim {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksPersistentVolumeClaim
		return ret
	}).(JobDefinitionEksPersistentVolumeClaimOutput)
}

// The name of the `persistentVolumeClaim` bounded to a `persistentVolume` . For more information, see [Persistent Volume Claims](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) in the *Kubernetes documentation* .
func (o JobDefinitionEksPersistentVolumeClaimPtrOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksPersistentVolumeClaim) *string {
		if v == nil {
			return nil
		}
		return &v.ClaimName
	}).(pulumi.StringPtrOutput)
}

// An optional boolean value indicating if the mount is read only. Default is false. For more information, see [Read Only Mounts](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts) in the *Kubernetes documentation* .
func (o JobDefinitionEksPersistentVolumeClaimPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksPersistentVolumeClaim) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

type JobDefinitionEksPodProperties struct {
	// The properties of the container that's used on the Amazon EKS pod.
	//
	// > This object is limited to 10 elements.
	Containers []JobDefinitionEksContainer `pulumi:"containers"`
	// The DNS policy for the pod. The default value is `ClusterFirst` . If the `hostNetwork` parameter is not specified, the default is `ClusterFirstWithHostNet` . `ClusterFirst` indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see [Pod's DNS policy](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the *Kubernetes documentation* .
	//
	// Valid values: `Default` | `ClusterFirst` | `ClusterFirstWithHostNet`
	DnsPolicy *string `pulumi:"dnsPolicy"`
	// Indicates if the pod uses the hosts' network IP address. The default value is `true` . Setting this to `false` enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the *Kubernetes documentation* .
	HostNetwork *bool `pulumi:"hostNetwork"`
	// References a Kubernetes secret resource. It holds a list of secrets. These secrets help to gain access to pull an images from a private registry.
	//
	// `ImagePullSecret$name` is required when this object is used.
	ImagePullSecrets []JobDefinitionImagePullSecret `pulumi:"imagePullSecrets"`
	// These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. For more information, see [Init Containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) in the *Kubernetes documentation* .
	//
	// > This object is limited to 10 elements.
	InitContainers []JobDefinitionEksContainer `pulumi:"initContainers"`
	// Metadata about the Kubernetes pod. For more information, see [Understanding Kubernetes Objects](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the *Kubernetes documentation* .
	Metadata *JobDefinitionEksMetadata `pulumi:"metadata"`
	// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the *Amazon EKS User Guide* and [Configure service accounts for pods](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the *Kubernetes documentation* .
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see [Share Process Namespace between Containers in a Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/) .
	ShareProcessNamespace *bool `pulumi:"shareProcessNamespace"`
	// Specifies the volumes for a job definition that uses Amazon EKS resources.
	Volumes []JobDefinitionEksVolume `pulumi:"volumes"`
}

// JobDefinitionEksPodPropertiesInput is an input type that accepts JobDefinitionEksPodPropertiesArgs and JobDefinitionEksPodPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionEksPodPropertiesInput` via:
//
//	JobDefinitionEksPodPropertiesArgs{...}
type JobDefinitionEksPodPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionEksPodPropertiesOutput() JobDefinitionEksPodPropertiesOutput
	ToJobDefinitionEksPodPropertiesOutputWithContext(context.Context) JobDefinitionEksPodPropertiesOutput
}

type JobDefinitionEksPodPropertiesArgs struct {
	// The properties of the container that's used on the Amazon EKS pod.
	//
	// > This object is limited to 10 elements.
	Containers JobDefinitionEksContainerArrayInput `pulumi:"containers"`
	// The DNS policy for the pod. The default value is `ClusterFirst` . If the `hostNetwork` parameter is not specified, the default is `ClusterFirstWithHostNet` . `ClusterFirst` indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see [Pod's DNS policy](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the *Kubernetes documentation* .
	//
	// Valid values: `Default` | `ClusterFirst` | `ClusterFirstWithHostNet`
	DnsPolicy pulumi.StringPtrInput `pulumi:"dnsPolicy"`
	// Indicates if the pod uses the hosts' network IP address. The default value is `true` . Setting this to `false` enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the *Kubernetes documentation* .
	HostNetwork pulumi.BoolPtrInput `pulumi:"hostNetwork"`
	// References a Kubernetes secret resource. It holds a list of secrets. These secrets help to gain access to pull an images from a private registry.
	//
	// `ImagePullSecret$name` is required when this object is used.
	ImagePullSecrets JobDefinitionImagePullSecretArrayInput `pulumi:"imagePullSecrets"`
	// These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. For more information, see [Init Containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) in the *Kubernetes documentation* .
	//
	// > This object is limited to 10 elements.
	InitContainers JobDefinitionEksContainerArrayInput `pulumi:"initContainers"`
	// Metadata about the Kubernetes pod. For more information, see [Understanding Kubernetes Objects](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the *Kubernetes documentation* .
	Metadata JobDefinitionEksMetadataPtrInput `pulumi:"metadata"`
	// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the *Amazon EKS User Guide* and [Configure service accounts for pods](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the *Kubernetes documentation* .
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see [Share Process Namespace between Containers in a Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/) .
	ShareProcessNamespace pulumi.BoolPtrInput `pulumi:"shareProcessNamespace"`
	// Specifies the volumes for a job definition that uses Amazon EKS resources.
	Volumes JobDefinitionEksVolumeArrayInput `pulumi:"volumes"`
}

func (JobDefinitionEksPodPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksPodProperties)(nil)).Elem()
}

func (i JobDefinitionEksPodPropertiesArgs) ToJobDefinitionEksPodPropertiesOutput() JobDefinitionEksPodPropertiesOutput {
	return i.ToJobDefinitionEksPodPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionEksPodPropertiesArgs) ToJobDefinitionEksPodPropertiesOutputWithContext(ctx context.Context) JobDefinitionEksPodPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPodPropertiesOutput)
}

func (i JobDefinitionEksPodPropertiesArgs) ToJobDefinitionEksPodPropertiesPtrOutput() JobDefinitionEksPodPropertiesPtrOutput {
	return i.ToJobDefinitionEksPodPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksPodPropertiesArgs) ToJobDefinitionEksPodPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPodPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPodPropertiesOutput).ToJobDefinitionEksPodPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionEksPodPropertiesPtrInput is an input type that accepts JobDefinitionEksPodPropertiesArgs, JobDefinitionEksPodPropertiesPtr and JobDefinitionEksPodPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksPodPropertiesPtrInput` via:
//
//	        JobDefinitionEksPodPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksPodPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksPodPropertiesPtrOutput() JobDefinitionEksPodPropertiesPtrOutput
	ToJobDefinitionEksPodPropertiesPtrOutputWithContext(context.Context) JobDefinitionEksPodPropertiesPtrOutput
}

type jobDefinitionEksPodPropertiesPtrType JobDefinitionEksPodPropertiesArgs

func JobDefinitionEksPodPropertiesPtr(v *JobDefinitionEksPodPropertiesArgs) JobDefinitionEksPodPropertiesPtrInput {
	return (*jobDefinitionEksPodPropertiesPtrType)(v)
}

func (*jobDefinitionEksPodPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksPodProperties)(nil)).Elem()
}

func (i *jobDefinitionEksPodPropertiesPtrType) ToJobDefinitionEksPodPropertiesPtrOutput() JobDefinitionEksPodPropertiesPtrOutput {
	return i.ToJobDefinitionEksPodPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksPodPropertiesPtrType) ToJobDefinitionEksPodPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPodPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPodPropertiesPtrOutput)
}

type JobDefinitionEksPodPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksPodPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksPodProperties)(nil)).Elem()
}

func (o JobDefinitionEksPodPropertiesOutput) ToJobDefinitionEksPodPropertiesOutput() JobDefinitionEksPodPropertiesOutput {
	return o
}

func (o JobDefinitionEksPodPropertiesOutput) ToJobDefinitionEksPodPropertiesOutputWithContext(ctx context.Context) JobDefinitionEksPodPropertiesOutput {
	return o
}

func (o JobDefinitionEksPodPropertiesOutput) ToJobDefinitionEksPodPropertiesPtrOutput() JobDefinitionEksPodPropertiesPtrOutput {
	return o.ToJobDefinitionEksPodPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksPodPropertiesOutput) ToJobDefinitionEksPodPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPodPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksPodProperties) *JobDefinitionEksPodProperties {
		return &v
	}).(JobDefinitionEksPodPropertiesPtrOutput)
}

// The properties of the container that's used on the Amazon EKS pod.
//
// > This object is limited to 10 elements.
func (o JobDefinitionEksPodPropertiesOutput) Containers() JobDefinitionEksContainerArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) []JobDefinitionEksContainer { return v.Containers }).(JobDefinitionEksContainerArrayOutput)
}

// The DNS policy for the pod. The default value is `ClusterFirst` . If the `hostNetwork` parameter is not specified, the default is `ClusterFirstWithHostNet` . `ClusterFirst` indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see [Pod's DNS policy](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the *Kubernetes documentation* .
//
// Valid values: `Default` | `ClusterFirst` | `ClusterFirstWithHostNet`
func (o JobDefinitionEksPodPropertiesOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) *string { return v.DnsPolicy }).(pulumi.StringPtrOutput)
}

// Indicates if the pod uses the hosts' network IP address. The default value is `true` . Setting this to `false` enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the *Kubernetes documentation* .
func (o JobDefinitionEksPodPropertiesOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

// References a Kubernetes secret resource. It holds a list of secrets. These secrets help to gain access to pull an images from a private registry.
//
// `ImagePullSecret$name` is required when this object is used.
func (o JobDefinitionEksPodPropertiesOutput) ImagePullSecrets() JobDefinitionImagePullSecretArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) []JobDefinitionImagePullSecret { return v.ImagePullSecrets }).(JobDefinitionImagePullSecretArrayOutput)
}

// These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. For more information, see [Init Containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) in the *Kubernetes documentation* .
//
// > This object is limited to 10 elements.
func (o JobDefinitionEksPodPropertiesOutput) InitContainers() JobDefinitionEksContainerArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) []JobDefinitionEksContainer { return v.InitContainers }).(JobDefinitionEksContainerArrayOutput)
}

// Metadata about the Kubernetes pod. For more information, see [Understanding Kubernetes Objects](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the *Kubernetes documentation* .
func (o JobDefinitionEksPodPropertiesOutput) Metadata() JobDefinitionEksMetadataPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) *JobDefinitionEksMetadata { return v.Metadata }).(JobDefinitionEksMetadataPtrOutput)
}

// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the *Amazon EKS User Guide* and [Configure service accounts for pods](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the *Kubernetes documentation* .
func (o JobDefinitionEksPodPropertiesOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see [Share Process Namespace between Containers in a Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/) .
func (o JobDefinitionEksPodPropertiesOutput) ShareProcessNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) *bool { return v.ShareProcessNamespace }).(pulumi.BoolPtrOutput)
}

// Specifies the volumes for a job definition that uses Amazon EKS resources.
func (o JobDefinitionEksPodPropertiesOutput) Volumes() JobDefinitionEksVolumeArrayOutput {
	return o.ApplyT(func(v JobDefinitionEksPodProperties) []JobDefinitionEksVolume { return v.Volumes }).(JobDefinitionEksVolumeArrayOutput)
}

type JobDefinitionEksPodPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksPodPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksPodProperties)(nil)).Elem()
}

func (o JobDefinitionEksPodPropertiesPtrOutput) ToJobDefinitionEksPodPropertiesPtrOutput() JobDefinitionEksPodPropertiesPtrOutput {
	return o
}

func (o JobDefinitionEksPodPropertiesPtrOutput) ToJobDefinitionEksPodPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPodPropertiesPtrOutput {
	return o
}

func (o JobDefinitionEksPodPropertiesPtrOutput) Elem() JobDefinitionEksPodPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) JobDefinitionEksPodProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksPodProperties
		return ret
	}).(JobDefinitionEksPodPropertiesOutput)
}

// The properties of the container that's used on the Amazon EKS pod.
//
// > This object is limited to 10 elements.
func (o JobDefinitionEksPodPropertiesPtrOutput) Containers() JobDefinitionEksContainerArrayOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) []JobDefinitionEksContainer {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(JobDefinitionEksContainerArrayOutput)
}

// The DNS policy for the pod. The default value is `ClusterFirst` . If the `hostNetwork` parameter is not specified, the default is `ClusterFirstWithHostNet` . `ClusterFirst` indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see [Pod's DNS policy](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the *Kubernetes documentation* .
//
// Valid values: `Default` | `ClusterFirst` | `ClusterFirstWithHostNet`
func (o JobDefinitionEksPodPropertiesPtrOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) *string {
		if v == nil {
			return nil
		}
		return v.DnsPolicy
	}).(pulumi.StringPtrOutput)
}

// Indicates if the pod uses the hosts' network IP address. The default value is `true` . Setting this to `false` enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the *Kubernetes documentation* .
func (o JobDefinitionEksPodPropertiesPtrOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) *bool {
		if v == nil {
			return nil
		}
		return v.HostNetwork
	}).(pulumi.BoolPtrOutput)
}

// References a Kubernetes secret resource. It holds a list of secrets. These secrets help to gain access to pull an images from a private registry.
//
// `ImagePullSecret$name` is required when this object is used.
func (o JobDefinitionEksPodPropertiesPtrOutput) ImagePullSecrets() JobDefinitionImagePullSecretArrayOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) []JobDefinitionImagePullSecret {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(JobDefinitionImagePullSecretArrayOutput)
}

// These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. For more information, see [Init Containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) in the *Kubernetes documentation* .
//
// > This object is limited to 10 elements.
func (o JobDefinitionEksPodPropertiesPtrOutput) InitContainers() JobDefinitionEksContainerArrayOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) []JobDefinitionEksContainer {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(JobDefinitionEksContainerArrayOutput)
}

// Metadata about the Kubernetes pod. For more information, see [Understanding Kubernetes Objects](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the *Kubernetes documentation* .
func (o JobDefinitionEksPodPropertiesPtrOutput) Metadata() JobDefinitionEksMetadataPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) *JobDefinitionEksMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(JobDefinitionEksMetadataPtrOutput)
}

// The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the *Amazon EKS User Guide* and [Configure service accounts for pods](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the *Kubernetes documentation* .
func (o JobDefinitionEksPodPropertiesPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see [Share Process Namespace between Containers in a Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/) .
func (o JobDefinitionEksPodPropertiesPtrOutput) ShareProcessNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ShareProcessNamespace
	}).(pulumi.BoolPtrOutput)
}

// Specifies the volumes for a job definition that uses Amazon EKS resources.
func (o JobDefinitionEksPodPropertiesPtrOutput) Volumes() JobDefinitionEksVolumeArrayOutput {
	return o.ApplyT(func(v *JobDefinitionEksPodProperties) []JobDefinitionEksVolume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(JobDefinitionEksVolumeArrayOutput)
}

type JobDefinitionEksProperties struct {
	// The properties for the Kubernetes pod resources of a job.
	PodProperties *JobDefinitionEksPodProperties `pulumi:"podProperties"`
}

// JobDefinitionEksPropertiesInput is an input type that accepts JobDefinitionEksPropertiesArgs and JobDefinitionEksPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionEksPropertiesInput` via:
//
//	JobDefinitionEksPropertiesArgs{...}
type JobDefinitionEksPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionEksPropertiesOutput() JobDefinitionEksPropertiesOutput
	ToJobDefinitionEksPropertiesOutputWithContext(context.Context) JobDefinitionEksPropertiesOutput
}

type JobDefinitionEksPropertiesArgs struct {
	// The properties for the Kubernetes pod resources of a job.
	PodProperties JobDefinitionEksPodPropertiesPtrInput `pulumi:"podProperties"`
}

func (JobDefinitionEksPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksProperties)(nil)).Elem()
}

func (i JobDefinitionEksPropertiesArgs) ToJobDefinitionEksPropertiesOutput() JobDefinitionEksPropertiesOutput {
	return i.ToJobDefinitionEksPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionEksPropertiesArgs) ToJobDefinitionEksPropertiesOutputWithContext(ctx context.Context) JobDefinitionEksPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPropertiesOutput)
}

func (i JobDefinitionEksPropertiesArgs) ToJobDefinitionEksPropertiesPtrOutput() JobDefinitionEksPropertiesPtrOutput {
	return i.ToJobDefinitionEksPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksPropertiesArgs) ToJobDefinitionEksPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPropertiesOutput).ToJobDefinitionEksPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionEksPropertiesPtrInput is an input type that accepts JobDefinitionEksPropertiesArgs, JobDefinitionEksPropertiesPtr and JobDefinitionEksPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksPropertiesPtrInput` via:
//
//	        JobDefinitionEksPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksPropertiesPtrOutput() JobDefinitionEksPropertiesPtrOutput
	ToJobDefinitionEksPropertiesPtrOutputWithContext(context.Context) JobDefinitionEksPropertiesPtrOutput
}

type jobDefinitionEksPropertiesPtrType JobDefinitionEksPropertiesArgs

func JobDefinitionEksPropertiesPtr(v *JobDefinitionEksPropertiesArgs) JobDefinitionEksPropertiesPtrInput {
	return (*jobDefinitionEksPropertiesPtrType)(v)
}

func (*jobDefinitionEksPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksProperties)(nil)).Elem()
}

func (i *jobDefinitionEksPropertiesPtrType) ToJobDefinitionEksPropertiesPtrOutput() JobDefinitionEksPropertiesPtrOutput {
	return i.ToJobDefinitionEksPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksPropertiesPtrType) ToJobDefinitionEksPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksPropertiesPtrOutput)
}

type JobDefinitionEksPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksProperties)(nil)).Elem()
}

func (o JobDefinitionEksPropertiesOutput) ToJobDefinitionEksPropertiesOutput() JobDefinitionEksPropertiesOutput {
	return o
}

func (o JobDefinitionEksPropertiesOutput) ToJobDefinitionEksPropertiesOutputWithContext(ctx context.Context) JobDefinitionEksPropertiesOutput {
	return o
}

func (o JobDefinitionEksPropertiesOutput) ToJobDefinitionEksPropertiesPtrOutput() JobDefinitionEksPropertiesPtrOutput {
	return o.ToJobDefinitionEksPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksPropertiesOutput) ToJobDefinitionEksPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksProperties) *JobDefinitionEksProperties {
		return &v
	}).(JobDefinitionEksPropertiesPtrOutput)
}

// The properties for the Kubernetes pod resources of a job.
func (o JobDefinitionEksPropertiesOutput) PodProperties() JobDefinitionEksPodPropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksProperties) *JobDefinitionEksPodProperties { return v.PodProperties }).(JobDefinitionEksPodPropertiesPtrOutput)
}

type JobDefinitionEksPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksProperties)(nil)).Elem()
}

func (o JobDefinitionEksPropertiesPtrOutput) ToJobDefinitionEksPropertiesPtrOutput() JobDefinitionEksPropertiesPtrOutput {
	return o
}

func (o JobDefinitionEksPropertiesPtrOutput) ToJobDefinitionEksPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionEksPropertiesPtrOutput {
	return o
}

func (o JobDefinitionEksPropertiesPtrOutput) Elem() JobDefinitionEksPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionEksProperties) JobDefinitionEksProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksProperties
		return ret
	}).(JobDefinitionEksPropertiesOutput)
}

// The properties for the Kubernetes pod resources of a job.
func (o JobDefinitionEksPropertiesPtrOutput) PodProperties() JobDefinitionEksPodPropertiesPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksProperties) *JobDefinitionEksPodProperties {
		if v == nil {
			return nil
		}
		return v.PodProperties
	}).(JobDefinitionEksPodPropertiesPtrOutput)
}

type JobDefinitionEksSecret struct {
	// Specifies whether the secret or the secret's keys must be defined.
	Optional *bool `pulumi:"optional"`
	// The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
	SecretName string `pulumi:"secretName"`
}

// JobDefinitionEksSecretInput is an input type that accepts JobDefinitionEksSecretArgs and JobDefinitionEksSecretOutput values.
// You can construct a concrete instance of `JobDefinitionEksSecretInput` via:
//
//	JobDefinitionEksSecretArgs{...}
type JobDefinitionEksSecretInput interface {
	pulumi.Input

	ToJobDefinitionEksSecretOutput() JobDefinitionEksSecretOutput
	ToJobDefinitionEksSecretOutputWithContext(context.Context) JobDefinitionEksSecretOutput
}

type JobDefinitionEksSecretArgs struct {
	// Specifies whether the secret or the secret's keys must be defined.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (JobDefinitionEksSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksSecret)(nil)).Elem()
}

func (i JobDefinitionEksSecretArgs) ToJobDefinitionEksSecretOutput() JobDefinitionEksSecretOutput {
	return i.ToJobDefinitionEksSecretOutputWithContext(context.Background())
}

func (i JobDefinitionEksSecretArgs) ToJobDefinitionEksSecretOutputWithContext(ctx context.Context) JobDefinitionEksSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksSecretOutput)
}

func (i JobDefinitionEksSecretArgs) ToJobDefinitionEksSecretPtrOutput() JobDefinitionEksSecretPtrOutput {
	return i.ToJobDefinitionEksSecretPtrOutputWithContext(context.Background())
}

func (i JobDefinitionEksSecretArgs) ToJobDefinitionEksSecretPtrOutputWithContext(ctx context.Context) JobDefinitionEksSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksSecretOutput).ToJobDefinitionEksSecretPtrOutputWithContext(ctx)
}

// JobDefinitionEksSecretPtrInput is an input type that accepts JobDefinitionEksSecretArgs, JobDefinitionEksSecretPtr and JobDefinitionEksSecretPtrOutput values.
// You can construct a concrete instance of `JobDefinitionEksSecretPtrInput` via:
//
//	        JobDefinitionEksSecretArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEksSecretPtrInput interface {
	pulumi.Input

	ToJobDefinitionEksSecretPtrOutput() JobDefinitionEksSecretPtrOutput
	ToJobDefinitionEksSecretPtrOutputWithContext(context.Context) JobDefinitionEksSecretPtrOutput
}

type jobDefinitionEksSecretPtrType JobDefinitionEksSecretArgs

func JobDefinitionEksSecretPtr(v *JobDefinitionEksSecretArgs) JobDefinitionEksSecretPtrInput {
	return (*jobDefinitionEksSecretPtrType)(v)
}

func (*jobDefinitionEksSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksSecret)(nil)).Elem()
}

func (i *jobDefinitionEksSecretPtrType) ToJobDefinitionEksSecretPtrOutput() JobDefinitionEksSecretPtrOutput {
	return i.ToJobDefinitionEksSecretPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEksSecretPtrType) ToJobDefinitionEksSecretPtrOutputWithContext(ctx context.Context) JobDefinitionEksSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksSecretPtrOutput)
}

type JobDefinitionEksSecretOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksSecret)(nil)).Elem()
}

func (o JobDefinitionEksSecretOutput) ToJobDefinitionEksSecretOutput() JobDefinitionEksSecretOutput {
	return o
}

func (o JobDefinitionEksSecretOutput) ToJobDefinitionEksSecretOutputWithContext(ctx context.Context) JobDefinitionEksSecretOutput {
	return o
}

func (o JobDefinitionEksSecretOutput) ToJobDefinitionEksSecretPtrOutput() JobDefinitionEksSecretPtrOutput {
	return o.ToJobDefinitionEksSecretPtrOutputWithContext(context.Background())
}

func (o JobDefinitionEksSecretOutput) ToJobDefinitionEksSecretPtrOutputWithContext(ctx context.Context) JobDefinitionEksSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEksSecret) *JobDefinitionEksSecret {
		return &v
	}).(JobDefinitionEksSecretPtrOutput)
}

// Specifies whether the secret or the secret's keys must be defined.
func (o JobDefinitionEksSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
func (o JobDefinitionEksSecretOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionEksSecret) string { return v.SecretName }).(pulumi.StringOutput)
}

type JobDefinitionEksSecretPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEksSecret)(nil)).Elem()
}

func (o JobDefinitionEksSecretPtrOutput) ToJobDefinitionEksSecretPtrOutput() JobDefinitionEksSecretPtrOutput {
	return o
}

func (o JobDefinitionEksSecretPtrOutput) ToJobDefinitionEksSecretPtrOutputWithContext(ctx context.Context) JobDefinitionEksSecretPtrOutput {
	return o
}

func (o JobDefinitionEksSecretPtrOutput) Elem() JobDefinitionEksSecretOutput {
	return o.ApplyT(func(v *JobDefinitionEksSecret) JobDefinitionEksSecret {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEksSecret
		return ret
	}).(JobDefinitionEksSecretOutput)
}

// Specifies whether the secret or the secret's keys must be defined.
func (o JobDefinitionEksSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
func (o JobDefinitionEksSecretPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEksSecret) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionEksVolume struct {
	// Specifies the configuration of a Kubernetes `emptyDir` volume. For more information, see [emptyDir](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the *Kubernetes documentation* .
	EmptyDir *JobDefinitionEksEmptyDir `pulumi:"emptyDir"`
	// Specifies the configuration of a Kubernetes `hostPath` volume. For more information, see [hostPath](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the *Kubernetes documentation* .
	HostPath *JobDefinitionEksHostPath `pulumi:"hostPath"`
	// The name of the volume. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
	Name string `pulumi:"name"`
	// Specifies the configuration of a Kubernetes `persistentVolumeClaim` bounded to a `persistentVolume` . For more information, see [Persistent Volume Claims](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) in the *Kubernetes documentation* .
	PersistentVolumeClaim *JobDefinitionEksPersistentVolumeClaim `pulumi:"persistentVolumeClaim"`
	// Specifies the configuration of a Kubernetes `secret` volume. For more information, see [secret](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the *Kubernetes documentation* .
	Secret *JobDefinitionEksSecret `pulumi:"secret"`
}

// JobDefinitionEksVolumeInput is an input type that accepts JobDefinitionEksVolumeArgs and JobDefinitionEksVolumeOutput values.
// You can construct a concrete instance of `JobDefinitionEksVolumeInput` via:
//
//	JobDefinitionEksVolumeArgs{...}
type JobDefinitionEksVolumeInput interface {
	pulumi.Input

	ToJobDefinitionEksVolumeOutput() JobDefinitionEksVolumeOutput
	ToJobDefinitionEksVolumeOutputWithContext(context.Context) JobDefinitionEksVolumeOutput
}

type JobDefinitionEksVolumeArgs struct {
	// Specifies the configuration of a Kubernetes `emptyDir` volume. For more information, see [emptyDir](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the *Kubernetes documentation* .
	EmptyDir JobDefinitionEksEmptyDirPtrInput `pulumi:"emptyDir"`
	// Specifies the configuration of a Kubernetes `hostPath` volume. For more information, see [hostPath](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the *Kubernetes documentation* .
	HostPath JobDefinitionEksHostPathPtrInput `pulumi:"hostPath"`
	// The name of the volume. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the configuration of a Kubernetes `persistentVolumeClaim` bounded to a `persistentVolume` . For more information, see [Persistent Volume Claims](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) in the *Kubernetes documentation* .
	PersistentVolumeClaim JobDefinitionEksPersistentVolumeClaimPtrInput `pulumi:"persistentVolumeClaim"`
	// Specifies the configuration of a Kubernetes `secret` volume. For more information, see [secret](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the *Kubernetes documentation* .
	Secret JobDefinitionEksSecretPtrInput `pulumi:"secret"`
}

func (JobDefinitionEksVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksVolume)(nil)).Elem()
}

func (i JobDefinitionEksVolumeArgs) ToJobDefinitionEksVolumeOutput() JobDefinitionEksVolumeOutput {
	return i.ToJobDefinitionEksVolumeOutputWithContext(context.Background())
}

func (i JobDefinitionEksVolumeArgs) ToJobDefinitionEksVolumeOutputWithContext(ctx context.Context) JobDefinitionEksVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksVolumeOutput)
}

// JobDefinitionEksVolumeArrayInput is an input type that accepts JobDefinitionEksVolumeArray and JobDefinitionEksVolumeArrayOutput values.
// You can construct a concrete instance of `JobDefinitionEksVolumeArrayInput` via:
//
//	JobDefinitionEksVolumeArray{ JobDefinitionEksVolumeArgs{...} }
type JobDefinitionEksVolumeArrayInput interface {
	pulumi.Input

	ToJobDefinitionEksVolumeArrayOutput() JobDefinitionEksVolumeArrayOutput
	ToJobDefinitionEksVolumeArrayOutputWithContext(context.Context) JobDefinitionEksVolumeArrayOutput
}

type JobDefinitionEksVolumeArray []JobDefinitionEksVolumeInput

func (JobDefinitionEksVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksVolume)(nil)).Elem()
}

func (i JobDefinitionEksVolumeArray) ToJobDefinitionEksVolumeArrayOutput() JobDefinitionEksVolumeArrayOutput {
	return i.ToJobDefinitionEksVolumeArrayOutputWithContext(context.Background())
}

func (i JobDefinitionEksVolumeArray) ToJobDefinitionEksVolumeArrayOutputWithContext(ctx context.Context) JobDefinitionEksVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEksVolumeArrayOutput)
}

type JobDefinitionEksVolumeOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEksVolume)(nil)).Elem()
}

func (o JobDefinitionEksVolumeOutput) ToJobDefinitionEksVolumeOutput() JobDefinitionEksVolumeOutput {
	return o
}

func (o JobDefinitionEksVolumeOutput) ToJobDefinitionEksVolumeOutputWithContext(ctx context.Context) JobDefinitionEksVolumeOutput {
	return o
}

// Specifies the configuration of a Kubernetes `emptyDir` volume. For more information, see [emptyDir](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the *Kubernetes documentation* .
func (o JobDefinitionEksVolumeOutput) EmptyDir() JobDefinitionEksEmptyDirPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksVolume) *JobDefinitionEksEmptyDir { return v.EmptyDir }).(JobDefinitionEksEmptyDirPtrOutput)
}

// Specifies the configuration of a Kubernetes `hostPath` volume. For more information, see [hostPath](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the *Kubernetes documentation* .
func (o JobDefinitionEksVolumeOutput) HostPath() JobDefinitionEksHostPathPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksVolume) *JobDefinitionEksHostPath { return v.HostPath }).(JobDefinitionEksHostPathPtrOutput)
}

// The name of the volume. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
func (o JobDefinitionEksVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionEksVolume) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the configuration of a Kubernetes `persistentVolumeClaim` bounded to a `persistentVolume` . For more information, see [Persistent Volume Claims](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims) in the *Kubernetes documentation* .
func (o JobDefinitionEksVolumeOutput) PersistentVolumeClaim() JobDefinitionEksPersistentVolumeClaimPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksVolume) *JobDefinitionEksPersistentVolumeClaim { return v.PersistentVolumeClaim }).(JobDefinitionEksPersistentVolumeClaimPtrOutput)
}

// Specifies the configuration of a Kubernetes `secret` volume. For more information, see [secret](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the *Kubernetes documentation* .
func (o JobDefinitionEksVolumeOutput) Secret() JobDefinitionEksSecretPtrOutput {
	return o.ApplyT(func(v JobDefinitionEksVolume) *JobDefinitionEksSecret { return v.Secret }).(JobDefinitionEksSecretPtrOutput)
}

type JobDefinitionEksVolumeArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionEksVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEksVolume)(nil)).Elem()
}

func (o JobDefinitionEksVolumeArrayOutput) ToJobDefinitionEksVolumeArrayOutput() JobDefinitionEksVolumeArrayOutput {
	return o
}

func (o JobDefinitionEksVolumeArrayOutput) ToJobDefinitionEksVolumeArrayOutputWithContext(ctx context.Context) JobDefinitionEksVolumeArrayOutput {
	return o
}

func (o JobDefinitionEksVolumeArrayOutput) Index(i pulumi.IntInput) JobDefinitionEksVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionEksVolume {
		return vs[0].([]JobDefinitionEksVolume)[vs[1].(int)]
	}).(JobDefinitionEksVolumeOutput)
}

type JobDefinitionEnvironment struct {
	// The name of the environment variable.
	Name *string `pulumi:"name"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// JobDefinitionEnvironmentInput is an input type that accepts JobDefinitionEnvironmentArgs and JobDefinitionEnvironmentOutput values.
// You can construct a concrete instance of `JobDefinitionEnvironmentInput` via:
//
//	JobDefinitionEnvironmentArgs{...}
type JobDefinitionEnvironmentInput interface {
	pulumi.Input

	ToJobDefinitionEnvironmentOutput() JobDefinitionEnvironmentOutput
	ToJobDefinitionEnvironmentOutputWithContext(context.Context) JobDefinitionEnvironmentOutput
}

type JobDefinitionEnvironmentArgs struct {
	// The name of the environment variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (JobDefinitionEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEnvironment)(nil)).Elem()
}

func (i JobDefinitionEnvironmentArgs) ToJobDefinitionEnvironmentOutput() JobDefinitionEnvironmentOutput {
	return i.ToJobDefinitionEnvironmentOutputWithContext(context.Background())
}

func (i JobDefinitionEnvironmentArgs) ToJobDefinitionEnvironmentOutputWithContext(ctx context.Context) JobDefinitionEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEnvironmentOutput)
}

// JobDefinitionEnvironmentArrayInput is an input type that accepts JobDefinitionEnvironmentArray and JobDefinitionEnvironmentArrayOutput values.
// You can construct a concrete instance of `JobDefinitionEnvironmentArrayInput` via:
//
//	JobDefinitionEnvironmentArray{ JobDefinitionEnvironmentArgs{...} }
type JobDefinitionEnvironmentArrayInput interface {
	pulumi.Input

	ToJobDefinitionEnvironmentArrayOutput() JobDefinitionEnvironmentArrayOutput
	ToJobDefinitionEnvironmentArrayOutputWithContext(context.Context) JobDefinitionEnvironmentArrayOutput
}

type JobDefinitionEnvironmentArray []JobDefinitionEnvironmentInput

func (JobDefinitionEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEnvironment)(nil)).Elem()
}

func (i JobDefinitionEnvironmentArray) ToJobDefinitionEnvironmentArrayOutput() JobDefinitionEnvironmentArrayOutput {
	return i.ToJobDefinitionEnvironmentArrayOutputWithContext(context.Background())
}

func (i JobDefinitionEnvironmentArray) ToJobDefinitionEnvironmentArrayOutputWithContext(ctx context.Context) JobDefinitionEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEnvironmentArrayOutput)
}

type JobDefinitionEnvironmentOutput struct{ *pulumi.OutputState }

func (JobDefinitionEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEnvironment)(nil)).Elem()
}

func (o JobDefinitionEnvironmentOutput) ToJobDefinitionEnvironmentOutput() JobDefinitionEnvironmentOutput {
	return o
}

func (o JobDefinitionEnvironmentOutput) ToJobDefinitionEnvironmentOutputWithContext(ctx context.Context) JobDefinitionEnvironmentOutput {
	return o
}

// The name of the environment variable.
func (o JobDefinitionEnvironmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEnvironment) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o JobDefinitionEnvironmentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEnvironment) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type JobDefinitionEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEnvironment)(nil)).Elem()
}

func (o JobDefinitionEnvironmentArrayOutput) ToJobDefinitionEnvironmentArrayOutput() JobDefinitionEnvironmentArrayOutput {
	return o
}

func (o JobDefinitionEnvironmentArrayOutput) ToJobDefinitionEnvironmentArrayOutputWithContext(ctx context.Context) JobDefinitionEnvironmentArrayOutput {
	return o
}

func (o JobDefinitionEnvironmentArrayOutput) Index(i pulumi.IntInput) JobDefinitionEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionEnvironment {
		return vs[0].([]JobDefinitionEnvironment)[vs[1].(int)]
	}).(JobDefinitionEnvironmentOutput)
}

type JobDefinitionEphemeralStorage struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
	SizeInGiB int `pulumi:"sizeInGiB"`
}

// JobDefinitionEphemeralStorageInput is an input type that accepts JobDefinitionEphemeralStorageArgs and JobDefinitionEphemeralStorageOutput values.
// You can construct a concrete instance of `JobDefinitionEphemeralStorageInput` via:
//
//	JobDefinitionEphemeralStorageArgs{...}
type JobDefinitionEphemeralStorageInput interface {
	pulumi.Input

	ToJobDefinitionEphemeralStorageOutput() JobDefinitionEphemeralStorageOutput
	ToJobDefinitionEphemeralStorageOutputWithContext(context.Context) JobDefinitionEphemeralStorageOutput
}

type JobDefinitionEphemeralStorageArgs struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
	SizeInGiB pulumi.IntInput `pulumi:"sizeInGiB"`
}

func (JobDefinitionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEphemeralStorage)(nil)).Elem()
}

func (i JobDefinitionEphemeralStorageArgs) ToJobDefinitionEphemeralStorageOutput() JobDefinitionEphemeralStorageOutput {
	return i.ToJobDefinitionEphemeralStorageOutputWithContext(context.Background())
}

func (i JobDefinitionEphemeralStorageArgs) ToJobDefinitionEphemeralStorageOutputWithContext(ctx context.Context) JobDefinitionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEphemeralStorageOutput)
}

func (i JobDefinitionEphemeralStorageArgs) ToJobDefinitionEphemeralStoragePtrOutput() JobDefinitionEphemeralStoragePtrOutput {
	return i.ToJobDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i JobDefinitionEphemeralStorageArgs) ToJobDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) JobDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEphemeralStorageOutput).ToJobDefinitionEphemeralStoragePtrOutputWithContext(ctx)
}

// JobDefinitionEphemeralStoragePtrInput is an input type that accepts JobDefinitionEphemeralStorageArgs, JobDefinitionEphemeralStoragePtr and JobDefinitionEphemeralStoragePtrOutput values.
// You can construct a concrete instance of `JobDefinitionEphemeralStoragePtrInput` via:
//
//	        JobDefinitionEphemeralStorageArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionEphemeralStoragePtrInput interface {
	pulumi.Input

	ToJobDefinitionEphemeralStoragePtrOutput() JobDefinitionEphemeralStoragePtrOutput
	ToJobDefinitionEphemeralStoragePtrOutputWithContext(context.Context) JobDefinitionEphemeralStoragePtrOutput
}

type jobDefinitionEphemeralStoragePtrType JobDefinitionEphemeralStorageArgs

func JobDefinitionEphemeralStoragePtr(v *JobDefinitionEphemeralStorageArgs) JobDefinitionEphemeralStoragePtrInput {
	return (*jobDefinitionEphemeralStoragePtrType)(v)
}

func (*jobDefinitionEphemeralStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEphemeralStorage)(nil)).Elem()
}

func (i *jobDefinitionEphemeralStoragePtrType) ToJobDefinitionEphemeralStoragePtrOutput() JobDefinitionEphemeralStoragePtrOutput {
	return i.ToJobDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i *jobDefinitionEphemeralStoragePtrType) ToJobDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) JobDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEphemeralStoragePtrOutput)
}

type JobDefinitionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (JobDefinitionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEphemeralStorage)(nil)).Elem()
}

func (o JobDefinitionEphemeralStorageOutput) ToJobDefinitionEphemeralStorageOutput() JobDefinitionEphemeralStorageOutput {
	return o
}

func (o JobDefinitionEphemeralStorageOutput) ToJobDefinitionEphemeralStorageOutputWithContext(ctx context.Context) JobDefinitionEphemeralStorageOutput {
	return o
}

func (o JobDefinitionEphemeralStorageOutput) ToJobDefinitionEphemeralStoragePtrOutput() JobDefinitionEphemeralStoragePtrOutput {
	return o.ToJobDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (o JobDefinitionEphemeralStorageOutput) ToJobDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) JobDefinitionEphemeralStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionEphemeralStorage) *JobDefinitionEphemeralStorage {
		return &v
	}).(JobDefinitionEphemeralStoragePtrOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
func (o JobDefinitionEphemeralStorageOutput) SizeInGiB() pulumi.IntOutput {
	return o.ApplyT(func(v JobDefinitionEphemeralStorage) int { return v.SizeInGiB }).(pulumi.IntOutput)
}

type JobDefinitionEphemeralStoragePtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionEphemeralStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionEphemeralStorage)(nil)).Elem()
}

func (o JobDefinitionEphemeralStoragePtrOutput) ToJobDefinitionEphemeralStoragePtrOutput() JobDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o JobDefinitionEphemeralStoragePtrOutput) ToJobDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) JobDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o JobDefinitionEphemeralStoragePtrOutput) Elem() JobDefinitionEphemeralStorageOutput {
	return o.ApplyT(func(v *JobDefinitionEphemeralStorage) JobDefinitionEphemeralStorage {
		if v != nil {
			return *v
		}
		var ret JobDefinitionEphemeralStorage
		return ret
	}).(JobDefinitionEphemeralStorageOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
func (o JobDefinitionEphemeralStoragePtrOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionEphemeralStorage) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGiB
	}).(pulumi.IntPtrOutput)
}

type JobDefinitionEvaluateOnExit struct {
	// Specifies the action to take if all of the specified conditions ( `onStatusReason` , `onReason` , and `onExitCode` ) are met. The values aren't case sensitive.
	Action string `pulumi:"action"`
	// Contains a glob pattern to match against the decimal representation of the `ExitCode` returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match.
	//
	// The string can contain up to 512 characters.
	OnExitCode *string `pulumi:"onExitCode"`
	// Contains a glob pattern to match against the `Reason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
	OnReason *string `pulumi:"onReason"`
	// Contains a glob pattern to match against the `StatusReason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
	OnStatusReason *string `pulumi:"onStatusReason"`
}

// JobDefinitionEvaluateOnExitInput is an input type that accepts JobDefinitionEvaluateOnExitArgs and JobDefinitionEvaluateOnExitOutput values.
// You can construct a concrete instance of `JobDefinitionEvaluateOnExitInput` via:
//
//	JobDefinitionEvaluateOnExitArgs{...}
type JobDefinitionEvaluateOnExitInput interface {
	pulumi.Input

	ToJobDefinitionEvaluateOnExitOutput() JobDefinitionEvaluateOnExitOutput
	ToJobDefinitionEvaluateOnExitOutputWithContext(context.Context) JobDefinitionEvaluateOnExitOutput
}

type JobDefinitionEvaluateOnExitArgs struct {
	// Specifies the action to take if all of the specified conditions ( `onStatusReason` , `onReason` , and `onExitCode` ) are met. The values aren't case sensitive.
	Action pulumi.StringInput `pulumi:"action"`
	// Contains a glob pattern to match against the decimal representation of the `ExitCode` returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match.
	//
	// The string can contain up to 512 characters.
	OnExitCode pulumi.StringPtrInput `pulumi:"onExitCode"`
	// Contains a glob pattern to match against the `Reason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
	OnReason pulumi.StringPtrInput `pulumi:"onReason"`
	// Contains a glob pattern to match against the `StatusReason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
	OnStatusReason pulumi.StringPtrInput `pulumi:"onStatusReason"`
}

func (JobDefinitionEvaluateOnExitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEvaluateOnExit)(nil)).Elem()
}

func (i JobDefinitionEvaluateOnExitArgs) ToJobDefinitionEvaluateOnExitOutput() JobDefinitionEvaluateOnExitOutput {
	return i.ToJobDefinitionEvaluateOnExitOutputWithContext(context.Background())
}

func (i JobDefinitionEvaluateOnExitArgs) ToJobDefinitionEvaluateOnExitOutputWithContext(ctx context.Context) JobDefinitionEvaluateOnExitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEvaluateOnExitOutput)
}

// JobDefinitionEvaluateOnExitArrayInput is an input type that accepts JobDefinitionEvaluateOnExitArray and JobDefinitionEvaluateOnExitArrayOutput values.
// You can construct a concrete instance of `JobDefinitionEvaluateOnExitArrayInput` via:
//
//	JobDefinitionEvaluateOnExitArray{ JobDefinitionEvaluateOnExitArgs{...} }
type JobDefinitionEvaluateOnExitArrayInput interface {
	pulumi.Input

	ToJobDefinitionEvaluateOnExitArrayOutput() JobDefinitionEvaluateOnExitArrayOutput
	ToJobDefinitionEvaluateOnExitArrayOutputWithContext(context.Context) JobDefinitionEvaluateOnExitArrayOutput
}

type JobDefinitionEvaluateOnExitArray []JobDefinitionEvaluateOnExitInput

func (JobDefinitionEvaluateOnExitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEvaluateOnExit)(nil)).Elem()
}

func (i JobDefinitionEvaluateOnExitArray) ToJobDefinitionEvaluateOnExitArrayOutput() JobDefinitionEvaluateOnExitArrayOutput {
	return i.ToJobDefinitionEvaluateOnExitArrayOutputWithContext(context.Background())
}

func (i JobDefinitionEvaluateOnExitArray) ToJobDefinitionEvaluateOnExitArrayOutputWithContext(ctx context.Context) JobDefinitionEvaluateOnExitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionEvaluateOnExitArrayOutput)
}

type JobDefinitionEvaluateOnExitOutput struct{ *pulumi.OutputState }

func (JobDefinitionEvaluateOnExitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionEvaluateOnExit)(nil)).Elem()
}

func (o JobDefinitionEvaluateOnExitOutput) ToJobDefinitionEvaluateOnExitOutput() JobDefinitionEvaluateOnExitOutput {
	return o
}

func (o JobDefinitionEvaluateOnExitOutput) ToJobDefinitionEvaluateOnExitOutputWithContext(ctx context.Context) JobDefinitionEvaluateOnExitOutput {
	return o
}

// Specifies the action to take if all of the specified conditions ( `onStatusReason` , `onReason` , and `onExitCode` ) are met. The values aren't case sensitive.
func (o JobDefinitionEvaluateOnExitOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionEvaluateOnExit) string { return v.Action }).(pulumi.StringOutput)
}

// Contains a glob pattern to match against the decimal representation of the `ExitCode` returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match.
//
// The string can contain up to 512 characters.
func (o JobDefinitionEvaluateOnExitOutput) OnExitCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEvaluateOnExit) *string { return v.OnExitCode }).(pulumi.StringPtrOutput)
}

// Contains a glob pattern to match against the `Reason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
func (o JobDefinitionEvaluateOnExitOutput) OnReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEvaluateOnExit) *string { return v.OnReason }).(pulumi.StringPtrOutput)
}

// Contains a glob pattern to match against the `StatusReason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
func (o JobDefinitionEvaluateOnExitOutput) OnStatusReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionEvaluateOnExit) *string { return v.OnStatusReason }).(pulumi.StringPtrOutput)
}

type JobDefinitionEvaluateOnExitArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionEvaluateOnExitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionEvaluateOnExit)(nil)).Elem()
}

func (o JobDefinitionEvaluateOnExitArrayOutput) ToJobDefinitionEvaluateOnExitArrayOutput() JobDefinitionEvaluateOnExitArrayOutput {
	return o
}

func (o JobDefinitionEvaluateOnExitArrayOutput) ToJobDefinitionEvaluateOnExitArrayOutputWithContext(ctx context.Context) JobDefinitionEvaluateOnExitArrayOutput {
	return o
}

func (o JobDefinitionEvaluateOnExitArrayOutput) Index(i pulumi.IntInput) JobDefinitionEvaluateOnExitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionEvaluateOnExit {
		return vs[0].([]JobDefinitionEvaluateOnExit)[vs[1].(int)]
	}).(JobDefinitionEvaluateOnExitOutput)
}

type JobDefinitionHost struct {
	// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
	//
	// > This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
	SourcePath *string `pulumi:"sourcePath"`
}

// JobDefinitionHostInput is an input type that accepts JobDefinitionHostArgs and JobDefinitionHostOutput values.
// You can construct a concrete instance of `JobDefinitionHostInput` via:
//
//	JobDefinitionHostArgs{...}
type JobDefinitionHostInput interface {
	pulumi.Input

	ToJobDefinitionHostOutput() JobDefinitionHostOutput
	ToJobDefinitionHostOutputWithContext(context.Context) JobDefinitionHostOutput
}

type JobDefinitionHostArgs struct {
	// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
	//
	// > This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
	SourcePath pulumi.StringPtrInput `pulumi:"sourcePath"`
}

func (JobDefinitionHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionHost)(nil)).Elem()
}

func (i JobDefinitionHostArgs) ToJobDefinitionHostOutput() JobDefinitionHostOutput {
	return i.ToJobDefinitionHostOutputWithContext(context.Background())
}

func (i JobDefinitionHostArgs) ToJobDefinitionHostOutputWithContext(ctx context.Context) JobDefinitionHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionHostOutput)
}

func (i JobDefinitionHostArgs) ToJobDefinitionHostPtrOutput() JobDefinitionHostPtrOutput {
	return i.ToJobDefinitionHostPtrOutputWithContext(context.Background())
}

func (i JobDefinitionHostArgs) ToJobDefinitionHostPtrOutputWithContext(ctx context.Context) JobDefinitionHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionHostOutput).ToJobDefinitionHostPtrOutputWithContext(ctx)
}

// JobDefinitionHostPtrInput is an input type that accepts JobDefinitionHostArgs, JobDefinitionHostPtr and JobDefinitionHostPtrOutput values.
// You can construct a concrete instance of `JobDefinitionHostPtrInput` via:
//
//	        JobDefinitionHostArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionHostPtrInput interface {
	pulumi.Input

	ToJobDefinitionHostPtrOutput() JobDefinitionHostPtrOutput
	ToJobDefinitionHostPtrOutputWithContext(context.Context) JobDefinitionHostPtrOutput
}

type jobDefinitionHostPtrType JobDefinitionHostArgs

func JobDefinitionHostPtr(v *JobDefinitionHostArgs) JobDefinitionHostPtrInput {
	return (*jobDefinitionHostPtrType)(v)
}

func (*jobDefinitionHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionHost)(nil)).Elem()
}

func (i *jobDefinitionHostPtrType) ToJobDefinitionHostPtrOutput() JobDefinitionHostPtrOutput {
	return i.ToJobDefinitionHostPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionHostPtrType) ToJobDefinitionHostPtrOutputWithContext(ctx context.Context) JobDefinitionHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionHostPtrOutput)
}

type JobDefinitionHostOutput struct{ *pulumi.OutputState }

func (JobDefinitionHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionHost)(nil)).Elem()
}

func (o JobDefinitionHostOutput) ToJobDefinitionHostOutput() JobDefinitionHostOutput {
	return o
}

func (o JobDefinitionHostOutput) ToJobDefinitionHostOutputWithContext(ctx context.Context) JobDefinitionHostOutput {
	return o
}

func (o JobDefinitionHostOutput) ToJobDefinitionHostPtrOutput() JobDefinitionHostPtrOutput {
	return o.ToJobDefinitionHostPtrOutputWithContext(context.Background())
}

func (o JobDefinitionHostOutput) ToJobDefinitionHostPtrOutputWithContext(ctx context.Context) JobDefinitionHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionHost) *JobDefinitionHost {
		return &v
	}).(JobDefinitionHostPtrOutput)
}

// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
//
// > This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
func (o JobDefinitionHostOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionHost) *string { return v.SourcePath }).(pulumi.StringPtrOutput)
}

type JobDefinitionHostPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionHost)(nil)).Elem()
}

func (o JobDefinitionHostPtrOutput) ToJobDefinitionHostPtrOutput() JobDefinitionHostPtrOutput {
	return o
}

func (o JobDefinitionHostPtrOutput) ToJobDefinitionHostPtrOutputWithContext(ctx context.Context) JobDefinitionHostPtrOutput {
	return o
}

func (o JobDefinitionHostPtrOutput) Elem() JobDefinitionHostOutput {
	return o.ApplyT(func(v *JobDefinitionHost) JobDefinitionHost {
		if v != nil {
			return *v
		}
		var ret JobDefinitionHost
		return ret
	}).(JobDefinitionHostOutput)
}

// The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
//
// > This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
func (o JobDefinitionHostPtrOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionHost) *string {
		if v == nil {
			return nil
		}
		return v.SourcePath
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionImagePullSecret struct {
	// Provides a unique identifier for the `ImagePullSecret` . This object is required when `EksPodProperties$imagePullSecrets` is used.
	Name *string `pulumi:"name"`
}

// JobDefinitionImagePullSecretInput is an input type that accepts JobDefinitionImagePullSecretArgs and JobDefinitionImagePullSecretOutput values.
// You can construct a concrete instance of `JobDefinitionImagePullSecretInput` via:
//
//	JobDefinitionImagePullSecretArgs{...}
type JobDefinitionImagePullSecretInput interface {
	pulumi.Input

	ToJobDefinitionImagePullSecretOutput() JobDefinitionImagePullSecretOutput
	ToJobDefinitionImagePullSecretOutputWithContext(context.Context) JobDefinitionImagePullSecretOutput
}

type JobDefinitionImagePullSecretArgs struct {
	// Provides a unique identifier for the `ImagePullSecret` . This object is required when `EksPodProperties$imagePullSecrets` is used.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (JobDefinitionImagePullSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionImagePullSecret)(nil)).Elem()
}

func (i JobDefinitionImagePullSecretArgs) ToJobDefinitionImagePullSecretOutput() JobDefinitionImagePullSecretOutput {
	return i.ToJobDefinitionImagePullSecretOutputWithContext(context.Background())
}

func (i JobDefinitionImagePullSecretArgs) ToJobDefinitionImagePullSecretOutputWithContext(ctx context.Context) JobDefinitionImagePullSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionImagePullSecretOutput)
}

// JobDefinitionImagePullSecretArrayInput is an input type that accepts JobDefinitionImagePullSecretArray and JobDefinitionImagePullSecretArrayOutput values.
// You can construct a concrete instance of `JobDefinitionImagePullSecretArrayInput` via:
//
//	JobDefinitionImagePullSecretArray{ JobDefinitionImagePullSecretArgs{...} }
type JobDefinitionImagePullSecretArrayInput interface {
	pulumi.Input

	ToJobDefinitionImagePullSecretArrayOutput() JobDefinitionImagePullSecretArrayOutput
	ToJobDefinitionImagePullSecretArrayOutputWithContext(context.Context) JobDefinitionImagePullSecretArrayOutput
}

type JobDefinitionImagePullSecretArray []JobDefinitionImagePullSecretInput

func (JobDefinitionImagePullSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionImagePullSecret)(nil)).Elem()
}

func (i JobDefinitionImagePullSecretArray) ToJobDefinitionImagePullSecretArrayOutput() JobDefinitionImagePullSecretArrayOutput {
	return i.ToJobDefinitionImagePullSecretArrayOutputWithContext(context.Background())
}

func (i JobDefinitionImagePullSecretArray) ToJobDefinitionImagePullSecretArrayOutputWithContext(ctx context.Context) JobDefinitionImagePullSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionImagePullSecretArrayOutput)
}

type JobDefinitionImagePullSecretOutput struct{ *pulumi.OutputState }

func (JobDefinitionImagePullSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionImagePullSecret)(nil)).Elem()
}

func (o JobDefinitionImagePullSecretOutput) ToJobDefinitionImagePullSecretOutput() JobDefinitionImagePullSecretOutput {
	return o
}

func (o JobDefinitionImagePullSecretOutput) ToJobDefinitionImagePullSecretOutputWithContext(ctx context.Context) JobDefinitionImagePullSecretOutput {
	return o
}

// Provides a unique identifier for the `ImagePullSecret` . This object is required when `EksPodProperties$imagePullSecrets` is used.
func (o JobDefinitionImagePullSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionImagePullSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type JobDefinitionImagePullSecretArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionImagePullSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionImagePullSecret)(nil)).Elem()
}

func (o JobDefinitionImagePullSecretArrayOutput) ToJobDefinitionImagePullSecretArrayOutput() JobDefinitionImagePullSecretArrayOutput {
	return o
}

func (o JobDefinitionImagePullSecretArrayOutput) ToJobDefinitionImagePullSecretArrayOutputWithContext(ctx context.Context) JobDefinitionImagePullSecretArrayOutput {
	return o
}

func (o JobDefinitionImagePullSecretArrayOutput) Index(i pulumi.IntInput) JobDefinitionImagePullSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionImagePullSecret {
		return vs[0].([]JobDefinitionImagePullSecret)[vs[1].(int)]
	}).(JobDefinitionImagePullSecretOutput)
}

type JobDefinitionJobTimeout struct {
	// The job timeout time (in seconds) that's measured from the job attempt's `startedAt` timestamp. After this time passes, AWS Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.
	//
	// For array jobs, the timeout applies to the child jobs, not to the parent array job.
	//
	// For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
	AttemptDurationSeconds *int `pulumi:"attemptDurationSeconds"`
}

// JobDefinitionJobTimeoutInput is an input type that accepts JobDefinitionJobTimeoutArgs and JobDefinitionJobTimeoutOutput values.
// You can construct a concrete instance of `JobDefinitionJobTimeoutInput` via:
//
//	JobDefinitionJobTimeoutArgs{...}
type JobDefinitionJobTimeoutInput interface {
	pulumi.Input

	ToJobDefinitionJobTimeoutOutput() JobDefinitionJobTimeoutOutput
	ToJobDefinitionJobTimeoutOutputWithContext(context.Context) JobDefinitionJobTimeoutOutput
}

type JobDefinitionJobTimeoutArgs struct {
	// The job timeout time (in seconds) that's measured from the job attempt's `startedAt` timestamp. After this time passes, AWS Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.
	//
	// For array jobs, the timeout applies to the child jobs, not to the parent array job.
	//
	// For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
	AttemptDurationSeconds pulumi.IntPtrInput `pulumi:"attemptDurationSeconds"`
}

func (JobDefinitionJobTimeoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionJobTimeout)(nil)).Elem()
}

func (i JobDefinitionJobTimeoutArgs) ToJobDefinitionJobTimeoutOutput() JobDefinitionJobTimeoutOutput {
	return i.ToJobDefinitionJobTimeoutOutputWithContext(context.Background())
}

func (i JobDefinitionJobTimeoutArgs) ToJobDefinitionJobTimeoutOutputWithContext(ctx context.Context) JobDefinitionJobTimeoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionJobTimeoutOutput)
}

func (i JobDefinitionJobTimeoutArgs) ToJobDefinitionJobTimeoutPtrOutput() JobDefinitionJobTimeoutPtrOutput {
	return i.ToJobDefinitionJobTimeoutPtrOutputWithContext(context.Background())
}

func (i JobDefinitionJobTimeoutArgs) ToJobDefinitionJobTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionJobTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionJobTimeoutOutput).ToJobDefinitionJobTimeoutPtrOutputWithContext(ctx)
}

// JobDefinitionJobTimeoutPtrInput is an input type that accepts JobDefinitionJobTimeoutArgs, JobDefinitionJobTimeoutPtr and JobDefinitionJobTimeoutPtrOutput values.
// You can construct a concrete instance of `JobDefinitionJobTimeoutPtrInput` via:
//
//	        JobDefinitionJobTimeoutArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionJobTimeoutPtrInput interface {
	pulumi.Input

	ToJobDefinitionJobTimeoutPtrOutput() JobDefinitionJobTimeoutPtrOutput
	ToJobDefinitionJobTimeoutPtrOutputWithContext(context.Context) JobDefinitionJobTimeoutPtrOutput
}

type jobDefinitionJobTimeoutPtrType JobDefinitionJobTimeoutArgs

func JobDefinitionJobTimeoutPtr(v *JobDefinitionJobTimeoutArgs) JobDefinitionJobTimeoutPtrInput {
	return (*jobDefinitionJobTimeoutPtrType)(v)
}

func (*jobDefinitionJobTimeoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionJobTimeout)(nil)).Elem()
}

func (i *jobDefinitionJobTimeoutPtrType) ToJobDefinitionJobTimeoutPtrOutput() JobDefinitionJobTimeoutPtrOutput {
	return i.ToJobDefinitionJobTimeoutPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionJobTimeoutPtrType) ToJobDefinitionJobTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionJobTimeoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionJobTimeoutPtrOutput)
}

type JobDefinitionJobTimeoutOutput struct{ *pulumi.OutputState }

func (JobDefinitionJobTimeoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionJobTimeout)(nil)).Elem()
}

func (o JobDefinitionJobTimeoutOutput) ToJobDefinitionJobTimeoutOutput() JobDefinitionJobTimeoutOutput {
	return o
}

func (o JobDefinitionJobTimeoutOutput) ToJobDefinitionJobTimeoutOutputWithContext(ctx context.Context) JobDefinitionJobTimeoutOutput {
	return o
}

func (o JobDefinitionJobTimeoutOutput) ToJobDefinitionJobTimeoutPtrOutput() JobDefinitionJobTimeoutPtrOutput {
	return o.ToJobDefinitionJobTimeoutPtrOutputWithContext(context.Background())
}

func (o JobDefinitionJobTimeoutOutput) ToJobDefinitionJobTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionJobTimeoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionJobTimeout) *JobDefinitionJobTimeout {
		return &v
	}).(JobDefinitionJobTimeoutPtrOutput)
}

// The job timeout time (in seconds) that's measured from the job attempt's `startedAt` timestamp. After this time passes, AWS Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.
//
// For array jobs, the timeout applies to the child jobs, not to the parent array job.
//
// For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
func (o JobDefinitionJobTimeoutOutput) AttemptDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionJobTimeout) *int { return v.AttemptDurationSeconds }).(pulumi.IntPtrOutput)
}

type JobDefinitionJobTimeoutPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionJobTimeoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionJobTimeout)(nil)).Elem()
}

func (o JobDefinitionJobTimeoutPtrOutput) ToJobDefinitionJobTimeoutPtrOutput() JobDefinitionJobTimeoutPtrOutput {
	return o
}

func (o JobDefinitionJobTimeoutPtrOutput) ToJobDefinitionJobTimeoutPtrOutputWithContext(ctx context.Context) JobDefinitionJobTimeoutPtrOutput {
	return o
}

func (o JobDefinitionJobTimeoutPtrOutput) Elem() JobDefinitionJobTimeoutOutput {
	return o.ApplyT(func(v *JobDefinitionJobTimeout) JobDefinitionJobTimeout {
		if v != nil {
			return *v
		}
		var ret JobDefinitionJobTimeout
		return ret
	}).(JobDefinitionJobTimeoutOutput)
}

// The job timeout time (in seconds) that's measured from the job attempt's `startedAt` timestamp. After this time passes, AWS Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.
//
// For array jobs, the timeout applies to the child jobs, not to the parent array job.
//
// For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
func (o JobDefinitionJobTimeoutPtrOutput) AttemptDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionJobTimeout) *int {
		if v == nil {
			return nil
		}
		return v.AttemptDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type JobDefinitionLinuxParameters struct {
	// Any of the host devices to expose to the container. This parameter maps to `Devices` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--device` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	Devices []JobDefinitionDevice `pulumi:"devices"`
	// If true, run an `init` process inside the container that forwards signals and reaps processes. This parameter maps to the `--init` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	InitProcessEnabled *bool `pulumi:"initProcessEnabled"`
	// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the `--memory-swap` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the `maxSwap` value. For more information, see [`--memory-swap` details](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation.
	//
	// If a `maxSwap` value of `0` is specified, the container doesn't use swap. Accepted values are `0` or any positive integer. If the `maxSwap` parameter is omitted, the container doesn't use the swap configuration for the container instance on which it runs. A `maxSwap` value must be set for the `swappiness` parameter to be used.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	MaxSwap *int `pulumi:"maxSwap"`
	// The value for the size (in MiB) of the `/dev/shm` volume. This parameter maps to the `--shm-size` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	SharedMemorySize *int `pulumi:"sharedMemorySize"`
	// You can use this parameter to tune a container's memory swappiness behavior. A `swappiness` value of `0` causes swapping to not occur unless absolutely necessary. A `swappiness` value of `100` causes pages to be swapped aggressively. Valid values are whole numbers between `0` and `100` . If the `swappiness` parameter isn't specified, a default value of `60` is used. If a value isn't specified for `maxSwap` , then this parameter is ignored. If `maxSwap` is set to 0, the container doesn't use swap. This parameter maps to the `--memory-swappiness` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// Consider the following when you use a per-container swap configuration.
	//
	// - Swap space must be enabled and allocated on the container instance for the containers to use.
	//
	// > By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the *Amazon EC2 User Guide for Linux Instances* or [How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?](https://docs.aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
	// - The swap space parameters are only supported for job definitions using EC2 resources.
	// - If the `maxSwap` and `swappiness` parameters are omitted from a job definition, each container has a default `swappiness` value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	Swappiness *int `pulumi:"swappiness"`
	// The container path, mount options, and size (in MiB) of the `tmpfs` mount. This parameter maps to the `--tmpfs` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
	Tmpfs []JobDefinitionTmpfs `pulumi:"tmpfs"`
}

// JobDefinitionLinuxParametersInput is an input type that accepts JobDefinitionLinuxParametersArgs and JobDefinitionLinuxParametersOutput values.
// You can construct a concrete instance of `JobDefinitionLinuxParametersInput` via:
//
//	JobDefinitionLinuxParametersArgs{...}
type JobDefinitionLinuxParametersInput interface {
	pulumi.Input

	ToJobDefinitionLinuxParametersOutput() JobDefinitionLinuxParametersOutput
	ToJobDefinitionLinuxParametersOutputWithContext(context.Context) JobDefinitionLinuxParametersOutput
}

type JobDefinitionLinuxParametersArgs struct {
	// Any of the host devices to expose to the container. This parameter maps to `Devices` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--device` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	Devices JobDefinitionDeviceArrayInput `pulumi:"devices"`
	// If true, run an `init` process inside the container that forwards signals and reaps processes. This parameter maps to the `--init` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	InitProcessEnabled pulumi.BoolPtrInput `pulumi:"initProcessEnabled"`
	// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the `--memory-swap` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the `maxSwap` value. For more information, see [`--memory-swap` details](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation.
	//
	// If a `maxSwap` value of `0` is specified, the container doesn't use swap. Accepted values are `0` or any positive integer. If the `maxSwap` parameter is omitted, the container doesn't use the swap configuration for the container instance on which it runs. A `maxSwap` value must be set for the `swappiness` parameter to be used.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	MaxSwap pulumi.IntPtrInput `pulumi:"maxSwap"`
	// The value for the size (in MiB) of the `/dev/shm` volume. This parameter maps to the `--shm-size` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	SharedMemorySize pulumi.IntPtrInput `pulumi:"sharedMemorySize"`
	// You can use this parameter to tune a container's memory swappiness behavior. A `swappiness` value of `0` causes swapping to not occur unless absolutely necessary. A `swappiness` value of `100` causes pages to be swapped aggressively. Valid values are whole numbers between `0` and `100` . If the `swappiness` parameter isn't specified, a default value of `60` is used. If a value isn't specified for `maxSwap` , then this parameter is ignored. If `maxSwap` is set to 0, the container doesn't use swap. This parameter maps to the `--memory-swappiness` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// Consider the following when you use a per-container swap configuration.
	//
	// - Swap space must be enabled and allocated on the container instance for the containers to use.
	//
	// > By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the *Amazon EC2 User Guide for Linux Instances* or [How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?](https://docs.aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
	// - The swap space parameters are only supported for job definitions using EC2 resources.
	// - If the `maxSwap` and `swappiness` parameters are omitted from a job definition, each container has a default `swappiness` value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
	Swappiness pulumi.IntPtrInput `pulumi:"swappiness"`
	// The container path, mount options, and size (in MiB) of the `tmpfs` mount. This parameter maps to the `--tmpfs` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
	Tmpfs JobDefinitionTmpfsArrayInput `pulumi:"tmpfs"`
}

func (JobDefinitionLinuxParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionLinuxParameters)(nil)).Elem()
}

func (i JobDefinitionLinuxParametersArgs) ToJobDefinitionLinuxParametersOutput() JobDefinitionLinuxParametersOutput {
	return i.ToJobDefinitionLinuxParametersOutputWithContext(context.Background())
}

func (i JobDefinitionLinuxParametersArgs) ToJobDefinitionLinuxParametersOutputWithContext(ctx context.Context) JobDefinitionLinuxParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionLinuxParametersOutput)
}

func (i JobDefinitionLinuxParametersArgs) ToJobDefinitionLinuxParametersPtrOutput() JobDefinitionLinuxParametersPtrOutput {
	return i.ToJobDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i JobDefinitionLinuxParametersArgs) ToJobDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) JobDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionLinuxParametersOutput).ToJobDefinitionLinuxParametersPtrOutputWithContext(ctx)
}

// JobDefinitionLinuxParametersPtrInput is an input type that accepts JobDefinitionLinuxParametersArgs, JobDefinitionLinuxParametersPtr and JobDefinitionLinuxParametersPtrOutput values.
// You can construct a concrete instance of `JobDefinitionLinuxParametersPtrInput` via:
//
//	        JobDefinitionLinuxParametersArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionLinuxParametersPtrInput interface {
	pulumi.Input

	ToJobDefinitionLinuxParametersPtrOutput() JobDefinitionLinuxParametersPtrOutput
	ToJobDefinitionLinuxParametersPtrOutputWithContext(context.Context) JobDefinitionLinuxParametersPtrOutput
}

type jobDefinitionLinuxParametersPtrType JobDefinitionLinuxParametersArgs

func JobDefinitionLinuxParametersPtr(v *JobDefinitionLinuxParametersArgs) JobDefinitionLinuxParametersPtrInput {
	return (*jobDefinitionLinuxParametersPtrType)(v)
}

func (*jobDefinitionLinuxParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionLinuxParameters)(nil)).Elem()
}

func (i *jobDefinitionLinuxParametersPtrType) ToJobDefinitionLinuxParametersPtrOutput() JobDefinitionLinuxParametersPtrOutput {
	return i.ToJobDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionLinuxParametersPtrType) ToJobDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) JobDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionLinuxParametersPtrOutput)
}

type JobDefinitionLinuxParametersOutput struct{ *pulumi.OutputState }

func (JobDefinitionLinuxParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionLinuxParameters)(nil)).Elem()
}

func (o JobDefinitionLinuxParametersOutput) ToJobDefinitionLinuxParametersOutput() JobDefinitionLinuxParametersOutput {
	return o
}

func (o JobDefinitionLinuxParametersOutput) ToJobDefinitionLinuxParametersOutputWithContext(ctx context.Context) JobDefinitionLinuxParametersOutput {
	return o
}

func (o JobDefinitionLinuxParametersOutput) ToJobDefinitionLinuxParametersPtrOutput() JobDefinitionLinuxParametersPtrOutput {
	return o.ToJobDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (o JobDefinitionLinuxParametersOutput) ToJobDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) JobDefinitionLinuxParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionLinuxParameters) *JobDefinitionLinuxParameters {
		return &v
	}).(JobDefinitionLinuxParametersPtrOutput)
}

// Any of the host devices to expose to the container. This parameter maps to `Devices` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--device` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersOutput) Devices() JobDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v JobDefinitionLinuxParameters) []JobDefinitionDevice { return v.Devices }).(JobDefinitionDeviceArrayOutput)
}

// If true, run an `init` process inside the container that forwards signals and reaps processes. This parameter maps to the `--init` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
func (o JobDefinitionLinuxParametersOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionLinuxParameters) *bool { return v.InitProcessEnabled }).(pulumi.BoolPtrOutput)
}

// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the `--memory-swap` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the `maxSwap` value. For more information, see [`--memory-swap` details](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation.
//
// If a `maxSwap` value of `0` is specified, the container doesn't use swap. Accepted values are `0` or any positive integer. If the `maxSwap` parameter is omitted, the container doesn't use the swap configuration for the container instance on which it runs. A `maxSwap` value must be set for the `swappiness` parameter to be used.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionLinuxParameters) *int { return v.MaxSwap }).(pulumi.IntPtrOutput)
}

// The value for the size (in MiB) of the `/dev/shm` volume. This parameter maps to the `--shm-size` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionLinuxParameters) *int { return v.SharedMemorySize }).(pulumi.IntPtrOutput)
}

// You can use this parameter to tune a container's memory swappiness behavior. A `swappiness` value of `0` causes swapping to not occur unless absolutely necessary. A `swappiness` value of `100` causes pages to be swapped aggressively. Valid values are whole numbers between `0` and `100` . If the `swappiness` parameter isn't specified, a default value of `60` is used. If a value isn't specified for `maxSwap` , then this parameter is ignored. If `maxSwap` is set to 0, the container doesn't use swap. This parameter maps to the `--memory-swappiness` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// Consider the following when you use a per-container swap configuration.
//
// - Swap space must be enabled and allocated on the container instance for the containers to use.
//
// > By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the *Amazon EC2 User Guide for Linux Instances* or [How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?](https://docs.aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
// - The swap space parameters are only supported for job definitions using EC2 resources.
// - If the `maxSwap` and `swappiness` parameters are omitted from a job definition, each container has a default `swappiness` value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionLinuxParameters) *int { return v.Swappiness }).(pulumi.IntPtrOutput)
}

// The container path, mount options, and size (in MiB) of the `tmpfs` mount. This parameter maps to the `--tmpfs` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
func (o JobDefinitionLinuxParametersOutput) Tmpfs() JobDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v JobDefinitionLinuxParameters) []JobDefinitionTmpfs { return v.Tmpfs }).(JobDefinitionTmpfsArrayOutput)
}

type JobDefinitionLinuxParametersPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionLinuxParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionLinuxParameters)(nil)).Elem()
}

func (o JobDefinitionLinuxParametersPtrOutput) ToJobDefinitionLinuxParametersPtrOutput() JobDefinitionLinuxParametersPtrOutput {
	return o
}

func (o JobDefinitionLinuxParametersPtrOutput) ToJobDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) JobDefinitionLinuxParametersPtrOutput {
	return o
}

func (o JobDefinitionLinuxParametersPtrOutput) Elem() JobDefinitionLinuxParametersOutput {
	return o.ApplyT(func(v *JobDefinitionLinuxParameters) JobDefinitionLinuxParameters {
		if v != nil {
			return *v
		}
		var ret JobDefinitionLinuxParameters
		return ret
	}).(JobDefinitionLinuxParametersOutput)
}

// Any of the host devices to expose to the container. This parameter maps to `Devices` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--device` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersPtrOutput) Devices() JobDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v *JobDefinitionLinuxParameters) []JobDefinitionDevice {
		if v == nil {
			return nil
		}
		return v.Devices
	}).(JobDefinitionDeviceArrayOutput)
}

// If true, run an `init` process inside the container that forwards signals and reaps processes. This parameter maps to the `--init` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
func (o JobDefinitionLinuxParametersPtrOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionLinuxParameters) *bool {
		if v == nil {
			return nil
		}
		return v.InitProcessEnabled
	}).(pulumi.BoolPtrOutput)
}

// The total amount of swap memory (in MiB) a container can use. This parameter is translated to the `--memory-swap` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the `maxSwap` value. For more information, see [`--memory-swap` details](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation.
//
// If a `maxSwap` value of `0` is specified, the container doesn't use swap. Accepted values are `0` or any positive integer. If the `maxSwap` parameter is omitted, the container doesn't use the swap configuration for the container instance on which it runs. A `maxSwap` value must be set for the `swappiness` parameter to be used.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersPtrOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxSwap
	}).(pulumi.IntPtrOutput)
}

// The value for the size (in MiB) of the `/dev/shm` volume. This parameter maps to the `--shm-size` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersPtrOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.SharedMemorySize
	}).(pulumi.IntPtrOutput)
}

// You can use this parameter to tune a container's memory swappiness behavior. A `swappiness` value of `0` causes swapping to not occur unless absolutely necessary. A `swappiness` value of `100` causes pages to be swapped aggressively. Valid values are whole numbers between `0` and `100` . If the `swappiness` parameter isn't specified, a default value of `60` is used. If a value isn't specified for `maxSwap` , then this parameter is ignored. If `maxSwap` is set to 0, the container doesn't use swap. This parameter maps to the `--memory-swappiness` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// Consider the following when you use a per-container swap configuration.
//
// - Swap space must be enabled and allocated on the container instance for the containers to use.
//
// > By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the *Amazon EC2 User Guide for Linux Instances* or [How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?](https://docs.aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
// - The swap space parameters are only supported for job definitions using EC2 resources.
// - If the `maxSwap` and `swappiness` parameters are omitted from a job definition, each container has a default `swappiness` value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
func (o JobDefinitionLinuxParametersPtrOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.Swappiness
	}).(pulumi.IntPtrOutput)
}

// The container path, mount options, and size (in MiB) of the `tmpfs` mount. This parameter maps to the `--tmpfs` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
func (o JobDefinitionLinuxParametersPtrOutput) Tmpfs() JobDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v *JobDefinitionLinuxParameters) []JobDefinitionTmpfs {
		if v == nil {
			return nil
		}
		return v.Tmpfs
	}).(JobDefinitionTmpfsArrayOutput)
}

type JobDefinitionLogConfiguration struct {
	// The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
	//
	// The supported log drivers are `awslogs` , `fluentd` , `gelf` , `json-file` , `journald` , `logentries` , `syslog` , and `splunk` .
	//
	// > Jobs that are running on Fargate resources are restricted to the `awslogs` and `splunk` log drivers.
	//
	// - **awsfirelens** - Specifies the firelens logging driver. For more information on configuring Firelens, see [Send Amazon ECS logs to an AWS service or AWS Partner](https://docs.aws.amazon.com//AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .
	// - **awslogs** - Specifies the Amazon CloudWatch Logs logging driver. For more information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the *AWS Batch User Guide* and [Amazon CloudWatch Logs logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
	// - **fluentd** - Specifies the Fluentd logging driver. For more information including usage and options, see [Fluentd logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/fluentd/) in the *Docker documentation* .
	// - **gelf** - Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see [Graylog Extended Format logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/gelf/) in the *Docker documentation* .
	// - **journald** - Specifies the journald logging driver. For more information including usage and options, see [Journald logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/journald/) in the *Docker documentation* .
	// - **json-file** - Specifies the JSON file logging driver. For more information including usage and options, see [JSON File logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/json-file/) in the *Docker documentation* .
	// - **splunk** - Specifies the Splunk logging driver. For more information including usage and options, see [Splunk logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/splunk/) in the *Docker documentation* .
	// - **syslog** - Specifies the syslog logging driver. For more information including usage and options, see [Syslog logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/syslog/) in the *Docker documentation* .
	//
	// > If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	LogDriver string `pulumi:"logDriver"`
	// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	Options map[string]string `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
	SecretOptions []JobDefinitionSecret `pulumi:"secretOptions"`
}

// JobDefinitionLogConfigurationInput is an input type that accepts JobDefinitionLogConfigurationArgs and JobDefinitionLogConfigurationOutput values.
// You can construct a concrete instance of `JobDefinitionLogConfigurationInput` via:
//
//	JobDefinitionLogConfigurationArgs{...}
type JobDefinitionLogConfigurationInput interface {
	pulumi.Input

	ToJobDefinitionLogConfigurationOutput() JobDefinitionLogConfigurationOutput
	ToJobDefinitionLogConfigurationOutputWithContext(context.Context) JobDefinitionLogConfigurationOutput
}

type JobDefinitionLogConfigurationArgs struct {
	// The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
	//
	// The supported log drivers are `awslogs` , `fluentd` , `gelf` , `json-file` , `journald` , `logentries` , `syslog` , and `splunk` .
	//
	// > Jobs that are running on Fargate resources are restricted to the `awslogs` and `splunk` log drivers.
	//
	// - **awsfirelens** - Specifies the firelens logging driver. For more information on configuring Firelens, see [Send Amazon ECS logs to an AWS service or AWS Partner](https://docs.aws.amazon.com//AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .
	// - **awslogs** - Specifies the Amazon CloudWatch Logs logging driver. For more information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the *AWS Batch User Guide* and [Amazon CloudWatch Logs logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
	// - **fluentd** - Specifies the Fluentd logging driver. For more information including usage and options, see [Fluentd logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/fluentd/) in the *Docker documentation* .
	// - **gelf** - Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see [Graylog Extended Format logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/gelf/) in the *Docker documentation* .
	// - **journald** - Specifies the journald logging driver. For more information including usage and options, see [Journald logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/journald/) in the *Docker documentation* .
	// - **json-file** - Specifies the JSON file logging driver. For more information including usage and options, see [JSON File logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/json-file/) in the *Docker documentation* .
	// - **splunk** - Specifies the Splunk logging driver. For more information including usage and options, see [Splunk logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/splunk/) in the *Docker documentation* .
	// - **syslog** - Specifies the syslog logging driver. For more information including usage and options, see [Syslog logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/syslog/) in the *Docker documentation* .
	//
	// > If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	LogDriver pulumi.StringInput `pulumi:"logDriver"`
	// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	Options pulumi.StringMapInput `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
	SecretOptions JobDefinitionSecretArrayInput `pulumi:"secretOptions"`
}

func (JobDefinitionLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionLogConfiguration)(nil)).Elem()
}

func (i JobDefinitionLogConfigurationArgs) ToJobDefinitionLogConfigurationOutput() JobDefinitionLogConfigurationOutput {
	return i.ToJobDefinitionLogConfigurationOutputWithContext(context.Background())
}

func (i JobDefinitionLogConfigurationArgs) ToJobDefinitionLogConfigurationOutputWithContext(ctx context.Context) JobDefinitionLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionLogConfigurationOutput)
}

func (i JobDefinitionLogConfigurationArgs) ToJobDefinitionLogConfigurationPtrOutput() JobDefinitionLogConfigurationPtrOutput {
	return i.ToJobDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i JobDefinitionLogConfigurationArgs) ToJobDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionLogConfigurationOutput).ToJobDefinitionLogConfigurationPtrOutputWithContext(ctx)
}

// JobDefinitionLogConfigurationPtrInput is an input type that accepts JobDefinitionLogConfigurationArgs, JobDefinitionLogConfigurationPtr and JobDefinitionLogConfigurationPtrOutput values.
// You can construct a concrete instance of `JobDefinitionLogConfigurationPtrInput` via:
//
//	        JobDefinitionLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionLogConfigurationPtrInput interface {
	pulumi.Input

	ToJobDefinitionLogConfigurationPtrOutput() JobDefinitionLogConfigurationPtrOutput
	ToJobDefinitionLogConfigurationPtrOutputWithContext(context.Context) JobDefinitionLogConfigurationPtrOutput
}

type jobDefinitionLogConfigurationPtrType JobDefinitionLogConfigurationArgs

func JobDefinitionLogConfigurationPtr(v *JobDefinitionLogConfigurationArgs) JobDefinitionLogConfigurationPtrInput {
	return (*jobDefinitionLogConfigurationPtrType)(v)
}

func (*jobDefinitionLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionLogConfiguration)(nil)).Elem()
}

func (i *jobDefinitionLogConfigurationPtrType) ToJobDefinitionLogConfigurationPtrOutput() JobDefinitionLogConfigurationPtrOutput {
	return i.ToJobDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionLogConfigurationPtrType) ToJobDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionLogConfigurationPtrOutput)
}

type JobDefinitionLogConfigurationOutput struct{ *pulumi.OutputState }

func (JobDefinitionLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionLogConfiguration)(nil)).Elem()
}

func (o JobDefinitionLogConfigurationOutput) ToJobDefinitionLogConfigurationOutput() JobDefinitionLogConfigurationOutput {
	return o
}

func (o JobDefinitionLogConfigurationOutput) ToJobDefinitionLogConfigurationOutputWithContext(ctx context.Context) JobDefinitionLogConfigurationOutput {
	return o
}

func (o JobDefinitionLogConfigurationOutput) ToJobDefinitionLogConfigurationPtrOutput() JobDefinitionLogConfigurationPtrOutput {
	return o.ToJobDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (o JobDefinitionLogConfigurationOutput) ToJobDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionLogConfiguration) *JobDefinitionLogConfiguration {
		return &v
	}).(JobDefinitionLogConfigurationPtrOutput)
}

// The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
//
// The supported log drivers are `awslogs` , `fluentd` , `gelf` , `json-file` , `journald` , `logentries` , `syslog` , and `splunk` .
//
// > Jobs that are running on Fargate resources are restricted to the `awslogs` and `splunk` log drivers.
//
// - **awsfirelens** - Specifies the firelens logging driver. For more information on configuring Firelens, see [Send Amazon ECS logs to an AWS service or AWS Partner](https://docs.aws.amazon.com//AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .
// - **awslogs** - Specifies the Amazon CloudWatch Logs logging driver. For more information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the *AWS Batch User Guide* and [Amazon CloudWatch Logs logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
// - **fluentd** - Specifies the Fluentd logging driver. For more information including usage and options, see [Fluentd logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/fluentd/) in the *Docker documentation* .
// - **gelf** - Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see [Graylog Extended Format logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/gelf/) in the *Docker documentation* .
// - **journald** - Specifies the journald logging driver. For more information including usage and options, see [Journald logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/journald/) in the *Docker documentation* .
// - **json-file** - Specifies the JSON file logging driver. For more information including usage and options, see [JSON File logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/json-file/) in the *Docker documentation* .
// - **splunk** - Specifies the Splunk logging driver. For more information including usage and options, see [Splunk logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/splunk/) in the *Docker documentation* .
// - **syslog** - Specifies the syslog logging driver. For more information including usage and options, see [Syslog logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/syslog/) in the *Docker documentation* .
//
// > If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
func (o JobDefinitionLogConfigurationOutput) LogDriver() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionLogConfiguration) string { return v.LogDriver }).(pulumi.StringOutput)
}

// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
func (o JobDefinitionLogConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionLogConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
func (o JobDefinitionLogConfigurationOutput) SecretOptions() JobDefinitionSecretArrayOutput {
	return o.ApplyT(func(v JobDefinitionLogConfiguration) []JobDefinitionSecret { return v.SecretOptions }).(JobDefinitionSecretArrayOutput)
}

type JobDefinitionLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionLogConfiguration)(nil)).Elem()
}

func (o JobDefinitionLogConfigurationPtrOutput) ToJobDefinitionLogConfigurationPtrOutput() JobDefinitionLogConfigurationPtrOutput {
	return o
}

func (o JobDefinitionLogConfigurationPtrOutput) ToJobDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionLogConfigurationPtrOutput {
	return o
}

func (o JobDefinitionLogConfigurationPtrOutput) Elem() JobDefinitionLogConfigurationOutput {
	return o.ApplyT(func(v *JobDefinitionLogConfiguration) JobDefinitionLogConfiguration {
		if v != nil {
			return *v
		}
		var ret JobDefinitionLogConfiguration
		return ret
	}).(JobDefinitionLogConfigurationOutput)
}

// The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
//
// The supported log drivers are `awslogs` , `fluentd` , `gelf` , `json-file` , `journald` , `logentries` , `syslog` , and `splunk` .
//
// > Jobs that are running on Fargate resources are restricted to the `awslogs` and `splunk` log drivers.
//
// - **awsfirelens** - Specifies the firelens logging driver. For more information on configuring Firelens, see [Send Amazon ECS logs to an AWS service or AWS Partner](https://docs.aws.amazon.com//AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .
// - **awslogs** - Specifies the Amazon CloudWatch Logs logging driver. For more information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the *AWS Batch User Guide* and [Amazon CloudWatch Logs logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
// - **fluentd** - Specifies the Fluentd logging driver. For more information including usage and options, see [Fluentd logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/fluentd/) in the *Docker documentation* .
// - **gelf** - Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see [Graylog Extended Format logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/gelf/) in the *Docker documentation* .
// - **journald** - Specifies the journald logging driver. For more information including usage and options, see [Journald logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/journald/) in the *Docker documentation* .
// - **json-file** - Specifies the JSON file logging driver. For more information including usage and options, see [JSON File logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/json-file/) in the *Docker documentation* .
// - **splunk** - Specifies the Splunk logging driver. For more information including usage and options, see [Splunk logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/splunk/) in the *Docker documentation* .
// - **syslog** - Specifies the syslog logging driver. For more information including usage and options, see [Syslog logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/syslog/) in the *Docker documentation* .
//
// > If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software.
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
func (o JobDefinitionLogConfigurationPtrOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.LogDriver
	}).(pulumi.StringPtrOutput)
}

// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
func (o JobDefinitionLogConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionLogConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
func (o JobDefinitionLogConfigurationPtrOutput) SecretOptions() JobDefinitionSecretArrayOutput {
	return o.ApplyT(func(v *JobDefinitionLogConfiguration) []JobDefinitionSecret {
		if v == nil {
			return nil
		}
		return v.SecretOptions
	}).(JobDefinitionSecretArrayOutput)
}

type JobDefinitionMountPoint struct {
	// The path on the container where the host volume is mounted.
	ContainerPath *string `pulumi:"containerPath"`
	// If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the volume to mount.
	SourceVolume *string `pulumi:"sourceVolume"`
}

// JobDefinitionMountPointInput is an input type that accepts JobDefinitionMountPointArgs and JobDefinitionMountPointOutput values.
// You can construct a concrete instance of `JobDefinitionMountPointInput` via:
//
//	JobDefinitionMountPointArgs{...}
type JobDefinitionMountPointInput interface {
	pulumi.Input

	ToJobDefinitionMountPointOutput() JobDefinitionMountPointOutput
	ToJobDefinitionMountPointOutputWithContext(context.Context) JobDefinitionMountPointOutput
}

type JobDefinitionMountPointArgs struct {
	// The path on the container where the host volume is mounted.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the volume to mount.
	SourceVolume pulumi.StringPtrInput `pulumi:"sourceVolume"`
}

func (JobDefinitionMountPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMountPoint)(nil)).Elem()
}

func (i JobDefinitionMountPointArgs) ToJobDefinitionMountPointOutput() JobDefinitionMountPointOutput {
	return i.ToJobDefinitionMountPointOutputWithContext(context.Background())
}

func (i JobDefinitionMountPointArgs) ToJobDefinitionMountPointOutputWithContext(ctx context.Context) JobDefinitionMountPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMountPointOutput)
}

// JobDefinitionMountPointArrayInput is an input type that accepts JobDefinitionMountPointArray and JobDefinitionMountPointArrayOutput values.
// You can construct a concrete instance of `JobDefinitionMountPointArrayInput` via:
//
//	JobDefinitionMountPointArray{ JobDefinitionMountPointArgs{...} }
type JobDefinitionMountPointArrayInput interface {
	pulumi.Input

	ToJobDefinitionMountPointArrayOutput() JobDefinitionMountPointArrayOutput
	ToJobDefinitionMountPointArrayOutputWithContext(context.Context) JobDefinitionMountPointArrayOutput
}

type JobDefinitionMountPointArray []JobDefinitionMountPointInput

func (JobDefinitionMountPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionMountPoint)(nil)).Elem()
}

func (i JobDefinitionMountPointArray) ToJobDefinitionMountPointArrayOutput() JobDefinitionMountPointArrayOutput {
	return i.ToJobDefinitionMountPointArrayOutputWithContext(context.Background())
}

func (i JobDefinitionMountPointArray) ToJobDefinitionMountPointArrayOutputWithContext(ctx context.Context) JobDefinitionMountPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMountPointArrayOutput)
}

type JobDefinitionMountPointOutput struct{ *pulumi.OutputState }

func (JobDefinitionMountPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMountPoint)(nil)).Elem()
}

func (o JobDefinitionMountPointOutput) ToJobDefinitionMountPointOutput() JobDefinitionMountPointOutput {
	return o
}

func (o JobDefinitionMountPointOutput) ToJobDefinitionMountPointOutputWithContext(ctx context.Context) JobDefinitionMountPointOutput {
	return o
}

// The path on the container where the host volume is mounted.
func (o JobDefinitionMountPointOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMountPoint) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
func (o JobDefinitionMountPointOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionMountPoint) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the volume to mount.
func (o JobDefinitionMountPointOutput) SourceVolume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMountPoint) *string { return v.SourceVolume }).(pulumi.StringPtrOutput)
}

type JobDefinitionMountPointArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionMountPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionMountPoint)(nil)).Elem()
}

func (o JobDefinitionMountPointArrayOutput) ToJobDefinitionMountPointArrayOutput() JobDefinitionMountPointArrayOutput {
	return o
}

func (o JobDefinitionMountPointArrayOutput) ToJobDefinitionMountPointArrayOutputWithContext(ctx context.Context) JobDefinitionMountPointArrayOutput {
	return o
}

func (o JobDefinitionMountPointArrayOutput) Index(i pulumi.IntInput) JobDefinitionMountPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionMountPoint {
		return vs[0].([]JobDefinitionMountPoint)[vs[1].(int)]
	}).(JobDefinitionMountPointOutput)
}

type JobDefinitionMultiNodeContainerProperties struct {
	// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
	Command []string `pulumi:"command"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
	Environment []JobDefinitionEnvironment `pulumi:"environment"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
	EphemeralStorage *JobDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
	//
	// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
	// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
	// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
	// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
	// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
	Image string `pulumi:"image"`
	// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.
	//
	// > This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType *string `pulumi:"instanceType"`
	// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
	JobRoleArn *string `pulumi:"jobRoleArn"`
	// Linux-specific modifications that are applied to the container, such as details for device mappings.
	LinuxParameters *JobDefinitionLinuxParameters `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//
	// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
	//
	// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	//
	// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
	LogConfiguration *JobDefinitionLogConfiguration `pulumi:"logConfiguration"`
	// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
	Memory *int `pulumi:"memory"`
	// The mount points for data volumes in your container.
	//
	// This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints []JobDefinitionMountPoint `pulumi:"mountPoints"`
	// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
	Privileged *bool `pulumi:"privileged"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
	ReadonlyRootFilesystem *bool `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials *JobDefinitionRepositoryCredentials `pulumi:"repositoryCredentials"`
	// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
	ResourceRequirements []JobDefinitionResourceRequirement `pulumi:"resourceRequirements"`
	// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
	RuntimePlatform *JobDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
	Secrets []JobDefinitionSecret `pulumi:"secrets"`
	// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
	Ulimits []JobDefinitionUlimit `pulumi:"ulimits"`
	// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	User *string `pulumi:"user"`
	// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
	//
	// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
	Vcpus *int `pulumi:"vcpus"`
	// A list of data volumes used in a job.
	Volumes []JobDefinitionVolume `pulumi:"volumes"`
}

// JobDefinitionMultiNodeContainerPropertiesInput is an input type that accepts JobDefinitionMultiNodeContainerPropertiesArgs and JobDefinitionMultiNodeContainerPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionMultiNodeContainerPropertiesInput` via:
//
//	JobDefinitionMultiNodeContainerPropertiesArgs{...}
type JobDefinitionMultiNodeContainerPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionMultiNodeContainerPropertiesOutput() JobDefinitionMultiNodeContainerPropertiesOutput
	ToJobDefinitionMultiNodeContainerPropertiesOutputWithContext(context.Context) JobDefinitionMultiNodeContainerPropertiesOutput
}

type JobDefinitionMultiNodeContainerPropertiesArgs struct {
	// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand pulumi.BoolPtrInput `pulumi:"enableExecuteCommand"`
	// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
	Environment JobDefinitionEnvironmentArrayInput `pulumi:"environment"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
	EphemeralStorage JobDefinitionEphemeralStoragePtrInput `pulumi:"ephemeralStorage"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn pulumi.StringPtrInput `pulumi:"executionRoleArn"`
	// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
	//
	// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
	// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
	// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
	// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
	// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
	Image pulumi.StringInput `pulumi:"image"`
	// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.
	//
	// > This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
	JobRoleArn pulumi.StringPtrInput `pulumi:"jobRoleArn"`
	// Linux-specific modifications that are applied to the container, such as details for device mappings.
	LinuxParameters JobDefinitionLinuxParametersPtrInput `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//
	// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
	//
	// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
	//
	// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
	LogConfiguration JobDefinitionLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The mount points for data volumes in your container.
	//
	// This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints JobDefinitionMountPointArrayInput `pulumi:"mountPoints"`
	// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
	ReadonlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials JobDefinitionRepositoryCredentialsPtrInput `pulumi:"repositoryCredentials"`
	// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
	ResourceRequirements JobDefinitionResourceRequirementArrayInput `pulumi:"resourceRequirements"`
	// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
	RuntimePlatform JobDefinitionRuntimePlatformPtrInput `pulumi:"runtimePlatform"`
	// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
	Secrets JobDefinitionSecretArrayInput `pulumi:"secrets"`
	// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
	Ulimits JobDefinitionUlimitArrayInput `pulumi:"ulimits"`
	// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	User pulumi.StringPtrInput `pulumi:"user"`
	// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
	//
	// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
	Vcpus pulumi.IntPtrInput `pulumi:"vcpus"`
	// A list of data volumes used in a job.
	Volumes JobDefinitionVolumeArrayInput `pulumi:"volumes"`
}

func (JobDefinitionMultiNodeContainerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMultiNodeContainerProperties)(nil)).Elem()
}

func (i JobDefinitionMultiNodeContainerPropertiesArgs) ToJobDefinitionMultiNodeContainerPropertiesOutput() JobDefinitionMultiNodeContainerPropertiesOutput {
	return i.ToJobDefinitionMultiNodeContainerPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionMultiNodeContainerPropertiesArgs) ToJobDefinitionMultiNodeContainerPropertiesOutputWithContext(ctx context.Context) JobDefinitionMultiNodeContainerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeContainerPropertiesOutput)
}

func (i JobDefinitionMultiNodeContainerPropertiesArgs) ToJobDefinitionMultiNodeContainerPropertiesPtrOutput() JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return i.ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionMultiNodeContainerPropertiesArgs) ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeContainerPropertiesOutput).ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionMultiNodeContainerPropertiesPtrInput is an input type that accepts JobDefinitionMultiNodeContainerPropertiesArgs, JobDefinitionMultiNodeContainerPropertiesPtr and JobDefinitionMultiNodeContainerPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionMultiNodeContainerPropertiesPtrInput` via:
//
//	        JobDefinitionMultiNodeContainerPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionMultiNodeContainerPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionMultiNodeContainerPropertiesPtrOutput() JobDefinitionMultiNodeContainerPropertiesPtrOutput
	ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(context.Context) JobDefinitionMultiNodeContainerPropertiesPtrOutput
}

type jobDefinitionMultiNodeContainerPropertiesPtrType JobDefinitionMultiNodeContainerPropertiesArgs

func JobDefinitionMultiNodeContainerPropertiesPtr(v *JobDefinitionMultiNodeContainerPropertiesArgs) JobDefinitionMultiNodeContainerPropertiesPtrInput {
	return (*jobDefinitionMultiNodeContainerPropertiesPtrType)(v)
}

func (*jobDefinitionMultiNodeContainerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionMultiNodeContainerProperties)(nil)).Elem()
}

func (i *jobDefinitionMultiNodeContainerPropertiesPtrType) ToJobDefinitionMultiNodeContainerPropertiesPtrOutput() JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return i.ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionMultiNodeContainerPropertiesPtrType) ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeContainerPropertiesPtrOutput)
}

type JobDefinitionMultiNodeContainerPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionMultiNodeContainerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMultiNodeContainerProperties)(nil)).Elem()
}

func (o JobDefinitionMultiNodeContainerPropertiesOutput) ToJobDefinitionMultiNodeContainerPropertiesOutput() JobDefinitionMultiNodeContainerPropertiesOutput {
	return o
}

func (o JobDefinitionMultiNodeContainerPropertiesOutput) ToJobDefinitionMultiNodeContainerPropertiesOutputWithContext(ctx context.Context) JobDefinitionMultiNodeContainerPropertiesOutput {
	return o
}

func (o JobDefinitionMultiNodeContainerPropertiesOutput) ToJobDefinitionMultiNodeContainerPropertiesPtrOutput() JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return o.ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionMultiNodeContainerPropertiesOutput) ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionMultiNodeContainerProperties) *JobDefinitionMultiNodeContainerProperties {
		return &v
	}).(JobDefinitionMultiNodeContainerPropertiesPtrOutput)
}

// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Environment() JobDefinitionEnvironmentArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) []JobDefinitionEnvironment { return v.Environment }).(JobDefinitionEnvironmentArrayOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) EphemeralStorage() JobDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *JobDefinitionEphemeralStorage {
		return v.EphemeralStorage
	}).(JobDefinitionEphemeralStoragePtrOutput)
}

// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *string { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
//
// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) string { return v.Image }).(pulumi.StringOutput)
}

// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.
//
// > This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) JobRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *string { return v.JobRoleArn }).(pulumi.StringPtrOutput)
}

// Linux-specific modifications that are applied to the container, such as details for device mappings.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) LinuxParameters() JobDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *JobDefinitionLinuxParameters {
		return v.LinuxParameters
	}).(JobDefinitionLinuxParametersPtrOutput)
}

// The log configuration specification for the container.
//
// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
//
// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
//
// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) LogConfiguration() JobDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *JobDefinitionLogConfiguration {
		return v.LogConfiguration
	}).(JobDefinitionLogConfigurationPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The mount points for data volumes in your container.
//
// This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
//
// Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) MountPoints() JobDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) []JobDefinitionMountPoint { return v.MountPoints }).(JobDefinitionMountPointArrayOutput)
}

// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *bool { return v.ReadonlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The private repository authentication credentials to use.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) RepositoryCredentials() JobDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *JobDefinitionRepositoryCredentials {
		return v.RepositoryCredentials
	}).(JobDefinitionRepositoryCredentialsPtrOutput)
}

// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) ResourceRequirements() JobDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) []JobDefinitionResourceRequirement {
		return v.ResourceRequirements
	}).(JobDefinitionResourceRequirementArrayOutput)
}

// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) RuntimePlatform() JobDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *JobDefinitionRuntimePlatform {
		return v.RuntimePlatform
	}).(JobDefinitionRuntimePlatformPtrOutput)
}

// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Secrets() JobDefinitionSecretArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) []JobDefinitionSecret { return v.Secrets }).(JobDefinitionSecretArrayOutput)
}

// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Ulimits() JobDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) []JobDefinitionUlimit { return v.Ulimits }).(JobDefinitionUlimitArrayOutput)
}

// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
func (o JobDefinitionMultiNodeContainerPropertiesOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *string { return v.User }).(pulumi.StringPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
//
// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

// A list of data volumes used in a job.
func (o JobDefinitionMultiNodeContainerPropertiesOutput) Volumes() JobDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeContainerProperties) []JobDefinitionVolume { return v.Volumes }).(JobDefinitionVolumeArrayOutput)
}

type JobDefinitionMultiNodeContainerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionMultiNodeContainerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionMultiNodeContainerProperties)(nil)).Elem()
}

func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) ToJobDefinitionMultiNodeContainerPropertiesPtrOutput() JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return o
}

func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) ToJobDefinitionMultiNodeContainerPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return o
}

func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Elem() JobDefinitionMultiNodeContainerPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) JobDefinitionMultiNodeContainerProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionMultiNodeContainerProperties
		return ret
	}).(JobDefinitionMultiNodeContainerPropertiesOutput)
}

// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExecuteCommand
	}).(pulumi.BoolPtrOutput)
}

// The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Environment() JobDefinitionEnvironmentArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) []JobDefinitionEnvironment {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(JobDefinitionEnvironmentArrayOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) EphemeralStorage() JobDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *JobDefinitionEphemeralStorage {
		if v == nil {
			return nil
		}
		return v.EphemeralStorage
	}).(JobDefinitionEphemeralStoragePtrOutput)
}

// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionRoleArn
	}).(pulumi.StringPtrOutput)
}

// Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources.
//
// - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
// - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
// - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
// - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
// - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.
//
// > This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) JobRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *string {
		if v == nil {
			return nil
		}
		return v.JobRoleArn
	}).(pulumi.StringPtrOutput)
}

// Linux-specific modifications that are applied to the container, such as details for device mappings.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) LinuxParameters() JobDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *JobDefinitionLinuxParameters {
		if v == nil {
			return nil
		}
		return v.LinuxParameters
	}).(JobDefinitionLinuxParametersPtrOutput)
}

// The log configuration specification for the container.
//
// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
//
// > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type).
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
//
// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) LogConfiguration() JobDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *JobDefinitionLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(JobDefinitionLogConfigurationPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

// The mount points for data volumes in your container.
//
// This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
//
// Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) MountPoints() JobDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) []JobDefinitionMountPoint {
		if v == nil {
			return nil
		}
		return v.MountPoints
	}).(JobDefinitionMountPointArrayOutput)
}

// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ReadonlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The private repository authentication credentials to use.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) RepositoryCredentials() JobDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *JobDefinitionRepositoryCredentials {
		if v == nil {
			return nil
		}
		return v.RepositoryCredentials
	}).(JobDefinitionRepositoryCredentialsPtrOutput)
}

// The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) ResourceRequirements() JobDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) []JobDefinitionResourceRequirement {
		if v == nil {
			return nil
		}
		return v.ResourceRequirements
	}).(JobDefinitionResourceRequirementArrayOutput)
}

// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) RuntimePlatform() JobDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *JobDefinitionRuntimePlatform {
		if v == nil {
			return nil
		}
		return v.RuntimePlatform
	}).(JobDefinitionRuntimePlatformPtrOutput)
}

// The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Secrets() JobDefinitionSecretArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) []JobDefinitionSecret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(JobDefinitionSecretArrayOutput)
}

// A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Ulimits() JobDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) []JobDefinitionUlimit {
		if v == nil {
			return nil
		}
		return v.Ulimits
	}).(JobDefinitionUlimitArrayOutput)
}

// The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
//
// Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) *int {
		if v == nil {
			return nil
		}
		return v.Vcpus
	}).(pulumi.IntPtrOutput)
}

// A list of data volumes used in a job.
func (o JobDefinitionMultiNodeContainerPropertiesPtrOutput) Volumes() JobDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeContainerProperties) []JobDefinitionVolume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(JobDefinitionVolumeArrayOutput)
}

type JobDefinitionMultiNodeEcsProperties struct {
	// An object that contains the properties for the Amazon ECS task definition of a job.
	//
	// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
	TaskProperties []JobDefinitionMultiNodeEcsTaskProperties `pulumi:"taskProperties"`
}

// JobDefinitionMultiNodeEcsPropertiesInput is an input type that accepts JobDefinitionMultiNodeEcsPropertiesArgs and JobDefinitionMultiNodeEcsPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionMultiNodeEcsPropertiesInput` via:
//
//	JobDefinitionMultiNodeEcsPropertiesArgs{...}
type JobDefinitionMultiNodeEcsPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionMultiNodeEcsPropertiesOutput() JobDefinitionMultiNodeEcsPropertiesOutput
	ToJobDefinitionMultiNodeEcsPropertiesOutputWithContext(context.Context) JobDefinitionMultiNodeEcsPropertiesOutput
}

type JobDefinitionMultiNodeEcsPropertiesArgs struct {
	// An object that contains the properties for the Amazon ECS task definition of a job.
	//
	// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
	TaskProperties JobDefinitionMultiNodeEcsTaskPropertiesArrayInput `pulumi:"taskProperties"`
}

func (JobDefinitionMultiNodeEcsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMultiNodeEcsProperties)(nil)).Elem()
}

func (i JobDefinitionMultiNodeEcsPropertiesArgs) ToJobDefinitionMultiNodeEcsPropertiesOutput() JobDefinitionMultiNodeEcsPropertiesOutput {
	return i.ToJobDefinitionMultiNodeEcsPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionMultiNodeEcsPropertiesArgs) ToJobDefinitionMultiNodeEcsPropertiesOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeEcsPropertiesOutput)
}

func (i JobDefinitionMultiNodeEcsPropertiesArgs) ToJobDefinitionMultiNodeEcsPropertiesPtrOutput() JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return i.ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionMultiNodeEcsPropertiesArgs) ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeEcsPropertiesOutput).ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionMultiNodeEcsPropertiesPtrInput is an input type that accepts JobDefinitionMultiNodeEcsPropertiesArgs, JobDefinitionMultiNodeEcsPropertiesPtr and JobDefinitionMultiNodeEcsPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionMultiNodeEcsPropertiesPtrInput` via:
//
//	        JobDefinitionMultiNodeEcsPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionMultiNodeEcsPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionMultiNodeEcsPropertiesPtrOutput() JobDefinitionMultiNodeEcsPropertiesPtrOutput
	ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(context.Context) JobDefinitionMultiNodeEcsPropertiesPtrOutput
}

type jobDefinitionMultiNodeEcsPropertiesPtrType JobDefinitionMultiNodeEcsPropertiesArgs

func JobDefinitionMultiNodeEcsPropertiesPtr(v *JobDefinitionMultiNodeEcsPropertiesArgs) JobDefinitionMultiNodeEcsPropertiesPtrInput {
	return (*jobDefinitionMultiNodeEcsPropertiesPtrType)(v)
}

func (*jobDefinitionMultiNodeEcsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionMultiNodeEcsProperties)(nil)).Elem()
}

func (i *jobDefinitionMultiNodeEcsPropertiesPtrType) ToJobDefinitionMultiNodeEcsPropertiesPtrOutput() JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return i.ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionMultiNodeEcsPropertiesPtrType) ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeEcsPropertiesPtrOutput)
}

type JobDefinitionMultiNodeEcsPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionMultiNodeEcsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMultiNodeEcsProperties)(nil)).Elem()
}

func (o JobDefinitionMultiNodeEcsPropertiesOutput) ToJobDefinitionMultiNodeEcsPropertiesOutput() JobDefinitionMultiNodeEcsPropertiesOutput {
	return o
}

func (o JobDefinitionMultiNodeEcsPropertiesOutput) ToJobDefinitionMultiNodeEcsPropertiesOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsPropertiesOutput {
	return o
}

func (o JobDefinitionMultiNodeEcsPropertiesOutput) ToJobDefinitionMultiNodeEcsPropertiesPtrOutput() JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return o.ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionMultiNodeEcsPropertiesOutput) ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionMultiNodeEcsProperties) *JobDefinitionMultiNodeEcsProperties {
		return &v
	}).(JobDefinitionMultiNodeEcsPropertiesPtrOutput)
}

// An object that contains the properties for the Amazon ECS task definition of a job.
//
// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
func (o JobDefinitionMultiNodeEcsPropertiesOutput) TaskProperties() JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsProperties) []JobDefinitionMultiNodeEcsTaskProperties {
		return v.TaskProperties
	}).(JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput)
}

type JobDefinitionMultiNodeEcsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionMultiNodeEcsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionMultiNodeEcsProperties)(nil)).Elem()
}

func (o JobDefinitionMultiNodeEcsPropertiesPtrOutput) ToJobDefinitionMultiNodeEcsPropertiesPtrOutput() JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return o
}

func (o JobDefinitionMultiNodeEcsPropertiesPtrOutput) ToJobDefinitionMultiNodeEcsPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return o
}

func (o JobDefinitionMultiNodeEcsPropertiesPtrOutput) Elem() JobDefinitionMultiNodeEcsPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeEcsProperties) JobDefinitionMultiNodeEcsProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionMultiNodeEcsProperties
		return ret
	}).(JobDefinitionMultiNodeEcsPropertiesOutput)
}

// An object that contains the properties for the Amazon ECS task definition of a job.
//
// > This object is currently limited to one task element. However, the task element can run up to 10 containers.
func (o JobDefinitionMultiNodeEcsPropertiesPtrOutput) TaskProperties() JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput {
	return o.ApplyT(func(v *JobDefinitionMultiNodeEcsProperties) []JobDefinitionMultiNodeEcsTaskProperties {
		if v == nil {
			return nil
		}
		return v.TaskProperties
	}).(JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput)
}

type JobDefinitionMultiNodeEcsTaskProperties struct {
	// This object is a list of containers.
	Containers []JobDefinitionTaskContainerProperties `pulumi:"containers"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
	//
	// If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified `task` share the same IPC resources.
	//
	// If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
	//
	// If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
	IpcMode *string `pulumi:"ipcMode"`
	// The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
	//
	// If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified task share the same process namespace.
	//
	// If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
	PidMode *string `pulumi:"pidMode"`
	// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
	//
	// > This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
	TaskRoleArn *string `pulumi:"taskRoleArn"`
	// A list of volumes that are associated with the job.
	Volumes []JobDefinitionVolume `pulumi:"volumes"`
}

// JobDefinitionMultiNodeEcsTaskPropertiesInput is an input type that accepts JobDefinitionMultiNodeEcsTaskPropertiesArgs and JobDefinitionMultiNodeEcsTaskPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionMultiNodeEcsTaskPropertiesInput` via:
//
//	JobDefinitionMultiNodeEcsTaskPropertiesArgs{...}
type JobDefinitionMultiNodeEcsTaskPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionMultiNodeEcsTaskPropertiesOutput() JobDefinitionMultiNodeEcsTaskPropertiesOutput
	ToJobDefinitionMultiNodeEcsTaskPropertiesOutputWithContext(context.Context) JobDefinitionMultiNodeEcsTaskPropertiesOutput
}

type JobDefinitionMultiNodeEcsTaskPropertiesArgs struct {
	// This object is a list of containers.
	Containers JobDefinitionTaskContainerPropertiesArrayInput `pulumi:"containers"`
	// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
	EnableExecuteCommand pulumi.BoolPtrInput `pulumi:"enableExecuteCommand"`
	// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
	ExecutionRoleArn pulumi.StringPtrInput `pulumi:"executionRoleArn"`
	// The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
	//
	// If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified `task` share the same IPC resources.
	//
	// If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
	//
	// If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
	IpcMode pulumi.StringPtrInput `pulumi:"ipcMode"`
	// The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
	//
	// If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
	//
	// If `task` is specified, all containers within the specified task share the same process namespace.
	//
	// If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
	PidMode pulumi.StringPtrInput `pulumi:"pidMode"`
	// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
	//
	// > This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
	TaskRoleArn pulumi.StringPtrInput `pulumi:"taskRoleArn"`
	// A list of volumes that are associated with the job.
	Volumes JobDefinitionVolumeArrayInput `pulumi:"volumes"`
}

func (JobDefinitionMultiNodeEcsTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMultiNodeEcsTaskProperties)(nil)).Elem()
}

func (i JobDefinitionMultiNodeEcsTaskPropertiesArgs) ToJobDefinitionMultiNodeEcsTaskPropertiesOutput() JobDefinitionMultiNodeEcsTaskPropertiesOutput {
	return i.ToJobDefinitionMultiNodeEcsTaskPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionMultiNodeEcsTaskPropertiesArgs) ToJobDefinitionMultiNodeEcsTaskPropertiesOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeEcsTaskPropertiesOutput)
}

// JobDefinitionMultiNodeEcsTaskPropertiesArrayInput is an input type that accepts JobDefinitionMultiNodeEcsTaskPropertiesArray and JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput values.
// You can construct a concrete instance of `JobDefinitionMultiNodeEcsTaskPropertiesArrayInput` via:
//
//	JobDefinitionMultiNodeEcsTaskPropertiesArray{ JobDefinitionMultiNodeEcsTaskPropertiesArgs{...} }
type JobDefinitionMultiNodeEcsTaskPropertiesArrayInput interface {
	pulumi.Input

	ToJobDefinitionMultiNodeEcsTaskPropertiesArrayOutput() JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput
	ToJobDefinitionMultiNodeEcsTaskPropertiesArrayOutputWithContext(context.Context) JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput
}

type JobDefinitionMultiNodeEcsTaskPropertiesArray []JobDefinitionMultiNodeEcsTaskPropertiesInput

func (JobDefinitionMultiNodeEcsTaskPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionMultiNodeEcsTaskProperties)(nil)).Elem()
}

func (i JobDefinitionMultiNodeEcsTaskPropertiesArray) ToJobDefinitionMultiNodeEcsTaskPropertiesArrayOutput() JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput {
	return i.ToJobDefinitionMultiNodeEcsTaskPropertiesArrayOutputWithContext(context.Background())
}

func (i JobDefinitionMultiNodeEcsTaskPropertiesArray) ToJobDefinitionMultiNodeEcsTaskPropertiesArrayOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput)
}

type JobDefinitionMultiNodeEcsTaskPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionMultiNodeEcsTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionMultiNodeEcsTaskProperties)(nil)).Elem()
}

func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) ToJobDefinitionMultiNodeEcsTaskPropertiesOutput() JobDefinitionMultiNodeEcsTaskPropertiesOutput {
	return o
}

func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) ToJobDefinitionMultiNodeEcsTaskPropertiesOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsTaskPropertiesOutput {
	return o
}

// This object is a list of containers.
func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) Containers() JobDefinitionTaskContainerPropertiesArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsTaskProperties) []JobDefinitionTaskContainerProperties {
		return v.Containers
	}).(JobDefinitionTaskContainerPropertiesArrayOutput)
}

// Determines whether execute command functionality is turned on for this task. If `true` , execute command functionality is turned on all the containers in the task.
func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsTaskProperties) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsTaskProperties) *string { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
//
// If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
//
// If `task` is specified, all containers within the specified `task` share the same IPC resources.
//
// If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
//
// If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) IpcMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsTaskProperties) *string { return v.IpcMode }).(pulumi.StringPtrOutput)
}

// The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
//
// If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
//
// If `task` is specified, all containers within the specified task share the same process namespace.
//
// If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsTaskProperties) *string { return v.PidMode }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
//
// > This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) TaskRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsTaskProperties) *string { return v.TaskRoleArn }).(pulumi.StringPtrOutput)
}

// A list of volumes that are associated with the job.
func (o JobDefinitionMultiNodeEcsTaskPropertiesOutput) Volumes() JobDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v JobDefinitionMultiNodeEcsTaskProperties) []JobDefinitionVolume { return v.Volumes }).(JobDefinitionVolumeArrayOutput)
}

type JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionMultiNodeEcsTaskProperties)(nil)).Elem()
}

func (o JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput) ToJobDefinitionMultiNodeEcsTaskPropertiesArrayOutput() JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput {
	return o
}

func (o JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput) ToJobDefinitionMultiNodeEcsTaskPropertiesArrayOutputWithContext(ctx context.Context) JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput {
	return o
}

func (o JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput) Index(i pulumi.IntInput) JobDefinitionMultiNodeEcsTaskPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionMultiNodeEcsTaskProperties {
		return vs[0].([]JobDefinitionMultiNodeEcsTaskProperties)[vs[1].(int)]
	}).(JobDefinitionMultiNodeEcsTaskPropertiesOutput)
}

type JobDefinitionNetworkConfiguration struct {
	// Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* . The default value is " `DISABLED` ".
	AssignPublicIp *string `pulumi:"assignPublicIp"`
}

// JobDefinitionNetworkConfigurationInput is an input type that accepts JobDefinitionNetworkConfigurationArgs and JobDefinitionNetworkConfigurationOutput values.
// You can construct a concrete instance of `JobDefinitionNetworkConfigurationInput` via:
//
//	JobDefinitionNetworkConfigurationArgs{...}
type JobDefinitionNetworkConfigurationInput interface {
	pulumi.Input

	ToJobDefinitionNetworkConfigurationOutput() JobDefinitionNetworkConfigurationOutput
	ToJobDefinitionNetworkConfigurationOutputWithContext(context.Context) JobDefinitionNetworkConfigurationOutput
}

type JobDefinitionNetworkConfigurationArgs struct {
	// Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* . The default value is " `DISABLED` ".
	AssignPublicIp pulumi.StringPtrInput `pulumi:"assignPublicIp"`
}

func (JobDefinitionNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionNetworkConfiguration)(nil)).Elem()
}

func (i JobDefinitionNetworkConfigurationArgs) ToJobDefinitionNetworkConfigurationOutput() JobDefinitionNetworkConfigurationOutput {
	return i.ToJobDefinitionNetworkConfigurationOutputWithContext(context.Background())
}

func (i JobDefinitionNetworkConfigurationArgs) ToJobDefinitionNetworkConfigurationOutputWithContext(ctx context.Context) JobDefinitionNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNetworkConfigurationOutput)
}

func (i JobDefinitionNetworkConfigurationArgs) ToJobDefinitionNetworkConfigurationPtrOutput() JobDefinitionNetworkConfigurationPtrOutput {
	return i.ToJobDefinitionNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i JobDefinitionNetworkConfigurationArgs) ToJobDefinitionNetworkConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNetworkConfigurationOutput).ToJobDefinitionNetworkConfigurationPtrOutputWithContext(ctx)
}

// JobDefinitionNetworkConfigurationPtrInput is an input type that accepts JobDefinitionNetworkConfigurationArgs, JobDefinitionNetworkConfigurationPtr and JobDefinitionNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `JobDefinitionNetworkConfigurationPtrInput` via:
//
//	        JobDefinitionNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToJobDefinitionNetworkConfigurationPtrOutput() JobDefinitionNetworkConfigurationPtrOutput
	ToJobDefinitionNetworkConfigurationPtrOutputWithContext(context.Context) JobDefinitionNetworkConfigurationPtrOutput
}

type jobDefinitionNetworkConfigurationPtrType JobDefinitionNetworkConfigurationArgs

func JobDefinitionNetworkConfigurationPtr(v *JobDefinitionNetworkConfigurationArgs) JobDefinitionNetworkConfigurationPtrInput {
	return (*jobDefinitionNetworkConfigurationPtrType)(v)
}

func (*jobDefinitionNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionNetworkConfiguration)(nil)).Elem()
}

func (i *jobDefinitionNetworkConfigurationPtrType) ToJobDefinitionNetworkConfigurationPtrOutput() JobDefinitionNetworkConfigurationPtrOutput {
	return i.ToJobDefinitionNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionNetworkConfigurationPtrType) ToJobDefinitionNetworkConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNetworkConfigurationPtrOutput)
}

type JobDefinitionNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (JobDefinitionNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionNetworkConfiguration)(nil)).Elem()
}

func (o JobDefinitionNetworkConfigurationOutput) ToJobDefinitionNetworkConfigurationOutput() JobDefinitionNetworkConfigurationOutput {
	return o
}

func (o JobDefinitionNetworkConfigurationOutput) ToJobDefinitionNetworkConfigurationOutputWithContext(ctx context.Context) JobDefinitionNetworkConfigurationOutput {
	return o
}

func (o JobDefinitionNetworkConfigurationOutput) ToJobDefinitionNetworkConfigurationPtrOutput() JobDefinitionNetworkConfigurationPtrOutput {
	return o.ToJobDefinitionNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o JobDefinitionNetworkConfigurationOutput) ToJobDefinitionNetworkConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionNetworkConfiguration) *JobDefinitionNetworkConfiguration {
		return &v
	}).(JobDefinitionNetworkConfigurationPtrOutput)
}

// Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* . The default value is " `DISABLED` ".
func (o JobDefinitionNetworkConfigurationOutput) AssignPublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionNetworkConfiguration) *string { return v.AssignPublicIp }).(pulumi.StringPtrOutput)
}

type JobDefinitionNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionNetworkConfiguration)(nil)).Elem()
}

func (o JobDefinitionNetworkConfigurationPtrOutput) ToJobDefinitionNetworkConfigurationPtrOutput() JobDefinitionNetworkConfigurationPtrOutput {
	return o
}

func (o JobDefinitionNetworkConfigurationPtrOutput) ToJobDefinitionNetworkConfigurationPtrOutputWithContext(ctx context.Context) JobDefinitionNetworkConfigurationPtrOutput {
	return o
}

func (o JobDefinitionNetworkConfigurationPtrOutput) Elem() JobDefinitionNetworkConfigurationOutput {
	return o.ApplyT(func(v *JobDefinitionNetworkConfiguration) JobDefinitionNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret JobDefinitionNetworkConfiguration
		return ret
	}).(JobDefinitionNetworkConfigurationOutput)
}

// Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* . The default value is " `DISABLED` ".
func (o JobDefinitionNetworkConfigurationPtrOutput) AssignPublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionNetworkConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionNodeProperties struct {
	// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
	MainNode int `pulumi:"mainNode"`
	// A list of node ranges and their properties that are associated with a multi-node parallel job.
	NodeRangeProperties []JobDefinitionNodeRangeProperty `pulumi:"nodeRangeProperties"`
	// The number of nodes that are associated with a multi-node parallel job.
	NumNodes int `pulumi:"numNodes"`
}

// JobDefinitionNodePropertiesInput is an input type that accepts JobDefinitionNodePropertiesArgs and JobDefinitionNodePropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionNodePropertiesInput` via:
//
//	JobDefinitionNodePropertiesArgs{...}
type JobDefinitionNodePropertiesInput interface {
	pulumi.Input

	ToJobDefinitionNodePropertiesOutput() JobDefinitionNodePropertiesOutput
	ToJobDefinitionNodePropertiesOutputWithContext(context.Context) JobDefinitionNodePropertiesOutput
}

type JobDefinitionNodePropertiesArgs struct {
	// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
	MainNode pulumi.IntInput `pulumi:"mainNode"`
	// A list of node ranges and their properties that are associated with a multi-node parallel job.
	NodeRangeProperties JobDefinitionNodeRangePropertyArrayInput `pulumi:"nodeRangeProperties"`
	// The number of nodes that are associated with a multi-node parallel job.
	NumNodes pulumi.IntInput `pulumi:"numNodes"`
}

func (JobDefinitionNodePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionNodeProperties)(nil)).Elem()
}

func (i JobDefinitionNodePropertiesArgs) ToJobDefinitionNodePropertiesOutput() JobDefinitionNodePropertiesOutput {
	return i.ToJobDefinitionNodePropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionNodePropertiesArgs) ToJobDefinitionNodePropertiesOutputWithContext(ctx context.Context) JobDefinitionNodePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNodePropertiesOutput)
}

func (i JobDefinitionNodePropertiesArgs) ToJobDefinitionNodePropertiesPtrOutput() JobDefinitionNodePropertiesPtrOutput {
	return i.ToJobDefinitionNodePropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionNodePropertiesArgs) ToJobDefinitionNodePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionNodePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNodePropertiesOutput).ToJobDefinitionNodePropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionNodePropertiesPtrInput is an input type that accepts JobDefinitionNodePropertiesArgs, JobDefinitionNodePropertiesPtr and JobDefinitionNodePropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionNodePropertiesPtrInput` via:
//
//	        JobDefinitionNodePropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionNodePropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionNodePropertiesPtrOutput() JobDefinitionNodePropertiesPtrOutput
	ToJobDefinitionNodePropertiesPtrOutputWithContext(context.Context) JobDefinitionNodePropertiesPtrOutput
}

type jobDefinitionNodePropertiesPtrType JobDefinitionNodePropertiesArgs

func JobDefinitionNodePropertiesPtr(v *JobDefinitionNodePropertiesArgs) JobDefinitionNodePropertiesPtrInput {
	return (*jobDefinitionNodePropertiesPtrType)(v)
}

func (*jobDefinitionNodePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionNodeProperties)(nil)).Elem()
}

func (i *jobDefinitionNodePropertiesPtrType) ToJobDefinitionNodePropertiesPtrOutput() JobDefinitionNodePropertiesPtrOutput {
	return i.ToJobDefinitionNodePropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionNodePropertiesPtrType) ToJobDefinitionNodePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionNodePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNodePropertiesPtrOutput)
}

type JobDefinitionNodePropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionNodePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionNodeProperties)(nil)).Elem()
}

func (o JobDefinitionNodePropertiesOutput) ToJobDefinitionNodePropertiesOutput() JobDefinitionNodePropertiesOutput {
	return o
}

func (o JobDefinitionNodePropertiesOutput) ToJobDefinitionNodePropertiesOutputWithContext(ctx context.Context) JobDefinitionNodePropertiesOutput {
	return o
}

func (o JobDefinitionNodePropertiesOutput) ToJobDefinitionNodePropertiesPtrOutput() JobDefinitionNodePropertiesPtrOutput {
	return o.ToJobDefinitionNodePropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionNodePropertiesOutput) ToJobDefinitionNodePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionNodePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionNodeProperties) *JobDefinitionNodeProperties {
		return &v
	}).(JobDefinitionNodePropertiesPtrOutput)
}

// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
func (o JobDefinitionNodePropertiesOutput) MainNode() pulumi.IntOutput {
	return o.ApplyT(func(v JobDefinitionNodeProperties) int { return v.MainNode }).(pulumi.IntOutput)
}

// A list of node ranges and their properties that are associated with a multi-node parallel job.
func (o JobDefinitionNodePropertiesOutput) NodeRangeProperties() JobDefinitionNodeRangePropertyArrayOutput {
	return o.ApplyT(func(v JobDefinitionNodeProperties) []JobDefinitionNodeRangeProperty { return v.NodeRangeProperties }).(JobDefinitionNodeRangePropertyArrayOutput)
}

// The number of nodes that are associated with a multi-node parallel job.
func (o JobDefinitionNodePropertiesOutput) NumNodes() pulumi.IntOutput {
	return o.ApplyT(func(v JobDefinitionNodeProperties) int { return v.NumNodes }).(pulumi.IntOutput)
}

type JobDefinitionNodePropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionNodePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionNodeProperties)(nil)).Elem()
}

func (o JobDefinitionNodePropertiesPtrOutput) ToJobDefinitionNodePropertiesPtrOutput() JobDefinitionNodePropertiesPtrOutput {
	return o
}

func (o JobDefinitionNodePropertiesPtrOutput) ToJobDefinitionNodePropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionNodePropertiesPtrOutput {
	return o
}

func (o JobDefinitionNodePropertiesPtrOutput) Elem() JobDefinitionNodePropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionNodeProperties) JobDefinitionNodeProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionNodeProperties
		return ret
	}).(JobDefinitionNodePropertiesOutput)
}

// Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
func (o JobDefinitionNodePropertiesPtrOutput) MainNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionNodeProperties) *int {
		if v == nil {
			return nil
		}
		return &v.MainNode
	}).(pulumi.IntPtrOutput)
}

// A list of node ranges and their properties that are associated with a multi-node parallel job.
func (o JobDefinitionNodePropertiesPtrOutput) NodeRangeProperties() JobDefinitionNodeRangePropertyArrayOutput {
	return o.ApplyT(func(v *JobDefinitionNodeProperties) []JobDefinitionNodeRangeProperty {
		if v == nil {
			return nil
		}
		return v.NodeRangeProperties
	}).(JobDefinitionNodeRangePropertyArrayOutput)
}

// The number of nodes that are associated with a multi-node parallel job.
func (o JobDefinitionNodePropertiesPtrOutput) NumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionNodeProperties) *int {
		if v == nil {
			return nil
		}
		return &v.NumNodes
	}).(pulumi.IntPtrOutput)
}

type JobDefinitionNodeRangeProperty struct {
	// Contains a list of consumable resources required by a job.
	ConsumableResourceProperties *JobDefinitionConsumableResourceProperties `pulumi:"consumableResourceProperties"`
	// The container details for the node range.
	Container *JobDefinitionMultiNodeContainerProperties `pulumi:"container"`
	// This is an object that represents the properties of the node range for a multi-node parallel job.
	EcsProperties *JobDefinitionMultiNodeEcsProperties `pulumi:"ecsProperties"`
	// This is an object that represents the properties of the node range for a multi-node parallel job.
	EksProperties *JobDefinitionEksProperties `pulumi:"eksProperties"`
	// The instance types of the underlying host infrastructure of a multi-node parallel job.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources.
	// >
	// > In addition, this list object is currently limited to one element.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The range of nodes, using node index values. A range of `0:3` indicates nodes with index values of `0` through `3` . If the starting range value is omitted ( `:n` ), then `0` is used to start the range. If the ending range value is omitted ( `n:` ), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes ( `0:n` ). You can nest node ranges (for example, `0:10` and `4:5` ). In this case, the `4:5` range properties override the `0:10` properties.
	TargetNodes string `pulumi:"targetNodes"`
}

// JobDefinitionNodeRangePropertyInput is an input type that accepts JobDefinitionNodeRangePropertyArgs and JobDefinitionNodeRangePropertyOutput values.
// You can construct a concrete instance of `JobDefinitionNodeRangePropertyInput` via:
//
//	JobDefinitionNodeRangePropertyArgs{...}
type JobDefinitionNodeRangePropertyInput interface {
	pulumi.Input

	ToJobDefinitionNodeRangePropertyOutput() JobDefinitionNodeRangePropertyOutput
	ToJobDefinitionNodeRangePropertyOutputWithContext(context.Context) JobDefinitionNodeRangePropertyOutput
}

type JobDefinitionNodeRangePropertyArgs struct {
	// Contains a list of consumable resources required by a job.
	ConsumableResourceProperties JobDefinitionConsumableResourcePropertiesPtrInput `pulumi:"consumableResourceProperties"`
	// The container details for the node range.
	Container JobDefinitionMultiNodeContainerPropertiesPtrInput `pulumi:"container"`
	// This is an object that represents the properties of the node range for a multi-node parallel job.
	EcsProperties JobDefinitionMultiNodeEcsPropertiesPtrInput `pulumi:"ecsProperties"`
	// This is an object that represents the properties of the node range for a multi-node parallel job.
	EksProperties JobDefinitionEksPropertiesPtrInput `pulumi:"eksProperties"`
	// The instance types of the underlying host infrastructure of a multi-node parallel job.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources.
	// >
	// > In addition, this list object is currently limited to one element.
	InstanceTypes pulumi.StringArrayInput `pulumi:"instanceTypes"`
	// The range of nodes, using node index values. A range of `0:3` indicates nodes with index values of `0` through `3` . If the starting range value is omitted ( `:n` ), then `0` is used to start the range. If the ending range value is omitted ( `n:` ), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes ( `0:n` ). You can nest node ranges (for example, `0:10` and `4:5` ). In this case, the `4:5` range properties override the `0:10` properties.
	TargetNodes pulumi.StringInput `pulumi:"targetNodes"`
}

func (JobDefinitionNodeRangePropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionNodeRangeProperty)(nil)).Elem()
}

func (i JobDefinitionNodeRangePropertyArgs) ToJobDefinitionNodeRangePropertyOutput() JobDefinitionNodeRangePropertyOutput {
	return i.ToJobDefinitionNodeRangePropertyOutputWithContext(context.Background())
}

func (i JobDefinitionNodeRangePropertyArgs) ToJobDefinitionNodeRangePropertyOutputWithContext(ctx context.Context) JobDefinitionNodeRangePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNodeRangePropertyOutput)
}

// JobDefinitionNodeRangePropertyArrayInput is an input type that accepts JobDefinitionNodeRangePropertyArray and JobDefinitionNodeRangePropertyArrayOutput values.
// You can construct a concrete instance of `JobDefinitionNodeRangePropertyArrayInput` via:
//
//	JobDefinitionNodeRangePropertyArray{ JobDefinitionNodeRangePropertyArgs{...} }
type JobDefinitionNodeRangePropertyArrayInput interface {
	pulumi.Input

	ToJobDefinitionNodeRangePropertyArrayOutput() JobDefinitionNodeRangePropertyArrayOutput
	ToJobDefinitionNodeRangePropertyArrayOutputWithContext(context.Context) JobDefinitionNodeRangePropertyArrayOutput
}

type JobDefinitionNodeRangePropertyArray []JobDefinitionNodeRangePropertyInput

func (JobDefinitionNodeRangePropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionNodeRangeProperty)(nil)).Elem()
}

func (i JobDefinitionNodeRangePropertyArray) ToJobDefinitionNodeRangePropertyArrayOutput() JobDefinitionNodeRangePropertyArrayOutput {
	return i.ToJobDefinitionNodeRangePropertyArrayOutputWithContext(context.Background())
}

func (i JobDefinitionNodeRangePropertyArray) ToJobDefinitionNodeRangePropertyArrayOutputWithContext(ctx context.Context) JobDefinitionNodeRangePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionNodeRangePropertyArrayOutput)
}

type JobDefinitionNodeRangePropertyOutput struct{ *pulumi.OutputState }

func (JobDefinitionNodeRangePropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionNodeRangeProperty)(nil)).Elem()
}

func (o JobDefinitionNodeRangePropertyOutput) ToJobDefinitionNodeRangePropertyOutput() JobDefinitionNodeRangePropertyOutput {
	return o
}

func (o JobDefinitionNodeRangePropertyOutput) ToJobDefinitionNodeRangePropertyOutputWithContext(ctx context.Context) JobDefinitionNodeRangePropertyOutput {
	return o
}

// Contains a list of consumable resources required by a job.
func (o JobDefinitionNodeRangePropertyOutput) ConsumableResourceProperties() JobDefinitionConsumableResourcePropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionNodeRangeProperty) *JobDefinitionConsumableResourceProperties {
		return v.ConsumableResourceProperties
	}).(JobDefinitionConsumableResourcePropertiesPtrOutput)
}

// The container details for the node range.
func (o JobDefinitionNodeRangePropertyOutput) Container() JobDefinitionMultiNodeContainerPropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionNodeRangeProperty) *JobDefinitionMultiNodeContainerProperties { return v.Container }).(JobDefinitionMultiNodeContainerPropertiesPtrOutput)
}

// This is an object that represents the properties of the node range for a multi-node parallel job.
func (o JobDefinitionNodeRangePropertyOutput) EcsProperties() JobDefinitionMultiNodeEcsPropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionNodeRangeProperty) *JobDefinitionMultiNodeEcsProperties { return v.EcsProperties }).(JobDefinitionMultiNodeEcsPropertiesPtrOutput)
}

// This is an object that represents the properties of the node range for a multi-node parallel job.
func (o JobDefinitionNodeRangePropertyOutput) EksProperties() JobDefinitionEksPropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionNodeRangeProperty) *JobDefinitionEksProperties { return v.EksProperties }).(JobDefinitionEksPropertiesPtrOutput)
}

// The instance types of the underlying host infrastructure of a multi-node parallel job.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources.
// >
// > In addition, this list object is currently limited to one element.
func (o JobDefinitionNodeRangePropertyOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionNodeRangeProperty) []string { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

// The range of nodes, using node index values. A range of `0:3` indicates nodes with index values of `0` through `3` . If the starting range value is omitted ( `:n` ), then `0` is used to start the range. If the ending range value is omitted ( `n:` ), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes ( `0:n` ). You can nest node ranges (for example, `0:10` and `4:5` ). In this case, the `4:5` range properties override the `0:10` properties.
func (o JobDefinitionNodeRangePropertyOutput) TargetNodes() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionNodeRangeProperty) string { return v.TargetNodes }).(pulumi.StringOutput)
}

type JobDefinitionNodeRangePropertyArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionNodeRangePropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionNodeRangeProperty)(nil)).Elem()
}

func (o JobDefinitionNodeRangePropertyArrayOutput) ToJobDefinitionNodeRangePropertyArrayOutput() JobDefinitionNodeRangePropertyArrayOutput {
	return o
}

func (o JobDefinitionNodeRangePropertyArrayOutput) ToJobDefinitionNodeRangePropertyArrayOutputWithContext(ctx context.Context) JobDefinitionNodeRangePropertyArrayOutput {
	return o
}

func (o JobDefinitionNodeRangePropertyArrayOutput) Index(i pulumi.IntInput) JobDefinitionNodeRangePropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionNodeRangeProperty {
		return vs[0].([]JobDefinitionNodeRangeProperty)[vs[1].(int)]
	}).(JobDefinitionNodeRangePropertyOutput)
}

type JobDefinitionRepositoryCredentials struct {
	// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
	CredentialsParameter string `pulumi:"credentialsParameter"`
}

// JobDefinitionRepositoryCredentialsInput is an input type that accepts JobDefinitionRepositoryCredentialsArgs and JobDefinitionRepositoryCredentialsOutput values.
// You can construct a concrete instance of `JobDefinitionRepositoryCredentialsInput` via:
//
//	JobDefinitionRepositoryCredentialsArgs{...}
type JobDefinitionRepositoryCredentialsInput interface {
	pulumi.Input

	ToJobDefinitionRepositoryCredentialsOutput() JobDefinitionRepositoryCredentialsOutput
	ToJobDefinitionRepositoryCredentialsOutputWithContext(context.Context) JobDefinitionRepositoryCredentialsOutput
}

type JobDefinitionRepositoryCredentialsArgs struct {
	// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
	CredentialsParameter pulumi.StringInput `pulumi:"credentialsParameter"`
}

func (JobDefinitionRepositoryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i JobDefinitionRepositoryCredentialsArgs) ToJobDefinitionRepositoryCredentialsOutput() JobDefinitionRepositoryCredentialsOutput {
	return i.ToJobDefinitionRepositoryCredentialsOutputWithContext(context.Background())
}

func (i JobDefinitionRepositoryCredentialsArgs) ToJobDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) JobDefinitionRepositoryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRepositoryCredentialsOutput)
}

func (i JobDefinitionRepositoryCredentialsArgs) ToJobDefinitionRepositoryCredentialsPtrOutput() JobDefinitionRepositoryCredentialsPtrOutput {
	return i.ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i JobDefinitionRepositoryCredentialsArgs) ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) JobDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRepositoryCredentialsOutput).ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(ctx)
}

// JobDefinitionRepositoryCredentialsPtrInput is an input type that accepts JobDefinitionRepositoryCredentialsArgs, JobDefinitionRepositoryCredentialsPtr and JobDefinitionRepositoryCredentialsPtrOutput values.
// You can construct a concrete instance of `JobDefinitionRepositoryCredentialsPtrInput` via:
//
//	        JobDefinitionRepositoryCredentialsArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionRepositoryCredentialsPtrInput interface {
	pulumi.Input

	ToJobDefinitionRepositoryCredentialsPtrOutput() JobDefinitionRepositoryCredentialsPtrOutput
	ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(context.Context) JobDefinitionRepositoryCredentialsPtrOutput
}

type jobDefinitionRepositoryCredentialsPtrType JobDefinitionRepositoryCredentialsArgs

func JobDefinitionRepositoryCredentialsPtr(v *JobDefinitionRepositoryCredentialsArgs) JobDefinitionRepositoryCredentialsPtrInput {
	return (*jobDefinitionRepositoryCredentialsPtrType)(v)
}

func (*jobDefinitionRepositoryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i *jobDefinitionRepositoryCredentialsPtrType) ToJobDefinitionRepositoryCredentialsPtrOutput() JobDefinitionRepositoryCredentialsPtrOutput {
	return i.ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionRepositoryCredentialsPtrType) ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) JobDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRepositoryCredentialsPtrOutput)
}

type JobDefinitionRepositoryCredentialsOutput struct{ *pulumi.OutputState }

func (JobDefinitionRepositoryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o JobDefinitionRepositoryCredentialsOutput) ToJobDefinitionRepositoryCredentialsOutput() JobDefinitionRepositoryCredentialsOutput {
	return o
}

func (o JobDefinitionRepositoryCredentialsOutput) ToJobDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) JobDefinitionRepositoryCredentialsOutput {
	return o
}

func (o JobDefinitionRepositoryCredentialsOutput) ToJobDefinitionRepositoryCredentialsPtrOutput() JobDefinitionRepositoryCredentialsPtrOutput {
	return o.ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (o JobDefinitionRepositoryCredentialsOutput) ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) JobDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionRepositoryCredentials) *JobDefinitionRepositoryCredentials {
		return &v
	}).(JobDefinitionRepositoryCredentialsPtrOutput)
}

// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
func (o JobDefinitionRepositoryCredentialsOutput) CredentialsParameter() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionRepositoryCredentials) string { return v.CredentialsParameter }).(pulumi.StringOutput)
}

type JobDefinitionRepositoryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionRepositoryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o JobDefinitionRepositoryCredentialsPtrOutput) ToJobDefinitionRepositoryCredentialsPtrOutput() JobDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o JobDefinitionRepositoryCredentialsPtrOutput) ToJobDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) JobDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o JobDefinitionRepositoryCredentialsPtrOutput) Elem() JobDefinitionRepositoryCredentialsOutput {
	return o.ApplyT(func(v *JobDefinitionRepositoryCredentials) JobDefinitionRepositoryCredentials {
		if v != nil {
			return *v
		}
		var ret JobDefinitionRepositoryCredentials
		return ret
	}).(JobDefinitionRepositoryCredentialsOutput)
}

// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
func (o JobDefinitionRepositoryCredentialsPtrOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionRepositoryCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.CredentialsParameter
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionResourceRequirement struct {
	// The type of resource to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
	Type *string `pulumi:"type"`
	// The quantity of the specified resource to reserve for the container. The values vary based on the `type` specified.
	//
	// - **type="GPU"** - The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on.
	//
	// > GPUs aren't available for jobs that are running on Fargate resources.
	// - **type="MEMORY"** - The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on Amazon EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
	//
	// For jobs that are running on Fargate resources, then `value` is the hard limit (in MiB), and must match one of the supported values and the `VCPU` values must be one of the values supported for that memory value.
	//
	// - **value = 512** - `VCPU` = 0.25
	// - **value = 1024** - `VCPU` = 0.25 or 0.5
	// - **value = 2048** - `VCPU` = 0.25, 0.5, or 1
	// - **value = 3072** - `VCPU` = 0.5, or 1
	// - **value = 4096** - `VCPU` = 0.5, 1, or 2
	// - **value = 5120, 6144, or 7168** - `VCPU` = 1 or 2
	// - **value = 8192** - `VCPU` = 1, 2, or 4
	// - **value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360** - `VCPU` = 2 or 4
	// - **value = 16384** - `VCPU` = 2, 4, or 8
	// - **value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720** - `VCPU` = 4
	// - **value = 20480, 24576, or 28672** - `VCPU` = 4 or 8
	// - **value = 36864, 45056, 53248, or 61440** - `VCPU` = 8
	// - **value = 32768, 40960, 49152, or 57344** - `VCPU` = 8 or 16
	// - **value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880** - `VCPU` = 16
	// - **type="VCPU"** - The number of vCPUs reserved for the container. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . Each vCPU is equivalent to 1,024 CPU shares. For Amazon EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
	//
	// The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [AWS Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the *AWS General Reference* .
	//
	// For jobs that are running on Fargate resources, then `value` must match one of the supported values and the `MEMORY` values must be one of the values supported for that `VCPU` value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16
	//
	// - **value = 0.25** - `MEMORY` = 512, 1024, or 2048
	// - **value = 0.5** - `MEMORY` = 1024, 2048, 3072, or 4096
	// - **value = 1** - `MEMORY` = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
	// - **value = 2** - `MEMORY` = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
	// - **value = 4** - `MEMORY` = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
	// - **value = 8** - `MEMORY` = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440
	// - **value = 16** - `MEMORY` = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
	Value *string `pulumi:"value"`
}

// JobDefinitionResourceRequirementInput is an input type that accepts JobDefinitionResourceRequirementArgs and JobDefinitionResourceRequirementOutput values.
// You can construct a concrete instance of `JobDefinitionResourceRequirementInput` via:
//
//	JobDefinitionResourceRequirementArgs{...}
type JobDefinitionResourceRequirementInput interface {
	pulumi.Input

	ToJobDefinitionResourceRequirementOutput() JobDefinitionResourceRequirementOutput
	ToJobDefinitionResourceRequirementOutputWithContext(context.Context) JobDefinitionResourceRequirementOutput
}

type JobDefinitionResourceRequirementArgs struct {
	// The type of resource to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The quantity of the specified resource to reserve for the container. The values vary based on the `type` specified.
	//
	// - **type="GPU"** - The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on.
	//
	// > GPUs aren't available for jobs that are running on Fargate resources.
	// - **type="MEMORY"** - The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on Amazon EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
	//
	// For jobs that are running on Fargate resources, then `value` is the hard limit (in MiB), and must match one of the supported values and the `VCPU` values must be one of the values supported for that memory value.
	//
	// - **value = 512** - `VCPU` = 0.25
	// - **value = 1024** - `VCPU` = 0.25 or 0.5
	// - **value = 2048** - `VCPU` = 0.25, 0.5, or 1
	// - **value = 3072** - `VCPU` = 0.5, or 1
	// - **value = 4096** - `VCPU` = 0.5, 1, or 2
	// - **value = 5120, 6144, or 7168** - `VCPU` = 1 or 2
	// - **value = 8192** - `VCPU` = 1, 2, or 4
	// - **value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360** - `VCPU` = 2 or 4
	// - **value = 16384** - `VCPU` = 2, 4, or 8
	// - **value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720** - `VCPU` = 4
	// - **value = 20480, 24576, or 28672** - `VCPU` = 4 or 8
	// - **value = 36864, 45056, 53248, or 61440** - `VCPU` = 8
	// - **value = 32768, 40960, 49152, or 57344** - `VCPU` = 8 or 16
	// - **value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880** - `VCPU` = 16
	// - **type="VCPU"** - The number of vCPUs reserved for the container. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . Each vCPU is equivalent to 1,024 CPU shares. For Amazon EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
	//
	// The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [AWS Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the *AWS General Reference* .
	//
	// For jobs that are running on Fargate resources, then `value` must match one of the supported values and the `MEMORY` values must be one of the values supported for that `VCPU` value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16
	//
	// - **value = 0.25** - `MEMORY` = 512, 1024, or 2048
	// - **value = 0.5** - `MEMORY` = 1024, 2048, 3072, or 4096
	// - **value = 1** - `MEMORY` = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
	// - **value = 2** - `MEMORY` = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
	// - **value = 4** - `MEMORY` = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
	// - **value = 8** - `MEMORY` = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440
	// - **value = 16** - `MEMORY` = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (JobDefinitionResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionResourceRequirement)(nil)).Elem()
}

func (i JobDefinitionResourceRequirementArgs) ToJobDefinitionResourceRequirementOutput() JobDefinitionResourceRequirementOutput {
	return i.ToJobDefinitionResourceRequirementOutputWithContext(context.Background())
}

func (i JobDefinitionResourceRequirementArgs) ToJobDefinitionResourceRequirementOutputWithContext(ctx context.Context) JobDefinitionResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionResourceRequirementOutput)
}

// JobDefinitionResourceRequirementArrayInput is an input type that accepts JobDefinitionResourceRequirementArray and JobDefinitionResourceRequirementArrayOutput values.
// You can construct a concrete instance of `JobDefinitionResourceRequirementArrayInput` via:
//
//	JobDefinitionResourceRequirementArray{ JobDefinitionResourceRequirementArgs{...} }
type JobDefinitionResourceRequirementArrayInput interface {
	pulumi.Input

	ToJobDefinitionResourceRequirementArrayOutput() JobDefinitionResourceRequirementArrayOutput
	ToJobDefinitionResourceRequirementArrayOutputWithContext(context.Context) JobDefinitionResourceRequirementArrayOutput
}

type JobDefinitionResourceRequirementArray []JobDefinitionResourceRequirementInput

func (JobDefinitionResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionResourceRequirement)(nil)).Elem()
}

func (i JobDefinitionResourceRequirementArray) ToJobDefinitionResourceRequirementArrayOutput() JobDefinitionResourceRequirementArrayOutput {
	return i.ToJobDefinitionResourceRequirementArrayOutputWithContext(context.Background())
}

func (i JobDefinitionResourceRequirementArray) ToJobDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) JobDefinitionResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionResourceRequirementArrayOutput)
}

type JobDefinitionResourceRequirementOutput struct{ *pulumi.OutputState }

func (JobDefinitionResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionResourceRequirement)(nil)).Elem()
}

func (o JobDefinitionResourceRequirementOutput) ToJobDefinitionResourceRequirementOutput() JobDefinitionResourceRequirementOutput {
	return o
}

func (o JobDefinitionResourceRequirementOutput) ToJobDefinitionResourceRequirementOutputWithContext(ctx context.Context) JobDefinitionResourceRequirementOutput {
	return o
}

// The type of resource to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
func (o JobDefinitionResourceRequirementOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionResourceRequirement) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The quantity of the specified resource to reserve for the container. The values vary based on the `type` specified.
//
// - **type="GPU"** - The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on.
//
// > GPUs aren't available for jobs that are running on Fargate resources.
// - **type="MEMORY"** - The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on Amazon EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
//
// For jobs that are running on Fargate resources, then `value` is the hard limit (in MiB), and must match one of the supported values and the `VCPU` values must be one of the values supported for that memory value.
//
// - **value = 512** - `VCPU` = 0.25
// - **value = 1024** - `VCPU` = 0.25 or 0.5
// - **value = 2048** - `VCPU` = 0.25, 0.5, or 1
// - **value = 3072** - `VCPU` = 0.5, or 1
// - **value = 4096** - `VCPU` = 0.5, 1, or 2
// - **value = 5120, 6144, or 7168** - `VCPU` = 1 or 2
// - **value = 8192** - `VCPU` = 1, 2, or 4
// - **value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360** - `VCPU` = 2 or 4
// - **value = 16384** - `VCPU` = 2, 4, or 8
// - **value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720** - `VCPU` = 4
// - **value = 20480, 24576, or 28672** - `VCPU` = 4 or 8
// - **value = 36864, 45056, 53248, or 61440** - `VCPU` = 8
// - **value = 32768, 40960, 49152, or 57344** - `VCPU` = 8 or 16
// - **value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880** - `VCPU` = 16
// - **type="VCPU"** - The number of vCPUs reserved for the container. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . Each vCPU is equivalent to 1,024 CPU shares. For Amazon EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
//
// The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [AWS Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the *AWS General Reference* .
//
// For jobs that are running on Fargate resources, then `value` must match one of the supported values and the `MEMORY` values must be one of the values supported for that `VCPU` value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16
//
// - **value = 0.25** - `MEMORY` = 512, 1024, or 2048
// - **value = 0.5** - `MEMORY` = 1024, 2048, 3072, or 4096
// - **value = 1** - `MEMORY` = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
// - **value = 2** - `MEMORY` = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
// - **value = 4** - `MEMORY` = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
// - **value = 8** - `MEMORY` = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440
// - **value = 16** - `MEMORY` = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
func (o JobDefinitionResourceRequirementOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionResourceRequirement) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type JobDefinitionResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionResourceRequirement)(nil)).Elem()
}

func (o JobDefinitionResourceRequirementArrayOutput) ToJobDefinitionResourceRequirementArrayOutput() JobDefinitionResourceRequirementArrayOutput {
	return o
}

func (o JobDefinitionResourceRequirementArrayOutput) ToJobDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) JobDefinitionResourceRequirementArrayOutput {
	return o
}

func (o JobDefinitionResourceRequirementArrayOutput) Index(i pulumi.IntInput) JobDefinitionResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionResourceRequirement {
		return vs[0].([]JobDefinitionResourceRequirement)[vs[1].(int)]
	}).(JobDefinitionResourceRequirementOutput)
}

type JobDefinitionRetryStrategy struct {
	// The number of times to move a job to the `RUNNABLE` status. You can specify between 1 and 10 attempts. If the value of `attempts` is greater than one, the job is retried on failure the same number of attempts as the value.
	Attempts *int `pulumi:"attempts"`
	// Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. If none of the listed conditions match, then the job is retried.
	EvaluateOnExit []JobDefinitionEvaluateOnExit `pulumi:"evaluateOnExit"`
}

// JobDefinitionRetryStrategyInput is an input type that accepts JobDefinitionRetryStrategyArgs and JobDefinitionRetryStrategyOutput values.
// You can construct a concrete instance of `JobDefinitionRetryStrategyInput` via:
//
//	JobDefinitionRetryStrategyArgs{...}
type JobDefinitionRetryStrategyInput interface {
	pulumi.Input

	ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput
	ToJobDefinitionRetryStrategyOutputWithContext(context.Context) JobDefinitionRetryStrategyOutput
}

type JobDefinitionRetryStrategyArgs struct {
	// The number of times to move a job to the `RUNNABLE` status. You can specify between 1 and 10 attempts. If the value of `attempts` is greater than one, the job is retried on failure the same number of attempts as the value.
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
	// Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. If none of the listed conditions match, then the job is retried.
	EvaluateOnExit JobDefinitionEvaluateOnExitArrayInput `pulumi:"evaluateOnExit"`
}

func (JobDefinitionRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategy)(nil)).Elem()
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput {
	return i.ToJobDefinitionRetryStrategyOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyOutput)
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return i.ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Background())
}

func (i JobDefinitionRetryStrategyArgs) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyOutput).ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx)
}

// JobDefinitionRetryStrategyPtrInput is an input type that accepts JobDefinitionRetryStrategyArgs, JobDefinitionRetryStrategyPtr and JobDefinitionRetryStrategyPtrOutput values.
// You can construct a concrete instance of `JobDefinitionRetryStrategyPtrInput` via:
//
//	        JobDefinitionRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionRetryStrategyPtrInput interface {
	pulumi.Input

	ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput
	ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Context) JobDefinitionRetryStrategyPtrOutput
}

type jobDefinitionRetryStrategyPtrType JobDefinitionRetryStrategyArgs

func JobDefinitionRetryStrategyPtr(v *JobDefinitionRetryStrategyArgs) JobDefinitionRetryStrategyPtrInput {
	return (*jobDefinitionRetryStrategyPtrType)(v)
}

func (*jobDefinitionRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRetryStrategy)(nil)).Elem()
}

func (i *jobDefinitionRetryStrategyPtrType) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return i.ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionRetryStrategyPtrType) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRetryStrategyPtrOutput)
}

type JobDefinitionRetryStrategyOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRetryStrategy)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyOutput() JobDefinitionRetryStrategyOutput {
	return o
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyOutput {
	return o
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return o.ToJobDefinitionRetryStrategyPtrOutputWithContext(context.Background())
}

func (o JobDefinitionRetryStrategyOutput) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionRetryStrategy) *JobDefinitionRetryStrategy {
		return &v
	}).(JobDefinitionRetryStrategyPtrOutput)
}

// The number of times to move a job to the `RUNNABLE` status. You can specify between 1 and 10 attempts. If the value of `attempts` is greater than one, the job is retried on failure the same number of attempts as the value.
func (o JobDefinitionRetryStrategyOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategy) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

// Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. If none of the listed conditions match, then the job is retried.
func (o JobDefinitionRetryStrategyOutput) EvaluateOnExit() JobDefinitionEvaluateOnExitArrayOutput {
	return o.ApplyT(func(v JobDefinitionRetryStrategy) []JobDefinitionEvaluateOnExit { return v.EvaluateOnExit }).(JobDefinitionEvaluateOnExitArrayOutput)
}

type JobDefinitionRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRetryStrategy)(nil)).Elem()
}

func (o JobDefinitionRetryStrategyPtrOutput) ToJobDefinitionRetryStrategyPtrOutput() JobDefinitionRetryStrategyPtrOutput {
	return o
}

func (o JobDefinitionRetryStrategyPtrOutput) ToJobDefinitionRetryStrategyPtrOutputWithContext(ctx context.Context) JobDefinitionRetryStrategyPtrOutput {
	return o
}

func (o JobDefinitionRetryStrategyPtrOutput) Elem() JobDefinitionRetryStrategyOutput {
	return o.ApplyT(func(v *JobDefinitionRetryStrategy) JobDefinitionRetryStrategy {
		if v != nil {
			return *v
		}
		var ret JobDefinitionRetryStrategy
		return ret
	}).(JobDefinitionRetryStrategyOutput)
}

// The number of times to move a job to the `RUNNABLE` status. You can specify between 1 and 10 attempts. If the value of `attempts` is greater than one, the job is retried on failure the same number of attempts as the value.
func (o JobDefinitionRetryStrategyPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobDefinitionRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

// Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. If none of the listed conditions match, then the job is retried.
func (o JobDefinitionRetryStrategyPtrOutput) EvaluateOnExit() JobDefinitionEvaluateOnExitArrayOutput {
	return o.ApplyT(func(v *JobDefinitionRetryStrategy) []JobDefinitionEvaluateOnExit {
		if v == nil {
			return nil
		}
		return v.EvaluateOnExit
	}).(JobDefinitionEvaluateOnExitArrayOutput)
}

type JobDefinitionRuntimePlatform struct {
	// The vCPU architecture. The default value is `X86_64` . Valid values are `X86_64` and `ARM64` .
	//
	// > This parameter must be set to `X86_64` for Windows containers. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
	CpuArchitecture *string `pulumi:"cpuArchitecture"`
	// The operating system for the compute environment. Valid values are: `LINUX` (default), `WINDOWS_SERVER_2019_CORE` , `WINDOWS_SERVER_2019_FULL` , `WINDOWS_SERVER_2022_CORE` , and `WINDOWS_SERVER_2022_FULL` .
	//
	// > The following parameters can’t be set for Windows containers: `linuxParameters` , `privileged` , `user` , `ulimits` , `readonlyRootFilesystem` , and `efsVolumeConfiguration` . > The AWS Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is `LINUX` , the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
	OperatingSystemFamily *string `pulumi:"operatingSystemFamily"`
}

// JobDefinitionRuntimePlatformInput is an input type that accepts JobDefinitionRuntimePlatformArgs and JobDefinitionRuntimePlatformOutput values.
// You can construct a concrete instance of `JobDefinitionRuntimePlatformInput` via:
//
//	JobDefinitionRuntimePlatformArgs{...}
type JobDefinitionRuntimePlatformInput interface {
	pulumi.Input

	ToJobDefinitionRuntimePlatformOutput() JobDefinitionRuntimePlatformOutput
	ToJobDefinitionRuntimePlatformOutputWithContext(context.Context) JobDefinitionRuntimePlatformOutput
}

type JobDefinitionRuntimePlatformArgs struct {
	// The vCPU architecture. The default value is `X86_64` . Valid values are `X86_64` and `ARM64` .
	//
	// > This parameter must be set to `X86_64` for Windows containers. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
	CpuArchitecture pulumi.StringPtrInput `pulumi:"cpuArchitecture"`
	// The operating system for the compute environment. Valid values are: `LINUX` (default), `WINDOWS_SERVER_2019_CORE` , `WINDOWS_SERVER_2019_FULL` , `WINDOWS_SERVER_2022_CORE` , and `WINDOWS_SERVER_2022_FULL` .
	//
	// > The following parameters can’t be set for Windows containers: `linuxParameters` , `privileged` , `user` , `ulimits` , `readonlyRootFilesystem` , and `efsVolumeConfiguration` . > The AWS Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is `LINUX` , the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
	OperatingSystemFamily pulumi.StringPtrInput `pulumi:"operatingSystemFamily"`
}

func (JobDefinitionRuntimePlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRuntimePlatform)(nil)).Elem()
}

func (i JobDefinitionRuntimePlatformArgs) ToJobDefinitionRuntimePlatformOutput() JobDefinitionRuntimePlatformOutput {
	return i.ToJobDefinitionRuntimePlatformOutputWithContext(context.Background())
}

func (i JobDefinitionRuntimePlatformArgs) ToJobDefinitionRuntimePlatformOutputWithContext(ctx context.Context) JobDefinitionRuntimePlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRuntimePlatformOutput)
}

func (i JobDefinitionRuntimePlatformArgs) ToJobDefinitionRuntimePlatformPtrOutput() JobDefinitionRuntimePlatformPtrOutput {
	return i.ToJobDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i JobDefinitionRuntimePlatformArgs) ToJobDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) JobDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRuntimePlatformOutput).ToJobDefinitionRuntimePlatformPtrOutputWithContext(ctx)
}

// JobDefinitionRuntimePlatformPtrInput is an input type that accepts JobDefinitionRuntimePlatformArgs, JobDefinitionRuntimePlatformPtr and JobDefinitionRuntimePlatformPtrOutput values.
// You can construct a concrete instance of `JobDefinitionRuntimePlatformPtrInput` via:
//
//	        JobDefinitionRuntimePlatformArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionRuntimePlatformPtrInput interface {
	pulumi.Input

	ToJobDefinitionRuntimePlatformPtrOutput() JobDefinitionRuntimePlatformPtrOutput
	ToJobDefinitionRuntimePlatformPtrOutputWithContext(context.Context) JobDefinitionRuntimePlatformPtrOutput
}

type jobDefinitionRuntimePlatformPtrType JobDefinitionRuntimePlatformArgs

func JobDefinitionRuntimePlatformPtr(v *JobDefinitionRuntimePlatformArgs) JobDefinitionRuntimePlatformPtrInput {
	return (*jobDefinitionRuntimePlatformPtrType)(v)
}

func (*jobDefinitionRuntimePlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRuntimePlatform)(nil)).Elem()
}

func (i *jobDefinitionRuntimePlatformPtrType) ToJobDefinitionRuntimePlatformPtrOutput() JobDefinitionRuntimePlatformPtrOutput {
	return i.ToJobDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionRuntimePlatformPtrType) ToJobDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) JobDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionRuntimePlatformPtrOutput)
}

type JobDefinitionRuntimePlatformOutput struct{ *pulumi.OutputState }

func (JobDefinitionRuntimePlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionRuntimePlatform)(nil)).Elem()
}

func (o JobDefinitionRuntimePlatformOutput) ToJobDefinitionRuntimePlatformOutput() JobDefinitionRuntimePlatformOutput {
	return o
}

func (o JobDefinitionRuntimePlatformOutput) ToJobDefinitionRuntimePlatformOutputWithContext(ctx context.Context) JobDefinitionRuntimePlatformOutput {
	return o
}

func (o JobDefinitionRuntimePlatformOutput) ToJobDefinitionRuntimePlatformPtrOutput() JobDefinitionRuntimePlatformPtrOutput {
	return o.ToJobDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (o JobDefinitionRuntimePlatformOutput) ToJobDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) JobDefinitionRuntimePlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionRuntimePlatform) *JobDefinitionRuntimePlatform {
		return &v
	}).(JobDefinitionRuntimePlatformPtrOutput)
}

// The vCPU architecture. The default value is `X86_64` . Valid values are `X86_64` and `ARM64` .
//
// > This parameter must be set to `X86_64` for Windows containers. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
func (o JobDefinitionRuntimePlatformOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionRuntimePlatform) *string { return v.CpuArchitecture }).(pulumi.StringPtrOutput)
}

// The operating system for the compute environment. Valid values are: `LINUX` (default), `WINDOWS_SERVER_2019_CORE` , `WINDOWS_SERVER_2019_FULL` , `WINDOWS_SERVER_2022_CORE` , and `WINDOWS_SERVER_2022_FULL` .
//
// > The following parameters can’t be set for Windows containers: `linuxParameters` , `privileged` , `user` , `ulimits` , `readonlyRootFilesystem` , and `efsVolumeConfiguration` . > The AWS Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is `LINUX` , the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
func (o JobDefinitionRuntimePlatformOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionRuntimePlatform) *string { return v.OperatingSystemFamily }).(pulumi.StringPtrOutput)
}

type JobDefinitionRuntimePlatformPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionRuntimePlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionRuntimePlatform)(nil)).Elem()
}

func (o JobDefinitionRuntimePlatformPtrOutput) ToJobDefinitionRuntimePlatformPtrOutput() JobDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o JobDefinitionRuntimePlatformPtrOutput) ToJobDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) JobDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o JobDefinitionRuntimePlatformPtrOutput) Elem() JobDefinitionRuntimePlatformOutput {
	return o.ApplyT(func(v *JobDefinitionRuntimePlatform) JobDefinitionRuntimePlatform {
		if v != nil {
			return *v
		}
		var ret JobDefinitionRuntimePlatform
		return ret
	}).(JobDefinitionRuntimePlatformOutput)
}

// The vCPU architecture. The default value is `X86_64` . Valid values are `X86_64` and `ARM64` .
//
// > This parameter must be set to `X86_64` for Windows containers. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
func (o JobDefinitionRuntimePlatformPtrOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.CpuArchitecture
	}).(pulumi.StringPtrOutput)
}

// The operating system for the compute environment. Valid values are: `LINUX` (default), `WINDOWS_SERVER_2019_CORE` , `WINDOWS_SERVER_2019_FULL` , `WINDOWS_SERVER_2022_CORE` , and `WINDOWS_SERVER_2022_FULL` .
//
// > The following parameters can’t be set for Windows containers: `linuxParameters` , `privileged` , `user` , `ulimits` , `readonlyRootFilesystem` , and `efsVolumeConfiguration` . > The AWS Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is `LINUX` , the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
func (o JobDefinitionRuntimePlatformPtrOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemFamily
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionSecret struct {
	// The name of the secret.
	Name string `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full Amazon Resource Name (ARN) of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems Manager Parameter Store.
	//
	// > If the AWS Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full Amazon Resource Name (ARN) or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom string `pulumi:"valueFrom"`
}

// JobDefinitionSecretInput is an input type that accepts JobDefinitionSecretArgs and JobDefinitionSecretOutput values.
// You can construct a concrete instance of `JobDefinitionSecretInput` via:
//
//	JobDefinitionSecretArgs{...}
type JobDefinitionSecretInput interface {
	pulumi.Input

	ToJobDefinitionSecretOutput() JobDefinitionSecretOutput
	ToJobDefinitionSecretOutputWithContext(context.Context) JobDefinitionSecretOutput
}

type JobDefinitionSecretArgs struct {
	// The name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full Amazon Resource Name (ARN) of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems Manager Parameter Store.
	//
	// > If the AWS Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full Amazon Resource Name (ARN) or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (JobDefinitionSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionSecret)(nil)).Elem()
}

func (i JobDefinitionSecretArgs) ToJobDefinitionSecretOutput() JobDefinitionSecretOutput {
	return i.ToJobDefinitionSecretOutputWithContext(context.Background())
}

func (i JobDefinitionSecretArgs) ToJobDefinitionSecretOutputWithContext(ctx context.Context) JobDefinitionSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionSecretOutput)
}

// JobDefinitionSecretArrayInput is an input type that accepts JobDefinitionSecretArray and JobDefinitionSecretArrayOutput values.
// You can construct a concrete instance of `JobDefinitionSecretArrayInput` via:
//
//	JobDefinitionSecretArray{ JobDefinitionSecretArgs{...} }
type JobDefinitionSecretArrayInput interface {
	pulumi.Input

	ToJobDefinitionSecretArrayOutput() JobDefinitionSecretArrayOutput
	ToJobDefinitionSecretArrayOutputWithContext(context.Context) JobDefinitionSecretArrayOutput
}

type JobDefinitionSecretArray []JobDefinitionSecretInput

func (JobDefinitionSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionSecret)(nil)).Elem()
}

func (i JobDefinitionSecretArray) ToJobDefinitionSecretArrayOutput() JobDefinitionSecretArrayOutput {
	return i.ToJobDefinitionSecretArrayOutputWithContext(context.Background())
}

func (i JobDefinitionSecretArray) ToJobDefinitionSecretArrayOutputWithContext(ctx context.Context) JobDefinitionSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionSecretArrayOutput)
}

type JobDefinitionSecretOutput struct{ *pulumi.OutputState }

func (JobDefinitionSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionSecret)(nil)).Elem()
}

func (o JobDefinitionSecretOutput) ToJobDefinitionSecretOutput() JobDefinitionSecretOutput {
	return o
}

func (o JobDefinitionSecretOutput) ToJobDefinitionSecretOutputWithContext(ctx context.Context) JobDefinitionSecretOutput {
	return o
}

// The name of the secret.
func (o JobDefinitionSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The secret to expose to the container. The supported values are either the full Amazon Resource Name (ARN) of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems Manager Parameter Store.
//
// > If the AWS Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full Amazon Resource Name (ARN) or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
func (o JobDefinitionSecretOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionSecret) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type JobDefinitionSecretArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionSecret)(nil)).Elem()
}

func (o JobDefinitionSecretArrayOutput) ToJobDefinitionSecretArrayOutput() JobDefinitionSecretArrayOutput {
	return o
}

func (o JobDefinitionSecretArrayOutput) ToJobDefinitionSecretArrayOutputWithContext(ctx context.Context) JobDefinitionSecretArrayOutput {
	return o
}

func (o JobDefinitionSecretArrayOutput) Index(i pulumi.IntInput) JobDefinitionSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionSecret {
		return vs[0].([]JobDefinitionSecret)[vs[1].(int)]
	}).(JobDefinitionSecretOutput)
}

type JobDefinitionTaskContainerDependency struct {
	// The dependency condition of the container. The following are the available conditions and their behavior:
	//
	// - `START` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
	// - `COMPLETE` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
	// - `SUCCESS` - This condition is the same as `COMPLETE` , but it also requires that the container exits with a zero status. This condition can't be set on an essential container.
	Condition string `pulumi:"condition"`
	// A unique identifier for the container.
	ContainerName string `pulumi:"containerName"`
}

// JobDefinitionTaskContainerDependencyInput is an input type that accepts JobDefinitionTaskContainerDependencyArgs and JobDefinitionTaskContainerDependencyOutput values.
// You can construct a concrete instance of `JobDefinitionTaskContainerDependencyInput` via:
//
//	JobDefinitionTaskContainerDependencyArgs{...}
type JobDefinitionTaskContainerDependencyInput interface {
	pulumi.Input

	ToJobDefinitionTaskContainerDependencyOutput() JobDefinitionTaskContainerDependencyOutput
	ToJobDefinitionTaskContainerDependencyOutputWithContext(context.Context) JobDefinitionTaskContainerDependencyOutput
}

type JobDefinitionTaskContainerDependencyArgs struct {
	// The dependency condition of the container. The following are the available conditions and their behavior:
	//
	// - `START` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
	// - `COMPLETE` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
	// - `SUCCESS` - This condition is the same as `COMPLETE` , but it also requires that the container exits with a zero status. This condition can't be set on an essential container.
	Condition pulumi.StringInput `pulumi:"condition"`
	// A unique identifier for the container.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
}

func (JobDefinitionTaskContainerDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTaskContainerDependency)(nil)).Elem()
}

func (i JobDefinitionTaskContainerDependencyArgs) ToJobDefinitionTaskContainerDependencyOutput() JobDefinitionTaskContainerDependencyOutput {
	return i.ToJobDefinitionTaskContainerDependencyOutputWithContext(context.Background())
}

func (i JobDefinitionTaskContainerDependencyArgs) ToJobDefinitionTaskContainerDependencyOutputWithContext(ctx context.Context) JobDefinitionTaskContainerDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTaskContainerDependencyOutput)
}

// JobDefinitionTaskContainerDependencyArrayInput is an input type that accepts JobDefinitionTaskContainerDependencyArray and JobDefinitionTaskContainerDependencyArrayOutput values.
// You can construct a concrete instance of `JobDefinitionTaskContainerDependencyArrayInput` via:
//
//	JobDefinitionTaskContainerDependencyArray{ JobDefinitionTaskContainerDependencyArgs{...} }
type JobDefinitionTaskContainerDependencyArrayInput interface {
	pulumi.Input

	ToJobDefinitionTaskContainerDependencyArrayOutput() JobDefinitionTaskContainerDependencyArrayOutput
	ToJobDefinitionTaskContainerDependencyArrayOutputWithContext(context.Context) JobDefinitionTaskContainerDependencyArrayOutput
}

type JobDefinitionTaskContainerDependencyArray []JobDefinitionTaskContainerDependencyInput

func (JobDefinitionTaskContainerDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionTaskContainerDependency)(nil)).Elem()
}

func (i JobDefinitionTaskContainerDependencyArray) ToJobDefinitionTaskContainerDependencyArrayOutput() JobDefinitionTaskContainerDependencyArrayOutput {
	return i.ToJobDefinitionTaskContainerDependencyArrayOutputWithContext(context.Background())
}

func (i JobDefinitionTaskContainerDependencyArray) ToJobDefinitionTaskContainerDependencyArrayOutputWithContext(ctx context.Context) JobDefinitionTaskContainerDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTaskContainerDependencyArrayOutput)
}

type JobDefinitionTaskContainerDependencyOutput struct{ *pulumi.OutputState }

func (JobDefinitionTaskContainerDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTaskContainerDependency)(nil)).Elem()
}

func (o JobDefinitionTaskContainerDependencyOutput) ToJobDefinitionTaskContainerDependencyOutput() JobDefinitionTaskContainerDependencyOutput {
	return o
}

func (o JobDefinitionTaskContainerDependencyOutput) ToJobDefinitionTaskContainerDependencyOutputWithContext(ctx context.Context) JobDefinitionTaskContainerDependencyOutput {
	return o
}

// The dependency condition of the container. The following are the available conditions and their behavior:
//
// - `START` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
// - `COMPLETE` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
// - `SUCCESS` - This condition is the same as `COMPLETE` , but it also requires that the container exits with a zero status. This condition can't be set on an essential container.
func (o JobDefinitionTaskContainerDependencyOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerDependency) string { return v.Condition }).(pulumi.StringOutput)
}

// A unique identifier for the container.
func (o JobDefinitionTaskContainerDependencyOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerDependency) string { return v.ContainerName }).(pulumi.StringOutput)
}

type JobDefinitionTaskContainerDependencyArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionTaskContainerDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionTaskContainerDependency)(nil)).Elem()
}

func (o JobDefinitionTaskContainerDependencyArrayOutput) ToJobDefinitionTaskContainerDependencyArrayOutput() JobDefinitionTaskContainerDependencyArrayOutput {
	return o
}

func (o JobDefinitionTaskContainerDependencyArrayOutput) ToJobDefinitionTaskContainerDependencyArrayOutputWithContext(ctx context.Context) JobDefinitionTaskContainerDependencyArrayOutput {
	return o
}

func (o JobDefinitionTaskContainerDependencyArrayOutput) Index(i pulumi.IntInput) JobDefinitionTaskContainerDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionTaskContainerDependency {
		return vs[0].([]JobDefinitionTaskContainerDependency)[vs[1].(int)]
	}).(JobDefinitionTaskContainerDependencyOutput)
}

type JobDefinitionTaskContainerProperties struct {
	// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
	Command []string `pulumi:"command"`
	// A list of containers that this container depends on.
	DependsOn []JobDefinitionTaskContainerDependency `pulumi:"dependsOn"`
	// The environment variables to pass to a container. This parameter maps to Env in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with `AWS_BATCH` . This naming convention is reserved for variables that AWS Batch sets.
	Environment []JobDefinitionEnvironment `pulumi:"environment"`
	// If the essential parameter of a container is marked as `true` , and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the `essential` parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
	//
	// All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide* .
	Essential *bool `pulumi:"essential"`
	// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) routing in the *Amazon Elastic Container Service Developer Guide* .
	FirelensConfiguration *JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties `pulumi:"firelensConfiguration"`
	// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either `repository-url/image:tag` or `repository-url/image@digest` . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `IMAGE` parameter of the [*docker run*](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	Image string `pulumi:"image"`
	// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html) .
	LinuxParameters *JobDefinitionLinuxParameters `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//
	// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the *Docker documentation* .
	//
	// > Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the `LogConfiguration` data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
	//
	// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
	LogConfiguration *JobDefinitionLogConfiguration `pulumi:"logConfiguration"`
	// The mount points for data volumes in your container.
	//
	// This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints []JobDefinitionMountPoint `pulumi:"mountPoints"`
	// The name of a container. The name can be used as a unique identifier to target your `dependsOn` and `Overrides` objects.
	Name *string `pulumi:"name"`
	// When this parameter is `true` , the container is given elevated privileges on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// > This parameter is not supported for Windows containers or tasks run on Fargate.
	Privileged *bool `pulumi:"privileged"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--read-only` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// > This parameter is not supported for Windows containers.
	ReadonlyRootFilesystem *bool `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials *JobDefinitionRepositoryCredentials `pulumi:"repositoryCredentials"`
	// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
	ResourceRequirements []JobDefinitionResourceRequirement `pulumi:"resourceRequirements"`
	// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
	Secrets []JobDefinitionSecret `pulumi:"secrets"`
	// A list of `ulimits` to set in the container. If a `ulimit` value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The `nofile` resource limit sets a restriction on the number of open files that a container can use. The default `nofile` soft limit is `1024` and the default hard limit is `65535` .
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
	//
	// > This parameter is not supported for Windows containers.
	Ulimits []JobDefinitionUlimit `pulumi:"ulimits"`
	// The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
	//
	// > When running tasks using the `host` network mode, don't run containers using the `root user (UID 0)` . We recommend using a non-root user for better security.
	//
	// You can specify the `user` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
	//
	// - `user`
	// - `user:group`
	// - `uid`
	// - `uid:gid`
	// - `user:gi`
	// - `uid:group`
	//
	// > This parameter is not supported for Windows containers.
	User *string `pulumi:"user"`
}

// JobDefinitionTaskContainerPropertiesInput is an input type that accepts JobDefinitionTaskContainerPropertiesArgs and JobDefinitionTaskContainerPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionTaskContainerPropertiesInput` via:
//
//	JobDefinitionTaskContainerPropertiesArgs{...}
type JobDefinitionTaskContainerPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionTaskContainerPropertiesOutput() JobDefinitionTaskContainerPropertiesOutput
	ToJobDefinitionTaskContainerPropertiesOutputWithContext(context.Context) JobDefinitionTaskContainerPropertiesOutput
}

type JobDefinitionTaskContainerPropertiesArgs struct {
	// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
	Command pulumi.StringArrayInput `pulumi:"command"`
	// A list of containers that this container depends on.
	DependsOn JobDefinitionTaskContainerDependencyArrayInput `pulumi:"dependsOn"`
	// The environment variables to pass to a container. This parameter maps to Env in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
	//
	// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with `AWS_BATCH` . This naming convention is reserved for variables that AWS Batch sets.
	Environment JobDefinitionEnvironmentArrayInput `pulumi:"environment"`
	// If the essential parameter of a container is marked as `true` , and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the `essential` parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
	//
	// All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide* .
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) routing in the *Amazon Elastic Container Service Developer Guide* .
	FirelensConfiguration JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrInput `pulumi:"firelensConfiguration"`
	// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either `repository-url/image:tag` or `repository-url/image@digest` . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `IMAGE` parameter of the [*docker run*](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	Image pulumi.StringInput `pulumi:"image"`
	// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html) .
	LinuxParameters JobDefinitionLinuxParametersPtrInput `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//
	// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the *Docker documentation* .
	//
	// > Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the `LogConfiguration` data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
	//
	// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
	LogConfiguration JobDefinitionLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The mount points for data volumes in your container.
	//
	// This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints JobDefinitionMountPointArrayInput `pulumi:"mountPoints"`
	// The name of a container. The name can be used as a unique identifier to target your `dependsOn` and `Overrides` objects.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// When this parameter is `true` , the container is given elevated privileges on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// > This parameter is not supported for Windows containers or tasks run on Fargate.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--read-only` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// > This parameter is not supported for Windows containers.
	ReadonlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials JobDefinitionRepositoryCredentialsPtrInput `pulumi:"repositoryCredentials"`
	// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
	ResourceRequirements JobDefinitionResourceRequirementArrayInput `pulumi:"resourceRequirements"`
	// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
	Secrets JobDefinitionSecretArrayInput `pulumi:"secrets"`
	// A list of `ulimits` to set in the container. If a `ulimit` value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
	//
	// Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The `nofile` resource limit sets a restriction on the number of open files that a container can use. The default `nofile` soft limit is `1024` and the default hard limit is `65535` .
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
	//
	// > This parameter is not supported for Windows containers.
	Ulimits JobDefinitionUlimitArrayInput `pulumi:"ulimits"`
	// The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
	//
	// > When running tasks using the `host` network mode, don't run containers using the `root user (UID 0)` . We recommend using a non-root user for better security.
	//
	// You can specify the `user` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
	//
	// - `user`
	// - `user:group`
	// - `uid`
	// - `uid:gid`
	// - `user:gi`
	// - `uid:group`
	//
	// > This parameter is not supported for Windows containers.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (JobDefinitionTaskContainerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTaskContainerProperties)(nil)).Elem()
}

func (i JobDefinitionTaskContainerPropertiesArgs) ToJobDefinitionTaskContainerPropertiesOutput() JobDefinitionTaskContainerPropertiesOutput {
	return i.ToJobDefinitionTaskContainerPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionTaskContainerPropertiesArgs) ToJobDefinitionTaskContainerPropertiesOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTaskContainerPropertiesOutput)
}

// JobDefinitionTaskContainerPropertiesArrayInput is an input type that accepts JobDefinitionTaskContainerPropertiesArray and JobDefinitionTaskContainerPropertiesArrayOutput values.
// You can construct a concrete instance of `JobDefinitionTaskContainerPropertiesArrayInput` via:
//
//	JobDefinitionTaskContainerPropertiesArray{ JobDefinitionTaskContainerPropertiesArgs{...} }
type JobDefinitionTaskContainerPropertiesArrayInput interface {
	pulumi.Input

	ToJobDefinitionTaskContainerPropertiesArrayOutput() JobDefinitionTaskContainerPropertiesArrayOutput
	ToJobDefinitionTaskContainerPropertiesArrayOutputWithContext(context.Context) JobDefinitionTaskContainerPropertiesArrayOutput
}

type JobDefinitionTaskContainerPropertiesArray []JobDefinitionTaskContainerPropertiesInput

func (JobDefinitionTaskContainerPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionTaskContainerProperties)(nil)).Elem()
}

func (i JobDefinitionTaskContainerPropertiesArray) ToJobDefinitionTaskContainerPropertiesArrayOutput() JobDefinitionTaskContainerPropertiesArrayOutput {
	return i.ToJobDefinitionTaskContainerPropertiesArrayOutputWithContext(context.Background())
}

func (i JobDefinitionTaskContainerPropertiesArray) ToJobDefinitionTaskContainerPropertiesArrayOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTaskContainerPropertiesArrayOutput)
}

type JobDefinitionTaskContainerPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionTaskContainerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTaskContainerProperties)(nil)).Elem()
}

func (o JobDefinitionTaskContainerPropertiesOutput) ToJobDefinitionTaskContainerPropertiesOutput() JobDefinitionTaskContainerPropertiesOutput {
	return o
}

func (o JobDefinitionTaskContainerPropertiesOutput) ToJobDefinitionTaskContainerPropertiesOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesOutput {
	return o
}

// The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
func (o JobDefinitionTaskContainerPropertiesOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// A list of containers that this container depends on.
func (o JobDefinitionTaskContainerPropertiesOutput) DependsOn() JobDefinitionTaskContainerDependencyArrayOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) []JobDefinitionTaskContainerDependency {
		return v.DependsOn
	}).(JobDefinitionTaskContainerDependencyArrayOutput)
}

// The environment variables to pass to a container. This parameter maps to Env in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
//
// > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with `AWS_BATCH` . This naming convention is reserved for variables that AWS Batch sets.
func (o JobDefinitionTaskContainerPropertiesOutput) Environment() JobDefinitionEnvironmentArrayOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) []JobDefinitionEnvironment { return v.Environment }).(JobDefinitionEnvironmentArrayOutput)
}

// If the essential parameter of a container is marked as `true` , and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the `essential` parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
//
// All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionTaskContainerPropertiesOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) routing in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionTaskContainerPropertiesOutput) FirelensConfiguration() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties {
		return v.FirelensConfiguration
	}).(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput)
}

// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either `repository-url/image:tag` or `repository-url/image@digest` . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `IMAGE` parameter of the [*docker run*](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
func (o JobDefinitionTaskContainerPropertiesOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) string { return v.Image }).(pulumi.StringOutput)
}

// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html) .
func (o JobDefinitionTaskContainerPropertiesOutput) LinuxParameters() JobDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *JobDefinitionLinuxParameters { return v.LinuxParameters }).(JobDefinitionLinuxParametersPtrOutput)
}

// The log configuration specification for the container.
//
// This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
//
// By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the *Docker documentation* .
//
// > Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the `LogConfiguration` data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
//
// > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
func (o JobDefinitionTaskContainerPropertiesOutput) LogConfiguration() JobDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *JobDefinitionLogConfiguration { return v.LogConfiguration }).(JobDefinitionLogConfigurationPtrOutput)
}

// The mount points for data volumes in your container.
//
// This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
//
// Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
func (o JobDefinitionTaskContainerPropertiesOutput) MountPoints() JobDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) []JobDefinitionMountPoint { return v.MountPoints }).(JobDefinitionMountPointArrayOutput)
}

// The name of a container. The name can be used as a unique identifier to target your `dependsOn` and `Overrides` objects.
func (o JobDefinitionTaskContainerPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// When this parameter is `true` , the container is given elevated privileges on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
//
// > This parameter is not supported for Windows containers or tasks run on Fargate.
func (o JobDefinitionTaskContainerPropertiesOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--read-only` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
//
// > This parameter is not supported for Windows containers.
func (o JobDefinitionTaskContainerPropertiesOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *bool { return v.ReadonlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The private repository authentication credentials to use.
func (o JobDefinitionTaskContainerPropertiesOutput) RepositoryCredentials() JobDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *JobDefinitionRepositoryCredentials {
		return v.RepositoryCredentials
	}).(JobDefinitionRepositoryCredentialsPtrOutput)
}

// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
func (o JobDefinitionTaskContainerPropertiesOutput) ResourceRequirements() JobDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) []JobDefinitionResourceRequirement {
		return v.ResourceRequirements
	}).(JobDefinitionResourceRequirementArrayOutput)
}

// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
func (o JobDefinitionTaskContainerPropertiesOutput) Secrets() JobDefinitionSecretArrayOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) []JobDefinitionSecret { return v.Secrets }).(JobDefinitionSecretArrayOutput)
}

// A list of `ulimits` to set in the container. If a `ulimit` value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
//
// Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The `nofile` resource limit sets a restriction on the number of open files that a container can use. The default `nofile` soft limit is `1024` and the default hard limit is `65535` .
//
// This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
//
// > This parameter is not supported for Windows containers.
func (o JobDefinitionTaskContainerPropertiesOutput) Ulimits() JobDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) []JobDefinitionUlimit { return v.Ulimits }).(JobDefinitionUlimitArrayOutput)
}

// The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
//
// > When running tasks using the `host` network mode, don't run containers using the `root user (UID 0)` . We recommend using a non-root user for better security.
//
// You can specify the `user` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
//
// - `user`
// - `user:group`
// - `uid`
// - `uid:gid`
// - `user:gi`
// - `uid:group`
//
// > This parameter is not supported for Windows containers.
func (o JobDefinitionTaskContainerPropertiesOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerProperties) *string { return v.User }).(pulumi.StringPtrOutput)
}

type JobDefinitionTaskContainerPropertiesArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionTaskContainerPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionTaskContainerProperties)(nil)).Elem()
}

func (o JobDefinitionTaskContainerPropertiesArrayOutput) ToJobDefinitionTaskContainerPropertiesArrayOutput() JobDefinitionTaskContainerPropertiesArrayOutput {
	return o
}

func (o JobDefinitionTaskContainerPropertiesArrayOutput) ToJobDefinitionTaskContainerPropertiesArrayOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesArrayOutput {
	return o
}

func (o JobDefinitionTaskContainerPropertiesArrayOutput) Index(i pulumi.IntInput) JobDefinitionTaskContainerPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionTaskContainerProperties {
		return vs[0].([]JobDefinitionTaskContainerProperties)[vs[1].(int)]
	}).(JobDefinitionTaskContainerPropertiesOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) routing in the *Amazon Elastic Container Service Developer Guide* .
type JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties struct {
	Options map[string]string `pulumi:"options"`
	Type    string            `pulumi:"type"`
}

// JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesInput is an input type that accepts JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs and JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesInput` via:
//
//	JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs{...}
type JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput
	ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutputWithContext(context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) routing in the *Amazon Elastic Container Service Developer Guide* .
type JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs struct {
	Options pulumi.StringMapInput `pulumi:"options"`
	Type    pulumi.StringInput    `pulumi:"type"`
}

func (JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties)(nil)).Elem()
}

func (i JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput {
	return i.ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput)
}

func (i JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return i.ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput).ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrInput is an input type that accepts JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs, JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtr and JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrInput` via:
//
//	        JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs{...}
//
//	or:
//
//	        nil
type JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput
	ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput
}

type jobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrType JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs

func JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtr(v *JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrInput {
	return (*jobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrType)(v)
}

func (*jobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties)(nil)).Elem()
}

func (i *jobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrType) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return i.ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrType) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) routing in the *Amazon Elastic Container Service Developer Guide* .
type JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties)(nil)).Elem()
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput {
	return o
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput {
	return o
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return o.ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties) *JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties {
		return &v
	}).(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput)
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties) map[string]string {
		return v.Options
	}).(pulumi.StringMapOutput)
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties) string { return v.Type }).(pulumi.StringOutput)
}

type JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties)(nil)).Elem()
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return o
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput) ToJobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput {
	return o
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput) Elem() JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties) JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties
		return ret
	}).(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput)
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

func (o JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionTaskContainerPropertiesFirelensConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type JobDefinitionTmpfs struct {
	// The absolute file path in the container where the `tmpfs` volume is mounted.
	ContainerPath string `pulumi:"containerPath"`
	// The list of `tmpfs` volume mount options.
	//
	// Valid values: " `defaults` " | " `ro` " | " `rw` " | " `suid` " | " `nosuid` " | " `dev` " | " `nodev` " | " `exec` " | " `noexec` " | " `sync` " | " `async` " | " `dirsync` " | " `remount` " | " `mand` " | " `nomand` " | " `atime` " | " `noatime` " | " `diratime` " | " `nodiratime` " | " `bind` " | " `rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime` " | " `norelatime` " | " `strictatime` " | " `nostrictatime` " | " `mode` " | " `uid` " | " `gid` " | " `nr_inodes` " | " `nr_blocks` " | " `mpol` "
	MountOptions []string `pulumi:"mountOptions"`
	// The size (in MiB) of the `tmpfs` volume.
	Size int `pulumi:"size"`
}

// JobDefinitionTmpfsInput is an input type that accepts JobDefinitionTmpfsArgs and JobDefinitionTmpfsOutput values.
// You can construct a concrete instance of `JobDefinitionTmpfsInput` via:
//
//	JobDefinitionTmpfsArgs{...}
type JobDefinitionTmpfsInput interface {
	pulumi.Input

	ToJobDefinitionTmpfsOutput() JobDefinitionTmpfsOutput
	ToJobDefinitionTmpfsOutputWithContext(context.Context) JobDefinitionTmpfsOutput
}

type JobDefinitionTmpfsArgs struct {
	// The absolute file path in the container where the `tmpfs` volume is mounted.
	ContainerPath pulumi.StringInput `pulumi:"containerPath"`
	// The list of `tmpfs` volume mount options.
	//
	// Valid values: " `defaults` " | " `ro` " | " `rw` " | " `suid` " | " `nosuid` " | " `dev` " | " `nodev` " | " `exec` " | " `noexec` " | " `sync` " | " `async` " | " `dirsync` " | " `remount` " | " `mand` " | " `nomand` " | " `atime` " | " `noatime` " | " `diratime` " | " `nodiratime` " | " `bind` " | " `rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime` " | " `norelatime` " | " `strictatime` " | " `nostrictatime` " | " `mode` " | " `uid` " | " `gid` " | " `nr_inodes` " | " `nr_blocks` " | " `mpol` "
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// The size (in MiB) of the `tmpfs` volume.
	Size pulumi.IntInput `pulumi:"size"`
}

func (JobDefinitionTmpfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTmpfs)(nil)).Elem()
}

func (i JobDefinitionTmpfsArgs) ToJobDefinitionTmpfsOutput() JobDefinitionTmpfsOutput {
	return i.ToJobDefinitionTmpfsOutputWithContext(context.Background())
}

func (i JobDefinitionTmpfsArgs) ToJobDefinitionTmpfsOutputWithContext(ctx context.Context) JobDefinitionTmpfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTmpfsOutput)
}

// JobDefinitionTmpfsArrayInput is an input type that accepts JobDefinitionTmpfsArray and JobDefinitionTmpfsArrayOutput values.
// You can construct a concrete instance of `JobDefinitionTmpfsArrayInput` via:
//
//	JobDefinitionTmpfsArray{ JobDefinitionTmpfsArgs{...} }
type JobDefinitionTmpfsArrayInput interface {
	pulumi.Input

	ToJobDefinitionTmpfsArrayOutput() JobDefinitionTmpfsArrayOutput
	ToJobDefinitionTmpfsArrayOutputWithContext(context.Context) JobDefinitionTmpfsArrayOutput
}

type JobDefinitionTmpfsArray []JobDefinitionTmpfsInput

func (JobDefinitionTmpfsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionTmpfs)(nil)).Elem()
}

func (i JobDefinitionTmpfsArray) ToJobDefinitionTmpfsArrayOutput() JobDefinitionTmpfsArrayOutput {
	return i.ToJobDefinitionTmpfsArrayOutputWithContext(context.Background())
}

func (i JobDefinitionTmpfsArray) ToJobDefinitionTmpfsArrayOutputWithContext(ctx context.Context) JobDefinitionTmpfsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTmpfsArrayOutput)
}

type JobDefinitionTmpfsOutput struct{ *pulumi.OutputState }

func (JobDefinitionTmpfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionTmpfs)(nil)).Elem()
}

func (o JobDefinitionTmpfsOutput) ToJobDefinitionTmpfsOutput() JobDefinitionTmpfsOutput {
	return o
}

func (o JobDefinitionTmpfsOutput) ToJobDefinitionTmpfsOutputWithContext(ctx context.Context) JobDefinitionTmpfsOutput {
	return o
}

// The absolute file path in the container where the `tmpfs` volume is mounted.
func (o JobDefinitionTmpfsOutput) ContainerPath() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionTmpfs) string { return v.ContainerPath }).(pulumi.StringOutput)
}

// The list of `tmpfs` volume mount options.
//
// Valid values: " `defaults` " | " `ro` " | " `rw` " | " `suid` " | " `nosuid` " | " `dev` " | " `nodev` " | " `exec` " | " `noexec` " | " `sync` " | " `async` " | " `dirsync` " | " `remount` " | " `mand` " | " `nomand` " | " `atime` " | " `noatime` " | " `diratime` " | " `nodiratime` " | " `bind` " | " `rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime` " | " `norelatime` " | " `strictatime` " | " `nostrictatime` " | " `mode` " | " `uid` " | " `gid` " | " `nr_inodes` " | " `nr_blocks` " | " `mpol` "
func (o JobDefinitionTmpfsOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobDefinitionTmpfs) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// The size (in MiB) of the `tmpfs` volume.
func (o JobDefinitionTmpfsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v JobDefinitionTmpfs) int { return v.Size }).(pulumi.IntOutput)
}

type JobDefinitionTmpfsArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionTmpfsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionTmpfs)(nil)).Elem()
}

func (o JobDefinitionTmpfsArrayOutput) ToJobDefinitionTmpfsArrayOutput() JobDefinitionTmpfsArrayOutput {
	return o
}

func (o JobDefinitionTmpfsArrayOutput) ToJobDefinitionTmpfsArrayOutputWithContext(ctx context.Context) JobDefinitionTmpfsArrayOutput {
	return o
}

func (o JobDefinitionTmpfsArrayOutput) Index(i pulumi.IntInput) JobDefinitionTmpfsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionTmpfs {
		return vs[0].([]JobDefinitionTmpfs)[vs[1].(int)]
	}).(JobDefinitionTmpfsOutput)
}

type JobDefinitionUlimit struct {
	// The hard limit for the `ulimit` type.
	HardLimit int `pulumi:"hardLimit"`
	// The `type` of the `ulimit` . Valid values are: `core` | `cpu` | `data` | `fsize` | `locks` | `memlock` | `msgqueue` | `nice` | `nofile` | `nproc` | `rss` | `rtprio` | `rttime` | `sigpending` | `stack` .
	Name string `pulumi:"name"`
	// The soft limit for the `ulimit` type.
	SoftLimit int `pulumi:"softLimit"`
}

// JobDefinitionUlimitInput is an input type that accepts JobDefinitionUlimitArgs and JobDefinitionUlimitOutput values.
// You can construct a concrete instance of `JobDefinitionUlimitInput` via:
//
//	JobDefinitionUlimitArgs{...}
type JobDefinitionUlimitInput interface {
	pulumi.Input

	ToJobDefinitionUlimitOutput() JobDefinitionUlimitOutput
	ToJobDefinitionUlimitOutputWithContext(context.Context) JobDefinitionUlimitOutput
}

type JobDefinitionUlimitArgs struct {
	// The hard limit for the `ulimit` type.
	HardLimit pulumi.IntInput `pulumi:"hardLimit"`
	// The `type` of the `ulimit` . Valid values are: `core` | `cpu` | `data` | `fsize` | `locks` | `memlock` | `msgqueue` | `nice` | `nofile` | `nproc` | `rss` | `rtprio` | `rttime` | `sigpending` | `stack` .
	Name pulumi.StringInput `pulumi:"name"`
	// The soft limit for the `ulimit` type.
	SoftLimit pulumi.IntInput `pulumi:"softLimit"`
}

func (JobDefinitionUlimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionUlimit)(nil)).Elem()
}

func (i JobDefinitionUlimitArgs) ToJobDefinitionUlimitOutput() JobDefinitionUlimitOutput {
	return i.ToJobDefinitionUlimitOutputWithContext(context.Background())
}

func (i JobDefinitionUlimitArgs) ToJobDefinitionUlimitOutputWithContext(ctx context.Context) JobDefinitionUlimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionUlimitOutput)
}

// JobDefinitionUlimitArrayInput is an input type that accepts JobDefinitionUlimitArray and JobDefinitionUlimitArrayOutput values.
// You can construct a concrete instance of `JobDefinitionUlimitArrayInput` via:
//
//	JobDefinitionUlimitArray{ JobDefinitionUlimitArgs{...} }
type JobDefinitionUlimitArrayInput interface {
	pulumi.Input

	ToJobDefinitionUlimitArrayOutput() JobDefinitionUlimitArrayOutput
	ToJobDefinitionUlimitArrayOutputWithContext(context.Context) JobDefinitionUlimitArrayOutput
}

type JobDefinitionUlimitArray []JobDefinitionUlimitInput

func (JobDefinitionUlimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionUlimit)(nil)).Elem()
}

func (i JobDefinitionUlimitArray) ToJobDefinitionUlimitArrayOutput() JobDefinitionUlimitArrayOutput {
	return i.ToJobDefinitionUlimitArrayOutputWithContext(context.Background())
}

func (i JobDefinitionUlimitArray) ToJobDefinitionUlimitArrayOutputWithContext(ctx context.Context) JobDefinitionUlimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionUlimitArrayOutput)
}

type JobDefinitionUlimitOutput struct{ *pulumi.OutputState }

func (JobDefinitionUlimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionUlimit)(nil)).Elem()
}

func (o JobDefinitionUlimitOutput) ToJobDefinitionUlimitOutput() JobDefinitionUlimitOutput {
	return o
}

func (o JobDefinitionUlimitOutput) ToJobDefinitionUlimitOutputWithContext(ctx context.Context) JobDefinitionUlimitOutput {
	return o
}

// The hard limit for the `ulimit` type.
func (o JobDefinitionUlimitOutput) HardLimit() pulumi.IntOutput {
	return o.ApplyT(func(v JobDefinitionUlimit) int { return v.HardLimit }).(pulumi.IntOutput)
}

// The `type` of the `ulimit` . Valid values are: `core` | `cpu` | `data` | `fsize` | `locks` | `memlock` | `msgqueue` | `nice` | `nofile` | `nproc` | `rss` | `rtprio` | `rttime` | `sigpending` | `stack` .
func (o JobDefinitionUlimitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionUlimit) string { return v.Name }).(pulumi.StringOutput)
}

// The soft limit for the `ulimit` type.
func (o JobDefinitionUlimitOutput) SoftLimit() pulumi.IntOutput {
	return o.ApplyT(func(v JobDefinitionUlimit) int { return v.SoftLimit }).(pulumi.IntOutput)
}

type JobDefinitionUlimitArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionUlimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionUlimit)(nil)).Elem()
}

func (o JobDefinitionUlimitArrayOutput) ToJobDefinitionUlimitArrayOutput() JobDefinitionUlimitArrayOutput {
	return o
}

func (o JobDefinitionUlimitArrayOutput) ToJobDefinitionUlimitArrayOutputWithContext(ctx context.Context) JobDefinitionUlimitArrayOutput {
	return o
}

func (o JobDefinitionUlimitArrayOutput) Index(i pulumi.IntInput) JobDefinitionUlimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionUlimit {
		return vs[0].([]JobDefinitionUlimit)[vs[1].(int)]
	}).(JobDefinitionUlimitOutput)
}

type JobDefinitionVolume struct {
	// This parameter is specified when you're using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a `platformVersion` of at least `1.4.0` .
	EfsVolumeConfiguration *JobDefinitionEfsVolumeConfiguration `pulumi:"efsVolumeConfiguration"`
	// The contents of the `host` parameter determine whether your data volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
	Host *JobDefinitionHost `pulumi:"host"`
	// The name of the volume. It can be up to 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_). This name is referenced in the `sourceVolume` parameter of container definition `mountPoints` .
	Name *string `pulumi:"name"`
}

// JobDefinitionVolumeInput is an input type that accepts JobDefinitionVolumeArgs and JobDefinitionVolumeOutput values.
// You can construct a concrete instance of `JobDefinitionVolumeInput` via:
//
//	JobDefinitionVolumeArgs{...}
type JobDefinitionVolumeInput interface {
	pulumi.Input

	ToJobDefinitionVolumeOutput() JobDefinitionVolumeOutput
	ToJobDefinitionVolumeOutputWithContext(context.Context) JobDefinitionVolumeOutput
}

type JobDefinitionVolumeArgs struct {
	// This parameter is specified when you're using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a `platformVersion` of at least `1.4.0` .
	EfsVolumeConfiguration JobDefinitionEfsVolumeConfigurationPtrInput `pulumi:"efsVolumeConfiguration"`
	// The contents of the `host` parameter determine whether your data volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
	//
	// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
	Host JobDefinitionHostPtrInput `pulumi:"host"`
	// The name of the volume. It can be up to 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_). This name is referenced in the `sourceVolume` parameter of container definition `mountPoints` .
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (JobDefinitionVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionVolume)(nil)).Elem()
}

func (i JobDefinitionVolumeArgs) ToJobDefinitionVolumeOutput() JobDefinitionVolumeOutput {
	return i.ToJobDefinitionVolumeOutputWithContext(context.Background())
}

func (i JobDefinitionVolumeArgs) ToJobDefinitionVolumeOutputWithContext(ctx context.Context) JobDefinitionVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionVolumeOutput)
}

// JobDefinitionVolumeArrayInput is an input type that accepts JobDefinitionVolumeArray and JobDefinitionVolumeArrayOutput values.
// You can construct a concrete instance of `JobDefinitionVolumeArrayInput` via:
//
//	JobDefinitionVolumeArray{ JobDefinitionVolumeArgs{...} }
type JobDefinitionVolumeArrayInput interface {
	pulumi.Input

	ToJobDefinitionVolumeArrayOutput() JobDefinitionVolumeArrayOutput
	ToJobDefinitionVolumeArrayOutputWithContext(context.Context) JobDefinitionVolumeArrayOutput
}

type JobDefinitionVolumeArray []JobDefinitionVolumeInput

func (JobDefinitionVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionVolume)(nil)).Elem()
}

func (i JobDefinitionVolumeArray) ToJobDefinitionVolumeArrayOutput() JobDefinitionVolumeArrayOutput {
	return i.ToJobDefinitionVolumeArrayOutputWithContext(context.Background())
}

func (i JobDefinitionVolumeArray) ToJobDefinitionVolumeArrayOutputWithContext(ctx context.Context) JobDefinitionVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionVolumeArrayOutput)
}

type JobDefinitionVolumeOutput struct{ *pulumi.OutputState }

func (JobDefinitionVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionVolume)(nil)).Elem()
}

func (o JobDefinitionVolumeOutput) ToJobDefinitionVolumeOutput() JobDefinitionVolumeOutput {
	return o
}

func (o JobDefinitionVolumeOutput) ToJobDefinitionVolumeOutputWithContext(ctx context.Context) JobDefinitionVolumeOutput {
	return o
}

// This parameter is specified when you're using an Amazon Elastic File System file system for job storage. Jobs that are running on Fargate resources must specify a `platformVersion` of at least `1.4.0` .
func (o JobDefinitionVolumeOutput) EfsVolumeConfiguration() JobDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v JobDefinitionVolume) *JobDefinitionEfsVolumeConfiguration { return v.EfsVolumeConfiguration }).(JobDefinitionEfsVolumeConfigurationPtrOutput)
}

// The contents of the `host` parameter determine whether your data volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
//
// > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
func (o JobDefinitionVolumeOutput) Host() JobDefinitionHostPtrOutput {
	return o.ApplyT(func(v JobDefinitionVolume) *JobDefinitionHost { return v.Host }).(JobDefinitionHostPtrOutput)
}

// The name of the volume. It can be up to 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_). This name is referenced in the `sourceVolume` parameter of container definition `mountPoints` .
func (o JobDefinitionVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type JobDefinitionVolumeArrayOutput struct{ *pulumi.OutputState }

func (JobDefinitionVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDefinitionVolume)(nil)).Elem()
}

func (o JobDefinitionVolumeArrayOutput) ToJobDefinitionVolumeArrayOutput() JobDefinitionVolumeArrayOutput {
	return o
}

func (o JobDefinitionVolumeArrayOutput) ToJobDefinitionVolumeArrayOutputWithContext(ctx context.Context) JobDefinitionVolumeArrayOutput {
	return o
}

func (o JobDefinitionVolumeArrayOutput) Index(i pulumi.IntInput) JobDefinitionVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDefinitionVolume {
		return vs[0].([]JobDefinitionVolume)[vs[1].(int)]
	}).(JobDefinitionVolumeOutput)
}

type JobQueueComputeEnvironmentOrder struct {
	// The Amazon Resource Name (ARN) of the compute environment.
	ComputeEnvironment string `pulumi:"computeEnvironment"`
	// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower `order` integer value is tried for job placement first.
	Order int `pulumi:"order"`
}

// JobQueueComputeEnvironmentOrderInput is an input type that accepts JobQueueComputeEnvironmentOrderArgs and JobQueueComputeEnvironmentOrderOutput values.
// You can construct a concrete instance of `JobQueueComputeEnvironmentOrderInput` via:
//
//	JobQueueComputeEnvironmentOrderArgs{...}
type JobQueueComputeEnvironmentOrderInput interface {
	pulumi.Input

	ToJobQueueComputeEnvironmentOrderOutput() JobQueueComputeEnvironmentOrderOutput
	ToJobQueueComputeEnvironmentOrderOutputWithContext(context.Context) JobQueueComputeEnvironmentOrderOutput
}

type JobQueueComputeEnvironmentOrderArgs struct {
	// The Amazon Resource Name (ARN) of the compute environment.
	ComputeEnvironment pulumi.StringInput `pulumi:"computeEnvironment"`
	// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower `order` integer value is tried for job placement first.
	Order pulumi.IntInput `pulumi:"order"`
}

func (JobQueueComputeEnvironmentOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (i JobQueueComputeEnvironmentOrderArgs) ToJobQueueComputeEnvironmentOrderOutput() JobQueueComputeEnvironmentOrderOutput {
	return i.ToJobQueueComputeEnvironmentOrderOutputWithContext(context.Background())
}

func (i JobQueueComputeEnvironmentOrderArgs) ToJobQueueComputeEnvironmentOrderOutputWithContext(ctx context.Context) JobQueueComputeEnvironmentOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueComputeEnvironmentOrderOutput)
}

// JobQueueComputeEnvironmentOrderArrayInput is an input type that accepts JobQueueComputeEnvironmentOrderArray and JobQueueComputeEnvironmentOrderArrayOutput values.
// You can construct a concrete instance of `JobQueueComputeEnvironmentOrderArrayInput` via:
//
//	JobQueueComputeEnvironmentOrderArray{ JobQueueComputeEnvironmentOrderArgs{...} }
type JobQueueComputeEnvironmentOrderArrayInput interface {
	pulumi.Input

	ToJobQueueComputeEnvironmentOrderArrayOutput() JobQueueComputeEnvironmentOrderArrayOutput
	ToJobQueueComputeEnvironmentOrderArrayOutputWithContext(context.Context) JobQueueComputeEnvironmentOrderArrayOutput
}

type JobQueueComputeEnvironmentOrderArray []JobQueueComputeEnvironmentOrderInput

func (JobQueueComputeEnvironmentOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (i JobQueueComputeEnvironmentOrderArray) ToJobQueueComputeEnvironmentOrderArrayOutput() JobQueueComputeEnvironmentOrderArrayOutput {
	return i.ToJobQueueComputeEnvironmentOrderArrayOutputWithContext(context.Background())
}

func (i JobQueueComputeEnvironmentOrderArray) ToJobQueueComputeEnvironmentOrderArrayOutputWithContext(ctx context.Context) JobQueueComputeEnvironmentOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueComputeEnvironmentOrderArrayOutput)
}

type JobQueueComputeEnvironmentOrderOutput struct{ *pulumi.OutputState }

func (JobQueueComputeEnvironmentOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (o JobQueueComputeEnvironmentOrderOutput) ToJobQueueComputeEnvironmentOrderOutput() JobQueueComputeEnvironmentOrderOutput {
	return o
}

func (o JobQueueComputeEnvironmentOrderOutput) ToJobQueueComputeEnvironmentOrderOutputWithContext(ctx context.Context) JobQueueComputeEnvironmentOrderOutput {
	return o
}

// The Amazon Resource Name (ARN) of the compute environment.
func (o JobQueueComputeEnvironmentOrderOutput) ComputeEnvironment() pulumi.StringOutput {
	return o.ApplyT(func(v JobQueueComputeEnvironmentOrder) string { return v.ComputeEnvironment }).(pulumi.StringOutput)
}

// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower `order` integer value is tried for job placement first.
func (o JobQueueComputeEnvironmentOrderOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v JobQueueComputeEnvironmentOrder) int { return v.Order }).(pulumi.IntOutput)
}

type JobQueueComputeEnvironmentOrderArrayOutput struct{ *pulumi.OutputState }

func (JobQueueComputeEnvironmentOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobQueueComputeEnvironmentOrder)(nil)).Elem()
}

func (o JobQueueComputeEnvironmentOrderArrayOutput) ToJobQueueComputeEnvironmentOrderArrayOutput() JobQueueComputeEnvironmentOrderArrayOutput {
	return o
}

func (o JobQueueComputeEnvironmentOrderArrayOutput) ToJobQueueComputeEnvironmentOrderArrayOutputWithContext(ctx context.Context) JobQueueComputeEnvironmentOrderArrayOutput {
	return o
}

func (o JobQueueComputeEnvironmentOrderArrayOutput) Index(i pulumi.IntInput) JobQueueComputeEnvironmentOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobQueueComputeEnvironmentOrder {
		return vs[0].([]JobQueueComputeEnvironmentOrder)[vs[1].(int)]
	}).(JobQueueComputeEnvironmentOrderOutput)
}

type JobQueueJobStateTimeLimitAction struct {
	// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is `CANCEL` , which will cancel the job.
	Action JobQueueJobStateTimeLimitActionAction `pulumi:"action"`
	// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).
	MaxTimeSeconds int `pulumi:"maxTimeSeconds"`
	// The reason to log for the action being taken.
	Reason string `pulumi:"reason"`
	// The state of the job needed to trigger the action. The only supported value is `RUNNABLE` .
	State JobQueueJobStateTimeLimitActionState `pulumi:"state"`
}

// JobQueueJobStateTimeLimitActionInput is an input type that accepts JobQueueJobStateTimeLimitActionArgs and JobQueueJobStateTimeLimitActionOutput values.
// You can construct a concrete instance of `JobQueueJobStateTimeLimitActionInput` via:
//
//	JobQueueJobStateTimeLimitActionArgs{...}
type JobQueueJobStateTimeLimitActionInput interface {
	pulumi.Input

	ToJobQueueJobStateTimeLimitActionOutput() JobQueueJobStateTimeLimitActionOutput
	ToJobQueueJobStateTimeLimitActionOutputWithContext(context.Context) JobQueueJobStateTimeLimitActionOutput
}

type JobQueueJobStateTimeLimitActionArgs struct {
	// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is `CANCEL` , which will cancel the job.
	Action JobQueueJobStateTimeLimitActionActionInput `pulumi:"action"`
	// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).
	MaxTimeSeconds pulumi.IntInput `pulumi:"maxTimeSeconds"`
	// The reason to log for the action being taken.
	Reason pulumi.StringInput `pulumi:"reason"`
	// The state of the job needed to trigger the action. The only supported value is `RUNNABLE` .
	State JobQueueJobStateTimeLimitActionStateInput `pulumi:"state"`
}

func (JobQueueJobStateTimeLimitActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueJobStateTimeLimitAction)(nil)).Elem()
}

func (i JobQueueJobStateTimeLimitActionArgs) ToJobQueueJobStateTimeLimitActionOutput() JobQueueJobStateTimeLimitActionOutput {
	return i.ToJobQueueJobStateTimeLimitActionOutputWithContext(context.Background())
}

func (i JobQueueJobStateTimeLimitActionArgs) ToJobQueueJobStateTimeLimitActionOutputWithContext(ctx context.Context) JobQueueJobStateTimeLimitActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueJobStateTimeLimitActionOutput)
}

// JobQueueJobStateTimeLimitActionArrayInput is an input type that accepts JobQueueJobStateTimeLimitActionArray and JobQueueJobStateTimeLimitActionArrayOutput values.
// You can construct a concrete instance of `JobQueueJobStateTimeLimitActionArrayInput` via:
//
//	JobQueueJobStateTimeLimitActionArray{ JobQueueJobStateTimeLimitActionArgs{...} }
type JobQueueJobStateTimeLimitActionArrayInput interface {
	pulumi.Input

	ToJobQueueJobStateTimeLimitActionArrayOutput() JobQueueJobStateTimeLimitActionArrayOutput
	ToJobQueueJobStateTimeLimitActionArrayOutputWithContext(context.Context) JobQueueJobStateTimeLimitActionArrayOutput
}

type JobQueueJobStateTimeLimitActionArray []JobQueueJobStateTimeLimitActionInput

func (JobQueueJobStateTimeLimitActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobQueueJobStateTimeLimitAction)(nil)).Elem()
}

func (i JobQueueJobStateTimeLimitActionArray) ToJobQueueJobStateTimeLimitActionArrayOutput() JobQueueJobStateTimeLimitActionArrayOutput {
	return i.ToJobQueueJobStateTimeLimitActionArrayOutputWithContext(context.Background())
}

func (i JobQueueJobStateTimeLimitActionArray) ToJobQueueJobStateTimeLimitActionArrayOutputWithContext(ctx context.Context) JobQueueJobStateTimeLimitActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobQueueJobStateTimeLimitActionArrayOutput)
}

type JobQueueJobStateTimeLimitActionOutput struct{ *pulumi.OutputState }

func (JobQueueJobStateTimeLimitActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobQueueJobStateTimeLimitAction)(nil)).Elem()
}

func (o JobQueueJobStateTimeLimitActionOutput) ToJobQueueJobStateTimeLimitActionOutput() JobQueueJobStateTimeLimitActionOutput {
	return o
}

func (o JobQueueJobStateTimeLimitActionOutput) ToJobQueueJobStateTimeLimitActionOutputWithContext(ctx context.Context) JobQueueJobStateTimeLimitActionOutput {
	return o
}

// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is `CANCEL` , which will cancel the job.
func (o JobQueueJobStateTimeLimitActionOutput) Action() JobQueueJobStateTimeLimitActionActionOutput {
	return o.ApplyT(func(v JobQueueJobStateTimeLimitAction) JobQueueJobStateTimeLimitActionAction { return v.Action }).(JobQueueJobStateTimeLimitActionActionOutput)
}

// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).
func (o JobQueueJobStateTimeLimitActionOutput) MaxTimeSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v JobQueueJobStateTimeLimitAction) int { return v.MaxTimeSeconds }).(pulumi.IntOutput)
}

// The reason to log for the action being taken.
func (o JobQueueJobStateTimeLimitActionOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v JobQueueJobStateTimeLimitAction) string { return v.Reason }).(pulumi.StringOutput)
}

// The state of the job needed to trigger the action. The only supported value is `RUNNABLE` .
func (o JobQueueJobStateTimeLimitActionOutput) State() JobQueueJobStateTimeLimitActionStateOutput {
	return o.ApplyT(func(v JobQueueJobStateTimeLimitAction) JobQueueJobStateTimeLimitActionState { return v.State }).(JobQueueJobStateTimeLimitActionStateOutput)
}

type JobQueueJobStateTimeLimitActionArrayOutput struct{ *pulumi.OutputState }

func (JobQueueJobStateTimeLimitActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobQueueJobStateTimeLimitAction)(nil)).Elem()
}

func (o JobQueueJobStateTimeLimitActionArrayOutput) ToJobQueueJobStateTimeLimitActionArrayOutput() JobQueueJobStateTimeLimitActionArrayOutput {
	return o
}

func (o JobQueueJobStateTimeLimitActionArrayOutput) ToJobQueueJobStateTimeLimitActionArrayOutputWithContext(ctx context.Context) JobQueueJobStateTimeLimitActionArrayOutput {
	return o
}

func (o JobQueueJobStateTimeLimitActionArrayOutput) Index(i pulumi.IntInput) JobQueueJobStateTimeLimitActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobQueueJobStateTimeLimitAction {
		return vs[0].([]JobQueueJobStateTimeLimitAction)[vs[1].(int)]
	}).(JobQueueJobStateTimeLimitActionOutput)
}

// Fair Share Policy for the Job Queue.
type SchedulingPolicyFairsharePolicy struct {
	// A value used to reserve some of the available maximum vCPU for share identifiers that aren't already used.
	//
	// The reserved ratio is `( *computeReservation* /100)^ *ActiveFairShares*` where `*ActiveFairShares*` is the number of active share identifiers.
	//
	// For example, a `computeReservation` value of 50 indicates that AWS Batch reserves 50% of the maximum available vCPU if there's only one share identifier. It reserves 25% if there are two share identifiers. It reserves 12.5% if there are three share identifiers. A `computeReservation` value of 25 indicates that AWS Batch should reserve 25% of the maximum available vCPU if there's only one share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three share identifiers.
	//
	// The minimum value is 0 and the maximum value is 99.
	ComputeReservation *float64 `pulumi:"computeReservation"`
	// The amount of time (in seconds) to use to calculate a fair-share percentage for each share identifier in use. A value of zero (0) indicates the default minimum time window (600 seconds). The maximum supported value is 604800 (1 week).
	//
	// The decay allows for more recently run jobs to have more weight than jobs that ran earlier. Consider adjusting this number if you have jobs that (on average) run longer than ten minutes, or a large difference in job count or job run times between share identifiers, and the allocation of resources doesn't meet your needs.
	ShareDecaySeconds *float64 `pulumi:"shareDecaySeconds"`
	// List of Share Attributes
	ShareDistribution []SchedulingPolicyShareAttributes `pulumi:"shareDistribution"`
}

// SchedulingPolicyFairsharePolicyInput is an input type that accepts SchedulingPolicyFairsharePolicyArgs and SchedulingPolicyFairsharePolicyOutput values.
// You can construct a concrete instance of `SchedulingPolicyFairsharePolicyInput` via:
//
//	SchedulingPolicyFairsharePolicyArgs{...}
type SchedulingPolicyFairsharePolicyInput interface {
	pulumi.Input

	ToSchedulingPolicyFairsharePolicyOutput() SchedulingPolicyFairsharePolicyOutput
	ToSchedulingPolicyFairsharePolicyOutputWithContext(context.Context) SchedulingPolicyFairsharePolicyOutput
}

// Fair Share Policy for the Job Queue.
type SchedulingPolicyFairsharePolicyArgs struct {
	// A value used to reserve some of the available maximum vCPU for share identifiers that aren't already used.
	//
	// The reserved ratio is `( *computeReservation* /100)^ *ActiveFairShares*` where `*ActiveFairShares*` is the number of active share identifiers.
	//
	// For example, a `computeReservation` value of 50 indicates that AWS Batch reserves 50% of the maximum available vCPU if there's only one share identifier. It reserves 25% if there are two share identifiers. It reserves 12.5% if there are three share identifiers. A `computeReservation` value of 25 indicates that AWS Batch should reserve 25% of the maximum available vCPU if there's only one share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three share identifiers.
	//
	// The minimum value is 0 and the maximum value is 99.
	ComputeReservation pulumi.Float64PtrInput `pulumi:"computeReservation"`
	// The amount of time (in seconds) to use to calculate a fair-share percentage for each share identifier in use. A value of zero (0) indicates the default minimum time window (600 seconds). The maximum supported value is 604800 (1 week).
	//
	// The decay allows for more recently run jobs to have more weight than jobs that ran earlier. Consider adjusting this number if you have jobs that (on average) run longer than ten minutes, or a large difference in job count or job run times between share identifiers, and the allocation of resources doesn't meet your needs.
	ShareDecaySeconds pulumi.Float64PtrInput `pulumi:"shareDecaySeconds"`
	// List of Share Attributes
	ShareDistribution SchedulingPolicyShareAttributesArrayInput `pulumi:"shareDistribution"`
}

func (SchedulingPolicyFairsharePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairsharePolicy)(nil)).Elem()
}

func (i SchedulingPolicyFairsharePolicyArgs) ToSchedulingPolicyFairsharePolicyOutput() SchedulingPolicyFairsharePolicyOutput {
	return i.ToSchedulingPolicyFairsharePolicyOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairsharePolicyArgs) ToSchedulingPolicyFairsharePolicyOutputWithContext(ctx context.Context) SchedulingPolicyFairsharePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairsharePolicyOutput)
}

func (i SchedulingPolicyFairsharePolicyArgs) ToSchedulingPolicyFairsharePolicyPtrOutput() SchedulingPolicyFairsharePolicyPtrOutput {
	return i.ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(context.Background())
}

func (i SchedulingPolicyFairsharePolicyArgs) ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairsharePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairsharePolicyOutput).ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(ctx)
}

// SchedulingPolicyFairsharePolicyPtrInput is an input type that accepts SchedulingPolicyFairsharePolicyArgs, SchedulingPolicyFairsharePolicyPtr and SchedulingPolicyFairsharePolicyPtrOutput values.
// You can construct a concrete instance of `SchedulingPolicyFairsharePolicyPtrInput` via:
//
//	        SchedulingPolicyFairsharePolicyArgs{...}
//
//	or:
//
//	        nil
type SchedulingPolicyFairsharePolicyPtrInput interface {
	pulumi.Input

	ToSchedulingPolicyFairsharePolicyPtrOutput() SchedulingPolicyFairsharePolicyPtrOutput
	ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(context.Context) SchedulingPolicyFairsharePolicyPtrOutput
}

type schedulingPolicyFairsharePolicyPtrType SchedulingPolicyFairsharePolicyArgs

func SchedulingPolicyFairsharePolicyPtr(v *SchedulingPolicyFairsharePolicyArgs) SchedulingPolicyFairsharePolicyPtrInput {
	return (*schedulingPolicyFairsharePolicyPtrType)(v)
}

func (*schedulingPolicyFairsharePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicyFairsharePolicy)(nil)).Elem()
}

func (i *schedulingPolicyFairsharePolicyPtrType) ToSchedulingPolicyFairsharePolicyPtrOutput() SchedulingPolicyFairsharePolicyPtrOutput {
	return i.ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(context.Background())
}

func (i *schedulingPolicyFairsharePolicyPtrType) ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairsharePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyFairsharePolicyPtrOutput)
}

// Fair Share Policy for the Job Queue.
type SchedulingPolicyFairsharePolicyOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairsharePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyFairsharePolicy)(nil)).Elem()
}

func (o SchedulingPolicyFairsharePolicyOutput) ToSchedulingPolicyFairsharePolicyOutput() SchedulingPolicyFairsharePolicyOutput {
	return o
}

func (o SchedulingPolicyFairsharePolicyOutput) ToSchedulingPolicyFairsharePolicyOutputWithContext(ctx context.Context) SchedulingPolicyFairsharePolicyOutput {
	return o
}

func (o SchedulingPolicyFairsharePolicyOutput) ToSchedulingPolicyFairsharePolicyPtrOutput() SchedulingPolicyFairsharePolicyPtrOutput {
	return o.ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(context.Background())
}

func (o SchedulingPolicyFairsharePolicyOutput) ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairsharePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulingPolicyFairsharePolicy) *SchedulingPolicyFairsharePolicy {
		return &v
	}).(SchedulingPolicyFairsharePolicyPtrOutput)
}

// A value used to reserve some of the available maximum vCPU for share identifiers that aren't already used.
//
// The reserved ratio is `( *computeReservation* /100)^ *ActiveFairShares*` where `*ActiveFairShares*` is the number of active share identifiers.
//
// For example, a `computeReservation` value of 50 indicates that AWS Batch reserves 50% of the maximum available vCPU if there's only one share identifier. It reserves 25% if there are two share identifiers. It reserves 12.5% if there are three share identifiers. A `computeReservation` value of 25 indicates that AWS Batch should reserve 25% of the maximum available vCPU if there's only one share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three share identifiers.
//
// The minimum value is 0 and the maximum value is 99.
func (o SchedulingPolicyFairsharePolicyOutput) ComputeReservation() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchedulingPolicyFairsharePolicy) *float64 { return v.ComputeReservation }).(pulumi.Float64PtrOutput)
}

// The amount of time (in seconds) to use to calculate a fair-share percentage for each share identifier in use. A value of zero (0) indicates the default minimum time window (600 seconds). The maximum supported value is 604800 (1 week).
//
// The decay allows for more recently run jobs to have more weight than jobs that ran earlier. Consider adjusting this number if you have jobs that (on average) run longer than ten minutes, or a large difference in job count or job run times between share identifiers, and the allocation of resources doesn't meet your needs.
func (o SchedulingPolicyFairsharePolicyOutput) ShareDecaySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchedulingPolicyFairsharePolicy) *float64 { return v.ShareDecaySeconds }).(pulumi.Float64PtrOutput)
}

// List of Share Attributes
func (o SchedulingPolicyFairsharePolicyOutput) ShareDistribution() SchedulingPolicyShareAttributesArrayOutput {
	return o.ApplyT(func(v SchedulingPolicyFairsharePolicy) []SchedulingPolicyShareAttributes { return v.ShareDistribution }).(SchedulingPolicyShareAttributesArrayOutput)
}

type SchedulingPolicyFairsharePolicyPtrOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyFairsharePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicyFairsharePolicy)(nil)).Elem()
}

func (o SchedulingPolicyFairsharePolicyPtrOutput) ToSchedulingPolicyFairsharePolicyPtrOutput() SchedulingPolicyFairsharePolicyPtrOutput {
	return o
}

func (o SchedulingPolicyFairsharePolicyPtrOutput) ToSchedulingPolicyFairsharePolicyPtrOutputWithContext(ctx context.Context) SchedulingPolicyFairsharePolicyPtrOutput {
	return o
}

func (o SchedulingPolicyFairsharePolicyPtrOutput) Elem() SchedulingPolicyFairsharePolicyOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairsharePolicy) SchedulingPolicyFairsharePolicy {
		if v != nil {
			return *v
		}
		var ret SchedulingPolicyFairsharePolicy
		return ret
	}).(SchedulingPolicyFairsharePolicyOutput)
}

// A value used to reserve some of the available maximum vCPU for share identifiers that aren't already used.
//
// The reserved ratio is `( *computeReservation* /100)^ *ActiveFairShares*` where `*ActiveFairShares*` is the number of active share identifiers.
//
// For example, a `computeReservation` value of 50 indicates that AWS Batch reserves 50% of the maximum available vCPU if there's only one share identifier. It reserves 25% if there are two share identifiers. It reserves 12.5% if there are three share identifiers. A `computeReservation` value of 25 indicates that AWS Batch should reserve 25% of the maximum available vCPU if there's only one share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three share identifiers.
//
// The minimum value is 0 and the maximum value is 99.
func (o SchedulingPolicyFairsharePolicyPtrOutput) ComputeReservation() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairsharePolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.ComputeReservation
	}).(pulumi.Float64PtrOutput)
}

// The amount of time (in seconds) to use to calculate a fair-share percentage for each share identifier in use. A value of zero (0) indicates the default minimum time window (600 seconds). The maximum supported value is 604800 (1 week).
//
// The decay allows for more recently run jobs to have more weight than jobs that ran earlier. Consider adjusting this number if you have jobs that (on average) run longer than ten minutes, or a large difference in job count or job run times between share identifiers, and the allocation of resources doesn't meet your needs.
func (o SchedulingPolicyFairsharePolicyPtrOutput) ShareDecaySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairsharePolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.ShareDecaySeconds
	}).(pulumi.Float64PtrOutput)
}

// List of Share Attributes
func (o SchedulingPolicyFairsharePolicyPtrOutput) ShareDistribution() SchedulingPolicyShareAttributesArrayOutput {
	return o.ApplyT(func(v *SchedulingPolicyFairsharePolicy) []SchedulingPolicyShareAttributes {
		if v == nil {
			return nil
		}
		return v.ShareDistribution
	}).(SchedulingPolicyShareAttributesArrayOutput)
}

type SchedulingPolicyShareAttributes struct {
	// A share identifier or share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for share identifiers that start with that prefix. The list of share identifiers in a fair-share policy can't overlap. For example, you can't have one that specifies a `shareIdentifier` of `UserA*` and another that specifies a `shareIdentifier` of `UserA-1` .
	//
	// There can be no more than 500 share identifiers active in a job queue.
	//
	// The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
	ShareIdentifier *string `pulumi:"shareIdentifier"`
	// The weight factor for the share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.
	//
	// The smallest supported value is 0.0001, and the largest supported value is 999.9999.
	WeightFactor *float64 `pulumi:"weightFactor"`
}

// SchedulingPolicyShareAttributesInput is an input type that accepts SchedulingPolicyShareAttributesArgs and SchedulingPolicyShareAttributesOutput values.
// You can construct a concrete instance of `SchedulingPolicyShareAttributesInput` via:
//
//	SchedulingPolicyShareAttributesArgs{...}
type SchedulingPolicyShareAttributesInput interface {
	pulumi.Input

	ToSchedulingPolicyShareAttributesOutput() SchedulingPolicyShareAttributesOutput
	ToSchedulingPolicyShareAttributesOutputWithContext(context.Context) SchedulingPolicyShareAttributesOutput
}

type SchedulingPolicyShareAttributesArgs struct {
	// A share identifier or share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for share identifiers that start with that prefix. The list of share identifiers in a fair-share policy can't overlap. For example, you can't have one that specifies a `shareIdentifier` of `UserA*` and another that specifies a `shareIdentifier` of `UserA-1` .
	//
	// There can be no more than 500 share identifiers active in a job queue.
	//
	// The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
	ShareIdentifier pulumi.StringPtrInput `pulumi:"shareIdentifier"`
	// The weight factor for the share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.
	//
	// The smallest supported value is 0.0001, and the largest supported value is 999.9999.
	WeightFactor pulumi.Float64PtrInput `pulumi:"weightFactor"`
}

func (SchedulingPolicyShareAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyShareAttributes)(nil)).Elem()
}

func (i SchedulingPolicyShareAttributesArgs) ToSchedulingPolicyShareAttributesOutput() SchedulingPolicyShareAttributesOutput {
	return i.ToSchedulingPolicyShareAttributesOutputWithContext(context.Background())
}

func (i SchedulingPolicyShareAttributesArgs) ToSchedulingPolicyShareAttributesOutputWithContext(ctx context.Context) SchedulingPolicyShareAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyShareAttributesOutput)
}

// SchedulingPolicyShareAttributesArrayInput is an input type that accepts SchedulingPolicyShareAttributesArray and SchedulingPolicyShareAttributesArrayOutput values.
// You can construct a concrete instance of `SchedulingPolicyShareAttributesArrayInput` via:
//
//	SchedulingPolicyShareAttributesArray{ SchedulingPolicyShareAttributesArgs{...} }
type SchedulingPolicyShareAttributesArrayInput interface {
	pulumi.Input

	ToSchedulingPolicyShareAttributesArrayOutput() SchedulingPolicyShareAttributesArrayOutput
	ToSchedulingPolicyShareAttributesArrayOutputWithContext(context.Context) SchedulingPolicyShareAttributesArrayOutput
}

type SchedulingPolicyShareAttributesArray []SchedulingPolicyShareAttributesInput

func (SchedulingPolicyShareAttributesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingPolicyShareAttributes)(nil)).Elem()
}

func (i SchedulingPolicyShareAttributesArray) ToSchedulingPolicyShareAttributesArrayOutput() SchedulingPolicyShareAttributesArrayOutput {
	return i.ToSchedulingPolicyShareAttributesArrayOutputWithContext(context.Background())
}

func (i SchedulingPolicyShareAttributesArray) ToSchedulingPolicyShareAttributesArrayOutputWithContext(ctx context.Context) SchedulingPolicyShareAttributesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicyShareAttributesArrayOutput)
}

type SchedulingPolicyShareAttributesOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyShareAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingPolicyShareAttributes)(nil)).Elem()
}

func (o SchedulingPolicyShareAttributesOutput) ToSchedulingPolicyShareAttributesOutput() SchedulingPolicyShareAttributesOutput {
	return o
}

func (o SchedulingPolicyShareAttributesOutput) ToSchedulingPolicyShareAttributesOutputWithContext(ctx context.Context) SchedulingPolicyShareAttributesOutput {
	return o
}

// A share identifier or share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for share identifiers that start with that prefix. The list of share identifiers in a fair-share policy can't overlap. For example, you can't have one that specifies a `shareIdentifier` of `UserA*` and another that specifies a `shareIdentifier` of `UserA-1` .
//
// There can be no more than 500 share identifiers active in a job queue.
//
// The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
func (o SchedulingPolicyShareAttributesOutput) ShareIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulingPolicyShareAttributes) *string { return v.ShareIdentifier }).(pulumi.StringPtrOutput)
}

// The weight factor for the share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.
//
// The smallest supported value is 0.0001, and the largest supported value is 999.9999.
func (o SchedulingPolicyShareAttributesOutput) WeightFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchedulingPolicyShareAttributes) *float64 { return v.WeightFactor }).(pulumi.Float64PtrOutput)
}

type SchedulingPolicyShareAttributesArrayOutput struct{ *pulumi.OutputState }

func (SchedulingPolicyShareAttributesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingPolicyShareAttributes)(nil)).Elem()
}

func (o SchedulingPolicyShareAttributesArrayOutput) ToSchedulingPolicyShareAttributesArrayOutput() SchedulingPolicyShareAttributesArrayOutput {
	return o
}

func (o SchedulingPolicyShareAttributesArrayOutput) ToSchedulingPolicyShareAttributesArrayOutputWithContext(ctx context.Context) SchedulingPolicyShareAttributesArrayOutput {
	return o
}

func (o SchedulingPolicyShareAttributesArrayOutput) Index(i pulumi.IntInput) SchedulingPolicyShareAttributesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingPolicyShareAttributes {
		return vs[0].([]SchedulingPolicyShareAttributes)[vs[1].(int)]
	}).(SchedulingPolicyShareAttributesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentComputeResourcesPtrInput)(nil)).Elem(), ComputeEnvironmentComputeResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentEc2ConfigurationObjectInput)(nil)).Elem(), ComputeEnvironmentEc2ConfigurationObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentEc2ConfigurationObjectArrayInput)(nil)).Elem(), ComputeEnvironmentEc2ConfigurationObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentEksConfigurationInput)(nil)).Elem(), ComputeEnvironmentEksConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentEksConfigurationPtrInput)(nil)).Elem(), ComputeEnvironmentEksConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecificationInput)(nil)).Elem(), ComputeEnvironmentLaunchTemplateSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecificationPtrInput)(nil)).Elem(), ComputeEnvironmentLaunchTemplateSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecificationOverrideInput)(nil)).Elem(), ComputeEnvironmentLaunchTemplateSpecificationOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayInput)(nil)).Elem(), ComputeEnvironmentLaunchTemplateSpecificationOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentUpdatePolicyInput)(nil)).Elem(), ComputeEnvironmentUpdatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnvironmentUpdatePolicyPtrInput)(nil)).Elem(), ComputeEnvironmentUpdatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionConsumableResourcePropertiesInput)(nil)).Elem(), JobDefinitionConsumableResourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionConsumableResourcePropertiesPtrInput)(nil)).Elem(), JobDefinitionConsumableResourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionConsumableResourceRequirementInput)(nil)).Elem(), JobDefinitionConsumableResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionConsumableResourceRequirementArrayInput)(nil)).Elem(), JobDefinitionConsumableResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionContainerPropertiesInput)(nil)).Elem(), JobDefinitionContainerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionContainerPropertiesPtrInput)(nil)).Elem(), JobDefinitionContainerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesInput)(nil)).Elem(), JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrInput)(nil)).Elem(), JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionDeviceInput)(nil)).Elem(), JobDefinitionDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionDeviceArrayInput)(nil)).Elem(), JobDefinitionDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEcsPropertiesInput)(nil)).Elem(), JobDefinitionEcsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEcsPropertiesPtrInput)(nil)).Elem(), JobDefinitionEcsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEcsTaskPropertiesInput)(nil)).Elem(), JobDefinitionEcsTaskPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEcsTaskPropertiesArrayInput)(nil)).Elem(), JobDefinitionEcsTaskPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEfsAuthorizationConfigInput)(nil)).Elem(), JobDefinitionEfsAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEfsAuthorizationConfigPtrInput)(nil)).Elem(), JobDefinitionEfsAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEfsVolumeConfigurationInput)(nil)).Elem(), JobDefinitionEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEfsVolumeConfigurationPtrInput)(nil)).Elem(), JobDefinitionEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerInput)(nil)).Elem(), JobDefinitionEksContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerArrayInput)(nil)).Elem(), JobDefinitionEksContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerEnvironmentVariableInput)(nil)).Elem(), JobDefinitionEksContainerEnvironmentVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerEnvironmentVariableArrayInput)(nil)).Elem(), JobDefinitionEksContainerEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerResourceRequirementsInput)(nil)).Elem(), JobDefinitionEksContainerResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerResourceRequirementsPtrInput)(nil)).Elem(), JobDefinitionEksContainerResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerSecurityContextInput)(nil)).Elem(), JobDefinitionEksContainerSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerSecurityContextPtrInput)(nil)).Elem(), JobDefinitionEksContainerSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerVolumeMountInput)(nil)).Elem(), JobDefinitionEksContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksContainerVolumeMountArrayInput)(nil)).Elem(), JobDefinitionEksContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksEmptyDirInput)(nil)).Elem(), JobDefinitionEksEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksEmptyDirPtrInput)(nil)).Elem(), JobDefinitionEksEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksHostPathInput)(nil)).Elem(), JobDefinitionEksHostPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksHostPathPtrInput)(nil)).Elem(), JobDefinitionEksHostPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksMetadataInput)(nil)).Elem(), JobDefinitionEksMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksMetadataPtrInput)(nil)).Elem(), JobDefinitionEksMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksPersistentVolumeClaimInput)(nil)).Elem(), JobDefinitionEksPersistentVolumeClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksPersistentVolumeClaimPtrInput)(nil)).Elem(), JobDefinitionEksPersistentVolumeClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksPodPropertiesInput)(nil)).Elem(), JobDefinitionEksPodPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksPodPropertiesPtrInput)(nil)).Elem(), JobDefinitionEksPodPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksPropertiesInput)(nil)).Elem(), JobDefinitionEksPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksPropertiesPtrInput)(nil)).Elem(), JobDefinitionEksPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksSecretInput)(nil)).Elem(), JobDefinitionEksSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksSecretPtrInput)(nil)).Elem(), JobDefinitionEksSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksVolumeInput)(nil)).Elem(), JobDefinitionEksVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEksVolumeArrayInput)(nil)).Elem(), JobDefinitionEksVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEnvironmentInput)(nil)).Elem(), JobDefinitionEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEnvironmentArrayInput)(nil)).Elem(), JobDefinitionEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEphemeralStorageInput)(nil)).Elem(), JobDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEphemeralStoragePtrInput)(nil)).Elem(), JobDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEvaluateOnExitInput)(nil)).Elem(), JobDefinitionEvaluateOnExitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionEvaluateOnExitArrayInput)(nil)).Elem(), JobDefinitionEvaluateOnExitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionHostInput)(nil)).Elem(), JobDefinitionHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionHostPtrInput)(nil)).Elem(), JobDefinitionHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionImagePullSecretInput)(nil)).Elem(), JobDefinitionImagePullSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionImagePullSecretArrayInput)(nil)).Elem(), JobDefinitionImagePullSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionJobTimeoutInput)(nil)).Elem(), JobDefinitionJobTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionJobTimeoutPtrInput)(nil)).Elem(), JobDefinitionJobTimeoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionLinuxParametersInput)(nil)).Elem(), JobDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionLinuxParametersPtrInput)(nil)).Elem(), JobDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionLogConfigurationInput)(nil)).Elem(), JobDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionLogConfigurationPtrInput)(nil)).Elem(), JobDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMountPointInput)(nil)).Elem(), JobDefinitionMountPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMountPointArrayInput)(nil)).Elem(), JobDefinitionMountPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMultiNodeContainerPropertiesInput)(nil)).Elem(), JobDefinitionMultiNodeContainerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMultiNodeContainerPropertiesPtrInput)(nil)).Elem(), JobDefinitionMultiNodeContainerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMultiNodeEcsPropertiesInput)(nil)).Elem(), JobDefinitionMultiNodeEcsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMultiNodeEcsPropertiesPtrInput)(nil)).Elem(), JobDefinitionMultiNodeEcsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMultiNodeEcsTaskPropertiesInput)(nil)).Elem(), JobDefinitionMultiNodeEcsTaskPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionMultiNodeEcsTaskPropertiesArrayInput)(nil)).Elem(), JobDefinitionMultiNodeEcsTaskPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionNetworkConfigurationInput)(nil)).Elem(), JobDefinitionNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionNetworkConfigurationPtrInput)(nil)).Elem(), JobDefinitionNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionNodePropertiesInput)(nil)).Elem(), JobDefinitionNodePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionNodePropertiesPtrInput)(nil)).Elem(), JobDefinitionNodePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionNodeRangePropertyInput)(nil)).Elem(), JobDefinitionNodeRangePropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionNodeRangePropertyArrayInput)(nil)).Elem(), JobDefinitionNodeRangePropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRepositoryCredentialsInput)(nil)).Elem(), JobDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRepositoryCredentialsPtrInput)(nil)).Elem(), JobDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionResourceRequirementInput)(nil)).Elem(), JobDefinitionResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionResourceRequirementArrayInput)(nil)).Elem(), JobDefinitionResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRetryStrategyInput)(nil)).Elem(), JobDefinitionRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRetryStrategyPtrInput)(nil)).Elem(), JobDefinitionRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRuntimePlatformInput)(nil)).Elem(), JobDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionRuntimePlatformPtrInput)(nil)).Elem(), JobDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionSecretInput)(nil)).Elem(), JobDefinitionSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionSecretArrayInput)(nil)).Elem(), JobDefinitionSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTaskContainerDependencyInput)(nil)).Elem(), JobDefinitionTaskContainerDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTaskContainerDependencyArrayInput)(nil)).Elem(), JobDefinitionTaskContainerDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTaskContainerPropertiesInput)(nil)).Elem(), JobDefinitionTaskContainerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTaskContainerPropertiesArrayInput)(nil)).Elem(), JobDefinitionTaskContainerPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesInput)(nil)).Elem(), JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrInput)(nil)).Elem(), JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTmpfsInput)(nil)).Elem(), JobDefinitionTmpfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionTmpfsArrayInput)(nil)).Elem(), JobDefinitionTmpfsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionUlimitInput)(nil)).Elem(), JobDefinitionUlimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionUlimitArrayInput)(nil)).Elem(), JobDefinitionUlimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionVolumeInput)(nil)).Elem(), JobDefinitionVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobDefinitionVolumeArrayInput)(nil)).Elem(), JobDefinitionVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueueComputeEnvironmentOrderInput)(nil)).Elem(), JobQueueComputeEnvironmentOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueueComputeEnvironmentOrderArrayInput)(nil)).Elem(), JobQueueComputeEnvironmentOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueueJobStateTimeLimitActionInput)(nil)).Elem(), JobQueueJobStateTimeLimitActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobQueueJobStateTimeLimitActionArrayInput)(nil)).Elem(), JobQueueJobStateTimeLimitActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyFairsharePolicyInput)(nil)).Elem(), SchedulingPolicyFairsharePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyFairsharePolicyPtrInput)(nil)).Elem(), SchedulingPolicyFairsharePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyShareAttributesInput)(nil)).Elem(), SchedulingPolicyShareAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicyShareAttributesArrayInput)(nil)).Elem(), SchedulingPolicyShareAttributesArray{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentComputeResourcesPtrOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentEc2ConfigurationObjectOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentEc2ConfigurationObjectArrayOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentEksConfigurationOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentEksConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentLaunchTemplateSpecificationOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentLaunchTemplateSpecificationPtrOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentLaunchTemplateSpecificationOverrideOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentLaunchTemplateSpecificationOverrideArrayOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentUpdatePolicyOutput{})
	pulumi.RegisterOutputType(ComputeEnvironmentUpdatePolicyPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionConsumableResourcePropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionConsumableResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionConsumableResourceRequirementOutput{})
	pulumi.RegisterOutputType(JobDefinitionConsumableResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionContainerPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionContainerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionContainerPropertiesFargatePlatformConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionDeviceOutput{})
	pulumi.RegisterOutputType(JobDefinitionDeviceArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionEcsPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionEcsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEcsTaskPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionEcsTaskPropertiesArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionEfsAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(JobDefinitionEfsAuthorizationConfigPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEfsVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(JobDefinitionEfsVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerResourceRequirementsOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerSecurityContextOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksEmptyDirOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksEmptyDirPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksHostPathOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksHostPathPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksMetadataOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksMetadataPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksPersistentVolumeClaimOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksPersistentVolumeClaimPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksPodPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksPodPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksSecretOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksSecretPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksVolumeOutput{})
	pulumi.RegisterOutputType(JobDefinitionEksVolumeArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionEnvironmentOutput{})
	pulumi.RegisterOutputType(JobDefinitionEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(JobDefinitionEphemeralStoragePtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionEvaluateOnExitOutput{})
	pulumi.RegisterOutputType(JobDefinitionEvaluateOnExitArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionHostOutput{})
	pulumi.RegisterOutputType(JobDefinitionHostPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionImagePullSecretOutput{})
	pulumi.RegisterOutputType(JobDefinitionImagePullSecretArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionJobTimeoutOutput{})
	pulumi.RegisterOutputType(JobDefinitionJobTimeoutPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionLinuxParametersOutput{})
	pulumi.RegisterOutputType(JobDefinitionLinuxParametersPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionLogConfigurationOutput{})
	pulumi.RegisterOutputType(JobDefinitionLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionMountPointOutput{})
	pulumi.RegisterOutputType(JobDefinitionMountPointArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionMultiNodeContainerPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionMultiNodeContainerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionMultiNodeEcsPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionMultiNodeEcsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionMultiNodeEcsTaskPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionMultiNodeEcsTaskPropertiesArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(JobDefinitionNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionNodePropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionNodePropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionNodeRangePropertyOutput{})
	pulumi.RegisterOutputType(JobDefinitionNodeRangePropertyArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionRepositoryCredentialsOutput{})
	pulumi.RegisterOutputType(JobDefinitionRepositoryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionResourceRequirementOutput{})
	pulumi.RegisterOutputType(JobDefinitionResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyOutput{})
	pulumi.RegisterOutputType(JobDefinitionRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionRuntimePlatformOutput{})
	pulumi.RegisterOutputType(JobDefinitionRuntimePlatformPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionSecretOutput{})
	pulumi.RegisterOutputType(JobDefinitionSecretArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionTaskContainerDependencyOutput{})
	pulumi.RegisterOutputType(JobDefinitionTaskContainerDependencyArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionTaskContainerPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionTaskContainerPropertiesArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionTaskContainerPropertiesFirelensConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionTmpfsOutput{})
	pulumi.RegisterOutputType(JobDefinitionTmpfsArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionUlimitOutput{})
	pulumi.RegisterOutputType(JobDefinitionUlimitArrayOutput{})
	pulumi.RegisterOutputType(JobDefinitionVolumeOutput{})
	pulumi.RegisterOutputType(JobDefinitionVolumeArrayOutput{})
	pulumi.RegisterOutputType(JobQueueComputeEnvironmentOrderOutput{})
	pulumi.RegisterOutputType(JobQueueComputeEnvironmentOrderArrayOutput{})
	pulumi.RegisterOutputType(JobQueueJobStateTimeLimitActionOutput{})
	pulumi.RegisterOutputType(JobQueueJobStateTimeLimitActionArrayOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairsharePolicyOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyFairsharePolicyPtrOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyShareAttributesOutput{})
	pulumi.RegisterOutputType(SchedulingPolicyShareAttributesArrayOutput{})
}
