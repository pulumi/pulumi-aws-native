// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package configuration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigurationAggregatorAccountAggregationSource struct {
	AccountIds    []string `pulumi:"accountIds"`
	AllAwsRegions *bool    `pulumi:"allAwsRegions"`
	AwsRegions    []string `pulumi:"awsRegions"`
}

// ConfigurationAggregatorAccountAggregationSourceInput is an input type that accepts ConfigurationAggregatorAccountAggregationSourceArgs and ConfigurationAggregatorAccountAggregationSourceOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorAccountAggregationSourceInput` via:
//
//          ConfigurationAggregatorAccountAggregationSourceArgs{...}
type ConfigurationAggregatorAccountAggregationSourceInput interface {
	pulumi.Input

	ToConfigurationAggregatorAccountAggregationSourceOutput() ConfigurationAggregatorAccountAggregationSourceOutput
	ToConfigurationAggregatorAccountAggregationSourceOutputWithContext(context.Context) ConfigurationAggregatorAccountAggregationSourceOutput
}

type ConfigurationAggregatorAccountAggregationSourceArgs struct {
	AccountIds    pulumi.StringArrayInput `pulumi:"accountIds"`
	AllAwsRegions pulumi.BoolPtrInput     `pulumi:"allAwsRegions"`
	AwsRegions    pulumi.StringArrayInput `pulumi:"awsRegions"`
}

func (ConfigurationAggregatorAccountAggregationSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorAccountAggregationSource)(nil)).Elem()
}

func (i ConfigurationAggregatorAccountAggregationSourceArgs) ToConfigurationAggregatorAccountAggregationSourceOutput() ConfigurationAggregatorAccountAggregationSourceOutput {
	return i.ToConfigurationAggregatorAccountAggregationSourceOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorAccountAggregationSourceArgs) ToConfigurationAggregatorAccountAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorAccountAggregationSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorAccountAggregationSourceOutput)
}

// ConfigurationAggregatorAccountAggregationSourceArrayInput is an input type that accepts ConfigurationAggregatorAccountAggregationSourceArray and ConfigurationAggregatorAccountAggregationSourceArrayOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorAccountAggregationSourceArrayInput` via:
//
//          ConfigurationAggregatorAccountAggregationSourceArray{ ConfigurationAggregatorAccountAggregationSourceArgs{...} }
type ConfigurationAggregatorAccountAggregationSourceArrayInput interface {
	pulumi.Input

	ToConfigurationAggregatorAccountAggregationSourceArrayOutput() ConfigurationAggregatorAccountAggregationSourceArrayOutput
	ToConfigurationAggregatorAccountAggregationSourceArrayOutputWithContext(context.Context) ConfigurationAggregatorAccountAggregationSourceArrayOutput
}

type ConfigurationAggregatorAccountAggregationSourceArray []ConfigurationAggregatorAccountAggregationSourceInput

func (ConfigurationAggregatorAccountAggregationSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationAggregatorAccountAggregationSource)(nil)).Elem()
}

func (i ConfigurationAggregatorAccountAggregationSourceArray) ToConfigurationAggregatorAccountAggregationSourceArrayOutput() ConfigurationAggregatorAccountAggregationSourceArrayOutput {
	return i.ToConfigurationAggregatorAccountAggregationSourceArrayOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorAccountAggregationSourceArray) ToConfigurationAggregatorAccountAggregationSourceArrayOutputWithContext(ctx context.Context) ConfigurationAggregatorAccountAggregationSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorAccountAggregationSourceArrayOutput)
}

type ConfigurationAggregatorAccountAggregationSourceOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorAccountAggregationSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorAccountAggregationSource)(nil)).Elem()
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) ToConfigurationAggregatorAccountAggregationSourceOutput() ConfigurationAggregatorAccountAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) ToConfigurationAggregatorAccountAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorAccountAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAggregatorAccountAggregationSource) []string { return v.AccountIds }).(pulumi.StringArrayOutput)
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) AllAwsRegions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigurationAggregatorAccountAggregationSource) *bool { return v.AllAwsRegions }).(pulumi.BoolPtrOutput)
}

func (o ConfigurationAggregatorAccountAggregationSourceOutput) AwsRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAggregatorAccountAggregationSource) []string { return v.AwsRegions }).(pulumi.StringArrayOutput)
}

type ConfigurationAggregatorAccountAggregationSourceArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorAccountAggregationSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationAggregatorAccountAggregationSource)(nil)).Elem()
}

func (o ConfigurationAggregatorAccountAggregationSourceArrayOutput) ToConfigurationAggregatorAccountAggregationSourceArrayOutput() ConfigurationAggregatorAccountAggregationSourceArrayOutput {
	return o
}

func (o ConfigurationAggregatorAccountAggregationSourceArrayOutput) ToConfigurationAggregatorAccountAggregationSourceArrayOutputWithContext(ctx context.Context) ConfigurationAggregatorAccountAggregationSourceArrayOutput {
	return o
}

func (o ConfigurationAggregatorAccountAggregationSourceArrayOutput) Index(i pulumi.IntInput) ConfigurationAggregatorAccountAggregationSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationAggregatorAccountAggregationSource {
		return vs[0].([]ConfigurationAggregatorAccountAggregationSource)[vs[1].(int)]
	}).(ConfigurationAggregatorAccountAggregationSourceOutput)
}

type ConfigurationAggregatorOrganizationAggregationSource struct {
	AllAwsRegions *bool    `pulumi:"allAwsRegions"`
	AwsRegions    []string `pulumi:"awsRegions"`
	RoleArn       string   `pulumi:"roleArn"`
}

// ConfigurationAggregatorOrganizationAggregationSourceInput is an input type that accepts ConfigurationAggregatorOrganizationAggregationSourceArgs and ConfigurationAggregatorOrganizationAggregationSourceOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorOrganizationAggregationSourceInput` via:
//
//          ConfigurationAggregatorOrganizationAggregationSourceArgs{...}
type ConfigurationAggregatorOrganizationAggregationSourceInput interface {
	pulumi.Input

	ToConfigurationAggregatorOrganizationAggregationSourceOutput() ConfigurationAggregatorOrganizationAggregationSourceOutput
	ToConfigurationAggregatorOrganizationAggregationSourceOutputWithContext(context.Context) ConfigurationAggregatorOrganizationAggregationSourceOutput
}

type ConfigurationAggregatorOrganizationAggregationSourceArgs struct {
	AllAwsRegions pulumi.BoolPtrInput     `pulumi:"allAwsRegions"`
	AwsRegions    pulumi.StringArrayInput `pulumi:"awsRegions"`
	RoleArn       pulumi.StringInput      `pulumi:"roleArn"`
}

func (ConfigurationAggregatorOrganizationAggregationSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorOrganizationAggregationSource)(nil)).Elem()
}

func (i ConfigurationAggregatorOrganizationAggregationSourceArgs) ToConfigurationAggregatorOrganizationAggregationSourceOutput() ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return i.ToConfigurationAggregatorOrganizationAggregationSourceOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorOrganizationAggregationSourceArgs) ToConfigurationAggregatorOrganizationAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorOrganizationAggregationSourceOutput)
}

func (i ConfigurationAggregatorOrganizationAggregationSourceArgs) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutput() ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return i.ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorOrganizationAggregationSourceArgs) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorOrganizationAggregationSourceOutput).ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(ctx)
}

// ConfigurationAggregatorOrganizationAggregationSourcePtrInput is an input type that accepts ConfigurationAggregatorOrganizationAggregationSourceArgs, ConfigurationAggregatorOrganizationAggregationSourcePtr and ConfigurationAggregatorOrganizationAggregationSourcePtrOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorOrganizationAggregationSourcePtrInput` via:
//
//          ConfigurationAggregatorOrganizationAggregationSourceArgs{...}
//
//  or:
//
//          nil
type ConfigurationAggregatorOrganizationAggregationSourcePtrInput interface {
	pulumi.Input

	ToConfigurationAggregatorOrganizationAggregationSourcePtrOutput() ConfigurationAggregatorOrganizationAggregationSourcePtrOutput
	ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(context.Context) ConfigurationAggregatorOrganizationAggregationSourcePtrOutput
}

type configurationAggregatorOrganizationAggregationSourcePtrType ConfigurationAggregatorOrganizationAggregationSourceArgs

func ConfigurationAggregatorOrganizationAggregationSourcePtr(v *ConfigurationAggregatorOrganizationAggregationSourceArgs) ConfigurationAggregatorOrganizationAggregationSourcePtrInput {
	return (*configurationAggregatorOrganizationAggregationSourcePtrType)(v)
}

func (*configurationAggregatorOrganizationAggregationSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationAggregatorOrganizationAggregationSource)(nil)).Elem()
}

func (i *configurationAggregatorOrganizationAggregationSourcePtrType) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutput() ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return i.ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(context.Background())
}

func (i *configurationAggregatorOrganizationAggregationSourcePtrType) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorOrganizationAggregationSourcePtrOutput)
}

type ConfigurationAggregatorOrganizationAggregationSourceOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorOrganizationAggregationSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorOrganizationAggregationSource)(nil)).Elem()
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) ToConfigurationAggregatorOrganizationAggregationSourceOutput() ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) ToConfigurationAggregatorOrganizationAggregationSourceOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return o
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutput() ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return o.ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(context.Background())
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationAggregatorOrganizationAggregationSource) *ConfigurationAggregatorOrganizationAggregationSource {
		return &v
	}).(ConfigurationAggregatorOrganizationAggregationSourcePtrOutput)
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) AllAwsRegions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigurationAggregatorOrganizationAggregationSource) *bool { return v.AllAwsRegions }).(pulumi.BoolPtrOutput)
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) AwsRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigurationAggregatorOrganizationAggregationSource) []string { return v.AwsRegions }).(pulumi.StringArrayOutput)
}

func (o ConfigurationAggregatorOrganizationAggregationSourceOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationAggregatorOrganizationAggregationSource) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ConfigurationAggregatorOrganizationAggregationSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorOrganizationAggregationSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationAggregatorOrganizationAggregationSource)(nil)).Elem()
}

func (o ConfigurationAggregatorOrganizationAggregationSourcePtrOutput) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutput() ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return o
}

func (o ConfigurationAggregatorOrganizationAggregationSourcePtrOutput) ToConfigurationAggregatorOrganizationAggregationSourcePtrOutputWithContext(ctx context.Context) ConfigurationAggregatorOrganizationAggregationSourcePtrOutput {
	return o
}

func (o ConfigurationAggregatorOrganizationAggregationSourcePtrOutput) Elem() ConfigurationAggregatorOrganizationAggregationSourceOutput {
	return o.ApplyT(func(v *ConfigurationAggregatorOrganizationAggregationSource) ConfigurationAggregatorOrganizationAggregationSource {
		if v != nil {
			return *v
		}
		var ret ConfigurationAggregatorOrganizationAggregationSource
		return ret
	}).(ConfigurationAggregatorOrganizationAggregationSourceOutput)
}

func (o ConfigurationAggregatorOrganizationAggregationSourcePtrOutput) AllAwsRegions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigurationAggregatorOrganizationAggregationSource) *bool {
		if v == nil {
			return nil
		}
		return v.AllAwsRegions
	}).(pulumi.BoolPtrOutput)
}

func (o ConfigurationAggregatorOrganizationAggregationSourcePtrOutput) AwsRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationAggregatorOrganizationAggregationSource) []string {
		if v == nil {
			return nil
		}
		return v.AwsRegions
	}).(pulumi.StringArrayOutput)
}

func (o ConfigurationAggregatorOrganizationAggregationSourcePtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationAggregatorOrganizationAggregationSource) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type ConfigurationAggregatorTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ConfigurationAggregatorTagInput is an input type that accepts ConfigurationAggregatorTagArgs and ConfigurationAggregatorTagOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorTagInput` via:
//
//          ConfigurationAggregatorTagArgs{...}
type ConfigurationAggregatorTagInput interface {
	pulumi.Input

	ToConfigurationAggregatorTagOutput() ConfigurationAggregatorTagOutput
	ToConfigurationAggregatorTagOutputWithContext(context.Context) ConfigurationAggregatorTagOutput
}

// A key-value pair to associate with a resource.
type ConfigurationAggregatorTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ConfigurationAggregatorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorTag)(nil)).Elem()
}

func (i ConfigurationAggregatorTagArgs) ToConfigurationAggregatorTagOutput() ConfigurationAggregatorTagOutput {
	return i.ToConfigurationAggregatorTagOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorTagArgs) ToConfigurationAggregatorTagOutputWithContext(ctx context.Context) ConfigurationAggregatorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorTagOutput)
}

// ConfigurationAggregatorTagArrayInput is an input type that accepts ConfigurationAggregatorTagArray and ConfigurationAggregatorTagArrayOutput values.
// You can construct a concrete instance of `ConfigurationAggregatorTagArrayInput` via:
//
//          ConfigurationAggregatorTagArray{ ConfigurationAggregatorTagArgs{...} }
type ConfigurationAggregatorTagArrayInput interface {
	pulumi.Input

	ToConfigurationAggregatorTagArrayOutput() ConfigurationAggregatorTagArrayOutput
	ToConfigurationAggregatorTagArrayOutputWithContext(context.Context) ConfigurationAggregatorTagArrayOutput
}

type ConfigurationAggregatorTagArray []ConfigurationAggregatorTagInput

func (ConfigurationAggregatorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationAggregatorTag)(nil)).Elem()
}

func (i ConfigurationAggregatorTagArray) ToConfigurationAggregatorTagArrayOutput() ConfigurationAggregatorTagArrayOutput {
	return i.ToConfigurationAggregatorTagArrayOutputWithContext(context.Background())
}

func (i ConfigurationAggregatorTagArray) ToConfigurationAggregatorTagArrayOutputWithContext(ctx context.Context) ConfigurationAggregatorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAggregatorTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ConfigurationAggregatorTagOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAggregatorTag)(nil)).Elem()
}

func (o ConfigurationAggregatorTagOutput) ToConfigurationAggregatorTagOutput() ConfigurationAggregatorTagOutput {
	return o
}

func (o ConfigurationAggregatorTagOutput) ToConfigurationAggregatorTagOutputWithContext(ctx context.Context) ConfigurationAggregatorTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ConfigurationAggregatorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationAggregatorTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ConfigurationAggregatorTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationAggregatorTag) string { return v.Value }).(pulumi.StringOutput)
}

type ConfigurationAggregatorTagArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationAggregatorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationAggregatorTag)(nil)).Elem()
}

func (o ConfigurationAggregatorTagArrayOutput) ToConfigurationAggregatorTagArrayOutput() ConfigurationAggregatorTagArrayOutput {
	return o
}

func (o ConfigurationAggregatorTagArrayOutput) ToConfigurationAggregatorTagArrayOutputWithContext(ctx context.Context) ConfigurationAggregatorTagArrayOutput {
	return o
}

func (o ConfigurationAggregatorTagArrayOutput) Index(i pulumi.IntInput) ConfigurationAggregatorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationAggregatorTag {
		return vs[0].([]ConfigurationAggregatorTag)[vs[1].(int)]
	}).(ConfigurationAggregatorTagOutput)
}

// Input parameters in the form of key-value pairs for the conformance pack.
type ConformancePackConformancePackInputParameter struct {
	ParameterName  string `pulumi:"parameterName"`
	ParameterValue string `pulumi:"parameterValue"`
}

// ConformancePackConformancePackInputParameterInput is an input type that accepts ConformancePackConformancePackInputParameterArgs and ConformancePackConformancePackInputParameterOutput values.
// You can construct a concrete instance of `ConformancePackConformancePackInputParameterInput` via:
//
//          ConformancePackConformancePackInputParameterArgs{...}
type ConformancePackConformancePackInputParameterInput interface {
	pulumi.Input

	ToConformancePackConformancePackInputParameterOutput() ConformancePackConformancePackInputParameterOutput
	ToConformancePackConformancePackInputParameterOutputWithContext(context.Context) ConformancePackConformancePackInputParameterOutput
}

// Input parameters in the form of key-value pairs for the conformance pack.
type ConformancePackConformancePackInputParameterArgs struct {
	ParameterName  pulumi.StringInput `pulumi:"parameterName"`
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (ConformancePackConformancePackInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (i ConformancePackConformancePackInputParameterArgs) ToConformancePackConformancePackInputParameterOutput() ConformancePackConformancePackInputParameterOutput {
	return i.ToConformancePackConformancePackInputParameterOutputWithContext(context.Background())
}

func (i ConformancePackConformancePackInputParameterArgs) ToConformancePackConformancePackInputParameterOutputWithContext(ctx context.Context) ConformancePackConformancePackInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConformancePackConformancePackInputParameterOutput)
}

// ConformancePackConformancePackInputParameterArrayInput is an input type that accepts ConformancePackConformancePackInputParameterArray and ConformancePackConformancePackInputParameterArrayOutput values.
// You can construct a concrete instance of `ConformancePackConformancePackInputParameterArrayInput` via:
//
//          ConformancePackConformancePackInputParameterArray{ ConformancePackConformancePackInputParameterArgs{...} }
type ConformancePackConformancePackInputParameterArrayInput interface {
	pulumi.Input

	ToConformancePackConformancePackInputParameterArrayOutput() ConformancePackConformancePackInputParameterArrayOutput
	ToConformancePackConformancePackInputParameterArrayOutputWithContext(context.Context) ConformancePackConformancePackInputParameterArrayOutput
}

type ConformancePackConformancePackInputParameterArray []ConformancePackConformancePackInputParameterInput

func (ConformancePackConformancePackInputParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (i ConformancePackConformancePackInputParameterArray) ToConformancePackConformancePackInputParameterArrayOutput() ConformancePackConformancePackInputParameterArrayOutput {
	return i.ToConformancePackConformancePackInputParameterArrayOutputWithContext(context.Background())
}

func (i ConformancePackConformancePackInputParameterArray) ToConformancePackConformancePackInputParameterArrayOutputWithContext(ctx context.Context) ConformancePackConformancePackInputParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConformancePackConformancePackInputParameterArrayOutput)
}

// Input parameters in the form of key-value pairs for the conformance pack.
type ConformancePackConformancePackInputParameterOutput struct{ *pulumi.OutputState }

func (ConformancePackConformancePackInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (o ConformancePackConformancePackInputParameterOutput) ToConformancePackConformancePackInputParameterOutput() ConformancePackConformancePackInputParameterOutput {
	return o
}

func (o ConformancePackConformancePackInputParameterOutput) ToConformancePackConformancePackInputParameterOutputWithContext(ctx context.Context) ConformancePackConformancePackInputParameterOutput {
	return o
}

func (o ConformancePackConformancePackInputParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v ConformancePackConformancePackInputParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

func (o ConformancePackConformancePackInputParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v ConformancePackConformancePackInputParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type ConformancePackConformancePackInputParameterArrayOutput struct{ *pulumi.OutputState }

func (ConformancePackConformancePackInputParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (o ConformancePackConformancePackInputParameterArrayOutput) ToConformancePackConformancePackInputParameterArrayOutput() ConformancePackConformancePackInputParameterArrayOutput {
	return o
}

func (o ConformancePackConformancePackInputParameterArrayOutput) ToConformancePackConformancePackInputParameterArrayOutputWithContext(ctx context.Context) ConformancePackConformancePackInputParameterArrayOutput {
	return o
}

func (o ConformancePackConformancePackInputParameterArrayOutput) Index(i pulumi.IntInput) ConformancePackConformancePackInputParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConformancePackConformancePackInputParameter {
		return vs[0].([]ConformancePackConformancePackInputParameter)[vs[1].(int)]
	}).(ConformancePackConformancePackInputParameterOutput)
}

// Input parameters in the form of key-value pairs for the conformance pack.
type OrganizationConformancePackConformancePackInputParameter struct {
	ParameterName  string `pulumi:"parameterName"`
	ParameterValue string `pulumi:"parameterValue"`
}

// OrganizationConformancePackConformancePackInputParameterInput is an input type that accepts OrganizationConformancePackConformancePackInputParameterArgs and OrganizationConformancePackConformancePackInputParameterOutput values.
// You can construct a concrete instance of `OrganizationConformancePackConformancePackInputParameterInput` via:
//
//          OrganizationConformancePackConformancePackInputParameterArgs{...}
type OrganizationConformancePackConformancePackInputParameterInput interface {
	pulumi.Input

	ToOrganizationConformancePackConformancePackInputParameterOutput() OrganizationConformancePackConformancePackInputParameterOutput
	ToOrganizationConformancePackConformancePackInputParameterOutputWithContext(context.Context) OrganizationConformancePackConformancePackInputParameterOutput
}

// Input parameters in the form of key-value pairs for the conformance pack.
type OrganizationConformancePackConformancePackInputParameterArgs struct {
	ParameterName  pulumi.StringInput `pulumi:"parameterName"`
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (OrganizationConformancePackConformancePackInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (i OrganizationConformancePackConformancePackInputParameterArgs) ToOrganizationConformancePackConformancePackInputParameterOutput() OrganizationConformancePackConformancePackInputParameterOutput {
	return i.ToOrganizationConformancePackConformancePackInputParameterOutputWithContext(context.Background())
}

func (i OrganizationConformancePackConformancePackInputParameterArgs) ToOrganizationConformancePackConformancePackInputParameterOutputWithContext(ctx context.Context) OrganizationConformancePackConformancePackInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationConformancePackConformancePackInputParameterOutput)
}

// OrganizationConformancePackConformancePackInputParameterArrayInput is an input type that accepts OrganizationConformancePackConformancePackInputParameterArray and OrganizationConformancePackConformancePackInputParameterArrayOutput values.
// You can construct a concrete instance of `OrganizationConformancePackConformancePackInputParameterArrayInput` via:
//
//          OrganizationConformancePackConformancePackInputParameterArray{ OrganizationConformancePackConformancePackInputParameterArgs{...} }
type OrganizationConformancePackConformancePackInputParameterArrayInput interface {
	pulumi.Input

	ToOrganizationConformancePackConformancePackInputParameterArrayOutput() OrganizationConformancePackConformancePackInputParameterArrayOutput
	ToOrganizationConformancePackConformancePackInputParameterArrayOutputWithContext(context.Context) OrganizationConformancePackConformancePackInputParameterArrayOutput
}

type OrganizationConformancePackConformancePackInputParameterArray []OrganizationConformancePackConformancePackInputParameterInput

func (OrganizationConformancePackConformancePackInputParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (i OrganizationConformancePackConformancePackInputParameterArray) ToOrganizationConformancePackConformancePackInputParameterArrayOutput() OrganizationConformancePackConformancePackInputParameterArrayOutput {
	return i.ToOrganizationConformancePackConformancePackInputParameterArrayOutputWithContext(context.Background())
}

func (i OrganizationConformancePackConformancePackInputParameterArray) ToOrganizationConformancePackConformancePackInputParameterArrayOutputWithContext(ctx context.Context) OrganizationConformancePackConformancePackInputParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationConformancePackConformancePackInputParameterArrayOutput)
}

// Input parameters in the form of key-value pairs for the conformance pack.
type OrganizationConformancePackConformancePackInputParameterOutput struct{ *pulumi.OutputState }

func (OrganizationConformancePackConformancePackInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (o OrganizationConformancePackConformancePackInputParameterOutput) ToOrganizationConformancePackConformancePackInputParameterOutput() OrganizationConformancePackConformancePackInputParameterOutput {
	return o
}

func (o OrganizationConformancePackConformancePackInputParameterOutput) ToOrganizationConformancePackConformancePackInputParameterOutputWithContext(ctx context.Context) OrganizationConformancePackConformancePackInputParameterOutput {
	return o
}

func (o OrganizationConformancePackConformancePackInputParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationConformancePackConformancePackInputParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

func (o OrganizationConformancePackConformancePackInputParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationConformancePackConformancePackInputParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type OrganizationConformancePackConformancePackInputParameterArrayOutput struct{ *pulumi.OutputState }

func (OrganizationConformancePackConformancePackInputParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationConformancePackConformancePackInputParameter)(nil)).Elem()
}

func (o OrganizationConformancePackConformancePackInputParameterArrayOutput) ToOrganizationConformancePackConformancePackInputParameterArrayOutput() OrganizationConformancePackConformancePackInputParameterArrayOutput {
	return o
}

func (o OrganizationConformancePackConformancePackInputParameterArrayOutput) ToOrganizationConformancePackConformancePackInputParameterArrayOutputWithContext(ctx context.Context) OrganizationConformancePackConformancePackInputParameterArrayOutput {
	return o
}

func (o OrganizationConformancePackConformancePackInputParameterArrayOutput) Index(i pulumi.IntInput) OrganizationConformancePackConformancePackInputParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationConformancePackConformancePackInputParameter {
		return vs[0].([]OrganizationConformancePackConformancePackInputParameter)[vs[1].(int)]
	}).(OrganizationConformancePackConformancePackInputParameterOutput)
}

// A key-value pair to associate with a resource.
type StoredQueryTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// StoredQueryTagInput is an input type that accepts StoredQueryTagArgs and StoredQueryTagOutput values.
// You can construct a concrete instance of `StoredQueryTagInput` via:
//
//          StoredQueryTagArgs{...}
type StoredQueryTagInput interface {
	pulumi.Input

	ToStoredQueryTagOutput() StoredQueryTagOutput
	ToStoredQueryTagOutputWithContext(context.Context) StoredQueryTagOutput
}

// A key-value pair to associate with a resource.
type StoredQueryTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StoredQueryTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StoredQueryTag)(nil)).Elem()
}

func (i StoredQueryTagArgs) ToStoredQueryTagOutput() StoredQueryTagOutput {
	return i.ToStoredQueryTagOutputWithContext(context.Background())
}

func (i StoredQueryTagArgs) ToStoredQueryTagOutputWithContext(ctx context.Context) StoredQueryTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoredQueryTagOutput)
}

// StoredQueryTagArrayInput is an input type that accepts StoredQueryTagArray and StoredQueryTagArrayOutput values.
// You can construct a concrete instance of `StoredQueryTagArrayInput` via:
//
//          StoredQueryTagArray{ StoredQueryTagArgs{...} }
type StoredQueryTagArrayInput interface {
	pulumi.Input

	ToStoredQueryTagArrayOutput() StoredQueryTagArrayOutput
	ToStoredQueryTagArrayOutputWithContext(context.Context) StoredQueryTagArrayOutput
}

type StoredQueryTagArray []StoredQueryTagInput

func (StoredQueryTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StoredQueryTag)(nil)).Elem()
}

func (i StoredQueryTagArray) ToStoredQueryTagArrayOutput() StoredQueryTagArrayOutput {
	return i.ToStoredQueryTagArrayOutputWithContext(context.Background())
}

func (i StoredQueryTagArray) ToStoredQueryTagArrayOutputWithContext(ctx context.Context) StoredQueryTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoredQueryTagArrayOutput)
}

// A key-value pair to associate with a resource.
type StoredQueryTagOutput struct{ *pulumi.OutputState }

func (StoredQueryTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoredQueryTag)(nil)).Elem()
}

func (o StoredQueryTagOutput) ToStoredQueryTagOutput() StoredQueryTagOutput {
	return o
}

func (o StoredQueryTagOutput) ToStoredQueryTagOutputWithContext(ctx context.Context) StoredQueryTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o StoredQueryTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StoredQueryTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o StoredQueryTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StoredQueryTag) string { return v.Value }).(pulumi.StringOutput)
}

type StoredQueryTagArrayOutput struct{ *pulumi.OutputState }

func (StoredQueryTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StoredQueryTag)(nil)).Elem()
}

func (o StoredQueryTagArrayOutput) ToStoredQueryTagArrayOutput() StoredQueryTagArrayOutput {
	return o
}

func (o StoredQueryTagArrayOutput) ToStoredQueryTagArrayOutputWithContext(ctx context.Context) StoredQueryTagArrayOutput {
	return o
}

func (o StoredQueryTagArrayOutput) Index(i pulumi.IntInput) StoredQueryTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StoredQueryTag {
		return vs[0].([]StoredQueryTag)[vs[1].(int)]
	}).(StoredQueryTagOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfigurationAggregatorAccountAggregationSourceOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorAccountAggregationSourceArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorOrganizationAggregationSourceOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorOrganizationAggregationSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorTagOutput{})
	pulumi.RegisterOutputType(ConfigurationAggregatorTagArrayOutput{})
	pulumi.RegisterOutputType(ConformancePackConformancePackInputParameterOutput{})
	pulumi.RegisterOutputType(ConformancePackConformancePackInputParameterArrayOutput{})
	pulumi.RegisterOutputType(OrganizationConformancePackConformancePackInputParameterOutput{})
	pulumi.RegisterOutputType(OrganizationConformancePackConformancePackInputParameterArrayOutput{})
	pulumi.RegisterOutputType(StoredQueryTagOutput{})
	pulumi.RegisterOutputType(StoredQueryTagArrayOutput{})
}
