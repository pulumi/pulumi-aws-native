// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configuration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Config::AggregationAuthorization
func LookupAggregationAuthorization(ctx *pulumi.Context, args *LookupAggregationAuthorizationArgs, opts ...pulumi.InvokeOption) (*LookupAggregationAuthorizationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAggregationAuthorizationResult
	err := ctx.Invoke("aws-native:configuration:getAggregationAuthorization", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAggregationAuthorizationArgs struct {
	// The 12-digit account ID of the account authorized to aggregate data.
	AuthorizedAccountId string `pulumi:"authorizedAccountId"`
	// The region authorized to collect aggregated data.
	AuthorizedAwsRegion string `pulumi:"authorizedAwsRegion"`
}

type LookupAggregationAuthorizationResult struct {
	// The ARN of the AggregationAuthorization.
	AggregationAuthorizationArn *string `pulumi:"aggregationAuthorizationArn"`
	// The tags for the AggregationAuthorization.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupAggregationAuthorizationOutput(ctx *pulumi.Context, args LookupAggregationAuthorizationOutputArgs, opts ...pulumi.InvokeOption) LookupAggregationAuthorizationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAggregationAuthorizationResultOutput, error) {
			args := v.(LookupAggregationAuthorizationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:configuration:getAggregationAuthorization", args, LookupAggregationAuthorizationResultOutput{}, options).(LookupAggregationAuthorizationResultOutput), nil
		}).(LookupAggregationAuthorizationResultOutput)
}

type LookupAggregationAuthorizationOutputArgs struct {
	// The 12-digit account ID of the account authorized to aggregate data.
	AuthorizedAccountId pulumi.StringInput `pulumi:"authorizedAccountId"`
	// The region authorized to collect aggregated data.
	AuthorizedAwsRegion pulumi.StringInput `pulumi:"authorizedAwsRegion"`
}

func (LookupAggregationAuthorizationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAggregationAuthorizationArgs)(nil)).Elem()
}

type LookupAggregationAuthorizationResultOutput struct{ *pulumi.OutputState }

func (LookupAggregationAuthorizationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAggregationAuthorizationResult)(nil)).Elem()
}

func (o LookupAggregationAuthorizationResultOutput) ToLookupAggregationAuthorizationResultOutput() LookupAggregationAuthorizationResultOutput {
	return o
}

func (o LookupAggregationAuthorizationResultOutput) ToLookupAggregationAuthorizationResultOutputWithContext(ctx context.Context) LookupAggregationAuthorizationResultOutput {
	return o
}

// The ARN of the AggregationAuthorization.
func (o LookupAggregationAuthorizationResultOutput) AggregationAuthorizationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAggregationAuthorizationResult) *string { return v.AggregationAuthorizationArn }).(pulumi.StringPtrOutput)
}

// The tags for the AggregationAuthorization.
func (o LookupAggregationAuthorizationResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupAggregationAuthorizationResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAggregationAuthorizationResultOutput{})
}
