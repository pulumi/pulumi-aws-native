// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package applicationinsights

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource schema for AWS::ApplicationInsights::Application
type Application struct {
	pulumi.CustomResourceState

	// The ARN of the ApplicationInsights application.
	ApplicationArn pulumi.StringOutput `pulumi:"applicationArn"`
	// If set to true, application will be configured with recommended monitoring configuration.
	AutoConfigurationEnabled pulumi.BoolPtrOutput `pulumi:"autoConfigurationEnabled"`
	// The monitoring settings of the components.
	ComponentMonitoringSettings ApplicationComponentMonitoringSettingArrayOutput `pulumi:"componentMonitoringSettings"`
	// The custom grouped components.
	CustomComponents ApplicationCustomComponentArrayOutput `pulumi:"customComponents"`
	// Indicates whether Application Insights can listen to CloudWatch events for the application resources.
	CweMonitorEnabled pulumi.BoolPtrOutput `pulumi:"cweMonitorEnabled"`
	// The grouping type of the application
	GroupingType ApplicationGroupingTypePtrOutput `pulumi:"groupingType"`
	// The log pattern sets.
	LogPatternSets ApplicationLogPatternSetArrayOutput `pulumi:"logPatternSets"`
	// When set to true, creates opsItems for any problems detected on an application.
	OpsCenterEnabled pulumi.BoolPtrOutput `pulumi:"opsCenterEnabled"`
	// The SNS topic provided to Application Insights that is associated to the created opsItem.
	OpsItemSnsTopicArn pulumi.StringPtrOutput `pulumi:"opsItemSnsTopicArn"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The tags of Application Insights application.
	Tags ApplicationTagArrayOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"groupingType",
		"resourceGroupName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:applicationinsights:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:applicationinsights:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// If set to true, application will be configured with recommended monitoring configuration.
	AutoConfigurationEnabled *bool `pulumi:"autoConfigurationEnabled"`
	// The monitoring settings of the components.
	ComponentMonitoringSettings []ApplicationComponentMonitoringSetting `pulumi:"componentMonitoringSettings"`
	// The custom grouped components.
	CustomComponents []ApplicationCustomComponent `pulumi:"customComponents"`
	// Indicates whether Application Insights can listen to CloudWatch events for the application resources.
	CweMonitorEnabled *bool `pulumi:"cweMonitorEnabled"`
	// The grouping type of the application
	GroupingType *ApplicationGroupingType `pulumi:"groupingType"`
	// The log pattern sets.
	LogPatternSets []ApplicationLogPatternSet `pulumi:"logPatternSets"`
	// When set to true, creates opsItems for any problems detected on an application.
	OpsCenterEnabled *bool `pulumi:"opsCenterEnabled"`
	// The SNS topic provided to Application Insights that is associated to the created opsItem.
	OpsItemSnsTopicArn *string `pulumi:"opsItemSnsTopicArn"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The tags of Application Insights application.
	Tags []ApplicationTag `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// If set to true, application will be configured with recommended monitoring configuration.
	AutoConfigurationEnabled pulumi.BoolPtrInput
	// The monitoring settings of the components.
	ComponentMonitoringSettings ApplicationComponentMonitoringSettingArrayInput
	// The custom grouped components.
	CustomComponents ApplicationCustomComponentArrayInput
	// Indicates whether Application Insights can listen to CloudWatch events for the application resources.
	CweMonitorEnabled pulumi.BoolPtrInput
	// The grouping type of the application
	GroupingType ApplicationGroupingTypePtrInput
	// The log pattern sets.
	LogPatternSets ApplicationLogPatternSetArrayInput
	// When set to true, creates opsItems for any problems detected on an application.
	OpsCenterEnabled pulumi.BoolPtrInput
	// The SNS topic provided to Application Insights that is associated to the created opsItem.
	OpsItemSnsTopicArn pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The tags of Application Insights application.
	Tags ApplicationTagArrayInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

func (i *Application) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: i.ToApplicationOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: o.OutputState,
	}
}

// The ARN of the ApplicationInsights application.
func (o ApplicationOutput) ApplicationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationArn }).(pulumi.StringOutput)
}

// If set to true, application will be configured with recommended monitoring configuration.
func (o ApplicationOutput) AutoConfigurationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.AutoConfigurationEnabled }).(pulumi.BoolPtrOutput)
}

// The monitoring settings of the components.
func (o ApplicationOutput) ComponentMonitoringSettings() ApplicationComponentMonitoringSettingArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationComponentMonitoringSettingArrayOutput {
		return v.ComponentMonitoringSettings
	}).(ApplicationComponentMonitoringSettingArrayOutput)
}

// The custom grouped components.
func (o ApplicationOutput) CustomComponents() ApplicationCustomComponentArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationCustomComponentArrayOutput { return v.CustomComponents }).(ApplicationCustomComponentArrayOutput)
}

// Indicates whether Application Insights can listen to CloudWatch events for the application resources.
func (o ApplicationOutput) CweMonitorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.CweMonitorEnabled }).(pulumi.BoolPtrOutput)
}

// The grouping type of the application
func (o ApplicationOutput) GroupingType() ApplicationGroupingTypePtrOutput {
	return o.ApplyT(func(v *Application) ApplicationGroupingTypePtrOutput { return v.GroupingType }).(ApplicationGroupingTypePtrOutput)
}

// The log pattern sets.
func (o ApplicationOutput) LogPatternSets() ApplicationLogPatternSetArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationLogPatternSetArrayOutput { return v.LogPatternSets }).(ApplicationLogPatternSetArrayOutput)
}

// When set to true, creates opsItems for any problems detected on an application.
func (o ApplicationOutput) OpsCenterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.OpsCenterEnabled }).(pulumi.BoolPtrOutput)
}

// The SNS topic provided to Application Insights that is associated to the created opsItem.
func (o ApplicationOutput) OpsItemSnsTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.OpsItemSnsTopicArn }).(pulumi.StringPtrOutput)
}

// The name of the resource group.
func (o ApplicationOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The tags of Application Insights application.
func (o ApplicationOutput) Tags() ApplicationTagArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationTagArrayOutput { return v.Tags }).(ApplicationTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
