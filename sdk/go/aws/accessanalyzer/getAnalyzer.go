// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package accessanalyzer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::AccessAnalyzer::Analyzer type specifies an analyzer of the user's account
func LookupAnalyzer(ctx *pulumi.Context, args *LookupAnalyzerArgs, opts ...pulumi.InvokeOption) (*LookupAnalyzerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAnalyzerResult
	err := ctx.Invoke("aws-native:accessanalyzer:getAnalyzer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAnalyzerArgs struct {
	// Amazon Resource Name (ARN) of the analyzer
	Arn string `pulumi:"arn"`
}

type LookupAnalyzerResult struct {
	// Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.
	ArchiveRules []AnalyzerArchiveRule `pulumi:"archiveRules"`
	// Amazon Resource Name (ARN) of the analyzer
	Arn *string `pulumi:"arn"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupAnalyzerOutput(ctx *pulumi.Context, args LookupAnalyzerOutputArgs, opts ...pulumi.InvokeOption) LookupAnalyzerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAnalyzerResultOutput, error) {
			args := v.(LookupAnalyzerArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAnalyzerResult
			secret, err := ctx.InvokePackageRaw("aws-native:accessanalyzer:getAnalyzer", args, &rv, "", opts...)
			if err != nil {
				return LookupAnalyzerResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAnalyzerResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAnalyzerResultOutput), nil
			}
			return output, nil
		}).(LookupAnalyzerResultOutput)
}

type LookupAnalyzerOutputArgs struct {
	// Amazon Resource Name (ARN) of the analyzer
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupAnalyzerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnalyzerArgs)(nil)).Elem()
}

type LookupAnalyzerResultOutput struct{ *pulumi.OutputState }

func (LookupAnalyzerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnalyzerResult)(nil)).Elem()
}

func (o LookupAnalyzerResultOutput) ToLookupAnalyzerResultOutput() LookupAnalyzerResultOutput {
	return o
}

func (o LookupAnalyzerResultOutput) ToLookupAnalyzerResultOutputWithContext(ctx context.Context) LookupAnalyzerResultOutput {
	return o
}

// Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.
func (o LookupAnalyzerResultOutput) ArchiveRules() AnalyzerArchiveRuleArrayOutput {
	return o.ApplyT(func(v LookupAnalyzerResult) []AnalyzerArchiveRule { return v.ArchiveRules }).(AnalyzerArchiveRuleArrayOutput)
}

// Amazon Resource Name (ARN) of the analyzer
func (o LookupAnalyzerResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAnalyzerResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupAnalyzerResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupAnalyzerResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAnalyzerResultOutput{})
}
