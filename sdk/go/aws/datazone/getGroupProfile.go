// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Group profiles represent groups of Amazon DataZone users. Groups can be manually created, or mapped to Active Directory groups of enterprise customers. In Amazon DataZone, groups serve two purposes. First, a group can map to a team of users in the organizational chart, and thus reduce the administrative work of a Amazon DataZone project owner when there are new employees joining or leaving a team. Second, corporate administrators use Active Directory groups to manage and update user statuses and so Amazon DataZone domain administrators can use these group memberships to implement Amazon DataZone domain policies.
func LookupGroupProfile(ctx *pulumi.Context, args *LookupGroupProfileArgs, opts ...pulumi.InvokeOption) (*LookupGroupProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupProfileResult
	err := ctx.Invoke("aws-native:datazone:getGroupProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGroupProfileArgs struct {
	// The identifier of the Amazon DataZone domain in which the group profile is created.
	DomainId string `pulumi:"domainId"`
	// The ID of the Amazon DataZone group profile.
	Id string `pulumi:"id"`
}

type LookupGroupProfileResult struct {
	// The identifier of the Amazon DataZone domain in which the group profile is created.
	DomainId *string `pulumi:"domainId"`
	// The group-name of the Group Profile.
	GroupName *string `pulumi:"groupName"`
	// The ID of the Amazon DataZone group profile.
	Id *string `pulumi:"id"`
	// The status of a group profile.
	Status *GroupProfileStatus `pulumi:"status"`
}

func LookupGroupProfileOutput(ctx *pulumi.Context, args LookupGroupProfileOutputArgs, opts ...pulumi.InvokeOption) LookupGroupProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGroupProfileResultOutput, error) {
			args := v.(LookupGroupProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:datazone:getGroupProfile", args, LookupGroupProfileResultOutput{}, options).(LookupGroupProfileResultOutput), nil
		}).(LookupGroupProfileResultOutput)
}

type LookupGroupProfileOutputArgs struct {
	// The identifier of the Amazon DataZone domain in which the group profile is created.
	DomainId pulumi.StringInput `pulumi:"domainId"`
	// The ID of the Amazon DataZone group profile.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupGroupProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupProfileArgs)(nil)).Elem()
}

type LookupGroupProfileResultOutput struct{ *pulumi.OutputState }

func (LookupGroupProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupProfileResult)(nil)).Elem()
}

func (o LookupGroupProfileResultOutput) ToLookupGroupProfileResultOutput() LookupGroupProfileResultOutput {
	return o
}

func (o LookupGroupProfileResultOutput) ToLookupGroupProfileResultOutputWithContext(ctx context.Context) LookupGroupProfileResultOutput {
	return o
}

// The identifier of the Amazon DataZone domain in which the group profile is created.
func (o LookupGroupProfileResultOutput) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGroupProfileResult) *string { return v.DomainId }).(pulumi.StringPtrOutput)
}

// The group-name of the Group Profile.
func (o LookupGroupProfileResultOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGroupProfileResult) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The ID of the Amazon DataZone group profile.
func (o LookupGroupProfileResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGroupProfileResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The status of a group profile.
func (o LookupGroupProfileResultOutput) Status() GroupProfileStatusPtrOutput {
	return o.ApplyT(func(v LookupGroupProfileResult) *GroupProfileStatus { return v.Status }).(GroupProfileStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupProfileResultOutput{})
}
