// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A user profile represents Amazon DataZone users. Amazon DataZone supports both IAM roles and SSO identities to interact with the Amazon DataZone Management Console and the data portal for different purposes. Domain administrators use IAM roles to perform the initial administrative domain-related work in the Amazon DataZone Management Console, including creating new Amazon DataZone domains, configuring metadata form types, and implementing policies. Data workers use their SSO corporate identities via Identity Center to log into the Amazon DataZone Data Portal and access projects where they have memberships.
func LookupUserProfile(ctx *pulumi.Context, args *LookupUserProfileArgs, opts ...pulumi.InvokeOption) (*LookupUserProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserProfileResult
	err := ctx.Invoke("aws-native:datazone:getUserProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserProfileArgs struct {
	// The identifier of the Amazon DataZone domain in which the user profile is created.
	DomainId string `pulumi:"domainId"`
	// The ID of the Amazon DataZone user profile.
	Id string `pulumi:"id"`
}

type LookupUserProfileResult struct {
	Details interface{} `pulumi:"details"`
	// The identifier of the Amazon DataZone domain in which the user profile is created.
	DomainId *string `pulumi:"domainId"`
	// The ID of the Amazon DataZone user profile.
	Id *string `pulumi:"id"`
	// The status of the user profile.
	Status *UserProfileStatus `pulumi:"status"`
	// The type of the user profile.
	Type *UserProfileType `pulumi:"type"`
}

func LookupUserProfileOutput(ctx *pulumi.Context, args LookupUserProfileOutputArgs, opts ...pulumi.InvokeOption) LookupUserProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserProfileResultOutput, error) {
			args := v.(LookupUserProfileArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupUserProfileResult
			secret, err := ctx.InvokePackageRaw("aws-native:datazone:getUserProfile", args, &rv, "", opts...)
			if err != nil {
				return LookupUserProfileResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupUserProfileResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupUserProfileResultOutput), nil
			}
			return output, nil
		}).(LookupUserProfileResultOutput)
}

type LookupUserProfileOutputArgs struct {
	// The identifier of the Amazon DataZone domain in which the user profile is created.
	DomainId pulumi.StringInput `pulumi:"domainId"`
	// The ID of the Amazon DataZone user profile.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupUserProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserProfileArgs)(nil)).Elem()
}

type LookupUserProfileResultOutput struct{ *pulumi.OutputState }

func (LookupUserProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserProfileResult)(nil)).Elem()
}

func (o LookupUserProfileResultOutput) ToLookupUserProfileResultOutput() LookupUserProfileResultOutput {
	return o
}

func (o LookupUserProfileResultOutput) ToLookupUserProfileResultOutputWithContext(ctx context.Context) LookupUserProfileResultOutput {
	return o
}

func (o LookupUserProfileResultOutput) Details() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupUserProfileResult) interface{} { return v.Details }).(pulumi.AnyOutput)
}

// The identifier of the Amazon DataZone domain in which the user profile is created.
func (o LookupUserProfileResultOutput) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserProfileResult) *string { return v.DomainId }).(pulumi.StringPtrOutput)
}

// The ID of the Amazon DataZone user profile.
func (o LookupUserProfileResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserProfileResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The status of the user profile.
func (o LookupUserProfileResultOutput) Status() UserProfileStatusPtrOutput {
	return o.ApplyT(func(v LookupUserProfileResult) *UserProfileStatus { return v.Status }).(UserProfileStatusPtrOutput)
}

// The type of the user profile.
func (o LookupUserProfileResultOutput) Type() UserProfileTypePtrOutput {
	return o.ApplyT(func(v LookupUserProfileResult) *UserProfileType { return v.Type }).(UserProfileTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserProfileResultOutput{})
}
