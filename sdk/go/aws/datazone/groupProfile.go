// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Group profiles represent groups of Amazon DataZone users. Groups can be manually created, or mapped to Active Directory groups of enterprise customers. In Amazon DataZone, groups serve two purposes. First, a group can map to a team of users in the organizational chart, and thus reduce the administrative work of a Amazon DataZone project owner when there are new employees joining or leaving a team. Second, corporate administrators use Active Directory groups to manage and update user statuses and so Amazon DataZone domain administrators can use these group memberships to implement Amazon DataZone domain policies.
type GroupProfile struct {
	pulumi.CustomResourceState

	// The ID of the Amazon DataZone group profile.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The identifier of the Amazon DataZone domain in which the group profile is created.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The identifier of the Amazon DataZone domain in which the group profile would be created.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// The ID of the group.
	GroupIdentifier pulumi.StringOutput `pulumi:"groupIdentifier"`
	// The group-name of the Group Profile.
	GroupName pulumi.StringOutput         `pulumi:"groupName"`
	Status    GroupProfileStatusPtrOutput `pulumi:"status"`
}

// NewGroupProfile registers a new resource with the given unique name, arguments, and options.
func NewGroupProfile(ctx *pulumi.Context,
	name string, args *GroupProfileArgs, opts ...pulumi.ResourceOption) (*GroupProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.GroupIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'GroupIdentifier'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainIdentifier",
		"groupIdentifier",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupProfile
	err := ctx.RegisterResource("aws-native:datazone:GroupProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupProfile gets an existing GroupProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupProfileState, opts ...pulumi.ResourceOption) (*GroupProfile, error) {
	var resource GroupProfile
	err := ctx.ReadResource("aws-native:datazone:GroupProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupProfile resources.
type groupProfileState struct {
}

type GroupProfileState struct {
}

func (GroupProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupProfileState)(nil)).Elem()
}

type groupProfileArgs struct {
	// The identifier of the Amazon DataZone domain in which the group profile would be created.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// The ID of the group.
	GroupIdentifier string              `pulumi:"groupIdentifier"`
	Status          *GroupProfileStatus `pulumi:"status"`
}

// The set of arguments for constructing a GroupProfile resource.
type GroupProfileArgs struct {
	// The identifier of the Amazon DataZone domain in which the group profile would be created.
	DomainIdentifier pulumi.StringInput
	// The ID of the group.
	GroupIdentifier pulumi.StringInput
	Status          GroupProfileStatusPtrInput
}

func (GroupProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupProfileArgs)(nil)).Elem()
}

type GroupProfileInput interface {
	pulumi.Input

	ToGroupProfileOutput() GroupProfileOutput
	ToGroupProfileOutputWithContext(ctx context.Context) GroupProfileOutput
}

func (*GroupProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupProfile)(nil)).Elem()
}

func (i *GroupProfile) ToGroupProfileOutput() GroupProfileOutput {
	return i.ToGroupProfileOutputWithContext(context.Background())
}

func (i *GroupProfile) ToGroupProfileOutputWithContext(ctx context.Context) GroupProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupProfileOutput)
}

type GroupProfileOutput struct{ *pulumi.OutputState }

func (GroupProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupProfile)(nil)).Elem()
}

func (o GroupProfileOutput) ToGroupProfileOutput() GroupProfileOutput {
	return o
}

func (o GroupProfileOutput) ToGroupProfileOutputWithContext(ctx context.Context) GroupProfileOutput {
	return o
}

// The ID of the Amazon DataZone group profile.
func (o GroupProfileOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupProfile) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The identifier of the Amazon DataZone domain in which the group profile is created.
func (o GroupProfileOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupProfile) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The identifier of the Amazon DataZone domain in which the group profile would be created.
func (o GroupProfileOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupProfile) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// The ID of the group.
func (o GroupProfileOutput) GroupIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupProfile) pulumi.StringOutput { return v.GroupIdentifier }).(pulumi.StringOutput)
}

// The group-name of the Group Profile.
func (o GroupProfileOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupProfile) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

func (o GroupProfileOutput) Status() GroupProfileStatusPtrOutput {
	return o.ApplyT(func(v *GroupProfile) GroupProfileStatusPtrOutput { return v.Status }).(GroupProfileStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupProfileInput)(nil)).Elem(), &GroupProfile{})
	pulumi.RegisterOutputType(GroupProfileOutput{})
}
