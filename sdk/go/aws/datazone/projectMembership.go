// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::DataZone::ProjectMembership Resource Type
type ProjectMembership struct {
	pulumi.CustomResourceState

	Designation       ProjectMembershipUserDesignationOutput `pulumi:"designation"`
	DomainIdentifier  pulumi.StringOutput                    `pulumi:"domainIdentifier"`
	Member            pulumi.AnyOutput                       `pulumi:"member"`
	ProjectIdentifier pulumi.StringOutput                    `pulumi:"projectIdentifier"`
}

// NewProjectMembership registers a new resource with the given unique name, arguments, and options.
func NewProjectMembership(ctx *pulumi.Context,
	name string, args *ProjectMembershipArgs, opts ...pulumi.ResourceOption) (*ProjectMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Designation == nil {
		return nil, errors.New("invalid value for required argument 'Designation'")
	}
	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.ProjectIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ProjectIdentifier'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainIdentifier",
		"member",
		"projectIdentifier",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMembership
	err := ctx.RegisterResource("aws-native:datazone:ProjectMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMembership gets an existing ProjectMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMembershipState, opts ...pulumi.ResourceOption) (*ProjectMembership, error) {
	var resource ProjectMembership
	err := ctx.ReadResource("aws-native:datazone:ProjectMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMembership resources.
type projectMembershipState struct {
}

type ProjectMembershipState struct {
}

func (ProjectMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMembershipState)(nil)).Elem()
}

type projectMembershipArgs struct {
	Designation       ProjectMembershipUserDesignation `pulumi:"designation"`
	DomainIdentifier  string                           `pulumi:"domainIdentifier"`
	Member            interface{}                      `pulumi:"member"`
	ProjectIdentifier string                           `pulumi:"projectIdentifier"`
}

// The set of arguments for constructing a ProjectMembership resource.
type ProjectMembershipArgs struct {
	Designation       ProjectMembershipUserDesignationInput
	DomainIdentifier  pulumi.StringInput
	Member            pulumi.Input
	ProjectIdentifier pulumi.StringInput
}

func (ProjectMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMembershipArgs)(nil)).Elem()
}

type ProjectMembershipInput interface {
	pulumi.Input

	ToProjectMembershipOutput() ProjectMembershipOutput
	ToProjectMembershipOutputWithContext(ctx context.Context) ProjectMembershipOutput
}

func (*ProjectMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMembership)(nil)).Elem()
}

func (i *ProjectMembership) ToProjectMembershipOutput() ProjectMembershipOutput {
	return i.ToProjectMembershipOutputWithContext(context.Background())
}

func (i *ProjectMembership) ToProjectMembershipOutputWithContext(ctx context.Context) ProjectMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMembershipOutput)
}

type ProjectMembershipOutput struct{ *pulumi.OutputState }

func (ProjectMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMembership)(nil)).Elem()
}

func (o ProjectMembershipOutput) ToProjectMembershipOutput() ProjectMembershipOutput {
	return o
}

func (o ProjectMembershipOutput) ToProjectMembershipOutputWithContext(ctx context.Context) ProjectMembershipOutput {
	return o
}

func (o ProjectMembershipOutput) Designation() ProjectMembershipUserDesignationOutput {
	return o.ApplyT(func(v *ProjectMembership) ProjectMembershipUserDesignationOutput { return v.Designation }).(ProjectMembershipUserDesignationOutput)
}

func (o ProjectMembershipOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMembership) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

func (o ProjectMembershipOutput) Member() pulumi.AnyOutput {
	return o.ApplyT(func(v *ProjectMembership) pulumi.AnyOutput { return v.Member }).(pulumi.AnyOutput)
}

func (o ProjectMembershipOutput) ProjectIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMembership) pulumi.StringOutput { return v.ProjectIdentifier }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMembershipInput)(nil)).Elem(), &ProjectMembership{})
	pulumi.RegisterOutputType(ProjectMembershipOutput{})
}
