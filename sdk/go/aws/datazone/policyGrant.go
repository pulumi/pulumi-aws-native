// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy Grant in AWS DataZone is an explicit authorization assignment that allows a specific principal (user, group, or project) to perform particular actions (such as creating glossary terms, managing projects, or accessing resources) on governed resources within a certain scope (like a Domain Unit or Project). Policy Grants are essentially the mechanism by which DataZone enforces fine-grained, role-based access control beyond what is possible through AWS IAM alone.
type PolicyGrant struct {
	pulumi.CustomResourceState

	// Specifies the timestamp at which policy grant member was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the user who created the policy grant member.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The details of the policy grant member.
	Detail pulumi.AnyOutput `pulumi:"detail"`
	// The ID of the domain where you want to add a policy grant.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// The ID of the entity (resource) to which you want to add a policy grant.
	EntityIdentifier pulumi.StringOutput `pulumi:"entityIdentifier"`
	// The type of entity (resource) to which the grant is added.
	EntityType PolicyGrantTargetEntityTypeOutput `pulumi:"entityType"`
	// The unique identifier of the policy grant returned by the AddPolicyGrant API
	GrantId pulumi.StringOutput `pulumi:"grantId"`
	// The type of policy that you want to grant.
	PolicyType PolicyGrantManagedPolicyTypeOutput `pulumi:"policyType"`
	// The principal of the policy grant member.
	Principal pulumi.AnyOutput `pulumi:"principal"`
}

// NewPolicyGrant registers a new resource with the given unique name, arguments, and options.
func NewPolicyGrant(ctx *pulumi.Context,
	name string, args *PolicyGrantArgs, opts ...pulumi.ResourceOption) (*PolicyGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.EntityIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EntityIdentifier'")
	}
	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"detail",
		"domainIdentifier",
		"entityIdentifier",
		"entityType",
		"policyType",
		"principal",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyGrant
	err := ctx.RegisterResource("aws-native:datazone:PolicyGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyGrant gets an existing PolicyGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyGrantState, opts ...pulumi.ResourceOption) (*PolicyGrant, error) {
	var resource PolicyGrant
	err := ctx.ReadResource("aws-native:datazone:PolicyGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyGrant resources.
type policyGrantState struct {
}

type PolicyGrantState struct {
}

func (PolicyGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGrantState)(nil)).Elem()
}

type policyGrantArgs struct {
	// The details of the policy grant member.
	Detail interface{} `pulumi:"detail"`
	// The ID of the domain where you want to add a policy grant.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// The ID of the entity (resource) to which you want to add a policy grant.
	EntityIdentifier string `pulumi:"entityIdentifier"`
	// The type of entity (resource) to which the grant is added.
	EntityType PolicyGrantTargetEntityType `pulumi:"entityType"`
	// The type of policy that you want to grant.
	PolicyType PolicyGrantManagedPolicyType `pulumi:"policyType"`
	// The principal of the policy grant member.
	Principal interface{} `pulumi:"principal"`
}

// The set of arguments for constructing a PolicyGrant resource.
type PolicyGrantArgs struct {
	// The details of the policy grant member.
	Detail pulumi.Input
	// The ID of the domain where you want to add a policy grant.
	DomainIdentifier pulumi.StringInput
	// The ID of the entity (resource) to which you want to add a policy grant.
	EntityIdentifier pulumi.StringInput
	// The type of entity (resource) to which the grant is added.
	EntityType PolicyGrantTargetEntityTypeInput
	// The type of policy that you want to grant.
	PolicyType PolicyGrantManagedPolicyTypeInput
	// The principal of the policy grant member.
	Principal pulumi.Input
}

func (PolicyGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGrantArgs)(nil)).Elem()
}

type PolicyGrantInput interface {
	pulumi.Input

	ToPolicyGrantOutput() PolicyGrantOutput
	ToPolicyGrantOutputWithContext(ctx context.Context) PolicyGrantOutput
}

func (*PolicyGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyGrant)(nil)).Elem()
}

func (i *PolicyGrant) ToPolicyGrantOutput() PolicyGrantOutput {
	return i.ToPolicyGrantOutputWithContext(context.Background())
}

func (i *PolicyGrant) ToPolicyGrantOutputWithContext(ctx context.Context) PolicyGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyGrantOutput)
}

type PolicyGrantOutput struct{ *pulumi.OutputState }

func (PolicyGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyGrant)(nil)).Elem()
}

func (o PolicyGrantOutput) ToPolicyGrantOutput() PolicyGrantOutput {
	return o
}

func (o PolicyGrantOutput) ToPolicyGrantOutputWithContext(ctx context.Context) PolicyGrantOutput {
	return o
}

// Specifies the timestamp at which policy grant member was created.
func (o PolicyGrantOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGrant) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the user who created the policy grant member.
func (o PolicyGrantOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGrant) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The details of the policy grant member.
func (o PolicyGrantOutput) Detail() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolicyGrant) pulumi.AnyOutput { return v.Detail }).(pulumi.AnyOutput)
}

// The ID of the domain where you want to add a policy grant.
func (o PolicyGrantOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGrant) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// The ID of the entity (resource) to which you want to add a policy grant.
func (o PolicyGrantOutput) EntityIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGrant) pulumi.StringOutput { return v.EntityIdentifier }).(pulumi.StringOutput)
}

// The type of entity (resource) to which the grant is added.
func (o PolicyGrantOutput) EntityType() PolicyGrantTargetEntityTypeOutput {
	return o.ApplyT(func(v *PolicyGrant) PolicyGrantTargetEntityTypeOutput { return v.EntityType }).(PolicyGrantTargetEntityTypeOutput)
}

// The unique identifier of the policy grant returned by the AddPolicyGrant API
func (o PolicyGrantOutput) GrantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGrant) pulumi.StringOutput { return v.GrantId }).(pulumi.StringOutput)
}

// The type of policy that you want to grant.
func (o PolicyGrantOutput) PolicyType() PolicyGrantManagedPolicyTypeOutput {
	return o.ApplyT(func(v *PolicyGrant) PolicyGrantManagedPolicyTypeOutput { return v.PolicyType }).(PolicyGrantManagedPolicyTypeOutput)
}

// The principal of the policy grant member.
func (o PolicyGrantOutput) Principal() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolicyGrant) pulumi.AnyOutput { return v.Principal }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyGrantInput)(nil)).Elem(), &PolicyGrant{})
	pulumi.RegisterOutputType(PolicyGrantOutput{})
}
