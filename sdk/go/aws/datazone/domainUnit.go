// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A domain unit enables you to easily organize your assets and other domain entities under specific business units and teams.
type DomainUnit struct {
	pulumi.CustomResourceState

	// The ID of the domain unit.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The timestamp at which the domain unit was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the domain unit.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the domain where the domain unit was created.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The ID of the domain where you want to create a domain unit.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// The identifier of the domain unit that you want to get.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The timestamp at which the domain unit was last updated.
	LastUpdatedAt pulumi.StringOutput `pulumi:"lastUpdatedAt"`
	// The name of the domain unit.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the parent domain unit.
	ParentDomainUnitId pulumi.StringOutput `pulumi:"parentDomainUnitId"`
	// The ID of the parent domain unit.
	ParentDomainUnitIdentifier pulumi.StringOutput `pulumi:"parentDomainUnitIdentifier"`
}

// NewDomainUnit registers a new resource with the given unique name, arguments, and options.
func NewDomainUnit(ctx *pulumi.Context,
	name string, args *DomainUnitArgs, opts ...pulumi.ResourceOption) (*DomainUnit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.ParentDomainUnitIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ParentDomainUnitIdentifier'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainIdentifier",
		"parentDomainUnitIdentifier",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainUnit
	err := ctx.RegisterResource("aws-native:datazone:DomainUnit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainUnit gets an existing DomainUnit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainUnit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainUnitState, opts ...pulumi.ResourceOption) (*DomainUnit, error) {
	var resource DomainUnit
	err := ctx.ReadResource("aws-native:datazone:DomainUnit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainUnit resources.
type domainUnitState struct {
}

type DomainUnitState struct {
}

func (DomainUnitState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainUnitState)(nil)).Elem()
}

type domainUnitArgs struct {
	// The description of the domain unit.
	Description *string `pulumi:"description"`
	// The ID of the domain where you want to create a domain unit.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// The name of the domain unit.
	Name *string `pulumi:"name"`
	// The ID of the parent domain unit.
	ParentDomainUnitIdentifier string `pulumi:"parentDomainUnitIdentifier"`
}

// The set of arguments for constructing a DomainUnit resource.
type DomainUnitArgs struct {
	// The description of the domain unit.
	Description pulumi.StringPtrInput
	// The ID of the domain where you want to create a domain unit.
	DomainIdentifier pulumi.StringInput
	// The name of the domain unit.
	Name pulumi.StringPtrInput
	// The ID of the parent domain unit.
	ParentDomainUnitIdentifier pulumi.StringInput
}

func (DomainUnitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainUnitArgs)(nil)).Elem()
}

type DomainUnitInput interface {
	pulumi.Input

	ToDomainUnitOutput() DomainUnitOutput
	ToDomainUnitOutputWithContext(ctx context.Context) DomainUnitOutput
}

func (*DomainUnit) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainUnit)(nil)).Elem()
}

func (i *DomainUnit) ToDomainUnitOutput() DomainUnitOutput {
	return i.ToDomainUnitOutputWithContext(context.Background())
}

func (i *DomainUnit) ToDomainUnitOutputWithContext(ctx context.Context) DomainUnitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainUnitOutput)
}

type DomainUnitOutput struct{ *pulumi.OutputState }

func (DomainUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainUnit)(nil)).Elem()
}

func (o DomainUnitOutput) ToDomainUnitOutput() DomainUnitOutput {
	return o
}

func (o DomainUnitOutput) ToDomainUnitOutputWithContext(ctx context.Context) DomainUnitOutput {
	return o
}

// The ID of the domain unit.
func (o DomainUnitOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The timestamp at which the domain unit was created.
func (o DomainUnitOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the domain unit.
func (o DomainUnitOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the domain where the domain unit was created.
func (o DomainUnitOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The ID of the domain where you want to create a domain unit.
func (o DomainUnitOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// The identifier of the domain unit that you want to get.
func (o DomainUnitOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The timestamp at which the domain unit was last updated.
func (o DomainUnitOutput) LastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.LastUpdatedAt }).(pulumi.StringOutput)
}

// The name of the domain unit.
func (o DomainUnitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the parent domain unit.
func (o DomainUnitOutput) ParentDomainUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.ParentDomainUnitId }).(pulumi.StringOutput)
}

// The ID of the parent domain unit.
func (o DomainUnitOutput) ParentDomainUnitIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainUnit) pulumi.StringOutput { return v.ParentDomainUnitIdentifier }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainUnitInput)(nil)).Elem(), &DomainUnit{})
	pulumi.RegisterOutputType(DomainUnitOutput{})
}
