// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A user profile represents Amazon DataZone users. Amazon DataZone supports both IAM roles and SSO identities to interact with the Amazon DataZone Management Console and the data portal for different purposes. Domain administrators use IAM roles to perform the initial administrative domain-related work in the Amazon DataZone Management Console, including creating new Amazon DataZone domains, configuring metadata form types, and implementing policies. Data workers use their SSO corporate identities via Identity Center to log into the Amazon DataZone Data Portal and access projects where they have memberships.
type UserProfile struct {
	pulumi.CustomResourceState

	// The ID of the Amazon DataZone user profile.
	AwsId   pulumi.StringOutput `pulumi:"awsId"`
	Details pulumi.AnyOutput    `pulumi:"details"`
	// The identifier of the Amazon DataZone domain in which the user profile is created.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The identifier of the Amazon DataZone domain in which the user profile would be created.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// The status of the user profile.
	Status UserProfileStatusPtrOutput `pulumi:"status"`
	// The type of the user profile.
	Type UserProfileTypeOutput `pulumi:"type"`
	// The ID of the user.
	UserIdentifier pulumi.StringOutput `pulumi:"userIdentifier"`
	// The user type of the user for which the user profile is created.
	UserType UserProfileUserTypePtrOutput `pulumi:"userType"`
}

// NewUserProfile registers a new resource with the given unique name, arguments, and options.
func NewUserProfile(ctx *pulumi.Context,
	name string, args *UserProfileArgs, opts ...pulumi.ResourceOption) (*UserProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.UserIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'UserIdentifier'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainIdentifier",
		"userIdentifier",
		"userType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserProfile
	err := ctx.RegisterResource("aws-native:datazone:UserProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserProfile gets an existing UserProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserProfileState, opts ...pulumi.ResourceOption) (*UserProfile, error) {
	var resource UserProfile
	err := ctx.ReadResource("aws-native:datazone:UserProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserProfile resources.
type userProfileState struct {
}

type UserProfileState struct {
}

func (UserProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*userProfileState)(nil)).Elem()
}

type userProfileArgs struct {
	// The identifier of the Amazon DataZone domain in which the user profile would be created.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// The status of the user profile.
	Status *UserProfileStatus `pulumi:"status"`
	// The ID of the user.
	UserIdentifier string `pulumi:"userIdentifier"`
	// The user type of the user for which the user profile is created.
	UserType *UserProfileUserType `pulumi:"userType"`
}

// The set of arguments for constructing a UserProfile resource.
type UserProfileArgs struct {
	// The identifier of the Amazon DataZone domain in which the user profile would be created.
	DomainIdentifier pulumi.StringInput
	// The status of the user profile.
	Status UserProfileStatusPtrInput
	// The ID of the user.
	UserIdentifier pulumi.StringInput
	// The user type of the user for which the user profile is created.
	UserType UserProfileUserTypePtrInput
}

func (UserProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userProfileArgs)(nil)).Elem()
}

type UserProfileInput interface {
	pulumi.Input

	ToUserProfileOutput() UserProfileOutput
	ToUserProfileOutputWithContext(ctx context.Context) UserProfileOutput
}

func (*UserProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**UserProfile)(nil)).Elem()
}

func (i *UserProfile) ToUserProfileOutput() UserProfileOutput {
	return i.ToUserProfileOutputWithContext(context.Background())
}

func (i *UserProfile) ToUserProfileOutputWithContext(ctx context.Context) UserProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProfileOutput)
}

type UserProfileOutput struct{ *pulumi.OutputState }

func (UserProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserProfile)(nil)).Elem()
}

func (o UserProfileOutput) ToUserProfileOutput() UserProfileOutput {
	return o
}

func (o UserProfileOutput) ToUserProfileOutputWithContext(ctx context.Context) UserProfileOutput {
	return o
}

// The ID of the Amazon DataZone user profile.
func (o UserProfileOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProfile) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

func (o UserProfileOutput) Details() pulumi.AnyOutput {
	return o.ApplyT(func(v *UserProfile) pulumi.AnyOutput { return v.Details }).(pulumi.AnyOutput)
}

// The identifier of the Amazon DataZone domain in which the user profile is created.
func (o UserProfileOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProfile) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The identifier of the Amazon DataZone domain in which the user profile would be created.
func (o UserProfileOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProfile) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// The status of the user profile.
func (o UserProfileOutput) Status() UserProfileStatusPtrOutput {
	return o.ApplyT(func(v *UserProfile) UserProfileStatusPtrOutput { return v.Status }).(UserProfileStatusPtrOutput)
}

// The type of the user profile.
func (o UserProfileOutput) Type() UserProfileTypeOutput {
	return o.ApplyT(func(v *UserProfile) UserProfileTypeOutput { return v.Type }).(UserProfileTypeOutput)
}

// The ID of the user.
func (o UserProfileOutput) UserIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProfile) pulumi.StringOutput { return v.UserIdentifier }).(pulumi.StringOutput)
}

// The user type of the user for which the user profile is created.
func (o UserProfileOutput) UserType() UserProfileUserTypePtrOutput {
	return o.ApplyT(func(v *UserProfile) UserProfileUserTypePtrOutput { return v.UserType }).(UserProfileUserTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserProfileInput)(nil)).Elem(), &UserProfile{})
	pulumi.RegisterOutputType(UserProfileOutput{})
}
