// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::DataZone::DataSource Resource Type
type DataSource struct {
	pulumi.CustomResourceState

	// The metadata forms that are to be attached to the assets that this data source works with.
	AssetFormsInput DataSourceFormInputArrayOutput `pulumi:"assetFormsInput"`
	// Configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
	Configuration pulumi.AnyOutput `pulumi:"configuration"`
	// The timestamp of when the data source was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the data source.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the Amazon DataZone domain where the data source is created.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The ID of the Amazon DataZone domain where the data source is created.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// Specifies whether the data source is enabled.
	EnableSetting DataSourceEnableSettingPtrOutput `pulumi:"enableSetting"`
	// The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
	EnvironmentIdentifier pulumi.StringOutput `pulumi:"environmentIdentifier"`
	// The number of assets created by the data source during its last run.
	LastRunAssetCount pulumi.Float64Output `pulumi:"lastRunAssetCount"`
	// The timestamp that specifies when the data source was last run.
	LastRunAt pulumi.StringOutput `pulumi:"lastRunAt"`
	// The status of the last run of this data source.
	LastRunStatus pulumi.StringOutput `pulumi:"lastRunStatus"`
	// The name of the data source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Amazon DataZone project to which the data source is added.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The identifier of the Amazon DataZone project in which you want to add the data source.
	ProjectIdentifier pulumi.StringOutput `pulumi:"projectIdentifier"`
	// Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.
	PublishOnImport pulumi.BoolPtrOutput `pulumi:"publishOnImport"`
	// Specifies whether the business name generation is to be enabled for this data source.
	Recommendation DataSourceRecommendationConfigurationPtrOutput `pulumi:"recommendation"`
	// The schedule of the data source runs.
	Schedule DataSourceScheduleConfigurationPtrOutput `pulumi:"schedule"`
	// The status of the data source.
	Status DataSourceStatusOutput `pulumi:"status"`
	// The type of the data source.
	Type pulumi.StringOutput `pulumi:"type"`
	// The timestamp of when this data source was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	if args.ProjectIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ProjectIdentifier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainIdentifier",
		"environmentIdentifier",
		"projectIdentifier",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws-native:datazone:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws-native:datazone:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
}

type DataSourceState struct {
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// The metadata forms that are to be attached to the assets that this data source works with.
	AssetFormsInput []DataSourceFormInput `pulumi:"assetFormsInput"`
	// Configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
	Configuration interface{} `pulumi:"configuration"`
	// The description of the data source.
	Description *string `pulumi:"description"`
	// The ID of the Amazon DataZone domain where the data source is created.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// Specifies whether the data source is enabled.
	EnableSetting *DataSourceEnableSetting `pulumi:"enableSetting"`
	// The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
	EnvironmentIdentifier string `pulumi:"environmentIdentifier"`
	// The name of the data source.
	Name *string `pulumi:"name"`
	// The identifier of the Amazon DataZone project in which you want to add the data source.
	ProjectIdentifier string `pulumi:"projectIdentifier"`
	// Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.
	PublishOnImport *bool `pulumi:"publishOnImport"`
	// Specifies whether the business name generation is to be enabled for this data source.
	Recommendation *DataSourceRecommendationConfiguration `pulumi:"recommendation"`
	// The schedule of the data source runs.
	Schedule *DataSourceScheduleConfiguration `pulumi:"schedule"`
	// The type of the data source.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// The metadata forms that are to be attached to the assets that this data source works with.
	AssetFormsInput DataSourceFormInputArrayInput
	// Configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
	Configuration pulumi.Input
	// The description of the data source.
	Description pulumi.StringPtrInput
	// The ID of the Amazon DataZone domain where the data source is created.
	DomainIdentifier pulumi.StringInput
	// Specifies whether the data source is enabled.
	EnableSetting DataSourceEnableSettingPtrInput
	// The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
	EnvironmentIdentifier pulumi.StringInput
	// The name of the data source.
	Name pulumi.StringPtrInput
	// The identifier of the Amazon DataZone project in which you want to add the data source.
	ProjectIdentifier pulumi.StringInput
	// Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.
	PublishOnImport pulumi.BoolPtrInput
	// Specifies whether the business name generation is to be enabled for this data source.
	Recommendation DataSourceRecommendationConfigurationPtrInput
	// The schedule of the data source runs.
	Schedule DataSourceScheduleConfigurationPtrInput
	// The type of the data source.
	Type pulumi.StringInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

func (i *DataSource) ToOutput(ctx context.Context) pulumix.Output[*DataSource] {
	return pulumix.Output[*DataSource]{
		OutputState: i.ToDataSourceOutputWithContext(ctx).OutputState,
	}
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[*DataSource] {
	return pulumix.Output[*DataSource]{
		OutputState: o.OutputState,
	}
}

// The metadata forms that are to be attached to the assets that this data source works with.
func (o DataSourceOutput) AssetFormsInput() DataSourceFormInputArrayOutput {
	return o.ApplyT(func(v *DataSource) DataSourceFormInputArrayOutput { return v.AssetFormsInput }).(DataSourceFormInputArrayOutput)
}

// Configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
func (o DataSourceOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataSource) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

// The timestamp of when the data source was created.
func (o DataSourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the data source.
func (o DataSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the Amazon DataZone domain where the data source is created.
func (o DataSourceOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The ID of the Amazon DataZone domain where the data source is created.
func (o DataSourceOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// Specifies whether the data source is enabled.
func (o DataSourceOutput) EnableSetting() DataSourceEnableSettingPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceEnableSettingPtrOutput { return v.EnableSetting }).(DataSourceEnableSettingPtrOutput)
}

// The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
func (o DataSourceOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
func (o DataSourceOutput) EnvironmentIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.EnvironmentIdentifier }).(pulumi.StringOutput)
}

// The number of assets created by the data source during its last run.
func (o DataSourceOutput) LastRunAssetCount() pulumi.Float64Output {
	return o.ApplyT(func(v *DataSource) pulumi.Float64Output { return v.LastRunAssetCount }).(pulumi.Float64Output)
}

// The timestamp that specifies when the data source was last run.
func (o DataSourceOutput) LastRunAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.LastRunAt }).(pulumi.StringOutput)
}

// The status of the last run of this data source.
func (o DataSourceOutput) LastRunStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.LastRunStatus }).(pulumi.StringOutput)
}

// The name of the data source.
func (o DataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Amazon DataZone project to which the data source is added.
func (o DataSourceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The identifier of the Amazon DataZone project in which you want to add the data source.
func (o DataSourceOutput) ProjectIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ProjectIdentifier }).(pulumi.StringOutput)
}

// Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.
func (o DataSourceOutput) PublishOnImport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.BoolPtrOutput { return v.PublishOnImport }).(pulumi.BoolPtrOutput)
}

// Specifies whether the business name generation is to be enabled for this data source.
func (o DataSourceOutput) Recommendation() DataSourceRecommendationConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceRecommendationConfigurationPtrOutput { return v.Recommendation }).(DataSourceRecommendationConfigurationPtrOutput)
}

// The schedule of the data source runs.
func (o DataSourceOutput) Schedule() DataSourceScheduleConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceScheduleConfigurationPtrOutput { return v.Schedule }).(DataSourceScheduleConfigurationPtrOutput)
}

// The status of the data source.
func (o DataSourceOutput) Status() DataSourceStatusOutput {
	return o.ApplyT(func(v *DataSource) DataSourceStatusOutput { return v.Status }).(DataSourceStatusOutput)
}

// The type of the data source.
func (o DataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The timestamp of when this data source was updated.
func (o DataSourceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceInput)(nil)).Elem(), &DataSource{})
	pulumi.RegisterOutputType(DataSourceOutput{})
}
