// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datazone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Subscription targets enables one to access the data to which you have subscribed in your projects.
type SubscriptionTarget struct {
	pulumi.CustomResourceState

	// The asset types that can be included in the subscription target.
	ApplicableAssetTypes pulumi.StringArrayOutput `pulumi:"applicableAssetTypes"`
	// The authorized principals of the subscription target.
	AuthorizedPrincipals pulumi.StringArrayOutput `pulumi:"authorizedPrincipals"`
	// The timestamp of when the subscription target was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The Amazon DataZone user who created the subscription target.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The ID of the Amazon DataZone domain in which subscription target is created.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The ID of the Amazon DataZone domain in which subscription target would be created.
	DomainIdentifier pulumi.StringOutput `pulumi:"domainIdentifier"`
	// The ID of the environment in which subscription target is created.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The ID of the environment in which subscription target would be created.
	EnvironmentIdentifier pulumi.StringOutput `pulumi:"environmentIdentifier"`
	// The manage access role that is used to create the subscription target.
	ManageAccessRole pulumi.StringOutput `pulumi:"manageAccessRole"`
	// The name of the subscription target.
	Name pulumi.StringOutput `pulumi:"name"`
	// The identifier of the project specified in the subscription target.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The provider of the subscription target.
	Provider pulumi.StringPtrOutput `pulumi:"provider"`
	// The configuration of the subscription target.
	SubscriptionTargetConfig SubscriptionTargetFormArrayOutput `pulumi:"subscriptionTargetConfig"`
	// The type of the subscription target.
	Type pulumi.StringOutput `pulumi:"type"`
	// The timestamp of when the subscription target was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The Amazon DataZone user who updated the subscription target.
	UpdatedBy pulumi.StringOutput `pulumi:"updatedBy"`
}

// NewSubscriptionTarget registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionTarget(ctx *pulumi.Context,
	name string, args *SubscriptionTargetArgs, opts ...pulumi.ResourceOption) (*SubscriptionTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicableAssetTypes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicableAssetTypes'")
	}
	if args.AuthorizedPrincipals == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizedPrincipals'")
	}
	if args.DomainIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DomainIdentifier'")
	}
	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	if args.ManageAccessRole == nil {
		return nil, errors.New("invalid value for required argument 'ManageAccessRole'")
	}
	if args.SubscriptionTargetConfig == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionTargetConfig'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainIdentifier",
		"environmentIdentifier",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriptionTarget
	err := ctx.RegisterResource("aws-native:datazone:SubscriptionTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionTarget gets an existing SubscriptionTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionTargetState, opts ...pulumi.ResourceOption) (*SubscriptionTarget, error) {
	var resource SubscriptionTarget
	err := ctx.ReadResource("aws-native:datazone:SubscriptionTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionTarget resources.
type subscriptionTargetState struct {
}

type SubscriptionTargetState struct {
}

func (SubscriptionTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionTargetState)(nil)).Elem()
}

type subscriptionTargetArgs struct {
	// The asset types that can be included in the subscription target.
	ApplicableAssetTypes []string `pulumi:"applicableAssetTypes"`
	// The authorized principals of the subscription target.
	AuthorizedPrincipals []string `pulumi:"authorizedPrincipals"`
	// The ID of the Amazon DataZone domain in which subscription target would be created.
	DomainIdentifier string `pulumi:"domainIdentifier"`
	// The ID of the environment in which subscription target would be created.
	EnvironmentIdentifier string `pulumi:"environmentIdentifier"`
	// The manage access role that is used to create the subscription target.
	ManageAccessRole string `pulumi:"manageAccessRole"`
	// The name of the subscription target.
	Name *string `pulumi:"name"`
	// The provider of the subscription target.
	Provider *string `pulumi:"provider"`
	// The configuration of the subscription target.
	SubscriptionTargetConfig []SubscriptionTargetForm `pulumi:"subscriptionTargetConfig"`
	// The type of the subscription target.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SubscriptionTarget resource.
type SubscriptionTargetArgs struct {
	// The asset types that can be included in the subscription target.
	ApplicableAssetTypes pulumi.StringArrayInput
	// The authorized principals of the subscription target.
	AuthorizedPrincipals pulumi.StringArrayInput
	// The ID of the Amazon DataZone domain in which subscription target would be created.
	DomainIdentifier pulumi.StringInput
	// The ID of the environment in which subscription target would be created.
	EnvironmentIdentifier pulumi.StringInput
	// The manage access role that is used to create the subscription target.
	ManageAccessRole pulumi.StringInput
	// The name of the subscription target.
	Name pulumi.StringPtrInput
	// The provider of the subscription target.
	Provider pulumi.StringPtrInput
	// The configuration of the subscription target.
	SubscriptionTargetConfig SubscriptionTargetFormArrayInput
	// The type of the subscription target.
	Type pulumi.StringInput
}

func (SubscriptionTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionTargetArgs)(nil)).Elem()
}

type SubscriptionTargetInput interface {
	pulumi.Input

	ToSubscriptionTargetOutput() SubscriptionTargetOutput
	ToSubscriptionTargetOutputWithContext(ctx context.Context) SubscriptionTargetOutput
}

func (*SubscriptionTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionTarget)(nil)).Elem()
}

func (i *SubscriptionTarget) ToSubscriptionTargetOutput() SubscriptionTargetOutput {
	return i.ToSubscriptionTargetOutputWithContext(context.Background())
}

func (i *SubscriptionTarget) ToSubscriptionTargetOutputWithContext(ctx context.Context) SubscriptionTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionTargetOutput)
}

func (i *SubscriptionTarget) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionTarget] {
	return pulumix.Output[*SubscriptionTarget]{
		OutputState: i.ToSubscriptionTargetOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionTargetOutput struct{ *pulumi.OutputState }

func (SubscriptionTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionTarget)(nil)).Elem()
}

func (o SubscriptionTargetOutput) ToSubscriptionTargetOutput() SubscriptionTargetOutput {
	return o
}

func (o SubscriptionTargetOutput) ToSubscriptionTargetOutputWithContext(ctx context.Context) SubscriptionTargetOutput {
	return o
}

func (o SubscriptionTargetOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionTarget] {
	return pulumix.Output[*SubscriptionTarget]{
		OutputState: o.OutputState,
	}
}

// The asset types that can be included in the subscription target.
func (o SubscriptionTargetOutput) ApplicableAssetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringArrayOutput { return v.ApplicableAssetTypes }).(pulumi.StringArrayOutput)
}

// The authorized principals of the subscription target.
func (o SubscriptionTargetOutput) AuthorizedPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringArrayOutput { return v.AuthorizedPrincipals }).(pulumi.StringArrayOutput)
}

// The timestamp of when the subscription target was created.
func (o SubscriptionTargetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The Amazon DataZone user who created the subscription target.
func (o SubscriptionTargetOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The ID of the Amazon DataZone domain in which subscription target is created.
func (o SubscriptionTargetOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The ID of the Amazon DataZone domain in which subscription target would be created.
func (o SubscriptionTargetOutput) DomainIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.DomainIdentifier }).(pulumi.StringOutput)
}

// The ID of the environment in which subscription target is created.
func (o SubscriptionTargetOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The ID of the environment in which subscription target would be created.
func (o SubscriptionTargetOutput) EnvironmentIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.EnvironmentIdentifier }).(pulumi.StringOutput)
}

// The manage access role that is used to create the subscription target.
func (o SubscriptionTargetOutput) ManageAccessRole() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.ManageAccessRole }).(pulumi.StringOutput)
}

// The name of the subscription target.
func (o SubscriptionTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The identifier of the project specified in the subscription target.
func (o SubscriptionTargetOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The provider of the subscription target.
func (o SubscriptionTargetOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringPtrOutput { return v.Provider }).(pulumi.StringPtrOutput)
}

// The configuration of the subscription target.
func (o SubscriptionTargetOutput) SubscriptionTargetConfig() SubscriptionTargetFormArrayOutput {
	return o.ApplyT(func(v *SubscriptionTarget) SubscriptionTargetFormArrayOutput { return v.SubscriptionTargetConfig }).(SubscriptionTargetFormArrayOutput)
}

// The type of the subscription target.
func (o SubscriptionTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The timestamp of when the subscription target was updated.
func (o SubscriptionTargetOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The Amazon DataZone user who updated the subscription target.
func (o SubscriptionTargetOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionTarget) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionTargetInput)(nil)).Elem(), &SubscriptionTarget{})
	pulumi.RegisterOutputType(SubscriptionTargetOutput{})
}
