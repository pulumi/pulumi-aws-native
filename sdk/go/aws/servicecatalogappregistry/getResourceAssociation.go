// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalogappregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema for AWS::ServiceCatalogAppRegistry::ResourceAssociation
func LookupResourceAssociation(ctx *pulumi.Context, args *LookupResourceAssociationArgs, opts ...pulumi.InvokeOption) (*LookupResourceAssociationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourceAssociationResult
	err := ctx.Invoke("aws-native:servicecatalogappregistry:getResourceAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupResourceAssociationArgs struct {
	// The Amazon resource name (ARN) that specifies the application.
	ApplicationArn string `pulumi:"applicationArn"`
	// The Amazon resource name (ARN) that specifies the resource.
	ResourceArn string `pulumi:"resourceArn"`
	// The type of the CFN Resource for now it's enum CFN_STACK.
	ResourceType ResourceAssociationResourceType `pulumi:"resourceType"`
}

type LookupResourceAssociationResult struct {
	// The Amazon resource name (ARN) that specifies the application.
	ApplicationArn *string `pulumi:"applicationArn"`
	// The Amazon resource name (ARN) that specifies the resource.
	ResourceArn *string `pulumi:"resourceArn"`
}

func LookupResourceAssociationOutput(ctx *pulumi.Context, args LookupResourceAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupResourceAssociationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupResourceAssociationResultOutput, error) {
			args := v.(LookupResourceAssociationArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupResourceAssociationResult
			secret, err := ctx.InvokePackageRaw("aws-native:servicecatalogappregistry:getResourceAssociation", args, &rv, "", opts...)
			if err != nil {
				return LookupResourceAssociationResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupResourceAssociationResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupResourceAssociationResultOutput), nil
			}
			return output, nil
		}).(LookupResourceAssociationResultOutput)
}

type LookupResourceAssociationOutputArgs struct {
	// The Amazon resource name (ARN) that specifies the application.
	ApplicationArn pulumi.StringInput `pulumi:"applicationArn"`
	// The Amazon resource name (ARN) that specifies the resource.
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	// The type of the CFN Resource for now it's enum CFN_STACK.
	ResourceType ResourceAssociationResourceTypeInput `pulumi:"resourceType"`
}

func (LookupResourceAssociationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceAssociationArgs)(nil)).Elem()
}

type LookupResourceAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupResourceAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourceAssociationResult)(nil)).Elem()
}

func (o LookupResourceAssociationResultOutput) ToLookupResourceAssociationResultOutput() LookupResourceAssociationResultOutput {
	return o
}

func (o LookupResourceAssociationResultOutput) ToLookupResourceAssociationResultOutputWithContext(ctx context.Context) LookupResourceAssociationResultOutput {
	return o
}

// The Amazon resource name (ARN) that specifies the application.
func (o LookupResourceAssociationResultOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceAssociationResult) *string { return v.ApplicationArn }).(pulumi.StringPtrOutput)
}

// The Amazon resource name (ARN) that specifies the resource.
func (o LookupResourceAssociationResultOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResourceAssociationResult) *string { return v.ResourceArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResourceAssociationResultOutput{})
}
