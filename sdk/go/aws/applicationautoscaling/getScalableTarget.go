// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package applicationautoscaling

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApplicationAutoScaling::ScalableTarget
func LookupScalableTarget(ctx *pulumi.Context, args *LookupScalableTargetArgs, opts ...pulumi.InvokeOption) (*LookupScalableTargetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScalableTargetResult
	err := ctx.Invoke("aws-native:applicationautoscaling:getScalableTarget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScalableTargetArgs struct {
	// The identifier of the resource associated with the scalable target
	ResourceId string `pulumi:"resourceId"`
	// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property
	ScalableDimension string `pulumi:"scalableDimension"`
	// The namespace of the AWS service that provides the resource, or a custom-resource
	ServiceNamespace string `pulumi:"serviceNamespace"`
}

type LookupScalableTargetResult struct {
	// This value can be returned by using the Ref function. Ref returns the Cloudformation generated ID of the resource in format - ResourceId|ScalableDimension|ServiceNamespace
	Id *string `pulumi:"id"`
	// The maximum value that you plan to scale in to. When a scaling policy is in effect, Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to changing demand
	MaxCapacity *int `pulumi:"maxCapacity"`
	// The minimum value that you plan to scale in to. When a scaling policy is in effect, Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to changing demand
	MinCapacity *int `pulumi:"minCapacity"`
	// The scheduled actions for the scalable target. Duplicates aren't allowed.
	ScheduledActions []ScalableTargetScheduledAction `pulumi:"scheduledActions"`
	// An embedded object that contains attributes and attribute values that are used to suspend and resume automatic scaling. Setting the value of an attribute to true suspends the specified scaling activities. Setting it to false (default) resumes the specified scaling activities.
	SuspendedState *ScalableTargetSuspendedState `pulumi:"suspendedState"`
}

func LookupScalableTargetOutput(ctx *pulumi.Context, args LookupScalableTargetOutputArgs, opts ...pulumi.InvokeOption) LookupScalableTargetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScalableTargetResult, error) {
			args := v.(LookupScalableTargetArgs)
			r, err := LookupScalableTarget(ctx, &args, opts...)
			var s LookupScalableTargetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScalableTargetResultOutput)
}

type LookupScalableTargetOutputArgs struct {
	// The identifier of the resource associated with the scalable target
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property
	ScalableDimension pulumi.StringInput `pulumi:"scalableDimension"`
	// The namespace of the AWS service that provides the resource, or a custom-resource
	ServiceNamespace pulumi.StringInput `pulumi:"serviceNamespace"`
}

func (LookupScalableTargetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScalableTargetArgs)(nil)).Elem()
}

type LookupScalableTargetResultOutput struct{ *pulumi.OutputState }

func (LookupScalableTargetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScalableTargetResult)(nil)).Elem()
}

func (o LookupScalableTargetResultOutput) ToLookupScalableTargetResultOutput() LookupScalableTargetResultOutput {
	return o
}

func (o LookupScalableTargetResultOutput) ToLookupScalableTargetResultOutputWithContext(ctx context.Context) LookupScalableTargetResultOutput {
	return o
}

// This value can be returned by using the Ref function. Ref returns the Cloudformation generated ID of the resource in format - ResourceId|ScalableDimension|ServiceNamespace
func (o LookupScalableTargetResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalableTargetResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The maximum value that you plan to scale in to. When a scaling policy is in effect, Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to changing demand
func (o LookupScalableTargetResultOutput) MaxCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalableTargetResult) *int { return v.MaxCapacity }).(pulumi.IntPtrOutput)
}

// The minimum value that you plan to scale in to. When a scaling policy is in effect, Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to changing demand
func (o LookupScalableTargetResultOutput) MinCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalableTargetResult) *int { return v.MinCapacity }).(pulumi.IntPtrOutput)
}

// The scheduled actions for the scalable target. Duplicates aren't allowed.
func (o LookupScalableTargetResultOutput) ScheduledActions() ScalableTargetScheduledActionArrayOutput {
	return o.ApplyT(func(v LookupScalableTargetResult) []ScalableTargetScheduledAction { return v.ScheduledActions }).(ScalableTargetScheduledActionArrayOutput)
}

// An embedded object that contains attributes and attribute values that are used to suspend and resume automatic scaling. Setting the value of an attribute to true suspends the specified scaling activities. Setting it to false (default) resumes the specified scaling activities.
func (o LookupScalableTargetResultOutput) SuspendedState() ScalableTargetSuspendedStatePtrOutput {
	return o.ApplyT(func(v LookupScalableTargetResult) *ScalableTargetSuspendedState { return v.SuspendedState }).(ScalableTargetSuspendedStatePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScalableTargetResultOutput{})
}
