// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package applicationautoscaling

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ApplicationAutoScaling::ScalingPolicy“ resource defines a scaling policy that Application Auto Scaling uses to adjust the capacity of a scalable target.
//
//	For more information, see [Target tracking scaling policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) and [Step scaling policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) in the *Application Auto Scaling User Guide*.
func LookupScalingPolicy(ctx *pulumi.Context, args *LookupScalingPolicyArgs, opts ...pulumi.InvokeOption) (*LookupScalingPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScalingPolicyResult
	err := ctx.Invoke("aws-native:applicationautoscaling:getScalingPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScalingPolicyArgs struct {
	// Returns the ARN of a scaling policy.
	Arn string `pulumi:"arn"`
	// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
	//   +   ``ecs:service:DesiredCount`` - The task count of an ECS service.
	//   +   ``elasticmapreduce:instancegroup:InstanceCount`` - The instance count of an EMR Instance Group.
	//   +   ``ec2:spot-fleet-request:TargetCapacity`` - The target capacity of a Spot Fleet.
	//   +   ``appstream:fleet:DesiredCapacity`` - The capacity of an AppStream 2.0 fleet.
	//   +   ``dynamodb:table:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB table.
	//   +   ``dynamodb:table:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB table.
	//   +   ``dynamodb:index:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB global secondary index.
	//   +   ``dynamodb:index:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB global secondary index.
	//   +   ``rds:cluster:ReadReplicaCount`` - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
	//   +   ``sagemaker:variant:DesiredInstanceCount`` - The number of EC2 instances for a SageMaker model endpoint variant.
	//   +   ``custom-resource:ResourceType:Property`` - The scalable dimension for a custom resource provided by your own application or service.
	//   +   ``comprehend:document-classifier-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend document classification endpoint.
	//   +   ``comprehend:entity-recognizer-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend entity recognizer endpoint.
	//   +   ``lambda:function:ProvisionedConcurrency`` - The provisioned concurrency for a Lambda function.
	//   +   ``cassandra:table:ReadCapacityUnits`` - The provisioned read capacity for an Amazon Keyspaces table.
	//   +   ``cassandra:table:WriteCapacityUnits`` - The provisioned write capacity for an Amazon Keyspaces table.
	//   +   ``kafka:broker-storage:VolumeSize`` - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.
	//   +   ``elasticache:replication-group:NodeGroups`` - The number of node groups for an Amazon ElastiCache replication group.
	//   +   ``elasticache:replication-group:Replicas`` - The number of replicas per node group for an Amazon ElastiCache replication group.
	//   +   ``neptune:cluster:ReadReplicaCount`` - The count of read replicas in an Amazon Neptune DB cluster.
	//   +   ``sagemaker:variant:DesiredProvisionedConcurrency`` - The provisioned concurrency for a SageMaker serverless endpoint.
	//   +   ``sagemaker:inference-component:DesiredCopyCount`` - The number of copies across an endpoint for a SageMaker inference component.
	//   +   ``workspaces:workspacespool:DesiredUserSessions`` - The number of user sessions for the WorkSpaces in the pool.
	ScalableDimension string `pulumi:"scalableDimension"`
}

type LookupScalingPolicyResult struct {
	// Returns the ARN of a scaling policy.
	Arn *string `pulumi:"arn"`
	// The scaling policy type.
	//  The following policy types are supported:
	//   ``TargetTrackingScaling``—Not supported for Amazon EMR
	//   ``StepScaling``—Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces, Amazon MSK, Amazon ElastiCache, or Neptune.
	PolicyType                           *string                                            `pulumi:"policyType"`
	PredictiveScalingPolicyConfiguration *ScalingPolicyPredictiveScalingPolicyConfiguration `pulumi:"predictiveScalingPolicyConfiguration"`
	// A step scaling policy.
	StepScalingPolicyConfiguration *ScalingPolicyStepScalingPolicyConfiguration `pulumi:"stepScalingPolicyConfiguration"`
	// A target tracking scaling policy.
	TargetTrackingScalingPolicyConfiguration *ScalingPolicyTargetTrackingScalingPolicyConfiguration `pulumi:"targetTrackingScalingPolicyConfiguration"`
}

func LookupScalingPolicyOutput(ctx *pulumi.Context, args LookupScalingPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupScalingPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScalingPolicyResultOutput, error) {
			args := v.(LookupScalingPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupScalingPolicyResult
			secret, err := ctx.InvokePackageRaw("aws-native:applicationautoscaling:getScalingPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupScalingPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupScalingPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupScalingPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupScalingPolicyResultOutput)
}

type LookupScalingPolicyOutputArgs struct {
	// Returns the ARN of a scaling policy.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
	//   +   ``ecs:service:DesiredCount`` - The task count of an ECS service.
	//   +   ``elasticmapreduce:instancegroup:InstanceCount`` - The instance count of an EMR Instance Group.
	//   +   ``ec2:spot-fleet-request:TargetCapacity`` - The target capacity of a Spot Fleet.
	//   +   ``appstream:fleet:DesiredCapacity`` - The capacity of an AppStream 2.0 fleet.
	//   +   ``dynamodb:table:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB table.
	//   +   ``dynamodb:table:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB table.
	//   +   ``dynamodb:index:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB global secondary index.
	//   +   ``dynamodb:index:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB global secondary index.
	//   +   ``rds:cluster:ReadReplicaCount`` - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
	//   +   ``sagemaker:variant:DesiredInstanceCount`` - The number of EC2 instances for a SageMaker model endpoint variant.
	//   +   ``custom-resource:ResourceType:Property`` - The scalable dimension for a custom resource provided by your own application or service.
	//   +   ``comprehend:document-classifier-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend document classification endpoint.
	//   +   ``comprehend:entity-recognizer-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend entity recognizer endpoint.
	//   +   ``lambda:function:ProvisionedConcurrency`` - The provisioned concurrency for a Lambda function.
	//   +   ``cassandra:table:ReadCapacityUnits`` - The provisioned read capacity for an Amazon Keyspaces table.
	//   +   ``cassandra:table:WriteCapacityUnits`` - The provisioned write capacity for an Amazon Keyspaces table.
	//   +   ``kafka:broker-storage:VolumeSize`` - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.
	//   +   ``elasticache:replication-group:NodeGroups`` - The number of node groups for an Amazon ElastiCache replication group.
	//   +   ``elasticache:replication-group:Replicas`` - The number of replicas per node group for an Amazon ElastiCache replication group.
	//   +   ``neptune:cluster:ReadReplicaCount`` - The count of read replicas in an Amazon Neptune DB cluster.
	//   +   ``sagemaker:variant:DesiredProvisionedConcurrency`` - The provisioned concurrency for a SageMaker serverless endpoint.
	//   +   ``sagemaker:inference-component:DesiredCopyCount`` - The number of copies across an endpoint for a SageMaker inference component.
	//   +   ``workspaces:workspacespool:DesiredUserSessions`` - The number of user sessions for the WorkSpaces in the pool.
	ScalableDimension pulumi.StringInput `pulumi:"scalableDimension"`
}

func (LookupScalingPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScalingPolicyArgs)(nil)).Elem()
}

type LookupScalingPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupScalingPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScalingPolicyResult)(nil)).Elem()
}

func (o LookupScalingPolicyResultOutput) ToLookupScalingPolicyResultOutput() LookupScalingPolicyResultOutput {
	return o
}

func (o LookupScalingPolicyResultOutput) ToLookupScalingPolicyResultOutputWithContext(ctx context.Context) LookupScalingPolicyResultOutput {
	return o
}

// Returns the ARN of a scaling policy.
func (o LookupScalingPolicyResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPolicyResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The scaling policy type.
//
//	The following policy types are supported:
//	 ``TargetTrackingScaling``—Not supported for Amazon EMR
//	 ``StepScaling``—Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces, Amazon MSK, Amazon ElastiCache, or Neptune.
func (o LookupScalingPolicyResultOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPolicyResult) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

func (o LookupScalingPolicyResultOutput) PredictiveScalingPolicyConfiguration() ScalingPolicyPredictiveScalingPolicyConfigurationPtrOutput {
	return o.ApplyT(func(v LookupScalingPolicyResult) *ScalingPolicyPredictiveScalingPolicyConfiguration {
		return v.PredictiveScalingPolicyConfiguration
	}).(ScalingPolicyPredictiveScalingPolicyConfigurationPtrOutput)
}

// A step scaling policy.
func (o LookupScalingPolicyResultOutput) StepScalingPolicyConfiguration() ScalingPolicyStepScalingPolicyConfigurationPtrOutput {
	return o.ApplyT(func(v LookupScalingPolicyResult) *ScalingPolicyStepScalingPolicyConfiguration {
		return v.StepScalingPolicyConfiguration
	}).(ScalingPolicyStepScalingPolicyConfigurationPtrOutput)
}

// A target tracking scaling policy.
func (o LookupScalingPolicyResultOutput) TargetTrackingScalingPolicyConfiguration() ScalingPolicyTargetTrackingScalingPolicyConfigurationPtrOutput {
	return o.ApplyT(func(v LookupScalingPolicyResult) *ScalingPolicyTargetTrackingScalingPolicyConfiguration {
		return v.TargetTrackingScalingPolicyConfiguration
	}).(ScalingPolicyTargetTrackingScalingPolicyConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScalingPolicyResultOutput{})
}
