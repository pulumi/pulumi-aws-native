// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGatewayV2::Stage
//
// Deprecated: Stage is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Stage struct {
	pulumi.CustomResourceState

	AccessLogSettings    StageAccessLogSettingsPtrOutput `pulumi:"accessLogSettings"`
	AccessPolicyId       pulumi.StringPtrOutput          `pulumi:"accessPolicyId"`
	ApiId                pulumi.StringOutput             `pulumi:"apiId"`
	AutoDeploy           pulumi.BoolPtrOutput            `pulumi:"autoDeploy"`
	ClientCertificateId  pulumi.StringPtrOutput          `pulumi:"clientCertificateId"`
	DefaultRouteSettings StageRouteSettingsPtrOutput     `pulumi:"defaultRouteSettings"`
	DeploymentId         pulumi.StringPtrOutput          `pulumi:"deploymentId"`
	Description          pulumi.StringPtrOutput          `pulumi:"description"`
	RouteSettings        pulumi.AnyOutput                `pulumi:"routeSettings"`
	StageName            pulumi.StringOutput             `pulumi:"stageName"`
	StageVariables       pulumi.AnyOutput                `pulumi:"stageVariables"`
	Tags                 pulumi.AnyOutput                `pulumi:"tags"`
}

// NewStage registers a new resource with the given unique name, arguments, and options.
func NewStage(ctx *pulumi.Context,
	name string, args *StageArgs, opts ...pulumi.ResourceOption) (*Stage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	var resource Stage
	err := ctx.RegisterResource("aws-native:apigatewayv2:Stage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStage gets an existing Stage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageState, opts ...pulumi.ResourceOption) (*Stage, error) {
	var resource Stage
	err := ctx.ReadResource("aws-native:apigatewayv2:Stage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stage resources.
type stageState struct {
}

type StageState struct {
}

func (StageState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageState)(nil)).Elem()
}

type stageArgs struct {
	AccessLogSettings    *StageAccessLogSettings `pulumi:"accessLogSettings"`
	AccessPolicyId       *string                 `pulumi:"accessPolicyId"`
	ApiId                string                  `pulumi:"apiId"`
	AutoDeploy           *bool                   `pulumi:"autoDeploy"`
	ClientCertificateId  *string                 `pulumi:"clientCertificateId"`
	DefaultRouteSettings *StageRouteSettings     `pulumi:"defaultRouteSettings"`
	DeploymentId         *string                 `pulumi:"deploymentId"`
	Description          *string                 `pulumi:"description"`
	RouteSettings        interface{}             `pulumi:"routeSettings"`
	StageName            *string                 `pulumi:"stageName"`
	StageVariables       interface{}             `pulumi:"stageVariables"`
	Tags                 interface{}             `pulumi:"tags"`
}

// The set of arguments for constructing a Stage resource.
type StageArgs struct {
	AccessLogSettings    StageAccessLogSettingsPtrInput
	AccessPolicyId       pulumi.StringPtrInput
	ApiId                pulumi.StringInput
	AutoDeploy           pulumi.BoolPtrInput
	ClientCertificateId  pulumi.StringPtrInput
	DefaultRouteSettings StageRouteSettingsPtrInput
	DeploymentId         pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	RouteSettings        pulumi.Input
	StageName            pulumi.StringPtrInput
	StageVariables       pulumi.Input
	Tags                 pulumi.Input
}

func (StageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageArgs)(nil)).Elem()
}

type StageInput interface {
	pulumi.Input

	ToStageOutput() StageOutput
	ToStageOutputWithContext(ctx context.Context) StageOutput
}

func (*Stage) ElementType() reflect.Type {
	return reflect.TypeOf((*Stage)(nil))
}

func (i *Stage) ToStageOutput() StageOutput {
	return i.ToStageOutputWithContext(context.Background())
}

func (i *Stage) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageOutput)
}

type StageOutput struct{ *pulumi.OutputState }

func (StageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stage)(nil))
}

func (o StageOutput) ToStageOutput() StageOutput {
	return o
}

func (o StageOutput) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageInput)(nil)).Elem(), &Stage{})
	pulumi.RegisterOutputType(StageOutput{})
}
