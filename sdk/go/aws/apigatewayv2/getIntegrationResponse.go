// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The “AWS::ApiGatewayV2::IntegrationResponse“ resource updates an integration response for an WebSocket API. For more information, see [Set up WebSocket API Integration Responses in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-integration-responses.html) in the *API Gateway Developer Guide*.
func LookupIntegrationResponse(ctx *pulumi.Context, args *LookupIntegrationResponseArgs, opts ...pulumi.InvokeOption) (*LookupIntegrationResponseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIntegrationResponseResult
	err := ctx.Invoke("aws-native:apigatewayv2:getIntegrationResponse", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIntegrationResponseArgs struct {
	// The API identifier.
	ApiId string `pulumi:"apiId"`
	// The integration ID.
	IntegrationId         string `pulumi:"integrationId"`
	IntegrationResponseId string `pulumi:"integrationResponseId"`
}

type LookupIntegrationResponseResult struct {
	// Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
	//   ``CONVERT_TO_BINARY``: Converts a response payload from a Base64-encoded string to the corresponding binary blob.
	//   ``CONVERT_TO_TEXT``: Converts a response payload from a binary blob to a Base64-encoded string.
	//  If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
	ContentHandlingStrategy *string `pulumi:"contentHandlingStrategy"`
	IntegrationResponseId   *string `pulumi:"integrationResponseId"`
	// The integration response key.
	IntegrationResponseKey *string `pulumi:"integrationResponseKey"`
	// A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of ``method.response.header.{name}``, where name is a valid and unique header name. The mapped non-static value must match the pattern of ``integration.response.header.{name}`` or ``integration.response.body.{JSON-expression}``, where ``{name}`` is a valid and unique response header name and ``{JSON-expression}`` is a valid JSON expression without the ``$`` prefix.
	ResponseParameters interface{} `pulumi:"responseParameters"`
	// The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
	ResponseTemplates interface{} `pulumi:"responseTemplates"`
	// The template selection expression for the integration response. Supported only for WebSocket APIs.
	TemplateSelectionExpression *string `pulumi:"templateSelectionExpression"`
}

func LookupIntegrationResponseOutput(ctx *pulumi.Context, args LookupIntegrationResponseOutputArgs, opts ...pulumi.InvokeOption) LookupIntegrationResponseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIntegrationResponseResult, error) {
			args := v.(LookupIntegrationResponseArgs)
			r, err := LookupIntegrationResponse(ctx, &args, opts...)
			var s LookupIntegrationResponseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIntegrationResponseResultOutput)
}

type LookupIntegrationResponseOutputArgs struct {
	// The API identifier.
	ApiId pulumi.StringInput `pulumi:"apiId"`
	// The integration ID.
	IntegrationId         pulumi.StringInput `pulumi:"integrationId"`
	IntegrationResponseId pulumi.StringInput `pulumi:"integrationResponseId"`
}

func (LookupIntegrationResponseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationResponseArgs)(nil)).Elem()
}

type LookupIntegrationResponseResultOutput struct{ *pulumi.OutputState }

func (LookupIntegrationResponseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationResponseResult)(nil)).Elem()
}

func (o LookupIntegrationResponseResultOutput) ToLookupIntegrationResponseResultOutput() LookupIntegrationResponseResultOutput {
	return o
}

func (o LookupIntegrationResponseResultOutput) ToLookupIntegrationResponseResultOutputWithContext(ctx context.Context) LookupIntegrationResponseResultOutput {
	return o
}

func (o LookupIntegrationResponseResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupIntegrationResponseResult] {
	return pulumix.Output[LookupIntegrationResponseResult]{
		OutputState: o.OutputState,
	}
}

// Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are “CONVERT_TO_BINARY“ and “CONVERT_TO_TEXT“, with the following behaviors:
//
//	 ``CONVERT_TO_BINARY``: Converts a response payload from a Base64-encoded string to the corresponding binary blob.
//	 ``CONVERT_TO_TEXT``: Converts a response payload from a binary blob to a Base64-encoded string.
//	If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
func (o LookupIntegrationResponseResultOutput) ContentHandlingStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationResponseResult) *string { return v.ContentHandlingStrategy }).(pulumi.StringPtrOutput)
}

func (o LookupIntegrationResponseResultOutput) IntegrationResponseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationResponseResult) *string { return v.IntegrationResponseId }).(pulumi.StringPtrOutput)
}

// The integration response key.
func (o LookupIntegrationResponseResultOutput) IntegrationResponseKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationResponseResult) *string { return v.IntegrationResponseKey }).(pulumi.StringPtrOutput)
}

// A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of “method.response.header.{name}“, where name is a valid and unique header name. The mapped non-static value must match the pattern of “integration.response.header.{name}“ or “integration.response.body.{JSON-expression}“, where “{name}“ is a valid and unique response header name and “{JSON-expression}“ is a valid JSON expression without the “$“ prefix.
func (o LookupIntegrationResponseResultOutput) ResponseParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupIntegrationResponseResult) interface{} { return v.ResponseParameters }).(pulumi.AnyOutput)
}

// The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
func (o LookupIntegrationResponseResultOutput) ResponseTemplates() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupIntegrationResponseResult) interface{} { return v.ResponseTemplates }).(pulumi.AnyOutput)
}

// The template selection expression for the integration response. Supported only for WebSocket APIs.
func (o LookupIntegrationResponseResultOutput) TemplateSelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationResponseResult) *string { return v.TemplateSelectionExpression }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIntegrationResponseResultOutput{})
}
