// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The “BodyS3Location“ property specifies an S3 location from which to import an OpenAPI definition. Supported only for HTTP APIs.
type ApiBodyS3Location struct {
	// The S3 bucket that contains the OpenAPI definition to import. Required if you specify a ``BodyS3Location`` for an API.
	Bucket *string `pulumi:"bucket"`
	// The Etag of the S3 object.
	Etag *string `pulumi:"etag"`
	// The key of the S3 object. Required if you specify a ``BodyS3Location`` for an API.
	Key *string `pulumi:"key"`
	// The version of the S3 object.
	Version *string `pulumi:"version"`
}

// ApiBodyS3LocationInput is an input type that accepts ApiBodyS3LocationArgs and ApiBodyS3LocationOutput values.
// You can construct a concrete instance of `ApiBodyS3LocationInput` via:
//
//	ApiBodyS3LocationArgs{...}
type ApiBodyS3LocationInput interface {
	pulumi.Input

	ToApiBodyS3LocationOutput() ApiBodyS3LocationOutput
	ToApiBodyS3LocationOutputWithContext(context.Context) ApiBodyS3LocationOutput
}

// The “BodyS3Location“ property specifies an S3 location from which to import an OpenAPI definition. Supported only for HTTP APIs.
type ApiBodyS3LocationArgs struct {
	// The S3 bucket that contains the OpenAPI definition to import. Required if you specify a ``BodyS3Location`` for an API.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The Etag of the S3 object.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// The key of the S3 object. Required if you specify a ``BodyS3Location`` for an API.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The version of the S3 object.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApiBodyS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiBodyS3Location)(nil)).Elem()
}

func (i ApiBodyS3LocationArgs) ToApiBodyS3LocationOutput() ApiBodyS3LocationOutput {
	return i.ToApiBodyS3LocationOutputWithContext(context.Background())
}

func (i ApiBodyS3LocationArgs) ToApiBodyS3LocationOutputWithContext(ctx context.Context) ApiBodyS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiBodyS3LocationOutput)
}

func (i ApiBodyS3LocationArgs) ToApiBodyS3LocationPtrOutput() ApiBodyS3LocationPtrOutput {
	return i.ToApiBodyS3LocationPtrOutputWithContext(context.Background())
}

func (i ApiBodyS3LocationArgs) ToApiBodyS3LocationPtrOutputWithContext(ctx context.Context) ApiBodyS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiBodyS3LocationOutput).ToApiBodyS3LocationPtrOutputWithContext(ctx)
}

// ApiBodyS3LocationPtrInput is an input type that accepts ApiBodyS3LocationArgs, ApiBodyS3LocationPtr and ApiBodyS3LocationPtrOutput values.
// You can construct a concrete instance of `ApiBodyS3LocationPtrInput` via:
//
//	        ApiBodyS3LocationArgs{...}
//
//	or:
//
//	        nil
type ApiBodyS3LocationPtrInput interface {
	pulumi.Input

	ToApiBodyS3LocationPtrOutput() ApiBodyS3LocationPtrOutput
	ToApiBodyS3LocationPtrOutputWithContext(context.Context) ApiBodyS3LocationPtrOutput
}

type apiBodyS3LocationPtrType ApiBodyS3LocationArgs

func ApiBodyS3LocationPtr(v *ApiBodyS3LocationArgs) ApiBodyS3LocationPtrInput {
	return (*apiBodyS3LocationPtrType)(v)
}

func (*apiBodyS3LocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiBodyS3Location)(nil)).Elem()
}

func (i *apiBodyS3LocationPtrType) ToApiBodyS3LocationPtrOutput() ApiBodyS3LocationPtrOutput {
	return i.ToApiBodyS3LocationPtrOutputWithContext(context.Background())
}

func (i *apiBodyS3LocationPtrType) ToApiBodyS3LocationPtrOutputWithContext(ctx context.Context) ApiBodyS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiBodyS3LocationPtrOutput)
}

// The “BodyS3Location“ property specifies an S3 location from which to import an OpenAPI definition. Supported only for HTTP APIs.
type ApiBodyS3LocationOutput struct{ *pulumi.OutputState }

func (ApiBodyS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiBodyS3Location)(nil)).Elem()
}

func (o ApiBodyS3LocationOutput) ToApiBodyS3LocationOutput() ApiBodyS3LocationOutput {
	return o
}

func (o ApiBodyS3LocationOutput) ToApiBodyS3LocationOutputWithContext(ctx context.Context) ApiBodyS3LocationOutput {
	return o
}

func (o ApiBodyS3LocationOutput) ToApiBodyS3LocationPtrOutput() ApiBodyS3LocationPtrOutput {
	return o.ToApiBodyS3LocationPtrOutputWithContext(context.Background())
}

func (o ApiBodyS3LocationOutput) ToApiBodyS3LocationPtrOutputWithContext(ctx context.Context) ApiBodyS3LocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiBodyS3Location) *ApiBodyS3Location {
		return &v
	}).(ApiBodyS3LocationPtrOutput)
}

// The S3 bucket that contains the OpenAPI definition to import. Required if you specify a “BodyS3Location“ for an API.
func (o ApiBodyS3LocationOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBodyS3Location) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The Etag of the S3 object.
func (o ApiBodyS3LocationOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBodyS3Location) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// The key of the S3 object. Required if you specify a “BodyS3Location“ for an API.
func (o ApiBodyS3LocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBodyS3Location) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The version of the S3 object.
func (o ApiBodyS3LocationOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBodyS3Location) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApiBodyS3LocationPtrOutput struct{ *pulumi.OutputState }

func (ApiBodyS3LocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiBodyS3Location)(nil)).Elem()
}

func (o ApiBodyS3LocationPtrOutput) ToApiBodyS3LocationPtrOutput() ApiBodyS3LocationPtrOutput {
	return o
}

func (o ApiBodyS3LocationPtrOutput) ToApiBodyS3LocationPtrOutputWithContext(ctx context.Context) ApiBodyS3LocationPtrOutput {
	return o
}

func (o ApiBodyS3LocationPtrOutput) Elem() ApiBodyS3LocationOutput {
	return o.ApplyT(func(v *ApiBodyS3Location) ApiBodyS3Location {
		if v != nil {
			return *v
		}
		var ret ApiBodyS3Location
		return ret
	}).(ApiBodyS3LocationOutput)
}

// The S3 bucket that contains the OpenAPI definition to import. Required if you specify a “BodyS3Location“ for an API.
func (o ApiBodyS3LocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiBodyS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The Etag of the S3 object.
func (o ApiBodyS3LocationPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiBodyS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// The key of the S3 object. Required if you specify a “BodyS3Location“ for an API.
func (o ApiBodyS3LocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiBodyS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The version of the S3 object.
func (o ApiBodyS3LocationPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiBodyS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The “Cors“ property specifies a CORS configuration for an API. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
type ApiCors struct {
	// Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Represents a collection of allowed headers. Supported only for HTTP APIs.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
	AllowMethods []string `pulumi:"allowMethods"`
	// Represents a collection of allowed origins. Supported only for HTTP APIs.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// Represents a collection of exposed headers. Supported only for HTTP APIs.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
	MaxAge *int `pulumi:"maxAge"`
}

// ApiCorsInput is an input type that accepts ApiCorsArgs and ApiCorsOutput values.
// You can construct a concrete instance of `ApiCorsInput` via:
//
//	ApiCorsArgs{...}
type ApiCorsInput interface {
	pulumi.Input

	ToApiCorsOutput() ApiCorsOutput
	ToApiCorsOutputWithContext(context.Context) ApiCorsOutput
}

// The “Cors“ property specifies a CORS configuration for an API. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
type ApiCorsArgs struct {
	// Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Represents a collection of allowed headers. Supported only for HTTP APIs.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Represents a collection of allowed origins. Supported only for HTTP APIs.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// Represents a collection of exposed headers. Supported only for HTTP APIs.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
}

func (ApiCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiCors)(nil)).Elem()
}

func (i ApiCorsArgs) ToApiCorsOutput() ApiCorsOutput {
	return i.ToApiCorsOutputWithContext(context.Background())
}

func (i ApiCorsArgs) ToApiCorsOutputWithContext(ctx context.Context) ApiCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiCorsOutput)
}

func (i ApiCorsArgs) ToApiCorsPtrOutput() ApiCorsPtrOutput {
	return i.ToApiCorsPtrOutputWithContext(context.Background())
}

func (i ApiCorsArgs) ToApiCorsPtrOutputWithContext(ctx context.Context) ApiCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiCorsOutput).ToApiCorsPtrOutputWithContext(ctx)
}

// ApiCorsPtrInput is an input type that accepts ApiCorsArgs, ApiCorsPtr and ApiCorsPtrOutput values.
// You can construct a concrete instance of `ApiCorsPtrInput` via:
//
//	        ApiCorsArgs{...}
//
//	or:
//
//	        nil
type ApiCorsPtrInput interface {
	pulumi.Input

	ToApiCorsPtrOutput() ApiCorsPtrOutput
	ToApiCorsPtrOutputWithContext(context.Context) ApiCorsPtrOutput
}

type apiCorsPtrType ApiCorsArgs

func ApiCorsPtr(v *ApiCorsArgs) ApiCorsPtrInput {
	return (*apiCorsPtrType)(v)
}

func (*apiCorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiCors)(nil)).Elem()
}

func (i *apiCorsPtrType) ToApiCorsPtrOutput() ApiCorsPtrOutput {
	return i.ToApiCorsPtrOutputWithContext(context.Background())
}

func (i *apiCorsPtrType) ToApiCorsPtrOutputWithContext(ctx context.Context) ApiCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiCorsPtrOutput)
}

// The “Cors“ property specifies a CORS configuration for an API. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
type ApiCorsOutput struct{ *pulumi.OutputState }

func (ApiCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiCors)(nil)).Elem()
}

func (o ApiCorsOutput) ToApiCorsOutput() ApiCorsOutput {
	return o
}

func (o ApiCorsOutput) ToApiCorsOutputWithContext(ctx context.Context) ApiCorsOutput {
	return o
}

func (o ApiCorsOutput) ToApiCorsPtrOutput() ApiCorsPtrOutput {
	return o.ToApiCorsPtrOutputWithContext(context.Background())
}

func (o ApiCorsOutput) ToApiCorsPtrOutputWithContext(ctx context.Context) ApiCorsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiCors) *ApiCors {
		return &v
	}).(ApiCorsPtrOutput)
}

// Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
func (o ApiCorsOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiCors) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Represents a collection of allowed headers. Supported only for HTTP APIs.
func (o ApiCorsOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiCors) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
func (o ApiCorsOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiCors) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Represents a collection of allowed origins. Supported only for HTTP APIs.
func (o ApiCorsOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiCors) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// Represents a collection of exposed headers. Supported only for HTTP APIs.
func (o ApiCorsOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiCors) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
func (o ApiCorsOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiCors) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type ApiCorsPtrOutput struct{ *pulumi.OutputState }

func (ApiCorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiCors)(nil)).Elem()
}

func (o ApiCorsPtrOutput) ToApiCorsPtrOutput() ApiCorsPtrOutput {
	return o
}

func (o ApiCorsPtrOutput) ToApiCorsPtrOutputWithContext(ctx context.Context) ApiCorsPtrOutput {
	return o
}

func (o ApiCorsPtrOutput) Elem() ApiCorsOutput {
	return o.ApplyT(func(v *ApiCors) ApiCors {
		if v != nil {
			return *v
		}
		var ret ApiCors
		return ret
	}).(ApiCorsOutput)
}

// Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
func (o ApiCorsPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApiCors) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Represents a collection of allowed headers. Supported only for HTTP APIs.
func (o ApiCorsPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
func (o ApiCorsPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Represents a collection of allowed origins. Supported only for HTTP APIs.
func (o ApiCorsPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// Represents a collection of exposed headers. Supported only for HTTP APIs.
func (o ApiCorsPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiCors) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
func (o ApiCorsPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiCors) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

// The “JWTConfiguration“ property specifies the configuration of a JWT authorizer. Required for the “JWT“ authorizer type. Supported only for HTTP APIs.
type AuthorizerJwtConfiguration struct {
	// A list of the intended recipients of the JWT. A valid JWT must provide an ``aud`` that matches at least one entry in this list. See [RFC 7519](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc7519#section-4.1.3). Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
	Audience []string `pulumi:"audience"`
	// The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: ``https://cognito-idp.{region}.amazonaws.com/{userPoolId}``. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
	Issuer *string `pulumi:"issuer"`
}

// AuthorizerJwtConfigurationInput is an input type that accepts AuthorizerJwtConfigurationArgs and AuthorizerJwtConfigurationOutput values.
// You can construct a concrete instance of `AuthorizerJwtConfigurationInput` via:
//
//	AuthorizerJwtConfigurationArgs{...}
type AuthorizerJwtConfigurationInput interface {
	pulumi.Input

	ToAuthorizerJwtConfigurationOutput() AuthorizerJwtConfigurationOutput
	ToAuthorizerJwtConfigurationOutputWithContext(context.Context) AuthorizerJwtConfigurationOutput
}

// The “JWTConfiguration“ property specifies the configuration of a JWT authorizer. Required for the “JWT“ authorizer type. Supported only for HTTP APIs.
type AuthorizerJwtConfigurationArgs struct {
	// A list of the intended recipients of the JWT. A valid JWT must provide an ``aud`` that matches at least one entry in this list. See [RFC 7519](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc7519#section-4.1.3). Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
	Audience pulumi.StringArrayInput `pulumi:"audience"`
	// The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: ``https://cognito-idp.{region}.amazonaws.com/{userPoolId}``. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
}

func (AuthorizerJwtConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizerJwtConfiguration)(nil)).Elem()
}

func (i AuthorizerJwtConfigurationArgs) ToAuthorizerJwtConfigurationOutput() AuthorizerJwtConfigurationOutput {
	return i.ToAuthorizerJwtConfigurationOutputWithContext(context.Background())
}

func (i AuthorizerJwtConfigurationArgs) ToAuthorizerJwtConfigurationOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerJwtConfigurationOutput)
}

func (i AuthorizerJwtConfigurationArgs) ToAuthorizerJwtConfigurationPtrOutput() AuthorizerJwtConfigurationPtrOutput {
	return i.ToAuthorizerJwtConfigurationPtrOutputWithContext(context.Background())
}

func (i AuthorizerJwtConfigurationArgs) ToAuthorizerJwtConfigurationPtrOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerJwtConfigurationOutput).ToAuthorizerJwtConfigurationPtrOutputWithContext(ctx)
}

// AuthorizerJwtConfigurationPtrInput is an input type that accepts AuthorizerJwtConfigurationArgs, AuthorizerJwtConfigurationPtr and AuthorizerJwtConfigurationPtrOutput values.
// You can construct a concrete instance of `AuthorizerJwtConfigurationPtrInput` via:
//
//	        AuthorizerJwtConfigurationArgs{...}
//
//	or:
//
//	        nil
type AuthorizerJwtConfigurationPtrInput interface {
	pulumi.Input

	ToAuthorizerJwtConfigurationPtrOutput() AuthorizerJwtConfigurationPtrOutput
	ToAuthorizerJwtConfigurationPtrOutputWithContext(context.Context) AuthorizerJwtConfigurationPtrOutput
}

type authorizerJwtConfigurationPtrType AuthorizerJwtConfigurationArgs

func AuthorizerJwtConfigurationPtr(v *AuthorizerJwtConfigurationArgs) AuthorizerJwtConfigurationPtrInput {
	return (*authorizerJwtConfigurationPtrType)(v)
}

func (*authorizerJwtConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizerJwtConfiguration)(nil)).Elem()
}

func (i *authorizerJwtConfigurationPtrType) ToAuthorizerJwtConfigurationPtrOutput() AuthorizerJwtConfigurationPtrOutput {
	return i.ToAuthorizerJwtConfigurationPtrOutputWithContext(context.Background())
}

func (i *authorizerJwtConfigurationPtrType) ToAuthorizerJwtConfigurationPtrOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizerJwtConfigurationPtrOutput)
}

// The “JWTConfiguration“ property specifies the configuration of a JWT authorizer. Required for the “JWT“ authorizer type. Supported only for HTTP APIs.
type AuthorizerJwtConfigurationOutput struct{ *pulumi.OutputState }

func (AuthorizerJwtConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizerJwtConfiguration)(nil)).Elem()
}

func (o AuthorizerJwtConfigurationOutput) ToAuthorizerJwtConfigurationOutput() AuthorizerJwtConfigurationOutput {
	return o
}

func (o AuthorizerJwtConfigurationOutput) ToAuthorizerJwtConfigurationOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationOutput {
	return o
}

func (o AuthorizerJwtConfigurationOutput) ToAuthorizerJwtConfigurationPtrOutput() AuthorizerJwtConfigurationPtrOutput {
	return o.ToAuthorizerJwtConfigurationPtrOutputWithContext(context.Background())
}

func (o AuthorizerJwtConfigurationOutput) ToAuthorizerJwtConfigurationPtrOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthorizerJwtConfiguration) *AuthorizerJwtConfiguration {
		return &v
	}).(AuthorizerJwtConfigurationPtrOutput)
}

// A list of the intended recipients of the JWT. A valid JWT must provide an “aud“ that matches at least one entry in this list. See [RFC 7519](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc7519#section-4.1.3). Required for the “JWT“ authorizer type. Supported only for HTTP APIs.
func (o AuthorizerJwtConfigurationOutput) Audience() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizerJwtConfiguration) []string { return v.Audience }).(pulumi.StringArrayOutput)
}

// The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: “https://cognito-idp.{region}.amazonaws.com/{userPoolId}“. Required for the “JWT“ authorizer type. Supported only for HTTP APIs.
func (o AuthorizerJwtConfigurationOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthorizerJwtConfiguration) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

type AuthorizerJwtConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AuthorizerJwtConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizerJwtConfiguration)(nil)).Elem()
}

func (o AuthorizerJwtConfigurationPtrOutput) ToAuthorizerJwtConfigurationPtrOutput() AuthorizerJwtConfigurationPtrOutput {
	return o
}

func (o AuthorizerJwtConfigurationPtrOutput) ToAuthorizerJwtConfigurationPtrOutputWithContext(ctx context.Context) AuthorizerJwtConfigurationPtrOutput {
	return o
}

func (o AuthorizerJwtConfigurationPtrOutput) Elem() AuthorizerJwtConfigurationOutput {
	return o.ApplyT(func(v *AuthorizerJwtConfiguration) AuthorizerJwtConfiguration {
		if v != nil {
			return *v
		}
		var ret AuthorizerJwtConfiguration
		return ret
	}).(AuthorizerJwtConfigurationOutput)
}

// A list of the intended recipients of the JWT. A valid JWT must provide an “aud“ that matches at least one entry in this list. See [RFC 7519](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc7519#section-4.1.3). Required for the “JWT“ authorizer type. Supported only for HTTP APIs.
func (o AuthorizerJwtConfigurationPtrOutput) Audience() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizerJwtConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringArrayOutput)
}

// The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: “https://cognito-idp.{region}.amazonaws.com/{userPoolId}“. Required for the “JWT“ authorizer type. Supported only for HTTP APIs.
func (o AuthorizerJwtConfigurationPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizerJwtConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The “DomainNameConfiguration“ property type specifies the configuration for an API's domain name.
//
//	``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.
type DomainNameConfiguration struct {
	// An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
	CertificateArn *string `pulumi:"certificateArn"`
	// The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
	CertificateName *string `pulumi:"certificateName"`
	// The endpoint type.
	EndpointType *string `pulumi:"endpointType"`
	// The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.
	OwnershipVerificationCertificateArn *string `pulumi:"ownershipVerificationCertificateArn"`
	// The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.
	SecurityPolicy *string `pulumi:"securityPolicy"`
}

// DomainNameConfigurationInput is an input type that accepts DomainNameConfigurationArgs and DomainNameConfigurationOutput values.
// You can construct a concrete instance of `DomainNameConfigurationInput` via:
//
//	DomainNameConfigurationArgs{...}
type DomainNameConfigurationInput interface {
	pulumi.Input

	ToDomainNameConfigurationOutput() DomainNameConfigurationOutput
	ToDomainNameConfigurationOutputWithContext(context.Context) DomainNameConfigurationOutput
}

// The “DomainNameConfiguration“ property type specifies the configuration for an API's domain name.
//
//	``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.
type DomainNameConfigurationArgs struct {
	// An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
	CertificateArn pulumi.StringPtrInput `pulumi:"certificateArn"`
	// The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
	CertificateName pulumi.StringPtrInput `pulumi:"certificateName"`
	// The endpoint type.
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.
	OwnershipVerificationCertificateArn pulumi.StringPtrInput `pulumi:"ownershipVerificationCertificateArn"`
	// The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.
	SecurityPolicy pulumi.StringPtrInput `pulumi:"securityPolicy"`
}

func (DomainNameConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameConfiguration)(nil)).Elem()
}

func (i DomainNameConfigurationArgs) ToDomainNameConfigurationOutput() DomainNameConfigurationOutput {
	return i.ToDomainNameConfigurationOutputWithContext(context.Background())
}

func (i DomainNameConfigurationArgs) ToDomainNameConfigurationOutputWithContext(ctx context.Context) DomainNameConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameConfigurationOutput)
}

// DomainNameConfigurationArrayInput is an input type that accepts DomainNameConfigurationArray and DomainNameConfigurationArrayOutput values.
// You can construct a concrete instance of `DomainNameConfigurationArrayInput` via:
//
//	DomainNameConfigurationArray{ DomainNameConfigurationArgs{...} }
type DomainNameConfigurationArrayInput interface {
	pulumi.Input

	ToDomainNameConfigurationArrayOutput() DomainNameConfigurationArrayOutput
	ToDomainNameConfigurationArrayOutputWithContext(context.Context) DomainNameConfigurationArrayOutput
}

type DomainNameConfigurationArray []DomainNameConfigurationInput

func (DomainNameConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainNameConfiguration)(nil)).Elem()
}

func (i DomainNameConfigurationArray) ToDomainNameConfigurationArrayOutput() DomainNameConfigurationArrayOutput {
	return i.ToDomainNameConfigurationArrayOutputWithContext(context.Background())
}

func (i DomainNameConfigurationArray) ToDomainNameConfigurationArrayOutputWithContext(ctx context.Context) DomainNameConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameConfigurationArrayOutput)
}

// The “DomainNameConfiguration“ property type specifies the configuration for an API's domain name.
//
//	``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.
type DomainNameConfigurationOutput struct{ *pulumi.OutputState }

func (DomainNameConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameConfiguration)(nil)).Elem()
}

func (o DomainNameConfigurationOutput) ToDomainNameConfigurationOutput() DomainNameConfigurationOutput {
	return o
}

func (o DomainNameConfigurationOutput) ToDomainNameConfigurationOutputWithContext(ctx context.Context) DomainNameConfigurationOutput {
	return o
}

// An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
func (o DomainNameConfigurationOutput) CertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameConfiguration) *string { return v.CertificateArn }).(pulumi.StringPtrOutput)
}

// The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
func (o DomainNameConfigurationOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameConfiguration) *string { return v.CertificateName }).(pulumi.StringPtrOutput)
}

// The endpoint type.
func (o DomainNameConfigurationOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameConfiguration) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.
func (o DomainNameConfigurationOutput) OwnershipVerificationCertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameConfiguration) *string { return v.OwnershipVerificationCertificateArn }).(pulumi.StringPtrOutput)
}

// The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are “TLS_1_0“ and “TLS_1_2“.
func (o DomainNameConfigurationOutput) SecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameConfiguration) *string { return v.SecurityPolicy }).(pulumi.StringPtrOutput)
}

type DomainNameConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DomainNameConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainNameConfiguration)(nil)).Elem()
}

func (o DomainNameConfigurationArrayOutput) ToDomainNameConfigurationArrayOutput() DomainNameConfigurationArrayOutput {
	return o
}

func (o DomainNameConfigurationArrayOutput) ToDomainNameConfigurationArrayOutputWithContext(ctx context.Context) DomainNameConfigurationArrayOutput {
	return o
}

func (o DomainNameConfigurationArrayOutput) Index(i pulumi.IntInput) DomainNameConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainNameConfiguration {
		return vs[0].([]DomainNameConfiguration)[vs[1].(int)]
	}).(DomainNameConfigurationOutput)
}

// If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
type DomainNameMutualTlsAuthentication struct {
	// An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
	TruststoreUri *string `pulumi:"truststoreUri"`
	// The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	TruststoreVersion *string `pulumi:"truststoreVersion"`
}

// DomainNameMutualTlsAuthenticationInput is an input type that accepts DomainNameMutualTlsAuthenticationArgs and DomainNameMutualTlsAuthenticationOutput values.
// You can construct a concrete instance of `DomainNameMutualTlsAuthenticationInput` via:
//
//	DomainNameMutualTlsAuthenticationArgs{...}
type DomainNameMutualTlsAuthenticationInput interface {
	pulumi.Input

	ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput
	ToDomainNameMutualTlsAuthenticationOutputWithContext(context.Context) DomainNameMutualTlsAuthenticationOutput
}

// If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
type DomainNameMutualTlsAuthenticationArgs struct {
	// An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
	TruststoreUri pulumi.StringPtrInput `pulumi:"truststoreUri"`
	// The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
	TruststoreVersion pulumi.StringPtrInput `pulumi:"truststoreVersion"`
}

func (DomainNameMutualTlsAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return i.ToDomainNameMutualTlsAuthenticationOutputWithContext(context.Background())
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationOutput)
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return i.ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Background())
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationOutput).ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx)
}

// DomainNameMutualTlsAuthenticationPtrInput is an input type that accepts DomainNameMutualTlsAuthenticationArgs, DomainNameMutualTlsAuthenticationPtr and DomainNameMutualTlsAuthenticationPtrOutput values.
// You can construct a concrete instance of `DomainNameMutualTlsAuthenticationPtrInput` via:
//
//	        DomainNameMutualTlsAuthenticationArgs{...}
//
//	or:
//
//	        nil
type DomainNameMutualTlsAuthenticationPtrInput interface {
	pulumi.Input

	ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput
	ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Context) DomainNameMutualTlsAuthenticationPtrOutput
}

type domainNameMutualTlsAuthenticationPtrType DomainNameMutualTlsAuthenticationArgs

func DomainNameMutualTlsAuthenticationPtr(v *DomainNameMutualTlsAuthenticationArgs) DomainNameMutualTlsAuthenticationPtrInput {
	return (*domainNameMutualTlsAuthenticationPtrType)(v)
}

func (*domainNameMutualTlsAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (i *domainNameMutualTlsAuthenticationPtrType) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return i.ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Background())
}

func (i *domainNameMutualTlsAuthenticationPtrType) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationPtrOutput)
}

// If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
type DomainNameMutualTlsAuthenticationOutput struct{ *pulumi.OutputState }

func (DomainNameMutualTlsAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return o.ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Background())
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainNameMutualTlsAuthentication) *DomainNameMutualTlsAuthentication {
		return &v
	}).(DomainNameMutualTlsAuthenticationPtrOutput)
}

// An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, “s3://bucket-name/key-name“. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
func (o DomainNameMutualTlsAuthenticationOutput) TruststoreUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameMutualTlsAuthentication) *string { return v.TruststoreUri }).(pulumi.StringPtrOutput)
}

// The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
func (o DomainNameMutualTlsAuthenticationOutput) TruststoreVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameMutualTlsAuthentication) *string { return v.TruststoreVersion }).(pulumi.StringPtrOutput)
}

type DomainNameMutualTlsAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (DomainNameMutualTlsAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) Elem() DomainNameMutualTlsAuthenticationOutput {
	return o.ApplyT(func(v *DomainNameMutualTlsAuthentication) DomainNameMutualTlsAuthentication {
		if v != nil {
			return *v
		}
		var ret DomainNameMutualTlsAuthentication
		return ret
	}).(DomainNameMutualTlsAuthenticationOutput)
}

// An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, “s3://bucket-name/key-name“. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
func (o DomainNameMutualTlsAuthenticationPtrOutput) TruststoreUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNameMutualTlsAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.TruststoreUri
	}).(pulumi.StringPtrOutput)
}

// The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
func (o DomainNameMutualTlsAuthenticationPtrOutput) TruststoreVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNameMutualTlsAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.TruststoreVersion
	}).(pulumi.StringPtrOutput)
}

// response parameter
type IntegrationResponseParameter struct {
	Destination *string `pulumi:"destination"`
	Source      *string `pulumi:"source"`
}

// IntegrationResponseParameterInput is an input type that accepts IntegrationResponseParameterArgs and IntegrationResponseParameterOutput values.
// You can construct a concrete instance of `IntegrationResponseParameterInput` via:
//
//	IntegrationResponseParameterArgs{...}
type IntegrationResponseParameterInput interface {
	pulumi.Input

	ToIntegrationResponseParameterOutput() IntegrationResponseParameterOutput
	ToIntegrationResponseParameterOutputWithContext(context.Context) IntegrationResponseParameterOutput
}

// response parameter
type IntegrationResponseParameterArgs struct {
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	Source      pulumi.StringPtrInput `pulumi:"source"`
}

func (IntegrationResponseParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponseParameter)(nil)).Elem()
}

func (i IntegrationResponseParameterArgs) ToIntegrationResponseParameterOutput() IntegrationResponseParameterOutput {
	return i.ToIntegrationResponseParameterOutputWithContext(context.Background())
}

func (i IntegrationResponseParameterArgs) ToIntegrationResponseParameterOutputWithContext(ctx context.Context) IntegrationResponseParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseParameterOutput)
}

// IntegrationResponseParameterArrayInput is an input type that accepts IntegrationResponseParameterArray and IntegrationResponseParameterArrayOutput values.
// You can construct a concrete instance of `IntegrationResponseParameterArrayInput` via:
//
//	IntegrationResponseParameterArray{ IntegrationResponseParameterArgs{...} }
type IntegrationResponseParameterArrayInput interface {
	pulumi.Input

	ToIntegrationResponseParameterArrayOutput() IntegrationResponseParameterArrayOutput
	ToIntegrationResponseParameterArrayOutputWithContext(context.Context) IntegrationResponseParameterArrayOutput
}

type IntegrationResponseParameterArray []IntegrationResponseParameterInput

func (IntegrationResponseParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationResponseParameter)(nil)).Elem()
}

func (i IntegrationResponseParameterArray) ToIntegrationResponseParameterArrayOutput() IntegrationResponseParameterArrayOutput {
	return i.ToIntegrationResponseParameterArrayOutputWithContext(context.Background())
}

func (i IntegrationResponseParameterArray) ToIntegrationResponseParameterArrayOutputWithContext(ctx context.Context) IntegrationResponseParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseParameterArrayOutput)
}

// response parameter
type IntegrationResponseParameterOutput struct{ *pulumi.OutputState }

func (IntegrationResponseParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponseParameter)(nil)).Elem()
}

func (o IntegrationResponseParameterOutput) ToIntegrationResponseParameterOutput() IntegrationResponseParameterOutput {
	return o
}

func (o IntegrationResponseParameterOutput) ToIntegrationResponseParameterOutputWithContext(ctx context.Context) IntegrationResponseParameterOutput {
	return o
}

func (o IntegrationResponseParameterOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationResponseParameter) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o IntegrationResponseParameterOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationResponseParameter) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type IntegrationResponseParameterArrayOutput struct{ *pulumi.OutputState }

func (IntegrationResponseParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationResponseParameter)(nil)).Elem()
}

func (o IntegrationResponseParameterArrayOutput) ToIntegrationResponseParameterArrayOutput() IntegrationResponseParameterArrayOutput {
	return o
}

func (o IntegrationResponseParameterArrayOutput) ToIntegrationResponseParameterArrayOutputWithContext(ctx context.Context) IntegrationResponseParameterArrayOutput {
	return o
}

func (o IntegrationResponseParameterArrayOutput) Index(i pulumi.IntInput) IntegrationResponseParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationResponseParameter {
		return vs[0].([]IntegrationResponseParameter)[vs[1].(int)]
	}).(IntegrationResponseParameterOutput)
}

// map of response parameter lists
type IntegrationResponseParameterMap struct {
	ResponseParameters []IntegrationResponseParameter `pulumi:"responseParameters"`
}

// IntegrationResponseParameterMapInput is an input type that accepts IntegrationResponseParameterMap and IntegrationResponseParameterMapOutput values.
// You can construct a concrete instance of `IntegrationResponseParameterMapInput` via:
//
//	IntegrationResponseParameterMap{ "key": IntegrationResponseParameterArgs{...} }
type IntegrationResponseParameterMapInput interface {
	pulumi.Input

	ToIntegrationResponseParameterMapOutput() IntegrationResponseParameterMapOutput
	ToIntegrationResponseParameterMapOutputWithContext(context.Context) IntegrationResponseParameterMapOutput
}

// map of response parameter lists
type IntegrationResponseParameterMapArgs struct {
	ResponseParameters IntegrationResponseParameterArrayInput `pulumi:"responseParameters"`
}

func (IntegrationResponseParameterMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponseParameterMap)(nil)).Elem()
}

func (i IntegrationResponseParameterMapArgs) ToIntegrationResponseParameterMapOutput() IntegrationResponseParameterMapOutput {
	return i.ToIntegrationResponseParameterMapOutputWithContext(context.Background())
}

func (i IntegrationResponseParameterMapArgs) ToIntegrationResponseParameterMapOutputWithContext(ctx context.Context) IntegrationResponseParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseParameterMapOutput)
}

// IntegrationResponseParameterMapMapInput is an input type that accepts IntegrationResponseParameterMapMap and IntegrationResponseParameterMapMapOutput values.
// You can construct a concrete instance of `IntegrationResponseParameterMapMapInput` via:
//
//	IntegrationResponseParameterMapMap{ "key": IntegrationResponseParameterMapArgs{...} }
type IntegrationResponseParameterMapMapInput interface {
	pulumi.Input

	ToIntegrationResponseParameterMapMapOutput() IntegrationResponseParameterMapMapOutput
	ToIntegrationResponseParameterMapMapOutputWithContext(context.Context) IntegrationResponseParameterMapMapOutput
}

type IntegrationResponseParameterMapMap map[string]IntegrationResponseParameterMapInput

func (IntegrationResponseParameterMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IntegrationResponseParameterMap)(nil)).Elem()
}

func (i IntegrationResponseParameterMapMap) ToIntegrationResponseParameterMapMapOutput() IntegrationResponseParameterMapMapOutput {
	return i.ToIntegrationResponseParameterMapMapOutputWithContext(context.Background())
}

func (i IntegrationResponseParameterMapMap) ToIntegrationResponseParameterMapMapOutputWithContext(ctx context.Context) IntegrationResponseParameterMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseParameterMapMapOutput)
}

// map of response parameter lists
type IntegrationResponseParameterMapOutput struct{ *pulumi.OutputState }

func (IntegrationResponseParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponseParameterMap)(nil)).Elem()
}

func (o IntegrationResponseParameterMapOutput) ToIntegrationResponseParameterMapOutput() IntegrationResponseParameterMapOutput {
	return o
}

func (o IntegrationResponseParameterMapOutput) ToIntegrationResponseParameterMapOutputWithContext(ctx context.Context) IntegrationResponseParameterMapOutput {
	return o
}

func (o IntegrationResponseParameterMapOutput) ResponseParameters() IntegrationResponseParameterArrayOutput {
	return o.ApplyT(func(v IntegrationResponseParameterMap) []IntegrationResponseParameter { return v.ResponseParameters }).(IntegrationResponseParameterArrayOutput)
}

type IntegrationResponseParameterMapMapOutput struct{ *pulumi.OutputState }

func (IntegrationResponseParameterMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IntegrationResponseParameterMap)(nil)).Elem()
}

func (o IntegrationResponseParameterMapMapOutput) ToIntegrationResponseParameterMapMapOutput() IntegrationResponseParameterMapMapOutput {
	return o
}

func (o IntegrationResponseParameterMapMapOutput) ToIntegrationResponseParameterMapMapOutputWithContext(ctx context.Context) IntegrationResponseParameterMapMapOutput {
	return o
}

func (o IntegrationResponseParameterMapMapOutput) MapIndex(k pulumi.StringInput) IntegrationResponseParameterMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IntegrationResponseParameterMap {
		return vs[0].(map[string]IntegrationResponseParameterMap)[vs[1].(string)]
	}).(IntegrationResponseParameterMapOutput)
}

// The TlsConfig property specifies the TLS configuration for a private integration. Supported only for HTTP APIs.
type IntegrationTlsConfig struct {
	// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
	ServerNameToVerify *string `pulumi:"serverNameToVerify"`
}

// IntegrationTlsConfigInput is an input type that accepts IntegrationTlsConfigArgs and IntegrationTlsConfigOutput values.
// You can construct a concrete instance of `IntegrationTlsConfigInput` via:
//
//	IntegrationTlsConfigArgs{...}
type IntegrationTlsConfigInput interface {
	pulumi.Input

	ToIntegrationTlsConfigOutput() IntegrationTlsConfigOutput
	ToIntegrationTlsConfigOutputWithContext(context.Context) IntegrationTlsConfigOutput
}

// The TlsConfig property specifies the TLS configuration for a private integration. Supported only for HTTP APIs.
type IntegrationTlsConfigArgs struct {
	// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
	ServerNameToVerify pulumi.StringPtrInput `pulumi:"serverNameToVerify"`
}

func (IntegrationTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTlsConfig)(nil)).Elem()
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigOutput() IntegrationTlsConfigOutput {
	return i.ToIntegrationTlsConfigOutputWithContext(context.Background())
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigOutputWithContext(ctx context.Context) IntegrationTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTlsConfigOutput)
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigPtrOutput() IntegrationTlsConfigPtrOutput {
	return i.ToIntegrationTlsConfigPtrOutputWithContext(context.Background())
}

func (i IntegrationTlsConfigArgs) ToIntegrationTlsConfigPtrOutputWithContext(ctx context.Context) IntegrationTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTlsConfigOutput).ToIntegrationTlsConfigPtrOutputWithContext(ctx)
}

// IntegrationTlsConfigPtrInput is an input type that accepts IntegrationTlsConfigArgs, IntegrationTlsConfigPtr and IntegrationTlsConfigPtrOutput values.
// You can construct a concrete instance of `IntegrationTlsConfigPtrInput` via:
//
//	        IntegrationTlsConfigArgs{...}
//
//	or:
//
//	        nil
type IntegrationTlsConfigPtrInput interface {
	pulumi.Input

	ToIntegrationTlsConfigPtrOutput() IntegrationTlsConfigPtrOutput
	ToIntegrationTlsConfigPtrOutputWithContext(context.Context) IntegrationTlsConfigPtrOutput
}

type integrationTlsConfigPtrType IntegrationTlsConfigArgs

func IntegrationTlsConfigPtr(v *IntegrationTlsConfigArgs) IntegrationTlsConfigPtrInput {
	return (*integrationTlsConfigPtrType)(v)
}

func (*integrationTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTlsConfig)(nil)).Elem()
}

func (i *integrationTlsConfigPtrType) ToIntegrationTlsConfigPtrOutput() IntegrationTlsConfigPtrOutput {
	return i.ToIntegrationTlsConfigPtrOutputWithContext(context.Background())
}

func (i *integrationTlsConfigPtrType) ToIntegrationTlsConfigPtrOutputWithContext(ctx context.Context) IntegrationTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTlsConfigPtrOutput)
}

// The TlsConfig property specifies the TLS configuration for a private integration. Supported only for HTTP APIs.
type IntegrationTlsConfigOutput struct{ *pulumi.OutputState }

func (IntegrationTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTlsConfig)(nil)).Elem()
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigOutput() IntegrationTlsConfigOutput {
	return o
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigOutputWithContext(ctx context.Context) IntegrationTlsConfigOutput {
	return o
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigPtrOutput() IntegrationTlsConfigPtrOutput {
	return o.ToIntegrationTlsConfigPtrOutputWithContext(context.Background())
}

func (o IntegrationTlsConfigOutput) ToIntegrationTlsConfigPtrOutputWithContext(ctx context.Context) IntegrationTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationTlsConfig) *IntegrationTlsConfig {
		return &v
	}).(IntegrationTlsConfigPtrOutput)
}

// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
func (o IntegrationTlsConfigOutput) ServerNameToVerify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationTlsConfig) *string { return v.ServerNameToVerify }).(pulumi.StringPtrOutput)
}

type IntegrationTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (IntegrationTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTlsConfig)(nil)).Elem()
}

func (o IntegrationTlsConfigPtrOutput) ToIntegrationTlsConfigPtrOutput() IntegrationTlsConfigPtrOutput {
	return o
}

func (o IntegrationTlsConfigPtrOutput) ToIntegrationTlsConfigPtrOutputWithContext(ctx context.Context) IntegrationTlsConfigPtrOutput {
	return o
}

func (o IntegrationTlsConfigPtrOutput) Elem() IntegrationTlsConfigOutput {
	return o.ApplyT(func(v *IntegrationTlsConfig) IntegrationTlsConfig {
		if v != nil {
			return *v
		}
		var ret IntegrationTlsConfig
		return ret
	}).(IntegrationTlsConfigOutput)
}

// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
func (o IntegrationTlsConfigPtrOutput) ServerNameToVerify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerNameToVerify
	}).(pulumi.StringPtrOutput)
}

type RouteParameterConstraints struct {
	Required bool `pulumi:"required"`
}

// RouteParameterConstraintsInput is an input type that accepts RouteParameterConstraintsArgs and RouteParameterConstraintsOutput values.
// You can construct a concrete instance of `RouteParameterConstraintsInput` via:
//
//	RouteParameterConstraintsArgs{...}
type RouteParameterConstraintsInput interface {
	pulumi.Input

	ToRouteParameterConstraintsOutput() RouteParameterConstraintsOutput
	ToRouteParameterConstraintsOutputWithContext(context.Context) RouteParameterConstraintsOutput
}

type RouteParameterConstraintsArgs struct {
	Required pulumi.BoolInput `pulumi:"required"`
}

func (RouteParameterConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteParameterConstraints)(nil)).Elem()
}

func (i RouteParameterConstraintsArgs) ToRouteParameterConstraintsOutput() RouteParameterConstraintsOutput {
	return i.ToRouteParameterConstraintsOutputWithContext(context.Background())
}

func (i RouteParameterConstraintsArgs) ToRouteParameterConstraintsOutputWithContext(ctx context.Context) RouteParameterConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteParameterConstraintsOutput)
}

// RouteParameterConstraintsArrayInput is an input type that accepts RouteParameterConstraintsArray and RouteParameterConstraintsArrayOutput values.
// You can construct a concrete instance of `RouteParameterConstraintsArrayInput` via:
//
//	RouteParameterConstraintsArray{ RouteParameterConstraintsArgs{...} }
type RouteParameterConstraintsArrayInput interface {
	pulumi.Input

	ToRouteParameterConstraintsArrayOutput() RouteParameterConstraintsArrayOutput
	ToRouteParameterConstraintsArrayOutputWithContext(context.Context) RouteParameterConstraintsArrayOutput
}

type RouteParameterConstraintsArray []RouteParameterConstraintsInput

func (RouteParameterConstraintsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteParameterConstraints)(nil)).Elem()
}

func (i RouteParameterConstraintsArray) ToRouteParameterConstraintsArrayOutput() RouteParameterConstraintsArrayOutput {
	return i.ToRouteParameterConstraintsArrayOutputWithContext(context.Background())
}

func (i RouteParameterConstraintsArray) ToRouteParameterConstraintsArrayOutputWithContext(ctx context.Context) RouteParameterConstraintsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteParameterConstraintsArrayOutput)
}

type RouteParameterConstraintsOutput struct{ *pulumi.OutputState }

func (RouteParameterConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteParameterConstraints)(nil)).Elem()
}

func (o RouteParameterConstraintsOutput) ToRouteParameterConstraintsOutput() RouteParameterConstraintsOutput {
	return o
}

func (o RouteParameterConstraintsOutput) ToRouteParameterConstraintsOutputWithContext(ctx context.Context) RouteParameterConstraintsOutput {
	return o
}

func (o RouteParameterConstraintsOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v RouteParameterConstraints) bool { return v.Required }).(pulumi.BoolOutput)
}

type RouteParameterConstraintsArrayOutput struct{ *pulumi.OutputState }

func (RouteParameterConstraintsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteParameterConstraints)(nil)).Elem()
}

func (o RouteParameterConstraintsArrayOutput) ToRouteParameterConstraintsArrayOutput() RouteParameterConstraintsArrayOutput {
	return o
}

func (o RouteParameterConstraintsArrayOutput) ToRouteParameterConstraintsArrayOutputWithContext(ctx context.Context) RouteParameterConstraintsArrayOutput {
	return o
}

func (o RouteParameterConstraintsArrayOutput) Index(i pulumi.IntInput) RouteParameterConstraintsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteParameterConstraints {
		return vs[0].([]RouteParameterConstraints)[vs[1].(int)]
	}).(RouteParameterConstraintsOutput)
}

// Specifies whether the parameter is required.
type RouteResponseParameterConstraints struct {
	// Specifies whether the parameter is required.
	Required bool `pulumi:"required"`
}

// RouteResponseParameterConstraintsInput is an input type that accepts RouteResponseParameterConstraintsArgs and RouteResponseParameterConstraintsOutput values.
// You can construct a concrete instance of `RouteResponseParameterConstraintsInput` via:
//
//	RouteResponseParameterConstraintsArgs{...}
type RouteResponseParameterConstraintsInput interface {
	pulumi.Input

	ToRouteResponseParameterConstraintsOutput() RouteResponseParameterConstraintsOutput
	ToRouteResponseParameterConstraintsOutputWithContext(context.Context) RouteResponseParameterConstraintsOutput
}

// Specifies whether the parameter is required.
type RouteResponseParameterConstraintsArgs struct {
	// Specifies whether the parameter is required.
	Required pulumi.BoolInput `pulumi:"required"`
}

func (RouteResponseParameterConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteResponseParameterConstraints)(nil)).Elem()
}

func (i RouteResponseParameterConstraintsArgs) ToRouteResponseParameterConstraintsOutput() RouteResponseParameterConstraintsOutput {
	return i.ToRouteResponseParameterConstraintsOutputWithContext(context.Background())
}

func (i RouteResponseParameterConstraintsArgs) ToRouteResponseParameterConstraintsOutputWithContext(ctx context.Context) RouteResponseParameterConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteResponseParameterConstraintsOutput)
}

// RouteResponseParameterConstraintsMapInput is an input type that accepts RouteResponseParameterConstraintsMap and RouteResponseParameterConstraintsMapOutput values.
// You can construct a concrete instance of `RouteResponseParameterConstraintsMapInput` via:
//
//	RouteResponseParameterConstraintsMap{ "key": RouteResponseParameterConstraintsArgs{...} }
type RouteResponseParameterConstraintsMapInput interface {
	pulumi.Input

	ToRouteResponseParameterConstraintsMapOutput() RouteResponseParameterConstraintsMapOutput
	ToRouteResponseParameterConstraintsMapOutputWithContext(context.Context) RouteResponseParameterConstraintsMapOutput
}

type RouteResponseParameterConstraintsMap map[string]RouteResponseParameterConstraintsInput

func (RouteResponseParameterConstraintsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RouteResponseParameterConstraints)(nil)).Elem()
}

func (i RouteResponseParameterConstraintsMap) ToRouteResponseParameterConstraintsMapOutput() RouteResponseParameterConstraintsMapOutput {
	return i.ToRouteResponseParameterConstraintsMapOutputWithContext(context.Background())
}

func (i RouteResponseParameterConstraintsMap) ToRouteResponseParameterConstraintsMapOutputWithContext(ctx context.Context) RouteResponseParameterConstraintsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteResponseParameterConstraintsMapOutput)
}

// Specifies whether the parameter is required.
type RouteResponseParameterConstraintsOutput struct{ *pulumi.OutputState }

func (RouteResponseParameterConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteResponseParameterConstraints)(nil)).Elem()
}

func (o RouteResponseParameterConstraintsOutput) ToRouteResponseParameterConstraintsOutput() RouteResponseParameterConstraintsOutput {
	return o
}

func (o RouteResponseParameterConstraintsOutput) ToRouteResponseParameterConstraintsOutputWithContext(ctx context.Context) RouteResponseParameterConstraintsOutput {
	return o
}

// Specifies whether the parameter is required.
func (o RouteResponseParameterConstraintsOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v RouteResponseParameterConstraints) bool { return v.Required }).(pulumi.BoolOutput)
}

type RouteResponseParameterConstraintsMapOutput struct{ *pulumi.OutputState }

func (RouteResponseParameterConstraintsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RouteResponseParameterConstraints)(nil)).Elem()
}

func (o RouteResponseParameterConstraintsMapOutput) ToRouteResponseParameterConstraintsMapOutput() RouteResponseParameterConstraintsMapOutput {
	return o
}

func (o RouteResponseParameterConstraintsMapOutput) ToRouteResponseParameterConstraintsMapOutputWithContext(ctx context.Context) RouteResponseParameterConstraintsMapOutput {
	return o
}

func (o RouteResponseParameterConstraintsMapOutput) MapIndex(k pulumi.StringInput) RouteResponseParameterConstraintsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RouteResponseParameterConstraints {
		return vs[0].(map[string]RouteResponseParameterConstraints)[vs[1].(string)]
	}).(RouteResponseParameterConstraintsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiBodyS3LocationInput)(nil)).Elem(), ApiBodyS3LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiBodyS3LocationPtrInput)(nil)).Elem(), ApiBodyS3LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiCorsInput)(nil)).Elem(), ApiCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiCorsPtrInput)(nil)).Elem(), ApiCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizerJwtConfigurationInput)(nil)).Elem(), AuthorizerJwtConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizerJwtConfigurationPtrInput)(nil)).Elem(), AuthorizerJwtConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameConfigurationInput)(nil)).Elem(), DomainNameConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameConfigurationArrayInput)(nil)).Elem(), DomainNameConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameMutualTlsAuthenticationInput)(nil)).Elem(), DomainNameMutualTlsAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameMutualTlsAuthenticationPtrInput)(nil)).Elem(), DomainNameMutualTlsAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseParameterInput)(nil)).Elem(), IntegrationResponseParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseParameterArrayInput)(nil)).Elem(), IntegrationResponseParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseParameterMapInput)(nil)).Elem(), IntegrationResponseParameterMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseParameterMapMapInput)(nil)).Elem(), IntegrationResponseParameterMapMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTlsConfigInput)(nil)).Elem(), IntegrationTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTlsConfigPtrInput)(nil)).Elem(), IntegrationTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteParameterConstraintsInput)(nil)).Elem(), RouteParameterConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteParameterConstraintsArrayInput)(nil)).Elem(), RouteParameterConstraintsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteResponseParameterConstraintsInput)(nil)).Elem(), RouteResponseParameterConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteResponseParameterConstraintsMapInput)(nil)).Elem(), RouteResponseParameterConstraintsMap{})
	pulumi.RegisterOutputType(ApiBodyS3LocationOutput{})
	pulumi.RegisterOutputType(ApiBodyS3LocationPtrOutput{})
	pulumi.RegisterOutputType(ApiCorsOutput{})
	pulumi.RegisterOutputType(ApiCorsPtrOutput{})
	pulumi.RegisterOutputType(AuthorizerJwtConfigurationOutput{})
	pulumi.RegisterOutputType(AuthorizerJwtConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DomainNameConfigurationOutput{})
	pulumi.RegisterOutputType(DomainNameConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DomainNameMutualTlsAuthenticationOutput{})
	pulumi.RegisterOutputType(DomainNameMutualTlsAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(IntegrationResponseParameterOutput{})
	pulumi.RegisterOutputType(IntegrationResponseParameterArrayOutput{})
	pulumi.RegisterOutputType(IntegrationResponseParameterMapOutput{})
	pulumi.RegisterOutputType(IntegrationResponseParameterMapMapOutput{})
	pulumi.RegisterOutputType(IntegrationTlsConfigOutput{})
	pulumi.RegisterOutputType(IntegrationTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(RouteParameterConstraintsOutput{})
	pulumi.RegisterOutputType(RouteParameterConstraintsArrayOutput{})
	pulumi.RegisterOutputType(RouteResponseParameterConstraintsOutput{})
	pulumi.RegisterOutputType(RouteResponseParameterConstraintsMapOutput{})
}
