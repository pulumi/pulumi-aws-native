// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ApiGatewayV2::VpcLink“ resource creates a VPC link. Supported only for HTTP APIs. The VPC link status must transition from “PENDING“ to “AVAILABLE“ to successfully create a VPC link, which can take up to 10 minutes. To learn more, see [Working with VPC Links for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vpc-links.html) in the *API Gateway Developer Guide*.
type VpcLink struct {
	pulumi.CustomResourceState

	// The name of the VPC link.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of security group IDs for the VPC link.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// A list of subnet IDs to include in the VPC link.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// The collection of tags. Each tag element is associated with a given resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The VPC link ID.
	VpcLinkId pulumi.StringOutput `pulumi:"vpcLinkId"`
}

// NewVpcLink registers a new resource with the given unique name, arguments, and options.
func NewVpcLink(ctx *pulumi.Context,
	name string, args *VpcLinkArgs, opts ...pulumi.ResourceOption) (*VpcLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"securityGroupIds[*]",
		"subnetIds[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcLink
	err := ctx.RegisterResource("aws-native:apigatewayv2:VpcLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcLink gets an existing VpcLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcLinkState, opts ...pulumi.ResourceOption) (*VpcLink, error) {
	var resource VpcLink
	err := ctx.ReadResource("aws-native:apigatewayv2:VpcLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcLink resources.
type vpcLinkState struct {
}

type VpcLinkState struct {
}

func (VpcLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcLinkState)(nil)).Elem()
}

type vpcLinkArgs struct {
	// The name of the VPC link.
	Name *string `pulumi:"name"`
	// A list of security group IDs for the VPC link.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs to include in the VPC link.
	SubnetIds []string `pulumi:"subnetIds"`
	// The collection of tags. Each tag element is associated with a given resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VpcLink resource.
type VpcLinkArgs struct {
	// The name of the VPC link.
	Name pulumi.StringPtrInput
	// A list of security group IDs for the VPC link.
	SecurityGroupIds pulumi.StringArrayInput
	// A list of subnet IDs to include in the VPC link.
	SubnetIds pulumi.StringArrayInput
	// The collection of tags. Each tag element is associated with a given resource.
	Tags pulumi.StringMapInput
}

func (VpcLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcLinkArgs)(nil)).Elem()
}

type VpcLinkInput interface {
	pulumi.Input

	ToVpcLinkOutput() VpcLinkOutput
	ToVpcLinkOutputWithContext(ctx context.Context) VpcLinkOutput
}

func (*VpcLink) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcLink)(nil)).Elem()
}

func (i *VpcLink) ToVpcLinkOutput() VpcLinkOutput {
	return i.ToVpcLinkOutputWithContext(context.Background())
}

func (i *VpcLink) ToVpcLinkOutputWithContext(ctx context.Context) VpcLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcLinkOutput)
}

type VpcLinkOutput struct{ *pulumi.OutputState }

func (VpcLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcLink)(nil)).Elem()
}

func (o VpcLinkOutput) ToVpcLinkOutput() VpcLinkOutput {
	return o
}

func (o VpcLinkOutput) ToVpcLinkOutputWithContext(ctx context.Context) VpcLinkOutput {
	return o
}

// The name of the VPC link.
func (o VpcLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcLink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of security group IDs for the VPC link.
func (o VpcLinkOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcLink) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of subnet IDs to include in the VPC link.
func (o VpcLinkOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcLink) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The collection of tags. Each tag element is associated with a given resource.
func (o VpcLinkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcLink) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The VPC link ID.
func (o VpcLinkOutput) VpcLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcLink) pulumi.StringOutput { return v.VpcLinkId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcLinkInput)(nil)).Elem(), &VpcLink{})
	pulumi.RegisterOutputType(VpcLinkOutput{})
}
