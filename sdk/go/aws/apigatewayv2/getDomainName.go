// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGatewayV2::DomainName
func LookupDomainName(ctx *pulumi.Context, args *LookupDomainNameArgs, opts ...pulumi.InvokeOption) (*LookupDomainNameResult, error) {
	var rv LookupDomainNameResult
	err := ctx.Invoke("aws-native:apigatewayv2:getDomainName", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDomainNameArgs struct {
	Id string `pulumi:"id"`
}

type LookupDomainNameResult struct {
	DomainNameConfigurations []DomainNameConfiguration          `pulumi:"domainNameConfigurations"`
	Id                       *string                            `pulumi:"id"`
	MutualTlsAuthentication  *DomainNameMutualTlsAuthentication `pulumi:"mutualTlsAuthentication"`
	RegionalDomainName       *string                            `pulumi:"regionalDomainName"`
	RegionalHostedZoneId     *string                            `pulumi:"regionalHostedZoneId"`
	Tags                     interface{}                        `pulumi:"tags"`
}

func LookupDomainNameOutput(ctx *pulumi.Context, args LookupDomainNameOutputArgs, opts ...pulumi.InvokeOption) LookupDomainNameResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainNameResult, error) {
			args := v.(LookupDomainNameArgs)
			r, err := LookupDomainName(ctx, &args, opts...)
			var s LookupDomainNameResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDomainNameResultOutput)
}

type LookupDomainNameOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDomainNameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainNameArgs)(nil)).Elem()
}

type LookupDomainNameResultOutput struct{ *pulumi.OutputState }

func (LookupDomainNameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainNameResult)(nil)).Elem()
}

func (o LookupDomainNameResultOutput) ToLookupDomainNameResultOutput() LookupDomainNameResultOutput {
	return o
}

func (o LookupDomainNameResultOutput) ToLookupDomainNameResultOutputWithContext(ctx context.Context) LookupDomainNameResultOutput {
	return o
}

func (o LookupDomainNameResultOutput) DomainNameConfigurations() DomainNameConfigurationArrayOutput {
	return o.ApplyT(func(v LookupDomainNameResult) []DomainNameConfiguration { return v.DomainNameConfigurations }).(DomainNameConfigurationArrayOutput)
}

func (o LookupDomainNameResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainNameResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupDomainNameResultOutput) MutualTlsAuthentication() DomainNameMutualTlsAuthenticationPtrOutput {
	return o.ApplyT(func(v LookupDomainNameResult) *DomainNameMutualTlsAuthentication { return v.MutualTlsAuthentication }).(DomainNameMutualTlsAuthenticationPtrOutput)
}

func (o LookupDomainNameResultOutput) RegionalDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainNameResult) *string { return v.RegionalDomainName }).(pulumi.StringPtrOutput)
}

func (o LookupDomainNameResultOutput) RegionalHostedZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainNameResult) *string { return v.RegionalHostedZoneId }).(pulumi.StringPtrOutput)
}

func (o LookupDomainNameResultOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupDomainNameResult) interface{} { return v.Tags }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainNameResultOutput{})
}
