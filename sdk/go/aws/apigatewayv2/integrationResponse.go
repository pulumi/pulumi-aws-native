// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGatewayV2::IntegrationResponse
//
// Deprecated: IntegrationResponse is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type IntegrationResponse struct {
	pulumi.CustomResourceState

	ApiId                       pulumi.StringOutput    `pulumi:"apiId"`
	ContentHandlingStrategy     pulumi.StringPtrOutput `pulumi:"contentHandlingStrategy"`
	IntegrationId               pulumi.StringOutput    `pulumi:"integrationId"`
	IntegrationResponseKey      pulumi.StringOutput    `pulumi:"integrationResponseKey"`
	ResponseParameters          pulumi.AnyOutput       `pulumi:"responseParameters"`
	ResponseTemplates           pulumi.AnyOutput       `pulumi:"responseTemplates"`
	TemplateSelectionExpression pulumi.StringPtrOutput `pulumi:"templateSelectionExpression"`
}

// NewIntegrationResponse registers a new resource with the given unique name, arguments, and options.
func NewIntegrationResponse(ctx *pulumi.Context,
	name string, args *IntegrationResponseArgs, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.IntegrationResponseKey == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationResponseKey'")
	}
	var resource IntegrationResponse
	err := ctx.RegisterResource("aws-native:apigatewayv2:IntegrationResponse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationResponse gets an existing IntegrationResponse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationResponse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationResponseState, opts ...pulumi.ResourceOption) (*IntegrationResponse, error) {
	var resource IntegrationResponse
	err := ctx.ReadResource("aws-native:apigatewayv2:IntegrationResponse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationResponse resources.
type integrationResponseState struct {
}

type IntegrationResponseState struct {
}

func (IntegrationResponseState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseState)(nil)).Elem()
}

type integrationResponseArgs struct {
	ApiId                       string      `pulumi:"apiId"`
	ContentHandlingStrategy     *string     `pulumi:"contentHandlingStrategy"`
	IntegrationId               string      `pulumi:"integrationId"`
	IntegrationResponseKey      string      `pulumi:"integrationResponseKey"`
	ResponseParameters          interface{} `pulumi:"responseParameters"`
	ResponseTemplates           interface{} `pulumi:"responseTemplates"`
	TemplateSelectionExpression *string     `pulumi:"templateSelectionExpression"`
}

// The set of arguments for constructing a IntegrationResponse resource.
type IntegrationResponseArgs struct {
	ApiId                       pulumi.StringInput
	ContentHandlingStrategy     pulumi.StringPtrInput
	IntegrationId               pulumi.StringInput
	IntegrationResponseKey      pulumi.StringInput
	ResponseParameters          pulumi.Input
	ResponseTemplates           pulumi.Input
	TemplateSelectionExpression pulumi.StringPtrInput
}

func (IntegrationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationResponseArgs)(nil)).Elem()
}

type IntegrationResponseInput interface {
	pulumi.Input

	ToIntegrationResponseOutput() IntegrationResponseOutput
	ToIntegrationResponseOutputWithContext(ctx context.Context) IntegrationResponseOutput
}

func (*IntegrationResponse) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponse)(nil))
}

func (i *IntegrationResponse) ToIntegrationResponseOutput() IntegrationResponseOutput {
	return i.ToIntegrationResponseOutputWithContext(context.Background())
}

func (i *IntegrationResponse) ToIntegrationResponseOutputWithContext(ctx context.Context) IntegrationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationResponseOutput)
}

type IntegrationResponseOutput struct{ *pulumi.OutputState }

func (IntegrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationResponse)(nil))
}

func (o IntegrationResponseOutput) ToIntegrationResponseOutput() IntegrationResponseOutput {
	return o
}

func (o IntegrationResponseOutput) ToIntegrationResponseOutputWithContext(ctx context.Context) IntegrationResponseOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationResponseInput)(nil)).Elem(), &IntegrationResponse{})
	pulumi.RegisterOutputType(IntegrationResponseOutput{})
}
