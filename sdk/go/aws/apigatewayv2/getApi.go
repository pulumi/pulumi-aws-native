// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::ApiGatewayV2::Api
func LookupApi(ctx *pulumi.Context, args *LookupApiArgs, opts ...pulumi.InvokeOption) (*LookupApiResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApiResult
	err := ctx.Invoke("aws-native:apigatewayv2:getApi", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApiArgs struct {
	ApiId string `pulumi:"apiId"`
}

type LookupApiResult struct {
	ApiEndpoint               *string  `pulumi:"apiEndpoint"`
	ApiId                     *string  `pulumi:"apiId"`
	ApiKeySelectionExpression *string  `pulumi:"apiKeySelectionExpression"`
	CorsConfiguration         *ApiCors `pulumi:"corsConfiguration"`
	Description               *string  `pulumi:"description"`
	DisableExecuteApiEndpoint *bool    `pulumi:"disableExecuteApiEndpoint"`
	Name                      *string  `pulumi:"name"`
	RouteSelectionExpression  *string  `pulumi:"routeSelectionExpression"`
	// This resource type use map for Tags, suggest to use List of Tag
	Tags    interface{} `pulumi:"tags"`
	Version *string     `pulumi:"version"`
}

func LookupApiOutput(ctx *pulumi.Context, args LookupApiOutputArgs, opts ...pulumi.InvokeOption) LookupApiResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApiResult, error) {
			args := v.(LookupApiArgs)
			r, err := LookupApi(ctx, &args, opts...)
			var s LookupApiResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApiResultOutput)
}

type LookupApiOutputArgs struct {
	ApiId pulumi.StringInput `pulumi:"apiId"`
}

func (LookupApiOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiArgs)(nil)).Elem()
}

type LookupApiResultOutput struct{ *pulumi.OutputState }

func (LookupApiResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiResult)(nil)).Elem()
}

func (o LookupApiResultOutput) ToLookupApiResultOutput() LookupApiResultOutput {
	return o
}

func (o LookupApiResultOutput) ToLookupApiResultOutputWithContext(ctx context.Context) LookupApiResultOutput {
	return o
}

func (o LookupApiResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupApiResult] {
	return pulumix.Output[LookupApiResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupApiResultOutput) ApiEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.ApiEndpoint }).(pulumi.StringPtrOutput)
}

func (o LookupApiResultOutput) ApiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.ApiId }).(pulumi.StringPtrOutput)
}

func (o LookupApiResultOutput) ApiKeySelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.ApiKeySelectionExpression }).(pulumi.StringPtrOutput)
}

func (o LookupApiResultOutput) CorsConfiguration() ApiCorsPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *ApiCors { return v.CorsConfiguration }).(ApiCorsPtrOutput)
}

func (o LookupApiResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupApiResultOutput) DisableExecuteApiEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *bool { return v.DisableExecuteApiEndpoint }).(pulumi.BoolPtrOutput)
}

func (o LookupApiResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupApiResultOutput) RouteSelectionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.RouteSelectionExpression }).(pulumi.StringPtrOutput)
}

// This resource type use map for Tags, suggest to use List of Tag
func (o LookupApiResultOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupApiResult) interface{} { return v.Tags }).(pulumi.AnyOutput)
}

func (o LookupApiResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiResultOutput{})
}
