// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::B2BI::Profile Resource Type
type Profile struct {
	pulumi.CustomResourceState

	BusinessName pulumi.StringOutput    `pulumi:"businessName"`
	CreatedAt    pulumi.StringOutput    `pulumi:"createdAt"`
	Email        pulumi.StringPtrOutput `pulumi:"email"`
	LogGroupName pulumi.StringOutput    `pulumi:"logGroupName"`
	Logging      ProfileLoggingOutput   `pulumi:"logging"`
	ModifiedAt   pulumi.StringOutput    `pulumi:"modifiedAt"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	Phone        pulumi.StringOutput    `pulumi:"phone"`
	ProfileArn   pulumi.StringOutput    `pulumi:"profileArn"`
	ProfileId    pulumi.StringOutput    `pulumi:"profileId"`
	Tags         ProfileTagArrayOutput  `pulumi:"tags"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BusinessName == nil {
		return nil, errors.New("invalid value for required argument 'BusinessName'")
	}
	if args.Logging == nil {
		return nil, errors.New("invalid value for required argument 'Logging'")
	}
	if args.Phone == nil {
		return nil, errors.New("invalid value for required argument 'Phone'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"logging",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("aws-native:b2bi:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("aws-native:b2bi:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
}

type ProfileState struct {
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	BusinessName string         `pulumi:"businessName"`
	Email        *string        `pulumi:"email"`
	Logging      ProfileLogging `pulumi:"logging"`
	Name         *string        `pulumi:"name"`
	Phone        string         `pulumi:"phone"`
	Tags         []ProfileTag   `pulumi:"tags"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	BusinessName pulumi.StringInput
	Email        pulumi.StringPtrInput
	Logging      ProfileLoggingInput
	Name         pulumi.StringPtrInput
	Phone        pulumi.StringInput
	Tags         ProfileTagArrayInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

func (i *Profile) ToOutput(ctx context.Context) pulumix.Output[*Profile] {
	return pulumix.Output[*Profile]{
		OutputState: i.ToProfileOutputWithContext(ctx).OutputState,
	}
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

func (o ProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*Profile] {
	return pulumix.Output[*Profile]{
		OutputState: o.OutputState,
	}
}

func (o ProfileOutput) BusinessName() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.BusinessName }).(pulumi.StringOutput)
}

func (o ProfileOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ProfileOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

func (o ProfileOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

func (o ProfileOutput) Logging() ProfileLoggingOutput {
	return o.ApplyT(func(v *Profile) ProfileLoggingOutput { return v.Logging }).(ProfileLoggingOutput)
}

func (o ProfileOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProfileOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Phone }).(pulumi.StringOutput)
}

func (o ProfileOutput) ProfileArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ProfileArn }).(pulumi.StringOutput)
}

func (o ProfileOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

func (o ProfileOutput) Tags() ProfileTagArrayOutput {
	return o.ApplyT(func(v *Profile) ProfileTagArrayOutput { return v.Tags }).(ProfileTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterOutputType(ProfileOutput{})
}
