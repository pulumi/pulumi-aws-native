// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CapabilityConfiguration0Properties struct {
	Edi CapabilityEdiConfiguration `pulumi:"edi"`
}

type CapabilityConfigurationProperties struct {
	Edi CapabilityEdiConfiguration `pulumi:"edi"`
}

// CapabilityConfigurationPropertiesInput is an input type that accepts CapabilityConfigurationPropertiesArgs and CapabilityConfigurationPropertiesOutput values.
// You can construct a concrete instance of `CapabilityConfigurationPropertiesInput` via:
//
//	CapabilityConfigurationPropertiesArgs{...}
type CapabilityConfigurationPropertiesInput interface {
	pulumi.Input

	ToCapabilityConfigurationPropertiesOutput() CapabilityConfigurationPropertiesOutput
	ToCapabilityConfigurationPropertiesOutputWithContext(context.Context) CapabilityConfigurationPropertiesOutput
}

type CapabilityConfigurationPropertiesArgs struct {
	Edi CapabilityEdiConfigurationInput `pulumi:"edi"`
}

func (CapabilityConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityConfigurationProperties)(nil)).Elem()
}

func (i CapabilityConfigurationPropertiesArgs) ToCapabilityConfigurationPropertiesOutput() CapabilityConfigurationPropertiesOutput {
	return i.ToCapabilityConfigurationPropertiesOutputWithContext(context.Background())
}

func (i CapabilityConfigurationPropertiesArgs) ToCapabilityConfigurationPropertiesOutputWithContext(ctx context.Context) CapabilityConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityConfigurationPropertiesOutput)
}

type CapabilityConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (CapabilityConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityConfigurationProperties)(nil)).Elem()
}

func (o CapabilityConfigurationPropertiesOutput) ToCapabilityConfigurationPropertiesOutput() CapabilityConfigurationPropertiesOutput {
	return o
}

func (o CapabilityConfigurationPropertiesOutput) ToCapabilityConfigurationPropertiesOutputWithContext(ctx context.Context) CapabilityConfigurationPropertiesOutput {
	return o
}

func (o CapabilityConfigurationPropertiesOutput) Edi() CapabilityEdiConfigurationOutput {
	return o.ApplyT(func(v CapabilityConfigurationProperties) CapabilityEdiConfiguration { return v.Edi }).(CapabilityEdiConfigurationOutput)
}

type CapabilityConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CapabilityConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityConfigurationProperties)(nil)).Elem()
}

func (o CapabilityConfigurationPropertiesPtrOutput) ToCapabilityConfigurationPropertiesPtrOutput() CapabilityConfigurationPropertiesPtrOutput {
	return o
}

func (o CapabilityConfigurationPropertiesPtrOutput) ToCapabilityConfigurationPropertiesPtrOutputWithContext(ctx context.Context) CapabilityConfigurationPropertiesPtrOutput {
	return o
}

func (o CapabilityConfigurationPropertiesPtrOutput) Elem() CapabilityConfigurationPropertiesOutput {
	return o.ApplyT(func(v *CapabilityConfigurationProperties) CapabilityConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret CapabilityConfigurationProperties
		return ret
	}).(CapabilityConfigurationPropertiesOutput)
}

func (o CapabilityConfigurationPropertiesPtrOutput) Edi() CapabilityEdiConfigurationPtrOutput {
	return o.ApplyT(func(v *CapabilityConfigurationProperties) *CapabilityEdiConfiguration {
		if v == nil {
			return nil
		}
		return &v.Edi
	}).(CapabilityEdiConfigurationPtrOutput)
}

type CapabilityEdiConfiguration struct {
	CapabilityDirection *CapabilityDirection        `pulumi:"capabilityDirection"`
	InputLocation       CapabilityS3Location        `pulumi:"inputLocation"`
	OutputLocation      CapabilityS3Location        `pulumi:"outputLocation"`
	TransformerId       string                      `pulumi:"transformerId"`
	Type                CapabilityEdiTypeProperties `pulumi:"type"`
}

// CapabilityEdiConfigurationInput is an input type that accepts CapabilityEdiConfigurationArgs and CapabilityEdiConfigurationOutput values.
// You can construct a concrete instance of `CapabilityEdiConfigurationInput` via:
//
//	CapabilityEdiConfigurationArgs{...}
type CapabilityEdiConfigurationInput interface {
	pulumi.Input

	ToCapabilityEdiConfigurationOutput() CapabilityEdiConfigurationOutput
	ToCapabilityEdiConfigurationOutputWithContext(context.Context) CapabilityEdiConfigurationOutput
}

type CapabilityEdiConfigurationArgs struct {
	CapabilityDirection CapabilityDirectionPtrInput      `pulumi:"capabilityDirection"`
	InputLocation       CapabilityS3LocationInput        `pulumi:"inputLocation"`
	OutputLocation      CapabilityS3LocationInput        `pulumi:"outputLocation"`
	TransformerId       pulumi.StringInput               `pulumi:"transformerId"`
	Type                CapabilityEdiTypePropertiesInput `pulumi:"type"`
}

func (CapabilityEdiConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiConfiguration)(nil)).Elem()
}

func (i CapabilityEdiConfigurationArgs) ToCapabilityEdiConfigurationOutput() CapabilityEdiConfigurationOutput {
	return i.ToCapabilityEdiConfigurationOutputWithContext(context.Background())
}

func (i CapabilityEdiConfigurationArgs) ToCapabilityEdiConfigurationOutputWithContext(ctx context.Context) CapabilityEdiConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityEdiConfigurationOutput)
}

type CapabilityEdiConfigurationOutput struct{ *pulumi.OutputState }

func (CapabilityEdiConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiConfiguration)(nil)).Elem()
}

func (o CapabilityEdiConfigurationOutput) ToCapabilityEdiConfigurationOutput() CapabilityEdiConfigurationOutput {
	return o
}

func (o CapabilityEdiConfigurationOutput) ToCapabilityEdiConfigurationOutputWithContext(ctx context.Context) CapabilityEdiConfigurationOutput {
	return o
}

func (o CapabilityEdiConfigurationOutput) CapabilityDirection() CapabilityDirectionPtrOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) *CapabilityDirection { return v.CapabilityDirection }).(CapabilityDirectionPtrOutput)
}

func (o CapabilityEdiConfigurationOutput) InputLocation() CapabilityS3LocationOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) CapabilityS3Location { return v.InputLocation }).(CapabilityS3LocationOutput)
}

func (o CapabilityEdiConfigurationOutput) OutputLocation() CapabilityS3LocationOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) CapabilityS3Location { return v.OutputLocation }).(CapabilityS3LocationOutput)
}

func (o CapabilityEdiConfigurationOutput) TransformerId() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) string { return v.TransformerId }).(pulumi.StringOutput)
}

func (o CapabilityEdiConfigurationOutput) Type() CapabilityEdiTypePropertiesOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) CapabilityEdiTypeProperties { return v.Type }).(CapabilityEdiTypePropertiesOutput)
}

type CapabilityEdiConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CapabilityEdiConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityEdiConfiguration)(nil)).Elem()
}

func (o CapabilityEdiConfigurationPtrOutput) ToCapabilityEdiConfigurationPtrOutput() CapabilityEdiConfigurationPtrOutput {
	return o
}

func (o CapabilityEdiConfigurationPtrOutput) ToCapabilityEdiConfigurationPtrOutputWithContext(ctx context.Context) CapabilityEdiConfigurationPtrOutput {
	return o
}

func (o CapabilityEdiConfigurationPtrOutput) Elem() CapabilityEdiConfigurationOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) CapabilityEdiConfiguration {
		if v != nil {
			return *v
		}
		var ret CapabilityEdiConfiguration
		return ret
	}).(CapabilityEdiConfigurationOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) CapabilityDirection() CapabilityDirectionPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *CapabilityDirection {
		if v == nil {
			return nil
		}
		return v.CapabilityDirection
	}).(CapabilityDirectionPtrOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) InputLocation() CapabilityS3LocationPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *CapabilityS3Location {
		if v == nil {
			return nil
		}
		return &v.InputLocation
	}).(CapabilityS3LocationPtrOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) OutputLocation() CapabilityS3LocationPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *CapabilityS3Location {
		if v == nil {
			return nil
		}
		return &v.OutputLocation
	}).(CapabilityS3LocationPtrOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) TransformerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.TransformerId
	}).(pulumi.StringPtrOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) Type() CapabilityEdiTypePropertiesPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *CapabilityEdiTypeProperties {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(CapabilityEdiTypePropertiesPtrOutput)
}

type CapabilityEdiType0Properties struct {
	X12Details CapabilityX12Details `pulumi:"x12Details"`
}

type CapabilityEdiTypeProperties struct {
	X12Details CapabilityX12Details `pulumi:"x12Details"`
}

// CapabilityEdiTypePropertiesInput is an input type that accepts CapabilityEdiTypePropertiesArgs and CapabilityEdiTypePropertiesOutput values.
// You can construct a concrete instance of `CapabilityEdiTypePropertiesInput` via:
//
//	CapabilityEdiTypePropertiesArgs{...}
type CapabilityEdiTypePropertiesInput interface {
	pulumi.Input

	ToCapabilityEdiTypePropertiesOutput() CapabilityEdiTypePropertiesOutput
	ToCapabilityEdiTypePropertiesOutputWithContext(context.Context) CapabilityEdiTypePropertiesOutput
}

type CapabilityEdiTypePropertiesArgs struct {
	X12Details CapabilityX12DetailsInput `pulumi:"x12Details"`
}

func (CapabilityEdiTypePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiTypeProperties)(nil)).Elem()
}

func (i CapabilityEdiTypePropertiesArgs) ToCapabilityEdiTypePropertiesOutput() CapabilityEdiTypePropertiesOutput {
	return i.ToCapabilityEdiTypePropertiesOutputWithContext(context.Background())
}

func (i CapabilityEdiTypePropertiesArgs) ToCapabilityEdiTypePropertiesOutputWithContext(ctx context.Context) CapabilityEdiTypePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityEdiTypePropertiesOutput)
}

type CapabilityEdiTypePropertiesOutput struct{ *pulumi.OutputState }

func (CapabilityEdiTypePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiTypeProperties)(nil)).Elem()
}

func (o CapabilityEdiTypePropertiesOutput) ToCapabilityEdiTypePropertiesOutput() CapabilityEdiTypePropertiesOutput {
	return o
}

func (o CapabilityEdiTypePropertiesOutput) ToCapabilityEdiTypePropertiesOutputWithContext(ctx context.Context) CapabilityEdiTypePropertiesOutput {
	return o
}

func (o CapabilityEdiTypePropertiesOutput) X12Details() CapabilityX12DetailsOutput {
	return o.ApplyT(func(v CapabilityEdiTypeProperties) CapabilityX12Details { return v.X12Details }).(CapabilityX12DetailsOutput)
}

type CapabilityEdiTypePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CapabilityEdiTypePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityEdiTypeProperties)(nil)).Elem()
}

func (o CapabilityEdiTypePropertiesPtrOutput) ToCapabilityEdiTypePropertiesPtrOutput() CapabilityEdiTypePropertiesPtrOutput {
	return o
}

func (o CapabilityEdiTypePropertiesPtrOutput) ToCapabilityEdiTypePropertiesPtrOutputWithContext(ctx context.Context) CapabilityEdiTypePropertiesPtrOutput {
	return o
}

func (o CapabilityEdiTypePropertiesPtrOutput) Elem() CapabilityEdiTypePropertiesOutput {
	return o.ApplyT(func(v *CapabilityEdiTypeProperties) CapabilityEdiTypeProperties {
		if v != nil {
			return *v
		}
		var ret CapabilityEdiTypeProperties
		return ret
	}).(CapabilityEdiTypePropertiesOutput)
}

func (o CapabilityEdiTypePropertiesPtrOutput) X12Details() CapabilityX12DetailsPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiTypeProperties) *CapabilityX12Details {
		if v == nil {
			return nil
		}
		return &v.X12Details
	}).(CapabilityX12DetailsPtrOutput)
}

type CapabilityS3Location struct {
	BucketName *string `pulumi:"bucketName"`
	Key        *string `pulumi:"key"`
}

// CapabilityS3LocationInput is an input type that accepts CapabilityS3LocationArgs and CapabilityS3LocationOutput values.
// You can construct a concrete instance of `CapabilityS3LocationInput` via:
//
//	CapabilityS3LocationArgs{...}
type CapabilityS3LocationInput interface {
	pulumi.Input

	ToCapabilityS3LocationOutput() CapabilityS3LocationOutput
	ToCapabilityS3LocationOutputWithContext(context.Context) CapabilityS3LocationOutput
}

type CapabilityS3LocationArgs struct {
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	Key        pulumi.StringPtrInput `pulumi:"key"`
}

func (CapabilityS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityS3Location)(nil)).Elem()
}

func (i CapabilityS3LocationArgs) ToCapabilityS3LocationOutput() CapabilityS3LocationOutput {
	return i.ToCapabilityS3LocationOutputWithContext(context.Background())
}

func (i CapabilityS3LocationArgs) ToCapabilityS3LocationOutputWithContext(ctx context.Context) CapabilityS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityS3LocationOutput)
}

// CapabilityS3LocationArrayInput is an input type that accepts CapabilityS3LocationArray and CapabilityS3LocationArrayOutput values.
// You can construct a concrete instance of `CapabilityS3LocationArrayInput` via:
//
//	CapabilityS3LocationArray{ CapabilityS3LocationArgs{...} }
type CapabilityS3LocationArrayInput interface {
	pulumi.Input

	ToCapabilityS3LocationArrayOutput() CapabilityS3LocationArrayOutput
	ToCapabilityS3LocationArrayOutputWithContext(context.Context) CapabilityS3LocationArrayOutput
}

type CapabilityS3LocationArray []CapabilityS3LocationInput

func (CapabilityS3LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityS3Location)(nil)).Elem()
}

func (i CapabilityS3LocationArray) ToCapabilityS3LocationArrayOutput() CapabilityS3LocationArrayOutput {
	return i.ToCapabilityS3LocationArrayOutputWithContext(context.Background())
}

func (i CapabilityS3LocationArray) ToCapabilityS3LocationArrayOutputWithContext(ctx context.Context) CapabilityS3LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityS3LocationArrayOutput)
}

type CapabilityS3LocationOutput struct{ *pulumi.OutputState }

func (CapabilityS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityS3Location)(nil)).Elem()
}

func (o CapabilityS3LocationOutput) ToCapabilityS3LocationOutput() CapabilityS3LocationOutput {
	return o
}

func (o CapabilityS3LocationOutput) ToCapabilityS3LocationOutputWithContext(ctx context.Context) CapabilityS3LocationOutput {
	return o
}

func (o CapabilityS3LocationOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityS3Location) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o CapabilityS3LocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityS3Location) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type CapabilityS3LocationPtrOutput struct{ *pulumi.OutputState }

func (CapabilityS3LocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityS3Location)(nil)).Elem()
}

func (o CapabilityS3LocationPtrOutput) ToCapabilityS3LocationPtrOutput() CapabilityS3LocationPtrOutput {
	return o
}

func (o CapabilityS3LocationPtrOutput) ToCapabilityS3LocationPtrOutputWithContext(ctx context.Context) CapabilityS3LocationPtrOutput {
	return o
}

func (o CapabilityS3LocationPtrOutput) Elem() CapabilityS3LocationOutput {
	return o.ApplyT(func(v *CapabilityS3Location) CapabilityS3Location {
		if v != nil {
			return *v
		}
		var ret CapabilityS3Location
		return ret
	}).(CapabilityS3LocationOutput)
}

func (o CapabilityS3LocationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapabilityS3Location) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o CapabilityS3LocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapabilityS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type CapabilityS3LocationArrayOutput struct{ *pulumi.OutputState }

func (CapabilityS3LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityS3Location)(nil)).Elem()
}

func (o CapabilityS3LocationArrayOutput) ToCapabilityS3LocationArrayOutput() CapabilityS3LocationArrayOutput {
	return o
}

func (o CapabilityS3LocationArrayOutput) ToCapabilityS3LocationArrayOutputWithContext(ctx context.Context) CapabilityS3LocationArrayOutput {
	return o
}

func (o CapabilityS3LocationArrayOutput) Index(i pulumi.IntInput) CapabilityS3LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapabilityS3Location {
		return vs[0].([]CapabilityS3Location)[vs[1].(int)]
	}).(CapabilityS3LocationOutput)
}

type CapabilityTag struct {
	// Specifies the name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name that you create.
	Value string `pulumi:"value"`
}

type CapabilityX12Details struct {
	TransactionSet *CapabilityX12TransactionSet `pulumi:"transactionSet"`
	Version        *CapabilityX12Version        `pulumi:"version"`
}

// CapabilityX12DetailsInput is an input type that accepts CapabilityX12DetailsArgs and CapabilityX12DetailsOutput values.
// You can construct a concrete instance of `CapabilityX12DetailsInput` via:
//
//	CapabilityX12DetailsArgs{...}
type CapabilityX12DetailsInput interface {
	pulumi.Input

	ToCapabilityX12DetailsOutput() CapabilityX12DetailsOutput
	ToCapabilityX12DetailsOutputWithContext(context.Context) CapabilityX12DetailsOutput
}

type CapabilityX12DetailsArgs struct {
	TransactionSet CapabilityX12TransactionSetPtrInput `pulumi:"transactionSet"`
	Version        CapabilityX12VersionPtrInput        `pulumi:"version"`
}

func (CapabilityX12DetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12Details)(nil)).Elem()
}

func (i CapabilityX12DetailsArgs) ToCapabilityX12DetailsOutput() CapabilityX12DetailsOutput {
	return i.ToCapabilityX12DetailsOutputWithContext(context.Background())
}

func (i CapabilityX12DetailsArgs) ToCapabilityX12DetailsOutputWithContext(ctx context.Context) CapabilityX12DetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityX12DetailsOutput)
}

type CapabilityX12DetailsOutput struct{ *pulumi.OutputState }

func (CapabilityX12DetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12Details)(nil)).Elem()
}

func (o CapabilityX12DetailsOutput) ToCapabilityX12DetailsOutput() CapabilityX12DetailsOutput {
	return o
}

func (o CapabilityX12DetailsOutput) ToCapabilityX12DetailsOutputWithContext(ctx context.Context) CapabilityX12DetailsOutput {
	return o
}

func (o CapabilityX12DetailsOutput) TransactionSet() CapabilityX12TransactionSetPtrOutput {
	return o.ApplyT(func(v CapabilityX12Details) *CapabilityX12TransactionSet { return v.TransactionSet }).(CapabilityX12TransactionSetPtrOutput)
}

func (o CapabilityX12DetailsOutput) Version() CapabilityX12VersionPtrOutput {
	return o.ApplyT(func(v CapabilityX12Details) *CapabilityX12Version { return v.Version }).(CapabilityX12VersionPtrOutput)
}

type CapabilityX12DetailsPtrOutput struct{ *pulumi.OutputState }

func (CapabilityX12DetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityX12Details)(nil)).Elem()
}

func (o CapabilityX12DetailsPtrOutput) ToCapabilityX12DetailsPtrOutput() CapabilityX12DetailsPtrOutput {
	return o
}

func (o CapabilityX12DetailsPtrOutput) ToCapabilityX12DetailsPtrOutputWithContext(ctx context.Context) CapabilityX12DetailsPtrOutput {
	return o
}

func (o CapabilityX12DetailsPtrOutput) Elem() CapabilityX12DetailsOutput {
	return o.ApplyT(func(v *CapabilityX12Details) CapabilityX12Details {
		if v != nil {
			return *v
		}
		var ret CapabilityX12Details
		return ret
	}).(CapabilityX12DetailsOutput)
}

func (o CapabilityX12DetailsPtrOutput) TransactionSet() CapabilityX12TransactionSetPtrOutput {
	return o.ApplyT(func(v *CapabilityX12Details) *CapabilityX12TransactionSet {
		if v == nil {
			return nil
		}
		return v.TransactionSet
	}).(CapabilityX12TransactionSetPtrOutput)
}

func (o CapabilityX12DetailsPtrOutput) Version() CapabilityX12VersionPtrOutput {
	return o.ApplyT(func(v *CapabilityX12Details) *CapabilityX12Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(CapabilityX12VersionPtrOutput)
}

type PartnershipCapabilityOptions struct {
	// A structure that contains the outbound EDI options.
	OutboundEdi *PartnershipOutboundEdiOptionsProperties `pulumi:"outboundEdi"`
}

// PartnershipCapabilityOptionsInput is an input type that accepts PartnershipCapabilityOptionsArgs and PartnershipCapabilityOptionsOutput values.
// You can construct a concrete instance of `PartnershipCapabilityOptionsInput` via:
//
//	PartnershipCapabilityOptionsArgs{...}
type PartnershipCapabilityOptionsInput interface {
	pulumi.Input

	ToPartnershipCapabilityOptionsOutput() PartnershipCapabilityOptionsOutput
	ToPartnershipCapabilityOptionsOutputWithContext(context.Context) PartnershipCapabilityOptionsOutput
}

type PartnershipCapabilityOptionsArgs struct {
	// A structure that contains the outbound EDI options.
	OutboundEdi PartnershipOutboundEdiOptionsPropertiesPtrInput `pulumi:"outboundEdi"`
}

func (PartnershipCapabilityOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipCapabilityOptions)(nil)).Elem()
}

func (i PartnershipCapabilityOptionsArgs) ToPartnershipCapabilityOptionsOutput() PartnershipCapabilityOptionsOutput {
	return i.ToPartnershipCapabilityOptionsOutputWithContext(context.Background())
}

func (i PartnershipCapabilityOptionsArgs) ToPartnershipCapabilityOptionsOutputWithContext(ctx context.Context) PartnershipCapabilityOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipCapabilityOptionsOutput)
}

func (i PartnershipCapabilityOptionsArgs) ToPartnershipCapabilityOptionsPtrOutput() PartnershipCapabilityOptionsPtrOutput {
	return i.ToPartnershipCapabilityOptionsPtrOutputWithContext(context.Background())
}

func (i PartnershipCapabilityOptionsArgs) ToPartnershipCapabilityOptionsPtrOutputWithContext(ctx context.Context) PartnershipCapabilityOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipCapabilityOptionsOutput).ToPartnershipCapabilityOptionsPtrOutputWithContext(ctx)
}

// PartnershipCapabilityOptionsPtrInput is an input type that accepts PartnershipCapabilityOptionsArgs, PartnershipCapabilityOptionsPtr and PartnershipCapabilityOptionsPtrOutput values.
// You can construct a concrete instance of `PartnershipCapabilityOptionsPtrInput` via:
//
//	        PartnershipCapabilityOptionsArgs{...}
//
//	or:
//
//	        nil
type PartnershipCapabilityOptionsPtrInput interface {
	pulumi.Input

	ToPartnershipCapabilityOptionsPtrOutput() PartnershipCapabilityOptionsPtrOutput
	ToPartnershipCapabilityOptionsPtrOutputWithContext(context.Context) PartnershipCapabilityOptionsPtrOutput
}

type partnershipCapabilityOptionsPtrType PartnershipCapabilityOptionsArgs

func PartnershipCapabilityOptionsPtr(v *PartnershipCapabilityOptionsArgs) PartnershipCapabilityOptionsPtrInput {
	return (*partnershipCapabilityOptionsPtrType)(v)
}

func (*partnershipCapabilityOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipCapabilityOptions)(nil)).Elem()
}

func (i *partnershipCapabilityOptionsPtrType) ToPartnershipCapabilityOptionsPtrOutput() PartnershipCapabilityOptionsPtrOutput {
	return i.ToPartnershipCapabilityOptionsPtrOutputWithContext(context.Background())
}

func (i *partnershipCapabilityOptionsPtrType) ToPartnershipCapabilityOptionsPtrOutputWithContext(ctx context.Context) PartnershipCapabilityOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipCapabilityOptionsPtrOutput)
}

type PartnershipCapabilityOptionsOutput struct{ *pulumi.OutputState }

func (PartnershipCapabilityOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipCapabilityOptions)(nil)).Elem()
}

func (o PartnershipCapabilityOptionsOutput) ToPartnershipCapabilityOptionsOutput() PartnershipCapabilityOptionsOutput {
	return o
}

func (o PartnershipCapabilityOptionsOutput) ToPartnershipCapabilityOptionsOutputWithContext(ctx context.Context) PartnershipCapabilityOptionsOutput {
	return o
}

func (o PartnershipCapabilityOptionsOutput) ToPartnershipCapabilityOptionsPtrOutput() PartnershipCapabilityOptionsPtrOutput {
	return o.ToPartnershipCapabilityOptionsPtrOutputWithContext(context.Background())
}

func (o PartnershipCapabilityOptionsOutput) ToPartnershipCapabilityOptionsPtrOutputWithContext(ctx context.Context) PartnershipCapabilityOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnershipCapabilityOptions) *PartnershipCapabilityOptions {
		return &v
	}).(PartnershipCapabilityOptionsPtrOutput)
}

// A structure that contains the outbound EDI options.
func (o PartnershipCapabilityOptionsOutput) OutboundEdi() PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v PartnershipCapabilityOptions) *PartnershipOutboundEdiOptionsProperties { return v.OutboundEdi }).(PartnershipOutboundEdiOptionsPropertiesPtrOutput)
}

type PartnershipCapabilityOptionsPtrOutput struct{ *pulumi.OutputState }

func (PartnershipCapabilityOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipCapabilityOptions)(nil)).Elem()
}

func (o PartnershipCapabilityOptionsPtrOutput) ToPartnershipCapabilityOptionsPtrOutput() PartnershipCapabilityOptionsPtrOutput {
	return o
}

func (o PartnershipCapabilityOptionsPtrOutput) ToPartnershipCapabilityOptionsPtrOutputWithContext(ctx context.Context) PartnershipCapabilityOptionsPtrOutput {
	return o
}

func (o PartnershipCapabilityOptionsPtrOutput) Elem() PartnershipCapabilityOptionsOutput {
	return o.ApplyT(func(v *PartnershipCapabilityOptions) PartnershipCapabilityOptions {
		if v != nil {
			return *v
		}
		var ret PartnershipCapabilityOptions
		return ret
	}).(PartnershipCapabilityOptionsOutput)
}

// A structure that contains the outbound EDI options.
func (o PartnershipCapabilityOptionsPtrOutput) OutboundEdi() PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v *PartnershipCapabilityOptions) *PartnershipOutboundEdiOptionsProperties {
		if v == nil {
			return nil
		}
		return v.OutboundEdi
	}).(PartnershipOutboundEdiOptionsPropertiesPtrOutput)
}

type PartnershipOutboundEdiOptions0Properties struct {
	X12 PartnershipX12Envelope `pulumi:"x12"`
}

type PartnershipOutboundEdiOptionsProperties struct {
	X12 PartnershipX12Envelope `pulumi:"x12"`
}

// PartnershipOutboundEdiOptionsPropertiesInput is an input type that accepts PartnershipOutboundEdiOptionsPropertiesArgs and PartnershipOutboundEdiOptionsPropertiesOutput values.
// You can construct a concrete instance of `PartnershipOutboundEdiOptionsPropertiesInput` via:
//
//	PartnershipOutboundEdiOptionsPropertiesArgs{...}
type PartnershipOutboundEdiOptionsPropertiesInput interface {
	pulumi.Input

	ToPartnershipOutboundEdiOptionsPropertiesOutput() PartnershipOutboundEdiOptionsPropertiesOutput
	ToPartnershipOutboundEdiOptionsPropertiesOutputWithContext(context.Context) PartnershipOutboundEdiOptionsPropertiesOutput
}

type PartnershipOutboundEdiOptionsPropertiesArgs struct {
	X12 PartnershipX12EnvelopeInput `pulumi:"x12"`
}

func (PartnershipOutboundEdiOptionsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipOutboundEdiOptionsProperties)(nil)).Elem()
}

func (i PartnershipOutboundEdiOptionsPropertiesArgs) ToPartnershipOutboundEdiOptionsPropertiesOutput() PartnershipOutboundEdiOptionsPropertiesOutput {
	return i.ToPartnershipOutboundEdiOptionsPropertiesOutputWithContext(context.Background())
}

func (i PartnershipOutboundEdiOptionsPropertiesArgs) ToPartnershipOutboundEdiOptionsPropertiesOutputWithContext(ctx context.Context) PartnershipOutboundEdiOptionsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipOutboundEdiOptionsPropertiesOutput)
}

func (i PartnershipOutboundEdiOptionsPropertiesArgs) ToPartnershipOutboundEdiOptionsPropertiesPtrOutput() PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return i.ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i PartnershipOutboundEdiOptionsPropertiesArgs) ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(ctx context.Context) PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipOutboundEdiOptionsPropertiesOutput).ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(ctx)
}

// PartnershipOutboundEdiOptionsPropertiesPtrInput is an input type that accepts PartnershipOutboundEdiOptionsPropertiesArgs, PartnershipOutboundEdiOptionsPropertiesPtr and PartnershipOutboundEdiOptionsPropertiesPtrOutput values.
// You can construct a concrete instance of `PartnershipOutboundEdiOptionsPropertiesPtrInput` via:
//
//	        PartnershipOutboundEdiOptionsPropertiesArgs{...}
//
//	or:
//
//	        nil
type PartnershipOutboundEdiOptionsPropertiesPtrInput interface {
	pulumi.Input

	ToPartnershipOutboundEdiOptionsPropertiesPtrOutput() PartnershipOutboundEdiOptionsPropertiesPtrOutput
	ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(context.Context) PartnershipOutboundEdiOptionsPropertiesPtrOutput
}

type partnershipOutboundEdiOptionsPropertiesPtrType PartnershipOutboundEdiOptionsPropertiesArgs

func PartnershipOutboundEdiOptionsPropertiesPtr(v *PartnershipOutboundEdiOptionsPropertiesArgs) PartnershipOutboundEdiOptionsPropertiesPtrInput {
	return (*partnershipOutboundEdiOptionsPropertiesPtrType)(v)
}

func (*partnershipOutboundEdiOptionsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipOutboundEdiOptionsProperties)(nil)).Elem()
}

func (i *partnershipOutboundEdiOptionsPropertiesPtrType) ToPartnershipOutboundEdiOptionsPropertiesPtrOutput() PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return i.ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i *partnershipOutboundEdiOptionsPropertiesPtrType) ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(ctx context.Context) PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipOutboundEdiOptionsPropertiesPtrOutput)
}

type PartnershipOutboundEdiOptionsPropertiesOutput struct{ *pulumi.OutputState }

func (PartnershipOutboundEdiOptionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipOutboundEdiOptionsProperties)(nil)).Elem()
}

func (o PartnershipOutboundEdiOptionsPropertiesOutput) ToPartnershipOutboundEdiOptionsPropertiesOutput() PartnershipOutboundEdiOptionsPropertiesOutput {
	return o
}

func (o PartnershipOutboundEdiOptionsPropertiesOutput) ToPartnershipOutboundEdiOptionsPropertiesOutputWithContext(ctx context.Context) PartnershipOutboundEdiOptionsPropertiesOutput {
	return o
}

func (o PartnershipOutboundEdiOptionsPropertiesOutput) ToPartnershipOutboundEdiOptionsPropertiesPtrOutput() PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return o.ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (o PartnershipOutboundEdiOptionsPropertiesOutput) ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(ctx context.Context) PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnershipOutboundEdiOptionsProperties) *PartnershipOutboundEdiOptionsProperties {
		return &v
	}).(PartnershipOutboundEdiOptionsPropertiesPtrOutput)
}

func (o PartnershipOutboundEdiOptionsPropertiesOutput) X12() PartnershipX12EnvelopeOutput {
	return o.ApplyT(func(v PartnershipOutboundEdiOptionsProperties) PartnershipX12Envelope { return v.X12 }).(PartnershipX12EnvelopeOutput)
}

type PartnershipOutboundEdiOptionsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PartnershipOutboundEdiOptionsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipOutboundEdiOptionsProperties)(nil)).Elem()
}

func (o PartnershipOutboundEdiOptionsPropertiesPtrOutput) ToPartnershipOutboundEdiOptionsPropertiesPtrOutput() PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return o
}

func (o PartnershipOutboundEdiOptionsPropertiesPtrOutput) ToPartnershipOutboundEdiOptionsPropertiesPtrOutputWithContext(ctx context.Context) PartnershipOutboundEdiOptionsPropertiesPtrOutput {
	return o
}

func (o PartnershipOutboundEdiOptionsPropertiesPtrOutput) Elem() PartnershipOutboundEdiOptionsPropertiesOutput {
	return o.ApplyT(func(v *PartnershipOutboundEdiOptionsProperties) PartnershipOutboundEdiOptionsProperties {
		if v != nil {
			return *v
		}
		var ret PartnershipOutboundEdiOptionsProperties
		return ret
	}).(PartnershipOutboundEdiOptionsPropertiesOutput)
}

func (o PartnershipOutboundEdiOptionsPropertiesPtrOutput) X12() PartnershipX12EnvelopePtrOutput {
	return o.ApplyT(func(v *PartnershipOutboundEdiOptionsProperties) *PartnershipX12Envelope {
		if v == nil {
			return nil
		}
		return &v.X12
	}).(PartnershipX12EnvelopePtrOutput)
}

type PartnershipTag struct {
	// Specifies the name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name that you create.
	Value string `pulumi:"value"`
}

type PartnershipX12Delimiters struct {
	ComponentSeparator   *string `pulumi:"componentSeparator"`
	DataElementSeparator *string `pulumi:"dataElementSeparator"`
	SegmentTerminator    *string `pulumi:"segmentTerminator"`
}

// PartnershipX12DelimitersInput is an input type that accepts PartnershipX12DelimitersArgs and PartnershipX12DelimitersOutput values.
// You can construct a concrete instance of `PartnershipX12DelimitersInput` via:
//
//	PartnershipX12DelimitersArgs{...}
type PartnershipX12DelimitersInput interface {
	pulumi.Input

	ToPartnershipX12DelimitersOutput() PartnershipX12DelimitersOutput
	ToPartnershipX12DelimitersOutputWithContext(context.Context) PartnershipX12DelimitersOutput
}

type PartnershipX12DelimitersArgs struct {
	ComponentSeparator   pulumi.StringPtrInput `pulumi:"componentSeparator"`
	DataElementSeparator pulumi.StringPtrInput `pulumi:"dataElementSeparator"`
	SegmentTerminator    pulumi.StringPtrInput `pulumi:"segmentTerminator"`
}

func (PartnershipX12DelimitersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12Delimiters)(nil)).Elem()
}

func (i PartnershipX12DelimitersArgs) ToPartnershipX12DelimitersOutput() PartnershipX12DelimitersOutput {
	return i.ToPartnershipX12DelimitersOutputWithContext(context.Background())
}

func (i PartnershipX12DelimitersArgs) ToPartnershipX12DelimitersOutputWithContext(ctx context.Context) PartnershipX12DelimitersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12DelimitersOutput)
}

func (i PartnershipX12DelimitersArgs) ToPartnershipX12DelimitersPtrOutput() PartnershipX12DelimitersPtrOutput {
	return i.ToPartnershipX12DelimitersPtrOutputWithContext(context.Background())
}

func (i PartnershipX12DelimitersArgs) ToPartnershipX12DelimitersPtrOutputWithContext(ctx context.Context) PartnershipX12DelimitersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12DelimitersOutput).ToPartnershipX12DelimitersPtrOutputWithContext(ctx)
}

// PartnershipX12DelimitersPtrInput is an input type that accepts PartnershipX12DelimitersArgs, PartnershipX12DelimitersPtr and PartnershipX12DelimitersPtrOutput values.
// You can construct a concrete instance of `PartnershipX12DelimitersPtrInput` via:
//
//	        PartnershipX12DelimitersArgs{...}
//
//	or:
//
//	        nil
type PartnershipX12DelimitersPtrInput interface {
	pulumi.Input

	ToPartnershipX12DelimitersPtrOutput() PartnershipX12DelimitersPtrOutput
	ToPartnershipX12DelimitersPtrOutputWithContext(context.Context) PartnershipX12DelimitersPtrOutput
}

type partnershipX12DelimitersPtrType PartnershipX12DelimitersArgs

func PartnershipX12DelimitersPtr(v *PartnershipX12DelimitersArgs) PartnershipX12DelimitersPtrInput {
	return (*partnershipX12DelimitersPtrType)(v)
}

func (*partnershipX12DelimitersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12Delimiters)(nil)).Elem()
}

func (i *partnershipX12DelimitersPtrType) ToPartnershipX12DelimitersPtrOutput() PartnershipX12DelimitersPtrOutput {
	return i.ToPartnershipX12DelimitersPtrOutputWithContext(context.Background())
}

func (i *partnershipX12DelimitersPtrType) ToPartnershipX12DelimitersPtrOutputWithContext(ctx context.Context) PartnershipX12DelimitersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12DelimitersPtrOutput)
}

type PartnershipX12DelimitersOutput struct{ *pulumi.OutputState }

func (PartnershipX12DelimitersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12Delimiters)(nil)).Elem()
}

func (o PartnershipX12DelimitersOutput) ToPartnershipX12DelimitersOutput() PartnershipX12DelimitersOutput {
	return o
}

func (o PartnershipX12DelimitersOutput) ToPartnershipX12DelimitersOutputWithContext(ctx context.Context) PartnershipX12DelimitersOutput {
	return o
}

func (o PartnershipX12DelimitersOutput) ToPartnershipX12DelimitersPtrOutput() PartnershipX12DelimitersPtrOutput {
	return o.ToPartnershipX12DelimitersPtrOutputWithContext(context.Background())
}

func (o PartnershipX12DelimitersOutput) ToPartnershipX12DelimitersPtrOutputWithContext(ctx context.Context) PartnershipX12DelimitersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnershipX12Delimiters) *PartnershipX12Delimiters {
		return &v
	}).(PartnershipX12DelimitersPtrOutput)
}

func (o PartnershipX12DelimitersOutput) ComponentSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12Delimiters) *string { return v.ComponentSeparator }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12DelimitersOutput) DataElementSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12Delimiters) *string { return v.DataElementSeparator }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12DelimitersOutput) SegmentTerminator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12Delimiters) *string { return v.SegmentTerminator }).(pulumi.StringPtrOutput)
}

type PartnershipX12DelimitersPtrOutput struct{ *pulumi.OutputState }

func (PartnershipX12DelimitersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12Delimiters)(nil)).Elem()
}

func (o PartnershipX12DelimitersPtrOutput) ToPartnershipX12DelimitersPtrOutput() PartnershipX12DelimitersPtrOutput {
	return o
}

func (o PartnershipX12DelimitersPtrOutput) ToPartnershipX12DelimitersPtrOutputWithContext(ctx context.Context) PartnershipX12DelimitersPtrOutput {
	return o
}

func (o PartnershipX12DelimitersPtrOutput) Elem() PartnershipX12DelimitersOutput {
	return o.ApplyT(func(v *PartnershipX12Delimiters) PartnershipX12Delimiters {
		if v != nil {
			return *v
		}
		var ret PartnershipX12Delimiters
		return ret
	}).(PartnershipX12DelimitersOutput)
}

func (o PartnershipX12DelimitersPtrOutput) ComponentSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12Delimiters) *string {
		if v == nil {
			return nil
		}
		return v.ComponentSeparator
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12DelimitersPtrOutput) DataElementSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12Delimiters) *string {
		if v == nil {
			return nil
		}
		return v.DataElementSeparator
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12DelimitersPtrOutput) SegmentTerminator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12Delimiters) *string {
		if v == nil {
			return nil
		}
		return v.SegmentTerminator
	}).(pulumi.StringPtrOutput)
}

type PartnershipX12Envelope struct {
	Common *PartnershipX12OutboundEdiHeaders `pulumi:"common"`
}

// PartnershipX12EnvelopeInput is an input type that accepts PartnershipX12EnvelopeArgs and PartnershipX12EnvelopeOutput values.
// You can construct a concrete instance of `PartnershipX12EnvelopeInput` via:
//
//	PartnershipX12EnvelopeArgs{...}
type PartnershipX12EnvelopeInput interface {
	pulumi.Input

	ToPartnershipX12EnvelopeOutput() PartnershipX12EnvelopeOutput
	ToPartnershipX12EnvelopeOutputWithContext(context.Context) PartnershipX12EnvelopeOutput
}

type PartnershipX12EnvelopeArgs struct {
	Common PartnershipX12OutboundEdiHeadersPtrInput `pulumi:"common"`
}

func (PartnershipX12EnvelopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12Envelope)(nil)).Elem()
}

func (i PartnershipX12EnvelopeArgs) ToPartnershipX12EnvelopeOutput() PartnershipX12EnvelopeOutput {
	return i.ToPartnershipX12EnvelopeOutputWithContext(context.Background())
}

func (i PartnershipX12EnvelopeArgs) ToPartnershipX12EnvelopeOutputWithContext(ctx context.Context) PartnershipX12EnvelopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12EnvelopeOutput)
}

func (i PartnershipX12EnvelopeArgs) ToPartnershipX12EnvelopePtrOutput() PartnershipX12EnvelopePtrOutput {
	return i.ToPartnershipX12EnvelopePtrOutputWithContext(context.Background())
}

func (i PartnershipX12EnvelopeArgs) ToPartnershipX12EnvelopePtrOutputWithContext(ctx context.Context) PartnershipX12EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12EnvelopeOutput).ToPartnershipX12EnvelopePtrOutputWithContext(ctx)
}

// PartnershipX12EnvelopePtrInput is an input type that accepts PartnershipX12EnvelopeArgs, PartnershipX12EnvelopePtr and PartnershipX12EnvelopePtrOutput values.
// You can construct a concrete instance of `PartnershipX12EnvelopePtrInput` via:
//
//	        PartnershipX12EnvelopeArgs{...}
//
//	or:
//
//	        nil
type PartnershipX12EnvelopePtrInput interface {
	pulumi.Input

	ToPartnershipX12EnvelopePtrOutput() PartnershipX12EnvelopePtrOutput
	ToPartnershipX12EnvelopePtrOutputWithContext(context.Context) PartnershipX12EnvelopePtrOutput
}

type partnershipX12EnvelopePtrType PartnershipX12EnvelopeArgs

func PartnershipX12EnvelopePtr(v *PartnershipX12EnvelopeArgs) PartnershipX12EnvelopePtrInput {
	return (*partnershipX12EnvelopePtrType)(v)
}

func (*partnershipX12EnvelopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12Envelope)(nil)).Elem()
}

func (i *partnershipX12EnvelopePtrType) ToPartnershipX12EnvelopePtrOutput() PartnershipX12EnvelopePtrOutput {
	return i.ToPartnershipX12EnvelopePtrOutputWithContext(context.Background())
}

func (i *partnershipX12EnvelopePtrType) ToPartnershipX12EnvelopePtrOutputWithContext(ctx context.Context) PartnershipX12EnvelopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12EnvelopePtrOutput)
}

type PartnershipX12EnvelopeOutput struct{ *pulumi.OutputState }

func (PartnershipX12EnvelopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12Envelope)(nil)).Elem()
}

func (o PartnershipX12EnvelopeOutput) ToPartnershipX12EnvelopeOutput() PartnershipX12EnvelopeOutput {
	return o
}

func (o PartnershipX12EnvelopeOutput) ToPartnershipX12EnvelopeOutputWithContext(ctx context.Context) PartnershipX12EnvelopeOutput {
	return o
}

func (o PartnershipX12EnvelopeOutput) ToPartnershipX12EnvelopePtrOutput() PartnershipX12EnvelopePtrOutput {
	return o.ToPartnershipX12EnvelopePtrOutputWithContext(context.Background())
}

func (o PartnershipX12EnvelopeOutput) ToPartnershipX12EnvelopePtrOutputWithContext(ctx context.Context) PartnershipX12EnvelopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnershipX12Envelope) *PartnershipX12Envelope {
		return &v
	}).(PartnershipX12EnvelopePtrOutput)
}

func (o PartnershipX12EnvelopeOutput) Common() PartnershipX12OutboundEdiHeadersPtrOutput {
	return o.ApplyT(func(v PartnershipX12Envelope) *PartnershipX12OutboundEdiHeaders { return v.Common }).(PartnershipX12OutboundEdiHeadersPtrOutput)
}

type PartnershipX12EnvelopePtrOutput struct{ *pulumi.OutputState }

func (PartnershipX12EnvelopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12Envelope)(nil)).Elem()
}

func (o PartnershipX12EnvelopePtrOutput) ToPartnershipX12EnvelopePtrOutput() PartnershipX12EnvelopePtrOutput {
	return o
}

func (o PartnershipX12EnvelopePtrOutput) ToPartnershipX12EnvelopePtrOutputWithContext(ctx context.Context) PartnershipX12EnvelopePtrOutput {
	return o
}

func (o PartnershipX12EnvelopePtrOutput) Elem() PartnershipX12EnvelopeOutput {
	return o.ApplyT(func(v *PartnershipX12Envelope) PartnershipX12Envelope {
		if v != nil {
			return *v
		}
		var ret PartnershipX12Envelope
		return ret
	}).(PartnershipX12EnvelopeOutput)
}

func (o PartnershipX12EnvelopePtrOutput) Common() PartnershipX12OutboundEdiHeadersPtrOutput {
	return o.ApplyT(func(v *PartnershipX12Envelope) *PartnershipX12OutboundEdiHeaders {
		if v == nil {
			return nil
		}
		return v.Common
	}).(PartnershipX12OutboundEdiHeadersPtrOutput)
}

type PartnershipX12FunctionalGroupHeaders struct {
	ApplicationReceiverCode *string `pulumi:"applicationReceiverCode"`
	ApplicationSenderCode   *string `pulumi:"applicationSenderCode"`
	ResponsibleAgencyCode   *string `pulumi:"responsibleAgencyCode"`
}

// PartnershipX12FunctionalGroupHeadersInput is an input type that accepts PartnershipX12FunctionalGroupHeadersArgs and PartnershipX12FunctionalGroupHeadersOutput values.
// You can construct a concrete instance of `PartnershipX12FunctionalGroupHeadersInput` via:
//
//	PartnershipX12FunctionalGroupHeadersArgs{...}
type PartnershipX12FunctionalGroupHeadersInput interface {
	pulumi.Input

	ToPartnershipX12FunctionalGroupHeadersOutput() PartnershipX12FunctionalGroupHeadersOutput
	ToPartnershipX12FunctionalGroupHeadersOutputWithContext(context.Context) PartnershipX12FunctionalGroupHeadersOutput
}

type PartnershipX12FunctionalGroupHeadersArgs struct {
	ApplicationReceiverCode pulumi.StringPtrInput `pulumi:"applicationReceiverCode"`
	ApplicationSenderCode   pulumi.StringPtrInput `pulumi:"applicationSenderCode"`
	ResponsibleAgencyCode   pulumi.StringPtrInput `pulumi:"responsibleAgencyCode"`
}

func (PartnershipX12FunctionalGroupHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12FunctionalGroupHeaders)(nil)).Elem()
}

func (i PartnershipX12FunctionalGroupHeadersArgs) ToPartnershipX12FunctionalGroupHeadersOutput() PartnershipX12FunctionalGroupHeadersOutput {
	return i.ToPartnershipX12FunctionalGroupHeadersOutputWithContext(context.Background())
}

func (i PartnershipX12FunctionalGroupHeadersArgs) ToPartnershipX12FunctionalGroupHeadersOutputWithContext(ctx context.Context) PartnershipX12FunctionalGroupHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12FunctionalGroupHeadersOutput)
}

func (i PartnershipX12FunctionalGroupHeadersArgs) ToPartnershipX12FunctionalGroupHeadersPtrOutput() PartnershipX12FunctionalGroupHeadersPtrOutput {
	return i.ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(context.Background())
}

func (i PartnershipX12FunctionalGroupHeadersArgs) ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12FunctionalGroupHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12FunctionalGroupHeadersOutput).ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(ctx)
}

// PartnershipX12FunctionalGroupHeadersPtrInput is an input type that accepts PartnershipX12FunctionalGroupHeadersArgs, PartnershipX12FunctionalGroupHeadersPtr and PartnershipX12FunctionalGroupHeadersPtrOutput values.
// You can construct a concrete instance of `PartnershipX12FunctionalGroupHeadersPtrInput` via:
//
//	        PartnershipX12FunctionalGroupHeadersArgs{...}
//
//	or:
//
//	        nil
type PartnershipX12FunctionalGroupHeadersPtrInput interface {
	pulumi.Input

	ToPartnershipX12FunctionalGroupHeadersPtrOutput() PartnershipX12FunctionalGroupHeadersPtrOutput
	ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(context.Context) PartnershipX12FunctionalGroupHeadersPtrOutput
}

type partnershipX12FunctionalGroupHeadersPtrType PartnershipX12FunctionalGroupHeadersArgs

func PartnershipX12FunctionalGroupHeadersPtr(v *PartnershipX12FunctionalGroupHeadersArgs) PartnershipX12FunctionalGroupHeadersPtrInput {
	return (*partnershipX12FunctionalGroupHeadersPtrType)(v)
}

func (*partnershipX12FunctionalGroupHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12FunctionalGroupHeaders)(nil)).Elem()
}

func (i *partnershipX12FunctionalGroupHeadersPtrType) ToPartnershipX12FunctionalGroupHeadersPtrOutput() PartnershipX12FunctionalGroupHeadersPtrOutput {
	return i.ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(context.Background())
}

func (i *partnershipX12FunctionalGroupHeadersPtrType) ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12FunctionalGroupHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12FunctionalGroupHeadersPtrOutput)
}

type PartnershipX12FunctionalGroupHeadersOutput struct{ *pulumi.OutputState }

func (PartnershipX12FunctionalGroupHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12FunctionalGroupHeaders)(nil)).Elem()
}

func (o PartnershipX12FunctionalGroupHeadersOutput) ToPartnershipX12FunctionalGroupHeadersOutput() PartnershipX12FunctionalGroupHeadersOutput {
	return o
}

func (o PartnershipX12FunctionalGroupHeadersOutput) ToPartnershipX12FunctionalGroupHeadersOutputWithContext(ctx context.Context) PartnershipX12FunctionalGroupHeadersOutput {
	return o
}

func (o PartnershipX12FunctionalGroupHeadersOutput) ToPartnershipX12FunctionalGroupHeadersPtrOutput() PartnershipX12FunctionalGroupHeadersPtrOutput {
	return o.ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(context.Background())
}

func (o PartnershipX12FunctionalGroupHeadersOutput) ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12FunctionalGroupHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnershipX12FunctionalGroupHeaders) *PartnershipX12FunctionalGroupHeaders {
		return &v
	}).(PartnershipX12FunctionalGroupHeadersPtrOutput)
}

func (o PartnershipX12FunctionalGroupHeadersOutput) ApplicationReceiverCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12FunctionalGroupHeaders) *string { return v.ApplicationReceiverCode }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12FunctionalGroupHeadersOutput) ApplicationSenderCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12FunctionalGroupHeaders) *string { return v.ApplicationSenderCode }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12FunctionalGroupHeadersOutput) ResponsibleAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12FunctionalGroupHeaders) *string { return v.ResponsibleAgencyCode }).(pulumi.StringPtrOutput)
}

type PartnershipX12FunctionalGroupHeadersPtrOutput struct{ *pulumi.OutputState }

func (PartnershipX12FunctionalGroupHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12FunctionalGroupHeaders)(nil)).Elem()
}

func (o PartnershipX12FunctionalGroupHeadersPtrOutput) ToPartnershipX12FunctionalGroupHeadersPtrOutput() PartnershipX12FunctionalGroupHeadersPtrOutput {
	return o
}

func (o PartnershipX12FunctionalGroupHeadersPtrOutput) ToPartnershipX12FunctionalGroupHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12FunctionalGroupHeadersPtrOutput {
	return o
}

func (o PartnershipX12FunctionalGroupHeadersPtrOutput) Elem() PartnershipX12FunctionalGroupHeadersOutput {
	return o.ApplyT(func(v *PartnershipX12FunctionalGroupHeaders) PartnershipX12FunctionalGroupHeaders {
		if v != nil {
			return *v
		}
		var ret PartnershipX12FunctionalGroupHeaders
		return ret
	}).(PartnershipX12FunctionalGroupHeadersOutput)
}

func (o PartnershipX12FunctionalGroupHeadersPtrOutput) ApplicationReceiverCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12FunctionalGroupHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationReceiverCode
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12FunctionalGroupHeadersPtrOutput) ApplicationSenderCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12FunctionalGroupHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationSenderCode
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12FunctionalGroupHeadersPtrOutput) ResponsibleAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12FunctionalGroupHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ResponsibleAgencyCode
	}).(pulumi.StringPtrOutput)
}

type PartnershipX12InterchangeControlHeaders struct {
	AcknowledgmentRequestedCode *string `pulumi:"acknowledgmentRequestedCode"`
	ReceiverId                  *string `pulumi:"receiverId"`
	ReceiverIdQualifier         *string `pulumi:"receiverIdQualifier"`
	RepetitionSeparator         *string `pulumi:"repetitionSeparator"`
	SenderId                    *string `pulumi:"senderId"`
	SenderIdQualifier           *string `pulumi:"senderIdQualifier"`
	UsageIndicatorCode          *string `pulumi:"usageIndicatorCode"`
}

// PartnershipX12InterchangeControlHeadersInput is an input type that accepts PartnershipX12InterchangeControlHeadersArgs and PartnershipX12InterchangeControlHeadersOutput values.
// You can construct a concrete instance of `PartnershipX12InterchangeControlHeadersInput` via:
//
//	PartnershipX12InterchangeControlHeadersArgs{...}
type PartnershipX12InterchangeControlHeadersInput interface {
	pulumi.Input

	ToPartnershipX12InterchangeControlHeadersOutput() PartnershipX12InterchangeControlHeadersOutput
	ToPartnershipX12InterchangeControlHeadersOutputWithContext(context.Context) PartnershipX12InterchangeControlHeadersOutput
}

type PartnershipX12InterchangeControlHeadersArgs struct {
	AcknowledgmentRequestedCode pulumi.StringPtrInput `pulumi:"acknowledgmentRequestedCode"`
	ReceiverId                  pulumi.StringPtrInput `pulumi:"receiverId"`
	ReceiverIdQualifier         pulumi.StringPtrInput `pulumi:"receiverIdQualifier"`
	RepetitionSeparator         pulumi.StringPtrInput `pulumi:"repetitionSeparator"`
	SenderId                    pulumi.StringPtrInput `pulumi:"senderId"`
	SenderIdQualifier           pulumi.StringPtrInput `pulumi:"senderIdQualifier"`
	UsageIndicatorCode          pulumi.StringPtrInput `pulumi:"usageIndicatorCode"`
}

func (PartnershipX12InterchangeControlHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12InterchangeControlHeaders)(nil)).Elem()
}

func (i PartnershipX12InterchangeControlHeadersArgs) ToPartnershipX12InterchangeControlHeadersOutput() PartnershipX12InterchangeControlHeadersOutput {
	return i.ToPartnershipX12InterchangeControlHeadersOutputWithContext(context.Background())
}

func (i PartnershipX12InterchangeControlHeadersArgs) ToPartnershipX12InterchangeControlHeadersOutputWithContext(ctx context.Context) PartnershipX12InterchangeControlHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12InterchangeControlHeadersOutput)
}

func (i PartnershipX12InterchangeControlHeadersArgs) ToPartnershipX12InterchangeControlHeadersPtrOutput() PartnershipX12InterchangeControlHeadersPtrOutput {
	return i.ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(context.Background())
}

func (i PartnershipX12InterchangeControlHeadersArgs) ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12InterchangeControlHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12InterchangeControlHeadersOutput).ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(ctx)
}

// PartnershipX12InterchangeControlHeadersPtrInput is an input type that accepts PartnershipX12InterchangeControlHeadersArgs, PartnershipX12InterchangeControlHeadersPtr and PartnershipX12InterchangeControlHeadersPtrOutput values.
// You can construct a concrete instance of `PartnershipX12InterchangeControlHeadersPtrInput` via:
//
//	        PartnershipX12InterchangeControlHeadersArgs{...}
//
//	or:
//
//	        nil
type PartnershipX12InterchangeControlHeadersPtrInput interface {
	pulumi.Input

	ToPartnershipX12InterchangeControlHeadersPtrOutput() PartnershipX12InterchangeControlHeadersPtrOutput
	ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(context.Context) PartnershipX12InterchangeControlHeadersPtrOutput
}

type partnershipX12InterchangeControlHeadersPtrType PartnershipX12InterchangeControlHeadersArgs

func PartnershipX12InterchangeControlHeadersPtr(v *PartnershipX12InterchangeControlHeadersArgs) PartnershipX12InterchangeControlHeadersPtrInput {
	return (*partnershipX12InterchangeControlHeadersPtrType)(v)
}

func (*partnershipX12InterchangeControlHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12InterchangeControlHeaders)(nil)).Elem()
}

func (i *partnershipX12InterchangeControlHeadersPtrType) ToPartnershipX12InterchangeControlHeadersPtrOutput() PartnershipX12InterchangeControlHeadersPtrOutput {
	return i.ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(context.Background())
}

func (i *partnershipX12InterchangeControlHeadersPtrType) ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12InterchangeControlHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12InterchangeControlHeadersPtrOutput)
}

type PartnershipX12InterchangeControlHeadersOutput struct{ *pulumi.OutputState }

func (PartnershipX12InterchangeControlHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12InterchangeControlHeaders)(nil)).Elem()
}

func (o PartnershipX12InterchangeControlHeadersOutput) ToPartnershipX12InterchangeControlHeadersOutput() PartnershipX12InterchangeControlHeadersOutput {
	return o
}

func (o PartnershipX12InterchangeControlHeadersOutput) ToPartnershipX12InterchangeControlHeadersOutputWithContext(ctx context.Context) PartnershipX12InterchangeControlHeadersOutput {
	return o
}

func (o PartnershipX12InterchangeControlHeadersOutput) ToPartnershipX12InterchangeControlHeadersPtrOutput() PartnershipX12InterchangeControlHeadersPtrOutput {
	return o.ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(context.Background())
}

func (o PartnershipX12InterchangeControlHeadersOutput) ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12InterchangeControlHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnershipX12InterchangeControlHeaders) *PartnershipX12InterchangeControlHeaders {
		return &v
	}).(PartnershipX12InterchangeControlHeadersPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersOutput) AcknowledgmentRequestedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12InterchangeControlHeaders) *string { return v.AcknowledgmentRequestedCode }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersOutput) ReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12InterchangeControlHeaders) *string { return v.ReceiverId }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersOutput) ReceiverIdQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12InterchangeControlHeaders) *string { return v.ReceiverIdQualifier }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersOutput) RepetitionSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12InterchangeControlHeaders) *string { return v.RepetitionSeparator }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersOutput) SenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12InterchangeControlHeaders) *string { return v.SenderId }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersOutput) SenderIdQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12InterchangeControlHeaders) *string { return v.SenderIdQualifier }).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersOutput) UsageIndicatorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PartnershipX12InterchangeControlHeaders) *string { return v.UsageIndicatorCode }).(pulumi.StringPtrOutput)
}

type PartnershipX12InterchangeControlHeadersPtrOutput struct{ *pulumi.OutputState }

func (PartnershipX12InterchangeControlHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12InterchangeControlHeaders)(nil)).Elem()
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) ToPartnershipX12InterchangeControlHeadersPtrOutput() PartnershipX12InterchangeControlHeadersPtrOutput {
	return o
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) ToPartnershipX12InterchangeControlHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12InterchangeControlHeadersPtrOutput {
	return o
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) Elem() PartnershipX12InterchangeControlHeadersOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) PartnershipX12InterchangeControlHeaders {
		if v != nil {
			return *v
		}
		var ret PartnershipX12InterchangeControlHeaders
		return ret
	}).(PartnershipX12InterchangeControlHeadersOutput)
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) AcknowledgmentRequestedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgmentRequestedCode
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) ReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverId
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) ReceiverIdQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverIdQualifier
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) RepetitionSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) *string {
		if v == nil {
			return nil
		}
		return v.RepetitionSeparator
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) SenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) *string {
		if v == nil {
			return nil
		}
		return v.SenderId
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) SenderIdQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) *string {
		if v == nil {
			return nil
		}
		return v.SenderIdQualifier
	}).(pulumi.StringPtrOutput)
}

func (o PartnershipX12InterchangeControlHeadersPtrOutput) UsageIndicatorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnershipX12InterchangeControlHeaders) *string {
		if v == nil {
			return nil
		}
		return v.UsageIndicatorCode
	}).(pulumi.StringPtrOutput)
}

type PartnershipX12OutboundEdiHeaders struct {
	Delimiters                *PartnershipX12Delimiters                `pulumi:"delimiters"`
	FunctionalGroupHeaders    *PartnershipX12FunctionalGroupHeaders    `pulumi:"functionalGroupHeaders"`
	InterchangeControlHeaders *PartnershipX12InterchangeControlHeaders `pulumi:"interchangeControlHeaders"`
	ValidateEdi               *bool                                    `pulumi:"validateEdi"`
}

// PartnershipX12OutboundEdiHeadersInput is an input type that accepts PartnershipX12OutboundEdiHeadersArgs and PartnershipX12OutboundEdiHeadersOutput values.
// You can construct a concrete instance of `PartnershipX12OutboundEdiHeadersInput` via:
//
//	PartnershipX12OutboundEdiHeadersArgs{...}
type PartnershipX12OutboundEdiHeadersInput interface {
	pulumi.Input

	ToPartnershipX12OutboundEdiHeadersOutput() PartnershipX12OutboundEdiHeadersOutput
	ToPartnershipX12OutboundEdiHeadersOutputWithContext(context.Context) PartnershipX12OutboundEdiHeadersOutput
}

type PartnershipX12OutboundEdiHeadersArgs struct {
	Delimiters                PartnershipX12DelimitersPtrInput                `pulumi:"delimiters"`
	FunctionalGroupHeaders    PartnershipX12FunctionalGroupHeadersPtrInput    `pulumi:"functionalGroupHeaders"`
	InterchangeControlHeaders PartnershipX12InterchangeControlHeadersPtrInput `pulumi:"interchangeControlHeaders"`
	ValidateEdi               pulumi.BoolPtrInput                             `pulumi:"validateEdi"`
}

func (PartnershipX12OutboundEdiHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12OutboundEdiHeaders)(nil)).Elem()
}

func (i PartnershipX12OutboundEdiHeadersArgs) ToPartnershipX12OutboundEdiHeadersOutput() PartnershipX12OutboundEdiHeadersOutput {
	return i.ToPartnershipX12OutboundEdiHeadersOutputWithContext(context.Background())
}

func (i PartnershipX12OutboundEdiHeadersArgs) ToPartnershipX12OutboundEdiHeadersOutputWithContext(ctx context.Context) PartnershipX12OutboundEdiHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12OutboundEdiHeadersOutput)
}

func (i PartnershipX12OutboundEdiHeadersArgs) ToPartnershipX12OutboundEdiHeadersPtrOutput() PartnershipX12OutboundEdiHeadersPtrOutput {
	return i.ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(context.Background())
}

func (i PartnershipX12OutboundEdiHeadersArgs) ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12OutboundEdiHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12OutboundEdiHeadersOutput).ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(ctx)
}

// PartnershipX12OutboundEdiHeadersPtrInput is an input type that accepts PartnershipX12OutboundEdiHeadersArgs, PartnershipX12OutboundEdiHeadersPtr and PartnershipX12OutboundEdiHeadersPtrOutput values.
// You can construct a concrete instance of `PartnershipX12OutboundEdiHeadersPtrInput` via:
//
//	        PartnershipX12OutboundEdiHeadersArgs{...}
//
//	or:
//
//	        nil
type PartnershipX12OutboundEdiHeadersPtrInput interface {
	pulumi.Input

	ToPartnershipX12OutboundEdiHeadersPtrOutput() PartnershipX12OutboundEdiHeadersPtrOutput
	ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(context.Context) PartnershipX12OutboundEdiHeadersPtrOutput
}

type partnershipX12OutboundEdiHeadersPtrType PartnershipX12OutboundEdiHeadersArgs

func PartnershipX12OutboundEdiHeadersPtr(v *PartnershipX12OutboundEdiHeadersArgs) PartnershipX12OutboundEdiHeadersPtrInput {
	return (*partnershipX12OutboundEdiHeadersPtrType)(v)
}

func (*partnershipX12OutboundEdiHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12OutboundEdiHeaders)(nil)).Elem()
}

func (i *partnershipX12OutboundEdiHeadersPtrType) ToPartnershipX12OutboundEdiHeadersPtrOutput() PartnershipX12OutboundEdiHeadersPtrOutput {
	return i.ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(context.Background())
}

func (i *partnershipX12OutboundEdiHeadersPtrType) ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12OutboundEdiHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipX12OutboundEdiHeadersPtrOutput)
}

type PartnershipX12OutboundEdiHeadersOutput struct{ *pulumi.OutputState }

func (PartnershipX12OutboundEdiHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipX12OutboundEdiHeaders)(nil)).Elem()
}

func (o PartnershipX12OutboundEdiHeadersOutput) ToPartnershipX12OutboundEdiHeadersOutput() PartnershipX12OutboundEdiHeadersOutput {
	return o
}

func (o PartnershipX12OutboundEdiHeadersOutput) ToPartnershipX12OutboundEdiHeadersOutputWithContext(ctx context.Context) PartnershipX12OutboundEdiHeadersOutput {
	return o
}

func (o PartnershipX12OutboundEdiHeadersOutput) ToPartnershipX12OutboundEdiHeadersPtrOutput() PartnershipX12OutboundEdiHeadersPtrOutput {
	return o.ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(context.Background())
}

func (o PartnershipX12OutboundEdiHeadersOutput) ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12OutboundEdiHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnershipX12OutboundEdiHeaders) *PartnershipX12OutboundEdiHeaders {
		return &v
	}).(PartnershipX12OutboundEdiHeadersPtrOutput)
}

func (o PartnershipX12OutboundEdiHeadersOutput) Delimiters() PartnershipX12DelimitersPtrOutput {
	return o.ApplyT(func(v PartnershipX12OutboundEdiHeaders) *PartnershipX12Delimiters { return v.Delimiters }).(PartnershipX12DelimitersPtrOutput)
}

func (o PartnershipX12OutboundEdiHeadersOutput) FunctionalGroupHeaders() PartnershipX12FunctionalGroupHeadersPtrOutput {
	return o.ApplyT(func(v PartnershipX12OutboundEdiHeaders) *PartnershipX12FunctionalGroupHeaders {
		return v.FunctionalGroupHeaders
	}).(PartnershipX12FunctionalGroupHeadersPtrOutput)
}

func (o PartnershipX12OutboundEdiHeadersOutput) InterchangeControlHeaders() PartnershipX12InterchangeControlHeadersPtrOutput {
	return o.ApplyT(func(v PartnershipX12OutboundEdiHeaders) *PartnershipX12InterchangeControlHeaders {
		return v.InterchangeControlHeaders
	}).(PartnershipX12InterchangeControlHeadersPtrOutput)
}

func (o PartnershipX12OutboundEdiHeadersOutput) ValidateEdi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PartnershipX12OutboundEdiHeaders) *bool { return v.ValidateEdi }).(pulumi.BoolPtrOutput)
}

type PartnershipX12OutboundEdiHeadersPtrOutput struct{ *pulumi.OutputState }

func (PartnershipX12OutboundEdiHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnershipX12OutboundEdiHeaders)(nil)).Elem()
}

func (o PartnershipX12OutboundEdiHeadersPtrOutput) ToPartnershipX12OutboundEdiHeadersPtrOutput() PartnershipX12OutboundEdiHeadersPtrOutput {
	return o
}

func (o PartnershipX12OutboundEdiHeadersPtrOutput) ToPartnershipX12OutboundEdiHeadersPtrOutputWithContext(ctx context.Context) PartnershipX12OutboundEdiHeadersPtrOutput {
	return o
}

func (o PartnershipX12OutboundEdiHeadersPtrOutput) Elem() PartnershipX12OutboundEdiHeadersOutput {
	return o.ApplyT(func(v *PartnershipX12OutboundEdiHeaders) PartnershipX12OutboundEdiHeaders {
		if v != nil {
			return *v
		}
		var ret PartnershipX12OutboundEdiHeaders
		return ret
	}).(PartnershipX12OutboundEdiHeadersOutput)
}

func (o PartnershipX12OutboundEdiHeadersPtrOutput) Delimiters() PartnershipX12DelimitersPtrOutput {
	return o.ApplyT(func(v *PartnershipX12OutboundEdiHeaders) *PartnershipX12Delimiters {
		if v == nil {
			return nil
		}
		return v.Delimiters
	}).(PartnershipX12DelimitersPtrOutput)
}

func (o PartnershipX12OutboundEdiHeadersPtrOutput) FunctionalGroupHeaders() PartnershipX12FunctionalGroupHeadersPtrOutput {
	return o.ApplyT(func(v *PartnershipX12OutboundEdiHeaders) *PartnershipX12FunctionalGroupHeaders {
		if v == nil {
			return nil
		}
		return v.FunctionalGroupHeaders
	}).(PartnershipX12FunctionalGroupHeadersPtrOutput)
}

func (o PartnershipX12OutboundEdiHeadersPtrOutput) InterchangeControlHeaders() PartnershipX12InterchangeControlHeadersPtrOutput {
	return o.ApplyT(func(v *PartnershipX12OutboundEdiHeaders) *PartnershipX12InterchangeControlHeaders {
		if v == nil {
			return nil
		}
		return v.InterchangeControlHeaders
	}).(PartnershipX12InterchangeControlHeadersPtrOutput)
}

func (o PartnershipX12OutboundEdiHeadersPtrOutput) ValidateEdi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PartnershipX12OutboundEdiHeaders) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateEdi
	}).(pulumi.BoolPtrOutput)
}

type ProfileTag struct {
	// Specifies the name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name that you create.
	Value string `pulumi:"value"`
}

type TransformerEdiType0Properties struct {
	X12Details TransformerX12Details `pulumi:"x12Details"`
}

type TransformerEdiTypeProperties struct {
	X12Details TransformerX12Details `pulumi:"x12Details"`
}

// TransformerEdiTypePropertiesInput is an input type that accepts TransformerEdiTypePropertiesArgs and TransformerEdiTypePropertiesOutput values.
// You can construct a concrete instance of `TransformerEdiTypePropertiesInput` via:
//
//	TransformerEdiTypePropertiesArgs{...}
type TransformerEdiTypePropertiesInput interface {
	pulumi.Input

	ToTransformerEdiTypePropertiesOutput() TransformerEdiTypePropertiesOutput
	ToTransformerEdiTypePropertiesOutputWithContext(context.Context) TransformerEdiTypePropertiesOutput
}

type TransformerEdiTypePropertiesArgs struct {
	X12Details TransformerX12DetailsInput `pulumi:"x12Details"`
}

func (TransformerEdiTypePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerEdiTypeProperties)(nil)).Elem()
}

func (i TransformerEdiTypePropertiesArgs) ToTransformerEdiTypePropertiesOutput() TransformerEdiTypePropertiesOutput {
	return i.ToTransformerEdiTypePropertiesOutputWithContext(context.Background())
}

func (i TransformerEdiTypePropertiesArgs) ToTransformerEdiTypePropertiesOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerEdiTypePropertiesOutput)
}

func (i TransformerEdiTypePropertiesArgs) ToTransformerEdiTypePropertiesPtrOutput() TransformerEdiTypePropertiesPtrOutput {
	return i.ToTransformerEdiTypePropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerEdiTypePropertiesArgs) ToTransformerEdiTypePropertiesPtrOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerEdiTypePropertiesOutput).ToTransformerEdiTypePropertiesPtrOutputWithContext(ctx)
}

// TransformerEdiTypePropertiesPtrInput is an input type that accepts TransformerEdiTypePropertiesArgs, TransformerEdiTypePropertiesPtr and TransformerEdiTypePropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerEdiTypePropertiesPtrInput` via:
//
//	        TransformerEdiTypePropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerEdiTypePropertiesPtrInput interface {
	pulumi.Input

	ToTransformerEdiTypePropertiesPtrOutput() TransformerEdiTypePropertiesPtrOutput
	ToTransformerEdiTypePropertiesPtrOutputWithContext(context.Context) TransformerEdiTypePropertiesPtrOutput
}

type transformerEdiTypePropertiesPtrType TransformerEdiTypePropertiesArgs

func TransformerEdiTypePropertiesPtr(v *TransformerEdiTypePropertiesArgs) TransformerEdiTypePropertiesPtrInput {
	return (*transformerEdiTypePropertiesPtrType)(v)
}

func (*transformerEdiTypePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerEdiTypeProperties)(nil)).Elem()
}

func (i *transformerEdiTypePropertiesPtrType) ToTransformerEdiTypePropertiesPtrOutput() TransformerEdiTypePropertiesPtrOutput {
	return i.ToTransformerEdiTypePropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerEdiTypePropertiesPtrType) ToTransformerEdiTypePropertiesPtrOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerEdiTypePropertiesPtrOutput)
}

type TransformerEdiTypePropertiesOutput struct{ *pulumi.OutputState }

func (TransformerEdiTypePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerEdiTypeProperties)(nil)).Elem()
}

func (o TransformerEdiTypePropertiesOutput) ToTransformerEdiTypePropertiesOutput() TransformerEdiTypePropertiesOutput {
	return o
}

func (o TransformerEdiTypePropertiesOutput) ToTransformerEdiTypePropertiesOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesOutput {
	return o
}

func (o TransformerEdiTypePropertiesOutput) ToTransformerEdiTypePropertiesPtrOutput() TransformerEdiTypePropertiesPtrOutput {
	return o.ToTransformerEdiTypePropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerEdiTypePropertiesOutput) ToTransformerEdiTypePropertiesPtrOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerEdiTypeProperties) *TransformerEdiTypeProperties {
		return &v
	}).(TransformerEdiTypePropertiesPtrOutput)
}

func (o TransformerEdiTypePropertiesOutput) X12Details() TransformerX12DetailsOutput {
	return o.ApplyT(func(v TransformerEdiTypeProperties) TransformerX12Details { return v.X12Details }).(TransformerX12DetailsOutput)
}

type TransformerEdiTypePropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerEdiTypePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerEdiTypeProperties)(nil)).Elem()
}

func (o TransformerEdiTypePropertiesPtrOutput) ToTransformerEdiTypePropertiesPtrOutput() TransformerEdiTypePropertiesPtrOutput {
	return o
}

func (o TransformerEdiTypePropertiesPtrOutput) ToTransformerEdiTypePropertiesPtrOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesPtrOutput {
	return o
}

func (o TransformerEdiTypePropertiesPtrOutput) Elem() TransformerEdiTypePropertiesOutput {
	return o.ApplyT(func(v *TransformerEdiTypeProperties) TransformerEdiTypeProperties {
		if v != nil {
			return *v
		}
		var ret TransformerEdiTypeProperties
		return ret
	}).(TransformerEdiTypePropertiesOutput)
}

func (o TransformerEdiTypePropertiesPtrOutput) X12Details() TransformerX12DetailsPtrOutput {
	return o.ApplyT(func(v *TransformerEdiTypeProperties) *TransformerX12Details {
		if v == nil {
			return nil
		}
		return &v.X12Details
	}).(TransformerX12DetailsPtrOutput)
}

type TransformerFormatOptions0Properties struct {
	X12 TransformerX12Details `pulumi:"x12"`
}

type TransformerFormatOptionsProperties struct {
	X12 TransformerX12Details `pulumi:"x12"`
}

// TransformerFormatOptionsPropertiesInput is an input type that accepts TransformerFormatOptionsPropertiesArgs and TransformerFormatOptionsPropertiesOutput values.
// You can construct a concrete instance of `TransformerFormatOptionsPropertiesInput` via:
//
//	TransformerFormatOptionsPropertiesArgs{...}
type TransformerFormatOptionsPropertiesInput interface {
	pulumi.Input

	ToTransformerFormatOptionsPropertiesOutput() TransformerFormatOptionsPropertiesOutput
	ToTransformerFormatOptionsPropertiesOutputWithContext(context.Context) TransformerFormatOptionsPropertiesOutput
}

type TransformerFormatOptionsPropertiesArgs struct {
	X12 TransformerX12DetailsInput `pulumi:"x12"`
}

func (TransformerFormatOptionsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerFormatOptionsProperties)(nil)).Elem()
}

func (i TransformerFormatOptionsPropertiesArgs) ToTransformerFormatOptionsPropertiesOutput() TransformerFormatOptionsPropertiesOutput {
	return i.ToTransformerFormatOptionsPropertiesOutputWithContext(context.Background())
}

func (i TransformerFormatOptionsPropertiesArgs) ToTransformerFormatOptionsPropertiesOutputWithContext(ctx context.Context) TransformerFormatOptionsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerFormatOptionsPropertiesOutput)
}

func (i TransformerFormatOptionsPropertiesArgs) ToTransformerFormatOptionsPropertiesPtrOutput() TransformerFormatOptionsPropertiesPtrOutput {
	return i.ToTransformerFormatOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerFormatOptionsPropertiesArgs) ToTransformerFormatOptionsPropertiesPtrOutputWithContext(ctx context.Context) TransformerFormatOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerFormatOptionsPropertiesOutput).ToTransformerFormatOptionsPropertiesPtrOutputWithContext(ctx)
}

// TransformerFormatOptionsPropertiesPtrInput is an input type that accepts TransformerFormatOptionsPropertiesArgs, TransformerFormatOptionsPropertiesPtr and TransformerFormatOptionsPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerFormatOptionsPropertiesPtrInput` via:
//
//	        TransformerFormatOptionsPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerFormatOptionsPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerFormatOptionsPropertiesPtrOutput() TransformerFormatOptionsPropertiesPtrOutput
	ToTransformerFormatOptionsPropertiesPtrOutputWithContext(context.Context) TransformerFormatOptionsPropertiesPtrOutput
}

type transformerFormatOptionsPropertiesPtrType TransformerFormatOptionsPropertiesArgs

func TransformerFormatOptionsPropertiesPtr(v *TransformerFormatOptionsPropertiesArgs) TransformerFormatOptionsPropertiesPtrInput {
	return (*transformerFormatOptionsPropertiesPtrType)(v)
}

func (*transformerFormatOptionsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerFormatOptionsProperties)(nil)).Elem()
}

func (i *transformerFormatOptionsPropertiesPtrType) ToTransformerFormatOptionsPropertiesPtrOutput() TransformerFormatOptionsPropertiesPtrOutput {
	return i.ToTransformerFormatOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerFormatOptionsPropertiesPtrType) ToTransformerFormatOptionsPropertiesPtrOutputWithContext(ctx context.Context) TransformerFormatOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerFormatOptionsPropertiesPtrOutput)
}

type TransformerFormatOptionsPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerFormatOptionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerFormatOptionsProperties)(nil)).Elem()
}

func (o TransformerFormatOptionsPropertiesOutput) ToTransformerFormatOptionsPropertiesOutput() TransformerFormatOptionsPropertiesOutput {
	return o
}

func (o TransformerFormatOptionsPropertiesOutput) ToTransformerFormatOptionsPropertiesOutputWithContext(ctx context.Context) TransformerFormatOptionsPropertiesOutput {
	return o
}

func (o TransformerFormatOptionsPropertiesOutput) ToTransformerFormatOptionsPropertiesPtrOutput() TransformerFormatOptionsPropertiesPtrOutput {
	return o.ToTransformerFormatOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerFormatOptionsPropertiesOutput) ToTransformerFormatOptionsPropertiesPtrOutputWithContext(ctx context.Context) TransformerFormatOptionsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerFormatOptionsProperties) *TransformerFormatOptionsProperties {
		return &v
	}).(TransformerFormatOptionsPropertiesPtrOutput)
}

func (o TransformerFormatOptionsPropertiesOutput) X12() TransformerX12DetailsOutput {
	return o.ApplyT(func(v TransformerFormatOptionsProperties) TransformerX12Details { return v.X12 }).(TransformerX12DetailsOutput)
}

type TransformerFormatOptionsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerFormatOptionsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerFormatOptionsProperties)(nil)).Elem()
}

func (o TransformerFormatOptionsPropertiesPtrOutput) ToTransformerFormatOptionsPropertiesPtrOutput() TransformerFormatOptionsPropertiesPtrOutput {
	return o
}

func (o TransformerFormatOptionsPropertiesPtrOutput) ToTransformerFormatOptionsPropertiesPtrOutputWithContext(ctx context.Context) TransformerFormatOptionsPropertiesPtrOutput {
	return o
}

func (o TransformerFormatOptionsPropertiesPtrOutput) Elem() TransformerFormatOptionsPropertiesOutput {
	return o.ApplyT(func(v *TransformerFormatOptionsProperties) TransformerFormatOptionsProperties {
		if v != nil {
			return *v
		}
		var ret TransformerFormatOptionsProperties
		return ret
	}).(TransformerFormatOptionsPropertiesOutput)
}

func (o TransformerFormatOptionsPropertiesPtrOutput) X12() TransformerX12DetailsPtrOutput {
	return o.ApplyT(func(v *TransformerFormatOptionsProperties) *TransformerX12Details {
		if v == nil {
			return nil
		}
		return &v.X12
	}).(TransformerX12DetailsPtrOutput)
}

type TransformerInputConversion struct {
	FormatOptions *TransformerFormatOptionsProperties `pulumi:"formatOptions"`
	FromFormat    TransformerFromFormat               `pulumi:"fromFormat"`
}

// TransformerInputConversionInput is an input type that accepts TransformerInputConversionArgs and TransformerInputConversionOutput values.
// You can construct a concrete instance of `TransformerInputConversionInput` via:
//
//	TransformerInputConversionArgs{...}
type TransformerInputConversionInput interface {
	pulumi.Input

	ToTransformerInputConversionOutput() TransformerInputConversionOutput
	ToTransformerInputConversionOutputWithContext(context.Context) TransformerInputConversionOutput
}

type TransformerInputConversionArgs struct {
	FormatOptions TransformerFormatOptionsPropertiesPtrInput `pulumi:"formatOptions"`
	FromFormat    TransformerFromFormatInput                 `pulumi:"fromFormat"`
}

func (TransformerInputConversionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerInputConversion)(nil)).Elem()
}

func (i TransformerInputConversionArgs) ToTransformerInputConversionOutput() TransformerInputConversionOutput {
	return i.ToTransformerInputConversionOutputWithContext(context.Background())
}

func (i TransformerInputConversionArgs) ToTransformerInputConversionOutputWithContext(ctx context.Context) TransformerInputConversionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerInputConversionOutput)
}

func (i TransformerInputConversionArgs) ToTransformerInputConversionPtrOutput() TransformerInputConversionPtrOutput {
	return i.ToTransformerInputConversionPtrOutputWithContext(context.Background())
}

func (i TransformerInputConversionArgs) ToTransformerInputConversionPtrOutputWithContext(ctx context.Context) TransformerInputConversionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerInputConversionOutput).ToTransformerInputConversionPtrOutputWithContext(ctx)
}

// TransformerInputConversionPtrInput is an input type that accepts TransformerInputConversionArgs, TransformerInputConversionPtr and TransformerInputConversionPtrOutput values.
// You can construct a concrete instance of `TransformerInputConversionPtrInput` via:
//
//	        TransformerInputConversionArgs{...}
//
//	or:
//
//	        nil
type TransformerInputConversionPtrInput interface {
	pulumi.Input

	ToTransformerInputConversionPtrOutput() TransformerInputConversionPtrOutput
	ToTransformerInputConversionPtrOutputWithContext(context.Context) TransformerInputConversionPtrOutput
}

type transformerInputConversionPtrType TransformerInputConversionArgs

func TransformerInputConversionPtr(v *TransformerInputConversionArgs) TransformerInputConversionPtrInput {
	return (*transformerInputConversionPtrType)(v)
}

func (*transformerInputConversionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerInputConversion)(nil)).Elem()
}

func (i *transformerInputConversionPtrType) ToTransformerInputConversionPtrOutput() TransformerInputConversionPtrOutput {
	return i.ToTransformerInputConversionPtrOutputWithContext(context.Background())
}

func (i *transformerInputConversionPtrType) ToTransformerInputConversionPtrOutputWithContext(ctx context.Context) TransformerInputConversionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerInputConversionPtrOutput)
}

type TransformerInputConversionOutput struct{ *pulumi.OutputState }

func (TransformerInputConversionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerInputConversion)(nil)).Elem()
}

func (o TransformerInputConversionOutput) ToTransformerInputConversionOutput() TransformerInputConversionOutput {
	return o
}

func (o TransformerInputConversionOutput) ToTransformerInputConversionOutputWithContext(ctx context.Context) TransformerInputConversionOutput {
	return o
}

func (o TransformerInputConversionOutput) ToTransformerInputConversionPtrOutput() TransformerInputConversionPtrOutput {
	return o.ToTransformerInputConversionPtrOutputWithContext(context.Background())
}

func (o TransformerInputConversionOutput) ToTransformerInputConversionPtrOutputWithContext(ctx context.Context) TransformerInputConversionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerInputConversion) *TransformerInputConversion {
		return &v
	}).(TransformerInputConversionPtrOutput)
}

func (o TransformerInputConversionOutput) FormatOptions() TransformerFormatOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerInputConversion) *TransformerFormatOptionsProperties { return v.FormatOptions }).(TransformerFormatOptionsPropertiesPtrOutput)
}

func (o TransformerInputConversionOutput) FromFormat() TransformerFromFormatOutput {
	return o.ApplyT(func(v TransformerInputConversion) TransformerFromFormat { return v.FromFormat }).(TransformerFromFormatOutput)
}

type TransformerInputConversionPtrOutput struct{ *pulumi.OutputState }

func (TransformerInputConversionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerInputConversion)(nil)).Elem()
}

func (o TransformerInputConversionPtrOutput) ToTransformerInputConversionPtrOutput() TransformerInputConversionPtrOutput {
	return o
}

func (o TransformerInputConversionPtrOutput) ToTransformerInputConversionPtrOutputWithContext(ctx context.Context) TransformerInputConversionPtrOutput {
	return o
}

func (o TransformerInputConversionPtrOutput) Elem() TransformerInputConversionOutput {
	return o.ApplyT(func(v *TransformerInputConversion) TransformerInputConversion {
		if v != nil {
			return *v
		}
		var ret TransformerInputConversion
		return ret
	}).(TransformerInputConversionOutput)
}

func (o TransformerInputConversionPtrOutput) FormatOptions() TransformerFormatOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v *TransformerInputConversion) *TransformerFormatOptionsProperties {
		if v == nil {
			return nil
		}
		return v.FormatOptions
	}).(TransformerFormatOptionsPropertiesPtrOutput)
}

func (o TransformerInputConversionPtrOutput) FromFormat() TransformerFromFormatPtrOutput {
	return o.ApplyT(func(v *TransformerInputConversion) *TransformerFromFormat {
		if v == nil {
			return nil
		}
		return &v.FromFormat
	}).(TransformerFromFormatPtrOutput)
}

type TransformerMapping struct {
	Template         *string                            `pulumi:"template"`
	TemplateLanguage TransformerMappingTemplateLanguage `pulumi:"templateLanguage"`
}

// TransformerMappingInput is an input type that accepts TransformerMappingArgs and TransformerMappingOutput values.
// You can construct a concrete instance of `TransformerMappingInput` via:
//
//	TransformerMappingArgs{...}
type TransformerMappingInput interface {
	pulumi.Input

	ToTransformerMappingOutput() TransformerMappingOutput
	ToTransformerMappingOutputWithContext(context.Context) TransformerMappingOutput
}

type TransformerMappingArgs struct {
	Template         pulumi.StringPtrInput                   `pulumi:"template"`
	TemplateLanguage TransformerMappingTemplateLanguageInput `pulumi:"templateLanguage"`
}

func (TransformerMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMapping)(nil)).Elem()
}

func (i TransformerMappingArgs) ToTransformerMappingOutput() TransformerMappingOutput {
	return i.ToTransformerMappingOutputWithContext(context.Background())
}

func (i TransformerMappingArgs) ToTransformerMappingOutputWithContext(ctx context.Context) TransformerMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMappingOutput)
}

func (i TransformerMappingArgs) ToTransformerMappingPtrOutput() TransformerMappingPtrOutput {
	return i.ToTransformerMappingPtrOutputWithContext(context.Background())
}

func (i TransformerMappingArgs) ToTransformerMappingPtrOutputWithContext(ctx context.Context) TransformerMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMappingOutput).ToTransformerMappingPtrOutputWithContext(ctx)
}

// TransformerMappingPtrInput is an input type that accepts TransformerMappingArgs, TransformerMappingPtr and TransformerMappingPtrOutput values.
// You can construct a concrete instance of `TransformerMappingPtrInput` via:
//
//	        TransformerMappingArgs{...}
//
//	or:
//
//	        nil
type TransformerMappingPtrInput interface {
	pulumi.Input

	ToTransformerMappingPtrOutput() TransformerMappingPtrOutput
	ToTransformerMappingPtrOutputWithContext(context.Context) TransformerMappingPtrOutput
}

type transformerMappingPtrType TransformerMappingArgs

func TransformerMappingPtr(v *TransformerMappingArgs) TransformerMappingPtrInput {
	return (*transformerMappingPtrType)(v)
}

func (*transformerMappingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerMapping)(nil)).Elem()
}

func (i *transformerMappingPtrType) ToTransformerMappingPtrOutput() TransformerMappingPtrOutput {
	return i.ToTransformerMappingPtrOutputWithContext(context.Background())
}

func (i *transformerMappingPtrType) ToTransformerMappingPtrOutputWithContext(ctx context.Context) TransformerMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMappingPtrOutput)
}

type TransformerMappingOutput struct{ *pulumi.OutputState }

func (TransformerMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMapping)(nil)).Elem()
}

func (o TransformerMappingOutput) ToTransformerMappingOutput() TransformerMappingOutput {
	return o
}

func (o TransformerMappingOutput) ToTransformerMappingOutputWithContext(ctx context.Context) TransformerMappingOutput {
	return o
}

func (o TransformerMappingOutput) ToTransformerMappingPtrOutput() TransformerMappingPtrOutput {
	return o.ToTransformerMappingPtrOutputWithContext(context.Background())
}

func (o TransformerMappingOutput) ToTransformerMappingPtrOutputWithContext(ctx context.Context) TransformerMappingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerMapping) *TransformerMapping {
		return &v
	}).(TransformerMappingPtrOutput)
}

func (o TransformerMappingOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerMapping) *string { return v.Template }).(pulumi.StringPtrOutput)
}

func (o TransformerMappingOutput) TemplateLanguage() TransformerMappingTemplateLanguageOutput {
	return o.ApplyT(func(v TransformerMapping) TransformerMappingTemplateLanguage { return v.TemplateLanguage }).(TransformerMappingTemplateLanguageOutput)
}

type TransformerMappingPtrOutput struct{ *pulumi.OutputState }

func (TransformerMappingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerMapping)(nil)).Elem()
}

func (o TransformerMappingPtrOutput) ToTransformerMappingPtrOutput() TransformerMappingPtrOutput {
	return o
}

func (o TransformerMappingPtrOutput) ToTransformerMappingPtrOutputWithContext(ctx context.Context) TransformerMappingPtrOutput {
	return o
}

func (o TransformerMappingPtrOutput) Elem() TransformerMappingOutput {
	return o.ApplyT(func(v *TransformerMapping) TransformerMapping {
		if v != nil {
			return *v
		}
		var ret TransformerMapping
		return ret
	}).(TransformerMappingOutput)
}

func (o TransformerMappingPtrOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerMapping) *string {
		if v == nil {
			return nil
		}
		return v.Template
	}).(pulumi.StringPtrOutput)
}

func (o TransformerMappingPtrOutput) TemplateLanguage() TransformerMappingTemplateLanguagePtrOutput {
	return o.ApplyT(func(v *TransformerMapping) *TransformerMappingTemplateLanguage {
		if v == nil {
			return nil
		}
		return &v.TemplateLanguage
	}).(TransformerMappingTemplateLanguagePtrOutput)
}

type TransformerOutputConversion struct {
	FormatOptions *TransformerFormatOptionsProperties `pulumi:"formatOptions"`
	ToFormat      TransformerToFormat                 `pulumi:"toFormat"`
}

// TransformerOutputConversionInput is an input type that accepts TransformerOutputConversionArgs and TransformerOutputConversionOutput values.
// You can construct a concrete instance of `TransformerOutputConversionInput` via:
//
//	TransformerOutputConversionArgs{...}
type TransformerOutputConversionInput interface {
	pulumi.Input

	ToTransformerOutputConversionOutput() TransformerOutputConversionOutput
	ToTransformerOutputConversionOutputWithContext(context.Context) TransformerOutputConversionOutput
}

type TransformerOutputConversionArgs struct {
	FormatOptions TransformerFormatOptionsPropertiesPtrInput `pulumi:"formatOptions"`
	ToFormat      TransformerToFormatInput                   `pulumi:"toFormat"`
}

func (TransformerOutputConversionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerOutputConversion)(nil)).Elem()
}

func (i TransformerOutputConversionArgs) ToTransformerOutputConversionOutput() TransformerOutputConversionOutput {
	return i.ToTransformerOutputConversionOutputWithContext(context.Background())
}

func (i TransformerOutputConversionArgs) ToTransformerOutputConversionOutputWithContext(ctx context.Context) TransformerOutputConversionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerOutputConversionOutput)
}

func (i TransformerOutputConversionArgs) ToTransformerOutputConversionPtrOutput() TransformerOutputConversionPtrOutput {
	return i.ToTransformerOutputConversionPtrOutputWithContext(context.Background())
}

func (i TransformerOutputConversionArgs) ToTransformerOutputConversionPtrOutputWithContext(ctx context.Context) TransformerOutputConversionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerOutputConversionOutput).ToTransformerOutputConversionPtrOutputWithContext(ctx)
}

// TransformerOutputConversionPtrInput is an input type that accepts TransformerOutputConversionArgs, TransformerOutputConversionPtr and TransformerOutputConversionPtrOutput values.
// You can construct a concrete instance of `TransformerOutputConversionPtrInput` via:
//
//	        TransformerOutputConversionArgs{...}
//
//	or:
//
//	        nil
type TransformerOutputConversionPtrInput interface {
	pulumi.Input

	ToTransformerOutputConversionPtrOutput() TransformerOutputConversionPtrOutput
	ToTransformerOutputConversionPtrOutputWithContext(context.Context) TransformerOutputConversionPtrOutput
}

type transformerOutputConversionPtrType TransformerOutputConversionArgs

func TransformerOutputConversionPtr(v *TransformerOutputConversionArgs) TransformerOutputConversionPtrInput {
	return (*transformerOutputConversionPtrType)(v)
}

func (*transformerOutputConversionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerOutputConversion)(nil)).Elem()
}

func (i *transformerOutputConversionPtrType) ToTransformerOutputConversionPtrOutput() TransformerOutputConversionPtrOutput {
	return i.ToTransformerOutputConversionPtrOutputWithContext(context.Background())
}

func (i *transformerOutputConversionPtrType) ToTransformerOutputConversionPtrOutputWithContext(ctx context.Context) TransformerOutputConversionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerOutputConversionPtrOutput)
}

type TransformerOutputConversionOutput struct{ *pulumi.OutputState }

func (TransformerOutputConversionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerOutputConversion)(nil)).Elem()
}

func (o TransformerOutputConversionOutput) ToTransformerOutputConversionOutput() TransformerOutputConversionOutput {
	return o
}

func (o TransformerOutputConversionOutput) ToTransformerOutputConversionOutputWithContext(ctx context.Context) TransformerOutputConversionOutput {
	return o
}

func (o TransformerOutputConversionOutput) ToTransformerOutputConversionPtrOutput() TransformerOutputConversionPtrOutput {
	return o.ToTransformerOutputConversionPtrOutputWithContext(context.Background())
}

func (o TransformerOutputConversionOutput) ToTransformerOutputConversionPtrOutputWithContext(ctx context.Context) TransformerOutputConversionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerOutputConversion) *TransformerOutputConversion {
		return &v
	}).(TransformerOutputConversionPtrOutput)
}

func (o TransformerOutputConversionOutput) FormatOptions() TransformerFormatOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerOutputConversion) *TransformerFormatOptionsProperties { return v.FormatOptions }).(TransformerFormatOptionsPropertiesPtrOutput)
}

func (o TransformerOutputConversionOutput) ToFormat() TransformerToFormatOutput {
	return o.ApplyT(func(v TransformerOutputConversion) TransformerToFormat { return v.ToFormat }).(TransformerToFormatOutput)
}

type TransformerOutputConversionPtrOutput struct{ *pulumi.OutputState }

func (TransformerOutputConversionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerOutputConversion)(nil)).Elem()
}

func (o TransformerOutputConversionPtrOutput) ToTransformerOutputConversionPtrOutput() TransformerOutputConversionPtrOutput {
	return o
}

func (o TransformerOutputConversionPtrOutput) ToTransformerOutputConversionPtrOutputWithContext(ctx context.Context) TransformerOutputConversionPtrOutput {
	return o
}

func (o TransformerOutputConversionPtrOutput) Elem() TransformerOutputConversionOutput {
	return o.ApplyT(func(v *TransformerOutputConversion) TransformerOutputConversion {
		if v != nil {
			return *v
		}
		var ret TransformerOutputConversion
		return ret
	}).(TransformerOutputConversionOutput)
}

func (o TransformerOutputConversionPtrOutput) FormatOptions() TransformerFormatOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v *TransformerOutputConversion) *TransformerFormatOptionsProperties {
		if v == nil {
			return nil
		}
		return v.FormatOptions
	}).(TransformerFormatOptionsPropertiesPtrOutput)
}

func (o TransformerOutputConversionPtrOutput) ToFormat() TransformerToFormatPtrOutput {
	return o.ApplyT(func(v *TransformerOutputConversion) *TransformerToFormat {
		if v == nil {
			return nil
		}
		return &v.ToFormat
	}).(TransformerToFormatPtrOutput)
}

type TransformerSampleDocumentKeys struct {
	Input  *string `pulumi:"input"`
	Output *string `pulumi:"output"`
}

// TransformerSampleDocumentKeysInput is an input type that accepts TransformerSampleDocumentKeysArgs and TransformerSampleDocumentKeysOutput values.
// You can construct a concrete instance of `TransformerSampleDocumentKeysInput` via:
//
//	TransformerSampleDocumentKeysArgs{...}
type TransformerSampleDocumentKeysInput interface {
	pulumi.Input

	ToTransformerSampleDocumentKeysOutput() TransformerSampleDocumentKeysOutput
	ToTransformerSampleDocumentKeysOutputWithContext(context.Context) TransformerSampleDocumentKeysOutput
}

type TransformerSampleDocumentKeysArgs struct {
	Input  pulumi.StringPtrInput `pulumi:"input"`
	Output pulumi.StringPtrInput `pulumi:"output"`
}

func (TransformerSampleDocumentKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSampleDocumentKeys)(nil)).Elem()
}

func (i TransformerSampleDocumentKeysArgs) ToTransformerSampleDocumentKeysOutput() TransformerSampleDocumentKeysOutput {
	return i.ToTransformerSampleDocumentKeysOutputWithContext(context.Background())
}

func (i TransformerSampleDocumentKeysArgs) ToTransformerSampleDocumentKeysOutputWithContext(ctx context.Context) TransformerSampleDocumentKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSampleDocumentKeysOutput)
}

// TransformerSampleDocumentKeysArrayInput is an input type that accepts TransformerSampleDocumentKeysArray and TransformerSampleDocumentKeysArrayOutput values.
// You can construct a concrete instance of `TransformerSampleDocumentKeysArrayInput` via:
//
//	TransformerSampleDocumentKeysArray{ TransformerSampleDocumentKeysArgs{...} }
type TransformerSampleDocumentKeysArrayInput interface {
	pulumi.Input

	ToTransformerSampleDocumentKeysArrayOutput() TransformerSampleDocumentKeysArrayOutput
	ToTransformerSampleDocumentKeysArrayOutputWithContext(context.Context) TransformerSampleDocumentKeysArrayOutput
}

type TransformerSampleDocumentKeysArray []TransformerSampleDocumentKeysInput

func (TransformerSampleDocumentKeysArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSampleDocumentKeys)(nil)).Elem()
}

func (i TransformerSampleDocumentKeysArray) ToTransformerSampleDocumentKeysArrayOutput() TransformerSampleDocumentKeysArrayOutput {
	return i.ToTransformerSampleDocumentKeysArrayOutputWithContext(context.Background())
}

func (i TransformerSampleDocumentKeysArray) ToTransformerSampleDocumentKeysArrayOutputWithContext(ctx context.Context) TransformerSampleDocumentKeysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSampleDocumentKeysArrayOutput)
}

type TransformerSampleDocumentKeysOutput struct{ *pulumi.OutputState }

func (TransformerSampleDocumentKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSampleDocumentKeys)(nil)).Elem()
}

func (o TransformerSampleDocumentKeysOutput) ToTransformerSampleDocumentKeysOutput() TransformerSampleDocumentKeysOutput {
	return o
}

func (o TransformerSampleDocumentKeysOutput) ToTransformerSampleDocumentKeysOutputWithContext(ctx context.Context) TransformerSampleDocumentKeysOutput {
	return o
}

func (o TransformerSampleDocumentKeysOutput) Input() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSampleDocumentKeys) *string { return v.Input }).(pulumi.StringPtrOutput)
}

func (o TransformerSampleDocumentKeysOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerSampleDocumentKeys) *string { return v.Output }).(pulumi.StringPtrOutput)
}

type TransformerSampleDocumentKeysArrayOutput struct{ *pulumi.OutputState }

func (TransformerSampleDocumentKeysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSampleDocumentKeys)(nil)).Elem()
}

func (o TransformerSampleDocumentKeysArrayOutput) ToTransformerSampleDocumentKeysArrayOutput() TransformerSampleDocumentKeysArrayOutput {
	return o
}

func (o TransformerSampleDocumentKeysArrayOutput) ToTransformerSampleDocumentKeysArrayOutputWithContext(ctx context.Context) TransformerSampleDocumentKeysArrayOutput {
	return o
}

func (o TransformerSampleDocumentKeysArrayOutput) Index(i pulumi.IntInput) TransformerSampleDocumentKeysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerSampleDocumentKeys {
		return vs[0].([]TransformerSampleDocumentKeys)[vs[1].(int)]
	}).(TransformerSampleDocumentKeysOutput)
}

type TransformerSampleDocuments struct {
	BucketName string                          `pulumi:"bucketName"`
	Keys       []TransformerSampleDocumentKeys `pulumi:"keys"`
}

// TransformerSampleDocumentsInput is an input type that accepts TransformerSampleDocumentsArgs and TransformerSampleDocumentsOutput values.
// You can construct a concrete instance of `TransformerSampleDocumentsInput` via:
//
//	TransformerSampleDocumentsArgs{...}
type TransformerSampleDocumentsInput interface {
	pulumi.Input

	ToTransformerSampleDocumentsOutput() TransformerSampleDocumentsOutput
	ToTransformerSampleDocumentsOutputWithContext(context.Context) TransformerSampleDocumentsOutput
}

type TransformerSampleDocumentsArgs struct {
	BucketName pulumi.StringInput                      `pulumi:"bucketName"`
	Keys       TransformerSampleDocumentKeysArrayInput `pulumi:"keys"`
}

func (TransformerSampleDocumentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSampleDocuments)(nil)).Elem()
}

func (i TransformerSampleDocumentsArgs) ToTransformerSampleDocumentsOutput() TransformerSampleDocumentsOutput {
	return i.ToTransformerSampleDocumentsOutputWithContext(context.Background())
}

func (i TransformerSampleDocumentsArgs) ToTransformerSampleDocumentsOutputWithContext(ctx context.Context) TransformerSampleDocumentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSampleDocumentsOutput)
}

func (i TransformerSampleDocumentsArgs) ToTransformerSampleDocumentsPtrOutput() TransformerSampleDocumentsPtrOutput {
	return i.ToTransformerSampleDocumentsPtrOutputWithContext(context.Background())
}

func (i TransformerSampleDocumentsArgs) ToTransformerSampleDocumentsPtrOutputWithContext(ctx context.Context) TransformerSampleDocumentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSampleDocumentsOutput).ToTransformerSampleDocumentsPtrOutputWithContext(ctx)
}

// TransformerSampleDocumentsPtrInput is an input type that accepts TransformerSampleDocumentsArgs, TransformerSampleDocumentsPtr and TransformerSampleDocumentsPtrOutput values.
// You can construct a concrete instance of `TransformerSampleDocumentsPtrInput` via:
//
//	        TransformerSampleDocumentsArgs{...}
//
//	or:
//
//	        nil
type TransformerSampleDocumentsPtrInput interface {
	pulumi.Input

	ToTransformerSampleDocumentsPtrOutput() TransformerSampleDocumentsPtrOutput
	ToTransformerSampleDocumentsPtrOutputWithContext(context.Context) TransformerSampleDocumentsPtrOutput
}

type transformerSampleDocumentsPtrType TransformerSampleDocumentsArgs

func TransformerSampleDocumentsPtr(v *TransformerSampleDocumentsArgs) TransformerSampleDocumentsPtrInput {
	return (*transformerSampleDocumentsPtrType)(v)
}

func (*transformerSampleDocumentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerSampleDocuments)(nil)).Elem()
}

func (i *transformerSampleDocumentsPtrType) ToTransformerSampleDocumentsPtrOutput() TransformerSampleDocumentsPtrOutput {
	return i.ToTransformerSampleDocumentsPtrOutputWithContext(context.Background())
}

func (i *transformerSampleDocumentsPtrType) ToTransformerSampleDocumentsPtrOutputWithContext(ctx context.Context) TransformerSampleDocumentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSampleDocumentsPtrOutput)
}

type TransformerSampleDocumentsOutput struct{ *pulumi.OutputState }

func (TransformerSampleDocumentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSampleDocuments)(nil)).Elem()
}

func (o TransformerSampleDocumentsOutput) ToTransformerSampleDocumentsOutput() TransformerSampleDocumentsOutput {
	return o
}

func (o TransformerSampleDocumentsOutput) ToTransformerSampleDocumentsOutputWithContext(ctx context.Context) TransformerSampleDocumentsOutput {
	return o
}

func (o TransformerSampleDocumentsOutput) ToTransformerSampleDocumentsPtrOutput() TransformerSampleDocumentsPtrOutput {
	return o.ToTransformerSampleDocumentsPtrOutputWithContext(context.Background())
}

func (o TransformerSampleDocumentsOutput) ToTransformerSampleDocumentsPtrOutputWithContext(ctx context.Context) TransformerSampleDocumentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerSampleDocuments) *TransformerSampleDocuments {
		return &v
	}).(TransformerSampleDocumentsPtrOutput)
}

func (o TransformerSampleDocumentsOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerSampleDocuments) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o TransformerSampleDocumentsOutput) Keys() TransformerSampleDocumentKeysArrayOutput {
	return o.ApplyT(func(v TransformerSampleDocuments) []TransformerSampleDocumentKeys { return v.Keys }).(TransformerSampleDocumentKeysArrayOutput)
}

type TransformerSampleDocumentsPtrOutput struct{ *pulumi.OutputState }

func (TransformerSampleDocumentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerSampleDocuments)(nil)).Elem()
}

func (o TransformerSampleDocumentsPtrOutput) ToTransformerSampleDocumentsPtrOutput() TransformerSampleDocumentsPtrOutput {
	return o
}

func (o TransformerSampleDocumentsPtrOutput) ToTransformerSampleDocumentsPtrOutputWithContext(ctx context.Context) TransformerSampleDocumentsPtrOutput {
	return o
}

func (o TransformerSampleDocumentsPtrOutput) Elem() TransformerSampleDocumentsOutput {
	return o.ApplyT(func(v *TransformerSampleDocuments) TransformerSampleDocuments {
		if v != nil {
			return *v
		}
		var ret TransformerSampleDocuments
		return ret
	}).(TransformerSampleDocumentsOutput)
}

func (o TransformerSampleDocumentsPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerSampleDocuments) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o TransformerSampleDocumentsPtrOutput) Keys() TransformerSampleDocumentKeysArrayOutput {
	return o.ApplyT(func(v *TransformerSampleDocuments) []TransformerSampleDocumentKeys {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(TransformerSampleDocumentKeysArrayOutput)
}

type TransformerTag struct {
	// Specifies the name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name that you create.
	Value string `pulumi:"value"`
}

type TransformerX12Details struct {
	TransactionSet *TransformerX12TransactionSet `pulumi:"transactionSet"`
	Version        *TransformerX12Version        `pulumi:"version"`
}

// TransformerX12DetailsInput is an input type that accepts TransformerX12DetailsArgs and TransformerX12DetailsOutput values.
// You can construct a concrete instance of `TransformerX12DetailsInput` via:
//
//	TransformerX12DetailsArgs{...}
type TransformerX12DetailsInput interface {
	pulumi.Input

	ToTransformerX12DetailsOutput() TransformerX12DetailsOutput
	ToTransformerX12DetailsOutputWithContext(context.Context) TransformerX12DetailsOutput
}

type TransformerX12DetailsArgs struct {
	TransactionSet TransformerX12TransactionSetPtrInput `pulumi:"transactionSet"`
	Version        TransformerX12VersionPtrInput        `pulumi:"version"`
}

func (TransformerX12DetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12Details)(nil)).Elem()
}

func (i TransformerX12DetailsArgs) ToTransformerX12DetailsOutput() TransformerX12DetailsOutput {
	return i.ToTransformerX12DetailsOutputWithContext(context.Background())
}

func (i TransformerX12DetailsArgs) ToTransformerX12DetailsOutputWithContext(ctx context.Context) TransformerX12DetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerX12DetailsOutput)
}

func (i TransformerX12DetailsArgs) ToTransformerX12DetailsPtrOutput() TransformerX12DetailsPtrOutput {
	return i.ToTransformerX12DetailsPtrOutputWithContext(context.Background())
}

func (i TransformerX12DetailsArgs) ToTransformerX12DetailsPtrOutputWithContext(ctx context.Context) TransformerX12DetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerX12DetailsOutput).ToTransformerX12DetailsPtrOutputWithContext(ctx)
}

// TransformerX12DetailsPtrInput is an input type that accepts TransformerX12DetailsArgs, TransformerX12DetailsPtr and TransformerX12DetailsPtrOutput values.
// You can construct a concrete instance of `TransformerX12DetailsPtrInput` via:
//
//	        TransformerX12DetailsArgs{...}
//
//	or:
//
//	        nil
type TransformerX12DetailsPtrInput interface {
	pulumi.Input

	ToTransformerX12DetailsPtrOutput() TransformerX12DetailsPtrOutput
	ToTransformerX12DetailsPtrOutputWithContext(context.Context) TransformerX12DetailsPtrOutput
}

type transformerX12DetailsPtrType TransformerX12DetailsArgs

func TransformerX12DetailsPtr(v *TransformerX12DetailsArgs) TransformerX12DetailsPtrInput {
	return (*transformerX12DetailsPtrType)(v)
}

func (*transformerX12DetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerX12Details)(nil)).Elem()
}

func (i *transformerX12DetailsPtrType) ToTransformerX12DetailsPtrOutput() TransformerX12DetailsPtrOutput {
	return i.ToTransformerX12DetailsPtrOutputWithContext(context.Background())
}

func (i *transformerX12DetailsPtrType) ToTransformerX12DetailsPtrOutputWithContext(ctx context.Context) TransformerX12DetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerX12DetailsPtrOutput)
}

type TransformerX12DetailsOutput struct{ *pulumi.OutputState }

func (TransformerX12DetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12Details)(nil)).Elem()
}

func (o TransformerX12DetailsOutput) ToTransformerX12DetailsOutput() TransformerX12DetailsOutput {
	return o
}

func (o TransformerX12DetailsOutput) ToTransformerX12DetailsOutputWithContext(ctx context.Context) TransformerX12DetailsOutput {
	return o
}

func (o TransformerX12DetailsOutput) ToTransformerX12DetailsPtrOutput() TransformerX12DetailsPtrOutput {
	return o.ToTransformerX12DetailsPtrOutputWithContext(context.Background())
}

func (o TransformerX12DetailsOutput) ToTransformerX12DetailsPtrOutputWithContext(ctx context.Context) TransformerX12DetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerX12Details) *TransformerX12Details {
		return &v
	}).(TransformerX12DetailsPtrOutput)
}

func (o TransformerX12DetailsOutput) TransactionSet() TransformerX12TransactionSetPtrOutput {
	return o.ApplyT(func(v TransformerX12Details) *TransformerX12TransactionSet { return v.TransactionSet }).(TransformerX12TransactionSetPtrOutput)
}

func (o TransformerX12DetailsOutput) Version() TransformerX12VersionPtrOutput {
	return o.ApplyT(func(v TransformerX12Details) *TransformerX12Version { return v.Version }).(TransformerX12VersionPtrOutput)
}

type TransformerX12DetailsPtrOutput struct{ *pulumi.OutputState }

func (TransformerX12DetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerX12Details)(nil)).Elem()
}

func (o TransformerX12DetailsPtrOutput) ToTransformerX12DetailsPtrOutput() TransformerX12DetailsPtrOutput {
	return o
}

func (o TransformerX12DetailsPtrOutput) ToTransformerX12DetailsPtrOutputWithContext(ctx context.Context) TransformerX12DetailsPtrOutput {
	return o
}

func (o TransformerX12DetailsPtrOutput) Elem() TransformerX12DetailsOutput {
	return o.ApplyT(func(v *TransformerX12Details) TransformerX12Details {
		if v != nil {
			return *v
		}
		var ret TransformerX12Details
		return ret
	}).(TransformerX12DetailsOutput)
}

func (o TransformerX12DetailsPtrOutput) TransactionSet() TransformerX12TransactionSetPtrOutput {
	return o.ApplyT(func(v *TransformerX12Details) *TransformerX12TransactionSet {
		if v == nil {
			return nil
		}
		return v.TransactionSet
	}).(TransformerX12TransactionSetPtrOutput)
}

func (o TransformerX12DetailsPtrOutput) Version() TransformerX12VersionPtrOutput {
	return o.ApplyT(func(v *TransformerX12Details) *TransformerX12Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(TransformerX12VersionPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityConfigurationPropertiesInput)(nil)).Elem(), CapabilityConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityEdiConfigurationInput)(nil)).Elem(), CapabilityEdiConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityEdiTypePropertiesInput)(nil)).Elem(), CapabilityEdiTypePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityS3LocationInput)(nil)).Elem(), CapabilityS3LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityS3LocationArrayInput)(nil)).Elem(), CapabilityS3LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityX12DetailsInput)(nil)).Elem(), CapabilityX12DetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipCapabilityOptionsInput)(nil)).Elem(), PartnershipCapabilityOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipCapabilityOptionsPtrInput)(nil)).Elem(), PartnershipCapabilityOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipOutboundEdiOptionsPropertiesInput)(nil)).Elem(), PartnershipOutboundEdiOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipOutboundEdiOptionsPropertiesPtrInput)(nil)).Elem(), PartnershipOutboundEdiOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12DelimitersInput)(nil)).Elem(), PartnershipX12DelimitersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12DelimitersPtrInput)(nil)).Elem(), PartnershipX12DelimitersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12EnvelopeInput)(nil)).Elem(), PartnershipX12EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12EnvelopePtrInput)(nil)).Elem(), PartnershipX12EnvelopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12FunctionalGroupHeadersInput)(nil)).Elem(), PartnershipX12FunctionalGroupHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12FunctionalGroupHeadersPtrInput)(nil)).Elem(), PartnershipX12FunctionalGroupHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12InterchangeControlHeadersInput)(nil)).Elem(), PartnershipX12InterchangeControlHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12InterchangeControlHeadersPtrInput)(nil)).Elem(), PartnershipX12InterchangeControlHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12OutboundEdiHeadersInput)(nil)).Elem(), PartnershipX12OutboundEdiHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipX12OutboundEdiHeadersPtrInput)(nil)).Elem(), PartnershipX12OutboundEdiHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerEdiTypePropertiesInput)(nil)).Elem(), TransformerEdiTypePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerEdiTypePropertiesPtrInput)(nil)).Elem(), TransformerEdiTypePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerFormatOptionsPropertiesInput)(nil)).Elem(), TransformerFormatOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerFormatOptionsPropertiesPtrInput)(nil)).Elem(), TransformerFormatOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerInputConversionInput)(nil)).Elem(), TransformerInputConversionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerInputConversionPtrInput)(nil)).Elem(), TransformerInputConversionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMappingInput)(nil)).Elem(), TransformerMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMappingPtrInput)(nil)).Elem(), TransformerMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerOutputConversionInput)(nil)).Elem(), TransformerOutputConversionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerOutputConversionPtrInput)(nil)).Elem(), TransformerOutputConversionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSampleDocumentKeysInput)(nil)).Elem(), TransformerSampleDocumentKeysArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSampleDocumentKeysArrayInput)(nil)).Elem(), TransformerSampleDocumentKeysArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSampleDocumentsInput)(nil)).Elem(), TransformerSampleDocumentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSampleDocumentsPtrInput)(nil)).Elem(), TransformerSampleDocumentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerX12DetailsInput)(nil)).Elem(), TransformerX12DetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerX12DetailsPtrInput)(nil)).Elem(), TransformerX12DetailsArgs{})
	pulumi.RegisterOutputType(CapabilityConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(CapabilityConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CapabilityEdiConfigurationOutput{})
	pulumi.RegisterOutputType(CapabilityEdiConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CapabilityEdiTypePropertiesOutput{})
	pulumi.RegisterOutputType(CapabilityEdiTypePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CapabilityS3LocationOutput{})
	pulumi.RegisterOutputType(CapabilityS3LocationPtrOutput{})
	pulumi.RegisterOutputType(CapabilityS3LocationArrayOutput{})
	pulumi.RegisterOutputType(CapabilityX12DetailsOutput{})
	pulumi.RegisterOutputType(CapabilityX12DetailsPtrOutput{})
	pulumi.RegisterOutputType(PartnershipCapabilityOptionsOutput{})
	pulumi.RegisterOutputType(PartnershipCapabilityOptionsPtrOutput{})
	pulumi.RegisterOutputType(PartnershipOutboundEdiOptionsPropertiesOutput{})
	pulumi.RegisterOutputType(PartnershipOutboundEdiOptionsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PartnershipX12DelimitersOutput{})
	pulumi.RegisterOutputType(PartnershipX12DelimitersPtrOutput{})
	pulumi.RegisterOutputType(PartnershipX12EnvelopeOutput{})
	pulumi.RegisterOutputType(PartnershipX12EnvelopePtrOutput{})
	pulumi.RegisterOutputType(PartnershipX12FunctionalGroupHeadersOutput{})
	pulumi.RegisterOutputType(PartnershipX12FunctionalGroupHeadersPtrOutput{})
	pulumi.RegisterOutputType(PartnershipX12InterchangeControlHeadersOutput{})
	pulumi.RegisterOutputType(PartnershipX12InterchangeControlHeadersPtrOutput{})
	pulumi.RegisterOutputType(PartnershipX12OutboundEdiHeadersOutput{})
	pulumi.RegisterOutputType(PartnershipX12OutboundEdiHeadersPtrOutput{})
	pulumi.RegisterOutputType(TransformerEdiTypePropertiesOutput{})
	pulumi.RegisterOutputType(TransformerEdiTypePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerFormatOptionsPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerFormatOptionsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerInputConversionOutput{})
	pulumi.RegisterOutputType(TransformerInputConversionPtrOutput{})
	pulumi.RegisterOutputType(TransformerMappingOutput{})
	pulumi.RegisterOutputType(TransformerMappingPtrOutput{})
	pulumi.RegisterOutputType(TransformerOutputConversionOutput{})
	pulumi.RegisterOutputType(TransformerOutputConversionPtrOutput{})
	pulumi.RegisterOutputType(TransformerSampleDocumentKeysOutput{})
	pulumi.RegisterOutputType(TransformerSampleDocumentKeysArrayOutput{})
	pulumi.RegisterOutputType(TransformerSampleDocumentsOutput{})
	pulumi.RegisterOutputType(TransformerSampleDocumentsPtrOutput{})
	pulumi.RegisterOutputType(TransformerX12DetailsOutput{})
	pulumi.RegisterOutputType(TransformerX12DetailsPtrOutput{})
}
