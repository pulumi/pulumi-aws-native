// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CapabilityConfiguration0Properties struct {
	Edi CapabilityEdiConfiguration `pulumi:"edi"`
}

type CapabilityConfigurationProperties struct {
	Edi CapabilityEdiConfiguration `pulumi:"edi"`
}

// CapabilityConfigurationPropertiesInput is an input type that accepts CapabilityConfigurationPropertiesArgs and CapabilityConfigurationPropertiesOutput values.
// You can construct a concrete instance of `CapabilityConfigurationPropertiesInput` via:
//
//	CapabilityConfigurationPropertiesArgs{...}
type CapabilityConfigurationPropertiesInput interface {
	pulumi.Input

	ToCapabilityConfigurationPropertiesOutput() CapabilityConfigurationPropertiesOutput
	ToCapabilityConfigurationPropertiesOutputWithContext(context.Context) CapabilityConfigurationPropertiesOutput
}

type CapabilityConfigurationPropertiesArgs struct {
	Edi CapabilityEdiConfigurationInput `pulumi:"edi"`
}

func (CapabilityConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityConfigurationProperties)(nil)).Elem()
}

func (i CapabilityConfigurationPropertiesArgs) ToCapabilityConfigurationPropertiesOutput() CapabilityConfigurationPropertiesOutput {
	return i.ToCapabilityConfigurationPropertiesOutputWithContext(context.Background())
}

func (i CapabilityConfigurationPropertiesArgs) ToCapabilityConfigurationPropertiesOutputWithContext(ctx context.Context) CapabilityConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityConfigurationPropertiesOutput)
}

func (i CapabilityConfigurationPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CapabilityConfigurationProperties] {
	return pulumix.Output[CapabilityConfigurationProperties]{
		OutputState: i.ToCapabilityConfigurationPropertiesOutputWithContext(ctx).OutputState,
	}
}

type CapabilityConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (CapabilityConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityConfigurationProperties)(nil)).Elem()
}

func (o CapabilityConfigurationPropertiesOutput) ToCapabilityConfigurationPropertiesOutput() CapabilityConfigurationPropertiesOutput {
	return o
}

func (o CapabilityConfigurationPropertiesOutput) ToCapabilityConfigurationPropertiesOutputWithContext(ctx context.Context) CapabilityConfigurationPropertiesOutput {
	return o
}

func (o CapabilityConfigurationPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityConfigurationProperties] {
	return pulumix.Output[CapabilityConfigurationProperties]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityConfigurationPropertiesOutput) Edi() CapabilityEdiConfigurationOutput {
	return o.ApplyT(func(v CapabilityConfigurationProperties) CapabilityEdiConfiguration { return v.Edi }).(CapabilityEdiConfigurationOutput)
}

type CapabilityConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CapabilityConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityConfigurationProperties)(nil)).Elem()
}

func (o CapabilityConfigurationPropertiesPtrOutput) ToCapabilityConfigurationPropertiesPtrOutput() CapabilityConfigurationPropertiesPtrOutput {
	return o
}

func (o CapabilityConfigurationPropertiesPtrOutput) ToCapabilityConfigurationPropertiesPtrOutputWithContext(ctx context.Context) CapabilityConfigurationPropertiesPtrOutput {
	return o
}

func (o CapabilityConfigurationPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityConfigurationProperties] {
	return pulumix.Output[*CapabilityConfigurationProperties]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityConfigurationPropertiesPtrOutput) Elem() CapabilityConfigurationPropertiesOutput {
	return o.ApplyT(func(v *CapabilityConfigurationProperties) CapabilityConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret CapabilityConfigurationProperties
		return ret
	}).(CapabilityConfigurationPropertiesOutput)
}

func (o CapabilityConfigurationPropertiesPtrOutput) Edi() CapabilityEdiConfigurationPtrOutput {
	return o.ApplyT(func(v *CapabilityConfigurationProperties) *CapabilityEdiConfiguration {
		if v == nil {
			return nil
		}
		return &v.Edi
	}).(CapabilityEdiConfigurationPtrOutput)
}

type CapabilityEdiConfiguration struct {
	InputLocation  CapabilityS3Location        `pulumi:"inputLocation"`
	OutputLocation CapabilityS3Location        `pulumi:"outputLocation"`
	TransformerId  string                      `pulumi:"transformerId"`
	Type           CapabilityEdiTypeProperties `pulumi:"type"`
}

// CapabilityEdiConfigurationInput is an input type that accepts CapabilityEdiConfigurationArgs and CapabilityEdiConfigurationOutput values.
// You can construct a concrete instance of `CapabilityEdiConfigurationInput` via:
//
//	CapabilityEdiConfigurationArgs{...}
type CapabilityEdiConfigurationInput interface {
	pulumi.Input

	ToCapabilityEdiConfigurationOutput() CapabilityEdiConfigurationOutput
	ToCapabilityEdiConfigurationOutputWithContext(context.Context) CapabilityEdiConfigurationOutput
}

type CapabilityEdiConfigurationArgs struct {
	InputLocation  CapabilityS3LocationInput        `pulumi:"inputLocation"`
	OutputLocation CapabilityS3LocationInput        `pulumi:"outputLocation"`
	TransformerId  pulumi.StringInput               `pulumi:"transformerId"`
	Type           CapabilityEdiTypePropertiesInput `pulumi:"type"`
}

func (CapabilityEdiConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiConfiguration)(nil)).Elem()
}

func (i CapabilityEdiConfigurationArgs) ToCapabilityEdiConfigurationOutput() CapabilityEdiConfigurationOutput {
	return i.ToCapabilityEdiConfigurationOutputWithContext(context.Background())
}

func (i CapabilityEdiConfigurationArgs) ToCapabilityEdiConfigurationOutputWithContext(ctx context.Context) CapabilityEdiConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityEdiConfigurationOutput)
}

func (i CapabilityEdiConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[CapabilityEdiConfiguration] {
	return pulumix.Output[CapabilityEdiConfiguration]{
		OutputState: i.ToCapabilityEdiConfigurationOutputWithContext(ctx).OutputState,
	}
}

type CapabilityEdiConfigurationOutput struct{ *pulumi.OutputState }

func (CapabilityEdiConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiConfiguration)(nil)).Elem()
}

func (o CapabilityEdiConfigurationOutput) ToCapabilityEdiConfigurationOutput() CapabilityEdiConfigurationOutput {
	return o
}

func (o CapabilityEdiConfigurationOutput) ToCapabilityEdiConfigurationOutputWithContext(ctx context.Context) CapabilityEdiConfigurationOutput {
	return o
}

func (o CapabilityEdiConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityEdiConfiguration] {
	return pulumix.Output[CapabilityEdiConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityEdiConfigurationOutput) InputLocation() CapabilityS3LocationOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) CapabilityS3Location { return v.InputLocation }).(CapabilityS3LocationOutput)
}

func (o CapabilityEdiConfigurationOutput) OutputLocation() CapabilityS3LocationOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) CapabilityS3Location { return v.OutputLocation }).(CapabilityS3LocationOutput)
}

func (o CapabilityEdiConfigurationOutput) TransformerId() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) string { return v.TransformerId }).(pulumi.StringOutput)
}

func (o CapabilityEdiConfigurationOutput) Type() CapabilityEdiTypePropertiesOutput {
	return o.ApplyT(func(v CapabilityEdiConfiguration) CapabilityEdiTypeProperties { return v.Type }).(CapabilityEdiTypePropertiesOutput)
}

type CapabilityEdiConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CapabilityEdiConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityEdiConfiguration)(nil)).Elem()
}

func (o CapabilityEdiConfigurationPtrOutput) ToCapabilityEdiConfigurationPtrOutput() CapabilityEdiConfigurationPtrOutput {
	return o
}

func (o CapabilityEdiConfigurationPtrOutput) ToCapabilityEdiConfigurationPtrOutputWithContext(ctx context.Context) CapabilityEdiConfigurationPtrOutput {
	return o
}

func (o CapabilityEdiConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityEdiConfiguration] {
	return pulumix.Output[*CapabilityEdiConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityEdiConfigurationPtrOutput) Elem() CapabilityEdiConfigurationOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) CapabilityEdiConfiguration {
		if v != nil {
			return *v
		}
		var ret CapabilityEdiConfiguration
		return ret
	}).(CapabilityEdiConfigurationOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) InputLocation() CapabilityS3LocationPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *CapabilityS3Location {
		if v == nil {
			return nil
		}
		return &v.InputLocation
	}).(CapabilityS3LocationPtrOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) OutputLocation() CapabilityS3LocationPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *CapabilityS3Location {
		if v == nil {
			return nil
		}
		return &v.OutputLocation
	}).(CapabilityS3LocationPtrOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) TransformerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.TransformerId
	}).(pulumi.StringPtrOutput)
}

func (o CapabilityEdiConfigurationPtrOutput) Type() CapabilityEdiTypePropertiesPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiConfiguration) *CapabilityEdiTypeProperties {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(CapabilityEdiTypePropertiesPtrOutput)
}

type CapabilityEdiType0Properties struct {
	X12Details CapabilityX12Details `pulumi:"x12Details"`
}

type CapabilityEdiTypeProperties struct {
	X12Details CapabilityX12Details `pulumi:"x12Details"`
}

// CapabilityEdiTypePropertiesInput is an input type that accepts CapabilityEdiTypePropertiesArgs and CapabilityEdiTypePropertiesOutput values.
// You can construct a concrete instance of `CapabilityEdiTypePropertiesInput` via:
//
//	CapabilityEdiTypePropertiesArgs{...}
type CapabilityEdiTypePropertiesInput interface {
	pulumi.Input

	ToCapabilityEdiTypePropertiesOutput() CapabilityEdiTypePropertiesOutput
	ToCapabilityEdiTypePropertiesOutputWithContext(context.Context) CapabilityEdiTypePropertiesOutput
}

type CapabilityEdiTypePropertiesArgs struct {
	X12Details CapabilityX12DetailsInput `pulumi:"x12Details"`
}

func (CapabilityEdiTypePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiTypeProperties)(nil)).Elem()
}

func (i CapabilityEdiTypePropertiesArgs) ToCapabilityEdiTypePropertiesOutput() CapabilityEdiTypePropertiesOutput {
	return i.ToCapabilityEdiTypePropertiesOutputWithContext(context.Background())
}

func (i CapabilityEdiTypePropertiesArgs) ToCapabilityEdiTypePropertiesOutputWithContext(ctx context.Context) CapabilityEdiTypePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityEdiTypePropertiesOutput)
}

func (i CapabilityEdiTypePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CapabilityEdiTypeProperties] {
	return pulumix.Output[CapabilityEdiTypeProperties]{
		OutputState: i.ToCapabilityEdiTypePropertiesOutputWithContext(ctx).OutputState,
	}
}

type CapabilityEdiTypePropertiesOutput struct{ *pulumi.OutputState }

func (CapabilityEdiTypePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityEdiTypeProperties)(nil)).Elem()
}

func (o CapabilityEdiTypePropertiesOutput) ToCapabilityEdiTypePropertiesOutput() CapabilityEdiTypePropertiesOutput {
	return o
}

func (o CapabilityEdiTypePropertiesOutput) ToCapabilityEdiTypePropertiesOutputWithContext(ctx context.Context) CapabilityEdiTypePropertiesOutput {
	return o
}

func (o CapabilityEdiTypePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityEdiTypeProperties] {
	return pulumix.Output[CapabilityEdiTypeProperties]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityEdiTypePropertiesOutput) X12Details() CapabilityX12DetailsOutput {
	return o.ApplyT(func(v CapabilityEdiTypeProperties) CapabilityX12Details { return v.X12Details }).(CapabilityX12DetailsOutput)
}

type CapabilityEdiTypePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CapabilityEdiTypePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityEdiTypeProperties)(nil)).Elem()
}

func (o CapabilityEdiTypePropertiesPtrOutput) ToCapabilityEdiTypePropertiesPtrOutput() CapabilityEdiTypePropertiesPtrOutput {
	return o
}

func (o CapabilityEdiTypePropertiesPtrOutput) ToCapabilityEdiTypePropertiesPtrOutputWithContext(ctx context.Context) CapabilityEdiTypePropertiesPtrOutput {
	return o
}

func (o CapabilityEdiTypePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityEdiTypeProperties] {
	return pulumix.Output[*CapabilityEdiTypeProperties]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityEdiTypePropertiesPtrOutput) Elem() CapabilityEdiTypePropertiesOutput {
	return o.ApplyT(func(v *CapabilityEdiTypeProperties) CapabilityEdiTypeProperties {
		if v != nil {
			return *v
		}
		var ret CapabilityEdiTypeProperties
		return ret
	}).(CapabilityEdiTypePropertiesOutput)
}

func (o CapabilityEdiTypePropertiesPtrOutput) X12Details() CapabilityX12DetailsPtrOutput {
	return o.ApplyT(func(v *CapabilityEdiTypeProperties) *CapabilityX12Details {
		if v == nil {
			return nil
		}
		return &v.X12Details
	}).(CapabilityX12DetailsPtrOutput)
}

type CapabilityS3Location struct {
	BucketName *string `pulumi:"bucketName"`
	Key        *string `pulumi:"key"`
}

// CapabilityS3LocationInput is an input type that accepts CapabilityS3LocationArgs and CapabilityS3LocationOutput values.
// You can construct a concrete instance of `CapabilityS3LocationInput` via:
//
//	CapabilityS3LocationArgs{...}
type CapabilityS3LocationInput interface {
	pulumi.Input

	ToCapabilityS3LocationOutput() CapabilityS3LocationOutput
	ToCapabilityS3LocationOutputWithContext(context.Context) CapabilityS3LocationOutput
}

type CapabilityS3LocationArgs struct {
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	Key        pulumi.StringPtrInput `pulumi:"key"`
}

func (CapabilityS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityS3Location)(nil)).Elem()
}

func (i CapabilityS3LocationArgs) ToCapabilityS3LocationOutput() CapabilityS3LocationOutput {
	return i.ToCapabilityS3LocationOutputWithContext(context.Background())
}

func (i CapabilityS3LocationArgs) ToCapabilityS3LocationOutputWithContext(ctx context.Context) CapabilityS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityS3LocationOutput)
}

func (i CapabilityS3LocationArgs) ToOutput(ctx context.Context) pulumix.Output[CapabilityS3Location] {
	return pulumix.Output[CapabilityS3Location]{
		OutputState: i.ToCapabilityS3LocationOutputWithContext(ctx).OutputState,
	}
}

// CapabilityS3LocationArrayInput is an input type that accepts CapabilityS3LocationArray and CapabilityS3LocationArrayOutput values.
// You can construct a concrete instance of `CapabilityS3LocationArrayInput` via:
//
//	CapabilityS3LocationArray{ CapabilityS3LocationArgs{...} }
type CapabilityS3LocationArrayInput interface {
	pulumi.Input

	ToCapabilityS3LocationArrayOutput() CapabilityS3LocationArrayOutput
	ToCapabilityS3LocationArrayOutputWithContext(context.Context) CapabilityS3LocationArrayOutput
}

type CapabilityS3LocationArray []CapabilityS3LocationInput

func (CapabilityS3LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityS3Location)(nil)).Elem()
}

func (i CapabilityS3LocationArray) ToCapabilityS3LocationArrayOutput() CapabilityS3LocationArrayOutput {
	return i.ToCapabilityS3LocationArrayOutputWithContext(context.Background())
}

func (i CapabilityS3LocationArray) ToCapabilityS3LocationArrayOutputWithContext(ctx context.Context) CapabilityS3LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityS3LocationArrayOutput)
}

func (i CapabilityS3LocationArray) ToOutput(ctx context.Context) pulumix.Output[[]CapabilityS3Location] {
	return pulumix.Output[[]CapabilityS3Location]{
		OutputState: i.ToCapabilityS3LocationArrayOutputWithContext(ctx).OutputState,
	}
}

type CapabilityS3LocationOutput struct{ *pulumi.OutputState }

func (CapabilityS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityS3Location)(nil)).Elem()
}

func (o CapabilityS3LocationOutput) ToCapabilityS3LocationOutput() CapabilityS3LocationOutput {
	return o
}

func (o CapabilityS3LocationOutput) ToCapabilityS3LocationOutputWithContext(ctx context.Context) CapabilityS3LocationOutput {
	return o
}

func (o CapabilityS3LocationOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityS3Location] {
	return pulumix.Output[CapabilityS3Location]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityS3LocationOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityS3Location) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o CapabilityS3LocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityS3Location) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type CapabilityS3LocationPtrOutput struct{ *pulumi.OutputState }

func (CapabilityS3LocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityS3Location)(nil)).Elem()
}

func (o CapabilityS3LocationPtrOutput) ToCapabilityS3LocationPtrOutput() CapabilityS3LocationPtrOutput {
	return o
}

func (o CapabilityS3LocationPtrOutput) ToCapabilityS3LocationPtrOutputWithContext(ctx context.Context) CapabilityS3LocationPtrOutput {
	return o
}

func (o CapabilityS3LocationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityS3Location] {
	return pulumix.Output[*CapabilityS3Location]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityS3LocationPtrOutput) Elem() CapabilityS3LocationOutput {
	return o.ApplyT(func(v *CapabilityS3Location) CapabilityS3Location {
		if v != nil {
			return *v
		}
		var ret CapabilityS3Location
		return ret
	}).(CapabilityS3LocationOutput)
}

func (o CapabilityS3LocationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapabilityS3Location) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o CapabilityS3LocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapabilityS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type CapabilityS3LocationArrayOutput struct{ *pulumi.OutputState }

func (CapabilityS3LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityS3Location)(nil)).Elem()
}

func (o CapabilityS3LocationArrayOutput) ToCapabilityS3LocationArrayOutput() CapabilityS3LocationArrayOutput {
	return o
}

func (o CapabilityS3LocationArrayOutput) ToCapabilityS3LocationArrayOutputWithContext(ctx context.Context) CapabilityS3LocationArrayOutput {
	return o
}

func (o CapabilityS3LocationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CapabilityS3Location] {
	return pulumix.Output[[]CapabilityS3Location]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityS3LocationArrayOutput) Index(i pulumi.IntInput) CapabilityS3LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapabilityS3Location {
		return vs[0].([]CapabilityS3Location)[vs[1].(int)]
	}).(CapabilityS3LocationOutput)
}

type CapabilityTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// CapabilityTagInput is an input type that accepts CapabilityTagArgs and CapabilityTagOutput values.
// You can construct a concrete instance of `CapabilityTagInput` via:
//
//	CapabilityTagArgs{...}
type CapabilityTagInput interface {
	pulumi.Input

	ToCapabilityTagOutput() CapabilityTagOutput
	ToCapabilityTagOutputWithContext(context.Context) CapabilityTagOutput
}

type CapabilityTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (CapabilityTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityTag)(nil)).Elem()
}

func (i CapabilityTagArgs) ToCapabilityTagOutput() CapabilityTagOutput {
	return i.ToCapabilityTagOutputWithContext(context.Background())
}

func (i CapabilityTagArgs) ToCapabilityTagOutputWithContext(ctx context.Context) CapabilityTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityTagOutput)
}

func (i CapabilityTagArgs) ToOutput(ctx context.Context) pulumix.Output[CapabilityTag] {
	return pulumix.Output[CapabilityTag]{
		OutputState: i.ToCapabilityTagOutputWithContext(ctx).OutputState,
	}
}

// CapabilityTagArrayInput is an input type that accepts CapabilityTagArray and CapabilityTagArrayOutput values.
// You can construct a concrete instance of `CapabilityTagArrayInput` via:
//
//	CapabilityTagArray{ CapabilityTagArgs{...} }
type CapabilityTagArrayInput interface {
	pulumi.Input

	ToCapabilityTagArrayOutput() CapabilityTagArrayOutput
	ToCapabilityTagArrayOutputWithContext(context.Context) CapabilityTagArrayOutput
}

type CapabilityTagArray []CapabilityTagInput

func (CapabilityTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityTag)(nil)).Elem()
}

func (i CapabilityTagArray) ToCapabilityTagArrayOutput() CapabilityTagArrayOutput {
	return i.ToCapabilityTagArrayOutputWithContext(context.Background())
}

func (i CapabilityTagArray) ToCapabilityTagArrayOutputWithContext(ctx context.Context) CapabilityTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityTagArrayOutput)
}

func (i CapabilityTagArray) ToOutput(ctx context.Context) pulumix.Output[[]CapabilityTag] {
	return pulumix.Output[[]CapabilityTag]{
		OutputState: i.ToCapabilityTagArrayOutputWithContext(ctx).OutputState,
	}
}

type CapabilityTagOutput struct{ *pulumi.OutputState }

func (CapabilityTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityTag)(nil)).Elem()
}

func (o CapabilityTagOutput) ToCapabilityTagOutput() CapabilityTagOutput {
	return o
}

func (o CapabilityTagOutput) ToCapabilityTagOutputWithContext(ctx context.Context) CapabilityTagOutput {
	return o
}

func (o CapabilityTagOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityTag] {
	return pulumix.Output[CapabilityTag]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o CapabilityTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityTag) string { return v.Value }).(pulumi.StringOutput)
}

type CapabilityTagArrayOutput struct{ *pulumi.OutputState }

func (CapabilityTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityTag)(nil)).Elem()
}

func (o CapabilityTagArrayOutput) ToCapabilityTagArrayOutput() CapabilityTagArrayOutput {
	return o
}

func (o CapabilityTagArrayOutput) ToCapabilityTagArrayOutputWithContext(ctx context.Context) CapabilityTagArrayOutput {
	return o
}

func (o CapabilityTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CapabilityTag] {
	return pulumix.Output[[]CapabilityTag]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityTagArrayOutput) Index(i pulumi.IntInput) CapabilityTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapabilityTag {
		return vs[0].([]CapabilityTag)[vs[1].(int)]
	}).(CapabilityTagOutput)
}

type CapabilityX12Details struct {
	TransactionSet *CapabilityX12TransactionSet `pulumi:"transactionSet"`
	Version        *CapabilityX12Version        `pulumi:"version"`
}

// CapabilityX12DetailsInput is an input type that accepts CapabilityX12DetailsArgs and CapabilityX12DetailsOutput values.
// You can construct a concrete instance of `CapabilityX12DetailsInput` via:
//
//	CapabilityX12DetailsArgs{...}
type CapabilityX12DetailsInput interface {
	pulumi.Input

	ToCapabilityX12DetailsOutput() CapabilityX12DetailsOutput
	ToCapabilityX12DetailsOutputWithContext(context.Context) CapabilityX12DetailsOutput
}

type CapabilityX12DetailsArgs struct {
	TransactionSet CapabilityX12TransactionSetPtrInput `pulumi:"transactionSet"`
	Version        CapabilityX12VersionPtrInput        `pulumi:"version"`
}

func (CapabilityX12DetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12Details)(nil)).Elem()
}

func (i CapabilityX12DetailsArgs) ToCapabilityX12DetailsOutput() CapabilityX12DetailsOutput {
	return i.ToCapabilityX12DetailsOutputWithContext(context.Background())
}

func (i CapabilityX12DetailsArgs) ToCapabilityX12DetailsOutputWithContext(ctx context.Context) CapabilityX12DetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityX12DetailsOutput)
}

func (i CapabilityX12DetailsArgs) ToOutput(ctx context.Context) pulumix.Output[CapabilityX12Details] {
	return pulumix.Output[CapabilityX12Details]{
		OutputState: i.ToCapabilityX12DetailsOutputWithContext(ctx).OutputState,
	}
}

type CapabilityX12DetailsOutput struct{ *pulumi.OutputState }

func (CapabilityX12DetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12Details)(nil)).Elem()
}

func (o CapabilityX12DetailsOutput) ToCapabilityX12DetailsOutput() CapabilityX12DetailsOutput {
	return o
}

func (o CapabilityX12DetailsOutput) ToCapabilityX12DetailsOutputWithContext(ctx context.Context) CapabilityX12DetailsOutput {
	return o
}

func (o CapabilityX12DetailsOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityX12Details] {
	return pulumix.Output[CapabilityX12Details]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityX12DetailsOutput) TransactionSet() CapabilityX12TransactionSetPtrOutput {
	return o.ApplyT(func(v CapabilityX12Details) *CapabilityX12TransactionSet { return v.TransactionSet }).(CapabilityX12TransactionSetPtrOutput)
}

func (o CapabilityX12DetailsOutput) Version() CapabilityX12VersionPtrOutput {
	return o.ApplyT(func(v CapabilityX12Details) *CapabilityX12Version { return v.Version }).(CapabilityX12VersionPtrOutput)
}

type CapabilityX12DetailsPtrOutput struct{ *pulumi.OutputState }

func (CapabilityX12DetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityX12Details)(nil)).Elem()
}

func (o CapabilityX12DetailsPtrOutput) ToCapabilityX12DetailsPtrOutput() CapabilityX12DetailsPtrOutput {
	return o
}

func (o CapabilityX12DetailsPtrOutput) ToCapabilityX12DetailsPtrOutputWithContext(ctx context.Context) CapabilityX12DetailsPtrOutput {
	return o
}

func (o CapabilityX12DetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityX12Details] {
	return pulumix.Output[*CapabilityX12Details]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityX12DetailsPtrOutput) Elem() CapabilityX12DetailsOutput {
	return o.ApplyT(func(v *CapabilityX12Details) CapabilityX12Details {
		if v != nil {
			return *v
		}
		var ret CapabilityX12Details
		return ret
	}).(CapabilityX12DetailsOutput)
}

func (o CapabilityX12DetailsPtrOutput) TransactionSet() CapabilityX12TransactionSetPtrOutput {
	return o.ApplyT(func(v *CapabilityX12Details) *CapabilityX12TransactionSet {
		if v == nil {
			return nil
		}
		return v.TransactionSet
	}).(CapabilityX12TransactionSetPtrOutput)
}

func (o CapabilityX12DetailsPtrOutput) Version() CapabilityX12VersionPtrOutput {
	return o.ApplyT(func(v *CapabilityX12Details) *CapabilityX12Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(CapabilityX12VersionPtrOutput)
}

type PartnershipTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// PartnershipTagInput is an input type that accepts PartnershipTagArgs and PartnershipTagOutput values.
// You can construct a concrete instance of `PartnershipTagInput` via:
//
//	PartnershipTagArgs{...}
type PartnershipTagInput interface {
	pulumi.Input

	ToPartnershipTagOutput() PartnershipTagOutput
	ToPartnershipTagOutputWithContext(context.Context) PartnershipTagOutput
}

type PartnershipTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PartnershipTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipTag)(nil)).Elem()
}

func (i PartnershipTagArgs) ToPartnershipTagOutput() PartnershipTagOutput {
	return i.ToPartnershipTagOutputWithContext(context.Background())
}

func (i PartnershipTagArgs) ToPartnershipTagOutputWithContext(ctx context.Context) PartnershipTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipTagOutput)
}

func (i PartnershipTagArgs) ToOutput(ctx context.Context) pulumix.Output[PartnershipTag] {
	return pulumix.Output[PartnershipTag]{
		OutputState: i.ToPartnershipTagOutputWithContext(ctx).OutputState,
	}
}

// PartnershipTagArrayInput is an input type that accepts PartnershipTagArray and PartnershipTagArrayOutput values.
// You can construct a concrete instance of `PartnershipTagArrayInput` via:
//
//	PartnershipTagArray{ PartnershipTagArgs{...} }
type PartnershipTagArrayInput interface {
	pulumi.Input

	ToPartnershipTagArrayOutput() PartnershipTagArrayOutput
	ToPartnershipTagArrayOutputWithContext(context.Context) PartnershipTagArrayOutput
}

type PartnershipTagArray []PartnershipTagInput

func (PartnershipTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartnershipTag)(nil)).Elem()
}

func (i PartnershipTagArray) ToPartnershipTagArrayOutput() PartnershipTagArrayOutput {
	return i.ToPartnershipTagArrayOutputWithContext(context.Background())
}

func (i PartnershipTagArray) ToPartnershipTagArrayOutputWithContext(ctx context.Context) PartnershipTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipTagArrayOutput)
}

func (i PartnershipTagArray) ToOutput(ctx context.Context) pulumix.Output[[]PartnershipTag] {
	return pulumix.Output[[]PartnershipTag]{
		OutputState: i.ToPartnershipTagArrayOutputWithContext(ctx).OutputState,
	}
}

type PartnershipTagOutput struct{ *pulumi.OutputState }

func (PartnershipTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnershipTag)(nil)).Elem()
}

func (o PartnershipTagOutput) ToPartnershipTagOutput() PartnershipTagOutput {
	return o
}

func (o PartnershipTagOutput) ToPartnershipTagOutputWithContext(ctx context.Context) PartnershipTagOutput {
	return o
}

func (o PartnershipTagOutput) ToOutput(ctx context.Context) pulumix.Output[PartnershipTag] {
	return pulumix.Output[PartnershipTag]{
		OutputState: o.OutputState,
	}
}

func (o PartnershipTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PartnershipTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PartnershipTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PartnershipTag) string { return v.Value }).(pulumi.StringOutput)
}

type PartnershipTagArrayOutput struct{ *pulumi.OutputState }

func (PartnershipTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartnershipTag)(nil)).Elem()
}

func (o PartnershipTagArrayOutput) ToPartnershipTagArrayOutput() PartnershipTagArrayOutput {
	return o
}

func (o PartnershipTagArrayOutput) ToPartnershipTagArrayOutputWithContext(ctx context.Context) PartnershipTagArrayOutput {
	return o
}

func (o PartnershipTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PartnershipTag] {
	return pulumix.Output[[]PartnershipTag]{
		OutputState: o.OutputState,
	}
}

func (o PartnershipTagArrayOutput) Index(i pulumi.IntInput) PartnershipTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartnershipTag {
		return vs[0].([]PartnershipTag)[vs[1].(int)]
	}).(PartnershipTagOutput)
}

type ProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ProfileTagInput is an input type that accepts ProfileTagArgs and ProfileTagOutput values.
// You can construct a concrete instance of `ProfileTagInput` via:
//
//	ProfileTagArgs{...}
type ProfileTagInput interface {
	pulumi.Input

	ToProfileTagOutput() ProfileTagOutput
	ToProfileTagOutputWithContext(context.Context) ProfileTagOutput
}

type ProfileTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProfileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTag)(nil)).Elem()
}

func (i ProfileTagArgs) ToProfileTagOutput() ProfileTagOutput {
	return i.ToProfileTagOutputWithContext(context.Background())
}

func (i ProfileTagArgs) ToProfileTagOutputWithContext(ctx context.Context) ProfileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTagOutput)
}

func (i ProfileTagArgs) ToOutput(ctx context.Context) pulumix.Output[ProfileTag] {
	return pulumix.Output[ProfileTag]{
		OutputState: i.ToProfileTagOutputWithContext(ctx).OutputState,
	}
}

// ProfileTagArrayInput is an input type that accepts ProfileTagArray and ProfileTagArrayOutput values.
// You can construct a concrete instance of `ProfileTagArrayInput` via:
//
//	ProfileTagArray{ ProfileTagArgs{...} }
type ProfileTagArrayInput interface {
	pulumi.Input

	ToProfileTagArrayOutput() ProfileTagArrayOutput
	ToProfileTagArrayOutputWithContext(context.Context) ProfileTagArrayOutput
}

type ProfileTagArray []ProfileTagInput

func (ProfileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileTag)(nil)).Elem()
}

func (i ProfileTagArray) ToProfileTagArrayOutput() ProfileTagArrayOutput {
	return i.ToProfileTagArrayOutputWithContext(context.Background())
}

func (i ProfileTagArray) ToProfileTagArrayOutputWithContext(ctx context.Context) ProfileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTagArrayOutput)
}

func (i ProfileTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ProfileTag] {
	return pulumix.Output[[]ProfileTag]{
		OutputState: i.ToProfileTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ProfileTagOutput struct{ *pulumi.OutputState }

func (ProfileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTag)(nil)).Elem()
}

func (o ProfileTagOutput) ToProfileTagOutput() ProfileTagOutput {
	return o
}

func (o ProfileTagOutput) ToProfileTagOutputWithContext(ctx context.Context) ProfileTagOutput {
	return o
}

func (o ProfileTagOutput) ToOutput(ctx context.Context) pulumix.Output[ProfileTag] {
	return pulumix.Output[ProfileTag]{
		OutputState: o.OutputState,
	}
}

func (o ProfileTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProfileTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTag) string { return v.Value }).(pulumi.StringOutput)
}

type ProfileTagArrayOutput struct{ *pulumi.OutputState }

func (ProfileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileTag)(nil)).Elem()
}

func (o ProfileTagArrayOutput) ToProfileTagArrayOutput() ProfileTagArrayOutput {
	return o
}

func (o ProfileTagArrayOutput) ToProfileTagArrayOutputWithContext(ctx context.Context) ProfileTagArrayOutput {
	return o
}

func (o ProfileTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProfileTag] {
	return pulumix.Output[[]ProfileTag]{
		OutputState: o.OutputState,
	}
}

func (o ProfileTagArrayOutput) Index(i pulumi.IntInput) ProfileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileTag {
		return vs[0].([]ProfileTag)[vs[1].(int)]
	}).(ProfileTagOutput)
}

type TransformerEdiType0Properties struct {
	X12Details TransformerX12Details `pulumi:"x12Details"`
}

type TransformerEdiTypeProperties struct {
	X12Details TransformerX12Details `pulumi:"x12Details"`
}

// TransformerEdiTypePropertiesInput is an input type that accepts TransformerEdiTypePropertiesArgs and TransformerEdiTypePropertiesOutput values.
// You can construct a concrete instance of `TransformerEdiTypePropertiesInput` via:
//
//	TransformerEdiTypePropertiesArgs{...}
type TransformerEdiTypePropertiesInput interface {
	pulumi.Input

	ToTransformerEdiTypePropertiesOutput() TransformerEdiTypePropertiesOutput
	ToTransformerEdiTypePropertiesOutputWithContext(context.Context) TransformerEdiTypePropertiesOutput
}

type TransformerEdiTypePropertiesArgs struct {
	X12Details TransformerX12DetailsInput `pulumi:"x12Details"`
}

func (TransformerEdiTypePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerEdiTypeProperties)(nil)).Elem()
}

func (i TransformerEdiTypePropertiesArgs) ToTransformerEdiTypePropertiesOutput() TransformerEdiTypePropertiesOutput {
	return i.ToTransformerEdiTypePropertiesOutputWithContext(context.Background())
}

func (i TransformerEdiTypePropertiesArgs) ToTransformerEdiTypePropertiesOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerEdiTypePropertiesOutput)
}

func (i TransformerEdiTypePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[TransformerEdiTypeProperties] {
	return pulumix.Output[TransformerEdiTypeProperties]{
		OutputState: i.ToTransformerEdiTypePropertiesOutputWithContext(ctx).OutputState,
	}
}

type TransformerEdiTypePropertiesOutput struct{ *pulumi.OutputState }

func (TransformerEdiTypePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerEdiTypeProperties)(nil)).Elem()
}

func (o TransformerEdiTypePropertiesOutput) ToTransformerEdiTypePropertiesOutput() TransformerEdiTypePropertiesOutput {
	return o
}

func (o TransformerEdiTypePropertiesOutput) ToTransformerEdiTypePropertiesOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesOutput {
	return o
}

func (o TransformerEdiTypePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[TransformerEdiTypeProperties] {
	return pulumix.Output[TransformerEdiTypeProperties]{
		OutputState: o.OutputState,
	}
}

func (o TransformerEdiTypePropertiesOutput) X12Details() TransformerX12DetailsOutput {
	return o.ApplyT(func(v TransformerEdiTypeProperties) TransformerX12Details { return v.X12Details }).(TransformerX12DetailsOutput)
}

type TransformerEdiTypePropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerEdiTypePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerEdiTypeProperties)(nil)).Elem()
}

func (o TransformerEdiTypePropertiesPtrOutput) ToTransformerEdiTypePropertiesPtrOutput() TransformerEdiTypePropertiesPtrOutput {
	return o
}

func (o TransformerEdiTypePropertiesPtrOutput) ToTransformerEdiTypePropertiesPtrOutputWithContext(ctx context.Context) TransformerEdiTypePropertiesPtrOutput {
	return o
}

func (o TransformerEdiTypePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformerEdiTypeProperties] {
	return pulumix.Output[*TransformerEdiTypeProperties]{
		OutputState: o.OutputState,
	}
}

func (o TransformerEdiTypePropertiesPtrOutput) Elem() TransformerEdiTypePropertiesOutput {
	return o.ApplyT(func(v *TransformerEdiTypeProperties) TransformerEdiTypeProperties {
		if v != nil {
			return *v
		}
		var ret TransformerEdiTypeProperties
		return ret
	}).(TransformerEdiTypePropertiesOutput)
}

func (o TransformerEdiTypePropertiesPtrOutput) X12Details() TransformerX12DetailsPtrOutput {
	return o.ApplyT(func(v *TransformerEdiTypeProperties) *TransformerX12Details {
		if v == nil {
			return nil
		}
		return &v.X12Details
	}).(TransformerX12DetailsPtrOutput)
}

type TransformerTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// TransformerTagInput is an input type that accepts TransformerTagArgs and TransformerTagOutput values.
// You can construct a concrete instance of `TransformerTagInput` via:
//
//	TransformerTagArgs{...}
type TransformerTagInput interface {
	pulumi.Input

	ToTransformerTagOutput() TransformerTagOutput
	ToTransformerTagOutputWithContext(context.Context) TransformerTagOutput
}

type TransformerTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (TransformerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTag)(nil)).Elem()
}

func (i TransformerTagArgs) ToTransformerTagOutput() TransformerTagOutput {
	return i.ToTransformerTagOutputWithContext(context.Background())
}

func (i TransformerTagArgs) ToTransformerTagOutputWithContext(ctx context.Context) TransformerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTagOutput)
}

func (i TransformerTagArgs) ToOutput(ctx context.Context) pulumix.Output[TransformerTag] {
	return pulumix.Output[TransformerTag]{
		OutputState: i.ToTransformerTagOutputWithContext(ctx).OutputState,
	}
}

// TransformerTagArrayInput is an input type that accepts TransformerTagArray and TransformerTagArrayOutput values.
// You can construct a concrete instance of `TransformerTagArrayInput` via:
//
//	TransformerTagArray{ TransformerTagArgs{...} }
type TransformerTagArrayInput interface {
	pulumi.Input

	ToTransformerTagArrayOutput() TransformerTagArrayOutput
	ToTransformerTagArrayOutputWithContext(context.Context) TransformerTagArrayOutput
}

type TransformerTagArray []TransformerTagInput

func (TransformerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerTag)(nil)).Elem()
}

func (i TransformerTagArray) ToTransformerTagArrayOutput() TransformerTagArrayOutput {
	return i.ToTransformerTagArrayOutputWithContext(context.Background())
}

func (i TransformerTagArray) ToTransformerTagArrayOutputWithContext(ctx context.Context) TransformerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTagArrayOutput)
}

func (i TransformerTagArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformerTag] {
	return pulumix.Output[[]TransformerTag]{
		OutputState: i.ToTransformerTagArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformerTagOutput struct{ *pulumi.OutputState }

func (TransformerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTag)(nil)).Elem()
}

func (o TransformerTagOutput) ToTransformerTagOutput() TransformerTagOutput {
	return o
}

func (o TransformerTagOutput) ToTransformerTagOutputWithContext(ctx context.Context) TransformerTagOutput {
	return o
}

func (o TransformerTagOutput) ToOutput(ctx context.Context) pulumix.Output[TransformerTag] {
	return pulumix.Output[TransformerTag]{
		OutputState: o.OutputState,
	}
}

func (o TransformerTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o TransformerTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerTag) string { return v.Value }).(pulumi.StringOutput)
}

type TransformerTagArrayOutput struct{ *pulumi.OutputState }

func (TransformerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerTag)(nil)).Elem()
}

func (o TransformerTagArrayOutput) ToTransformerTagArrayOutput() TransformerTagArrayOutput {
	return o
}

func (o TransformerTagArrayOutput) ToTransformerTagArrayOutputWithContext(ctx context.Context) TransformerTagArrayOutput {
	return o
}

func (o TransformerTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformerTag] {
	return pulumix.Output[[]TransformerTag]{
		OutputState: o.OutputState,
	}
}

func (o TransformerTagArrayOutput) Index(i pulumi.IntInput) TransformerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerTag {
		return vs[0].([]TransformerTag)[vs[1].(int)]
	}).(TransformerTagOutput)
}

type TransformerX12Details struct {
	TransactionSet *TransformerX12TransactionSet `pulumi:"transactionSet"`
	Version        *TransformerX12Version        `pulumi:"version"`
}

// TransformerX12DetailsInput is an input type that accepts TransformerX12DetailsArgs and TransformerX12DetailsOutput values.
// You can construct a concrete instance of `TransformerX12DetailsInput` via:
//
//	TransformerX12DetailsArgs{...}
type TransformerX12DetailsInput interface {
	pulumi.Input

	ToTransformerX12DetailsOutput() TransformerX12DetailsOutput
	ToTransformerX12DetailsOutputWithContext(context.Context) TransformerX12DetailsOutput
}

type TransformerX12DetailsArgs struct {
	TransactionSet TransformerX12TransactionSetPtrInput `pulumi:"transactionSet"`
	Version        TransformerX12VersionPtrInput        `pulumi:"version"`
}

func (TransformerX12DetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12Details)(nil)).Elem()
}

func (i TransformerX12DetailsArgs) ToTransformerX12DetailsOutput() TransformerX12DetailsOutput {
	return i.ToTransformerX12DetailsOutputWithContext(context.Background())
}

func (i TransformerX12DetailsArgs) ToTransformerX12DetailsOutputWithContext(ctx context.Context) TransformerX12DetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerX12DetailsOutput)
}

func (i TransformerX12DetailsArgs) ToOutput(ctx context.Context) pulumix.Output[TransformerX12Details] {
	return pulumix.Output[TransformerX12Details]{
		OutputState: i.ToTransformerX12DetailsOutputWithContext(ctx).OutputState,
	}
}

type TransformerX12DetailsOutput struct{ *pulumi.OutputState }

func (TransformerX12DetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12Details)(nil)).Elem()
}

func (o TransformerX12DetailsOutput) ToTransformerX12DetailsOutput() TransformerX12DetailsOutput {
	return o
}

func (o TransformerX12DetailsOutput) ToTransformerX12DetailsOutputWithContext(ctx context.Context) TransformerX12DetailsOutput {
	return o
}

func (o TransformerX12DetailsOutput) ToOutput(ctx context.Context) pulumix.Output[TransformerX12Details] {
	return pulumix.Output[TransformerX12Details]{
		OutputState: o.OutputState,
	}
}

func (o TransformerX12DetailsOutput) TransactionSet() TransformerX12TransactionSetPtrOutput {
	return o.ApplyT(func(v TransformerX12Details) *TransformerX12TransactionSet { return v.TransactionSet }).(TransformerX12TransactionSetPtrOutput)
}

func (o TransformerX12DetailsOutput) Version() TransformerX12VersionPtrOutput {
	return o.ApplyT(func(v TransformerX12Details) *TransformerX12Version { return v.Version }).(TransformerX12VersionPtrOutput)
}

type TransformerX12DetailsPtrOutput struct{ *pulumi.OutputState }

func (TransformerX12DetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerX12Details)(nil)).Elem()
}

func (o TransformerX12DetailsPtrOutput) ToTransformerX12DetailsPtrOutput() TransformerX12DetailsPtrOutput {
	return o
}

func (o TransformerX12DetailsPtrOutput) ToTransformerX12DetailsPtrOutputWithContext(ctx context.Context) TransformerX12DetailsPtrOutput {
	return o
}

func (o TransformerX12DetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformerX12Details] {
	return pulumix.Output[*TransformerX12Details]{
		OutputState: o.OutputState,
	}
}

func (o TransformerX12DetailsPtrOutput) Elem() TransformerX12DetailsOutput {
	return o.ApplyT(func(v *TransformerX12Details) TransformerX12Details {
		if v != nil {
			return *v
		}
		var ret TransformerX12Details
		return ret
	}).(TransformerX12DetailsOutput)
}

func (o TransformerX12DetailsPtrOutput) TransactionSet() TransformerX12TransactionSetPtrOutput {
	return o.ApplyT(func(v *TransformerX12Details) *TransformerX12TransactionSet {
		if v == nil {
			return nil
		}
		return v.TransactionSet
	}).(TransformerX12TransactionSetPtrOutput)
}

func (o TransformerX12DetailsPtrOutput) Version() TransformerX12VersionPtrOutput {
	return o.ApplyT(func(v *TransformerX12Details) *TransformerX12Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(TransformerX12VersionPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityConfigurationPropertiesInput)(nil)).Elem(), CapabilityConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityEdiConfigurationInput)(nil)).Elem(), CapabilityEdiConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityEdiTypePropertiesInput)(nil)).Elem(), CapabilityEdiTypePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityS3LocationInput)(nil)).Elem(), CapabilityS3LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityS3LocationArrayInput)(nil)).Elem(), CapabilityS3LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityTagInput)(nil)).Elem(), CapabilityTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityTagArrayInput)(nil)).Elem(), CapabilityTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityX12DetailsInput)(nil)).Elem(), CapabilityX12DetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipTagInput)(nil)).Elem(), PartnershipTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipTagArrayInput)(nil)).Elem(), PartnershipTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTagInput)(nil)).Elem(), ProfileTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTagArrayInput)(nil)).Elem(), ProfileTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerEdiTypePropertiesInput)(nil)).Elem(), TransformerEdiTypePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTagInput)(nil)).Elem(), TransformerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTagArrayInput)(nil)).Elem(), TransformerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerX12DetailsInput)(nil)).Elem(), TransformerX12DetailsArgs{})
	pulumi.RegisterOutputType(CapabilityConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(CapabilityConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CapabilityEdiConfigurationOutput{})
	pulumi.RegisterOutputType(CapabilityEdiConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CapabilityEdiTypePropertiesOutput{})
	pulumi.RegisterOutputType(CapabilityEdiTypePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CapabilityS3LocationOutput{})
	pulumi.RegisterOutputType(CapabilityS3LocationPtrOutput{})
	pulumi.RegisterOutputType(CapabilityS3LocationArrayOutput{})
	pulumi.RegisterOutputType(CapabilityTagOutput{})
	pulumi.RegisterOutputType(CapabilityTagArrayOutput{})
	pulumi.RegisterOutputType(CapabilityX12DetailsOutput{})
	pulumi.RegisterOutputType(CapabilityX12DetailsPtrOutput{})
	pulumi.RegisterOutputType(PartnershipTagOutput{})
	pulumi.RegisterOutputType(PartnershipTagArrayOutput{})
	pulumi.RegisterOutputType(ProfileTagOutput{})
	pulumi.RegisterOutputType(ProfileTagArrayOutput{})
	pulumi.RegisterOutputType(TransformerEdiTypePropertiesOutput{})
	pulumi.RegisterOutputType(TransformerEdiTypePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerTagOutput{})
	pulumi.RegisterOutputType(TransformerTagArrayOutput{})
	pulumi.RegisterOutputType(TransformerX12DetailsOutput{})
	pulumi.RegisterOutputType(TransformerX12DetailsPtrOutput{})
}
