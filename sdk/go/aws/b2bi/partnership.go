// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::B2BI::Partnership Resource Type
type Partnership struct {
	pulumi.CustomResourceState

	Capabilities     pulumi.StringArrayOutput `pulumi:"capabilities"`
	CreatedAt        pulumi.StringOutput      `pulumi:"createdAt"`
	Email            pulumi.StringOutput      `pulumi:"email"`
	ModifiedAt       pulumi.StringOutput      `pulumi:"modifiedAt"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	PartnershipArn   pulumi.StringOutput      `pulumi:"partnershipArn"`
	PartnershipId    pulumi.StringOutput      `pulumi:"partnershipId"`
	Phone            pulumi.StringPtrOutput   `pulumi:"phone"`
	ProfileId        pulumi.StringOutput      `pulumi:"profileId"`
	Tags             aws.TagArrayOutput       `pulumi:"tags"`
	TradingPartnerId pulumi.StringOutput      `pulumi:"tradingPartnerId"`
}

// NewPartnership registers a new resource with the given unique name, arguments, and options.
func NewPartnership(ctx *pulumi.Context,
	name string, args *PartnershipArgs, opts ...pulumi.ResourceOption) (*Partnership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"email",
		"phone",
		"profileId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Partnership
	err := ctx.RegisterResource("aws-native:b2bi:Partnership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartnership gets an existing Partnership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartnership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnershipState, opts ...pulumi.ResourceOption) (*Partnership, error) {
	var resource Partnership
	err := ctx.ReadResource("aws-native:b2bi:Partnership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Partnership resources.
type partnershipState struct {
}

type PartnershipState struct {
}

func (PartnershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnershipState)(nil)).Elem()
}

type partnershipArgs struct {
	Capabilities []string  `pulumi:"capabilities"`
	Email        string    `pulumi:"email"`
	Name         *string   `pulumi:"name"`
	Phone        *string   `pulumi:"phone"`
	ProfileId    string    `pulumi:"profileId"`
	Tags         []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Partnership resource.
type PartnershipArgs struct {
	Capabilities pulumi.StringArrayInput
	Email        pulumi.StringInput
	Name         pulumi.StringPtrInput
	Phone        pulumi.StringPtrInput
	ProfileId    pulumi.StringInput
	Tags         aws.TagArrayInput
}

func (PartnershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnershipArgs)(nil)).Elem()
}

type PartnershipInput interface {
	pulumi.Input

	ToPartnershipOutput() PartnershipOutput
	ToPartnershipOutputWithContext(ctx context.Context) PartnershipOutput
}

func (*Partnership) ElementType() reflect.Type {
	return reflect.TypeOf((**Partnership)(nil)).Elem()
}

func (i *Partnership) ToPartnershipOutput() PartnershipOutput {
	return i.ToPartnershipOutputWithContext(context.Background())
}

func (i *Partnership) ToPartnershipOutputWithContext(ctx context.Context) PartnershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnershipOutput)
}

type PartnershipOutput struct{ *pulumi.OutputState }

func (PartnershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Partnership)(nil)).Elem()
}

func (o PartnershipOutput) ToPartnershipOutput() PartnershipOutput {
	return o
}

func (o PartnershipOutput) ToPartnershipOutputWithContext(ctx context.Context) PartnershipOutput {
	return o
}

func (o PartnershipOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringArrayOutput { return v.Capabilities }).(pulumi.StringArrayOutput)
}

func (o PartnershipOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o PartnershipOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

func (o PartnershipOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o PartnershipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PartnershipOutput) PartnershipArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.PartnershipArn }).(pulumi.StringOutput)
}

func (o PartnershipOutput) PartnershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.PartnershipId }).(pulumi.StringOutput)
}

func (o PartnershipOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringPtrOutput { return v.Phone }).(pulumi.StringPtrOutput)
}

func (o PartnershipOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

func (o PartnershipOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Partnership) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o PartnershipOutput) TradingPartnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Partnership) pulumi.StringOutput { return v.TradingPartnerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartnershipInput)(nil)).Elem(), &Partnership{})
	pulumi.RegisterOutputType(PartnershipOutput{})
}
