// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CapabilityType string

const (
	CapabilityTypeEdi = CapabilityType("edi")
)

func (CapabilityType) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityType)(nil)).Elem()
}

func (e CapabilityType) ToCapabilityTypeOutput() CapabilityTypeOutput {
	return pulumi.ToOutput(e).(CapabilityTypeOutput)
}

func (e CapabilityType) ToCapabilityTypeOutputWithContext(ctx context.Context) CapabilityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CapabilityTypeOutput)
}

func (e CapabilityType) ToCapabilityTypePtrOutput() CapabilityTypePtrOutput {
	return e.ToCapabilityTypePtrOutputWithContext(context.Background())
}

func (e CapabilityType) ToCapabilityTypePtrOutputWithContext(ctx context.Context) CapabilityTypePtrOutput {
	return CapabilityType(e).ToCapabilityTypeOutputWithContext(ctx).ToCapabilityTypePtrOutputWithContext(ctx)
}

func (e CapabilityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CapabilityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CapabilityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CapabilityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CapabilityTypeOutput struct{ *pulumi.OutputState }

func (CapabilityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityType)(nil)).Elem()
}

func (o CapabilityTypeOutput) ToCapabilityTypeOutput() CapabilityTypeOutput {
	return o
}

func (o CapabilityTypeOutput) ToCapabilityTypeOutputWithContext(ctx context.Context) CapabilityTypeOutput {
	return o
}

func (o CapabilityTypeOutput) ToCapabilityTypePtrOutput() CapabilityTypePtrOutput {
	return o.ToCapabilityTypePtrOutputWithContext(context.Background())
}

func (o CapabilityTypeOutput) ToCapabilityTypePtrOutputWithContext(ctx context.Context) CapabilityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapabilityType) *CapabilityType {
		return &v
	}).(CapabilityTypePtrOutput)
}

func (o CapabilityTypeOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityType] {
	return pulumix.Output[CapabilityType]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CapabilityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CapabilityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CapabilityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CapabilityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CapabilityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CapabilityTypePtrOutput struct{ *pulumi.OutputState }

func (CapabilityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityType)(nil)).Elem()
}

func (o CapabilityTypePtrOutput) ToCapabilityTypePtrOutput() CapabilityTypePtrOutput {
	return o
}

func (o CapabilityTypePtrOutput) ToCapabilityTypePtrOutputWithContext(ctx context.Context) CapabilityTypePtrOutput {
	return o
}

func (o CapabilityTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityType] {
	return pulumix.Output[*CapabilityType]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityTypePtrOutput) Elem() CapabilityTypeOutput {
	return o.ApplyT(func(v *CapabilityType) CapabilityType {
		if v != nil {
			return *v
		}
		var ret CapabilityType
		return ret
	}).(CapabilityTypeOutput)
}

func (o CapabilityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CapabilityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CapabilityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CapabilityTypeInput is an input type that accepts CapabilityTypeArgs and CapabilityTypeOutput values.
// You can construct a concrete instance of `CapabilityTypeInput` via:
//
//	CapabilityTypeArgs{...}
type CapabilityTypeInput interface {
	pulumi.Input

	ToCapabilityTypeOutput() CapabilityTypeOutput
	ToCapabilityTypeOutputWithContext(context.Context) CapabilityTypeOutput
}

var capabilityTypePtrType = reflect.TypeOf((**CapabilityType)(nil)).Elem()

type CapabilityTypePtrInput interface {
	pulumi.Input

	ToCapabilityTypePtrOutput() CapabilityTypePtrOutput
	ToCapabilityTypePtrOutputWithContext(context.Context) CapabilityTypePtrOutput
}

type capabilityTypePtr string

func CapabilityTypePtr(v string) CapabilityTypePtrInput {
	return (*capabilityTypePtr)(&v)
}

func (*capabilityTypePtr) ElementType() reflect.Type {
	return capabilityTypePtrType
}

func (in *capabilityTypePtr) ToCapabilityTypePtrOutput() CapabilityTypePtrOutput {
	return pulumi.ToOutput(in).(CapabilityTypePtrOutput)
}

func (in *capabilityTypePtr) ToCapabilityTypePtrOutputWithContext(ctx context.Context) CapabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CapabilityTypePtrOutput)
}

func (in *capabilityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CapabilityType] {
	return pulumix.Output[*CapabilityType]{
		OutputState: in.ToCapabilityTypePtrOutputWithContext(ctx).OutputState,
	}
}

type CapabilityX12TransactionSet string

const (
	CapabilityX12TransactionSetX12110 = CapabilityX12TransactionSet("X12_110")
	CapabilityX12TransactionSetX12180 = CapabilityX12TransactionSet("X12_180")
	CapabilityX12TransactionSetX12204 = CapabilityX12TransactionSet("X12_204")
	CapabilityX12TransactionSetX12210 = CapabilityX12TransactionSet("X12_210")
	CapabilityX12TransactionSetX12214 = CapabilityX12TransactionSet("X12_214")
	CapabilityX12TransactionSetX12215 = CapabilityX12TransactionSet("X12_215")
	CapabilityX12TransactionSetX12310 = CapabilityX12TransactionSet("X12_310")
	CapabilityX12TransactionSetX12315 = CapabilityX12TransactionSet("X12_315")
	CapabilityX12TransactionSetX12322 = CapabilityX12TransactionSet("X12_322")
	CapabilityX12TransactionSetX12404 = CapabilityX12TransactionSet("X12_404")
	CapabilityX12TransactionSetX12410 = CapabilityX12TransactionSet("X12_410")
	CapabilityX12TransactionSetX12820 = CapabilityX12TransactionSet("X12_820")
	CapabilityX12TransactionSetX12824 = CapabilityX12TransactionSet("X12_824")
	CapabilityX12TransactionSetX12830 = CapabilityX12TransactionSet("X12_830")
	CapabilityX12TransactionSetX12846 = CapabilityX12TransactionSet("X12_846")
	CapabilityX12TransactionSetX12850 = CapabilityX12TransactionSet("X12_850")
	CapabilityX12TransactionSetX12852 = CapabilityX12TransactionSet("X12_852")
	CapabilityX12TransactionSetX12855 = CapabilityX12TransactionSet("X12_855")
	CapabilityX12TransactionSetX12856 = CapabilityX12TransactionSet("X12_856")
	CapabilityX12TransactionSetX12860 = CapabilityX12TransactionSet("X12_860")
	CapabilityX12TransactionSetX12861 = CapabilityX12TransactionSet("X12_861")
	CapabilityX12TransactionSetX12864 = CapabilityX12TransactionSet("X12_864")
	CapabilityX12TransactionSetX12940 = CapabilityX12TransactionSet("X12_940")
	CapabilityX12TransactionSetX12990 = CapabilityX12TransactionSet("X12_990")
	CapabilityX12TransactionSetX12997 = CapabilityX12TransactionSet("X12_997")
)

func (CapabilityX12TransactionSet) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12TransactionSet)(nil)).Elem()
}

func (e CapabilityX12TransactionSet) ToCapabilityX12TransactionSetOutput() CapabilityX12TransactionSetOutput {
	return pulumi.ToOutput(e).(CapabilityX12TransactionSetOutput)
}

func (e CapabilityX12TransactionSet) ToCapabilityX12TransactionSetOutputWithContext(ctx context.Context) CapabilityX12TransactionSetOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CapabilityX12TransactionSetOutput)
}

func (e CapabilityX12TransactionSet) ToCapabilityX12TransactionSetPtrOutput() CapabilityX12TransactionSetPtrOutput {
	return e.ToCapabilityX12TransactionSetPtrOutputWithContext(context.Background())
}

func (e CapabilityX12TransactionSet) ToCapabilityX12TransactionSetPtrOutputWithContext(ctx context.Context) CapabilityX12TransactionSetPtrOutput {
	return CapabilityX12TransactionSet(e).ToCapabilityX12TransactionSetOutputWithContext(ctx).ToCapabilityX12TransactionSetPtrOutputWithContext(ctx)
}

func (e CapabilityX12TransactionSet) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CapabilityX12TransactionSet) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CapabilityX12TransactionSet) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CapabilityX12TransactionSet) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CapabilityX12TransactionSetOutput struct{ *pulumi.OutputState }

func (CapabilityX12TransactionSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12TransactionSet)(nil)).Elem()
}

func (o CapabilityX12TransactionSetOutput) ToCapabilityX12TransactionSetOutput() CapabilityX12TransactionSetOutput {
	return o
}

func (o CapabilityX12TransactionSetOutput) ToCapabilityX12TransactionSetOutputWithContext(ctx context.Context) CapabilityX12TransactionSetOutput {
	return o
}

func (o CapabilityX12TransactionSetOutput) ToCapabilityX12TransactionSetPtrOutput() CapabilityX12TransactionSetPtrOutput {
	return o.ToCapabilityX12TransactionSetPtrOutputWithContext(context.Background())
}

func (o CapabilityX12TransactionSetOutput) ToCapabilityX12TransactionSetPtrOutputWithContext(ctx context.Context) CapabilityX12TransactionSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapabilityX12TransactionSet) *CapabilityX12TransactionSet {
		return &v
	}).(CapabilityX12TransactionSetPtrOutput)
}

func (o CapabilityX12TransactionSetOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityX12TransactionSet] {
	return pulumix.Output[CapabilityX12TransactionSet]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityX12TransactionSetOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CapabilityX12TransactionSetOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CapabilityX12TransactionSet) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CapabilityX12TransactionSetOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CapabilityX12TransactionSetOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CapabilityX12TransactionSet) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CapabilityX12TransactionSetPtrOutput struct{ *pulumi.OutputState }

func (CapabilityX12TransactionSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityX12TransactionSet)(nil)).Elem()
}

func (o CapabilityX12TransactionSetPtrOutput) ToCapabilityX12TransactionSetPtrOutput() CapabilityX12TransactionSetPtrOutput {
	return o
}

func (o CapabilityX12TransactionSetPtrOutput) ToCapabilityX12TransactionSetPtrOutputWithContext(ctx context.Context) CapabilityX12TransactionSetPtrOutput {
	return o
}

func (o CapabilityX12TransactionSetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityX12TransactionSet] {
	return pulumix.Output[*CapabilityX12TransactionSet]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityX12TransactionSetPtrOutput) Elem() CapabilityX12TransactionSetOutput {
	return o.ApplyT(func(v *CapabilityX12TransactionSet) CapabilityX12TransactionSet {
		if v != nil {
			return *v
		}
		var ret CapabilityX12TransactionSet
		return ret
	}).(CapabilityX12TransactionSetOutput)
}

func (o CapabilityX12TransactionSetPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CapabilityX12TransactionSetPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CapabilityX12TransactionSet) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CapabilityX12TransactionSetInput is an input type that accepts CapabilityX12TransactionSetArgs and CapabilityX12TransactionSetOutput values.
// You can construct a concrete instance of `CapabilityX12TransactionSetInput` via:
//
//	CapabilityX12TransactionSetArgs{...}
type CapabilityX12TransactionSetInput interface {
	pulumi.Input

	ToCapabilityX12TransactionSetOutput() CapabilityX12TransactionSetOutput
	ToCapabilityX12TransactionSetOutputWithContext(context.Context) CapabilityX12TransactionSetOutput
}

var capabilityX12TransactionSetPtrType = reflect.TypeOf((**CapabilityX12TransactionSet)(nil)).Elem()

type CapabilityX12TransactionSetPtrInput interface {
	pulumi.Input

	ToCapabilityX12TransactionSetPtrOutput() CapabilityX12TransactionSetPtrOutput
	ToCapabilityX12TransactionSetPtrOutputWithContext(context.Context) CapabilityX12TransactionSetPtrOutput
}

type capabilityX12TransactionSetPtr string

func CapabilityX12TransactionSetPtr(v string) CapabilityX12TransactionSetPtrInput {
	return (*capabilityX12TransactionSetPtr)(&v)
}

func (*capabilityX12TransactionSetPtr) ElementType() reflect.Type {
	return capabilityX12TransactionSetPtrType
}

func (in *capabilityX12TransactionSetPtr) ToCapabilityX12TransactionSetPtrOutput() CapabilityX12TransactionSetPtrOutput {
	return pulumi.ToOutput(in).(CapabilityX12TransactionSetPtrOutput)
}

func (in *capabilityX12TransactionSetPtr) ToCapabilityX12TransactionSetPtrOutputWithContext(ctx context.Context) CapabilityX12TransactionSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CapabilityX12TransactionSetPtrOutput)
}

func (in *capabilityX12TransactionSetPtr) ToOutput(ctx context.Context) pulumix.Output[*CapabilityX12TransactionSet] {
	return pulumix.Output[*CapabilityX12TransactionSet]{
		OutputState: in.ToCapabilityX12TransactionSetPtrOutputWithContext(ctx).OutputState,
	}
}

type CapabilityX12Version string

const (
	CapabilityX12VersionVersion4010 = CapabilityX12Version("VERSION_4010")
	CapabilityX12VersionVersion4030 = CapabilityX12Version("VERSION_4030")
	CapabilityX12VersionVersion5010 = CapabilityX12Version("VERSION_5010")
)

func (CapabilityX12Version) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12Version)(nil)).Elem()
}

func (e CapabilityX12Version) ToCapabilityX12VersionOutput() CapabilityX12VersionOutput {
	return pulumi.ToOutput(e).(CapabilityX12VersionOutput)
}

func (e CapabilityX12Version) ToCapabilityX12VersionOutputWithContext(ctx context.Context) CapabilityX12VersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CapabilityX12VersionOutput)
}

func (e CapabilityX12Version) ToCapabilityX12VersionPtrOutput() CapabilityX12VersionPtrOutput {
	return e.ToCapabilityX12VersionPtrOutputWithContext(context.Background())
}

func (e CapabilityX12Version) ToCapabilityX12VersionPtrOutputWithContext(ctx context.Context) CapabilityX12VersionPtrOutput {
	return CapabilityX12Version(e).ToCapabilityX12VersionOutputWithContext(ctx).ToCapabilityX12VersionPtrOutputWithContext(ctx)
}

func (e CapabilityX12Version) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CapabilityX12Version) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CapabilityX12Version) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CapabilityX12Version) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CapabilityX12VersionOutput struct{ *pulumi.OutputState }

func (CapabilityX12VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityX12Version)(nil)).Elem()
}

func (o CapabilityX12VersionOutput) ToCapabilityX12VersionOutput() CapabilityX12VersionOutput {
	return o
}

func (o CapabilityX12VersionOutput) ToCapabilityX12VersionOutputWithContext(ctx context.Context) CapabilityX12VersionOutput {
	return o
}

func (o CapabilityX12VersionOutput) ToCapabilityX12VersionPtrOutput() CapabilityX12VersionPtrOutput {
	return o.ToCapabilityX12VersionPtrOutputWithContext(context.Background())
}

func (o CapabilityX12VersionOutput) ToCapabilityX12VersionPtrOutputWithContext(ctx context.Context) CapabilityX12VersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapabilityX12Version) *CapabilityX12Version {
		return &v
	}).(CapabilityX12VersionPtrOutput)
}

func (o CapabilityX12VersionOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityX12Version] {
	return pulumix.Output[CapabilityX12Version]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityX12VersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CapabilityX12VersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CapabilityX12Version) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CapabilityX12VersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CapabilityX12VersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CapabilityX12Version) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CapabilityX12VersionPtrOutput struct{ *pulumi.OutputState }

func (CapabilityX12VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapabilityX12Version)(nil)).Elem()
}

func (o CapabilityX12VersionPtrOutput) ToCapabilityX12VersionPtrOutput() CapabilityX12VersionPtrOutput {
	return o
}

func (o CapabilityX12VersionPtrOutput) ToCapabilityX12VersionPtrOutputWithContext(ctx context.Context) CapabilityX12VersionPtrOutput {
	return o
}

func (o CapabilityX12VersionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CapabilityX12Version] {
	return pulumix.Output[*CapabilityX12Version]{
		OutputState: o.OutputState,
	}
}

func (o CapabilityX12VersionPtrOutput) Elem() CapabilityX12VersionOutput {
	return o.ApplyT(func(v *CapabilityX12Version) CapabilityX12Version {
		if v != nil {
			return *v
		}
		var ret CapabilityX12Version
		return ret
	}).(CapabilityX12VersionOutput)
}

func (o CapabilityX12VersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CapabilityX12VersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CapabilityX12Version) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CapabilityX12VersionInput is an input type that accepts CapabilityX12VersionArgs and CapabilityX12VersionOutput values.
// You can construct a concrete instance of `CapabilityX12VersionInput` via:
//
//	CapabilityX12VersionArgs{...}
type CapabilityX12VersionInput interface {
	pulumi.Input

	ToCapabilityX12VersionOutput() CapabilityX12VersionOutput
	ToCapabilityX12VersionOutputWithContext(context.Context) CapabilityX12VersionOutput
}

var capabilityX12VersionPtrType = reflect.TypeOf((**CapabilityX12Version)(nil)).Elem()

type CapabilityX12VersionPtrInput interface {
	pulumi.Input

	ToCapabilityX12VersionPtrOutput() CapabilityX12VersionPtrOutput
	ToCapabilityX12VersionPtrOutputWithContext(context.Context) CapabilityX12VersionPtrOutput
}

type capabilityX12VersionPtr string

func CapabilityX12VersionPtr(v string) CapabilityX12VersionPtrInput {
	return (*capabilityX12VersionPtr)(&v)
}

func (*capabilityX12VersionPtr) ElementType() reflect.Type {
	return capabilityX12VersionPtrType
}

func (in *capabilityX12VersionPtr) ToCapabilityX12VersionPtrOutput() CapabilityX12VersionPtrOutput {
	return pulumi.ToOutput(in).(CapabilityX12VersionPtrOutput)
}

func (in *capabilityX12VersionPtr) ToCapabilityX12VersionPtrOutputWithContext(ctx context.Context) CapabilityX12VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CapabilityX12VersionPtrOutput)
}

func (in *capabilityX12VersionPtr) ToOutput(ctx context.Context) pulumix.Output[*CapabilityX12Version] {
	return pulumix.Output[*CapabilityX12Version]{
		OutputState: in.ToCapabilityX12VersionPtrOutputWithContext(ctx).OutputState,
	}
}

type ProfileLogging string

const (
	ProfileLoggingEnabled  = ProfileLogging("ENABLED")
	ProfileLoggingDisabled = ProfileLogging("DISABLED")
)

func (ProfileLogging) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileLogging)(nil)).Elem()
}

func (e ProfileLogging) ToProfileLoggingOutput() ProfileLoggingOutput {
	return pulumi.ToOutput(e).(ProfileLoggingOutput)
}

func (e ProfileLogging) ToProfileLoggingOutputWithContext(ctx context.Context) ProfileLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProfileLoggingOutput)
}

func (e ProfileLogging) ToProfileLoggingPtrOutput() ProfileLoggingPtrOutput {
	return e.ToProfileLoggingPtrOutputWithContext(context.Background())
}

func (e ProfileLogging) ToProfileLoggingPtrOutputWithContext(ctx context.Context) ProfileLoggingPtrOutput {
	return ProfileLogging(e).ToProfileLoggingOutputWithContext(ctx).ToProfileLoggingPtrOutputWithContext(ctx)
}

func (e ProfileLogging) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileLogging) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProfileLogging) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProfileLogging) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProfileLoggingOutput struct{ *pulumi.OutputState }

func (ProfileLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileLogging)(nil)).Elem()
}

func (o ProfileLoggingOutput) ToProfileLoggingOutput() ProfileLoggingOutput {
	return o
}

func (o ProfileLoggingOutput) ToProfileLoggingOutputWithContext(ctx context.Context) ProfileLoggingOutput {
	return o
}

func (o ProfileLoggingOutput) ToProfileLoggingPtrOutput() ProfileLoggingPtrOutput {
	return o.ToProfileLoggingPtrOutputWithContext(context.Background())
}

func (o ProfileLoggingOutput) ToProfileLoggingPtrOutputWithContext(ctx context.Context) ProfileLoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProfileLogging) *ProfileLogging {
		return &v
	}).(ProfileLoggingPtrOutput)
}

func (o ProfileLoggingOutput) ToOutput(ctx context.Context) pulumix.Output[ProfileLogging] {
	return pulumix.Output[ProfileLogging]{
		OutputState: o.OutputState,
	}
}

func (o ProfileLoggingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProfileLoggingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileLogging) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProfileLoggingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileLoggingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProfileLogging) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProfileLoggingPtrOutput struct{ *pulumi.OutputState }

func (ProfileLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileLogging)(nil)).Elem()
}

func (o ProfileLoggingPtrOutput) ToProfileLoggingPtrOutput() ProfileLoggingPtrOutput {
	return o
}

func (o ProfileLoggingPtrOutput) ToProfileLoggingPtrOutputWithContext(ctx context.Context) ProfileLoggingPtrOutput {
	return o
}

func (o ProfileLoggingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ProfileLogging] {
	return pulumix.Output[*ProfileLogging]{
		OutputState: o.OutputState,
	}
}

func (o ProfileLoggingPtrOutput) Elem() ProfileLoggingOutput {
	return o.ApplyT(func(v *ProfileLogging) ProfileLogging {
		if v != nil {
			return *v
		}
		var ret ProfileLogging
		return ret
	}).(ProfileLoggingOutput)
}

func (o ProfileLoggingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProfileLoggingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProfileLogging) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProfileLoggingInput is an input type that accepts ProfileLoggingArgs and ProfileLoggingOutput values.
// You can construct a concrete instance of `ProfileLoggingInput` via:
//
//	ProfileLoggingArgs{...}
type ProfileLoggingInput interface {
	pulumi.Input

	ToProfileLoggingOutput() ProfileLoggingOutput
	ToProfileLoggingOutputWithContext(context.Context) ProfileLoggingOutput
}

var profileLoggingPtrType = reflect.TypeOf((**ProfileLogging)(nil)).Elem()

type ProfileLoggingPtrInput interface {
	pulumi.Input

	ToProfileLoggingPtrOutput() ProfileLoggingPtrOutput
	ToProfileLoggingPtrOutputWithContext(context.Context) ProfileLoggingPtrOutput
}

type profileLoggingPtr string

func ProfileLoggingPtr(v string) ProfileLoggingPtrInput {
	return (*profileLoggingPtr)(&v)
}

func (*profileLoggingPtr) ElementType() reflect.Type {
	return profileLoggingPtrType
}

func (in *profileLoggingPtr) ToProfileLoggingPtrOutput() ProfileLoggingPtrOutput {
	return pulumi.ToOutput(in).(ProfileLoggingPtrOutput)
}

func (in *profileLoggingPtr) ToProfileLoggingPtrOutputWithContext(ctx context.Context) ProfileLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProfileLoggingPtrOutput)
}

func (in *profileLoggingPtr) ToOutput(ctx context.Context) pulumix.Output[*ProfileLogging] {
	return pulumix.Output[*ProfileLogging]{
		OutputState: in.ToProfileLoggingPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformerFileFormat string

const (
	TransformerFileFormatXml  = TransformerFileFormat("XML")
	TransformerFileFormatJson = TransformerFileFormat("JSON")
)

func (TransformerFileFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerFileFormat)(nil)).Elem()
}

func (e TransformerFileFormat) ToTransformerFileFormatOutput() TransformerFileFormatOutput {
	return pulumi.ToOutput(e).(TransformerFileFormatOutput)
}

func (e TransformerFileFormat) ToTransformerFileFormatOutputWithContext(ctx context.Context) TransformerFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformerFileFormatOutput)
}

func (e TransformerFileFormat) ToTransformerFileFormatPtrOutput() TransformerFileFormatPtrOutput {
	return e.ToTransformerFileFormatPtrOutputWithContext(context.Background())
}

func (e TransformerFileFormat) ToTransformerFileFormatPtrOutputWithContext(ctx context.Context) TransformerFileFormatPtrOutput {
	return TransformerFileFormat(e).ToTransformerFileFormatOutputWithContext(ctx).ToTransformerFileFormatPtrOutputWithContext(ctx)
}

func (e TransformerFileFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerFileFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerFileFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformerFileFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformerFileFormatOutput struct{ *pulumi.OutputState }

func (TransformerFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerFileFormat)(nil)).Elem()
}

func (o TransformerFileFormatOutput) ToTransformerFileFormatOutput() TransformerFileFormatOutput {
	return o
}

func (o TransformerFileFormatOutput) ToTransformerFileFormatOutputWithContext(ctx context.Context) TransformerFileFormatOutput {
	return o
}

func (o TransformerFileFormatOutput) ToTransformerFileFormatPtrOutput() TransformerFileFormatPtrOutput {
	return o.ToTransformerFileFormatPtrOutputWithContext(context.Background())
}

func (o TransformerFileFormatOutput) ToTransformerFileFormatPtrOutputWithContext(ctx context.Context) TransformerFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerFileFormat) *TransformerFileFormat {
		return &v
	}).(TransformerFileFormatPtrOutput)
}

func (o TransformerFileFormatOutput) ToOutput(ctx context.Context) pulumix.Output[TransformerFileFormat] {
	return pulumix.Output[TransformerFileFormat]{
		OutputState: o.OutputState,
	}
}

func (o TransformerFileFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformerFileFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerFileFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformerFileFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerFileFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerFileFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformerFileFormatPtrOutput struct{ *pulumi.OutputState }

func (TransformerFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerFileFormat)(nil)).Elem()
}

func (o TransformerFileFormatPtrOutput) ToTransformerFileFormatPtrOutput() TransformerFileFormatPtrOutput {
	return o
}

func (o TransformerFileFormatPtrOutput) ToTransformerFileFormatPtrOutputWithContext(ctx context.Context) TransformerFileFormatPtrOutput {
	return o
}

func (o TransformerFileFormatPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformerFileFormat] {
	return pulumix.Output[*TransformerFileFormat]{
		OutputState: o.OutputState,
	}
}

func (o TransformerFileFormatPtrOutput) Elem() TransformerFileFormatOutput {
	return o.ApplyT(func(v *TransformerFileFormat) TransformerFileFormat {
		if v != nil {
			return *v
		}
		var ret TransformerFileFormat
		return ret
	}).(TransformerFileFormatOutput)
}

func (o TransformerFileFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerFileFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransformerFileFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformerFileFormatInput is an input type that accepts TransformerFileFormatArgs and TransformerFileFormatOutput values.
// You can construct a concrete instance of `TransformerFileFormatInput` via:
//
//	TransformerFileFormatArgs{...}
type TransformerFileFormatInput interface {
	pulumi.Input

	ToTransformerFileFormatOutput() TransformerFileFormatOutput
	ToTransformerFileFormatOutputWithContext(context.Context) TransformerFileFormatOutput
}

var transformerFileFormatPtrType = reflect.TypeOf((**TransformerFileFormat)(nil)).Elem()

type TransformerFileFormatPtrInput interface {
	pulumi.Input

	ToTransformerFileFormatPtrOutput() TransformerFileFormatPtrOutput
	ToTransformerFileFormatPtrOutputWithContext(context.Context) TransformerFileFormatPtrOutput
}

type transformerFileFormatPtr string

func TransformerFileFormatPtr(v string) TransformerFileFormatPtrInput {
	return (*transformerFileFormatPtr)(&v)
}

func (*transformerFileFormatPtr) ElementType() reflect.Type {
	return transformerFileFormatPtrType
}

func (in *transformerFileFormatPtr) ToTransformerFileFormatPtrOutput() TransformerFileFormatPtrOutput {
	return pulumi.ToOutput(in).(TransformerFileFormatPtrOutput)
}

func (in *transformerFileFormatPtr) ToTransformerFileFormatPtrOutputWithContext(ctx context.Context) TransformerFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformerFileFormatPtrOutput)
}

func (in *transformerFileFormatPtr) ToOutput(ctx context.Context) pulumix.Output[*TransformerFileFormat] {
	return pulumix.Output[*TransformerFileFormat]{
		OutputState: in.ToTransformerFileFormatPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformerStatus string

const (
	TransformerStatusActive   = TransformerStatus("active")
	TransformerStatusInactive = TransformerStatus("inactive")
)

func (TransformerStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerStatus)(nil)).Elem()
}

func (e TransformerStatus) ToTransformerStatusOutput() TransformerStatusOutput {
	return pulumi.ToOutput(e).(TransformerStatusOutput)
}

func (e TransformerStatus) ToTransformerStatusOutputWithContext(ctx context.Context) TransformerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformerStatusOutput)
}

func (e TransformerStatus) ToTransformerStatusPtrOutput() TransformerStatusPtrOutput {
	return e.ToTransformerStatusPtrOutputWithContext(context.Background())
}

func (e TransformerStatus) ToTransformerStatusPtrOutputWithContext(ctx context.Context) TransformerStatusPtrOutput {
	return TransformerStatus(e).ToTransformerStatusOutputWithContext(ctx).ToTransformerStatusPtrOutputWithContext(ctx)
}

func (e TransformerStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformerStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformerStatusOutput struct{ *pulumi.OutputState }

func (TransformerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerStatus)(nil)).Elem()
}

func (o TransformerStatusOutput) ToTransformerStatusOutput() TransformerStatusOutput {
	return o
}

func (o TransformerStatusOutput) ToTransformerStatusOutputWithContext(ctx context.Context) TransformerStatusOutput {
	return o
}

func (o TransformerStatusOutput) ToTransformerStatusPtrOutput() TransformerStatusPtrOutput {
	return o.ToTransformerStatusPtrOutputWithContext(context.Background())
}

func (o TransformerStatusOutput) ToTransformerStatusPtrOutputWithContext(ctx context.Context) TransformerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerStatus) *TransformerStatus {
		return &v
	}).(TransformerStatusPtrOutput)
}

func (o TransformerStatusOutput) ToOutput(ctx context.Context) pulumix.Output[TransformerStatus] {
	return pulumix.Output[TransformerStatus]{
		OutputState: o.OutputState,
	}
}

func (o TransformerStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformerStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformerStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformerStatusPtrOutput struct{ *pulumi.OutputState }

func (TransformerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerStatus)(nil)).Elem()
}

func (o TransformerStatusPtrOutput) ToTransformerStatusPtrOutput() TransformerStatusPtrOutput {
	return o
}

func (o TransformerStatusPtrOutput) ToTransformerStatusPtrOutputWithContext(ctx context.Context) TransformerStatusPtrOutput {
	return o
}

func (o TransformerStatusPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformerStatus] {
	return pulumix.Output[*TransformerStatus]{
		OutputState: o.OutputState,
	}
}

func (o TransformerStatusPtrOutput) Elem() TransformerStatusOutput {
	return o.ApplyT(func(v *TransformerStatus) TransformerStatus {
		if v != nil {
			return *v
		}
		var ret TransformerStatus
		return ret
	}).(TransformerStatusOutput)
}

func (o TransformerStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransformerStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformerStatusInput is an input type that accepts TransformerStatusArgs and TransformerStatusOutput values.
// You can construct a concrete instance of `TransformerStatusInput` via:
//
//	TransformerStatusArgs{...}
type TransformerStatusInput interface {
	pulumi.Input

	ToTransformerStatusOutput() TransformerStatusOutput
	ToTransformerStatusOutputWithContext(context.Context) TransformerStatusOutput
}

var transformerStatusPtrType = reflect.TypeOf((**TransformerStatus)(nil)).Elem()

type TransformerStatusPtrInput interface {
	pulumi.Input

	ToTransformerStatusPtrOutput() TransformerStatusPtrOutput
	ToTransformerStatusPtrOutputWithContext(context.Context) TransformerStatusPtrOutput
}

type transformerStatusPtr string

func TransformerStatusPtr(v string) TransformerStatusPtrInput {
	return (*transformerStatusPtr)(&v)
}

func (*transformerStatusPtr) ElementType() reflect.Type {
	return transformerStatusPtrType
}

func (in *transformerStatusPtr) ToTransformerStatusPtrOutput() TransformerStatusPtrOutput {
	return pulumi.ToOutput(in).(TransformerStatusPtrOutput)
}

func (in *transformerStatusPtr) ToTransformerStatusPtrOutputWithContext(ctx context.Context) TransformerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformerStatusPtrOutput)
}

func (in *transformerStatusPtr) ToOutput(ctx context.Context) pulumix.Output[*TransformerStatus] {
	return pulumix.Output[*TransformerStatus]{
		OutputState: in.ToTransformerStatusPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformerX12TransactionSet string

const (
	TransformerX12TransactionSetX12110 = TransformerX12TransactionSet("X12_110")
	TransformerX12TransactionSetX12180 = TransformerX12TransactionSet("X12_180")
	TransformerX12TransactionSetX12204 = TransformerX12TransactionSet("X12_204")
	TransformerX12TransactionSetX12210 = TransformerX12TransactionSet("X12_210")
	TransformerX12TransactionSetX12214 = TransformerX12TransactionSet("X12_214")
	TransformerX12TransactionSetX12215 = TransformerX12TransactionSet("X12_215")
	TransformerX12TransactionSetX12310 = TransformerX12TransactionSet("X12_310")
	TransformerX12TransactionSetX12315 = TransformerX12TransactionSet("X12_315")
	TransformerX12TransactionSetX12322 = TransformerX12TransactionSet("X12_322")
	TransformerX12TransactionSetX12404 = TransformerX12TransactionSet("X12_404")
	TransformerX12TransactionSetX12410 = TransformerX12TransactionSet("X12_410")
	TransformerX12TransactionSetX12820 = TransformerX12TransactionSet("X12_820")
	TransformerX12TransactionSetX12824 = TransformerX12TransactionSet("X12_824")
	TransformerX12TransactionSetX12830 = TransformerX12TransactionSet("X12_830")
	TransformerX12TransactionSetX12846 = TransformerX12TransactionSet("X12_846")
	TransformerX12TransactionSetX12850 = TransformerX12TransactionSet("X12_850")
	TransformerX12TransactionSetX12852 = TransformerX12TransactionSet("X12_852")
	TransformerX12TransactionSetX12855 = TransformerX12TransactionSet("X12_855")
	TransformerX12TransactionSetX12856 = TransformerX12TransactionSet("X12_856")
	TransformerX12TransactionSetX12860 = TransformerX12TransactionSet("X12_860")
	TransformerX12TransactionSetX12861 = TransformerX12TransactionSet("X12_861")
	TransformerX12TransactionSetX12864 = TransformerX12TransactionSet("X12_864")
	TransformerX12TransactionSetX12940 = TransformerX12TransactionSet("X12_940")
	TransformerX12TransactionSetX12990 = TransformerX12TransactionSet("X12_990")
	TransformerX12TransactionSetX12997 = TransformerX12TransactionSet("X12_997")
)

func (TransformerX12TransactionSet) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12TransactionSet)(nil)).Elem()
}

func (e TransformerX12TransactionSet) ToTransformerX12TransactionSetOutput() TransformerX12TransactionSetOutput {
	return pulumi.ToOutput(e).(TransformerX12TransactionSetOutput)
}

func (e TransformerX12TransactionSet) ToTransformerX12TransactionSetOutputWithContext(ctx context.Context) TransformerX12TransactionSetOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformerX12TransactionSetOutput)
}

func (e TransformerX12TransactionSet) ToTransformerX12TransactionSetPtrOutput() TransformerX12TransactionSetPtrOutput {
	return e.ToTransformerX12TransactionSetPtrOutputWithContext(context.Background())
}

func (e TransformerX12TransactionSet) ToTransformerX12TransactionSetPtrOutputWithContext(ctx context.Context) TransformerX12TransactionSetPtrOutput {
	return TransformerX12TransactionSet(e).ToTransformerX12TransactionSetOutputWithContext(ctx).ToTransformerX12TransactionSetPtrOutputWithContext(ctx)
}

func (e TransformerX12TransactionSet) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerX12TransactionSet) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerX12TransactionSet) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformerX12TransactionSet) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformerX12TransactionSetOutput struct{ *pulumi.OutputState }

func (TransformerX12TransactionSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12TransactionSet)(nil)).Elem()
}

func (o TransformerX12TransactionSetOutput) ToTransformerX12TransactionSetOutput() TransformerX12TransactionSetOutput {
	return o
}

func (o TransformerX12TransactionSetOutput) ToTransformerX12TransactionSetOutputWithContext(ctx context.Context) TransformerX12TransactionSetOutput {
	return o
}

func (o TransformerX12TransactionSetOutput) ToTransformerX12TransactionSetPtrOutput() TransformerX12TransactionSetPtrOutput {
	return o.ToTransformerX12TransactionSetPtrOutputWithContext(context.Background())
}

func (o TransformerX12TransactionSetOutput) ToTransformerX12TransactionSetPtrOutputWithContext(ctx context.Context) TransformerX12TransactionSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerX12TransactionSet) *TransformerX12TransactionSet {
		return &v
	}).(TransformerX12TransactionSetPtrOutput)
}

func (o TransformerX12TransactionSetOutput) ToOutput(ctx context.Context) pulumix.Output[TransformerX12TransactionSet] {
	return pulumix.Output[TransformerX12TransactionSet]{
		OutputState: o.OutputState,
	}
}

func (o TransformerX12TransactionSetOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformerX12TransactionSetOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerX12TransactionSet) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformerX12TransactionSetOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerX12TransactionSetOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerX12TransactionSet) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformerX12TransactionSetPtrOutput struct{ *pulumi.OutputState }

func (TransformerX12TransactionSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerX12TransactionSet)(nil)).Elem()
}

func (o TransformerX12TransactionSetPtrOutput) ToTransformerX12TransactionSetPtrOutput() TransformerX12TransactionSetPtrOutput {
	return o
}

func (o TransformerX12TransactionSetPtrOutput) ToTransformerX12TransactionSetPtrOutputWithContext(ctx context.Context) TransformerX12TransactionSetPtrOutput {
	return o
}

func (o TransformerX12TransactionSetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformerX12TransactionSet] {
	return pulumix.Output[*TransformerX12TransactionSet]{
		OutputState: o.OutputState,
	}
}

func (o TransformerX12TransactionSetPtrOutput) Elem() TransformerX12TransactionSetOutput {
	return o.ApplyT(func(v *TransformerX12TransactionSet) TransformerX12TransactionSet {
		if v != nil {
			return *v
		}
		var ret TransformerX12TransactionSet
		return ret
	}).(TransformerX12TransactionSetOutput)
}

func (o TransformerX12TransactionSetPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerX12TransactionSetPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransformerX12TransactionSet) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformerX12TransactionSetInput is an input type that accepts TransformerX12TransactionSetArgs and TransformerX12TransactionSetOutput values.
// You can construct a concrete instance of `TransformerX12TransactionSetInput` via:
//
//	TransformerX12TransactionSetArgs{...}
type TransformerX12TransactionSetInput interface {
	pulumi.Input

	ToTransformerX12TransactionSetOutput() TransformerX12TransactionSetOutput
	ToTransformerX12TransactionSetOutputWithContext(context.Context) TransformerX12TransactionSetOutput
}

var transformerX12TransactionSetPtrType = reflect.TypeOf((**TransformerX12TransactionSet)(nil)).Elem()

type TransformerX12TransactionSetPtrInput interface {
	pulumi.Input

	ToTransformerX12TransactionSetPtrOutput() TransformerX12TransactionSetPtrOutput
	ToTransformerX12TransactionSetPtrOutputWithContext(context.Context) TransformerX12TransactionSetPtrOutput
}

type transformerX12TransactionSetPtr string

func TransformerX12TransactionSetPtr(v string) TransformerX12TransactionSetPtrInput {
	return (*transformerX12TransactionSetPtr)(&v)
}

func (*transformerX12TransactionSetPtr) ElementType() reflect.Type {
	return transformerX12TransactionSetPtrType
}

func (in *transformerX12TransactionSetPtr) ToTransformerX12TransactionSetPtrOutput() TransformerX12TransactionSetPtrOutput {
	return pulumi.ToOutput(in).(TransformerX12TransactionSetPtrOutput)
}

func (in *transformerX12TransactionSetPtr) ToTransformerX12TransactionSetPtrOutputWithContext(ctx context.Context) TransformerX12TransactionSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformerX12TransactionSetPtrOutput)
}

func (in *transformerX12TransactionSetPtr) ToOutput(ctx context.Context) pulumix.Output[*TransformerX12TransactionSet] {
	return pulumix.Output[*TransformerX12TransactionSet]{
		OutputState: in.ToTransformerX12TransactionSetPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformerX12Version string

const (
	TransformerX12VersionVersion4010 = TransformerX12Version("VERSION_4010")
	TransformerX12VersionVersion4030 = TransformerX12Version("VERSION_4030")
	TransformerX12VersionVersion5010 = TransformerX12Version("VERSION_5010")
)

func (TransformerX12Version) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12Version)(nil)).Elem()
}

func (e TransformerX12Version) ToTransformerX12VersionOutput() TransformerX12VersionOutput {
	return pulumi.ToOutput(e).(TransformerX12VersionOutput)
}

func (e TransformerX12Version) ToTransformerX12VersionOutputWithContext(ctx context.Context) TransformerX12VersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransformerX12VersionOutput)
}

func (e TransformerX12Version) ToTransformerX12VersionPtrOutput() TransformerX12VersionPtrOutput {
	return e.ToTransformerX12VersionPtrOutputWithContext(context.Background())
}

func (e TransformerX12Version) ToTransformerX12VersionPtrOutputWithContext(ctx context.Context) TransformerX12VersionPtrOutput {
	return TransformerX12Version(e).ToTransformerX12VersionOutputWithContext(ctx).ToTransformerX12VersionPtrOutputWithContext(ctx)
}

func (e TransformerX12Version) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerX12Version) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformerX12Version) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformerX12Version) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransformerX12VersionOutput struct{ *pulumi.OutputState }

func (TransformerX12VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerX12Version)(nil)).Elem()
}

func (o TransformerX12VersionOutput) ToTransformerX12VersionOutput() TransformerX12VersionOutput {
	return o
}

func (o TransformerX12VersionOutput) ToTransformerX12VersionOutputWithContext(ctx context.Context) TransformerX12VersionOutput {
	return o
}

func (o TransformerX12VersionOutput) ToTransformerX12VersionPtrOutput() TransformerX12VersionPtrOutput {
	return o.ToTransformerX12VersionPtrOutputWithContext(context.Background())
}

func (o TransformerX12VersionOutput) ToTransformerX12VersionPtrOutputWithContext(ctx context.Context) TransformerX12VersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerX12Version) *TransformerX12Version {
		return &v
	}).(TransformerX12VersionPtrOutput)
}

func (o TransformerX12VersionOutput) ToOutput(ctx context.Context) pulumix.Output[TransformerX12Version] {
	return pulumix.Output[TransformerX12Version]{
		OutputState: o.OutputState,
	}
}

func (o TransformerX12VersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransformerX12VersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerX12Version) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransformerX12VersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerX12VersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransformerX12Version) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransformerX12VersionPtrOutput struct{ *pulumi.OutputState }

func (TransformerX12VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerX12Version)(nil)).Elem()
}

func (o TransformerX12VersionPtrOutput) ToTransformerX12VersionPtrOutput() TransformerX12VersionPtrOutput {
	return o
}

func (o TransformerX12VersionPtrOutput) ToTransformerX12VersionPtrOutputWithContext(ctx context.Context) TransformerX12VersionPtrOutput {
	return o
}

func (o TransformerX12VersionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformerX12Version] {
	return pulumix.Output[*TransformerX12Version]{
		OutputState: o.OutputState,
	}
}

func (o TransformerX12VersionPtrOutput) Elem() TransformerX12VersionOutput {
	return o.ApplyT(func(v *TransformerX12Version) TransformerX12Version {
		if v != nil {
			return *v
		}
		var ret TransformerX12Version
		return ret
	}).(TransformerX12VersionOutput)
}

func (o TransformerX12VersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransformerX12VersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransformerX12Version) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransformerX12VersionInput is an input type that accepts TransformerX12VersionArgs and TransformerX12VersionOutput values.
// You can construct a concrete instance of `TransformerX12VersionInput` via:
//
//	TransformerX12VersionArgs{...}
type TransformerX12VersionInput interface {
	pulumi.Input

	ToTransformerX12VersionOutput() TransformerX12VersionOutput
	ToTransformerX12VersionOutputWithContext(context.Context) TransformerX12VersionOutput
}

var transformerX12VersionPtrType = reflect.TypeOf((**TransformerX12Version)(nil)).Elem()

type TransformerX12VersionPtrInput interface {
	pulumi.Input

	ToTransformerX12VersionPtrOutput() TransformerX12VersionPtrOutput
	ToTransformerX12VersionPtrOutputWithContext(context.Context) TransformerX12VersionPtrOutput
}

type transformerX12VersionPtr string

func TransformerX12VersionPtr(v string) TransformerX12VersionPtrInput {
	return (*transformerX12VersionPtr)(&v)
}

func (*transformerX12VersionPtr) ElementType() reflect.Type {
	return transformerX12VersionPtrType
}

func (in *transformerX12VersionPtr) ToTransformerX12VersionPtrOutput() TransformerX12VersionPtrOutput {
	return pulumi.ToOutput(in).(TransformerX12VersionPtrOutput)
}

func (in *transformerX12VersionPtr) ToTransformerX12VersionPtrOutputWithContext(ctx context.Context) TransformerX12VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransformerX12VersionPtrOutput)
}

func (in *transformerX12VersionPtr) ToOutput(ctx context.Context) pulumix.Output[*TransformerX12Version] {
	return pulumix.Output[*TransformerX12Version]{
		OutputState: in.ToTransformerX12VersionPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityTypeInput)(nil)).Elem(), CapabilityType("edi"))
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityTypePtrInput)(nil)).Elem(), CapabilityType("edi"))
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityX12TransactionSetInput)(nil)).Elem(), CapabilityX12TransactionSet("X12_110"))
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityX12TransactionSetPtrInput)(nil)).Elem(), CapabilityX12TransactionSet("X12_110"))
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityX12VersionInput)(nil)).Elem(), CapabilityX12Version("VERSION_4010"))
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityX12VersionPtrInput)(nil)).Elem(), CapabilityX12Version("VERSION_4010"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileLoggingInput)(nil)).Elem(), ProfileLogging("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileLoggingPtrInput)(nil)).Elem(), ProfileLogging("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerFileFormatInput)(nil)).Elem(), TransformerFileFormat("XML"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerFileFormatPtrInput)(nil)).Elem(), TransformerFileFormat("XML"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerStatusInput)(nil)).Elem(), TransformerStatus("active"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerStatusPtrInput)(nil)).Elem(), TransformerStatus("active"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerX12TransactionSetInput)(nil)).Elem(), TransformerX12TransactionSet("X12_110"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerX12TransactionSetPtrInput)(nil)).Elem(), TransformerX12TransactionSet("X12_110"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerX12VersionInput)(nil)).Elem(), TransformerX12Version("VERSION_4010"))
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerX12VersionPtrInput)(nil)).Elem(), TransformerX12Version("VERSION_4010"))
	pulumi.RegisterOutputType(CapabilityTypeOutput{})
	pulumi.RegisterOutputType(CapabilityTypePtrOutput{})
	pulumi.RegisterOutputType(CapabilityX12TransactionSetOutput{})
	pulumi.RegisterOutputType(CapabilityX12TransactionSetPtrOutput{})
	pulumi.RegisterOutputType(CapabilityX12VersionOutput{})
	pulumi.RegisterOutputType(CapabilityX12VersionPtrOutput{})
	pulumi.RegisterOutputType(ProfileLoggingOutput{})
	pulumi.RegisterOutputType(ProfileLoggingPtrOutput{})
	pulumi.RegisterOutputType(TransformerFileFormatOutput{})
	pulumi.RegisterOutputType(TransformerFileFormatPtrOutput{})
	pulumi.RegisterOutputType(TransformerStatusOutput{})
	pulumi.RegisterOutputType(TransformerStatusPtrOutput{})
	pulumi.RegisterOutputType(TransformerX12TransactionSetOutput{})
	pulumi.RegisterOutputType(TransformerX12TransactionSetPtrOutput{})
	pulumi.RegisterOutputType(TransformerX12VersionOutput{})
	pulumi.RegisterOutputType(TransformerX12VersionPtrOutput{})
}
