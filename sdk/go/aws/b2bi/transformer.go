// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::B2BI::Transformer Resource Type
type Transformer struct {
	pulumi.CustomResourceState

	CreatedAt       pulumi.StringOutput                `pulumi:"createdAt"`
	EdiType         TransformerEdiTypePropertiesOutput `pulumi:"ediType"`
	FileFormat      TransformerFileFormatOutput        `pulumi:"fileFormat"`
	MappingTemplate pulumi.StringOutput                `pulumi:"mappingTemplate"`
	ModifiedAt      pulumi.StringPtrOutput             `pulumi:"modifiedAt"`
	Name            pulumi.StringOutput                `pulumi:"name"`
	SampleDocument  pulumi.StringPtrOutput             `pulumi:"sampleDocument"`
	Status          TransformerStatusOutput            `pulumi:"status"`
	Tags            TransformerTagArrayOutput          `pulumi:"tags"`
	TransformerArn  pulumi.StringOutput                `pulumi:"transformerArn"`
	TransformerId   pulumi.StringOutput                `pulumi:"transformerId"`
}

// NewTransformer registers a new resource with the given unique name, arguments, and options.
func NewTransformer(ctx *pulumi.Context,
	name string, args *TransformerArgs, opts ...pulumi.ResourceOption) (*Transformer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdiType == nil {
		return nil, errors.New("invalid value for required argument 'EdiType'")
	}
	if args.FileFormat == nil {
		return nil, errors.New("invalid value for required argument 'FileFormat'")
	}
	if args.MappingTemplate == nil {
		return nil, errors.New("invalid value for required argument 'MappingTemplate'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Transformer
	err := ctx.RegisterResource("aws-native:b2bi:Transformer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransformer gets an existing Transformer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransformer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransformerState, opts ...pulumi.ResourceOption) (*Transformer, error) {
	var resource Transformer
	err := ctx.ReadResource("aws-native:b2bi:Transformer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transformer resources.
type transformerState struct {
}

type TransformerState struct {
}

func (TransformerState) ElementType() reflect.Type {
	return reflect.TypeOf((*transformerState)(nil)).Elem()
}

type transformerArgs struct {
	EdiType         TransformerEdiTypeProperties `pulumi:"ediType"`
	FileFormat      TransformerFileFormat        `pulumi:"fileFormat"`
	MappingTemplate string                       `pulumi:"mappingTemplate"`
	ModifiedAt      *string                      `pulumi:"modifiedAt"`
	Name            *string                      `pulumi:"name"`
	SampleDocument  *string                      `pulumi:"sampleDocument"`
	Status          TransformerStatus            `pulumi:"status"`
	Tags            []TransformerTag             `pulumi:"tags"`
}

// The set of arguments for constructing a Transformer resource.
type TransformerArgs struct {
	EdiType         TransformerEdiTypePropertiesInput
	FileFormat      TransformerFileFormatInput
	MappingTemplate pulumi.StringInput
	ModifiedAt      pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	SampleDocument  pulumi.StringPtrInput
	Status          TransformerStatusInput
	Tags            TransformerTagArrayInput
}

func (TransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transformerArgs)(nil)).Elem()
}

type TransformerInput interface {
	pulumi.Input

	ToTransformerOutput() TransformerOutput
	ToTransformerOutputWithContext(ctx context.Context) TransformerOutput
}

func (*Transformer) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformer)(nil)).Elem()
}

func (i *Transformer) ToTransformerOutput() TransformerOutput {
	return i.ToTransformerOutputWithContext(context.Background())
}

func (i *Transformer) ToTransformerOutputWithContext(ctx context.Context) TransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerOutput)
}

type TransformerOutput struct{ *pulumi.OutputState }

func (TransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformer)(nil)).Elem()
}

func (o TransformerOutput) ToTransformerOutput() TransformerOutput {
	return o
}

func (o TransformerOutput) ToTransformerOutputWithContext(ctx context.Context) TransformerOutput {
	return o
}

func (o TransformerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o TransformerOutput) EdiType() TransformerEdiTypePropertiesOutput {
	return o.ApplyT(func(v *Transformer) TransformerEdiTypePropertiesOutput { return v.EdiType }).(TransformerEdiTypePropertiesOutput)
}

func (o TransformerOutput) FileFormat() TransformerFileFormatOutput {
	return o.ApplyT(func(v *Transformer) TransformerFileFormatOutput { return v.FileFormat }).(TransformerFileFormatOutput)
}

func (o TransformerOutput) MappingTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.MappingTemplate }).(pulumi.StringOutput)
}

func (o TransformerOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringPtrOutput { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

func (o TransformerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TransformerOutput) SampleDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringPtrOutput { return v.SampleDocument }).(pulumi.StringPtrOutput)
}

func (o TransformerOutput) Status() TransformerStatusOutput {
	return o.ApplyT(func(v *Transformer) TransformerStatusOutput { return v.Status }).(TransformerStatusOutput)
}

func (o TransformerOutput) Tags() TransformerTagArrayOutput {
	return o.ApplyT(func(v *Transformer) TransformerTagArrayOutput { return v.Tags }).(TransformerTagArrayOutput)
}

func (o TransformerOutput) TransformerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.TransformerArn }).(pulumi.StringOutput)
}

func (o TransformerOutput) TransformerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.TransformerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerInput)(nil)).Elem(), &Transformer{})
	pulumi.RegisterOutputType(TransformerOutput{})
}
