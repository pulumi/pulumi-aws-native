// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::B2BI::Transformer Resource Type
type Transformer struct {
	pulumi.CustomResourceState

	// Returns a timestamp indicating when the transformer was created. For example, `2023-07-20T19:58:44.624Z` .
	CreatedAt  pulumi.StringOutput                   `pulumi:"createdAt"`
	EdiType    TransformerEdiTypePropertiesPtrOutput `pulumi:"ediType"`
	FileFormat TransformerFileFormatPtrOutput        `pulumi:"fileFormat"`
	// Returns a structure that contains the format options for the transformation.
	InputConversion TransformerInputConversionPtrOutput `pulumi:"inputConversion"`
	// Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).
	Mapping TransformerMappingPtrOutput `pulumi:"mapping"`
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	MappingTemplate pulumi.StringPtrOutput `pulumi:"mappingTemplate"`
	// Returns a timestamp representing the date and time for the most recent change for the transformer object.
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	// Returns the descriptive name for the transformer.
	Name pulumi.StringOutput `pulumi:"name"`
	// Returns the `OutputConversion` object, which contains the format options for the outbound transformation.
	OutputConversion TransformerOutputConversionPtrOutput `pulumi:"outputConversion"`
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	SampleDocument pulumi.StringPtrOutput `pulumi:"sampleDocument"`
	// Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.
	SampleDocuments TransformerSampleDocumentsPtrOutput `pulumi:"sampleDocuments"`
	// Returns the state of the newly created transformer. The transformer can be either `active` or `inactive` . For the transformer to be used in a capability, its status must `active` .
	Status TransformerStatusOutput `pulumi:"status"`
	// A key-value pair for a specific transformer. Tags are metadata that you can use to search for and group capabilities for various purposes.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// Returns an Amazon Resource Name (ARN) for a specific transformer.
	TransformerArn pulumi.StringOutput `pulumi:"transformerArn"`
	// The system-assigned unique identifier for the transformer.
	TransformerId pulumi.StringOutput `pulumi:"transformerId"`
}

// NewTransformer registers a new resource with the given unique name, arguments, and options.
func NewTransformer(ctx *pulumi.Context,
	name string, args *TransformerArgs, opts ...pulumi.ResourceOption) (*Transformer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Transformer
	err := ctx.RegisterResource("aws-native:b2bi:Transformer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransformer gets an existing Transformer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransformer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransformerState, opts ...pulumi.ResourceOption) (*Transformer, error) {
	var resource Transformer
	err := ctx.ReadResource("aws-native:b2bi:Transformer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transformer resources.
type transformerState struct {
}

type TransformerState struct {
}

func (TransformerState) ElementType() reflect.Type {
	return reflect.TypeOf((*transformerState)(nil)).Elem()
}

type transformerArgs struct {
	EdiType    *TransformerEdiTypeProperties `pulumi:"ediType"`
	FileFormat *TransformerFileFormat        `pulumi:"fileFormat"`
	// Returns a structure that contains the format options for the transformation.
	InputConversion *TransformerInputConversion `pulumi:"inputConversion"`
	// Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).
	Mapping *TransformerMapping `pulumi:"mapping"`
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	MappingTemplate *string `pulumi:"mappingTemplate"`
	// Returns the descriptive name for the transformer.
	Name *string `pulumi:"name"`
	// Returns the `OutputConversion` object, which contains the format options for the outbound transformation.
	OutputConversion *TransformerOutputConversion `pulumi:"outputConversion"`
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	SampleDocument *string `pulumi:"sampleDocument"`
	// Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.
	SampleDocuments *TransformerSampleDocuments `pulumi:"sampleDocuments"`
	// Returns the state of the newly created transformer. The transformer can be either `active` or `inactive` . For the transformer to be used in a capability, its status must `active` .
	Status TransformerStatus `pulumi:"status"`
	// A key-value pair for a specific transformer. Tags are metadata that you can use to search for and group capabilities for various purposes.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Transformer resource.
type TransformerArgs struct {
	EdiType    TransformerEdiTypePropertiesPtrInput
	FileFormat TransformerFileFormatPtrInput
	// Returns a structure that contains the format options for the transformation.
	InputConversion TransformerInputConversionPtrInput
	// Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).
	Mapping TransformerMappingPtrInput
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	MappingTemplate pulumi.StringPtrInput
	// Returns the descriptive name for the transformer.
	Name pulumi.StringPtrInput
	// Returns the `OutputConversion` object, which contains the format options for the outbound transformation.
	OutputConversion TransformerOutputConversionPtrInput
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	SampleDocument pulumi.StringPtrInput
	// Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.
	SampleDocuments TransformerSampleDocumentsPtrInput
	// Returns the state of the newly created transformer. The transformer can be either `active` or `inactive` . For the transformer to be used in a capability, its status must `active` .
	Status TransformerStatusInput
	// A key-value pair for a specific transformer. Tags are metadata that you can use to search for and group capabilities for various purposes.
	Tags aws.TagArrayInput
}

func (TransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transformerArgs)(nil)).Elem()
}

type TransformerInput interface {
	pulumi.Input

	ToTransformerOutput() TransformerOutput
	ToTransformerOutputWithContext(ctx context.Context) TransformerOutput
}

func (*Transformer) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformer)(nil)).Elem()
}

func (i *Transformer) ToTransformerOutput() TransformerOutput {
	return i.ToTransformerOutputWithContext(context.Background())
}

func (i *Transformer) ToTransformerOutputWithContext(ctx context.Context) TransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerOutput)
}

type TransformerOutput struct{ *pulumi.OutputState }

func (TransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformer)(nil)).Elem()
}

func (o TransformerOutput) ToTransformerOutput() TransformerOutput {
	return o
}

func (o TransformerOutput) ToTransformerOutputWithContext(ctx context.Context) TransformerOutput {
	return o
}

// Returns a timestamp indicating when the transformer was created. For example, `2023-07-20T19:58:44.624Z` .
func (o TransformerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o TransformerOutput) EdiType() TransformerEdiTypePropertiesPtrOutput {
	return o.ApplyT(func(v *Transformer) TransformerEdiTypePropertiesPtrOutput { return v.EdiType }).(TransformerEdiTypePropertiesPtrOutput)
}

func (o TransformerOutput) FileFormat() TransformerFileFormatPtrOutput {
	return o.ApplyT(func(v *Transformer) TransformerFileFormatPtrOutput { return v.FileFormat }).(TransformerFileFormatPtrOutput)
}

// Returns a structure that contains the format options for the transformation.
func (o TransformerOutput) InputConversion() TransformerInputConversionPtrOutput {
	return o.ApplyT(func(v *Transformer) TransformerInputConversionPtrOutput { return v.InputConversion }).(TransformerInputConversionPtrOutput)
}

// Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).
func (o TransformerOutput) Mapping() TransformerMappingPtrOutput {
	return o.ApplyT(func(v *Transformer) TransformerMappingPtrOutput { return v.Mapping }).(TransformerMappingPtrOutput)
}

// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
func (o TransformerOutput) MappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringPtrOutput { return v.MappingTemplate }).(pulumi.StringPtrOutput)
}

// Returns a timestamp representing the date and time for the most recent change for the transformer object.
func (o TransformerOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

// Returns the descriptive name for the transformer.
func (o TransformerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Returns the `OutputConversion` object, which contains the format options for the outbound transformation.
func (o TransformerOutput) OutputConversion() TransformerOutputConversionPtrOutput {
	return o.ApplyT(func(v *Transformer) TransformerOutputConversionPtrOutput { return v.OutputConversion }).(TransformerOutputConversionPtrOutput)
}

// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
func (o TransformerOutput) SampleDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringPtrOutput { return v.SampleDocument }).(pulumi.StringPtrOutput)
}

// Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.
func (o TransformerOutput) SampleDocuments() TransformerSampleDocumentsPtrOutput {
	return o.ApplyT(func(v *Transformer) TransformerSampleDocumentsPtrOutput { return v.SampleDocuments }).(TransformerSampleDocumentsPtrOutput)
}

// Returns the state of the newly created transformer. The transformer can be either `active` or `inactive` . For the transformer to be used in a capability, its status must `active` .
func (o TransformerOutput) Status() TransformerStatusOutput {
	return o.ApplyT(func(v *Transformer) TransformerStatusOutput { return v.Status }).(TransformerStatusOutput)
}

// A key-value pair for a specific transformer. Tags are metadata that you can use to search for and group capabilities for various purposes.
func (o TransformerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Transformer) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// Returns an Amazon Resource Name (ARN) for a specific transformer.
func (o TransformerOutput) TransformerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.TransformerArn }).(pulumi.StringOutput)
}

// The system-assigned unique identifier for the transformer.
func (o TransformerOutput) TransformerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.TransformerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerInput)(nil)).Elem(), &Transformer{})
	pulumi.RegisterOutputType(TransformerOutput{})
}
