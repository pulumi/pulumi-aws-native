// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::B2BI::Transformer Resource Type
func LookupTransformer(ctx *pulumi.Context, args *LookupTransformerArgs, opts ...pulumi.InvokeOption) (*LookupTransformerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransformerResult
	err := ctx.Invoke("aws-native:b2bi:getTransformer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTransformerArgs struct {
	TransformerId string `pulumi:"transformerId"`
}

type LookupTransformerResult struct {
	CreatedAt       *string                       `pulumi:"createdAt"`
	EdiType         *TransformerEdiTypeProperties `pulumi:"ediType"`
	FileFormat      *TransformerFileFormat        `pulumi:"fileFormat"`
	MappingTemplate *string                       `pulumi:"mappingTemplate"`
	ModifiedAt      *string                       `pulumi:"modifiedAt"`
	Name            *string                       `pulumi:"name"`
	SampleDocument  *string                       `pulumi:"sampleDocument"`
	Status          *TransformerStatus            `pulumi:"status"`
	Tags            []TransformerTag              `pulumi:"tags"`
	TransformerArn  *string                       `pulumi:"transformerArn"`
	TransformerId   *string                       `pulumi:"transformerId"`
}

func LookupTransformerOutput(ctx *pulumi.Context, args LookupTransformerOutputArgs, opts ...pulumi.InvokeOption) LookupTransformerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTransformerResult, error) {
			args := v.(LookupTransformerArgs)
			r, err := LookupTransformer(ctx, &args, opts...)
			var s LookupTransformerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTransformerResultOutput)
}

type LookupTransformerOutputArgs struct {
	TransformerId pulumi.StringInput `pulumi:"transformerId"`
}

func (LookupTransformerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformerArgs)(nil)).Elem()
}

type LookupTransformerResultOutput struct{ *pulumi.OutputState }

func (LookupTransformerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformerResult)(nil)).Elem()
}

func (o LookupTransformerResultOutput) ToLookupTransformerResultOutput() LookupTransformerResultOutput {
	return o
}

func (o LookupTransformerResultOutput) ToLookupTransformerResultOutputWithContext(ctx context.Context) LookupTransformerResultOutput {
	return o
}

func (o LookupTransformerResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o LookupTransformerResultOutput) EdiType() TransformerEdiTypePropertiesPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerEdiTypeProperties { return v.EdiType }).(TransformerEdiTypePropertiesPtrOutput)
}

func (o LookupTransformerResultOutput) FileFormat() TransformerFileFormatPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerFileFormat { return v.FileFormat }).(TransformerFileFormatPtrOutput)
}

func (o LookupTransformerResultOutput) MappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.MappingTemplate }).(pulumi.StringPtrOutput)
}

func (o LookupTransformerResultOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

func (o LookupTransformerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupTransformerResultOutput) SampleDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.SampleDocument }).(pulumi.StringPtrOutput)
}

func (o LookupTransformerResultOutput) Status() TransformerStatusPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerStatus { return v.Status }).(TransformerStatusPtrOutput)
}

func (o LookupTransformerResultOutput) Tags() TransformerTagArrayOutput {
	return o.ApplyT(func(v LookupTransformerResult) []TransformerTag { return v.Tags }).(TransformerTagArrayOutput)
}

func (o LookupTransformerResultOutput) TransformerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.TransformerArn }).(pulumi.StringPtrOutput)
}

func (o LookupTransformerResultOutput) TransformerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.TransformerId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransformerResultOutput{})
}
