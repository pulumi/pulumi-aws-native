// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package b2bi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::B2BI::Transformer Resource Type
func LookupTransformer(ctx *pulumi.Context, args *LookupTransformerArgs, opts ...pulumi.InvokeOption) (*LookupTransformerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransformerResult
	err := ctx.Invoke("aws-native:b2bi:getTransformer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTransformerArgs struct {
	// The system-assigned unique identifier for the transformer.
	TransformerId string `pulumi:"transformerId"`
}

type LookupTransformerResult struct {
	// Returns a timestamp indicating when the transformer was created. For example, `2023-07-20T19:58:44.624Z` .
	CreatedAt  *string                       `pulumi:"createdAt"`
	EdiType    *TransformerEdiTypeProperties `pulumi:"ediType"`
	FileFormat *TransformerFileFormat        `pulumi:"fileFormat"`
	// Returns a structure that contains the format options for the transformation.
	InputConversion *TransformerInputConversion `pulumi:"inputConversion"`
	// Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).
	Mapping *TransformerMapping `pulumi:"mapping"`
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	MappingTemplate *string `pulumi:"mappingTemplate"`
	// Returns a timestamp representing the date and time for the most recent change for the transformer object.
	ModifiedAt *string `pulumi:"modifiedAt"`
	// Returns the descriptive name for the transformer.
	Name *string `pulumi:"name"`
	// Returns the `OutputConversion` object, which contains the format options for the outbound transformation.
	OutputConversion *TransformerOutputConversion `pulumi:"outputConversion"`
	// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
	SampleDocument *string `pulumi:"sampleDocument"`
	// Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.
	SampleDocuments *TransformerSampleDocuments `pulumi:"sampleDocuments"`
	// Returns the state of the newly created transformer. The transformer can be either `active` or `inactive` . For the transformer to be used in a capability, its status must `active` .
	Status *TransformerStatus `pulumi:"status"`
	// A key-value pair for a specific transformer. Tags are metadata that you can use to search for and group capabilities for various purposes.
	Tags []aws.Tag `pulumi:"tags"`
	// Returns an Amazon Resource Name (ARN) for a specific transformer.
	TransformerArn *string `pulumi:"transformerArn"`
	// The system-assigned unique identifier for the transformer.
	TransformerId *string `pulumi:"transformerId"`
}

func LookupTransformerOutput(ctx *pulumi.Context, args LookupTransformerOutputArgs, opts ...pulumi.InvokeOption) LookupTransformerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTransformerResultOutput, error) {
			args := v.(LookupTransformerArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTransformerResult
			secret, err := ctx.InvokePackageRaw("aws-native:b2bi:getTransformer", args, &rv, "", opts...)
			if err != nil {
				return LookupTransformerResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTransformerResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTransformerResultOutput), nil
			}
			return output, nil
		}).(LookupTransformerResultOutput)
}

type LookupTransformerOutputArgs struct {
	// The system-assigned unique identifier for the transformer.
	TransformerId pulumi.StringInput `pulumi:"transformerId"`
}

func (LookupTransformerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformerArgs)(nil)).Elem()
}

type LookupTransformerResultOutput struct{ *pulumi.OutputState }

func (LookupTransformerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformerResult)(nil)).Elem()
}

func (o LookupTransformerResultOutput) ToLookupTransformerResultOutput() LookupTransformerResultOutput {
	return o
}

func (o LookupTransformerResultOutput) ToLookupTransformerResultOutputWithContext(ctx context.Context) LookupTransformerResultOutput {
	return o
}

// Returns a timestamp indicating when the transformer was created. For example, `2023-07-20T19:58:44.624Z` .
func (o LookupTransformerResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o LookupTransformerResultOutput) EdiType() TransformerEdiTypePropertiesPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerEdiTypeProperties { return v.EdiType }).(TransformerEdiTypePropertiesPtrOutput)
}

func (o LookupTransformerResultOutput) FileFormat() TransformerFileFormatPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerFileFormat { return v.FileFormat }).(TransformerFileFormatPtrOutput)
}

// Returns a structure that contains the format options for the transformation.
func (o LookupTransformerResultOutput) InputConversion() TransformerInputConversionPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerInputConversion { return v.InputConversion }).(TransformerInputConversionPtrOutput)
}

// Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).
func (o LookupTransformerResultOutput) Mapping() TransformerMappingPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerMapping { return v.Mapping }).(TransformerMappingPtrOutput)
}

// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
func (o LookupTransformerResultOutput) MappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.MappingTemplate }).(pulumi.StringPtrOutput)
}

// Returns a timestamp representing the date and time for the most recent change for the transformer object.
func (o LookupTransformerResultOutput) ModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.ModifiedAt }).(pulumi.StringPtrOutput)
}

// Returns the descriptive name for the transformer.
func (o LookupTransformerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Returns the `OutputConversion` object, which contains the format options for the outbound transformation.
func (o LookupTransformerResultOutput) OutputConversion() TransformerOutputConversionPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerOutputConversion { return v.OutputConversion }).(TransformerOutputConversionPtrOutput)
}

// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
func (o LookupTransformerResultOutput) SampleDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.SampleDocument }).(pulumi.StringPtrOutput)
}

// Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.
func (o LookupTransformerResultOutput) SampleDocuments() TransformerSampleDocumentsPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerSampleDocuments { return v.SampleDocuments }).(TransformerSampleDocumentsPtrOutput)
}

// Returns the state of the newly created transformer. The transformer can be either `active` or `inactive` . For the transformer to be used in a capability, its status must `active` .
func (o LookupTransformerResultOutput) Status() TransformerStatusPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *TransformerStatus { return v.Status }).(TransformerStatusPtrOutput)
}

// A key-value pair for a specific transformer. Tags are metadata that you can use to search for and group capabilities for various purposes.
func (o LookupTransformerResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupTransformerResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// Returns an Amazon Resource Name (ARN) for a specific transformer.
func (o LookupTransformerResultOutput) TransformerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.TransformerArn }).(pulumi.StringPtrOutput)
}

// The system-assigned unique identifier for the transformer.
func (o LookupTransformerResultOutput) TransformerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransformerResult) *string { return v.TransformerId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransformerResultOutput{})
}
