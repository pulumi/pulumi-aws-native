// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticloadbalancingv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ElasticLoadBalancingV2::TrustStore
type TrustStore struct {
	pulumi.CustomResourceState

	// The name of the S3 bucket to fetch the CA certificate bundle from.
	CaCertificatesBundleS3Bucket pulumi.StringPtrOutput `pulumi:"caCertificatesBundleS3Bucket"`
	// The name of the S3 object to fetch the CA certificate bundle from.
	CaCertificatesBundleS3Key pulumi.StringPtrOutput `pulumi:"caCertificatesBundleS3Key"`
	// The version of the S3 bucket that contains the CA certificate bundle.
	CaCertificatesBundleS3ObjectVersion pulumi.StringPtrOutput `pulumi:"caCertificatesBundleS3ObjectVersion"`
	// The name of the trust store.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The number of certificates associated with the trust store.
	NumberOfCaCertificates pulumi.IntOutput `pulumi:"numberOfCaCertificates"`
	// The status of the trust store, could be either of ACTIVE or CREATING.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tags to assign to the trust store.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The Amazon Resource Name (ARN) of the trust store.
	TrustStoreArn pulumi.StringOutput `pulumi:"trustStoreArn"`
}

// NewTrustStore registers a new resource with the given unique name, arguments, and options.
func NewTrustStore(ctx *pulumi.Context,
	name string, args *TrustStoreArgs, opts ...pulumi.ResourceOption) (*TrustStore, error) {
	if args == nil {
		args = &TrustStoreArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustStore
	err := ctx.RegisterResource("aws-native:elasticloadbalancingv2:TrustStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustStore gets an existing TrustStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustStoreState, opts ...pulumi.ResourceOption) (*TrustStore, error) {
	var resource TrustStore
	err := ctx.ReadResource("aws-native:elasticloadbalancingv2:TrustStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustStore resources.
type trustStoreState struct {
}

type TrustStoreState struct {
}

func (TrustStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreState)(nil)).Elem()
}

type trustStoreArgs struct {
	// The name of the S3 bucket to fetch the CA certificate bundle from.
	CaCertificatesBundleS3Bucket *string `pulumi:"caCertificatesBundleS3Bucket"`
	// The name of the S3 object to fetch the CA certificate bundle from.
	CaCertificatesBundleS3Key *string `pulumi:"caCertificatesBundleS3Key"`
	// The version of the S3 bucket that contains the CA certificate bundle.
	CaCertificatesBundleS3ObjectVersion *string `pulumi:"caCertificatesBundleS3ObjectVersion"`
	// The name of the trust store.
	Name *string `pulumi:"name"`
	// The tags to assign to the trust store.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a TrustStore resource.
type TrustStoreArgs struct {
	// The name of the S3 bucket to fetch the CA certificate bundle from.
	CaCertificatesBundleS3Bucket pulumi.StringPtrInput
	// The name of the S3 object to fetch the CA certificate bundle from.
	CaCertificatesBundleS3Key pulumi.StringPtrInput
	// The version of the S3 bucket that contains the CA certificate bundle.
	CaCertificatesBundleS3ObjectVersion pulumi.StringPtrInput
	// The name of the trust store.
	Name pulumi.StringPtrInput
	// The tags to assign to the trust store.
	Tags aws.TagArrayInput
}

func (TrustStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustStoreArgs)(nil)).Elem()
}

type TrustStoreInput interface {
	pulumi.Input

	ToTrustStoreOutput() TrustStoreOutput
	ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput
}

func (*TrustStore) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStore)(nil)).Elem()
}

func (i *TrustStore) ToTrustStoreOutput() TrustStoreOutput {
	return i.ToTrustStoreOutputWithContext(context.Background())
}

func (i *TrustStore) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreOutput)
}

type TrustStoreOutput struct{ *pulumi.OutputState }

func (TrustStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustStore)(nil)).Elem()
}

func (o TrustStoreOutput) ToTrustStoreOutput() TrustStoreOutput {
	return o
}

func (o TrustStoreOutput) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return o
}

// The name of the S3 bucket to fetch the CA certificate bundle from.
func (o TrustStoreOutput) CaCertificatesBundleS3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringPtrOutput { return v.CaCertificatesBundleS3Bucket }).(pulumi.StringPtrOutput)
}

// The name of the S3 object to fetch the CA certificate bundle from.
func (o TrustStoreOutput) CaCertificatesBundleS3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringPtrOutput { return v.CaCertificatesBundleS3Key }).(pulumi.StringPtrOutput)
}

// The version of the S3 bucket that contains the CA certificate bundle.
func (o TrustStoreOutput) CaCertificatesBundleS3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringPtrOutput { return v.CaCertificatesBundleS3ObjectVersion }).(pulumi.StringPtrOutput)
}

// The name of the trust store.
func (o TrustStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of certificates associated with the trust store.
func (o TrustStoreOutput) NumberOfCaCertificates() pulumi.IntOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.IntOutput { return v.NumberOfCaCertificates }).(pulumi.IntOutput)
}

// The status of the trust store, could be either of ACTIVE or CREATING.
func (o TrustStoreOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The tags to assign to the trust store.
func (o TrustStoreOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TrustStore) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The Amazon Resource Name (ARN) of the trust store.
func (o TrustStoreOutput) TrustStoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustStore) pulumi.StringOutput { return v.TrustStoreArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreInput)(nil)).Elem(), &TrustStore{})
	pulumi.RegisterOutputType(TrustStoreOutput{})
}
