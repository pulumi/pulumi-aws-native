// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticloadbalancingv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a listener rule. The listener must be associated with an Application Load Balancer. Each rule consists of a priority, one or more actions, and one or more conditions.
//
//	For more information, see [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html) in the *User Guide for Application Load Balancers*.
func LookupListenerRule(ctx *pulumi.Context, args *LookupListenerRuleArgs, opts ...pulumi.InvokeOption) (*LookupListenerRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupListenerRuleResult
	err := ctx.Invoke("aws-native:elasticloadbalancingv2:getListenerRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupListenerRuleArgs struct {
	// The Amazon Resource Name (ARN) of the rule.
	RuleArn string `pulumi:"ruleArn"`
}

type LookupListenerRuleResult struct {
	// The actions.
	//  The rule must include exactly one of the following types of actions: ``forward``, ``fixed-response``, or ``redirect``, and it must be the last action to be performed. If the rule is for an HTTPS listener, it can also optionally include an authentication action.
	Actions []ListenerRuleAction `pulumi:"actions"`
	// The conditions.
	//  The rule can optionally include up to one of each of the following conditions: ``http-request-method``, ``host-header``, ``path-pattern``, and ``source-ip``. A rule can also optionally include one or more of each of the following conditions: ``http-header`` and ``query-string``.
	Conditions []ListenerRuleRuleCondition `pulumi:"conditions"`
	// Indicates whether this is the default rule.
	IsDefault *bool `pulumi:"isDefault"`
	// The rule priority. A listener can't have multiple rules with the same priority.
	//  If you try to reorder rules by updating their priorities, do not specify a new priority if an existing rule already uses this priority, as this can cause an error. If you need to reuse a priority with a different rule, you must remove it as a priority first, and then specify it in a subsequent update.
	Priority *int `pulumi:"priority"`
	// The Amazon Resource Name (ARN) of the rule.
	RuleArn *string `pulumi:"ruleArn"`
}

func LookupListenerRuleOutput(ctx *pulumi.Context, args LookupListenerRuleOutputArgs, opts ...pulumi.InvokeOption) LookupListenerRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupListenerRuleResultOutput, error) {
			args := v.(LookupListenerRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:elasticloadbalancingv2:getListenerRule", args, LookupListenerRuleResultOutput{}, options).(LookupListenerRuleResultOutput), nil
		}).(LookupListenerRuleResultOutput)
}

type LookupListenerRuleOutputArgs struct {
	// The Amazon Resource Name (ARN) of the rule.
	RuleArn pulumi.StringInput `pulumi:"ruleArn"`
}

func (LookupListenerRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerRuleArgs)(nil)).Elem()
}

type LookupListenerRuleResultOutput struct{ *pulumi.OutputState }

func (LookupListenerRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerRuleResult)(nil)).Elem()
}

func (o LookupListenerRuleResultOutput) ToLookupListenerRuleResultOutput() LookupListenerRuleResultOutput {
	return o
}

func (o LookupListenerRuleResultOutput) ToLookupListenerRuleResultOutputWithContext(ctx context.Context) LookupListenerRuleResultOutput {
	return o
}

// The actions.
//
//	The rule must include exactly one of the following types of actions: ``forward``, ``fixed-response``, or ``redirect``, and it must be the last action to be performed. If the rule is for an HTTPS listener, it can also optionally include an authentication action.
func (o LookupListenerRuleResultOutput) Actions() ListenerRuleActionArrayOutput {
	return o.ApplyT(func(v LookupListenerRuleResult) []ListenerRuleAction { return v.Actions }).(ListenerRuleActionArrayOutput)
}

// The conditions.
//
//	The rule can optionally include up to one of each of the following conditions: ``http-request-method``, ``host-header``, ``path-pattern``, and ``source-ip``. A rule can also optionally include one or more of each of the following conditions: ``http-header`` and ``query-string``.
func (o LookupListenerRuleResultOutput) Conditions() ListenerRuleRuleConditionArrayOutput {
	return o.ApplyT(func(v LookupListenerRuleResult) []ListenerRuleRuleCondition { return v.Conditions }).(ListenerRuleRuleConditionArrayOutput)
}

// Indicates whether this is the default rule.
func (o LookupListenerRuleResultOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupListenerRuleResult) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The rule priority. A listener can't have multiple rules with the same priority.
//
//	If you try to reorder rules by updating their priorities, do not specify a new priority if an existing rule already uses this priority, as this can cause an error. If you need to reuse a priority with a different rule, you must remove it as a priority first, and then specify it in a subsequent update.
func (o LookupListenerRuleResultOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupListenerRuleResult) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) of the rule.
func (o LookupListenerRuleResultOutput) RuleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupListenerRuleResult) *string { return v.RuleArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupListenerRuleResultOutput{})
}
