// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::SSM::Parameter“ resource creates an SSM parameter in SYSlong Parameter Store.
//
//	 To create an SSM parameter, you must have the IAMlong (IAM) permissions ``ssm:PutParameter`` and ``ssm:AddTagsToResource``. On stack creation, CFNlong adds the following three tags to the parameter: ``aws:cloudformation:stack-name``, ``aws:cloudformation:logical-id``, and ``aws:cloudformation:stack-id``, in addition to any custom tags you specify.
//	To add, update, or remove tags during stack update, you must have IAM permissions for both ``ssm:AddTagsToResource`` and ``ssm:RemoveTagsFromResource``. For more information, see [Managing Access Using Policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/security-iam.html#security_iam_access-manage) in the *User Guide*.
//	 For information about valid values for parameters, see [Requirements and Constraints for Parameter Names](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-su-create.html#sysman-paramete
type Parameter struct {
	pulumi.CustomResourceState

	// A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``
	AllowedPattern pulumi.StringPtrOutput `pulumi:"allowedPattern"`
	// The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
	DataType ParameterDataTypePtrOutput `pulumi:"dataType"`
	// Information about the parameter.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the parameter.
	//  The maximum length constraint listed below includes capacity for additional system attributes that aren't part of the name. The maximum length for a parameter name, including the full length of the parameter ARN, is 1011 characters. For example, the length of the following parameter name is 65 characters, not 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Information about the policies assigned to a parameter.
	//   [Assigning parameter policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User Guide*.
	Policies pulumi.StringPtrOutput `pulumi:"policies"`
	// Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of configuration data referenced by the parameter.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The parameter tier.
	Tier ParameterTierPtrOutput `pulumi:"tier"`
	// The type of parameter.
	//   Although ``SecureString`` is included in the list of valid values, CFNlong does *not* currently support creating a ``SecureString`` parameter type.
	Type ParameterTypeOutput `pulumi:"type"`
	// The parameter value.
	//   If type is ``StringList``, the system returns a comma-separated string with no spaces between commas in the ``Value`` field.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewParameter registers a new resource with the given unique name, arguments, and options.
func NewParameter(ctx *pulumi.Context,
	name string, args *ParameterArgs, opts ...pulumi.ResourceOption) (*Parameter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Parameter
	err := ctx.RegisterResource("aws-native:ssm:Parameter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParameter gets an existing Parameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParameterState, opts ...pulumi.ResourceOption) (*Parameter, error) {
	var resource Parameter
	err := ctx.ReadResource("aws-native:ssm:Parameter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Parameter resources.
type parameterState struct {
}

type ParameterState struct {
}

func (ParameterState) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterState)(nil)).Elem()
}

type parameterArgs struct {
	// A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``
	AllowedPattern *string `pulumi:"allowedPattern"`
	// The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
	DataType *ParameterDataType `pulumi:"dataType"`
	// Information about the parameter.
	Description *string `pulumi:"description"`
	// The name of the parameter.
	//  The maximum length constraint listed below includes capacity for additional system attributes that aren't part of the name. The maximum length for a parameter name, including the full length of the parameter ARN, is 1011 characters. For example, the length of the following parameter name is 65 characters, not 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
	Name *string `pulumi:"name"`
	// Information about the policies assigned to a parameter.
	//   [Assigning parameter policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User Guide*.
	Policies *string `pulumi:"policies"`
	// Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of configuration data referenced by the parameter.
	Tags map[string]string `pulumi:"tags"`
	// The parameter tier.
	Tier *ParameterTier `pulumi:"tier"`
	// The type of parameter.
	//   Although ``SecureString`` is included in the list of valid values, CFNlong does *not* currently support creating a ``SecureString`` parameter type.
	Type ParameterType `pulumi:"type"`
	// The parameter value.
	//   If type is ``StringList``, the system returns a comma-separated string with no spaces between commas in the ``Value`` field.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Parameter resource.
type ParameterArgs struct {
	// A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``
	AllowedPattern pulumi.StringPtrInput
	// The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
	DataType ParameterDataTypePtrInput
	// Information about the parameter.
	Description pulumi.StringPtrInput
	// The name of the parameter.
	//  The maximum length constraint listed below includes capacity for additional system attributes that aren't part of the name. The maximum length for a parameter name, including the full length of the parameter ARN, is 1011 characters. For example, the length of the following parameter name is 65 characters, not 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
	Name pulumi.StringPtrInput
	// Information about the policies assigned to a parameter.
	//   [Assigning parameter policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User Guide*.
	Policies pulumi.StringPtrInput
	// Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of configuration data referenced by the parameter.
	Tags pulumi.StringMapInput
	// The parameter tier.
	Tier ParameterTierPtrInput
	// The type of parameter.
	//   Although ``SecureString`` is included in the list of valid values, CFNlong does *not* currently support creating a ``SecureString`` parameter type.
	Type ParameterTypeInput
	// The parameter value.
	//   If type is ``StringList``, the system returns a comma-separated string with no spaces between commas in the ``Value`` field.
	Value pulumi.StringInput
}

func (ParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*parameterArgs)(nil)).Elem()
}

type ParameterInput interface {
	pulumi.Input

	ToParameterOutput() ParameterOutput
	ToParameterOutputWithContext(ctx context.Context) ParameterOutput
}

func (*Parameter) ElementType() reflect.Type {
	return reflect.TypeOf((**Parameter)(nil)).Elem()
}

func (i *Parameter) ToParameterOutput() ParameterOutput {
	return i.ToParameterOutputWithContext(context.Background())
}

func (i *Parameter) ToParameterOutputWithContext(ctx context.Context) ParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterOutput)
}

type ParameterOutput struct{ *pulumi.OutputState }

func (ParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Parameter)(nil)).Elem()
}

func (o ParameterOutput) ToParameterOutput() ParameterOutput {
	return o
}

func (o ParameterOutput) ToParameterOutputWithContext(ctx context.Context) ParameterOutput {
	return o
}

// A regular expression used to validate the parameter value. For example, for String types with values restricted to numbers, you can specify the following: “AllowedPattern=^\d+$“
func (o ParameterOutput) AllowedPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.AllowedPattern }).(pulumi.StringPtrOutput)
}

// The data type of the parameter, such as “text“ or “aws:ec2:image“. The default is “text“.
func (o ParameterOutput) DataType() ParameterDataTypePtrOutput {
	return o.ApplyT(func(v *Parameter) ParameterDataTypePtrOutput { return v.DataType }).(ParameterDataTypePtrOutput)
}

// Information about the parameter.
func (o ParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the parameter.
//
//	The maximum length constraint listed below includes capacity for additional system attributes that aren't part of the name. The maximum length for a parameter name, including the full length of the parameter ARN, is 1011 characters. For example, the length of the following parameter name is 65 characters, not 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
func (o ParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Information about the policies assigned to a parameter.
//
//	[Assigning parameter policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User Guide*.
func (o ParameterOutput) Policies() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringPtrOutput { return v.Policies }).(pulumi.StringPtrOutput)
}

// Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of configuration data referenced by the parameter.
func (o ParameterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The parameter tier.
func (o ParameterOutput) Tier() ParameterTierPtrOutput {
	return o.ApplyT(func(v *Parameter) ParameterTierPtrOutput { return v.Tier }).(ParameterTierPtrOutput)
}

// The type of parameter.
//
//	Although ``SecureString`` is included in the list of valid values, CFNlong does *not* currently support creating a ``SecureString`` parameter type.
func (o ParameterOutput) Type() ParameterTypeOutput {
	return o.ApplyT(func(v *Parameter) ParameterTypeOutput { return v.Type }).(ParameterTypeOutput)
}

// The parameter value.
//
//	If type is ``StringList``, the system returns a comma-separated string with no spaces between commas in the ``Value`` field.
func (o ParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Parameter) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterInput)(nil)).Elem(), &Parameter{})
	pulumi.RegisterOutputType(ParameterOutput{})
}
