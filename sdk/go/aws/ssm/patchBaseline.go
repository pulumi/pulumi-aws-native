// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SSM::PatchBaseline
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewPatchBaseline(ctx, "myPatchBaseline", &ssm.PatchBaselineArgs{
//				Name:            pulumi.String("myPatchBaseline"),
//				Description:     pulumi.String("Baseline containing all updates approved for Windows instances"),
//				OperatingSystem: ssm.PatchBaselineOperatingSystemWindows,
//				PatchGroups: pulumi.StringArray{
//					pulumi.String("myPatchGroup"),
//				},
//				ApprovalRules: &ssm.PatchBaselineRuleGroupArgs{
//					PatchRules: ssm.PatchBaselineRuleArray{
//						&ssm.PatchBaselineRuleArgs{
//							PatchFilterGroup: &ssm.PatchBaselinePatchFilterGroupArgs{
//								PatchFilters: ssm.PatchBaselinePatchFilterArray{
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Critical"),
//											pulumi.String("Important"),
//											pulumi.String("Moderate"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyMsrcSeverity,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("SecurityUpdates"),
//											pulumi.String("CriticalUpdates"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyClassification,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("WindowsServer2019"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyProduct,
//									},
//								},
//							},
//							ApproveAfterDays: pulumi.Int(7),
//							ComplianceLevel:  ssm.PatchBaselineRuleComplianceLevelCritical,
//						},
//						&ssm.PatchBaselineRuleArgs{
//							PatchFilterGroup: &ssm.PatchBaselinePatchFilterGroupArgs{
//								PatchFilters: ssm.PatchBaselinePatchFilterArray{
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Critical"),
//											pulumi.String("Important"),
//											pulumi.String("Moderate"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyMsrcSeverity,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("*"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyClassification,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("APPLICATION"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyPatchSet,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Active Directory Rights Management Services Client 2.0"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyProduct,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Active Directory"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyProductFamily,
//									},
//								},
//							},
//							ApproveAfterDays: pulumi.Int(7),
//							ComplianceLevel:  ssm.PatchBaselineRuleComplianceLevelCritical,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewPatchBaseline(ctx, "myPatchBaseline", &ssm.PatchBaselineArgs{
//				Name:            pulumi.String("myPatchBaseline"),
//				Description:     pulumi.String("Baseline containing all updates approved for Windows instances"),
//				OperatingSystem: ssm.PatchBaselineOperatingSystemWindows,
//				PatchGroups: pulumi.StringArray{
//					pulumi.String("myPatchGroup"),
//				},
//				ApprovalRules: &ssm.PatchBaselineRuleGroupArgs{
//					PatchRules: ssm.PatchBaselineRuleArray{
//						&ssm.PatchBaselineRuleArgs{
//							PatchFilterGroup: &ssm.PatchBaselinePatchFilterGroupArgs{
//								PatchFilters: ssm.PatchBaselinePatchFilterArray{
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Critical"),
//											pulumi.String("Important"),
//											pulumi.String("Moderate"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyMsrcSeverity,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("SecurityUpdates"),
//											pulumi.String("CriticalUpdates"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyClassification,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("WindowsServer2019"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyProduct,
//									},
//								},
//							},
//							ApproveAfterDays: pulumi.Int(7),
//							ComplianceLevel:  ssm.PatchBaselineRuleComplianceLevelCritical,
//						},
//						&ssm.PatchBaselineRuleArgs{
//							PatchFilterGroup: &ssm.PatchBaselinePatchFilterGroupArgs{
//								PatchFilters: ssm.PatchBaselinePatchFilterArray{
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Critical"),
//											pulumi.String("Important"),
//											pulumi.String("Moderate"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyMsrcSeverity,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("*"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyClassification,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("APPLICATION"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyPatchSet,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Active Directory Rights Management Services Client 2.0"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyProduct,
//									},
//									&ssm.PatchBaselinePatchFilterArgs{
//										Values: pulumi.StringArray{
//											pulumi.String("Active Directory"),
//										},
//										Key: ssm.PatchBaselinePatchFilterKeyProductFamily,
//									},
//								},
//							},
//							ApproveAfterDays: pulumi.Int(7),
//							ComplianceLevel:  ssm.PatchBaselineRuleComplianceLevelCritical,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PatchBaseline struct {
	pulumi.CustomResourceState

	// A set of rules used to include patches in the baseline.
	ApprovalRules PatchBaselineRuleGroupPtrOutput `pulumi:"approvalRules"`
	// A list of explicitly approved patches for the baseline.
	ApprovedPatches pulumi.StringArrayOutput `pulumi:"approvedPatches"`
	// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
	ApprovedPatchesComplianceLevel PatchBaselineApprovedPatchesComplianceLevelPtrOutput `pulumi:"approvedPatchesComplianceLevel"`
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity pulumi.BoolPtrOutput `pulumi:"approvedPatchesEnableNonSecurity"`
	// The compliance status for vendor recommended security updates that are not approved by this patch baseline.
	AvailableSecurityUpdatesComplianceStatus PatchBaselineAvailableSecurityUpdatesComplianceStatusPtrOutput `pulumi:"availableSecurityUpdatesComplianceStatus"`
	// The ID of the patch baseline.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Set the baseline as default baseline. Only registering to default patch baseline is allowed.
	DefaultBaseline pulumi.BoolPtrOutput `pulumi:"defaultBaseline"`
	// The description of the patch baseline.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A set of global filters used to include patches in the baseline.
	GlobalFilters PatchBaselinePatchFilterGroupPtrOutput `pulumi:"globalFilters"`
	// The name of the patch baseline.
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
	OperatingSystem PatchBaselineOperatingSystemPtrOutput `pulumi:"operatingSystem"`
	// PatchGroups is used to associate instances with a specific patch baseline
	PatchGroups pulumi.StringArrayOutput `pulumi:"patchGroups"`
	// A list of explicitly rejected patches for the baseline.
	RejectedPatches pulumi.StringArrayOutput `pulumi:"rejectedPatches"`
	// The action for Patch Manager to take on patches included in the RejectedPackages list.
	RejectedPatchesAction PatchBaselineRejectedPatchesActionPtrOutput `pulumi:"rejectedPatchesAction"`
	// Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
	Sources PatchBaselinePatchSourceArrayOutput `pulumi:"sources"`
	// Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewPatchBaseline registers a new resource with the given unique name, arguments, and options.
func NewPatchBaseline(ctx *pulumi.Context,
	name string, args *PatchBaselineArgs, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	if args == nil {
		args = &PatchBaselineArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"operatingSystem",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PatchBaseline
	err := ctx.RegisterResource("aws-native:ssm:PatchBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPatchBaseline gets an existing PatchBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPatchBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PatchBaselineState, opts ...pulumi.ResourceOption) (*PatchBaseline, error) {
	var resource PatchBaseline
	err := ctx.ReadResource("aws-native:ssm:PatchBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PatchBaseline resources.
type patchBaselineState struct {
}

type PatchBaselineState struct {
}

func (PatchBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineState)(nil)).Elem()
}

type patchBaselineArgs struct {
	// A set of rules used to include patches in the baseline.
	ApprovalRules *PatchBaselineRuleGroup `pulumi:"approvalRules"`
	// A list of explicitly approved patches for the baseline.
	ApprovedPatches []string `pulumi:"approvedPatches"`
	// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
	ApprovedPatchesComplianceLevel *PatchBaselineApprovedPatchesComplianceLevel `pulumi:"approvedPatchesComplianceLevel"`
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity *bool `pulumi:"approvedPatchesEnableNonSecurity"`
	// The compliance status for vendor recommended security updates that are not approved by this patch baseline.
	AvailableSecurityUpdatesComplianceStatus *PatchBaselineAvailableSecurityUpdatesComplianceStatus `pulumi:"availableSecurityUpdatesComplianceStatus"`
	// Set the baseline as default baseline. Only registering to default patch baseline is allowed.
	DefaultBaseline *bool `pulumi:"defaultBaseline"`
	// The description of the patch baseline.
	Description *string `pulumi:"description"`
	// A set of global filters used to include patches in the baseline.
	GlobalFilters *PatchBaselinePatchFilterGroup `pulumi:"globalFilters"`
	// The name of the patch baseline.
	Name *string `pulumi:"name"`
	// Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
	OperatingSystem *PatchBaselineOperatingSystem `pulumi:"operatingSystem"`
	// PatchGroups is used to associate instances with a specific patch baseline
	PatchGroups []string `pulumi:"patchGroups"`
	// A list of explicitly rejected patches for the baseline.
	RejectedPatches []string `pulumi:"rejectedPatches"`
	// The action for Patch Manager to take on patches included in the RejectedPackages list.
	RejectedPatchesAction *PatchBaselineRejectedPatchesAction `pulumi:"rejectedPatchesAction"`
	// Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
	Sources []PatchBaselinePatchSource `pulumi:"sources"`
	// Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a PatchBaseline resource.
type PatchBaselineArgs struct {
	// A set of rules used to include patches in the baseline.
	ApprovalRules PatchBaselineRuleGroupPtrInput
	// A list of explicitly approved patches for the baseline.
	ApprovedPatches pulumi.StringArrayInput
	// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
	ApprovedPatchesComplianceLevel PatchBaselineApprovedPatchesComplianceLevelPtrInput
	// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
	ApprovedPatchesEnableNonSecurity pulumi.BoolPtrInput
	// The compliance status for vendor recommended security updates that are not approved by this patch baseline.
	AvailableSecurityUpdatesComplianceStatus PatchBaselineAvailableSecurityUpdatesComplianceStatusPtrInput
	// Set the baseline as default baseline. Only registering to default patch baseline is allowed.
	DefaultBaseline pulumi.BoolPtrInput
	// The description of the patch baseline.
	Description pulumi.StringPtrInput
	// A set of global filters used to include patches in the baseline.
	GlobalFilters PatchBaselinePatchFilterGroupPtrInput
	// The name of the patch baseline.
	Name pulumi.StringPtrInput
	// Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
	OperatingSystem PatchBaselineOperatingSystemPtrInput
	// PatchGroups is used to associate instances with a specific patch baseline
	PatchGroups pulumi.StringArrayInput
	// A list of explicitly rejected patches for the baseline.
	RejectedPatches pulumi.StringArrayInput
	// The action for Patch Manager to take on patches included in the RejectedPackages list.
	RejectedPatchesAction PatchBaselineRejectedPatchesActionPtrInput
	// Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
	Sources PatchBaselinePatchSourceArrayInput
	// Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways.
	Tags aws.TagArrayInput
}

func (PatchBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*patchBaselineArgs)(nil)).Elem()
}

type PatchBaselineInput interface {
	pulumi.Input

	ToPatchBaselineOutput() PatchBaselineOutput
	ToPatchBaselineOutputWithContext(ctx context.Context) PatchBaselineOutput
}

func (*PatchBaseline) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchBaseline)(nil)).Elem()
}

func (i *PatchBaseline) ToPatchBaselineOutput() PatchBaselineOutput {
	return i.ToPatchBaselineOutputWithContext(context.Background())
}

func (i *PatchBaseline) ToPatchBaselineOutputWithContext(ctx context.Context) PatchBaselineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchBaselineOutput)
}

type PatchBaselineOutput struct{ *pulumi.OutputState }

func (PatchBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchBaseline)(nil)).Elem()
}

func (o PatchBaselineOutput) ToPatchBaselineOutput() PatchBaselineOutput {
	return o
}

func (o PatchBaselineOutput) ToPatchBaselineOutputWithContext(ctx context.Context) PatchBaselineOutput {
	return o
}

// A set of rules used to include patches in the baseline.
func (o PatchBaselineOutput) ApprovalRules() PatchBaselineRuleGroupPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineRuleGroupPtrOutput { return v.ApprovalRules }).(PatchBaselineRuleGroupPtrOutput)
}

// A list of explicitly approved patches for the baseline.
func (o PatchBaselineOutput) ApprovedPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringArrayOutput { return v.ApprovedPatches }).(pulumi.StringArrayOutput)
}

// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
func (o PatchBaselineOutput) ApprovedPatchesComplianceLevel() PatchBaselineApprovedPatchesComplianceLevelPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineApprovedPatchesComplianceLevelPtrOutput {
		return v.ApprovedPatchesComplianceLevel
	}).(PatchBaselineApprovedPatchesComplianceLevelPtrOutput)
}

// Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.
func (o PatchBaselineOutput) ApprovedPatchesEnableNonSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.BoolPtrOutput { return v.ApprovedPatchesEnableNonSecurity }).(pulumi.BoolPtrOutput)
}

// The compliance status for vendor recommended security updates that are not approved by this patch baseline.
func (o PatchBaselineOutput) AvailableSecurityUpdatesComplianceStatus() PatchBaselineAvailableSecurityUpdatesComplianceStatusPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineAvailableSecurityUpdatesComplianceStatusPtrOutput {
		return v.AvailableSecurityUpdatesComplianceStatus
	}).(PatchBaselineAvailableSecurityUpdatesComplianceStatusPtrOutput)
}

// The ID of the patch baseline.
func (o PatchBaselineOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Set the baseline as default baseline. Only registering to default patch baseline is allowed.
func (o PatchBaselineOutput) DefaultBaseline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.BoolPtrOutput { return v.DefaultBaseline }).(pulumi.BoolPtrOutput)
}

// The description of the patch baseline.
func (o PatchBaselineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A set of global filters used to include patches in the baseline.
func (o PatchBaselineOutput) GlobalFilters() PatchBaselinePatchFilterGroupPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselinePatchFilterGroupPtrOutput { return v.GlobalFilters }).(PatchBaselinePatchFilterGroupPtrOutput)
}

// The name of the patch baseline.
func (o PatchBaselineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
func (o PatchBaselineOutput) OperatingSystem() PatchBaselineOperatingSystemPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineOperatingSystemPtrOutput { return v.OperatingSystem }).(PatchBaselineOperatingSystemPtrOutput)
}

// PatchGroups is used to associate instances with a specific patch baseline
func (o PatchBaselineOutput) PatchGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringArrayOutput { return v.PatchGroups }).(pulumi.StringArrayOutput)
}

// A list of explicitly rejected patches for the baseline.
func (o PatchBaselineOutput) RejectedPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) pulumi.StringArrayOutput { return v.RejectedPatches }).(pulumi.StringArrayOutput)
}

// The action for Patch Manager to take on patches included in the RejectedPackages list.
func (o PatchBaselineOutput) RejectedPatchesAction() PatchBaselineRejectedPatchesActionPtrOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselineRejectedPatchesActionPtrOutput { return v.RejectedPatchesAction }).(PatchBaselineRejectedPatchesActionPtrOutput)
}

// Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
func (o PatchBaselineOutput) Sources() PatchBaselinePatchSourceArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) PatchBaselinePatchSourceArrayOutput { return v.Sources }).(PatchBaselinePatchSourceArrayOutput)
}

// Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways.
func (o PatchBaselineOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *PatchBaseline) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PatchBaselineInput)(nil)).Elem(), &PatchBaseline{})
	pulumi.RegisterOutputType(PatchBaselineOutput{})
}
