// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::SSM::Association resource associates an SSM document in AWS Systems Manager with EC2 instances that contain a configuration agent to process the document.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewAssociation(ctx, "specificInstanceIdAssociation", &ssm.AssociationArgs{
//				Name: pulumi.String("AWS-RunShellScript"),
//				Targets: ssm.AssociationTargetArray{
//					&ssm.AssociationTargetArgs{
//						Key: pulumi.String("InstanceIds"),
//						Values: pulumi.StringArray{
//							pulumi.String("i-1234567890abcdef0"),
//						},
//					},
//				},
//				Parameters: pulumi.StringArrayMap{
//					"commands": pulumi.StringArray{
//						pulumi.String("ls"),
//					},
//					"workingDirectory": pulumi.StringArray{
//						pulumi.String("/"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewAssociation(ctx, "specificInstanceIdAssociation", &ssm.AssociationArgs{
//				Name: pulumi.String("AWS-RunShellScript"),
//				Targets: ssm.AssociationTargetArray{
//					&ssm.AssociationTargetArgs{
//						Key: pulumi.String("InstanceIds"),
//						Values: pulumi.StringArray{
//							pulumi.String("i-1234567890abcdef0"),
//						},
//					},
//				},
//				Parameters: pulumi.StringArrayMap{
//					"commands": pulumi.StringArray{
//						pulumi.String("ls"),
//					},
//					"workingDirectory": pulumi.StringArray{
//						pulumi.String("/"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewAssociation(ctx, "allInstanceIdsAssociation", &ssm.AssociationArgs{
//				AssociationName:    pulumi.String("UpdateSSMAgent"),
//				Name:               pulumi.String("AWS-UpdateSSMAgent"),
//				ScheduleExpression: pulumi.String("cron(0 2 ? * SUN *)"),
//				Targets: ssm.AssociationTargetArray{
//					&ssm.AssociationTargetArgs{
//						Key: pulumi.String("InstanceIds"),
//						Values: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewAssociation(ctx, "allInstanceIdsAssociation", &ssm.AssociationArgs{
//				AssociationName:    pulumi.String("UpdateSSMAgent"),
//				Name:               pulumi.String("AWS-UpdateSSMAgent"),
//				ScheduleExpression: pulumi.String("cron(0 2 ? * SUN *)"),
//				Targets: ssm.AssociationTargetArray{
//					&ssm.AssociationTargetArgs{
//						Key: pulumi.String("InstanceIds"),
//						Values: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewAssociation(ctx, "taggedInstancesAssociation", &ssm.AssociationArgs{
//				AssociationName:    pulumi.String("UpdateSSMAgent"),
//				Name:               pulumi.String("AWS-UpdateSSMAgent"),
//				ScheduleExpression: pulumi.String("rate(7 days)"),
//				Targets: ssm.AssociationTargetArray{
//					&ssm.AssociationTargetArgs{
//						Key: pulumi.String("tag:Environment"),
//						Values: pulumi.StringArray{
//							pulumi.String("Production"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewAssociation(ctx, "taggedInstancesAssociation", &ssm.AssociationArgs{
//				AssociationName:    pulumi.String("UpdateSSMAgent"),
//				Name:               pulumi.String("AWS-UpdateSSMAgent"),
//				ScheduleExpression: pulumi.String("rate(7 days)"),
//				Targets: ssm.AssociationTargetArray{
//					&ssm.AssociationTargetArgs{
//						Key: pulumi.String("tag:Environment"),
//						Values: pulumi.StringArray{
//							pulumi.String("Production"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Association struct {
	pulumi.CustomResourceState

	// By default, when you create a new association, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions.
	ApplyOnlyAtCronInterval pulumi.BoolPtrOutput `pulumi:"applyOnlyAtCronInterval"`
	// Unique identifier of the association.
	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// The name of the association.
	AssociationName pulumi.StringPtrOutput `pulumi:"associationName"`
	// Choose the parameter that will define how your automation will branch out. This target is required for associations that use an Automation runbook and target resources by using rate controls. Automation is a tool in AWS Systems Manager .
	AutomationTargetParameterName pulumi.StringPtrOutput `pulumi:"automationTargetParameterName"`
	// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations only run when that Change Calendar is open. For more information, see [AWS Systems Manager Change Calendar](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar) in the *AWS Systems Manager User Guide* .
	CalendarNames pulumi.StringArrayOutput `pulumi:"calendarNames"`
	// The severity level that is assigned to the association.
	ComplianceSeverity AssociationComplianceSeverityPtrOutput `pulumi:"complianceSeverity"`
	// The version of the SSM document to associate with the target.
	DocumentVersion pulumi.StringPtrOutput `pulumi:"documentVersion"`
	// The ID of the instance that the SSM document is associated with.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.
	//
	// If a new managed node starts and attempts to run an association while Systems Manager is running `MaxConcurrency` associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for `MaxConcurrency` .
	MaxConcurrency pulumi.StringPtrOutput `pulumi:"maxConcurrency"`
	// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set `MaxError` to 10%, then the system stops sending the request when the sixth error is received.
	//
	// Executions that are already running an association when `MaxErrors` is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set `MaxConcurrency` to 1 so that executions proceed one at a time.
	MaxErrors pulumi.StringPtrOutput `pulumi:"maxErrors"`
	// The name of the SSM document.
	Name pulumi.StringOutput `pulumi:"name"`
	// An Amazon Simple Storage Service (Amazon S3) bucket where you want to store the output details of the request.
	OutputLocation AssociationInstanceAssociationOutputLocationPtrOutput `pulumi:"outputLocation"`
	// Parameter values that the SSM document uses at runtime.
	Parameters pulumi.StringArrayMapOutput `pulumi:"parameters"`
	// A Cron or Rate expression that specifies when the association is applied to the target.
	ScheduleExpression pulumi.StringPtrOutput `pulumi:"scheduleExpression"`
	// Number of days to wait after the scheduled day to run an association.
	ScheduleOffset pulumi.IntPtrOutput `pulumi:"scheduleOffset"`
	// The mode for generating association compliance. You can specify `AUTO` or `MANUAL` . In `AUTO` mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is `COMPLIANT` . If the association execution doesn't run successfully, the association is `NON-COMPLIANT` .
	//
	// In `MANUAL` mode, you must specify the `AssociationId` as a parameter for the `PutComplianceItems` API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the `PutComplianceItems` API action.
	//
	// By default, all associations use `AUTO` mode.
	SyncCompliance AssociationSyncCompliancePtrOutput `pulumi:"syncCompliance"`
	// The targets that the SSM document sends commands to.
	Targets AssociationTargetArrayOutput `pulumi:"targets"`
	// The number of seconds the service should wait for the association status to show "Success" before proceeding with the stack execution. If the association status doesn't show "Success" after the specified number of seconds, then stack creation fails.
	//
	// > When you specify a value for the `WaitForSuccessTimeoutSeconds` , [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html) for your AWS CloudFormation stack’s configuration might yield inaccurate results. If drift detection is important in your scenario, we recommend that you don’t include `WaitForSuccessTimeoutSeconds` in your template.
	WaitForSuccessTimeoutSeconds pulumi.IntPtrOutput `pulumi:"waitForSuccessTimeoutSeconds"`
}

// NewAssociation registers a new resource with the given unique name, arguments, and options.
func NewAssociation(ctx *pulumi.Context,
	name string, args *AssociationArgs, opts ...pulumi.ResourceOption) (*Association, error) {
	if args == nil {
		args = &AssociationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Association
	err := ctx.RegisterResource("aws-native:ssm:Association", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssociation gets an existing Association resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssociationState, opts ...pulumi.ResourceOption) (*Association, error) {
	var resource Association
	err := ctx.ReadResource("aws-native:ssm:Association", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Association resources.
type associationState struct {
}

type AssociationState struct {
}

func (AssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*associationState)(nil)).Elem()
}

type associationArgs struct {
	// By default, when you create a new association, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions.
	ApplyOnlyAtCronInterval *bool `pulumi:"applyOnlyAtCronInterval"`
	// The name of the association.
	AssociationName *string `pulumi:"associationName"`
	// Choose the parameter that will define how your automation will branch out. This target is required for associations that use an Automation runbook and target resources by using rate controls. Automation is a tool in AWS Systems Manager .
	AutomationTargetParameterName *string `pulumi:"automationTargetParameterName"`
	// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations only run when that Change Calendar is open. For more information, see [AWS Systems Manager Change Calendar](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar) in the *AWS Systems Manager User Guide* .
	CalendarNames []string `pulumi:"calendarNames"`
	// The severity level that is assigned to the association.
	ComplianceSeverity *AssociationComplianceSeverity `pulumi:"complianceSeverity"`
	// The version of the SSM document to associate with the target.
	DocumentVersion *string `pulumi:"documentVersion"`
	// The ID of the instance that the SSM document is associated with.
	InstanceId *string `pulumi:"instanceId"`
	// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.
	//
	// If a new managed node starts and attempts to run an association while Systems Manager is running `MaxConcurrency` associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for `MaxConcurrency` .
	MaxConcurrency *string `pulumi:"maxConcurrency"`
	// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set `MaxError` to 10%, then the system stops sending the request when the sixth error is received.
	//
	// Executions that are already running an association when `MaxErrors` is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set `MaxConcurrency` to 1 so that executions proceed one at a time.
	MaxErrors *string `pulumi:"maxErrors"`
	// The name of the SSM document.
	Name *string `pulumi:"name"`
	// An Amazon Simple Storage Service (Amazon S3) bucket where you want to store the output details of the request.
	OutputLocation *AssociationInstanceAssociationOutputLocation `pulumi:"outputLocation"`
	// Parameter values that the SSM document uses at runtime.
	Parameters map[string][]string `pulumi:"parameters"`
	// A Cron or Rate expression that specifies when the association is applied to the target.
	ScheduleExpression *string `pulumi:"scheduleExpression"`
	// Number of days to wait after the scheduled day to run an association.
	ScheduleOffset *int `pulumi:"scheduleOffset"`
	// The mode for generating association compliance. You can specify `AUTO` or `MANUAL` . In `AUTO` mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is `COMPLIANT` . If the association execution doesn't run successfully, the association is `NON-COMPLIANT` .
	//
	// In `MANUAL` mode, you must specify the `AssociationId` as a parameter for the `PutComplianceItems` API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the `PutComplianceItems` API action.
	//
	// By default, all associations use `AUTO` mode.
	SyncCompliance *AssociationSyncCompliance `pulumi:"syncCompliance"`
	// The targets that the SSM document sends commands to.
	Targets []AssociationTarget `pulumi:"targets"`
	// The number of seconds the service should wait for the association status to show "Success" before proceeding with the stack execution. If the association status doesn't show "Success" after the specified number of seconds, then stack creation fails.
	//
	// > When you specify a value for the `WaitForSuccessTimeoutSeconds` , [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html) for your AWS CloudFormation stack’s configuration might yield inaccurate results. If drift detection is important in your scenario, we recommend that you don’t include `WaitForSuccessTimeoutSeconds` in your template.
	WaitForSuccessTimeoutSeconds *int `pulumi:"waitForSuccessTimeoutSeconds"`
}

// The set of arguments for constructing a Association resource.
type AssociationArgs struct {
	// By default, when you create a new association, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions.
	ApplyOnlyAtCronInterval pulumi.BoolPtrInput
	// The name of the association.
	AssociationName pulumi.StringPtrInput
	// Choose the parameter that will define how your automation will branch out. This target is required for associations that use an Automation runbook and target resources by using rate controls. Automation is a tool in AWS Systems Manager .
	AutomationTargetParameterName pulumi.StringPtrInput
	// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations only run when that Change Calendar is open. For more information, see [AWS Systems Manager Change Calendar](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar) in the *AWS Systems Manager User Guide* .
	CalendarNames pulumi.StringArrayInput
	// The severity level that is assigned to the association.
	ComplianceSeverity AssociationComplianceSeverityPtrInput
	// The version of the SSM document to associate with the target.
	DocumentVersion pulumi.StringPtrInput
	// The ID of the instance that the SSM document is associated with.
	InstanceId pulumi.StringPtrInput
	// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.
	//
	// If a new managed node starts and attempts to run an association while Systems Manager is running `MaxConcurrency` associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for `MaxConcurrency` .
	MaxConcurrency pulumi.StringPtrInput
	// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set `MaxError` to 10%, then the system stops sending the request when the sixth error is received.
	//
	// Executions that are already running an association when `MaxErrors` is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set `MaxConcurrency` to 1 so that executions proceed one at a time.
	MaxErrors pulumi.StringPtrInput
	// The name of the SSM document.
	Name pulumi.StringPtrInput
	// An Amazon Simple Storage Service (Amazon S3) bucket where you want to store the output details of the request.
	OutputLocation AssociationInstanceAssociationOutputLocationPtrInput
	// Parameter values that the SSM document uses at runtime.
	Parameters pulumi.StringArrayMapInput
	// A Cron or Rate expression that specifies when the association is applied to the target.
	ScheduleExpression pulumi.StringPtrInput
	// Number of days to wait after the scheduled day to run an association.
	ScheduleOffset pulumi.IntPtrInput
	// The mode for generating association compliance. You can specify `AUTO` or `MANUAL` . In `AUTO` mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is `COMPLIANT` . If the association execution doesn't run successfully, the association is `NON-COMPLIANT` .
	//
	// In `MANUAL` mode, you must specify the `AssociationId` as a parameter for the `PutComplianceItems` API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the `PutComplianceItems` API action.
	//
	// By default, all associations use `AUTO` mode.
	SyncCompliance AssociationSyncCompliancePtrInput
	// The targets that the SSM document sends commands to.
	Targets AssociationTargetArrayInput
	// The number of seconds the service should wait for the association status to show "Success" before proceeding with the stack execution. If the association status doesn't show "Success" after the specified number of seconds, then stack creation fails.
	//
	// > When you specify a value for the `WaitForSuccessTimeoutSeconds` , [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html) for your AWS CloudFormation stack’s configuration might yield inaccurate results. If drift detection is important in your scenario, we recommend that you don’t include `WaitForSuccessTimeoutSeconds` in your template.
	WaitForSuccessTimeoutSeconds pulumi.IntPtrInput
}

func (AssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*associationArgs)(nil)).Elem()
}

type AssociationInput interface {
	pulumi.Input

	ToAssociationOutput() AssociationOutput
	ToAssociationOutputWithContext(ctx context.Context) AssociationOutput
}

func (*Association) ElementType() reflect.Type {
	return reflect.TypeOf((**Association)(nil)).Elem()
}

func (i *Association) ToAssociationOutput() AssociationOutput {
	return i.ToAssociationOutputWithContext(context.Background())
}

func (i *Association) ToAssociationOutputWithContext(ctx context.Context) AssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationOutput)
}

type AssociationOutput struct{ *pulumi.OutputState }

func (AssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Association)(nil)).Elem()
}

func (o AssociationOutput) ToAssociationOutput() AssociationOutput {
	return o
}

func (o AssociationOutput) ToAssociationOutputWithContext(ctx context.Context) AssociationOutput {
	return o
}

// By default, when you create a new association, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions.
func (o AssociationOutput) ApplyOnlyAtCronInterval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.BoolPtrOutput { return v.ApplyOnlyAtCronInterval }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the association.
func (o AssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// The name of the association.
func (o AssociationOutput) AssociationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.AssociationName }).(pulumi.StringPtrOutput)
}

// Choose the parameter that will define how your automation will branch out. This target is required for associations that use an Automation runbook and target resources by using rate controls. Automation is a tool in AWS Systems Manager .
func (o AssociationOutput) AutomationTargetParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.AutomationTargetParameterName }).(pulumi.StringPtrOutput)
}

// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations only run when that Change Calendar is open. For more information, see [AWS Systems Manager Change Calendar](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar) in the *AWS Systems Manager User Guide* .
func (o AssociationOutput) CalendarNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Association) pulumi.StringArrayOutput { return v.CalendarNames }).(pulumi.StringArrayOutput)
}

// The severity level that is assigned to the association.
func (o AssociationOutput) ComplianceSeverity() AssociationComplianceSeverityPtrOutput {
	return o.ApplyT(func(v *Association) AssociationComplianceSeverityPtrOutput { return v.ComplianceSeverity }).(AssociationComplianceSeverityPtrOutput)
}

// The version of the SSM document to associate with the target.
func (o AssociationOutput) DocumentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.DocumentVersion }).(pulumi.StringPtrOutput)
}

// The ID of the instance that the SSM document is associated with.
func (o AssociationOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.
//
// If a new managed node starts and attempts to run an association while Systems Manager is running `MaxConcurrency` associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for `MaxConcurrency` .
func (o AssociationOutput) MaxConcurrency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.MaxConcurrency }).(pulumi.StringPtrOutput)
}

// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set `MaxError` to 10%, then the system stops sending the request when the sixth error is received.
//
// Executions that are already running an association when `MaxErrors` is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set `MaxConcurrency` to 1 so that executions proceed one at a time.
func (o AssociationOutput) MaxErrors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.MaxErrors }).(pulumi.StringPtrOutput)
}

// The name of the SSM document.
func (o AssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An Amazon Simple Storage Service (Amazon S3) bucket where you want to store the output details of the request.
func (o AssociationOutput) OutputLocation() AssociationInstanceAssociationOutputLocationPtrOutput {
	return o.ApplyT(func(v *Association) AssociationInstanceAssociationOutputLocationPtrOutput { return v.OutputLocation }).(AssociationInstanceAssociationOutputLocationPtrOutput)
}

// Parameter values that the SSM document uses at runtime.
func (o AssociationOutput) Parameters() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *Association) pulumi.StringArrayMapOutput { return v.Parameters }).(pulumi.StringArrayMapOutput)
}

// A Cron or Rate expression that specifies when the association is applied to the target.
func (o AssociationOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.StringPtrOutput { return v.ScheduleExpression }).(pulumi.StringPtrOutput)
}

// Number of days to wait after the scheduled day to run an association.
func (o AssociationOutput) ScheduleOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.IntPtrOutput { return v.ScheduleOffset }).(pulumi.IntPtrOutput)
}

// The mode for generating association compliance. You can specify `AUTO` or `MANUAL` . In `AUTO` mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is `COMPLIANT` . If the association execution doesn't run successfully, the association is `NON-COMPLIANT` .
//
// In `MANUAL` mode, you must specify the `AssociationId` as a parameter for the `PutComplianceItems` API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the `PutComplianceItems` API action.
//
// By default, all associations use `AUTO` mode.
func (o AssociationOutput) SyncCompliance() AssociationSyncCompliancePtrOutput {
	return o.ApplyT(func(v *Association) AssociationSyncCompliancePtrOutput { return v.SyncCompliance }).(AssociationSyncCompliancePtrOutput)
}

// The targets that the SSM document sends commands to.
func (o AssociationOutput) Targets() AssociationTargetArrayOutput {
	return o.ApplyT(func(v *Association) AssociationTargetArrayOutput { return v.Targets }).(AssociationTargetArrayOutput)
}

// The number of seconds the service should wait for the association status to show "Success" before proceeding with the stack execution. If the association status doesn't show "Success" after the specified number of seconds, then stack creation fails.
//
// > When you specify a value for the `WaitForSuccessTimeoutSeconds` , [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html) for your AWS CloudFormation stack’s configuration might yield inaccurate results. If drift detection is important in your scenario, we recommend that you don’t include `WaitForSuccessTimeoutSeconds` in your template.
func (o AssociationOutput) WaitForSuccessTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Association) pulumi.IntPtrOutput { return v.WaitForSuccessTimeoutSeconds }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssociationInput)(nil)).Elem(), &Association{})
	pulumi.RegisterOutputType(AssociationOutput{})
}
