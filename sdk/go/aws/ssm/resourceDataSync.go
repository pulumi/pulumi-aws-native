// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SSM::ResourceDataSync
type ResourceDataSync struct {
	pulumi.CustomResourceState

	BucketName    pulumi.StringPtrOutput                 `pulumi:"bucketName"`
	BucketPrefix  pulumi.StringPtrOutput                 `pulumi:"bucketPrefix"`
	BucketRegion  pulumi.StringPtrOutput                 `pulumi:"bucketRegion"`
	KMSKeyArn     pulumi.StringPtrOutput                 `pulumi:"kMSKeyArn"`
	S3Destination ResourceDataSyncS3DestinationPtrOutput `pulumi:"s3Destination"`
	SyncFormat    pulumi.StringPtrOutput                 `pulumi:"syncFormat"`
	SyncName      pulumi.StringOutput                    `pulumi:"syncName"`
	SyncSource    ResourceDataSyncSyncSourcePtrOutput    `pulumi:"syncSource"`
	SyncType      pulumi.StringPtrOutput                 `pulumi:"syncType"`
}

// NewResourceDataSync registers a new resource with the given unique name, arguments, and options.
func NewResourceDataSync(ctx *pulumi.Context,
	name string, args *ResourceDataSyncArgs, opts ...pulumi.ResourceOption) (*ResourceDataSync, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SyncName == nil {
		return nil, errors.New("invalid value for required argument 'SyncName'")
	}
	var resource ResourceDataSync
	err := ctx.RegisterResource("aws-native:ssm:ResourceDataSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDataSync gets an existing ResourceDataSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDataSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDataSyncState, opts ...pulumi.ResourceOption) (*ResourceDataSync, error) {
	var resource ResourceDataSync
	err := ctx.ReadResource("aws-native:ssm:ResourceDataSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDataSync resources.
type resourceDataSyncState struct {
}

type ResourceDataSyncState struct {
}

func (ResourceDataSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDataSyncState)(nil)).Elem()
}

type resourceDataSyncArgs struct {
	BucketName    *string                        `pulumi:"bucketName"`
	BucketPrefix  *string                        `pulumi:"bucketPrefix"`
	BucketRegion  *string                        `pulumi:"bucketRegion"`
	KMSKeyArn     *string                        `pulumi:"kMSKeyArn"`
	S3Destination *ResourceDataSyncS3Destination `pulumi:"s3Destination"`
	SyncFormat    *string                        `pulumi:"syncFormat"`
	SyncName      string                         `pulumi:"syncName"`
	SyncSource    *ResourceDataSyncSyncSource    `pulumi:"syncSource"`
	SyncType      *string                        `pulumi:"syncType"`
}

// The set of arguments for constructing a ResourceDataSync resource.
type ResourceDataSyncArgs struct {
	BucketName    pulumi.StringPtrInput
	BucketPrefix  pulumi.StringPtrInput
	BucketRegion  pulumi.StringPtrInput
	KMSKeyArn     pulumi.StringPtrInput
	S3Destination ResourceDataSyncS3DestinationPtrInput
	SyncFormat    pulumi.StringPtrInput
	SyncName      pulumi.StringInput
	SyncSource    ResourceDataSyncSyncSourcePtrInput
	SyncType      pulumi.StringPtrInput
}

func (ResourceDataSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDataSyncArgs)(nil)).Elem()
}

type ResourceDataSyncInput interface {
	pulumi.Input

	ToResourceDataSyncOutput() ResourceDataSyncOutput
	ToResourceDataSyncOutputWithContext(ctx context.Context) ResourceDataSyncOutput
}

func (*ResourceDataSync) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDataSync)(nil)).Elem()
}

func (i *ResourceDataSync) ToResourceDataSyncOutput() ResourceDataSyncOutput {
	return i.ToResourceDataSyncOutputWithContext(context.Background())
}

func (i *ResourceDataSync) ToResourceDataSyncOutputWithContext(ctx context.Context) ResourceDataSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDataSyncOutput)
}

type ResourceDataSyncOutput struct{ *pulumi.OutputState }

func (ResourceDataSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDataSync)(nil)).Elem()
}

func (o ResourceDataSyncOutput) ToResourceDataSyncOutput() ResourceDataSyncOutput {
	return o
}

func (o ResourceDataSyncOutput) ToResourceDataSyncOutputWithContext(ctx context.Context) ResourceDataSyncOutput {
	return o
}

func (o ResourceDataSyncOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o ResourceDataSyncOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

func (o ResourceDataSyncOutput) BucketRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.BucketRegion }).(pulumi.StringPtrOutput)
}

func (o ResourceDataSyncOutput) KMSKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.KMSKeyArn }).(pulumi.StringPtrOutput)
}

func (o ResourceDataSyncOutput) S3Destination() ResourceDataSyncS3DestinationPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) ResourceDataSyncS3DestinationPtrOutput { return v.S3Destination }).(ResourceDataSyncS3DestinationPtrOutput)
}

func (o ResourceDataSyncOutput) SyncFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.SyncFormat }).(pulumi.StringPtrOutput)
}

func (o ResourceDataSyncOutput) SyncName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringOutput { return v.SyncName }).(pulumi.StringOutput)
}

func (o ResourceDataSyncOutput) SyncSource() ResourceDataSyncSyncSourcePtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) ResourceDataSyncSyncSourcePtrOutput { return v.SyncSource }).(ResourceDataSyncSyncSourcePtrOutput)
}

func (o ResourceDataSyncOutput) SyncType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.SyncType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDataSyncInput)(nil)).Elem(), &ResourceDataSync{})
	pulumi.RegisterOutputType(ResourceDataSyncOutput{})
}
