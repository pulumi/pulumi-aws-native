// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SSM::ResourceDataSync
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncToDestination"),
//				S3Destination: &ssm.ResourceDataSyncS3DestinationArgs{
//					BucketName:   pulumi.String("test-bucket"),
//					BucketRegion: pulumi.String("us-east-2"),
//					SyncFormat:   pulumi.String("JsonSerDe"),
//					BucketPrefix: pulumi.String("cfn"),
//					KmsKeyArn:    pulumi.String("kmsKeyARN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncToDestination"),
//				S3Destination: &ssm.ResourceDataSyncS3DestinationArgs{
//					BucketName:   pulumi.String("test-bucket"),
//					BucketRegion: pulumi.String("us-east-2"),
//					SyncFormat:   pulumi.String("JsonSerDe"),
//					BucketPrefix: pulumi.String("cfn"),
//					KmsKeyArn:    pulumi.String("kmsKeyARN"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncFromSource"),
//				SyncSource: &ssm.ResourceDataSyncSyncSourceArgs{
//					SourceType: pulumi.String("SingleAccountMultiRegions"),
//					SourceRegions: pulumi.StringArray{
//						pulumi.String("us-east-1"),
//						pulumi.String("us-west-1"),
//						pulumi.String("us-west-2"),
//					},
//					IncludeFutureRegions: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncFromSource"),
//				SyncSource: &ssm.ResourceDataSyncSyncSourceArgs{
//					SourceType: pulumi.String("SingleAccountMultiRegions"),
//					SourceRegions: pulumi.StringArray{
//						pulumi.String("us-east-1"),
//						pulumi.String("us-west-1"),
//						pulumi.String("us-west-2"),
//					},
//					IncludeFutureRegions: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncFromSource"),
//				SyncSource: &ssm.ResourceDataSyncSyncSourceArgs{
//					SourceType: pulumi.String("AwsOrganizations"),
//					AwsOrganizationsSource: &ssm.ResourceDataSyncAwsOrganizationsSourceArgs{
//						OrganizationSourceType: pulumi.String("EntireOrganization"),
//					},
//					SourceRegions: pulumi.StringArray{
//						pulumi.String("us-west-1"),
//					},
//					IncludeFutureRegions: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncFromSource"),
//				SyncSource: &ssm.ResourceDataSyncSyncSourceArgs{
//					SourceType: pulumi.String("AwsOrganizations"),
//					AwsOrganizationsSource: &ssm.ResourceDataSyncAwsOrganizationsSourceArgs{
//						OrganizationSourceType: pulumi.String("EntireOrganization"),
//					},
//					SourceRegions: pulumi.StringArray{
//						pulumi.String("us-west-1"),
//					},
//					IncludeFutureRegions: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncFromSource"),
//				SyncSource: &ssm.ResourceDataSyncSyncSourceArgs{
//					SourceType: pulumi.String("AwsOrganizations"),
//					AwsOrganizationsSource: &ssm.ResourceDataSyncAwsOrganizationsSourceArgs{
//						OrganizationSourceType: pulumi.String("OrganizationalUnits"),
//						OrganizationalUnits: pulumi.StringArray{
//							pulumi.String("ou-12345"),
//						},
//					},
//					SourceRegions: pulumi.StringArray{
//						pulumi.String("us-west-1"),
//					},
//					IncludeFutureRegions: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssm.NewResourceDataSync(ctx, "basicResourceDataSync", &ssm.ResourceDataSyncArgs{
//				SyncName: pulumi.String("test-sync"),
//				SyncType: pulumi.String("SyncFromSource"),
//				SyncSource: &ssm.ResourceDataSyncSyncSourceArgs{
//					SourceType: pulumi.String("AwsOrganizations"),
//					AwsOrganizationsSource: &ssm.ResourceDataSyncAwsOrganizationsSourceArgs{
//						OrganizationSourceType: pulumi.String("OrganizationalUnits"),
//						OrganizationalUnits: pulumi.StringArray{
//							pulumi.String("ou-12345"),
//						},
//					},
//					SourceRegions: pulumi.StringArray{
//						pulumi.String("us-west-1"),
//					},
//					IncludeFutureRegions: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ResourceDataSync struct {
	pulumi.CustomResourceState

	// The name of the S3 bucket where the aggregated data is stored.
	BucketName pulumi.StringPtrOutput `pulumi:"bucketName"`
	// An Amazon S3 prefix for the bucket.
	BucketPrefix pulumi.StringPtrOutput `pulumi:"bucketPrefix"`
	// The AWS Region with the S3 bucket targeted by the resource data sync.
	BucketRegion pulumi.StringPtrOutput `pulumi:"bucketRegion"`
	// The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// Configuration information for the target S3 bucket.
	S3Destination ResourceDataSyncS3DestinationPtrOutput `pulumi:"s3Destination"`
	// A supported sync format. The following format is currently supported: JsonSerDe
	SyncFormat pulumi.StringPtrOutput `pulumi:"syncFormat"`
	// A name for the resource data sync.
	SyncName pulumi.StringOutput `pulumi:"syncName"`
	// Information about the source where the data was synchronized.
	SyncSource ResourceDataSyncSyncSourcePtrOutput `pulumi:"syncSource"`
	// The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
	SyncType pulumi.StringPtrOutput `pulumi:"syncType"`
}

// NewResourceDataSync registers a new resource with the given unique name, arguments, and options.
func NewResourceDataSync(ctx *pulumi.Context,
	name string, args *ResourceDataSyncArgs, opts ...pulumi.ResourceOption) (*ResourceDataSync, error) {
	if args == nil {
		args = &ResourceDataSyncArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"bucketName",
		"bucketPrefix",
		"bucketRegion",
		"kmsKeyArn",
		"s3Destination",
		"syncFormat",
		"syncName",
		"syncType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceDataSync
	err := ctx.RegisterResource("aws-native:ssm:ResourceDataSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDataSync gets an existing ResourceDataSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDataSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDataSyncState, opts ...pulumi.ResourceOption) (*ResourceDataSync, error) {
	var resource ResourceDataSync
	err := ctx.ReadResource("aws-native:ssm:ResourceDataSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDataSync resources.
type resourceDataSyncState struct {
}

type ResourceDataSyncState struct {
}

func (ResourceDataSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDataSyncState)(nil)).Elem()
}

type resourceDataSyncArgs struct {
	// The name of the S3 bucket where the aggregated data is stored.
	BucketName *string `pulumi:"bucketName"`
	// An Amazon S3 prefix for the bucket.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// The AWS Region with the S3 bucket targeted by the resource data sync.
	BucketRegion *string `pulumi:"bucketRegion"`
	// The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Configuration information for the target S3 bucket.
	S3Destination *ResourceDataSyncS3Destination `pulumi:"s3Destination"`
	// A supported sync format. The following format is currently supported: JsonSerDe
	SyncFormat *string `pulumi:"syncFormat"`
	// A name for the resource data sync.
	SyncName *string `pulumi:"syncName"`
	// Information about the source where the data was synchronized.
	SyncSource *ResourceDataSyncSyncSource `pulumi:"syncSource"`
	// The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
	SyncType *string `pulumi:"syncType"`
}

// The set of arguments for constructing a ResourceDataSync resource.
type ResourceDataSyncArgs struct {
	// The name of the S3 bucket where the aggregated data is stored.
	BucketName pulumi.StringPtrInput
	// An Amazon S3 prefix for the bucket.
	BucketPrefix pulumi.StringPtrInput
	// The AWS Region with the S3 bucket targeted by the resource data sync.
	BucketRegion pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
	KmsKeyArn pulumi.StringPtrInput
	// Configuration information for the target S3 bucket.
	S3Destination ResourceDataSyncS3DestinationPtrInput
	// A supported sync format. The following format is currently supported: JsonSerDe
	SyncFormat pulumi.StringPtrInput
	// A name for the resource data sync.
	SyncName pulumi.StringPtrInput
	// Information about the source where the data was synchronized.
	SyncSource ResourceDataSyncSyncSourcePtrInput
	// The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
	SyncType pulumi.StringPtrInput
}

func (ResourceDataSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDataSyncArgs)(nil)).Elem()
}

type ResourceDataSyncInput interface {
	pulumi.Input

	ToResourceDataSyncOutput() ResourceDataSyncOutput
	ToResourceDataSyncOutputWithContext(ctx context.Context) ResourceDataSyncOutput
}

func (*ResourceDataSync) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDataSync)(nil)).Elem()
}

func (i *ResourceDataSync) ToResourceDataSyncOutput() ResourceDataSyncOutput {
	return i.ToResourceDataSyncOutputWithContext(context.Background())
}

func (i *ResourceDataSync) ToResourceDataSyncOutputWithContext(ctx context.Context) ResourceDataSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDataSyncOutput)
}

type ResourceDataSyncOutput struct{ *pulumi.OutputState }

func (ResourceDataSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDataSync)(nil)).Elem()
}

func (o ResourceDataSyncOutput) ToResourceDataSyncOutput() ResourceDataSyncOutput {
	return o
}

func (o ResourceDataSyncOutput) ToResourceDataSyncOutputWithContext(ctx context.Context) ResourceDataSyncOutput {
	return o
}

// The name of the S3 bucket where the aggregated data is stored.
func (o ResourceDataSyncOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

// An Amazon S3 prefix for the bucket.
func (o ResourceDataSyncOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// The AWS Region with the S3 bucket targeted by the resource data sync.
func (o ResourceDataSyncOutput) BucketRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.BucketRegion }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
func (o ResourceDataSyncOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// Configuration information for the target S3 bucket.
func (o ResourceDataSyncOutput) S3Destination() ResourceDataSyncS3DestinationPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) ResourceDataSyncS3DestinationPtrOutput { return v.S3Destination }).(ResourceDataSyncS3DestinationPtrOutput)
}

// A supported sync format. The following format is currently supported: JsonSerDe
func (o ResourceDataSyncOutput) SyncFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.SyncFormat }).(pulumi.StringPtrOutput)
}

// A name for the resource data sync.
func (o ResourceDataSyncOutput) SyncName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringOutput { return v.SyncName }).(pulumi.StringOutput)
}

// Information about the source where the data was synchronized.
func (o ResourceDataSyncOutput) SyncSource() ResourceDataSyncSyncSourcePtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) ResourceDataSyncSyncSourcePtrOutput { return v.SyncSource }).(ResourceDataSyncSyncSourcePtrOutput)
}

// The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
func (o ResourceDataSyncOutput) SyncType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDataSync) pulumi.StringPtrOutput { return v.SyncType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDataSyncInput)(nil)).Elem(), &ResourceDataSync{})
	pulumi.RegisterOutputType(ResourceDataSyncOutput{})
}
