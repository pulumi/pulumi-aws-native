// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3tables

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::S3Tables::TablePolicy
type TablePolicy struct {
	pulumi.CustomResourceState

	// The namespace to associated with the table.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The `JSON` that defines the policy.
	ResourcePolicy TablePolicyResourcePolicyOutput `pulumi:"resourcePolicy"`
	// The Amazon Resource Name (ARN) of the table.
	TableArn pulumi.StringOutput `pulumi:"tableArn"`
	// The Amazon Resource Name (ARN) of the table bucket that contains the table.
	TableBucketArn pulumi.StringOutput `pulumi:"tableBucketArn"`
	// The name of the table.
	TableName pulumi.StringOutput `pulumi:"tableName"`
}

// NewTablePolicy registers a new resource with the given unique name, arguments, and options.
func NewTablePolicy(ctx *pulumi.Context,
	name string, args *TablePolicyArgs, opts ...pulumi.ResourceOption) (*TablePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourcePolicy == nil {
		return nil, errors.New("invalid value for required argument 'ResourcePolicy'")
	}
	if args.TableArn == nil {
		return nil, errors.New("invalid value for required argument 'TableArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"tableArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TablePolicy
	err := ctx.RegisterResource("aws-native:s3tables:TablePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTablePolicy gets an existing TablePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTablePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TablePolicyState, opts ...pulumi.ResourceOption) (*TablePolicy, error) {
	var resource TablePolicy
	err := ctx.ReadResource("aws-native:s3tables:TablePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TablePolicy resources.
type tablePolicyState struct {
}

type TablePolicyState struct {
}

func (TablePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tablePolicyState)(nil)).Elem()
}

type tablePolicyArgs struct {
	// The `JSON` that defines the policy.
	ResourcePolicy TablePolicyResourcePolicy `pulumi:"resourcePolicy"`
	// The Amazon Resource Name (ARN) of the table.
	TableArn string `pulumi:"tableArn"`
}

// The set of arguments for constructing a TablePolicy resource.
type TablePolicyArgs struct {
	// The `JSON` that defines the policy.
	ResourcePolicy TablePolicyResourcePolicyInput
	// The Amazon Resource Name (ARN) of the table.
	TableArn pulumi.StringInput
}

func (TablePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tablePolicyArgs)(nil)).Elem()
}

type TablePolicyInput interface {
	pulumi.Input

	ToTablePolicyOutput() TablePolicyOutput
	ToTablePolicyOutputWithContext(ctx context.Context) TablePolicyOutput
}

func (*TablePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePolicy)(nil)).Elem()
}

func (i *TablePolicy) ToTablePolicyOutput() TablePolicyOutput {
	return i.ToTablePolicyOutputWithContext(context.Background())
}

func (i *TablePolicy) ToTablePolicyOutputWithContext(ctx context.Context) TablePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePolicyOutput)
}

type TablePolicyOutput struct{ *pulumi.OutputState }

func (TablePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePolicy)(nil)).Elem()
}

func (o TablePolicyOutput) ToTablePolicyOutput() TablePolicyOutput {
	return o
}

func (o TablePolicyOutput) ToTablePolicyOutputWithContext(ctx context.Context) TablePolicyOutput {
	return o
}

// The namespace to associated with the table.
func (o TablePolicyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The `JSON` that defines the policy.
func (o TablePolicyOutput) ResourcePolicy() TablePolicyResourcePolicyOutput {
	return o.ApplyT(func(v *TablePolicy) TablePolicyResourcePolicyOutput { return v.ResourcePolicy }).(TablePolicyResourcePolicyOutput)
}

// The Amazon Resource Name (ARN) of the table.
func (o TablePolicyOutput) TableArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.TableArn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the table bucket that contains the table.
func (o TablePolicyOutput) TableBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.TableBucketArn }).(pulumi.StringOutput)
}

// The name of the table.
func (o TablePolicyOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *TablePolicy) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TablePolicyInput)(nil)).Elem(), &TablePolicy{})
	pulumi.RegisterOutputType(TablePolicyOutput{})
}
