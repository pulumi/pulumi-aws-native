// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3tables

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::S3Tables::Table
type Table struct {
	pulumi.CustomResourceState

	// Contains details about the compaction settings for an Iceberg table.
	Compaction TableCompactionPtrOutput `pulumi:"compaction"`
	// Contains details about the metadata for an Iceberg table.
	IcebergMetadata TableIcebergMetadataPtrOutput `pulumi:"icebergMetadata"`
	// The name of the namespace.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The format of the table.
	OpenTableFormat TableOpenTableFormatOutput `pulumi:"openTableFormat"`
	// Contains details about the Iceberg snapshot management settings for the table.
	SnapshotManagement TableSnapshotManagementPtrOutput `pulumi:"snapshotManagement"`
	// The Amazon Resource Name (ARN) of the table.
	TableArn pulumi.StringOutput `pulumi:"tableArn"`
	// The Amazon Resource Name (ARN) of the table bucket to create the table in.
	TableBucketArn pulumi.StringOutput `pulumi:"tableBucketArn"`
	// The name for the table.
	TableName pulumi.StringOutput `pulumi:"tableName"`
	// The version token of the table.
	VersionToken pulumi.StringOutput `pulumi:"versionToken"`
	// The warehouse location of the table.
	WarehouseLocation pulumi.StringOutput `pulumi:"warehouseLocation"`
	// Indicates that you don't want to specify a schema for the table. This property is mutually exclusive to `IcebergMetadata` , and its only possible value is `Yes` .
	WithoutMetadata TableWithoutMetadataPtrOutput `pulumi:"withoutMetadata"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.OpenTableFormat == nil {
		return nil, errors.New("invalid value for required argument 'OpenTableFormat'")
	}
	if args.TableBucketArn == nil {
		return nil, errors.New("invalid value for required argument 'TableBucketArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"icebergMetadata",
		"openTableFormat",
		"tableBucketArn",
		"withoutMetadata",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("aws-native:s3tables:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("aws-native:s3tables:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
}

type TableState struct {
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Contains details about the compaction settings for an Iceberg table.
	Compaction *TableCompaction `pulumi:"compaction"`
	// Contains details about the metadata for an Iceberg table.
	IcebergMetadata *TableIcebergMetadata `pulumi:"icebergMetadata"`
	// The name of the namespace.
	Namespace string `pulumi:"namespace"`
	// The format of the table.
	OpenTableFormat TableOpenTableFormat `pulumi:"openTableFormat"`
	// Contains details about the Iceberg snapshot management settings for the table.
	SnapshotManagement *TableSnapshotManagement `pulumi:"snapshotManagement"`
	// The Amazon Resource Name (ARN) of the table bucket to create the table in.
	TableBucketArn string `pulumi:"tableBucketArn"`
	// The name for the table.
	TableName *string `pulumi:"tableName"`
	// Indicates that you don't want to specify a schema for the table. This property is mutually exclusive to `IcebergMetadata` , and its only possible value is `Yes` .
	WithoutMetadata *TableWithoutMetadata `pulumi:"withoutMetadata"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Contains details about the compaction settings for an Iceberg table.
	Compaction TableCompactionPtrInput
	// Contains details about the metadata for an Iceberg table.
	IcebergMetadata TableIcebergMetadataPtrInput
	// The name of the namespace.
	Namespace pulumi.StringInput
	// The format of the table.
	OpenTableFormat TableOpenTableFormatInput
	// Contains details about the Iceberg snapshot management settings for the table.
	SnapshotManagement TableSnapshotManagementPtrInput
	// The Amazon Resource Name (ARN) of the table bucket to create the table in.
	TableBucketArn pulumi.StringInput
	// The name for the table.
	TableName pulumi.StringPtrInput
	// Indicates that you don't want to specify a schema for the table. This property is mutually exclusive to `IcebergMetadata` , and its only possible value is `Yes` .
	WithoutMetadata TableWithoutMetadataPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// Contains details about the compaction settings for an Iceberg table.
func (o TableOutput) Compaction() TableCompactionPtrOutput {
	return o.ApplyT(func(v *Table) TableCompactionPtrOutput { return v.Compaction }).(TableCompactionPtrOutput)
}

// Contains details about the metadata for an Iceberg table.
func (o TableOutput) IcebergMetadata() TableIcebergMetadataPtrOutput {
	return o.ApplyT(func(v *Table) TableIcebergMetadataPtrOutput { return v.IcebergMetadata }).(TableIcebergMetadataPtrOutput)
}

// The name of the namespace.
func (o TableOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The format of the table.
func (o TableOutput) OpenTableFormat() TableOpenTableFormatOutput {
	return o.ApplyT(func(v *Table) TableOpenTableFormatOutput { return v.OpenTableFormat }).(TableOpenTableFormatOutput)
}

// Contains details about the Iceberg snapshot management settings for the table.
func (o TableOutput) SnapshotManagement() TableSnapshotManagementPtrOutput {
	return o.ApplyT(func(v *Table) TableSnapshotManagementPtrOutput { return v.SnapshotManagement }).(TableSnapshotManagementPtrOutput)
}

// The Amazon Resource Name (ARN) of the table.
func (o TableOutput) TableArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TableArn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the table bucket to create the table in.
func (o TableOutput) TableBucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TableBucketArn }).(pulumi.StringOutput)
}

// The name for the table.
func (o TableOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

// The version token of the table.
func (o TableOutput) VersionToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.VersionToken }).(pulumi.StringOutput)
}

// The warehouse location of the table.
func (o TableOutput) WarehouseLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.WarehouseLocation }).(pulumi.StringOutput)
}

// Indicates that you don't want to specify a schema for the table. This property is mutually exclusive to `IcebergMetadata` , and its only possible value is `Yes` .
func (o TableOutput) WithoutMetadata() TableWithoutMetadataPtrOutput {
	return o.ApplyT(func(v *Table) TableWithoutMetadataPtrOutput { return v.WithoutMetadata }).(TableWithoutMetadataPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterOutputType(TableOutput{})
}
