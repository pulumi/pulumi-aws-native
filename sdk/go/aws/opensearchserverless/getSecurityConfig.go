// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearchserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Amazon OpenSearchServerless security config resource
func LookupSecurityConfig(ctx *pulumi.Context, args *LookupSecurityConfigArgs, opts ...pulumi.InvokeOption) (*LookupSecurityConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecurityConfigResult
	err := ctx.Invoke("aws-native:opensearchserverless:getSecurityConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSecurityConfigArgs struct {
	// The identifier of the security config
	Id string `pulumi:"id"`
}

type LookupSecurityConfigResult struct {
	// Security config description
	Description              *string                                       `pulumi:"description"`
	IamIdentityCenterOptions *SecurityConfigIamIdentityCenterConfigOptions `pulumi:"iamIdentityCenterOptions"`
	// The identifier of the security config
	Id *string `pulumi:"id"`
	// SAML options for the security configuration in the form of a key-value map.
	SamlOptions *SecurityConfigSamlConfigOptions `pulumi:"samlOptions"`
}

func LookupSecurityConfigOutput(ctx *pulumi.Context, args LookupSecurityConfigOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSecurityConfigResultOutput, error) {
			args := v.(LookupSecurityConfigArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSecurityConfigResult
			secret, err := ctx.InvokePackageRaw("aws-native:opensearchserverless:getSecurityConfig", args, &rv, "", opts...)
			if err != nil {
				return LookupSecurityConfigResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSecurityConfigResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSecurityConfigResultOutput), nil
			}
			return output, nil
		}).(LookupSecurityConfigResultOutput)
}

type LookupSecurityConfigOutputArgs struct {
	// The identifier of the security config
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupSecurityConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityConfigArgs)(nil)).Elem()
}

type LookupSecurityConfigResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityConfigResult)(nil)).Elem()
}

func (o LookupSecurityConfigResultOutput) ToLookupSecurityConfigResultOutput() LookupSecurityConfigResultOutput {
	return o
}

func (o LookupSecurityConfigResultOutput) ToLookupSecurityConfigResultOutputWithContext(ctx context.Context) LookupSecurityConfigResultOutput {
	return o
}

// Security config description
func (o LookupSecurityConfigResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityConfigResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupSecurityConfigResultOutput) IamIdentityCenterOptions() SecurityConfigIamIdentityCenterConfigOptionsPtrOutput {
	return o.ApplyT(func(v LookupSecurityConfigResult) *SecurityConfigIamIdentityCenterConfigOptions {
		return v.IamIdentityCenterOptions
	}).(SecurityConfigIamIdentityCenterConfigOptionsPtrOutput)
}

// The identifier of the security config
func (o LookupSecurityConfigResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecurityConfigResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// SAML options for the security configuration in the form of a key-value map.
func (o LookupSecurityConfigResultOutput) SamlOptions() SecurityConfigSamlConfigOptionsPtrOutput {
	return o.ApplyT(func(v LookupSecurityConfigResult) *SecurityConfigSamlConfigOptions { return v.SamlOptions }).(SecurityConfigSamlConfigOptionsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecurityConfigResultOutput{})
}
