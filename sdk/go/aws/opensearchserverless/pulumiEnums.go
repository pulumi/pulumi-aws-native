// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearchserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The possible types for the access policy
type AccessPolicyType string

const (
	AccessPolicyTypeData = AccessPolicyType("data")
)

func (AccessPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPolicyType)(nil)).Elem()
}

func (e AccessPolicyType) ToAccessPolicyTypeOutput() AccessPolicyTypeOutput {
	return pulumi.ToOutput(e).(AccessPolicyTypeOutput)
}

func (e AccessPolicyType) ToAccessPolicyTypeOutputWithContext(ctx context.Context) AccessPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccessPolicyTypeOutput)
}

func (e AccessPolicyType) ToAccessPolicyTypePtrOutput() AccessPolicyTypePtrOutput {
	return e.ToAccessPolicyTypePtrOutputWithContext(context.Background())
}

func (e AccessPolicyType) ToAccessPolicyTypePtrOutputWithContext(ctx context.Context) AccessPolicyTypePtrOutput {
	return AccessPolicyType(e).ToAccessPolicyTypeOutputWithContext(ctx).ToAccessPolicyTypePtrOutputWithContext(ctx)
}

func (e AccessPolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessPolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccessPolicyTypeOutput struct{ *pulumi.OutputState }

func (AccessPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPolicyType)(nil)).Elem()
}

func (o AccessPolicyTypeOutput) ToAccessPolicyTypeOutput() AccessPolicyTypeOutput {
	return o
}

func (o AccessPolicyTypeOutput) ToAccessPolicyTypeOutputWithContext(ctx context.Context) AccessPolicyTypeOutput {
	return o
}

func (o AccessPolicyTypeOutput) ToAccessPolicyTypePtrOutput() AccessPolicyTypePtrOutput {
	return o.ToAccessPolicyTypePtrOutputWithContext(context.Background())
}

func (o AccessPolicyTypeOutput) ToAccessPolicyTypePtrOutputWithContext(ctx context.Context) AccessPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPolicyType) *AccessPolicyType {
		return &v
	}).(AccessPolicyTypePtrOutput)
}

func (o AccessPolicyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AccessPolicyType] {
	return pulumix.Output[AccessPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccessPolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccessPolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccessPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (AccessPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyType)(nil)).Elem()
}

func (o AccessPolicyTypePtrOutput) ToAccessPolicyTypePtrOutput() AccessPolicyTypePtrOutput {
	return o
}

func (o AccessPolicyTypePtrOutput) ToAccessPolicyTypePtrOutputWithContext(ctx context.Context) AccessPolicyTypePtrOutput {
	return o
}

func (o AccessPolicyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccessPolicyType] {
	return pulumix.Output[*AccessPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o AccessPolicyTypePtrOutput) Elem() AccessPolicyTypeOutput {
	return o.ApplyT(func(v *AccessPolicyType) AccessPolicyType {
		if v != nil {
			return *v
		}
		var ret AccessPolicyType
		return ret
	}).(AccessPolicyTypeOutput)
}

func (o AccessPolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccessPolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccessPolicyTypeInput is an input type that accepts AccessPolicyTypeArgs and AccessPolicyTypeOutput values.
// You can construct a concrete instance of `AccessPolicyTypeInput` via:
//
//	AccessPolicyTypeArgs{...}
type AccessPolicyTypeInput interface {
	pulumi.Input

	ToAccessPolicyTypeOutput() AccessPolicyTypeOutput
	ToAccessPolicyTypeOutputWithContext(context.Context) AccessPolicyTypeOutput
}

var accessPolicyTypePtrType = reflect.TypeOf((**AccessPolicyType)(nil)).Elem()

type AccessPolicyTypePtrInput interface {
	pulumi.Input

	ToAccessPolicyTypePtrOutput() AccessPolicyTypePtrOutput
	ToAccessPolicyTypePtrOutputWithContext(context.Context) AccessPolicyTypePtrOutput
}

type accessPolicyTypePtr string

func AccessPolicyTypePtr(v string) AccessPolicyTypePtrInput {
	return (*accessPolicyTypePtr)(&v)
}

func (*accessPolicyTypePtr) ElementType() reflect.Type {
	return accessPolicyTypePtrType
}

func (in *accessPolicyTypePtr) ToAccessPolicyTypePtrOutput() AccessPolicyTypePtrOutput {
	return pulumi.ToOutput(in).(AccessPolicyTypePtrOutput)
}

func (in *accessPolicyTypePtr) ToAccessPolicyTypePtrOutputWithContext(ctx context.Context) AccessPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccessPolicyTypePtrOutput)
}

func (in *accessPolicyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AccessPolicyType] {
	return pulumix.Output[*AccessPolicyType]{
		OutputState: in.ToAccessPolicyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The possible types for the collection
type CollectionType string

const (
	CollectionTypeSearch       = CollectionType("SEARCH")
	CollectionTypeTimeseries   = CollectionType("TIMESERIES")
	CollectionTypeVectorsearch = CollectionType("VECTORSEARCH")
)

func (CollectionType) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectionType)(nil)).Elem()
}

func (e CollectionType) ToCollectionTypeOutput() CollectionTypeOutput {
	return pulumi.ToOutput(e).(CollectionTypeOutput)
}

func (e CollectionType) ToCollectionTypeOutputWithContext(ctx context.Context) CollectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CollectionTypeOutput)
}

func (e CollectionType) ToCollectionTypePtrOutput() CollectionTypePtrOutput {
	return e.ToCollectionTypePtrOutputWithContext(context.Background())
}

func (e CollectionType) ToCollectionTypePtrOutputWithContext(ctx context.Context) CollectionTypePtrOutput {
	return CollectionType(e).ToCollectionTypeOutputWithContext(ctx).ToCollectionTypePtrOutputWithContext(ctx)
}

func (e CollectionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CollectionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CollectionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CollectionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CollectionTypeOutput struct{ *pulumi.OutputState }

func (CollectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectionType)(nil)).Elem()
}

func (o CollectionTypeOutput) ToCollectionTypeOutput() CollectionTypeOutput {
	return o
}

func (o CollectionTypeOutput) ToCollectionTypeOutputWithContext(ctx context.Context) CollectionTypeOutput {
	return o
}

func (o CollectionTypeOutput) ToCollectionTypePtrOutput() CollectionTypePtrOutput {
	return o.ToCollectionTypePtrOutputWithContext(context.Background())
}

func (o CollectionTypeOutput) ToCollectionTypePtrOutputWithContext(ctx context.Context) CollectionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CollectionType) *CollectionType {
		return &v
	}).(CollectionTypePtrOutput)
}

func (o CollectionTypeOutput) ToOutput(ctx context.Context) pulumix.Output[CollectionType] {
	return pulumix.Output[CollectionType]{
		OutputState: o.OutputState,
	}
}

func (o CollectionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CollectionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CollectionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CollectionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CollectionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CollectionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CollectionTypePtrOutput struct{ *pulumi.OutputState }

func (CollectionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectionType)(nil)).Elem()
}

func (o CollectionTypePtrOutput) ToCollectionTypePtrOutput() CollectionTypePtrOutput {
	return o
}

func (o CollectionTypePtrOutput) ToCollectionTypePtrOutputWithContext(ctx context.Context) CollectionTypePtrOutput {
	return o
}

func (o CollectionTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CollectionType] {
	return pulumix.Output[*CollectionType]{
		OutputState: o.OutputState,
	}
}

func (o CollectionTypePtrOutput) Elem() CollectionTypeOutput {
	return o.ApplyT(func(v *CollectionType) CollectionType {
		if v != nil {
			return *v
		}
		var ret CollectionType
		return ret
	}).(CollectionTypeOutput)
}

func (o CollectionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CollectionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CollectionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CollectionTypeInput is an input type that accepts CollectionTypeArgs and CollectionTypeOutput values.
// You can construct a concrete instance of `CollectionTypeInput` via:
//
//	CollectionTypeArgs{...}
type CollectionTypeInput interface {
	pulumi.Input

	ToCollectionTypeOutput() CollectionTypeOutput
	ToCollectionTypeOutputWithContext(context.Context) CollectionTypeOutput
}

var collectionTypePtrType = reflect.TypeOf((**CollectionType)(nil)).Elem()

type CollectionTypePtrInput interface {
	pulumi.Input

	ToCollectionTypePtrOutput() CollectionTypePtrOutput
	ToCollectionTypePtrOutputWithContext(context.Context) CollectionTypePtrOutput
}

type collectionTypePtr string

func CollectionTypePtr(v string) CollectionTypePtrInput {
	return (*collectionTypePtr)(&v)
}

func (*collectionTypePtr) ElementType() reflect.Type {
	return collectionTypePtrType
}

func (in *collectionTypePtr) ToCollectionTypePtrOutput() CollectionTypePtrOutput {
	return pulumi.ToOutput(in).(CollectionTypePtrOutput)
}

func (in *collectionTypePtr) ToCollectionTypePtrOutputWithContext(ctx context.Context) CollectionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CollectionTypePtrOutput)
}

func (in *collectionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CollectionType] {
	return pulumix.Output[*CollectionType]{
		OutputState: in.ToCollectionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of lifecycle policy
type LifecyclePolicyType string

const (
	LifecyclePolicyTypeRetention = LifecyclePolicyType("retention")
)

func (LifecyclePolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyType)(nil)).Elem()
}

func (e LifecyclePolicyType) ToLifecyclePolicyTypeOutput() LifecyclePolicyTypeOutput {
	return pulumi.ToOutput(e).(LifecyclePolicyTypeOutput)
}

func (e LifecyclePolicyType) ToLifecyclePolicyTypeOutputWithContext(ctx context.Context) LifecyclePolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LifecyclePolicyTypeOutput)
}

func (e LifecyclePolicyType) ToLifecyclePolicyTypePtrOutput() LifecyclePolicyTypePtrOutput {
	return e.ToLifecyclePolicyTypePtrOutputWithContext(context.Background())
}

func (e LifecyclePolicyType) ToLifecyclePolicyTypePtrOutputWithContext(ctx context.Context) LifecyclePolicyTypePtrOutput {
	return LifecyclePolicyType(e).ToLifecyclePolicyTypeOutputWithContext(ctx).ToLifecyclePolicyTypePtrOutputWithContext(ctx)
}

func (e LifecyclePolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LifecyclePolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LifecyclePolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LifecyclePolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LifecyclePolicyTypeOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LifecyclePolicyType)(nil)).Elem()
}

func (o LifecyclePolicyTypeOutput) ToLifecyclePolicyTypeOutput() LifecyclePolicyTypeOutput {
	return o
}

func (o LifecyclePolicyTypeOutput) ToLifecyclePolicyTypeOutputWithContext(ctx context.Context) LifecyclePolicyTypeOutput {
	return o
}

func (o LifecyclePolicyTypeOutput) ToLifecyclePolicyTypePtrOutput() LifecyclePolicyTypePtrOutput {
	return o.ToLifecyclePolicyTypePtrOutputWithContext(context.Background())
}

func (o LifecyclePolicyTypeOutput) ToLifecyclePolicyTypePtrOutputWithContext(ctx context.Context) LifecyclePolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LifecyclePolicyType) *LifecyclePolicyType {
		return &v
	}).(LifecyclePolicyTypePtrOutput)
}

func (o LifecyclePolicyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[LifecyclePolicyType] {
	return pulumix.Output[LifecyclePolicyType]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LifecyclePolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LifecyclePolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LifecyclePolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LifecyclePolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LifecyclePolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LifecyclePolicyTypePtrOutput struct{ *pulumi.OutputState }

func (LifecyclePolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecyclePolicyType)(nil)).Elem()
}

func (o LifecyclePolicyTypePtrOutput) ToLifecyclePolicyTypePtrOutput() LifecyclePolicyTypePtrOutput {
	return o
}

func (o LifecyclePolicyTypePtrOutput) ToLifecyclePolicyTypePtrOutputWithContext(ctx context.Context) LifecyclePolicyTypePtrOutput {
	return o
}

func (o LifecyclePolicyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyType] {
	return pulumix.Output[*LifecyclePolicyType]{
		OutputState: o.OutputState,
	}
}

func (o LifecyclePolicyTypePtrOutput) Elem() LifecyclePolicyTypeOutput {
	return o.ApplyT(func(v *LifecyclePolicyType) LifecyclePolicyType {
		if v != nil {
			return *v
		}
		var ret LifecyclePolicyType
		return ret
	}).(LifecyclePolicyTypeOutput)
}

func (o LifecyclePolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LifecyclePolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LifecyclePolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LifecyclePolicyTypeInput is an input type that accepts LifecyclePolicyTypeArgs and LifecyclePolicyTypeOutput values.
// You can construct a concrete instance of `LifecyclePolicyTypeInput` via:
//
//	LifecyclePolicyTypeArgs{...}
type LifecyclePolicyTypeInput interface {
	pulumi.Input

	ToLifecyclePolicyTypeOutput() LifecyclePolicyTypeOutput
	ToLifecyclePolicyTypeOutputWithContext(context.Context) LifecyclePolicyTypeOutput
}

var lifecyclePolicyTypePtrType = reflect.TypeOf((**LifecyclePolicyType)(nil)).Elem()

type LifecyclePolicyTypePtrInput interface {
	pulumi.Input

	ToLifecyclePolicyTypePtrOutput() LifecyclePolicyTypePtrOutput
	ToLifecyclePolicyTypePtrOutputWithContext(context.Context) LifecyclePolicyTypePtrOutput
}

type lifecyclePolicyTypePtr string

func LifecyclePolicyTypePtr(v string) LifecyclePolicyTypePtrInput {
	return (*lifecyclePolicyTypePtr)(&v)
}

func (*lifecyclePolicyTypePtr) ElementType() reflect.Type {
	return lifecyclePolicyTypePtrType
}

func (in *lifecyclePolicyTypePtr) ToLifecyclePolicyTypePtrOutput() LifecyclePolicyTypePtrOutput {
	return pulumi.ToOutput(in).(LifecyclePolicyTypePtrOutput)
}

func (in *lifecyclePolicyTypePtr) ToLifecyclePolicyTypePtrOutputWithContext(ctx context.Context) LifecyclePolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LifecyclePolicyTypePtrOutput)
}

func (in *lifecyclePolicyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*LifecyclePolicyType] {
	return pulumix.Output[*LifecyclePolicyType]{
		OutputState: in.ToLifecyclePolicyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Config type for security config
type SecurityConfigType string

const (
	SecurityConfigTypeSaml = SecurityConfigType("saml")
)

func (SecurityConfigType) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigType)(nil)).Elem()
}

func (e SecurityConfigType) ToSecurityConfigTypeOutput() SecurityConfigTypeOutput {
	return pulumi.ToOutput(e).(SecurityConfigTypeOutput)
}

func (e SecurityConfigType) ToSecurityConfigTypeOutputWithContext(ctx context.Context) SecurityConfigTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SecurityConfigTypeOutput)
}

func (e SecurityConfigType) ToSecurityConfigTypePtrOutput() SecurityConfigTypePtrOutput {
	return e.ToSecurityConfigTypePtrOutputWithContext(context.Background())
}

func (e SecurityConfigType) ToSecurityConfigTypePtrOutputWithContext(ctx context.Context) SecurityConfigTypePtrOutput {
	return SecurityConfigType(e).ToSecurityConfigTypeOutputWithContext(ctx).ToSecurityConfigTypePtrOutputWithContext(ctx)
}

func (e SecurityConfigType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityConfigType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityConfigType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecurityConfigType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SecurityConfigTypeOutput struct{ *pulumi.OutputState }

func (SecurityConfigTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfigType)(nil)).Elem()
}

func (o SecurityConfigTypeOutput) ToSecurityConfigTypeOutput() SecurityConfigTypeOutput {
	return o
}

func (o SecurityConfigTypeOutput) ToSecurityConfigTypeOutputWithContext(ctx context.Context) SecurityConfigTypeOutput {
	return o
}

func (o SecurityConfigTypeOutput) ToSecurityConfigTypePtrOutput() SecurityConfigTypePtrOutput {
	return o.ToSecurityConfigTypePtrOutputWithContext(context.Background())
}

func (o SecurityConfigTypeOutput) ToSecurityConfigTypePtrOutputWithContext(ctx context.Context) SecurityConfigTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityConfigType) *SecurityConfigType {
		return &v
	}).(SecurityConfigTypePtrOutput)
}

func (o SecurityConfigTypeOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityConfigType] {
	return pulumix.Output[SecurityConfigType]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SecurityConfigTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecurityConfigType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SecurityConfigTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecurityConfigTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecurityConfigType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SecurityConfigTypePtrOutput struct{ *pulumi.OutputState }

func (SecurityConfigTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfigType)(nil)).Elem()
}

func (o SecurityConfigTypePtrOutput) ToSecurityConfigTypePtrOutput() SecurityConfigTypePtrOutput {
	return o
}

func (o SecurityConfigTypePtrOutput) ToSecurityConfigTypePtrOutputWithContext(ctx context.Context) SecurityConfigTypePtrOutput {
	return o
}

func (o SecurityConfigTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigType] {
	return pulumix.Output[*SecurityConfigType]{
		OutputState: o.OutputState,
	}
}

func (o SecurityConfigTypePtrOutput) Elem() SecurityConfigTypeOutput {
	return o.ApplyT(func(v *SecurityConfigType) SecurityConfigType {
		if v != nil {
			return *v
		}
		var ret SecurityConfigType
		return ret
	}).(SecurityConfigTypeOutput)
}

func (o SecurityConfigTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecurityConfigTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SecurityConfigType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SecurityConfigTypeInput is an input type that accepts SecurityConfigTypeArgs and SecurityConfigTypeOutput values.
// You can construct a concrete instance of `SecurityConfigTypeInput` via:
//
//	SecurityConfigTypeArgs{...}
type SecurityConfigTypeInput interface {
	pulumi.Input

	ToSecurityConfigTypeOutput() SecurityConfigTypeOutput
	ToSecurityConfigTypeOutputWithContext(context.Context) SecurityConfigTypeOutput
}

var securityConfigTypePtrType = reflect.TypeOf((**SecurityConfigType)(nil)).Elem()

type SecurityConfigTypePtrInput interface {
	pulumi.Input

	ToSecurityConfigTypePtrOutput() SecurityConfigTypePtrOutput
	ToSecurityConfigTypePtrOutputWithContext(context.Context) SecurityConfigTypePtrOutput
}

type securityConfigTypePtr string

func SecurityConfigTypePtr(v string) SecurityConfigTypePtrInput {
	return (*securityConfigTypePtr)(&v)
}

func (*securityConfigTypePtr) ElementType() reflect.Type {
	return securityConfigTypePtrType
}

func (in *securityConfigTypePtr) ToSecurityConfigTypePtrOutput() SecurityConfigTypePtrOutput {
	return pulumi.ToOutput(in).(SecurityConfigTypePtrOutput)
}

func (in *securityConfigTypePtr) ToSecurityConfigTypePtrOutputWithContext(ctx context.Context) SecurityConfigTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SecurityConfigTypePtrOutput)
}

func (in *securityConfigTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfigType] {
	return pulumix.Output[*SecurityConfigType]{
		OutputState: in.ToSecurityConfigTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The possible types for the network policy
type SecurityPolicyType string

const (
	SecurityPolicyTypeEncryption = SecurityPolicyType("encryption")
	SecurityPolicyTypeNetwork    = SecurityPolicyType("network")
)

func (SecurityPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyType)(nil)).Elem()
}

func (e SecurityPolicyType) ToSecurityPolicyTypeOutput() SecurityPolicyTypeOutput {
	return pulumi.ToOutput(e).(SecurityPolicyTypeOutput)
}

func (e SecurityPolicyType) ToSecurityPolicyTypeOutputWithContext(ctx context.Context) SecurityPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SecurityPolicyTypeOutput)
}

func (e SecurityPolicyType) ToSecurityPolicyTypePtrOutput() SecurityPolicyTypePtrOutput {
	return e.ToSecurityPolicyTypePtrOutputWithContext(context.Background())
}

func (e SecurityPolicyType) ToSecurityPolicyTypePtrOutputWithContext(ctx context.Context) SecurityPolicyTypePtrOutput {
	return SecurityPolicyType(e).ToSecurityPolicyTypeOutputWithContext(ctx).ToSecurityPolicyTypePtrOutputWithContext(ctx)
}

func (e SecurityPolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityPolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityPolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecurityPolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SecurityPolicyTypeOutput struct{ *pulumi.OutputState }

func (SecurityPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyType)(nil)).Elem()
}

func (o SecurityPolicyTypeOutput) ToSecurityPolicyTypeOutput() SecurityPolicyTypeOutput {
	return o
}

func (o SecurityPolicyTypeOutput) ToSecurityPolicyTypeOutputWithContext(ctx context.Context) SecurityPolicyTypeOutput {
	return o
}

func (o SecurityPolicyTypeOutput) ToSecurityPolicyTypePtrOutput() SecurityPolicyTypePtrOutput {
	return o.ToSecurityPolicyTypePtrOutputWithContext(context.Background())
}

func (o SecurityPolicyTypeOutput) ToSecurityPolicyTypePtrOutputWithContext(ctx context.Context) SecurityPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityPolicyType) *SecurityPolicyType {
		return &v
	}).(SecurityPolicyTypePtrOutput)
}

func (o SecurityPolicyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityPolicyType] {
	return pulumix.Output[SecurityPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o SecurityPolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SecurityPolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecurityPolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SecurityPolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecurityPolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SecurityPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyType)(nil)).Elem()
}

func (o SecurityPolicyTypePtrOutput) ToSecurityPolicyTypePtrOutput() SecurityPolicyTypePtrOutput {
	return o
}

func (o SecurityPolicyTypePtrOutput) ToSecurityPolicyTypePtrOutputWithContext(ctx context.Context) SecurityPolicyTypePtrOutput {
	return o
}

func (o SecurityPolicyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityPolicyType] {
	return pulumix.Output[*SecurityPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o SecurityPolicyTypePtrOutput) Elem() SecurityPolicyTypeOutput {
	return o.ApplyT(func(v *SecurityPolicyType) SecurityPolicyType {
		if v != nil {
			return *v
		}
		var ret SecurityPolicyType
		return ret
	}).(SecurityPolicyTypeOutput)
}

func (o SecurityPolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SecurityPolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SecurityPolicyTypeInput is an input type that accepts SecurityPolicyTypeArgs and SecurityPolicyTypeOutput values.
// You can construct a concrete instance of `SecurityPolicyTypeInput` via:
//
//	SecurityPolicyTypeArgs{...}
type SecurityPolicyTypeInput interface {
	pulumi.Input

	ToSecurityPolicyTypeOutput() SecurityPolicyTypeOutput
	ToSecurityPolicyTypeOutputWithContext(context.Context) SecurityPolicyTypeOutput
}

var securityPolicyTypePtrType = reflect.TypeOf((**SecurityPolicyType)(nil)).Elem()

type SecurityPolicyTypePtrInput interface {
	pulumi.Input

	ToSecurityPolicyTypePtrOutput() SecurityPolicyTypePtrOutput
	ToSecurityPolicyTypePtrOutputWithContext(context.Context) SecurityPolicyTypePtrOutput
}

type securityPolicyTypePtr string

func SecurityPolicyTypePtr(v string) SecurityPolicyTypePtrInput {
	return (*securityPolicyTypePtr)(&v)
}

func (*securityPolicyTypePtr) ElementType() reflect.Type {
	return securityPolicyTypePtrType
}

func (in *securityPolicyTypePtr) ToSecurityPolicyTypePtrOutput() SecurityPolicyTypePtrOutput {
	return pulumi.ToOutput(in).(SecurityPolicyTypePtrOutput)
}

func (in *securityPolicyTypePtr) ToSecurityPolicyTypePtrOutputWithContext(ctx context.Context) SecurityPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SecurityPolicyTypePtrOutput)
}

func (in *securityPolicyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SecurityPolicyType] {
	return pulumix.Output[*SecurityPolicyType]{
		OutputState: in.ToSecurityPolicyTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyTypeInput)(nil)).Elem(), AccessPolicyType("data"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyTypePtrInput)(nil)).Elem(), AccessPolicyType("data"))
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionTypeInput)(nil)).Elem(), CollectionType("SEARCH"))
	pulumi.RegisterInputType(reflect.TypeOf((*CollectionTypePtrInput)(nil)).Elem(), CollectionType("SEARCH"))
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyTypeInput)(nil)).Elem(), LifecyclePolicyType("retention"))
	pulumi.RegisterInputType(reflect.TypeOf((*LifecyclePolicyTypePtrInput)(nil)).Elem(), LifecyclePolicyType("retention"))
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigTypeInput)(nil)).Elem(), SecurityConfigType("saml"))
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigTypePtrInput)(nil)).Elem(), SecurityConfigType("saml"))
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyTypeInput)(nil)).Elem(), SecurityPolicyType("encryption"))
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyTypePtrInput)(nil)).Elem(), SecurityPolicyType("encryption"))
	pulumi.RegisterOutputType(AccessPolicyTypeOutput{})
	pulumi.RegisterOutputType(AccessPolicyTypePtrOutput{})
	pulumi.RegisterOutputType(CollectionTypeOutput{})
	pulumi.RegisterOutputType(CollectionTypePtrOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyTypeOutput{})
	pulumi.RegisterOutputType(LifecyclePolicyTypePtrOutput{})
	pulumi.RegisterOutputType(SecurityConfigTypeOutput{})
	pulumi.RegisterOutputType(SecurityConfigTypePtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyTypeOutput{})
	pulumi.RegisterOutputType(SecurityPolicyTypePtrOutput{})
}
