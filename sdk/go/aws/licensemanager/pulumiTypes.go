// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type LicenseBorrowConfiguration struct {
	// Indicates whether early check-ins are allowed.
	AllowEarlyCheckIn bool `pulumi:"allowEarlyCheckIn"`
	// Maximum time for the borrow configuration, in minutes.
	MaxTimeToLiveInMinutes int `pulumi:"maxTimeToLiveInMinutes"`
}

// LicenseBorrowConfigurationInput is an input type that accepts LicenseBorrowConfigurationArgs and LicenseBorrowConfigurationOutput values.
// You can construct a concrete instance of `LicenseBorrowConfigurationInput` via:
//
//	LicenseBorrowConfigurationArgs{...}
type LicenseBorrowConfigurationInput interface {
	pulumi.Input

	ToLicenseBorrowConfigurationOutput() LicenseBorrowConfigurationOutput
	ToLicenseBorrowConfigurationOutputWithContext(context.Context) LicenseBorrowConfigurationOutput
}

type LicenseBorrowConfigurationArgs struct {
	// Indicates whether early check-ins are allowed.
	AllowEarlyCheckIn pulumi.BoolInput `pulumi:"allowEarlyCheckIn"`
	// Maximum time for the borrow configuration, in minutes.
	MaxTimeToLiveInMinutes pulumi.IntInput `pulumi:"maxTimeToLiveInMinutes"`
}

func (LicenseBorrowConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseBorrowConfiguration)(nil)).Elem()
}

func (i LicenseBorrowConfigurationArgs) ToLicenseBorrowConfigurationOutput() LicenseBorrowConfigurationOutput {
	return i.ToLicenseBorrowConfigurationOutputWithContext(context.Background())
}

func (i LicenseBorrowConfigurationArgs) ToLicenseBorrowConfigurationOutputWithContext(ctx context.Context) LicenseBorrowConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseBorrowConfigurationOutput)
}

func (i LicenseBorrowConfigurationArgs) ToLicenseBorrowConfigurationPtrOutput() LicenseBorrowConfigurationPtrOutput {
	return i.ToLicenseBorrowConfigurationPtrOutputWithContext(context.Background())
}

func (i LicenseBorrowConfigurationArgs) ToLicenseBorrowConfigurationPtrOutputWithContext(ctx context.Context) LicenseBorrowConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseBorrowConfigurationOutput).ToLicenseBorrowConfigurationPtrOutputWithContext(ctx)
}

// LicenseBorrowConfigurationPtrInput is an input type that accepts LicenseBorrowConfigurationArgs, LicenseBorrowConfigurationPtr and LicenseBorrowConfigurationPtrOutput values.
// You can construct a concrete instance of `LicenseBorrowConfigurationPtrInput` via:
//
//	        LicenseBorrowConfigurationArgs{...}
//
//	or:
//
//	        nil
type LicenseBorrowConfigurationPtrInput interface {
	pulumi.Input

	ToLicenseBorrowConfigurationPtrOutput() LicenseBorrowConfigurationPtrOutput
	ToLicenseBorrowConfigurationPtrOutputWithContext(context.Context) LicenseBorrowConfigurationPtrOutput
}

type licenseBorrowConfigurationPtrType LicenseBorrowConfigurationArgs

func LicenseBorrowConfigurationPtr(v *LicenseBorrowConfigurationArgs) LicenseBorrowConfigurationPtrInput {
	return (*licenseBorrowConfigurationPtrType)(v)
}

func (*licenseBorrowConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseBorrowConfiguration)(nil)).Elem()
}

func (i *licenseBorrowConfigurationPtrType) ToLicenseBorrowConfigurationPtrOutput() LicenseBorrowConfigurationPtrOutput {
	return i.ToLicenseBorrowConfigurationPtrOutputWithContext(context.Background())
}

func (i *licenseBorrowConfigurationPtrType) ToLicenseBorrowConfigurationPtrOutputWithContext(ctx context.Context) LicenseBorrowConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseBorrowConfigurationPtrOutput)
}

type LicenseBorrowConfigurationOutput struct{ *pulumi.OutputState }

func (LicenseBorrowConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseBorrowConfiguration)(nil)).Elem()
}

func (o LicenseBorrowConfigurationOutput) ToLicenseBorrowConfigurationOutput() LicenseBorrowConfigurationOutput {
	return o
}

func (o LicenseBorrowConfigurationOutput) ToLicenseBorrowConfigurationOutputWithContext(ctx context.Context) LicenseBorrowConfigurationOutput {
	return o
}

func (o LicenseBorrowConfigurationOutput) ToLicenseBorrowConfigurationPtrOutput() LicenseBorrowConfigurationPtrOutput {
	return o.ToLicenseBorrowConfigurationPtrOutputWithContext(context.Background())
}

func (o LicenseBorrowConfigurationOutput) ToLicenseBorrowConfigurationPtrOutputWithContext(ctx context.Context) LicenseBorrowConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseBorrowConfiguration) *LicenseBorrowConfiguration {
		return &v
	}).(LicenseBorrowConfigurationPtrOutput)
}

// Indicates whether early check-ins are allowed.
func (o LicenseBorrowConfigurationOutput) AllowEarlyCheckIn() pulumi.BoolOutput {
	return o.ApplyT(func(v LicenseBorrowConfiguration) bool { return v.AllowEarlyCheckIn }).(pulumi.BoolOutput)
}

// Maximum time for the borrow configuration, in minutes.
func (o LicenseBorrowConfigurationOutput) MaxTimeToLiveInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LicenseBorrowConfiguration) int { return v.MaxTimeToLiveInMinutes }).(pulumi.IntOutput)
}

type LicenseBorrowConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LicenseBorrowConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseBorrowConfiguration)(nil)).Elem()
}

func (o LicenseBorrowConfigurationPtrOutput) ToLicenseBorrowConfigurationPtrOutput() LicenseBorrowConfigurationPtrOutput {
	return o
}

func (o LicenseBorrowConfigurationPtrOutput) ToLicenseBorrowConfigurationPtrOutputWithContext(ctx context.Context) LicenseBorrowConfigurationPtrOutput {
	return o
}

func (o LicenseBorrowConfigurationPtrOutput) Elem() LicenseBorrowConfigurationOutput {
	return o.ApplyT(func(v *LicenseBorrowConfiguration) LicenseBorrowConfiguration {
		if v != nil {
			return *v
		}
		var ret LicenseBorrowConfiguration
		return ret
	}).(LicenseBorrowConfigurationOutput)
}

// Indicates whether early check-ins are allowed.
func (o LicenseBorrowConfigurationPtrOutput) AllowEarlyCheckIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LicenseBorrowConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowEarlyCheckIn
	}).(pulumi.BoolPtrOutput)
}

// Maximum time for the borrow configuration, in minutes.
func (o LicenseBorrowConfigurationPtrOutput) MaxTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseBorrowConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.MaxTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

type LicenseConsumptionConfiguration struct {
	// Details about a borrow configuration.
	BorrowConfiguration *LicenseBorrowConfiguration `pulumi:"borrowConfiguration"`
	// Details about a provisional configuration.
	ProvisionalConfiguration *LicenseProvisionalConfiguration `pulumi:"provisionalConfiguration"`
	// Renewal frequency.
	RenewType *string `pulumi:"renewType"`
}

// LicenseConsumptionConfigurationInput is an input type that accepts LicenseConsumptionConfigurationArgs and LicenseConsumptionConfigurationOutput values.
// You can construct a concrete instance of `LicenseConsumptionConfigurationInput` via:
//
//	LicenseConsumptionConfigurationArgs{...}
type LicenseConsumptionConfigurationInput interface {
	pulumi.Input

	ToLicenseConsumptionConfigurationOutput() LicenseConsumptionConfigurationOutput
	ToLicenseConsumptionConfigurationOutputWithContext(context.Context) LicenseConsumptionConfigurationOutput
}

type LicenseConsumptionConfigurationArgs struct {
	// Details about a borrow configuration.
	BorrowConfiguration LicenseBorrowConfigurationPtrInput `pulumi:"borrowConfiguration"`
	// Details about a provisional configuration.
	ProvisionalConfiguration LicenseProvisionalConfigurationPtrInput `pulumi:"provisionalConfiguration"`
	// Renewal frequency.
	RenewType pulumi.StringPtrInput `pulumi:"renewType"`
}

func (LicenseConsumptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseConsumptionConfiguration)(nil)).Elem()
}

func (i LicenseConsumptionConfigurationArgs) ToLicenseConsumptionConfigurationOutput() LicenseConsumptionConfigurationOutput {
	return i.ToLicenseConsumptionConfigurationOutputWithContext(context.Background())
}

func (i LicenseConsumptionConfigurationArgs) ToLicenseConsumptionConfigurationOutputWithContext(ctx context.Context) LicenseConsumptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseConsumptionConfigurationOutput)
}

type LicenseConsumptionConfigurationOutput struct{ *pulumi.OutputState }

func (LicenseConsumptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseConsumptionConfiguration)(nil)).Elem()
}

func (o LicenseConsumptionConfigurationOutput) ToLicenseConsumptionConfigurationOutput() LicenseConsumptionConfigurationOutput {
	return o
}

func (o LicenseConsumptionConfigurationOutput) ToLicenseConsumptionConfigurationOutputWithContext(ctx context.Context) LicenseConsumptionConfigurationOutput {
	return o
}

// Details about a borrow configuration.
func (o LicenseConsumptionConfigurationOutput) BorrowConfiguration() LicenseBorrowConfigurationPtrOutput {
	return o.ApplyT(func(v LicenseConsumptionConfiguration) *LicenseBorrowConfiguration { return v.BorrowConfiguration }).(LicenseBorrowConfigurationPtrOutput)
}

// Details about a provisional configuration.
func (o LicenseConsumptionConfigurationOutput) ProvisionalConfiguration() LicenseProvisionalConfigurationPtrOutput {
	return o.ApplyT(func(v LicenseConsumptionConfiguration) *LicenseProvisionalConfiguration {
		return v.ProvisionalConfiguration
	}).(LicenseProvisionalConfigurationPtrOutput)
}

// Renewal frequency.
func (o LicenseConsumptionConfigurationOutput) RenewType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LicenseConsumptionConfiguration) *string { return v.RenewType }).(pulumi.StringPtrOutput)
}

type LicenseConsumptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LicenseConsumptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseConsumptionConfiguration)(nil)).Elem()
}

func (o LicenseConsumptionConfigurationPtrOutput) ToLicenseConsumptionConfigurationPtrOutput() LicenseConsumptionConfigurationPtrOutput {
	return o
}

func (o LicenseConsumptionConfigurationPtrOutput) ToLicenseConsumptionConfigurationPtrOutputWithContext(ctx context.Context) LicenseConsumptionConfigurationPtrOutput {
	return o
}

func (o LicenseConsumptionConfigurationPtrOutput) Elem() LicenseConsumptionConfigurationOutput {
	return o.ApplyT(func(v *LicenseConsumptionConfiguration) LicenseConsumptionConfiguration {
		if v != nil {
			return *v
		}
		var ret LicenseConsumptionConfiguration
		return ret
	}).(LicenseConsumptionConfigurationOutput)
}

// Details about a borrow configuration.
func (o LicenseConsumptionConfigurationPtrOutput) BorrowConfiguration() LicenseBorrowConfigurationPtrOutput {
	return o.ApplyT(func(v *LicenseConsumptionConfiguration) *LicenseBorrowConfiguration {
		if v == nil {
			return nil
		}
		return v.BorrowConfiguration
	}).(LicenseBorrowConfigurationPtrOutput)
}

// Details about a provisional configuration.
func (o LicenseConsumptionConfigurationPtrOutput) ProvisionalConfiguration() LicenseProvisionalConfigurationPtrOutput {
	return o.ApplyT(func(v *LicenseConsumptionConfiguration) *LicenseProvisionalConfiguration {
		if v == nil {
			return nil
		}
		return v.ProvisionalConfiguration
	}).(LicenseProvisionalConfigurationPtrOutput)
}

// Renewal frequency.
func (o LicenseConsumptionConfigurationPtrOutput) RenewType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseConsumptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RenewType
	}).(pulumi.StringPtrOutput)
}

type LicenseEntitlement struct {
	// Indicates whether check-ins are allowed.
	AllowCheckIn *bool `pulumi:"allowCheckIn"`
	// Maximum entitlement count. Use if the unit is not None.
	MaxCount *int `pulumi:"maxCount"`
	// Entitlement name.
	Name string `pulumi:"name"`
	// Indicates whether overages are allowed.
	Overage *bool `pulumi:"overage"`
	// Entitlement unit.
	Unit string `pulumi:"unit"`
	// Entitlement resource. Use only if the unit is None.
	Value *string `pulumi:"value"`
}

// LicenseEntitlementInput is an input type that accepts LicenseEntitlementArgs and LicenseEntitlementOutput values.
// You can construct a concrete instance of `LicenseEntitlementInput` via:
//
//	LicenseEntitlementArgs{...}
type LicenseEntitlementInput interface {
	pulumi.Input

	ToLicenseEntitlementOutput() LicenseEntitlementOutput
	ToLicenseEntitlementOutputWithContext(context.Context) LicenseEntitlementOutput
}

type LicenseEntitlementArgs struct {
	// Indicates whether check-ins are allowed.
	AllowCheckIn pulumi.BoolPtrInput `pulumi:"allowCheckIn"`
	// Maximum entitlement count. Use if the unit is not None.
	MaxCount pulumi.IntPtrInput `pulumi:"maxCount"`
	// Entitlement name.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether overages are allowed.
	Overage pulumi.BoolPtrInput `pulumi:"overage"`
	// Entitlement unit.
	Unit pulumi.StringInput `pulumi:"unit"`
	// Entitlement resource. Use only if the unit is None.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LicenseEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseEntitlement)(nil)).Elem()
}

func (i LicenseEntitlementArgs) ToLicenseEntitlementOutput() LicenseEntitlementOutput {
	return i.ToLicenseEntitlementOutputWithContext(context.Background())
}

func (i LicenseEntitlementArgs) ToLicenseEntitlementOutputWithContext(ctx context.Context) LicenseEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseEntitlementOutput)
}

// LicenseEntitlementArrayInput is an input type that accepts LicenseEntitlementArray and LicenseEntitlementArrayOutput values.
// You can construct a concrete instance of `LicenseEntitlementArrayInput` via:
//
//	LicenseEntitlementArray{ LicenseEntitlementArgs{...} }
type LicenseEntitlementArrayInput interface {
	pulumi.Input

	ToLicenseEntitlementArrayOutput() LicenseEntitlementArrayOutput
	ToLicenseEntitlementArrayOutputWithContext(context.Context) LicenseEntitlementArrayOutput
}

type LicenseEntitlementArray []LicenseEntitlementInput

func (LicenseEntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LicenseEntitlement)(nil)).Elem()
}

func (i LicenseEntitlementArray) ToLicenseEntitlementArrayOutput() LicenseEntitlementArrayOutput {
	return i.ToLicenseEntitlementArrayOutputWithContext(context.Background())
}

func (i LicenseEntitlementArray) ToLicenseEntitlementArrayOutputWithContext(ctx context.Context) LicenseEntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseEntitlementArrayOutput)
}

type LicenseEntitlementOutput struct{ *pulumi.OutputState }

func (LicenseEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseEntitlement)(nil)).Elem()
}

func (o LicenseEntitlementOutput) ToLicenseEntitlementOutput() LicenseEntitlementOutput {
	return o
}

func (o LicenseEntitlementOutput) ToLicenseEntitlementOutputWithContext(ctx context.Context) LicenseEntitlementOutput {
	return o
}

// Indicates whether check-ins are allowed.
func (o LicenseEntitlementOutput) AllowCheckIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LicenseEntitlement) *bool { return v.AllowCheckIn }).(pulumi.BoolPtrOutput)
}

// Maximum entitlement count. Use if the unit is not None.
func (o LicenseEntitlementOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LicenseEntitlement) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// Entitlement name.
func (o LicenseEntitlementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseEntitlement) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether overages are allowed.
func (o LicenseEntitlementOutput) Overage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LicenseEntitlement) *bool { return v.Overage }).(pulumi.BoolPtrOutput)
}

// Entitlement unit.
func (o LicenseEntitlementOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseEntitlement) string { return v.Unit }).(pulumi.StringOutput)
}

// Entitlement resource. Use only if the unit is None.
func (o LicenseEntitlementOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LicenseEntitlement) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LicenseEntitlementArrayOutput struct{ *pulumi.OutputState }

func (LicenseEntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LicenseEntitlement)(nil)).Elem()
}

func (o LicenseEntitlementArrayOutput) ToLicenseEntitlementArrayOutput() LicenseEntitlementArrayOutput {
	return o
}

func (o LicenseEntitlementArrayOutput) ToLicenseEntitlementArrayOutputWithContext(ctx context.Context) LicenseEntitlementArrayOutput {
	return o
}

func (o LicenseEntitlementArrayOutput) Index(i pulumi.IntInput) LicenseEntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LicenseEntitlement {
		return vs[0].([]LicenseEntitlement)[vs[1].(int)]
	}).(LicenseEntitlementOutput)
}

type LicenseIssuerData struct {
	// Issuer name.
	Name string `pulumi:"name"`
	// Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
	SignKey *string `pulumi:"signKey"`
}

// LicenseIssuerDataInput is an input type that accepts LicenseIssuerDataArgs and LicenseIssuerDataOutput values.
// You can construct a concrete instance of `LicenseIssuerDataInput` via:
//
//	LicenseIssuerDataArgs{...}
type LicenseIssuerDataInput interface {
	pulumi.Input

	ToLicenseIssuerDataOutput() LicenseIssuerDataOutput
	ToLicenseIssuerDataOutputWithContext(context.Context) LicenseIssuerDataOutput
}

type LicenseIssuerDataArgs struct {
	// Issuer name.
	Name pulumi.StringInput `pulumi:"name"`
	// Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
	SignKey pulumi.StringPtrInput `pulumi:"signKey"`
}

func (LicenseIssuerDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseIssuerData)(nil)).Elem()
}

func (i LicenseIssuerDataArgs) ToLicenseIssuerDataOutput() LicenseIssuerDataOutput {
	return i.ToLicenseIssuerDataOutputWithContext(context.Background())
}

func (i LicenseIssuerDataArgs) ToLicenseIssuerDataOutputWithContext(ctx context.Context) LicenseIssuerDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseIssuerDataOutput)
}

type LicenseIssuerDataOutput struct{ *pulumi.OutputState }

func (LicenseIssuerDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseIssuerData)(nil)).Elem()
}

func (o LicenseIssuerDataOutput) ToLicenseIssuerDataOutput() LicenseIssuerDataOutput {
	return o
}

func (o LicenseIssuerDataOutput) ToLicenseIssuerDataOutputWithContext(ctx context.Context) LicenseIssuerDataOutput {
	return o
}

// Issuer name.
func (o LicenseIssuerDataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseIssuerData) string { return v.Name }).(pulumi.StringOutput)
}

// Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
func (o LicenseIssuerDataOutput) SignKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LicenseIssuerData) *string { return v.SignKey }).(pulumi.StringPtrOutput)
}

type LicenseIssuerDataPtrOutput struct{ *pulumi.OutputState }

func (LicenseIssuerDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseIssuerData)(nil)).Elem()
}

func (o LicenseIssuerDataPtrOutput) ToLicenseIssuerDataPtrOutput() LicenseIssuerDataPtrOutput {
	return o
}

func (o LicenseIssuerDataPtrOutput) ToLicenseIssuerDataPtrOutputWithContext(ctx context.Context) LicenseIssuerDataPtrOutput {
	return o
}

func (o LicenseIssuerDataPtrOutput) Elem() LicenseIssuerDataOutput {
	return o.ApplyT(func(v *LicenseIssuerData) LicenseIssuerData {
		if v != nil {
			return *v
		}
		var ret LicenseIssuerData
		return ret
	}).(LicenseIssuerDataOutput)
}

// Issuer name.
func (o LicenseIssuerDataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseIssuerData) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
func (o LicenseIssuerDataPtrOutput) SignKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseIssuerData) *string {
		if v == nil {
			return nil
		}
		return v.SignKey
	}).(pulumi.StringPtrOutput)
}

type LicenseMetadata struct {
	// The key name.
	Name string `pulumi:"name"`
	// The value.
	Value string `pulumi:"value"`
}

// LicenseMetadataInput is an input type that accepts LicenseMetadataArgs and LicenseMetadataOutput values.
// You can construct a concrete instance of `LicenseMetadataInput` via:
//
//	LicenseMetadataArgs{...}
type LicenseMetadataInput interface {
	pulumi.Input

	ToLicenseMetadataOutput() LicenseMetadataOutput
	ToLicenseMetadataOutputWithContext(context.Context) LicenseMetadataOutput
}

type LicenseMetadataArgs struct {
	// The key name.
	Name pulumi.StringInput `pulumi:"name"`
	// The value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LicenseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseMetadata)(nil)).Elem()
}

func (i LicenseMetadataArgs) ToLicenseMetadataOutput() LicenseMetadataOutput {
	return i.ToLicenseMetadataOutputWithContext(context.Background())
}

func (i LicenseMetadataArgs) ToLicenseMetadataOutputWithContext(ctx context.Context) LicenseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMetadataOutput)
}

// LicenseMetadataArrayInput is an input type that accepts LicenseMetadataArray and LicenseMetadataArrayOutput values.
// You can construct a concrete instance of `LicenseMetadataArrayInput` via:
//
//	LicenseMetadataArray{ LicenseMetadataArgs{...} }
type LicenseMetadataArrayInput interface {
	pulumi.Input

	ToLicenseMetadataArrayOutput() LicenseMetadataArrayOutput
	ToLicenseMetadataArrayOutputWithContext(context.Context) LicenseMetadataArrayOutput
}

type LicenseMetadataArray []LicenseMetadataInput

func (LicenseMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LicenseMetadata)(nil)).Elem()
}

func (i LicenseMetadataArray) ToLicenseMetadataArrayOutput() LicenseMetadataArrayOutput {
	return i.ToLicenseMetadataArrayOutputWithContext(context.Background())
}

func (i LicenseMetadataArray) ToLicenseMetadataArrayOutputWithContext(ctx context.Context) LicenseMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMetadataArrayOutput)
}

type LicenseMetadataOutput struct{ *pulumi.OutputState }

func (LicenseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseMetadata)(nil)).Elem()
}

func (o LicenseMetadataOutput) ToLicenseMetadataOutput() LicenseMetadataOutput {
	return o
}

func (o LicenseMetadataOutput) ToLicenseMetadataOutputWithContext(ctx context.Context) LicenseMetadataOutput {
	return o
}

// The key name.
func (o LicenseMetadataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseMetadata) string { return v.Name }).(pulumi.StringOutput)
}

// The value.
func (o LicenseMetadataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseMetadata) string { return v.Value }).(pulumi.StringOutput)
}

type LicenseMetadataArrayOutput struct{ *pulumi.OutputState }

func (LicenseMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LicenseMetadata)(nil)).Elem()
}

func (o LicenseMetadataArrayOutput) ToLicenseMetadataArrayOutput() LicenseMetadataArrayOutput {
	return o
}

func (o LicenseMetadataArrayOutput) ToLicenseMetadataArrayOutputWithContext(ctx context.Context) LicenseMetadataArrayOutput {
	return o
}

func (o LicenseMetadataArrayOutput) Index(i pulumi.IntInput) LicenseMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LicenseMetadata {
		return vs[0].([]LicenseMetadata)[vs[1].(int)]
	}).(LicenseMetadataOutput)
}

type LicenseProvisionalConfiguration struct {
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes int `pulumi:"maxTimeToLiveInMinutes"`
}

// LicenseProvisionalConfigurationInput is an input type that accepts LicenseProvisionalConfigurationArgs and LicenseProvisionalConfigurationOutput values.
// You can construct a concrete instance of `LicenseProvisionalConfigurationInput` via:
//
//	LicenseProvisionalConfigurationArgs{...}
type LicenseProvisionalConfigurationInput interface {
	pulumi.Input

	ToLicenseProvisionalConfigurationOutput() LicenseProvisionalConfigurationOutput
	ToLicenseProvisionalConfigurationOutputWithContext(context.Context) LicenseProvisionalConfigurationOutput
}

type LicenseProvisionalConfigurationArgs struct {
	// Maximum time for the provisional configuration, in minutes.
	MaxTimeToLiveInMinutes pulumi.IntInput `pulumi:"maxTimeToLiveInMinutes"`
}

func (LicenseProvisionalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseProvisionalConfiguration)(nil)).Elem()
}

func (i LicenseProvisionalConfigurationArgs) ToLicenseProvisionalConfigurationOutput() LicenseProvisionalConfigurationOutput {
	return i.ToLicenseProvisionalConfigurationOutputWithContext(context.Background())
}

func (i LicenseProvisionalConfigurationArgs) ToLicenseProvisionalConfigurationOutputWithContext(ctx context.Context) LicenseProvisionalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseProvisionalConfigurationOutput)
}

func (i LicenseProvisionalConfigurationArgs) ToLicenseProvisionalConfigurationPtrOutput() LicenseProvisionalConfigurationPtrOutput {
	return i.ToLicenseProvisionalConfigurationPtrOutputWithContext(context.Background())
}

func (i LicenseProvisionalConfigurationArgs) ToLicenseProvisionalConfigurationPtrOutputWithContext(ctx context.Context) LicenseProvisionalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseProvisionalConfigurationOutput).ToLicenseProvisionalConfigurationPtrOutputWithContext(ctx)
}

// LicenseProvisionalConfigurationPtrInput is an input type that accepts LicenseProvisionalConfigurationArgs, LicenseProvisionalConfigurationPtr and LicenseProvisionalConfigurationPtrOutput values.
// You can construct a concrete instance of `LicenseProvisionalConfigurationPtrInput` via:
//
//	        LicenseProvisionalConfigurationArgs{...}
//
//	or:
//
//	        nil
type LicenseProvisionalConfigurationPtrInput interface {
	pulumi.Input

	ToLicenseProvisionalConfigurationPtrOutput() LicenseProvisionalConfigurationPtrOutput
	ToLicenseProvisionalConfigurationPtrOutputWithContext(context.Context) LicenseProvisionalConfigurationPtrOutput
}

type licenseProvisionalConfigurationPtrType LicenseProvisionalConfigurationArgs

func LicenseProvisionalConfigurationPtr(v *LicenseProvisionalConfigurationArgs) LicenseProvisionalConfigurationPtrInput {
	return (*licenseProvisionalConfigurationPtrType)(v)
}

func (*licenseProvisionalConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseProvisionalConfiguration)(nil)).Elem()
}

func (i *licenseProvisionalConfigurationPtrType) ToLicenseProvisionalConfigurationPtrOutput() LicenseProvisionalConfigurationPtrOutput {
	return i.ToLicenseProvisionalConfigurationPtrOutputWithContext(context.Background())
}

func (i *licenseProvisionalConfigurationPtrType) ToLicenseProvisionalConfigurationPtrOutputWithContext(ctx context.Context) LicenseProvisionalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseProvisionalConfigurationPtrOutput)
}

type LicenseProvisionalConfigurationOutput struct{ *pulumi.OutputState }

func (LicenseProvisionalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseProvisionalConfiguration)(nil)).Elem()
}

func (o LicenseProvisionalConfigurationOutput) ToLicenseProvisionalConfigurationOutput() LicenseProvisionalConfigurationOutput {
	return o
}

func (o LicenseProvisionalConfigurationOutput) ToLicenseProvisionalConfigurationOutputWithContext(ctx context.Context) LicenseProvisionalConfigurationOutput {
	return o
}

func (o LicenseProvisionalConfigurationOutput) ToLicenseProvisionalConfigurationPtrOutput() LicenseProvisionalConfigurationPtrOutput {
	return o.ToLicenseProvisionalConfigurationPtrOutputWithContext(context.Background())
}

func (o LicenseProvisionalConfigurationOutput) ToLicenseProvisionalConfigurationPtrOutputWithContext(ctx context.Context) LicenseProvisionalConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseProvisionalConfiguration) *LicenseProvisionalConfiguration {
		return &v
	}).(LicenseProvisionalConfigurationPtrOutput)
}

// Maximum time for the provisional configuration, in minutes.
func (o LicenseProvisionalConfigurationOutput) MaxTimeToLiveInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LicenseProvisionalConfiguration) int { return v.MaxTimeToLiveInMinutes }).(pulumi.IntOutput)
}

type LicenseProvisionalConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LicenseProvisionalConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseProvisionalConfiguration)(nil)).Elem()
}

func (o LicenseProvisionalConfigurationPtrOutput) ToLicenseProvisionalConfigurationPtrOutput() LicenseProvisionalConfigurationPtrOutput {
	return o
}

func (o LicenseProvisionalConfigurationPtrOutput) ToLicenseProvisionalConfigurationPtrOutputWithContext(ctx context.Context) LicenseProvisionalConfigurationPtrOutput {
	return o
}

func (o LicenseProvisionalConfigurationPtrOutput) Elem() LicenseProvisionalConfigurationOutput {
	return o.ApplyT(func(v *LicenseProvisionalConfiguration) LicenseProvisionalConfiguration {
		if v != nil {
			return *v
		}
		var ret LicenseProvisionalConfiguration
		return ret
	}).(LicenseProvisionalConfigurationOutput)
}

// Maximum time for the provisional configuration, in minutes.
func (o LicenseProvisionalConfigurationPtrOutput) MaxTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseProvisionalConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.MaxTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

type LicenseValidityDateFormat struct {
	// Validity begin date for the license.
	Begin string `pulumi:"begin"`
	// Validity begin date for the license.
	End string `pulumi:"end"`
}

// LicenseValidityDateFormatInput is an input type that accepts LicenseValidityDateFormatArgs and LicenseValidityDateFormatOutput values.
// You can construct a concrete instance of `LicenseValidityDateFormatInput` via:
//
//	LicenseValidityDateFormatArgs{...}
type LicenseValidityDateFormatInput interface {
	pulumi.Input

	ToLicenseValidityDateFormatOutput() LicenseValidityDateFormatOutput
	ToLicenseValidityDateFormatOutputWithContext(context.Context) LicenseValidityDateFormatOutput
}

type LicenseValidityDateFormatArgs struct {
	// Validity begin date for the license.
	Begin pulumi.StringInput `pulumi:"begin"`
	// Validity begin date for the license.
	End pulumi.StringInput `pulumi:"end"`
}

func (LicenseValidityDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseValidityDateFormat)(nil)).Elem()
}

func (i LicenseValidityDateFormatArgs) ToLicenseValidityDateFormatOutput() LicenseValidityDateFormatOutput {
	return i.ToLicenseValidityDateFormatOutputWithContext(context.Background())
}

func (i LicenseValidityDateFormatArgs) ToLicenseValidityDateFormatOutputWithContext(ctx context.Context) LicenseValidityDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseValidityDateFormatOutput)
}

type LicenseValidityDateFormatOutput struct{ *pulumi.OutputState }

func (LicenseValidityDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseValidityDateFormat)(nil)).Elem()
}

func (o LicenseValidityDateFormatOutput) ToLicenseValidityDateFormatOutput() LicenseValidityDateFormatOutput {
	return o
}

func (o LicenseValidityDateFormatOutput) ToLicenseValidityDateFormatOutputWithContext(ctx context.Context) LicenseValidityDateFormatOutput {
	return o
}

// Validity begin date for the license.
func (o LicenseValidityDateFormatOutput) Begin() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseValidityDateFormat) string { return v.Begin }).(pulumi.StringOutput)
}

// Validity begin date for the license.
func (o LicenseValidityDateFormatOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseValidityDateFormat) string { return v.End }).(pulumi.StringOutput)
}

type LicenseValidityDateFormatPtrOutput struct{ *pulumi.OutputState }

func (LicenseValidityDateFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseValidityDateFormat)(nil)).Elem()
}

func (o LicenseValidityDateFormatPtrOutput) ToLicenseValidityDateFormatPtrOutput() LicenseValidityDateFormatPtrOutput {
	return o
}

func (o LicenseValidityDateFormatPtrOutput) ToLicenseValidityDateFormatPtrOutputWithContext(ctx context.Context) LicenseValidityDateFormatPtrOutput {
	return o
}

func (o LicenseValidityDateFormatPtrOutput) Elem() LicenseValidityDateFormatOutput {
	return o.ApplyT(func(v *LicenseValidityDateFormat) LicenseValidityDateFormat {
		if v != nil {
			return *v
		}
		var ret LicenseValidityDateFormat
		return ret
	}).(LicenseValidityDateFormatOutput)
}

// Validity begin date for the license.
func (o LicenseValidityDateFormatPtrOutput) Begin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseValidityDateFormat) *string {
		if v == nil {
			return nil
		}
		return &v.Begin
	}).(pulumi.StringPtrOutput)
}

// Validity begin date for the license.
func (o LicenseValidityDateFormatPtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseValidityDateFormat) *string {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseBorrowConfigurationInput)(nil)).Elem(), LicenseBorrowConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseBorrowConfigurationPtrInput)(nil)).Elem(), LicenseBorrowConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseConsumptionConfigurationInput)(nil)).Elem(), LicenseConsumptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseEntitlementInput)(nil)).Elem(), LicenseEntitlementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseEntitlementArrayInput)(nil)).Elem(), LicenseEntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseIssuerDataInput)(nil)).Elem(), LicenseIssuerDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseMetadataInput)(nil)).Elem(), LicenseMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseMetadataArrayInput)(nil)).Elem(), LicenseMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseProvisionalConfigurationInput)(nil)).Elem(), LicenseProvisionalConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseProvisionalConfigurationPtrInput)(nil)).Elem(), LicenseProvisionalConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseValidityDateFormatInput)(nil)).Elem(), LicenseValidityDateFormatArgs{})
	pulumi.RegisterOutputType(LicenseBorrowConfigurationOutput{})
	pulumi.RegisterOutputType(LicenseBorrowConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LicenseConsumptionConfigurationOutput{})
	pulumi.RegisterOutputType(LicenseConsumptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LicenseEntitlementOutput{})
	pulumi.RegisterOutputType(LicenseEntitlementArrayOutput{})
	pulumi.RegisterOutputType(LicenseIssuerDataOutput{})
	pulumi.RegisterOutputType(LicenseIssuerDataPtrOutput{})
	pulumi.RegisterOutputType(LicenseMetadataOutput{})
	pulumi.RegisterOutputType(LicenseMetadataArrayOutput{})
	pulumi.RegisterOutputType(LicenseProvisionalConfigurationOutput{})
	pulumi.RegisterOutputType(LicenseProvisionalConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LicenseValidityDateFormatOutput{})
	pulumi.RegisterOutputType(LicenseValidityDateFormatPtrOutput{})
}
