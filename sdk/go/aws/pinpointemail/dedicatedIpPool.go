// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pinpointemail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::PinpointEmail::DedicatedIpPool
//
// Deprecated: DedicatedIpPool is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type DedicatedIpPool struct {
	pulumi.CustomResourceState

	PoolName pulumi.StringPtrOutput         `pulumi:"poolName"`
	Tags     DedicatedIpPoolTagsArrayOutput `pulumi:"tags"`
}

// NewDedicatedIpPool registers a new resource with the given unique name, arguments, and options.
func NewDedicatedIpPool(ctx *pulumi.Context,
	name string, args *DedicatedIpPoolArgs, opts ...pulumi.ResourceOption) (*DedicatedIpPool, error) {
	if args == nil {
		args = &DedicatedIpPoolArgs{}
	}

	var resource DedicatedIpPool
	err := ctx.RegisterResource("aws-native:pinpointemail:DedicatedIpPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedIpPool gets an existing DedicatedIpPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedIpPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedIpPoolState, opts ...pulumi.ResourceOption) (*DedicatedIpPool, error) {
	var resource DedicatedIpPool
	err := ctx.ReadResource("aws-native:pinpointemail:DedicatedIpPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedIpPool resources.
type dedicatedIpPoolState struct {
}

type DedicatedIpPoolState struct {
}

func (DedicatedIpPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedIpPoolState)(nil)).Elem()
}

type dedicatedIpPoolArgs struct {
	PoolName *string               `pulumi:"poolName"`
	Tags     []DedicatedIpPoolTags `pulumi:"tags"`
}

// The set of arguments for constructing a DedicatedIpPool resource.
type DedicatedIpPoolArgs struct {
	PoolName pulumi.StringPtrInput
	Tags     DedicatedIpPoolTagsArrayInput
}

func (DedicatedIpPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedIpPoolArgs)(nil)).Elem()
}

type DedicatedIpPoolInput interface {
	pulumi.Input

	ToDedicatedIpPoolOutput() DedicatedIpPoolOutput
	ToDedicatedIpPoolOutputWithContext(ctx context.Context) DedicatedIpPoolOutput
}

func (*DedicatedIpPool) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedIpPool)(nil))
}

func (i *DedicatedIpPool) ToDedicatedIpPoolOutput() DedicatedIpPoolOutput {
	return i.ToDedicatedIpPoolOutputWithContext(context.Background())
}

func (i *DedicatedIpPool) ToDedicatedIpPoolOutputWithContext(ctx context.Context) DedicatedIpPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedIpPoolOutput)
}

type DedicatedIpPoolOutput struct{ *pulumi.OutputState }

func (DedicatedIpPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedIpPool)(nil))
}

func (o DedicatedIpPoolOutput) ToDedicatedIpPoolOutput() DedicatedIpPoolOutput {
	return o
}

func (o DedicatedIpPoolOutput) ToDedicatedIpPoolOutputWithContext(ctx context.Context) DedicatedIpPoolOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DedicatedIpPoolOutput{})
}
