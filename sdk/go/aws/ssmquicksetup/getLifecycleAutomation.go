// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmquicksetup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SSMQuickSetup::LifecycleAutomation that executes SSM Automation documents in response to CloudFormation lifecycle events.
func LookupLifecycleAutomation(ctx *pulumi.Context, args *LookupLifecycleAutomationArgs, opts ...pulumi.InvokeOption) (*LookupLifecycleAutomationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLifecycleAutomationResult
	err := ctx.Invoke("aws-native:ssmquicksetup:getLifecycleAutomation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLifecycleAutomationArgs struct {
	// The id from the association that is returned when creating the association
	AssociationId string `pulumi:"associationId"`
}

type LookupLifecycleAutomationResult struct {
	// The id from the association that is returned when creating the association
	AssociationId *string `pulumi:"associationId"`
	// The name of the Automation document to execute
	AutomationDocument   *string                `pulumi:"automationDocument"`
	AutomationParameters map[string]interface{} `pulumi:"automationParameters"`
	Tags                 map[string]string      `pulumi:"tags"`
}

func LookupLifecycleAutomationOutput(ctx *pulumi.Context, args LookupLifecycleAutomationOutputArgs, opts ...pulumi.InvokeOption) LookupLifecycleAutomationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLifecycleAutomationResultOutput, error) {
			args := v.(LookupLifecycleAutomationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ssmquicksetup:getLifecycleAutomation", args, LookupLifecycleAutomationResultOutput{}, options).(LookupLifecycleAutomationResultOutput), nil
		}).(LookupLifecycleAutomationResultOutput)
}

type LookupLifecycleAutomationOutputArgs struct {
	// The id from the association that is returned when creating the association
	AssociationId pulumi.StringInput `pulumi:"associationId"`
}

func (LookupLifecycleAutomationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLifecycleAutomationArgs)(nil)).Elem()
}

type LookupLifecycleAutomationResultOutput struct{ *pulumi.OutputState }

func (LookupLifecycleAutomationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLifecycleAutomationResult)(nil)).Elem()
}

func (o LookupLifecycleAutomationResultOutput) ToLookupLifecycleAutomationResultOutput() LookupLifecycleAutomationResultOutput {
	return o
}

func (o LookupLifecycleAutomationResultOutput) ToLookupLifecycleAutomationResultOutputWithContext(ctx context.Context) LookupLifecycleAutomationResultOutput {
	return o
}

// The id from the association that is returned when creating the association
func (o LookupLifecycleAutomationResultOutput) AssociationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLifecycleAutomationResult) *string { return v.AssociationId }).(pulumi.StringPtrOutput)
}

// The name of the Automation document to execute
func (o LookupLifecycleAutomationResultOutput) AutomationDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLifecycleAutomationResult) *string { return v.AutomationDocument }).(pulumi.StringPtrOutput)
}

func (o LookupLifecycleAutomationResultOutput) AutomationParameters() pulumi.MapOutput {
	return o.ApplyT(func(v LookupLifecycleAutomationResult) map[string]interface{} { return v.AutomationParameters }).(pulumi.MapOutput)
}

func (o LookupLifecycleAutomationResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLifecycleAutomationResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLifecycleAutomationResultOutput{})
}
