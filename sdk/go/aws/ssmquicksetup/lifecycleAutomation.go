// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmquicksetup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::SSMQuickSetup::LifecycleAutomation that executes SSM Automation documents in response to CloudFormation lifecycle events.
type LifecycleAutomation struct {
	pulumi.CustomResourceState

	// The id from the association that is returned when creating the association
	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// The name of the Automation document to execute
	AutomationDocument pulumi.StringOutput `pulumi:"automationDocument"`
	// A map of key-value parameters passed to the Automation document during execution. Each parameter name maps to a list of values, even for single values. Parameters can include configuration-specific values for your automation workflow.
	AutomationParameters pulumi.MapOutput `pulumi:"automationParameters"`
	// A unique identifier used for generating a unique logical ID for the custom resource
	ResourceKey pulumi.StringOutput `pulumi:"resourceKey"`
	// Tags applied to the underlying SSM Association created by this resource. Tags help identify and organize automation executions.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewLifecycleAutomation registers a new resource with the given unique name, arguments, and options.
func NewLifecycleAutomation(ctx *pulumi.Context,
	name string, args *LifecycleAutomationArgs, opts ...pulumi.ResourceOption) (*LifecycleAutomation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutomationDocument == nil {
		return nil, errors.New("invalid value for required argument 'AutomationDocument'")
	}
	if args.AutomationParameters == nil {
		return nil, errors.New("invalid value for required argument 'AutomationParameters'")
	}
	if args.ResourceKey == nil {
		return nil, errors.New("invalid value for required argument 'ResourceKey'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"resourceKey",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LifecycleAutomation
	err := ctx.RegisterResource("aws-native:ssmquicksetup:LifecycleAutomation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLifecycleAutomation gets an existing LifecycleAutomation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLifecycleAutomation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LifecycleAutomationState, opts ...pulumi.ResourceOption) (*LifecycleAutomation, error) {
	var resource LifecycleAutomation
	err := ctx.ReadResource("aws-native:ssmquicksetup:LifecycleAutomation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LifecycleAutomation resources.
type lifecycleAutomationState struct {
}

type LifecycleAutomationState struct {
}

func (LifecycleAutomationState) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleAutomationState)(nil)).Elem()
}

type lifecycleAutomationArgs struct {
	// The name of the Automation document to execute
	AutomationDocument string `pulumi:"automationDocument"`
	// A map of key-value parameters passed to the Automation document during execution. Each parameter name maps to a list of values, even for single values. Parameters can include configuration-specific values for your automation workflow.
	AutomationParameters map[string]interface{} `pulumi:"automationParameters"`
	// A unique identifier used for generating a unique logical ID for the custom resource
	ResourceKey string `pulumi:"resourceKey"`
	// Tags applied to the underlying SSM Association created by this resource. Tags help identify and organize automation executions.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LifecycleAutomation resource.
type LifecycleAutomationArgs struct {
	// The name of the Automation document to execute
	AutomationDocument pulumi.StringInput
	// A map of key-value parameters passed to the Automation document during execution. Each parameter name maps to a list of values, even for single values. Parameters can include configuration-specific values for your automation workflow.
	AutomationParameters pulumi.MapInput
	// A unique identifier used for generating a unique logical ID for the custom resource
	ResourceKey pulumi.StringInput
	// Tags applied to the underlying SSM Association created by this resource. Tags help identify and organize automation executions.
	Tags pulumi.StringMapInput
}

func (LifecycleAutomationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lifecycleAutomationArgs)(nil)).Elem()
}

type LifecycleAutomationInput interface {
	pulumi.Input

	ToLifecycleAutomationOutput() LifecycleAutomationOutput
	ToLifecycleAutomationOutputWithContext(ctx context.Context) LifecycleAutomationOutput
}

func (*LifecycleAutomation) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleAutomation)(nil)).Elem()
}

func (i *LifecycleAutomation) ToLifecycleAutomationOutput() LifecycleAutomationOutput {
	return i.ToLifecycleAutomationOutputWithContext(context.Background())
}

func (i *LifecycleAutomation) ToLifecycleAutomationOutputWithContext(ctx context.Context) LifecycleAutomationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LifecycleAutomationOutput)
}

type LifecycleAutomationOutput struct{ *pulumi.OutputState }

func (LifecycleAutomationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LifecycleAutomation)(nil)).Elem()
}

func (o LifecycleAutomationOutput) ToLifecycleAutomationOutput() LifecycleAutomationOutput {
	return o
}

func (o LifecycleAutomationOutput) ToLifecycleAutomationOutputWithContext(ctx context.Context) LifecycleAutomationOutput {
	return o
}

// The id from the association that is returned when creating the association
func (o LifecycleAutomationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleAutomation) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// The name of the Automation document to execute
func (o LifecycleAutomationOutput) AutomationDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleAutomation) pulumi.StringOutput { return v.AutomationDocument }).(pulumi.StringOutput)
}

// A map of key-value parameters passed to the Automation document during execution. Each parameter name maps to a list of values, even for single values. Parameters can include configuration-specific values for your automation workflow.
func (o LifecycleAutomationOutput) AutomationParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *LifecycleAutomation) pulumi.MapOutput { return v.AutomationParameters }).(pulumi.MapOutput)
}

// A unique identifier used for generating a unique logical ID for the custom resource
func (o LifecycleAutomationOutput) ResourceKey() pulumi.StringOutput {
	return o.ApplyT(func(v *LifecycleAutomation) pulumi.StringOutput { return v.ResourceKey }).(pulumi.StringOutput)
}

// Tags applied to the underlying SSM Association created by this resource. Tags help identify and organize automation executions.
func (o LifecycleAutomationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LifecycleAutomation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LifecycleAutomationInput)(nil)).Elem(), &LifecycleAutomation{})
	pulumi.RegisterOutputType(LifecycleAutomationOutput{})
}
