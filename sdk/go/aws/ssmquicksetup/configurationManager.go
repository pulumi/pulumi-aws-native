// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssmquicksetup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::SSMQuickSetup::ConfigurationManager Resource Type
type ConfigurationManager struct {
	pulumi.CustomResourceState

	ConfigurationDefinitions ConfigurationManagerConfigurationDefinitionArrayOutput `pulumi:"configurationDefinitions"`
	CreatedAt                pulumi.StringOutput                                    `pulumi:"createdAt"`
	Description              pulumi.StringPtrOutput                                 `pulumi:"description"`
	LastModifiedAt           pulumi.StringOutput                                    `pulumi:"lastModifiedAt"`
	ManagerArn               pulumi.StringOutput                                    `pulumi:"managerArn"`
	Name                     pulumi.StringPtrOutput                                 `pulumi:"name"`
	StatusSummaries          ConfigurationManagerStatusSummaryArrayOutput           `pulumi:"statusSummaries"`
	Tags                     pulumi.StringMapOutput                                 `pulumi:"tags"`
}

// NewConfigurationManager registers a new resource with the given unique name, arguments, and options.
func NewConfigurationManager(ctx *pulumi.Context,
	name string, args *ConfigurationManagerArgs, opts ...pulumi.ResourceOption) (*ConfigurationManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationDefinitions'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"configurationDefinitions[*].type",
		"configurationDefinitions[*].typeVersion",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigurationManager
	err := ctx.RegisterResource("aws-native:ssmquicksetup:ConfigurationManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationManager gets an existing ConfigurationManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationManagerState, opts ...pulumi.ResourceOption) (*ConfigurationManager, error) {
	var resource ConfigurationManager
	err := ctx.ReadResource("aws-native:ssmquicksetup:ConfigurationManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationManager resources.
type configurationManagerState struct {
}

type ConfigurationManagerState struct {
}

func (ConfigurationManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationManagerState)(nil)).Elem()
}

type configurationManagerArgs struct {
	ConfigurationDefinitions []ConfigurationManagerConfigurationDefinition `pulumi:"configurationDefinitions"`
	Description              *string                                       `pulumi:"description"`
	Name                     *string                                       `pulumi:"name"`
	Tags                     map[string]string                             `pulumi:"tags"`
}

// The set of arguments for constructing a ConfigurationManager resource.
type ConfigurationManagerArgs struct {
	ConfigurationDefinitions ConfigurationManagerConfigurationDefinitionArrayInput
	Description              pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
}

func (ConfigurationManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationManagerArgs)(nil)).Elem()
}

type ConfigurationManagerInput interface {
	pulumi.Input

	ToConfigurationManagerOutput() ConfigurationManagerOutput
	ToConfigurationManagerOutputWithContext(ctx context.Context) ConfigurationManagerOutput
}

func (*ConfigurationManager) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationManager)(nil)).Elem()
}

func (i *ConfigurationManager) ToConfigurationManagerOutput() ConfigurationManagerOutput {
	return i.ToConfigurationManagerOutputWithContext(context.Background())
}

func (i *ConfigurationManager) ToConfigurationManagerOutputWithContext(ctx context.Context) ConfigurationManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationManagerOutput)
}

type ConfigurationManagerOutput struct{ *pulumi.OutputState }

func (ConfigurationManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationManager)(nil)).Elem()
}

func (o ConfigurationManagerOutput) ToConfigurationManagerOutput() ConfigurationManagerOutput {
	return o
}

func (o ConfigurationManagerOutput) ToConfigurationManagerOutputWithContext(ctx context.Context) ConfigurationManagerOutput {
	return o
}

func (o ConfigurationManagerOutput) ConfigurationDefinitions() ConfigurationManagerConfigurationDefinitionArrayOutput {
	return o.ApplyT(func(v *ConfigurationManager) ConfigurationManagerConfigurationDefinitionArrayOutput {
		return v.ConfigurationDefinitions
	}).(ConfigurationManagerConfigurationDefinitionArrayOutput)
}

func (o ConfigurationManagerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationManager) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ConfigurationManagerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationManager) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConfigurationManagerOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationManager) pulumi.StringOutput { return v.LastModifiedAt }).(pulumi.StringOutput)
}

func (o ConfigurationManagerOutput) ManagerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationManager) pulumi.StringOutput { return v.ManagerArn }).(pulumi.StringOutput)
}

func (o ConfigurationManagerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationManager) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ConfigurationManagerOutput) StatusSummaries() ConfigurationManagerStatusSummaryArrayOutput {
	return o.ApplyT(func(v *ConfigurationManager) ConfigurationManagerStatusSummaryArrayOutput { return v.StatusSummaries }).(ConfigurationManagerStatusSummaryArrayOutput)
}

func (o ConfigurationManagerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationManager) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationManagerInput)(nil)).Elem(), &ConfigurationManager{})
	pulumi.RegisterOutputType(ConfigurationManagerOutput{})
}
