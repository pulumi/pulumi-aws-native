// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AIAgentVersion Resource Type
type AiAgentVersion struct {
	pulumi.CustomResourceState

	AiAgentArn          pulumi.StringOutput     `pulumi:"aiAgentArn"`
	AiAgentId           pulumi.StringOutput     `pulumi:"aiAgentId"`
	AiAgentVersionId    pulumi.StringOutput     `pulumi:"aiAgentVersionId"`
	AssistantArn        pulumi.StringOutput     `pulumi:"assistantArn"`
	AssistantId         pulumi.StringOutput     `pulumi:"assistantId"`
	ModifiedTimeSeconds pulumi.Float64PtrOutput `pulumi:"modifiedTimeSeconds"`
	VersionNumber       pulumi.Float64Output    `pulumi:"versionNumber"`
}

// NewAiAgentVersion registers a new resource with the given unique name, arguments, and options.
func NewAiAgentVersion(ctx *pulumi.Context,
	name string, args *AiAgentVersionArgs, opts ...pulumi.ResourceOption) (*AiAgentVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AiAgentId == nil {
		return nil, errors.New("invalid value for required argument 'AiAgentId'")
	}
	if args.AssistantId == nil {
		return nil, errors.New("invalid value for required argument 'AssistantId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"aiAgentId",
		"assistantId",
		"modifiedTimeSeconds",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiAgentVersion
	err := ctx.RegisterResource("aws-native:wisdom:AiAgentVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiAgentVersion gets an existing AiAgentVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiAgentVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiAgentVersionState, opts ...pulumi.ResourceOption) (*AiAgentVersion, error) {
	var resource AiAgentVersion
	err := ctx.ReadResource("aws-native:wisdom:AiAgentVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiAgentVersion resources.
type aiAgentVersionState struct {
}

type AiAgentVersionState struct {
}

func (AiAgentVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiAgentVersionState)(nil)).Elem()
}

type aiAgentVersionArgs struct {
	AiAgentId           string   `pulumi:"aiAgentId"`
	AssistantId         string   `pulumi:"assistantId"`
	ModifiedTimeSeconds *float64 `pulumi:"modifiedTimeSeconds"`
}

// The set of arguments for constructing a AiAgentVersion resource.
type AiAgentVersionArgs struct {
	AiAgentId           pulumi.StringInput
	AssistantId         pulumi.StringInput
	ModifiedTimeSeconds pulumi.Float64PtrInput
}

func (AiAgentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiAgentVersionArgs)(nil)).Elem()
}

type AiAgentVersionInput interface {
	pulumi.Input

	ToAiAgentVersionOutput() AiAgentVersionOutput
	ToAiAgentVersionOutputWithContext(ctx context.Context) AiAgentVersionOutput
}

func (*AiAgentVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**AiAgentVersion)(nil)).Elem()
}

func (i *AiAgentVersion) ToAiAgentVersionOutput() AiAgentVersionOutput {
	return i.ToAiAgentVersionOutputWithContext(context.Background())
}

func (i *AiAgentVersion) ToAiAgentVersionOutputWithContext(ctx context.Context) AiAgentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiAgentVersionOutput)
}

type AiAgentVersionOutput struct{ *pulumi.OutputState }

func (AiAgentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiAgentVersion)(nil)).Elem()
}

func (o AiAgentVersionOutput) ToAiAgentVersionOutput() AiAgentVersionOutput {
	return o
}

func (o AiAgentVersionOutput) ToAiAgentVersionOutputWithContext(ctx context.Context) AiAgentVersionOutput {
	return o
}

func (o AiAgentVersionOutput) AiAgentArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgentVersion) pulumi.StringOutput { return v.AiAgentArn }).(pulumi.StringOutput)
}

func (o AiAgentVersionOutput) AiAgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgentVersion) pulumi.StringOutput { return v.AiAgentId }).(pulumi.StringOutput)
}

func (o AiAgentVersionOutput) AiAgentVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgentVersion) pulumi.StringOutput { return v.AiAgentVersionId }).(pulumi.StringOutput)
}

func (o AiAgentVersionOutput) AssistantArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgentVersion) pulumi.StringOutput { return v.AssistantArn }).(pulumi.StringOutput)
}

func (o AiAgentVersionOutput) AssistantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgentVersion) pulumi.StringOutput { return v.AssistantId }).(pulumi.StringOutput)
}

func (o AiAgentVersionOutput) ModifiedTimeSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AiAgentVersion) pulumi.Float64PtrOutput { return v.ModifiedTimeSeconds }).(pulumi.Float64PtrOutput)
}

func (o AiAgentVersionOutput) VersionNumber() pulumi.Float64Output {
	return o.ApplyT(func(v *AiAgentVersion) pulumi.Float64Output { return v.VersionNumber }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiAgentVersionInput)(nil)).Elem(), &AiAgentVersion{})
	pulumi.RegisterOutputType(AiAgentVersionOutput{})
}
