// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::Assistant Resource Type
type Assistant struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the assistant.
	AssistantArn pulumi.StringOutput `pulumi:"assistantArn"`
	// The identifier of the Amazon Q in Connect assistant.
	AssistantId pulumi.StringOutput `pulumi:"assistantId"`
	// The description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The configuration information for the customer managed key used for encryption.
	//
	// This KMS key must have a policy that allows `kms:CreateGrant` , `kms:DescribeKey` , `kms:Decrypt` , and `kms:GenerateDataKey*` permissions to the IAM identity using the key to invoke Amazon Q in Connect. To use Amazon Q in Connect with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal.
	//
	// For more information about setting up a customer managed key for Amazon Q in Connect, see [Enable Amazon Q in Connect for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-q.html) .
	ServerSideEncryptionConfiguration AssistantServerSideEncryptionConfigurationPtrOutput `pulumi:"serverSideEncryptionConfiguration"`
	// The tags used to organize, track, or control access for this resource.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
	// The type of assistant.
	Type AssistantTypeOutput `pulumi:"type"`
}

// NewAssistant registers a new resource with the given unique name, arguments, and options.
func NewAssistant(ctx *pulumi.Context,
	name string, args *AssistantArgs, opts ...pulumi.ResourceOption) (*Assistant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"description",
		"name",
		"serverSideEncryptionConfiguration",
		"tags[*]",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Assistant
	err := ctx.RegisterResource("aws-native:wisdom:Assistant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssistant gets an existing Assistant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssistant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssistantState, opts ...pulumi.ResourceOption) (*Assistant, error) {
	var resource Assistant
	err := ctx.ReadResource("aws-native:wisdom:Assistant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assistant resources.
type assistantState struct {
}

type AssistantState struct {
}

func (AssistantState) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantState)(nil)).Elem()
}

type assistantArgs struct {
	// The description.
	Description *string `pulumi:"description"`
	// The name.
	Name *string `pulumi:"name"`
	// The configuration information for the customer managed key used for encryption.
	//
	// This KMS key must have a policy that allows `kms:CreateGrant` , `kms:DescribeKey` , `kms:Decrypt` , and `kms:GenerateDataKey*` permissions to the IAM identity using the key to invoke Amazon Q in Connect. To use Amazon Q in Connect with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal.
	//
	// For more information about setting up a customer managed key for Amazon Q in Connect, see [Enable Amazon Q in Connect for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-q.html) .
	ServerSideEncryptionConfiguration *AssistantServerSideEncryptionConfiguration `pulumi:"serverSideEncryptionConfiguration"`
	// The tags used to organize, track, or control access for this resource.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
	// The type of assistant.
	Type AssistantType `pulumi:"type"`
}

// The set of arguments for constructing a Assistant resource.
type AssistantArgs struct {
	// The description.
	Description pulumi.StringPtrInput
	// The name.
	Name pulumi.StringPtrInput
	// The configuration information for the customer managed key used for encryption.
	//
	// This KMS key must have a policy that allows `kms:CreateGrant` , `kms:DescribeKey` , `kms:Decrypt` , and `kms:GenerateDataKey*` permissions to the IAM identity using the key to invoke Amazon Q in Connect. To use Amazon Q in Connect with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal.
	//
	// For more information about setting up a customer managed key for Amazon Q in Connect, see [Enable Amazon Q in Connect for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-q.html) .
	ServerSideEncryptionConfiguration AssistantServerSideEncryptionConfigurationPtrInput
	// The tags used to organize, track, or control access for this resource.
	Tags aws.CreateOnlyTagArrayInput
	// The type of assistant.
	Type AssistantTypeInput
}

func (AssistantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantArgs)(nil)).Elem()
}

type AssistantInput interface {
	pulumi.Input

	ToAssistantOutput() AssistantOutput
	ToAssistantOutputWithContext(ctx context.Context) AssistantOutput
}

func (*Assistant) ElementType() reflect.Type {
	return reflect.TypeOf((**Assistant)(nil)).Elem()
}

func (i *Assistant) ToAssistantOutput() AssistantOutput {
	return i.ToAssistantOutputWithContext(context.Background())
}

func (i *Assistant) ToAssistantOutputWithContext(ctx context.Context) AssistantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantOutput)
}

type AssistantOutput struct{ *pulumi.OutputState }

func (AssistantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assistant)(nil)).Elem()
}

func (o AssistantOutput) ToAssistantOutput() AssistantOutput {
	return o
}

func (o AssistantOutput) ToAssistantOutputWithContext(ctx context.Context) AssistantOutput {
	return o
}

// The Amazon Resource Name (ARN) of the assistant.
func (o AssistantOutput) AssistantArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringOutput { return v.AssistantArn }).(pulumi.StringOutput)
}

// The identifier of the Amazon Q in Connect assistant.
func (o AssistantOutput) AssistantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringOutput { return v.AssistantId }).(pulumi.StringOutput)
}

// The description.
func (o AssistantOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name.
func (o AssistantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Assistant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The configuration information for the customer managed key used for encryption.
//
// This KMS key must have a policy that allows `kms:CreateGrant` , `kms:DescribeKey` , `kms:Decrypt` , and `kms:GenerateDataKey*` permissions to the IAM identity using the key to invoke Amazon Q in Connect. To use Amazon Q in Connect with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal.
//
// For more information about setting up a customer managed key for Amazon Q in Connect, see [Enable Amazon Q in Connect for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-q.html) .
func (o AssistantOutput) ServerSideEncryptionConfiguration() AssistantServerSideEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *Assistant) AssistantServerSideEncryptionConfigurationPtrOutput {
		return v.ServerSideEncryptionConfiguration
	}).(AssistantServerSideEncryptionConfigurationPtrOutput)
}

// The tags used to organize, track, or control access for this resource.
func (o AssistantOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *Assistant) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

// The type of assistant.
func (o AssistantOutput) Type() AssistantTypeOutput {
	return o.ApplyT(func(v *Assistant) AssistantTypeOutput { return v.Type }).(AssistantTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssistantInput)(nil)).Elem(), &Assistant{})
	pulumi.RegisterOutputType(AssistantOutput{})
}
