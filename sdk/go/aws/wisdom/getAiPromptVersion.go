// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AIPromptVersion Resource Type
func LookupAiPromptVersion(ctx *pulumi.Context, args *LookupAiPromptVersionArgs, opts ...pulumi.InvokeOption) (*LookupAiPromptVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAiPromptVersionResult
	err := ctx.Invoke("aws-native:wisdom:getAiPromptVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAiPromptVersionArgs struct {
	AiPromptId    string  `pulumi:"aiPromptId"`
	AssistantId   string  `pulumi:"assistantId"`
	VersionNumber float64 `pulumi:"versionNumber"`
}

type LookupAiPromptVersionResult struct {
	AiPromptArn       *string  `pulumi:"aiPromptArn"`
	AiPromptVersionId *string  `pulumi:"aiPromptVersionId"`
	AssistantArn      *string  `pulumi:"assistantArn"`
	VersionNumber     *float64 `pulumi:"versionNumber"`
}

func LookupAiPromptVersionOutput(ctx *pulumi.Context, args LookupAiPromptVersionOutputArgs, opts ...pulumi.InvokeOption) LookupAiPromptVersionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAiPromptVersionResultOutput, error) {
			args := v.(LookupAiPromptVersionArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAiPromptVersionResult
			secret, err := ctx.InvokePackageRaw("aws-native:wisdom:getAiPromptVersion", args, &rv, "", opts...)
			if err != nil {
				return LookupAiPromptVersionResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAiPromptVersionResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAiPromptVersionResultOutput), nil
			}
			return output, nil
		}).(LookupAiPromptVersionResultOutput)
}

type LookupAiPromptVersionOutputArgs struct {
	AiPromptId    pulumi.StringInput  `pulumi:"aiPromptId"`
	AssistantId   pulumi.StringInput  `pulumi:"assistantId"`
	VersionNumber pulumi.Float64Input `pulumi:"versionNumber"`
}

func (LookupAiPromptVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAiPromptVersionArgs)(nil)).Elem()
}

type LookupAiPromptVersionResultOutput struct{ *pulumi.OutputState }

func (LookupAiPromptVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAiPromptVersionResult)(nil)).Elem()
}

func (o LookupAiPromptVersionResultOutput) ToLookupAiPromptVersionResultOutput() LookupAiPromptVersionResultOutput {
	return o
}

func (o LookupAiPromptVersionResultOutput) ToLookupAiPromptVersionResultOutputWithContext(ctx context.Context) LookupAiPromptVersionResultOutput {
	return o
}

func (o LookupAiPromptVersionResultOutput) AiPromptArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiPromptVersionResult) *string { return v.AiPromptArn }).(pulumi.StringPtrOutput)
}

func (o LookupAiPromptVersionResultOutput) AiPromptVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiPromptVersionResult) *string { return v.AiPromptVersionId }).(pulumi.StringPtrOutput)
}

func (o LookupAiPromptVersionResultOutput) AssistantArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiPromptVersionResult) *string { return v.AssistantArn }).(pulumi.StringPtrOutput)
}

func (o LookupAiPromptVersionResultOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAiPromptVersionResult) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAiPromptVersionResultOutput{})
}
