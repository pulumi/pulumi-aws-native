// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AIPrompt Resource Type
type AiPrompt struct {
	pulumi.CustomResourceState

	AiPromptArn           pulumi.StringOutput                         `pulumi:"aiPromptArn"`
	AiPromptId            pulumi.StringOutput                         `pulumi:"aiPromptId"`
	ApiFormat             AiPromptAiPromptApiFormatOutput             `pulumi:"apiFormat"`
	AssistantArn          pulumi.StringOutput                         `pulumi:"assistantArn"`
	AssistantId           pulumi.StringPtrOutput                      `pulumi:"assistantId"`
	Description           pulumi.StringPtrOutput                      `pulumi:"description"`
	ModelId               pulumi.StringOutput                         `pulumi:"modelId"`
	Name                  pulumi.StringPtrOutput                      `pulumi:"name"`
	Tags                  pulumi.StringMapOutput                      `pulumi:"tags"`
	TemplateConfiguration AiPromptAiPromptTemplateConfigurationOutput `pulumi:"templateConfiguration"`
	TemplateType          AiPromptAiPromptTemplateTypeOutput          `pulumi:"templateType"`
	Type                  AiPromptAiPromptTypeOutput                  `pulumi:"type"`
}

// NewAiPrompt registers a new resource with the given unique name, arguments, and options.
func NewAiPrompt(ctx *pulumi.Context,
	name string, args *AiPromptArgs, opts ...pulumi.ResourceOption) (*AiPrompt, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiFormat == nil {
		return nil, errors.New("invalid value for required argument 'ApiFormat'")
	}
	if args.ModelId == nil {
		return nil, errors.New("invalid value for required argument 'ModelId'")
	}
	if args.TemplateConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'TemplateConfiguration'")
	}
	if args.TemplateType == nil {
		return nil, errors.New("invalid value for required argument 'TemplateType'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiFormat",
		"assistantId",
		"modelId",
		"name",
		"tags.*",
		"templateType",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiPrompt
	err := ctx.RegisterResource("aws-native:wisdom:AiPrompt", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiPrompt gets an existing AiPrompt resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiPrompt(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiPromptState, opts ...pulumi.ResourceOption) (*AiPrompt, error) {
	var resource AiPrompt
	err := ctx.ReadResource("aws-native:wisdom:AiPrompt", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiPrompt resources.
type aiPromptState struct {
}

type AiPromptState struct {
}

func (AiPromptState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiPromptState)(nil)).Elem()
}

type aiPromptArgs struct {
	ApiFormat             AiPromptAiPromptApiFormat             `pulumi:"apiFormat"`
	AssistantId           *string                               `pulumi:"assistantId"`
	Description           *string                               `pulumi:"description"`
	ModelId               string                                `pulumi:"modelId"`
	Name                  *string                               `pulumi:"name"`
	Tags                  map[string]string                     `pulumi:"tags"`
	TemplateConfiguration AiPromptAiPromptTemplateConfiguration `pulumi:"templateConfiguration"`
	TemplateType          AiPromptAiPromptTemplateType          `pulumi:"templateType"`
	Type                  AiPromptAiPromptType                  `pulumi:"type"`
}

// The set of arguments for constructing a AiPrompt resource.
type AiPromptArgs struct {
	ApiFormat             AiPromptAiPromptApiFormatInput
	AssistantId           pulumi.StringPtrInput
	Description           pulumi.StringPtrInput
	ModelId               pulumi.StringInput
	Name                  pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
	TemplateConfiguration AiPromptAiPromptTemplateConfigurationInput
	TemplateType          AiPromptAiPromptTemplateTypeInput
	Type                  AiPromptAiPromptTypeInput
}

func (AiPromptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiPromptArgs)(nil)).Elem()
}

type AiPromptInput interface {
	pulumi.Input

	ToAiPromptOutput() AiPromptOutput
	ToAiPromptOutputWithContext(ctx context.Context) AiPromptOutput
}

func (*AiPrompt) ElementType() reflect.Type {
	return reflect.TypeOf((**AiPrompt)(nil)).Elem()
}

func (i *AiPrompt) ToAiPromptOutput() AiPromptOutput {
	return i.ToAiPromptOutputWithContext(context.Background())
}

func (i *AiPrompt) ToAiPromptOutputWithContext(ctx context.Context) AiPromptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiPromptOutput)
}

type AiPromptOutput struct{ *pulumi.OutputState }

func (AiPromptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiPrompt)(nil)).Elem()
}

func (o AiPromptOutput) ToAiPromptOutput() AiPromptOutput {
	return o
}

func (o AiPromptOutput) ToAiPromptOutputWithContext(ctx context.Context) AiPromptOutput {
	return o
}

func (o AiPromptOutput) AiPromptArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringOutput { return v.AiPromptArn }).(pulumi.StringOutput)
}

func (o AiPromptOutput) AiPromptId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringOutput { return v.AiPromptId }).(pulumi.StringOutput)
}

func (o AiPromptOutput) ApiFormat() AiPromptAiPromptApiFormatOutput {
	return o.ApplyT(func(v *AiPrompt) AiPromptAiPromptApiFormatOutput { return v.ApiFormat }).(AiPromptAiPromptApiFormatOutput)
}

func (o AiPromptOutput) AssistantArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringOutput { return v.AssistantArn }).(pulumi.StringOutput)
}

func (o AiPromptOutput) AssistantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringPtrOutput { return v.AssistantId }).(pulumi.StringPtrOutput)
}

func (o AiPromptOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AiPromptOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringOutput { return v.ModelId }).(pulumi.StringOutput)
}

func (o AiPromptOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o AiPromptOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiPrompt) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AiPromptOutput) TemplateConfiguration() AiPromptAiPromptTemplateConfigurationOutput {
	return o.ApplyT(func(v *AiPrompt) AiPromptAiPromptTemplateConfigurationOutput { return v.TemplateConfiguration }).(AiPromptAiPromptTemplateConfigurationOutput)
}

func (o AiPromptOutput) TemplateType() AiPromptAiPromptTemplateTypeOutput {
	return o.ApplyT(func(v *AiPrompt) AiPromptAiPromptTemplateTypeOutput { return v.TemplateType }).(AiPromptAiPromptTemplateTypeOutput)
}

func (o AiPromptOutput) Type() AiPromptAiPromptTypeOutput {
	return o.ApplyT(func(v *AiPrompt) AiPromptAiPromptTypeOutput { return v.Type }).(AiPromptAiPromptTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiPromptInput)(nil)).Elem(), &AiPrompt{})
	pulumi.RegisterOutputType(AiPromptOutput{})
}
