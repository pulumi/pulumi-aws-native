// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AIGuardrailVersion Resource Type
func LookupAiGuardrailVersion(ctx *pulumi.Context, args *LookupAiGuardrailVersionArgs, opts ...pulumi.InvokeOption) (*LookupAiGuardrailVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAiGuardrailVersionResult
	err := ctx.Invoke("aws-native:wisdom:getAiGuardrailVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAiGuardrailVersionArgs struct {
	AiGuardrailId string `pulumi:"aiGuardrailId"`
	AssistantId   string `pulumi:"assistantId"`
	// The version number for this AI Guardrail version.
	VersionNumber float64 `pulumi:"versionNumber"`
}

type LookupAiGuardrailVersionResult struct {
	AiGuardrailArn       *string `pulumi:"aiGuardrailArn"`
	AiGuardrailVersionId *string `pulumi:"aiGuardrailVersionId"`
	AssistantArn         *string `pulumi:"assistantArn"`
	// The version number for this AI Guardrail version.
	VersionNumber *float64 `pulumi:"versionNumber"`
}

func LookupAiGuardrailVersionOutput(ctx *pulumi.Context, args LookupAiGuardrailVersionOutputArgs, opts ...pulumi.InvokeOption) LookupAiGuardrailVersionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAiGuardrailVersionResultOutput, error) {
			args := v.(LookupAiGuardrailVersionArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAiGuardrailVersionResult
			secret, err := ctx.InvokePackageRaw("aws-native:wisdom:getAiGuardrailVersion", args, &rv, "", opts...)
			if err != nil {
				return LookupAiGuardrailVersionResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAiGuardrailVersionResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAiGuardrailVersionResultOutput), nil
			}
			return output, nil
		}).(LookupAiGuardrailVersionResultOutput)
}

type LookupAiGuardrailVersionOutputArgs struct {
	AiGuardrailId pulumi.StringInput `pulumi:"aiGuardrailId"`
	AssistantId   pulumi.StringInput `pulumi:"assistantId"`
	// The version number for this AI Guardrail version.
	VersionNumber pulumi.Float64Input `pulumi:"versionNumber"`
}

func (LookupAiGuardrailVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAiGuardrailVersionArgs)(nil)).Elem()
}

type LookupAiGuardrailVersionResultOutput struct{ *pulumi.OutputState }

func (LookupAiGuardrailVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAiGuardrailVersionResult)(nil)).Elem()
}

func (o LookupAiGuardrailVersionResultOutput) ToLookupAiGuardrailVersionResultOutput() LookupAiGuardrailVersionResultOutput {
	return o
}

func (o LookupAiGuardrailVersionResultOutput) ToLookupAiGuardrailVersionResultOutputWithContext(ctx context.Context) LookupAiGuardrailVersionResultOutput {
	return o
}

func (o LookupAiGuardrailVersionResultOutput) AiGuardrailArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiGuardrailVersionResult) *string { return v.AiGuardrailArn }).(pulumi.StringPtrOutput)
}

func (o LookupAiGuardrailVersionResultOutput) AiGuardrailVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiGuardrailVersionResult) *string { return v.AiGuardrailVersionId }).(pulumi.StringPtrOutput)
}

func (o LookupAiGuardrailVersionResultOutput) AssistantArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiGuardrailVersionResult) *string { return v.AssistantArn }).(pulumi.StringPtrOutput)
}

// The version number for this AI Guardrail version.
func (o LookupAiGuardrailVersionResultOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAiGuardrailVersionResult) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAiGuardrailVersionResultOutput{})
}
