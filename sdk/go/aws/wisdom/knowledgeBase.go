// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::KnowledgeBase Resource Type
type KnowledgeBase struct {
	pulumi.CustomResourceState

	Description                       pulumi.StringPtrOutput                                  `pulumi:"description"`
	KnowledgeBaseArn                  pulumi.StringOutput                                     `pulumi:"knowledgeBaseArn"`
	KnowledgeBaseId                   pulumi.StringOutput                                     `pulumi:"knowledgeBaseId"`
	KnowledgeBaseType                 KnowledgeBaseTypeOutput                                 `pulumi:"knowledgeBaseType"`
	Name                              pulumi.StringOutput                                     `pulumi:"name"`
	RenderingConfiguration            KnowledgeBaseRenderingConfigurationPtrOutput            `pulumi:"renderingConfiguration"`
	ServerSideEncryptionConfiguration KnowledgeBaseServerSideEncryptionConfigurationPtrOutput `pulumi:"serverSideEncryptionConfiguration"`
	SourceConfiguration               KnowledgeBaseSourceConfigurationPtrOutput               `pulumi:"sourceConfiguration"`
	Tags                              KnowledgeBaseTagArrayOutput                             `pulumi:"tags"`
}

// NewKnowledgeBase registers a new resource with the given unique name, arguments, and options.
func NewKnowledgeBase(ctx *pulumi.Context,
	name string, args *KnowledgeBaseArgs, opts ...pulumi.ResourceOption) (*KnowledgeBase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KnowledgeBaseType == nil {
		return nil, errors.New("invalid value for required argument 'KnowledgeBaseType'")
	}
	var resource KnowledgeBase
	err := ctx.RegisterResource("aws-native:wisdom:KnowledgeBase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKnowledgeBase gets an existing KnowledgeBase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKnowledgeBase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KnowledgeBaseState, opts ...pulumi.ResourceOption) (*KnowledgeBase, error) {
	var resource KnowledgeBase
	err := ctx.ReadResource("aws-native:wisdom:KnowledgeBase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KnowledgeBase resources.
type knowledgeBaseState struct {
}

type KnowledgeBaseState struct {
}

func (KnowledgeBaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*knowledgeBaseState)(nil)).Elem()
}

type knowledgeBaseArgs struct {
	Description                       *string                                         `pulumi:"description"`
	KnowledgeBaseType                 KnowledgeBaseType                               `pulumi:"knowledgeBaseType"`
	Name                              *string                                         `pulumi:"name"`
	RenderingConfiguration            *KnowledgeBaseRenderingConfiguration            `pulumi:"renderingConfiguration"`
	ServerSideEncryptionConfiguration *KnowledgeBaseServerSideEncryptionConfiguration `pulumi:"serverSideEncryptionConfiguration"`
	SourceConfiguration               *KnowledgeBaseSourceConfiguration               `pulumi:"sourceConfiguration"`
	Tags                              []KnowledgeBaseTag                              `pulumi:"tags"`
}

// The set of arguments for constructing a KnowledgeBase resource.
type KnowledgeBaseArgs struct {
	Description                       pulumi.StringPtrInput
	KnowledgeBaseType                 KnowledgeBaseTypeInput
	Name                              pulumi.StringPtrInput
	RenderingConfiguration            KnowledgeBaseRenderingConfigurationPtrInput
	ServerSideEncryptionConfiguration KnowledgeBaseServerSideEncryptionConfigurationPtrInput
	SourceConfiguration               KnowledgeBaseSourceConfigurationPtrInput
	Tags                              KnowledgeBaseTagArrayInput
}

func (KnowledgeBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*knowledgeBaseArgs)(nil)).Elem()
}

type KnowledgeBaseInput interface {
	pulumi.Input

	ToKnowledgeBaseOutput() KnowledgeBaseOutput
	ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput
}

func (*KnowledgeBase) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil))
}

func (i *KnowledgeBase) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return i.ToKnowledgeBaseOutputWithContext(context.Background())
}

func (i *KnowledgeBase) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KnowledgeBaseOutput)
}

type KnowledgeBaseOutput struct{ *pulumi.OutputState }

func (KnowledgeBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KnowledgeBase)(nil))
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutput() KnowledgeBaseOutput {
	return o
}

func (o KnowledgeBaseOutput) ToKnowledgeBaseOutputWithContext(ctx context.Context) KnowledgeBaseOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KnowledgeBaseInput)(nil)).Elem(), &KnowledgeBase{})
	pulumi.RegisterOutputType(KnowledgeBaseOutput{})
}
