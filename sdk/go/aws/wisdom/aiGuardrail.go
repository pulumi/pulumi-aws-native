// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AIGuardrail Resource Type
type AiGuardrail struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the AI Guardrail.
	AiGuardrailArn pulumi.StringOutput `pulumi:"aiGuardrailArn"`
	// The identifier of the Amazon Q in Connect AI Guardrail.
	AiGuardrailId pulumi.StringOutput `pulumi:"aiGuardrailId"`
	// The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.
	AssistantArn pulumi.StringOutput `pulumi:"assistantArn"`
	// The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
	AssistantId pulumi.StringOutput `pulumi:"assistantId"`
	// Messaging for when violations are detected in text
	BlockedInputMessaging pulumi.StringOutput `pulumi:"blockedInputMessaging"`
	// Messaging for when violations are detected in text
	BlockedOutputsMessaging pulumi.StringOutput `pulumi:"blockedOutputsMessaging"`
	// Contains details about how to handle harmful content.
	ContentPolicyConfig AiGuardrailAiGuardrailContentPolicyConfigPtrOutput `pulumi:"contentPolicyConfig"`
	// The policy configuration details for the AI Guardrail's contextual grounding policy.
	ContextualGroundingPolicyConfig AiGuardrailAiGuardrailContextualGroundingPolicyConfigPtrOutput `pulumi:"contextualGroundingPolicyConfig"`
	// Description of the guardrail or its version
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the AI Guardrail.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Contains details about PII entities and regular expressions to configure for the AI Guardrail.
	SensitiveInformationPolicyConfig AiGuardrailAiGuardrailSensitiveInformationPolicyConfigPtrOutput `pulumi:"sensitiveInformationPolicyConfig"`
	// The tags used to organize, track, or control access for this resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Contains details about topics that the AI Guardrail should identify and deny.
	TopicPolicyConfig AiGuardrailAiGuardrailTopicPolicyConfigPtrOutput `pulumi:"topicPolicyConfig"`
	// Contains details about the word policy to configured for the AI Guardrail.
	WordPolicyConfig AiGuardrailAiGuardrailWordPolicyConfigPtrOutput `pulumi:"wordPolicyConfig"`
}

// NewAiGuardrail registers a new resource with the given unique name, arguments, and options.
func NewAiGuardrail(ctx *pulumi.Context,
	name string, args *AiGuardrailArgs, opts ...pulumi.ResourceOption) (*AiGuardrail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssistantId == nil {
		return nil, errors.New("invalid value for required argument 'AssistantId'")
	}
	if args.BlockedInputMessaging == nil {
		return nil, errors.New("invalid value for required argument 'BlockedInputMessaging'")
	}
	if args.BlockedOutputsMessaging == nil {
		return nil, errors.New("invalid value for required argument 'BlockedOutputsMessaging'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"assistantId",
		"name",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiGuardrail
	err := ctx.RegisterResource("aws-native:wisdom:AiGuardrail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiGuardrail gets an existing AiGuardrail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiGuardrail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiGuardrailState, opts ...pulumi.ResourceOption) (*AiGuardrail, error) {
	var resource AiGuardrail
	err := ctx.ReadResource("aws-native:wisdom:AiGuardrail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiGuardrail resources.
type aiGuardrailState struct {
}

type AiGuardrailState struct {
}

func (AiGuardrailState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiGuardrailState)(nil)).Elem()
}

type aiGuardrailArgs struct {
	// The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
	AssistantId string `pulumi:"assistantId"`
	// Messaging for when violations are detected in text
	BlockedInputMessaging string `pulumi:"blockedInputMessaging"`
	// Messaging for when violations are detected in text
	BlockedOutputsMessaging string `pulumi:"blockedOutputsMessaging"`
	// Contains details about how to handle harmful content.
	ContentPolicyConfig *AiGuardrailAiGuardrailContentPolicyConfig `pulumi:"contentPolicyConfig"`
	// The policy configuration details for the AI Guardrail's contextual grounding policy.
	ContextualGroundingPolicyConfig *AiGuardrailAiGuardrailContextualGroundingPolicyConfig `pulumi:"contextualGroundingPolicyConfig"`
	// Description of the guardrail or its version
	Description *string `pulumi:"description"`
	// The name of the AI Guardrail.
	Name *string `pulumi:"name"`
	// Contains details about PII entities and regular expressions to configure for the AI Guardrail.
	SensitiveInformationPolicyConfig *AiGuardrailAiGuardrailSensitiveInformationPolicyConfig `pulumi:"sensitiveInformationPolicyConfig"`
	// The tags used to organize, track, or control access for this resource.
	Tags map[string]string `pulumi:"tags"`
	// Contains details about topics that the AI Guardrail should identify and deny.
	TopicPolicyConfig *AiGuardrailAiGuardrailTopicPolicyConfig `pulumi:"topicPolicyConfig"`
	// Contains details about the word policy to configured for the AI Guardrail.
	WordPolicyConfig *AiGuardrailAiGuardrailWordPolicyConfig `pulumi:"wordPolicyConfig"`
}

// The set of arguments for constructing a AiGuardrail resource.
type AiGuardrailArgs struct {
	// The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
	AssistantId pulumi.StringInput
	// Messaging for when violations are detected in text
	BlockedInputMessaging pulumi.StringInput
	// Messaging for when violations are detected in text
	BlockedOutputsMessaging pulumi.StringInput
	// Contains details about how to handle harmful content.
	ContentPolicyConfig AiGuardrailAiGuardrailContentPolicyConfigPtrInput
	// The policy configuration details for the AI Guardrail's contextual grounding policy.
	ContextualGroundingPolicyConfig AiGuardrailAiGuardrailContextualGroundingPolicyConfigPtrInput
	// Description of the guardrail or its version
	Description pulumi.StringPtrInput
	// The name of the AI Guardrail.
	Name pulumi.StringPtrInput
	// Contains details about PII entities and regular expressions to configure for the AI Guardrail.
	SensitiveInformationPolicyConfig AiGuardrailAiGuardrailSensitiveInformationPolicyConfigPtrInput
	// The tags used to organize, track, or control access for this resource.
	Tags pulumi.StringMapInput
	// Contains details about topics that the AI Guardrail should identify and deny.
	TopicPolicyConfig AiGuardrailAiGuardrailTopicPolicyConfigPtrInput
	// Contains details about the word policy to configured for the AI Guardrail.
	WordPolicyConfig AiGuardrailAiGuardrailWordPolicyConfigPtrInput
}

func (AiGuardrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiGuardrailArgs)(nil)).Elem()
}

type AiGuardrailInput interface {
	pulumi.Input

	ToAiGuardrailOutput() AiGuardrailOutput
	ToAiGuardrailOutputWithContext(ctx context.Context) AiGuardrailOutput
}

func (*AiGuardrail) ElementType() reflect.Type {
	return reflect.TypeOf((**AiGuardrail)(nil)).Elem()
}

func (i *AiGuardrail) ToAiGuardrailOutput() AiGuardrailOutput {
	return i.ToAiGuardrailOutputWithContext(context.Background())
}

func (i *AiGuardrail) ToAiGuardrailOutputWithContext(ctx context.Context) AiGuardrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiGuardrailOutput)
}

type AiGuardrailOutput struct{ *pulumi.OutputState }

func (AiGuardrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiGuardrail)(nil)).Elem()
}

func (o AiGuardrailOutput) ToAiGuardrailOutput() AiGuardrailOutput {
	return o
}

func (o AiGuardrailOutput) ToAiGuardrailOutputWithContext(ctx context.Context) AiGuardrailOutput {
	return o
}

// The Amazon Resource Name (ARN) of the AI Guardrail.
func (o AiGuardrailOutput) AiGuardrailArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringOutput { return v.AiGuardrailArn }).(pulumi.StringOutput)
}

// The identifier of the Amazon Q in Connect AI Guardrail.
func (o AiGuardrailOutput) AiGuardrailId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringOutput { return v.AiGuardrailId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.
func (o AiGuardrailOutput) AssistantArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringOutput { return v.AssistantArn }).(pulumi.StringOutput)
}

// The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
func (o AiGuardrailOutput) AssistantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringOutput { return v.AssistantId }).(pulumi.StringOutput)
}

// Messaging for when violations are detected in text
func (o AiGuardrailOutput) BlockedInputMessaging() pulumi.StringOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringOutput { return v.BlockedInputMessaging }).(pulumi.StringOutput)
}

// Messaging for when violations are detected in text
func (o AiGuardrailOutput) BlockedOutputsMessaging() pulumi.StringOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringOutput { return v.BlockedOutputsMessaging }).(pulumi.StringOutput)
}

// Contains details about how to handle harmful content.
func (o AiGuardrailOutput) ContentPolicyConfig() AiGuardrailAiGuardrailContentPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AiGuardrail) AiGuardrailAiGuardrailContentPolicyConfigPtrOutput { return v.ContentPolicyConfig }).(AiGuardrailAiGuardrailContentPolicyConfigPtrOutput)
}

// The policy configuration details for the AI Guardrail's contextual grounding policy.
func (o AiGuardrailOutput) ContextualGroundingPolicyConfig() AiGuardrailAiGuardrailContextualGroundingPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AiGuardrail) AiGuardrailAiGuardrailContextualGroundingPolicyConfigPtrOutput {
		return v.ContextualGroundingPolicyConfig
	}).(AiGuardrailAiGuardrailContextualGroundingPolicyConfigPtrOutput)
}

// Description of the guardrail or its version
func (o AiGuardrailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the AI Guardrail.
func (o AiGuardrailOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Contains details about PII entities and regular expressions to configure for the AI Guardrail.
func (o AiGuardrailOutput) SensitiveInformationPolicyConfig() AiGuardrailAiGuardrailSensitiveInformationPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AiGuardrail) AiGuardrailAiGuardrailSensitiveInformationPolicyConfigPtrOutput {
		return v.SensitiveInformationPolicyConfig
	}).(AiGuardrailAiGuardrailSensitiveInformationPolicyConfigPtrOutput)
}

// The tags used to organize, track, or control access for this resource.
func (o AiGuardrailOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiGuardrail) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Contains details about topics that the AI Guardrail should identify and deny.
func (o AiGuardrailOutput) TopicPolicyConfig() AiGuardrailAiGuardrailTopicPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AiGuardrail) AiGuardrailAiGuardrailTopicPolicyConfigPtrOutput { return v.TopicPolicyConfig }).(AiGuardrailAiGuardrailTopicPolicyConfigPtrOutput)
}

// Contains details about the word policy to configured for the AI Guardrail.
func (o AiGuardrailOutput) WordPolicyConfig() AiGuardrailAiGuardrailWordPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AiGuardrail) AiGuardrailAiGuardrailWordPolicyConfigPtrOutput { return v.WordPolicyConfig }).(AiGuardrailAiGuardrailWordPolicyConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiGuardrailInput)(nil)).Elem(), &AiGuardrail{})
	pulumi.RegisterOutputType(AiGuardrailOutput{})
}
