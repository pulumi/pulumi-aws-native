// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AssistantAssociation Resource Type
type AssistantAssociation struct {
	pulumi.CustomResourceState

	AssistantArn            pulumi.StringOutput                       `pulumi:"assistantArn"`
	AssistantAssociationArn pulumi.StringOutput                       `pulumi:"assistantAssociationArn"`
	AssistantAssociationId  pulumi.StringOutput                       `pulumi:"assistantAssociationId"`
	AssistantId             pulumi.StringOutput                       `pulumi:"assistantId"`
	Association             AssistantAssociationAssociationDataOutput `pulumi:"association"`
	AssociationType         AssistantAssociationAssociationTypeOutput `pulumi:"associationType"`
	Tags                    AssistantAssociationTagArrayOutput        `pulumi:"tags"`
}

// NewAssistantAssociation registers a new resource with the given unique name, arguments, and options.
func NewAssistantAssociation(ctx *pulumi.Context,
	name string, args *AssistantAssociationArgs, opts ...pulumi.ResourceOption) (*AssistantAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssistantId == nil {
		return nil, errors.New("invalid value for required argument 'AssistantId'")
	}
	if args.Association == nil {
		return nil, errors.New("invalid value for required argument 'Association'")
	}
	if args.AssociationType == nil {
		return nil, errors.New("invalid value for required argument 'AssociationType'")
	}
	var resource AssistantAssociation
	err := ctx.RegisterResource("aws-native:wisdom:AssistantAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssistantAssociation gets an existing AssistantAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssistantAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssistantAssociationState, opts ...pulumi.ResourceOption) (*AssistantAssociation, error) {
	var resource AssistantAssociation
	err := ctx.ReadResource("aws-native:wisdom:AssistantAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssistantAssociation resources.
type assistantAssociationState struct {
}

type AssistantAssociationState struct {
}

func (AssistantAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantAssociationState)(nil)).Elem()
}

type assistantAssociationArgs struct {
	AssistantId     string                              `pulumi:"assistantId"`
	Association     AssistantAssociationAssociationData `pulumi:"association"`
	AssociationType AssistantAssociationAssociationType `pulumi:"associationType"`
	Tags            []AssistantAssociationTag           `pulumi:"tags"`
}

// The set of arguments for constructing a AssistantAssociation resource.
type AssistantAssociationArgs struct {
	AssistantId     pulumi.StringInput
	Association     AssistantAssociationAssociationDataInput
	AssociationType AssistantAssociationAssociationTypeInput
	Tags            AssistantAssociationTagArrayInput
}

func (AssistantAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantAssociationArgs)(nil)).Elem()
}

type AssistantAssociationInput interface {
	pulumi.Input

	ToAssistantAssociationOutput() AssistantAssociationOutput
	ToAssistantAssociationOutputWithContext(ctx context.Context) AssistantAssociationOutput
}

func (*AssistantAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*AssistantAssociation)(nil))
}

func (i *AssistantAssociation) ToAssistantAssociationOutput() AssistantAssociationOutput {
	return i.ToAssistantAssociationOutputWithContext(context.Background())
}

func (i *AssistantAssociation) ToAssistantAssociationOutputWithContext(ctx context.Context) AssistantAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantAssociationOutput)
}

type AssistantAssociationOutput struct{ *pulumi.OutputState }

func (AssistantAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssistantAssociation)(nil))
}

func (o AssistantAssociationOutput) ToAssistantAssociationOutput() AssistantAssociationOutput {
	return o
}

func (o AssistantAssociationOutput) ToAssistantAssociationOutputWithContext(ctx context.Context) AssistantAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AssistantAssociationOutput{})
}
