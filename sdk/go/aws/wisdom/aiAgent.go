// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AIAgent Resource Type
type AiAgent struct {
	pulumi.CustomResourceState

	AiAgentArn    pulumi.StringOutput      `pulumi:"aiAgentArn"`
	AiAgentId     pulumi.StringOutput      `pulumi:"aiAgentId"`
	AssistantArn  pulumi.StringOutput      `pulumi:"assistantArn"`
	AssistantId   pulumi.StringOutput      `pulumi:"assistantId"`
	Configuration pulumi.AnyOutput         `pulumi:"configuration"`
	Description   pulumi.StringPtrOutput   `pulumi:"description"`
	Name          pulumi.StringPtrOutput   `pulumi:"name"`
	Tags          pulumi.StringMapOutput   `pulumi:"tags"`
	Type          AiAgentAiAgentTypeOutput `pulumi:"type"`
}

// NewAiAgent registers a new resource with the given unique name, arguments, and options.
func NewAiAgent(ctx *pulumi.Context,
	name string, args *AiAgentArgs, opts ...pulumi.ResourceOption) (*AiAgent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssistantId == nil {
		return nil, errors.New("invalid value for required argument 'AssistantId'")
	}
	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"assistantId",
		"name",
		"tags.*",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AiAgent
	err := ctx.RegisterResource("aws-native:wisdom:AiAgent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAiAgent gets an existing AiAgent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAiAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AiAgentState, opts ...pulumi.ResourceOption) (*AiAgent, error) {
	var resource AiAgent
	err := ctx.ReadResource("aws-native:wisdom:AiAgent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AiAgent resources.
type aiAgentState struct {
}

type AiAgentState struct {
}

func (AiAgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*aiAgentState)(nil)).Elem()
}

type aiAgentArgs struct {
	AssistantId   string             `pulumi:"assistantId"`
	Configuration interface{}        `pulumi:"configuration"`
	Description   *string            `pulumi:"description"`
	Name          *string            `pulumi:"name"`
	Tags          map[string]string  `pulumi:"tags"`
	Type          AiAgentAiAgentType `pulumi:"type"`
}

// The set of arguments for constructing a AiAgent resource.
type AiAgentArgs struct {
	AssistantId   pulumi.StringInput
	Configuration pulumi.Input
	Description   pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
	Type          AiAgentAiAgentTypeInput
}

func (AiAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aiAgentArgs)(nil)).Elem()
}

type AiAgentInput interface {
	pulumi.Input

	ToAiAgentOutput() AiAgentOutput
	ToAiAgentOutputWithContext(ctx context.Context) AiAgentOutput
}

func (*AiAgent) ElementType() reflect.Type {
	return reflect.TypeOf((**AiAgent)(nil)).Elem()
}

func (i *AiAgent) ToAiAgentOutput() AiAgentOutput {
	return i.ToAiAgentOutputWithContext(context.Background())
}

func (i *AiAgent) ToAiAgentOutputWithContext(ctx context.Context) AiAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AiAgentOutput)
}

type AiAgentOutput struct{ *pulumi.OutputState }

func (AiAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AiAgent)(nil)).Elem()
}

func (o AiAgentOutput) ToAiAgentOutput() AiAgentOutput {
	return o
}

func (o AiAgentOutput) ToAiAgentOutputWithContext(ctx context.Context) AiAgentOutput {
	return o
}

func (o AiAgentOutput) AiAgentArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.StringOutput { return v.AiAgentArn }).(pulumi.StringOutput)
}

func (o AiAgentOutput) AiAgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.StringOutput { return v.AiAgentId }).(pulumi.StringOutput)
}

func (o AiAgentOutput) AssistantArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.StringOutput { return v.AssistantArn }).(pulumi.StringOutput)
}

func (o AiAgentOutput) AssistantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.StringOutput { return v.AssistantId }).(pulumi.StringOutput)
}

func (o AiAgentOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

func (o AiAgentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AiAgentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o AiAgentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AiAgent) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AiAgentOutput) Type() AiAgentAiAgentTypeOutput {
	return o.ApplyT(func(v *AiAgent) AiAgentAiAgentTypeOutput { return v.Type }).(AiAgentAiAgentTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AiAgentInput)(nil)).Elem(), &AiAgent{})
	pulumi.RegisterOutputType(AiAgentOutput{})
}
