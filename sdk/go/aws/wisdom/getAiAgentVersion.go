// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wisdom

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Wisdom::AIAgentVersion Resource Type
func LookupAiAgentVersion(ctx *pulumi.Context, args *LookupAiAgentVersionArgs, opts ...pulumi.InvokeOption) (*LookupAiAgentVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAiAgentVersionResult
	err := ctx.Invoke("aws-native:wisdom:getAiAgentVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAiAgentVersionArgs struct {
	// The identifier of the AI Agent.
	AiAgentId   string `pulumi:"aiAgentId"`
	AssistantId string `pulumi:"assistantId"`
	// The version number for this AI Agent version.
	VersionNumber float64 `pulumi:"versionNumber"`
}

type LookupAiAgentVersionResult struct {
	AiAgentArn       *string `pulumi:"aiAgentArn"`
	AiAgentVersionId *string `pulumi:"aiAgentVersionId"`
	AssistantArn     *string `pulumi:"assistantArn"`
	// The version number for this AI Agent version.
	VersionNumber *float64 `pulumi:"versionNumber"`
}

func LookupAiAgentVersionOutput(ctx *pulumi.Context, args LookupAiAgentVersionOutputArgs, opts ...pulumi.InvokeOption) LookupAiAgentVersionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAiAgentVersionResultOutput, error) {
			args := v.(LookupAiAgentVersionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:wisdom:getAiAgentVersion", args, LookupAiAgentVersionResultOutput{}, options).(LookupAiAgentVersionResultOutput), nil
		}).(LookupAiAgentVersionResultOutput)
}

type LookupAiAgentVersionOutputArgs struct {
	// The identifier of the AI Agent.
	AiAgentId   pulumi.StringInput `pulumi:"aiAgentId"`
	AssistantId pulumi.StringInput `pulumi:"assistantId"`
	// The version number for this AI Agent version.
	VersionNumber pulumi.Float64Input `pulumi:"versionNumber"`
}

func (LookupAiAgentVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAiAgentVersionArgs)(nil)).Elem()
}

type LookupAiAgentVersionResultOutput struct{ *pulumi.OutputState }

func (LookupAiAgentVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAiAgentVersionResult)(nil)).Elem()
}

func (o LookupAiAgentVersionResultOutput) ToLookupAiAgentVersionResultOutput() LookupAiAgentVersionResultOutput {
	return o
}

func (o LookupAiAgentVersionResultOutput) ToLookupAiAgentVersionResultOutputWithContext(ctx context.Context) LookupAiAgentVersionResultOutput {
	return o
}

func (o LookupAiAgentVersionResultOutput) AiAgentArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiAgentVersionResult) *string { return v.AiAgentArn }).(pulumi.StringPtrOutput)
}

func (o LookupAiAgentVersionResultOutput) AiAgentVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiAgentVersionResult) *string { return v.AiAgentVersionId }).(pulumi.StringPtrOutput)
}

func (o LookupAiAgentVersionResultOutput) AssistantArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAiAgentVersionResult) *string { return v.AssistantArn }).(pulumi.StringPtrOutput)
}

// The version number for this AI Agent version.
func (o LookupAiAgentVersionResultOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAiAgentVersionResult) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAiAgentVersionResultOutput{})
}
