// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package paymentcryptography

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type KeyAttributes struct {
	KeyAlgorithm  KeyAlgorithm  `pulumi:"keyAlgorithm"`
	KeyClass      KeyClass      `pulumi:"keyClass"`
	KeyModesOfUse KeyModesOfUse `pulumi:"keyModesOfUse"`
	KeyUsage      KeyUsage      `pulumi:"keyUsage"`
}

// KeyAttributesInput is an input type that accepts KeyAttributesArgs and KeyAttributesOutput values.
// You can construct a concrete instance of `KeyAttributesInput` via:
//
//	KeyAttributesArgs{...}
type KeyAttributesInput interface {
	pulumi.Input

	ToKeyAttributesOutput() KeyAttributesOutput
	ToKeyAttributesOutputWithContext(context.Context) KeyAttributesOutput
}

type KeyAttributesArgs struct {
	KeyAlgorithm  KeyAlgorithmInput  `pulumi:"keyAlgorithm"`
	KeyClass      KeyClassInput      `pulumi:"keyClass"`
	KeyModesOfUse KeyModesOfUseInput `pulumi:"keyModesOfUse"`
	KeyUsage      KeyUsageInput      `pulumi:"keyUsage"`
}

func (KeyAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyAttributes)(nil)).Elem()
}

func (i KeyAttributesArgs) ToKeyAttributesOutput() KeyAttributesOutput {
	return i.ToKeyAttributesOutputWithContext(context.Background())
}

func (i KeyAttributesArgs) ToKeyAttributesOutputWithContext(ctx context.Context) KeyAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyAttributesOutput)
}

type KeyAttributesOutput struct{ *pulumi.OutputState }

func (KeyAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyAttributes)(nil)).Elem()
}

func (o KeyAttributesOutput) ToKeyAttributesOutput() KeyAttributesOutput {
	return o
}

func (o KeyAttributesOutput) ToKeyAttributesOutputWithContext(ctx context.Context) KeyAttributesOutput {
	return o
}

func (o KeyAttributesOutput) KeyAlgorithm() KeyAlgorithmOutput {
	return o.ApplyT(func(v KeyAttributes) KeyAlgorithm { return v.KeyAlgorithm }).(KeyAlgorithmOutput)
}

func (o KeyAttributesOutput) KeyClass() KeyClassOutput {
	return o.ApplyT(func(v KeyAttributes) KeyClass { return v.KeyClass }).(KeyClassOutput)
}

func (o KeyAttributesOutput) KeyModesOfUse() KeyModesOfUseOutput {
	return o.ApplyT(func(v KeyAttributes) KeyModesOfUse { return v.KeyModesOfUse }).(KeyModesOfUseOutput)
}

func (o KeyAttributesOutput) KeyUsage() KeyUsageOutput {
	return o.ApplyT(func(v KeyAttributes) KeyUsage { return v.KeyUsage }).(KeyUsageOutput)
}

type KeyAttributesPtrOutput struct{ *pulumi.OutputState }

func (KeyAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyAttributes)(nil)).Elem()
}

func (o KeyAttributesPtrOutput) ToKeyAttributesPtrOutput() KeyAttributesPtrOutput {
	return o
}

func (o KeyAttributesPtrOutput) ToKeyAttributesPtrOutputWithContext(ctx context.Context) KeyAttributesPtrOutput {
	return o
}

func (o KeyAttributesPtrOutput) Elem() KeyAttributesOutput {
	return o.ApplyT(func(v *KeyAttributes) KeyAttributes {
		if v != nil {
			return *v
		}
		var ret KeyAttributes
		return ret
	}).(KeyAttributesOutput)
}

func (o KeyAttributesPtrOutput) KeyAlgorithm() KeyAlgorithmPtrOutput {
	return o.ApplyT(func(v *KeyAttributes) *KeyAlgorithm {
		if v == nil {
			return nil
		}
		return &v.KeyAlgorithm
	}).(KeyAlgorithmPtrOutput)
}

func (o KeyAttributesPtrOutput) KeyClass() KeyClassPtrOutput {
	return o.ApplyT(func(v *KeyAttributes) *KeyClass {
		if v == nil {
			return nil
		}
		return &v.KeyClass
	}).(KeyClassPtrOutput)
}

func (o KeyAttributesPtrOutput) KeyModesOfUse() KeyModesOfUsePtrOutput {
	return o.ApplyT(func(v *KeyAttributes) *KeyModesOfUse {
		if v == nil {
			return nil
		}
		return &v.KeyModesOfUse
	}).(KeyModesOfUsePtrOutput)
}

func (o KeyAttributesPtrOutput) KeyUsage() KeyUsagePtrOutput {
	return o.ApplyT(func(v *KeyAttributes) *KeyUsage {
		if v == nil {
			return nil
		}
		return &v.KeyUsage
	}).(KeyUsagePtrOutput)
}

type KeyModesOfUse struct {
	Decrypt        *bool `pulumi:"decrypt"`
	DeriveKey      *bool `pulumi:"deriveKey"`
	Encrypt        *bool `pulumi:"encrypt"`
	Generate       *bool `pulumi:"generate"`
	NoRestrictions *bool `pulumi:"noRestrictions"`
	Sign           *bool `pulumi:"sign"`
	Unwrap         *bool `pulumi:"unwrap"`
	Verify         *bool `pulumi:"verify"`
	Wrap           *bool `pulumi:"wrap"`
}

// KeyModesOfUseInput is an input type that accepts KeyModesOfUseArgs and KeyModesOfUseOutput values.
// You can construct a concrete instance of `KeyModesOfUseInput` via:
//
//	KeyModesOfUseArgs{...}
type KeyModesOfUseInput interface {
	pulumi.Input

	ToKeyModesOfUseOutput() KeyModesOfUseOutput
	ToKeyModesOfUseOutputWithContext(context.Context) KeyModesOfUseOutput
}

type KeyModesOfUseArgs struct {
	Decrypt        pulumi.BoolPtrInput `pulumi:"decrypt"`
	DeriveKey      pulumi.BoolPtrInput `pulumi:"deriveKey"`
	Encrypt        pulumi.BoolPtrInput `pulumi:"encrypt"`
	Generate       pulumi.BoolPtrInput `pulumi:"generate"`
	NoRestrictions pulumi.BoolPtrInput `pulumi:"noRestrictions"`
	Sign           pulumi.BoolPtrInput `pulumi:"sign"`
	Unwrap         pulumi.BoolPtrInput `pulumi:"unwrap"`
	Verify         pulumi.BoolPtrInput `pulumi:"verify"`
	Wrap           pulumi.BoolPtrInput `pulumi:"wrap"`
}

func (KeyModesOfUseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyModesOfUse)(nil)).Elem()
}

func (i KeyModesOfUseArgs) ToKeyModesOfUseOutput() KeyModesOfUseOutput {
	return i.ToKeyModesOfUseOutputWithContext(context.Background())
}

func (i KeyModesOfUseArgs) ToKeyModesOfUseOutputWithContext(ctx context.Context) KeyModesOfUseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyModesOfUseOutput)
}

type KeyModesOfUseOutput struct{ *pulumi.OutputState }

func (KeyModesOfUseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyModesOfUse)(nil)).Elem()
}

func (o KeyModesOfUseOutput) ToKeyModesOfUseOutput() KeyModesOfUseOutput {
	return o
}

func (o KeyModesOfUseOutput) ToKeyModesOfUseOutputWithContext(ctx context.Context) KeyModesOfUseOutput {
	return o
}

func (o KeyModesOfUseOutput) Decrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.Decrypt }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) DeriveKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.DeriveKey }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) Encrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.Encrypt }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) Generate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.Generate }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) NoRestrictions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.NoRestrictions }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) Sign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.Sign }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) Unwrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.Unwrap }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUseOutput) Wrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyModesOfUse) *bool { return v.Wrap }).(pulumi.BoolPtrOutput)
}

type KeyModesOfUsePtrOutput struct{ *pulumi.OutputState }

func (KeyModesOfUsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyModesOfUse)(nil)).Elem()
}

func (o KeyModesOfUsePtrOutput) ToKeyModesOfUsePtrOutput() KeyModesOfUsePtrOutput {
	return o
}

func (o KeyModesOfUsePtrOutput) ToKeyModesOfUsePtrOutputWithContext(ctx context.Context) KeyModesOfUsePtrOutput {
	return o
}

func (o KeyModesOfUsePtrOutput) Elem() KeyModesOfUseOutput {
	return o.ApplyT(func(v *KeyModesOfUse) KeyModesOfUse {
		if v != nil {
			return *v
		}
		var ret KeyModesOfUse
		return ret
	}).(KeyModesOfUseOutput)
}

func (o KeyModesOfUsePtrOutput) Decrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Decrypt
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) DeriveKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.DeriveKey
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) Encrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypt
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) Generate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Generate
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) NoRestrictions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.NoRestrictions
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) Sign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Sign
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) Unwrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Unwrap
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

func (o KeyModesOfUsePtrOutput) Wrap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyModesOfUse) *bool {
		if v == nil {
			return nil
		}
		return v.Wrap
	}).(pulumi.BoolPtrOutput)
}

type KeyTag struct {
	Key   string  `pulumi:"key"`
	Value *string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyAttributesInput)(nil)).Elem(), KeyAttributesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyModesOfUseInput)(nil)).Elem(), KeyModesOfUseArgs{})
	pulumi.RegisterOutputType(KeyAttributesOutput{})
	pulumi.RegisterOutputType(KeyAttributesPtrOutput{})
	pulumi.RegisterOutputType(KeyModesOfUseOutput{})
	pulumi.RegisterOutputType(KeyModesOfUsePtrOutput{})
}
