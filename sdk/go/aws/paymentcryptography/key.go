// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package paymentcryptography

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::PaymentCryptography::Key Resource Type
type Key struct {
	pulumi.CustomResourceState

	Enabled                pulumi.BoolPtrOutput            `pulumi:"enabled"`
	Exportable             pulumi.BoolOutput               `pulumi:"exportable"`
	KeyAttributes          KeyAttributesOutput             `pulumi:"keyAttributes"`
	KeyCheckValueAlgorithm KeyCheckValueAlgorithmPtrOutput `pulumi:"keyCheckValueAlgorithm"`
	KeyIdentifier          pulumi.StringOutput             `pulumi:"keyIdentifier"`
	KeyOrigin              KeyOriginOutput                 `pulumi:"keyOrigin"`
	KeyState               KeyStateEnumOutput              `pulumi:"keyState"`
	Tags                   aws.TagArrayOutput              `pulumi:"tags"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Exportable == nil {
		return nil, errors.New("invalid value for required argument 'Exportable'")
	}
	if args.KeyAttributes == nil {
		return nil, errors.New("invalid value for required argument 'KeyAttributes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Key
	err := ctx.RegisterResource("aws-native:paymentcryptography:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("aws-native:paymentcryptography:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
}

type KeyState struct {
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	Enabled                *bool                   `pulumi:"enabled"`
	Exportable             bool                    `pulumi:"exportable"`
	KeyAttributes          KeyAttributes           `pulumi:"keyAttributes"`
	KeyCheckValueAlgorithm *KeyCheckValueAlgorithm `pulumi:"keyCheckValueAlgorithm"`
	Tags                   []aws.Tag               `pulumi:"tags"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	Enabled                pulumi.BoolPtrInput
	Exportable             pulumi.BoolInput
	KeyAttributes          KeyAttributesInput
	KeyCheckValueAlgorithm KeyCheckValueAlgorithmPtrInput
	Tags                   aws.TagArrayInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

type KeyOutput struct{ *pulumi.OutputState }

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

func (o KeyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o KeyOutput) Exportable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolOutput { return v.Exportable }).(pulumi.BoolOutput)
}

func (o KeyOutput) KeyAttributes() KeyAttributesOutput {
	return o.ApplyT(func(v *Key) KeyAttributesOutput { return v.KeyAttributes }).(KeyAttributesOutput)
}

func (o KeyOutput) KeyCheckValueAlgorithm() KeyCheckValueAlgorithmPtrOutput {
	return o.ApplyT(func(v *Key) KeyCheckValueAlgorithmPtrOutput { return v.KeyCheckValueAlgorithm }).(KeyCheckValueAlgorithmPtrOutput)
}

func (o KeyOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyIdentifier }).(pulumi.StringOutput)
}

func (o KeyOutput) KeyOrigin() KeyOriginOutput {
	return o.ApplyT(func(v *Key) KeyOriginOutput { return v.KeyOrigin }).(KeyOriginOutput)
}

func (o KeyOutput) KeyState() KeyStateEnumOutput {
	return o.ApplyT(func(v *Key) KeyStateEnumOutput { return v.KeyState }).(KeyStateEnumOutput)
}

func (o KeyOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Key) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyInput)(nil)).Elem(), &Key{})
	pulumi.RegisterOutputType(KeyOutput{})
}
