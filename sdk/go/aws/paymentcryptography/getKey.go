// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package paymentcryptography

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::PaymentCryptography::Key Resource Type
func LookupKey(ctx *pulumi.Context, args *LookupKeyArgs, opts ...pulumi.InvokeOption) (*LookupKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyResult
	err := ctx.Invoke("aws-native:paymentcryptography:getKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupKeyArgs struct {
	KeyIdentifier string `pulumi:"keyIdentifier"`
}

type LookupKeyResult struct {
	// Specifies whether the key is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Specifies whether the key is exportable. This data is immutable after the key is created.
	Exportable *bool `pulumi:"exportable"`
	// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
	KeyAttributes *KeyAttributes `pulumi:"keyAttributes"`
	// The algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.
	//
	// For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
	KeyCheckValueAlgorithm *KeyCheckValueAlgorithm `pulumi:"keyCheckValueAlgorithm"`
	KeyIdentifier          *string                 `pulumi:"keyIdentifier"`
	// The source of the key material. For keys created within AWS Payment Cryptography, the value is `AWS_PAYMENT_CRYPTOGRAPHY` . For keys imported into AWS Payment Cryptography, the value is `EXTERNAL` .
	KeyOrigin *KeyOrigin `pulumi:"keyOrigin"`
	// The state of key that is being created or deleted.
	KeyState *KeyStateEnum `pulumi:"keyState"`
	Tags     []aws.Tag     `pulumi:"tags"`
}

func LookupKeyOutput(ctx *pulumi.Context, args LookupKeyOutputArgs, opts ...pulumi.InvokeOption) LookupKeyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupKeyResultOutput, error) {
			args := v.(LookupKeyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:paymentcryptography:getKey", args, LookupKeyResultOutput{}, options).(LookupKeyResultOutput), nil
		}).(LookupKeyResultOutput)
}

type LookupKeyOutputArgs struct {
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
}

func (LookupKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyArgs)(nil)).Elem()
}

type LookupKeyResultOutput struct{ *pulumi.OutputState }

func (LookupKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyResult)(nil)).Elem()
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutput() LookupKeyResultOutput {
	return o
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutputWithContext(ctx context.Context) LookupKeyResultOutput {
	return o
}

// Specifies whether the key is enabled.
func (o LookupKeyResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether the key is exportable. This data is immutable after the key is created.
func (o LookupKeyResultOutput) Exportable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *bool { return v.Exportable }).(pulumi.BoolPtrOutput)
}

// The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.
func (o LookupKeyResultOutput) KeyAttributes() KeyAttributesPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *KeyAttributes { return v.KeyAttributes }).(KeyAttributesPtrOutput)
}

// The algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.
//
// For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.
func (o LookupKeyResultOutput) KeyCheckValueAlgorithm() KeyCheckValueAlgorithmPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *KeyCheckValueAlgorithm { return v.KeyCheckValueAlgorithm }).(KeyCheckValueAlgorithmPtrOutput)
}

func (o LookupKeyResultOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *string { return v.KeyIdentifier }).(pulumi.StringPtrOutput)
}

// The source of the key material. For keys created within AWS Payment Cryptography, the value is `AWS_PAYMENT_CRYPTOGRAPHY` . For keys imported into AWS Payment Cryptography, the value is `EXTERNAL` .
func (o LookupKeyResultOutput) KeyOrigin() KeyOriginPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *KeyOrigin { return v.KeyOrigin }).(KeyOriginPtrOutput)
}

// The state of key that is being created or deleted.
func (o LookupKeyResultOutput) KeyState() KeyStateEnumPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *KeyStateEnum { return v.KeyState }).(KeyStateEnumPtrOutput)
}

func (o LookupKeyResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupKeyResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyResultOutput{})
}
