// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package macie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Macie FindingsFilter resource schema.
type FindingsFilter struct {
	pulumi.CustomResourceState

	// Findings filter action.
	Action FindingsFilterFindingFilterActionPtrOutput `pulumi:"action"`
	// Findings filter ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Findings filter description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Findings filter criteria.
	FindingCriteria FindingsFilterFindingCriteriaOutput `pulumi:"findingCriteria"`
	// Findings filters list.
	FindingsFilterListItems FindingsFilterListItemArrayOutput `pulumi:"findingsFilterListItems"`
	// Findings filter name
	Name pulumi.StringOutput `pulumi:"name"`
	// Findings filter position.
	Position pulumi.IntPtrOutput `pulumi:"position"`
}

// NewFindingsFilter registers a new resource with the given unique name, arguments, and options.
func NewFindingsFilter(ctx *pulumi.Context,
	name string, args *FindingsFilterArgs, opts ...pulumi.ResourceOption) (*FindingsFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FindingCriteria == nil {
		return nil, errors.New("invalid value for required argument 'FindingCriteria'")
	}
	var resource FindingsFilter
	err := ctx.RegisterResource("aws-native:macie:FindingsFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFindingsFilter gets an existing FindingsFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFindingsFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FindingsFilterState, opts ...pulumi.ResourceOption) (*FindingsFilter, error) {
	var resource FindingsFilter
	err := ctx.ReadResource("aws-native:macie:FindingsFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FindingsFilter resources.
type findingsFilterState struct {
}

type FindingsFilterState struct {
}

func (FindingsFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*findingsFilterState)(nil)).Elem()
}

type findingsFilterArgs struct {
	// Findings filter action.
	Action *FindingsFilterFindingFilterAction `pulumi:"action"`
	// Findings filter description
	Description *string `pulumi:"description"`
	// Findings filter criteria.
	FindingCriteria FindingsFilterFindingCriteria `pulumi:"findingCriteria"`
	// Findings filter name
	Name *string `pulumi:"name"`
	// Findings filter position.
	Position *int `pulumi:"position"`
}

// The set of arguments for constructing a FindingsFilter resource.
type FindingsFilterArgs struct {
	// Findings filter action.
	Action FindingsFilterFindingFilterActionPtrInput
	// Findings filter description
	Description pulumi.StringPtrInput
	// Findings filter criteria.
	FindingCriteria FindingsFilterFindingCriteriaInput
	// Findings filter name
	Name pulumi.StringPtrInput
	// Findings filter position.
	Position pulumi.IntPtrInput
}

func (FindingsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*findingsFilterArgs)(nil)).Elem()
}

type FindingsFilterInput interface {
	pulumi.Input

	ToFindingsFilterOutput() FindingsFilterOutput
	ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput
}

func (*FindingsFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingsFilter)(nil)).Elem()
}

func (i *FindingsFilter) ToFindingsFilterOutput() FindingsFilterOutput {
	return i.ToFindingsFilterOutputWithContext(context.Background())
}

func (i *FindingsFilter) ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FindingsFilterOutput)
}

type FindingsFilterOutput struct{ *pulumi.OutputState }

func (FindingsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FindingsFilter)(nil)).Elem()
}

func (o FindingsFilterOutput) ToFindingsFilterOutput() FindingsFilterOutput {
	return o
}

func (o FindingsFilterOutput) ToFindingsFilterOutputWithContext(ctx context.Context) FindingsFilterOutput {
	return o
}

// Findings filter action.
func (o FindingsFilterOutput) Action() FindingsFilterFindingFilterActionPtrOutput {
	return o.ApplyT(func(v *FindingsFilter) FindingsFilterFindingFilterActionPtrOutput { return v.Action }).(FindingsFilterFindingFilterActionPtrOutput)
}

// Findings filter ARN.
func (o FindingsFilterOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Findings filter description
func (o FindingsFilterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Findings filter criteria.
func (o FindingsFilterOutput) FindingCriteria() FindingsFilterFindingCriteriaOutput {
	return o.ApplyT(func(v *FindingsFilter) FindingsFilterFindingCriteriaOutput { return v.FindingCriteria }).(FindingsFilterFindingCriteriaOutput)
}

// Findings filters list.
func (o FindingsFilterOutput) FindingsFilterListItems() FindingsFilterListItemArrayOutput {
	return o.ApplyT(func(v *FindingsFilter) FindingsFilterListItemArrayOutput { return v.FindingsFilterListItems }).(FindingsFilterListItemArrayOutput)
}

// Findings filter name
func (o FindingsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Findings filter position.
func (o FindingsFilterOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FindingsFilter) pulumi.IntPtrOutput { return v.Position }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FindingsFilterInput)(nil)).Elem(), &FindingsFilter{})
	pulumi.RegisterOutputType(FindingsFilterOutput{})
}
