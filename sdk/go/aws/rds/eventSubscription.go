// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::RDS::EventSubscription“ resource allows you to receive notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service (Amazon SNS). For more information, see [Using Amazon RDS Event Notification](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html) in the *Amazon RDS User Guide*.
type EventSubscription struct {
	pulumi.CustomResourceState

	// Specifies whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A list of event categories for a particular source type (``SourceType``) that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the [Amazon RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html) or the [Amazon Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html). You can also see this list by using the ``DescribeEventCategories`` operation.
	EventCategories pulumi.StringArrayOutput `pulumi:"eventCategories"`
	// The Amazon Resource Name (ARN) of the SNS topic created for event notification. SNS automatically creates the ARN when you create a topic and subscribe to it.
	//   RDS doesn't support FIFO (first in, first out) topics. For more information, see [Message ordering and deduplication (FIFO topics)](https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html) in the *Amazon Simple Notification Service Developer Guide*.
	SnsTopicArn pulumi.StringOutput `pulumi:"snsTopicArn"`
	// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
	//  Constraints:
	//   +  If ``SourceIds`` are supplied, ``SourceType`` must also be provided.
	//   +  If the source type is a DB instance, a ``DBInstanceIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster, a ``DBClusterIdentifier`` value must be supplied.
	//   +  If the source type is a DB parameter group, a ``DBParameterGroupName`` value must be supplied.
	//   +  If the source type is a DB security group, a ``DBSecurityGroupName`` value must be supplied.
	//   +  If the source type is a DB snapshot, a ``DBSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster snapshot, a ``DBClusterSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is an RDS Proxy, a ``DBProxyName`` value must be supplied.
	SourceIds pulumi.StringArrayOutput `pulumi:"sourceIds"`
	// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to ``db-instance``. For RDS Proxy events, specify ``db-proxy``. If this value isn't specified, all events are returned.
	//  Valid Values:``db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy | zero-etl | custom-engine-version | blue-green-deployment``
	SourceType pulumi.StringPtrOutput `pulumi:"sourceType"`
	// The name of the subscription.
	//  Constraints: The name must be less than 255 characters.
	SubscriptionName pulumi.StringPtrOutput `pulumi:"subscriptionName"`
	// An optional array of key-value pairs to apply to this subscription.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewEventSubscription registers a new resource with the given unique name, arguments, and options.
func NewEventSubscription(ctx *pulumi.Context,
	name string, args *EventSubscriptionArgs, opts ...pulumi.ResourceOption) (*EventSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SnsTopicArn == nil {
		return nil, errors.New("invalid value for required argument 'SnsTopicArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"snsTopicArn",
		"subscriptionName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventSubscription
	err := ctx.RegisterResource("aws-native:rds:EventSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSubscription gets an existing EventSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSubscriptionState, opts ...pulumi.ResourceOption) (*EventSubscription, error) {
	var resource EventSubscription
	err := ctx.ReadResource("aws-native:rds:EventSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSubscription resources.
type eventSubscriptionState struct {
}

type EventSubscriptionState struct {
}

func (EventSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSubscriptionState)(nil)).Elem()
}

type eventSubscriptionArgs struct {
	// Specifies whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
	Enabled *bool `pulumi:"enabled"`
	// A list of event categories for a particular source type (``SourceType``) that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the [Amazon RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html) or the [Amazon Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html). You can also see this list by using the ``DescribeEventCategories`` operation.
	EventCategories []string `pulumi:"eventCategories"`
	// The Amazon Resource Name (ARN) of the SNS topic created for event notification. SNS automatically creates the ARN when you create a topic and subscribe to it.
	//   RDS doesn't support FIFO (first in, first out) topics. For more information, see [Message ordering and deduplication (FIFO topics)](https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html) in the *Amazon Simple Notification Service Developer Guide*.
	SnsTopicArn string `pulumi:"snsTopicArn"`
	// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
	//  Constraints:
	//   +  If ``SourceIds`` are supplied, ``SourceType`` must also be provided.
	//   +  If the source type is a DB instance, a ``DBInstanceIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster, a ``DBClusterIdentifier`` value must be supplied.
	//   +  If the source type is a DB parameter group, a ``DBParameterGroupName`` value must be supplied.
	//   +  If the source type is a DB security group, a ``DBSecurityGroupName`` value must be supplied.
	//   +  If the source type is a DB snapshot, a ``DBSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster snapshot, a ``DBClusterSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is an RDS Proxy, a ``DBProxyName`` value must be supplied.
	SourceIds []string `pulumi:"sourceIds"`
	// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to ``db-instance``. For RDS Proxy events, specify ``db-proxy``. If this value isn't specified, all events are returned.
	//  Valid Values:``db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy | zero-etl | custom-engine-version | blue-green-deployment``
	SourceType *string `pulumi:"sourceType"`
	// The name of the subscription.
	//  Constraints: The name must be less than 255 characters.
	SubscriptionName *string `pulumi:"subscriptionName"`
	// An optional array of key-value pairs to apply to this subscription.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a EventSubscription resource.
type EventSubscriptionArgs struct {
	// Specifies whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
	Enabled pulumi.BoolPtrInput
	// A list of event categories for a particular source type (``SourceType``) that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the [Amazon RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html) or the [Amazon Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html). You can also see this list by using the ``DescribeEventCategories`` operation.
	EventCategories pulumi.StringArrayInput
	// The Amazon Resource Name (ARN) of the SNS topic created for event notification. SNS automatically creates the ARN when you create a topic and subscribe to it.
	//   RDS doesn't support FIFO (first in, first out) topics. For more information, see [Message ordering and deduplication (FIFO topics)](https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html) in the *Amazon Simple Notification Service Developer Guide*.
	SnsTopicArn pulumi.StringInput
	// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
	//  Constraints:
	//   +  If ``SourceIds`` are supplied, ``SourceType`` must also be provided.
	//   +  If the source type is a DB instance, a ``DBInstanceIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster, a ``DBClusterIdentifier`` value must be supplied.
	//   +  If the source type is a DB parameter group, a ``DBParameterGroupName`` value must be supplied.
	//   +  If the source type is a DB security group, a ``DBSecurityGroupName`` value must be supplied.
	//   +  If the source type is a DB snapshot, a ``DBSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster snapshot, a ``DBClusterSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is an RDS Proxy, a ``DBProxyName`` value must be supplied.
	SourceIds pulumi.StringArrayInput
	// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to ``db-instance``. For RDS Proxy events, specify ``db-proxy``. If this value isn't specified, all events are returned.
	//  Valid Values:``db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy | zero-etl | custom-engine-version | blue-green-deployment``
	SourceType pulumi.StringPtrInput
	// The name of the subscription.
	//  Constraints: The name must be less than 255 characters.
	SubscriptionName pulumi.StringPtrInput
	// An optional array of key-value pairs to apply to this subscription.
	Tags aws.TagArrayInput
}

func (EventSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSubscriptionArgs)(nil)).Elem()
}

type EventSubscriptionInput interface {
	pulumi.Input

	ToEventSubscriptionOutput() EventSubscriptionOutput
	ToEventSubscriptionOutputWithContext(ctx context.Context) EventSubscriptionOutput
}

func (*EventSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscription)(nil)).Elem()
}

func (i *EventSubscription) ToEventSubscriptionOutput() EventSubscriptionOutput {
	return i.ToEventSubscriptionOutputWithContext(context.Background())
}

func (i *EventSubscription) ToEventSubscriptionOutputWithContext(ctx context.Context) EventSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionOutput)
}

type EventSubscriptionOutput struct{ *pulumi.OutputState }

func (EventSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscription)(nil)).Elem()
}

func (o EventSubscriptionOutput) ToEventSubscriptionOutput() EventSubscriptionOutput {
	return o
}

func (o EventSubscriptionOutput) ToEventSubscriptionOutputWithContext(ctx context.Context) EventSubscriptionOutput {
	return o
}

// Specifies whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
func (o EventSubscriptionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A list of event categories for a particular source type (“SourceType“) that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the [Amazon RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html) or the [Amazon Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html). You can also see this list by using the “DescribeEventCategories“ operation.
func (o EventSubscriptionOutput) EventCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringArrayOutput { return v.EventCategories }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the SNS topic created for event notification. SNS automatically creates the ARN when you create a topic and subscribe to it.
//
//	RDS doesn't support FIFO (first in, first out) topics. For more information, see [Message ordering and deduplication (FIFO topics)](https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html) in the *Amazon Simple Notification Service Developer Guide*.
func (o EventSubscriptionOutput) SnsTopicArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.SnsTopicArn }).(pulumi.StringOutput)
}

// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
//
//	Constraints:
//	 +  If ``SourceIds`` are supplied, ``SourceType`` must also be provided.
//	 +  If the source type is a DB instance, a ``DBInstanceIdentifier`` value must be supplied.
//	 +  If the source type is a DB cluster, a ``DBClusterIdentifier`` value must be supplied.
//	 +  If the source type is a DB parameter group, a ``DBParameterGroupName`` value must be supplied.
//	 +  If the source type is a DB security group, a ``DBSecurityGroupName`` value must be supplied.
//	 +  If the source type is a DB snapshot, a ``DBSnapshotIdentifier`` value must be supplied.
//	 +  If the source type is a DB cluster snapshot, a ``DBClusterSnapshotIdentifier`` value must be supplied.
//	 +  If the source type is an RDS Proxy, a ``DBProxyName`` value must be supplied.
func (o EventSubscriptionOutput) SourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringArrayOutput { return v.SourceIds }).(pulumi.StringArrayOutput)
}

// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to “db-instance“. For RDS Proxy events, specify “db-proxy“. If this value isn't specified, all events are returned.
//
//	Valid Values:``db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy | zero-etl | custom-engine-version | blue-green-deployment``
func (o EventSubscriptionOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringPtrOutput { return v.SourceType }).(pulumi.StringPtrOutput)
}

// The name of the subscription.
//
//	Constraints: The name must be less than 255 characters.
func (o EventSubscriptionOutput) SubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringPtrOutput { return v.SubscriptionName }).(pulumi.StringPtrOutput)
}

// An optional array of key-value pairs to apply to this subscription.
func (o EventSubscriptionOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *EventSubscription) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionInput)(nil)).Elem(), &EventSubscription{})
	pulumi.RegisterOutputType(EventSubscriptionOutput{})
}
