// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new DB shard group for Aurora Limitless Database. You must enable Aurora Limitless Database to create a DB shard group.
//
//	Valid for: Aurora DB clusters only
type DbShardGroup struct {
	pulumi.CustomResourceState

	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are the following:
	//   +  0 - Creates a DB shard group without a standby DB shard group. This is the default value.
	//   +  1 - Creates a DB shard group with a standby DB shard group in a different Availability Zone (AZ).
	//   +  2 - Creates a DB shard group with two standby DB shard groups in two different AZs.
	ComputeRedundancy pulumi.IntPtrOutput `pulumi:"computeRedundancy"`
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier pulumi.StringOutput `pulumi:"dbClusterIdentifier"`
	// The name of the DB shard group.
	DbShardGroupIdentifier pulumi.StringPtrOutput `pulumi:"dbShardGroupIdentifier"`
	// The AWS Region -unique, immutable identifier for the DB shard group.
	DbShardGroupResourceId pulumi.StringOutput `pulumi:"dbShardGroupResourceId"`
	// This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:
	//
	// - `CreateDBInstance`
	// - `DescribeDBInstances`
	// - `DeleteDBInstance`
	//
	// For the data structure that represents Amazon Aurora DB cluster endpoints, see `DBClusterEndpoint` .
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu pulumi.Float64Output `pulumi:"maxAcu"`
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu pulumi.Float64PtrOutput `pulumi:"minAcu"`
	// Specifies whether the DB shard group is publicly accessible.
	//  When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB shard group doesn't permit it.
	//  When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address.
	//  Default: The default behavior varies depending on whether ``DBSubnetGroupName`` is specified.
	//  If ``DBSubnetGroupName`` isn't specified, and ``PubliclyAccessible`` isn't specified, the following applies:
	//   +  If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB shard group is private.
	//   +  If the default VPC in the target Region has an internet gateway attached to it, the DB shard group is public.
	//
	//  If ``DBSubnetGroupName`` is specified, and ``PubliclyAccessible`` isn't specified, the following applies:
	//   +  If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB shard group is private.
	//   +  If the subnets are part of a VPC that has an internet gateway attached to it, the DB shard group is public.
	PubliclyAccessible pulumi.BoolPtrOutput `pulumi:"publiclyAccessible"`
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the DB shard group.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDbShardGroup registers a new resource with the given unique name, arguments, and options.
func NewDbShardGroup(ctx *pulumi.Context,
	name string, args *DbShardGroupArgs, opts ...pulumi.ResourceOption) (*DbShardGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterIdentifier'")
	}
	if args.MaxAcu == nil {
		return nil, errors.New("invalid value for required argument 'MaxAcu'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dbClusterIdentifier",
		"dbShardGroupIdentifier",
		"publiclyAccessible",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbShardGroup
	err := ctx.RegisterResource("aws-native:rds:DbShardGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbShardGroup gets an existing DbShardGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbShardGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbShardGroupState, opts ...pulumi.ResourceOption) (*DbShardGroup, error) {
	var resource DbShardGroup
	err := ctx.ReadResource("aws-native:rds:DbShardGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbShardGroup resources.
type dbShardGroupState struct {
}

type DbShardGroupState struct {
}

func (DbShardGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbShardGroupState)(nil)).Elem()
}

type dbShardGroupArgs struct {
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are the following:
	//   +  0 - Creates a DB shard group without a standby DB shard group. This is the default value.
	//   +  1 - Creates a DB shard group with a standby DB shard group in a different Availability Zone (AZ).
	//   +  2 - Creates a DB shard group with two standby DB shard groups in two different AZs.
	ComputeRedundancy *int `pulumi:"computeRedundancy"`
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier string `pulumi:"dbClusterIdentifier"`
	// The name of the DB shard group.
	DbShardGroupIdentifier *string `pulumi:"dbShardGroupIdentifier"`
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu float64 `pulumi:"maxAcu"`
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu *float64 `pulumi:"minAcu"`
	// Specifies whether the DB shard group is publicly accessible.
	//  When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB shard group doesn't permit it.
	//  When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address.
	//  Default: The default behavior varies depending on whether ``DBSubnetGroupName`` is specified.
	//  If ``DBSubnetGroupName`` isn't specified, and ``PubliclyAccessible`` isn't specified, the following applies:
	//   +  If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB shard group is private.
	//   +  If the default VPC in the target Region has an internet gateway attached to it, the DB shard group is public.
	//
	//  If ``DBSubnetGroupName`` is specified, and ``PubliclyAccessible`` isn't specified, the following applies:
	//   +  If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB shard group is private.
	//   +  If the subnets are part of a VPC that has an internet gateway attached to it, the DB shard group is public.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the DB shard group.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a DbShardGroup resource.
type DbShardGroupArgs struct {
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are the following:
	//   +  0 - Creates a DB shard group without a standby DB shard group. This is the default value.
	//   +  1 - Creates a DB shard group with a standby DB shard group in a different Availability Zone (AZ).
	//   +  2 - Creates a DB shard group with two standby DB shard groups in two different AZs.
	ComputeRedundancy pulumi.IntPtrInput
	// The name of the primary DB cluster for the DB shard group.
	DbClusterIdentifier pulumi.StringInput
	// The name of the DB shard group.
	DbShardGroupIdentifier pulumi.StringPtrInput
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu pulumi.Float64Input
	// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
	MinAcu pulumi.Float64PtrInput
	// Specifies whether the DB shard group is publicly accessible.
	//  When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB shard group doesn't permit it.
	//  When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address.
	//  Default: The default behavior varies depending on whether ``DBSubnetGroupName`` is specified.
	//  If ``DBSubnetGroupName`` isn't specified, and ``PubliclyAccessible`` isn't specified, the following applies:
	//   +  If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB shard group is private.
	//   +  If the default VPC in the target Region has an internet gateway attached to it, the DB shard group is public.
	//
	//  If ``DBSubnetGroupName`` is specified, and ``PubliclyAccessible`` isn't specified, the following applies:
	//   +  If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB shard group is private.
	//   +  If the subnets are part of a VPC that has an internet gateway attached to it, the DB shard group is public.
	PubliclyAccessible pulumi.BoolPtrInput
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the DB shard group.
	Tags aws.TagArrayInput
}

func (DbShardGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbShardGroupArgs)(nil)).Elem()
}

type DbShardGroupInput interface {
	pulumi.Input

	ToDbShardGroupOutput() DbShardGroupOutput
	ToDbShardGroupOutputWithContext(ctx context.Context) DbShardGroupOutput
}

func (*DbShardGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DbShardGroup)(nil)).Elem()
}

func (i *DbShardGroup) ToDbShardGroupOutput() DbShardGroupOutput {
	return i.ToDbShardGroupOutputWithContext(context.Background())
}

func (i *DbShardGroup) ToDbShardGroupOutputWithContext(ctx context.Context) DbShardGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbShardGroupOutput)
}

type DbShardGroupOutput struct{ *pulumi.OutputState }

func (DbShardGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbShardGroup)(nil)).Elem()
}

func (o DbShardGroupOutput) ToDbShardGroupOutput() DbShardGroupOutput {
	return o
}

func (o DbShardGroupOutput) ToDbShardGroupOutputWithContext(ctx context.Context) DbShardGroupOutput {
	return o
}

// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are the following:
//   - 0 - Creates a DB shard group without a standby DB shard group. This is the default value.
//   - 1 - Creates a DB shard group with a standby DB shard group in a different Availability Zone (AZ).
//   - 2 - Creates a DB shard group with two standby DB shard groups in two different AZs.
func (o DbShardGroupOutput) ComputeRedundancy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbShardGroup) pulumi.IntPtrOutput { return v.ComputeRedundancy }).(pulumi.IntPtrOutput)
}

// The name of the primary DB cluster for the DB shard group.
func (o DbShardGroupOutput) DbClusterIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *DbShardGroup) pulumi.StringOutput { return v.DbClusterIdentifier }).(pulumi.StringOutput)
}

// The name of the DB shard group.
func (o DbShardGroupOutput) DbShardGroupIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbShardGroup) pulumi.StringPtrOutput { return v.DbShardGroupIdentifier }).(pulumi.StringPtrOutput)
}

// The AWS Region -unique, immutable identifier for the DB shard group.
func (o DbShardGroupOutput) DbShardGroupResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbShardGroup) pulumi.StringOutput { return v.DbShardGroupResourceId }).(pulumi.StringOutput)
}

// This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:
//
// - `CreateDBInstance`
// - `DescribeDBInstances`
// - `DeleteDBInstance`
//
// For the data structure that represents Amazon Aurora DB cluster endpoints, see `DBClusterEndpoint` .
func (o DbShardGroupOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *DbShardGroup) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
func (o DbShardGroupOutput) MaxAcu() pulumi.Float64Output {
	return o.ApplyT(func(v *DbShardGroup) pulumi.Float64Output { return v.MaxAcu }).(pulumi.Float64Output)
}

// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
func (o DbShardGroupOutput) MinAcu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DbShardGroup) pulumi.Float64PtrOutput { return v.MinAcu }).(pulumi.Float64PtrOutput)
}

// Specifies whether the DB shard group is publicly accessible.
//
//	When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB shard group doesn't permit it.
//	When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address.
//	Default: The default behavior varies depending on whether ``DBSubnetGroupName`` is specified.
//	If ``DBSubnetGroupName`` isn't specified, and ``PubliclyAccessible`` isn't specified, the following applies:
//	 +  If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB shard group is private.
//	 +  If the default VPC in the target Region has an internet gateway attached to it, the DB shard group is public.
//
//	If ``DBSubnetGroupName`` is specified, and ``PubliclyAccessible`` isn't specified, the following applies:
//	 +  If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB shard group is private.
//	 +  If the subnets are part of a VPC that has an internet gateway attached to it, the DB shard group is public.
func (o DbShardGroupOutput) PubliclyAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbShardGroup) pulumi.BoolPtrOutput { return v.PubliclyAccessible }).(pulumi.BoolPtrOutput)
}

// An optional set of key-value pairs to associate arbitrary data of your choosing with the DB shard group.
func (o DbShardGroupOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DbShardGroup) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbShardGroupInput)(nil)).Elem(), &DbShardGroup{})
	pulumi.RegisterOutputType(DbShardGroupOutput{})
}
