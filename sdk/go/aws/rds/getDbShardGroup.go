// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::RDS::DBShardGroup resource creates an Amazon Aurora Limitless DB Shard Group.
func LookupDbShardGroup(ctx *pulumi.Context, args *LookupDbShardGroupArgs, opts ...pulumi.InvokeOption) (*LookupDbShardGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbShardGroupResult
	err := ctx.Invoke("aws-native:rds:getDbShardGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDbShardGroupArgs struct {
	// The name of the DB shard group.
	DbShardGroupIdentifier string `pulumi:"dbShardGroupIdentifier"`
}

type LookupDbShardGroupResult struct {
	// Specifies whether to create standby instances for the DB shard group.
	ComputeRedundancy *int `pulumi:"computeRedundancy"`
	// The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
	DbShardGroupResourceId *string `pulumi:"dbShardGroupResourceId"`
	// The connection endpoint for the DB shard group.
	Endpoint *string `pulumi:"endpoint"`
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu *float64 `pulumi:"maxAcu"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupDbShardGroupOutput(ctx *pulumi.Context, args LookupDbShardGroupOutputArgs, opts ...pulumi.InvokeOption) LookupDbShardGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDbShardGroupResultOutput, error) {
			args := v.(LookupDbShardGroupArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDbShardGroupResult
			secret, err := ctx.InvokePackageRaw("aws-native:rds:getDbShardGroup", args, &rv, "", opts...)
			if err != nil {
				return LookupDbShardGroupResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDbShardGroupResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDbShardGroupResultOutput), nil
			}
			return output, nil
		}).(LookupDbShardGroupResultOutput)
}

type LookupDbShardGroupOutputArgs struct {
	// The name of the DB shard group.
	DbShardGroupIdentifier pulumi.StringInput `pulumi:"dbShardGroupIdentifier"`
}

func (LookupDbShardGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbShardGroupArgs)(nil)).Elem()
}

type LookupDbShardGroupResultOutput struct{ *pulumi.OutputState }

func (LookupDbShardGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbShardGroupResult)(nil)).Elem()
}

func (o LookupDbShardGroupResultOutput) ToLookupDbShardGroupResultOutput() LookupDbShardGroupResultOutput {
	return o
}

func (o LookupDbShardGroupResultOutput) ToLookupDbShardGroupResultOutputWithContext(ctx context.Context) LookupDbShardGroupResultOutput {
	return o
}

// Specifies whether to create standby instances for the DB shard group.
func (o LookupDbShardGroupResultOutput) ComputeRedundancy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *int { return v.ComputeRedundancy }).(pulumi.IntPtrOutput)
}

// The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
func (o LookupDbShardGroupResultOutput) DbShardGroupResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *string { return v.DbShardGroupResourceId }).(pulumi.StringPtrOutput)
}

// The connection endpoint for the DB shard group.
func (o LookupDbShardGroupResultOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
func (o LookupDbShardGroupResultOutput) MaxAcu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *float64 { return v.MaxAcu }).(pulumi.Float64PtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupDbShardGroupResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbShardGroupResultOutput{})
}
