// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new DB shard group for Aurora Limitless Database. You must enable Aurora Limitless Database to create a DB shard group.
//
//	Valid for: Aurora DB clusters only
func LookupDbShardGroup(ctx *pulumi.Context, args *LookupDbShardGroupArgs, opts ...pulumi.InvokeOption) (*LookupDbShardGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbShardGroupResult
	err := ctx.Invoke("aws-native:rds:getDbShardGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDbShardGroupArgs struct {
	// The name of the DB shard group.
	DbShardGroupIdentifier string `pulumi:"dbShardGroupIdentifier"`
}

type LookupDbShardGroupResult struct {
	// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are the following:
	//   +  0 - Creates a DB shard group without a standby DB shard group. This is the default value.
	//   +  1 - Creates a DB shard group with a standby DB shard group in a different Availability Zone (AZ).
	//   +  2 - Creates a DB shard group with two standby DB shard groups in two different AZs.
	ComputeRedundancy *int `pulumi:"computeRedundancy"`
	// The AWS Region -unique, immutable identifier for the DB shard group.
	DbShardGroupResourceId *string `pulumi:"dbShardGroupResourceId"`
	// This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:
	//
	// - `CreateDBInstance`
	// - `DescribeDBInstances`
	// - `DeleteDBInstance`
	//
	// For the data structure that represents Amazon Aurora DB cluster endpoints, see `DBClusterEndpoint` .
	Endpoint *string `pulumi:"endpoint"`
	// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
	MaxAcu *float64 `pulumi:"maxAcu"`
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the DB shard group.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupDbShardGroupOutput(ctx *pulumi.Context, args LookupDbShardGroupOutputArgs, opts ...pulumi.InvokeOption) LookupDbShardGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDbShardGroupResultOutput, error) {
			args := v.(LookupDbShardGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:rds:getDbShardGroup", args, LookupDbShardGroupResultOutput{}, options).(LookupDbShardGroupResultOutput), nil
		}).(LookupDbShardGroupResultOutput)
}

type LookupDbShardGroupOutputArgs struct {
	// The name of the DB shard group.
	DbShardGroupIdentifier pulumi.StringInput `pulumi:"dbShardGroupIdentifier"`
}

func (LookupDbShardGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbShardGroupArgs)(nil)).Elem()
}

type LookupDbShardGroupResultOutput struct{ *pulumi.OutputState }

func (LookupDbShardGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbShardGroupResult)(nil)).Elem()
}

func (o LookupDbShardGroupResultOutput) ToLookupDbShardGroupResultOutput() LookupDbShardGroupResultOutput {
	return o
}

func (o LookupDbShardGroupResultOutput) ToLookupDbShardGroupResultOutputWithContext(ctx context.Context) LookupDbShardGroupResultOutput {
	return o
}

// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are the following:
//   - 0 - Creates a DB shard group without a standby DB shard group. This is the default value.
//   - 1 - Creates a DB shard group with a standby DB shard group in a different Availability Zone (AZ).
//   - 2 - Creates a DB shard group with two standby DB shard groups in two different AZs.
func (o LookupDbShardGroupResultOutput) ComputeRedundancy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *int { return v.ComputeRedundancy }).(pulumi.IntPtrOutput)
}

// The AWS Region -unique, immutable identifier for the DB shard group.
func (o LookupDbShardGroupResultOutput) DbShardGroupResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *string { return v.DbShardGroupResourceId }).(pulumi.StringPtrOutput)
}

// This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:
//
// - `CreateDBInstance`
// - `DescribeDBInstances`
// - `DeleteDBInstance`
//
// For the data structure that represents Amazon Aurora DB cluster endpoints, see `DBClusterEndpoint` .
func (o LookupDbShardGroupResultOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
func (o LookupDbShardGroupResultOutput) MaxAcu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) *float64 { return v.MaxAcu }).(pulumi.Float64PtrOutput)
}

// An optional set of key-value pairs to associate arbitrary data of your choosing with the DB shard group.
func (o LookupDbShardGroupResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDbShardGroupResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbShardGroupResultOutput{})
}
