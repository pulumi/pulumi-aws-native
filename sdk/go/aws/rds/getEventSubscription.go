// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::RDS::EventSubscription resource allows you to receive notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service (Amazon SNS). For more information, see Using Amazon RDS Event Notification in the Amazon RDS User Guide.
func LookupEventSubscription(ctx *pulumi.Context, args *LookupEventSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupEventSubscriptionResult, error) {
	var rv LookupEventSubscriptionResult
	err := ctx.Invoke("aws-native:rds:getEventSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEventSubscriptionArgs struct {
	// The name of the subscription.
	SubscriptionName string `pulumi:"subscriptionName"`
}

type LookupEventSubscriptionResult struct {
	// A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
	Enabled *bool `pulumi:"enabled"`
	// A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
	EventCategories []string `pulumi:"eventCategories"`
	// The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
	SourceIds []string `pulumi:"sourceIds"`
	// The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
	SourceType *EventSubscriptionSourceType `pulumi:"sourceType"`
	// The name of the subscription.
	SubscriptionName *string `pulumi:"subscriptionName"`
	// An array of key-value pairs to apply to this resource.
	Tags []EventSubscriptionTag `pulumi:"tags"`
}

func LookupEventSubscriptionOutput(ctx *pulumi.Context, args LookupEventSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupEventSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEventSubscriptionResult, error) {
			args := v.(LookupEventSubscriptionArgs)
			r, err := LookupEventSubscription(ctx, &args, opts...)
			var s LookupEventSubscriptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEventSubscriptionResultOutput)
}

type LookupEventSubscriptionOutputArgs struct {
	// The name of the subscription.
	SubscriptionName pulumi.StringInput `pulumi:"subscriptionName"`
}

func (LookupEventSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSubscriptionArgs)(nil)).Elem()
}

type LookupEventSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupEventSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSubscriptionResult)(nil)).Elem()
}

func (o LookupEventSubscriptionResultOutput) ToLookupEventSubscriptionResultOutput() LookupEventSubscriptionResultOutput {
	return o
}

func (o LookupEventSubscriptionResultOutput) ToLookupEventSubscriptionResultOutputWithContext(ctx context.Context) LookupEventSubscriptionResultOutput {
	return o
}

// A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
func (o LookupEventSubscriptionResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
func (o LookupEventSubscriptionResultOutput) EventCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []string { return v.EventCategories }).(pulumi.StringArrayOutput)
}

// The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
func (o LookupEventSubscriptionResultOutput) SourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []string { return v.SourceIds }).(pulumi.StringArrayOutput)
}

// The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
func (o LookupEventSubscriptionResultOutput) SourceType() EventSubscriptionSourceTypePtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *EventSubscriptionSourceType { return v.SourceType }).(EventSubscriptionSourceTypePtrOutput)
}

// The name of the subscription.
func (o LookupEventSubscriptionResultOutput) SubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *string { return v.SubscriptionName }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupEventSubscriptionResultOutput) Tags() EventSubscriptionTagArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []EventSubscriptionTag { return v.Tags }).(EventSubscriptionTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventSubscriptionResultOutput{})
}
