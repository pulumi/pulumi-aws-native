// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::RDS::EventSubscription“ resource allows you to receive notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service (Amazon SNS). For more information, see [Using Amazon RDS Event Notification](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html) in the *Amazon RDS User Guide*.
func LookupEventSubscription(ctx *pulumi.Context, args *LookupEventSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupEventSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEventSubscriptionResult
	err := ctx.Invoke("aws-native:rds:getEventSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEventSubscriptionArgs struct {
	// The name of the subscription.
	//  Constraints: The name must be less than 255 characters.
	SubscriptionName string `pulumi:"subscriptionName"`
}

type LookupEventSubscriptionResult struct {
	// Specifies whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
	Enabled *bool `pulumi:"enabled"`
	// A list of event categories for a particular source type (``SourceType``) that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the [Amazon RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html) or the [Amazon Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html). You can also see this list by using the ``DescribeEventCategories`` operation.
	EventCategories []string `pulumi:"eventCategories"`
	// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
	//  Constraints:
	//   +  If ``SourceIds`` are supplied, ``SourceType`` must also be provided.
	//   +  If the source type is a DB instance, a ``DBInstanceIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster, a ``DBClusterIdentifier`` value must be supplied.
	//   +  If the source type is a DB parameter group, a ``DBParameterGroupName`` value must be supplied.
	//   +  If the source type is a DB security group, a ``DBSecurityGroupName`` value must be supplied.
	//   +  If the source type is a DB snapshot, a ``DBSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is a DB cluster snapshot, a ``DBClusterSnapshotIdentifier`` value must be supplied.
	//   +  If the source type is an RDS Proxy, a ``DBProxyName`` value must be supplied.
	SourceIds []string `pulumi:"sourceIds"`
	// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to ``db-instance``. For RDS Proxy events, specify ``db-proxy``. If this value isn't specified, all events are returned.
	//  Valid Values:``db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy | zero-etl | custom-engine-version | blue-green-deployment``
	SourceType *string `pulumi:"sourceType"`
	// An optional array of key-value pairs to apply to this subscription.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupEventSubscriptionOutput(ctx *pulumi.Context, args LookupEventSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupEventSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEventSubscriptionResultOutput, error) {
			args := v.(LookupEventSubscriptionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:rds:getEventSubscription", args, LookupEventSubscriptionResultOutput{}, options).(LookupEventSubscriptionResultOutput), nil
		}).(LookupEventSubscriptionResultOutput)
}

type LookupEventSubscriptionOutputArgs struct {
	// The name of the subscription.
	//  Constraints: The name must be less than 255 characters.
	SubscriptionName pulumi.StringInput `pulumi:"subscriptionName"`
}

func (LookupEventSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSubscriptionArgs)(nil)).Elem()
}

type LookupEventSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupEventSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSubscriptionResult)(nil)).Elem()
}

func (o LookupEventSubscriptionResultOutput) ToLookupEventSubscriptionResultOutput() LookupEventSubscriptionResultOutput {
	return o
}

func (o LookupEventSubscriptionResultOutput) ToLookupEventSubscriptionResultOutputWithContext(ctx context.Context) LookupEventSubscriptionResultOutput {
	return o
}

// Specifies whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
func (o LookupEventSubscriptionResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A list of event categories for a particular source type (“SourceType“) that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the [Amazon RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html) or the [Amazon Aurora User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html). You can also see this list by using the “DescribeEventCategories“ operation.
func (o LookupEventSubscriptionResultOutput) EventCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []string { return v.EventCategories }).(pulumi.StringArrayOutput)
}

// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.
//
//	Constraints:
//	 +  If ``SourceIds`` are supplied, ``SourceType`` must also be provided.
//	 +  If the source type is a DB instance, a ``DBInstanceIdentifier`` value must be supplied.
//	 +  If the source type is a DB cluster, a ``DBClusterIdentifier`` value must be supplied.
//	 +  If the source type is a DB parameter group, a ``DBParameterGroupName`` value must be supplied.
//	 +  If the source type is a DB security group, a ``DBSecurityGroupName`` value must be supplied.
//	 +  If the source type is a DB snapshot, a ``DBSnapshotIdentifier`` value must be supplied.
//	 +  If the source type is a DB cluster snapshot, a ``DBClusterSnapshotIdentifier`` value must be supplied.
//	 +  If the source type is an RDS Proxy, a ``DBProxyName`` value must be supplied.
func (o LookupEventSubscriptionResultOutput) SourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []string { return v.SourceIds }).(pulumi.StringArrayOutput)
}

// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you set this parameter to “db-instance“. For RDS Proxy events, specify “db-proxy“. If this value isn't specified, all events are returned.
//
//	Valid Values:``db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot | db-proxy | zero-etl | custom-engine-version | blue-green-deployment``
func (o LookupEventSubscriptionResultOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// An optional array of key-value pairs to apply to this subscription.
func (o LookupEventSubscriptionResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventSubscriptionResultOutput{})
}
