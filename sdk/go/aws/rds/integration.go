// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A zero-ETL integration with Amazon Redshift.
type Integration struct {
	pulumi.CustomResourceState

	// An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the *Key Management Service Developer Guide*.
	//  You can only include this parameter if you specify the ``KMSKeyId`` parameter.
	AdditionalEncryptionContext pulumi.StringMapOutput `pulumi:"additionalEncryptionContext"`
	// The time when the integration was created, in Universal Coordinated Time (UTC).
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Data filters for the integration. These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
	DataFilter pulumi.StringPtrOutput `pulumi:"dataFilter"`
	// A description of the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ARN of the integration.
	IntegrationArn pulumi.StringOutput `pulumi:"integrationArn"`
	// The name of the integration.
	IntegrationName pulumi.StringPtrOutput `pulumi:"integrationName"`
	// The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, RDS uses a default AWS owned key.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the database to use as the source for replication.
	SourceArn pulumi.StringOutput `pulumi:"sourceArn"`
	// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the *Amazon RDS User Guide.*.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ARN of the Redshift data warehouse to use as the target for replication.
	TargetArn pulumi.StringOutput `pulumi:"targetArn"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceArn'")
	}
	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"additionalEncryptionContext.*",
		"kmsKeyId",
		"sourceArn",
		"targetArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Integration
	err := ctx.RegisterResource("aws-native:rds:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("aws-native:rds:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
}

type IntegrationState struct {
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	// An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the *Key Management Service Developer Guide*.
	//  You can only include this parameter if you specify the ``KMSKeyId`` parameter.
	AdditionalEncryptionContext map[string]string `pulumi:"additionalEncryptionContext"`
	// Data filters for the integration. These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
	DataFilter *string `pulumi:"dataFilter"`
	// A description of the integration.
	Description *string `pulumi:"description"`
	// The name of the integration.
	IntegrationName *string `pulumi:"integrationName"`
	// The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, RDS uses a default AWS owned key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The Amazon Resource Name (ARN) of the database to use as the source for replication.
	SourceArn string `pulumi:"sourceArn"`
	// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the *Amazon RDS User Guide.*.
	Tags []aws.Tag `pulumi:"tags"`
	// The ARN of the Redshift data warehouse to use as the target for replication.
	TargetArn string `pulumi:"targetArn"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the *Key Management Service Developer Guide*.
	//  You can only include this parameter if you specify the ``KMSKeyId`` parameter.
	AdditionalEncryptionContext pulumi.StringMapInput
	// Data filters for the integration. These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
	DataFilter pulumi.StringPtrInput
	// A description of the integration.
	Description pulumi.StringPtrInput
	// The name of the integration.
	IntegrationName pulumi.StringPtrInput
	// The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, RDS uses a default AWS owned key.
	KmsKeyId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the database to use as the source for replication.
	SourceArn pulumi.StringInput
	// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the *Amazon RDS User Guide.*.
	Tags aws.TagArrayInput
	// The ARN of the Redshift data warehouse to use as the target for replication.
	TargetArn pulumi.StringInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationInput interface {
	pulumi.Input

	ToIntegrationOutput() IntegrationOutput
	ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput
}

func (*Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (i *Integration) ToIntegrationOutput() IntegrationOutput {
	return i.ToIntegrationOutputWithContext(context.Background())
}

func (i *Integration) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOutput)
}

type IntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

// An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the *Key Management Service Developer Guide*.
//
//	You can only include this parameter if you specify the ``KMSKeyId`` parameter.
func (o IntegrationOutput) AdditionalEncryptionContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringMapOutput { return v.AdditionalEncryptionContext }).(pulumi.StringMapOutput)
}

// The time when the integration was created, in Universal Coordinated Time (UTC).
func (o IntegrationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Data filters for the integration. These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
func (o IntegrationOutput) DataFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.DataFilter }).(pulumi.StringPtrOutput)
}

// A description of the integration.
func (o IntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ARN of the integration.
func (o IntegrationOutput) IntegrationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.IntegrationArn }).(pulumi.StringOutput)
}

// The name of the integration.
func (o IntegrationOutput) IntegrationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.IntegrationName }).(pulumi.StringPtrOutput)
}

// The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, RDS uses a default AWS owned key.
func (o IntegrationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the database to use as the source for replication.
func (o IntegrationOutput) SourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.SourceArn }).(pulumi.StringOutput)
}

// A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the *Amazon RDS User Guide.*.
func (o IntegrationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Integration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ARN of the Redshift data warehouse to use as the target for replication.
func (o IntegrationOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationInput)(nil)).Elem(), &Integration{})
	pulumi.RegisterOutputType(IntegrationOutput{})
}
