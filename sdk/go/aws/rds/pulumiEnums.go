// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql
type DBClusterEngine string

const (
	DBClusterEngineAurora           = DBClusterEngine("aurora")
	DBClusterEngineAuroraMysql      = DBClusterEngine("aurora-mysql")
	DBClusterEngineAuroraPostgresql = DBClusterEngine("aurora-postgresql")
	DBClusterEngineMysql            = DBClusterEngine("mysql")
	DBClusterEnginePostgres         = DBClusterEngine("postgres")
)

func (DBClusterEngine) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterEngine)(nil)).Elem()
}

func (e DBClusterEngine) ToDBClusterEngineOutput() DBClusterEngineOutput {
	return pulumi.ToOutput(e).(DBClusterEngineOutput)
}

func (e DBClusterEngine) ToDBClusterEngineOutputWithContext(ctx context.Context) DBClusterEngineOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBClusterEngineOutput)
}

func (e DBClusterEngine) ToDBClusterEnginePtrOutput() DBClusterEnginePtrOutput {
	return e.ToDBClusterEnginePtrOutputWithContext(context.Background())
}

func (e DBClusterEngine) ToDBClusterEnginePtrOutputWithContext(ctx context.Context) DBClusterEnginePtrOutput {
	return DBClusterEngine(e).ToDBClusterEngineOutputWithContext(ctx).ToDBClusterEnginePtrOutputWithContext(ctx)
}

func (e DBClusterEngine) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterEngine) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterEngine) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBClusterEngine) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBClusterEngineOutput struct{ *pulumi.OutputState }

func (DBClusterEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterEngine)(nil)).Elem()
}

func (o DBClusterEngineOutput) ToDBClusterEngineOutput() DBClusterEngineOutput {
	return o
}

func (o DBClusterEngineOutput) ToDBClusterEngineOutputWithContext(ctx context.Context) DBClusterEngineOutput {
	return o
}

func (o DBClusterEngineOutput) ToDBClusterEnginePtrOutput() DBClusterEnginePtrOutput {
	return o.ToDBClusterEnginePtrOutputWithContext(context.Background())
}

func (o DBClusterEngineOutput) ToDBClusterEnginePtrOutputWithContext(ctx context.Context) DBClusterEnginePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBClusterEngine) *DBClusterEngine {
		return &v
	}).(DBClusterEnginePtrOutput)
}

func (o DBClusterEngineOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBClusterEngineOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterEngine) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBClusterEngineOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterEngineOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterEngine) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBClusterEnginePtrOutput struct{ *pulumi.OutputState }

func (DBClusterEnginePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBClusterEngine)(nil)).Elem()
}

func (o DBClusterEnginePtrOutput) ToDBClusterEnginePtrOutput() DBClusterEnginePtrOutput {
	return o
}

func (o DBClusterEnginePtrOutput) ToDBClusterEnginePtrOutputWithContext(ctx context.Context) DBClusterEnginePtrOutput {
	return o
}

func (o DBClusterEnginePtrOutput) Elem() DBClusterEngineOutput {
	return o.ApplyT(func(v *DBClusterEngine) DBClusterEngine {
		if v != nil {
			return *v
		}
		var ret DBClusterEngine
		return ret
	}).(DBClusterEngineOutput)
}

func (o DBClusterEnginePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterEnginePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBClusterEngine) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBClusterEngineInput is an input type that accepts DBClusterEngineArgs and DBClusterEngineOutput values.
// You can construct a concrete instance of `DBClusterEngineInput` via:
//
//          DBClusterEngineArgs{...}
type DBClusterEngineInput interface {
	pulumi.Input

	ToDBClusterEngineOutput() DBClusterEngineOutput
	ToDBClusterEngineOutputWithContext(context.Context) DBClusterEngineOutput
}

var dbclusterEnginePtrType = reflect.TypeOf((**DBClusterEngine)(nil)).Elem()

type DBClusterEnginePtrInput interface {
	pulumi.Input

	ToDBClusterEnginePtrOutput() DBClusterEnginePtrOutput
	ToDBClusterEnginePtrOutputWithContext(context.Context) DBClusterEnginePtrOutput
}

type dbclusterEnginePtr string

func DBClusterEnginePtr(v string) DBClusterEnginePtrInput {
	return (*dbclusterEnginePtr)(&v)
}

func (*dbclusterEnginePtr) ElementType() reflect.Type {
	return dbclusterEnginePtrType
}

func (in *dbclusterEnginePtr) ToDBClusterEnginePtrOutput() DBClusterEnginePtrOutput {
	return pulumi.ToOutput(in).(DBClusterEnginePtrOutput)
}

func (in *dbclusterEnginePtr) ToDBClusterEnginePtrOutputWithContext(ctx context.Context) DBClusterEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBClusterEnginePtrOutput)
}

// The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster.
type DBClusterEngineMode string

const (
	DBClusterEngineModeProvisioned   = DBClusterEngineMode("provisioned")
	DBClusterEngineModeServerless    = DBClusterEngineMode("serverless")
	DBClusterEngineModeParallelquery = DBClusterEngineMode("parallelquery")
	DBClusterEngineModeGlobal        = DBClusterEngineMode("global")
	DBClusterEngineModeMultimaster   = DBClusterEngineMode("multimaster")
)

func (DBClusterEngineMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterEngineMode)(nil)).Elem()
}

func (e DBClusterEngineMode) ToDBClusterEngineModeOutput() DBClusterEngineModeOutput {
	return pulumi.ToOutput(e).(DBClusterEngineModeOutput)
}

func (e DBClusterEngineMode) ToDBClusterEngineModeOutputWithContext(ctx context.Context) DBClusterEngineModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBClusterEngineModeOutput)
}

func (e DBClusterEngineMode) ToDBClusterEngineModePtrOutput() DBClusterEngineModePtrOutput {
	return e.ToDBClusterEngineModePtrOutputWithContext(context.Background())
}

func (e DBClusterEngineMode) ToDBClusterEngineModePtrOutputWithContext(ctx context.Context) DBClusterEngineModePtrOutput {
	return DBClusterEngineMode(e).ToDBClusterEngineModeOutputWithContext(ctx).ToDBClusterEngineModePtrOutputWithContext(ctx)
}

func (e DBClusterEngineMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterEngineMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterEngineMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBClusterEngineMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBClusterEngineModeOutput struct{ *pulumi.OutputState }

func (DBClusterEngineModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterEngineMode)(nil)).Elem()
}

func (o DBClusterEngineModeOutput) ToDBClusterEngineModeOutput() DBClusterEngineModeOutput {
	return o
}

func (o DBClusterEngineModeOutput) ToDBClusterEngineModeOutputWithContext(ctx context.Context) DBClusterEngineModeOutput {
	return o
}

func (o DBClusterEngineModeOutput) ToDBClusterEngineModePtrOutput() DBClusterEngineModePtrOutput {
	return o.ToDBClusterEngineModePtrOutputWithContext(context.Background())
}

func (o DBClusterEngineModeOutput) ToDBClusterEngineModePtrOutputWithContext(ctx context.Context) DBClusterEngineModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBClusterEngineMode) *DBClusterEngineMode {
		return &v
	}).(DBClusterEngineModePtrOutput)
}

func (o DBClusterEngineModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBClusterEngineModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterEngineMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBClusterEngineModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterEngineModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterEngineMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBClusterEngineModePtrOutput struct{ *pulumi.OutputState }

func (DBClusterEngineModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBClusterEngineMode)(nil)).Elem()
}

func (o DBClusterEngineModePtrOutput) ToDBClusterEngineModePtrOutput() DBClusterEngineModePtrOutput {
	return o
}

func (o DBClusterEngineModePtrOutput) ToDBClusterEngineModePtrOutputWithContext(ctx context.Context) DBClusterEngineModePtrOutput {
	return o
}

func (o DBClusterEngineModePtrOutput) Elem() DBClusterEngineModeOutput {
	return o.ApplyT(func(v *DBClusterEngineMode) DBClusterEngineMode {
		if v != nil {
			return *v
		}
		var ret DBClusterEngineMode
		return ret
	}).(DBClusterEngineModeOutput)
}

func (o DBClusterEngineModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterEngineModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBClusterEngineMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBClusterEngineModeInput is an input type that accepts DBClusterEngineModeArgs and DBClusterEngineModeOutput values.
// You can construct a concrete instance of `DBClusterEngineModeInput` via:
//
//          DBClusterEngineModeArgs{...}
type DBClusterEngineModeInput interface {
	pulumi.Input

	ToDBClusterEngineModeOutput() DBClusterEngineModeOutput
	ToDBClusterEngineModeOutputWithContext(context.Context) DBClusterEngineModeOutput
}

var dbclusterEngineModePtrType = reflect.TypeOf((**DBClusterEngineMode)(nil)).Elem()

type DBClusterEngineModePtrInput interface {
	pulumi.Input

	ToDBClusterEngineModePtrOutput() DBClusterEngineModePtrOutput
	ToDBClusterEngineModePtrOutputWithContext(context.Context) DBClusterEngineModePtrOutput
}

type dbclusterEngineModePtr string

func DBClusterEngineModePtr(v string) DBClusterEngineModePtrInput {
	return (*dbclusterEngineModePtr)(&v)
}

func (*dbclusterEngineModePtr) ElementType() reflect.Type {
	return dbclusterEngineModePtrType
}

func (in *dbclusterEngineModePtr) ToDBClusterEngineModePtrOutput() DBClusterEngineModePtrOutput {
	return pulumi.ToOutput(in).(DBClusterEngineModePtrOutput)
}

func (in *dbclusterEngineModePtr) ToDBClusterEngineModePtrOutputWithContext(ctx context.Context) DBClusterEngineModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBClusterEngineModePtrOutput)
}

// The type of restore to be performed. You can specify one of the following values:
// full-copy - The new DB cluster is restored as a full copy of the source DB cluster.
// copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.
type DBClusterRestoreType string

const (
	DBClusterRestoreTypeFullCopy    = DBClusterRestoreType("full-copy")
	DBClusterRestoreTypeCopyOnWrite = DBClusterRestoreType("copy-on-write")
)

func (DBClusterRestoreType) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterRestoreType)(nil)).Elem()
}

func (e DBClusterRestoreType) ToDBClusterRestoreTypeOutput() DBClusterRestoreTypeOutput {
	return pulumi.ToOutput(e).(DBClusterRestoreTypeOutput)
}

func (e DBClusterRestoreType) ToDBClusterRestoreTypeOutputWithContext(ctx context.Context) DBClusterRestoreTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBClusterRestoreTypeOutput)
}

func (e DBClusterRestoreType) ToDBClusterRestoreTypePtrOutput() DBClusterRestoreTypePtrOutput {
	return e.ToDBClusterRestoreTypePtrOutputWithContext(context.Background())
}

func (e DBClusterRestoreType) ToDBClusterRestoreTypePtrOutputWithContext(ctx context.Context) DBClusterRestoreTypePtrOutput {
	return DBClusterRestoreType(e).ToDBClusterRestoreTypeOutputWithContext(ctx).ToDBClusterRestoreTypePtrOutputWithContext(ctx)
}

func (e DBClusterRestoreType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterRestoreType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterRestoreType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBClusterRestoreType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBClusterRestoreTypeOutput struct{ *pulumi.OutputState }

func (DBClusterRestoreTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterRestoreType)(nil)).Elem()
}

func (o DBClusterRestoreTypeOutput) ToDBClusterRestoreTypeOutput() DBClusterRestoreTypeOutput {
	return o
}

func (o DBClusterRestoreTypeOutput) ToDBClusterRestoreTypeOutputWithContext(ctx context.Context) DBClusterRestoreTypeOutput {
	return o
}

func (o DBClusterRestoreTypeOutput) ToDBClusterRestoreTypePtrOutput() DBClusterRestoreTypePtrOutput {
	return o.ToDBClusterRestoreTypePtrOutputWithContext(context.Background())
}

func (o DBClusterRestoreTypeOutput) ToDBClusterRestoreTypePtrOutputWithContext(ctx context.Context) DBClusterRestoreTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBClusterRestoreType) *DBClusterRestoreType {
		return &v
	}).(DBClusterRestoreTypePtrOutput)
}

func (o DBClusterRestoreTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBClusterRestoreTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterRestoreType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBClusterRestoreTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterRestoreTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterRestoreType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBClusterRestoreTypePtrOutput struct{ *pulumi.OutputState }

func (DBClusterRestoreTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBClusterRestoreType)(nil)).Elem()
}

func (o DBClusterRestoreTypePtrOutput) ToDBClusterRestoreTypePtrOutput() DBClusterRestoreTypePtrOutput {
	return o
}

func (o DBClusterRestoreTypePtrOutput) ToDBClusterRestoreTypePtrOutputWithContext(ctx context.Context) DBClusterRestoreTypePtrOutput {
	return o
}

func (o DBClusterRestoreTypePtrOutput) Elem() DBClusterRestoreTypeOutput {
	return o.ApplyT(func(v *DBClusterRestoreType) DBClusterRestoreType {
		if v != nil {
			return *v
		}
		var ret DBClusterRestoreType
		return ret
	}).(DBClusterRestoreTypeOutput)
}

func (o DBClusterRestoreTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterRestoreTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBClusterRestoreType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBClusterRestoreTypeInput is an input type that accepts DBClusterRestoreTypeArgs and DBClusterRestoreTypeOutput values.
// You can construct a concrete instance of `DBClusterRestoreTypeInput` via:
//
//          DBClusterRestoreTypeArgs{...}
type DBClusterRestoreTypeInput interface {
	pulumi.Input

	ToDBClusterRestoreTypeOutput() DBClusterRestoreTypeOutput
	ToDBClusterRestoreTypeOutputWithContext(context.Context) DBClusterRestoreTypeOutput
}

var dbclusterRestoreTypePtrType = reflect.TypeOf((**DBClusterRestoreType)(nil)).Elem()

type DBClusterRestoreTypePtrInput interface {
	pulumi.Input

	ToDBClusterRestoreTypePtrOutput() DBClusterRestoreTypePtrOutput
	ToDBClusterRestoreTypePtrOutputWithContext(context.Context) DBClusterRestoreTypePtrOutput
}

type dbclusterRestoreTypePtr string

func DBClusterRestoreTypePtr(v string) DBClusterRestoreTypePtrInput {
	return (*dbclusterRestoreTypePtr)(&v)
}

func (*dbclusterRestoreTypePtr) ElementType() reflect.Type {
	return dbclusterRestoreTypePtrType
}

func (in *dbclusterRestoreTypePtr) ToDBClusterRestoreTypePtrOutput() DBClusterRestoreTypePtrOutput {
	return pulumi.ToOutput(in).(DBClusterRestoreTypePtrOutput)
}

func (in *dbclusterRestoreTypePtr) ToDBClusterRestoreTypePtrOutputWithContext(ctx context.Context) DBClusterRestoreTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBClusterRestoreTypePtrOutput)
}

// Specifies the storage type to be associated with the DB cluster.
type DBClusterStorageType string

const (
	DBClusterStorageTypeIo1 = DBClusterStorageType("io1")
)

func (DBClusterStorageType) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterStorageType)(nil)).Elem()
}

func (e DBClusterStorageType) ToDBClusterStorageTypeOutput() DBClusterStorageTypeOutput {
	return pulumi.ToOutput(e).(DBClusterStorageTypeOutput)
}

func (e DBClusterStorageType) ToDBClusterStorageTypeOutputWithContext(ctx context.Context) DBClusterStorageTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBClusterStorageTypeOutput)
}

func (e DBClusterStorageType) ToDBClusterStorageTypePtrOutput() DBClusterStorageTypePtrOutput {
	return e.ToDBClusterStorageTypePtrOutputWithContext(context.Background())
}

func (e DBClusterStorageType) ToDBClusterStorageTypePtrOutputWithContext(ctx context.Context) DBClusterStorageTypePtrOutput {
	return DBClusterStorageType(e).ToDBClusterStorageTypeOutputWithContext(ctx).ToDBClusterStorageTypePtrOutputWithContext(ctx)
}

func (e DBClusterStorageType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterStorageType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBClusterStorageType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBClusterStorageType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBClusterStorageTypeOutput struct{ *pulumi.OutputState }

func (DBClusterStorageTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBClusterStorageType)(nil)).Elem()
}

func (o DBClusterStorageTypeOutput) ToDBClusterStorageTypeOutput() DBClusterStorageTypeOutput {
	return o
}

func (o DBClusterStorageTypeOutput) ToDBClusterStorageTypeOutputWithContext(ctx context.Context) DBClusterStorageTypeOutput {
	return o
}

func (o DBClusterStorageTypeOutput) ToDBClusterStorageTypePtrOutput() DBClusterStorageTypePtrOutput {
	return o.ToDBClusterStorageTypePtrOutputWithContext(context.Background())
}

func (o DBClusterStorageTypeOutput) ToDBClusterStorageTypePtrOutputWithContext(ctx context.Context) DBClusterStorageTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBClusterStorageType) *DBClusterStorageType {
		return &v
	}).(DBClusterStorageTypePtrOutput)
}

func (o DBClusterStorageTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBClusterStorageTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterStorageType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBClusterStorageTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterStorageTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBClusterStorageType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBClusterStorageTypePtrOutput struct{ *pulumi.OutputState }

func (DBClusterStorageTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBClusterStorageType)(nil)).Elem()
}

func (o DBClusterStorageTypePtrOutput) ToDBClusterStorageTypePtrOutput() DBClusterStorageTypePtrOutput {
	return o
}

func (o DBClusterStorageTypePtrOutput) ToDBClusterStorageTypePtrOutputWithContext(ctx context.Context) DBClusterStorageTypePtrOutput {
	return o
}

func (o DBClusterStorageTypePtrOutput) Elem() DBClusterStorageTypeOutput {
	return o.ApplyT(func(v *DBClusterStorageType) DBClusterStorageType {
		if v != nil {
			return *v
		}
		var ret DBClusterStorageType
		return ret
	}).(DBClusterStorageTypeOutput)
}

func (o DBClusterStorageTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBClusterStorageTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBClusterStorageType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBClusterStorageTypeInput is an input type that accepts DBClusterStorageTypeArgs and DBClusterStorageTypeOutput values.
// You can construct a concrete instance of `DBClusterStorageTypeInput` via:
//
//          DBClusterStorageTypeArgs{...}
type DBClusterStorageTypeInput interface {
	pulumi.Input

	ToDBClusterStorageTypeOutput() DBClusterStorageTypeOutput
	ToDBClusterStorageTypeOutputWithContext(context.Context) DBClusterStorageTypeOutput
}

var dbclusterStorageTypePtrType = reflect.TypeOf((**DBClusterStorageType)(nil)).Elem()

type DBClusterStorageTypePtrInput interface {
	pulumi.Input

	ToDBClusterStorageTypePtrOutput() DBClusterStorageTypePtrOutput
	ToDBClusterStorageTypePtrOutputWithContext(context.Context) DBClusterStorageTypePtrOutput
}

type dbclusterStorageTypePtr string

func DBClusterStorageTypePtr(v string) DBClusterStorageTypePtrInput {
	return (*dbclusterStorageTypePtr)(&v)
}

func (*dbclusterStorageTypePtr) ElementType() reflect.Type {
	return dbclusterStorageTypePtrType
}

func (in *dbclusterStorageTypePtr) ToDBClusterStorageTypePtrOutput() DBClusterStorageTypePtrOutput {
	return pulumi.ToOutput(in).(DBClusterStorageTypePtrOutput)
}

func (in *dbclusterStorageTypePtr) ToDBClusterStorageTypePtrOutputWithContext(ctx context.Context) DBClusterStorageTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBClusterStorageTypePtrOutput)
}

// The type of authentication that the proxy uses for connections from the proxy to the underlying database.
type DBProxyAuthFormatAuthScheme string

const (
	DBProxyAuthFormatAuthSchemeSecrets = DBProxyAuthFormatAuthScheme("SECRETS")
)

func (DBProxyAuthFormatAuthScheme) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyAuthFormatAuthScheme)(nil)).Elem()
}

func (e DBProxyAuthFormatAuthScheme) ToDBProxyAuthFormatAuthSchemeOutput() DBProxyAuthFormatAuthSchemeOutput {
	return pulumi.ToOutput(e).(DBProxyAuthFormatAuthSchemeOutput)
}

func (e DBProxyAuthFormatAuthScheme) ToDBProxyAuthFormatAuthSchemeOutputWithContext(ctx context.Context) DBProxyAuthFormatAuthSchemeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBProxyAuthFormatAuthSchemeOutput)
}

func (e DBProxyAuthFormatAuthScheme) ToDBProxyAuthFormatAuthSchemePtrOutput() DBProxyAuthFormatAuthSchemePtrOutput {
	return e.ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(context.Background())
}

func (e DBProxyAuthFormatAuthScheme) ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(ctx context.Context) DBProxyAuthFormatAuthSchemePtrOutput {
	return DBProxyAuthFormatAuthScheme(e).ToDBProxyAuthFormatAuthSchemeOutputWithContext(ctx).ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(ctx)
}

func (e DBProxyAuthFormatAuthScheme) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyAuthFormatAuthScheme) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyAuthFormatAuthScheme) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBProxyAuthFormatAuthScheme) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBProxyAuthFormatAuthSchemeOutput struct{ *pulumi.OutputState }

func (DBProxyAuthFormatAuthSchemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyAuthFormatAuthScheme)(nil)).Elem()
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToDBProxyAuthFormatAuthSchemeOutput() DBProxyAuthFormatAuthSchemeOutput {
	return o
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToDBProxyAuthFormatAuthSchemeOutputWithContext(ctx context.Context) DBProxyAuthFormatAuthSchemeOutput {
	return o
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToDBProxyAuthFormatAuthSchemePtrOutput() DBProxyAuthFormatAuthSchemePtrOutput {
	return o.ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(ctx context.Context) DBProxyAuthFormatAuthSchemePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBProxyAuthFormatAuthScheme) *DBProxyAuthFormatAuthScheme {
		return &v
	}).(DBProxyAuthFormatAuthSchemePtrOutput)
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyAuthFormatAuthScheme) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatAuthSchemeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyAuthFormatAuthScheme) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBProxyAuthFormatAuthSchemePtrOutput struct{ *pulumi.OutputState }

func (DBProxyAuthFormatAuthSchemePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBProxyAuthFormatAuthScheme)(nil)).Elem()
}

func (o DBProxyAuthFormatAuthSchemePtrOutput) ToDBProxyAuthFormatAuthSchemePtrOutput() DBProxyAuthFormatAuthSchemePtrOutput {
	return o
}

func (o DBProxyAuthFormatAuthSchemePtrOutput) ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(ctx context.Context) DBProxyAuthFormatAuthSchemePtrOutput {
	return o
}

func (o DBProxyAuthFormatAuthSchemePtrOutput) Elem() DBProxyAuthFormatAuthSchemeOutput {
	return o.ApplyT(func(v *DBProxyAuthFormatAuthScheme) DBProxyAuthFormatAuthScheme {
		if v != nil {
			return *v
		}
		var ret DBProxyAuthFormatAuthScheme
		return ret
	}).(DBProxyAuthFormatAuthSchemeOutput)
}

func (o DBProxyAuthFormatAuthSchemePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatAuthSchemePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBProxyAuthFormatAuthScheme) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBProxyAuthFormatAuthSchemeInput is an input type that accepts DBProxyAuthFormatAuthSchemeArgs and DBProxyAuthFormatAuthSchemeOutput values.
// You can construct a concrete instance of `DBProxyAuthFormatAuthSchemeInput` via:
//
//          DBProxyAuthFormatAuthSchemeArgs{...}
type DBProxyAuthFormatAuthSchemeInput interface {
	pulumi.Input

	ToDBProxyAuthFormatAuthSchemeOutput() DBProxyAuthFormatAuthSchemeOutput
	ToDBProxyAuthFormatAuthSchemeOutputWithContext(context.Context) DBProxyAuthFormatAuthSchemeOutput
}

var dbproxyAuthFormatAuthSchemePtrType = reflect.TypeOf((**DBProxyAuthFormatAuthScheme)(nil)).Elem()

type DBProxyAuthFormatAuthSchemePtrInput interface {
	pulumi.Input

	ToDBProxyAuthFormatAuthSchemePtrOutput() DBProxyAuthFormatAuthSchemePtrOutput
	ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(context.Context) DBProxyAuthFormatAuthSchemePtrOutput
}

type dbproxyAuthFormatAuthSchemePtr string

func DBProxyAuthFormatAuthSchemePtr(v string) DBProxyAuthFormatAuthSchemePtrInput {
	return (*dbproxyAuthFormatAuthSchemePtr)(&v)
}

func (*dbproxyAuthFormatAuthSchemePtr) ElementType() reflect.Type {
	return dbproxyAuthFormatAuthSchemePtrType
}

func (in *dbproxyAuthFormatAuthSchemePtr) ToDBProxyAuthFormatAuthSchemePtrOutput() DBProxyAuthFormatAuthSchemePtrOutput {
	return pulumi.ToOutput(in).(DBProxyAuthFormatAuthSchemePtrOutput)
}

func (in *dbproxyAuthFormatAuthSchemePtr) ToDBProxyAuthFormatAuthSchemePtrOutputWithContext(ctx context.Context) DBProxyAuthFormatAuthSchemePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBProxyAuthFormatAuthSchemePtrOutput)
}

// Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy.
type DBProxyAuthFormatIAMAuth string

const (
	DBProxyAuthFormatIAMAuthDisabled = DBProxyAuthFormatIAMAuth("DISABLED")
	DBProxyAuthFormatIAMAuthRequired = DBProxyAuthFormatIAMAuth("REQUIRED")
)

func (DBProxyAuthFormatIAMAuth) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyAuthFormatIAMAuth)(nil)).Elem()
}

func (e DBProxyAuthFormatIAMAuth) ToDBProxyAuthFormatIAMAuthOutput() DBProxyAuthFormatIAMAuthOutput {
	return pulumi.ToOutput(e).(DBProxyAuthFormatIAMAuthOutput)
}

func (e DBProxyAuthFormatIAMAuth) ToDBProxyAuthFormatIAMAuthOutputWithContext(ctx context.Context) DBProxyAuthFormatIAMAuthOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBProxyAuthFormatIAMAuthOutput)
}

func (e DBProxyAuthFormatIAMAuth) ToDBProxyAuthFormatIAMAuthPtrOutput() DBProxyAuthFormatIAMAuthPtrOutput {
	return e.ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(context.Background())
}

func (e DBProxyAuthFormatIAMAuth) ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(ctx context.Context) DBProxyAuthFormatIAMAuthPtrOutput {
	return DBProxyAuthFormatIAMAuth(e).ToDBProxyAuthFormatIAMAuthOutputWithContext(ctx).ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(ctx)
}

func (e DBProxyAuthFormatIAMAuth) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyAuthFormatIAMAuth) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyAuthFormatIAMAuth) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBProxyAuthFormatIAMAuth) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBProxyAuthFormatIAMAuthOutput struct{ *pulumi.OutputState }

func (DBProxyAuthFormatIAMAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyAuthFormatIAMAuth)(nil)).Elem()
}

func (o DBProxyAuthFormatIAMAuthOutput) ToDBProxyAuthFormatIAMAuthOutput() DBProxyAuthFormatIAMAuthOutput {
	return o
}

func (o DBProxyAuthFormatIAMAuthOutput) ToDBProxyAuthFormatIAMAuthOutputWithContext(ctx context.Context) DBProxyAuthFormatIAMAuthOutput {
	return o
}

func (o DBProxyAuthFormatIAMAuthOutput) ToDBProxyAuthFormatIAMAuthPtrOutput() DBProxyAuthFormatIAMAuthPtrOutput {
	return o.ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatIAMAuthOutput) ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(ctx context.Context) DBProxyAuthFormatIAMAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBProxyAuthFormatIAMAuth) *DBProxyAuthFormatIAMAuth {
		return &v
	}).(DBProxyAuthFormatIAMAuthPtrOutput)
}

func (o DBProxyAuthFormatIAMAuthOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatIAMAuthOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyAuthFormatIAMAuth) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBProxyAuthFormatIAMAuthOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatIAMAuthOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyAuthFormatIAMAuth) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBProxyAuthFormatIAMAuthPtrOutput struct{ *pulumi.OutputState }

func (DBProxyAuthFormatIAMAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBProxyAuthFormatIAMAuth)(nil)).Elem()
}

func (o DBProxyAuthFormatIAMAuthPtrOutput) ToDBProxyAuthFormatIAMAuthPtrOutput() DBProxyAuthFormatIAMAuthPtrOutput {
	return o
}

func (o DBProxyAuthFormatIAMAuthPtrOutput) ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(ctx context.Context) DBProxyAuthFormatIAMAuthPtrOutput {
	return o
}

func (o DBProxyAuthFormatIAMAuthPtrOutput) Elem() DBProxyAuthFormatIAMAuthOutput {
	return o.ApplyT(func(v *DBProxyAuthFormatIAMAuth) DBProxyAuthFormatIAMAuth {
		if v != nil {
			return *v
		}
		var ret DBProxyAuthFormatIAMAuth
		return ret
	}).(DBProxyAuthFormatIAMAuthOutput)
}

func (o DBProxyAuthFormatIAMAuthPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyAuthFormatIAMAuthPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBProxyAuthFormatIAMAuth) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBProxyAuthFormatIAMAuthInput is an input type that accepts DBProxyAuthFormatIAMAuthArgs and DBProxyAuthFormatIAMAuthOutput values.
// You can construct a concrete instance of `DBProxyAuthFormatIAMAuthInput` via:
//
//          DBProxyAuthFormatIAMAuthArgs{...}
type DBProxyAuthFormatIAMAuthInput interface {
	pulumi.Input

	ToDBProxyAuthFormatIAMAuthOutput() DBProxyAuthFormatIAMAuthOutput
	ToDBProxyAuthFormatIAMAuthOutputWithContext(context.Context) DBProxyAuthFormatIAMAuthOutput
}

var dbproxyAuthFormatIAMAuthPtrType = reflect.TypeOf((**DBProxyAuthFormatIAMAuth)(nil)).Elem()

type DBProxyAuthFormatIAMAuthPtrInput interface {
	pulumi.Input

	ToDBProxyAuthFormatIAMAuthPtrOutput() DBProxyAuthFormatIAMAuthPtrOutput
	ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(context.Context) DBProxyAuthFormatIAMAuthPtrOutput
}

type dbproxyAuthFormatIAMAuthPtr string

func DBProxyAuthFormatIAMAuthPtr(v string) DBProxyAuthFormatIAMAuthPtrInput {
	return (*dbproxyAuthFormatIAMAuthPtr)(&v)
}

func (*dbproxyAuthFormatIAMAuthPtr) ElementType() reflect.Type {
	return dbproxyAuthFormatIAMAuthPtrType
}

func (in *dbproxyAuthFormatIAMAuthPtr) ToDBProxyAuthFormatIAMAuthPtrOutput() DBProxyAuthFormatIAMAuthPtrOutput {
	return pulumi.ToOutput(in).(DBProxyAuthFormatIAMAuthPtrOutput)
}

func (in *dbproxyAuthFormatIAMAuthPtr) ToDBProxyAuthFormatIAMAuthPtrOutputWithContext(ctx context.Context) DBProxyAuthFormatIAMAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBProxyAuthFormatIAMAuthPtrOutput)
}

// A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
type DBProxyEndpointTargetRole string

const (
	DBProxyEndpointTargetRoleReadWrite = DBProxyEndpointTargetRole("READ_WRITE")
	DBProxyEndpointTargetRoleReadOnly  = DBProxyEndpointTargetRole("READ_ONLY")
)

func (DBProxyEndpointTargetRole) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyEndpointTargetRole)(nil)).Elem()
}

func (e DBProxyEndpointTargetRole) ToDBProxyEndpointTargetRoleOutput() DBProxyEndpointTargetRoleOutput {
	return pulumi.ToOutput(e).(DBProxyEndpointTargetRoleOutput)
}

func (e DBProxyEndpointTargetRole) ToDBProxyEndpointTargetRoleOutputWithContext(ctx context.Context) DBProxyEndpointTargetRoleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBProxyEndpointTargetRoleOutput)
}

func (e DBProxyEndpointTargetRole) ToDBProxyEndpointTargetRolePtrOutput() DBProxyEndpointTargetRolePtrOutput {
	return e.ToDBProxyEndpointTargetRolePtrOutputWithContext(context.Background())
}

func (e DBProxyEndpointTargetRole) ToDBProxyEndpointTargetRolePtrOutputWithContext(ctx context.Context) DBProxyEndpointTargetRolePtrOutput {
	return DBProxyEndpointTargetRole(e).ToDBProxyEndpointTargetRoleOutputWithContext(ctx).ToDBProxyEndpointTargetRolePtrOutputWithContext(ctx)
}

func (e DBProxyEndpointTargetRole) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyEndpointTargetRole) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyEndpointTargetRole) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBProxyEndpointTargetRole) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBProxyEndpointTargetRoleOutput struct{ *pulumi.OutputState }

func (DBProxyEndpointTargetRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyEndpointTargetRole)(nil)).Elem()
}

func (o DBProxyEndpointTargetRoleOutput) ToDBProxyEndpointTargetRoleOutput() DBProxyEndpointTargetRoleOutput {
	return o
}

func (o DBProxyEndpointTargetRoleOutput) ToDBProxyEndpointTargetRoleOutputWithContext(ctx context.Context) DBProxyEndpointTargetRoleOutput {
	return o
}

func (o DBProxyEndpointTargetRoleOutput) ToDBProxyEndpointTargetRolePtrOutput() DBProxyEndpointTargetRolePtrOutput {
	return o.ToDBProxyEndpointTargetRolePtrOutputWithContext(context.Background())
}

func (o DBProxyEndpointTargetRoleOutput) ToDBProxyEndpointTargetRolePtrOutputWithContext(ctx context.Context) DBProxyEndpointTargetRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBProxyEndpointTargetRole) *DBProxyEndpointTargetRole {
		return &v
	}).(DBProxyEndpointTargetRolePtrOutput)
}

func (o DBProxyEndpointTargetRoleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBProxyEndpointTargetRoleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyEndpointTargetRole) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBProxyEndpointTargetRoleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyEndpointTargetRoleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyEndpointTargetRole) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBProxyEndpointTargetRolePtrOutput struct{ *pulumi.OutputState }

func (DBProxyEndpointTargetRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBProxyEndpointTargetRole)(nil)).Elem()
}

func (o DBProxyEndpointTargetRolePtrOutput) ToDBProxyEndpointTargetRolePtrOutput() DBProxyEndpointTargetRolePtrOutput {
	return o
}

func (o DBProxyEndpointTargetRolePtrOutput) ToDBProxyEndpointTargetRolePtrOutputWithContext(ctx context.Context) DBProxyEndpointTargetRolePtrOutput {
	return o
}

func (o DBProxyEndpointTargetRolePtrOutput) Elem() DBProxyEndpointTargetRoleOutput {
	return o.ApplyT(func(v *DBProxyEndpointTargetRole) DBProxyEndpointTargetRole {
		if v != nil {
			return *v
		}
		var ret DBProxyEndpointTargetRole
		return ret
	}).(DBProxyEndpointTargetRoleOutput)
}

func (o DBProxyEndpointTargetRolePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyEndpointTargetRolePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBProxyEndpointTargetRole) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBProxyEndpointTargetRoleInput is an input type that accepts DBProxyEndpointTargetRoleArgs and DBProxyEndpointTargetRoleOutput values.
// You can construct a concrete instance of `DBProxyEndpointTargetRoleInput` via:
//
//          DBProxyEndpointTargetRoleArgs{...}
type DBProxyEndpointTargetRoleInput interface {
	pulumi.Input

	ToDBProxyEndpointTargetRoleOutput() DBProxyEndpointTargetRoleOutput
	ToDBProxyEndpointTargetRoleOutputWithContext(context.Context) DBProxyEndpointTargetRoleOutput
}

var dbproxyEndpointTargetRolePtrType = reflect.TypeOf((**DBProxyEndpointTargetRole)(nil)).Elem()

type DBProxyEndpointTargetRolePtrInput interface {
	pulumi.Input

	ToDBProxyEndpointTargetRolePtrOutput() DBProxyEndpointTargetRolePtrOutput
	ToDBProxyEndpointTargetRolePtrOutputWithContext(context.Context) DBProxyEndpointTargetRolePtrOutput
}

type dbproxyEndpointTargetRolePtr string

func DBProxyEndpointTargetRolePtr(v string) DBProxyEndpointTargetRolePtrInput {
	return (*dbproxyEndpointTargetRolePtr)(&v)
}

func (*dbproxyEndpointTargetRolePtr) ElementType() reflect.Type {
	return dbproxyEndpointTargetRolePtrType
}

func (in *dbproxyEndpointTargetRolePtr) ToDBProxyEndpointTargetRolePtrOutput() DBProxyEndpointTargetRolePtrOutput {
	return pulumi.ToOutput(in).(DBProxyEndpointTargetRolePtrOutput)
}

func (in *dbproxyEndpointTargetRolePtr) ToDBProxyEndpointTargetRolePtrOutputWithContext(ctx context.Context) DBProxyEndpointTargetRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBProxyEndpointTargetRolePtrOutput)
}

// The kinds of databases that the proxy can connect to.
type DBProxyEngineFamily string

const (
	DBProxyEngineFamilyMysql      = DBProxyEngineFamily("MYSQL")
	DBProxyEngineFamilyPostgresql = DBProxyEngineFamily("POSTGRESQL")
)

func (DBProxyEngineFamily) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyEngineFamily)(nil)).Elem()
}

func (e DBProxyEngineFamily) ToDBProxyEngineFamilyOutput() DBProxyEngineFamilyOutput {
	return pulumi.ToOutput(e).(DBProxyEngineFamilyOutput)
}

func (e DBProxyEngineFamily) ToDBProxyEngineFamilyOutputWithContext(ctx context.Context) DBProxyEngineFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBProxyEngineFamilyOutput)
}

func (e DBProxyEngineFamily) ToDBProxyEngineFamilyPtrOutput() DBProxyEngineFamilyPtrOutput {
	return e.ToDBProxyEngineFamilyPtrOutputWithContext(context.Background())
}

func (e DBProxyEngineFamily) ToDBProxyEngineFamilyPtrOutputWithContext(ctx context.Context) DBProxyEngineFamilyPtrOutput {
	return DBProxyEngineFamily(e).ToDBProxyEngineFamilyOutputWithContext(ctx).ToDBProxyEngineFamilyPtrOutputWithContext(ctx)
}

func (e DBProxyEngineFamily) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyEngineFamily) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyEngineFamily) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBProxyEngineFamily) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBProxyEngineFamilyOutput struct{ *pulumi.OutputState }

func (DBProxyEngineFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyEngineFamily)(nil)).Elem()
}

func (o DBProxyEngineFamilyOutput) ToDBProxyEngineFamilyOutput() DBProxyEngineFamilyOutput {
	return o
}

func (o DBProxyEngineFamilyOutput) ToDBProxyEngineFamilyOutputWithContext(ctx context.Context) DBProxyEngineFamilyOutput {
	return o
}

func (o DBProxyEngineFamilyOutput) ToDBProxyEngineFamilyPtrOutput() DBProxyEngineFamilyPtrOutput {
	return o.ToDBProxyEngineFamilyPtrOutputWithContext(context.Background())
}

func (o DBProxyEngineFamilyOutput) ToDBProxyEngineFamilyPtrOutputWithContext(ctx context.Context) DBProxyEngineFamilyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBProxyEngineFamily) *DBProxyEngineFamily {
		return &v
	}).(DBProxyEngineFamilyPtrOutput)
}

func (o DBProxyEngineFamilyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBProxyEngineFamilyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyEngineFamily) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBProxyEngineFamilyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyEngineFamilyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyEngineFamily) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBProxyEngineFamilyPtrOutput struct{ *pulumi.OutputState }

func (DBProxyEngineFamilyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBProxyEngineFamily)(nil)).Elem()
}

func (o DBProxyEngineFamilyPtrOutput) ToDBProxyEngineFamilyPtrOutput() DBProxyEngineFamilyPtrOutput {
	return o
}

func (o DBProxyEngineFamilyPtrOutput) ToDBProxyEngineFamilyPtrOutputWithContext(ctx context.Context) DBProxyEngineFamilyPtrOutput {
	return o
}

func (o DBProxyEngineFamilyPtrOutput) Elem() DBProxyEngineFamilyOutput {
	return o.ApplyT(func(v *DBProxyEngineFamily) DBProxyEngineFamily {
		if v != nil {
			return *v
		}
		var ret DBProxyEngineFamily
		return ret
	}).(DBProxyEngineFamilyOutput)
}

func (o DBProxyEngineFamilyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyEngineFamilyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBProxyEngineFamily) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBProxyEngineFamilyInput is an input type that accepts DBProxyEngineFamilyArgs and DBProxyEngineFamilyOutput values.
// You can construct a concrete instance of `DBProxyEngineFamilyInput` via:
//
//          DBProxyEngineFamilyArgs{...}
type DBProxyEngineFamilyInput interface {
	pulumi.Input

	ToDBProxyEngineFamilyOutput() DBProxyEngineFamilyOutput
	ToDBProxyEngineFamilyOutputWithContext(context.Context) DBProxyEngineFamilyOutput
}

var dbproxyEngineFamilyPtrType = reflect.TypeOf((**DBProxyEngineFamily)(nil)).Elem()

type DBProxyEngineFamilyPtrInput interface {
	pulumi.Input

	ToDBProxyEngineFamilyPtrOutput() DBProxyEngineFamilyPtrOutput
	ToDBProxyEngineFamilyPtrOutputWithContext(context.Context) DBProxyEngineFamilyPtrOutput
}

type dbproxyEngineFamilyPtr string

func DBProxyEngineFamilyPtr(v string) DBProxyEngineFamilyPtrInput {
	return (*dbproxyEngineFamilyPtr)(&v)
}

func (*dbproxyEngineFamilyPtr) ElementType() reflect.Type {
	return dbproxyEngineFamilyPtrType
}

func (in *dbproxyEngineFamilyPtr) ToDBProxyEngineFamilyPtrOutput() DBProxyEngineFamilyPtrOutput {
	return pulumi.ToOutput(in).(DBProxyEngineFamilyPtrOutput)
}

func (in *dbproxyEngineFamilyPtr) ToDBProxyEngineFamilyPtrOutputWithContext(ctx context.Context) DBProxyEngineFamilyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBProxyEngineFamilyPtrOutput)
}

// The identifier for the DBProxyTargetGroup
type DBProxyTargetGroupTargetGroupName string

const (
	DBProxyTargetGroupTargetGroupNameDefault = DBProxyTargetGroupTargetGroupName("default")
)

func (DBProxyTargetGroupTargetGroupName) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyTargetGroupTargetGroupName)(nil)).Elem()
}

func (e DBProxyTargetGroupTargetGroupName) ToDBProxyTargetGroupTargetGroupNameOutput() DBProxyTargetGroupTargetGroupNameOutput {
	return pulumi.ToOutput(e).(DBProxyTargetGroupTargetGroupNameOutput)
}

func (e DBProxyTargetGroupTargetGroupName) ToDBProxyTargetGroupTargetGroupNameOutputWithContext(ctx context.Context) DBProxyTargetGroupTargetGroupNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DBProxyTargetGroupTargetGroupNameOutput)
}

func (e DBProxyTargetGroupTargetGroupName) ToDBProxyTargetGroupTargetGroupNamePtrOutput() DBProxyTargetGroupTargetGroupNamePtrOutput {
	return e.ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(context.Background())
}

func (e DBProxyTargetGroupTargetGroupName) ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(ctx context.Context) DBProxyTargetGroupTargetGroupNamePtrOutput {
	return DBProxyTargetGroupTargetGroupName(e).ToDBProxyTargetGroupTargetGroupNameOutputWithContext(ctx).ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(ctx)
}

func (e DBProxyTargetGroupTargetGroupName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyTargetGroupTargetGroupName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DBProxyTargetGroupTargetGroupName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DBProxyTargetGroupTargetGroupName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DBProxyTargetGroupTargetGroupNameOutput struct{ *pulumi.OutputState }

func (DBProxyTargetGroupTargetGroupNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBProxyTargetGroupTargetGroupName)(nil)).Elem()
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToDBProxyTargetGroupTargetGroupNameOutput() DBProxyTargetGroupTargetGroupNameOutput {
	return o
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToDBProxyTargetGroupTargetGroupNameOutputWithContext(ctx context.Context) DBProxyTargetGroupTargetGroupNameOutput {
	return o
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToDBProxyTargetGroupTargetGroupNamePtrOutput() DBProxyTargetGroupTargetGroupNamePtrOutput {
	return o.ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(context.Background())
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(ctx context.Context) DBProxyTargetGroupTargetGroupNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBProxyTargetGroupTargetGroupName) *DBProxyTargetGroupTargetGroupName {
		return &v
	}).(DBProxyTargetGroupTargetGroupNamePtrOutput)
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyTargetGroupTargetGroupName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyTargetGroupTargetGroupNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DBProxyTargetGroupTargetGroupName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DBProxyTargetGroupTargetGroupNamePtrOutput struct{ *pulumi.OutputState }

func (DBProxyTargetGroupTargetGroupNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBProxyTargetGroupTargetGroupName)(nil)).Elem()
}

func (o DBProxyTargetGroupTargetGroupNamePtrOutput) ToDBProxyTargetGroupTargetGroupNamePtrOutput() DBProxyTargetGroupTargetGroupNamePtrOutput {
	return o
}

func (o DBProxyTargetGroupTargetGroupNamePtrOutput) ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(ctx context.Context) DBProxyTargetGroupTargetGroupNamePtrOutput {
	return o
}

func (o DBProxyTargetGroupTargetGroupNamePtrOutput) Elem() DBProxyTargetGroupTargetGroupNameOutput {
	return o.ApplyT(func(v *DBProxyTargetGroupTargetGroupName) DBProxyTargetGroupTargetGroupName {
		if v != nil {
			return *v
		}
		var ret DBProxyTargetGroupTargetGroupName
		return ret
	}).(DBProxyTargetGroupTargetGroupNameOutput)
}

func (o DBProxyTargetGroupTargetGroupNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DBProxyTargetGroupTargetGroupNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DBProxyTargetGroupTargetGroupName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DBProxyTargetGroupTargetGroupNameInput is an input type that accepts DBProxyTargetGroupTargetGroupNameArgs and DBProxyTargetGroupTargetGroupNameOutput values.
// You can construct a concrete instance of `DBProxyTargetGroupTargetGroupNameInput` via:
//
//          DBProxyTargetGroupTargetGroupNameArgs{...}
type DBProxyTargetGroupTargetGroupNameInput interface {
	pulumi.Input

	ToDBProxyTargetGroupTargetGroupNameOutput() DBProxyTargetGroupTargetGroupNameOutput
	ToDBProxyTargetGroupTargetGroupNameOutputWithContext(context.Context) DBProxyTargetGroupTargetGroupNameOutput
}

var dbproxyTargetGroupTargetGroupNamePtrType = reflect.TypeOf((**DBProxyTargetGroupTargetGroupName)(nil)).Elem()

type DBProxyTargetGroupTargetGroupNamePtrInput interface {
	pulumi.Input

	ToDBProxyTargetGroupTargetGroupNamePtrOutput() DBProxyTargetGroupTargetGroupNamePtrOutput
	ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(context.Context) DBProxyTargetGroupTargetGroupNamePtrOutput
}

type dbproxyTargetGroupTargetGroupNamePtr string

func DBProxyTargetGroupTargetGroupNamePtr(v string) DBProxyTargetGroupTargetGroupNamePtrInput {
	return (*dbproxyTargetGroupTargetGroupNamePtr)(&v)
}

func (*dbproxyTargetGroupTargetGroupNamePtr) ElementType() reflect.Type {
	return dbproxyTargetGroupTargetGroupNamePtrType
}

func (in *dbproxyTargetGroupTargetGroupNamePtr) ToDBProxyTargetGroupTargetGroupNamePtrOutput() DBProxyTargetGroupTargetGroupNamePtrOutput {
	return pulumi.ToOutput(in).(DBProxyTargetGroupTargetGroupNamePtrOutput)
}

func (in *dbproxyTargetGroupTargetGroupNamePtr) ToDBProxyTargetGroupTargetGroupNamePtrOutputWithContext(ctx context.Context) DBProxyTargetGroupTargetGroupNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DBProxyTargetGroupTargetGroupNamePtrOutput)
}

// The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
type EventSubscriptionSourceType string

const (
	EventSubscriptionSourceTypeCustomEngineVersion = EventSubscriptionSourceType("custom-engine-version")
	EventSubscriptionSourceTypeDbCluster           = EventSubscriptionSourceType("db-cluster")
	EventSubscriptionSourceTypeDbClusterSnapshot   = EventSubscriptionSourceType("db-cluster-snapshot")
	EventSubscriptionSourceTypeDbInstance          = EventSubscriptionSourceType("db-instance")
	EventSubscriptionSourceTypeDbProxy             = EventSubscriptionSourceType("db-proxy")
	EventSubscriptionSourceTypeDbParameterGroup    = EventSubscriptionSourceType("db-parameter-group")
	EventSubscriptionSourceTypeDbSecurityGroup     = EventSubscriptionSourceType("db-security-group")
	EventSubscriptionSourceTypeDbSnapshot          = EventSubscriptionSourceType("db-snapshot")
)

func (EventSubscriptionSourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSourceType)(nil)).Elem()
}

func (e EventSubscriptionSourceType) ToEventSubscriptionSourceTypeOutput() EventSubscriptionSourceTypeOutput {
	return pulumi.ToOutput(e).(EventSubscriptionSourceTypeOutput)
}

func (e EventSubscriptionSourceType) ToEventSubscriptionSourceTypeOutputWithContext(ctx context.Context) EventSubscriptionSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventSubscriptionSourceTypeOutput)
}

func (e EventSubscriptionSourceType) ToEventSubscriptionSourceTypePtrOutput() EventSubscriptionSourceTypePtrOutput {
	return e.ToEventSubscriptionSourceTypePtrOutputWithContext(context.Background())
}

func (e EventSubscriptionSourceType) ToEventSubscriptionSourceTypePtrOutputWithContext(ctx context.Context) EventSubscriptionSourceTypePtrOutput {
	return EventSubscriptionSourceType(e).ToEventSubscriptionSourceTypeOutputWithContext(ctx).ToEventSubscriptionSourceTypePtrOutputWithContext(ctx)
}

func (e EventSubscriptionSourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventSubscriptionSourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventSubscriptionSourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventSubscriptionSourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventSubscriptionSourceTypeOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSourceType)(nil)).Elem()
}

func (o EventSubscriptionSourceTypeOutput) ToEventSubscriptionSourceTypeOutput() EventSubscriptionSourceTypeOutput {
	return o
}

func (o EventSubscriptionSourceTypeOutput) ToEventSubscriptionSourceTypeOutputWithContext(ctx context.Context) EventSubscriptionSourceTypeOutput {
	return o
}

func (o EventSubscriptionSourceTypeOutput) ToEventSubscriptionSourceTypePtrOutput() EventSubscriptionSourceTypePtrOutput {
	return o.ToEventSubscriptionSourceTypePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionSourceTypeOutput) ToEventSubscriptionSourceTypePtrOutputWithContext(ctx context.Context) EventSubscriptionSourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionSourceType) *EventSubscriptionSourceType {
		return &v
	}).(EventSubscriptionSourceTypePtrOutput)
}

func (o EventSubscriptionSourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventSubscriptionSourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventSubscriptionSourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventSubscriptionSourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionSourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventSubscriptionSourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionSourceTypePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSourceType)(nil)).Elem()
}

func (o EventSubscriptionSourceTypePtrOutput) ToEventSubscriptionSourceTypePtrOutput() EventSubscriptionSourceTypePtrOutput {
	return o
}

func (o EventSubscriptionSourceTypePtrOutput) ToEventSubscriptionSourceTypePtrOutputWithContext(ctx context.Context) EventSubscriptionSourceTypePtrOutput {
	return o
}

func (o EventSubscriptionSourceTypePtrOutput) Elem() EventSubscriptionSourceTypeOutput {
	return o.ApplyT(func(v *EventSubscriptionSourceType) EventSubscriptionSourceType {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionSourceType
		return ret
	}).(EventSubscriptionSourceTypeOutput)
}

func (o EventSubscriptionSourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionSourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventSubscriptionSourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventSubscriptionSourceTypeInput is an input type that accepts EventSubscriptionSourceTypeArgs and EventSubscriptionSourceTypeOutput values.
// You can construct a concrete instance of `EventSubscriptionSourceTypeInput` via:
//
//          EventSubscriptionSourceTypeArgs{...}
type EventSubscriptionSourceTypeInput interface {
	pulumi.Input

	ToEventSubscriptionSourceTypeOutput() EventSubscriptionSourceTypeOutput
	ToEventSubscriptionSourceTypeOutputWithContext(context.Context) EventSubscriptionSourceTypeOutput
}

var eventSubscriptionSourceTypePtrType = reflect.TypeOf((**EventSubscriptionSourceType)(nil)).Elem()

type EventSubscriptionSourceTypePtrInput interface {
	pulumi.Input

	ToEventSubscriptionSourceTypePtrOutput() EventSubscriptionSourceTypePtrOutput
	ToEventSubscriptionSourceTypePtrOutputWithContext(context.Context) EventSubscriptionSourceTypePtrOutput
}

type eventSubscriptionSourceTypePtr string

func EventSubscriptionSourceTypePtr(v string) EventSubscriptionSourceTypePtrInput {
	return (*eventSubscriptionSourceTypePtr)(&v)
}

func (*eventSubscriptionSourceTypePtr) ElementType() reflect.Type {
	return eventSubscriptionSourceTypePtrType
}

func (in *eventSubscriptionSourceTypePtr) ToEventSubscriptionSourceTypePtrOutput() EventSubscriptionSourceTypePtrOutput {
	return pulumi.ToOutput(in).(EventSubscriptionSourceTypePtrOutput)
}

func (in *eventSubscriptionSourceTypePtr) ToEventSubscriptionSourceTypePtrOutputWithContext(ctx context.Context) EventSubscriptionSourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventSubscriptionSourceTypePtrOutput)
}

// The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).
// If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
type GlobalClusterEngine string

const (
	GlobalClusterEngineAurora           = GlobalClusterEngine("aurora")
	GlobalClusterEngineAuroraMysql      = GlobalClusterEngine("aurora-mysql")
	GlobalClusterEngineAuroraPostgresql = GlobalClusterEngine("aurora-postgresql")
)

func (GlobalClusterEngine) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalClusterEngine)(nil)).Elem()
}

func (e GlobalClusterEngine) ToGlobalClusterEngineOutput() GlobalClusterEngineOutput {
	return pulumi.ToOutput(e).(GlobalClusterEngineOutput)
}

func (e GlobalClusterEngine) ToGlobalClusterEngineOutputWithContext(ctx context.Context) GlobalClusterEngineOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GlobalClusterEngineOutput)
}

func (e GlobalClusterEngine) ToGlobalClusterEnginePtrOutput() GlobalClusterEnginePtrOutput {
	return e.ToGlobalClusterEnginePtrOutputWithContext(context.Background())
}

func (e GlobalClusterEngine) ToGlobalClusterEnginePtrOutputWithContext(ctx context.Context) GlobalClusterEnginePtrOutput {
	return GlobalClusterEngine(e).ToGlobalClusterEngineOutputWithContext(ctx).ToGlobalClusterEnginePtrOutputWithContext(ctx)
}

func (e GlobalClusterEngine) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalClusterEngine) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalClusterEngine) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalClusterEngine) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GlobalClusterEngineOutput struct{ *pulumi.OutputState }

func (GlobalClusterEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalClusterEngine)(nil)).Elem()
}

func (o GlobalClusterEngineOutput) ToGlobalClusterEngineOutput() GlobalClusterEngineOutput {
	return o
}

func (o GlobalClusterEngineOutput) ToGlobalClusterEngineOutputWithContext(ctx context.Context) GlobalClusterEngineOutput {
	return o
}

func (o GlobalClusterEngineOutput) ToGlobalClusterEnginePtrOutput() GlobalClusterEnginePtrOutput {
	return o.ToGlobalClusterEnginePtrOutputWithContext(context.Background())
}

func (o GlobalClusterEngineOutput) ToGlobalClusterEnginePtrOutputWithContext(ctx context.Context) GlobalClusterEnginePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalClusterEngine) *GlobalClusterEngine {
		return &v
	}).(GlobalClusterEnginePtrOutput)
}

func (o GlobalClusterEngineOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GlobalClusterEngineOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GlobalClusterEngine) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GlobalClusterEngineOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GlobalClusterEngineOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GlobalClusterEngine) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GlobalClusterEnginePtrOutput struct{ *pulumi.OutputState }

func (GlobalClusterEnginePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalClusterEngine)(nil)).Elem()
}

func (o GlobalClusterEnginePtrOutput) ToGlobalClusterEnginePtrOutput() GlobalClusterEnginePtrOutput {
	return o
}

func (o GlobalClusterEnginePtrOutput) ToGlobalClusterEnginePtrOutputWithContext(ctx context.Context) GlobalClusterEnginePtrOutput {
	return o
}

func (o GlobalClusterEnginePtrOutput) Elem() GlobalClusterEngineOutput {
	return o.ApplyT(func(v *GlobalClusterEngine) GlobalClusterEngine {
		if v != nil {
			return *v
		}
		var ret GlobalClusterEngine
		return ret
	}).(GlobalClusterEngineOutput)
}

func (o GlobalClusterEnginePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GlobalClusterEnginePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GlobalClusterEngine) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GlobalClusterEngineInput is an input type that accepts GlobalClusterEngineArgs and GlobalClusterEngineOutput values.
// You can construct a concrete instance of `GlobalClusterEngineInput` via:
//
//          GlobalClusterEngineArgs{...}
type GlobalClusterEngineInput interface {
	pulumi.Input

	ToGlobalClusterEngineOutput() GlobalClusterEngineOutput
	ToGlobalClusterEngineOutputWithContext(context.Context) GlobalClusterEngineOutput
}

var globalClusterEnginePtrType = reflect.TypeOf((**GlobalClusterEngine)(nil)).Elem()

type GlobalClusterEnginePtrInput interface {
	pulumi.Input

	ToGlobalClusterEnginePtrOutput() GlobalClusterEnginePtrOutput
	ToGlobalClusterEnginePtrOutputWithContext(context.Context) GlobalClusterEnginePtrOutput
}

type globalClusterEnginePtr string

func GlobalClusterEnginePtr(v string) GlobalClusterEnginePtrInput {
	return (*globalClusterEnginePtr)(&v)
}

func (*globalClusterEnginePtr) ElementType() reflect.Type {
	return globalClusterEnginePtrType
}

func (in *globalClusterEnginePtr) ToGlobalClusterEnginePtrOutput() GlobalClusterEnginePtrOutput {
	return pulumi.ToOutput(in).(GlobalClusterEnginePtrOutput)
}

func (in *globalClusterEnginePtr) ToGlobalClusterEnginePtrOutputWithContext(ctx context.Context) GlobalClusterEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GlobalClusterEnginePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterEngineInput)(nil)).Elem(), DBClusterEngine("aurora"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterEnginePtrInput)(nil)).Elem(), DBClusterEngine("aurora"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterEngineModeInput)(nil)).Elem(), DBClusterEngineMode("provisioned"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterEngineModePtrInput)(nil)).Elem(), DBClusterEngineMode("provisioned"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterRestoreTypeInput)(nil)).Elem(), DBClusterRestoreType("full-copy"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterRestoreTypePtrInput)(nil)).Elem(), DBClusterRestoreType("full-copy"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterStorageTypeInput)(nil)).Elem(), DBClusterStorageType("io1"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBClusterStorageTypePtrInput)(nil)).Elem(), DBClusterStorageType("io1"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyAuthFormatAuthSchemeInput)(nil)).Elem(), DBProxyAuthFormatAuthScheme("SECRETS"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyAuthFormatAuthSchemePtrInput)(nil)).Elem(), DBProxyAuthFormatAuthScheme("SECRETS"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyAuthFormatIAMAuthInput)(nil)).Elem(), DBProxyAuthFormatIAMAuth("DISABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyAuthFormatIAMAuthPtrInput)(nil)).Elem(), DBProxyAuthFormatIAMAuth("DISABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyEndpointTargetRoleInput)(nil)).Elem(), DBProxyEndpointTargetRole("READ_WRITE"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyEndpointTargetRolePtrInput)(nil)).Elem(), DBProxyEndpointTargetRole("READ_WRITE"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyEngineFamilyInput)(nil)).Elem(), DBProxyEngineFamily("MYSQL"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyEngineFamilyPtrInput)(nil)).Elem(), DBProxyEngineFamily("MYSQL"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyTargetGroupTargetGroupNameInput)(nil)).Elem(), DBProxyTargetGroupTargetGroupName("default"))
	pulumi.RegisterInputType(reflect.TypeOf((*DBProxyTargetGroupTargetGroupNamePtrInput)(nil)).Elem(), DBProxyTargetGroupTargetGroupName("default"))
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionSourceTypeInput)(nil)).Elem(), EventSubscriptionSourceType("custom-engine-version"))
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionSourceTypePtrInput)(nil)).Elem(), EventSubscriptionSourceType("custom-engine-version"))
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalClusterEngineInput)(nil)).Elem(), GlobalClusterEngine("aurora"))
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalClusterEnginePtrInput)(nil)).Elem(), GlobalClusterEngine("aurora"))
	pulumi.RegisterOutputType(DBClusterEngineOutput{})
	pulumi.RegisterOutputType(DBClusterEnginePtrOutput{})
	pulumi.RegisterOutputType(DBClusterEngineModeOutput{})
	pulumi.RegisterOutputType(DBClusterEngineModePtrOutput{})
	pulumi.RegisterOutputType(DBClusterRestoreTypeOutput{})
	pulumi.RegisterOutputType(DBClusterRestoreTypePtrOutput{})
	pulumi.RegisterOutputType(DBClusterStorageTypeOutput{})
	pulumi.RegisterOutputType(DBClusterStorageTypePtrOutput{})
	pulumi.RegisterOutputType(DBProxyAuthFormatAuthSchemeOutput{})
	pulumi.RegisterOutputType(DBProxyAuthFormatAuthSchemePtrOutput{})
	pulumi.RegisterOutputType(DBProxyAuthFormatIAMAuthOutput{})
	pulumi.RegisterOutputType(DBProxyAuthFormatIAMAuthPtrOutput{})
	pulumi.RegisterOutputType(DBProxyEndpointTargetRoleOutput{})
	pulumi.RegisterOutputType(DBProxyEndpointTargetRolePtrOutput{})
	pulumi.RegisterOutputType(DBProxyEngineFamilyOutput{})
	pulumi.RegisterOutputType(DBProxyEngineFamilyPtrOutput{})
	pulumi.RegisterOutputType(DBProxyTargetGroupTargetGroupNameOutput{})
	pulumi.RegisterOutputType(DBProxyTargetGroupTargetGroupNamePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSourceTypeOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSourceTypePtrOutput{})
	pulumi.RegisterOutputType(GlobalClusterEngineOutput{})
	pulumi.RegisterOutputType(GlobalClusterEnginePtrOutput{})
}
