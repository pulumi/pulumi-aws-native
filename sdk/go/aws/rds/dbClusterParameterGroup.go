// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::RDS::DBClusterParameterGroup“ resource creates a new Amazon RDS DB cluster parameter group.
//
//	For information about configuring parameters for Amazon Aurora DB clusters, see [Working with parameter groups](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_WorkingWithParamGroups.html) in the *Amazon Aurora User Guide*.
//	 If you apply a parameter group to a DB cluster, then its DB instances might need to reboot. This can result in an outage while the DB instances are rebooting.
//	If you apply a change to parameter group associated with a stopped DB cluster, then the updated stack waits until the DB cluster is started.
type DbClusterParameterGroup struct {
	pulumi.CustomResourceState

	// The name of the DB cluster parameter group.
	//  Constraints:
	//   +  Must not match the name of an existing DB cluster parameter group.
	//
	//   This value is stored as a lowercase string.
	DbClusterParameterGroupName pulumi.StringPtrOutput `pulumi:"dbClusterParameterGroupName"`
	// The description for the DB cluster parameter group.
	Description pulumi.StringOutput `pulumi:"description"`
	// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
	//   *Aurora MySQL*
	//  Example: ``aurora-mysql5.7``, ``aurora-mysql8.0``
	//   *Aurora PostgreSQL*
	//  Example: ``aurora-postgresql14``
	//   *RDS for MySQL*
	//  Example: ``mysql8.0``
	//   *RDS for PostgreSQL*
	//  Example: ``postgres13``
	//  To list all of the available parameter group families for a DB engine, use the following command:
	//   ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine>``
	//  For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:
	//   ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql``
	//   The output contains duplicates.
	//   The following are the valid DB engine values:
	//   +   ``aurora-mysql``
	//   +   ``aurora-postgresql``
	//   +   ``mysql``
	//   +   ``postgres``
	Family pulumi.StringOutput `pulumi:"family"`
	// Provides a list of parameters for the DB cluster parameter group.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RDS::DBClusterParameterGroup` for more information about the expected schema for this property.
	Parameters pulumi.AnyOutput `pulumi:"parameters"`
	// Tags to assign to the DB cluster parameter group.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDbClusterParameterGroup registers a new resource with the given unique name, arguments, and options.
func NewDbClusterParameterGroup(ctx *pulumi.Context,
	name string, args *DbClusterParameterGroupArgs, opts ...pulumi.ResourceOption) (*DbClusterParameterGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Family == nil {
		return nil, errors.New("invalid value for required argument 'Family'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dbClusterParameterGroupName",
		"description",
		"family",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbClusterParameterGroup
	err := ctx.RegisterResource("aws-native:rds:DbClusterParameterGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbClusterParameterGroup gets an existing DbClusterParameterGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbClusterParameterGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbClusterParameterGroupState, opts ...pulumi.ResourceOption) (*DbClusterParameterGroup, error) {
	var resource DbClusterParameterGroup
	err := ctx.ReadResource("aws-native:rds:DbClusterParameterGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbClusterParameterGroup resources.
type dbClusterParameterGroupState struct {
}

type DbClusterParameterGroupState struct {
}

func (DbClusterParameterGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterParameterGroupState)(nil)).Elem()
}

type dbClusterParameterGroupArgs struct {
	// The name of the DB cluster parameter group.
	//  Constraints:
	//   +  Must not match the name of an existing DB cluster parameter group.
	//
	//   This value is stored as a lowercase string.
	DbClusterParameterGroupName *string `pulumi:"dbClusterParameterGroupName"`
	// The description for the DB cluster parameter group.
	Description string `pulumi:"description"`
	// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
	//   *Aurora MySQL*
	//  Example: ``aurora-mysql5.7``, ``aurora-mysql8.0``
	//   *Aurora PostgreSQL*
	//  Example: ``aurora-postgresql14``
	//   *RDS for MySQL*
	//  Example: ``mysql8.0``
	//   *RDS for PostgreSQL*
	//  Example: ``postgres13``
	//  To list all of the available parameter group families for a DB engine, use the following command:
	//   ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine>``
	//  For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:
	//   ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql``
	//   The output contains duplicates.
	//   The following are the valid DB engine values:
	//   +   ``aurora-mysql``
	//   +   ``aurora-postgresql``
	//   +   ``mysql``
	//   +   ``postgres``
	Family string `pulumi:"family"`
	// Provides a list of parameters for the DB cluster parameter group.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RDS::DBClusterParameterGroup` for more information about the expected schema for this property.
	Parameters interface{} `pulumi:"parameters"`
	// Tags to assign to the DB cluster parameter group.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a DbClusterParameterGroup resource.
type DbClusterParameterGroupArgs struct {
	// The name of the DB cluster parameter group.
	//  Constraints:
	//   +  Must not match the name of an existing DB cluster parameter group.
	//
	//   This value is stored as a lowercase string.
	DbClusterParameterGroupName pulumi.StringPtrInput
	// The description for the DB cluster parameter group.
	Description pulumi.StringInput
	// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
	//   *Aurora MySQL*
	//  Example: ``aurora-mysql5.7``, ``aurora-mysql8.0``
	//   *Aurora PostgreSQL*
	//  Example: ``aurora-postgresql14``
	//   *RDS for MySQL*
	//  Example: ``mysql8.0``
	//   *RDS for PostgreSQL*
	//  Example: ``postgres13``
	//  To list all of the available parameter group families for a DB engine, use the following command:
	//   ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine>``
	//  For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:
	//   ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql``
	//   The output contains duplicates.
	//   The following are the valid DB engine values:
	//   +   ``aurora-mysql``
	//   +   ``aurora-postgresql``
	//   +   ``mysql``
	//   +   ``postgres``
	Family pulumi.StringInput
	// Provides a list of parameters for the DB cluster parameter group.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RDS::DBClusterParameterGroup` for more information about the expected schema for this property.
	Parameters pulumi.Input
	// Tags to assign to the DB cluster parameter group.
	Tags aws.TagArrayInput
}

func (DbClusterParameterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbClusterParameterGroupArgs)(nil)).Elem()
}

type DbClusterParameterGroupInput interface {
	pulumi.Input

	ToDbClusterParameterGroupOutput() DbClusterParameterGroupOutput
	ToDbClusterParameterGroupOutputWithContext(ctx context.Context) DbClusterParameterGroupOutput
}

func (*DbClusterParameterGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DbClusterParameterGroup)(nil)).Elem()
}

func (i *DbClusterParameterGroup) ToDbClusterParameterGroupOutput() DbClusterParameterGroupOutput {
	return i.ToDbClusterParameterGroupOutputWithContext(context.Background())
}

func (i *DbClusterParameterGroup) ToDbClusterParameterGroupOutputWithContext(ctx context.Context) DbClusterParameterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbClusterParameterGroupOutput)
}

type DbClusterParameterGroupOutput struct{ *pulumi.OutputState }

func (DbClusterParameterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbClusterParameterGroup)(nil)).Elem()
}

func (o DbClusterParameterGroupOutput) ToDbClusterParameterGroupOutput() DbClusterParameterGroupOutput {
	return o
}

func (o DbClusterParameterGroupOutput) ToDbClusterParameterGroupOutputWithContext(ctx context.Context) DbClusterParameterGroupOutput {
	return o
}

// The name of the DB cluster parameter group.
//
//	Constraints:
//	 +  Must not match the name of an existing DB cluster parameter group.
//
//	 This value is stored as a lowercase string.
func (o DbClusterParameterGroupOutput) DbClusterParameterGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbClusterParameterGroup) pulumi.StringPtrOutput { return v.DbClusterParameterGroupName }).(pulumi.StringPtrOutput)
}

// The description for the DB cluster parameter group.
func (o DbClusterParameterGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DbClusterParameterGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
//
//	 *Aurora MySQL*
//	Example: ``aurora-mysql5.7``, ``aurora-mysql8.0``
//	 *Aurora PostgreSQL*
//	Example: ``aurora-postgresql14``
//	 *RDS for MySQL*
//	Example: ``mysql8.0``
//	 *RDS for PostgreSQL*
//	Example: ``postgres13``
//	To list all of the available parameter group families for a DB engine, use the following command:
//	 ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine>``
//	For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:
//	 ``aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql``
//	 The output contains duplicates.
//	 The following are the valid DB engine values:
//	 +   ``aurora-mysql``
//	 +   ``aurora-postgresql``
//	 +   ``mysql``
//	 +   ``postgres``
func (o DbClusterParameterGroupOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v *DbClusterParameterGroup) pulumi.StringOutput { return v.Family }).(pulumi.StringOutput)
}

// Provides a list of parameters for the DB cluster parameter group.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RDS::DBClusterParameterGroup` for more information about the expected schema for this property.
func (o DbClusterParameterGroupOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *DbClusterParameterGroup) pulumi.AnyOutput { return v.Parameters }).(pulumi.AnyOutput)
}

// Tags to assign to the DB cluster parameter group.
func (o DbClusterParameterGroupOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DbClusterParameterGroup) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbClusterParameterGroupInput)(nil)).Elem(), &DbClusterParameterGroup{})
	pulumi.RegisterOutputType(DbClusterParameterGroupOutput{})
}
