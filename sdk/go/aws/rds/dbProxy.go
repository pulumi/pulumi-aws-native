// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource schema for AWS::RDS::DBProxy
type DbProxy struct {
	pulumi.CustomResourceState

	// The authorization mechanism that the proxy uses.
	Auth DbProxyAuthFormatArrayOutput `pulumi:"auth"`
	// The Amazon Resource Name (ARN) for the proxy.
	DbProxyArn pulumi.StringOutput `pulumi:"dbProxyArn"`
	// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
	DbProxyName pulumi.StringOutput `pulumi:"dbProxyName"`
	// Whether the proxy includes detailed information about SQL statements in its logs.
	DebugLogging pulumi.BoolPtrOutput `pulumi:"debugLogging"`
	// The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The kinds of databases that the proxy can connect to.
	EngineFamily DbProxyEngineFamilyOutput `pulumi:"engineFamily"`
	// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
	IdleClientTimeout pulumi.IntPtrOutput `pulumi:"idleClientTimeout"`
	// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
	RequireTls pulumi.BoolPtrOutput `pulumi:"requireTls"`
	// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
	Tags DbProxyTagFormatArrayOutput `pulumi:"tags"`
	// VPC ID to associate with the new DB proxy.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// VPC security group IDs to associate with the new proxy.
	VpcSecurityGroupIds pulumi.StringArrayOutput `pulumi:"vpcSecurityGroupIds"`
	// VPC subnet IDs to associate with the new proxy.
	VpcSubnetIds pulumi.StringArrayOutput `pulumi:"vpcSubnetIds"`
}

// NewDbProxy registers a new resource with the given unique name, arguments, and options.
func NewDbProxy(ctx *pulumi.Context,
	name string, args *DbProxyArgs, opts ...pulumi.ResourceOption) (*DbProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Auth == nil {
		return nil, errors.New("invalid value for required argument 'Auth'")
	}
	if args.EngineFamily == nil {
		return nil, errors.New("invalid value for required argument 'EngineFamily'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.VpcSubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'VpcSubnetIds'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dbProxyName",
		"engineFamily",
		"vpcSubnetIds[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbProxy
	err := ctx.RegisterResource("aws-native:rds:DbProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbProxy gets an existing DbProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbProxyState, opts ...pulumi.ResourceOption) (*DbProxy, error) {
	var resource DbProxy
	err := ctx.ReadResource("aws-native:rds:DbProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbProxy resources.
type dbProxyState struct {
}

type DbProxyState struct {
}

func (DbProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbProxyState)(nil)).Elem()
}

type dbProxyArgs struct {
	// The authorization mechanism that the proxy uses.
	Auth []DbProxyAuthFormat `pulumi:"auth"`
	// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
	DbProxyName *string `pulumi:"dbProxyName"`
	// Whether the proxy includes detailed information about SQL statements in its logs.
	DebugLogging *bool `pulumi:"debugLogging"`
	// The kinds of databases that the proxy can connect to.
	EngineFamily DbProxyEngineFamily `pulumi:"engineFamily"`
	// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
	IdleClientTimeout *int `pulumi:"idleClientTimeout"`
	// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
	RequireTls *bool `pulumi:"requireTls"`
	// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
	RoleArn string `pulumi:"roleArn"`
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
	Tags []DbProxyTagFormat `pulumi:"tags"`
	// VPC security group IDs to associate with the new proxy.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
	// VPC subnet IDs to associate with the new proxy.
	VpcSubnetIds []string `pulumi:"vpcSubnetIds"`
}

// The set of arguments for constructing a DbProxy resource.
type DbProxyArgs struct {
	// The authorization mechanism that the proxy uses.
	Auth DbProxyAuthFormatArrayInput
	// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
	DbProxyName pulumi.StringPtrInput
	// Whether the proxy includes detailed information about SQL statements in its logs.
	DebugLogging pulumi.BoolPtrInput
	// The kinds of databases that the proxy can connect to.
	EngineFamily DbProxyEngineFamilyInput
	// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
	IdleClientTimeout pulumi.IntPtrInput
	// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
	RequireTls pulumi.BoolPtrInput
	// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
	RoleArn pulumi.StringInput
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
	Tags DbProxyTagFormatArrayInput
	// VPC security group IDs to associate with the new proxy.
	VpcSecurityGroupIds pulumi.StringArrayInput
	// VPC subnet IDs to associate with the new proxy.
	VpcSubnetIds pulumi.StringArrayInput
}

func (DbProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbProxyArgs)(nil)).Elem()
}

type DbProxyInput interface {
	pulumi.Input

	ToDbProxyOutput() DbProxyOutput
	ToDbProxyOutputWithContext(ctx context.Context) DbProxyOutput
}

func (*DbProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**DbProxy)(nil)).Elem()
}

func (i *DbProxy) ToDbProxyOutput() DbProxyOutput {
	return i.ToDbProxyOutputWithContext(context.Background())
}

func (i *DbProxy) ToDbProxyOutputWithContext(ctx context.Context) DbProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbProxyOutput)
}

func (i *DbProxy) ToOutput(ctx context.Context) pulumix.Output[*DbProxy] {
	return pulumix.Output[*DbProxy]{
		OutputState: i.ToDbProxyOutputWithContext(ctx).OutputState,
	}
}

type DbProxyOutput struct{ *pulumi.OutputState }

func (DbProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbProxy)(nil)).Elem()
}

func (o DbProxyOutput) ToDbProxyOutput() DbProxyOutput {
	return o
}

func (o DbProxyOutput) ToDbProxyOutputWithContext(ctx context.Context) DbProxyOutput {
	return o
}

func (o DbProxyOutput) ToOutput(ctx context.Context) pulumix.Output[*DbProxy] {
	return pulumix.Output[*DbProxy]{
		OutputState: o.OutputState,
	}
}

// The authorization mechanism that the proxy uses.
func (o DbProxyOutput) Auth() DbProxyAuthFormatArrayOutput {
	return o.ApplyT(func(v *DbProxy) DbProxyAuthFormatArrayOutput { return v.Auth }).(DbProxyAuthFormatArrayOutput)
}

// The Amazon Resource Name (ARN) for the proxy.
func (o DbProxyOutput) DbProxyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.StringOutput { return v.DbProxyArn }).(pulumi.StringOutput)
}

// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
func (o DbProxyOutput) DbProxyName() pulumi.StringOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.StringOutput { return v.DbProxyName }).(pulumi.StringOutput)
}

// Whether the proxy includes detailed information about SQL statements in its logs.
func (o DbProxyOutput) DebugLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.BoolPtrOutput { return v.DebugLogging }).(pulumi.BoolPtrOutput)
}

// The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
func (o DbProxyOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The kinds of databases that the proxy can connect to.
func (o DbProxyOutput) EngineFamily() DbProxyEngineFamilyOutput {
	return o.ApplyT(func(v *DbProxy) DbProxyEngineFamilyOutput { return v.EngineFamily }).(DbProxyEngineFamilyOutput)
}

// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
func (o DbProxyOutput) IdleClientTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.IntPtrOutput { return v.IdleClientTimeout }).(pulumi.IntPtrOutput)
}

// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
func (o DbProxyOutput) RequireTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.BoolPtrOutput { return v.RequireTls }).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
func (o DbProxyOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
func (o DbProxyOutput) Tags() DbProxyTagFormatArrayOutput {
	return o.ApplyT(func(v *DbProxy) DbProxyTagFormatArrayOutput { return v.Tags }).(DbProxyTagFormatArrayOutput)
}

// VPC ID to associate with the new DB proxy.
func (o DbProxyOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// VPC security group IDs to associate with the new proxy.
func (o DbProxyOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.StringArrayOutput { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

// VPC subnet IDs to associate with the new proxy.
func (o DbProxyOutput) VpcSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbProxy) pulumi.StringArrayOutput { return v.VpcSubnetIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbProxyInput)(nil)).Elem(), &DbProxy{})
	pulumi.RegisterOutputType(DbProxyOutput{})
}
