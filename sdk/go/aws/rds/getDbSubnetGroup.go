// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::RDS::DBSubnetGroup resource creates a database subnet group. Subnet groups must contain at least two subnets in two different Availability Zones in the same region.
func LookupDbSubnetGroup(ctx *pulumi.Context, args *LookupDbSubnetGroupArgs, opts ...pulumi.InvokeOption) (*LookupDbSubnetGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbSubnetGroupResult
	err := ctx.Invoke("aws-native:rds:getDbSubnetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDbSubnetGroupArgs struct {
	DbSubnetGroupName string `pulumi:"dbSubnetGroupName"`
}

type LookupDbSubnetGroupResult struct {
	DbSubnetGroupDescription *string `pulumi:"dbSubnetGroupDescription"`
	// An array of key-value pairs to apply to this resource.
	Tags []DbSubnetGroupTag `pulumi:"tags"`
}

func LookupDbSubnetGroupOutput(ctx *pulumi.Context, args LookupDbSubnetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupDbSubnetGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDbSubnetGroupResult, error) {
			args := v.(LookupDbSubnetGroupArgs)
			r, err := LookupDbSubnetGroup(ctx, &args, opts...)
			var s LookupDbSubnetGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDbSubnetGroupResultOutput)
}

type LookupDbSubnetGroupOutputArgs struct {
	DbSubnetGroupName pulumi.StringInput `pulumi:"dbSubnetGroupName"`
}

func (LookupDbSubnetGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbSubnetGroupArgs)(nil)).Elem()
}

type LookupDbSubnetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupDbSubnetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbSubnetGroupResult)(nil)).Elem()
}

func (o LookupDbSubnetGroupResultOutput) ToLookupDbSubnetGroupResultOutput() LookupDbSubnetGroupResultOutput {
	return o
}

func (o LookupDbSubnetGroupResultOutput) ToLookupDbSubnetGroupResultOutputWithContext(ctx context.Context) LookupDbSubnetGroupResultOutput {
	return o
}

func (o LookupDbSubnetGroupResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDbSubnetGroupResult] {
	return pulumix.Output[LookupDbSubnetGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDbSubnetGroupResultOutput) DbSubnetGroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbSubnetGroupResult) *string { return v.DbSubnetGroupDescription }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupDbSubnetGroupResultOutput) Tags() DbSubnetGroupTagArrayOutput {
	return o.ApplyT(func(v LookupDbSubnetGroupResult) []DbSubnetGroupTag { return v.Tags }).(DbSubnetGroupTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbSubnetGroupResultOutput{})
}
