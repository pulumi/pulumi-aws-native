// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::RDS::DBSubnetGroup“ resource creates a database subnet group. Subnet groups must contain at least two subnets in two different Availability Zones in the same region.
//
//	For more information, see [Working with DB subnet groups](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Subnets) in the *Amazon RDS User Guide*.
func LookupDbSubnetGroup(ctx *pulumi.Context, args *LookupDbSubnetGroupArgs, opts ...pulumi.InvokeOption) (*LookupDbSubnetGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbSubnetGroupResult
	err := ctx.Invoke("aws-native:rds:getDbSubnetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDbSubnetGroupArgs struct {
	// The name for the DB subnet group. This value is stored as a lowercase string.
	//  Constraints:
	//   +  Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens.
	//   +  Must not be default.
	//   +  First character must be a letter.
	//
	//  Example: ``mydbsubnetgroup``
	DbSubnetGroupName string `pulumi:"dbSubnetGroupName"`
}

type LookupDbSubnetGroupResult struct {
	// The description for the DB subnet group.
	DbSubnetGroupDescription *string `pulumi:"dbSubnetGroupDescription"`
	// The EC2 Subnet IDs for the DB subnet group.
	SubnetIds []string `pulumi:"subnetIds"`
	// Tags to assign to the DB subnet group.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupDbSubnetGroupOutput(ctx *pulumi.Context, args LookupDbSubnetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupDbSubnetGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDbSubnetGroupResultOutput, error) {
			args := v.(LookupDbSubnetGroupArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDbSubnetGroupResult
			secret, err := ctx.InvokePackageRaw("aws-native:rds:getDbSubnetGroup", args, &rv, "", opts...)
			if err != nil {
				return LookupDbSubnetGroupResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDbSubnetGroupResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDbSubnetGroupResultOutput), nil
			}
			return output, nil
		}).(LookupDbSubnetGroupResultOutput)
}

type LookupDbSubnetGroupOutputArgs struct {
	// The name for the DB subnet group. This value is stored as a lowercase string.
	//  Constraints:
	//   +  Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens.
	//   +  Must not be default.
	//   +  First character must be a letter.
	//
	//  Example: ``mydbsubnetgroup``
	DbSubnetGroupName pulumi.StringInput `pulumi:"dbSubnetGroupName"`
}

func (LookupDbSubnetGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbSubnetGroupArgs)(nil)).Elem()
}

type LookupDbSubnetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupDbSubnetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbSubnetGroupResult)(nil)).Elem()
}

func (o LookupDbSubnetGroupResultOutput) ToLookupDbSubnetGroupResultOutput() LookupDbSubnetGroupResultOutput {
	return o
}

func (o LookupDbSubnetGroupResultOutput) ToLookupDbSubnetGroupResultOutputWithContext(ctx context.Context) LookupDbSubnetGroupResultOutput {
	return o
}

// The description for the DB subnet group.
func (o LookupDbSubnetGroupResultOutput) DbSubnetGroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbSubnetGroupResult) *string { return v.DbSubnetGroupDescription }).(pulumi.StringPtrOutput)
}

// The EC2 Subnet IDs for the DB subnet group.
func (o LookupDbSubnetGroupResultOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDbSubnetGroupResult) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Tags to assign to the DB subnet group.
func (o LookupDbSubnetGroupResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDbSubnetGroupResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbSubnetGroupResultOutput{})
}
