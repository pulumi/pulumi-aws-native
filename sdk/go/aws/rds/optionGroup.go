// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::RDS::OptionGroup“ resource creates or updates an option group, to enable and configure features that are specific to a particular DB engine.
type OptionGroup struct {
	pulumi.CustomResourceState

	// Specifies the name of the engine that this option group should be associated with.
	//  Valid Values:
	//   +   ``mariadb``
	//   +   ``mysql``
	//   +   ``oracle-ee``
	//   +   ``oracle-ee-cdb``
	//   +   ``oracle-se2``
	//   +   ``oracle-se2-cdb``
	//   +   ``postgres``
	//   +   ``sqlserver-ee``
	//   +   ``sqlserver-se``
	//   +   ``sqlserver-ex``
	//   +   ``sqlserver-web``
	EngineName pulumi.StringOutput `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumi.StringOutput `pulumi:"majorEngineVersion"`
	// A list of options and the settings for each option.
	OptionConfigurations OptionGroupOptionConfigurationArrayOutput `pulumi:"optionConfigurations"`
	// The description of the option group.
	OptionGroupDescription pulumi.StringOutput `pulumi:"optionGroupDescription"`
	// The name of the option group to be created.
	//  Constraints:
	//   +  Must be 1 to 255 letters, numbers, or hyphens
	//   +  First character must be a letter
	//   +  Can't end with a hyphen or contain two consecutive hyphens
	//
	//  Example: ``myoptiongroup``
	//  If you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group.
	//   This value is stored as a lowercase string.
	OptionGroupName pulumi.StringPtrOutput `pulumi:"optionGroupName"`
	// An optional array of key-value pairs to apply to this option group.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewOptionGroup registers a new resource with the given unique name, arguments, and options.
func NewOptionGroup(ctx *pulumi.Context,
	name string, args *OptionGroupArgs, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineName == nil {
		return nil, errors.New("invalid value for required argument 'EngineName'")
	}
	if args.MajorEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'MajorEngineVersion'")
	}
	if args.OptionGroupDescription == nil {
		return nil, errors.New("invalid value for required argument 'OptionGroupDescription'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"engineName",
		"majorEngineVersion",
		"optionGroupDescription",
		"optionGroupName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OptionGroup
	err := ctx.RegisterResource("aws-native:rds:OptionGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOptionGroup gets an existing OptionGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOptionGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OptionGroupState, opts ...pulumi.ResourceOption) (*OptionGroup, error) {
	var resource OptionGroup
	err := ctx.ReadResource("aws-native:rds:OptionGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OptionGroup resources.
type optionGroupState struct {
}

type OptionGroupState struct {
}

func (OptionGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupState)(nil)).Elem()
}

type optionGroupArgs struct {
	// Specifies the name of the engine that this option group should be associated with.
	//  Valid Values:
	//   +   ``mariadb``
	//   +   ``mysql``
	//   +   ``oracle-ee``
	//   +   ``oracle-ee-cdb``
	//   +   ``oracle-se2``
	//   +   ``oracle-se2-cdb``
	//   +   ``postgres``
	//   +   ``sqlserver-ee``
	//   +   ``sqlserver-se``
	//   +   ``sqlserver-ex``
	//   +   ``sqlserver-web``
	EngineName string `pulumi:"engineName"`
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion string `pulumi:"majorEngineVersion"`
	// A list of options and the settings for each option.
	OptionConfigurations []OptionGroupOptionConfiguration `pulumi:"optionConfigurations"`
	// The description of the option group.
	OptionGroupDescription string `pulumi:"optionGroupDescription"`
	// The name of the option group to be created.
	//  Constraints:
	//   +  Must be 1 to 255 letters, numbers, or hyphens
	//   +  First character must be a letter
	//   +  Can't end with a hyphen or contain two consecutive hyphens
	//
	//  Example: ``myoptiongroup``
	//  If you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group.
	//   This value is stored as a lowercase string.
	OptionGroupName *string `pulumi:"optionGroupName"`
	// An optional array of key-value pairs to apply to this option group.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a OptionGroup resource.
type OptionGroupArgs struct {
	// Specifies the name of the engine that this option group should be associated with.
	//  Valid Values:
	//   +   ``mariadb``
	//   +   ``mysql``
	//   +   ``oracle-ee``
	//   +   ``oracle-ee-cdb``
	//   +   ``oracle-se2``
	//   +   ``oracle-se2-cdb``
	//   +   ``postgres``
	//   +   ``sqlserver-ee``
	//   +   ``sqlserver-se``
	//   +   ``sqlserver-ex``
	//   +   ``sqlserver-web``
	EngineName pulumi.StringInput
	// Specifies the major version of the engine that this option group should be associated with.
	MajorEngineVersion pulumi.StringInput
	// A list of options and the settings for each option.
	OptionConfigurations OptionGroupOptionConfigurationArrayInput
	// The description of the option group.
	OptionGroupDescription pulumi.StringInput
	// The name of the option group to be created.
	//  Constraints:
	//   +  Must be 1 to 255 letters, numbers, or hyphens
	//   +  First character must be a letter
	//   +  Can't end with a hyphen or contain two consecutive hyphens
	//
	//  Example: ``myoptiongroup``
	//  If you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group.
	//   This value is stored as a lowercase string.
	OptionGroupName pulumi.StringPtrInput
	// An optional array of key-value pairs to apply to this option group.
	Tags aws.TagArrayInput
}

func (OptionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*optionGroupArgs)(nil)).Elem()
}

type OptionGroupInput interface {
	pulumi.Input

	ToOptionGroupOutput() OptionGroupOutput
	ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput
}

func (*OptionGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionGroup)(nil)).Elem()
}

func (i *OptionGroup) ToOptionGroupOutput() OptionGroupOutput {
	return i.ToOptionGroupOutputWithContext(context.Background())
}

func (i *OptionGroup) ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionGroupOutput)
}

type OptionGroupOutput struct{ *pulumi.OutputState }

func (OptionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionGroup)(nil)).Elem()
}

func (o OptionGroupOutput) ToOptionGroupOutput() OptionGroupOutput {
	return o
}

func (o OptionGroupOutput) ToOptionGroupOutputWithContext(ctx context.Context) OptionGroupOutput {
	return o
}

// Specifies the name of the engine that this option group should be associated with.
//
//	Valid Values:
//	 +   ``mariadb``
//	 +   ``mysql``
//	 +   ``oracle-ee``
//	 +   ``oracle-ee-cdb``
//	 +   ``oracle-se2``
//	 +   ``oracle-se2-cdb``
//	 +   ``postgres``
//	 +   ``sqlserver-ee``
//	 +   ``sqlserver-se``
//	 +   ``sqlserver-ex``
//	 +   ``sqlserver-web``
func (o OptionGroupOutput) EngineName() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.EngineName }).(pulumi.StringOutput)
}

// Specifies the major version of the engine that this option group should be associated with.
func (o OptionGroupOutput) MajorEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.MajorEngineVersion }).(pulumi.StringOutput)
}

// A list of options and the settings for each option.
func (o OptionGroupOutput) OptionConfigurations() OptionGroupOptionConfigurationArrayOutput {
	return o.ApplyT(func(v *OptionGroup) OptionGroupOptionConfigurationArrayOutput { return v.OptionConfigurations }).(OptionGroupOptionConfigurationArrayOutput)
}

// The description of the option group.
func (o OptionGroupOutput) OptionGroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringOutput { return v.OptionGroupDescription }).(pulumi.StringOutput)
}

// The name of the option group to be created.
//
//	Constraints:
//	 +  Must be 1 to 255 letters, numbers, or hyphens
//	 +  First character must be a letter
//	 +  Can't end with a hyphen or contain two consecutive hyphens
//
//	Example: ``myoptiongroup``
//	If you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group.
//	 This value is stored as a lowercase string.
func (o OptionGroupOutput) OptionGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OptionGroup) pulumi.StringPtrOutput { return v.OptionGroupName }).(pulumi.StringPtrOutput)
}

// An optional array of key-value pairs to apply to this option group.
func (o OptionGroupOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *OptionGroup) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OptionGroupInput)(nil)).Elem(), &OptionGroup{})
	pulumi.RegisterOutputType(OptionGroupOutput{})
}
