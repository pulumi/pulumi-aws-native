// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::RDS::DBProxy
func LookupDBProxy(ctx *pulumi.Context, args *LookupDBProxyArgs, opts ...pulumi.InvokeOption) (*LookupDBProxyResult, error) {
	var rv LookupDBProxyResult
	err := ctx.Invoke("aws-native:rds:getDBProxy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDBProxyArgs struct {
	// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
	DBProxyName string `pulumi:"dBProxyName"`
}

type LookupDBProxyResult struct {
	// The authorization mechanism that the proxy uses.
	Auth []DBProxyAuthFormat `pulumi:"auth"`
	// The Amazon Resource Name (ARN) for the proxy.
	DBProxyArn *string `pulumi:"dBProxyArn"`
	// Whether the proxy includes detailed information about SQL statements in its logs.
	DebugLogging *bool `pulumi:"debugLogging"`
	// The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
	Endpoint *string `pulumi:"endpoint"`
	// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
	IdleClientTimeout *int `pulumi:"idleClientTimeout"`
	// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
	RequireTLS *bool `pulumi:"requireTLS"`
	// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
	RoleArn *string `pulumi:"roleArn"`
	// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
	Tags []DBProxyTagFormat `pulumi:"tags"`
	// VPC security group IDs to associate with the new proxy.
	VpcSecurityGroupIds []string `pulumi:"vpcSecurityGroupIds"`
}

func LookupDBProxyOutput(ctx *pulumi.Context, args LookupDBProxyOutputArgs, opts ...pulumi.InvokeOption) LookupDBProxyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDBProxyResult, error) {
			args := v.(LookupDBProxyArgs)
			r, err := LookupDBProxy(ctx, &args, opts...)
			var s LookupDBProxyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDBProxyResultOutput)
}

type LookupDBProxyOutputArgs struct {
	// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
	DBProxyName pulumi.StringInput `pulumi:"dBProxyName"`
}

func (LookupDBProxyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDBProxyArgs)(nil)).Elem()
}

type LookupDBProxyResultOutput struct{ *pulumi.OutputState }

func (LookupDBProxyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDBProxyResult)(nil)).Elem()
}

func (o LookupDBProxyResultOutput) ToLookupDBProxyResultOutput() LookupDBProxyResultOutput {
	return o
}

func (o LookupDBProxyResultOutput) ToLookupDBProxyResultOutputWithContext(ctx context.Context) LookupDBProxyResultOutput {
	return o
}

// The authorization mechanism that the proxy uses.
func (o LookupDBProxyResultOutput) Auth() DBProxyAuthFormatArrayOutput {
	return o.ApplyT(func(v LookupDBProxyResult) []DBProxyAuthFormat { return v.Auth }).(DBProxyAuthFormatArrayOutput)
}

// The Amazon Resource Name (ARN) for the proxy.
func (o LookupDBProxyResultOutput) DBProxyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDBProxyResult) *string { return v.DBProxyArn }).(pulumi.StringPtrOutput)
}

// Whether the proxy includes detailed information about SQL statements in its logs.
func (o LookupDBProxyResultOutput) DebugLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDBProxyResult) *bool { return v.DebugLogging }).(pulumi.BoolPtrOutput)
}

// The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
func (o LookupDBProxyResultOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDBProxyResult) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
func (o LookupDBProxyResultOutput) IdleClientTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDBProxyResult) *int { return v.IdleClientTimeout }).(pulumi.IntPtrOutput)
}

// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
func (o LookupDBProxyResultOutput) RequireTLS() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDBProxyResult) *bool { return v.RequireTLS }).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
func (o LookupDBProxyResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDBProxyResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
func (o LookupDBProxyResultOutput) Tags() DBProxyTagFormatArrayOutput {
	return o.ApplyT(func(v LookupDBProxyResult) []DBProxyTagFormat { return v.Tags }).(DBProxyTagFormatArrayOutput)
}

// VPC security group IDs to associate with the new proxy.
func (o LookupDBProxyResultOutput) VpcSecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDBProxyResult) []string { return v.VpcSecurityGroupIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDBProxyResultOutput{})
}
