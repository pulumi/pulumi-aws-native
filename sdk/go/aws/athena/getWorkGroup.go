// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Athena::WorkGroup
func LookupWorkGroup(ctx *pulumi.Context, args *LookupWorkGroupArgs, opts ...pulumi.InvokeOption) (*LookupWorkGroupResult, error) {
	var rv LookupWorkGroupResult
	err := ctx.Invoke("aws-native:athena:getWorkGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkGroupArgs struct {
	// The workGroup name.
	Name string `pulumi:"name"`
}

type LookupWorkGroupResult struct {
	// The date and time the workgroup was created.
	CreationTime *string `pulumi:"creationTime"`
	// The workgroup description.
	Description *string `pulumi:"description"`
	// The option to delete the workgroup and its contents even if the workgroup contains any named queries.
	RecursiveDeleteOption *bool `pulumi:"recursiveDeleteOption"`
	// The state of the workgroup: ENABLED or DISABLED.
	State *WorkGroupStateEnum `pulumi:"state"`
	// One or more tags, separated by commas, that you want to attach to the workgroup as you create it
	Tags []WorkGroupTag `pulumi:"tags"`
	// The workgroup configuration
	WorkGroupConfiguration *WorkGroupConfiguration `pulumi:"workGroupConfiguration"`
	// The workgroup configuration update object
	WorkGroupConfigurationUpdates *WorkGroupConfigurationUpdates `pulumi:"workGroupConfigurationUpdates"`
}

func LookupWorkGroupOutput(ctx *pulumi.Context, args LookupWorkGroupOutputArgs, opts ...pulumi.InvokeOption) LookupWorkGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkGroupResult, error) {
			args := v.(LookupWorkGroupArgs)
			r, err := LookupWorkGroup(ctx, &args, opts...)
			var s LookupWorkGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkGroupResultOutput)
}

type LookupWorkGroupOutputArgs struct {
	// The workGroup name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupWorkGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkGroupArgs)(nil)).Elem()
}

type LookupWorkGroupResultOutput struct{ *pulumi.OutputState }

func (LookupWorkGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkGroupResult)(nil)).Elem()
}

func (o LookupWorkGroupResultOutput) ToLookupWorkGroupResultOutput() LookupWorkGroupResultOutput {
	return o
}

func (o LookupWorkGroupResultOutput) ToLookupWorkGroupResultOutputWithContext(ctx context.Context) LookupWorkGroupResultOutput {
	return o
}

// The date and time the workgroup was created.
func (o LookupWorkGroupResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkGroupResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// The workgroup description.
func (o LookupWorkGroupResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkGroupResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The option to delete the workgroup and its contents even if the workgroup contains any named queries.
func (o LookupWorkGroupResultOutput) RecursiveDeleteOption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWorkGroupResult) *bool { return v.RecursiveDeleteOption }).(pulumi.BoolPtrOutput)
}

// The state of the workgroup: ENABLED or DISABLED.
func (o LookupWorkGroupResultOutput) State() WorkGroupStateEnumPtrOutput {
	return o.ApplyT(func(v LookupWorkGroupResult) *WorkGroupStateEnum { return v.State }).(WorkGroupStateEnumPtrOutput)
}

// One or more tags, separated by commas, that you want to attach to the workgroup as you create it
func (o LookupWorkGroupResultOutput) Tags() WorkGroupTagArrayOutput {
	return o.ApplyT(func(v LookupWorkGroupResult) []WorkGroupTag { return v.Tags }).(WorkGroupTagArrayOutput)
}

// The workgroup configuration
func (o LookupWorkGroupResultOutput) WorkGroupConfiguration() WorkGroupConfigurationPtrOutput {
	return o.ApplyT(func(v LookupWorkGroupResult) *WorkGroupConfiguration { return v.WorkGroupConfiguration }).(WorkGroupConfigurationPtrOutput)
}

// The workgroup configuration update object
func (o LookupWorkGroupResultOutput) WorkGroupConfigurationUpdates() WorkGroupConfigurationUpdatesPtrOutput {
	return o.ApplyT(func(v LookupWorkGroupResult) *WorkGroupConfigurationUpdates { return v.WorkGroupConfigurationUpdates }).(WorkGroupConfigurationUpdatesPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkGroupResultOutput{})
}
