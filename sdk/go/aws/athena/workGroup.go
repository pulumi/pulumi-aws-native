// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Athena::WorkGroup
type WorkGroup struct {
	pulumi.CustomResourceState

	// The date and time the workgroup was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The workgroup description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The workGroup name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The option to delete the workgroup and its contents even if the workgroup contains any named queries.
	RecursiveDeleteOption pulumi.BoolPtrOutput `pulumi:"recursiveDeleteOption"`
	// The state of the workgroup: ENABLED or DISABLED.
	State WorkGroupStateEnumPtrOutput `pulumi:"state"`
	// One or more tags, separated by commas, that you want to attach to the workgroup as you create it
	Tags WorkGroupTagArrayOutput `pulumi:"tags"`
	// The workgroup configuration
	WorkGroupConfiguration WorkGroupConfigurationPtrOutput `pulumi:"workGroupConfiguration"`
	// The workgroup configuration update object
	WorkGroupConfigurationUpdates WorkGroupConfigurationUpdatesPtrOutput `pulumi:"workGroupConfigurationUpdates"`
}

// NewWorkGroup registers a new resource with the given unique name, arguments, and options.
func NewWorkGroup(ctx *pulumi.Context,
	name string, args *WorkGroupArgs, opts ...pulumi.ResourceOption) (*WorkGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource WorkGroup
	err := ctx.RegisterResource("aws-native:athena:WorkGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkGroup gets an existing WorkGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkGroupState, opts ...pulumi.ResourceOption) (*WorkGroup, error) {
	var resource WorkGroup
	err := ctx.ReadResource("aws-native:athena:WorkGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkGroup resources.
type workGroupState struct {
}

type WorkGroupState struct {
}

func (WorkGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workGroupState)(nil)).Elem()
}

type workGroupArgs struct {
	// The workgroup description.
	Description *string `pulumi:"description"`
	// The workGroup name.
	Name string `pulumi:"name"`
	// The option to delete the workgroup and its contents even if the workgroup contains any named queries.
	RecursiveDeleteOption *bool `pulumi:"recursiveDeleteOption"`
	// The state of the workgroup: ENABLED or DISABLED.
	State *WorkGroupStateEnum `pulumi:"state"`
	// One or more tags, separated by commas, that you want to attach to the workgroup as you create it
	Tags []WorkGroupTag `pulumi:"tags"`
	// The workgroup configuration
	WorkGroupConfiguration *WorkGroupConfiguration `pulumi:"workGroupConfiguration"`
	// The workgroup configuration update object
	WorkGroupConfigurationUpdates *WorkGroupConfigurationUpdates `pulumi:"workGroupConfigurationUpdates"`
}

// The set of arguments for constructing a WorkGroup resource.
type WorkGroupArgs struct {
	// The workgroup description.
	Description pulumi.StringPtrInput
	// The workGroup name.
	Name pulumi.StringInput
	// The option to delete the workgroup and its contents even if the workgroup contains any named queries.
	RecursiveDeleteOption pulumi.BoolPtrInput
	// The state of the workgroup: ENABLED or DISABLED.
	State WorkGroupStateEnumPtrInput
	// One or more tags, separated by commas, that you want to attach to the workgroup as you create it
	Tags WorkGroupTagArrayInput
	// The workgroup configuration
	WorkGroupConfiguration WorkGroupConfigurationPtrInput
	// The workgroup configuration update object
	WorkGroupConfigurationUpdates WorkGroupConfigurationUpdatesPtrInput
}

func (WorkGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workGroupArgs)(nil)).Elem()
}

type WorkGroupInput interface {
	pulumi.Input

	ToWorkGroupOutput() WorkGroupOutput
	ToWorkGroupOutputWithContext(ctx context.Context) WorkGroupOutput
}

func (*WorkGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkGroup)(nil))
}

func (i *WorkGroup) ToWorkGroupOutput() WorkGroupOutput {
	return i.ToWorkGroupOutputWithContext(context.Background())
}

func (i *WorkGroup) ToWorkGroupOutputWithContext(ctx context.Context) WorkGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkGroupOutput)
}

type WorkGroupOutput struct{ *pulumi.OutputState }

func (WorkGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkGroup)(nil))
}

func (o WorkGroupOutput) ToWorkGroupOutput() WorkGroupOutput {
	return o
}

func (o WorkGroupOutput) ToWorkGroupOutputWithContext(ctx context.Context) WorkGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkGroupOutput{})
}
