// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package greengrassv2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for Greengrass V2 deployment.
type Deployment struct {
	pulumi.CustomResourceState

	// The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.
	Components DeploymentComponentDeploymentSpecificationMapOutput `pulumi:"components"`
	// The ID of the deployment.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// The name of the deployment.
	DeploymentName pulumi.StringPtrOutput `pulumi:"deploymentName"`
	// Contains information about policies that define how a deployment updates components and handles failure.
	DeploymentPolicies DeploymentPoliciesPtrOutput `pulumi:"deploymentPolicies"`
	// Contains information about an AWS IoT job configuration.
	IotJobConfiguration DeploymentIoTJobConfigurationPtrOutput `pulumi:"iotJobConfiguration"`
	// The parent deployment's [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for a subdeployment.
	ParentTargetArn pulumi.StringPtrOutput `pulumi:"parentTargetArn"`
	// Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see [Tag your AWS IoT Greengrass Version 2 resources](https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html) in the *AWS IoT Greengrass V2 Developer Guide* .
	//
	// This `Json` property type is processed as a map of key-value pairs. It uses the following format, which is different from most `Tags` implementations in AWS CloudFormation templates.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ARN of the target AWS IoT thing or thing group.
	TargetArn pulumi.StringOutput `pulumi:"targetArn"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"components.*",
		"deploymentName",
		"deploymentPolicies",
		"iotJobConfiguration",
		"parentTargetArn",
		"targetArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("aws-native:greengrassv2:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("aws-native:greengrassv2:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
}

type DeploymentState struct {
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.
	Components map[string]DeploymentComponentDeploymentSpecification `pulumi:"components"`
	// The name of the deployment.
	DeploymentName *string `pulumi:"deploymentName"`
	// Contains information about policies that define how a deployment updates components and handles failure.
	DeploymentPolicies *DeploymentPolicies `pulumi:"deploymentPolicies"`
	// Contains information about an AWS IoT job configuration.
	IotJobConfiguration *DeploymentIoTJobConfiguration `pulumi:"iotJobConfiguration"`
	// The parent deployment's [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for a subdeployment.
	ParentTargetArn *string `pulumi:"parentTargetArn"`
	// Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see [Tag your AWS IoT Greengrass Version 2 resources](https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html) in the *AWS IoT Greengrass V2 Developer Guide* .
	//
	// This `Json` property type is processed as a map of key-value pairs. It uses the following format, which is different from most `Tags` implementations in AWS CloudFormation templates.
	Tags map[string]string `pulumi:"tags"`
	// The ARN of the target AWS IoT thing or thing group.
	TargetArn string `pulumi:"targetArn"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.
	Components DeploymentComponentDeploymentSpecificationMapInput
	// The name of the deployment.
	DeploymentName pulumi.StringPtrInput
	// Contains information about policies that define how a deployment updates components and handles failure.
	DeploymentPolicies DeploymentPoliciesPtrInput
	// Contains information about an AWS IoT job configuration.
	IotJobConfiguration DeploymentIoTJobConfigurationPtrInput
	// The parent deployment's [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for a subdeployment.
	ParentTargetArn pulumi.StringPtrInput
	// Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see [Tag your AWS IoT Greengrass Version 2 resources](https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html) in the *AWS IoT Greengrass V2 Developer Guide* .
	//
	// This `Json` property type is processed as a map of key-value pairs. It uses the following format, which is different from most `Tags` implementations in AWS CloudFormation templates.
	Tags pulumi.StringMapInput
	// The ARN of the target AWS IoT thing or thing group.
	TargetArn pulumi.StringInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

// The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.
func (o DeploymentOutput) Components() DeploymentComponentDeploymentSpecificationMapOutput {
	return o.ApplyT(func(v *Deployment) DeploymentComponentDeploymentSpecificationMapOutput { return v.Components }).(DeploymentComponentDeploymentSpecificationMapOutput)
}

// The ID of the deployment.
func (o DeploymentOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// The name of the deployment.
func (o DeploymentOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

// Contains information about policies that define how a deployment updates components and handles failure.
func (o DeploymentOutput) DeploymentPolicies() DeploymentPoliciesPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentPoliciesPtrOutput { return v.DeploymentPolicies }).(DeploymentPoliciesPtrOutput)
}

// Contains information about an AWS IoT job configuration.
func (o DeploymentOutput) IotJobConfiguration() DeploymentIoTJobConfigurationPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentIoTJobConfigurationPtrOutput { return v.IotJobConfiguration }).(DeploymentIoTJobConfigurationPtrOutput)
}

// The parent deployment's [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for a subdeployment.
func (o DeploymentOutput) ParentTargetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.ParentTargetArn }).(pulumi.StringPtrOutput)
}

// Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see [Tag your AWS IoT Greengrass Version 2 resources](https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html) in the *AWS IoT Greengrass V2 Developer Guide* .
//
// This `Json` property type is processed as a map of key-value pairs. It uses the following format, which is different from most `Tags` implementations in AWS CloudFormation templates.
func (o DeploymentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ARN of the target AWS IoT thing or thing group.
func (o DeploymentOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterOutputType(DeploymentOutput{})
}
