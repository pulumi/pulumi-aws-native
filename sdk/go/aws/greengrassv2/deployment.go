// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package greengrassv2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for Greengrass V2 deployment.
type Deployment struct {
	pulumi.CustomResourceState

	Components          pulumi.AnyOutput                       `pulumi:"components"`
	DeploymentId        pulumi.StringOutput                    `pulumi:"deploymentId"`
	DeploymentName      pulumi.StringPtrOutput                 `pulumi:"deploymentName"`
	DeploymentPolicies  DeploymentPoliciesPtrOutput            `pulumi:"deploymentPolicies"`
	IotJobConfiguration DeploymentIoTJobConfigurationPtrOutput `pulumi:"iotJobConfiguration"`
	Tags                pulumi.AnyOutput                       `pulumi:"tags"`
	TargetArn           pulumi.StringOutput                    `pulumi:"targetArn"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	var resource Deployment
	err := ctx.RegisterResource("aws-native:greengrassv2:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("aws-native:greengrassv2:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
}

type DeploymentState struct {
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	Components          interface{}                    `pulumi:"components"`
	DeploymentName      *string                        `pulumi:"deploymentName"`
	DeploymentPolicies  *DeploymentPolicies            `pulumi:"deploymentPolicies"`
	IotJobConfiguration *DeploymentIoTJobConfiguration `pulumi:"iotJobConfiguration"`
	Tags                interface{}                    `pulumi:"tags"`
	TargetArn           string                         `pulumi:"targetArn"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	Components          pulumi.Input
	DeploymentName      pulumi.StringPtrInput
	DeploymentPolicies  DeploymentPoliciesPtrInput
	IotJobConfiguration DeploymentIoTJobConfigurationPtrInput
	Tags                pulumi.Input
	TargetArn           pulumi.StringInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) Components() pulumi.AnyOutput {
	return o.ApplyT(func(v *Deployment) pulumi.AnyOutput { return v.Components }).(pulumi.AnyOutput)
}

func (o DeploymentOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

func (o DeploymentOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

func (o DeploymentOutput) DeploymentPolicies() DeploymentPoliciesPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentPoliciesPtrOutput { return v.DeploymentPolicies }).(DeploymentPoliciesPtrOutput)
}

func (o DeploymentOutput) IotJobConfiguration() DeploymentIoTJobConfigurationPtrOutput {
	return o.ApplyT(func(v *Deployment) DeploymentIoTJobConfigurationPtrOutput { return v.IotJobConfiguration }).(DeploymentIoTJobConfigurationPtrOutput)
}

func (o DeploymentOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *Deployment) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

func (o DeploymentOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterOutputType(DeploymentOutput{})
}
