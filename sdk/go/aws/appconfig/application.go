// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppConfig::Application
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/appconfig"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appconfig.NewApplication(ctx, "dependentApplication", &appconfig.ApplicationArgs{
//				Name: pulumi.String("MyApplication"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appconfig.NewConfigurationProfile(ctx, "dependentConfigurationProfile", &appconfig.ConfigurationProfileArgs{
//				ApplicationId: pulumi.String("DependentApplication"),
//				Name:          pulumi.String("MyTestProfile"),
//				LocationUri:   pulumi.String("hosted"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appconfig.NewHostedConfigurationVersion(ctx, "basicHostedConfigurationVersion", &appconfig.HostedConfigurationVersionArgs{
//				ApplicationId:          pulumi.String("DependentApplication"),
//				ConfigurationProfileId: pulumi.String("DependentConfigurationProfile"),
//				Description:            pulumi.String("A sample hosted configuration version"),
//				Content:                pulumi.String("My hosted configuration content"),
//				ContentType:            pulumi.String("text/plain"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/appconfig"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dependentApplication, err := appconfig.NewApplication(ctx, "dependentApplication", &appconfig.ApplicationArgs{
//				Name: pulumi.String("MyApplication"),
//			})
//			if err != nil {
//				return err
//			}
//			dependentConfigurationProfile, err := appconfig.NewConfigurationProfile(ctx, "dependentConfigurationProfile", &appconfig.ConfigurationProfileArgs{
//				ApplicationId: dependentApplication.ID(),
//				Name:          pulumi.String("MyTestProfile"),
//				LocationUri:   pulumi.String("hosted"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appconfig.NewHostedConfigurationVersion(ctx, "basicHostedConfigurationVersion", &appconfig.HostedConfigurationVersionArgs{
//				ApplicationId:          dependentApplication.ID(),
//				ConfigurationProfileId: dependentConfigurationProfile.ID(),
//				Description:            pulumi.String("A sample hosted configuration version"),
//				Content:                pulumi.String("My hosted configuration content"),
//				ContentType:            pulumi.String("text/plain"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Application struct {
	pulumi.CustomResourceState

	// The application Id
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// A description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A name for the application.
	Name pulumi.StringOutput `pulumi:"name"`
	// Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		args = &ApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:appconfig:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:appconfig:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// A description of the application.
	Description *string `pulumi:"description"`
	// A name for the application.
	Name *string `pulumi:"name"`
	// Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// A description of the application.
	Description pulumi.StringPtrInput
	// A name for the application.
	Name pulumi.StringPtrInput
	// Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
	Tags aws.TagArrayInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The application Id
func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// A description of the application.
func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A name for the application.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
func (o ApplicationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Application) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
