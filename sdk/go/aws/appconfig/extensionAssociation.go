// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An example resource schema demonstrating some basic constructs and validation rules.
type ExtensionAssociation struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput    `pulumi:"arn"`
	ExtensionArn           pulumi.StringOutput    `pulumi:"extensionArn"`
	ExtensionIdentifier    pulumi.StringPtrOutput `pulumi:"extensionIdentifier"`
	ExtensionVersionNumber pulumi.IntPtrOutput    `pulumi:"extensionVersionNumber"`
	Parameters             pulumi.StringMapOutput `pulumi:"parameters"`
	ResourceArn            pulumi.StringOutput    `pulumi:"resourceArn"`
	ResourceIdentifier     pulumi.StringPtrOutput `pulumi:"resourceIdentifier"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
}

// NewExtensionAssociation registers a new resource with the given unique name, arguments, and options.
func NewExtensionAssociation(ctx *pulumi.Context,
	name string, args *ExtensionAssociationArgs, opts ...pulumi.ResourceOption) (*ExtensionAssociation, error) {
	if args == nil {
		args = &ExtensionAssociationArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"extensionIdentifier",
		"extensionVersionNumber",
		"resourceIdentifier",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExtensionAssociation
	err := ctx.RegisterResource("aws-native:appconfig:ExtensionAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtensionAssociation gets an existing ExtensionAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtensionAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionAssociationState, opts ...pulumi.ResourceOption) (*ExtensionAssociation, error) {
	var resource ExtensionAssociation
	err := ctx.ReadResource("aws-native:appconfig:ExtensionAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtensionAssociation resources.
type extensionAssociationState struct {
}

type ExtensionAssociationState struct {
}

func (ExtensionAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionAssociationState)(nil)).Elem()
}

type extensionAssociationArgs struct {
	ExtensionIdentifier    *string           `pulumi:"extensionIdentifier"`
	ExtensionVersionNumber *int              `pulumi:"extensionVersionNumber"`
	Parameters             map[string]string `pulumi:"parameters"`
	ResourceIdentifier     *string           `pulumi:"resourceIdentifier"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a ExtensionAssociation resource.
type ExtensionAssociationArgs struct {
	ExtensionIdentifier    pulumi.StringPtrInput
	ExtensionVersionNumber pulumi.IntPtrInput
	Parameters             pulumi.StringMapInput
	ResourceIdentifier     pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.CreateOnlyTagArrayInput
}

func (ExtensionAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionAssociationArgs)(nil)).Elem()
}

type ExtensionAssociationInput interface {
	pulumi.Input

	ToExtensionAssociationOutput() ExtensionAssociationOutput
	ToExtensionAssociationOutputWithContext(ctx context.Context) ExtensionAssociationOutput
}

func (*ExtensionAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionAssociation)(nil)).Elem()
}

func (i *ExtensionAssociation) ToExtensionAssociationOutput() ExtensionAssociationOutput {
	return i.ToExtensionAssociationOutputWithContext(context.Background())
}

func (i *ExtensionAssociation) ToExtensionAssociationOutputWithContext(ctx context.Context) ExtensionAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionAssociationOutput)
}

type ExtensionAssociationOutput struct{ *pulumi.OutputState }

func (ExtensionAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionAssociation)(nil)).Elem()
}

func (o ExtensionAssociationOutput) ToExtensionAssociationOutput() ExtensionAssociationOutput {
	return o
}

func (o ExtensionAssociationOutput) ToExtensionAssociationOutputWithContext(ctx context.Context) ExtensionAssociationOutput {
	return o
}

func (o ExtensionAssociationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionAssociation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ExtensionAssociationOutput) ExtensionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionAssociation) pulumi.StringOutput { return v.ExtensionArn }).(pulumi.StringOutput)
}

func (o ExtensionAssociationOutput) ExtensionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionAssociation) pulumi.StringPtrOutput { return v.ExtensionIdentifier }).(pulumi.StringPtrOutput)
}

func (o ExtensionAssociationOutput) ExtensionVersionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtensionAssociation) pulumi.IntPtrOutput { return v.ExtensionVersionNumber }).(pulumi.IntPtrOutput)
}

func (o ExtensionAssociationOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExtensionAssociation) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o ExtensionAssociationOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionAssociation) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ExtensionAssociationOutput) ResourceIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionAssociation) pulumi.StringPtrOutput { return v.ResourceIdentifier }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ExtensionAssociationOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *ExtensionAssociation) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionAssociationInput)(nil)).Elem(), &ExtensionAssociation{})
	pulumi.RegisterOutputType(ExtensionAssociationOutput{})
}
