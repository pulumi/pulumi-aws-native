// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
type ApplicationTags struct {
	// The key-value string map. The valid character set is [a-zA-Z1-9 +-=._:/-]. The tag key can be up to 128 characters and must not start with aws:.
	Key string `pulumi:"key"`
	// The tag value can be up to 256 characters.
	Value string `pulumi:"value"`
}

// ApplicationTagsInput is an input type that accepts ApplicationTagsArgs and ApplicationTagsOutput values.
// You can construct a concrete instance of `ApplicationTagsInput` via:
//
//	ApplicationTagsArgs{...}
type ApplicationTagsInput interface {
	pulumi.Input

	ToApplicationTagsOutput() ApplicationTagsOutput
	ToApplicationTagsOutputWithContext(context.Context) ApplicationTagsOutput
}

// Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
type ApplicationTagsArgs struct {
	// The key-value string map. The valid character set is [a-zA-Z1-9 +-=._:/-]. The tag key can be up to 128 characters and must not start with aws:.
	Key pulumi.StringInput `pulumi:"key"`
	// The tag value can be up to 256 characters.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApplicationTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTags)(nil)).Elem()
}

func (i ApplicationTagsArgs) ToApplicationTagsOutput() ApplicationTagsOutput {
	return i.ToApplicationTagsOutputWithContext(context.Background())
}

func (i ApplicationTagsArgs) ToApplicationTagsOutputWithContext(ctx context.Context) ApplicationTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTagsOutput)
}

func (i ApplicationTagsArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationTags] {
	return pulumix.Output[ApplicationTags]{
		OutputState: i.ToApplicationTagsOutputWithContext(ctx).OutputState,
	}
}

// ApplicationTagsArrayInput is an input type that accepts ApplicationTagsArray and ApplicationTagsArrayOutput values.
// You can construct a concrete instance of `ApplicationTagsArrayInput` via:
//
//	ApplicationTagsArray{ ApplicationTagsArgs{...} }
type ApplicationTagsArrayInput interface {
	pulumi.Input

	ToApplicationTagsArrayOutput() ApplicationTagsArrayOutput
	ToApplicationTagsArrayOutputWithContext(context.Context) ApplicationTagsArrayOutput
}

type ApplicationTagsArray []ApplicationTagsInput

func (ApplicationTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationTags)(nil)).Elem()
}

func (i ApplicationTagsArray) ToApplicationTagsArrayOutput() ApplicationTagsArrayOutput {
	return i.ToApplicationTagsArrayOutputWithContext(context.Background())
}

func (i ApplicationTagsArray) ToApplicationTagsArrayOutputWithContext(ctx context.Context) ApplicationTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTagsArrayOutput)
}

func (i ApplicationTagsArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationTags] {
	return pulumix.Output[[]ApplicationTags]{
		OutputState: i.ToApplicationTagsArrayOutputWithContext(ctx).OutputState,
	}
}

// Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
type ApplicationTagsOutput struct{ *pulumi.OutputState }

func (ApplicationTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTags)(nil)).Elem()
}

func (o ApplicationTagsOutput) ToApplicationTagsOutput() ApplicationTagsOutput {
	return o
}

func (o ApplicationTagsOutput) ToApplicationTagsOutputWithContext(ctx context.Context) ApplicationTagsOutput {
	return o
}

func (o ApplicationTagsOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationTags] {
	return pulumix.Output[ApplicationTags]{
		OutputState: o.OutputState,
	}
}

// The key-value string map. The valid character set is [a-zA-Z1-9 +-=._:/-]. The tag key can be up to 128 characters and must not start with aws:.
func (o ApplicationTagsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTags) string { return v.Key }).(pulumi.StringOutput)
}

// The tag value can be up to 256 characters.
func (o ApplicationTagsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTags) string { return v.Value }).(pulumi.StringOutput)
}

type ApplicationTagsArrayOutput struct{ *pulumi.OutputState }

func (ApplicationTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationTags)(nil)).Elem()
}

func (o ApplicationTagsArrayOutput) ToApplicationTagsArrayOutput() ApplicationTagsArrayOutput {
	return o
}

func (o ApplicationTagsArrayOutput) ToApplicationTagsArrayOutputWithContext(ctx context.Context) ApplicationTagsArrayOutput {
	return o
}

func (o ApplicationTagsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationTags] {
	return pulumix.Output[[]ApplicationTags]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationTagsArrayOutput) Index(i pulumi.IntInput) ApplicationTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationTags {
		return vs[0].([]ApplicationTags)[vs[1].(int)]
	}).(ApplicationTagsOutput)
}

// Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
type ConfigurationProfileTags struct {
	// The key-value string map. The tag key can be up to 128 characters and must not start with aws:.
	Key *string `pulumi:"key"`
	// The tag value can be up to 256 characters.
	Value *string `pulumi:"value"`
}

// ConfigurationProfileTagsInput is an input type that accepts ConfigurationProfileTagsArgs and ConfigurationProfileTagsOutput values.
// You can construct a concrete instance of `ConfigurationProfileTagsInput` via:
//
//	ConfigurationProfileTagsArgs{...}
type ConfigurationProfileTagsInput interface {
	pulumi.Input

	ToConfigurationProfileTagsOutput() ConfigurationProfileTagsOutput
	ToConfigurationProfileTagsOutputWithContext(context.Context) ConfigurationProfileTagsOutput
}

// Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
type ConfigurationProfileTagsArgs struct {
	// The key-value string map. The tag key can be up to 128 characters and must not start with aws:.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The tag value can be up to 256 characters.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConfigurationProfileTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileTags)(nil)).Elem()
}

func (i ConfigurationProfileTagsArgs) ToConfigurationProfileTagsOutput() ConfigurationProfileTagsOutput {
	return i.ToConfigurationProfileTagsOutputWithContext(context.Background())
}

func (i ConfigurationProfileTagsArgs) ToConfigurationProfileTagsOutputWithContext(ctx context.Context) ConfigurationProfileTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileTagsOutput)
}

func (i ConfigurationProfileTagsArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigurationProfileTags] {
	return pulumix.Output[ConfigurationProfileTags]{
		OutputState: i.ToConfigurationProfileTagsOutputWithContext(ctx).OutputState,
	}
}

// ConfigurationProfileTagsArrayInput is an input type that accepts ConfigurationProfileTagsArray and ConfigurationProfileTagsArrayOutput values.
// You can construct a concrete instance of `ConfigurationProfileTagsArrayInput` via:
//
//	ConfigurationProfileTagsArray{ ConfigurationProfileTagsArgs{...} }
type ConfigurationProfileTagsArrayInput interface {
	pulumi.Input

	ToConfigurationProfileTagsArrayOutput() ConfigurationProfileTagsArrayOutput
	ToConfigurationProfileTagsArrayOutputWithContext(context.Context) ConfigurationProfileTagsArrayOutput
}

type ConfigurationProfileTagsArray []ConfigurationProfileTagsInput

func (ConfigurationProfileTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationProfileTags)(nil)).Elem()
}

func (i ConfigurationProfileTagsArray) ToConfigurationProfileTagsArrayOutput() ConfigurationProfileTagsArrayOutput {
	return i.ToConfigurationProfileTagsArrayOutputWithContext(context.Background())
}

func (i ConfigurationProfileTagsArray) ToConfigurationProfileTagsArrayOutputWithContext(ctx context.Context) ConfigurationProfileTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileTagsArrayOutput)
}

func (i ConfigurationProfileTagsArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfigurationProfileTags] {
	return pulumix.Output[[]ConfigurationProfileTags]{
		OutputState: i.ToConfigurationProfileTagsArrayOutputWithContext(ctx).OutputState,
	}
}

// Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
type ConfigurationProfileTagsOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileTags)(nil)).Elem()
}

func (o ConfigurationProfileTagsOutput) ToConfigurationProfileTagsOutput() ConfigurationProfileTagsOutput {
	return o
}

func (o ConfigurationProfileTagsOutput) ToConfigurationProfileTagsOutputWithContext(ctx context.Context) ConfigurationProfileTagsOutput {
	return o
}

func (o ConfigurationProfileTagsOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationProfileTags] {
	return pulumix.Output[ConfigurationProfileTags]{
		OutputState: o.OutputState,
	}
}

// The key-value string map. The tag key can be up to 128 characters and must not start with aws:.
func (o ConfigurationProfileTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationProfileTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The tag value can be up to 256 characters.
func (o ConfigurationProfileTagsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationProfileTags) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConfigurationProfileTagsArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationProfileTags)(nil)).Elem()
}

func (o ConfigurationProfileTagsArrayOutput) ToConfigurationProfileTagsArrayOutput() ConfigurationProfileTagsArrayOutput {
	return o
}

func (o ConfigurationProfileTagsArrayOutput) ToConfigurationProfileTagsArrayOutputWithContext(ctx context.Context) ConfigurationProfileTagsArrayOutput {
	return o
}

func (o ConfigurationProfileTagsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfigurationProfileTags] {
	return pulumix.Output[[]ConfigurationProfileTags]{
		OutputState: o.OutputState,
	}
}

func (o ConfigurationProfileTagsArrayOutput) Index(i pulumi.IntInput) ConfigurationProfileTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationProfileTags {
		return vs[0].([]ConfigurationProfileTags)[vs[1].(int)]
	}).(ConfigurationProfileTagsOutput)
}

// A list of methods for validating the configuration.
type ConfigurationProfileValidators struct {
	// Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
	Content *string `pulumi:"content"`
	// AWS AppConfig supports validators of type JSON_SCHEMA and LAMBDA.
	Type *string `pulumi:"type"`
}

// ConfigurationProfileValidatorsInput is an input type that accepts ConfigurationProfileValidatorsArgs and ConfigurationProfileValidatorsOutput values.
// You can construct a concrete instance of `ConfigurationProfileValidatorsInput` via:
//
//	ConfigurationProfileValidatorsArgs{...}
type ConfigurationProfileValidatorsInput interface {
	pulumi.Input

	ToConfigurationProfileValidatorsOutput() ConfigurationProfileValidatorsOutput
	ToConfigurationProfileValidatorsOutputWithContext(context.Context) ConfigurationProfileValidatorsOutput
}

// A list of methods for validating the configuration.
type ConfigurationProfileValidatorsArgs struct {
	// Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// AWS AppConfig supports validators of type JSON_SCHEMA and LAMBDA.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ConfigurationProfileValidatorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileValidators)(nil)).Elem()
}

func (i ConfigurationProfileValidatorsArgs) ToConfigurationProfileValidatorsOutput() ConfigurationProfileValidatorsOutput {
	return i.ToConfigurationProfileValidatorsOutputWithContext(context.Background())
}

func (i ConfigurationProfileValidatorsArgs) ToConfigurationProfileValidatorsOutputWithContext(ctx context.Context) ConfigurationProfileValidatorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileValidatorsOutput)
}

func (i ConfigurationProfileValidatorsArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigurationProfileValidators] {
	return pulumix.Output[ConfigurationProfileValidators]{
		OutputState: i.ToConfigurationProfileValidatorsOutputWithContext(ctx).OutputState,
	}
}

// ConfigurationProfileValidatorsArrayInput is an input type that accepts ConfigurationProfileValidatorsArray and ConfigurationProfileValidatorsArrayOutput values.
// You can construct a concrete instance of `ConfigurationProfileValidatorsArrayInput` via:
//
//	ConfigurationProfileValidatorsArray{ ConfigurationProfileValidatorsArgs{...} }
type ConfigurationProfileValidatorsArrayInput interface {
	pulumi.Input

	ToConfigurationProfileValidatorsArrayOutput() ConfigurationProfileValidatorsArrayOutput
	ToConfigurationProfileValidatorsArrayOutputWithContext(context.Context) ConfigurationProfileValidatorsArrayOutput
}

type ConfigurationProfileValidatorsArray []ConfigurationProfileValidatorsInput

func (ConfigurationProfileValidatorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationProfileValidators)(nil)).Elem()
}

func (i ConfigurationProfileValidatorsArray) ToConfigurationProfileValidatorsArrayOutput() ConfigurationProfileValidatorsArrayOutput {
	return i.ToConfigurationProfileValidatorsArrayOutputWithContext(context.Background())
}

func (i ConfigurationProfileValidatorsArray) ToConfigurationProfileValidatorsArrayOutputWithContext(ctx context.Context) ConfigurationProfileValidatorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationProfileValidatorsArrayOutput)
}

func (i ConfigurationProfileValidatorsArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfigurationProfileValidators] {
	return pulumix.Output[[]ConfigurationProfileValidators]{
		OutputState: i.ToConfigurationProfileValidatorsArrayOutputWithContext(ctx).OutputState,
	}
}

// A list of methods for validating the configuration.
type ConfigurationProfileValidatorsOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileValidatorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationProfileValidators)(nil)).Elem()
}

func (o ConfigurationProfileValidatorsOutput) ToConfigurationProfileValidatorsOutput() ConfigurationProfileValidatorsOutput {
	return o
}

func (o ConfigurationProfileValidatorsOutput) ToConfigurationProfileValidatorsOutputWithContext(ctx context.Context) ConfigurationProfileValidatorsOutput {
	return o
}

func (o ConfigurationProfileValidatorsOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationProfileValidators] {
	return pulumix.Output[ConfigurationProfileValidators]{
		OutputState: o.OutputState,
	}
}

// Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
func (o ConfigurationProfileValidatorsOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationProfileValidators) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// AWS AppConfig supports validators of type JSON_SCHEMA and LAMBDA.
func (o ConfigurationProfileValidatorsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationProfileValidators) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ConfigurationProfileValidatorsArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationProfileValidatorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationProfileValidators)(nil)).Elem()
}

func (o ConfigurationProfileValidatorsArrayOutput) ToConfigurationProfileValidatorsArrayOutput() ConfigurationProfileValidatorsArrayOutput {
	return o
}

func (o ConfigurationProfileValidatorsArrayOutput) ToConfigurationProfileValidatorsArrayOutputWithContext(ctx context.Context) ConfigurationProfileValidatorsArrayOutput {
	return o
}

func (o ConfigurationProfileValidatorsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfigurationProfileValidators] {
	return pulumix.Output[[]ConfigurationProfileValidators]{
		OutputState: o.OutputState,
	}
}

func (o ConfigurationProfileValidatorsArrayOutput) Index(i pulumi.IntInput) ConfigurationProfileValidatorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationProfileValidators {
		return vs[0].([]ConfigurationProfileValidators)[vs[1].(int)]
	}).(ConfigurationProfileValidatorsOutput)
}

type DeploymentStrategyTags struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// DeploymentStrategyTagsInput is an input type that accepts DeploymentStrategyTagsArgs and DeploymentStrategyTagsOutput values.
// You can construct a concrete instance of `DeploymentStrategyTagsInput` via:
//
//	DeploymentStrategyTagsArgs{...}
type DeploymentStrategyTagsInput interface {
	pulumi.Input

	ToDeploymentStrategyTagsOutput() DeploymentStrategyTagsOutput
	ToDeploymentStrategyTagsOutputWithContext(context.Context) DeploymentStrategyTagsOutput
}

type DeploymentStrategyTagsArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DeploymentStrategyTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategyTags)(nil)).Elem()
}

func (i DeploymentStrategyTagsArgs) ToDeploymentStrategyTagsOutput() DeploymentStrategyTagsOutput {
	return i.ToDeploymentStrategyTagsOutputWithContext(context.Background())
}

func (i DeploymentStrategyTagsArgs) ToDeploymentStrategyTagsOutputWithContext(ctx context.Context) DeploymentStrategyTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyTagsOutput)
}

func (i DeploymentStrategyTagsArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentStrategyTags] {
	return pulumix.Output[DeploymentStrategyTags]{
		OutputState: i.ToDeploymentStrategyTagsOutputWithContext(ctx).OutputState,
	}
}

// DeploymentStrategyTagsArrayInput is an input type that accepts DeploymentStrategyTagsArray and DeploymentStrategyTagsArrayOutput values.
// You can construct a concrete instance of `DeploymentStrategyTagsArrayInput` via:
//
//	DeploymentStrategyTagsArray{ DeploymentStrategyTagsArgs{...} }
type DeploymentStrategyTagsArrayInput interface {
	pulumi.Input

	ToDeploymentStrategyTagsArrayOutput() DeploymentStrategyTagsArrayOutput
	ToDeploymentStrategyTagsArrayOutputWithContext(context.Context) DeploymentStrategyTagsArrayOutput
}

type DeploymentStrategyTagsArray []DeploymentStrategyTagsInput

func (DeploymentStrategyTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentStrategyTags)(nil)).Elem()
}

func (i DeploymentStrategyTagsArray) ToDeploymentStrategyTagsArrayOutput() DeploymentStrategyTagsArrayOutput {
	return i.ToDeploymentStrategyTagsArrayOutputWithContext(context.Background())
}

func (i DeploymentStrategyTagsArray) ToDeploymentStrategyTagsArrayOutputWithContext(ctx context.Context) DeploymentStrategyTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyTagsArrayOutput)
}

func (i DeploymentStrategyTagsArray) ToOutput(ctx context.Context) pulumix.Output[[]DeploymentStrategyTags] {
	return pulumix.Output[[]DeploymentStrategyTags]{
		OutputState: i.ToDeploymentStrategyTagsArrayOutputWithContext(ctx).OutputState,
	}
}

type DeploymentStrategyTagsOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStrategyTags)(nil)).Elem()
}

func (o DeploymentStrategyTagsOutput) ToDeploymentStrategyTagsOutput() DeploymentStrategyTagsOutput {
	return o
}

func (o DeploymentStrategyTagsOutput) ToDeploymentStrategyTagsOutputWithContext(ctx context.Context) DeploymentStrategyTagsOutput {
	return o
}

func (o DeploymentStrategyTagsOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStrategyTags] {
	return pulumix.Output[DeploymentStrategyTags]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentStrategyTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStrategyTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o DeploymentStrategyTagsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStrategyTags) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DeploymentStrategyTagsArrayOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentStrategyTags)(nil)).Elem()
}

func (o DeploymentStrategyTagsArrayOutput) ToDeploymentStrategyTagsArrayOutput() DeploymentStrategyTagsArrayOutput {
	return o
}

func (o DeploymentStrategyTagsArrayOutput) ToDeploymentStrategyTagsArrayOutputWithContext(ctx context.Context) DeploymentStrategyTagsArrayOutput {
	return o
}

func (o DeploymentStrategyTagsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DeploymentStrategyTags] {
	return pulumix.Output[[]DeploymentStrategyTags]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentStrategyTagsArrayOutput) Index(i pulumi.IntInput) DeploymentStrategyTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentStrategyTags {
		return vs[0].([]DeploymentStrategyTags)[vs[1].(int)]
	}).(DeploymentStrategyTagsOutput)
}

type DeploymentTags struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// DeploymentTagsInput is an input type that accepts DeploymentTagsArgs and DeploymentTagsOutput values.
// You can construct a concrete instance of `DeploymentTagsInput` via:
//
//	DeploymentTagsArgs{...}
type DeploymentTagsInput interface {
	pulumi.Input

	ToDeploymentTagsOutput() DeploymentTagsOutput
	ToDeploymentTagsOutputWithContext(context.Context) DeploymentTagsOutput
}

type DeploymentTagsArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DeploymentTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentTags)(nil)).Elem()
}

func (i DeploymentTagsArgs) ToDeploymentTagsOutput() DeploymentTagsOutput {
	return i.ToDeploymentTagsOutputWithContext(context.Background())
}

func (i DeploymentTagsArgs) ToDeploymentTagsOutputWithContext(ctx context.Context) DeploymentTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentTagsOutput)
}

func (i DeploymentTagsArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentTags] {
	return pulumix.Output[DeploymentTags]{
		OutputState: i.ToDeploymentTagsOutputWithContext(ctx).OutputState,
	}
}

// DeploymentTagsArrayInput is an input type that accepts DeploymentTagsArray and DeploymentTagsArrayOutput values.
// You can construct a concrete instance of `DeploymentTagsArrayInput` via:
//
//	DeploymentTagsArray{ DeploymentTagsArgs{...} }
type DeploymentTagsArrayInput interface {
	pulumi.Input

	ToDeploymentTagsArrayOutput() DeploymentTagsArrayOutput
	ToDeploymentTagsArrayOutputWithContext(context.Context) DeploymentTagsArrayOutput
}

type DeploymentTagsArray []DeploymentTagsInput

func (DeploymentTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentTags)(nil)).Elem()
}

func (i DeploymentTagsArray) ToDeploymentTagsArrayOutput() DeploymentTagsArrayOutput {
	return i.ToDeploymentTagsArrayOutputWithContext(context.Background())
}

func (i DeploymentTagsArray) ToDeploymentTagsArrayOutputWithContext(ctx context.Context) DeploymentTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentTagsArrayOutput)
}

func (i DeploymentTagsArray) ToOutput(ctx context.Context) pulumix.Output[[]DeploymentTags] {
	return pulumix.Output[[]DeploymentTags]{
		OutputState: i.ToDeploymentTagsArrayOutputWithContext(ctx).OutputState,
	}
}

type DeploymentTagsOutput struct{ *pulumi.OutputState }

func (DeploymentTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentTags)(nil)).Elem()
}

func (o DeploymentTagsOutput) ToDeploymentTagsOutput() DeploymentTagsOutput {
	return o
}

func (o DeploymentTagsOutput) ToDeploymentTagsOutputWithContext(ctx context.Context) DeploymentTagsOutput {
	return o
}

func (o DeploymentTagsOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentTags] {
	return pulumix.Output[DeploymentTags]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o DeploymentTagsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentTags) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DeploymentTagsArrayOutput struct{ *pulumi.OutputState }

func (DeploymentTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentTags)(nil)).Elem()
}

func (o DeploymentTagsArrayOutput) ToDeploymentTagsArrayOutput() DeploymentTagsArrayOutput {
	return o
}

func (o DeploymentTagsArrayOutput) ToDeploymentTagsArrayOutputWithContext(ctx context.Context) DeploymentTagsArrayOutput {
	return o
}

func (o DeploymentTagsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DeploymentTags] {
	return pulumix.Output[[]DeploymentTags]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentTagsArrayOutput) Index(i pulumi.IntInput) DeploymentTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentTags {
		return vs[0].([]DeploymentTags)[vs[1].(int)]
	}).(DeploymentTagsOutput)
}

type EnvironmentMonitors struct {
	AlarmArn     *string `pulumi:"alarmArn"`
	AlarmRoleArn *string `pulumi:"alarmRoleArn"`
}

// EnvironmentMonitorsInput is an input type that accepts EnvironmentMonitorsArgs and EnvironmentMonitorsOutput values.
// You can construct a concrete instance of `EnvironmentMonitorsInput` via:
//
//	EnvironmentMonitorsArgs{...}
type EnvironmentMonitorsInput interface {
	pulumi.Input

	ToEnvironmentMonitorsOutput() EnvironmentMonitorsOutput
	ToEnvironmentMonitorsOutputWithContext(context.Context) EnvironmentMonitorsOutput
}

type EnvironmentMonitorsArgs struct {
	AlarmArn     pulumi.StringPtrInput `pulumi:"alarmArn"`
	AlarmRoleArn pulumi.StringPtrInput `pulumi:"alarmRoleArn"`
}

func (EnvironmentMonitorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMonitors)(nil)).Elem()
}

func (i EnvironmentMonitorsArgs) ToEnvironmentMonitorsOutput() EnvironmentMonitorsOutput {
	return i.ToEnvironmentMonitorsOutputWithContext(context.Background())
}

func (i EnvironmentMonitorsArgs) ToEnvironmentMonitorsOutputWithContext(ctx context.Context) EnvironmentMonitorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMonitorsOutput)
}

func (i EnvironmentMonitorsArgs) ToOutput(ctx context.Context) pulumix.Output[EnvironmentMonitors] {
	return pulumix.Output[EnvironmentMonitors]{
		OutputState: i.ToEnvironmentMonitorsOutputWithContext(ctx).OutputState,
	}
}

// EnvironmentMonitorsArrayInput is an input type that accepts EnvironmentMonitorsArray and EnvironmentMonitorsArrayOutput values.
// You can construct a concrete instance of `EnvironmentMonitorsArrayInput` via:
//
//	EnvironmentMonitorsArray{ EnvironmentMonitorsArgs{...} }
type EnvironmentMonitorsArrayInput interface {
	pulumi.Input

	ToEnvironmentMonitorsArrayOutput() EnvironmentMonitorsArrayOutput
	ToEnvironmentMonitorsArrayOutputWithContext(context.Context) EnvironmentMonitorsArrayOutput
}

type EnvironmentMonitorsArray []EnvironmentMonitorsInput

func (EnvironmentMonitorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentMonitors)(nil)).Elem()
}

func (i EnvironmentMonitorsArray) ToEnvironmentMonitorsArrayOutput() EnvironmentMonitorsArrayOutput {
	return i.ToEnvironmentMonitorsArrayOutputWithContext(context.Background())
}

func (i EnvironmentMonitorsArray) ToEnvironmentMonitorsArrayOutputWithContext(ctx context.Context) EnvironmentMonitorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMonitorsArrayOutput)
}

func (i EnvironmentMonitorsArray) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentMonitors] {
	return pulumix.Output[[]EnvironmentMonitors]{
		OutputState: i.ToEnvironmentMonitorsArrayOutputWithContext(ctx).OutputState,
	}
}

type EnvironmentMonitorsOutput struct{ *pulumi.OutputState }

func (EnvironmentMonitorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentMonitors)(nil)).Elem()
}

func (o EnvironmentMonitorsOutput) ToEnvironmentMonitorsOutput() EnvironmentMonitorsOutput {
	return o
}

func (o EnvironmentMonitorsOutput) ToEnvironmentMonitorsOutputWithContext(ctx context.Context) EnvironmentMonitorsOutput {
	return o
}

func (o EnvironmentMonitorsOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentMonitors] {
	return pulumix.Output[EnvironmentMonitors]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentMonitorsOutput) AlarmArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentMonitors) *string { return v.AlarmArn }).(pulumi.StringPtrOutput)
}

func (o EnvironmentMonitorsOutput) AlarmRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentMonitors) *string { return v.AlarmRoleArn }).(pulumi.StringPtrOutput)
}

type EnvironmentMonitorsArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentMonitorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentMonitors)(nil)).Elem()
}

func (o EnvironmentMonitorsArrayOutput) ToEnvironmentMonitorsArrayOutput() EnvironmentMonitorsArrayOutput {
	return o
}

func (o EnvironmentMonitorsArrayOutput) ToEnvironmentMonitorsArrayOutputWithContext(ctx context.Context) EnvironmentMonitorsArrayOutput {
	return o
}

func (o EnvironmentMonitorsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentMonitors] {
	return pulumix.Output[[]EnvironmentMonitors]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentMonitorsArrayOutput) Index(i pulumi.IntInput) EnvironmentMonitorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentMonitors {
		return vs[0].([]EnvironmentMonitors)[vs[1].(int)]
	}).(EnvironmentMonitorsOutput)
}

type EnvironmentTags struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// EnvironmentTagsInput is an input type that accepts EnvironmentTagsArgs and EnvironmentTagsOutput values.
// You can construct a concrete instance of `EnvironmentTagsInput` via:
//
//	EnvironmentTagsArgs{...}
type EnvironmentTagsInput interface {
	pulumi.Input

	ToEnvironmentTagsOutput() EnvironmentTagsOutput
	ToEnvironmentTagsOutputWithContext(context.Context) EnvironmentTagsOutput
}

type EnvironmentTagsArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentTags)(nil)).Elem()
}

func (i EnvironmentTagsArgs) ToEnvironmentTagsOutput() EnvironmentTagsOutput {
	return i.ToEnvironmentTagsOutputWithContext(context.Background())
}

func (i EnvironmentTagsArgs) ToEnvironmentTagsOutputWithContext(ctx context.Context) EnvironmentTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentTagsOutput)
}

func (i EnvironmentTagsArgs) ToOutput(ctx context.Context) pulumix.Output[EnvironmentTags] {
	return pulumix.Output[EnvironmentTags]{
		OutputState: i.ToEnvironmentTagsOutputWithContext(ctx).OutputState,
	}
}

// EnvironmentTagsArrayInput is an input type that accepts EnvironmentTagsArray and EnvironmentTagsArrayOutput values.
// You can construct a concrete instance of `EnvironmentTagsArrayInput` via:
//
//	EnvironmentTagsArray{ EnvironmentTagsArgs{...} }
type EnvironmentTagsArrayInput interface {
	pulumi.Input

	ToEnvironmentTagsArrayOutput() EnvironmentTagsArrayOutput
	ToEnvironmentTagsArrayOutputWithContext(context.Context) EnvironmentTagsArrayOutput
}

type EnvironmentTagsArray []EnvironmentTagsInput

func (EnvironmentTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentTags)(nil)).Elem()
}

func (i EnvironmentTagsArray) ToEnvironmentTagsArrayOutput() EnvironmentTagsArrayOutput {
	return i.ToEnvironmentTagsArrayOutputWithContext(context.Background())
}

func (i EnvironmentTagsArray) ToEnvironmentTagsArrayOutputWithContext(ctx context.Context) EnvironmentTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentTagsArrayOutput)
}

func (i EnvironmentTagsArray) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentTags] {
	return pulumix.Output[[]EnvironmentTags]{
		OutputState: i.ToEnvironmentTagsArrayOutputWithContext(ctx).OutputState,
	}
}

type EnvironmentTagsOutput struct{ *pulumi.OutputState }

func (EnvironmentTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentTags)(nil)).Elem()
}

func (o EnvironmentTagsOutput) ToEnvironmentTagsOutput() EnvironmentTagsOutput {
	return o
}

func (o EnvironmentTagsOutput) ToEnvironmentTagsOutputWithContext(ctx context.Context) EnvironmentTagsOutput {
	return o
}

func (o EnvironmentTagsOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentTags] {
	return pulumix.Output[EnvironmentTags]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentTagsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentTags) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o EnvironmentTagsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentTags) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentTagsArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentTags)(nil)).Elem()
}

func (o EnvironmentTagsArrayOutput) ToEnvironmentTagsArrayOutput() EnvironmentTagsArrayOutput {
	return o
}

func (o EnvironmentTagsArrayOutput) ToEnvironmentTagsArrayOutputWithContext(ctx context.Context) EnvironmentTagsArrayOutput {
	return o
}

func (o EnvironmentTagsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentTags] {
	return pulumix.Output[[]EnvironmentTags]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentTagsArrayOutput) Index(i pulumi.IntInput) EnvironmentTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentTags {
		return vs[0].([]EnvironmentTags)[vs[1].(int)]
	}).(EnvironmentTagsOutput)
}

// A key-value pair to associate with a resource.
type ExtensionAssociationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ExtensionAssociationTagInput is an input type that accepts ExtensionAssociationTagArgs and ExtensionAssociationTagOutput values.
// You can construct a concrete instance of `ExtensionAssociationTagInput` via:
//
//	ExtensionAssociationTagArgs{...}
type ExtensionAssociationTagInput interface {
	pulumi.Input

	ToExtensionAssociationTagOutput() ExtensionAssociationTagOutput
	ToExtensionAssociationTagOutputWithContext(context.Context) ExtensionAssociationTagOutput
}

// A key-value pair to associate with a resource.
type ExtensionAssociationTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExtensionAssociationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionAssociationTag)(nil)).Elem()
}

func (i ExtensionAssociationTagArgs) ToExtensionAssociationTagOutput() ExtensionAssociationTagOutput {
	return i.ToExtensionAssociationTagOutputWithContext(context.Background())
}

func (i ExtensionAssociationTagArgs) ToExtensionAssociationTagOutputWithContext(ctx context.Context) ExtensionAssociationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionAssociationTagOutput)
}

func (i ExtensionAssociationTagArgs) ToOutput(ctx context.Context) pulumix.Output[ExtensionAssociationTag] {
	return pulumix.Output[ExtensionAssociationTag]{
		OutputState: i.ToExtensionAssociationTagOutputWithContext(ctx).OutputState,
	}
}

// ExtensionAssociationTagArrayInput is an input type that accepts ExtensionAssociationTagArray and ExtensionAssociationTagArrayOutput values.
// You can construct a concrete instance of `ExtensionAssociationTagArrayInput` via:
//
//	ExtensionAssociationTagArray{ ExtensionAssociationTagArgs{...} }
type ExtensionAssociationTagArrayInput interface {
	pulumi.Input

	ToExtensionAssociationTagArrayOutput() ExtensionAssociationTagArrayOutput
	ToExtensionAssociationTagArrayOutputWithContext(context.Context) ExtensionAssociationTagArrayOutput
}

type ExtensionAssociationTagArray []ExtensionAssociationTagInput

func (ExtensionAssociationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionAssociationTag)(nil)).Elem()
}

func (i ExtensionAssociationTagArray) ToExtensionAssociationTagArrayOutput() ExtensionAssociationTagArrayOutput {
	return i.ToExtensionAssociationTagArrayOutputWithContext(context.Background())
}

func (i ExtensionAssociationTagArray) ToExtensionAssociationTagArrayOutputWithContext(ctx context.Context) ExtensionAssociationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionAssociationTagArrayOutput)
}

func (i ExtensionAssociationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ExtensionAssociationTag] {
	return pulumix.Output[[]ExtensionAssociationTag]{
		OutputState: i.ToExtensionAssociationTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource.
type ExtensionAssociationTagOutput struct{ *pulumi.OutputState }

func (ExtensionAssociationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionAssociationTag)(nil)).Elem()
}

func (o ExtensionAssociationTagOutput) ToExtensionAssociationTagOutput() ExtensionAssociationTagOutput {
	return o
}

func (o ExtensionAssociationTagOutput) ToExtensionAssociationTagOutputWithContext(ctx context.Context) ExtensionAssociationTagOutput {
	return o
}

func (o ExtensionAssociationTagOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionAssociationTag] {
	return pulumix.Output[ExtensionAssociationTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ExtensionAssociationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionAssociationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ExtensionAssociationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionAssociationTag) string { return v.Value }).(pulumi.StringOutput)
}

type ExtensionAssociationTagArrayOutput struct{ *pulumi.OutputState }

func (ExtensionAssociationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionAssociationTag)(nil)).Elem()
}

func (o ExtensionAssociationTagArrayOutput) ToExtensionAssociationTagArrayOutput() ExtensionAssociationTagArrayOutput {
	return o
}

func (o ExtensionAssociationTagArrayOutput) ToExtensionAssociationTagArrayOutputWithContext(ctx context.Context) ExtensionAssociationTagArrayOutput {
	return o
}

func (o ExtensionAssociationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ExtensionAssociationTag] {
	return pulumix.Output[[]ExtensionAssociationTag]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionAssociationTagArrayOutput) Index(i pulumi.IntInput) ExtensionAssociationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionAssociationTag {
		return vs[0].([]ExtensionAssociationTag)[vs[1].(int)]
	}).(ExtensionAssociationTagOutput)
}

// A key-value pair to associate with a resource.
type ExtensionTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ExtensionTagInput is an input type that accepts ExtensionTagArgs and ExtensionTagOutput values.
// You can construct a concrete instance of `ExtensionTagInput` via:
//
//	ExtensionTagArgs{...}
type ExtensionTagInput interface {
	pulumi.Input

	ToExtensionTagOutput() ExtensionTagOutput
	ToExtensionTagOutputWithContext(context.Context) ExtensionTagOutput
}

// A key-value pair to associate with a resource.
type ExtensionTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExtensionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionTag)(nil)).Elem()
}

func (i ExtensionTagArgs) ToExtensionTagOutput() ExtensionTagOutput {
	return i.ToExtensionTagOutputWithContext(context.Background())
}

func (i ExtensionTagArgs) ToExtensionTagOutputWithContext(ctx context.Context) ExtensionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionTagOutput)
}

func (i ExtensionTagArgs) ToOutput(ctx context.Context) pulumix.Output[ExtensionTag] {
	return pulumix.Output[ExtensionTag]{
		OutputState: i.ToExtensionTagOutputWithContext(ctx).OutputState,
	}
}

// ExtensionTagArrayInput is an input type that accepts ExtensionTagArray and ExtensionTagArrayOutput values.
// You can construct a concrete instance of `ExtensionTagArrayInput` via:
//
//	ExtensionTagArray{ ExtensionTagArgs{...} }
type ExtensionTagArrayInput interface {
	pulumi.Input

	ToExtensionTagArrayOutput() ExtensionTagArrayOutput
	ToExtensionTagArrayOutputWithContext(context.Context) ExtensionTagArrayOutput
}

type ExtensionTagArray []ExtensionTagInput

func (ExtensionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionTag)(nil)).Elem()
}

func (i ExtensionTagArray) ToExtensionTagArrayOutput() ExtensionTagArrayOutput {
	return i.ToExtensionTagArrayOutputWithContext(context.Background())
}

func (i ExtensionTagArray) ToExtensionTagArrayOutputWithContext(ctx context.Context) ExtensionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionTagArrayOutput)
}

func (i ExtensionTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ExtensionTag] {
	return pulumix.Output[[]ExtensionTag]{
		OutputState: i.ToExtensionTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource.
type ExtensionTagOutput struct{ *pulumi.OutputState }

func (ExtensionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionTag)(nil)).Elem()
}

func (o ExtensionTagOutput) ToExtensionTagOutput() ExtensionTagOutput {
	return o
}

func (o ExtensionTagOutput) ToExtensionTagOutputWithContext(ctx context.Context) ExtensionTagOutput {
	return o
}

func (o ExtensionTagOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionTag] {
	return pulumix.Output[ExtensionTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ExtensionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ExtensionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionTag) string { return v.Value }).(pulumi.StringOutput)
}

type ExtensionTagArrayOutput struct{ *pulumi.OutputState }

func (ExtensionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionTag)(nil)).Elem()
}

func (o ExtensionTagArrayOutput) ToExtensionTagArrayOutput() ExtensionTagArrayOutput {
	return o
}

func (o ExtensionTagArrayOutput) ToExtensionTagArrayOutputWithContext(ctx context.Context) ExtensionTagArrayOutput {
	return o
}

func (o ExtensionTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ExtensionTag] {
	return pulumix.Output[[]ExtensionTag]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionTagArrayOutput) Index(i pulumi.IntInput) ExtensionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionTag {
		return vs[0].([]ExtensionTag)[vs[1].(int)]
	}).(ExtensionTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationTagsInput)(nil)).Elem(), ApplicationTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationTagsArrayInput)(nil)).Elem(), ApplicationTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileTagsInput)(nil)).Elem(), ConfigurationProfileTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileTagsArrayInput)(nil)).Elem(), ConfigurationProfileTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileValidatorsInput)(nil)).Elem(), ConfigurationProfileValidatorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationProfileValidatorsArrayInput)(nil)).Elem(), ConfigurationProfileValidatorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStrategyTagsInput)(nil)).Elem(), DeploymentStrategyTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStrategyTagsArrayInput)(nil)).Elem(), DeploymentStrategyTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentTagsInput)(nil)).Elem(), DeploymentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentTagsArrayInput)(nil)).Elem(), DeploymentTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMonitorsInput)(nil)).Elem(), EnvironmentMonitorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMonitorsArrayInput)(nil)).Elem(), EnvironmentMonitorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentTagsInput)(nil)).Elem(), EnvironmentTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentTagsArrayInput)(nil)).Elem(), EnvironmentTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionAssociationTagInput)(nil)).Elem(), ExtensionAssociationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionAssociationTagArrayInput)(nil)).Elem(), ExtensionAssociationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionTagInput)(nil)).Elem(), ExtensionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionTagArrayInput)(nil)).Elem(), ExtensionTagArray{})
	pulumi.RegisterOutputType(ApplicationTagsOutput{})
	pulumi.RegisterOutputType(ApplicationTagsArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationProfileTagsOutput{})
	pulumi.RegisterOutputType(ConfigurationProfileTagsArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationProfileValidatorsOutput{})
	pulumi.RegisterOutputType(ConfigurationProfileValidatorsArrayOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyTagsOutput{})
	pulumi.RegisterOutputType(DeploymentStrategyTagsArrayOutput{})
	pulumi.RegisterOutputType(DeploymentTagsOutput{})
	pulumi.RegisterOutputType(DeploymentTagsArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMonitorsOutput{})
	pulumi.RegisterOutputType(EnvironmentMonitorsArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentTagsOutput{})
	pulumi.RegisterOutputType(EnvironmentTagsArrayOutput{})
	pulumi.RegisterOutputType(ExtensionAssociationTagOutput{})
	pulumi.RegisterOutputType(ExtensionAssociationTagArrayOutput{})
	pulumi.RegisterOutputType(ExtensionTagOutput{})
	pulumi.RegisterOutputType(ExtensionTagArrayOutput{})
}
