// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appconfig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppConfig::DeploymentStrategy
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/appconfig"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appconfig.NewDeploymentStrategy(ctx, "basicDeploymentStrategy", &appconfig.DeploymentStrategyArgs{
//				Name:                        pulumi.String("MyTestDeploymentStrategy"),
//				Description:                 pulumi.String("A sample test deployment strategy."),
//				DeploymentDurationInMinutes: pulumi.Float64(3),
//				FinalBakeTimeInMinutes:      pulumi.Float64(4),
//				GrowthFactor:                pulumi.Float64(10),
//				GrowthType:                  appconfig.DeploymentStrategyGrowthTypeLinear,
//				ReplicateTo:                 appconfig.DeploymentStrategyReplicateToNone,
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("Env"),
//						Value: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DeploymentStrategy struct {
	pulumi.CustomResourceState

	// The deployment strategy ID.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Total amount of time for a deployment to last.
	DeploymentDurationInMinutes pulumi.Float64Output `pulumi:"deploymentDurationInMinutes"`
	// A description of the deployment strategy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS AppConfig User Guide.
	FinalBakeTimeInMinutes pulumi.Float64PtrOutput `pulumi:"finalBakeTimeInMinutes"`
	// The percentage of targets to receive a deployed configuration during each interval.
	GrowthFactor pulumi.Float64Output `pulumi:"growthFactor"`
	// The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:
	//
	// Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.
	//
	// Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:
	//
	// 2*(2^0)
	//
	// 2*(2^1)
	//
	// 2*(2^2)
	//
	// Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
	GrowthType DeploymentStrategyGrowthTypePtrOutput `pulumi:"growthType"`
	// A name for the deployment strategy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Save the deployment strategy to a Systems Manager (SSM) document.
	ReplicateTo DeploymentStrategyReplicateToOutput `pulumi:"replicateTo"`
	// Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDeploymentStrategy registers a new resource with the given unique name, arguments, and options.
func NewDeploymentStrategy(ctx *pulumi.Context,
	name string, args *DeploymentStrategyArgs, opts ...pulumi.ResourceOption) (*DeploymentStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentDurationInMinutes == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentDurationInMinutes'")
	}
	if args.GrowthFactor == nil {
		return nil, errors.New("invalid value for required argument 'GrowthFactor'")
	}
	if args.ReplicateTo == nil {
		return nil, errors.New("invalid value for required argument 'ReplicateTo'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"replicateTo",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeploymentStrategy
	err := ctx.RegisterResource("aws-native:appconfig:DeploymentStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentStrategy gets an existing DeploymentStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentStrategyState, opts ...pulumi.ResourceOption) (*DeploymentStrategy, error) {
	var resource DeploymentStrategy
	err := ctx.ReadResource("aws-native:appconfig:DeploymentStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentStrategy resources.
type deploymentStrategyState struct {
}

type DeploymentStrategyState struct {
}

func (DeploymentStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentStrategyState)(nil)).Elem()
}

type deploymentStrategyArgs struct {
	// Total amount of time for a deployment to last.
	DeploymentDurationInMinutes float64 `pulumi:"deploymentDurationInMinutes"`
	// A description of the deployment strategy.
	Description *string `pulumi:"description"`
	// Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS AppConfig User Guide.
	FinalBakeTimeInMinutes *float64 `pulumi:"finalBakeTimeInMinutes"`
	// The percentage of targets to receive a deployed configuration during each interval.
	GrowthFactor float64 `pulumi:"growthFactor"`
	// The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:
	//
	// Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.
	//
	// Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:
	//
	// 2*(2^0)
	//
	// 2*(2^1)
	//
	// 2*(2^2)
	//
	// Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
	GrowthType *DeploymentStrategyGrowthType `pulumi:"growthType"`
	// A name for the deployment strategy.
	Name *string `pulumi:"name"`
	// Save the deployment strategy to a Systems Manager (SSM) document.
	ReplicateTo DeploymentStrategyReplicateTo `pulumi:"replicateTo"`
	// Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a DeploymentStrategy resource.
type DeploymentStrategyArgs struct {
	// Total amount of time for a deployment to last.
	DeploymentDurationInMinutes pulumi.Float64Input
	// A description of the deployment strategy.
	Description pulumi.StringPtrInput
	// Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS AppConfig User Guide.
	FinalBakeTimeInMinutes pulumi.Float64PtrInput
	// The percentage of targets to receive a deployed configuration during each interval.
	GrowthFactor pulumi.Float64Input
	// The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:
	//
	// Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.
	//
	// Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:
	//
	// 2*(2^0)
	//
	// 2*(2^1)
	//
	// 2*(2^2)
	//
	// Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
	GrowthType DeploymentStrategyGrowthTypePtrInput
	// A name for the deployment strategy.
	Name pulumi.StringPtrInput
	// Save the deployment strategy to a Systems Manager (SSM) document.
	ReplicateTo DeploymentStrategyReplicateToInput
	// Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
	Tags aws.TagArrayInput
}

func (DeploymentStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentStrategyArgs)(nil)).Elem()
}

type DeploymentStrategyInput interface {
	pulumi.Input

	ToDeploymentStrategyOutput() DeploymentStrategyOutput
	ToDeploymentStrategyOutputWithContext(ctx context.Context) DeploymentStrategyOutput
}

func (*DeploymentStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategy)(nil)).Elem()
}

func (i *DeploymentStrategy) ToDeploymentStrategyOutput() DeploymentStrategyOutput {
	return i.ToDeploymentStrategyOutputWithContext(context.Background())
}

func (i *DeploymentStrategy) ToDeploymentStrategyOutputWithContext(ctx context.Context) DeploymentStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStrategyOutput)
}

type DeploymentStrategyOutput struct{ *pulumi.OutputState }

func (DeploymentStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStrategy)(nil)).Elem()
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyOutput() DeploymentStrategyOutput {
	return o
}

func (o DeploymentStrategyOutput) ToDeploymentStrategyOutputWithContext(ctx context.Context) DeploymentStrategyOutput {
	return o
}

// The deployment strategy ID.
func (o DeploymentStrategyOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStrategy) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Total amount of time for a deployment to last.
func (o DeploymentStrategyOutput) DeploymentDurationInMinutes() pulumi.Float64Output {
	return o.ApplyT(func(v *DeploymentStrategy) pulumi.Float64Output { return v.DeploymentDurationInMinutes }).(pulumi.Float64Output)
}

// A description of the deployment strategy.
func (o DeploymentStrategyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStrategy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS AppConfig User Guide.
func (o DeploymentStrategyOutput) FinalBakeTimeInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DeploymentStrategy) pulumi.Float64PtrOutput { return v.FinalBakeTimeInMinutes }).(pulumi.Float64PtrOutput)
}

// The percentage of targets to receive a deployed configuration during each interval.
func (o DeploymentStrategyOutput) GrowthFactor() pulumi.Float64Output {
	return o.ApplyT(func(v *DeploymentStrategy) pulumi.Float64Output { return v.GrowthFactor }).(pulumi.Float64Output)
}

// The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:
//
// Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.
//
// Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:
//
// 2*(2^0)
//
// 2*(2^1)
//
// 2*(2^2)
//
// Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
func (o DeploymentStrategyOutput) GrowthType() DeploymentStrategyGrowthTypePtrOutput {
	return o.ApplyT(func(v *DeploymentStrategy) DeploymentStrategyGrowthTypePtrOutput { return v.GrowthType }).(DeploymentStrategyGrowthTypePtrOutput)
}

// A name for the deployment strategy.
func (o DeploymentStrategyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStrategy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Save the deployment strategy to a Systems Manager (SSM) document.
func (o DeploymentStrategyOutput) ReplicateTo() DeploymentStrategyReplicateToOutput {
	return o.ApplyT(func(v *DeploymentStrategy) DeploymentStrategyReplicateToOutput { return v.ReplicateTo }).(DeploymentStrategyReplicateToOutput)
}

// Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
func (o DeploymentStrategyOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DeploymentStrategy) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentStrategyInput)(nil)).Elem(), &DeploymentStrategy{})
	pulumi.RegisterOutputType(DeploymentStrategyOutput{})
}
