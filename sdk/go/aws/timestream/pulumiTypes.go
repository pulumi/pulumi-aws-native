// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package timestream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
type DatabaseTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// DatabaseTagInput is an input type that accepts DatabaseTagArgs and DatabaseTagOutput values.
// You can construct a concrete instance of `DatabaseTagInput` via:
//
//          DatabaseTagArgs{...}
type DatabaseTagInput interface {
	pulumi.Input

	ToDatabaseTagOutput() DatabaseTagOutput
	ToDatabaseTagOutputWithContext(context.Context) DatabaseTagOutput
}

// You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
type DatabaseTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DatabaseTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTag)(nil)).Elem()
}

func (i DatabaseTagArgs) ToDatabaseTagOutput() DatabaseTagOutput {
	return i.ToDatabaseTagOutputWithContext(context.Background())
}

func (i DatabaseTagArgs) ToDatabaseTagOutputWithContext(ctx context.Context) DatabaseTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTagOutput)
}

// DatabaseTagArrayInput is an input type that accepts DatabaseTagArray and DatabaseTagArrayOutput values.
// You can construct a concrete instance of `DatabaseTagArrayInput` via:
//
//          DatabaseTagArray{ DatabaseTagArgs{...} }
type DatabaseTagArrayInput interface {
	pulumi.Input

	ToDatabaseTagArrayOutput() DatabaseTagArrayOutput
	ToDatabaseTagArrayOutputWithContext(context.Context) DatabaseTagArrayOutput
}

type DatabaseTagArray []DatabaseTagInput

func (DatabaseTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTag)(nil)).Elem()
}

func (i DatabaseTagArray) ToDatabaseTagArrayOutput() DatabaseTagArrayOutput {
	return i.ToDatabaseTagArrayOutputWithContext(context.Background())
}

func (i DatabaseTagArray) ToDatabaseTagArrayOutputWithContext(ctx context.Context) DatabaseTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTagArrayOutput)
}

// You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
type DatabaseTagOutput struct{ *pulumi.OutputState }

func (DatabaseTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTag)(nil)).Elem()
}

func (o DatabaseTagOutput) ToDatabaseTagOutput() DatabaseTagOutput {
	return o
}

func (o DatabaseTagOutput) ToDatabaseTagOutputWithContext(ctx context.Context) DatabaseTagOutput {
	return o
}

func (o DatabaseTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o DatabaseTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DatabaseTagArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTag)(nil)).Elem()
}

func (o DatabaseTagArrayOutput) ToDatabaseTagArrayOutput() DatabaseTagArrayOutput {
	return o
}

func (o DatabaseTagArrayOutput) ToDatabaseTagArrayOutputWithContext(ctx context.Context) DatabaseTagArrayOutput {
	return o
}

func (o DatabaseTagArrayOutput) Index(i pulumi.IntInput) DatabaseTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseTag {
		return vs[0].([]DatabaseTag)[vs[1].(int)]
	}).(DatabaseTagOutput)
}

// The retention duration of the memory store and the magnetic store.
type RetentionPropertiesProperties struct {
	// The duration for which data must be stored in the magnetic store.
	MagneticStoreRetentionPeriodInDays *string `pulumi:"magneticStoreRetentionPeriodInDays"`
	// The duration for which data must be stored in the memory store.
	MemoryStoreRetentionPeriodInHours *string `pulumi:"memoryStoreRetentionPeriodInHours"`
}

// RetentionPropertiesPropertiesInput is an input type that accepts RetentionPropertiesPropertiesArgs and RetentionPropertiesPropertiesOutput values.
// You can construct a concrete instance of `RetentionPropertiesPropertiesInput` via:
//
//          RetentionPropertiesPropertiesArgs{...}
type RetentionPropertiesPropertiesInput interface {
	pulumi.Input

	ToRetentionPropertiesPropertiesOutput() RetentionPropertiesPropertiesOutput
	ToRetentionPropertiesPropertiesOutputWithContext(context.Context) RetentionPropertiesPropertiesOutput
}

// The retention duration of the memory store and the magnetic store.
type RetentionPropertiesPropertiesArgs struct {
	// The duration for which data must be stored in the magnetic store.
	MagneticStoreRetentionPeriodInDays pulumi.StringPtrInput `pulumi:"magneticStoreRetentionPeriodInDays"`
	// The duration for which data must be stored in the memory store.
	MemoryStoreRetentionPeriodInHours pulumi.StringPtrInput `pulumi:"memoryStoreRetentionPeriodInHours"`
}

func (RetentionPropertiesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPropertiesProperties)(nil)).Elem()
}

func (i RetentionPropertiesPropertiesArgs) ToRetentionPropertiesPropertiesOutput() RetentionPropertiesPropertiesOutput {
	return i.ToRetentionPropertiesPropertiesOutputWithContext(context.Background())
}

func (i RetentionPropertiesPropertiesArgs) ToRetentionPropertiesPropertiesOutputWithContext(ctx context.Context) RetentionPropertiesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPropertiesPropertiesOutput)
}

func (i RetentionPropertiesPropertiesArgs) ToRetentionPropertiesPropertiesPtrOutput() RetentionPropertiesPropertiesPtrOutput {
	return i.ToRetentionPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (i RetentionPropertiesPropertiesArgs) ToRetentionPropertiesPropertiesPtrOutputWithContext(ctx context.Context) RetentionPropertiesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPropertiesPropertiesOutput).ToRetentionPropertiesPropertiesPtrOutputWithContext(ctx)
}

// RetentionPropertiesPropertiesPtrInput is an input type that accepts RetentionPropertiesPropertiesArgs, RetentionPropertiesPropertiesPtr and RetentionPropertiesPropertiesPtrOutput values.
// You can construct a concrete instance of `RetentionPropertiesPropertiesPtrInput` via:
//
//          RetentionPropertiesPropertiesArgs{...}
//
//  or:
//
//          nil
type RetentionPropertiesPropertiesPtrInput interface {
	pulumi.Input

	ToRetentionPropertiesPropertiesPtrOutput() RetentionPropertiesPropertiesPtrOutput
	ToRetentionPropertiesPropertiesPtrOutputWithContext(context.Context) RetentionPropertiesPropertiesPtrOutput
}

type retentionPropertiesPropertiesPtrType RetentionPropertiesPropertiesArgs

func RetentionPropertiesPropertiesPtr(v *RetentionPropertiesPropertiesArgs) RetentionPropertiesPropertiesPtrInput {
	return (*retentionPropertiesPropertiesPtrType)(v)
}

func (*retentionPropertiesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPropertiesProperties)(nil)).Elem()
}

func (i *retentionPropertiesPropertiesPtrType) ToRetentionPropertiesPropertiesPtrOutput() RetentionPropertiesPropertiesPtrOutput {
	return i.ToRetentionPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (i *retentionPropertiesPropertiesPtrType) ToRetentionPropertiesPropertiesPtrOutputWithContext(ctx context.Context) RetentionPropertiesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPropertiesPropertiesPtrOutput)
}

// The retention duration of the memory store and the magnetic store.
type RetentionPropertiesPropertiesOutput struct{ *pulumi.OutputState }

func (RetentionPropertiesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPropertiesProperties)(nil)).Elem()
}

func (o RetentionPropertiesPropertiesOutput) ToRetentionPropertiesPropertiesOutput() RetentionPropertiesPropertiesOutput {
	return o
}

func (o RetentionPropertiesPropertiesOutput) ToRetentionPropertiesPropertiesOutputWithContext(ctx context.Context) RetentionPropertiesPropertiesOutput {
	return o
}

func (o RetentionPropertiesPropertiesOutput) ToRetentionPropertiesPropertiesPtrOutput() RetentionPropertiesPropertiesPtrOutput {
	return o.ToRetentionPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (o RetentionPropertiesPropertiesOutput) ToRetentionPropertiesPropertiesPtrOutputWithContext(ctx context.Context) RetentionPropertiesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetentionPropertiesProperties) *RetentionPropertiesProperties {
		return &v
	}).(RetentionPropertiesPropertiesPtrOutput)
}

// The duration for which data must be stored in the magnetic store.
func (o RetentionPropertiesPropertiesOutput) MagneticStoreRetentionPeriodInDays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPropertiesProperties) *string { return v.MagneticStoreRetentionPeriodInDays }).(pulumi.StringPtrOutput)
}

// The duration for which data must be stored in the memory store.
func (o RetentionPropertiesPropertiesOutput) MemoryStoreRetentionPeriodInHours() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionPropertiesProperties) *string { return v.MemoryStoreRetentionPeriodInHours }).(pulumi.StringPtrOutput)
}

type RetentionPropertiesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RetentionPropertiesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPropertiesProperties)(nil)).Elem()
}

func (o RetentionPropertiesPropertiesPtrOutput) ToRetentionPropertiesPropertiesPtrOutput() RetentionPropertiesPropertiesPtrOutput {
	return o
}

func (o RetentionPropertiesPropertiesPtrOutput) ToRetentionPropertiesPropertiesPtrOutputWithContext(ctx context.Context) RetentionPropertiesPropertiesPtrOutput {
	return o
}

func (o RetentionPropertiesPropertiesPtrOutput) Elem() RetentionPropertiesPropertiesOutput {
	return o.ApplyT(func(v *RetentionPropertiesProperties) RetentionPropertiesProperties {
		if v != nil {
			return *v
		}
		var ret RetentionPropertiesProperties
		return ret
	}).(RetentionPropertiesPropertiesOutput)
}

// The duration for which data must be stored in the magnetic store.
func (o RetentionPropertiesPropertiesPtrOutput) MagneticStoreRetentionPeriodInDays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionPropertiesProperties) *string {
		if v == nil {
			return nil
		}
		return v.MagneticStoreRetentionPeriodInDays
	}).(pulumi.StringPtrOutput)
}

// The duration for which data must be stored in the memory store.
func (o RetentionPropertiesPropertiesPtrOutput) MemoryStoreRetentionPeriodInHours() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionPropertiesProperties) *string {
		if v == nil {
			return nil
		}
		return v.MemoryStoreRetentionPeriodInHours
	}).(pulumi.StringPtrOutput)
}

// You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
type TableTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// TableTagInput is an input type that accepts TableTagArgs and TableTagOutput values.
// You can construct a concrete instance of `TableTagInput` via:
//
//          TableTagArgs{...}
type TableTagInput interface {
	pulumi.Input

	ToTableTagOutput() TableTagOutput
	ToTableTagOutputWithContext(context.Context) TableTagOutput
}

// You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
type TableTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTag)(nil)).Elem()
}

func (i TableTagArgs) ToTableTagOutput() TableTagOutput {
	return i.ToTableTagOutputWithContext(context.Background())
}

func (i TableTagArgs) ToTableTagOutputWithContext(ctx context.Context) TableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTagOutput)
}

// TableTagArrayInput is an input type that accepts TableTagArray and TableTagArrayOutput values.
// You can construct a concrete instance of `TableTagArrayInput` via:
//
//          TableTagArray{ TableTagArgs{...} }
type TableTagArrayInput interface {
	pulumi.Input

	ToTableTagArrayOutput() TableTagArrayOutput
	ToTableTagArrayOutputWithContext(context.Context) TableTagArrayOutput
}

type TableTagArray []TableTagInput

func (TableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableTag)(nil)).Elem()
}

func (i TableTagArray) ToTableTagArrayOutput() TableTagArrayOutput {
	return i.ToTableTagArrayOutputWithContext(context.Background())
}

func (i TableTagArray) ToTableTagArrayOutputWithContext(ctx context.Context) TableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTagArrayOutput)
}

// You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
type TableTagOutput struct{ *pulumi.OutputState }

func (TableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTag)(nil)).Elem()
}

func (o TableTagOutput) ToTableTagOutput() TableTagOutput {
	return o
}

func (o TableTagOutput) ToTableTagOutputWithContext(ctx context.Context) TableTagOutput {
	return o
}

func (o TableTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o TableTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TableTagArrayOutput struct{ *pulumi.OutputState }

func (TableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableTag)(nil)).Elem()
}

func (o TableTagArrayOutput) ToTableTagArrayOutput() TableTagArrayOutput {
	return o
}

func (o TableTagArrayOutput) ToTableTagArrayOutputWithContext(ctx context.Context) TableTagArrayOutput {
	return o
}

func (o TableTagArrayOutput) Index(i pulumi.IntInput) TableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableTag {
		return vs[0].([]TableTag)[vs[1].(int)]
	}).(TableTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTagInput)(nil)).Elem(), DatabaseTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTagArrayInput)(nil)).Elem(), DatabaseTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetentionPropertiesPropertiesInput)(nil)).Elem(), RetentionPropertiesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetentionPropertiesPropertiesPtrInput)(nil)).Elem(), RetentionPropertiesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTagInput)(nil)).Elem(), TableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTagArrayInput)(nil)).Elem(), TableTagArray{})
	pulumi.RegisterOutputType(DatabaseTagOutput{})
	pulumi.RegisterOutputType(DatabaseTagArrayOutput{})
	pulumi.RegisterOutputType(RetentionPropertiesPropertiesOutput{})
	pulumi.RegisterOutputType(RetentionPropertiesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TableTagOutput{})
	pulumi.RegisterOutputType(TableTagArrayOutput{})
}
