// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package timestream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::Timestream::ScheduledQuery resource creates a Timestream Scheduled Query.
func LookupScheduledQuery(ctx *pulumi.Context, args *LookupScheduledQueryArgs, opts ...pulumi.InvokeOption) (*LookupScheduledQueryResult, error) {
	var rv LookupScheduledQueryResult
	err := ctx.Invoke("aws-native:timestream:getScheduledQuery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScheduledQueryArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupScheduledQueryResult struct {
	Arn *string `pulumi:"arn"`
	// Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
	SQErrorReportConfiguration *string `pulumi:"sQErrorReportConfiguration"`
	// The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
	SQKmsKeyId *string `pulumi:"sQKmsKeyId"`
	// The name of the scheduled query. Scheduled query names must be unique within each Region.
	SQName *string `pulumi:"sQName"`
	// Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
	SQNotificationConfiguration *string `pulumi:"sQNotificationConfiguration"`
	// The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
	SQQueryString *string `pulumi:"sQQueryString"`
	// Configuration for when the scheduled query is executed.
	SQScheduleConfiguration *string `pulumi:"sQScheduleConfiguration"`
	// The ARN for the IAM role that Timestream will assume when running the scheduled query.
	SQScheduledQueryExecutionRoleArn *string `pulumi:"sQScheduledQueryExecutionRoleArn"`
	// Configuration of target store where scheduled query results are written to.
	SQTargetConfiguration *string             `pulumi:"sQTargetConfiguration"`
	Tags                  []ScheduledQueryTag `pulumi:"tags"`
}

func LookupScheduledQueryOutput(ctx *pulumi.Context, args LookupScheduledQueryOutputArgs, opts ...pulumi.InvokeOption) LookupScheduledQueryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScheduledQueryResult, error) {
			args := v.(LookupScheduledQueryArgs)
			r, err := LookupScheduledQuery(ctx, &args, opts...)
			var s LookupScheduledQueryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScheduledQueryResultOutput)
}

type LookupScheduledQueryOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupScheduledQueryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduledQueryArgs)(nil)).Elem()
}

type LookupScheduledQueryResultOutput struct{ *pulumi.OutputState }

func (LookupScheduledQueryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduledQueryResult)(nil)).Elem()
}

func (o LookupScheduledQueryResultOutput) ToLookupScheduledQueryResultOutput() LookupScheduledQueryResultOutput {
	return o
}

func (o LookupScheduledQueryResultOutput) ToLookupScheduledQueryResultOutputWithContext(ctx context.Context) LookupScheduledQueryResultOutput {
	return o
}

func (o LookupScheduledQueryResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
func (o LookupScheduledQueryResultOutput) SQErrorReportConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQErrorReportConfiguration }).(pulumi.StringPtrOutput)
}

// The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
func (o LookupScheduledQueryResultOutput) SQKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQKmsKeyId }).(pulumi.StringPtrOutput)
}

// The name of the scheduled query. Scheduled query names must be unique within each Region.
func (o LookupScheduledQueryResultOutput) SQName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQName }).(pulumi.StringPtrOutput)
}

// Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
func (o LookupScheduledQueryResultOutput) SQNotificationConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQNotificationConfiguration }).(pulumi.StringPtrOutput)
}

// The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
func (o LookupScheduledQueryResultOutput) SQQueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQQueryString }).(pulumi.StringPtrOutput)
}

// Configuration for when the scheduled query is executed.
func (o LookupScheduledQueryResultOutput) SQScheduleConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQScheduleConfiguration }).(pulumi.StringPtrOutput)
}

// The ARN for the IAM role that Timestream will assume when running the scheduled query.
func (o LookupScheduledQueryResultOutput) SQScheduledQueryExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQScheduledQueryExecutionRoleArn }).(pulumi.StringPtrOutput)
}

// Configuration of target store where scheduled query results are written to.
func (o LookupScheduledQueryResultOutput) SQTargetConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) *string { return v.SQTargetConfiguration }).(pulumi.StringPtrOutput)
}

func (o LookupScheduledQueryResultOutput) Tags() ScheduledQueryTagArrayOutput {
	return o.ApplyT(func(v LookupScheduledQueryResult) []ScheduledQueryTag { return v.Tags }).(ScheduledQueryTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScheduledQueryResultOutput{})
}
