// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package timestream

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::Timestream::ScheduledQuery resource creates a Timestream Scheduled Query.
type ScheduledQuery struct {
	pulumi.CustomResourceState

	Arn                       pulumi.StringOutput                           `pulumi:"arn"`
	ClientToken               pulumi.StringPtrOutput                        `pulumi:"clientToken"`
	ErrorReportConfiguration  ScheduledQueryErrorReportConfigurationOutput  `pulumi:"errorReportConfiguration"`
	KmsKeyId                  pulumi.StringPtrOutput                        `pulumi:"kmsKeyId"`
	NotificationConfiguration ScheduledQueryNotificationConfigurationOutput `pulumi:"notificationConfiguration"`
	QueryString               pulumi.StringOutput                           `pulumi:"queryString"`
	// Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
	SQErrorReportConfiguration pulumi.StringOutput `pulumi:"sQErrorReportConfiguration"`
	// The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
	SQKmsKeyId pulumi.StringOutput `pulumi:"sQKmsKeyId"`
	// The name of the scheduled query. Scheduled query names must be unique within each Region.
	SQName pulumi.StringOutput `pulumi:"sQName"`
	// Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
	SQNotificationConfiguration pulumi.StringOutput `pulumi:"sQNotificationConfiguration"`
	// The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
	SQQueryString pulumi.StringOutput `pulumi:"sQQueryString"`
	// Configuration for when the scheduled query is executed.
	SQScheduleConfiguration pulumi.StringOutput `pulumi:"sQScheduleConfiguration"`
	// The ARN for the IAM role that Timestream will assume when running the scheduled query.
	SQScheduledQueryExecutionRoleArn pulumi.StringOutput `pulumi:"sQScheduledQueryExecutionRoleArn"`
	// Configuration of target store where scheduled query results are written to.
	SQTargetConfiguration          pulumi.StringOutput                        `pulumi:"sQTargetConfiguration"`
	ScheduleConfiguration          ScheduledQueryScheduleConfigurationOutput  `pulumi:"scheduleConfiguration"`
	ScheduledQueryExecutionRoleArn pulumi.StringOutput                        `pulumi:"scheduledQueryExecutionRoleArn"`
	ScheduledQueryName             pulumi.StringPtrOutput                     `pulumi:"scheduledQueryName"`
	Tags                           ScheduledQueryTagArrayOutput               `pulumi:"tags"`
	TargetConfiguration            ScheduledQueryTargetConfigurationPtrOutput `pulumi:"targetConfiguration"`
}

// NewScheduledQuery registers a new resource with the given unique name, arguments, and options.
func NewScheduledQuery(ctx *pulumi.Context,
	name string, args *ScheduledQueryArgs, opts ...pulumi.ResourceOption) (*ScheduledQuery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ErrorReportConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ErrorReportConfiguration'")
	}
	if args.NotificationConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'NotificationConfiguration'")
	}
	if args.QueryString == nil {
		return nil, errors.New("invalid value for required argument 'QueryString'")
	}
	if args.ScheduleConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleConfiguration'")
	}
	if args.ScheduledQueryExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ScheduledQueryExecutionRoleArn'")
	}
	var resource ScheduledQuery
	err := ctx.RegisterResource("aws-native:timestream:ScheduledQuery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledQuery gets an existing ScheduledQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledQueryState, opts ...pulumi.ResourceOption) (*ScheduledQuery, error) {
	var resource ScheduledQuery
	err := ctx.ReadResource("aws-native:timestream:ScheduledQuery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledQuery resources.
type scheduledQueryState struct {
}

type ScheduledQueryState struct {
}

func (ScheduledQueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryState)(nil)).Elem()
}

type scheduledQueryArgs struct {
	ClientToken                    *string                                 `pulumi:"clientToken"`
	ErrorReportConfiguration       ScheduledQueryErrorReportConfiguration  `pulumi:"errorReportConfiguration"`
	KmsKeyId                       *string                                 `pulumi:"kmsKeyId"`
	NotificationConfiguration      ScheduledQueryNotificationConfiguration `pulumi:"notificationConfiguration"`
	QueryString                    string                                  `pulumi:"queryString"`
	ScheduleConfiguration          ScheduledQueryScheduleConfiguration     `pulumi:"scheduleConfiguration"`
	ScheduledQueryExecutionRoleArn string                                  `pulumi:"scheduledQueryExecutionRoleArn"`
	ScheduledQueryName             *string                                 `pulumi:"scheduledQueryName"`
	Tags                           []ScheduledQueryTag                     `pulumi:"tags"`
	TargetConfiguration            *ScheduledQueryTargetConfiguration      `pulumi:"targetConfiguration"`
}

// The set of arguments for constructing a ScheduledQuery resource.
type ScheduledQueryArgs struct {
	ClientToken                    pulumi.StringPtrInput
	ErrorReportConfiguration       ScheduledQueryErrorReportConfigurationInput
	KmsKeyId                       pulumi.StringPtrInput
	NotificationConfiguration      ScheduledQueryNotificationConfigurationInput
	QueryString                    pulumi.StringInput
	ScheduleConfiguration          ScheduledQueryScheduleConfigurationInput
	ScheduledQueryExecutionRoleArn pulumi.StringInput
	ScheduledQueryName             pulumi.StringPtrInput
	Tags                           ScheduledQueryTagArrayInput
	TargetConfiguration            ScheduledQueryTargetConfigurationPtrInput
}

func (ScheduledQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryArgs)(nil)).Elem()
}

type ScheduledQueryInput interface {
	pulumi.Input

	ToScheduledQueryOutput() ScheduledQueryOutput
	ToScheduledQueryOutputWithContext(ctx context.Context) ScheduledQueryOutput
}

func (*ScheduledQuery) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQuery)(nil))
}

func (i *ScheduledQuery) ToScheduledQueryOutput() ScheduledQueryOutput {
	return i.ToScheduledQueryOutputWithContext(context.Background())
}

func (i *ScheduledQuery) ToScheduledQueryOutputWithContext(ctx context.Context) ScheduledQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryOutput)
}

type ScheduledQueryOutput struct{ *pulumi.OutputState }

func (ScheduledQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQuery)(nil))
}

func (o ScheduledQueryOutput) ToScheduledQueryOutput() ScheduledQueryOutput {
	return o
}

func (o ScheduledQueryOutput) ToScheduledQueryOutputWithContext(ctx context.Context) ScheduledQueryOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryInput)(nil)).Elem(), &ScheduledQuery{})
	pulumi.RegisterOutputType(ScheduledQueryOutput{})
}
