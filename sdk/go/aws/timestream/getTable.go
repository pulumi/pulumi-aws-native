// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package timestream

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::Timestream::Table resource creates a Timestream Table.
func LookupTable(ctx *pulumi.Context, args *LookupTableArgs, opts ...pulumi.InvokeOption) (*LookupTableResult, error) {
	var rv LookupTableResult
	err := ctx.Invoke("aws-native:timestream:getTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTableArgs struct {
	// The name for the database which the table to be created belongs to.
	DatabaseName string `pulumi:"databaseName"`
	// The name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the table name.
	TableName string `pulumi:"tableName"`
}

type LookupTableResult struct {
	Arn *string `pulumi:"arn"`
	// The properties that determine whether magnetic store writes are enabled.
	MagneticStoreWriteProperties *MagneticStoreWritePropertiesProperties `pulumi:"magneticStoreWriteProperties"`
	// The table name exposed as a read-only attribute.
	Name *string `pulumi:"name"`
	// The retention duration of the memory store and the magnetic store.
	RetentionProperties *RetentionPropertiesProperties `pulumi:"retentionProperties"`
	// An array of key-value pairs to apply to this resource.
	Tags []TableTag `pulumi:"tags"`
}

func LookupTableOutput(ctx *pulumi.Context, args LookupTableOutputArgs, opts ...pulumi.InvokeOption) LookupTableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTableResult, error) {
			args := v.(LookupTableArgs)
			r, err := LookupTable(ctx, &args, opts...)
			return *r, err
		}).(LookupTableResultOutput)
}

type LookupTableOutputArgs struct {
	// The name for the database which the table to be created belongs to.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the table name.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

func (LookupTableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableArgs)(nil)).Elem()
}

type LookupTableResultOutput struct{ *pulumi.OutputState }

func (LookupTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableResult)(nil)).Elem()
}

func (o LookupTableResultOutput) ToLookupTableResultOutput() LookupTableResultOutput {
	return o
}

func (o LookupTableResultOutput) ToLookupTableResultOutputWithContext(ctx context.Context) LookupTableResultOutput {
	return o
}

func (o LookupTableResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTableResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The properties that determine whether magnetic store writes are enabled.
func (o LookupTableResultOutput) MagneticStoreWriteProperties() MagneticStoreWritePropertiesPropertiesPtrOutput {
	return o.ApplyT(func(v LookupTableResult) *MagneticStoreWritePropertiesProperties {
		return v.MagneticStoreWriteProperties
	}).(MagneticStoreWritePropertiesPropertiesPtrOutput)
}

// The table name exposed as a read-only attribute.
func (o LookupTableResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTableResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The retention duration of the memory store and the magnetic store.
func (o LookupTableResultOutput) RetentionProperties() RetentionPropertiesPropertiesPtrOutput {
	return o.ApplyT(func(v LookupTableResult) *RetentionPropertiesProperties { return v.RetentionProperties }).(RetentionPropertiesPropertiesPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupTableResultOutput) Tags() TableTagArrayOutput {
	return o.ApplyT(func(v LookupTableResult) []TableTag { return v.Tags }).(TableTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTableResultOutput{})
}
