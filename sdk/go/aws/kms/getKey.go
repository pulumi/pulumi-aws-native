// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::KMS::Key resource specifies an AWS KMS key in AWS Key Management Service (AWS KMS). Authorized users can use the AWS KMS key to encrypt and decrypt small amounts of data (up to 4096 bytes), but they are more commonly used to generate data keys. You can also use AWS KMS keys to encrypt data stored in AWS services that are integrated with AWS KMS or within their applications.
func LookupKey(ctx *pulumi.Context, args *LookupKeyArgs, opts ...pulumi.InvokeOption) (*LookupKeyResult, error) {
	var rv LookupKeyResult
	err := ctx.Invoke("aws-native:kms:getKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupKeyArgs struct {
	KeyId string `pulumi:"keyId"`
}

type LookupKeyResult struct {
	Arn *string `pulumi:"arn"`
	// A description of the AWS KMS key. Use a description that helps you to distinguish this AWS KMS key from others in the account, such as its intended use.
	Description *string `pulumi:"description"`
	// Enables automatic rotation of the key material for the specified AWS KMS key. By default, automation key rotation is not enabled.
	EnableKeyRotation *bool `pulumi:"enableKeyRotation"`
	// Specifies whether the AWS KMS key is enabled. Disabled AWS KMS keys cannot be used in cryptographic operations.
	Enabled *bool   `pulumi:"enabled"`
	KeyId   *string `pulumi:"keyId"`
	// The key policy that authorizes use of the AWS KMS key. The key policy must observe the following rules.
	KeyPolicy interface{} `pulumi:"keyPolicy"`
	// Specifies the type of AWS KMS key to create. The default value is SYMMETRIC_DEFAULT. This property is required only for asymmetric AWS KMS keys. You can't change the KeySpec value after the AWS KMS key is created.
	KeySpec *KeySpec `pulumi:"keySpec"`
	// Determines the cryptographic operations for which you can use the AWS KMS key. The default value is ENCRYPT_DECRYPT. This property is required only for asymmetric AWS KMS keys. You can't change the KeyUsage value after the AWS KMS key is created.
	KeyUsage *KeyUsage `pulumi:"keyUsage"`
	// Specifies whether the AWS KMS key should be Multi-Region. You can't change the MultiRegion value after the AWS KMS key is created.
	MultiRegion *bool `pulumi:"multiRegion"`
	// An array of key-value pairs to apply to this resource.
	Tags []KeyTag `pulumi:"tags"`
}

func LookupKeyOutput(ctx *pulumi.Context, args LookupKeyOutputArgs, opts ...pulumi.InvokeOption) LookupKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKeyResult, error) {
			args := v.(LookupKeyArgs)
			r, err := LookupKey(ctx, &args, opts...)
			var s LookupKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKeyResultOutput)
}

type LookupKeyOutputArgs struct {
	KeyId pulumi.StringInput `pulumi:"keyId"`
}

func (LookupKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyArgs)(nil)).Elem()
}

type LookupKeyResultOutput struct{ *pulumi.OutputState }

func (LookupKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyResult)(nil)).Elem()
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutput() LookupKeyResultOutput {
	return o
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutputWithContext(ctx context.Context) LookupKeyResultOutput {
	return o
}

func (o LookupKeyResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// A description of the AWS KMS key. Use a description that helps you to distinguish this AWS KMS key from others in the account, such as its intended use.
func (o LookupKeyResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enables automatic rotation of the key material for the specified AWS KMS key. By default, automation key rotation is not enabled.
func (o LookupKeyResultOutput) EnableKeyRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *bool { return v.EnableKeyRotation }).(pulumi.BoolPtrOutput)
}

// Specifies whether the AWS KMS key is enabled. Disabled AWS KMS keys cannot be used in cryptographic operations.
func (o LookupKeyResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o LookupKeyResultOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The key policy that authorizes use of the AWS KMS key. The key policy must observe the following rules.
func (o LookupKeyResultOutput) KeyPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupKeyResult) interface{} { return v.KeyPolicy }).(pulumi.AnyOutput)
}

// Specifies the type of AWS KMS key to create. The default value is SYMMETRIC_DEFAULT. This property is required only for asymmetric AWS KMS keys. You can't change the KeySpec value after the AWS KMS key is created.
func (o LookupKeyResultOutput) KeySpec() KeySpecPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *KeySpec { return v.KeySpec }).(KeySpecPtrOutput)
}

// Determines the cryptographic operations for which you can use the AWS KMS key. The default value is ENCRYPT_DECRYPT. This property is required only for asymmetric AWS KMS keys. You can't change the KeyUsage value after the AWS KMS key is created.
func (o LookupKeyResultOutput) KeyUsage() KeyUsagePtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *KeyUsage { return v.KeyUsage }).(KeyUsagePtrOutput)
}

// Specifies whether the AWS KMS key should be Multi-Region. You can't change the MultiRegion value after the AWS KMS key is created.
func (o LookupKeyResultOutput) MultiRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupKeyResult) *bool { return v.MultiRegion }).(pulumi.BoolPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupKeyResultOutput) Tags() KeyTagArrayOutput {
	return o.ApplyT(func(v LookupKeyResult) []KeyTag { return v.Tags }).(KeyTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyResultOutput{})
}
