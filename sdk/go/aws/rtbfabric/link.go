// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rtbfabric

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::RTBFabric::Link Resource Type
type Link struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput     `pulumi:"arn"`
	CreatedTimestamp     pulumi.StringOutput     `pulumi:"createdTimestamp"`
	GatewayId            pulumi.StringOutput     `pulumi:"gatewayId"`
	HttpResponderAllowed pulumi.BoolPtrOutput    `pulumi:"httpResponderAllowed"`
	LinkAttributes       LinkAttributesPtrOutput `pulumi:"linkAttributes"`
	LinkDirection        LinkDirectionOutput     `pulumi:"linkDirection"`
	LinkId               pulumi.StringOutput     `pulumi:"linkId"`
	LinkLogSettings      LinkLogSettingsOutput   `pulumi:"linkLogSettings"`
	LinkStatus           LinkStatusOutput        `pulumi:"linkStatus"`
	PeerGatewayId        pulumi.StringOutput     `pulumi:"peerGatewayId"`
	Tags                 aws.TagArrayOutput      `pulumi:"tags"`
	UpdatedTimestamp     pulumi.StringOutput     `pulumi:"updatedTimestamp"`
}

// NewLink registers a new resource with the given unique name, arguments, and options.
func NewLink(ctx *pulumi.Context,
	name string, args *LinkArgs, opts ...pulumi.ResourceOption) (*Link, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.LinkLogSettings == nil {
		return nil, errors.New("invalid value for required argument 'LinkLogSettings'")
	}
	if args.PeerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'PeerGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Link
	err := ctx.RegisterResource("aws-native:rtbfabric:Link", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLink gets an existing Link resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkState, opts ...pulumi.ResourceOption) (*Link, error) {
	var resource Link
	err := ctx.ReadResource("aws-native:rtbfabric:Link", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Link resources.
type linkState struct {
}

type LinkState struct {
}

func (LinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkState)(nil)).Elem()
}

type linkArgs struct {
	GatewayId            string          `pulumi:"gatewayId"`
	HttpResponderAllowed *bool           `pulumi:"httpResponderAllowed"`
	LinkAttributes       *LinkAttributes `pulumi:"linkAttributes"`
	LinkLogSettings      LinkLogSettings `pulumi:"linkLogSettings"`
	PeerGatewayId        string          `pulumi:"peerGatewayId"`
	Tags                 []aws.Tag       `pulumi:"tags"`
}

// The set of arguments for constructing a Link resource.
type LinkArgs struct {
	GatewayId            pulumi.StringInput
	HttpResponderAllowed pulumi.BoolPtrInput
	LinkAttributes       LinkAttributesPtrInput
	LinkLogSettings      LinkLogSettingsInput
	PeerGatewayId        pulumi.StringInput
	Tags                 aws.TagArrayInput
}

func (LinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkArgs)(nil)).Elem()
}

type LinkInput interface {
	pulumi.Input

	ToLinkOutput() LinkOutput
	ToLinkOutputWithContext(ctx context.Context) LinkOutput
}

func (*Link) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (i *Link) ToLinkOutput() LinkOutput {
	return i.ToLinkOutputWithContext(context.Background())
}

func (i *Link) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkOutput)
}

type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

func (o LinkOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LinkOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

func (o LinkOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

func (o LinkOutput) HttpResponderAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Link) pulumi.BoolPtrOutput { return v.HttpResponderAllowed }).(pulumi.BoolPtrOutput)
}

func (o LinkOutput) LinkAttributes() LinkAttributesPtrOutput {
	return o.ApplyT(func(v *Link) LinkAttributesPtrOutput { return v.LinkAttributes }).(LinkAttributesPtrOutput)
}

func (o LinkOutput) LinkDirection() LinkDirectionOutput {
	return o.ApplyT(func(v *Link) LinkDirectionOutput { return v.LinkDirection }).(LinkDirectionOutput)
}

func (o LinkOutput) LinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.LinkId }).(pulumi.StringOutput)
}

func (o LinkOutput) LinkLogSettings() LinkLogSettingsOutput {
	return o.ApplyT(func(v *Link) LinkLogSettingsOutput { return v.LinkLogSettings }).(LinkLogSettingsOutput)
}

func (o LinkOutput) LinkStatus() LinkStatusOutput {
	return o.ApplyT(func(v *Link) LinkStatusOutput { return v.LinkStatus }).(LinkStatusOutput)
}

func (o LinkOutput) PeerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.PeerGatewayId }).(pulumi.StringOutput)
}

func (o LinkOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Link) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o LinkOutput) UpdatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.UpdatedTimestamp }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkInput)(nil)).Elem(), &Link{})
	pulumi.RegisterOutputType(LinkOutput{})
}
