// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafkaconnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The configuration of the workers, which are the processes that run the connector logic.
type WorkerConfiguration struct {
	pulumi.CustomResourceState

	// A summary description of the worker configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the worker configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Base64 encoded contents of connect-distributed.properties file.
	PropertiesFileContent pulumi.StringOutput `pulumi:"propertiesFileContent"`
	// The description of a revision of the worker configuration.
	Revision pulumi.IntOutput `pulumi:"revision"`
	// A collection of tags associated with a resource
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The Amazon Resource Name (ARN) of the custom configuration.
	WorkerConfigurationArn pulumi.StringOutput `pulumi:"workerConfigurationArn"`
}

// NewWorkerConfiguration registers a new resource with the given unique name, arguments, and options.
func NewWorkerConfiguration(ctx *pulumi.Context,
	name string, args *WorkerConfigurationArgs, opts ...pulumi.ResourceOption) (*WorkerConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PropertiesFileContent == nil {
		return nil, errors.New("invalid value for required argument 'PropertiesFileContent'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"description",
		"name",
		"propertiesFileContent",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerConfiguration
	err := ctx.RegisterResource("aws-native:kafkaconnect:WorkerConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerConfiguration gets an existing WorkerConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerConfigurationState, opts ...pulumi.ResourceOption) (*WorkerConfiguration, error) {
	var resource WorkerConfiguration
	err := ctx.ReadResource("aws-native:kafkaconnect:WorkerConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerConfiguration resources.
type workerConfigurationState struct {
}

type WorkerConfigurationState struct {
}

func (WorkerConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerConfigurationState)(nil)).Elem()
}

type workerConfigurationArgs struct {
	// A summary description of the worker configuration.
	Description *string `pulumi:"description"`
	// The name of the worker configuration.
	Name *string `pulumi:"name"`
	// Base64 encoded contents of connect-distributed.properties file.
	PropertiesFileContent string `pulumi:"propertiesFileContent"`
	// A collection of tags associated with a resource
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a WorkerConfiguration resource.
type WorkerConfigurationArgs struct {
	// A summary description of the worker configuration.
	Description pulumi.StringPtrInput
	// The name of the worker configuration.
	Name pulumi.StringPtrInput
	// Base64 encoded contents of connect-distributed.properties file.
	PropertiesFileContent pulumi.StringInput
	// A collection of tags associated with a resource
	Tags aws.TagArrayInput
}

func (WorkerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerConfigurationArgs)(nil)).Elem()
}

type WorkerConfigurationInput interface {
	pulumi.Input

	ToWorkerConfigurationOutput() WorkerConfigurationOutput
	ToWorkerConfigurationOutputWithContext(ctx context.Context) WorkerConfigurationOutput
}

func (*WorkerConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerConfiguration)(nil)).Elem()
}

func (i *WorkerConfiguration) ToWorkerConfigurationOutput() WorkerConfigurationOutput {
	return i.ToWorkerConfigurationOutputWithContext(context.Background())
}

func (i *WorkerConfiguration) ToWorkerConfigurationOutputWithContext(ctx context.Context) WorkerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerConfigurationOutput)
}

type WorkerConfigurationOutput struct{ *pulumi.OutputState }

func (WorkerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerConfiguration)(nil)).Elem()
}

func (o WorkerConfigurationOutput) ToWorkerConfigurationOutput() WorkerConfigurationOutput {
	return o
}

func (o WorkerConfigurationOutput) ToWorkerConfigurationOutputWithContext(ctx context.Context) WorkerConfigurationOutput {
	return o
}

// A summary description of the worker configuration.
func (o WorkerConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerConfiguration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the worker configuration.
func (o WorkerConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Base64 encoded contents of connect-distributed.properties file.
func (o WorkerConfigurationOutput) PropertiesFileContent() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerConfiguration) pulumi.StringOutput { return v.PropertiesFileContent }).(pulumi.StringOutput)
}

// The description of a revision of the worker configuration.
func (o WorkerConfigurationOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkerConfiguration) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

// A collection of tags associated with a resource
func (o WorkerConfigurationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *WorkerConfiguration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The Amazon Resource Name (ARN) of the custom configuration.
func (o WorkerConfigurationOutput) WorkerConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerConfiguration) pulumi.StringOutput { return v.WorkerConfigurationArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerConfigurationInput)(nil)).Elem(), &WorkerConfiguration{})
	pulumi.RegisterOutputType(WorkerConfigurationOutput{})
}
