// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrserverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EMRServerless::Application Type
func LookupApplication(ctx *pulumi.Context, args *LookupApplicationArgs, opts ...pulumi.InvokeOption) (*LookupApplicationResult, error) {
	var rv LookupApplicationResult
	err := ctx.Invoke("aws-native:emrserverless:getApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApplicationArgs struct {
	// The ID of the EMR Serverless Application.
	ApplicationId string `pulumi:"applicationId"`
}

type LookupApplicationResult struct {
	// The ID of the EMR Serverless Application.
	ApplicationId *string `pulumi:"applicationId"`
	// The Amazon Resource Name (ARN) of the EMR Serverless Application.
	Arn *string `pulumi:"arn"`
	// Configuration for Auto Start of Application.
	AutoStartConfiguration *ApplicationAutoStartConfiguration `pulumi:"autoStartConfiguration"`
	// Configuration for Auto Stop of Application.
	AutoStopConfiguration *ApplicationAutoStopConfiguration `pulumi:"autoStopConfiguration"`
	// Initial capacity initialized when an Application is started.
	InitialCapacity []ApplicationInitialCapacityConfigKeyValuePair `pulumi:"initialCapacity"`
	// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
	MaximumCapacity *ApplicationMaximumAllowedResources `pulumi:"maximumCapacity"`
	// Network Configuration for customer VPC connectivity.
	NetworkConfiguration *ApplicationNetworkConfiguration `pulumi:"networkConfiguration"`
	// Tag map with key and value
	Tags []ApplicationTag `pulumi:"tags"`
}

func LookupApplicationOutput(ctx *pulumi.Context, args LookupApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationResult, error) {
			args := v.(LookupApplicationArgs)
			r, err := LookupApplication(ctx, &args, opts...)
			var s LookupApplicationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationResultOutput)
}

type LookupApplicationOutputArgs struct {
	// The ID of the EMR Serverless Application.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
}

func (LookupApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationArgs)(nil)).Elem()
}

type LookupApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationResult)(nil)).Elem()
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutput() LookupApplicationResultOutput {
	return o
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutputWithContext(ctx context.Context) LookupApplicationResultOutput {
	return o
}

// The ID of the EMR Serverless Application.
func (o LookupApplicationResultOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the EMR Serverless Application.
func (o LookupApplicationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Configuration for Auto Start of Application.
func (o LookupApplicationResultOutput) AutoStartConfiguration() ApplicationAutoStartConfigurationPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *ApplicationAutoStartConfiguration { return v.AutoStartConfiguration }).(ApplicationAutoStartConfigurationPtrOutput)
}

// Configuration for Auto Stop of Application.
func (o LookupApplicationResultOutput) AutoStopConfiguration() ApplicationAutoStopConfigurationPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *ApplicationAutoStopConfiguration { return v.AutoStopConfiguration }).(ApplicationAutoStopConfigurationPtrOutput)
}

// Initial capacity initialized when an Application is started.
func (o LookupApplicationResultOutput) InitialCapacity() ApplicationInitialCapacityConfigKeyValuePairArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []ApplicationInitialCapacityConfigKeyValuePair {
		return v.InitialCapacity
	}).(ApplicationInitialCapacityConfigKeyValuePairArrayOutput)
}

// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
func (o LookupApplicationResultOutput) MaximumCapacity() ApplicationMaximumAllowedResourcesPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *ApplicationMaximumAllowedResources { return v.MaximumCapacity }).(ApplicationMaximumAllowedResourcesPtrOutput)
}

// Network Configuration for customer VPC connectivity.
func (o LookupApplicationResultOutput) NetworkConfiguration() ApplicationNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *ApplicationNetworkConfiguration { return v.NetworkConfiguration }).(ApplicationNetworkConfigurationPtrOutput)
}

// Tag map with key and value
func (o LookupApplicationResultOutput) Tags() ApplicationTagArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []ApplicationTag { return v.Tags }).(ApplicationTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationResultOutput{})
}
