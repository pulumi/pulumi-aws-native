// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrserverless

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EMRServerless::Application Type
type Application struct {
	pulumi.CustomResourceState

	// The ID of the EMR Serverless Application.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The Amazon Resource Name (ARN) of the EMR Serverless Application.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Configuration for Auto Start of Application.
	AutoStartConfiguration ApplicationAutoStartConfigurationPtrOutput `pulumi:"autoStartConfiguration"`
	// Configuration for Auto Stop of Application.
	AutoStopConfiguration ApplicationAutoStopConfigurationPtrOutput `pulumi:"autoStopConfiguration"`
	// Initial capacity initialized when an Application is started.
	InitialCapacity ApplicationInitialCapacityConfigKeyValuePairArrayOutput `pulumi:"initialCapacity"`
	// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
	MaximumCapacity ApplicationMaximumAllowedResourcesPtrOutput `pulumi:"maximumCapacity"`
	// User friendly Application name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Network Configuration for customer VPC connectivity.
	NetworkConfiguration ApplicationNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// EMR release label.
	ReleaseLabel pulumi.StringOutput `pulumi:"releaseLabel"`
	// Tag map with key and value
	Tags ApplicationTagArrayOutput `pulumi:"tags"`
	// The type of the application
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReleaseLabel == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseLabel'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Application
	err := ctx.RegisterResource("aws-native:emrserverless:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:emrserverless:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Configuration for Auto Start of Application.
	AutoStartConfiguration *ApplicationAutoStartConfiguration `pulumi:"autoStartConfiguration"`
	// Configuration for Auto Stop of Application.
	AutoStopConfiguration *ApplicationAutoStopConfiguration `pulumi:"autoStopConfiguration"`
	// Initial capacity initialized when an Application is started.
	InitialCapacity []ApplicationInitialCapacityConfigKeyValuePair `pulumi:"initialCapacity"`
	// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
	MaximumCapacity *ApplicationMaximumAllowedResources `pulumi:"maximumCapacity"`
	// User friendly Application name.
	Name *string `pulumi:"name"`
	// Network Configuration for customer VPC connectivity.
	NetworkConfiguration *ApplicationNetworkConfiguration `pulumi:"networkConfiguration"`
	// EMR release label.
	ReleaseLabel string `pulumi:"releaseLabel"`
	// Tag map with key and value
	Tags []ApplicationTag `pulumi:"tags"`
	// The type of the application
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Configuration for Auto Start of Application.
	AutoStartConfiguration ApplicationAutoStartConfigurationPtrInput
	// Configuration for Auto Stop of Application.
	AutoStopConfiguration ApplicationAutoStopConfigurationPtrInput
	// Initial capacity initialized when an Application is started.
	InitialCapacity ApplicationInitialCapacityConfigKeyValuePairArrayInput
	// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
	MaximumCapacity ApplicationMaximumAllowedResourcesPtrInput
	// User friendly Application name.
	Name pulumi.StringPtrInput
	// Network Configuration for customer VPC connectivity.
	NetworkConfiguration ApplicationNetworkConfigurationPtrInput
	// EMR release label.
	ReleaseLabel pulumi.StringInput
	// Tag map with key and value
	Tags ApplicationTagArrayInput
	// The type of the application
	Type pulumi.StringInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The ID of the EMR Serverless Application.
func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the EMR Serverless Application.
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Configuration for Auto Start of Application.
func (o ApplicationOutput) AutoStartConfiguration() ApplicationAutoStartConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationAutoStartConfigurationPtrOutput { return v.AutoStartConfiguration }).(ApplicationAutoStartConfigurationPtrOutput)
}

// Configuration for Auto Stop of Application.
func (o ApplicationOutput) AutoStopConfiguration() ApplicationAutoStopConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationAutoStopConfigurationPtrOutput { return v.AutoStopConfiguration }).(ApplicationAutoStopConfigurationPtrOutput)
}

// Initial capacity initialized when an Application is started.
func (o ApplicationOutput) InitialCapacity() ApplicationInitialCapacityConfigKeyValuePairArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationInitialCapacityConfigKeyValuePairArrayOutput { return v.InitialCapacity }).(ApplicationInitialCapacityConfigKeyValuePairArrayOutput)
}

// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
func (o ApplicationOutput) MaximumCapacity() ApplicationMaximumAllowedResourcesPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationMaximumAllowedResourcesPtrOutput { return v.MaximumCapacity }).(ApplicationMaximumAllowedResourcesPtrOutput)
}

// User friendly Application name.
func (o ApplicationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Network Configuration for customer VPC connectivity.
func (o ApplicationOutput) NetworkConfiguration() ApplicationNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationNetworkConfigurationPtrOutput { return v.NetworkConfiguration }).(ApplicationNetworkConfigurationPtrOutput)
}

// EMR release label.
func (o ApplicationOutput) ReleaseLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ReleaseLabel }).(pulumi.StringOutput)
}

// Tag map with key and value
func (o ApplicationOutput) Tags() ApplicationTagArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationTagArrayOutput { return v.Tags }).(ApplicationTagArrayOutput)
}

// The type of the application
func (o ApplicationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
