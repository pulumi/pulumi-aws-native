// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emrserverless

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EMRServerless::Application Type
type Application struct {
	pulumi.CustomResourceState

	// The ID of the EMR Serverless Application.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The CPU architecture of an application.
	Architecture ApplicationArchitecturePtrOutput `pulumi:"architecture"`
	// The Amazon Resource Name (ARN) of the EMR Serverless Application.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Configuration for Auto Start of Application.
	AutoStartConfiguration ApplicationAutoStartConfigurationPtrOutput `pulumi:"autoStartConfiguration"`
	// Configuration for Auto Stop of Application.
	AutoStopConfiguration ApplicationAutoStopConfigurationPtrOutput `pulumi:"autoStopConfiguration"`
	// The image configuration applied to all worker types.
	ImageConfiguration ApplicationImageConfigurationInputPtrOutput `pulumi:"imageConfiguration"`
	// Initial capacity initialized when an Application is started.
	InitialCapacity ApplicationInitialCapacityConfigKeyValuePairArrayOutput `pulumi:"initialCapacity"`
	// The interactive configuration object that enables the interactive use cases for an application.
	InteractiveConfiguration ApplicationInteractiveConfigurationPtrOutput `pulumi:"interactiveConfiguration"`
	// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
	MaximumCapacity ApplicationMaximumAllowedResourcesPtrOutput `pulumi:"maximumCapacity"`
	// A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.
	MonitoringConfiguration ApplicationMonitoringConfigurationPtrOutput `pulumi:"monitoringConfiguration"`
	// User friendly Application name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Network Configuration for customer VPC connectivity.
	NetworkConfiguration ApplicationNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// EMR release label.
	ReleaseLabel pulumi.StringOutput `pulumi:"releaseLabel"`
	// The [Configuration](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_Configuration.html) specifications of an application. Each configuration consists of a classification and properties. You use this parameter when creating or updating an application. To see the runtimeConfiguration object of an application, run the [GetApplication](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_GetApplication.html) API operation.
	RuntimeConfiguration ApplicationConfigurationObjectArrayOutput `pulumi:"runtimeConfiguration"`
	// The scheduler configuration for batch and streaming jobs running on this application. Supported with release labels emr-7.0.0 and above.
	SchedulerConfiguration ApplicationSchedulerConfigurationPtrOutput `pulumi:"schedulerConfiguration"`
	// Tag map with key and value
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of the application
	Type pulumi.StringOutput `pulumi:"type"`
	// The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type, or in imageConfiguration for all worker types.
	WorkerTypeSpecifications ApplicationWorkerTypeSpecificationInputMapOutput `pulumi:"workerTypeSpecifications"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReleaseLabel == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseLabel'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:emrserverless:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:emrserverless:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The CPU architecture of an application.
	Architecture *ApplicationArchitecture `pulumi:"architecture"`
	// Configuration for Auto Start of Application.
	AutoStartConfiguration *ApplicationAutoStartConfiguration `pulumi:"autoStartConfiguration"`
	// Configuration for Auto Stop of Application.
	AutoStopConfiguration *ApplicationAutoStopConfiguration `pulumi:"autoStopConfiguration"`
	// The image configuration applied to all worker types.
	ImageConfiguration *ApplicationImageConfigurationInput `pulumi:"imageConfiguration"`
	// Initial capacity initialized when an Application is started.
	InitialCapacity []ApplicationInitialCapacityConfigKeyValuePair `pulumi:"initialCapacity"`
	// The interactive configuration object that enables the interactive use cases for an application.
	InteractiveConfiguration *ApplicationInteractiveConfiguration `pulumi:"interactiveConfiguration"`
	// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
	MaximumCapacity *ApplicationMaximumAllowedResources `pulumi:"maximumCapacity"`
	// A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.
	MonitoringConfiguration *ApplicationMonitoringConfiguration `pulumi:"monitoringConfiguration"`
	// User friendly Application name.
	Name *string `pulumi:"name"`
	// Network Configuration for customer VPC connectivity.
	NetworkConfiguration *ApplicationNetworkConfiguration `pulumi:"networkConfiguration"`
	// EMR release label.
	ReleaseLabel string `pulumi:"releaseLabel"`
	// The [Configuration](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_Configuration.html) specifications of an application. Each configuration consists of a classification and properties. You use this parameter when creating or updating an application. To see the runtimeConfiguration object of an application, run the [GetApplication](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_GetApplication.html) API operation.
	RuntimeConfiguration []ApplicationConfigurationObject `pulumi:"runtimeConfiguration"`
	// The scheduler configuration for batch and streaming jobs running on this application. Supported with release labels emr-7.0.0 and above.
	SchedulerConfiguration *ApplicationSchedulerConfiguration `pulumi:"schedulerConfiguration"`
	// Tag map with key and value
	Tags []aws.Tag `pulumi:"tags"`
	// The type of the application
	Type string `pulumi:"type"`
	// The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type, or in imageConfiguration for all worker types.
	WorkerTypeSpecifications map[string]ApplicationWorkerTypeSpecificationInput `pulumi:"workerTypeSpecifications"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The CPU architecture of an application.
	Architecture ApplicationArchitecturePtrInput
	// Configuration for Auto Start of Application.
	AutoStartConfiguration ApplicationAutoStartConfigurationPtrInput
	// Configuration for Auto Stop of Application.
	AutoStopConfiguration ApplicationAutoStopConfigurationPtrInput
	// The image configuration applied to all worker types.
	ImageConfiguration ApplicationImageConfigurationInputPtrInput
	// Initial capacity initialized when an Application is started.
	InitialCapacity ApplicationInitialCapacityConfigKeyValuePairArrayInput
	// The interactive configuration object that enables the interactive use cases for an application.
	InteractiveConfiguration ApplicationInteractiveConfigurationPtrInput
	// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
	MaximumCapacity ApplicationMaximumAllowedResourcesPtrInput
	// A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.
	MonitoringConfiguration ApplicationMonitoringConfigurationPtrInput
	// User friendly Application name.
	Name pulumi.StringPtrInput
	// Network Configuration for customer VPC connectivity.
	NetworkConfiguration ApplicationNetworkConfigurationPtrInput
	// EMR release label.
	ReleaseLabel pulumi.StringInput
	// The [Configuration](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_Configuration.html) specifications of an application. Each configuration consists of a classification and properties. You use this parameter when creating or updating an application. To see the runtimeConfiguration object of an application, run the [GetApplication](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_GetApplication.html) API operation.
	RuntimeConfiguration ApplicationConfigurationObjectArrayInput
	// The scheduler configuration for batch and streaming jobs running on this application. Supported with release labels emr-7.0.0 and above.
	SchedulerConfiguration ApplicationSchedulerConfigurationPtrInput
	// Tag map with key and value
	Tags aws.TagArrayInput
	// The type of the application
	Type pulumi.StringInput
	// The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type, or in imageConfiguration for all worker types.
	WorkerTypeSpecifications ApplicationWorkerTypeSpecificationInputMapInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The ID of the EMR Serverless Application.
func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The CPU architecture of an application.
func (o ApplicationOutput) Architecture() ApplicationArchitecturePtrOutput {
	return o.ApplyT(func(v *Application) ApplicationArchitecturePtrOutput { return v.Architecture }).(ApplicationArchitecturePtrOutput)
}

// The Amazon Resource Name (ARN) of the EMR Serverless Application.
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Configuration for Auto Start of Application.
func (o ApplicationOutput) AutoStartConfiguration() ApplicationAutoStartConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationAutoStartConfigurationPtrOutput { return v.AutoStartConfiguration }).(ApplicationAutoStartConfigurationPtrOutput)
}

// Configuration for Auto Stop of Application.
func (o ApplicationOutput) AutoStopConfiguration() ApplicationAutoStopConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationAutoStopConfigurationPtrOutput { return v.AutoStopConfiguration }).(ApplicationAutoStopConfigurationPtrOutput)
}

// The image configuration applied to all worker types.
func (o ApplicationOutput) ImageConfiguration() ApplicationImageConfigurationInputPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationImageConfigurationInputPtrOutput { return v.ImageConfiguration }).(ApplicationImageConfigurationInputPtrOutput)
}

// Initial capacity initialized when an Application is started.
func (o ApplicationOutput) InitialCapacity() ApplicationInitialCapacityConfigKeyValuePairArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationInitialCapacityConfigKeyValuePairArrayOutput { return v.InitialCapacity }).(ApplicationInitialCapacityConfigKeyValuePairArrayOutput)
}

// The interactive configuration object that enables the interactive use cases for an application.
func (o ApplicationOutput) InteractiveConfiguration() ApplicationInteractiveConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationInteractiveConfigurationPtrOutput { return v.InteractiveConfiguration }).(ApplicationInteractiveConfigurationPtrOutput)
}

// Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
func (o ApplicationOutput) MaximumCapacity() ApplicationMaximumAllowedResourcesPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationMaximumAllowedResourcesPtrOutput { return v.MaximumCapacity }).(ApplicationMaximumAllowedResourcesPtrOutput)
}

// A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.
func (o ApplicationOutput) MonitoringConfiguration() ApplicationMonitoringConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationMonitoringConfigurationPtrOutput { return v.MonitoringConfiguration }).(ApplicationMonitoringConfigurationPtrOutput)
}

// User friendly Application name.
func (o ApplicationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Network Configuration for customer VPC connectivity.
func (o ApplicationOutput) NetworkConfiguration() ApplicationNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationNetworkConfigurationPtrOutput { return v.NetworkConfiguration }).(ApplicationNetworkConfigurationPtrOutput)
}

// EMR release label.
func (o ApplicationOutput) ReleaseLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ReleaseLabel }).(pulumi.StringOutput)
}

// The [Configuration](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_Configuration.html) specifications of an application. Each configuration consists of a classification and properties. You use this parameter when creating or updating an application. To see the runtimeConfiguration object of an application, run the [GetApplication](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_GetApplication.html) API operation.
func (o ApplicationOutput) RuntimeConfiguration() ApplicationConfigurationObjectArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationConfigurationObjectArrayOutput { return v.RuntimeConfiguration }).(ApplicationConfigurationObjectArrayOutput)
}

// The scheduler configuration for batch and streaming jobs running on this application. Supported with release labels emr-7.0.0 and above.
func (o ApplicationOutput) SchedulerConfiguration() ApplicationSchedulerConfigurationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationSchedulerConfigurationPtrOutput { return v.SchedulerConfiguration }).(ApplicationSchedulerConfigurationPtrOutput)
}

// Tag map with key and value
func (o ApplicationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Application) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of the application
func (o ApplicationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type, or in imageConfiguration for all worker types.
func (o ApplicationOutput) WorkerTypeSpecifications() ApplicationWorkerTypeSpecificationInputMapOutput {
	return o.ApplyT(func(v *Application) ApplicationWorkerTypeSpecificationInputMapOutput {
		return v.WorkerTypeSpecifications
	}).(ApplicationWorkerTypeSpecificationInputMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
