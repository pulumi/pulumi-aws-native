// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcaconnectorad

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a template that defines certificate configurations, both for issuance and client handling
type Template struct {
	pulumi.CustomResourceState

	ConnectorArn                  pulumi.StringOutput   `pulumi:"connectorArn"`
	Definition                    pulumi.AnyOutput      `pulumi:"definition"`
	Name                          pulumi.StringOutput   `pulumi:"name"`
	ReenrollAllCertificateHolders pulumi.BoolPtrOutput  `pulumi:"reenrollAllCertificateHolders"`
	Tags                          TemplateTagsPtrOutput `pulumi:"tags"`
	TemplateArn                   pulumi.StringOutput   `pulumi:"templateArn"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorArn == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorArn'")
	}
	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"connectorArn",
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("aws-native:pcaconnectorad:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("aws-native:pcaconnectorad:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
}

type TemplateState struct {
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	ConnectorArn                  string        `pulumi:"connectorArn"`
	Definition                    interface{}   `pulumi:"definition"`
	Name                          *string       `pulumi:"name"`
	ReenrollAllCertificateHolders *bool         `pulumi:"reenrollAllCertificateHolders"`
	Tags                          *TemplateTags `pulumi:"tags"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	ConnectorArn                  pulumi.StringInput
	Definition                    pulumi.Input
	Name                          pulumi.StringPtrInput
	ReenrollAllCertificateHolders pulumi.BoolPtrInput
	Tags                          TemplateTagsPtrInput
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

func (o TemplateOutput) ConnectorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.ConnectorArn }).(pulumi.StringOutput)
}

func (o TemplateOutput) Definition() pulumi.AnyOutput {
	return o.ApplyT(func(v *Template) pulumi.AnyOutput { return v.Definition }).(pulumi.AnyOutput)
}

func (o TemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TemplateOutput) ReenrollAllCertificateHolders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.ReenrollAllCertificateHolders }).(pulumi.BoolPtrOutput)
}

func (o TemplateOutput) Tags() TemplateTagsPtrOutput {
	return o.ApplyT(func(v *Template) TemplateTagsPtrOutput { return v.Tags }).(TemplateTagsPtrOutput)
}

func (o TemplateOutput) TemplateArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.TemplateArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterOutputType(TemplateOutput{})
}
