// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcaconnectorad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a template that defines certificate configurations, both for issuance and client handling
func LookupTemplate(ctx *pulumi.Context, args *LookupTemplateArgs, opts ...pulumi.InvokeOption) (*LookupTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTemplateResult
	err := ctx.Invoke("aws-native:pcaconnectorad:getTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTemplateArgs struct {
	// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html) .
	TemplateArn string `pulumi:"templateArn"`
}

type LookupTemplateResult struct {
	// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
	Definition interface{} `pulumi:"definition"`
	// Metadata assigned to a template consisting of a key-value pair.
	Tags map[string]string `pulumi:"tags"`
	// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html) .
	TemplateArn *string `pulumi:"templateArn"`
}

func LookupTemplateOutput(ctx *pulumi.Context, args LookupTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTemplateResultOutput, error) {
			args := v.(LookupTemplateArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTemplateResult
			secret, err := ctx.InvokePackageRaw("aws-native:pcaconnectorad:getTemplate", args, &rv, "", opts...)
			if err != nil {
				return LookupTemplateResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTemplateResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTemplateResultOutput), nil
			}
			return output, nil
		}).(LookupTemplateResultOutput)
}

type LookupTemplateOutputArgs struct {
	// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html) .
	TemplateArn pulumi.StringInput `pulumi:"templateArn"`
}

func (LookupTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateArgs)(nil)).Elem()
}

type LookupTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateResult)(nil)).Elem()
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutput() LookupTemplateResultOutput {
	return o
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutputWithContext(ctx context.Context) LookupTemplateResultOutput {
	return o
}

// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
func (o LookupTemplateResultOutput) Definition() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupTemplateResult) interface{} { return v.Definition }).(pulumi.AnyOutput)
}

// Metadata assigned to a template consisting of a key-value pair.
func (o LookupTemplateResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupTemplateResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html) .
func (o LookupTemplateResultOutput) TemplateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTemplateResult) *string { return v.TemplateArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTemplateResultOutput{})
}
