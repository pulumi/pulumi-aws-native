// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcaconnectorad

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::PCAConnectorAD::ServicePrincipalName Resource Type
type ServicePrincipalName struct {
	pulumi.CustomResourceState

	ConnectorArn             pulumi.StringPtrOutput `pulumi:"connectorArn"`
	DirectoryRegistrationArn pulumi.StringPtrOutput `pulumi:"directoryRegistrationArn"`
}

// NewServicePrincipalName registers a new resource with the given unique name, arguments, and options.
func NewServicePrincipalName(ctx *pulumi.Context,
	name string, args *ServicePrincipalNameArgs, opts ...pulumi.ResourceOption) (*ServicePrincipalName, error) {
	if args == nil {
		args = &ServicePrincipalNameArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"connectorArn",
		"directoryRegistrationArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicePrincipalName
	err := ctx.RegisterResource("aws-native:pcaconnectorad:ServicePrincipalName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePrincipalName gets an existing ServicePrincipalName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePrincipalName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePrincipalNameState, opts ...pulumi.ResourceOption) (*ServicePrincipalName, error) {
	var resource ServicePrincipalName
	err := ctx.ReadResource("aws-native:pcaconnectorad:ServicePrincipalName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePrincipalName resources.
type servicePrincipalNameState struct {
}

type ServicePrincipalNameState struct {
}

func (ServicePrincipalNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalNameState)(nil)).Elem()
}

type servicePrincipalNameArgs struct {
	ConnectorArn             *string `pulumi:"connectorArn"`
	DirectoryRegistrationArn *string `pulumi:"directoryRegistrationArn"`
}

// The set of arguments for constructing a ServicePrincipalName resource.
type ServicePrincipalNameArgs struct {
	ConnectorArn             pulumi.StringPtrInput
	DirectoryRegistrationArn pulumi.StringPtrInput
}

func (ServicePrincipalNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalNameArgs)(nil)).Elem()
}

type ServicePrincipalNameInput interface {
	pulumi.Input

	ToServicePrincipalNameOutput() ServicePrincipalNameOutput
	ToServicePrincipalNameOutputWithContext(ctx context.Context) ServicePrincipalNameOutput
}

func (*ServicePrincipalName) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalName)(nil)).Elem()
}

func (i *ServicePrincipalName) ToServicePrincipalNameOutput() ServicePrincipalNameOutput {
	return i.ToServicePrincipalNameOutputWithContext(context.Background())
}

func (i *ServicePrincipalName) ToServicePrincipalNameOutputWithContext(ctx context.Context) ServicePrincipalNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalNameOutput)
}

func (i *ServicePrincipalName) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalName] {
	return pulumix.Output[*ServicePrincipalName]{
		OutputState: i.ToServicePrincipalNameOutputWithContext(ctx).OutputState,
	}
}

type ServicePrincipalNameOutput struct{ *pulumi.OutputState }

func (ServicePrincipalNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalName)(nil)).Elem()
}

func (o ServicePrincipalNameOutput) ToServicePrincipalNameOutput() ServicePrincipalNameOutput {
	return o
}

func (o ServicePrincipalNameOutput) ToServicePrincipalNameOutputWithContext(ctx context.Context) ServicePrincipalNameOutput {
	return o
}

func (o ServicePrincipalNameOutput) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalName] {
	return pulumix.Output[*ServicePrincipalName]{
		OutputState: o.OutputState,
	}
}

func (o ServicePrincipalNameOutput) ConnectorArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalName) pulumi.StringPtrOutput { return v.ConnectorArn }).(pulumi.StringPtrOutput)
}

func (o ServicePrincipalNameOutput) DirectoryRegistrationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalName) pulumi.StringPtrOutput { return v.DirectoryRegistrationArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalNameInput)(nil)).Elem(), &ServicePrincipalName{})
	pulumi.RegisterOutputType(ServicePrincipalNameOutput{})
}
