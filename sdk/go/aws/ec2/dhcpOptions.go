// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::DHCPOptions
type DhcpOptions struct {
	pulumi.CustomResourceState

	DhcpOptionsId pulumi.StringOutput `pulumi:"dhcpOptionsId"`
	// This value is used to complete unqualified DNS hostnames.
	DomainName pulumi.StringPtrOutput `pulumi:"domainName"`
	// The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
	DomainNameServers pulumi.StringArrayOutput `pulumi:"domainNameServers"`
	// The IPv4 addresses of up to four NetBIOS name servers.
	NetbiosNameServers pulumi.StringArrayOutput `pulumi:"netbiosNameServers"`
	// The NetBIOS node type (1, 2, 4, or 8).
	NetbiosNodeType pulumi.IntPtrOutput `pulumi:"netbiosNodeType"`
	// The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
	NtpServers pulumi.StringArrayOutput `pulumi:"ntpServers"`
	// Any tags assigned to the DHCP options set.
	Tags DhcpOptionsTagArrayOutput `pulumi:"tags"`
}

// NewDhcpOptions registers a new resource with the given unique name, arguments, and options.
func NewDhcpOptions(ctx *pulumi.Context,
	name string, args *DhcpOptionsArgs, opts ...pulumi.ResourceOption) (*DhcpOptions, error) {
	if args == nil {
		args = &DhcpOptionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DhcpOptions
	err := ctx.RegisterResource("aws-native:ec2:DhcpOptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcpOptions gets an existing DhcpOptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcpOptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpOptionsState, opts ...pulumi.ResourceOption) (*DhcpOptions, error) {
	var resource DhcpOptions
	err := ctx.ReadResource("aws-native:ec2:DhcpOptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DhcpOptions resources.
type dhcpOptionsState struct {
}

type DhcpOptionsState struct {
}

func (DhcpOptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpOptionsState)(nil)).Elem()
}

type dhcpOptionsArgs struct {
	// This value is used to complete unqualified DNS hostnames.
	DomainName *string `pulumi:"domainName"`
	// The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
	DomainNameServers []string `pulumi:"domainNameServers"`
	// The IPv4 addresses of up to four NetBIOS name servers.
	NetbiosNameServers []string `pulumi:"netbiosNameServers"`
	// The NetBIOS node type (1, 2, 4, or 8).
	NetbiosNodeType *int `pulumi:"netbiosNodeType"`
	// The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
	NtpServers []string `pulumi:"ntpServers"`
	// Any tags assigned to the DHCP options set.
	Tags []DhcpOptionsTag `pulumi:"tags"`
}

// The set of arguments for constructing a DhcpOptions resource.
type DhcpOptionsArgs struct {
	// This value is used to complete unqualified DNS hostnames.
	DomainName pulumi.StringPtrInput
	// The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
	DomainNameServers pulumi.StringArrayInput
	// The IPv4 addresses of up to four NetBIOS name servers.
	NetbiosNameServers pulumi.StringArrayInput
	// The NetBIOS node type (1, 2, 4, or 8).
	NetbiosNodeType pulumi.IntPtrInput
	// The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
	NtpServers pulumi.StringArrayInput
	// Any tags assigned to the DHCP options set.
	Tags DhcpOptionsTagArrayInput
}

func (DhcpOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpOptionsArgs)(nil)).Elem()
}

type DhcpOptionsInput interface {
	pulumi.Input

	ToDhcpOptionsOutput() DhcpOptionsOutput
	ToDhcpOptionsOutputWithContext(ctx context.Context) DhcpOptionsOutput
}

func (*DhcpOptions) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpOptions)(nil)).Elem()
}

func (i *DhcpOptions) ToDhcpOptionsOutput() DhcpOptionsOutput {
	return i.ToDhcpOptionsOutputWithContext(context.Background())
}

func (i *DhcpOptions) ToDhcpOptionsOutputWithContext(ctx context.Context) DhcpOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpOptionsOutput)
}

type DhcpOptionsOutput struct{ *pulumi.OutputState }

func (DhcpOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpOptions)(nil)).Elem()
}

func (o DhcpOptionsOutput) ToDhcpOptionsOutput() DhcpOptionsOutput {
	return o
}

func (o DhcpOptionsOutput) ToDhcpOptionsOutputWithContext(ctx context.Context) DhcpOptionsOutput {
	return o
}

func (o DhcpOptionsOutput) DhcpOptionsId() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpOptions) pulumi.StringOutput { return v.DhcpOptionsId }).(pulumi.StringOutput)
}

// This value is used to complete unqualified DNS hostnames.
func (o DhcpOptionsOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpOptions) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
func (o DhcpOptionsOutput) DomainNameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DhcpOptions) pulumi.StringArrayOutput { return v.DomainNameServers }).(pulumi.StringArrayOutput)
}

// The IPv4 addresses of up to four NetBIOS name servers.
func (o DhcpOptionsOutput) NetbiosNameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DhcpOptions) pulumi.StringArrayOutput { return v.NetbiosNameServers }).(pulumi.StringArrayOutput)
}

// The NetBIOS node type (1, 2, 4, or 8).
func (o DhcpOptionsOutput) NetbiosNodeType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DhcpOptions) pulumi.IntPtrOutput { return v.NetbiosNodeType }).(pulumi.IntPtrOutput)
}

// The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
func (o DhcpOptionsOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DhcpOptions) pulumi.StringArrayOutput { return v.NtpServers }).(pulumi.StringArrayOutput)
}

// Any tags assigned to the DHCP options set.
func (o DhcpOptionsOutput) Tags() DhcpOptionsTagArrayOutput {
	return o.ApplyT(func(v *DhcpOptions) DhcpOptionsTagArrayOutput { return v.Tags }).(DhcpOptionsTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpOptionsInput)(nil)).Elem(), &DhcpOptions{})
	pulumi.RegisterOutputType(DhcpOptionsOutput{})
}
