// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VPC Route Server
type RouteServer struct {
	pulumi.CustomResourceState

	// The Amazon-side ASN of the Route Server.
	AmazonSideAsn pulumi.IntOutput `pulumi:"amazonSideAsn"`
	// The Amazon Resource Name (ARN) of the Route Server.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the Route Server.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Whether to enable persistent routes
	PersistRoutes RouteServerPersistRoutesPtrOutput `pulumi:"persistRoutes"`
	// The duration of persistent routes in minutes
	PersistRoutesDuration pulumi.IntPtrOutput `pulumi:"persistRoutesDuration"`
	// Whether to enable SNS notifications
	SnsNotificationsEnabled pulumi.BoolPtrOutput `pulumi:"snsNotificationsEnabled"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewRouteServer registers a new resource with the given unique name, arguments, and options.
func NewRouteServer(ctx *pulumi.Context,
	name string, args *RouteServerArgs, opts ...pulumi.ResourceOption) (*RouteServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AmazonSideAsn == nil {
		return nil, errors.New("invalid value for required argument 'AmazonSideAsn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"amazonSideAsn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteServer
	err := ctx.RegisterResource("aws-native:ec2:RouteServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteServer gets an existing RouteServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteServerState, opts ...pulumi.ResourceOption) (*RouteServer, error) {
	var resource RouteServer
	err := ctx.ReadResource("aws-native:ec2:RouteServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteServer resources.
type routeServerState struct {
}

type RouteServerState struct {
}

func (RouteServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerState)(nil)).Elem()
}

type routeServerArgs struct {
	// The Amazon-side ASN of the Route Server.
	AmazonSideAsn int `pulumi:"amazonSideAsn"`
	// Whether to enable persistent routes
	PersistRoutes *RouteServerPersistRoutes `pulumi:"persistRoutes"`
	// The duration of persistent routes in minutes
	PersistRoutesDuration *int `pulumi:"persistRoutesDuration"`
	// Whether to enable SNS notifications
	SnsNotificationsEnabled *bool `pulumi:"snsNotificationsEnabled"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a RouteServer resource.
type RouteServerArgs struct {
	// The Amazon-side ASN of the Route Server.
	AmazonSideAsn pulumi.IntInput
	// Whether to enable persistent routes
	PersistRoutes RouteServerPersistRoutesPtrInput
	// The duration of persistent routes in minutes
	PersistRoutesDuration pulumi.IntPtrInput
	// Whether to enable SNS notifications
	SnsNotificationsEnabled pulumi.BoolPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (RouteServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerArgs)(nil)).Elem()
}

type RouteServerInput interface {
	pulumi.Input

	ToRouteServerOutput() RouteServerOutput
	ToRouteServerOutputWithContext(ctx context.Context) RouteServerOutput
}

func (*RouteServer) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServer)(nil)).Elem()
}

func (i *RouteServer) ToRouteServerOutput() RouteServerOutput {
	return i.ToRouteServerOutputWithContext(context.Background())
}

func (i *RouteServer) ToRouteServerOutputWithContext(ctx context.Context) RouteServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerOutput)
}

type RouteServerOutput struct{ *pulumi.OutputState }

func (RouteServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServer)(nil)).Elem()
}

func (o RouteServerOutput) ToRouteServerOutput() RouteServerOutput {
	return o
}

func (o RouteServerOutput) ToRouteServerOutputWithContext(ctx context.Context) RouteServerOutput {
	return o
}

// The Amazon-side ASN of the Route Server.
func (o RouteServerOutput) AmazonSideAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.IntOutput { return v.AmazonSideAsn }).(pulumi.IntOutput)
}

// The Amazon Resource Name (ARN) of the Route Server.
func (o RouteServerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the Route Server.
func (o RouteServerOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Whether to enable persistent routes
func (o RouteServerOutput) PersistRoutes() RouteServerPersistRoutesPtrOutput {
	return o.ApplyT(func(v *RouteServer) RouteServerPersistRoutesPtrOutput { return v.PersistRoutes }).(RouteServerPersistRoutesPtrOutput)
}

// The duration of persistent routes in minutes
func (o RouteServerOutput) PersistRoutesDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.IntPtrOutput { return v.PersistRoutesDuration }).(pulumi.IntPtrOutput)
}

// Whether to enable SNS notifications
func (o RouteServerOutput) SnsNotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouteServer) pulumi.BoolPtrOutput { return v.SnsNotificationsEnabled }).(pulumi.BoolPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o RouteServerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *RouteServer) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerInput)(nil)).Elem(), &RouteServer{})
	pulumi.RegisterOutputType(RouteServerOutput{})
}
