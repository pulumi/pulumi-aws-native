// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EC2::NetworkInsightsAnalysis
func LookupNetworkInsightsAnalysis(ctx *pulumi.Context, args *LookupNetworkInsightsAnalysisArgs, opts ...pulumi.InvokeOption) (*LookupNetworkInsightsAnalysisResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkInsightsAnalysisResult
	err := ctx.Invoke("aws-native:ec2:getNetworkInsightsAnalysis", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNetworkInsightsAnalysisArgs struct {
	// The ID of the network insights analysis.
	NetworkInsightsAnalysisId string `pulumi:"networkInsightsAnalysisId"`
}

type LookupNetworkInsightsAnalysisResult struct {
	// The member accounts that contain resources that the path can traverse.
	AdditionalAccounts []string `pulumi:"additionalAccounts"`
	// Potential intermediate components.
	AlternatePathHints []NetworkInsightsAnalysisAlternatePathHint `pulumi:"alternatePathHints"`
	// The explanations. For more information, see [Reachability Analyzer explanation codes](https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html) .
	Explanations []NetworkInsightsAnalysisExplanation `pulumi:"explanations"`
	// The components in the path from source to destination.
	ForwardPathComponents []NetworkInsightsAnalysisPathComponent `pulumi:"forwardPathComponents"`
	// The Amazon Resource Name (ARN) of the network insights analysis.
	NetworkInsightsAnalysisArn *string `pulumi:"networkInsightsAnalysisArn"`
	// The ID of the network insights analysis.
	NetworkInsightsAnalysisId *string `pulumi:"networkInsightsAnalysisId"`
	// Indicates whether the destination is reachable from the source.
	NetworkPathFound *bool `pulumi:"networkPathFound"`
	// The components in the path from destination to source.
	ReturnPathComponents []NetworkInsightsAnalysisPathComponent `pulumi:"returnPathComponents"`
	// The time the analysis started.
	StartDate *string `pulumi:"startDate"`
	// The status of the network insights analysis.
	Status *NetworkInsightsAnalysisStatus `pulumi:"status"`
	// The status message, if the status is `failed` .
	StatusMessage *string `pulumi:"statusMessage"`
	// The IDs of potential intermediate accounts.
	SuggestedAccounts []string `pulumi:"suggestedAccounts"`
	// The tags to apply.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupNetworkInsightsAnalysisOutput(ctx *pulumi.Context, args LookupNetworkInsightsAnalysisOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkInsightsAnalysisResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNetworkInsightsAnalysisResultOutput, error) {
			args := v.(LookupNetworkInsightsAnalysisArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ec2:getNetworkInsightsAnalysis", args, LookupNetworkInsightsAnalysisResultOutput{}, options).(LookupNetworkInsightsAnalysisResultOutput), nil
		}).(LookupNetworkInsightsAnalysisResultOutput)
}

type LookupNetworkInsightsAnalysisOutputArgs struct {
	// The ID of the network insights analysis.
	NetworkInsightsAnalysisId pulumi.StringInput `pulumi:"networkInsightsAnalysisId"`
}

func (LookupNetworkInsightsAnalysisOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkInsightsAnalysisArgs)(nil)).Elem()
}

type LookupNetworkInsightsAnalysisResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkInsightsAnalysisResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkInsightsAnalysisResult)(nil)).Elem()
}

func (o LookupNetworkInsightsAnalysisResultOutput) ToLookupNetworkInsightsAnalysisResultOutput() LookupNetworkInsightsAnalysisResultOutput {
	return o
}

func (o LookupNetworkInsightsAnalysisResultOutput) ToLookupNetworkInsightsAnalysisResultOutputWithContext(ctx context.Context) LookupNetworkInsightsAnalysisResultOutput {
	return o
}

// The member accounts that contain resources that the path can traverse.
func (o LookupNetworkInsightsAnalysisResultOutput) AdditionalAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) []string { return v.AdditionalAccounts }).(pulumi.StringArrayOutput)
}

// Potential intermediate components.
func (o LookupNetworkInsightsAnalysisResultOutput) AlternatePathHints() NetworkInsightsAnalysisAlternatePathHintArrayOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) []NetworkInsightsAnalysisAlternatePathHint {
		return v.AlternatePathHints
	}).(NetworkInsightsAnalysisAlternatePathHintArrayOutput)
}

// The explanations. For more information, see [Reachability Analyzer explanation codes](https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html) .
func (o LookupNetworkInsightsAnalysisResultOutput) Explanations() NetworkInsightsAnalysisExplanationArrayOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) []NetworkInsightsAnalysisExplanation {
		return v.Explanations
	}).(NetworkInsightsAnalysisExplanationArrayOutput)
}

// The components in the path from source to destination.
func (o LookupNetworkInsightsAnalysisResultOutput) ForwardPathComponents() NetworkInsightsAnalysisPathComponentArrayOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) []NetworkInsightsAnalysisPathComponent {
		return v.ForwardPathComponents
	}).(NetworkInsightsAnalysisPathComponentArrayOutput)
}

// The Amazon Resource Name (ARN) of the network insights analysis.
func (o LookupNetworkInsightsAnalysisResultOutput) NetworkInsightsAnalysisArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) *string { return v.NetworkInsightsAnalysisArn }).(pulumi.StringPtrOutput)
}

// The ID of the network insights analysis.
func (o LookupNetworkInsightsAnalysisResultOutput) NetworkInsightsAnalysisId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) *string { return v.NetworkInsightsAnalysisId }).(pulumi.StringPtrOutput)
}

// Indicates whether the destination is reachable from the source.
func (o LookupNetworkInsightsAnalysisResultOutput) NetworkPathFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) *bool { return v.NetworkPathFound }).(pulumi.BoolPtrOutput)
}

// The components in the path from destination to source.
func (o LookupNetworkInsightsAnalysisResultOutput) ReturnPathComponents() NetworkInsightsAnalysisPathComponentArrayOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) []NetworkInsightsAnalysisPathComponent {
		return v.ReturnPathComponents
	}).(NetworkInsightsAnalysisPathComponentArrayOutput)
}

// The time the analysis started.
func (o LookupNetworkInsightsAnalysisResultOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// The status of the network insights analysis.
func (o LookupNetworkInsightsAnalysisResultOutput) Status() NetworkInsightsAnalysisStatusPtrOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) *NetworkInsightsAnalysisStatus { return v.Status }).(NetworkInsightsAnalysisStatusPtrOutput)
}

// The status message, if the status is `failed` .
func (o LookupNetworkInsightsAnalysisResultOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) *string { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

// The IDs of potential intermediate accounts.
func (o LookupNetworkInsightsAnalysisResultOutput) SuggestedAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) []string { return v.SuggestedAccounts }).(pulumi.StringArrayOutput)
}

// The tags to apply.
func (o LookupNetworkInsightsAnalysisResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupNetworkInsightsAnalysisResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkInsightsAnalysisResultOutput{})
}
