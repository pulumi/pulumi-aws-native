// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAMScope Type
func LookupIPAMScope(ctx *pulumi.Context, args *LookupIPAMScopeArgs, opts ...pulumi.InvokeOption) (*LookupIPAMScopeResult, error) {
	var rv LookupIPAMScopeResult
	err := ctx.Invoke("aws-native:ec2:getIPAMScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIPAMScopeArgs struct {
	// Id of the IPAM scope.
	IpamScopeId string `pulumi:"ipamScopeId"`
}

type LookupIPAMScopeResult struct {
	// The Amazon Resource Name (ARN) of the IPAM scope.
	Arn         *string `pulumi:"arn"`
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
	IpamArn *string `pulumi:"ipamArn"`
	// Id of the IPAM scope.
	IpamScopeId *string `pulumi:"ipamScopeId"`
	// Determines whether this scope contains publicly routable space or space for a private network
	IpamScopeType *IPAMScopeIpamScopeType `pulumi:"ipamScopeType"`
	// Is this one of the default scopes created with the IPAM.
	IsDefault *bool `pulumi:"isDefault"`
	// The number of pools that currently exist in this scope.
	PoolCount *int `pulumi:"poolCount"`
	// An array of key-value pairs to apply to this resource.
	Tags []IPAMScopeTag `pulumi:"tags"`
}

func LookupIPAMScopeOutput(ctx *pulumi.Context, args LookupIPAMScopeOutputArgs, opts ...pulumi.InvokeOption) LookupIPAMScopeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIPAMScopeResult, error) {
			args := v.(LookupIPAMScopeArgs)
			r, err := LookupIPAMScope(ctx, &args, opts...)
			return *r, err
		}).(LookupIPAMScopeResultOutput)
}

type LookupIPAMScopeOutputArgs struct {
	// Id of the IPAM scope.
	IpamScopeId pulumi.StringInput `pulumi:"ipamScopeId"`
}

func (LookupIPAMScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPAMScopeArgs)(nil)).Elem()
}

type LookupIPAMScopeResultOutput struct{ *pulumi.OutputState }

func (LookupIPAMScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPAMScopeResult)(nil)).Elem()
}

func (o LookupIPAMScopeResultOutput) ToLookupIPAMScopeResultOutput() LookupIPAMScopeResultOutput {
	return o
}

func (o LookupIPAMScopeResultOutput) ToLookupIPAMScopeResultOutputWithContext(ctx context.Context) LookupIPAMScopeResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the IPAM scope.
func (o LookupIPAMScopeResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupIPAMScopeResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
func (o LookupIPAMScopeResultOutput) IpamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) *string { return v.IpamArn }).(pulumi.StringPtrOutput)
}

// Id of the IPAM scope.
func (o LookupIPAMScopeResultOutput) IpamScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) *string { return v.IpamScopeId }).(pulumi.StringPtrOutput)
}

// Determines whether this scope contains publicly routable space or space for a private network
func (o LookupIPAMScopeResultOutput) IpamScopeType() IPAMScopeIpamScopeTypePtrOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) *IPAMScopeIpamScopeType { return v.IpamScopeType }).(IPAMScopeIpamScopeTypePtrOutput)
}

// Is this one of the default scopes created with the IPAM.
func (o LookupIPAMScopeResultOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The number of pools that currently exist in this scope.
func (o LookupIPAMScopeResultOutput) PoolCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) *int { return v.PoolCount }).(pulumi.IntPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupIPAMScopeResultOutput) Tags() IPAMScopeTagArrayOutput {
	return o.ApplyT(func(v LookupIPAMScopeResult) []IPAMScopeTag { return v.Tags }).(IPAMScopeTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIPAMScopeResultOutput{})
}
