// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAMScope Type
type IPAMScope struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the IPAM scope.
	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
	IpamArn pulumi.StringOutput `pulumi:"ipamArn"`
	// The Id of the IPAM this scope is a part of.
	IpamId pulumi.StringOutput `pulumi:"ipamId"`
	// Id of the IPAM scope.
	IpamScopeId pulumi.StringOutput `pulumi:"ipamScopeId"`
	// Determines whether this scope contains publicly routable space or space for a private network
	IpamScopeType IPAMScopeIpamScopeTypeOutput `pulumi:"ipamScopeType"`
	// Is this one of the default scopes created with the IPAM.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// The number of pools that currently exist in this scope.
	PoolCount pulumi.IntOutput `pulumi:"poolCount"`
	// An array of key-value pairs to apply to this resource.
	Tags IPAMScopeTagArrayOutput `pulumi:"tags"`
}

// NewIPAMScope registers a new resource with the given unique name, arguments, and options.
func NewIPAMScope(ctx *pulumi.Context,
	name string, args *IPAMScopeArgs, opts ...pulumi.ResourceOption) (*IPAMScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamId == nil {
		return nil, errors.New("invalid value for required argument 'IpamId'")
	}
	var resource IPAMScope
	err := ctx.RegisterResource("aws-native:ec2:IPAMScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPAMScope gets an existing IPAMScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAMScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPAMScopeState, opts ...pulumi.ResourceOption) (*IPAMScope, error) {
	var resource IPAMScope
	err := ctx.ReadResource("aws-native:ec2:IPAMScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPAMScope resources.
type ipamscopeState struct {
}

type IPAMScopeState struct {
}

func (IPAMScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamscopeState)(nil)).Elem()
}

type ipamscopeArgs struct {
	Description *string `pulumi:"description"`
	// The Id of the IPAM this scope is a part of.
	IpamId string `pulumi:"ipamId"`
	// An array of key-value pairs to apply to this resource.
	Tags []IPAMScopeTag `pulumi:"tags"`
}

// The set of arguments for constructing a IPAMScope resource.
type IPAMScopeArgs struct {
	Description pulumi.StringPtrInput
	// The Id of the IPAM this scope is a part of.
	IpamId pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags IPAMScopeTagArrayInput
}

func (IPAMScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamscopeArgs)(nil)).Elem()
}

type IPAMScopeInput interface {
	pulumi.Input

	ToIPAMScopeOutput() IPAMScopeOutput
	ToIPAMScopeOutputWithContext(ctx context.Context) IPAMScopeOutput
}

func (*IPAMScope) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAMScope)(nil))
}

func (i *IPAMScope) ToIPAMScopeOutput() IPAMScopeOutput {
	return i.ToIPAMScopeOutputWithContext(context.Background())
}

func (i *IPAMScope) ToIPAMScopeOutputWithContext(ctx context.Context) IPAMScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAMScopeOutput)
}

type IPAMScopeOutput struct{ *pulumi.OutputState }

func (IPAMScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAMScope)(nil))
}

func (o IPAMScopeOutput) ToIPAMScopeOutput() IPAMScopeOutput {
	return o
}

func (o IPAMScopeOutput) ToIPAMScopeOutputWithContext(ctx context.Context) IPAMScopeOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPAMScopeInput)(nil)).Elem(), &IPAMScope{})
	pulumi.RegisterOutputType(IPAMScopeOutput{})
}
