// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-enclavecertificateiamroleassociation.html
type EnclaveCertificateIamRoleAssociation struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-enclavecertificateiamroleassociation.html#cfn-ec2-enclavecertificateiamroleassociation-certificatearn
	CertificateArn          pulumi.StringOutput `pulumi:"certificateArn"`
	CertificateS3BucketName pulumi.StringOutput `pulumi:"certificateS3BucketName"`
	CertificateS3ObjectKey  pulumi.StringOutput `pulumi:"certificateS3ObjectKey"`
	EncryptionKmsKeyId      pulumi.StringOutput `pulumi:"encryptionKmsKeyId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-enclavecertificateiamroleassociation.html#cfn-ec2-enclavecertificateiamroleassociation-rolearn
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
}

// NewEnclaveCertificateIamRoleAssociation registers a new resource with the given unique name, arguments, and options.
func NewEnclaveCertificateIamRoleAssociation(ctx *pulumi.Context,
	name string, args *EnclaveCertificateIamRoleAssociationArgs, opts ...pulumi.ResourceOption) (*EnclaveCertificateIamRoleAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateArn'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	var resource EnclaveCertificateIamRoleAssociation
	err := ctx.RegisterResource("aws-native:EC2:EnclaveCertificateIamRoleAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnclaveCertificateIamRoleAssociation gets an existing EnclaveCertificateIamRoleAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnclaveCertificateIamRoleAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnclaveCertificateIamRoleAssociationState, opts ...pulumi.ResourceOption) (*EnclaveCertificateIamRoleAssociation, error) {
	var resource EnclaveCertificateIamRoleAssociation
	err := ctx.ReadResource("aws-native:EC2:EnclaveCertificateIamRoleAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnclaveCertificateIamRoleAssociation resources.
type enclaveCertificateIamRoleAssociationState struct {
}

type EnclaveCertificateIamRoleAssociationState struct {
}

func (EnclaveCertificateIamRoleAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*enclaveCertificateIamRoleAssociationState)(nil)).Elem()
}

type enclaveCertificateIamRoleAssociationArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-enclavecertificateiamroleassociation.html#cfn-ec2-enclavecertificateiamroleassociation-certificatearn
	CertificateArn string `pulumi:"certificateArn"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-enclavecertificateiamroleassociation.html#cfn-ec2-enclavecertificateiamroleassociation-rolearn
	RoleArn string `pulumi:"roleArn"`
}

// The set of arguments for constructing a EnclaveCertificateIamRoleAssociation resource.
type EnclaveCertificateIamRoleAssociationArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-enclavecertificateiamroleassociation.html#cfn-ec2-enclavecertificateiamroleassociation-certificatearn
	CertificateArn pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-enclavecertificateiamroleassociation.html#cfn-ec2-enclavecertificateiamroleassociation-rolearn
	RoleArn pulumi.StringInput
}

func (EnclaveCertificateIamRoleAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enclaveCertificateIamRoleAssociationArgs)(nil)).Elem()
}

type EnclaveCertificateIamRoleAssociationInput interface {
	pulumi.Input

	ToEnclaveCertificateIamRoleAssociationOutput() EnclaveCertificateIamRoleAssociationOutput
	ToEnclaveCertificateIamRoleAssociationOutputWithContext(ctx context.Context) EnclaveCertificateIamRoleAssociationOutput
}

func (*EnclaveCertificateIamRoleAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*EnclaveCertificateIamRoleAssociation)(nil))
}

func (i *EnclaveCertificateIamRoleAssociation) ToEnclaveCertificateIamRoleAssociationOutput() EnclaveCertificateIamRoleAssociationOutput {
	return i.ToEnclaveCertificateIamRoleAssociationOutputWithContext(context.Background())
}

func (i *EnclaveCertificateIamRoleAssociation) ToEnclaveCertificateIamRoleAssociationOutputWithContext(ctx context.Context) EnclaveCertificateIamRoleAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnclaveCertificateIamRoleAssociationOutput)
}

type EnclaveCertificateIamRoleAssociationOutput struct{ *pulumi.OutputState }

func (EnclaveCertificateIamRoleAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnclaveCertificateIamRoleAssociation)(nil))
}

func (o EnclaveCertificateIamRoleAssociationOutput) ToEnclaveCertificateIamRoleAssociationOutput() EnclaveCertificateIamRoleAssociationOutput {
	return o
}

func (o EnclaveCertificateIamRoleAssociationOutput) ToEnclaveCertificateIamRoleAssociationOutputWithContext(ctx context.Context) EnclaveCertificateIamRoleAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EnclaveCertificateIamRoleAssociationOutput{})
}
