// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::SecurityGroupEgress
type SecurityGroupEgress struct {
	pulumi.CustomResourceState

	// The IPv4 ranges
	CidrIp pulumi.StringPtrOutput `pulumi:"cidrIp"`
	// [VPC only] The IPv6 ranges
	CidrIpv6 pulumi.StringPtrOutput `pulumi:"cidrIpv6"`
	// Resource Type definition for an egress (outbound) security group rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// [EC2-VPC only] The ID of a prefix list.
	DestinationPrefixListId pulumi.StringPtrOutput `pulumi:"destinationPrefixListId"`
	// You must specify a destination security group (DestinationPrefixListId or DestinationSecurityGroupId) or a CIDR range (CidrIp or CidrIpv6).
	DestinationSecurityGroupId pulumi.StringPtrOutput `pulumi:"destinationSecurityGroupId"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	FromPort pulumi.IntPtrOutput `pulumi:"fromPort"`
	// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
	IpProtocol pulumi.StringOutput `pulumi:"ipProtocol"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	ToPort pulumi.IntPtrOutput `pulumi:"toPort"`
}

// NewSecurityGroupEgress registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupEgress(ctx *pulumi.Context,
	name string, args *SecurityGroupEgressArgs, opts ...pulumi.ResourceOption) (*SecurityGroupEgress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.IpProtocol == nil {
		return nil, errors.New("invalid value for required argument 'IpProtocol'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"cidrIp",
		"cidrIpv6",
		"destinationPrefixListId",
		"destinationSecurityGroupId",
		"fromPort",
		"groupId",
		"ipProtocol",
		"toPort",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupEgress
	err := ctx.RegisterResource("aws-native:ec2:SecurityGroupEgress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupEgress gets an existing SecurityGroupEgress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupEgress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupEgressState, opts ...pulumi.ResourceOption) (*SecurityGroupEgress, error) {
	var resource SecurityGroupEgress
	err := ctx.ReadResource("aws-native:ec2:SecurityGroupEgress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupEgress resources.
type securityGroupEgressState struct {
}

type SecurityGroupEgressState struct {
}

func (SecurityGroupEgressState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupEgressState)(nil)).Elem()
}

type securityGroupEgressArgs struct {
	// The IPv4 ranges
	CidrIp *string `pulumi:"cidrIp"`
	// [VPC only] The IPv6 ranges
	CidrIpv6 *string `pulumi:"cidrIpv6"`
	// Resource Type definition for an egress (outbound) security group rule.
	Description *string `pulumi:"description"`
	// [EC2-VPC only] The ID of a prefix list.
	DestinationPrefixListId *string `pulumi:"destinationPrefixListId"`
	// You must specify a destination security group (DestinationPrefixListId or DestinationSecurityGroupId) or a CIDR range (CidrIp or CidrIpv6).
	DestinationSecurityGroupId *string `pulumi:"destinationSecurityGroupId"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	FromPort *int `pulumi:"fromPort"`
	// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
	GroupId string `pulumi:"groupId"`
	// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
	IpProtocol string `pulumi:"ipProtocol"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	ToPort *int `pulumi:"toPort"`
}

// The set of arguments for constructing a SecurityGroupEgress resource.
type SecurityGroupEgressArgs struct {
	// The IPv4 ranges
	CidrIp pulumi.StringPtrInput
	// [VPC only] The IPv6 ranges
	CidrIpv6 pulumi.StringPtrInput
	// Resource Type definition for an egress (outbound) security group rule.
	Description pulumi.StringPtrInput
	// [EC2-VPC only] The ID of a prefix list.
	DestinationPrefixListId pulumi.StringPtrInput
	// You must specify a destination security group (DestinationPrefixListId or DestinationSecurityGroupId) or a CIDR range (CidrIp or CidrIpv6).
	DestinationSecurityGroupId pulumi.StringPtrInput
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	FromPort pulumi.IntPtrInput
	// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
	GroupId pulumi.StringInput
	// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
	IpProtocol pulumi.StringInput
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	ToPort pulumi.IntPtrInput
}

func (SecurityGroupEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupEgressArgs)(nil)).Elem()
}

type SecurityGroupEgressInput interface {
	pulumi.Input

	ToSecurityGroupEgressOutput() SecurityGroupEgressOutput
	ToSecurityGroupEgressOutputWithContext(ctx context.Context) SecurityGroupEgressOutput
}

func (*SecurityGroupEgress) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupEgress)(nil)).Elem()
}

func (i *SecurityGroupEgress) ToSecurityGroupEgressOutput() SecurityGroupEgressOutput {
	return i.ToSecurityGroupEgressOutputWithContext(context.Background())
}

func (i *SecurityGroupEgress) ToSecurityGroupEgressOutputWithContext(ctx context.Context) SecurityGroupEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupEgressOutput)
}

type SecurityGroupEgressOutput struct{ *pulumi.OutputState }

func (SecurityGroupEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupEgress)(nil)).Elem()
}

func (o SecurityGroupEgressOutput) ToSecurityGroupEgressOutput() SecurityGroupEgressOutput {
	return o
}

func (o SecurityGroupEgressOutput) ToSecurityGroupEgressOutputWithContext(ctx context.Context) SecurityGroupEgressOutput {
	return o
}

// The IPv4 ranges
func (o SecurityGroupEgressOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.StringPtrOutput { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// [VPC only] The IPv6 ranges
func (o SecurityGroupEgressOutput) CidrIpv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.StringPtrOutput { return v.CidrIpv6 }).(pulumi.StringPtrOutput)
}

// Resource Type definition for an egress (outbound) security group rule.
func (o SecurityGroupEgressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// [EC2-VPC only] The ID of a prefix list.
func (o SecurityGroupEgressOutput) DestinationPrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.StringPtrOutput { return v.DestinationPrefixListId }).(pulumi.StringPtrOutput)
}

// You must specify a destination security group (DestinationPrefixListId or DestinationSecurityGroupId) or a CIDR range (CidrIp or CidrIpv6).
func (o SecurityGroupEgressOutput) DestinationSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.StringPtrOutput { return v.DestinationSecurityGroupId }).(pulumi.StringPtrOutput)
}

// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
func (o SecurityGroupEgressOutput) FromPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.IntPtrOutput { return v.FromPort }).(pulumi.IntPtrOutput)
}

// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
func (o SecurityGroupEgressOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
func (o SecurityGroupEgressOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.StringOutput { return v.IpProtocol }).(pulumi.StringOutput)
}

// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
func (o SecurityGroupEgressOutput) ToPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupEgress) pulumi.IntPtrOutput { return v.ToPort }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupEgressInput)(nil)).Elem(), &SecurityGroupEgress{})
	pulumi.RegisterOutputType(SecurityGroupEgressOutput{})
}
