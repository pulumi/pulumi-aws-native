// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAMAllocation Type
type IPAMAllocation struct {
	pulumi.CustomResourceState

	Cidr        pulumi.StringPtrOutput `pulumi:"cidr"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Id of the allocation.
	IpamPoolAllocationId pulumi.StringOutput `pulumi:"ipamPoolAllocationId"`
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringOutput `pulumi:"ipamPoolId"`
	// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength pulumi.IntPtrOutput `pulumi:"netmaskLength"`
}

// NewIPAMAllocation registers a new resource with the given unique name, arguments, and options.
func NewIPAMAllocation(ctx *pulumi.Context,
	name string, args *IPAMAllocationArgs, opts ...pulumi.ResourceOption) (*IPAMAllocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	var resource IPAMAllocation
	err := ctx.RegisterResource("aws-native:ec2:IPAMAllocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPAMAllocation gets an existing IPAMAllocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAMAllocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPAMAllocationState, opts ...pulumi.ResourceOption) (*IPAMAllocation, error) {
	var resource IPAMAllocation
	err := ctx.ReadResource("aws-native:ec2:IPAMAllocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPAMAllocation resources.
type ipamallocationState struct {
}

type IPAMAllocationState struct {
}

func (IPAMAllocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamallocationState)(nil)).Elem()
}

type ipamallocationArgs struct {
	Cidr        *string `pulumi:"cidr"`
	Description *string `pulumi:"description"`
	// Id of the IPAM Pool.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

// The set of arguments for constructing a IPAMAllocation resource.
type IPAMAllocationArgs struct {
	Cidr        pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringInput
	// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength pulumi.IntPtrInput
}

func (IPAMAllocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamallocationArgs)(nil)).Elem()
}

type IPAMAllocationInput interface {
	pulumi.Input

	ToIPAMAllocationOutput() IPAMAllocationOutput
	ToIPAMAllocationOutputWithContext(ctx context.Context) IPAMAllocationOutput
}

func (*IPAMAllocation) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAMAllocation)(nil))
}

func (i *IPAMAllocation) ToIPAMAllocationOutput() IPAMAllocationOutput {
	return i.ToIPAMAllocationOutputWithContext(context.Background())
}

func (i *IPAMAllocation) ToIPAMAllocationOutputWithContext(ctx context.Context) IPAMAllocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAMAllocationOutput)
}

type IPAMAllocationOutput struct{ *pulumi.OutputState }

func (IPAMAllocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAMAllocation)(nil))
}

func (o IPAMAllocationOutput) ToIPAMAllocationOutput() IPAMAllocationOutput {
	return o
}

func (o IPAMAllocationOutput) ToIPAMAllocationOutputWithContext(ctx context.Context) IPAMAllocationOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPAMAllocationInput)(nil)).Elem(), &IPAMAllocation{})
	pulumi.RegisterOutputType(IPAMAllocationOutput{})
}
