// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EC2::TrafficMirrorSession
func LookupTrafficMirrorSession(ctx *pulumi.Context, args *LookupTrafficMirrorSessionArgs, opts ...pulumi.InvokeOption) (*LookupTrafficMirrorSessionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTrafficMirrorSessionResult
	err := ctx.Invoke("aws-native:ec2:getTrafficMirrorSession", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTrafficMirrorSessionArgs struct {
	// The ID of a Traffic Mirror session.
	Id string `pulumi:"id"`
}

type LookupTrafficMirrorSessionResult struct {
	// The description of the Traffic Mirror session.
	Description *string `pulumi:"description"`
	// The ID of a Traffic Mirror session.
	Id *string `pulumi:"id"`
	// The ID of the source network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The ID of the account that owns the Traffic Mirror session.
	OwnerId *string `pulumi:"ownerId"`
	// The number of bytes in each packet to mirror.
	PacketLength *int `pulumi:"packetLength"`
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber *int `pulumi:"sessionNumber"`
	// The tags assigned to the Traffic Mirror session.
	Tags []aws.Tag `pulumi:"tags"`
	// The ID of a Traffic Mirror filter.
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
	// The ID of a Traffic Mirror target.
	TrafficMirrorTargetId *string `pulumi:"trafficMirrorTargetId"`
	// The VXLAN ID for the Traffic Mirror session.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

func LookupTrafficMirrorSessionOutput(ctx *pulumi.Context, args LookupTrafficMirrorSessionOutputArgs, opts ...pulumi.InvokeOption) LookupTrafficMirrorSessionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTrafficMirrorSessionResultOutput, error) {
			args := v.(LookupTrafficMirrorSessionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ec2:getTrafficMirrorSession", args, LookupTrafficMirrorSessionResultOutput{}, options).(LookupTrafficMirrorSessionResultOutput), nil
		}).(LookupTrafficMirrorSessionResultOutput)
}

type LookupTrafficMirrorSessionOutputArgs struct {
	// The ID of a Traffic Mirror session.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTrafficMirrorSessionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrafficMirrorSessionArgs)(nil)).Elem()
}

type LookupTrafficMirrorSessionResultOutput struct{ *pulumi.OutputState }

func (LookupTrafficMirrorSessionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrafficMirrorSessionResult)(nil)).Elem()
}

func (o LookupTrafficMirrorSessionResultOutput) ToLookupTrafficMirrorSessionResultOutput() LookupTrafficMirrorSessionResultOutput {
	return o
}

func (o LookupTrafficMirrorSessionResultOutput) ToLookupTrafficMirrorSessionResultOutputWithContext(ctx context.Context) LookupTrafficMirrorSessionResultOutput {
	return o
}

// The description of the Traffic Mirror session.
func (o LookupTrafficMirrorSessionResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of a Traffic Mirror session.
func (o LookupTrafficMirrorSessionResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ID of the source network interface.
func (o LookupTrafficMirrorSessionResultOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *string { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The ID of the account that owns the Traffic Mirror session.
func (o LookupTrafficMirrorSessionResultOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *string { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// The number of bytes in each packet to mirror.
func (o LookupTrafficMirrorSessionResultOutput) PacketLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *int { return v.PacketLength }).(pulumi.IntPtrOutput)
}

// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
func (o LookupTrafficMirrorSessionResultOutput) SessionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *int { return v.SessionNumber }).(pulumi.IntPtrOutput)
}

// The tags assigned to the Traffic Mirror session.
func (o LookupTrafficMirrorSessionResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The ID of a Traffic Mirror filter.
func (o LookupTrafficMirrorSessionResultOutput) TrafficMirrorFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *string { return v.TrafficMirrorFilterId }).(pulumi.StringPtrOutput)
}

// The ID of a Traffic Mirror target.
func (o LookupTrafficMirrorSessionResultOutput) TrafficMirrorTargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *string { return v.TrafficMirrorTargetId }).(pulumi.StringPtrOutput)
}

// The VXLAN ID for the Traffic Mirror session.
func (o LookupTrafficMirrorSessionResultOutput) VirtualNetworkId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorSessionResult) *int { return v.VirtualNetworkId }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTrafficMirrorSessionResultOutput{})
}
