// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VPC Route Server Propagation
type RouteServerPropagation struct {
	pulumi.CustomResourceState

	// Route Server ID
	RouteServerId pulumi.StringOutput `pulumi:"routeServerId"`
	// Route Table ID
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
}

// NewRouteServerPropagation registers a new resource with the given unique name, arguments, and options.
func NewRouteServerPropagation(ctx *pulumi.Context,
	name string, args *RouteServerPropagationArgs, opts ...pulumi.ResourceOption) (*RouteServerPropagation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteServerId == nil {
		return nil, errors.New("invalid value for required argument 'RouteServerId'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"routeServerId",
		"routeTableId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteServerPropagation
	err := ctx.RegisterResource("aws-native:ec2:RouteServerPropagation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteServerPropagation gets an existing RouteServerPropagation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteServerPropagation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteServerPropagationState, opts ...pulumi.ResourceOption) (*RouteServerPropagation, error) {
	var resource RouteServerPropagation
	err := ctx.ReadResource("aws-native:ec2:RouteServerPropagation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteServerPropagation resources.
type routeServerPropagationState struct {
}

type RouteServerPropagationState struct {
}

func (RouteServerPropagationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerPropagationState)(nil)).Elem()
}

type routeServerPropagationArgs struct {
	// Route Server ID
	RouteServerId string `pulumi:"routeServerId"`
	// Route Table ID
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a RouteServerPropagation resource.
type RouteServerPropagationArgs struct {
	// Route Server ID
	RouteServerId pulumi.StringInput
	// Route Table ID
	RouteTableId pulumi.StringInput
}

func (RouteServerPropagationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerPropagationArgs)(nil)).Elem()
}

type RouteServerPropagationInput interface {
	pulumi.Input

	ToRouteServerPropagationOutput() RouteServerPropagationOutput
	ToRouteServerPropagationOutputWithContext(ctx context.Context) RouteServerPropagationOutput
}

func (*RouteServerPropagation) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerPropagation)(nil)).Elem()
}

func (i *RouteServerPropagation) ToRouteServerPropagationOutput() RouteServerPropagationOutput {
	return i.ToRouteServerPropagationOutputWithContext(context.Background())
}

func (i *RouteServerPropagation) ToRouteServerPropagationOutputWithContext(ctx context.Context) RouteServerPropagationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerPropagationOutput)
}

type RouteServerPropagationOutput struct{ *pulumi.OutputState }

func (RouteServerPropagationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerPropagation)(nil)).Elem()
}

func (o RouteServerPropagationOutput) ToRouteServerPropagationOutput() RouteServerPropagationOutput {
	return o
}

func (o RouteServerPropagationOutput) ToRouteServerPropagationOutputWithContext(ctx context.Context) RouteServerPropagationOutput {
	return o
}

// Route Server ID
func (o RouteServerPropagationOutput) RouteServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPropagation) pulumi.StringOutput { return v.RouteServerId }).(pulumi.StringOutput)
}

// Route Table ID
func (o RouteServerPropagationOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPropagation) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerPropagationInput)(nil)).Elem(), &RouteServerPropagation{})
	pulumi.RegisterOutputType(RouteServerPropagationOutput{})
}
