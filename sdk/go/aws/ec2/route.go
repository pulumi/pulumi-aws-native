// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::Route
type Route struct {
	pulumi.CustomResourceState

	// The ID of the carrier gateway.
	CarrierGatewayId pulumi.StringPtrOutput `pulumi:"carrierGatewayId"`
	// The primary identifier of the resource generated by the service.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The IPv4 CIDR block used for the destination match.
	DestinationCidrBlock pulumi.StringPtrOutput `pulumi:"destinationCidrBlock"`
	// The IPv6 CIDR block used for the destination match.
	DestinationIpv6CidrBlock pulumi.StringPtrOutput `pulumi:"destinationIpv6CidrBlock"`
	// The ID of the egress-only internet gateway.
	EgressOnlyInternetGatewayId pulumi.StringPtrOutput `pulumi:"egressOnlyInternetGatewayId"`
	// The ID of an internet gateway or virtual private gateway attached to your VPC.
	GatewayId pulumi.StringPtrOutput `pulumi:"gatewayId"`
	// The ID of a NAT instance in your VPC.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// The ID of the local gateway.
	LocalGatewayId pulumi.StringPtrOutput `pulumi:"localGatewayId"`
	// The ID of a NAT gateway.
	NatGatewayId pulumi.StringPtrOutput `pulumi:"natGatewayId"`
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringPtrOutput `pulumi:"networkInterfaceId"`
	// The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The ID of a transit gateway.
	TransitGatewayId pulumi.StringPtrOutput `pulumi:"transitGatewayId"`
	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointId pulumi.StringPtrOutput `pulumi:"vpcEndpointId"`
	// The ID of a VPC peering connection.
	VpcPeeringConnectionId pulumi.StringPtrOutput `pulumi:"vpcPeeringConnectionId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("aws-native:ec2:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws-native:ec2:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
}

type RouteState struct {
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// The ID of the carrier gateway.
	CarrierGatewayId *string `pulumi:"carrierGatewayId"`
	// The IPv4 CIDR block used for the destination match.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// The IPv6 CIDR block used for the destination match.
	DestinationIpv6CidrBlock *string `pulumi:"destinationIpv6CidrBlock"`
	// The ID of the egress-only internet gateway.
	EgressOnlyInternetGatewayId *string `pulumi:"egressOnlyInternetGatewayId"`
	// The ID of an internet gateway or virtual private gateway attached to your VPC.
	GatewayId *string `pulumi:"gatewayId"`
	// The ID of a NAT instance in your VPC.
	InstanceId *string `pulumi:"instanceId"`
	// The ID of the local gateway.
	LocalGatewayId *string `pulumi:"localGatewayId"`
	// The ID of a NAT gateway.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The ID of the network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
	RouteTableId string `pulumi:"routeTableId"`
	// The ID of a transit gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The ID of a VPC peering connection.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The ID of the carrier gateway.
	CarrierGatewayId pulumi.StringPtrInput
	// The IPv4 CIDR block used for the destination match.
	DestinationCidrBlock pulumi.StringPtrInput
	// The IPv6 CIDR block used for the destination match.
	DestinationIpv6CidrBlock pulumi.StringPtrInput
	// The ID of the egress-only internet gateway.
	EgressOnlyInternetGatewayId pulumi.StringPtrInput
	// The ID of an internet gateway or virtual private gateway attached to your VPC.
	GatewayId pulumi.StringPtrInput
	// The ID of a NAT instance in your VPC.
	InstanceId pulumi.StringPtrInput
	// The ID of the local gateway.
	LocalGatewayId pulumi.StringPtrInput
	// The ID of a NAT gateway.
	NatGatewayId pulumi.StringPtrInput
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringPtrInput
	// The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
	RouteTableId pulumi.StringInput
	// The ID of a transit gateway.
	TransitGatewayId pulumi.StringPtrInput
	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointId pulumi.StringPtrInput
	// The ID of a VPC peering connection.
	VpcPeeringConnectionId pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// The ID of the carrier gateway.
func (o RouteOutput) CarrierGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.CarrierGatewayId }).(pulumi.StringPtrOutput)
}

// The primary identifier of the resource generated by the service.
func (o RouteOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// The IPv4 CIDR block used for the destination match.
func (o RouteOutput) DestinationCidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.DestinationCidrBlock }).(pulumi.StringPtrOutput)
}

// The IPv6 CIDR block used for the destination match.
func (o RouteOutput) DestinationIpv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.DestinationIpv6CidrBlock }).(pulumi.StringPtrOutput)
}

// The ID of the egress-only internet gateway.
func (o RouteOutput) EgressOnlyInternetGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.EgressOnlyInternetGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of an internet gateway or virtual private gateway attached to your VPC.
func (o RouteOutput) GatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.GatewayId }).(pulumi.StringPtrOutput)
}

// The ID of a NAT instance in your VPC.
func (o RouteOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The ID of the local gateway.
func (o RouteOutput) LocalGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.LocalGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of a NAT gateway.
func (o RouteOutput) NatGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.NatGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of the network interface.
func (o RouteOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
func (o RouteOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The ID of a transit gateway.
func (o RouteOutput) TransitGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.TransitGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
func (o RouteOutput) VpcEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.VpcEndpointId }).(pulumi.StringPtrOutput)
}

// The ID of a VPC peering connection.
func (o RouteOutput) VpcPeeringConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.VpcPeeringConnectionId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterOutputType(RouteOutput{})
}
