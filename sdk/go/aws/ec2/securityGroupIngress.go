// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::SecurityGroupIngress
//
// Deprecated: SecurityGroupIngress is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type SecurityGroupIngress struct {
	pulumi.CustomResourceState

	CidrIp                     pulumi.StringPtrOutput `pulumi:"cidrIp"`
	CidrIpv6                   pulumi.StringPtrOutput `pulumi:"cidrIpv6"`
	Description                pulumi.StringPtrOutput `pulumi:"description"`
	FromPort                   pulumi.IntPtrOutput    `pulumi:"fromPort"`
	GroupId                    pulumi.StringPtrOutput `pulumi:"groupId"`
	GroupName                  pulumi.StringPtrOutput `pulumi:"groupName"`
	IpProtocol                 pulumi.StringOutput    `pulumi:"ipProtocol"`
	SourcePrefixListId         pulumi.StringPtrOutput `pulumi:"sourcePrefixListId"`
	SourceSecurityGroupId      pulumi.StringPtrOutput `pulumi:"sourceSecurityGroupId"`
	SourceSecurityGroupName    pulumi.StringPtrOutput `pulumi:"sourceSecurityGroupName"`
	SourceSecurityGroupOwnerId pulumi.StringPtrOutput `pulumi:"sourceSecurityGroupOwnerId"`
	ToPort                     pulumi.IntPtrOutput    `pulumi:"toPort"`
}

// NewSecurityGroupIngress registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupIngress(ctx *pulumi.Context,
	name string, args *SecurityGroupIngressArgs, opts ...pulumi.ResourceOption) (*SecurityGroupIngress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpProtocol == nil {
		return nil, errors.New("invalid value for required argument 'IpProtocol'")
	}
	var resource SecurityGroupIngress
	err := ctx.RegisterResource("aws-native:ec2:SecurityGroupIngress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupIngress gets an existing SecurityGroupIngress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupIngress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupIngressState, opts ...pulumi.ResourceOption) (*SecurityGroupIngress, error) {
	var resource SecurityGroupIngress
	err := ctx.ReadResource("aws-native:ec2:SecurityGroupIngress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupIngress resources.
type securityGroupIngressState struct {
}

type SecurityGroupIngressState struct {
}

func (SecurityGroupIngressState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupIngressState)(nil)).Elem()
}

type securityGroupIngressArgs struct {
	CidrIp                     *string `pulumi:"cidrIp"`
	CidrIpv6                   *string `pulumi:"cidrIpv6"`
	Description                *string `pulumi:"description"`
	FromPort                   *int    `pulumi:"fromPort"`
	GroupId                    *string `pulumi:"groupId"`
	GroupName                  *string `pulumi:"groupName"`
	IpProtocol                 string  `pulumi:"ipProtocol"`
	SourcePrefixListId         *string `pulumi:"sourcePrefixListId"`
	SourceSecurityGroupId      *string `pulumi:"sourceSecurityGroupId"`
	SourceSecurityGroupName    *string `pulumi:"sourceSecurityGroupName"`
	SourceSecurityGroupOwnerId *string `pulumi:"sourceSecurityGroupOwnerId"`
	ToPort                     *int    `pulumi:"toPort"`
}

// The set of arguments for constructing a SecurityGroupIngress resource.
type SecurityGroupIngressArgs struct {
	CidrIp                     pulumi.StringPtrInput
	CidrIpv6                   pulumi.StringPtrInput
	Description                pulumi.StringPtrInput
	FromPort                   pulumi.IntPtrInput
	GroupId                    pulumi.StringPtrInput
	GroupName                  pulumi.StringPtrInput
	IpProtocol                 pulumi.StringInput
	SourcePrefixListId         pulumi.StringPtrInput
	SourceSecurityGroupId      pulumi.StringPtrInput
	SourceSecurityGroupName    pulumi.StringPtrInput
	SourceSecurityGroupOwnerId pulumi.StringPtrInput
	ToPort                     pulumi.IntPtrInput
}

func (SecurityGroupIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupIngressArgs)(nil)).Elem()
}

type SecurityGroupIngressInput interface {
	pulumi.Input

	ToSecurityGroupIngressOutput() SecurityGroupIngressOutput
	ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput
}

func (*SecurityGroupIngress) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngress)(nil))
}

func (i *SecurityGroupIngress) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return i.ToSecurityGroupIngressOutputWithContext(context.Background())
}

func (i *SecurityGroupIngress) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressOutput)
}

type SecurityGroupIngressOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngress)(nil))
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return o
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupIngressInput)(nil)).Elem(), &SecurityGroupIngress{})
	pulumi.RegisterOutputType(SecurityGroupIngressOutput{})
}
