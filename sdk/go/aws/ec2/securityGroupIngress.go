// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::SecurityGroupIngress
type SecurityGroupIngress struct {
	pulumi.CustomResourceState

	// The Security Group Rule Id
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The IPv4 ranges
	CidrIp pulumi.StringPtrOutput `pulumi:"cidrIp"`
	// [VPC only] The IPv6 ranges
	CidrIpv6 pulumi.StringPtrOutput `pulumi:"cidrIpv6"`
	// Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	//
	// Use this for ICMP and any protocol that uses ports.
	FromPort pulumi.IntPtrOutput `pulumi:"fromPort"`
	// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
	//
	// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
	GroupId pulumi.StringPtrOutput `pulumi:"groupId"`
	// The name of the security group.
	GroupName pulumi.StringPtrOutput `pulumi:"groupName"`
	// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).
	//
	// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
	IpProtocol pulumi.StringOutput `pulumi:"ipProtocol"`
	// [EC2-VPC only] The ID of a prefix list.
	SourcePrefixListId pulumi.StringPtrOutput `pulumi:"sourcePrefixListId"`
	// The ID of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
	SourceSecurityGroupId pulumi.StringPtrOutput `pulumi:"sourceSecurityGroupId"`
	// [EC2-Classic, default VPC] The name of the source security group.
	//
	// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
	SourceSecurityGroupName pulumi.StringPtrOutput `pulumi:"sourceSecurityGroupName"`
	// [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP address range.
	//
	// If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.
	SourceSecurityGroupOwnerId pulumi.StringPtrOutput `pulumi:"sourceSecurityGroupOwnerId"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	//
	// Use this for ICMP and any protocol that uses ports.
	ToPort pulumi.IntPtrOutput `pulumi:"toPort"`
}

// NewSecurityGroupIngress registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupIngress(ctx *pulumi.Context,
	name string, args *SecurityGroupIngressArgs, opts ...pulumi.ResourceOption) (*SecurityGroupIngress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpProtocol == nil {
		return nil, errors.New("invalid value for required argument 'IpProtocol'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"cidrIp",
		"cidrIpv6",
		"fromPort",
		"groupId",
		"groupName",
		"ipProtocol",
		"sourcePrefixListId",
		"sourceSecurityGroupId",
		"sourceSecurityGroupName",
		"sourceSecurityGroupOwnerId",
		"toPort",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupIngress
	err := ctx.RegisterResource("aws-native:ec2:SecurityGroupIngress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupIngress gets an existing SecurityGroupIngress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupIngress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupIngressState, opts ...pulumi.ResourceOption) (*SecurityGroupIngress, error) {
	var resource SecurityGroupIngress
	err := ctx.ReadResource("aws-native:ec2:SecurityGroupIngress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupIngress resources.
type securityGroupIngressState struct {
}

type SecurityGroupIngressState struct {
}

func (SecurityGroupIngressState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupIngressState)(nil)).Elem()
}

type securityGroupIngressArgs struct {
	// The IPv4 ranges
	CidrIp *string `pulumi:"cidrIp"`
	// [VPC only] The IPv6 ranges
	CidrIpv6 *string `pulumi:"cidrIpv6"`
	// Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously
	Description *string `pulumi:"description"`
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	//
	// Use this for ICMP and any protocol that uses ports.
	FromPort *int `pulumi:"fromPort"`
	// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
	//
	// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
	GroupId *string `pulumi:"groupId"`
	// The name of the security group.
	GroupName *string `pulumi:"groupName"`
	// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).
	//
	// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
	IpProtocol string `pulumi:"ipProtocol"`
	// [EC2-VPC only] The ID of a prefix list.
	SourcePrefixListId *string `pulumi:"sourcePrefixListId"`
	// The ID of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
	SourceSecurityGroupId *string `pulumi:"sourceSecurityGroupId"`
	// [EC2-Classic, default VPC] The name of the source security group.
	//
	// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
	SourceSecurityGroupName *string `pulumi:"sourceSecurityGroupName"`
	// [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP address range.
	//
	// If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.
	SourceSecurityGroupOwnerId *string `pulumi:"sourceSecurityGroupOwnerId"`
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	//
	// Use this for ICMP and any protocol that uses ports.
	ToPort *int `pulumi:"toPort"`
}

// The set of arguments for constructing a SecurityGroupIngress resource.
type SecurityGroupIngressArgs struct {
	// The IPv4 ranges
	CidrIp pulumi.StringPtrInput
	// [VPC only] The IPv6 ranges
	CidrIpv6 pulumi.StringPtrInput
	// Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously
	Description pulumi.StringPtrInput
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	//
	// Use this for ICMP and any protocol that uses ports.
	FromPort pulumi.IntPtrInput
	// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
	//
	// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
	GroupId pulumi.StringPtrInput
	// The name of the security group.
	GroupName pulumi.StringPtrInput
	// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).
	//
	// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
	IpProtocol pulumi.StringInput
	// [EC2-VPC only] The ID of a prefix list.
	SourcePrefixListId pulumi.StringPtrInput
	// The ID of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
	SourceSecurityGroupId pulumi.StringPtrInput
	// [EC2-Classic, default VPC] The name of the source security group.
	//
	// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
	SourceSecurityGroupName pulumi.StringPtrInput
	// [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP address range.
	//
	// If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.
	SourceSecurityGroupOwnerId pulumi.StringPtrInput
	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.
	//
	// Use this for ICMP and any protocol that uses ports.
	ToPort pulumi.IntPtrInput
}

func (SecurityGroupIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupIngressArgs)(nil)).Elem()
}

type SecurityGroupIngressInput interface {
	pulumi.Input

	ToSecurityGroupIngressOutput() SecurityGroupIngressOutput
	ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput
}

func (*SecurityGroupIngress) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupIngress)(nil)).Elem()
}

func (i *SecurityGroupIngress) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return i.ToSecurityGroupIngressOutputWithContext(context.Background())
}

func (i *SecurityGroupIngress) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressOutput)
}

type SecurityGroupIngressOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupIngress)(nil)).Elem()
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutput() SecurityGroupIngressOutput {
	return o
}

func (o SecurityGroupIngressOutput) ToSecurityGroupIngressOutputWithContext(ctx context.Context) SecurityGroupIngressOutput {
	return o
}

// The Security Group Rule Id
func (o SecurityGroupIngressOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The IPv4 ranges
func (o SecurityGroupIngressOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// [VPC only] The IPv6 ranges
func (o SecurityGroupIngressOutput) CidrIpv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.CidrIpv6 }).(pulumi.StringPtrOutput)
}

// Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously
func (o SecurityGroupIngressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
//
// Use this for ICMP and any protocol that uses ports.
func (o SecurityGroupIngressOutput) FromPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.IntPtrOutput { return v.FromPort }).(pulumi.IntPtrOutput)
}

// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
//
// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
func (o SecurityGroupIngressOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The name of the security group.
func (o SecurityGroupIngressOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).
//
// [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
func (o SecurityGroupIngressOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringOutput { return v.IpProtocol }).(pulumi.StringOutput)
}

// [EC2-VPC only] The ID of a prefix list.
func (o SecurityGroupIngressOutput) SourcePrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.SourcePrefixListId }).(pulumi.StringPtrOutput)
}

// The ID of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
func (o SecurityGroupIngressOutput) SourceSecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.SourceSecurityGroupId }).(pulumi.StringPtrOutput)
}

// [EC2-Classic, default VPC] The name of the source security group.
//
// You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
func (o SecurityGroupIngressOutput) SourceSecurityGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.SourceSecurityGroupName }).(pulumi.StringPtrOutput)
}

// [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP address range.
//
// If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.
func (o SecurityGroupIngressOutput) SourceSecurityGroupOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.StringPtrOutput { return v.SourceSecurityGroupOwnerId }).(pulumi.StringPtrOutput)
}

// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.
//
// Use this for ICMP and any protocol that uses ports.
func (o SecurityGroupIngressOutput) ToPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityGroupIngress) pulumi.IntPtrOutput { return v.ToPort }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupIngressInput)(nil)).Elem(), &SecurityGroupIngress{})
	pulumi.RegisterOutputType(SecurityGroupIngressOutput{})
}
