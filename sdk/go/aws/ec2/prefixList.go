// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema of AWS::EC2::PrefixList Type
type PrefixList struct {
	pulumi.CustomResourceState

	// Ip Version of Prefix List.
	AddressFamily PrefixListAddressFamilyOutput `pulumi:"addressFamily"`
	// The Amazon Resource Name (ARN) of the Prefix List.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Entries of Prefix List.
	Entries PrefixListEntryArrayOutput `pulumi:"entries"`
	// Max Entries of Prefix List.
	MaxEntries pulumi.IntOutput `pulumi:"maxEntries"`
	// Owner Id of Prefix List.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// Id of Prefix List.
	PrefixListId pulumi.StringOutput `pulumi:"prefixListId"`
	// Name of Prefix List.
	PrefixListName pulumi.StringOutput `pulumi:"prefixListName"`
	// Tags for Prefix List
	Tags PrefixListTagArrayOutput `pulumi:"tags"`
	// Version of Prefix List.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewPrefixList registers a new resource with the given unique name, arguments, and options.
func NewPrefixList(ctx *pulumi.Context,
	name string, args *PrefixListArgs, opts ...pulumi.ResourceOption) (*PrefixList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.MaxEntries == nil {
		return nil, errors.New("invalid value for required argument 'MaxEntries'")
	}
	if args.PrefixListName == nil {
		return nil, errors.New("invalid value for required argument 'PrefixListName'")
	}
	var resource PrefixList
	err := ctx.RegisterResource("aws-native:ec2:PrefixList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrefixList gets an existing PrefixList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrefixList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrefixListState, opts ...pulumi.ResourceOption) (*PrefixList, error) {
	var resource PrefixList
	err := ctx.ReadResource("aws-native:ec2:PrefixList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrefixList resources.
type prefixListState struct {
}

type PrefixListState struct {
}

func (PrefixListState) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListState)(nil)).Elem()
}

type prefixListArgs struct {
	// Ip Version of Prefix List.
	AddressFamily PrefixListAddressFamily `pulumi:"addressFamily"`
	// Entries of Prefix List.
	Entries []PrefixListEntry `pulumi:"entries"`
	// Max Entries of Prefix List.
	MaxEntries int `pulumi:"maxEntries"`
	// Name of Prefix List.
	PrefixListName string `pulumi:"prefixListName"`
	// Tags for Prefix List
	Tags []PrefixListTag `pulumi:"tags"`
}

// The set of arguments for constructing a PrefixList resource.
type PrefixListArgs struct {
	// Ip Version of Prefix List.
	AddressFamily PrefixListAddressFamilyInput
	// Entries of Prefix List.
	Entries PrefixListEntryArrayInput
	// Max Entries of Prefix List.
	MaxEntries pulumi.IntInput
	// Name of Prefix List.
	PrefixListName pulumi.StringInput
	// Tags for Prefix List
	Tags PrefixListTagArrayInput
}

func (PrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListArgs)(nil)).Elem()
}

type PrefixListInput interface {
	pulumi.Input

	ToPrefixListOutput() PrefixListOutput
	ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput
}

func (*PrefixList) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixList)(nil))
}

func (i *PrefixList) ToPrefixListOutput() PrefixListOutput {
	return i.ToPrefixListOutputWithContext(context.Background())
}

func (i *PrefixList) ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListOutput)
}

type PrefixListOutput struct{ *pulumi.OutputState }

func (PrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixList)(nil))
}

func (o PrefixListOutput) ToPrefixListOutput() PrefixListOutput {
	return o
}

func (o PrefixListOutput) ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PrefixListOutput{})
}
