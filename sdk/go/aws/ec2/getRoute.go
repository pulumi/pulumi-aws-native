// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a route in a route table. For more information, see [Routes](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#route-table-routes) in the *Amazon VPC User Guide*.
//
//	You must specify either a destination CIDR block or prefix list ID. You must also specify exactly one of the resources as the target.
//	If you create a route that references a transit gateway in the same template where you create the transit gateway, you must declare a dependency on the transit gateway attachment. The route table cannot use the transit gateway until it has successfully attached to the VPC. Add a [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) in the ``AWS::EC2::Route`` resource to explicitly declare a dependency on the ``AWS::EC2::TransitGatewayAttachment`` resource.
func LookupRoute(ctx *pulumi.Context, args *LookupRouteArgs, opts ...pulumi.InvokeOption) (*LookupRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteResult
	err := ctx.Invoke("aws-native:ec2:getRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRouteArgs struct {
	CidrBlock string `pulumi:"cidrBlock"`
	// The ID of the route table for the route.
	RouteTableId string `pulumi:"routeTableId"`
}

type LookupRouteResult struct {
	// The ID of the carrier gateway.
	//  You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
	CarrierGatewayId *string `pulumi:"carrierGatewayId"`
	CidrBlock        *string `pulumi:"cidrBlock"`
	// The Amazon Resource Name (ARN) of the core network.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// [IPv6 traffic only] The ID of an egress-only internet gateway.
	EgressOnlyInternetGatewayId *string `pulumi:"egressOnlyInternetGatewayId"`
	// The ID of an internet gateway or virtual private gateway attached to your VPC.
	GatewayId *string `pulumi:"gatewayId"`
	// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
	InstanceId *string `pulumi:"instanceId"`
	// The ID of the local gateway.
	LocalGatewayId *string `pulumi:"localGatewayId"`
	// [IPv4 traffic only] The ID of a NAT gateway.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The ID of a network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The ID of a transit gateway.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The ID of a VPC peering connection.
	VpcPeeringConnectionId *string `pulumi:"vpcPeeringConnectionId"`
}

func LookupRouteOutput(ctx *pulumi.Context, args LookupRouteOutputArgs, opts ...pulumi.InvokeOption) LookupRouteResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRouteResult, error) {
			args := v.(LookupRouteArgs)
			r, err := LookupRoute(ctx, &args, opts...)
			var s LookupRouteResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRouteResultOutput)
}

type LookupRouteOutputArgs struct {
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// The ID of the route table for the route.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
}

func (LookupRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteArgs)(nil)).Elem()
}

type LookupRouteResultOutput struct{ *pulumi.OutputState }

func (LookupRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteResult)(nil)).Elem()
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutput() LookupRouteResultOutput {
	return o
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutputWithContext(ctx context.Context) LookupRouteResultOutput {
	return o
}

// The ID of the carrier gateway.
//
//	You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
func (o LookupRouteResultOutput) CarrierGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.CarrierGatewayId }).(pulumi.StringPtrOutput)
}

func (o LookupRouteResultOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the core network.
func (o LookupRouteResultOutput) CoreNetworkArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.CoreNetworkArn }).(pulumi.StringPtrOutput)
}

// [IPv6 traffic only] The ID of an egress-only internet gateway.
func (o LookupRouteResultOutput) EgressOnlyInternetGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.EgressOnlyInternetGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of an internet gateway or virtual private gateway attached to your VPC.
func (o LookupRouteResultOutput) GatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.GatewayId }).(pulumi.StringPtrOutput)
}

// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
func (o LookupRouteResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The ID of the local gateway.
func (o LookupRouteResultOutput) LocalGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.LocalGatewayId }).(pulumi.StringPtrOutput)
}

// [IPv4 traffic only] The ID of a NAT gateway.
func (o LookupRouteResultOutput) NatGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.NatGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of a network interface.
func (o LookupRouteResultOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The ID of a transit gateway.
func (o LookupRouteResultOutput) TransitGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.TransitGatewayId }).(pulumi.StringPtrOutput)
}

// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
func (o LookupRouteResultOutput) VpcEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.VpcEndpointId }).(pulumi.StringPtrOutput)
}

// The ID of a VPC peering connection.
func (o LookupRouteResultOutput) VpcPeeringConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteResult) *string { return v.VpcPeeringConnectionId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteResultOutput{})
}
