// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::NetworkPerformanceMetricSubscription
type NetworkPerformanceMetricSubscription struct {
	pulumi.CustomResourceState

	// The target Region or Availability Zone for the metric to subscribe to.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// The metric type to subscribe to.
	Metric pulumi.StringOutput `pulumi:"metric"`
	// The starting Region or Availability Zone for metric to subscribe to.
	Source pulumi.StringOutput `pulumi:"source"`
	// The statistic to subscribe to.
	Statistic pulumi.StringOutput `pulumi:"statistic"`
}

// NewNetworkPerformanceMetricSubscription registers a new resource with the given unique name, arguments, and options.
func NewNetworkPerformanceMetricSubscription(ctx *pulumi.Context,
	name string, args *NetworkPerformanceMetricSubscriptionArgs, opts ...pulumi.ResourceOption) (*NetworkPerformanceMetricSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Statistic == nil {
		return nil, errors.New("invalid value for required argument 'Statistic'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"destination",
		"metric",
		"source",
		"statistic",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPerformanceMetricSubscription
	err := ctx.RegisterResource("aws-native:ec2:NetworkPerformanceMetricSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPerformanceMetricSubscription gets an existing NetworkPerformanceMetricSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPerformanceMetricSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPerformanceMetricSubscriptionState, opts ...pulumi.ResourceOption) (*NetworkPerformanceMetricSubscription, error) {
	var resource NetworkPerformanceMetricSubscription
	err := ctx.ReadResource("aws-native:ec2:NetworkPerformanceMetricSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPerformanceMetricSubscription resources.
type networkPerformanceMetricSubscriptionState struct {
}

type NetworkPerformanceMetricSubscriptionState struct {
}

func (NetworkPerformanceMetricSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPerformanceMetricSubscriptionState)(nil)).Elem()
}

type networkPerformanceMetricSubscriptionArgs struct {
	// The target Region or Availability Zone for the metric to subscribe to.
	Destination string `pulumi:"destination"`
	// The metric type to subscribe to.
	Metric string `pulumi:"metric"`
	// The starting Region or Availability Zone for metric to subscribe to.
	Source string `pulumi:"source"`
	// The statistic to subscribe to.
	Statistic string `pulumi:"statistic"`
}

// The set of arguments for constructing a NetworkPerformanceMetricSubscription resource.
type NetworkPerformanceMetricSubscriptionArgs struct {
	// The target Region or Availability Zone for the metric to subscribe to.
	Destination pulumi.StringInput
	// The metric type to subscribe to.
	Metric pulumi.StringInput
	// The starting Region or Availability Zone for metric to subscribe to.
	Source pulumi.StringInput
	// The statistic to subscribe to.
	Statistic pulumi.StringInput
}

func (NetworkPerformanceMetricSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPerformanceMetricSubscriptionArgs)(nil)).Elem()
}

type NetworkPerformanceMetricSubscriptionInput interface {
	pulumi.Input

	ToNetworkPerformanceMetricSubscriptionOutput() NetworkPerformanceMetricSubscriptionOutput
	ToNetworkPerformanceMetricSubscriptionOutputWithContext(ctx context.Context) NetworkPerformanceMetricSubscriptionOutput
}

func (*NetworkPerformanceMetricSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPerformanceMetricSubscription)(nil)).Elem()
}

func (i *NetworkPerformanceMetricSubscription) ToNetworkPerformanceMetricSubscriptionOutput() NetworkPerformanceMetricSubscriptionOutput {
	return i.ToNetworkPerformanceMetricSubscriptionOutputWithContext(context.Background())
}

func (i *NetworkPerformanceMetricSubscription) ToNetworkPerformanceMetricSubscriptionOutputWithContext(ctx context.Context) NetworkPerformanceMetricSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPerformanceMetricSubscriptionOutput)
}

type NetworkPerformanceMetricSubscriptionOutput struct{ *pulumi.OutputState }

func (NetworkPerformanceMetricSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPerformanceMetricSubscription)(nil)).Elem()
}

func (o NetworkPerformanceMetricSubscriptionOutput) ToNetworkPerformanceMetricSubscriptionOutput() NetworkPerformanceMetricSubscriptionOutput {
	return o
}

func (o NetworkPerformanceMetricSubscriptionOutput) ToNetworkPerformanceMetricSubscriptionOutputWithContext(ctx context.Context) NetworkPerformanceMetricSubscriptionOutput {
	return o
}

// The target Region or Availability Zone for the metric to subscribe to.
func (o NetworkPerformanceMetricSubscriptionOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPerformanceMetricSubscription) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// The metric type to subscribe to.
func (o NetworkPerformanceMetricSubscriptionOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPerformanceMetricSubscription) pulumi.StringOutput { return v.Metric }).(pulumi.StringOutput)
}

// The starting Region or Availability Zone for metric to subscribe to.
func (o NetworkPerformanceMetricSubscriptionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPerformanceMetricSubscription) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The statistic to subscribe to.
func (o NetworkPerformanceMetricSubscriptionOutput) Statistic() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPerformanceMetricSubscription) pulumi.StringOutput { return v.Statistic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPerformanceMetricSubscriptionInput)(nil)).Elem(), &NetworkPerformanceMetricSubscription{})
	pulumi.RegisterOutputType(NetworkPerformanceMetricSubscriptionOutput{})
}
