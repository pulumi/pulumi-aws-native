// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::Volume
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	var rv LookupVolumeResult
	err := ctx.Invoke("aws-native:ec2:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVolumeArgs struct {
	VolumeId string `pulumi:"volumeId"`
}

type LookupVolumeResult struct {
	AutoEnableIO       *bool       `pulumi:"autoEnableIO"`
	Iops               *int        `pulumi:"iops"`
	MultiAttachEnabled *bool       `pulumi:"multiAttachEnabled"`
	OutpostArn         *string     `pulumi:"outpostArn"`
	Size               *int        `pulumi:"size"`
	Tags               []VolumeTag `pulumi:"tags"`
	Throughput         *int        `pulumi:"throughput"`
	VolumeId           *string     `pulumi:"volumeId"`
	VolumeType         *string     `pulumi:"volumeType"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeResult, error) {
			args := v.(LookupVolumeArgs)
			r, err := LookupVolume(ctx, &args, opts...)
			var s LookupVolumeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVolumeResultOutput)
}

type LookupVolumeOutputArgs struct {
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) AutoEnableIO() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *bool { return v.AutoEnableIO }).(pulumi.BoolPtrOutput)
}

func (o LookupVolumeResultOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o LookupVolumeResultOutput) MultiAttachEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *bool { return v.MultiAttachEnabled }).(pulumi.BoolPtrOutput)
}

func (o LookupVolumeResultOutput) OutpostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.OutpostArn }).(pulumi.StringPtrOutput)
}

func (o LookupVolumeResultOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o LookupVolumeResultOutput) Tags() VolumeTagArrayOutput {
	return o.ApplyT(func(v LookupVolumeResult) []VolumeTag { return v.Tags }).(VolumeTagArrayOutput)
}

func (o LookupVolumeResultOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o LookupVolumeResultOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

func (o LookupVolumeResultOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
