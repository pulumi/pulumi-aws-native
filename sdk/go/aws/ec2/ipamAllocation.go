// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAMAllocation Type
type IpamAllocation struct {
	pulumi.CustomResourceState

	Cidr        pulumi.StringPtrOutput `pulumi:"cidr"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Id of the allocation.
	IpamPoolAllocationId pulumi.StringOutput `pulumi:"ipamPoolAllocationId"`
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringOutput `pulumi:"ipamPoolId"`
	// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength pulumi.IntPtrOutput `pulumi:"netmaskLength"`
}

// NewIpamAllocation registers a new resource with the given unique name, arguments, and options.
func NewIpamAllocation(ctx *pulumi.Context,
	name string, args *IpamAllocationArgs, opts ...pulumi.ResourceOption) (*IpamAllocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpamAllocation
	err := ctx.RegisterResource("aws-native:ec2:IpamAllocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamAllocation gets an existing IpamAllocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamAllocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamAllocationState, opts ...pulumi.ResourceOption) (*IpamAllocation, error) {
	var resource IpamAllocation
	err := ctx.ReadResource("aws-native:ec2:IpamAllocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamAllocation resources.
type ipamAllocationState struct {
}

type IpamAllocationState struct {
}

func (IpamAllocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamAllocationState)(nil)).Elem()
}

type ipamAllocationArgs struct {
	Cidr        *string `pulumi:"cidr"`
	Description *string `pulumi:"description"`
	// Id of the IPAM Pool.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

// The set of arguments for constructing a IpamAllocation resource.
type IpamAllocationArgs struct {
	Cidr        pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringInput
	// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength pulumi.IntPtrInput
}

func (IpamAllocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamAllocationArgs)(nil)).Elem()
}

type IpamAllocationInput interface {
	pulumi.Input

	ToIpamAllocationOutput() IpamAllocationOutput
	ToIpamAllocationOutputWithContext(ctx context.Context) IpamAllocationOutput
}

func (*IpamAllocation) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamAllocation)(nil)).Elem()
}

func (i *IpamAllocation) ToIpamAllocationOutput() IpamAllocationOutput {
	return i.ToIpamAllocationOutputWithContext(context.Background())
}

func (i *IpamAllocation) ToIpamAllocationOutputWithContext(ctx context.Context) IpamAllocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamAllocationOutput)
}

type IpamAllocationOutput struct{ *pulumi.OutputState }

func (IpamAllocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamAllocation)(nil)).Elem()
}

func (o IpamAllocationOutput) ToIpamAllocationOutput() IpamAllocationOutput {
	return o
}

func (o IpamAllocationOutput) ToIpamAllocationOutputWithContext(ctx context.Context) IpamAllocationOutput {
	return o
}

func (o IpamAllocationOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamAllocation) pulumi.StringPtrOutput { return v.Cidr }).(pulumi.StringPtrOutput)
}

func (o IpamAllocationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamAllocation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Id of the allocation.
func (o IpamAllocationOutput) IpamPoolAllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamAllocation) pulumi.StringOutput { return v.IpamPoolAllocationId }).(pulumi.StringOutput)
}

// Id of the IPAM Pool.
func (o IpamAllocationOutput) IpamPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamAllocation) pulumi.StringOutput { return v.IpamPoolId }).(pulumi.StringOutput)
}

// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
func (o IpamAllocationOutput) NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpamAllocation) pulumi.IntPtrOutput { return v.NetmaskLength }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamAllocationInput)(nil)).Elem(), &IpamAllocation{})
	pulumi.RegisterOutputType(IpamAllocationOutput{})
}
