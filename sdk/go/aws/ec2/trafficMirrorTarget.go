// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The description of the Traffic Mirror target.
type TrafficMirrorTarget struct {
	pulumi.CustomResourceState

	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The description of the Traffic Mirror target.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the Gateway Load Balancer endpoint.
	GatewayLoadBalancerEndpointId pulumi.StringPtrOutput `pulumi:"gatewayLoadBalancerEndpointId"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumi.StringPtrOutput `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumi.StringPtrOutput `pulumi:"networkLoadBalancerArn"`
	//  The tags to assign to the Traffic Mirror target.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewTrafficMirrorTarget registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorTarget(ctx *pulumi.Context,
	name string, args *TrafficMirrorTargetArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	if args == nil {
		args = &TrafficMirrorTargetArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"description",
		"gatewayLoadBalancerEndpointId",
		"networkInterfaceId",
		"networkLoadBalancerArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorTarget
	err := ctx.RegisterResource("aws-native:ec2:TrafficMirrorTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorTarget gets an existing TrafficMirrorTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorTargetState, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	var resource TrafficMirrorTarget
	err := ctx.ReadResource("aws-native:ec2:TrafficMirrorTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorTarget resources.
type trafficMirrorTargetState struct {
}

type TrafficMirrorTargetState struct {
}

func (TrafficMirrorTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetState)(nil)).Elem()
}

type trafficMirrorTargetArgs struct {
	// The description of the Traffic Mirror target.
	Description *string `pulumi:"description"`
	// The ID of the Gateway Load Balancer endpoint.
	GatewayLoadBalancerEndpointId *string `pulumi:"gatewayLoadBalancerEndpointId"`
	// The network interface ID that is associated with the target.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn *string `pulumi:"networkLoadBalancerArn"`
	//  The tags to assign to the Traffic Mirror target.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a TrafficMirrorTarget resource.
type TrafficMirrorTargetArgs struct {
	// The description of the Traffic Mirror target.
	Description pulumi.StringPtrInput
	// The ID of the Gateway Load Balancer endpoint.
	GatewayLoadBalancerEndpointId pulumi.StringPtrInput
	// The network interface ID that is associated with the target.
	NetworkInterfaceId pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
	NetworkLoadBalancerArn pulumi.StringPtrInput
	//  The tags to assign to the Traffic Mirror target.
	Tags aws.TagArrayInput
}

func (TrafficMirrorTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetArgs)(nil)).Elem()
}

type TrafficMirrorTargetInput interface {
	pulumi.Input

	ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput
	ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput
}

func (*TrafficMirrorTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorTarget)(nil)).Elem()
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput {
	return i.ToTrafficMirrorTargetOutputWithContext(context.Background())
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetOutput)
}

type TrafficMirrorTargetOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorTarget)(nil)).Elem()
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput {
	return o
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput {
	return o
}

func (o TrafficMirrorTargetOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The description of the Traffic Mirror target.
func (o TrafficMirrorTargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the Gateway Load Balancer endpoint.
func (o TrafficMirrorTargetOutput) GatewayLoadBalancerEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringPtrOutput { return v.GatewayLoadBalancerEndpointId }).(pulumi.StringPtrOutput)
}

// The network interface ID that is associated with the target.
func (o TrafficMirrorTargetOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringPtrOutput { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
func (o TrafficMirrorTargetOutput) NetworkLoadBalancerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringPtrOutput { return v.NetworkLoadBalancerArn }).(pulumi.StringPtrOutput)
}

// The tags to assign to the Traffic Mirror target.
func (o TrafficMirrorTargetOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorTargetInput)(nil)).Elem(), &TrafficMirrorTarget{})
	pulumi.RegisterOutputType(TrafficMirrorTargetOutput{})
}
