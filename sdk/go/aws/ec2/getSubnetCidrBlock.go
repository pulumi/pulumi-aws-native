// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::EC2::SubnetCidrBlock resource creates association between subnet and IPv6 CIDR
func LookupSubnetCidrBlock(ctx *pulumi.Context, args *LookupSubnetCidrBlockArgs, opts ...pulumi.InvokeOption) (*LookupSubnetCidrBlockResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetCidrBlockResult
	err := ctx.Invoke("aws-native:ec2:getSubnetCidrBlock", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSubnetCidrBlockArgs struct {
	// Information about the IPv6 association.
	Id string `pulumi:"id"`
}

type LookupSubnetCidrBlockResult struct {
	// Information about the IPv6 association.
	Id *string `pulumi:"id"`
	// The IP Source of an IPv6 Subnet CIDR Block.
	IpSource *string `pulumi:"ipSource"`
	// The value denoting whether an IPv6 Subnet CIDR Block is public or private.
	Ipv6AddressAttribute *string `pulumi:"ipv6AddressAttribute"`
}

func LookupSubnetCidrBlockOutput(ctx *pulumi.Context, args LookupSubnetCidrBlockOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetCidrBlockResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubnetCidrBlockResultOutput, error) {
			args := v.(LookupSubnetCidrBlockArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ec2:getSubnetCidrBlock", args, LookupSubnetCidrBlockResultOutput{}, options).(LookupSubnetCidrBlockResultOutput), nil
		}).(LookupSubnetCidrBlockResultOutput)
}

type LookupSubnetCidrBlockOutputArgs struct {
	// Information about the IPv6 association.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupSubnetCidrBlockOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetCidrBlockArgs)(nil)).Elem()
}

type LookupSubnetCidrBlockResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetCidrBlockResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetCidrBlockResult)(nil)).Elem()
}

func (o LookupSubnetCidrBlockResultOutput) ToLookupSubnetCidrBlockResultOutput() LookupSubnetCidrBlockResultOutput {
	return o
}

func (o LookupSubnetCidrBlockResultOutput) ToLookupSubnetCidrBlockResultOutputWithContext(ctx context.Context) LookupSubnetCidrBlockResultOutput {
	return o
}

// Information about the IPv6 association.
func (o LookupSubnetCidrBlockResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetCidrBlockResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The IP Source of an IPv6 Subnet CIDR Block.
func (o LookupSubnetCidrBlockResultOutput) IpSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetCidrBlockResult) *string { return v.IpSource }).(pulumi.StringPtrOutput)
}

// The value denoting whether an IPv6 Subnet CIDR Block is public or private.
func (o LookupSubnetCidrBlockResultOutput) Ipv6AddressAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetCidrBlockResult) *string { return v.Ipv6AddressAttribute }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetCidrBlockResultOutput{})
}
