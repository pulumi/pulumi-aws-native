// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::VPCPeeringConnection
type VPCPeeringConnection struct {
	pulumi.CustomResourceState

	// The AWS account ID of the owner of the accepter VPC.
	PeerOwnerId pulumi.StringPtrOutput `pulumi:"peerOwnerId"`
	// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
	PeerRegion pulumi.StringPtrOutput `pulumi:"peerRegion"`
	// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
	PeerRoleArn pulumi.StringPtrOutput `pulumi:"peerRoleArn"`
	// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
	PeerVpcId pulumi.StringOutput                `pulumi:"peerVpcId"`
	Tags      VPCPeeringConnectionTagArrayOutput `pulumi:"tags"`
	// The ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVPCPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVPCPeeringConnection(ctx *pulumi.Context,
	name string, args *VPCPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*VPCPeeringConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerVpcId == nil {
		return nil, errors.New("invalid value for required argument 'PeerVpcId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource VPCPeeringConnection
	err := ctx.RegisterResource("aws-native:ec2:VPCPeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPCPeeringConnection gets an existing VPCPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPCPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCPeeringConnectionState, opts ...pulumi.ResourceOption) (*VPCPeeringConnection, error) {
	var resource VPCPeeringConnection
	err := ctx.ReadResource("aws-native:ec2:VPCPeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPCPeeringConnection resources.
type vpcpeeringConnectionState struct {
}

type VPCPeeringConnectionState struct {
}

func (VPCPeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcpeeringConnectionState)(nil)).Elem()
}

type vpcpeeringConnectionArgs struct {
	// The AWS account ID of the owner of the accepter VPC.
	PeerOwnerId *string `pulumi:"peerOwnerId"`
	// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
	PeerRegion *string `pulumi:"peerRegion"`
	// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
	PeerRoleArn *string `pulumi:"peerRoleArn"`
	// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
	PeerVpcId string                    `pulumi:"peerVpcId"`
	Tags      []VPCPeeringConnectionTag `pulumi:"tags"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VPCPeeringConnection resource.
type VPCPeeringConnectionArgs struct {
	// The AWS account ID of the owner of the accepter VPC.
	PeerOwnerId pulumi.StringPtrInput
	// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
	PeerRegion pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
	PeerRoleArn pulumi.StringPtrInput
	// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
	PeerVpcId pulumi.StringInput
	Tags      VPCPeeringConnectionTagArrayInput
	// The ID of the VPC.
	VpcId pulumi.StringInput
}

func (VPCPeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcpeeringConnectionArgs)(nil)).Elem()
}

type VPCPeeringConnectionInput interface {
	pulumi.Input

	ToVPCPeeringConnectionOutput() VPCPeeringConnectionOutput
	ToVPCPeeringConnectionOutputWithContext(ctx context.Context) VPCPeeringConnectionOutput
}

func (*VPCPeeringConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCPeeringConnection)(nil)).Elem()
}

func (i *VPCPeeringConnection) ToVPCPeeringConnectionOutput() VPCPeeringConnectionOutput {
	return i.ToVPCPeeringConnectionOutputWithContext(context.Background())
}

func (i *VPCPeeringConnection) ToVPCPeeringConnectionOutputWithContext(ctx context.Context) VPCPeeringConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCPeeringConnectionOutput)
}

type VPCPeeringConnectionOutput struct{ *pulumi.OutputState }

func (VPCPeeringConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCPeeringConnection)(nil)).Elem()
}

func (o VPCPeeringConnectionOutput) ToVPCPeeringConnectionOutput() VPCPeeringConnectionOutput {
	return o
}

func (o VPCPeeringConnectionOutput) ToVPCPeeringConnectionOutputWithContext(ctx context.Context) VPCPeeringConnectionOutput {
	return o
}

// The AWS account ID of the owner of the accepter VPC.
func (o VPCPeeringConnectionOutput) PeerOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VPCPeeringConnection) pulumi.StringPtrOutput { return v.PeerOwnerId }).(pulumi.StringPtrOutput)
}

// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
func (o VPCPeeringConnectionOutput) PeerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VPCPeeringConnection) pulumi.StringPtrOutput { return v.PeerRegion }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
func (o VPCPeeringConnectionOutput) PeerRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VPCPeeringConnection) pulumi.StringPtrOutput { return v.PeerRoleArn }).(pulumi.StringPtrOutput)
}

// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
func (o VPCPeeringConnectionOutput) PeerVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCPeeringConnection) pulumi.StringOutput { return v.PeerVpcId }).(pulumi.StringOutput)
}

func (o VPCPeeringConnectionOutput) Tags() VPCPeeringConnectionTagArrayOutput {
	return o.ApplyT(func(v *VPCPeeringConnection) VPCPeeringConnectionTagArrayOutput { return v.Tags }).(VPCPeeringConnectionTagArrayOutput)
}

// The ID of the VPC.
func (o VPCPeeringConnectionOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCPeeringConnection) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VPCPeeringConnectionInput)(nil)).Elem(), &VPCPeeringConnection{})
	pulumi.RegisterOutputType(VPCPeeringConnectionOutput{})
}
