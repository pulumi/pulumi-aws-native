// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Schema of AWS::EC2::IPAMScope Type
type IpamScope struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the IPAM scope.
	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
	IpamArn pulumi.StringOutput `pulumi:"ipamArn"`
	// The Id of the IPAM this scope is a part of.
	IpamId pulumi.StringOutput `pulumi:"ipamId"`
	// Id of the IPAM scope.
	IpamScopeId pulumi.StringOutput `pulumi:"ipamScopeId"`
	// Determines whether this scope contains publicly routable space or space for a private network
	IpamScopeType IpamScopeTypeOutput `pulumi:"ipamScopeType"`
	// Is this one of the default scopes created with the IPAM.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// The number of pools that currently exist in this scope.
	PoolCount pulumi.IntOutput `pulumi:"poolCount"`
	// An array of key-value pairs to apply to this resource.
	Tags IpamScopeTagArrayOutput `pulumi:"tags"`
}

// NewIpamScope registers a new resource with the given unique name, arguments, and options.
func NewIpamScope(ctx *pulumi.Context,
	name string, args *IpamScopeArgs, opts ...pulumi.ResourceOption) (*IpamScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamId == nil {
		return nil, errors.New("invalid value for required argument 'IpamId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"ipamId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpamScope
	err := ctx.RegisterResource("aws-native:ec2:IpamScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamScope gets an existing IpamScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamScopeState, opts ...pulumi.ResourceOption) (*IpamScope, error) {
	var resource IpamScope
	err := ctx.ReadResource("aws-native:ec2:IpamScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamScope resources.
type ipamScopeState struct {
}

type IpamScopeState struct {
}

func (IpamScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamScopeState)(nil)).Elem()
}

type ipamScopeArgs struct {
	Description *string `pulumi:"description"`
	// The Id of the IPAM this scope is a part of.
	IpamId string `pulumi:"ipamId"`
	// An array of key-value pairs to apply to this resource.
	Tags []IpamScopeTag `pulumi:"tags"`
}

// The set of arguments for constructing a IpamScope resource.
type IpamScopeArgs struct {
	Description pulumi.StringPtrInput
	// The Id of the IPAM this scope is a part of.
	IpamId pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags IpamScopeTagArrayInput
}

func (IpamScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamScopeArgs)(nil)).Elem()
}

type IpamScopeInput interface {
	pulumi.Input

	ToIpamScopeOutput() IpamScopeOutput
	ToIpamScopeOutputWithContext(ctx context.Context) IpamScopeOutput
}

func (*IpamScope) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamScope)(nil)).Elem()
}

func (i *IpamScope) ToIpamScopeOutput() IpamScopeOutput {
	return i.ToIpamScopeOutputWithContext(context.Background())
}

func (i *IpamScope) ToIpamScopeOutputWithContext(ctx context.Context) IpamScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamScopeOutput)
}

func (i *IpamScope) ToOutput(ctx context.Context) pulumix.Output[*IpamScope] {
	return pulumix.Output[*IpamScope]{
		OutputState: i.ToIpamScopeOutputWithContext(ctx).OutputState,
	}
}

type IpamScopeOutput struct{ *pulumi.OutputState }

func (IpamScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamScope)(nil)).Elem()
}

func (o IpamScopeOutput) ToIpamScopeOutput() IpamScopeOutput {
	return o
}

func (o IpamScopeOutput) ToIpamScopeOutputWithContext(ctx context.Context) IpamScopeOutput {
	return o
}

func (o IpamScopeOutput) ToOutput(ctx context.Context) pulumix.Output[*IpamScope] {
	return pulumix.Output[*IpamScope]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the IPAM scope.
func (o IpamScopeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamScope) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o IpamScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
func (o IpamScopeOutput) IpamArn() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamScope) pulumi.StringOutput { return v.IpamArn }).(pulumi.StringOutput)
}

// The Id of the IPAM this scope is a part of.
func (o IpamScopeOutput) IpamId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamScope) pulumi.StringOutput { return v.IpamId }).(pulumi.StringOutput)
}

// Id of the IPAM scope.
func (o IpamScopeOutput) IpamScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamScope) pulumi.StringOutput { return v.IpamScopeId }).(pulumi.StringOutput)
}

// Determines whether this scope contains publicly routable space or space for a private network
func (o IpamScopeOutput) IpamScopeType() IpamScopeTypeOutput {
	return o.ApplyT(func(v *IpamScope) IpamScopeTypeOutput { return v.IpamScopeType }).(IpamScopeTypeOutput)
}

// Is this one of the default scopes created with the IPAM.
func (o IpamScopeOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpamScope) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// The number of pools that currently exist in this scope.
func (o IpamScopeOutput) PoolCount() pulumi.IntOutput {
	return o.ApplyT(func(v *IpamScope) pulumi.IntOutput { return v.PoolCount }).(pulumi.IntOutput)
}

// An array of key-value pairs to apply to this resource.
func (o IpamScopeOutput) Tags() IpamScopeTagArrayOutput {
	return o.ApplyT(func(v *IpamScope) IpamScopeTagArrayOutput { return v.Tags }).(IpamScopeTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamScopeInput)(nil)).Elem(), &IpamScope{})
	pulumi.RegisterOutputType(IpamScopeOutput{})
}
