// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::CapacityReservationFleet
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec2.NewCapacityReservationFleet(ctx, "ec2CapacityReservationFleetCanary", &ec2.CapacityReservationFleetArgs{
//				AllocationStrategy: pulumi.String("prioritized"),
//				InstanceTypeSpecifications: ec2.CapacityReservationFleetInstanceTypeSpecificationArray{
//					&ec2.CapacityReservationFleetInstanceTypeSpecificationArgs{
//						InstanceType:     pulumi.String("c4.large"),
//						InstancePlatform: pulumi.String("Linux/UNIX"),
//						AvailabilityZone: pulumi.String("us-east-1a"),
//						Weight:           pulumi.Float64(1),
//						Priority:         pulumi.Int(1),
//					},
//					&ec2.CapacityReservationFleetInstanceTypeSpecificationArgs{
//						InstanceType:     pulumi.String("c5.large"),
//						InstancePlatform: pulumi.String("Linux/UNIX"),
//						AvailabilityZone: pulumi.String("us-east-1a"),
//						Weight:           pulumi.Float64(1),
//						Priority:         pulumi.Int(2),
//					},
//				},
//				Tenancy:               ec2.CapacityReservationFleetTenancyDefault,
//				TotalTargetCapacity:   pulumi.Int(2),
//				InstanceMatchCriteria: ec2.CapacityReservationFleetInstanceMatchCriteriaOpen,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CapacityReservationFleet struct {
	pulumi.CustomResourceState

	// The strategy used by the Capacity Reservation Fleet to determine which of the specified instance types to use. Currently, only the `prioritized` allocation strategy is supported. For more information, see [Allocation strategy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy) in the *Amazon EC2 User Guide* .
	//
	// Valid values: `prioritized`
	AllocationStrategy pulumi.StringPtrOutput `pulumi:"allocationStrategy"`
	// The ID of the Capacity Reservation Fleet.
	CapacityReservationFleetId pulumi.StringOutput `pulumi:"capacityReservationFleetId"`
	// The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation Fleet expires, its state changes to `expired` and all of the Capacity Reservations in the Fleet expire.
	//
	// The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you specify `5/31/2019` , `13:30:55` , the Capacity Reservation Fleet is guaranteed to expire between `13:30:55` and `14:30:55` on `5/31/2019` .
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All Capacity Reservations in the Fleet inherit this instance matching criteria.
	//
	// Currently, Capacity Reservation Fleets support `open` instance matching criteria only. This means that instances that have matching attributes (instance type, platform, and Availability Zone) run in the Capacity Reservations automatically. Instances do not need to explicitly target a Capacity Reservation Fleet to use its reserved capacity.
	InstanceMatchCriteria CapacityReservationFleetInstanceMatchCriteriaPtrOutput `pulumi:"instanceMatchCriteria"`
	// Information about the instance types for which to reserve the capacity.
	InstanceTypeSpecifications CapacityReservationFleetInstanceTypeSpecificationArrayOutput `pulumi:"instanceTypeSpecifications"`
	// Used to add an end date to a Capacity Reservation Fleet that has no end date and time. To add an end date to a Capacity Reservation Fleet, specify `true` for this paramater and specify the end date and time (in UTC time format) for the *EndDate* parameter.
	NoRemoveEndDate pulumi.BoolPtrOutput `pulumi:"noRemoveEndDate"`
	// Used to remove an end date from a Capacity Reservation Fleet that is configured to end automatically at a specific date and time. To remove the end date from a Capacity Reservation Fleet, specify `true` for this paramater and omit the *EndDate* parameter.
	RemoveEndDate pulumi.BoolPtrOutput `pulumi:"removeEndDate"`
	// The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned to the Capacity Reservations in the Fleet.
	TagSpecifications CapacityReservationFleetTagSpecificationArrayOutput `pulumi:"tagSpecifications"`
	// Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of the following tenancy settings:
	//
	// - `default` - The Capacity Reservation Fleet is created on hardware that is shared with other AWS accounts .
	// - `dedicated` - The Capacity Reservations are created on single-tenant hardware that is dedicated to a single AWS account .
	Tenancy CapacityReservationFleetTenancyPtrOutput `pulumi:"tenancy"`
	// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, together with the instance type weights that you assign to each instance type used by the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the *Amazon EC2 User Guide* .
	TotalTargetCapacity pulumi.IntPtrOutput `pulumi:"totalTargetCapacity"`
}

// NewCapacityReservationFleet registers a new resource with the given unique name, arguments, and options.
func NewCapacityReservationFleet(ctx *pulumi.Context,
	name string, args *CapacityReservationFleetArgs, opts ...pulumi.ResourceOption) (*CapacityReservationFleet, error) {
	if args == nil {
		args = &CapacityReservationFleetArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"allocationStrategy",
		"endDate",
		"instanceMatchCriteria",
		"instanceTypeSpecifications[*]",
		"tagSpecifications[*]",
		"tenancy",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CapacityReservationFleet
	err := ctx.RegisterResource("aws-native:ec2:CapacityReservationFleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityReservationFleet gets an existing CapacityReservationFleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityReservationFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityReservationFleetState, opts ...pulumi.ResourceOption) (*CapacityReservationFleet, error) {
	var resource CapacityReservationFleet
	err := ctx.ReadResource("aws-native:ec2:CapacityReservationFleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityReservationFleet resources.
type capacityReservationFleetState struct {
}

type CapacityReservationFleetState struct {
}

func (CapacityReservationFleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityReservationFleetState)(nil)).Elem()
}

type capacityReservationFleetArgs struct {
	// The strategy used by the Capacity Reservation Fleet to determine which of the specified instance types to use. Currently, only the `prioritized` allocation strategy is supported. For more information, see [Allocation strategy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy) in the *Amazon EC2 User Guide* .
	//
	// Valid values: `prioritized`
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation Fleet expires, its state changes to `expired` and all of the Capacity Reservations in the Fleet expire.
	//
	// The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you specify `5/31/2019` , `13:30:55` , the Capacity Reservation Fleet is guaranteed to expire between `13:30:55` and `14:30:55` on `5/31/2019` .
	EndDate *string `pulumi:"endDate"`
	// Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All Capacity Reservations in the Fleet inherit this instance matching criteria.
	//
	// Currently, Capacity Reservation Fleets support `open` instance matching criteria only. This means that instances that have matching attributes (instance type, platform, and Availability Zone) run in the Capacity Reservations automatically. Instances do not need to explicitly target a Capacity Reservation Fleet to use its reserved capacity.
	InstanceMatchCriteria *CapacityReservationFleetInstanceMatchCriteria `pulumi:"instanceMatchCriteria"`
	// Information about the instance types for which to reserve the capacity.
	InstanceTypeSpecifications []CapacityReservationFleetInstanceTypeSpecification `pulumi:"instanceTypeSpecifications"`
	// Used to add an end date to a Capacity Reservation Fleet that has no end date and time. To add an end date to a Capacity Reservation Fleet, specify `true` for this paramater and specify the end date and time (in UTC time format) for the *EndDate* parameter.
	NoRemoveEndDate *bool `pulumi:"noRemoveEndDate"`
	// Used to remove an end date from a Capacity Reservation Fleet that is configured to end automatically at a specific date and time. To remove the end date from a Capacity Reservation Fleet, specify `true` for this paramater and omit the *EndDate* parameter.
	RemoveEndDate *bool `pulumi:"removeEndDate"`
	// The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned to the Capacity Reservations in the Fleet.
	TagSpecifications []CapacityReservationFleetTagSpecification `pulumi:"tagSpecifications"`
	// Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of the following tenancy settings:
	//
	// - `default` - The Capacity Reservation Fleet is created on hardware that is shared with other AWS accounts .
	// - `dedicated` - The Capacity Reservations are created on single-tenant hardware that is dedicated to a single AWS account .
	Tenancy *CapacityReservationFleetTenancy `pulumi:"tenancy"`
	// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, together with the instance type weights that you assign to each instance type used by the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the *Amazon EC2 User Guide* .
	TotalTargetCapacity *int `pulumi:"totalTargetCapacity"`
}

// The set of arguments for constructing a CapacityReservationFleet resource.
type CapacityReservationFleetArgs struct {
	// The strategy used by the Capacity Reservation Fleet to determine which of the specified instance types to use. Currently, only the `prioritized` allocation strategy is supported. For more information, see [Allocation strategy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy) in the *Amazon EC2 User Guide* .
	//
	// Valid values: `prioritized`
	AllocationStrategy pulumi.StringPtrInput
	// The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation Fleet expires, its state changes to `expired` and all of the Capacity Reservations in the Fleet expire.
	//
	// The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you specify `5/31/2019` , `13:30:55` , the Capacity Reservation Fleet is guaranteed to expire between `13:30:55` and `14:30:55` on `5/31/2019` .
	EndDate pulumi.StringPtrInput
	// Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All Capacity Reservations in the Fleet inherit this instance matching criteria.
	//
	// Currently, Capacity Reservation Fleets support `open` instance matching criteria only. This means that instances that have matching attributes (instance type, platform, and Availability Zone) run in the Capacity Reservations automatically. Instances do not need to explicitly target a Capacity Reservation Fleet to use its reserved capacity.
	InstanceMatchCriteria CapacityReservationFleetInstanceMatchCriteriaPtrInput
	// Information about the instance types for which to reserve the capacity.
	InstanceTypeSpecifications CapacityReservationFleetInstanceTypeSpecificationArrayInput
	// Used to add an end date to a Capacity Reservation Fleet that has no end date and time. To add an end date to a Capacity Reservation Fleet, specify `true` for this paramater and specify the end date and time (in UTC time format) for the *EndDate* parameter.
	NoRemoveEndDate pulumi.BoolPtrInput
	// Used to remove an end date from a Capacity Reservation Fleet that is configured to end automatically at a specific date and time. To remove the end date from a Capacity Reservation Fleet, specify `true` for this paramater and omit the *EndDate* parameter.
	RemoveEndDate pulumi.BoolPtrInput
	// The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned to the Capacity Reservations in the Fleet.
	TagSpecifications CapacityReservationFleetTagSpecificationArrayInput
	// Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of the following tenancy settings:
	//
	// - `default` - The Capacity Reservation Fleet is created on hardware that is shared with other AWS accounts .
	// - `dedicated` - The Capacity Reservations are created on single-tenant hardware that is dedicated to a single AWS account .
	Tenancy CapacityReservationFleetTenancyPtrInput
	// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, together with the instance type weights that you assign to each instance type used by the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the *Amazon EC2 User Guide* .
	TotalTargetCapacity pulumi.IntPtrInput
}

func (CapacityReservationFleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityReservationFleetArgs)(nil)).Elem()
}

type CapacityReservationFleetInput interface {
	pulumi.Input

	ToCapacityReservationFleetOutput() CapacityReservationFleetOutput
	ToCapacityReservationFleetOutputWithContext(ctx context.Context) CapacityReservationFleetOutput
}

func (*CapacityReservationFleet) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservationFleet)(nil)).Elem()
}

func (i *CapacityReservationFleet) ToCapacityReservationFleetOutput() CapacityReservationFleetOutput {
	return i.ToCapacityReservationFleetOutputWithContext(context.Background())
}

func (i *CapacityReservationFleet) ToCapacityReservationFleetOutputWithContext(ctx context.Context) CapacityReservationFleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityReservationFleetOutput)
}

type CapacityReservationFleetOutput struct{ *pulumi.OutputState }

func (CapacityReservationFleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservationFleet)(nil)).Elem()
}

func (o CapacityReservationFleetOutput) ToCapacityReservationFleetOutput() CapacityReservationFleetOutput {
	return o
}

func (o CapacityReservationFleetOutput) ToCapacityReservationFleetOutputWithContext(ctx context.Context) CapacityReservationFleetOutput {
	return o
}

// The strategy used by the Capacity Reservation Fleet to determine which of the specified instance types to use. Currently, only the `prioritized` allocation strategy is supported. For more information, see [Allocation strategy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy) in the *Amazon EC2 User Guide* .
//
// Valid values: `prioritized`
func (o CapacityReservationFleetOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) pulumi.StringPtrOutput { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

// The ID of the Capacity Reservation Fleet.
func (o CapacityReservationFleetOutput) CapacityReservationFleetId() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) pulumi.StringOutput { return v.CapacityReservationFleetId }).(pulumi.StringOutput)
}

// The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation Fleet expires, its state changes to `expired` and all of the Capacity Reservations in the Fleet expire.
//
// The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you specify `5/31/2019` , `13:30:55` , the Capacity Reservation Fleet is guaranteed to expire between `13:30:55` and `14:30:55` on `5/31/2019` .
func (o CapacityReservationFleetOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

// Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All Capacity Reservations in the Fleet inherit this instance matching criteria.
//
// Currently, Capacity Reservation Fleets support `open` instance matching criteria only. This means that instances that have matching attributes (instance type, platform, and Availability Zone) run in the Capacity Reservations automatically. Instances do not need to explicitly target a Capacity Reservation Fleet to use its reserved capacity.
func (o CapacityReservationFleetOutput) InstanceMatchCriteria() CapacityReservationFleetInstanceMatchCriteriaPtrOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) CapacityReservationFleetInstanceMatchCriteriaPtrOutput {
		return v.InstanceMatchCriteria
	}).(CapacityReservationFleetInstanceMatchCriteriaPtrOutput)
}

// Information about the instance types for which to reserve the capacity.
func (o CapacityReservationFleetOutput) InstanceTypeSpecifications() CapacityReservationFleetInstanceTypeSpecificationArrayOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) CapacityReservationFleetInstanceTypeSpecificationArrayOutput {
		return v.InstanceTypeSpecifications
	}).(CapacityReservationFleetInstanceTypeSpecificationArrayOutput)
}

// Used to add an end date to a Capacity Reservation Fleet that has no end date and time. To add an end date to a Capacity Reservation Fleet, specify `true` for this paramater and specify the end date and time (in UTC time format) for the *EndDate* parameter.
func (o CapacityReservationFleetOutput) NoRemoveEndDate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) pulumi.BoolPtrOutput { return v.NoRemoveEndDate }).(pulumi.BoolPtrOutput)
}

// Used to remove an end date from a Capacity Reservation Fleet that is configured to end automatically at a specific date and time. To remove the end date from a Capacity Reservation Fleet, specify `true` for this paramater and omit the *EndDate* parameter.
func (o CapacityReservationFleetOutput) RemoveEndDate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) pulumi.BoolPtrOutput { return v.RemoveEndDate }).(pulumi.BoolPtrOutput)
}

// The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned to the Capacity Reservations in the Fleet.
func (o CapacityReservationFleetOutput) TagSpecifications() CapacityReservationFleetTagSpecificationArrayOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) CapacityReservationFleetTagSpecificationArrayOutput {
		return v.TagSpecifications
	}).(CapacityReservationFleetTagSpecificationArrayOutput)
}

// Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of the following tenancy settings:
//
// - `default` - The Capacity Reservation Fleet is created on hardware that is shared with other AWS accounts .
// - `dedicated` - The Capacity Reservations are created on single-tenant hardware that is dedicated to a single AWS account .
func (o CapacityReservationFleetOutput) Tenancy() CapacityReservationFleetTenancyPtrOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) CapacityReservationFleetTenancyPtrOutput { return v.Tenancy }).(CapacityReservationFleetTenancyPtrOutput)
}

// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, together with the instance type weights that you assign to each instance type used by the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the *Amazon EC2 User Guide* .
func (o CapacityReservationFleetOutput) TotalTargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityReservationFleet) pulumi.IntPtrOutput { return v.TotalTargetCapacity }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityReservationFleetInput)(nil)).Elem(), &CapacityReservationFleet{})
	pulumi.RegisterOutputType(CapacityReservationFleetOutput{})
}
