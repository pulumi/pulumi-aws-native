// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::EC2Fleet
type Ec2Fleet struct {
	pulumi.CustomResourceState

	Context                          pulumi.StringPtrOutput                              `pulumi:"context"`
	ExcessCapacityTerminationPolicy  Ec2FleetExcessCapacityTerminationPolicyPtrOutput    `pulumi:"excessCapacityTerminationPolicy"`
	FleetId                          pulumi.StringOutput                                 `pulumi:"fleetId"`
	LaunchTemplateConfigs            Ec2FleetFleetLaunchTemplateConfigRequestArrayOutput `pulumi:"launchTemplateConfigs"`
	OnDemandOptions                  Ec2FleetOnDemandOptionsRequestPtrOutput             `pulumi:"onDemandOptions"`
	ReplaceUnhealthyInstances        pulumi.BoolPtrOutput                                `pulumi:"replaceUnhealthyInstances"`
	SpotOptions                      Ec2FleetSpotOptionsRequestPtrOutput                 `pulumi:"spotOptions"`
	TagSpecifications                Ec2FleetTagSpecificationArrayOutput                 `pulumi:"tagSpecifications"`
	TargetCapacitySpecification      Ec2FleetTargetCapacitySpecificationRequestOutput    `pulumi:"targetCapacitySpecification"`
	TerminateInstancesWithExpiration pulumi.BoolPtrOutput                                `pulumi:"terminateInstancesWithExpiration"`
	Type                             Ec2FleetTypePtrOutput                               `pulumi:"type"`
	ValidFrom                        pulumi.StringPtrOutput                              `pulumi:"validFrom"`
	ValidUntil                       pulumi.StringPtrOutput                              `pulumi:"validUntil"`
}

// NewEc2Fleet registers a new resource with the given unique name, arguments, and options.
func NewEc2Fleet(ctx *pulumi.Context,
	name string, args *Ec2FleetArgs, opts ...pulumi.ResourceOption) (*Ec2Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LaunchTemplateConfigs == nil {
		return nil, errors.New("invalid value for required argument 'LaunchTemplateConfigs'")
	}
	if args.TargetCapacitySpecification == nil {
		return nil, errors.New("invalid value for required argument 'TargetCapacitySpecification'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ec2Fleet
	err := ctx.RegisterResource("aws-native:ec2:Ec2Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEc2Fleet gets an existing Ec2Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEc2Fleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ec2FleetState, opts ...pulumi.ResourceOption) (*Ec2Fleet, error) {
	var resource Ec2Fleet
	err := ctx.ReadResource("aws-native:ec2:Ec2Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ec2Fleet resources.
type ec2FleetState struct {
}

type Ec2FleetState struct {
}

func (Ec2FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2FleetState)(nil)).Elem()
}

type ec2FleetArgs struct {
	Context                          *string                                    `pulumi:"context"`
	ExcessCapacityTerminationPolicy  *Ec2FleetExcessCapacityTerminationPolicy   `pulumi:"excessCapacityTerminationPolicy"`
	LaunchTemplateConfigs            []Ec2FleetFleetLaunchTemplateConfigRequest `pulumi:"launchTemplateConfigs"`
	OnDemandOptions                  *Ec2FleetOnDemandOptionsRequest            `pulumi:"onDemandOptions"`
	ReplaceUnhealthyInstances        *bool                                      `pulumi:"replaceUnhealthyInstances"`
	SpotOptions                      *Ec2FleetSpotOptionsRequest                `pulumi:"spotOptions"`
	TagSpecifications                []Ec2FleetTagSpecification                 `pulumi:"tagSpecifications"`
	TargetCapacitySpecification      Ec2FleetTargetCapacitySpecificationRequest `pulumi:"targetCapacitySpecification"`
	TerminateInstancesWithExpiration *bool                                      `pulumi:"terminateInstancesWithExpiration"`
	Type                             *Ec2FleetType                              `pulumi:"type"`
	ValidFrom                        *string                                    `pulumi:"validFrom"`
	ValidUntil                       *string                                    `pulumi:"validUntil"`
}

// The set of arguments for constructing a Ec2Fleet resource.
type Ec2FleetArgs struct {
	Context                          pulumi.StringPtrInput
	ExcessCapacityTerminationPolicy  Ec2FleetExcessCapacityTerminationPolicyPtrInput
	LaunchTemplateConfigs            Ec2FleetFleetLaunchTemplateConfigRequestArrayInput
	OnDemandOptions                  Ec2FleetOnDemandOptionsRequestPtrInput
	ReplaceUnhealthyInstances        pulumi.BoolPtrInput
	SpotOptions                      Ec2FleetSpotOptionsRequestPtrInput
	TagSpecifications                Ec2FleetTagSpecificationArrayInput
	TargetCapacitySpecification      Ec2FleetTargetCapacitySpecificationRequestInput
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	Type                             Ec2FleetTypePtrInput
	ValidFrom                        pulumi.StringPtrInput
	ValidUntil                       pulumi.StringPtrInput
}

func (Ec2FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2FleetArgs)(nil)).Elem()
}

type Ec2FleetInput interface {
	pulumi.Input

	ToEc2FleetOutput() Ec2FleetOutput
	ToEc2FleetOutputWithContext(ctx context.Context) Ec2FleetOutput
}

func (*Ec2Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2Fleet)(nil)).Elem()
}

func (i *Ec2Fleet) ToEc2FleetOutput() Ec2FleetOutput {
	return i.ToEc2FleetOutputWithContext(context.Background())
}

func (i *Ec2Fleet) ToEc2FleetOutputWithContext(ctx context.Context) Ec2FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ec2FleetOutput)
}

type Ec2FleetOutput struct{ *pulumi.OutputState }

func (Ec2FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ec2Fleet)(nil)).Elem()
}

func (o Ec2FleetOutput) ToEc2FleetOutput() Ec2FleetOutput {
	return o
}

func (o Ec2FleetOutput) ToEc2FleetOutputWithContext(ctx context.Context) Ec2FleetOutput {
	return o
}

func (o Ec2FleetOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) pulumi.StringPtrOutput { return v.Context }).(pulumi.StringPtrOutput)
}

func (o Ec2FleetOutput) ExcessCapacityTerminationPolicy() Ec2FleetExcessCapacityTerminationPolicyPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) Ec2FleetExcessCapacityTerminationPolicyPtrOutput {
		return v.ExcessCapacityTerminationPolicy
	}).(Ec2FleetExcessCapacityTerminationPolicyPtrOutput)
}

func (o Ec2FleetOutput) FleetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ec2Fleet) pulumi.StringOutput { return v.FleetId }).(pulumi.StringOutput)
}

func (o Ec2FleetOutput) LaunchTemplateConfigs() Ec2FleetFleetLaunchTemplateConfigRequestArrayOutput {
	return o.ApplyT(func(v *Ec2Fleet) Ec2FleetFleetLaunchTemplateConfigRequestArrayOutput { return v.LaunchTemplateConfigs }).(Ec2FleetFleetLaunchTemplateConfigRequestArrayOutput)
}

func (o Ec2FleetOutput) OnDemandOptions() Ec2FleetOnDemandOptionsRequestPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) Ec2FleetOnDemandOptionsRequestPtrOutput { return v.OnDemandOptions }).(Ec2FleetOnDemandOptionsRequestPtrOutput)
}

func (o Ec2FleetOutput) ReplaceUnhealthyInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) pulumi.BoolPtrOutput { return v.ReplaceUnhealthyInstances }).(pulumi.BoolPtrOutput)
}

func (o Ec2FleetOutput) SpotOptions() Ec2FleetSpotOptionsRequestPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) Ec2FleetSpotOptionsRequestPtrOutput { return v.SpotOptions }).(Ec2FleetSpotOptionsRequestPtrOutput)
}

func (o Ec2FleetOutput) TagSpecifications() Ec2FleetTagSpecificationArrayOutput {
	return o.ApplyT(func(v *Ec2Fleet) Ec2FleetTagSpecificationArrayOutput { return v.TagSpecifications }).(Ec2FleetTagSpecificationArrayOutput)
}

func (o Ec2FleetOutput) TargetCapacitySpecification() Ec2FleetTargetCapacitySpecificationRequestOutput {
	return o.ApplyT(func(v *Ec2Fleet) Ec2FleetTargetCapacitySpecificationRequestOutput {
		return v.TargetCapacitySpecification
	}).(Ec2FleetTargetCapacitySpecificationRequestOutput)
}

func (o Ec2FleetOutput) TerminateInstancesWithExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) pulumi.BoolPtrOutput { return v.TerminateInstancesWithExpiration }).(pulumi.BoolPtrOutput)
}

func (o Ec2FleetOutput) Type() Ec2FleetTypePtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) Ec2FleetTypePtrOutput { return v.Type }).(Ec2FleetTypePtrOutput)
}

func (o Ec2FleetOutput) ValidFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) pulumi.StringPtrOutput { return v.ValidFrom }).(pulumi.StringPtrOutput)
}

func (o Ec2FleetOutput) ValidUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ec2Fleet) pulumi.StringPtrOutput { return v.ValidUntil }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ec2FleetInput)(nil)).Elem(), &Ec2Fleet{})
	pulumi.RegisterOutputType(Ec2FleetOutput{})
}
