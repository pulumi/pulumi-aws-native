// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for for AWS::EC2::TrafficMirrorFilterRule
func LookupTrafficMirrorFilterRule(ctx *pulumi.Context, args *LookupTrafficMirrorFilterRuleArgs, opts ...pulumi.InvokeOption) (*LookupTrafficMirrorFilterRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTrafficMirrorFilterRuleResult
	err := ctx.Invoke("aws-native:ec2:getTrafficMirrorFilterRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTrafficMirrorFilterRuleArgs struct {
	// The ID of the Traffic Mirror Filter rule.
	TrafficMirrorFilterRuleId string `pulumi:"trafficMirrorFilterRuleId"`
}

type LookupTrafficMirrorFilterRuleResult struct {
	// The description of the Traffic Mirror Filter rule.
	Description *string `pulumi:"description"`
	// The destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// The destination port range.
	DestinationPortRange *TrafficMirrorFilterRuleTrafficMirrorPortRange `pulumi:"destinationPortRange"`
	// The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
	Protocol *int `pulumi:"protocol"`
	// The action to take on the filtered traffic (accept/reject).
	RuleAction *string `pulumi:"ruleAction"`
	// The number of the Traffic Mirror rule.
	RuleNumber *int `pulumi:"ruleNumber"`
	// The source CIDR block to assign to the Traffic Mirror Filter rule.
	SourceCidrBlock *string `pulumi:"sourceCidrBlock"`
	// The source port range.
	SourcePortRange *TrafficMirrorFilterRuleTrafficMirrorPortRange `pulumi:"sourcePortRange"`
	// Any tags assigned to the Traffic Mirror Filter rule.
	Tags []aws.Tag `pulumi:"tags"`
	// The direction of traffic (ingress/egress).
	TrafficDirection *string `pulumi:"trafficDirection"`
	// The ID of the Traffic Mirror Filter rule.
	TrafficMirrorFilterRuleId *string `pulumi:"trafficMirrorFilterRuleId"`
}

func LookupTrafficMirrorFilterRuleOutput(ctx *pulumi.Context, args LookupTrafficMirrorFilterRuleOutputArgs, opts ...pulumi.InvokeOption) LookupTrafficMirrorFilterRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTrafficMirrorFilterRuleResultOutput, error) {
			args := v.(LookupTrafficMirrorFilterRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ec2:getTrafficMirrorFilterRule", args, LookupTrafficMirrorFilterRuleResultOutput{}, options).(LookupTrafficMirrorFilterRuleResultOutput), nil
		}).(LookupTrafficMirrorFilterRuleResultOutput)
}

type LookupTrafficMirrorFilterRuleOutputArgs struct {
	// The ID of the Traffic Mirror Filter rule.
	TrafficMirrorFilterRuleId pulumi.StringInput `pulumi:"trafficMirrorFilterRuleId"`
}

func (LookupTrafficMirrorFilterRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrafficMirrorFilterRuleArgs)(nil)).Elem()
}

type LookupTrafficMirrorFilterRuleResultOutput struct{ *pulumi.OutputState }

func (LookupTrafficMirrorFilterRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrafficMirrorFilterRuleResult)(nil)).Elem()
}

func (o LookupTrafficMirrorFilterRuleResultOutput) ToLookupTrafficMirrorFilterRuleResultOutput() LookupTrafficMirrorFilterRuleResultOutput {
	return o
}

func (o LookupTrafficMirrorFilterRuleResultOutput) ToLookupTrafficMirrorFilterRuleResultOutputWithContext(ctx context.Context) LookupTrafficMirrorFilterRuleResultOutput {
	return o
}

// The description of the Traffic Mirror Filter rule.
func (o LookupTrafficMirrorFilterRuleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination CIDR block to assign to the Traffic Mirror rule.
func (o LookupTrafficMirrorFilterRuleResultOutput) DestinationCidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *string { return v.DestinationCidrBlock }).(pulumi.StringPtrOutput)
}

// The destination port range.
func (o LookupTrafficMirrorFilterRuleResultOutput) DestinationPortRange() TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *TrafficMirrorFilterRuleTrafficMirrorPortRange {
		return v.DestinationPortRange
	}).(TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput)
}

// The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
func (o LookupTrafficMirrorFilterRuleResultOutput) Protocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *int { return v.Protocol }).(pulumi.IntPtrOutput)
}

// The action to take on the filtered traffic (accept/reject).
func (o LookupTrafficMirrorFilterRuleResultOutput) RuleAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *string { return v.RuleAction }).(pulumi.StringPtrOutput)
}

// The number of the Traffic Mirror rule.
func (o LookupTrafficMirrorFilterRuleResultOutput) RuleNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *int { return v.RuleNumber }).(pulumi.IntPtrOutput)
}

// The source CIDR block to assign to the Traffic Mirror Filter rule.
func (o LookupTrafficMirrorFilterRuleResultOutput) SourceCidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *string { return v.SourceCidrBlock }).(pulumi.StringPtrOutput)
}

// The source port range.
func (o LookupTrafficMirrorFilterRuleResultOutput) SourcePortRange() TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *TrafficMirrorFilterRuleTrafficMirrorPortRange {
		return v.SourcePortRange
	}).(TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput)
}

// Any tags assigned to the Traffic Mirror Filter rule.
func (o LookupTrafficMirrorFilterRuleResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The direction of traffic (ingress/egress).
func (o LookupTrafficMirrorFilterRuleResultOutput) TrafficDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *string { return v.TrafficDirection }).(pulumi.StringPtrOutput)
}

// The ID of the Traffic Mirror Filter rule.
func (o LookupTrafficMirrorFilterRuleResultOutput) TrafficMirrorFilterRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorFilterRuleResult) *string { return v.TrafficMirrorFilterRuleId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTrafficMirrorFilterRuleResultOutput{})
}
