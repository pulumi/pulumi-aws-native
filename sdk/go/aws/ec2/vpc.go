// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::VPC
//
// Deprecated: VPC is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type VPC struct {
	pulumi.CustomResourceState

	CidrBlock             pulumi.StringOutput      `pulumi:"cidrBlock"`
	CidrBlockAssociations pulumi.StringArrayOutput `pulumi:"cidrBlockAssociations"`
	DefaultNetworkAcl     pulumi.StringOutput      `pulumi:"defaultNetworkAcl"`
	DefaultSecurityGroup  pulumi.StringOutput      `pulumi:"defaultSecurityGroup"`
	EnableDnsHostnames    pulumi.BoolPtrOutput     `pulumi:"enableDnsHostnames"`
	EnableDnsSupport      pulumi.BoolPtrOutput     `pulumi:"enableDnsSupport"`
	InstanceTenancy       pulumi.StringPtrOutput   `pulumi:"instanceTenancy"`
	Ipv6CidrBlocks        pulumi.StringArrayOutput `pulumi:"ipv6CidrBlocks"`
	Tags                  VPCTagArrayOutput        `pulumi:"tags"`
}

// NewVPC registers a new resource with the given unique name, arguments, and options.
func NewVPC(ctx *pulumi.Context,
	name string, args *VPCArgs, opts ...pulumi.ResourceOption) (*VPC, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	var resource VPC
	err := ctx.RegisterResource("aws-native:ec2:VPC", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPC gets an existing VPC resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPC(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCState, opts ...pulumi.ResourceOption) (*VPC, error) {
	var resource VPC
	err := ctx.ReadResource("aws-native:ec2:VPC", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPC resources.
type vpcState struct {
}

type VPCState struct {
}

func (VPCState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	CidrBlock          string   `pulumi:"cidrBlock"`
	EnableDnsHostnames *bool    `pulumi:"enableDnsHostnames"`
	EnableDnsSupport   *bool    `pulumi:"enableDnsSupport"`
	InstanceTenancy    *string  `pulumi:"instanceTenancy"`
	Tags               []VPCTag `pulumi:"tags"`
}

// The set of arguments for constructing a VPC resource.
type VPCArgs struct {
	CidrBlock          pulumi.StringInput
	EnableDnsHostnames pulumi.BoolPtrInput
	EnableDnsSupport   pulumi.BoolPtrInput
	InstanceTenancy    pulumi.StringPtrInput
	Tags               VPCTagArrayInput
}

func (VPCArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VPCInput interface {
	pulumi.Input

	ToVPCOutput() VPCOutput
	ToVPCOutputWithContext(ctx context.Context) VPCOutput
}

func (*VPC) ElementType() reflect.Type {
	return reflect.TypeOf((*VPC)(nil))
}

func (i *VPC) ToVPCOutput() VPCOutput {
	return i.ToVPCOutputWithContext(context.Background())
}

func (i *VPC) ToVPCOutputWithContext(ctx context.Context) VPCOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCOutput)
}

type VPCOutput struct{ *pulumi.OutputState }

func (VPCOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPC)(nil))
}

func (o VPCOutput) ToVPCOutput() VPCOutput {
	return o
}

func (o VPCOutput) ToVPCOutputWithContext(ctx context.Context) VPCOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VPCOutput{})
}
