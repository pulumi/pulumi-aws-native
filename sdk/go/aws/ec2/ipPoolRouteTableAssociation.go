// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::IpPoolRouteTableAssociation
type IpPoolRouteTableAssociation struct {
	pulumi.CustomResourceState

	// The route table association ID.
	AssociationId pulumi.StringOutput `pulumi:"associationId"`
	// The ID of the public IPv4 pool.
	PublicIpv4Pool pulumi.StringOutput `pulumi:"publicIpv4Pool"`
	// The ID of the route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
}

// NewIpPoolRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewIpPoolRouteTableAssociation(ctx *pulumi.Context,
	name string, args *IpPoolRouteTableAssociationArgs, opts ...pulumi.ResourceOption) (*IpPoolRouteTableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicIpv4Pool == nil {
		return nil, errors.New("invalid value for required argument 'PublicIpv4Pool'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"publicIpv4Pool",
		"routeTableId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpPoolRouteTableAssociation
	err := ctx.RegisterResource("aws-native:ec2:IpPoolRouteTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpPoolRouteTableAssociation gets an existing IpPoolRouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpPoolRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpPoolRouteTableAssociationState, opts ...pulumi.ResourceOption) (*IpPoolRouteTableAssociation, error) {
	var resource IpPoolRouteTableAssociation
	err := ctx.ReadResource("aws-native:ec2:IpPoolRouteTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpPoolRouteTableAssociation resources.
type ipPoolRouteTableAssociationState struct {
}

type IpPoolRouteTableAssociationState struct {
}

func (IpPoolRouteTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipPoolRouteTableAssociationState)(nil)).Elem()
}

type ipPoolRouteTableAssociationArgs struct {
	// The ID of the public IPv4 pool.
	PublicIpv4Pool string `pulumi:"publicIpv4Pool"`
	// The ID of the route table.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a IpPoolRouteTableAssociation resource.
type IpPoolRouteTableAssociationArgs struct {
	// The ID of the public IPv4 pool.
	PublicIpv4Pool pulumi.StringInput
	// The ID of the route table.
	RouteTableId pulumi.StringInput
}

func (IpPoolRouteTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipPoolRouteTableAssociationArgs)(nil)).Elem()
}

type IpPoolRouteTableAssociationInput interface {
	pulumi.Input

	ToIpPoolRouteTableAssociationOutput() IpPoolRouteTableAssociationOutput
	ToIpPoolRouteTableAssociationOutputWithContext(ctx context.Context) IpPoolRouteTableAssociationOutput
}

func (*IpPoolRouteTableAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**IpPoolRouteTableAssociation)(nil)).Elem()
}

func (i *IpPoolRouteTableAssociation) ToIpPoolRouteTableAssociationOutput() IpPoolRouteTableAssociationOutput {
	return i.ToIpPoolRouteTableAssociationOutputWithContext(context.Background())
}

func (i *IpPoolRouteTableAssociation) ToIpPoolRouteTableAssociationOutputWithContext(ctx context.Context) IpPoolRouteTableAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPoolRouteTableAssociationOutput)
}

type IpPoolRouteTableAssociationOutput struct{ *pulumi.OutputState }

func (IpPoolRouteTableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpPoolRouteTableAssociation)(nil)).Elem()
}

func (o IpPoolRouteTableAssociationOutput) ToIpPoolRouteTableAssociationOutput() IpPoolRouteTableAssociationOutput {
	return o
}

func (o IpPoolRouteTableAssociationOutput) ToIpPoolRouteTableAssociationOutputWithContext(ctx context.Context) IpPoolRouteTableAssociationOutput {
	return o
}

// The route table association ID.
func (o IpPoolRouteTableAssociationOutput) AssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPoolRouteTableAssociation) pulumi.StringOutput { return v.AssociationId }).(pulumi.StringOutput)
}

// The ID of the public IPv4 pool.
func (o IpPoolRouteTableAssociationOutput) PublicIpv4Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPoolRouteTableAssociation) pulumi.StringOutput { return v.PublicIpv4Pool }).(pulumi.StringOutput)
}

// The ID of the route table.
func (o IpPoolRouteTableAssociationOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPoolRouteTableAssociation) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpPoolRouteTableAssociationInput)(nil)).Elem(), &IpPoolRouteTableAssociation{})
	pulumi.RegisterOutputType(IpPoolRouteTableAssociationOutput{})
}
