// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "aws-native:ec2:CapacityReservation":
		r = &CapacityReservation{}
	case "aws-native:ec2:CapacityReservationFleet":
		r = &CapacityReservationFleet{}
	case "aws-native:ec2:CarrierGateway":
		r = &CarrierGateway{}
	case "aws-native:ec2:ClientVpnAuthorizationRule":
		r = &ClientVpnAuthorizationRule{}
	case "aws-native:ec2:ClientVpnEndpoint":
		r = &ClientVpnEndpoint{}
	case "aws-native:ec2:ClientVpnRoute":
		r = &ClientVpnRoute{}
	case "aws-native:ec2:ClientVpnTargetNetworkAssociation":
		r = &ClientVpnTargetNetworkAssociation{}
	case "aws-native:ec2:CustomerGateway":
		r = &CustomerGateway{}
	case "aws-native:ec2:DhcpOptions":
		r = &DhcpOptions{}
	case "aws-native:ec2:Ec2Fleet":
		r = &Ec2Fleet{}
	case "aws-native:ec2:EgressOnlyInternetGateway":
		r = &EgressOnlyInternetGateway{}
	case "aws-native:ec2:Eip":
		r = &Eip{}
	case "aws-native:ec2:EipAssociation":
		r = &EipAssociation{}
	case "aws-native:ec2:EnclaveCertificateIamRoleAssociation":
		r = &EnclaveCertificateIamRoleAssociation{}
	case "aws-native:ec2:FlowLog":
		r = &FlowLog{}
	case "aws-native:ec2:GatewayRouteTableAssociation":
		r = &GatewayRouteTableAssociation{}
	case "aws-native:ec2:Host":
		r = &Host{}
	case "aws-native:ec2:Instance":
		r = &Instance{}
	case "aws-native:ec2:InstanceConnectEndpoint":
		r = &InstanceConnectEndpoint{}
	case "aws-native:ec2:InternetGateway":
		r = &InternetGateway{}
	case "aws-native:ec2:Ipam":
		r = &Ipam{}
	case "aws-native:ec2:IpamAllocation":
		r = &IpamAllocation{}
	case "aws-native:ec2:IpamPool":
		r = &IpamPool{}
	case "aws-native:ec2:IpamPoolCidr":
		r = &IpamPoolCidr{}
	case "aws-native:ec2:IpamResourceDiscovery":
		r = &IpamResourceDiscovery{}
	case "aws-native:ec2:IpamResourceDiscoveryAssociation":
		r = &IpamResourceDiscoveryAssociation{}
	case "aws-native:ec2:IpamScope":
		r = &IpamScope{}
	case "aws-native:ec2:KeyPair":
		r = &KeyPair{}
	case "aws-native:ec2:LaunchTemplate":
		r = &LaunchTemplate{}
	case "aws-native:ec2:LocalGatewayRoute":
		r = &LocalGatewayRoute{}
	case "aws-native:ec2:LocalGatewayRouteTable":
		r = &LocalGatewayRouteTable{}
	case "aws-native:ec2:LocalGatewayRouteTableVirtualInterfaceGroupAssociation":
		r = &LocalGatewayRouteTableVirtualInterfaceGroupAssociation{}
	case "aws-native:ec2:LocalGatewayRouteTableVpcAssociation":
		r = &LocalGatewayRouteTableVpcAssociation{}
	case "aws-native:ec2:NatGateway":
		r = &NatGateway{}
	case "aws-native:ec2:NetworkAcl":
		r = &NetworkAcl{}
	case "aws-native:ec2:NetworkAclEntry":
		r = &NetworkAclEntry{}
	case "aws-native:ec2:NetworkInsightsAccessScope":
		r = &NetworkInsightsAccessScope{}
	case "aws-native:ec2:NetworkInsightsAccessScopeAnalysis":
		r = &NetworkInsightsAccessScopeAnalysis{}
	case "aws-native:ec2:NetworkInsightsAnalysis":
		r = &NetworkInsightsAnalysis{}
	case "aws-native:ec2:NetworkInsightsPath":
		r = &NetworkInsightsPath{}
	case "aws-native:ec2:NetworkInterface":
		r = &NetworkInterface{}
	case "aws-native:ec2:NetworkInterfaceAttachment":
		r = &NetworkInterfaceAttachment{}
	case "aws-native:ec2:NetworkInterfacePermission":
		r = &NetworkInterfacePermission{}
	case "aws-native:ec2:NetworkPerformanceMetricSubscription":
		r = &NetworkPerformanceMetricSubscription{}
	case "aws-native:ec2:PlacementGroup":
		r = &PlacementGroup{}
	case "aws-native:ec2:PrefixList":
		r = &PrefixList{}
	case "aws-native:ec2:Route":
		r = &Route{}
	case "aws-native:ec2:RouteTable":
		r = &RouteTable{}
	case "aws-native:ec2:SecurityGroup":
		r = &SecurityGroup{}
	case "aws-native:ec2:SecurityGroupEgress":
		r = &SecurityGroupEgress{}
	case "aws-native:ec2:SecurityGroupIngress":
		r = &SecurityGroupIngress{}
	case "aws-native:ec2:SnapshotBlockPublicAccess":
		r = &SnapshotBlockPublicAccess{}
	case "aws-native:ec2:SpotFleet":
		r = &SpotFleet{}
	case "aws-native:ec2:Subnet":
		r = &Subnet{}
	case "aws-native:ec2:SubnetCidrBlock":
		r = &SubnetCidrBlock{}
	case "aws-native:ec2:SubnetNetworkAclAssociation":
		r = &SubnetNetworkAclAssociation{}
	case "aws-native:ec2:SubnetRouteTableAssociation":
		r = &SubnetRouteTableAssociation{}
	case "aws-native:ec2:TrafficMirrorFilter":
		r = &TrafficMirrorFilter{}
	case "aws-native:ec2:TrafficMirrorFilterRule":
		r = &TrafficMirrorFilterRule{}
	case "aws-native:ec2:TrafficMirrorSession":
		r = &TrafficMirrorSession{}
	case "aws-native:ec2:TrafficMirrorTarget":
		r = &TrafficMirrorTarget{}
	case "aws-native:ec2:TransitGateway":
		r = &TransitGateway{}
	case "aws-native:ec2:TransitGatewayAttachment":
		r = &TransitGatewayAttachment{}
	case "aws-native:ec2:TransitGatewayConnect":
		r = &TransitGatewayConnect{}
	case "aws-native:ec2:TransitGatewayMulticastDomain":
		r = &TransitGatewayMulticastDomain{}
	case "aws-native:ec2:TransitGatewayMulticastDomainAssociation":
		r = &TransitGatewayMulticastDomainAssociation{}
	case "aws-native:ec2:TransitGatewayMulticastGroupMember":
		r = &TransitGatewayMulticastGroupMember{}
	case "aws-native:ec2:TransitGatewayMulticastGroupSource":
		r = &TransitGatewayMulticastGroupSource{}
	case "aws-native:ec2:TransitGatewayPeeringAttachment":
		r = &TransitGatewayPeeringAttachment{}
	case "aws-native:ec2:TransitGatewayRoute":
		r = &TransitGatewayRoute{}
	case "aws-native:ec2:TransitGatewayRouteTable":
		r = &TransitGatewayRouteTable{}
	case "aws-native:ec2:TransitGatewayRouteTableAssociation":
		r = &TransitGatewayRouteTableAssociation{}
	case "aws-native:ec2:TransitGatewayRouteTablePropagation":
		r = &TransitGatewayRouteTablePropagation{}
	case "aws-native:ec2:TransitGatewayVpcAttachment":
		r = &TransitGatewayVpcAttachment{}
	case "aws-native:ec2:VerifiedAccessEndpoint":
		r = &VerifiedAccessEndpoint{}
	case "aws-native:ec2:VerifiedAccessGroup":
		r = &VerifiedAccessGroup{}
	case "aws-native:ec2:VerifiedAccessInstance":
		r = &VerifiedAccessInstance{}
	case "aws-native:ec2:VerifiedAccessTrustProvider":
		r = &VerifiedAccessTrustProvider{}
	case "aws-native:ec2:Volume":
		r = &Volume{}
	case "aws-native:ec2:VolumeAttachment":
		r = &VolumeAttachment{}
	case "aws-native:ec2:Vpc":
		r = &Vpc{}
	case "aws-native:ec2:VpcCidrBlock":
		r = &VpcCidrBlock{}
	case "aws-native:ec2:VpcEndpoint":
		r = &VpcEndpoint{}
	case "aws-native:ec2:VpcEndpointConnectionNotification":
		r = &VpcEndpointConnectionNotification{}
	case "aws-native:ec2:VpcEndpointService":
		r = &VpcEndpointService{}
	case "aws-native:ec2:VpcEndpointServicePermissions":
		r = &VpcEndpointServicePermissions{}
	case "aws-native:ec2:VpcGatewayAttachment":
		r = &VpcGatewayAttachment{}
	case "aws-native:ec2:VpcPeeringConnection":
		r = &VpcPeeringConnection{}
	case "aws-native:ec2:VpcdhcpOptionsAssociation":
		r = &VpcdhcpOptionsAssociation{}
	case "aws-native:ec2:VpnConnection":
		r = &VpnConnection{}
	case "aws-native:ec2:VpnConnectionRoute":
		r = &VpnConnectionRoute{}
	case "aws-native:ec2:VpnGateway":
		r = &VpnGateway{}
	case "aws-native:ec2:VpnGatewayRoutePropagation":
		r = &VpnGatewayRoutePropagation{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"aws-native",
		"ec2",
		&module{version},
	)
}
