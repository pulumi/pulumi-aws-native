// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The description of the Traffic Mirror target.
func LookupTrafficMirrorTarget(ctx *pulumi.Context, args *LookupTrafficMirrorTargetArgs, opts ...pulumi.InvokeOption) (*LookupTrafficMirrorTargetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTrafficMirrorTargetResult
	err := ctx.Invoke("aws-native:ec2:getTrafficMirrorTarget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTrafficMirrorTargetArgs struct {
	Id string `pulumi:"id"`
}

type LookupTrafficMirrorTargetResult struct {
	Id *string `pulumi:"id"`
	//  The tags to assign to the Traffic Mirror target.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupTrafficMirrorTargetOutput(ctx *pulumi.Context, args LookupTrafficMirrorTargetOutputArgs, opts ...pulumi.InvokeOption) LookupTrafficMirrorTargetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTrafficMirrorTargetResultOutput, error) {
			args := v.(LookupTrafficMirrorTargetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ec2:getTrafficMirrorTarget", args, LookupTrafficMirrorTargetResultOutput{}, options).(LookupTrafficMirrorTargetResultOutput), nil
		}).(LookupTrafficMirrorTargetResultOutput)
}

type LookupTrafficMirrorTargetOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTrafficMirrorTargetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrafficMirrorTargetArgs)(nil)).Elem()
}

type LookupTrafficMirrorTargetResultOutput struct{ *pulumi.OutputState }

func (LookupTrafficMirrorTargetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrafficMirrorTargetResult)(nil)).Elem()
}

func (o LookupTrafficMirrorTargetResultOutput) ToLookupTrafficMirrorTargetResultOutput() LookupTrafficMirrorTargetResultOutput {
	return o
}

func (o LookupTrafficMirrorTargetResultOutput) ToLookupTrafficMirrorTargetResultOutputWithContext(ctx context.Context) LookupTrafficMirrorTargetResultOutput {
	return o
}

func (o LookupTrafficMirrorTargetResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrafficMirrorTargetResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The tags to assign to the Traffic Mirror target.
func (o LookupTrafficMirrorTargetResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupTrafficMirrorTargetResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTrafficMirrorTargetResultOutput{})
}
