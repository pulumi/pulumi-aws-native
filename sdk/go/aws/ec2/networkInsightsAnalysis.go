// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EC2::NetworkInsightsAnalysis
type NetworkInsightsAnalysis struct {
	pulumi.CustomResourceState

	// The member accounts that contain resources that the path can traverse.
	AdditionalAccounts pulumi.StringArrayOutput `pulumi:"additionalAccounts"`
	// Potential intermediate components.
	AlternatePathHints NetworkInsightsAnalysisAlternatePathHintArrayOutput `pulumi:"alternatePathHints"`
	// The explanations. For more information, see [Reachability Analyzer explanation codes](https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html) .
	Explanations NetworkInsightsAnalysisExplanationArrayOutput `pulumi:"explanations"`
	// The Amazon Resource Names (ARN) of the resources that the path must traverse.
	FilterInArns pulumi.StringArrayOutput `pulumi:"filterInArns"`
	// The Amazon Resource Names (ARN) of the resources that the path must ignore.
	FilterOutArns pulumi.StringArrayOutput `pulumi:"filterOutArns"`
	// The components in the path from source to destination.
	ForwardPathComponents NetworkInsightsAnalysisPathComponentArrayOutput `pulumi:"forwardPathComponents"`
	// The Amazon Resource Name (ARN) of the network insights analysis.
	NetworkInsightsAnalysisArn pulumi.StringOutput `pulumi:"networkInsightsAnalysisArn"`
	// The ID of the network insights analysis.
	NetworkInsightsAnalysisId pulumi.StringOutput `pulumi:"networkInsightsAnalysisId"`
	// The ID of the path.
	NetworkInsightsPathId pulumi.StringOutput `pulumi:"networkInsightsPathId"`
	// Indicates whether the destination is reachable from the source.
	NetworkPathFound pulumi.BoolOutput `pulumi:"networkPathFound"`
	// The components in the path from destination to source.
	ReturnPathComponents NetworkInsightsAnalysisPathComponentArrayOutput `pulumi:"returnPathComponents"`
	// The time the analysis started.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// The status of the network insights analysis.
	Status NetworkInsightsAnalysisStatusOutput `pulumi:"status"`
	// The status message, if the status is `failed` .
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// The IDs of potential intermediate accounts.
	SuggestedAccounts pulumi.StringArrayOutput `pulumi:"suggestedAccounts"`
	// The tags to apply.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewNetworkInsightsAnalysis registers a new resource with the given unique name, arguments, and options.
func NewNetworkInsightsAnalysis(ctx *pulumi.Context,
	name string, args *NetworkInsightsAnalysisArgs, opts ...pulumi.ResourceOption) (*NetworkInsightsAnalysis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInsightsPathId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInsightsPathId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"filterInArns[*]",
		"filterOutArns[*]",
		"networkInsightsPathId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInsightsAnalysis
	err := ctx.RegisterResource("aws-native:ec2:NetworkInsightsAnalysis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInsightsAnalysis gets an existing NetworkInsightsAnalysis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInsightsAnalysis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInsightsAnalysisState, opts ...pulumi.ResourceOption) (*NetworkInsightsAnalysis, error) {
	var resource NetworkInsightsAnalysis
	err := ctx.ReadResource("aws-native:ec2:NetworkInsightsAnalysis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInsightsAnalysis resources.
type networkInsightsAnalysisState struct {
}

type NetworkInsightsAnalysisState struct {
}

func (NetworkInsightsAnalysisState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInsightsAnalysisState)(nil)).Elem()
}

type networkInsightsAnalysisArgs struct {
	// The member accounts that contain resources that the path can traverse.
	AdditionalAccounts []string `pulumi:"additionalAccounts"`
	// The Amazon Resource Names (ARN) of the resources that the path must traverse.
	FilterInArns []string `pulumi:"filterInArns"`
	// The Amazon Resource Names (ARN) of the resources that the path must ignore.
	FilterOutArns []string `pulumi:"filterOutArns"`
	// The ID of the path.
	NetworkInsightsPathId string `pulumi:"networkInsightsPathId"`
	// The tags to apply.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkInsightsAnalysis resource.
type NetworkInsightsAnalysisArgs struct {
	// The member accounts that contain resources that the path can traverse.
	AdditionalAccounts pulumi.StringArrayInput
	// The Amazon Resource Names (ARN) of the resources that the path must traverse.
	FilterInArns pulumi.StringArrayInput
	// The Amazon Resource Names (ARN) of the resources that the path must ignore.
	FilterOutArns pulumi.StringArrayInput
	// The ID of the path.
	NetworkInsightsPathId pulumi.StringInput
	// The tags to apply.
	Tags aws.TagArrayInput
}

func (NetworkInsightsAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInsightsAnalysisArgs)(nil)).Elem()
}

type NetworkInsightsAnalysisInput interface {
	pulumi.Input

	ToNetworkInsightsAnalysisOutput() NetworkInsightsAnalysisOutput
	ToNetworkInsightsAnalysisOutputWithContext(ctx context.Context) NetworkInsightsAnalysisOutput
}

func (*NetworkInsightsAnalysis) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInsightsAnalysis)(nil)).Elem()
}

func (i *NetworkInsightsAnalysis) ToNetworkInsightsAnalysisOutput() NetworkInsightsAnalysisOutput {
	return i.ToNetworkInsightsAnalysisOutputWithContext(context.Background())
}

func (i *NetworkInsightsAnalysis) ToNetworkInsightsAnalysisOutputWithContext(ctx context.Context) NetworkInsightsAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInsightsAnalysisOutput)
}

type NetworkInsightsAnalysisOutput struct{ *pulumi.OutputState }

func (NetworkInsightsAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInsightsAnalysis)(nil)).Elem()
}

func (o NetworkInsightsAnalysisOutput) ToNetworkInsightsAnalysisOutput() NetworkInsightsAnalysisOutput {
	return o
}

func (o NetworkInsightsAnalysisOutput) ToNetworkInsightsAnalysisOutputWithContext(ctx context.Context) NetworkInsightsAnalysisOutput {
	return o
}

// The member accounts that contain resources that the path can traverse.
func (o NetworkInsightsAnalysisOutput) AdditionalAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringArrayOutput { return v.AdditionalAccounts }).(pulumi.StringArrayOutput)
}

// Potential intermediate components.
func (o NetworkInsightsAnalysisOutput) AlternatePathHints() NetworkInsightsAnalysisAlternatePathHintArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) NetworkInsightsAnalysisAlternatePathHintArrayOutput {
		return v.AlternatePathHints
	}).(NetworkInsightsAnalysisAlternatePathHintArrayOutput)
}

// The explanations. For more information, see [Reachability Analyzer explanation codes](https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html) .
func (o NetworkInsightsAnalysisOutput) Explanations() NetworkInsightsAnalysisExplanationArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) NetworkInsightsAnalysisExplanationArrayOutput { return v.Explanations }).(NetworkInsightsAnalysisExplanationArrayOutput)
}

// The Amazon Resource Names (ARN) of the resources that the path must traverse.
func (o NetworkInsightsAnalysisOutput) FilterInArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringArrayOutput { return v.FilterInArns }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Names (ARN) of the resources that the path must ignore.
func (o NetworkInsightsAnalysisOutput) FilterOutArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringArrayOutput { return v.FilterOutArns }).(pulumi.StringArrayOutput)
}

// The components in the path from source to destination.
func (o NetworkInsightsAnalysisOutput) ForwardPathComponents() NetworkInsightsAnalysisPathComponentArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) NetworkInsightsAnalysisPathComponentArrayOutput {
		return v.ForwardPathComponents
	}).(NetworkInsightsAnalysisPathComponentArrayOutput)
}

// The Amazon Resource Name (ARN) of the network insights analysis.
func (o NetworkInsightsAnalysisOutput) NetworkInsightsAnalysisArn() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringOutput { return v.NetworkInsightsAnalysisArn }).(pulumi.StringOutput)
}

// The ID of the network insights analysis.
func (o NetworkInsightsAnalysisOutput) NetworkInsightsAnalysisId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringOutput { return v.NetworkInsightsAnalysisId }).(pulumi.StringOutput)
}

// The ID of the path.
func (o NetworkInsightsAnalysisOutput) NetworkInsightsPathId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringOutput { return v.NetworkInsightsPathId }).(pulumi.StringOutput)
}

// Indicates whether the destination is reachable from the source.
func (o NetworkInsightsAnalysisOutput) NetworkPathFound() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.BoolOutput { return v.NetworkPathFound }).(pulumi.BoolOutput)
}

// The components in the path from destination to source.
func (o NetworkInsightsAnalysisOutput) ReturnPathComponents() NetworkInsightsAnalysisPathComponentArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) NetworkInsightsAnalysisPathComponentArrayOutput {
		return v.ReturnPathComponents
	}).(NetworkInsightsAnalysisPathComponentArrayOutput)
}

// The time the analysis started.
func (o NetworkInsightsAnalysisOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// The status of the network insights analysis.
func (o NetworkInsightsAnalysisOutput) Status() NetworkInsightsAnalysisStatusOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) NetworkInsightsAnalysisStatusOutput { return v.Status }).(NetworkInsightsAnalysisStatusOutput)
}

// The status message, if the status is `failed` .
func (o NetworkInsightsAnalysisOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// The IDs of potential intermediate accounts.
func (o NetworkInsightsAnalysisOutput) SuggestedAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) pulumi.StringArrayOutput { return v.SuggestedAccounts }).(pulumi.StringArrayOutput)
}

// The tags to apply.
func (o NetworkInsightsAnalysisOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *NetworkInsightsAnalysis) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInsightsAnalysisInput)(nil)).Elem(), &NetworkInsightsAnalysis{})
	pulumi.RegisterOutputType(NetworkInsightsAnalysisOutput{})
}
