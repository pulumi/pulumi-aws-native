// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::CapacityReservationFleet
func LookupCapacityReservationFleet(ctx *pulumi.Context, args *LookupCapacityReservationFleetArgs, opts ...pulumi.InvokeOption) (*LookupCapacityReservationFleetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCapacityReservationFleetResult
	err := ctx.Invoke("aws-native:ec2:getCapacityReservationFleet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCapacityReservationFleetArgs struct {
	// The ID of the Capacity Reservation Fleet.
	CapacityReservationFleetId string `pulumi:"capacityReservationFleetId"`
}

type LookupCapacityReservationFleetResult struct {
	// The ID of the Capacity Reservation Fleet.
	CapacityReservationFleetId *string `pulumi:"capacityReservationFleetId"`
	// Used to add an end date to a Capacity Reservation Fleet that has no end date and time. To add an end date to a Capacity Reservation Fleet, specify `true` for this paramater and specify the end date and time (in UTC time format) for the *EndDate* parameter.
	NoRemoveEndDate *bool `pulumi:"noRemoveEndDate"`
	// Used to remove an end date from a Capacity Reservation Fleet that is configured to end automatically at a specific date and time. To remove the end date from a Capacity Reservation Fleet, specify `true` for this paramater and omit the *EndDate* parameter.
	RemoveEndDate *bool `pulumi:"removeEndDate"`
	// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, together with the instance type weights that you assign to each instance type used by the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the *Amazon EC2 User Guide* .
	TotalTargetCapacity *int `pulumi:"totalTargetCapacity"`
}

func LookupCapacityReservationFleetOutput(ctx *pulumi.Context, args LookupCapacityReservationFleetOutputArgs, opts ...pulumi.InvokeOption) LookupCapacityReservationFleetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCapacityReservationFleetResultOutput, error) {
			args := v.(LookupCapacityReservationFleetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ec2:getCapacityReservationFleet", args, LookupCapacityReservationFleetResultOutput{}, options).(LookupCapacityReservationFleetResultOutput), nil
		}).(LookupCapacityReservationFleetResultOutput)
}

type LookupCapacityReservationFleetOutputArgs struct {
	// The ID of the Capacity Reservation Fleet.
	CapacityReservationFleetId pulumi.StringInput `pulumi:"capacityReservationFleetId"`
}

func (LookupCapacityReservationFleetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCapacityReservationFleetArgs)(nil)).Elem()
}

type LookupCapacityReservationFleetResultOutput struct{ *pulumi.OutputState }

func (LookupCapacityReservationFleetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCapacityReservationFleetResult)(nil)).Elem()
}

func (o LookupCapacityReservationFleetResultOutput) ToLookupCapacityReservationFleetResultOutput() LookupCapacityReservationFleetResultOutput {
	return o
}

func (o LookupCapacityReservationFleetResultOutput) ToLookupCapacityReservationFleetResultOutputWithContext(ctx context.Context) LookupCapacityReservationFleetResultOutput {
	return o
}

// The ID of the Capacity Reservation Fleet.
func (o LookupCapacityReservationFleetResultOutput) CapacityReservationFleetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityReservationFleetResult) *string { return v.CapacityReservationFleetId }).(pulumi.StringPtrOutput)
}

// Used to add an end date to a Capacity Reservation Fleet that has no end date and time. To add an end date to a Capacity Reservation Fleet, specify `true` for this paramater and specify the end date and time (in UTC time format) for the *EndDate* parameter.
func (o LookupCapacityReservationFleetResultOutput) NoRemoveEndDate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityReservationFleetResult) *bool { return v.NoRemoveEndDate }).(pulumi.BoolPtrOutput)
}

// Used to remove an end date from a Capacity Reservation Fleet that is configured to end automatically at a specific date and time. To remove the end date from a Capacity Reservation Fleet, specify `true` for this paramater and omit the *EndDate* parameter.
func (o LookupCapacityReservationFleetResultOutput) RemoveEndDate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityReservationFleetResult) *bool { return v.RemoveEndDate }).(pulumi.BoolPtrOutput)
}

// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, together with the instance type weights that you assign to each instance type used by the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the *Amazon EC2 User Guide* .
func (o LookupCapacityReservationFleetResultOutput) TotalTargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCapacityReservationFleetResult) *int { return v.TotalTargetCapacity }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCapacityReservationFleetResultOutput{})
}
