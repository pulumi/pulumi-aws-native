// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VPC Route Server Peer
type RouteServerPeer struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the Route Server Peer.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the Route Server Peer.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The BGP configuration options for this peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.
	BgpOptions RouteServerPeerBgpOptionsOutput `pulumi:"bgpOptions"`
	// Elastic Network Interface IP address owned by the Route Server Endpoint
	EndpointEniAddress pulumi.StringOutput `pulumi:"endpointEniAddress"`
	// Elastic Network Interface ID owned by the Route Server Endpoint
	EndpointEniId pulumi.StringOutput `pulumi:"endpointEniId"`
	// IP address of the Route Server Peer
	PeerAddress pulumi.StringOutput `pulumi:"peerAddress"`
	// Route Server Endpoint ID
	RouteServerEndpointId pulumi.StringOutput `pulumi:"routeServerEndpointId"`
	// Route Server ID
	RouteServerId pulumi.StringOutput `pulumi:"routeServerId"`
	// Subnet ID
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// VPC ID
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRouteServerPeer registers a new resource with the given unique name, arguments, and options.
func NewRouteServerPeer(ctx *pulumi.Context,
	name string, args *RouteServerPeerArgs, opts ...pulumi.ResourceOption) (*RouteServerPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BgpOptions == nil {
		return nil, errors.New("invalid value for required argument 'BgpOptions'")
	}
	if args.PeerAddress == nil {
		return nil, errors.New("invalid value for required argument 'PeerAddress'")
	}
	if args.RouteServerEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'RouteServerEndpointId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"bgpOptions",
		"peerAddress",
		"routeServerEndpointId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteServerPeer
	err := ctx.RegisterResource("aws-native:ec2:RouteServerPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteServerPeer gets an existing RouteServerPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteServerPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteServerPeerState, opts ...pulumi.ResourceOption) (*RouteServerPeer, error) {
	var resource RouteServerPeer
	err := ctx.ReadResource("aws-native:ec2:RouteServerPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteServerPeer resources.
type routeServerPeerState struct {
}

type RouteServerPeerState struct {
}

func (RouteServerPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerPeerState)(nil)).Elem()
}

type routeServerPeerArgs struct {
	// The BGP configuration options for this peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.
	BgpOptions RouteServerPeerBgpOptions `pulumi:"bgpOptions"`
	// IP address of the Route Server Peer
	PeerAddress string `pulumi:"peerAddress"`
	// Route Server Endpoint ID
	RouteServerEndpointId string `pulumi:"routeServerEndpointId"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a RouteServerPeer resource.
type RouteServerPeerArgs struct {
	// The BGP configuration options for this peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.
	BgpOptions RouteServerPeerBgpOptionsInput
	// IP address of the Route Server Peer
	PeerAddress pulumi.StringInput
	// Route Server Endpoint ID
	RouteServerEndpointId pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (RouteServerPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerPeerArgs)(nil)).Elem()
}

type RouteServerPeerInput interface {
	pulumi.Input

	ToRouteServerPeerOutput() RouteServerPeerOutput
	ToRouteServerPeerOutputWithContext(ctx context.Context) RouteServerPeerOutput
}

func (*RouteServerPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerPeer)(nil)).Elem()
}

func (i *RouteServerPeer) ToRouteServerPeerOutput() RouteServerPeerOutput {
	return i.ToRouteServerPeerOutputWithContext(context.Background())
}

func (i *RouteServerPeer) ToRouteServerPeerOutputWithContext(ctx context.Context) RouteServerPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerPeerOutput)
}

type RouteServerPeerOutput struct{ *pulumi.OutputState }

func (RouteServerPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerPeer)(nil)).Elem()
}

func (o RouteServerPeerOutput) ToRouteServerPeerOutput() RouteServerPeerOutput {
	return o
}

func (o RouteServerPeerOutput) ToRouteServerPeerOutputWithContext(ctx context.Context) RouteServerPeerOutput {
	return o
}

// The Amazon Resource Name (ARN) of the Route Server Peer.
func (o RouteServerPeerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the Route Server Peer.
func (o RouteServerPeerOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The BGP configuration options for this peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.
func (o RouteServerPeerOutput) BgpOptions() RouteServerPeerBgpOptionsOutput {
	return o.ApplyT(func(v *RouteServerPeer) RouteServerPeerBgpOptionsOutput { return v.BgpOptions }).(RouteServerPeerBgpOptionsOutput)
}

// Elastic Network Interface IP address owned by the Route Server Endpoint
func (o RouteServerPeerOutput) EndpointEniAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.EndpointEniAddress }).(pulumi.StringOutput)
}

// Elastic Network Interface ID owned by the Route Server Endpoint
func (o RouteServerPeerOutput) EndpointEniId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.EndpointEniId }).(pulumi.StringOutput)
}

// IP address of the Route Server Peer
func (o RouteServerPeerOutput) PeerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.PeerAddress }).(pulumi.StringOutput)
}

// Route Server Endpoint ID
func (o RouteServerPeerOutput) RouteServerEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.RouteServerEndpointId }).(pulumi.StringOutput)
}

// Route Server ID
func (o RouteServerPeerOutput) RouteServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.RouteServerId }).(pulumi.StringOutput)
}

// Subnet ID
func (o RouteServerPeerOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o RouteServerPeerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *RouteServerPeer) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// VPC ID
func (o RouteServerPeerOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerPeer) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerPeerInput)(nil)).Elem(), &RouteServerPeer{})
	pulumi.RegisterOutputType(RouteServerPeerOutput{})
}
