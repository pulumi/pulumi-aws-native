// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a VPN connection between a virtual private gateway and a VPN customer gateway or a transit gateway and a VPN customer gateway.
//
//	To specify a VPN connection between a transit gateway and customer gateway, use the ``TransitGatewayId`` and ``CustomerGatewayId`` properties.
//	To specify a VPN connection between a virtual private gateway and customer gateway, use the ``VpnGatewayId`` and ``CustomerGatewayId`` properties.
//	For more information, see [](https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html) in the *User Guide*.
type VpnConnection struct {
	pulumi.CustomResourceState

	// The ID of the customer gateway at your end of the VPN connection.
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// Indicate whether to enable acceleration for the VPN connection.
	//  Default: ``false``
	EnableAcceleration pulumi.BoolPtrOutput `pulumi:"enableAcceleration"`
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//  Default: ``0.0.0.0/0``
	LocalIpv4NetworkCidr pulumi.StringPtrOutput `pulumi:"localIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//  Default: ``::/0``
	LocalIpv6NetworkCidr pulumi.StringPtrOutput `pulumi:"localIpv6NetworkCidr"`
	// The type of IP address assigned to the outside interface of the customer gateway device.
	//  Valid values: ``PrivateIpv4`` | ``PublicIpv4`` | ``Ipv6``
	//  Default: ``PublicIpv4``
	OutsideIpAddressType pulumi.StringPtrOutput `pulumi:"outsideIpAddressType"`
	// Describes the storage location for an instance store-backed AMI.
	PreSharedKeyStorage VpnConnectionPreSharedKeyStoragePtrOutput `pulumi:"preSharedKeyStorage"`
	// The IPv4 CIDR on the AWS side of the VPN connection.
	//  Default: ``0.0.0.0/0``
	RemoteIpv4NetworkCidr pulumi.StringPtrOutput `pulumi:"remoteIpv4NetworkCidr"`
	// The IPv6 CIDR on the AWS side of the VPN connection.
	//  Default: ``::/0``
	RemoteIpv6NetworkCidr pulumi.StringPtrOutput `pulumi:"remoteIpv6NetworkCidr"`
	// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
	//  If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.
	StaticRoutesOnly pulumi.BoolPtrOutput `pulumi:"staticRoutesOnly"`
	// Any tags assigned to the VPN connection.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ID of the transit gateway associated with the VPN connection.
	//  You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
	TransitGatewayId pulumi.StringPtrOutput `pulumi:"transitGatewayId"`
	// The transit gateway attachment ID to use for the VPN tunnel.
	//  Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.
	TransportTransitGatewayAttachmentId pulumi.StringPtrOutput `pulumi:"transportTransitGatewayAttachmentId"`
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
	//  Default: ``ipv4``
	TunnelInsideIpVersion pulumi.StringPtrOutput `pulumi:"tunnelInsideIpVersion"`
	// The type of VPN connection.
	Type pulumi.StringOutput `pulumi:"type"`
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringOutput `pulumi:"vpnConnectionId"`
	// The ID of the virtual private gateway at the AWS side of the VPN connection.
	//  You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
	VpnGatewayId pulumi.StringPtrOutput `pulumi:"vpnGatewayId"`
	// The tunnel options for the VPN connection.
	VpnTunnelOptionsSpecifications VpnConnectionVpnTunnelOptionsSpecificationArrayOutput `pulumi:"vpnTunnelOptionsSpecifications"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGatewayId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"customerGatewayId",
		"enableAcceleration",
		"localIpv4NetworkCidr",
		"localIpv6NetworkCidr",
		"outsideIpAddressType",
		"preSharedKeyStorage",
		"remoteIpv4NetworkCidr",
		"remoteIpv6NetworkCidr",
		"staticRoutesOnly",
		"transitGatewayId",
		"transportTransitGatewayAttachmentId",
		"tunnelInsideIpVersion",
		"type",
		"vpnGatewayId",
		"vpnTunnelOptionsSpecifications[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnConnection
	err := ctx.RegisterResource("aws-native:ec2:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("aws-native:ec2:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
}

type VpnConnectionState struct {
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	// The ID of the customer gateway at your end of the VPN connection.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// Indicate whether to enable acceleration for the VPN connection.
	//  Default: ``false``
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//  Default: ``0.0.0.0/0``
	LocalIpv4NetworkCidr *string `pulumi:"localIpv4NetworkCidr"`
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//  Default: ``::/0``
	LocalIpv6NetworkCidr *string `pulumi:"localIpv6NetworkCidr"`
	// The type of IP address assigned to the outside interface of the customer gateway device.
	//  Valid values: ``PrivateIpv4`` | ``PublicIpv4`` | ``Ipv6``
	//  Default: ``PublicIpv4``
	OutsideIpAddressType *string `pulumi:"outsideIpAddressType"`
	// Describes the storage location for an instance store-backed AMI.
	PreSharedKeyStorage *VpnConnectionPreSharedKeyStorage `pulumi:"preSharedKeyStorage"`
	// The IPv4 CIDR on the AWS side of the VPN connection.
	//  Default: ``0.0.0.0/0``
	RemoteIpv4NetworkCidr *string `pulumi:"remoteIpv4NetworkCidr"`
	// The IPv6 CIDR on the AWS side of the VPN connection.
	//  Default: ``::/0``
	RemoteIpv6NetworkCidr *string `pulumi:"remoteIpv6NetworkCidr"`
	// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
	//  If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.
	StaticRoutesOnly *bool `pulumi:"staticRoutesOnly"`
	// Any tags assigned to the VPN connection.
	Tags []aws.Tag `pulumi:"tags"`
	// The ID of the transit gateway associated with the VPN connection.
	//  You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
	TransitGatewayId *string `pulumi:"transitGatewayId"`
	// The transit gateway attachment ID to use for the VPN tunnel.
	//  Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.
	TransportTransitGatewayAttachmentId *string `pulumi:"transportTransitGatewayAttachmentId"`
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
	//  Default: ``ipv4``
	TunnelInsideIpVersion *string `pulumi:"tunnelInsideIpVersion"`
	// The type of VPN connection.
	Type string `pulumi:"type"`
	// The ID of the virtual private gateway at the AWS side of the VPN connection.
	//  You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
	// The tunnel options for the VPN connection.
	VpnTunnelOptionsSpecifications []VpnConnectionVpnTunnelOptionsSpecification `pulumi:"vpnTunnelOptionsSpecifications"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// The ID of the customer gateway at your end of the VPN connection.
	CustomerGatewayId pulumi.StringInput
	// Indicate whether to enable acceleration for the VPN connection.
	//  Default: ``false``
	EnableAcceleration pulumi.BoolPtrInput
	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//  Default: ``0.0.0.0/0``
	LocalIpv4NetworkCidr pulumi.StringPtrInput
	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//  Default: ``::/0``
	LocalIpv6NetworkCidr pulumi.StringPtrInput
	// The type of IP address assigned to the outside interface of the customer gateway device.
	//  Valid values: ``PrivateIpv4`` | ``PublicIpv4`` | ``Ipv6``
	//  Default: ``PublicIpv4``
	OutsideIpAddressType pulumi.StringPtrInput
	// Describes the storage location for an instance store-backed AMI.
	PreSharedKeyStorage VpnConnectionPreSharedKeyStoragePtrInput
	// The IPv4 CIDR on the AWS side of the VPN connection.
	//  Default: ``0.0.0.0/0``
	RemoteIpv4NetworkCidr pulumi.StringPtrInput
	// The IPv6 CIDR on the AWS side of the VPN connection.
	//  Default: ``::/0``
	RemoteIpv6NetworkCidr pulumi.StringPtrInput
	// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
	//  If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.
	StaticRoutesOnly pulumi.BoolPtrInput
	// Any tags assigned to the VPN connection.
	Tags aws.TagArrayInput
	// The ID of the transit gateway associated with the VPN connection.
	//  You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
	TransitGatewayId pulumi.StringPtrInput
	// The transit gateway attachment ID to use for the VPN tunnel.
	//  Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.
	TransportTransitGatewayAttachmentId pulumi.StringPtrInput
	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
	//  Default: ``ipv4``
	TunnelInsideIpVersion pulumi.StringPtrInput
	// The type of VPN connection.
	Type pulumi.StringInput
	// The ID of the virtual private gateway at the AWS side of the VPN connection.
	//  You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
	VpnGatewayId pulumi.StringPtrInput
	// The tunnel options for the VPN connection.
	VpnTunnelOptionsSpecifications VpnConnectionVpnTunnelOptionsSpecificationArrayInput
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionInput interface {
	pulumi.Input

	ToVpnConnectionOutput() VpnConnectionOutput
	ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput
}

func (*VpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (i *VpnConnection) ToVpnConnectionOutput() VpnConnectionOutput {
	return i.ToVpnConnectionOutputWithContext(context.Background())
}

func (i *VpnConnection) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionOutput)
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

// The ID of the customer gateway at your end of the VPN connection.
func (o VpnConnectionOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// Indicate whether to enable acceleration for the VPN connection.
//
//	Default: ``false``
func (o VpnConnectionOutput) EnableAcceleration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.EnableAcceleration }).(pulumi.BoolPtrOutput)
}

// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
//
//	Default: ``0.0.0.0/0``
func (o VpnConnectionOutput) LocalIpv4NetworkCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.LocalIpv4NetworkCidr }).(pulumi.StringPtrOutput)
}

// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
//
//	Default: ``::/0``
func (o VpnConnectionOutput) LocalIpv6NetworkCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.LocalIpv6NetworkCidr }).(pulumi.StringPtrOutput)
}

// The type of IP address assigned to the outside interface of the customer gateway device.
//
//	Valid values: ``PrivateIpv4`` | ``PublicIpv4`` | ``Ipv6``
//	Default: ``PublicIpv4``
func (o VpnConnectionOutput) OutsideIpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.OutsideIpAddressType }).(pulumi.StringPtrOutput)
}

// Describes the storage location for an instance store-backed AMI.
func (o VpnConnectionOutput) PreSharedKeyStorage() VpnConnectionPreSharedKeyStoragePtrOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionPreSharedKeyStoragePtrOutput { return v.PreSharedKeyStorage }).(VpnConnectionPreSharedKeyStoragePtrOutput)
}

// The IPv4 CIDR on the AWS side of the VPN connection.
//
//	Default: ``0.0.0.0/0``
func (o VpnConnectionOutput) RemoteIpv4NetworkCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.RemoteIpv4NetworkCidr }).(pulumi.StringPtrOutput)
}

// The IPv6 CIDR on the AWS side of the VPN connection.
//
//	Default: ``::/0``
func (o VpnConnectionOutput) RemoteIpv6NetworkCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.RemoteIpv6NetworkCidr }).(pulumi.StringPtrOutput)
}

// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
//
//	If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.
func (o VpnConnectionOutput) StaticRoutesOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.StaticRoutesOnly }).(pulumi.BoolPtrOutput)
}

// Any tags assigned to the VPN connection.
func (o VpnConnectionOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *VpnConnection) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ID of the transit gateway associated with the VPN connection.
//
//	You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
func (o VpnConnectionOutput) TransitGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.TransitGatewayId }).(pulumi.StringPtrOutput)
}

// The transit gateway attachment ID to use for the VPN tunnel.
//
//	Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.
func (o VpnConnectionOutput) TransportTransitGatewayAttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.TransportTransitGatewayAttachmentId }).(pulumi.StringPtrOutput)
}

// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
//
//	Default: ``ipv4``
func (o VpnConnectionOutput) TunnelInsideIpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.TunnelInsideIpVersion }).(pulumi.StringPtrOutput)
}

// The type of VPN connection.
func (o VpnConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The ID of the VPN connection.
func (o VpnConnectionOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.VpnConnectionId }).(pulumi.StringOutput)
}

// The ID of the virtual private gateway at the AWS side of the VPN connection.
//
//	You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
func (o VpnConnectionOutput) VpnGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.VpnGatewayId }).(pulumi.StringPtrOutput)
}

// The tunnel options for the VPN connection.
func (o VpnConnectionOutput) VpnTunnelOptionsSpecifications() VpnConnectionVpnTunnelOptionsSpecificationArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionVpnTunnelOptionsSpecificationArrayOutput {
		return v.VpnTunnelOptionsSpecifications
	}).(VpnConnectionVpnTunnelOptionsSpecificationArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionInput)(nil)).Elem(), &VpnConnection{})
	pulumi.RegisterOutputType(VpnConnectionOutput{})
}
