// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::VPCCidrBlock
type VpcCidrBlock struct {
	pulumi.CustomResourceState

	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
	AmazonProvidedIpv6CidrBlock pulumi.BoolPtrOutput `pulumi:"amazonProvidedIpv6CidrBlock"`
	// The Id of the VPC associated CIDR Block.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// An IPv4 CIDR block to associate with the VPC.
	CidrBlock pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	// The IP Source of an IPv6 VPC CIDR Block.
	IpSource pulumi.StringOutput `pulumi:"ipSource"`
	// The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
	Ipv4IpamPoolId pulumi.StringPtrOutput `pulumi:"ipv4IpamPoolId"`
	// The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
	Ipv4NetmaskLength pulumi.IntPtrOutput `pulumi:"ipv4NetmaskLength"`
	// The value denoting whether an IPv6 VPC CIDR Block is public or private.
	Ipv6AddressAttribute pulumi.StringOutput `pulumi:"ipv6AddressAttribute"`
	// An IPv6 CIDR block from the IPv6 address pool.
	Ipv6CidrBlock pulumi.StringPtrOutput `pulumi:"ipv6CidrBlock"`
	// The name of the location from which we advertise the IPV6 CIDR block.
	Ipv6CidrBlockNetworkBorderGroup pulumi.StringPtrOutput `pulumi:"ipv6CidrBlockNetworkBorderGroup"`
	// The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
	Ipv6IpamPoolId pulumi.StringPtrOutput `pulumi:"ipv6IpamPoolId"`
	// The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
	Ipv6NetmaskLength pulumi.IntPtrOutput `pulumi:"ipv6NetmaskLength"`
	// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
	Ipv6Pool pulumi.StringPtrOutput `pulumi:"ipv6Pool"`
	// The ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcCidrBlock registers a new resource with the given unique name, arguments, and options.
func NewVpcCidrBlock(ctx *pulumi.Context,
	name string, args *VpcCidrBlockArgs, opts ...pulumi.ResourceOption) (*VpcCidrBlock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"amazonProvidedIpv6CidrBlock",
		"cidrBlock",
		"ipv4IpamPoolId",
		"ipv4NetmaskLength",
		"ipv6CidrBlock",
		"ipv6CidrBlockNetworkBorderGroup",
		"ipv6IpamPoolId",
		"ipv6NetmaskLength",
		"ipv6Pool",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcCidrBlock
	err := ctx.RegisterResource("aws-native:ec2:VpcCidrBlock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcCidrBlock gets an existing VpcCidrBlock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcCidrBlock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcCidrBlockState, opts ...pulumi.ResourceOption) (*VpcCidrBlock, error) {
	var resource VpcCidrBlock
	err := ctx.ReadResource("aws-native:ec2:VpcCidrBlock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcCidrBlock resources.
type vpcCidrBlockState struct {
}

type VpcCidrBlockState struct {
}

func (VpcCidrBlockState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcCidrBlockState)(nil)).Elem()
}

type vpcCidrBlockArgs struct {
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
	AmazonProvidedIpv6CidrBlock *bool `pulumi:"amazonProvidedIpv6CidrBlock"`
	// An IPv4 CIDR block to associate with the VPC.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
	Ipv4IpamPoolId *string `pulumi:"ipv4IpamPoolId"`
	// The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
	Ipv4NetmaskLength *int `pulumi:"ipv4NetmaskLength"`
	// An IPv6 CIDR block from the IPv6 address pool.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The name of the location from which we advertise the IPV6 CIDR block.
	Ipv6CidrBlockNetworkBorderGroup *string `pulumi:"ipv6CidrBlockNetworkBorderGroup"`
	// The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
	Ipv6IpamPoolId *string `pulumi:"ipv6IpamPoolId"`
	// The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
	Ipv6NetmaskLength *int `pulumi:"ipv6NetmaskLength"`
	// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
	Ipv6Pool *string `pulumi:"ipv6Pool"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcCidrBlock resource.
type VpcCidrBlockArgs struct {
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
	AmazonProvidedIpv6CidrBlock pulumi.BoolPtrInput
	// An IPv4 CIDR block to associate with the VPC.
	CidrBlock pulumi.StringPtrInput
	// The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
	Ipv4IpamPoolId pulumi.StringPtrInput
	// The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
	Ipv4NetmaskLength pulumi.IntPtrInput
	// An IPv6 CIDR block from the IPv6 address pool.
	Ipv6CidrBlock pulumi.StringPtrInput
	// The name of the location from which we advertise the IPV6 CIDR block.
	Ipv6CidrBlockNetworkBorderGroup pulumi.StringPtrInput
	// The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
	Ipv6IpamPoolId pulumi.StringPtrInput
	// The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
	Ipv6NetmaskLength pulumi.IntPtrInput
	// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
	Ipv6Pool pulumi.StringPtrInput
	// The ID of the VPC.
	VpcId pulumi.StringInput
}

func (VpcCidrBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcCidrBlockArgs)(nil)).Elem()
}

type VpcCidrBlockInput interface {
	pulumi.Input

	ToVpcCidrBlockOutput() VpcCidrBlockOutput
	ToVpcCidrBlockOutputWithContext(ctx context.Context) VpcCidrBlockOutput
}

func (*VpcCidrBlock) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcCidrBlock)(nil)).Elem()
}

func (i *VpcCidrBlock) ToVpcCidrBlockOutput() VpcCidrBlockOutput {
	return i.ToVpcCidrBlockOutputWithContext(context.Background())
}

func (i *VpcCidrBlock) ToVpcCidrBlockOutputWithContext(ctx context.Context) VpcCidrBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcCidrBlockOutput)
}

type VpcCidrBlockOutput struct{ *pulumi.OutputState }

func (VpcCidrBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcCidrBlock)(nil)).Elem()
}

func (o VpcCidrBlockOutput) ToVpcCidrBlockOutput() VpcCidrBlockOutput {
	return o
}

func (o VpcCidrBlockOutput) ToVpcCidrBlockOutputWithContext(ctx context.Context) VpcCidrBlockOutput {
	return o
}

// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
func (o VpcCidrBlockOutput) AmazonProvidedIpv6CidrBlock() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.BoolPtrOutput { return v.AmazonProvidedIpv6CidrBlock }).(pulumi.BoolPtrOutput)
}

// The Id of the VPC associated CIDR Block.
func (o VpcCidrBlockOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// An IPv4 CIDR block to associate with the VPC.
func (o VpcCidrBlockOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringPtrOutput { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// The IP Source of an IPv6 VPC CIDR Block.
func (o VpcCidrBlockOutput) IpSource() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringOutput { return v.IpSource }).(pulumi.StringOutput)
}

// The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
func (o VpcCidrBlockOutput) Ipv4IpamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringPtrOutput { return v.Ipv4IpamPoolId }).(pulumi.StringPtrOutput)
}

// The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
func (o VpcCidrBlockOutput) Ipv4NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.IntPtrOutput { return v.Ipv4NetmaskLength }).(pulumi.IntPtrOutput)
}

// The value denoting whether an IPv6 VPC CIDR Block is public or private.
func (o VpcCidrBlockOutput) Ipv6AddressAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringOutput { return v.Ipv6AddressAttribute }).(pulumi.StringOutput)
}

// An IPv6 CIDR block from the IPv6 address pool.
func (o VpcCidrBlockOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringPtrOutput { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the location from which we advertise the IPV6 CIDR block.
func (o VpcCidrBlockOutput) Ipv6CidrBlockNetworkBorderGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringPtrOutput { return v.Ipv6CidrBlockNetworkBorderGroup }).(pulumi.StringPtrOutput)
}

// The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
func (o VpcCidrBlockOutput) Ipv6IpamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringPtrOutput { return v.Ipv6IpamPoolId }).(pulumi.StringPtrOutput)
}

// The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
func (o VpcCidrBlockOutput) Ipv6NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.IntPtrOutput { return v.Ipv6NetmaskLength }).(pulumi.IntPtrOutput)
}

// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
func (o VpcCidrBlockOutput) Ipv6Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringPtrOutput { return v.Ipv6Pool }).(pulumi.StringPtrOutput)
}

// The ID of the VPC.
func (o VpcCidrBlockOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcCidrBlock) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcCidrBlockInput)(nil)).Elem(), &VpcCidrBlock{})
	pulumi.RegisterOutputType(VpcCidrBlockOutput{})
}
