// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::NetworkAclEntry
func LookupNetworkAclEntry(ctx *pulumi.Context, args *LookupNetworkAclEntryArgs, opts ...pulumi.InvokeOption) (*LookupNetworkAclEntryResult, error) {
	var rv LookupNetworkAclEntryResult
	err := ctx.Invoke("aws-native:ec2:getNetworkAclEntry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNetworkAclEntryArgs struct {
	Id string `pulumi:"id"`
}

type LookupNetworkAclEntryResult struct {
	// The IPv4 CIDR range to allow or deny, in CIDR notation (for example, 172.16.0.0/24). Requirement is conditional: You must specify the CidrBlock or Ipv6CidrBlock property
	CidrBlock *string `pulumi:"cidrBlock"`
	// The Internet Control Message Protocol (ICMP) code and type. Requirement is conditional: Required if specifying 1 (ICMP) for the protocol parameter
	Icmp *NetworkAclEntryIcmp `pulumi:"icmp"`
	Id   *string              `pulumi:"id"`
	// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64)
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18
	PortRange *NetworkAclEntryPortRange `pulumi:"portRange"`
	// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code
	Protocol *int `pulumi:"protocol"`
	// Indicates whether to allow or deny the traffic that matches the rule
	RuleAction *string `pulumi:"ruleAction"`
}

func LookupNetworkAclEntryOutput(ctx *pulumi.Context, args LookupNetworkAclEntryOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkAclEntryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkAclEntryResult, error) {
			args := v.(LookupNetworkAclEntryArgs)
			r, err := LookupNetworkAclEntry(ctx, &args, opts...)
			var s LookupNetworkAclEntryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkAclEntryResultOutput)
}

type LookupNetworkAclEntryOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNetworkAclEntryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkAclEntryArgs)(nil)).Elem()
}

type LookupNetworkAclEntryResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkAclEntryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkAclEntryResult)(nil)).Elem()
}

func (o LookupNetworkAclEntryResultOutput) ToLookupNetworkAclEntryResultOutput() LookupNetworkAclEntryResultOutput {
	return o
}

func (o LookupNetworkAclEntryResultOutput) ToLookupNetworkAclEntryResultOutputWithContext(ctx context.Context) LookupNetworkAclEntryResultOutput {
	return o
}

// The IPv4 CIDR range to allow or deny, in CIDR notation (for example, 172.16.0.0/24). Requirement is conditional: You must specify the CidrBlock or Ipv6CidrBlock property
func (o LookupNetworkAclEntryResultOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkAclEntryResult) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// The Internet Control Message Protocol (ICMP) code and type. Requirement is conditional: Required if specifying 1 (ICMP) for the protocol parameter
func (o LookupNetworkAclEntryResultOutput) Icmp() NetworkAclEntryIcmpPtrOutput {
	return o.ApplyT(func(v LookupNetworkAclEntryResult) *NetworkAclEntryIcmp { return v.Icmp }).(NetworkAclEntryIcmpPtrOutput)
}

func (o LookupNetworkAclEntryResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkAclEntryResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64)
func (o LookupNetworkAclEntryResultOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkAclEntryResult) *string { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18
func (o LookupNetworkAclEntryResultOutput) PortRange() NetworkAclEntryPortRangePtrOutput {
	return o.ApplyT(func(v LookupNetworkAclEntryResult) *NetworkAclEntryPortRange { return v.PortRange }).(NetworkAclEntryPortRangePtrOutput)
}

// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code
func (o LookupNetworkAclEntryResultOutput) Protocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupNetworkAclEntryResult) *int { return v.Protocol }).(pulumi.IntPtrOutput)
}

// Indicates whether to allow or deny the traffic that matches the rule
func (o LookupNetworkAclEntryResultOutput) RuleAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNetworkAclEntryResult) *string { return v.RuleAction }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkAclEntryResultOutput{})
}
