// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::TrafficMirrorFilterRule
//
// Deprecated: TrafficMirrorFilterRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type TrafficMirrorFilterRule struct {
	pulumi.CustomResourceState

	Description           pulumi.StringPtrOutput                                 `pulumi:"description"`
	DestinationCidrBlock  pulumi.StringOutput                                    `pulumi:"destinationCidrBlock"`
	DestinationPortRange  TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput `pulumi:"destinationPortRange"`
	Protocol              pulumi.IntPtrOutput                                    `pulumi:"protocol"`
	RuleAction            pulumi.StringOutput                                    `pulumi:"ruleAction"`
	RuleNumber            pulumi.IntOutput                                       `pulumi:"ruleNumber"`
	SourceCidrBlock       pulumi.StringOutput                                    `pulumi:"sourceCidrBlock"`
	SourcePortRange       TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput `pulumi:"sourcePortRange"`
	TrafficDirection      pulumi.StringOutput                                    `pulumi:"trafficDirection"`
	TrafficMirrorFilterId pulumi.StringOutput                                    `pulumi:"trafficMirrorFilterId"`
}

// NewTrafficMirrorFilterRule registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, args *TrafficMirrorFilterRuleArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleNumber == nil {
		return nil, errors.New("invalid value for required argument 'RuleNumber'")
	}
	if args.SourceCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'SourceCidrBlock'")
	}
	if args.TrafficDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrafficDirection'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	var resource TrafficMirrorFilterRule
	err := ctx.RegisterResource("aws-native:ec2:TrafficMirrorFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorFilterRule gets an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorFilterRuleState, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	var resource TrafficMirrorFilterRule
	err := ctx.ReadResource("aws-native:ec2:TrafficMirrorFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
type trafficMirrorFilterRuleState struct {
}

type TrafficMirrorFilterRuleState struct {
}

func (TrafficMirrorFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleState)(nil)).Elem()
}

type trafficMirrorFilterRuleArgs struct {
	Description           *string                                        `pulumi:"description"`
	DestinationCidrBlock  string                                         `pulumi:"destinationCidrBlock"`
	DestinationPortRange  *TrafficMirrorFilterRuleTrafficMirrorPortRange `pulumi:"destinationPortRange"`
	Protocol              *int                                           `pulumi:"protocol"`
	RuleAction            string                                         `pulumi:"ruleAction"`
	RuleNumber            int                                            `pulumi:"ruleNumber"`
	SourceCidrBlock       string                                         `pulumi:"sourceCidrBlock"`
	SourcePortRange       *TrafficMirrorFilterRuleTrafficMirrorPortRange `pulumi:"sourcePortRange"`
	TrafficDirection      string                                         `pulumi:"trafficDirection"`
	TrafficMirrorFilterId string                                         `pulumi:"trafficMirrorFilterId"`
}

// The set of arguments for constructing a TrafficMirrorFilterRule resource.
type TrafficMirrorFilterRuleArgs struct {
	Description           pulumi.StringPtrInput
	DestinationCidrBlock  pulumi.StringInput
	DestinationPortRange  TrafficMirrorFilterRuleTrafficMirrorPortRangePtrInput
	Protocol              pulumi.IntPtrInput
	RuleAction            pulumi.StringInput
	RuleNumber            pulumi.IntInput
	SourceCidrBlock       pulumi.StringInput
	SourcePortRange       TrafficMirrorFilterRuleTrafficMirrorPortRangePtrInput
	TrafficDirection      pulumi.StringInput
	TrafficMirrorFilterId pulumi.StringInput
}

func (TrafficMirrorFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleArgs)(nil)).Elem()
}

type TrafficMirrorFilterRuleInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput
	ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput
}

func (*TrafficMirrorFilterRule) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorFilterRule)(nil))
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return i.ToTrafficMirrorFilterRuleOutputWithContext(context.Background())
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleOutput)
}

type TrafficMirrorFilterRuleOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorFilterRule)(nil))
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return o
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleInput)(nil)).Elem(), &TrafficMirrorFilterRule{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleOutput{})
}
