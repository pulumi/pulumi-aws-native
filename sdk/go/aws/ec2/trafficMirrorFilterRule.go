// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for for AWS::EC2::TrafficMirrorFilterRule
type TrafficMirrorFilterRule struct {
	pulumi.CustomResourceState

	// The description of the Traffic Mirror Filter rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// The destination port range.
	DestinationPortRange TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput `pulumi:"destinationPortRange"`
	// The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
	Protocol pulumi.IntPtrOutput `pulumi:"protocol"`
	// The action to take on the filtered traffic (accept/reject).
	RuleAction pulumi.StringOutput `pulumi:"ruleAction"`
	// The number of the Traffic Mirror rule.
	RuleNumber pulumi.IntOutput `pulumi:"ruleNumber"`
	// The source CIDR block to assign to the Traffic Mirror Filter rule.
	SourceCidrBlock pulumi.StringOutput `pulumi:"sourceCidrBlock"`
	// The source port range.
	SourcePortRange TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput `pulumi:"sourcePortRange"`
	// Any tags assigned to the Traffic Mirror Filter rule.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The direction of traffic (ingress/egress).
	TrafficDirection pulumi.StringOutput `pulumi:"trafficDirection"`
	// The ID of the filter that this rule is associated with.
	TrafficMirrorFilterId pulumi.StringOutput `pulumi:"trafficMirrorFilterId"`
	// The ID of the Traffic Mirror Filter rule.
	TrafficMirrorFilterRuleId pulumi.StringOutput `pulumi:"trafficMirrorFilterRuleId"`
}

// NewTrafficMirrorFilterRule registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, args *TrafficMirrorFilterRuleArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleNumber == nil {
		return nil, errors.New("invalid value for required argument 'RuleNumber'")
	}
	if args.SourceCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'SourceCidrBlock'")
	}
	if args.TrafficDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrafficDirection'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"trafficMirrorFilterId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorFilterRule
	err := ctx.RegisterResource("aws-native:ec2:TrafficMirrorFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorFilterRule gets an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorFilterRuleState, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	var resource TrafficMirrorFilterRule
	err := ctx.ReadResource("aws-native:ec2:TrafficMirrorFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
type trafficMirrorFilterRuleState struct {
}

type TrafficMirrorFilterRuleState struct {
}

func (TrafficMirrorFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleState)(nil)).Elem()
}

type trafficMirrorFilterRuleArgs struct {
	// The description of the Traffic Mirror Filter rule.
	Description *string `pulumi:"description"`
	// The destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The destination port range.
	DestinationPortRange *TrafficMirrorFilterRuleTrafficMirrorPortRange `pulumi:"destinationPortRange"`
	// The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
	Protocol *int `pulumi:"protocol"`
	// The action to take on the filtered traffic (accept/reject).
	RuleAction string `pulumi:"ruleAction"`
	// The number of the Traffic Mirror rule.
	RuleNumber int `pulumi:"ruleNumber"`
	// The source CIDR block to assign to the Traffic Mirror Filter rule.
	SourceCidrBlock string `pulumi:"sourceCidrBlock"`
	// The source port range.
	SourcePortRange *TrafficMirrorFilterRuleTrafficMirrorPortRange `pulumi:"sourcePortRange"`
	// Any tags assigned to the Traffic Mirror Filter rule.
	Tags []aws.Tag `pulumi:"tags"`
	// The direction of traffic (ingress/egress).
	TrafficDirection string `pulumi:"trafficDirection"`
	// The ID of the filter that this rule is associated with.
	TrafficMirrorFilterId string `pulumi:"trafficMirrorFilterId"`
}

// The set of arguments for constructing a TrafficMirrorFilterRule resource.
type TrafficMirrorFilterRuleArgs struct {
	// The description of the Traffic Mirror Filter rule.
	Description pulumi.StringPtrInput
	// The destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock pulumi.StringInput
	// The destination port range.
	DestinationPortRange TrafficMirrorFilterRuleTrafficMirrorPortRangePtrInput
	// The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
	Protocol pulumi.IntPtrInput
	// The action to take on the filtered traffic (accept/reject).
	RuleAction pulumi.StringInput
	// The number of the Traffic Mirror rule.
	RuleNumber pulumi.IntInput
	// The source CIDR block to assign to the Traffic Mirror Filter rule.
	SourceCidrBlock pulumi.StringInput
	// The source port range.
	SourcePortRange TrafficMirrorFilterRuleTrafficMirrorPortRangePtrInput
	// Any tags assigned to the Traffic Mirror Filter rule.
	Tags aws.TagArrayInput
	// The direction of traffic (ingress/egress).
	TrafficDirection pulumi.StringInput
	// The ID of the filter that this rule is associated with.
	TrafficMirrorFilterId pulumi.StringInput
}

func (TrafficMirrorFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleArgs)(nil)).Elem()
}

type TrafficMirrorFilterRuleInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput
	ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput
}

func (*TrafficMirrorFilterRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilterRule)(nil)).Elem()
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return i.ToTrafficMirrorFilterRuleOutputWithContext(context.Background())
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleOutput)
}

type TrafficMirrorFilterRuleOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return o
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return o
}

// The description of the Traffic Mirror Filter rule.
func (o TrafficMirrorFilterRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination CIDR block to assign to the Traffic Mirror rule.
func (o TrafficMirrorFilterRuleOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// The destination port range.
func (o TrafficMirrorFilterRuleOutput) DestinationPortRange() TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput {
		return v.DestinationPortRange
	}).(TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput)
}

// The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
func (o TrafficMirrorFilterRuleOutput) Protocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.IntPtrOutput { return v.Protocol }).(pulumi.IntPtrOutput)
}

// The action to take on the filtered traffic (accept/reject).
func (o TrafficMirrorFilterRuleOutput) RuleAction() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.RuleAction }).(pulumi.StringOutput)
}

// The number of the Traffic Mirror rule.
func (o TrafficMirrorFilterRuleOutput) RuleNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.IntOutput { return v.RuleNumber }).(pulumi.IntOutput)
}

// The source CIDR block to assign to the Traffic Mirror Filter rule.
func (o TrafficMirrorFilterRuleOutput) SourceCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.SourceCidrBlock }).(pulumi.StringOutput)
}

// The source port range.
func (o TrafficMirrorFilterRuleOutput) SourcePortRange() TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput {
		return v.SourcePortRange
	}).(TrafficMirrorFilterRuleTrafficMirrorPortRangePtrOutput)
}

// Any tags assigned to the Traffic Mirror Filter rule.
func (o TrafficMirrorFilterRuleOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The direction of traffic (ingress/egress).
func (o TrafficMirrorFilterRuleOutput) TrafficDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficDirection }).(pulumi.StringOutput)
}

// The ID of the filter that this rule is associated with.
func (o TrafficMirrorFilterRuleOutput) TrafficMirrorFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficMirrorFilterId }).(pulumi.StringOutput)
}

// The ID of the Traffic Mirror Filter rule.
func (o TrafficMirrorFilterRuleOutput) TrafficMirrorFilterRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficMirrorFilterRuleId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleInput)(nil)).Elem(), &TrafficMirrorFilterRule{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleOutput{})
}
