// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::VPCEndpointService
func LookupVPCEndpointService(ctx *pulumi.Context, args *LookupVPCEndpointServiceArgs, opts ...pulumi.InvokeOption) (*LookupVPCEndpointServiceResult, error) {
	var rv LookupVPCEndpointServiceResult
	err := ctx.Invoke("aws-native:ec2:getVPCEndpointService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVPCEndpointServiceArgs struct {
	Id string `pulumi:"id"`
}

type LookupVPCEndpointServiceResult struct {
	AcceptanceRequired      *bool    `pulumi:"acceptanceRequired"`
	GatewayLoadBalancerArns []string `pulumi:"gatewayLoadBalancerArns"`
	Id                      *string  `pulumi:"id"`
	NetworkLoadBalancerArns []string `pulumi:"networkLoadBalancerArns"`
	PayerResponsibility     *string  `pulumi:"payerResponsibility"`
}

func LookupVPCEndpointServiceOutput(ctx *pulumi.Context, args LookupVPCEndpointServiceOutputArgs, opts ...pulumi.InvokeOption) LookupVPCEndpointServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVPCEndpointServiceResult, error) {
			args := v.(LookupVPCEndpointServiceArgs)
			r, err := LookupVPCEndpointService(ctx, &args, opts...)
			return *r, err
		}).(LookupVPCEndpointServiceResultOutput)
}

type LookupVPCEndpointServiceOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupVPCEndpointServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVPCEndpointServiceArgs)(nil)).Elem()
}

type LookupVPCEndpointServiceResultOutput struct{ *pulumi.OutputState }

func (LookupVPCEndpointServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVPCEndpointServiceResult)(nil)).Elem()
}

func (o LookupVPCEndpointServiceResultOutput) ToLookupVPCEndpointServiceResultOutput() LookupVPCEndpointServiceResultOutput {
	return o
}

func (o LookupVPCEndpointServiceResultOutput) ToLookupVPCEndpointServiceResultOutputWithContext(ctx context.Context) LookupVPCEndpointServiceResultOutput {
	return o
}

func (o LookupVPCEndpointServiceResultOutput) AcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVPCEndpointServiceResult) *bool { return v.AcceptanceRequired }).(pulumi.BoolPtrOutput)
}

func (o LookupVPCEndpointServiceResultOutput) GatewayLoadBalancerArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVPCEndpointServiceResult) []string { return v.GatewayLoadBalancerArns }).(pulumi.StringArrayOutput)
}

func (o LookupVPCEndpointServiceResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVPCEndpointServiceResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupVPCEndpointServiceResultOutput) NetworkLoadBalancerArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVPCEndpointServiceResult) []string { return v.NetworkLoadBalancerArns }).(pulumi.StringArrayOutput)
}

func (o LookupVPCEndpointServiceResultOutput) PayerResponsibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVPCEndpointServiceResult) *string { return v.PayerResponsibility }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVPCEndpointServiceResultOutput{})
}
