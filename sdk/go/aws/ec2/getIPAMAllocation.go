// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAMAllocation Type
func LookupIPAMAllocation(ctx *pulumi.Context, args *LookupIPAMAllocationArgs, opts ...pulumi.InvokeOption) (*LookupIPAMAllocationResult, error) {
	var rv LookupIPAMAllocationResult
	err := ctx.Invoke("aws-native:ec2:getIPAMAllocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIPAMAllocationArgs struct {
	Cidr string `pulumi:"cidr"`
	// Id of the allocation.
	IpamPoolAllocationId string `pulumi:"ipamPoolAllocationId"`
	// Id of the IPAM Pool.
	IpamPoolId string `pulumi:"ipamPoolId"`
}

type LookupIPAMAllocationResult struct {
	// Id of the allocation.
	IpamPoolAllocationId *string `pulumi:"ipamPoolAllocationId"`
}

func LookupIPAMAllocationOutput(ctx *pulumi.Context, args LookupIPAMAllocationOutputArgs, opts ...pulumi.InvokeOption) LookupIPAMAllocationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIPAMAllocationResult, error) {
			args := v.(LookupIPAMAllocationArgs)
			r, err := LookupIPAMAllocation(ctx, &args, opts...)
			var s LookupIPAMAllocationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIPAMAllocationResultOutput)
}

type LookupIPAMAllocationOutputArgs struct {
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Id of the allocation.
	IpamPoolAllocationId pulumi.StringInput `pulumi:"ipamPoolAllocationId"`
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringInput `pulumi:"ipamPoolId"`
}

func (LookupIPAMAllocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPAMAllocationArgs)(nil)).Elem()
}

type LookupIPAMAllocationResultOutput struct{ *pulumi.OutputState }

func (LookupIPAMAllocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPAMAllocationResult)(nil)).Elem()
}

func (o LookupIPAMAllocationResultOutput) ToLookupIPAMAllocationResultOutput() LookupIPAMAllocationResultOutput {
	return o
}

func (o LookupIPAMAllocationResultOutput) ToLookupIPAMAllocationResultOutputWithContext(ctx context.Context) LookupIPAMAllocationResultOutput {
	return o
}

// Id of the allocation.
func (o LookupIPAMAllocationResultOutput) IpamPoolAllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMAllocationResult) *string { return v.IpamPoolAllocationId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIPAMAllocationResultOutput{})
}
