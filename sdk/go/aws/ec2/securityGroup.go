// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::SecurityGroup
type SecurityGroup struct {
	pulumi.CustomResourceState

	// The group name or group ID depending on whether the SG is created in default or specific VPC
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A description for the security group.
	GroupDescription pulumi.StringOutput `pulumi:"groupDescription"`
	// The group ID of the specified security group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The name of the security group.
	GroupName pulumi.StringPtrOutput `pulumi:"groupName"`
	// [VPC only] The outbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
	SecurityGroupEgress SecurityGroupEgressTypeArrayOutput `pulumi:"securityGroupEgress"`
	// The inbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
	SecurityGroupIngress SecurityGroupIngressTypeArrayOutput `pulumi:"securityGroupIngress"`
	// Any tags assigned to the security group.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ID of the VPC for the security group.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroup(ctx *pulumi.Context,
	name string, args *SecurityGroupArgs, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupDescription == nil {
		return nil, errors.New("invalid value for required argument 'GroupDescription'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"groupDescription",
		"groupName",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroup
	err := ctx.RegisterResource("aws-native:ec2:SecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroup gets an existing SecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupState, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	var resource SecurityGroup
	err := ctx.ReadResource("aws-native:ec2:SecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroup resources.
type securityGroupState struct {
}

type SecurityGroupState struct {
}

func (SecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupState)(nil)).Elem()
}

type securityGroupArgs struct {
	// A description for the security group.
	GroupDescription string `pulumi:"groupDescription"`
	// The name of the security group.
	GroupName *string `pulumi:"groupName"`
	// [VPC only] The outbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
	SecurityGroupEgress []SecurityGroupEgressType `pulumi:"securityGroupEgress"`
	// The inbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
	SecurityGroupIngress []SecurityGroupIngressType `pulumi:"securityGroupIngress"`
	// Any tags assigned to the security group.
	Tags []aws.Tag `pulumi:"tags"`
	// The ID of the VPC for the security group.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a SecurityGroup resource.
type SecurityGroupArgs struct {
	// A description for the security group.
	GroupDescription pulumi.StringInput
	// The name of the security group.
	GroupName pulumi.StringPtrInput
	// [VPC only] The outbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
	SecurityGroupEgress SecurityGroupEgressTypeArrayInput
	// The inbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
	SecurityGroupIngress SecurityGroupIngressTypeArrayInput
	// Any tags assigned to the security group.
	Tags aws.TagArrayInput
	// The ID of the VPC for the security group.
	VpcId pulumi.StringPtrInput
}

func (SecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupArgs)(nil)).Elem()
}

type SecurityGroupInput interface {
	pulumi.Input

	ToSecurityGroupOutput() SecurityGroupOutput
	ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput
}

func (*SecurityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (i *SecurityGroup) ToSecurityGroupOutput() SecurityGroupOutput {
	return i.ToSecurityGroupOutputWithContext(context.Background())
}

func (i *SecurityGroup) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupOutput)
}

type SecurityGroupOutput struct{ *pulumi.OutputState }

func (SecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupOutput) ToSecurityGroupOutput() SecurityGroupOutput {
	return o
}

func (o SecurityGroupOutput) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return o
}

// The group name or group ID depending on whether the SG is created in default or specific VPC
func (o SecurityGroupOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A description for the security group.
func (o SecurityGroupOutput) GroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.GroupDescription }).(pulumi.StringOutput)
}

// The group ID of the specified security group.
func (o SecurityGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The name of the security group.
func (o SecurityGroupOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringPtrOutput { return v.GroupName }).(pulumi.StringPtrOutput)
}

// [VPC only] The outbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
func (o SecurityGroupOutput) SecurityGroupEgress() SecurityGroupEgressTypeArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupEgressTypeArrayOutput { return v.SecurityGroupEgress }).(SecurityGroupEgressTypeArrayOutput)
}

// The inbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
func (o SecurityGroupOutput) SecurityGroupIngress() SecurityGroupIngressTypeArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupIngressTypeArrayOutput { return v.SecurityGroupIngress }).(SecurityGroupIngressTypeArrayOutput)
}

// Any tags assigned to the security group.
func (o SecurityGroupOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ID of the VPC for the security group.
func (o SecurityGroupOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupInput)(nil)).Elem(), &SecurityGroup{})
	pulumi.RegisterOutputType(SecurityGroupOutput{})
}
