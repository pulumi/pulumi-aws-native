// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Schema of AWS::EC2::IPAMPoolCidr Type
type IpamPoolCidr struct {
	pulumi.CustomResourceState

	// Represents a single IPv4 or IPv6 CIDR
	Cidr pulumi.StringPtrOutput `pulumi:"cidr"`
	// Id of the IPAM Pool Cidr.
	IpamPoolCidrId pulumi.StringOutput `pulumi:"ipamPoolCidrId"`
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringOutput `pulumi:"ipamPoolId"`
	// The desired netmask length of the provision. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength pulumi.IntPtrOutput `pulumi:"netmaskLength"`
	// Provisioned state of the cidr.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewIpamPoolCidr registers a new resource with the given unique name, arguments, and options.
func NewIpamPoolCidr(ctx *pulumi.Context,
	name string, args *IpamPoolCidrArgs, opts ...pulumi.ResourceOption) (*IpamPoolCidr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpamPoolId == nil {
		return nil, errors.New("invalid value for required argument 'IpamPoolId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"cidr",
		"ipamPoolId",
		"netmaskLength",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpamPoolCidr
	err := ctx.RegisterResource("aws-native:ec2:IpamPoolCidr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamPoolCidr gets an existing IpamPoolCidr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamPoolCidr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamPoolCidrState, opts ...pulumi.ResourceOption) (*IpamPoolCidr, error) {
	var resource IpamPoolCidr
	err := ctx.ReadResource("aws-native:ec2:IpamPoolCidr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamPoolCidr resources.
type ipamPoolCidrState struct {
}

type IpamPoolCidrState struct {
}

func (IpamPoolCidrState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamPoolCidrState)(nil)).Elem()
}

type ipamPoolCidrArgs struct {
	// Represents a single IPv4 or IPv6 CIDR
	Cidr *string `pulumi:"cidr"`
	// Id of the IPAM Pool.
	IpamPoolId string `pulumi:"ipamPoolId"`
	// The desired netmask length of the provision. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength *int `pulumi:"netmaskLength"`
}

// The set of arguments for constructing a IpamPoolCidr resource.
type IpamPoolCidrArgs struct {
	// Represents a single IPv4 or IPv6 CIDR
	Cidr pulumi.StringPtrInput
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringInput
	// The desired netmask length of the provision. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
	NetmaskLength pulumi.IntPtrInput
}

func (IpamPoolCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamPoolCidrArgs)(nil)).Elem()
}

type IpamPoolCidrInput interface {
	pulumi.Input

	ToIpamPoolCidrOutput() IpamPoolCidrOutput
	ToIpamPoolCidrOutputWithContext(ctx context.Context) IpamPoolCidrOutput
}

func (*IpamPoolCidr) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamPoolCidr)(nil)).Elem()
}

func (i *IpamPoolCidr) ToIpamPoolCidrOutput() IpamPoolCidrOutput {
	return i.ToIpamPoolCidrOutputWithContext(context.Background())
}

func (i *IpamPoolCidr) ToIpamPoolCidrOutputWithContext(ctx context.Context) IpamPoolCidrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamPoolCidrOutput)
}

func (i *IpamPoolCidr) ToOutput(ctx context.Context) pulumix.Output[*IpamPoolCidr] {
	return pulumix.Output[*IpamPoolCidr]{
		OutputState: i.ToIpamPoolCidrOutputWithContext(ctx).OutputState,
	}
}

type IpamPoolCidrOutput struct{ *pulumi.OutputState }

func (IpamPoolCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamPoolCidr)(nil)).Elem()
}

func (o IpamPoolCidrOutput) ToIpamPoolCidrOutput() IpamPoolCidrOutput {
	return o
}

func (o IpamPoolCidrOutput) ToIpamPoolCidrOutputWithContext(ctx context.Context) IpamPoolCidrOutput {
	return o
}

func (o IpamPoolCidrOutput) ToOutput(ctx context.Context) pulumix.Output[*IpamPoolCidr] {
	return pulumix.Output[*IpamPoolCidr]{
		OutputState: o.OutputState,
	}
}

// Represents a single IPv4 or IPv6 CIDR
func (o IpamPoolCidrOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpamPoolCidr) pulumi.StringPtrOutput { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Id of the IPAM Pool Cidr.
func (o IpamPoolCidrOutput) IpamPoolCidrId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamPoolCidr) pulumi.StringOutput { return v.IpamPoolCidrId }).(pulumi.StringOutput)
}

// Id of the IPAM Pool.
func (o IpamPoolCidrOutput) IpamPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamPoolCidr) pulumi.StringOutput { return v.IpamPoolId }).(pulumi.StringOutput)
}

// The desired netmask length of the provision. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
func (o IpamPoolCidrOutput) NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpamPoolCidr) pulumi.IntPtrOutput { return v.NetmaskLength }).(pulumi.IntPtrOutput)
}

// Provisioned state of the cidr.
func (o IpamPoolCidrOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamPoolCidr) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpamPoolCidrInput)(nil)).Elem(), &IpamPoolCidr{})
	pulumi.RegisterOutputType(IpamPoolCidrOutput{})
}
