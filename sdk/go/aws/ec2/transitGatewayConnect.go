// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::EC2::TransitGatewayConnect type
type TransitGatewayConnect struct {
	pulumi.CustomResourceState

	// The creation time.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The Connect attachment options.
	Options TransitGatewayConnectOptionsOutput `pulumi:"options"`
	// The state of the attachment.
	State pulumi.StringOutput `pulumi:"state"`
	// The tags for the attachment.
	Tags TransitGatewayConnectTagArrayOutput `pulumi:"tags"`
	// The ID of the Connect attachment.
	TransitGatewayAttachmentId pulumi.StringOutput `pulumi:"transitGatewayAttachmentId"`
	// The ID of the transit gateway.
	TransitGatewayId pulumi.StringOutput `pulumi:"transitGatewayId"`
	// The ID of the attachment from which the Connect attachment was created.
	TransportTransitGatewayAttachmentId pulumi.StringOutput `pulumi:"transportTransitGatewayAttachmentId"`
}

// NewTransitGatewayConnect registers a new resource with the given unique name, arguments, and options.
func NewTransitGatewayConnect(ctx *pulumi.Context,
	name string, args *TransitGatewayConnectArgs, opts ...pulumi.ResourceOption) (*TransitGatewayConnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Options == nil {
		return nil, errors.New("invalid value for required argument 'Options'")
	}
	if args.TransportTransitGatewayAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransportTransitGatewayAttachmentId'")
	}
	var resource TransitGatewayConnect
	err := ctx.RegisterResource("aws-native:ec2:TransitGatewayConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitGatewayConnect gets an existing TransitGatewayConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitGatewayConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitGatewayConnectState, opts ...pulumi.ResourceOption) (*TransitGatewayConnect, error) {
	var resource TransitGatewayConnect
	err := ctx.ReadResource("aws-native:ec2:TransitGatewayConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitGatewayConnect resources.
type transitGatewayConnectState struct {
}

type TransitGatewayConnectState struct {
}

func (TransitGatewayConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayConnectState)(nil)).Elem()
}

type transitGatewayConnectArgs struct {
	// The Connect attachment options.
	Options TransitGatewayConnectOptions `pulumi:"options"`
	// The tags for the attachment.
	Tags []TransitGatewayConnectTag `pulumi:"tags"`
	// The ID of the attachment from which the Connect attachment was created.
	TransportTransitGatewayAttachmentId string `pulumi:"transportTransitGatewayAttachmentId"`
}

// The set of arguments for constructing a TransitGatewayConnect resource.
type TransitGatewayConnectArgs struct {
	// The Connect attachment options.
	Options TransitGatewayConnectOptionsInput
	// The tags for the attachment.
	Tags TransitGatewayConnectTagArrayInput
	// The ID of the attachment from which the Connect attachment was created.
	TransportTransitGatewayAttachmentId pulumi.StringInput
}

func (TransitGatewayConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayConnectArgs)(nil)).Elem()
}

type TransitGatewayConnectInput interface {
	pulumi.Input

	ToTransitGatewayConnectOutput() TransitGatewayConnectOutput
	ToTransitGatewayConnectOutputWithContext(ctx context.Context) TransitGatewayConnectOutput
}

func (*TransitGatewayConnect) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayConnect)(nil))
}

func (i *TransitGatewayConnect) ToTransitGatewayConnectOutput() TransitGatewayConnectOutput {
	return i.ToTransitGatewayConnectOutputWithContext(context.Background())
}

func (i *TransitGatewayConnect) ToTransitGatewayConnectOutputWithContext(ctx context.Context) TransitGatewayConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayConnectOutput)
}

type TransitGatewayConnectOutput struct{ *pulumi.OutputState }

func (TransitGatewayConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitGatewayConnect)(nil))
}

func (o TransitGatewayConnectOutput) ToTransitGatewayConnectOutput() TransitGatewayConnectOutput {
	return o
}

func (o TransitGatewayConnectOutput) ToTransitGatewayConnectOutputWithContext(ctx context.Context) TransitGatewayConnectOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayConnectInput)(nil)).Elem(), &TransitGatewayConnect{})
	pulumi.RegisterOutputType(TransitGatewayConnectOutput{})
}
