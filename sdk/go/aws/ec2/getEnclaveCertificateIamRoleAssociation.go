// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates an AWS Identity and Access Management (IAM) role with an AWS Certificate Manager (ACM) certificate. This association is based on Amazon Resource Names and it enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave.
func LookupEnclaveCertificateIamRoleAssociation(ctx *pulumi.Context, args *LookupEnclaveCertificateIamRoleAssociationArgs, opts ...pulumi.InvokeOption) (*LookupEnclaveCertificateIamRoleAssociationResult, error) {
	var rv LookupEnclaveCertificateIamRoleAssociationResult
	err := ctx.Invoke("aws-native:ec2:getEnclaveCertificateIamRoleAssociation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEnclaveCertificateIamRoleAssociationArgs struct {
	// The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
	CertificateArn string `pulumi:"certificateArn"`
	// The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
	RoleArn string `pulumi:"roleArn"`
}

type LookupEnclaveCertificateIamRoleAssociationResult struct {
	// The name of the Amazon S3 bucket to which the certificate was uploaded.
	CertificateS3BucketName *string `pulumi:"certificateS3BucketName"`
	// The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
	CertificateS3ObjectKey *string `pulumi:"certificateS3ObjectKey"`
	// The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
	EncryptionKmsKeyId *string `pulumi:"encryptionKmsKeyId"`
}

func LookupEnclaveCertificateIamRoleAssociationOutput(ctx *pulumi.Context, args LookupEnclaveCertificateIamRoleAssociationOutputArgs, opts ...pulumi.InvokeOption) LookupEnclaveCertificateIamRoleAssociationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEnclaveCertificateIamRoleAssociationResult, error) {
			args := v.(LookupEnclaveCertificateIamRoleAssociationArgs)
			r, err := LookupEnclaveCertificateIamRoleAssociation(ctx, &args, opts...)
			var s LookupEnclaveCertificateIamRoleAssociationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEnclaveCertificateIamRoleAssociationResultOutput)
}

type LookupEnclaveCertificateIamRoleAssociationOutputArgs struct {
	// The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
	CertificateArn pulumi.StringInput `pulumi:"certificateArn"`
	// The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (LookupEnclaveCertificateIamRoleAssociationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnclaveCertificateIamRoleAssociationArgs)(nil)).Elem()
}

type LookupEnclaveCertificateIamRoleAssociationResultOutput struct{ *pulumi.OutputState }

func (LookupEnclaveCertificateIamRoleAssociationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnclaveCertificateIamRoleAssociationResult)(nil)).Elem()
}

func (o LookupEnclaveCertificateIamRoleAssociationResultOutput) ToLookupEnclaveCertificateIamRoleAssociationResultOutput() LookupEnclaveCertificateIamRoleAssociationResultOutput {
	return o
}

func (o LookupEnclaveCertificateIamRoleAssociationResultOutput) ToLookupEnclaveCertificateIamRoleAssociationResultOutputWithContext(ctx context.Context) LookupEnclaveCertificateIamRoleAssociationResultOutput {
	return o
}

// The name of the Amazon S3 bucket to which the certificate was uploaded.
func (o LookupEnclaveCertificateIamRoleAssociationResultOutput) CertificateS3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnclaveCertificateIamRoleAssociationResult) *string { return v.CertificateS3BucketName }).(pulumi.StringPtrOutput)
}

// The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
func (o LookupEnclaveCertificateIamRoleAssociationResultOutput) CertificateS3ObjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnclaveCertificateIamRoleAssociationResult) *string { return v.CertificateS3ObjectKey }).(pulumi.StringPtrOutput)
}

// The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
func (o LookupEnclaveCertificateIamRoleAssociationResultOutput) EncryptionKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEnclaveCertificateIamRoleAssociationResult) *string { return v.EncryptionKmsKeyId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnclaveCertificateIamRoleAssociationResultOutput{})
}
