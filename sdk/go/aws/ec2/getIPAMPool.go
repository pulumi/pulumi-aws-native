// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAMPool Type
func LookupIPAMPool(ctx *pulumi.Context, args *LookupIPAMPoolArgs, opts ...pulumi.InvokeOption) (*LookupIPAMPoolResult, error) {
	var rv LookupIPAMPoolResult
	err := ctx.Invoke("aws-native:ec2:getIPAMPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIPAMPoolArgs struct {
	// Id of the IPAM Pool.
	IpamPoolId string `pulumi:"ipamPoolId"`
}

type LookupIPAMPoolResult struct {
	// The default netmask length for allocations made from this pool. This value is used when the netmask length of an allocation isn't specified.
	AllocationDefaultNetmaskLength *int `pulumi:"allocationDefaultNetmaskLength"`
	// The maximum allowed netmask length for allocations made from this pool.
	AllocationMaxNetmaskLength *int `pulumi:"allocationMaxNetmaskLength"`
	// The minimum allowed netmask length for allocations made from this pool.
	AllocationMinNetmaskLength *int `pulumi:"allocationMinNetmaskLength"`
	// When specified, an allocation will not be allowed unless a resource has a matching set of tags.
	AllocationResourceTags []IPAMPoolTag `pulumi:"allocationResourceTags"`
	// The Amazon Resource Name (ARN) of the IPAM Pool.
	Arn *string `pulumi:"arn"`
	// Determines what to do if IPAM discovers resources that haven't been assigned an allocation. If set to true, an allocation will be made automatically.
	AutoImport  *bool   `pulumi:"autoImport"`
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) of the IPAM this pool is a part of.
	IpamArn *string `pulumi:"ipamArn"`
	// Id of the IPAM Pool.
	IpamPoolId *string `pulumi:"ipamPoolId"`
	// The Amazon Resource Name (ARN) of the scope this pool is a part of.
	IpamScopeArn *string `pulumi:"ipamScopeArn"`
	// Determines whether this scope contains publicly routable space or space for a private network
	IpamScopeType *IPAMPoolIpamScopeType `pulumi:"ipamScopeType"`
	// The depth of this pool in the source pool hierarchy.
	PoolDepth *int `pulumi:"poolDepth"`
	// A list of cidrs representing the address space available for allocation in this pool.
	ProvisionedCidrs []IPAMPoolProvisionedCidr `pulumi:"provisionedCidrs"`
	// The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"
	State *IPAMPoolStateEnum `pulumi:"state"`
	// An explanation of how the pool arrived at it current state.
	StateMessage *string `pulumi:"stateMessage"`
	// An array of key-value pairs to apply to this resource.
	Tags []IPAMPoolTag `pulumi:"tags"`
}

func LookupIPAMPoolOutput(ctx *pulumi.Context, args LookupIPAMPoolOutputArgs, opts ...pulumi.InvokeOption) LookupIPAMPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIPAMPoolResult, error) {
			args := v.(LookupIPAMPoolArgs)
			r, err := LookupIPAMPool(ctx, &args, opts...)
			var s LookupIPAMPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIPAMPoolResultOutput)
}

type LookupIPAMPoolOutputArgs struct {
	// Id of the IPAM Pool.
	IpamPoolId pulumi.StringInput `pulumi:"ipamPoolId"`
}

func (LookupIPAMPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPAMPoolArgs)(nil)).Elem()
}

type LookupIPAMPoolResultOutput struct{ *pulumi.OutputState }

func (LookupIPAMPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIPAMPoolResult)(nil)).Elem()
}

func (o LookupIPAMPoolResultOutput) ToLookupIPAMPoolResultOutput() LookupIPAMPoolResultOutput {
	return o
}

func (o LookupIPAMPoolResultOutput) ToLookupIPAMPoolResultOutputWithContext(ctx context.Context) LookupIPAMPoolResultOutput {
	return o
}

// The default netmask length for allocations made from this pool. This value is used when the netmask length of an allocation isn't specified.
func (o LookupIPAMPoolResultOutput) AllocationDefaultNetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *int { return v.AllocationDefaultNetmaskLength }).(pulumi.IntPtrOutput)
}

// The maximum allowed netmask length for allocations made from this pool.
func (o LookupIPAMPoolResultOutput) AllocationMaxNetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *int { return v.AllocationMaxNetmaskLength }).(pulumi.IntPtrOutput)
}

// The minimum allowed netmask length for allocations made from this pool.
func (o LookupIPAMPoolResultOutput) AllocationMinNetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *int { return v.AllocationMinNetmaskLength }).(pulumi.IntPtrOutput)
}

// When specified, an allocation will not be allowed unless a resource has a matching set of tags.
func (o LookupIPAMPoolResultOutput) AllocationResourceTags() IPAMPoolTagArrayOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) []IPAMPoolTag { return v.AllocationResourceTags }).(IPAMPoolTagArrayOutput)
}

// The Amazon Resource Name (ARN) of the IPAM Pool.
func (o LookupIPAMPoolResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Determines what to do if IPAM discovers resources that haven't been assigned an allocation. If set to true, an allocation will be made automatically.
func (o LookupIPAMPoolResultOutput) AutoImport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *bool { return v.AutoImport }).(pulumi.BoolPtrOutput)
}

func (o LookupIPAMPoolResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IPAM this pool is a part of.
func (o LookupIPAMPoolResultOutput) IpamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *string { return v.IpamArn }).(pulumi.StringPtrOutput)
}

// Id of the IPAM Pool.
func (o LookupIPAMPoolResultOutput) IpamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *string { return v.IpamPoolId }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the scope this pool is a part of.
func (o LookupIPAMPoolResultOutput) IpamScopeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *string { return v.IpamScopeArn }).(pulumi.StringPtrOutput)
}

// Determines whether this scope contains publicly routable space or space for a private network
func (o LookupIPAMPoolResultOutput) IpamScopeType() IPAMPoolIpamScopeTypePtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *IPAMPoolIpamScopeType { return v.IpamScopeType }).(IPAMPoolIpamScopeTypePtrOutput)
}

// The depth of this pool in the source pool hierarchy.
func (o LookupIPAMPoolResultOutput) PoolDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *int { return v.PoolDepth }).(pulumi.IntPtrOutput)
}

// A list of cidrs representing the address space available for allocation in this pool.
func (o LookupIPAMPoolResultOutput) ProvisionedCidrs() IPAMPoolProvisionedCidrArrayOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) []IPAMPoolProvisionedCidr { return v.ProvisionedCidrs }).(IPAMPoolProvisionedCidrArrayOutput)
}

// The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"
func (o LookupIPAMPoolResultOutput) State() IPAMPoolStateEnumPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *IPAMPoolStateEnum { return v.State }).(IPAMPoolStateEnumPtrOutput)
}

// An explanation of how the pool arrived at it current state.
func (o LookupIPAMPoolResultOutput) StateMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) *string { return v.StateMessage }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupIPAMPoolResultOutput) Tags() IPAMPoolTagArrayOutput {
	return o.ApplyT(func(v LookupIPAMPoolResult) []IPAMPoolTag { return v.Tags }).(IPAMPoolTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIPAMPoolResultOutput{})
}
