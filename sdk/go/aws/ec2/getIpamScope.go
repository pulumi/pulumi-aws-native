// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAMScope Type
func LookupIpamScope(ctx *pulumi.Context, args *LookupIpamScopeArgs, opts ...pulumi.InvokeOption) (*LookupIpamScopeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpamScopeResult
	err := ctx.Invoke("aws-native:ec2:getIpamScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIpamScopeArgs struct {
	// Id of the IPAM scope.
	IpamScopeId string `pulumi:"ipamScopeId"`
}

type LookupIpamScopeResult struct {
	// The Amazon Resource Name (ARN) of the IPAM scope.
	Arn         *string `pulumi:"arn"`
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
	IpamArn *string `pulumi:"ipamArn"`
	// Id of the IPAM scope.
	IpamScopeId *string `pulumi:"ipamScopeId"`
	// Determines whether this scope contains publicly routable space or space for a private network
	IpamScopeType *IpamScopeType `pulumi:"ipamScopeType"`
	// Is this one of the default scopes created with the IPAM.
	IsDefault *bool `pulumi:"isDefault"`
	// The number of pools that currently exist in this scope.
	PoolCount *int `pulumi:"poolCount"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupIpamScopeOutput(ctx *pulumi.Context, args LookupIpamScopeOutputArgs, opts ...pulumi.InvokeOption) LookupIpamScopeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIpamScopeResult, error) {
			args := v.(LookupIpamScopeArgs)
			r, err := LookupIpamScope(ctx, &args, opts...)
			var s LookupIpamScopeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIpamScopeResultOutput)
}

type LookupIpamScopeOutputArgs struct {
	// Id of the IPAM scope.
	IpamScopeId pulumi.StringInput `pulumi:"ipamScopeId"`
}

func (LookupIpamScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpamScopeArgs)(nil)).Elem()
}

type LookupIpamScopeResultOutput struct{ *pulumi.OutputState }

func (LookupIpamScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpamScopeResult)(nil)).Elem()
}

func (o LookupIpamScopeResultOutput) ToLookupIpamScopeResultOutput() LookupIpamScopeResultOutput {
	return o
}

func (o LookupIpamScopeResultOutput) ToLookupIpamScopeResultOutputWithContext(ctx context.Context) LookupIpamScopeResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the IPAM scope.
func (o LookupIpamScopeResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupIpamScopeResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
func (o LookupIpamScopeResultOutput) IpamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) *string { return v.IpamArn }).(pulumi.StringPtrOutput)
}

// Id of the IPAM scope.
func (o LookupIpamScopeResultOutput) IpamScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) *string { return v.IpamScopeId }).(pulumi.StringPtrOutput)
}

// Determines whether this scope contains publicly routable space or space for a private network
func (o LookupIpamScopeResultOutput) IpamScopeType() IpamScopeTypePtrOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) *IpamScopeType { return v.IpamScopeType }).(IpamScopeTypePtrOutput)
}

// Is this one of the default scopes created with the IPAM.
func (o LookupIpamScopeResultOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The number of pools that currently exist in this scope.
func (o LookupIpamScopeResultOutput) PoolCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) *int { return v.PoolCount }).(pulumi.IntPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupIpamScopeResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupIpamScopeResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpamScopeResultOutput{})
}
