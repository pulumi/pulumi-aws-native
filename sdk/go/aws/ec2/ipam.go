// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema of AWS::EC2::IPAM Type
type IPAM struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the IPAM.
	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Id of the IPAM.
	IpamId pulumi.StringOutput `pulumi:"ipamId"`
	// The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
	OperatingRegions IPAMIpamOperatingRegionArrayOutput `pulumi:"operatingRegions"`
	// The Id of the default scope for publicly routable IP space, created with this IPAM.
	PrivateDefaultScopeId pulumi.StringOutput `pulumi:"privateDefaultScopeId"`
	// The Id of the default scope for publicly routable IP space, created with this IPAM.
	PublicDefaultScopeId pulumi.StringOutput `pulumi:"publicDefaultScopeId"`
	// The number of scopes that currently exist in this IPAM.
	ScopeCount pulumi.IntOutput `pulumi:"scopeCount"`
	// An array of key-value pairs to apply to this resource.
	Tags IPAMTagArrayOutput `pulumi:"tags"`
}

// NewIPAM registers a new resource with the given unique name, arguments, and options.
func NewIPAM(ctx *pulumi.Context,
	name string, args *IPAMArgs, opts ...pulumi.ResourceOption) (*IPAM, error) {
	if args == nil {
		args = &IPAMArgs{}
	}

	var resource IPAM
	err := ctx.RegisterResource("aws-native:ec2:IPAM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPAM gets an existing IPAM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPAM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPAMState, opts ...pulumi.ResourceOption) (*IPAM, error) {
	var resource IPAM
	err := ctx.ReadResource("aws-native:ec2:IPAM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPAM resources.
type ipamState struct {
}

type IPAMState struct {
}

func (IPAMState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamState)(nil)).Elem()
}

type ipamArgs struct {
	Description *string `pulumi:"description"`
	// The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
	OperatingRegions []IPAMIpamOperatingRegion `pulumi:"operatingRegions"`
	// An array of key-value pairs to apply to this resource.
	Tags []IPAMTag `pulumi:"tags"`
}

// The set of arguments for constructing a IPAM resource.
type IPAMArgs struct {
	Description pulumi.StringPtrInput
	// The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
	OperatingRegions IPAMIpamOperatingRegionArrayInput
	// An array of key-value pairs to apply to this resource.
	Tags IPAMTagArrayInput
}

func (IPAMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamArgs)(nil)).Elem()
}

type IPAMInput interface {
	pulumi.Input

	ToIPAMOutput() IPAMOutput
	ToIPAMOutputWithContext(ctx context.Context) IPAMOutput
}

func (*IPAM) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAM)(nil))
}

func (i *IPAM) ToIPAMOutput() IPAMOutput {
	return i.ToIPAMOutputWithContext(context.Background())
}

func (i *IPAM) ToIPAMOutputWithContext(ctx context.Context) IPAMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAMOutput)
}

type IPAMOutput struct{ *pulumi.OutputState }

func (IPAMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAM)(nil))
}

func (o IPAMOutput) ToIPAMOutput() IPAMOutput {
	return o
}

func (o IPAMOutput) ToIPAMOutputWithContext(ctx context.Context) IPAMOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPAMInput)(nil)).Elem(), &IPAM{})
	pulumi.RegisterOutputType(IPAMOutput{})
}
