// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the properties for creating a launch template.
//
//	The minimum required properties for specifying a launch template are as follows:
//	 +  You must specify at least one property for the launch template data.
//	 +  You do not need to specify a name for the launch template. If you do not specify a name, CFN creates the name for you.
//
//	A launch template can contain some or all of the configuration information to launch an instance. When you launch an instance using a launch template, instance properties that are not specified in the launch template use default values, except the ``ImageId`` property, which has no default value. If you do not specify an AMI ID for the launch template ``ImageId`` property, you must specify an AMI ID for the instance ``ImageId`` property.
//	For more information, see [Launch an instance from a launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the *Amazon EC2 User Guide*.
func LookupLaunchTemplate(ctx *pulumi.Context, args *LookupLaunchTemplateArgs, opts ...pulumi.InvokeOption) (*LookupLaunchTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLaunchTemplateResult
	err := ctx.Invoke("aws-native:ec2:getLaunchTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLaunchTemplateArgs struct {
	LaunchTemplateId string `pulumi:"launchTemplateId"`
}

type LookupLaunchTemplateResult struct {
	DefaultVersionNumber *string `pulumi:"defaultVersionNumber"`
	LatestVersionNumber  *string `pulumi:"latestVersionNumber"`
	LaunchTemplateId     *string `pulumi:"launchTemplateId"`
}

func LookupLaunchTemplateOutput(ctx *pulumi.Context, args LookupLaunchTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupLaunchTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLaunchTemplateResult, error) {
			args := v.(LookupLaunchTemplateArgs)
			r, err := LookupLaunchTemplate(ctx, &args, opts...)
			var s LookupLaunchTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLaunchTemplateResultOutput)
}

type LookupLaunchTemplateOutputArgs struct {
	LaunchTemplateId pulumi.StringInput `pulumi:"launchTemplateId"`
}

func (LookupLaunchTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchTemplateArgs)(nil)).Elem()
}

type LookupLaunchTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupLaunchTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchTemplateResult)(nil)).Elem()
}

func (o LookupLaunchTemplateResultOutput) ToLookupLaunchTemplateResultOutput() LookupLaunchTemplateResultOutput {
	return o
}

func (o LookupLaunchTemplateResultOutput) ToLookupLaunchTemplateResultOutputWithContext(ctx context.Context) LookupLaunchTemplateResultOutput {
	return o
}

func (o LookupLaunchTemplateResultOutput) DefaultVersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchTemplateResult) *string { return v.DefaultVersionNumber }).(pulumi.StringPtrOutput)
}

func (o LookupLaunchTemplateResultOutput) LatestVersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchTemplateResult) *string { return v.LatestVersionNumber }).(pulumi.StringPtrOutput)
}

func (o LookupLaunchTemplateResultOutput) LaunchTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchTemplateResult) *string { return v.LaunchTemplateId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLaunchTemplateResultOutput{})
}
