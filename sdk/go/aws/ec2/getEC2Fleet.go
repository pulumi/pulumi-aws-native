// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::EC2Fleet
func LookupEC2Fleet(ctx *pulumi.Context, args *LookupEC2FleetArgs, opts ...pulumi.InvokeOption) (*LookupEC2FleetResult, error) {
	var rv LookupEC2FleetResult
	err := ctx.Invoke("aws-native:ec2:getEC2Fleet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEC2FleetArgs struct {
	FleetId string `pulumi:"fleetId"`
}

type LookupEC2FleetResult struct {
	Context                         *string                                     `pulumi:"context"`
	ExcessCapacityTerminationPolicy *EC2FleetExcessCapacityTerminationPolicy    `pulumi:"excessCapacityTerminationPolicy"`
	FleetId                         *string                                     `pulumi:"fleetId"`
	TargetCapacitySpecification     *EC2FleetTargetCapacitySpecificationRequest `pulumi:"targetCapacitySpecification"`
}

func LookupEC2FleetOutput(ctx *pulumi.Context, args LookupEC2FleetOutputArgs, opts ...pulumi.InvokeOption) LookupEC2FleetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEC2FleetResult, error) {
			args := v.(LookupEC2FleetArgs)
			r, err := LookupEC2Fleet(ctx, &args, opts...)
			var s LookupEC2FleetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEC2FleetResultOutput)
}

type LookupEC2FleetOutputArgs struct {
	FleetId pulumi.StringInput `pulumi:"fleetId"`
}

func (LookupEC2FleetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEC2FleetArgs)(nil)).Elem()
}

type LookupEC2FleetResultOutput struct{ *pulumi.OutputState }

func (LookupEC2FleetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEC2FleetResult)(nil)).Elem()
}

func (o LookupEC2FleetResultOutput) ToLookupEC2FleetResultOutput() LookupEC2FleetResultOutput {
	return o
}

func (o LookupEC2FleetResultOutput) ToLookupEC2FleetResultOutputWithContext(ctx context.Context) LookupEC2FleetResultOutput {
	return o
}

func (o LookupEC2FleetResultOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEC2FleetResult) *string { return v.Context }).(pulumi.StringPtrOutput)
}

func (o LookupEC2FleetResultOutput) ExcessCapacityTerminationPolicy() EC2FleetExcessCapacityTerminationPolicyPtrOutput {
	return o.ApplyT(func(v LookupEC2FleetResult) *EC2FleetExcessCapacityTerminationPolicy {
		return v.ExcessCapacityTerminationPolicy
	}).(EC2FleetExcessCapacityTerminationPolicyPtrOutput)
}

func (o LookupEC2FleetResultOutput) FleetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEC2FleetResult) *string { return v.FleetId }).(pulumi.StringPtrOutput)
}

func (o LookupEC2FleetResultOutput) TargetCapacitySpecification() EC2FleetTargetCapacitySpecificationRequestPtrOutput {
	return o.ApplyT(func(v LookupEC2FleetResult) *EC2FleetTargetCapacitySpecificationRequest {
		return v.TargetCapacitySpecification
	}).(EC2FleetTargetCapacitySpecificationRequestPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEC2FleetResultOutput{})
}
