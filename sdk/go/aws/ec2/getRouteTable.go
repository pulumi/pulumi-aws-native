// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::RouteTable
func LookupRouteTable(ctx *pulumi.Context, args *LookupRouteTableArgs, opts ...pulumi.InvokeOption) (*LookupRouteTableResult, error) {
	var rv LookupRouteTableResult
	err := ctx.Invoke("aws-native:ec2:getRouteTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRouteTableArgs struct {
	// The route table ID.
	RouteTableId string `pulumi:"routeTableId"`
}

type LookupRouteTableResult struct {
	// The route table ID.
	RouteTableId *string `pulumi:"routeTableId"`
	// Any tags assigned to the route table.
	Tags []RouteTableTag `pulumi:"tags"`
}

func LookupRouteTableOutput(ctx *pulumi.Context, args LookupRouteTableOutputArgs, opts ...pulumi.InvokeOption) LookupRouteTableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRouteTableResult, error) {
			args := v.(LookupRouteTableArgs)
			r, err := LookupRouteTable(ctx, &args, opts...)
			return *r, err
		}).(LookupRouteTableResultOutput)
}

type LookupRouteTableOutputArgs struct {
	// The route table ID.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
}

func (LookupRouteTableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableArgs)(nil)).Elem()
}

type LookupRouteTableResultOutput struct{ *pulumi.OutputState }

func (LookupRouteTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableResult)(nil)).Elem()
}

func (o LookupRouteTableResultOutput) ToLookupRouteTableResultOutput() LookupRouteTableResultOutput {
	return o
}

func (o LookupRouteTableResultOutput) ToLookupRouteTableResultOutputWithContext(ctx context.Context) LookupRouteTableResultOutput {
	return o
}

// The route table ID.
func (o LookupRouteTableResultOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteTableResult) *string { return v.RouteTableId }).(pulumi.StringPtrOutput)
}

// Any tags assigned to the route table.
func (o LookupRouteTableResultOutput) Tags() RouteTableTagArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []RouteTableTag { return v.Tags }).(RouteTableTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteTableResultOutput{})
}
