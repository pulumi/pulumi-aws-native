// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a key pair for use with an EC2long instance as follows:
//
//   - To import an existing key pair, include the “PublicKeyMaterial“ property.
//
//   - To create a new key pair, omit the “PublicKeyMaterial“ property.
//
//     When you import an existing key pair, you specify the public key material for the key. We assume that you have the private key material for the key. CFNlong does not create or return the private key material when you import a key pair.
//     When you create a new key pair, the private key is saved to SYSlong Parameter Store, using a parameter with the following name: “/ec2/keypair/{key_pair_id}“. For more information about retrieving private key, and the required permissions, see [Create a key pair using](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html#create-key-pair-cloudformation) in the *User Guide*.
//     When CFN deletes a key pair that was created or imported by a stack, it also deletes the parameter that was used to store the private key material in Parameter Store.
func LookupKeyPair(ctx *pulumi.Context, args *LookupKeyPairArgs, opts ...pulumi.InvokeOption) (*LookupKeyPairResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyPairResult
	err := ctx.Invoke("aws-native:ec2:getKeyPair", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupKeyPairArgs struct {
	// A unique name for the key pair.
	//  Constraints: Up to 255 ASCII characters
	KeyName string `pulumi:"keyName"`
}

type LookupKeyPairResult struct {
	KeyFingerprint *string `pulumi:"keyFingerprint"`
	KeyPairId      *string `pulumi:"keyPairId"`
}

func LookupKeyPairOutput(ctx *pulumi.Context, args LookupKeyPairOutputArgs, opts ...pulumi.InvokeOption) LookupKeyPairResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupKeyPairResult, error) {
			args := v.(LookupKeyPairArgs)
			r, err := LookupKeyPair(ctx, &args, opts...)
			var s LookupKeyPairResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupKeyPairResultOutput)
}

type LookupKeyPairOutputArgs struct {
	// A unique name for the key pair.
	//  Constraints: Up to 255 ASCII characters
	KeyName pulumi.StringInput `pulumi:"keyName"`
}

func (LookupKeyPairOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyPairArgs)(nil)).Elem()
}

type LookupKeyPairResultOutput struct{ *pulumi.OutputState }

func (LookupKeyPairResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyPairResult)(nil)).Elem()
}

func (o LookupKeyPairResultOutput) ToLookupKeyPairResultOutput() LookupKeyPairResultOutput {
	return o
}

func (o LookupKeyPairResultOutput) ToLookupKeyPairResultOutputWithContext(ctx context.Context) LookupKeyPairResultOutput {
	return o
}

func (o LookupKeyPairResultOutput) KeyFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyPairResult) *string { return v.KeyFingerprint }).(pulumi.StringPtrOutput)
}

func (o LookupKeyPairResultOutput) KeyPairId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupKeyPairResult) *string { return v.KeyPairId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyPairResultOutput{})
}
