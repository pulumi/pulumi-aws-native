// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VPC Route Server Endpoint
type RouteServerEndpoint struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the Route Server Endpoint.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the Route Server Endpoint.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Elastic Network Interface IP address owned by the Route Server Endpoint
	EniAddress pulumi.StringOutput `pulumi:"eniAddress"`
	// Elastic Network Interface ID owned by the Route Server Endpoint
	EniId pulumi.StringOutput `pulumi:"eniId"`
	// Route Server ID
	RouteServerId pulumi.StringOutput `pulumi:"routeServerId"`
	// Subnet ID
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// VPC ID
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRouteServerEndpoint registers a new resource with the given unique name, arguments, and options.
func NewRouteServerEndpoint(ctx *pulumi.Context,
	name string, args *RouteServerEndpointArgs, opts ...pulumi.ResourceOption) (*RouteServerEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteServerId == nil {
		return nil, errors.New("invalid value for required argument 'RouteServerId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"routeServerId",
		"subnetId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteServerEndpoint
	err := ctx.RegisterResource("aws-native:ec2:RouteServerEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteServerEndpoint gets an existing RouteServerEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteServerEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteServerEndpointState, opts ...pulumi.ResourceOption) (*RouteServerEndpoint, error) {
	var resource RouteServerEndpoint
	err := ctx.ReadResource("aws-native:ec2:RouteServerEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteServerEndpoint resources.
type routeServerEndpointState struct {
}

type RouteServerEndpointState struct {
}

func (RouteServerEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerEndpointState)(nil)).Elem()
}

type routeServerEndpointArgs struct {
	// Route Server ID
	RouteServerId string `pulumi:"routeServerId"`
	// Subnet ID
	SubnetId string `pulumi:"subnetId"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a RouteServerEndpoint resource.
type RouteServerEndpointArgs struct {
	// Route Server ID
	RouteServerId pulumi.StringInput
	// Subnet ID
	SubnetId pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (RouteServerEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeServerEndpointArgs)(nil)).Elem()
}

type RouteServerEndpointInput interface {
	pulumi.Input

	ToRouteServerEndpointOutput() RouteServerEndpointOutput
	ToRouteServerEndpointOutputWithContext(ctx context.Context) RouteServerEndpointOutput
}

func (*RouteServerEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerEndpoint)(nil)).Elem()
}

func (i *RouteServerEndpoint) ToRouteServerEndpointOutput() RouteServerEndpointOutput {
	return i.ToRouteServerEndpointOutputWithContext(context.Background())
}

func (i *RouteServerEndpoint) ToRouteServerEndpointOutputWithContext(ctx context.Context) RouteServerEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteServerEndpointOutput)
}

type RouteServerEndpointOutput struct{ *pulumi.OutputState }

func (RouteServerEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteServerEndpoint)(nil)).Elem()
}

func (o RouteServerEndpointOutput) ToRouteServerEndpointOutput() RouteServerEndpointOutput {
	return o
}

func (o RouteServerEndpointOutput) ToRouteServerEndpointOutputWithContext(ctx context.Context) RouteServerEndpointOutput {
	return o
}

// The Amazon Resource Name (ARN) of the Route Server Endpoint.
func (o RouteServerEndpointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the Route Server Endpoint.
func (o RouteServerEndpointOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Elastic Network Interface IP address owned by the Route Server Endpoint
func (o RouteServerEndpointOutput) EniAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.EniAddress }).(pulumi.StringOutput)
}

// Elastic Network Interface ID owned by the Route Server Endpoint
func (o RouteServerEndpointOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.EniId }).(pulumi.StringOutput)
}

// Route Server ID
func (o RouteServerEndpointOutput) RouteServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.RouteServerId }).(pulumi.StringOutput)
}

// Subnet ID
func (o RouteServerEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o RouteServerEndpointOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// VPC ID
func (o RouteServerEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteServerEndpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteServerEndpointInput)(nil)).Elem(), &RouteServerEndpoint{})
	pulumi.RegisterOutputType(RouteServerEndpointOutput{})
}
