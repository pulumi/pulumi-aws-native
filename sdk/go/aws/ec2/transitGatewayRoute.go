// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::TransitGatewayRoute
type TransitGatewayRoute struct {
	pulumi.CustomResourceState

	// Indicates whether to drop traffic that matches this route.
	Blackhole pulumi.BoolPtrOutput `pulumi:"blackhole"`
	// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// The ID of transit gateway attachment.
	TransitGatewayAttachmentId pulumi.StringPtrOutput `pulumi:"transitGatewayAttachmentId"`
	// The ID of transit gateway route table.
	TransitGatewayRouteTableId pulumi.StringOutput `pulumi:"transitGatewayRouteTableId"`
}

// NewTransitGatewayRoute registers a new resource with the given unique name, arguments, and options.
func NewTransitGatewayRoute(ctx *pulumi.Context,
	name string, args *TransitGatewayRouteArgs, opts ...pulumi.ResourceOption) (*TransitGatewayRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.TransitGatewayRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayRouteTableId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"blackhole",
		"destinationCidrBlock",
		"transitGatewayAttachmentId",
		"transitGatewayRouteTableId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitGatewayRoute
	err := ctx.RegisterResource("aws-native:ec2:TransitGatewayRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitGatewayRoute gets an existing TransitGatewayRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitGatewayRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitGatewayRouteState, opts ...pulumi.ResourceOption) (*TransitGatewayRoute, error) {
	var resource TransitGatewayRoute
	err := ctx.ReadResource("aws-native:ec2:TransitGatewayRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitGatewayRoute resources.
type transitGatewayRouteState struct {
}

type TransitGatewayRouteState struct {
}

func (TransitGatewayRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayRouteState)(nil)).Elem()
}

type transitGatewayRouteArgs struct {
	// Indicates whether to drop traffic that matches this route.
	Blackhole *bool `pulumi:"blackhole"`
	// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The ID of transit gateway attachment.
	TransitGatewayAttachmentId *string `pulumi:"transitGatewayAttachmentId"`
	// The ID of transit gateway route table.
	TransitGatewayRouteTableId string `pulumi:"transitGatewayRouteTableId"`
}

// The set of arguments for constructing a TransitGatewayRoute resource.
type TransitGatewayRouteArgs struct {
	// Indicates whether to drop traffic that matches this route.
	Blackhole pulumi.BoolPtrInput
	// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock pulumi.StringInput
	// The ID of transit gateway attachment.
	TransitGatewayAttachmentId pulumi.StringPtrInput
	// The ID of transit gateway route table.
	TransitGatewayRouteTableId pulumi.StringInput
}

func (TransitGatewayRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayRouteArgs)(nil)).Elem()
}

type TransitGatewayRouteInput interface {
	pulumi.Input

	ToTransitGatewayRouteOutput() TransitGatewayRouteOutput
	ToTransitGatewayRouteOutputWithContext(ctx context.Context) TransitGatewayRouteOutput
}

func (*TransitGatewayRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayRoute)(nil)).Elem()
}

func (i *TransitGatewayRoute) ToTransitGatewayRouteOutput() TransitGatewayRouteOutput {
	return i.ToTransitGatewayRouteOutputWithContext(context.Background())
}

func (i *TransitGatewayRoute) ToTransitGatewayRouteOutputWithContext(ctx context.Context) TransitGatewayRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayRouteOutput)
}

type TransitGatewayRouteOutput struct{ *pulumi.OutputState }

func (TransitGatewayRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayRoute)(nil)).Elem()
}

func (o TransitGatewayRouteOutput) ToTransitGatewayRouteOutput() TransitGatewayRouteOutput {
	return o
}

func (o TransitGatewayRouteOutput) ToTransitGatewayRouteOutputWithContext(ctx context.Context) TransitGatewayRouteOutput {
	return o
}

// Indicates whether to drop traffic that matches this route.
func (o TransitGatewayRouteOutput) Blackhole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransitGatewayRoute) pulumi.BoolPtrOutput { return v.Blackhole }).(pulumi.BoolPtrOutput)
}

// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
func (o TransitGatewayRouteOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayRoute) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// The ID of transit gateway attachment.
func (o TransitGatewayRouteOutput) TransitGatewayAttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitGatewayRoute) pulumi.StringPtrOutput { return v.TransitGatewayAttachmentId }).(pulumi.StringPtrOutput)
}

// The ID of transit gateway route table.
func (o TransitGatewayRouteOutput) TransitGatewayRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayRoute) pulumi.StringOutput { return v.TransitGatewayRouteTableId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayRouteInput)(nil)).Elem(), &TransitGatewayRoute{})
	pulumi.RegisterOutputType(TransitGatewayRouteOutput{})
}
