// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::ClientVpnRoute
//
// Deprecated: ClientVpnRoute is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type ClientVpnRoute struct {
	pulumi.CustomResourceState

	ClientVpnEndpointId  pulumi.StringOutput    `pulumi:"clientVpnEndpointId"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	DestinationCidrBlock pulumi.StringOutput    `pulumi:"destinationCidrBlock"`
	TargetVpcSubnetId    pulumi.StringOutput    `pulumi:"targetVpcSubnetId"`
}

// NewClientVpnRoute registers a new resource with the given unique name, arguments, and options.
func NewClientVpnRoute(ctx *pulumi.Context,
	name string, args *ClientVpnRouteArgs, opts ...pulumi.ResourceOption) (*ClientVpnRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientVpnEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'ClientVpnEndpointId'")
	}
	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.TargetVpcSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetVpcSubnetId'")
	}
	var resource ClientVpnRoute
	err := ctx.RegisterResource("aws-native:ec2:ClientVpnRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientVpnRoute gets an existing ClientVpnRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientVpnRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientVpnRouteState, opts ...pulumi.ResourceOption) (*ClientVpnRoute, error) {
	var resource ClientVpnRoute
	err := ctx.ReadResource("aws-native:ec2:ClientVpnRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientVpnRoute resources.
type clientVpnRouteState struct {
}

type ClientVpnRouteState struct {
}

func (ClientVpnRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientVpnRouteState)(nil)).Elem()
}

type clientVpnRouteArgs struct {
	ClientVpnEndpointId  string  `pulumi:"clientVpnEndpointId"`
	Description          *string `pulumi:"description"`
	DestinationCidrBlock string  `pulumi:"destinationCidrBlock"`
	TargetVpcSubnetId    string  `pulumi:"targetVpcSubnetId"`
}

// The set of arguments for constructing a ClientVpnRoute resource.
type ClientVpnRouteArgs struct {
	ClientVpnEndpointId  pulumi.StringInput
	Description          pulumi.StringPtrInput
	DestinationCidrBlock pulumi.StringInput
	TargetVpcSubnetId    pulumi.StringInput
}

func (ClientVpnRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientVpnRouteArgs)(nil)).Elem()
}

type ClientVpnRouteInput interface {
	pulumi.Input

	ToClientVpnRouteOutput() ClientVpnRouteOutput
	ToClientVpnRouteOutputWithContext(ctx context.Context) ClientVpnRouteOutput
}

func (*ClientVpnRoute) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientVpnRoute)(nil))
}

func (i *ClientVpnRoute) ToClientVpnRouteOutput() ClientVpnRouteOutput {
	return i.ToClientVpnRouteOutputWithContext(context.Background())
}

func (i *ClientVpnRoute) ToClientVpnRouteOutputWithContext(ctx context.Context) ClientVpnRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientVpnRouteOutput)
}

type ClientVpnRouteOutput struct{ *pulumi.OutputState }

func (ClientVpnRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientVpnRoute)(nil))
}

func (o ClientVpnRouteOutput) ToClientVpnRouteOutput() ClientVpnRouteOutput {
	return o
}

func (o ClientVpnRouteOutput) ToClientVpnRouteOutputWithContext(ctx context.Context) ClientVpnRouteOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientVpnRouteInput)(nil)).Elem(), &ClientVpnRoute{})
	pulumi.RegisterOutputType(ClientVpnRouteOutput{})
}
