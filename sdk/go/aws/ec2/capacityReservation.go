// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::CapacityReservation
type CapacityReservation struct {
	pulumi.CustomResourceState

	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumi.StringPtrOutput `pulumi:"availabilityZone"`
	// The Availability Zone ID of the Capacity Reservation.
	AvailabilityZoneId pulumi.StringPtrOutput `pulumi:"availabilityZoneId"`
	// Returns the remaining capacity, which indicates the number of instances that can be launched in the Capacity Reservation. For example: `9` .
	AvailableInstanceCount pulumi.IntOutput `pulumi:"availableInstanceCount"`
	// The ID of the Capacity Reservation.
	AwsId                 pulumi.StringOutput                              `pulumi:"awsId"`
	CapacityAllocationSet CapacityReservationCapacityAllocationArrayOutput `pulumi:"capacityAllocationSet"`
	// The Amazon Resource Name (ARN) of the Capacity Reservation.
	CapacityReservationArn pulumi.StringOutput `pulumi:"capacityReservationArn"`
	// The ID of the Capacity Reservation Fleet to which the Capacity Reservation belongs. Only valid for Capacity Reservations that were created by a Capacity Reservation Fleet.
	CapacityReservationFleetId pulumi.StringOutput            `pulumi:"capacityReservationFleetId"`
	CommitmentInfo             CommitmentInfoPropertiesOutput `pulumi:"commitmentInfo"`
	// The date and time at which the Capacity Reservation was created.
	CreateDate pulumi.StringOutput `pulumi:"createDate"`
	// The delivery method for a future-dated Capacity Reservation. `incremental` indicates that the requested capacity is delivered in addition to any running instances and reserved capacity that you have in your account at the requested date and time.
	DeliveryPreference pulumi.StringOutput `pulumi:"deliveryPreference"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
	EbsOptimized pulumi.BoolPtrOutput `pulumi:"ebsOptimized"`
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
	//
	// You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
	//
	// If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
	//
	// If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
	//
	// - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
	// - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
	EndDateType pulumi.StringPtrOutput `pulumi:"endDateType"`
	// *Deprecated.*
	EphemeralStorage pulumi.BoolPtrOutput `pulumi:"ephemeralStorage"`
	// The number of instances for which to reserve capacity.
	//
	// > You can request future-dated Capacity Reservations for an instance count with a minimum of 64 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *16 * m5.xlarge = 64 vCPUs* ).
	//
	// Valid range: 1 - 1000
	InstanceCount pulumi.IntOutput `pulumi:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
	//
	// - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
	// - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
	//
	// > If you are requesting a future-dated Capacity Reservation, you must specify `targeted` .
	//
	// Default: `open`
	InstanceMatchCriteria pulumi.StringPtrOutput `pulumi:"instanceMatchCriteria"`
	// The type of operating system for which to reserve capacity.
	InstancePlatform pulumi.StringOutput `pulumi:"instancePlatform"`
	// The instance type for which to reserve capacity.
	//
	// > You can request future-dated Capacity Reservations for instance types in the C, M, R, I, T, and G instance families only.
	//
	// For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// > Not supported for future-dated Capacity Reservations.
	//
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutPostArn pulumi.StringPtrOutput `pulumi:"outPostArn"`
	// The ID of the AWS account that owns the Capacity Reservation.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// > Not supported for future-dated Capacity Reservations.
	//
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
	PlacementGroupArn pulumi.StringPtrOutput `pulumi:"placementGroupArn"`
	// The type of Capacity Reservation.
	ReservationType pulumi.StringOutput `pulumi:"reservationType"`
	// The date and time at which the Capacity Reservation was started.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:
	//
	// - `active` - The capacity is available for use.
	// - `expired` - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.
	// - `cancelled` - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.
	// - `pending` - The Capacity Reservation request was successful but the capacity provisioning is still pending.
	// - `failed` - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.
	// - `scheduled` - ( *Future-dated Capacity Reservations* ) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.
	// - `payment-pending` - ( *Capacity Blocks* ) The upfront payment has not been processed yet.
	// - `payment-failed` - ( *Capacity Blocks* ) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.
	// - `assessing` - ( *Future-dated Capacity Reservations* ) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.
	// - `delayed` - ( *Future-dated Capacity Reservations* ) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.
	// - `unsupported` - ( *Future-dated Capacity Reservations* ) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.
	State pulumi.StringOutput `pulumi:"state"`
	// The tags to apply to the Capacity Reservation during launch.
	TagSpecifications CapacityReservationTagSpecificationArrayOutput `pulumi:"tagSpecifications"`
	// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
	//
	// - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
	// - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
	Tenancy pulumi.StringPtrOutput `pulumi:"tenancy"`
	// Returns the total number of instances for which the Capacity Reservation reserves capacity. For example: `15` .
	TotalInstanceCount pulumi.IntOutput `pulumi:"totalInstanceCount"`
	// The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
	//
	// You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
	UnusedReservationBillingOwnerId pulumi.StringPtrOutput `pulumi:"unusedReservationBillingOwnerId"`
}

// NewCapacityReservation registers a new resource with the given unique name, arguments, and options.
func NewCapacityReservation(ctx *pulumi.Context,
	name string, args *CapacityReservationArgs, opts ...pulumi.ResourceOption) (*CapacityReservation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceCount == nil {
		return nil, errors.New("invalid value for required argument 'InstanceCount'")
	}
	if args.InstancePlatform == nil {
		return nil, errors.New("invalid value for required argument 'InstancePlatform'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"availabilityZone",
		"availabilityZoneId",
		"ebsOptimized",
		"ephemeralStorage",
		"instancePlatform",
		"instanceType",
		"outPostArn",
		"placementGroupArn",
		"tagSpecifications[*]",
		"tenancy",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CapacityReservation
	err := ctx.RegisterResource("aws-native:ec2:CapacityReservation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityReservation gets an existing CapacityReservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityReservation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityReservationState, opts ...pulumi.ResourceOption) (*CapacityReservation, error) {
	var resource CapacityReservation
	err := ctx.ReadResource("aws-native:ec2:CapacityReservation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityReservation resources.
type capacityReservationState struct {
}

type CapacityReservationState struct {
}

func (CapacityReservationState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityReservationState)(nil)).Elem()
}

type capacityReservationArgs struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The Availability Zone ID of the Capacity Reservation.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
	//
	// You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
	//
	// If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
	//
	// If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
	EndDate *string `pulumi:"endDate"`
	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
	//
	// - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
	// - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
	EndDateType *string `pulumi:"endDateType"`
	// *Deprecated.*
	EphemeralStorage *bool `pulumi:"ephemeralStorage"`
	// The number of instances for which to reserve capacity.
	//
	// > You can request future-dated Capacity Reservations for an instance count with a minimum of 64 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *16 * m5.xlarge = 64 vCPUs* ).
	//
	// Valid range: 1 - 1000
	InstanceCount int `pulumi:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
	//
	// - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
	// - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
	//
	// > If you are requesting a future-dated Capacity Reservation, you must specify `targeted` .
	//
	// Default: `open`
	InstanceMatchCriteria *string `pulumi:"instanceMatchCriteria"`
	// The type of operating system for which to reserve capacity.
	InstancePlatform string `pulumi:"instancePlatform"`
	// The instance type for which to reserve capacity.
	//
	// > You can request future-dated Capacity Reservations for instance types in the C, M, R, I, T, and G instance families only.
	//
	// For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
	InstanceType string `pulumi:"instanceType"`
	// > Not supported for future-dated Capacity Reservations.
	//
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutPostArn *string `pulumi:"outPostArn"`
	// > Not supported for future-dated Capacity Reservations.
	//
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
	PlacementGroupArn *string `pulumi:"placementGroupArn"`
	// The tags to apply to the Capacity Reservation during launch.
	TagSpecifications []CapacityReservationTagSpecification `pulumi:"tagSpecifications"`
	// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
	//
	// - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
	// - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
	Tenancy *string `pulumi:"tenancy"`
	// The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
	//
	// You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
	UnusedReservationBillingOwnerId *string `pulumi:"unusedReservationBillingOwnerId"`
}

// The set of arguments for constructing a CapacityReservation resource.
type CapacityReservationArgs struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumi.StringPtrInput
	// The Availability Zone ID of the Capacity Reservation.
	AvailabilityZoneId pulumi.StringPtrInput
	// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
	EbsOptimized pulumi.BoolPtrInput
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
	//
	// You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
	//
	// If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
	//
	// If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
	EndDate pulumi.StringPtrInput
	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
	//
	// - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
	// - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
	EndDateType pulumi.StringPtrInput
	// *Deprecated.*
	EphemeralStorage pulumi.BoolPtrInput
	// The number of instances for which to reserve capacity.
	//
	// > You can request future-dated Capacity Reservations for an instance count with a minimum of 64 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *16 * m5.xlarge = 64 vCPUs* ).
	//
	// Valid range: 1 - 1000
	InstanceCount pulumi.IntInput
	// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
	//
	// - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
	// - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
	//
	// > If you are requesting a future-dated Capacity Reservation, you must specify `targeted` .
	//
	// Default: `open`
	InstanceMatchCriteria pulumi.StringPtrInput
	// The type of operating system for which to reserve capacity.
	InstancePlatform pulumi.StringInput
	// The instance type for which to reserve capacity.
	//
	// > You can request future-dated Capacity Reservations for instance types in the C, M, R, I, T, and G instance families only.
	//
	// For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
	InstanceType pulumi.StringInput
	// > Not supported for future-dated Capacity Reservations.
	//
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
	OutPostArn pulumi.StringPtrInput
	// > Not supported for future-dated Capacity Reservations.
	//
	// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
	PlacementGroupArn pulumi.StringPtrInput
	// The tags to apply to the Capacity Reservation during launch.
	TagSpecifications CapacityReservationTagSpecificationArrayInput
	// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
	//
	// - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
	// - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
	Tenancy pulumi.StringPtrInput
	// The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
	//
	// You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
	UnusedReservationBillingOwnerId pulumi.StringPtrInput
}

func (CapacityReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityReservationArgs)(nil)).Elem()
}

type CapacityReservationInput interface {
	pulumi.Input

	ToCapacityReservationOutput() CapacityReservationOutput
	ToCapacityReservationOutputWithContext(ctx context.Context) CapacityReservationOutput
}

func (*CapacityReservation) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservation)(nil)).Elem()
}

func (i *CapacityReservation) ToCapacityReservationOutput() CapacityReservationOutput {
	return i.ToCapacityReservationOutputWithContext(context.Background())
}

func (i *CapacityReservation) ToCapacityReservationOutputWithContext(ctx context.Context) CapacityReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityReservationOutput)
}

type CapacityReservationOutput struct{ *pulumi.OutputState }

func (CapacityReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservation)(nil)).Elem()
}

func (o CapacityReservationOutput) ToCapacityReservationOutput() CapacityReservationOutput {
	return o
}

func (o CapacityReservationOutput) ToCapacityReservationOutputWithContext(ctx context.Context) CapacityReservationOutput {
	return o
}

// The Availability Zone in which to create the Capacity Reservation.
func (o CapacityReservationOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The Availability Zone ID of the Capacity Reservation.
func (o CapacityReservationOutput) AvailabilityZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.AvailabilityZoneId }).(pulumi.StringPtrOutput)
}

// Returns the remaining capacity, which indicates the number of instances that can be launched in the Capacity Reservation. For example: `9` .
func (o CapacityReservationOutput) AvailableInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.IntOutput { return v.AvailableInstanceCount }).(pulumi.IntOutput)
}

// The ID of the Capacity Reservation.
func (o CapacityReservationOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

func (o CapacityReservationOutput) CapacityAllocationSet() CapacityReservationCapacityAllocationArrayOutput {
	return o.ApplyT(func(v *CapacityReservation) CapacityReservationCapacityAllocationArrayOutput {
		return v.CapacityAllocationSet
	}).(CapacityReservationCapacityAllocationArrayOutput)
}

// The Amazon Resource Name (ARN) of the Capacity Reservation.
func (o CapacityReservationOutput) CapacityReservationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.CapacityReservationArn }).(pulumi.StringOutput)
}

// The ID of the Capacity Reservation Fleet to which the Capacity Reservation belongs. Only valid for Capacity Reservations that were created by a Capacity Reservation Fleet.
func (o CapacityReservationOutput) CapacityReservationFleetId() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.CapacityReservationFleetId }).(pulumi.StringOutput)
}

func (o CapacityReservationOutput) CommitmentInfo() CommitmentInfoPropertiesOutput {
	return o.ApplyT(func(v *CapacityReservation) CommitmentInfoPropertiesOutput { return v.CommitmentInfo }).(CommitmentInfoPropertiesOutput)
}

// The date and time at which the Capacity Reservation was created.
func (o CapacityReservationOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

// The delivery method for a future-dated Capacity Reservation. `incremental` indicates that the requested capacity is delivered in addition to any running instances and reserved capacity that you have in your account at the requested date and time.
func (o CapacityReservationOutput) DeliveryPreference() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.DeliveryPreference }).(pulumi.StringOutput)
}

// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
func (o CapacityReservationOutput) EbsOptimized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.BoolPtrOutput { return v.EbsOptimized }).(pulumi.BoolPtrOutput)
}

// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
//
// You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
//
// If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
//
// If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
func (o CapacityReservationOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
//
// - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
// - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
func (o CapacityReservationOutput) EndDateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.EndDateType }).(pulumi.StringPtrOutput)
}

// *Deprecated.*
func (o CapacityReservationOutput) EphemeralStorage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.BoolPtrOutput { return v.EphemeralStorage }).(pulumi.BoolPtrOutput)
}

// The number of instances for which to reserve capacity.
//
// > You can request future-dated Capacity Reservations for an instance count with a minimum of 64 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *16 * m5.xlarge = 64 vCPUs* ).
//
// Valid range: 1 - 1000
func (o CapacityReservationOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.IntOutput { return v.InstanceCount }).(pulumi.IntOutput)
}

// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
//
// - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
// - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
//
// > If you are requesting a future-dated Capacity Reservation, you must specify `targeted` .
//
// Default: `open`
func (o CapacityReservationOutput) InstanceMatchCriteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.InstanceMatchCriteria }).(pulumi.StringPtrOutput)
}

// The type of operating system for which to reserve capacity.
func (o CapacityReservationOutput) InstancePlatform() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.InstancePlatform }).(pulumi.StringOutput)
}

// The instance type for which to reserve capacity.
//
// > You can request future-dated Capacity Reservations for instance types in the C, M, R, I, T, and G instance families only.
//
// For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
func (o CapacityReservationOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// > Not supported for future-dated Capacity Reservations.
//
// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
func (o CapacityReservationOutput) OutPostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.OutPostArn }).(pulumi.StringPtrOutput)
}

// The ID of the AWS account that owns the Capacity Reservation.
func (o CapacityReservationOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// > Not supported for future-dated Capacity Reservations.
//
// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
func (o CapacityReservationOutput) PlacementGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.PlacementGroupArn }).(pulumi.StringPtrOutput)
}

// The type of Capacity Reservation.
func (o CapacityReservationOutput) ReservationType() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.ReservationType }).(pulumi.StringOutput)
}

// The date and time at which the Capacity Reservation was started.
func (o CapacityReservationOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:
//
// - `active` - The capacity is available for use.
// - `expired` - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.
// - `cancelled` - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.
// - `pending` - The Capacity Reservation request was successful but the capacity provisioning is still pending.
// - `failed` - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.
// - `scheduled` - ( *Future-dated Capacity Reservations* ) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.
// - `payment-pending` - ( *Capacity Blocks* ) The upfront payment has not been processed yet.
// - `payment-failed` - ( *Capacity Blocks* ) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.
// - `assessing` - ( *Future-dated Capacity Reservations* ) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.
// - `delayed` - ( *Future-dated Capacity Reservations* ) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.
// - `unsupported` - ( *Future-dated Capacity Reservations* ) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.
func (o CapacityReservationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The tags to apply to the Capacity Reservation during launch.
func (o CapacityReservationOutput) TagSpecifications() CapacityReservationTagSpecificationArrayOutput {
	return o.ApplyT(func(v *CapacityReservation) CapacityReservationTagSpecificationArrayOutput {
		return v.TagSpecifications
	}).(CapacityReservationTagSpecificationArrayOutput)
}

// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
//
// - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
// - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
func (o CapacityReservationOutput) Tenancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.Tenancy }).(pulumi.StringPtrOutput)
}

// Returns the total number of instances for which the Capacity Reservation reserves capacity. For example: `15` .
func (o CapacityReservationOutput) TotalInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.IntOutput { return v.TotalInstanceCount }).(pulumi.IntOutput)
}

// The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
//
// You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
func (o CapacityReservationOutput) UnusedReservationBillingOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityReservation) pulumi.StringPtrOutput { return v.UnusedReservationBillingOwnerId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityReservationInput)(nil)).Elem(), &CapacityReservation{})
	pulumi.RegisterOutputType(CapacityReservationOutput{})
}
