// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for the AWS::EC2::SecurityGroupVpcAssociation resource
type SecurityGroupVpcAssociation struct {
	pulumi.CustomResourceState

	// The group ID of the specified security group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The state of the security group vpc association.
	State SecurityGroupVpcAssociationStateEnumOutput `pulumi:"state"`
	// The reason for the state of the security group vpc association.
	StateReason pulumi.StringOutput `pulumi:"stateReason"`
	// The ID of the VPC in the security group vpc association.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The owner of the VPC in the security group vpc association.
	VpcOwnerId pulumi.StringOutput `pulumi:"vpcOwnerId"`
}

// NewSecurityGroupVpcAssociation registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupVpcAssociation(ctx *pulumi.Context,
	name string, args *SecurityGroupVpcAssociationArgs, opts ...pulumi.ResourceOption) (*SecurityGroupVpcAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"groupId",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroupVpcAssociation
	err := ctx.RegisterResource("aws-native:ec2:SecurityGroupVpcAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupVpcAssociation gets an existing SecurityGroupVpcAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupVpcAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupVpcAssociationState, opts ...pulumi.ResourceOption) (*SecurityGroupVpcAssociation, error) {
	var resource SecurityGroupVpcAssociation
	err := ctx.ReadResource("aws-native:ec2:SecurityGroupVpcAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroupVpcAssociation resources.
type securityGroupVpcAssociationState struct {
}

type SecurityGroupVpcAssociationState struct {
}

func (SecurityGroupVpcAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupVpcAssociationState)(nil)).Elem()
}

type securityGroupVpcAssociationArgs struct {
	// The group ID of the specified security group.
	GroupId string `pulumi:"groupId"`
	// The ID of the VPC in the security group vpc association.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a SecurityGroupVpcAssociation resource.
type SecurityGroupVpcAssociationArgs struct {
	// The group ID of the specified security group.
	GroupId pulumi.StringInput
	// The ID of the VPC in the security group vpc association.
	VpcId pulumi.StringInput
}

func (SecurityGroupVpcAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupVpcAssociationArgs)(nil)).Elem()
}

type SecurityGroupVpcAssociationInput interface {
	pulumi.Input

	ToSecurityGroupVpcAssociationOutput() SecurityGroupVpcAssociationOutput
	ToSecurityGroupVpcAssociationOutputWithContext(ctx context.Context) SecurityGroupVpcAssociationOutput
}

func (*SecurityGroupVpcAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupVpcAssociation)(nil)).Elem()
}

func (i *SecurityGroupVpcAssociation) ToSecurityGroupVpcAssociationOutput() SecurityGroupVpcAssociationOutput {
	return i.ToSecurityGroupVpcAssociationOutputWithContext(context.Background())
}

func (i *SecurityGroupVpcAssociation) ToSecurityGroupVpcAssociationOutputWithContext(ctx context.Context) SecurityGroupVpcAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupVpcAssociationOutput)
}

type SecurityGroupVpcAssociationOutput struct{ *pulumi.OutputState }

func (SecurityGroupVpcAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroupVpcAssociation)(nil)).Elem()
}

func (o SecurityGroupVpcAssociationOutput) ToSecurityGroupVpcAssociationOutput() SecurityGroupVpcAssociationOutput {
	return o
}

func (o SecurityGroupVpcAssociationOutput) ToSecurityGroupVpcAssociationOutputWithContext(ctx context.Context) SecurityGroupVpcAssociationOutput {
	return o
}

// The group ID of the specified security group.
func (o SecurityGroupVpcAssociationOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupVpcAssociation) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The state of the security group vpc association.
func (o SecurityGroupVpcAssociationOutput) State() SecurityGroupVpcAssociationStateEnumOutput {
	return o.ApplyT(func(v *SecurityGroupVpcAssociation) SecurityGroupVpcAssociationStateEnumOutput { return v.State }).(SecurityGroupVpcAssociationStateEnumOutput)
}

// The reason for the state of the security group vpc association.
func (o SecurityGroupVpcAssociationOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupVpcAssociation) pulumi.StringOutput { return v.StateReason }).(pulumi.StringOutput)
}

// The ID of the VPC in the security group vpc association.
func (o SecurityGroupVpcAssociationOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupVpcAssociation) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The owner of the VPC in the security group vpc association.
func (o SecurityGroupVpcAssociationOutput) VpcOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroupVpcAssociation) pulumi.StringOutput { return v.VpcOwnerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupVpcAssociationInput)(nil)).Elem(), &SecurityGroupVpcAssociation{})
	pulumi.RegisterOutputType(SecurityGroupVpcAssociationOutput{})
}
