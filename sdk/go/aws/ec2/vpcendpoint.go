// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::VPCEndpoint
//
// Deprecated: VPCEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type VPCEndpoint struct {
	pulumi.CustomResourceState

	CreationTimestamp   pulumi.StringOutput      `pulumi:"creationTimestamp"`
	DnsEntries          pulumi.StringArrayOutput `pulumi:"dnsEntries"`
	NetworkInterfaceIds pulumi.StringArrayOutput `pulumi:"networkInterfaceIds"`
	PolicyDocument      pulumi.AnyOutput         `pulumi:"policyDocument"`
	PrivateDnsEnabled   pulumi.BoolPtrOutput     `pulumi:"privateDnsEnabled"`
	RouteTableIds       pulumi.StringArrayOutput `pulumi:"routeTableIds"`
	SecurityGroupIds    pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	ServiceName         pulumi.StringOutput      `pulumi:"serviceName"`
	SubnetIds           pulumi.StringArrayOutput `pulumi:"subnetIds"`
	VpcEndpointType     pulumi.StringPtrOutput   `pulumi:"vpcEndpointType"`
	VpcId               pulumi.StringOutput      `pulumi:"vpcId"`
}

// NewVPCEndpoint registers a new resource with the given unique name, arguments, and options.
func NewVPCEndpoint(ctx *pulumi.Context,
	name string, args *VPCEndpointArgs, opts ...pulumi.ResourceOption) (*VPCEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource VPCEndpoint
	err := ctx.RegisterResource("aws-native:ec2:VPCEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPCEndpoint gets an existing VPCEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPCEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCEndpointState, opts ...pulumi.ResourceOption) (*VPCEndpoint, error) {
	var resource VPCEndpoint
	err := ctx.ReadResource("aws-native:ec2:VPCEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPCEndpoint resources.
type vpcendpointState struct {
}

type VPCEndpointState struct {
}

func (VPCEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcendpointState)(nil)).Elem()
}

type vpcendpointArgs struct {
	PolicyDocument    interface{} `pulumi:"policyDocument"`
	PrivateDnsEnabled *bool       `pulumi:"privateDnsEnabled"`
	RouteTableIds     []string    `pulumi:"routeTableIds"`
	SecurityGroupIds  []string    `pulumi:"securityGroupIds"`
	ServiceName       string      `pulumi:"serviceName"`
	SubnetIds         []string    `pulumi:"subnetIds"`
	VpcEndpointType   *string     `pulumi:"vpcEndpointType"`
	VpcId             string      `pulumi:"vpcId"`
}

// The set of arguments for constructing a VPCEndpoint resource.
type VPCEndpointArgs struct {
	PolicyDocument    pulumi.Input
	PrivateDnsEnabled pulumi.BoolPtrInput
	RouteTableIds     pulumi.StringArrayInput
	SecurityGroupIds  pulumi.StringArrayInput
	ServiceName       pulumi.StringInput
	SubnetIds         pulumi.StringArrayInput
	VpcEndpointType   pulumi.StringPtrInput
	VpcId             pulumi.StringInput
}

func (VPCEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcendpointArgs)(nil)).Elem()
}

type VPCEndpointInput interface {
	pulumi.Input

	ToVPCEndpointOutput() VPCEndpointOutput
	ToVPCEndpointOutputWithContext(ctx context.Context) VPCEndpointOutput
}

func (*VPCEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCEndpoint)(nil)).Elem()
}

func (i *VPCEndpoint) ToVPCEndpointOutput() VPCEndpointOutput {
	return i.ToVPCEndpointOutputWithContext(context.Background())
}

func (i *VPCEndpoint) ToVPCEndpointOutputWithContext(ctx context.Context) VPCEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCEndpointOutput)
}

type VPCEndpointOutput struct{ *pulumi.OutputState }

func (VPCEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCEndpoint)(nil)).Elem()
}

func (o VPCEndpointOutput) ToVPCEndpointOutput() VPCEndpointOutput {
	return o
}

func (o VPCEndpointOutput) ToVPCEndpointOutputWithContext(ctx context.Context) VPCEndpointOutput {
	return o
}

func (o VPCEndpointOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

func (o VPCEndpointOutput) DnsEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringArrayOutput { return v.DnsEntries }).(pulumi.StringArrayOutput)
}

func (o VPCEndpointOutput) NetworkInterfaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringArrayOutput { return v.NetworkInterfaceIds }).(pulumi.StringArrayOutput)
}

func (o VPCEndpointOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.AnyOutput { return v.PolicyDocument }).(pulumi.AnyOutput)
}

func (o VPCEndpointOutput) PrivateDnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.BoolPtrOutput { return v.PrivateDnsEnabled }).(pulumi.BoolPtrOutput)
}

func (o VPCEndpointOutput) RouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringArrayOutput { return v.RouteTableIds }).(pulumi.StringArrayOutput)
}

func (o VPCEndpointOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o VPCEndpointOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o VPCEndpointOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o VPCEndpointOutput) VpcEndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringPtrOutput { return v.VpcEndpointType }).(pulumi.StringPtrOutput)
}

func (o VPCEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VPCEndpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VPCEndpointInput)(nil)).Elem(), &VPCEndpoint{})
	pulumi.RegisterOutputType(VPCEndpointOutput{})
}
