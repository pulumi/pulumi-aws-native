// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::VPCEndpoint
type VPCEndpoint struct {
	pulumi.CustomResourceState

	CreationTimestamp   pulumi.StringOutput      `pulumi:"creationTimestamp"`
	DnsEntries          pulumi.StringArrayOutput `pulumi:"dnsEntries"`
	NetworkInterfaceIds pulumi.StringArrayOutput `pulumi:"networkInterfaceIds"`
	// A policy to attach to the endpoint that controls access to the service.
	PolicyDocument pulumi.StringPtrOutput `pulumi:"policyDocument"`
	// Indicate whether to associate a private hosted zone with the specified VPC.
	PrivateDnsEnabled pulumi.BoolPtrOutput `pulumi:"privateDnsEnabled"`
	// One or more route table IDs.
	RouteTableIds pulumi.StringArrayOutput `pulumi:"routeTableIds"`
	// The ID of one or more security groups to associate with the endpoint network interface.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The service name.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The ID of one or more subnets in which to create an endpoint network interface.
	SubnetIds       pulumi.StringArrayOutput            `pulumi:"subnetIds"`
	VpcEndpointType VPCEndpointVpcEndpointTypePtrOutput `pulumi:"vpcEndpointType"`
	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVPCEndpoint registers a new resource with the given unique name, arguments, and options.
func NewVPCEndpoint(ctx *pulumi.Context,
	name string, args *VPCEndpointArgs, opts ...pulumi.ResourceOption) (*VPCEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource VPCEndpoint
	err := ctx.RegisterResource("aws-native:ec2:VPCEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPCEndpoint gets an existing VPCEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPCEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCEndpointState, opts ...pulumi.ResourceOption) (*VPCEndpoint, error) {
	var resource VPCEndpoint
	err := ctx.ReadResource("aws-native:ec2:VPCEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPCEndpoint resources.
type vpcendpointState struct {
}

type VPCEndpointState struct {
}

func (VPCEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcendpointState)(nil)).Elem()
}

type vpcendpointArgs struct {
	// A policy to attach to the endpoint that controls access to the service.
	PolicyDocument *string `pulumi:"policyDocument"`
	// Indicate whether to associate a private hosted zone with the specified VPC.
	PrivateDnsEnabled *bool `pulumi:"privateDnsEnabled"`
	// One or more route table IDs.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// The ID of one or more security groups to associate with the endpoint network interface.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The service name.
	ServiceName string `pulumi:"serviceName"`
	// The ID of one or more subnets in which to create an endpoint network interface.
	SubnetIds       []string                    `pulumi:"subnetIds"`
	VpcEndpointType *VPCEndpointVpcEndpointType `pulumi:"vpcEndpointType"`
	// The ID of the VPC in which the endpoint will be used.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VPCEndpoint resource.
type VPCEndpointArgs struct {
	// A policy to attach to the endpoint that controls access to the service.
	PolicyDocument pulumi.StringPtrInput
	// Indicate whether to associate a private hosted zone with the specified VPC.
	PrivateDnsEnabled pulumi.BoolPtrInput
	// One or more route table IDs.
	RouteTableIds pulumi.StringArrayInput
	// The ID of one or more security groups to associate with the endpoint network interface.
	SecurityGroupIds pulumi.StringArrayInput
	// The service name.
	ServiceName pulumi.StringInput
	// The ID of one or more subnets in which to create an endpoint network interface.
	SubnetIds       pulumi.StringArrayInput
	VpcEndpointType VPCEndpointVpcEndpointTypePtrInput
	// The ID of the VPC in which the endpoint will be used.
	VpcId pulumi.StringInput
}

func (VPCEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcendpointArgs)(nil)).Elem()
}

type VPCEndpointInput interface {
	pulumi.Input

	ToVPCEndpointOutput() VPCEndpointOutput
	ToVPCEndpointOutputWithContext(ctx context.Context) VPCEndpointOutput
}

func (*VPCEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCEndpoint)(nil))
}

func (i *VPCEndpoint) ToVPCEndpointOutput() VPCEndpointOutput {
	return i.ToVPCEndpointOutputWithContext(context.Background())
}

func (i *VPCEndpoint) ToVPCEndpointOutputWithContext(ctx context.Context) VPCEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCEndpointOutput)
}

type VPCEndpointOutput struct{ *pulumi.OutputState }

func (VPCEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCEndpoint)(nil))
}

func (o VPCEndpointOutput) ToVPCEndpointOutput() VPCEndpointOutput {
	return o
}

func (o VPCEndpointOutput) ToVPCEndpointOutputWithContext(ctx context.Context) VPCEndpointOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VPCEndpointInput)(nil)).Elem(), &VPCEndpoint{})
	pulumi.RegisterOutputType(VPCEndpointOutput{})
}
