// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::EC2::VPCPeeringConnection
type VpcPeeringConnection struct {
	pulumi.CustomResourceState

	// The AWS account ID of the owner of the accepter VPC.
	PeerOwnerId pulumi.StringPtrOutput `pulumi:"peerOwnerId"`
	// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
	PeerRegion pulumi.StringPtrOutput `pulumi:"peerRegion"`
	// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
	PeerRoleArn pulumi.StringPtrOutput `pulumi:"peerRoleArn"`
	// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
	PeerVpcId pulumi.StringOutput                `pulumi:"peerVpcId"`
	Tags      VpcPeeringConnectionTagArrayOutput `pulumi:"tags"`
	// The ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewVpcPeeringConnection(ctx *pulumi.Context,
	name string, args *VpcPeeringConnectionArgs, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerVpcId == nil {
		return nil, errors.New("invalid value for required argument 'PeerVpcId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"peerOwnerId",
		"peerRegion",
		"peerRoleArn",
		"peerVpcId",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcPeeringConnection
	err := ctx.RegisterResource("aws-native:ec2:VpcPeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcPeeringConnection gets an existing VpcPeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcPeeringConnectionState, opts ...pulumi.ResourceOption) (*VpcPeeringConnection, error) {
	var resource VpcPeeringConnection
	err := ctx.ReadResource("aws-native:ec2:VpcPeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcPeeringConnection resources.
type vpcPeeringConnectionState struct {
}

type VpcPeeringConnectionState struct {
}

func (VpcPeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionState)(nil)).Elem()
}

type vpcPeeringConnectionArgs struct {
	// The AWS account ID of the owner of the accepter VPC.
	PeerOwnerId *string `pulumi:"peerOwnerId"`
	// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
	PeerRegion *string `pulumi:"peerRegion"`
	// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
	PeerRoleArn *string `pulumi:"peerRoleArn"`
	// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
	PeerVpcId string                    `pulumi:"peerVpcId"`
	Tags      []VpcPeeringConnectionTag `pulumi:"tags"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcPeeringConnection resource.
type VpcPeeringConnectionArgs struct {
	// The AWS account ID of the owner of the accepter VPC.
	PeerOwnerId pulumi.StringPtrInput
	// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
	PeerRegion pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
	PeerRoleArn pulumi.StringPtrInput
	// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
	PeerVpcId pulumi.StringInput
	Tags      VpcPeeringConnectionTagArrayInput
	// The ID of the VPC.
	VpcId pulumi.StringInput
}

func (VpcPeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcPeeringConnectionArgs)(nil)).Elem()
}

type VpcPeeringConnectionInput interface {
	pulumi.Input

	ToVpcPeeringConnectionOutput() VpcPeeringConnectionOutput
	ToVpcPeeringConnectionOutputWithContext(ctx context.Context) VpcPeeringConnectionOutput
}

func (*VpcPeeringConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnection)(nil)).Elem()
}

func (i *VpcPeeringConnection) ToVpcPeeringConnectionOutput() VpcPeeringConnectionOutput {
	return i.ToVpcPeeringConnectionOutputWithContext(context.Background())
}

func (i *VpcPeeringConnection) ToVpcPeeringConnectionOutputWithContext(ctx context.Context) VpcPeeringConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConnectionOutput)
}

func (i *VpcPeeringConnection) ToOutput(ctx context.Context) pulumix.Output[*VpcPeeringConnection] {
	return pulumix.Output[*VpcPeeringConnection]{
		OutputState: i.ToVpcPeeringConnectionOutputWithContext(ctx).OutputState,
	}
}

type VpcPeeringConnectionOutput struct{ *pulumi.OutputState }

func (VpcPeeringConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConnection)(nil)).Elem()
}

func (o VpcPeeringConnectionOutput) ToVpcPeeringConnectionOutput() VpcPeeringConnectionOutput {
	return o
}

func (o VpcPeeringConnectionOutput) ToVpcPeeringConnectionOutputWithContext(ctx context.Context) VpcPeeringConnectionOutput {
	return o
}

func (o VpcPeeringConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcPeeringConnection] {
	return pulumix.Output[*VpcPeeringConnection]{
		OutputState: o.OutputState,
	}
}

// The AWS account ID of the owner of the accepter VPC.
func (o VpcPeeringConnectionOutput) PeerOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringPtrOutput { return v.PeerOwnerId }).(pulumi.StringPtrOutput)
}

// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
func (o VpcPeeringConnectionOutput) PeerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringPtrOutput { return v.PeerRegion }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
func (o VpcPeeringConnectionOutput) PeerRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringPtrOutput { return v.PeerRoleArn }).(pulumi.StringPtrOutput)
}

// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
func (o VpcPeeringConnectionOutput) PeerVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringOutput { return v.PeerVpcId }).(pulumi.StringOutput)
}

func (o VpcPeeringConnectionOutput) Tags() VpcPeeringConnectionTagArrayOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) VpcPeeringConnectionTagArrayOutput { return v.Tags }).(VpcPeeringConnectionTagArrayOutput)
}

// The ID of the VPC.
func (o VpcPeeringConnectionOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcPeeringConnection) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConnectionInput)(nil)).Elem(), &VpcPeeringConnection{})
	pulumi.RegisterOutputType(VpcPeeringConnectionOutput{})
}
