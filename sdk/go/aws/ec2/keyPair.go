// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a key pair for use with an EC2long instance as follows:
//
//   - To import an existing key pair, include the “PublicKeyMaterial“ property.
//
//   - To create a new key pair, omit the “PublicKeyMaterial“ property.
//
//     When you import an existing key pair, you specify the public key material for the key. We assume that you have the private key material for the key. CFNlong does not create or return the private key material when you import a key pair.
//     When you create a new key pair, the private key is saved to SYSlong Parameter Store, using a parameter with the following name: “/ec2/keypair/{key_pair_id}“. For more information about retrieving private key, and the required permissions, see [Create a key pair using](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html#create-key-pair-cloudformation) in the *User Guide*.
//     When CFN deletes a key pair that was created or imported by a stack, it also deletes the parameter that was used to store the private key material in Parameter Store.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			newKeyPair, err := ec2.NewKeyPair(ctx, "newKeyPair", &ec2.KeyPairArgs{
//				KeyName: pulumi.String("MyKeyPair"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewInstance(ctx, "ec2Instance", &ec2.InstanceArgs{
//				ImageId: pulumi.String("ami-02b92c281a4d3dc79"),
//				KeyName: newKeyPair.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			newKeyPair, err := ec2.NewKeyPair(ctx, "newKeyPair", &ec2.KeyPairArgs{
//				KeyName: pulumi.String("MyKeyPair"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewInstance(ctx, "ec2Instance", &ec2.InstanceArgs{
//				ImageId: pulumi.String("ami-02b92c281a4d3dc79"),
//				KeyName: newKeyPair.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			importedKeyPair, err := ec2.NewKeyPair(ctx, "importedKeyPair", &ec2.KeyPairArgs{
//				KeyName:           pulumi.String("NameForMyImportedKeyPair"),
//				PublicKeyMaterial: pulumi.String("ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICfp1F7DhdWZdqkYAUGCzcBsLmJeu9izpIyGpmmg7eCz example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewInstance(ctx, "ec2Instance", &ec2.InstanceArgs{
//				ImageId: pulumi.String("ami-02b92c281a4d3dc79"),
//				KeyName: importedKeyPair.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			importedKeyPair, err := ec2.NewKeyPair(ctx, "importedKeyPair", &ec2.KeyPairArgs{
//				KeyName:           pulumi.String("NameForMyImportedKeyPair"),
//				PublicKeyMaterial: pulumi.String("ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICfp1F7DhdWZdqkYAUGCzcBsLmJeu9izpIyGpmmg7eCz example"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewInstance(ctx, "ec2Instance", &ec2.InstanceArgs{
//				ImageId: pulumi.String("ami-02b92c281a4d3dc79"),
//				KeyName: importedKeyPair.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type KeyPair struct {
	pulumi.CustomResourceState

	// If you created the key pair using Amazon EC2:
	//
	// - For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.
	// - For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with [OpenSSH 6.8](https://docs.aws.amazon.com/http://www.openssh.com/txt/release-6.8) .
	//
	// If you imported the key pair to Amazon EC2:
	//
	// - For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC 4716.
	// - For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with [OpenSSH 6.8](https://docs.aws.amazon.com/http://www.openssh.com/txt/release-6.8) .
	KeyFingerprint pulumi.StringOutput `pulumi:"keyFingerprint"`
	// The format of the key pair.
	//  Default: ``pem``
	KeyFormat KeyPairKeyFormatPtrOutput `pulumi:"keyFormat"`
	// A unique name for the key pair.
	//  Constraints: Up to 255 ASCII characters
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The ID of the key pair.
	KeyPairId pulumi.StringOutput `pulumi:"keyPairId"`
	// The type of key pair. Note that ED25519 keys are not supported for Windows instances.
	//  If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
	//  Default: ``rsa``
	KeyType KeyPairKeyTypePtrOutput `pulumi:"keyType"`
	// The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
	PublicKeyMaterial pulumi.StringPtrOutput `pulumi:"publicKeyMaterial"`
	// The tags to apply to the key pair.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
}

// NewKeyPair registers a new resource with the given unique name, arguments, and options.
func NewKeyPair(ctx *pulumi.Context,
	name string, args *KeyPairArgs, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"keyFormat",
		"keyName",
		"keyType",
		"publicKeyMaterial",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyPair
	err := ctx.RegisterResource("aws-native:ec2:KeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyPair gets an existing KeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyPairState, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	var resource KeyPair
	err := ctx.ReadResource("aws-native:ec2:KeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyPair resources.
type keyPairState struct {
}

type KeyPairState struct {
}

func (KeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairState)(nil)).Elem()
}

type keyPairArgs struct {
	// The format of the key pair.
	//  Default: ``pem``
	KeyFormat *KeyPairKeyFormat `pulumi:"keyFormat"`
	// A unique name for the key pair.
	//  Constraints: Up to 255 ASCII characters
	KeyName string `pulumi:"keyName"`
	// The type of key pair. Note that ED25519 keys are not supported for Windows instances.
	//  If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
	//  Default: ``rsa``
	KeyType *KeyPairKeyType `pulumi:"keyType"`
	// The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
	PublicKeyMaterial *string `pulumi:"publicKeyMaterial"`
	// The tags to apply to the key pair.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a KeyPair resource.
type KeyPairArgs struct {
	// The format of the key pair.
	//  Default: ``pem``
	KeyFormat KeyPairKeyFormatPtrInput
	// A unique name for the key pair.
	//  Constraints: Up to 255 ASCII characters
	KeyName pulumi.StringInput
	// The type of key pair. Note that ED25519 keys are not supported for Windows instances.
	//  If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
	//  Default: ``rsa``
	KeyType KeyPairKeyTypePtrInput
	// The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
	PublicKeyMaterial pulumi.StringPtrInput
	// The tags to apply to the key pair.
	Tags aws.CreateOnlyTagArrayInput
}

func (KeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairArgs)(nil)).Elem()
}

type KeyPairInput interface {
	pulumi.Input

	ToKeyPairOutput() KeyPairOutput
	ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput
}

func (*KeyPair) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPair)(nil)).Elem()
}

func (i *KeyPair) ToKeyPairOutput() KeyPairOutput {
	return i.ToKeyPairOutputWithContext(context.Background())
}

func (i *KeyPair) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairOutput)
}

type KeyPairOutput struct{ *pulumi.OutputState }

func (KeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPair)(nil)).Elem()
}

func (o KeyPairOutput) ToKeyPairOutput() KeyPairOutput {
	return o
}

func (o KeyPairOutput) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return o
}

// If you created the key pair using Amazon EC2:
//
// - For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.
// - For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with [OpenSSH 6.8](https://docs.aws.amazon.com/http://www.openssh.com/txt/release-6.8) .
//
// If you imported the key pair to Amazon EC2:
//
// - For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC 4716.
// - For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with [OpenSSH 6.8](https://docs.aws.amazon.com/http://www.openssh.com/txt/release-6.8) .
func (o KeyPairOutput) KeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.KeyFingerprint }).(pulumi.StringOutput)
}

// The format of the key pair.
//
//	Default: ``pem``
func (o KeyPairOutput) KeyFormat() KeyPairKeyFormatPtrOutput {
	return o.ApplyT(func(v *KeyPair) KeyPairKeyFormatPtrOutput { return v.KeyFormat }).(KeyPairKeyFormatPtrOutput)
}

// A unique name for the key pair.
//
//	Constraints: Up to 255 ASCII characters
func (o KeyPairOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// The ID of the key pair.
func (o KeyPairOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.KeyPairId }).(pulumi.StringOutput)
}

// The type of key pair. Note that ED25519 keys are not supported for Windows instances.
//
//	If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
//	Default: ``rsa``
func (o KeyPairOutput) KeyType() KeyPairKeyTypePtrOutput {
	return o.ApplyT(func(v *KeyPair) KeyPairKeyTypePtrOutput { return v.KeyType }).(KeyPairKeyTypePtrOutput)
}

// The public key material. The “PublicKeyMaterial“ property is used to import a key pair. If this property is not specified, then a new key pair will be created.
func (o KeyPairOutput) PublicKeyMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringPtrOutput { return v.PublicKeyMaterial }).(pulumi.StringPtrOutput)
}

// The tags to apply to the key pair.
func (o KeyPairOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *KeyPair) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairInput)(nil)).Elem(), &KeyPair{})
	pulumi.RegisterOutputType(KeyPairOutput{})
}
