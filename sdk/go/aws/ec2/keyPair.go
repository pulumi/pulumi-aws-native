// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::EC2::KeyPair creates an SSH key pair
type KeyPair struct {
	pulumi.CustomResourceState

	// A short sequence of bytes used for public key verification
	KeyFingerprint pulumi.StringOutput `pulumi:"keyFingerprint"`
	// The name of the SSH key pair
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// An AWS generated ID for the key pair
	KeyPairId pulumi.StringOutput `pulumi:"keyPairId"`
	// The title of the TPS report is a mandatory element.
	KeyType KeyPairKeyTypePtrOutput `pulumi:"keyType"`
	// Plain text public key to import
	PublicKeyMaterial pulumi.StringPtrOutput `pulumi:"publicKeyMaterial"`
	// An array of key-value pairs to apply to this resource.
	Tags KeyPairTagArrayOutput `pulumi:"tags"`
}

// NewKeyPair registers a new resource with the given unique name, arguments, and options.
func NewKeyPair(ctx *pulumi.Context,
	name string, args *KeyPairArgs, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	var resource KeyPair
	err := ctx.RegisterResource("aws-native:ec2:KeyPair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyPair gets an existing KeyPair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyPairState, opts ...pulumi.ResourceOption) (*KeyPair, error) {
	var resource KeyPair
	err := ctx.ReadResource("aws-native:ec2:KeyPair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyPair resources.
type keyPairState struct {
}

type KeyPairState struct {
}

func (KeyPairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairState)(nil)).Elem()
}

type keyPairArgs struct {
	// The name of the SSH key pair
	KeyName string `pulumi:"keyName"`
	// The title of the TPS report is a mandatory element.
	KeyType *KeyPairKeyType `pulumi:"keyType"`
	// Plain text public key to import
	PublicKeyMaterial *string `pulumi:"publicKeyMaterial"`
	// An array of key-value pairs to apply to this resource.
	Tags []KeyPairTag `pulumi:"tags"`
}

// The set of arguments for constructing a KeyPair resource.
type KeyPairArgs struct {
	// The name of the SSH key pair
	KeyName pulumi.StringInput
	// The title of the TPS report is a mandatory element.
	KeyType KeyPairKeyTypePtrInput
	// Plain text public key to import
	PublicKeyMaterial pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags KeyPairTagArrayInput
}

func (KeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairArgs)(nil)).Elem()
}

type KeyPairInput interface {
	pulumi.Input

	ToKeyPairOutput() KeyPairOutput
	ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput
}

func (*KeyPair) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPair)(nil)).Elem()
}

func (i *KeyPair) ToKeyPairOutput() KeyPairOutput {
	return i.ToKeyPairOutputWithContext(context.Background())
}

func (i *KeyPair) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairOutput)
}

type KeyPairOutput struct{ *pulumi.OutputState }

func (KeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPair)(nil)).Elem()
}

func (o KeyPairOutput) ToKeyPairOutput() KeyPairOutput {
	return o
}

func (o KeyPairOutput) ToKeyPairOutputWithContext(ctx context.Context) KeyPairOutput {
	return o
}

// A short sequence of bytes used for public key verification
func (o KeyPairOutput) KeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.KeyFingerprint }).(pulumi.StringOutput)
}

// The name of the SSH key pair
func (o KeyPairOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// An AWS generated ID for the key pair
func (o KeyPairOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringOutput { return v.KeyPairId }).(pulumi.StringOutput)
}

// The title of the TPS report is a mandatory element.
func (o KeyPairOutput) KeyType() KeyPairKeyTypePtrOutput {
	return o.ApplyT(func(v *KeyPair) KeyPairKeyTypePtrOutput { return v.KeyType }).(KeyPairKeyTypePtrOutput)
}

// Plain text public key to import
func (o KeyPairOutput) PublicKeyMaterial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyPair) pulumi.StringPtrOutput { return v.PublicKeyMaterial }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o KeyPairOutput) Tags() KeyPairTagArrayOutput {
	return o.ApplyT(func(v *KeyPair) KeyPairTagArrayOutput { return v.Tags }).(KeyPairTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairInput)(nil)).Elem(), &KeyPair{})
	pulumi.RegisterOutputType(KeyPairOutput{})
}
