// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::EIP
type EIP struct {
	pulumi.CustomResourceState

	// The Allocation ID of the EIP generated by resource.
	AllocationId pulumi.StringOutput `pulumi:"allocationId"`
	// Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The ID of the instance.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
	NetworkBorderGroup pulumi.StringPtrOutput `pulumi:"networkBorderGroup"`
	// The PublicIP of the EIP generated by resource.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
	PublicIpv4Pool pulumi.StringPtrOutput `pulumi:"publicIpv4Pool"`
	// Any tags assigned to the EIP.
	Tags EIPTagArrayOutput `pulumi:"tags"`
}

// NewEIP registers a new resource with the given unique name, arguments, and options.
func NewEIP(ctx *pulumi.Context,
	name string, args *EIPArgs, opts ...pulumi.ResourceOption) (*EIP, error) {
	if args == nil {
		args = &EIPArgs{}
	}

	var resource EIP
	err := ctx.RegisterResource("aws-native:ec2:EIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEIP gets an existing EIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EIPState, opts ...pulumi.ResourceOption) (*EIP, error) {
	var resource EIP
	err := ctx.ReadResource("aws-native:ec2:EIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EIP resources.
type eipState struct {
}

type EIPState struct {
}

func (EIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*eipState)(nil)).Elem()
}

type eipArgs struct {
	// Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.
	Domain *string `pulumi:"domain"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
	NetworkBorderGroup *string `pulumi:"networkBorderGroup"`
	// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
	PublicIpv4Pool *string `pulumi:"publicIpv4Pool"`
	// Any tags assigned to the EIP.
	Tags []EIPTag `pulumi:"tags"`
}

// The set of arguments for constructing a EIP resource.
type EIPArgs struct {
	// Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.
	Domain pulumi.StringPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
	NetworkBorderGroup pulumi.StringPtrInput
	// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
	PublicIpv4Pool pulumi.StringPtrInput
	// Any tags assigned to the EIP.
	Tags EIPTagArrayInput
}

func (EIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eipArgs)(nil)).Elem()
}

type EIPInput interface {
	pulumi.Input

	ToEIPOutput() EIPOutput
	ToEIPOutputWithContext(ctx context.Context) EIPOutput
}

func (*EIP) ElementType() reflect.Type {
	return reflect.TypeOf((**EIP)(nil)).Elem()
}

func (i *EIP) ToEIPOutput() EIPOutput {
	return i.ToEIPOutputWithContext(context.Background())
}

func (i *EIP) ToEIPOutputWithContext(ctx context.Context) EIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EIPOutput)
}

type EIPOutput struct{ *pulumi.OutputState }

func (EIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EIP)(nil)).Elem()
}

func (o EIPOutput) ToEIPOutput() EIPOutput {
	return o
}

func (o EIPOutput) ToEIPOutputWithContext(ctx context.Context) EIPOutput {
	return o
}

// The Allocation ID of the EIP generated by resource.
func (o EIPOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EIP) pulumi.StringOutput { return v.AllocationId }).(pulumi.StringOutput)
}

// Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.
func (o EIPOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EIP) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID of the instance.
func (o EIPOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EIP) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
func (o EIPOutput) NetworkBorderGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EIP) pulumi.StringPtrOutput { return v.NetworkBorderGroup }).(pulumi.StringPtrOutput)
}

// The PublicIP of the EIP generated by resource.
func (o EIPOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *EIP) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
func (o EIPOutput) PublicIpv4Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EIP) pulumi.StringPtrOutput { return v.PublicIpv4Pool }).(pulumi.StringPtrOutput)
}

// Any tags assigned to the EIP.
func (o EIPOutput) Tags() EIPTagArrayOutput {
	return o.ApplyT(func(v *EIP) EIPTagArrayOutput { return v.Tags }).(EIPTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EIPInput)(nil)).Elem(), &EIP{})
	pulumi.RegisterOutputType(EIPOutput{})
}
