// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a customer gateway.
type CustomerGateway struct {
	pulumi.CustomResourceState

	// For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
	//  Default: 65000
	//  Valid values: ``1`` to ``2,147,483,647``
	BgpAsn pulumi.IntPtrOutput `pulumi:"bgpAsn"`
	// For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
	//  Valid values: ``2,147,483,648`` to ``4,294,967,295``
	BgpAsnExtended pulumi.Float64PtrOutput `pulumi:"bgpAsnExtended"`
	// The Amazon Resource Name (ARN) for the customer gateway certificate.
	CertificateArn pulumi.StringPtrOutput `pulumi:"certificateArn"`
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// The name of customer gateway device.
	DeviceName pulumi.StringPtrOutput `pulumi:"deviceName"`
	// The IP address for the customer gateway device's outside interface. The address must be static. If ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918 private IPv4 address. If ``OutsideIpAddressType`` is set to ``Ipv6``, you can use an IPv6 address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// One or more tags for the customer gateway.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of VPN connection that this customer gateway supports (``ipsec.1``).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCustomerGateway registers a new resource with the given unique name, arguments, and options.
func NewCustomerGateway(ctx *pulumi.Context,
	name string, args *CustomerGatewayArgs, opts ...pulumi.ResourceOption) (*CustomerGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"bgpAsn",
		"bgpAsnExtended",
		"certificateArn",
		"deviceName",
		"ipAddress",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomerGateway
	err := ctx.RegisterResource("aws-native:ec2:CustomerGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomerGateway gets an existing CustomerGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomerGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomerGatewayState, opts ...pulumi.ResourceOption) (*CustomerGateway, error) {
	var resource CustomerGateway
	err := ctx.ReadResource("aws-native:ec2:CustomerGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomerGateway resources.
type customerGatewayState struct {
}

type CustomerGatewayState struct {
}

func (CustomerGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*customerGatewayState)(nil)).Elem()
}

type customerGatewayArgs struct {
	// For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
	//  Default: 65000
	//  Valid values: ``1`` to ``2,147,483,647``
	BgpAsn *int `pulumi:"bgpAsn"`
	// For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
	//  Valid values: ``2,147,483,648`` to ``4,294,967,295``
	BgpAsnExtended *float64 `pulumi:"bgpAsnExtended"`
	// The Amazon Resource Name (ARN) for the customer gateway certificate.
	CertificateArn *string `pulumi:"certificateArn"`
	// The name of customer gateway device.
	DeviceName *string `pulumi:"deviceName"`
	// The IP address for the customer gateway device's outside interface. The address must be static. If ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918 private IPv4 address. If ``OutsideIpAddressType`` is set to ``Ipv6``, you can use an IPv6 address.
	IpAddress string `pulumi:"ipAddress"`
	// One or more tags for the customer gateway.
	Tags []aws.Tag `pulumi:"tags"`
	// The type of VPN connection that this customer gateway supports (``ipsec.1``).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a CustomerGateway resource.
type CustomerGatewayArgs struct {
	// For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
	//  Default: 65000
	//  Valid values: ``1`` to ``2,147,483,647``
	BgpAsn pulumi.IntPtrInput
	// For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
	//  Valid values: ``2,147,483,648`` to ``4,294,967,295``
	BgpAsnExtended pulumi.Float64PtrInput
	// The Amazon Resource Name (ARN) for the customer gateway certificate.
	CertificateArn pulumi.StringPtrInput
	// The name of customer gateway device.
	DeviceName pulumi.StringPtrInput
	// The IP address for the customer gateway device's outside interface. The address must be static. If ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918 private IPv4 address. If ``OutsideIpAddressType`` is set to ``Ipv6``, you can use an IPv6 address.
	IpAddress pulumi.StringInput
	// One or more tags for the customer gateway.
	Tags aws.TagArrayInput
	// The type of VPN connection that this customer gateway supports (``ipsec.1``).
	Type pulumi.StringInput
}

func (CustomerGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customerGatewayArgs)(nil)).Elem()
}

type CustomerGatewayInput interface {
	pulumi.Input

	ToCustomerGatewayOutput() CustomerGatewayOutput
	ToCustomerGatewayOutputWithContext(ctx context.Context) CustomerGatewayOutput
}

func (*CustomerGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerGateway)(nil)).Elem()
}

func (i *CustomerGateway) ToCustomerGatewayOutput() CustomerGatewayOutput {
	return i.ToCustomerGatewayOutputWithContext(context.Background())
}

func (i *CustomerGateway) ToCustomerGatewayOutputWithContext(ctx context.Context) CustomerGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerGatewayOutput)
}

type CustomerGatewayOutput struct{ *pulumi.OutputState }

func (CustomerGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerGateway)(nil)).Elem()
}

func (o CustomerGatewayOutput) ToCustomerGatewayOutput() CustomerGatewayOutput {
	return o
}

func (o CustomerGatewayOutput) ToCustomerGatewayOutputWithContext(ctx context.Context) CustomerGatewayOutput {
	return o
}

// For customer gateway devices that support BGP, specify the device's ASN. You must specify either “BgpAsn“ or “BgpAsnExtended“ when creating the customer gateway. If the ASN is larger than “2,147,483,647“, you must use “BgpAsnExtended“.
//
//	Default: 65000
//	Valid values: ``1`` to ``2,147,483,647``
func (o CustomerGatewayOutput) BgpAsn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomerGateway) pulumi.IntPtrOutput { return v.BgpAsn }).(pulumi.IntPtrOutput)
}

// For customer gateway devices that support BGP, specify the device's ASN. You must specify either “BgpAsn“ or “BgpAsnExtended“ when creating the customer gateway. If the ASN is larger than “2,147,483,647“, you must use “BgpAsnExtended“.
//
//	Valid values: ``2,147,483,648`` to ``4,294,967,295``
func (o CustomerGatewayOutput) BgpAsnExtended() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CustomerGateway) pulumi.Float64PtrOutput { return v.BgpAsnExtended }).(pulumi.Float64PtrOutput)
}

// The Amazon Resource Name (ARN) for the customer gateway certificate.
func (o CustomerGatewayOutput) CertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerGateway) pulumi.StringPtrOutput { return v.CertificateArn }).(pulumi.StringPtrOutput)
}

// The ID of the customer gateway.
func (o CustomerGatewayOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomerGateway) pulumi.StringOutput { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// The name of customer gateway device.
func (o CustomerGatewayOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerGateway) pulumi.StringPtrOutput { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// The IP address for the customer gateway device's outside interface. The address must be static. If “OutsideIpAddressType“ in your VPN connection options is set to “PrivateIpv4“, you can use an RFC6598 or RFC1918 private IPv4 address. If “OutsideIpAddressType“ is set to “Ipv6“, you can use an IPv6 address.
func (o CustomerGatewayOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomerGateway) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// One or more tags for the customer gateway.
func (o CustomerGatewayOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *CustomerGateway) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of VPN connection that this customer gateway supports (“ipsec.1“).
func (o CustomerGatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomerGateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerGatewayInput)(nil)).Elem(), &CustomerGateway{})
	pulumi.RegisterOutputType(CustomerGatewayOutput{})
}
