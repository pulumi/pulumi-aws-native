// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html
type EC2Fleet struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-context
	Context pulumi.StringPtrOutput `pulumi:"context"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-excesscapacityterminationpolicy
	ExcessCapacityTerminationPolicy pulumi.StringPtrOutput `pulumi:"excessCapacityTerminationPolicy"`
	FleetId                         pulumi.StringOutput    `pulumi:"fleetId"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-launchtemplateconfigs
	LaunchTemplateConfigs EC2FleetFleetLaunchTemplateConfigRequestArrayOutput `pulumi:"launchTemplateConfigs"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-ondemandoptions
	OnDemandOptions EC2FleetOnDemandOptionsRequestPtrOutput `pulumi:"onDemandOptions"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-replaceunhealthyinstances
	ReplaceUnhealthyInstances pulumi.BoolPtrOutput `pulumi:"replaceUnhealthyInstances"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-spotoptions
	SpotOptions EC2FleetSpotOptionsRequestPtrOutput `pulumi:"spotOptions"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-tagspecifications
	TagSpecifications EC2FleetTagSpecificationArrayOutput `pulumi:"tagSpecifications"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-targetcapacityspecification
	TargetCapacitySpecification EC2FleetTargetCapacitySpecificationRequestOutput `pulumi:"targetCapacitySpecification"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-terminateinstanceswithexpiration
	TerminateInstancesWithExpiration pulumi.BoolPtrOutput `pulumi:"terminateInstancesWithExpiration"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-type
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validfrom
	ValidFrom pulumi.StringPtrOutput `pulumi:"validFrom"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validuntil
	ValidUntil pulumi.StringPtrOutput `pulumi:"validUntil"`
}

// NewEC2Fleet registers a new resource with the given unique name, arguments, and options.
func NewEC2Fleet(ctx *pulumi.Context,
	name string, args *EC2FleetArgs, opts ...pulumi.ResourceOption) (*EC2Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LaunchTemplateConfigs == nil {
		return nil, errors.New("invalid value for required argument 'LaunchTemplateConfigs'")
	}
	if args.TargetCapacitySpecification == nil {
		return nil, errors.New("invalid value for required argument 'TargetCapacitySpecification'")
	}
	var resource EC2Fleet
	err := ctx.RegisterResource("aws-native:ec2:EC2Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEC2Fleet gets an existing EC2Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEC2Fleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EC2FleetState, opts ...pulumi.ResourceOption) (*EC2Fleet, error) {
	var resource EC2Fleet
	err := ctx.ReadResource("aws-native:ec2:EC2Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EC2Fleet resources.
type ec2fleetState struct {
}

type EC2FleetState struct {
}

func (EC2FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2fleetState)(nil)).Elem()
}

type ec2fleetArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-context
	Context *string `pulumi:"context"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-excesscapacityterminationpolicy
	ExcessCapacityTerminationPolicy *string `pulumi:"excessCapacityTerminationPolicy"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-launchtemplateconfigs
	LaunchTemplateConfigs []EC2FleetFleetLaunchTemplateConfigRequest `pulumi:"launchTemplateConfigs"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-ondemandoptions
	OnDemandOptions *EC2FleetOnDemandOptionsRequest `pulumi:"onDemandOptions"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-replaceunhealthyinstances
	ReplaceUnhealthyInstances *bool `pulumi:"replaceUnhealthyInstances"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-spotoptions
	SpotOptions *EC2FleetSpotOptionsRequest `pulumi:"spotOptions"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-tagspecifications
	TagSpecifications []EC2FleetTagSpecification `pulumi:"tagSpecifications"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-targetcapacityspecification
	TargetCapacitySpecification EC2FleetTargetCapacitySpecificationRequest `pulumi:"targetCapacitySpecification"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-terminateinstanceswithexpiration
	TerminateInstancesWithExpiration *bool `pulumi:"terminateInstancesWithExpiration"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-type
	Type *string `pulumi:"type"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validfrom
	ValidFrom *string `pulumi:"validFrom"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validuntil
	ValidUntil *string `pulumi:"validUntil"`
}

// The set of arguments for constructing a EC2Fleet resource.
type EC2FleetArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-context
	Context pulumi.StringPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-excesscapacityterminationpolicy
	ExcessCapacityTerminationPolicy pulumi.StringPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-launchtemplateconfigs
	LaunchTemplateConfigs EC2FleetFleetLaunchTemplateConfigRequestArrayInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-ondemandoptions
	OnDemandOptions EC2FleetOnDemandOptionsRequestPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-replaceunhealthyinstances
	ReplaceUnhealthyInstances pulumi.BoolPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-spotoptions
	SpotOptions EC2FleetSpotOptionsRequestPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-tagspecifications
	TagSpecifications EC2FleetTagSpecificationArrayInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-targetcapacityspecification
	TargetCapacitySpecification EC2FleetTargetCapacitySpecificationRequestInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-terminateinstanceswithexpiration
	TerminateInstancesWithExpiration pulumi.BoolPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-type
	Type pulumi.StringPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validfrom
	ValidFrom pulumi.StringPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html#cfn-ec2-ec2fleet-validuntil
	ValidUntil pulumi.StringPtrInput
}

func (EC2FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2fleetArgs)(nil)).Elem()
}

type EC2FleetInput interface {
	pulumi.Input

	ToEC2FleetOutput() EC2FleetOutput
	ToEC2FleetOutputWithContext(ctx context.Context) EC2FleetOutput
}

func (*EC2Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((*EC2Fleet)(nil))
}

func (i *EC2Fleet) ToEC2FleetOutput() EC2FleetOutput {
	return i.ToEC2FleetOutputWithContext(context.Background())
}

func (i *EC2Fleet) ToEC2FleetOutputWithContext(ctx context.Context) EC2FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EC2FleetOutput)
}

type EC2FleetOutput struct{ *pulumi.OutputState }

func (EC2FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EC2Fleet)(nil))
}

func (o EC2FleetOutput) ToEC2FleetOutput() EC2FleetOutput {
	return o
}

func (o EC2FleetOutput) ToEC2FleetOutputWithContext(ctx context.Context) EC2FleetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EC2FleetOutput{})
}
