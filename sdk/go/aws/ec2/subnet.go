// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::Subnet
type Subnet struct {
	pulumi.CustomResourceState

	AssignIpv6AddressOnCreation pulumi.BoolPtrOutput   `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone            pulumi.StringPtrOutput `pulumi:"availabilityZone"`
	AvailabilityZoneId          pulumi.StringPtrOutput `pulumi:"availabilityZoneId"`
	CidrBlock                   pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	EnableDns64                 pulumi.BoolPtrOutput   `pulumi:"enableDns64"`
	// The ID of an IPv4 IPAM pool you want to use for allocating this subnet's CIDR
	Ipv4IpamPoolId pulumi.StringPtrOutput `pulumi:"ipv4IpamPoolId"`
	// The netmask length of the IPv4 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
	Ipv4NetmaskLength pulumi.IntPtrOutput      `pulumi:"ipv4NetmaskLength"`
	Ipv6CidrBlock     pulumi.StringPtrOutput   `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlocks    pulumi.StringArrayOutput `pulumi:"ipv6CidrBlocks"`
	// The ID of an IPv6 IPAM pool you want to use for allocating this subnet's CIDR
	Ipv6IpamPoolId pulumi.StringPtrOutput `pulumi:"ipv6IpamPoolId"`
	Ipv6Native     pulumi.BoolPtrOutput   `pulumi:"ipv6Native"`
	// The netmask length of the IPv6 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
	Ipv6NetmaskLength   pulumi.IntPtrOutput  `pulumi:"ipv6NetmaskLength"`
	MapPublicIpOnLaunch pulumi.BoolPtrOutput `pulumi:"mapPublicIpOnLaunch"`
	// The ID of the network ACL that is associated with the subnet's VPC
	NetworkAclAssociationId       pulumi.StringOutput                              `pulumi:"networkAclAssociationId"`
	OutpostArn                    pulumi.StringPtrOutput                           `pulumi:"outpostArn"`
	PrivateDnsNameOptionsOnLaunch PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput `pulumi:"privateDnsNameOptionsOnLaunch"`
	// The ID of the subnet
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	Tags     aws.TagArrayOutput  `pulumi:"tags"`
	VpcId    pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"availabilityZone",
		"availabilityZoneId",
		"cidrBlock",
		"ipv4IpamPoolId",
		"ipv4NetmaskLength",
		"ipv6IpamPoolId",
		"ipv6Native",
		"ipv6NetmaskLength",
		"outpostArn",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("aws-native:ec2:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("aws-native:ec2:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
}

type SubnetState struct {
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	AssignIpv6AddressOnCreation *bool   `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone            *string `pulumi:"availabilityZone"`
	AvailabilityZoneId          *string `pulumi:"availabilityZoneId"`
	CidrBlock                   *string `pulumi:"cidrBlock"`
	EnableDns64                 *bool   `pulumi:"enableDns64"`
	// The ID of an IPv4 IPAM pool you want to use for allocating this subnet's CIDR
	Ipv4IpamPoolId *string `pulumi:"ipv4IpamPoolId"`
	// The netmask length of the IPv4 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
	Ipv4NetmaskLength *int     `pulumi:"ipv4NetmaskLength"`
	Ipv6CidrBlock     *string  `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlocks    []string `pulumi:"ipv6CidrBlocks"`
	// The ID of an IPv6 IPAM pool you want to use for allocating this subnet's CIDR
	Ipv6IpamPoolId *string `pulumi:"ipv6IpamPoolId"`
	Ipv6Native     *bool   `pulumi:"ipv6Native"`
	// The netmask length of the IPv6 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
	Ipv6NetmaskLength             *int                                     `pulumi:"ipv6NetmaskLength"`
	MapPublicIpOnLaunch           *bool                                    `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                    *string                                  `pulumi:"outpostArn"`
	PrivateDnsNameOptionsOnLaunch *PrivateDnsNameOptionsOnLaunchProperties `pulumi:"privateDnsNameOptionsOnLaunch"`
	Tags                          []aws.Tag                                `pulumi:"tags"`
	VpcId                         string                                   `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AssignIpv6AddressOnCreation pulumi.BoolPtrInput
	AvailabilityZone            pulumi.StringPtrInput
	AvailabilityZoneId          pulumi.StringPtrInput
	CidrBlock                   pulumi.StringPtrInput
	EnableDns64                 pulumi.BoolPtrInput
	// The ID of an IPv4 IPAM pool you want to use for allocating this subnet's CIDR
	Ipv4IpamPoolId pulumi.StringPtrInput
	// The netmask length of the IPv4 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
	Ipv4NetmaskLength pulumi.IntPtrInput
	Ipv6CidrBlock     pulumi.StringPtrInput
	Ipv6CidrBlocks    pulumi.StringArrayInput
	// The ID of an IPv6 IPAM pool you want to use for allocating this subnet's CIDR
	Ipv6IpamPoolId pulumi.StringPtrInput
	Ipv6Native     pulumi.BoolPtrInput
	// The netmask length of the IPv6 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
	Ipv6NetmaskLength             pulumi.IntPtrInput
	MapPublicIpOnLaunch           pulumi.BoolPtrInput
	OutpostArn                    pulumi.StringPtrInput
	PrivateDnsNameOptionsOnLaunch PrivateDnsNameOptionsOnLaunchPropertiesPtrInput
	Tags                          aws.TagArrayInput
	VpcId                         pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

func (o SubnetOutput) AssignIpv6AddressOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.AssignIpv6AddressOnCreation }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) AvailabilityZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.AvailabilityZoneId }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) EnableDns64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.EnableDns64 }).(pulumi.BoolPtrOutput)
}

// The ID of an IPv4 IPAM pool you want to use for allocating this subnet's CIDR
func (o SubnetOutput) Ipv4IpamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv4IpamPoolId }).(pulumi.StringPtrOutput)
}

// The netmask length of the IPv4 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
func (o SubnetOutput) Ipv4NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.Ipv4NetmaskLength }).(pulumi.IntPtrOutput)
}

func (o SubnetOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) Ipv6CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.Ipv6CidrBlocks }).(pulumi.StringArrayOutput)
}

// The ID of an IPv6 IPAM pool you want to use for allocating this subnet's CIDR
func (o SubnetOutput) Ipv6IpamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv6IpamPoolId }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) Ipv6Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.Ipv6Native }).(pulumi.BoolPtrOutput)
}

// The netmask length of the IPv6 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
func (o SubnetOutput) Ipv6NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.Ipv6NetmaskLength }).(pulumi.IntPtrOutput)
}

func (o SubnetOutput) MapPublicIpOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.MapPublicIpOnLaunch }).(pulumi.BoolPtrOutput)
}

// The ID of the network ACL that is associated with the subnet's VPC
func (o SubnetOutput) NetworkAclAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.NetworkAclAssociationId }).(pulumi.StringOutput)
}

func (o SubnetOutput) OutpostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.OutpostArn }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) PrivateDnsNameOptionsOnLaunch() PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput {
	return o.ApplyT(func(v *Subnet) PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput {
		return v.PrivateDnsNameOptionsOnLaunch
	}).(PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput)
}

// The ID of the subnet
func (o SubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o SubnetOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Subnet) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterOutputType(SubnetOutput{})
}
