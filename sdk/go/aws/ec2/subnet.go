// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::Subnet
type Subnet struct {
	pulumi.CustomResourceState

	AssignIpv6AddressOnCreation   pulumi.BoolPtrOutput                             `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone              pulumi.StringPtrOutput                           `pulumi:"availabilityZone"`
	AvailabilityZoneId            pulumi.StringPtrOutput                           `pulumi:"availabilityZoneId"`
	CidrBlock                     pulumi.StringPtrOutput                           `pulumi:"cidrBlock"`
	EnableDns64                   pulumi.BoolPtrOutput                             `pulumi:"enableDns64"`
	Ipv6CidrBlock                 pulumi.StringPtrOutput                           `pulumi:"ipv6CidrBlock"`
	Ipv6CidrBlocks                pulumi.StringArrayOutput                         `pulumi:"ipv6CidrBlocks"`
	Ipv6Native                    pulumi.BoolPtrOutput                             `pulumi:"ipv6Native"`
	MapPublicIpOnLaunch           pulumi.BoolPtrOutput                             `pulumi:"mapPublicIpOnLaunch"`
	NetworkAclAssociationId       pulumi.StringOutput                              `pulumi:"networkAclAssociationId"`
	OutpostArn                    pulumi.StringPtrOutput                           `pulumi:"outpostArn"`
	PrivateDnsNameOptionsOnLaunch PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput `pulumi:"privateDnsNameOptionsOnLaunch"`
	SubnetId                      pulumi.StringOutput                              `pulumi:"subnetId"`
	Tags                          SubnetTagArrayOutput                             `pulumi:"tags"`
	VpcId                         pulumi.StringOutput                              `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource Subnet
	err := ctx.RegisterResource("aws-native:ec2:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("aws-native:ec2:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
}

type SubnetState struct {
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	AssignIpv6AddressOnCreation   *bool                                    `pulumi:"assignIpv6AddressOnCreation"`
	AvailabilityZone              *string                                  `pulumi:"availabilityZone"`
	AvailabilityZoneId            *string                                  `pulumi:"availabilityZoneId"`
	CidrBlock                     *string                                  `pulumi:"cidrBlock"`
	EnableDns64                   *bool                                    `pulumi:"enableDns64"`
	Ipv6CidrBlock                 *string                                  `pulumi:"ipv6CidrBlock"`
	Ipv6Native                    *bool                                    `pulumi:"ipv6Native"`
	MapPublicIpOnLaunch           *bool                                    `pulumi:"mapPublicIpOnLaunch"`
	OutpostArn                    *string                                  `pulumi:"outpostArn"`
	PrivateDnsNameOptionsOnLaunch *PrivateDnsNameOptionsOnLaunchProperties `pulumi:"privateDnsNameOptionsOnLaunch"`
	Tags                          []SubnetTag                              `pulumi:"tags"`
	VpcId                         string                                   `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AssignIpv6AddressOnCreation   pulumi.BoolPtrInput
	AvailabilityZone              pulumi.StringPtrInput
	AvailabilityZoneId            pulumi.StringPtrInput
	CidrBlock                     pulumi.StringPtrInput
	EnableDns64                   pulumi.BoolPtrInput
	Ipv6CidrBlock                 pulumi.StringPtrInput
	Ipv6Native                    pulumi.BoolPtrInput
	MapPublicIpOnLaunch           pulumi.BoolPtrInput
	OutpostArn                    pulumi.StringPtrInput
	PrivateDnsNameOptionsOnLaunch PrivateDnsNameOptionsOnLaunchPropertiesPtrInput
	Tags                          SubnetTagArrayInput
	VpcId                         pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

func (o SubnetOutput) AssignIpv6AddressOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.AssignIpv6AddressOnCreation }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) AvailabilityZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.AvailabilityZoneId }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) EnableDns64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.EnableDns64 }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) Ipv6CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.Ipv6CidrBlocks }).(pulumi.StringArrayOutput)
}

func (o SubnetOutput) Ipv6Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.Ipv6Native }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) MapPublicIpOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.MapPublicIpOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) NetworkAclAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.NetworkAclAssociationId }).(pulumi.StringOutput)
}

func (o SubnetOutput) OutpostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.OutpostArn }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) PrivateDnsNameOptionsOnLaunch() PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput {
	return o.ApplyT(func(v *Subnet) PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput {
		return v.PrivateDnsNameOptionsOnLaunch
	}).(PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput)
}

func (o SubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o SubnetOutput) Tags() SubnetTagArrayOutput {
	return o.ApplyT(func(v *Subnet) SubnetTagArrayOutput { return v.Tags }).(SubnetTagArrayOutput)
}

func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterOutputType(SubnetOutput{})
}
