// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a subnet for the specified VPC.
//
//	For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.
//	For more information, see [Subnets for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html) in the *Amazon VPC User Guide*.
type Subnet struct {
	pulumi.CustomResourceState

	// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
	//  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
	AssignIpv6AddressOnCreation pulumi.BoolPtrOutput `pulumi:"assignIpv6AddressOnCreation"`
	// The Availability Zone of the subnet.
	//  If you update this property, you must also update the ``CidrBlock`` property.
	AvailabilityZone pulumi.StringPtrOutput `pulumi:"availabilityZone"`
	// The AZ ID of the subnet.
	AvailabilityZoneId pulumi.StringPtrOutput `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block assigned to the subnet.
	//  If you update this property, we create a new subnet, and then delete the existing one.
	CidrBlock pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
	EnableDns64 pulumi.BoolPtrOutput `pulumi:"enableDns64"`
	// An IPv4 IPAM pool ID for the subnet.
	Ipv4IpamPoolId pulumi.StringPtrOutput `pulumi:"ipv4IpamPoolId"`
	// An IPv4 netmask length for the subnet.
	Ipv4NetmaskLength pulumi.IntPtrOutput `pulumi:"ipv4NetmaskLength"`
	// The IPv6 CIDR block.
	//  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
	Ipv6CidrBlock pulumi.StringPtrOutput `pulumi:"ipv6CidrBlock"`
	// The IPv6 network ranges for the subnet, in CIDR notation.
	Ipv6CidrBlocks pulumi.StringArrayOutput `pulumi:"ipv6CidrBlocks"`
	// An IPv6 IPAM pool ID for the subnet.
	Ipv6IpamPoolId pulumi.StringPtrOutput `pulumi:"ipv6IpamPoolId"`
	// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
	Ipv6Native pulumi.BoolPtrOutput `pulumi:"ipv6Native"`
	// An IPv6 netmask length for the subnet.
	Ipv6NetmaskLength pulumi.IntPtrOutput `pulumi:"ipv6NetmaskLength"`
	// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
	//  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
	MapPublicIpOnLaunch     pulumi.BoolPtrOutput `pulumi:"mapPublicIpOnLaunch"`
	NetworkAclAssociationId pulumi.StringOutput  `pulumi:"networkAclAssociationId"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumi.StringPtrOutput `pulumi:"outpostArn"`
	// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
	//  Available options:
	//   + EnableResourceNameDnsAAAARecord (true | false)
	//  + EnableResourceNameDnsARecord (true | false)
	//  + HostnameType (ip-name | resource-name)
	PrivateDnsNameOptionsOnLaunch PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput `pulumi:"privateDnsNameOptionsOnLaunch"`
	SubnetId                      pulumi.StringOutput                              `pulumi:"subnetId"`
	// Any tags assigned to the subnet.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ID of the VPC the subnet is in.
	//  If you update this property, you must also update the ``CidrBlock`` property.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"availabilityZone",
		"availabilityZoneId",
		"cidrBlock",
		"ipv4IpamPoolId",
		"ipv4NetmaskLength",
		"ipv6IpamPoolId",
		"ipv6Native",
		"ipv6NetmaskLength",
		"outpostArn",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("aws-native:ec2:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("aws-native:ec2:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
}

type SubnetState struct {
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
	//  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
	AssignIpv6AddressOnCreation *bool `pulumi:"assignIpv6AddressOnCreation"`
	// The Availability Zone of the subnet.
	//  If you update this property, you must also update the ``CidrBlock`` property.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The AZ ID of the subnet.
	AvailabilityZoneId *string `pulumi:"availabilityZoneId"`
	// The IPv4 CIDR block assigned to the subnet.
	//  If you update this property, we create a new subnet, and then delete the existing one.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
	EnableDns64 *bool `pulumi:"enableDns64"`
	// An IPv4 IPAM pool ID for the subnet.
	Ipv4IpamPoolId *string `pulumi:"ipv4IpamPoolId"`
	// An IPv4 netmask length for the subnet.
	Ipv4NetmaskLength *int `pulumi:"ipv4NetmaskLength"`
	// The IPv6 CIDR block.
	//  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The IPv6 network ranges for the subnet, in CIDR notation.
	Ipv6CidrBlocks []string `pulumi:"ipv6CidrBlocks"`
	// An IPv6 IPAM pool ID for the subnet.
	Ipv6IpamPoolId *string `pulumi:"ipv6IpamPoolId"`
	// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
	Ipv6Native *bool `pulumi:"ipv6Native"`
	// An IPv6 netmask length for the subnet.
	Ipv6NetmaskLength *int `pulumi:"ipv6NetmaskLength"`
	// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
	//  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
	MapPublicIpOnLaunch *bool `pulumi:"mapPublicIpOnLaunch"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn *string `pulumi:"outpostArn"`
	// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
	//  Available options:
	//   + EnableResourceNameDnsAAAARecord (true | false)
	//  + EnableResourceNameDnsARecord (true | false)
	//  + HostnameType (ip-name | resource-name)
	PrivateDnsNameOptionsOnLaunch *PrivateDnsNameOptionsOnLaunchProperties `pulumi:"privateDnsNameOptionsOnLaunch"`
	// Any tags assigned to the subnet.
	Tags []aws.Tag `pulumi:"tags"`
	// The ID of the VPC the subnet is in.
	//  If you update this property, you must also update the ``CidrBlock`` property.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
	//  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
	AssignIpv6AddressOnCreation pulumi.BoolPtrInput
	// The Availability Zone of the subnet.
	//  If you update this property, you must also update the ``CidrBlock`` property.
	AvailabilityZone pulumi.StringPtrInput
	// The AZ ID of the subnet.
	AvailabilityZoneId pulumi.StringPtrInput
	// The IPv4 CIDR block assigned to the subnet.
	//  If you update this property, we create a new subnet, and then delete the existing one.
	CidrBlock pulumi.StringPtrInput
	// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
	EnableDns64 pulumi.BoolPtrInput
	// An IPv4 IPAM pool ID for the subnet.
	Ipv4IpamPoolId pulumi.StringPtrInput
	// An IPv4 netmask length for the subnet.
	Ipv4NetmaskLength pulumi.IntPtrInput
	// The IPv6 CIDR block.
	//  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
	Ipv6CidrBlock pulumi.StringPtrInput
	// The IPv6 network ranges for the subnet, in CIDR notation.
	Ipv6CidrBlocks pulumi.StringArrayInput
	// An IPv6 IPAM pool ID for the subnet.
	Ipv6IpamPoolId pulumi.StringPtrInput
	// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
	Ipv6Native pulumi.BoolPtrInput
	// An IPv6 netmask length for the subnet.
	Ipv6NetmaskLength pulumi.IntPtrInput
	// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
	//  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
	MapPublicIpOnLaunch pulumi.BoolPtrInput
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn pulumi.StringPtrInput
	// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
	//  Available options:
	//   + EnableResourceNameDnsAAAARecord (true | false)
	//  + EnableResourceNameDnsARecord (true | false)
	//  + HostnameType (ip-name | resource-name)
	PrivateDnsNameOptionsOnLaunch PrivateDnsNameOptionsOnLaunchPropertiesPtrInput
	// Any tags assigned to the subnet.
	Tags aws.TagArrayInput
	// The ID of the VPC the subnet is in.
	//  If you update this property, you must also update the ``CidrBlock`` property.
	VpcId pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is “false“.
//
//	If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
func (o SubnetOutput) AssignIpv6AddressOnCreation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.AssignIpv6AddressOnCreation }).(pulumi.BoolPtrOutput)
}

// The Availability Zone of the subnet.
//
//	If you update this property, you must also update the ``CidrBlock`` property.
func (o SubnetOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The AZ ID of the subnet.
func (o SubnetOutput) AvailabilityZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.AvailabilityZoneId }).(pulumi.StringPtrOutput)
}

// The IPv4 CIDR block assigned to the subnet.
//
//	If you update this property, we create a new subnet, and then delete the existing one.
func (o SubnetOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
func (o SubnetOutput) EnableDns64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.EnableDns64 }).(pulumi.BoolPtrOutput)
}

// An IPv4 IPAM pool ID for the subnet.
func (o SubnetOutput) Ipv4IpamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv4IpamPoolId }).(pulumi.StringPtrOutput)
}

// An IPv4 netmask length for the subnet.
func (o SubnetOutput) Ipv4NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.Ipv4NetmaskLength }).(pulumi.IntPtrOutput)
}

// The IPv6 CIDR block.
//
//	If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
func (o SubnetOutput) Ipv6CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv6CidrBlock }).(pulumi.StringPtrOutput)
}

// The IPv6 network ranges for the subnet, in CIDR notation.
func (o SubnetOutput) Ipv6CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.Ipv6CidrBlocks }).(pulumi.StringArrayOutput)
}

// An IPv6 IPAM pool ID for the subnet.
func (o SubnetOutput) Ipv6IpamPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipv6IpamPoolId }).(pulumi.StringPtrOutput)
}

// Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
func (o SubnetOutput) Ipv6Native() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.Ipv6Native }).(pulumi.BoolPtrOutput)
}

// An IPv6 netmask length for the subnet.
func (o SubnetOutput) Ipv6NetmaskLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.Ipv6NetmaskLength }).(pulumi.IntPtrOutput)
}

// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is “false“.
//
//	AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
func (o SubnetOutput) MapPublicIpOnLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.MapPublicIpOnLaunch }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) NetworkAclAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.NetworkAclAssociationId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the Outpost.
func (o SubnetOutput) OutpostArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.OutpostArn }).(pulumi.StringPtrOutput)
}

// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
//
//	Available options:
//	 + EnableResourceNameDnsAAAARecord (true | false)
//	+ EnableResourceNameDnsARecord (true | false)
//	+ HostnameType (ip-name | resource-name)
func (o SubnetOutput) PrivateDnsNameOptionsOnLaunch() PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput {
	return o.ApplyT(func(v *Subnet) PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput {
		return v.PrivateDnsNameOptionsOnLaunch
	}).(PrivateDnsNameOptionsOnLaunchPropertiesPtrOutput)
}

func (o SubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Any tags assigned to the subnet.
func (o SubnetOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Subnet) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ID of the VPC the subnet is in.
//
//	If you update this property, you must also update the ``CidrBlock`` property.
func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterOutputType(SubnetOutput{})
}
