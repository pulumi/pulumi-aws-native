// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::NetworkAclEntry
//
// Deprecated: NetworkAclEntry is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type NetworkAclEntry struct {
	pulumi.CustomResourceState

	CidrBlock     pulumi.StringPtrOutput            `pulumi:"cidrBlock"`
	Egress        pulumi.BoolPtrOutput              `pulumi:"egress"`
	Icmp          NetworkAclEntryIcmpPtrOutput      `pulumi:"icmp"`
	Ipv6CidrBlock pulumi.StringPtrOutput            `pulumi:"ipv6CidrBlock"`
	NetworkAclId  pulumi.StringOutput               `pulumi:"networkAclId"`
	PortRange     NetworkAclEntryPortRangePtrOutput `pulumi:"portRange"`
	Protocol      pulumi.IntOutput                  `pulumi:"protocol"`
	RuleAction    pulumi.StringOutput               `pulumi:"ruleAction"`
	RuleNumber    pulumi.IntOutput                  `pulumi:"ruleNumber"`
}

// NewNetworkAclEntry registers a new resource with the given unique name, arguments, and options.
func NewNetworkAclEntry(ctx *pulumi.Context,
	name string, args *NetworkAclEntryArgs, opts ...pulumi.ResourceOption) (*NetworkAclEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkAclId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkAclId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleNumber == nil {
		return nil, errors.New("invalid value for required argument 'RuleNumber'")
	}
	var resource NetworkAclEntry
	err := ctx.RegisterResource("aws-native:ec2:NetworkAclEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAclEntry gets an existing NetworkAclEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAclEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclEntryState, opts ...pulumi.ResourceOption) (*NetworkAclEntry, error) {
	var resource NetworkAclEntry
	err := ctx.ReadResource("aws-native:ec2:NetworkAclEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAclEntry resources.
type networkAclEntryState struct {
}

type NetworkAclEntryState struct {
}

func (NetworkAclEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclEntryState)(nil)).Elem()
}

type networkAclEntryArgs struct {
	CidrBlock     *string                   `pulumi:"cidrBlock"`
	Egress        *bool                     `pulumi:"egress"`
	Icmp          *NetworkAclEntryIcmp      `pulumi:"icmp"`
	Ipv6CidrBlock *string                   `pulumi:"ipv6CidrBlock"`
	NetworkAclId  string                    `pulumi:"networkAclId"`
	PortRange     *NetworkAclEntryPortRange `pulumi:"portRange"`
	Protocol      int                       `pulumi:"protocol"`
	RuleAction    string                    `pulumi:"ruleAction"`
	RuleNumber    int                       `pulumi:"ruleNumber"`
}

// The set of arguments for constructing a NetworkAclEntry resource.
type NetworkAclEntryArgs struct {
	CidrBlock     pulumi.StringPtrInput
	Egress        pulumi.BoolPtrInput
	Icmp          NetworkAclEntryIcmpPtrInput
	Ipv6CidrBlock pulumi.StringPtrInput
	NetworkAclId  pulumi.StringInput
	PortRange     NetworkAclEntryPortRangePtrInput
	Protocol      pulumi.IntInput
	RuleAction    pulumi.StringInput
	RuleNumber    pulumi.IntInput
}

func (NetworkAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclEntryArgs)(nil)).Elem()
}

type NetworkAclEntryInput interface {
	pulumi.Input

	ToNetworkAclEntryOutput() NetworkAclEntryOutput
	ToNetworkAclEntryOutputWithContext(ctx context.Context) NetworkAclEntryOutput
}

func (*NetworkAclEntry) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEntry)(nil))
}

func (i *NetworkAclEntry) ToNetworkAclEntryOutput() NetworkAclEntryOutput {
	return i.ToNetworkAclEntryOutputWithContext(context.Background())
}

func (i *NetworkAclEntry) ToNetworkAclEntryOutputWithContext(ctx context.Context) NetworkAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEntryOutput)
}

type NetworkAclEntryOutput struct{ *pulumi.OutputState }

func (NetworkAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEntry)(nil))
}

func (o NetworkAclEntryOutput) ToNetworkAclEntryOutput() NetworkAclEntryOutput {
	return o
}

func (o NetworkAclEntryOutput) ToNetworkAclEntryOutputWithContext(ctx context.Context) NetworkAclEntryOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NetworkAclEntryOutput{})
}
