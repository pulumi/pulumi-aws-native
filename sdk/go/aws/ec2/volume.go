// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::Volume
//
// Deprecated: Volume is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Volume struct {
	pulumi.CustomResourceState

	AutoEnableIO       pulumi.BoolPtrOutput   `pulumi:"autoEnableIO"`
	AvailabilityZone   pulumi.StringOutput    `pulumi:"availabilityZone"`
	Encrypted          pulumi.BoolPtrOutput   `pulumi:"encrypted"`
	Iops               pulumi.IntPtrOutput    `pulumi:"iops"`
	KmsKeyId           pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	MultiAttachEnabled pulumi.BoolPtrOutput   `pulumi:"multiAttachEnabled"`
	OutpostArn         pulumi.StringPtrOutput `pulumi:"outpostArn"`
	Size               pulumi.IntPtrOutput    `pulumi:"size"`
	SnapshotId         pulumi.StringPtrOutput `pulumi:"snapshotId"`
	Tags               VolumeTagArrayOutput   `pulumi:"tags"`
	Throughput         pulumi.IntPtrOutput    `pulumi:"throughput"`
	VolumeType         pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	var resource Volume
	err := ctx.RegisterResource("aws-native:ec2:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("aws-native:ec2:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
}

type VolumeState struct {
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	AutoEnableIO       *bool       `pulumi:"autoEnableIO"`
	AvailabilityZone   string      `pulumi:"availabilityZone"`
	Encrypted          *bool       `pulumi:"encrypted"`
	Iops               *int        `pulumi:"iops"`
	KmsKeyId           *string     `pulumi:"kmsKeyId"`
	MultiAttachEnabled *bool       `pulumi:"multiAttachEnabled"`
	OutpostArn         *string     `pulumi:"outpostArn"`
	Size               *int        `pulumi:"size"`
	SnapshotId         *string     `pulumi:"snapshotId"`
	Tags               []VolumeTag `pulumi:"tags"`
	Throughput         *int        `pulumi:"throughput"`
	VolumeType         *string     `pulumi:"volumeType"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	AutoEnableIO       pulumi.BoolPtrInput
	AvailabilityZone   pulumi.StringInput
	Encrypted          pulumi.BoolPtrInput
	Iops               pulumi.IntPtrInput
	KmsKeyId           pulumi.StringPtrInput
	MultiAttachEnabled pulumi.BoolPtrInput
	OutpostArn         pulumi.StringPtrInput
	Size               pulumi.IntPtrInput
	SnapshotId         pulumi.StringPtrInput
	Tags               VolumeTagArrayInput
	Throughput         pulumi.IntPtrInput
	VolumeType         pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil))
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil))
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VolumeOutput{})
}
