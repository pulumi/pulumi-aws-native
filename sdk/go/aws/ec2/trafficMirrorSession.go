// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EC2::TrafficMirrorSession
type TrafficMirrorSession struct {
	pulumi.CustomResourceState

	// The ID of a Traffic Mirror session.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The description of the Traffic Mirror session.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the source network interface.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// The ID of the account that owns the Traffic Mirror session.
	OwnerId pulumi.StringPtrOutput `pulumi:"ownerId"`
	// The number of bytes in each packet to mirror.
	PacketLength pulumi.IntPtrOutput `pulumi:"packetLength"`
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber pulumi.IntOutput `pulumi:"sessionNumber"`
	// The tags assigned to the Traffic Mirror session.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ID of a Traffic Mirror filter.
	TrafficMirrorFilterId pulumi.StringOutput `pulumi:"trafficMirrorFilterId"`
	// The ID of a Traffic Mirror target.
	TrafficMirrorTargetId pulumi.StringOutput `pulumi:"trafficMirrorTargetId"`
	// The VXLAN ID for the Traffic Mirror session.
	VirtualNetworkId pulumi.IntPtrOutput `pulumi:"virtualNetworkId"`
}

// NewTrafficMirrorSession registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorSession(ctx *pulumi.Context,
	name string, args *TrafficMirrorSessionArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.SessionNumber == nil {
		return nil, errors.New("invalid value for required argument 'SessionNumber'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	if args.TrafficMirrorTargetId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorTargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorSession
	err := ctx.RegisterResource("aws-native:ec2:TrafficMirrorSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorSession gets an existing TrafficMirrorSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorSessionState, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	var resource TrafficMirrorSession
	err := ctx.ReadResource("aws-native:ec2:TrafficMirrorSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorSession resources.
type trafficMirrorSessionState struct {
}

type TrafficMirrorSessionState struct {
}

func (TrafficMirrorSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionState)(nil)).Elem()
}

type trafficMirrorSessionArgs struct {
	// The description of the Traffic Mirror session.
	Description *string `pulumi:"description"`
	// The ID of the source network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The ID of the account that owns the Traffic Mirror session.
	OwnerId *string `pulumi:"ownerId"`
	// The number of bytes in each packet to mirror.
	PacketLength *int `pulumi:"packetLength"`
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber int `pulumi:"sessionNumber"`
	// The tags assigned to the Traffic Mirror session.
	Tags []aws.Tag `pulumi:"tags"`
	// The ID of a Traffic Mirror filter.
	TrafficMirrorFilterId string `pulumi:"trafficMirrorFilterId"`
	// The ID of a Traffic Mirror target.
	TrafficMirrorTargetId string `pulumi:"trafficMirrorTargetId"`
	// The VXLAN ID for the Traffic Mirror session.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TrafficMirrorSession resource.
type TrafficMirrorSessionArgs struct {
	// The description of the Traffic Mirror session.
	Description pulumi.StringPtrInput
	// The ID of the source network interface.
	NetworkInterfaceId pulumi.StringInput
	// The ID of the account that owns the Traffic Mirror session.
	OwnerId pulumi.StringPtrInput
	// The number of bytes in each packet to mirror.
	PacketLength pulumi.IntPtrInput
	// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
	SessionNumber pulumi.IntInput
	// The tags assigned to the Traffic Mirror session.
	Tags aws.TagArrayInput
	// The ID of a Traffic Mirror filter.
	TrafficMirrorFilterId pulumi.StringInput
	// The ID of a Traffic Mirror target.
	TrafficMirrorTargetId pulumi.StringInput
	// The VXLAN ID for the Traffic Mirror session.
	VirtualNetworkId pulumi.IntPtrInput
}

func (TrafficMirrorSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionArgs)(nil)).Elem()
}

type TrafficMirrorSessionInput interface {
	pulumi.Input

	ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput
	ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput
}

func (*TrafficMirrorSession) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return i.ToTrafficMirrorSessionOutputWithContext(context.Background())
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionOutput)
}

type TrafficMirrorSessionOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return o
}

// The ID of a Traffic Mirror session.
func (o TrafficMirrorSessionOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The description of the Traffic Mirror session.
func (o TrafficMirrorSessionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the source network interface.
func (o TrafficMirrorSessionOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The ID of the account that owns the Traffic Mirror session.
func (o TrafficMirrorSessionOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringPtrOutput { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// The number of bytes in each packet to mirror.
func (o TrafficMirrorSessionOutput) PacketLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntPtrOutput { return v.PacketLength }).(pulumi.IntPtrOutput)
}

// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
func (o TrafficMirrorSessionOutput) SessionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.SessionNumber }).(pulumi.IntOutput)
}

// The tags assigned to the Traffic Mirror session.
func (o TrafficMirrorSessionOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ID of a Traffic Mirror filter.
func (o TrafficMirrorSessionOutput) TrafficMirrorFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorFilterId }).(pulumi.StringOutput)
}

// The ID of a Traffic Mirror target.
func (o TrafficMirrorSessionOutput) TrafficMirrorTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorTargetId }).(pulumi.StringOutput)
}

// The VXLAN ID for the Traffic Mirror session.
func (o TrafficMirrorSessionOutput) VirtualNetworkId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntPtrOutput { return v.VirtualNetworkId }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionInput)(nil)).Elem(), &TrafficMirrorSession{})
	pulumi.RegisterOutputType(TrafficMirrorSessionOutput{})
}
