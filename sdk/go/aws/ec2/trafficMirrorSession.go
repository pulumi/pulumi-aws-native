// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EC2::TrafficMirrorSession
//
// Deprecated: TrafficMirrorSession is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type TrafficMirrorSession struct {
	pulumi.CustomResourceState

	Description           pulumi.StringPtrOutput             `pulumi:"description"`
	NetworkInterfaceId    pulumi.StringOutput                `pulumi:"networkInterfaceId"`
	PacketLength          pulumi.IntPtrOutput                `pulumi:"packetLength"`
	SessionNumber         pulumi.IntOutput                   `pulumi:"sessionNumber"`
	Tags                  TrafficMirrorSessionTagArrayOutput `pulumi:"tags"`
	TrafficMirrorFilterId pulumi.StringOutput                `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId pulumi.StringOutput                `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      pulumi.IntPtrOutput                `pulumi:"virtualNetworkId"`
}

// NewTrafficMirrorSession registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorSession(ctx *pulumi.Context,
	name string, args *TrafficMirrorSessionArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.SessionNumber == nil {
		return nil, errors.New("invalid value for required argument 'SessionNumber'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	if args.TrafficMirrorTargetId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorTargetId'")
	}
	var resource TrafficMirrorSession
	err := ctx.RegisterResource("aws-native:ec2:TrafficMirrorSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorSession gets an existing TrafficMirrorSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorSessionState, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	var resource TrafficMirrorSession
	err := ctx.ReadResource("aws-native:ec2:TrafficMirrorSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorSession resources.
type trafficMirrorSessionState struct {
}

type TrafficMirrorSessionState struct {
}

func (TrafficMirrorSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionState)(nil)).Elem()
}

type trafficMirrorSessionArgs struct {
	Description           *string                   `pulumi:"description"`
	NetworkInterfaceId    string                    `pulumi:"networkInterfaceId"`
	PacketLength          *int                      `pulumi:"packetLength"`
	SessionNumber         int                       `pulumi:"sessionNumber"`
	Tags                  []TrafficMirrorSessionTag `pulumi:"tags"`
	TrafficMirrorFilterId string                    `pulumi:"trafficMirrorFilterId"`
	TrafficMirrorTargetId string                    `pulumi:"trafficMirrorTargetId"`
	VirtualNetworkId      *int                      `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TrafficMirrorSession resource.
type TrafficMirrorSessionArgs struct {
	Description           pulumi.StringPtrInput
	NetworkInterfaceId    pulumi.StringInput
	PacketLength          pulumi.IntPtrInput
	SessionNumber         pulumi.IntInput
	Tags                  TrafficMirrorSessionTagArrayInput
	TrafficMirrorFilterId pulumi.StringInput
	TrafficMirrorTargetId pulumi.StringInput
	VirtualNetworkId      pulumi.IntPtrInput
}

func (TrafficMirrorSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionArgs)(nil)).Elem()
}

type TrafficMirrorSessionInput interface {
	pulumi.Input

	ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput
	ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput
}

func (*TrafficMirrorSession) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorSession)(nil))
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return i.ToTrafficMirrorSessionOutputWithContext(context.Background())
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionOutput)
}

type TrafficMirrorSessionOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficMirrorSession)(nil))
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TrafficMirrorSessionOutput{})
}
