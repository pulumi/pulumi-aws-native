// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::RAM::Permission
type Permission struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// Set to true to use this as the default permission.
	IsResourceTypeDefault pulumi.BoolOutput `pulumi:"isResourceTypeDefault"`
	// The name of the permission.
	Name           pulumi.StringOutput `pulumi:"name"`
	PermissionType pulumi.StringOutput `pulumi:"permissionType"`
	// Policy template for the permission.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RAM::Permission` for more information about the expected schema for this property.
	PolicyTemplate pulumi.AnyOutput `pulumi:"policyTemplate"`
	// The resource type this permission can be used with.
	ResourceType pulumi.StringOutput      `pulumi:"resourceType"`
	Tags         PermissionTagArrayOutput `pulumi:"tags"`
	// Version of the permission.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyTemplate == nil {
		return nil, errors.New("invalid value for required argument 'PolicyTemplate'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"policyTemplate",
		"resourceType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("aws-native:ram:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("aws-native:ram:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
}

type PermissionState struct {
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// The name of the permission.
	Name *string `pulumi:"name"`
	// Policy template for the permission.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RAM::Permission` for more information about the expected schema for this property.
	PolicyTemplate interface{} `pulumi:"policyTemplate"`
	// The resource type this permission can be used with.
	ResourceType string          `pulumi:"resourceType"`
	Tags         []PermissionTag `pulumi:"tags"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// The name of the permission.
	Name pulumi.StringPtrInput
	// Policy template for the permission.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RAM::Permission` for more information about the expected schema for this property.
	PolicyTemplate pulumi.Input
	// The resource type this permission can be used with.
	ResourceType pulumi.StringInput
	Tags         PermissionTagArrayInput
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(ctx context.Context) PermissionOutput
}

func (*Permission) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (i *Permission) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i *Permission) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

func (o PermissionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Set to true to use this as the default permission.
func (o PermissionOutput) IsResourceTypeDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *Permission) pulumi.BoolOutput { return v.IsResourceTypeDefault }).(pulumi.BoolOutput)
}

// The name of the permission.
func (o PermissionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PermissionOutput) PermissionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.PermissionType }).(pulumi.StringOutput)
}

// Policy template for the permission.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::RAM::Permission` for more information about the expected schema for this property.
func (o PermissionOutput) PolicyTemplate() pulumi.AnyOutput {
	return o.ApplyT(func(v *Permission) pulumi.AnyOutput { return v.PolicyTemplate }).(pulumi.AnyOutput)
}

// The resource type this permission can be used with.
func (o PermissionOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

func (o PermissionOutput) Tags() PermissionTagArrayOutput {
	return o.ApplyT(func(v *Permission) PermissionTagArrayOutput { return v.Tags }).(PermissionTagArrayOutput)
}

// Version of the permission.
func (o PermissionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionInput)(nil)).Elem(), &Permission{})
	pulumi.RegisterOutputType(PermissionOutput{})
}
