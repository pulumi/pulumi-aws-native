// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ram

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::RAM::Permission
func LookupPermission(ctx *pulumi.Context, args *LookupPermissionArgs, opts ...pulumi.InvokeOption) (*LookupPermissionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPermissionResult
	err := ctx.Invoke("aws-native:ram:getPermission", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPermissionArgs struct {
	// The Amazon Resource Name (ARN) of the new permission.
	Arn string `pulumi:"arn"`
}

type LookupPermissionResult struct {
	// The Amazon Resource Name (ARN) of the new permission.
	Arn *string `pulumi:"arn"`
	// Set to true to use this as the default permission.
	IsResourceTypeDefault *bool `pulumi:"isResourceTypeDefault"`
	// The type of managed permission. This can be one of the following values:
	//
	// - *AWS_MANAGED_PERMISSION* – AWS created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.
	// - *CUSTOMER_MANAGED_PERMISSION* – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.
	PermissionType *string `pulumi:"permissionType"`
	// Specifies a list of one or more tag key and value pairs to attach to the permission.
	Tags []aws.Tag `pulumi:"tags"`
	// Version of the permission.
	Version *string `pulumi:"version"`
}

func LookupPermissionOutput(ctx *pulumi.Context, args LookupPermissionOutputArgs, opts ...pulumi.InvokeOption) LookupPermissionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPermissionResultOutput, error) {
			args := v.(LookupPermissionArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPermissionResult
			secret, err := ctx.InvokePackageRaw("aws-native:ram:getPermission", args, &rv, "", opts...)
			if err != nil {
				return LookupPermissionResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPermissionResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPermissionResultOutput), nil
			}
			return output, nil
		}).(LookupPermissionResultOutput)
}

type LookupPermissionOutputArgs struct {
	// The Amazon Resource Name (ARN) of the new permission.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupPermissionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionArgs)(nil)).Elem()
}

type LookupPermissionResultOutput struct{ *pulumi.OutputState }

func (LookupPermissionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionResult)(nil)).Elem()
}

func (o LookupPermissionResultOutput) ToLookupPermissionResultOutput() LookupPermissionResultOutput {
	return o
}

func (o LookupPermissionResultOutput) ToLookupPermissionResultOutputWithContext(ctx context.Context) LookupPermissionResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the new permission.
func (o LookupPermissionResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Set to true to use this as the default permission.
func (o LookupPermissionResultOutput) IsResourceTypeDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPermissionResult) *bool { return v.IsResourceTypeDefault }).(pulumi.BoolPtrOutput)
}

// The type of managed permission. This can be one of the following values:
//
// - *AWS_MANAGED_PERMISSION* – AWS created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.
// - *CUSTOMER_MANAGED_PERMISSION* – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.
func (o LookupPermissionResultOutput) PermissionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionResult) *string { return v.PermissionType }).(pulumi.StringPtrOutput)
}

// Specifies a list of one or more tag key and value pairs to attach to the permission.
func (o LookupPermissionResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupPermissionResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// Version of the permission.
func (o LookupPermissionResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPermissionResultOutput{})
}
