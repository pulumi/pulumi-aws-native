// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::RUM::AppMonitor
func LookupAppMonitor(ctx *pulumi.Context, args *LookupAppMonitorArgs, opts ...pulumi.InvokeOption) (*LookupAppMonitorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAppMonitorResult
	err := ctx.Invoke("aws-native:rum:getAppMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAppMonitorArgs struct {
	// A name for the app monitor
	Name string `pulumi:"name"`
}

type LookupAppMonitorResult struct {
	// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
	//
	// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
	AppMonitorConfiguration *AppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
	CustomEvents *AppMonitorCustomEvents `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
	CwLogEnabled *bool `pulumi:"cwLogEnabled"`
	// A structure that contains the configuration for how an app monitor can deobfuscate stack traces.
	DeobfuscationConfiguration *AppMonitorDeobfuscationConfiguration `pulumi:"deobfuscationConfiguration"`
	// The top-level internet domain name for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	Domain *string `pulumi:"domain"`
	// The top-level internet domain names for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	DomainList []string `pulumi:"domainList"`
	// The unique ID of the new app monitor.
	Id *string `pulumi:"id"`
	// Use this structure to assign a resource-based policy to a CloudWatch RUM app monitor to control access to it. Each app monitor can have one resource-based policy. The maximum size of the policy is 4 KB. To learn more about using resource policies with RUM, see [Using resource-based policies with CloudWatch RUM](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html) .
	ResourcePolicy *AppMonitorResourcePolicy `pulumi:"resourcePolicy"`
	// Assigns one or more tags (key-value pairs) to the app monitor.
	//
	// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
	//
	// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
	//
	// You can associate as many as 50 tags with an app monitor.
	//
	// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupAppMonitorOutput(ctx *pulumi.Context, args LookupAppMonitorOutputArgs, opts ...pulumi.InvokeOption) LookupAppMonitorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAppMonitorResultOutput, error) {
			args := v.(LookupAppMonitorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:rum:getAppMonitor", args, LookupAppMonitorResultOutput{}, options).(LookupAppMonitorResultOutput), nil
		}).(LookupAppMonitorResultOutput)
}

type LookupAppMonitorOutputArgs struct {
	// A name for the app monitor
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupAppMonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppMonitorArgs)(nil)).Elem()
}

type LookupAppMonitorResultOutput struct{ *pulumi.OutputState }

func (LookupAppMonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppMonitorResult)(nil)).Elem()
}

func (o LookupAppMonitorResultOutput) ToLookupAppMonitorResultOutput() LookupAppMonitorResultOutput {
	return o
}

func (o LookupAppMonitorResultOutput) ToLookupAppMonitorResultOutputWithContext(ctx context.Context) LookupAppMonitorResultOutput {
	return o
}

// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
//
// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
func (o LookupAppMonitorResultOutput) AppMonitorConfiguration() AppMonitorConfigurationPtrOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) *AppMonitorConfiguration { return v.AppMonitorConfiguration }).(AppMonitorConfigurationPtrOutput)
}

// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
func (o LookupAppMonitorResultOutput) CustomEvents() AppMonitorCustomEventsPtrOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) *AppMonitorCustomEvents { return v.CustomEvents }).(AppMonitorCustomEventsPtrOutput)
}

// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
func (o LookupAppMonitorResultOutput) CwLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) *bool { return v.CwLogEnabled }).(pulumi.BoolPtrOutput)
}

// A structure that contains the configuration for how an app monitor can deobfuscate stack traces.
func (o LookupAppMonitorResultOutput) DeobfuscationConfiguration() AppMonitorDeobfuscationConfigurationPtrOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) *AppMonitorDeobfuscationConfiguration {
		return v.DeobfuscationConfiguration
	}).(AppMonitorDeobfuscationConfigurationPtrOutput)
}

// The top-level internet domain name for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
func (o LookupAppMonitorResultOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The top-level internet domain names for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
func (o LookupAppMonitorResultOutput) DomainList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) []string { return v.DomainList }).(pulumi.StringArrayOutput)
}

// The unique ID of the new app monitor.
func (o LookupAppMonitorResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Use this structure to assign a resource-based policy to a CloudWatch RUM app monitor to control access to it. Each app monitor can have one resource-based policy. The maximum size of the policy is 4 KB. To learn more about using resource policies with RUM, see [Using resource-based policies with CloudWatch RUM](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html) .
func (o LookupAppMonitorResultOutput) ResourcePolicy() AppMonitorResourcePolicyPtrOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) *AppMonitorResourcePolicy { return v.ResourcePolicy }).(AppMonitorResourcePolicyPtrOutput)
}

// Assigns one or more tags (key-value pairs) to the app monitor.
//
// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
//
// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
//
// You can associate as many as 50 tags with an app monitor.
//
// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
func (o LookupAppMonitorResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupAppMonitorResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAppMonitorResultOutput{})
}
