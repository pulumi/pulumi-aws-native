// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::RUM::AppMonitor
type AppMonitor struct {
	pulumi.CustomResourceState

	// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
	//
	// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
	AppMonitorConfiguration AppMonitorConfigurationPtrOutput `pulumi:"appMonitorConfiguration"`
	// The unique ID of the new app monitor.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
	CustomEvents AppMonitorCustomEventsPtrOutput `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
	CwLogEnabled               pulumi.BoolPtrOutput                          `pulumi:"cwLogEnabled"`
	DeobfuscationConfiguration AppMonitorDeobfuscationConfigurationPtrOutput `pulumi:"deobfuscationConfiguration"`
	// The top-level internet domain name for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The top-level internet domain names for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	DomainList pulumi.ArrayOutput `pulumi:"domainList"`
	// A name for the app monitor
	Name pulumi.StringOutput `pulumi:"name"`
	// Use this structure to assign a resource-based policy to a CloudWatch RUM app monitor to control access to it. Each app monitor can have one resource-based policy. The maximum size of the policy is 4 KB. To learn more about using resource policies with RUM, see [Using resource-based policies with CloudWatch RUM](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html) .
	ResourcePolicy AppMonitorResourcePolicyPtrOutput `pulumi:"resourcePolicy"`
	// Assigns one or more tags (key-value pairs) to the app monitor.
	//
	// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
	//
	// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
	//
	// You can associate as many as 50 tags with an app monitor.
	//
	// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewAppMonitor registers a new resource with the given unique name, arguments, and options.
func NewAppMonitor(ctx *pulumi.Context,
	name string, args *AppMonitorArgs, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	if args == nil {
		args = &AppMonitorArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppMonitor
	err := ctx.RegisterResource("aws-native:rum:AppMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppMonitor gets an existing AppMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppMonitorState, opts ...pulumi.ResourceOption) (*AppMonitor, error) {
	var resource AppMonitor
	err := ctx.ReadResource("aws-native:rum:AppMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppMonitor resources.
type appMonitorState struct {
}

type AppMonitorState struct {
}

func (AppMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorState)(nil)).Elem()
}

type appMonitorArgs struct {
	// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
	//
	// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
	AppMonitorConfiguration *AppMonitorConfiguration `pulumi:"appMonitorConfiguration"`
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
	CustomEvents *AppMonitorCustomEvents `pulumi:"customEvents"`
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
	CwLogEnabled               *bool                                 `pulumi:"cwLogEnabled"`
	DeobfuscationConfiguration *AppMonitorDeobfuscationConfiguration `pulumi:"deobfuscationConfiguration"`
	// The top-level internet domain name for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	Domain *string `pulumi:"domain"`
	// The top-level internet domain names for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	DomainList []interface{} `pulumi:"domainList"`
	// A name for the app monitor
	Name *string `pulumi:"name"`
	// Use this structure to assign a resource-based policy to a CloudWatch RUM app monitor to control access to it. Each app monitor can have one resource-based policy. The maximum size of the policy is 4 KB. To learn more about using resource policies with RUM, see [Using resource-based policies with CloudWatch RUM](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html) .
	ResourcePolicy *AppMonitorResourcePolicy `pulumi:"resourcePolicy"`
	// Assigns one or more tags (key-value pairs) to the app monitor.
	//
	// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
	//
	// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
	//
	// You can associate as many as 50 tags with an app monitor.
	//
	// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a AppMonitor resource.
type AppMonitorArgs struct {
	// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
	//
	// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
	AppMonitorConfiguration AppMonitorConfigurationPtrInput
	// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
	CustomEvents AppMonitorCustomEventsPtrInput
	// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
	CwLogEnabled               pulumi.BoolPtrInput
	DeobfuscationConfiguration AppMonitorDeobfuscationConfigurationPtrInput
	// The top-level internet domain name for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	Domain pulumi.StringPtrInput
	// The top-level internet domain names for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
	DomainList pulumi.ArrayInput
	// A name for the app monitor
	Name pulumi.StringPtrInput
	// Use this structure to assign a resource-based policy to a CloudWatch RUM app monitor to control access to it. Each app monitor can have one resource-based policy. The maximum size of the policy is 4 KB. To learn more about using resource policies with RUM, see [Using resource-based policies with CloudWatch RUM](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html) .
	ResourcePolicy AppMonitorResourcePolicyPtrInput
	// Assigns one or more tags (key-value pairs) to the app monitor.
	//
	// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
	//
	// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
	//
	// You can associate as many as 50 tags with an app monitor.
	//
	// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
	Tags aws.TagArrayInput
}

func (AppMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitorArgs)(nil)).Elem()
}

type AppMonitorInput interface {
	pulumi.Input

	ToAppMonitorOutput() AppMonitorOutput
	ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput
}

func (*AppMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitor)(nil)).Elem()
}

func (i *AppMonitor) ToAppMonitorOutput() AppMonitorOutput {
	return i.ToAppMonitorOutputWithContext(context.Background())
}

func (i *AppMonitor) ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorOutput)
}

type AppMonitorOutput struct{ *pulumi.OutputState }

func (AppMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitor)(nil)).Elem()
}

func (o AppMonitorOutput) ToAppMonitorOutput() AppMonitorOutput {
	return o
}

func (o AppMonitorOutput) ToAppMonitorOutputWithContext(ctx context.Context) AppMonitorOutput {
	return o
}

// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
//
// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
func (o AppMonitorOutput) AppMonitorConfiguration() AppMonitorConfigurationPtrOutput {
	return o.ApplyT(func(v *AppMonitor) AppMonitorConfigurationPtrOutput { return v.AppMonitorConfiguration }).(AppMonitorConfigurationPtrOutput)
}

// The unique ID of the new app monitor.
func (o AppMonitorOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
func (o AppMonitorOutput) CustomEvents() AppMonitorCustomEventsPtrOutput {
	return o.ApplyT(func(v *AppMonitor) AppMonitorCustomEventsPtrOutput { return v.CustomEvents }).(AppMonitorCustomEventsPtrOutput)
}

// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
func (o AppMonitorOutput) CwLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.BoolPtrOutput { return v.CwLogEnabled }).(pulumi.BoolPtrOutput)
}

func (o AppMonitorOutput) DeobfuscationConfiguration() AppMonitorDeobfuscationConfigurationPtrOutput {
	return o.ApplyT(func(v *AppMonitor) AppMonitorDeobfuscationConfigurationPtrOutput { return v.DeobfuscationConfiguration }).(AppMonitorDeobfuscationConfigurationPtrOutput)
}

// The top-level internet domain name for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
func (o AppMonitorOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// The top-level internet domain names for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
func (o AppMonitorOutput) DomainList() pulumi.ArrayOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.ArrayOutput { return v.DomainList }).(pulumi.ArrayOutput)
}

// A name for the app monitor
func (o AppMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Use this structure to assign a resource-based policy to a CloudWatch RUM app monitor to control access to it. Each app monitor can have one resource-based policy. The maximum size of the policy is 4 KB. To learn more about using resource policies with RUM, see [Using resource-based policies with CloudWatch RUM](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html) .
func (o AppMonitorOutput) ResourcePolicy() AppMonitorResourcePolicyPtrOutput {
	return o.ApplyT(func(v *AppMonitor) AppMonitorResourcePolicyPtrOutput { return v.ResourcePolicy }).(AppMonitorResourcePolicyPtrOutput)
}

// Assigns one or more tags (key-value pairs) to the app monitor.
//
// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
//
// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
//
// You can associate as many as 50 tags with an app monitor.
//
// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
func (o AppMonitorOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *AppMonitor) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorInput)(nil)).Elem(), &AppMonitor{})
	pulumi.RegisterOutputType(AppMonitorOutput{})
}
