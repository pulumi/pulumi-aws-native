// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AppMonitor configuration
type AppMonitorConfiguration struct {
	// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
	AllowCookies *bool `pulumi:"allowCookies"`
	// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
	EnableXRay *bool `pulumi:"enableXRay"`
	// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
	ExcludedPages []string `pulumi:"excludedPages"`
	// A list of pages in the RUM console that are to be displayed with a favorite icon.
	FavoritePages []string `pulumi:"favoritePages"`
	// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
	GuestRoleArn *string `pulumi:"guestRoleArn"`
	// The ID of the identity pool that is used to authorize the sending of data to RUM.
	IdentityPoolId *string `pulumi:"identityPoolId"`
	// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
	IncludedPages []string `pulumi:"includedPages"`
	// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
	SessionSampleRate *float64 `pulumi:"sessionSampleRate"`
	// An array that lists the types of telemetry data that this app monitor is to collect.
	Telemetries []AppMonitorTelemetry `pulumi:"telemetries"`
}

// AppMonitorConfigurationInput is an input type that accepts AppMonitorConfigurationArgs and AppMonitorConfigurationOutput values.
// You can construct a concrete instance of `AppMonitorConfigurationInput` via:
//
//          AppMonitorConfigurationArgs{...}
type AppMonitorConfigurationInput interface {
	pulumi.Input

	ToAppMonitorConfigurationOutput() AppMonitorConfigurationOutput
	ToAppMonitorConfigurationOutputWithContext(context.Context) AppMonitorConfigurationOutput
}

// AppMonitor configuration
type AppMonitorConfigurationArgs struct {
	// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
	AllowCookies pulumi.BoolPtrInput `pulumi:"allowCookies"`
	// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
	EnableXRay pulumi.BoolPtrInput `pulumi:"enableXRay"`
	// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
	ExcludedPages pulumi.StringArrayInput `pulumi:"excludedPages"`
	// A list of pages in the RUM console that are to be displayed with a favorite icon.
	FavoritePages pulumi.StringArrayInput `pulumi:"favoritePages"`
	// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
	GuestRoleArn pulumi.StringPtrInput `pulumi:"guestRoleArn"`
	// The ID of the identity pool that is used to authorize the sending of data to RUM.
	IdentityPoolId pulumi.StringPtrInput `pulumi:"identityPoolId"`
	// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
	IncludedPages pulumi.StringArrayInput `pulumi:"includedPages"`
	// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
	SessionSampleRate pulumi.Float64PtrInput `pulumi:"sessionSampleRate"`
	// An array that lists the types of telemetry data that this app monitor is to collect.
	Telemetries AppMonitorTelemetryArrayInput `pulumi:"telemetries"`
}

func (AppMonitorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorConfiguration)(nil)).Elem()
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationOutput() AppMonitorConfigurationOutput {
	return i.ToAppMonitorConfigurationOutputWithContext(context.Background())
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationOutputWithContext(ctx context.Context) AppMonitorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorConfigurationOutput)
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return i.ToAppMonitorConfigurationPtrOutputWithContext(context.Background())
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorConfigurationOutput).ToAppMonitorConfigurationPtrOutputWithContext(ctx)
}

// AppMonitorConfigurationPtrInput is an input type that accepts AppMonitorConfigurationArgs, AppMonitorConfigurationPtr and AppMonitorConfigurationPtrOutput values.
// You can construct a concrete instance of `AppMonitorConfigurationPtrInput` via:
//
//          AppMonitorConfigurationArgs{...}
//
//  or:
//
//          nil
type AppMonitorConfigurationPtrInput interface {
	pulumi.Input

	ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput
	ToAppMonitorConfigurationPtrOutputWithContext(context.Context) AppMonitorConfigurationPtrOutput
}

type appMonitorConfigurationPtrType AppMonitorConfigurationArgs

func AppMonitorConfigurationPtr(v *AppMonitorConfigurationArgs) AppMonitorConfigurationPtrInput {
	return (*appMonitorConfigurationPtrType)(v)
}

func (*appMonitorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitorConfiguration)(nil)).Elem()
}

func (i *appMonitorConfigurationPtrType) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return i.ToAppMonitorConfigurationPtrOutputWithContext(context.Background())
}

func (i *appMonitorConfigurationPtrType) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorConfigurationPtrOutput)
}

// AppMonitor configuration
type AppMonitorConfigurationOutput struct{ *pulumi.OutputState }

func (AppMonitorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorConfiguration)(nil)).Elem()
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationOutput() AppMonitorConfigurationOutput {
	return o
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationOutputWithContext(ctx context.Context) AppMonitorConfigurationOutput {
	return o
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return o.ToAppMonitorConfigurationPtrOutputWithContext(context.Background())
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppMonitorConfiguration) *AppMonitorConfiguration {
		return &v
	}).(AppMonitorConfigurationPtrOutput)
}

// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
func (o AppMonitorConfigurationOutput) AllowCookies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *bool { return v.AllowCookies }).(pulumi.BoolPtrOutput)
}

// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
func (o AppMonitorConfigurationOutput) EnableXRay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *bool { return v.EnableXRay }).(pulumi.BoolPtrOutput)
}

// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationOutput) ExcludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []string { return v.ExcludedPages }).(pulumi.StringArrayOutput)
}

// A list of pages in the RUM console that are to be displayed with a favorite icon.
func (o AppMonitorConfigurationOutput) FavoritePages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []string { return v.FavoritePages }).(pulumi.StringArrayOutput)
}

// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationOutput) GuestRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *string { return v.GuestRoleArn }).(pulumi.StringPtrOutput)
}

// The ID of the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationOutput) IdentityPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *string { return v.IdentityPoolId }).(pulumi.StringPtrOutput)
}

// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationOutput) IncludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []string { return v.IncludedPages }).(pulumi.StringArrayOutput)
}

// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
func (o AppMonitorConfigurationOutput) SessionSampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *float64 { return v.SessionSampleRate }).(pulumi.Float64PtrOutput)
}

// An array that lists the types of telemetry data that this app monitor is to collect.
func (o AppMonitorConfigurationOutput) Telemetries() AppMonitorTelemetryArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []AppMonitorTelemetry { return v.Telemetries }).(AppMonitorTelemetryArrayOutput)
}

type AppMonitorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AppMonitorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitorConfiguration)(nil)).Elem()
}

func (o AppMonitorConfigurationPtrOutput) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return o
}

func (o AppMonitorConfigurationPtrOutput) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return o
}

func (o AppMonitorConfigurationPtrOutput) Elem() AppMonitorConfigurationOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) AppMonitorConfiguration {
		if v != nil {
			return *v
		}
		var ret AppMonitorConfiguration
		return ret
	}).(AppMonitorConfigurationOutput)
}

// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
func (o AppMonitorConfigurationPtrOutput) AllowCookies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCookies
	}).(pulumi.BoolPtrOutput)
}

// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
func (o AppMonitorConfigurationPtrOutput) EnableXRay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableXRay
	}).(pulumi.BoolPtrOutput)
}

// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationPtrOutput) ExcludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPages
	}).(pulumi.StringArrayOutput)
}

// A list of pages in the RUM console that are to be displayed with a favorite icon.
func (o AppMonitorConfigurationPtrOutput) FavoritePages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.FavoritePages
	}).(pulumi.StringArrayOutput)
}

// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationPtrOutput) GuestRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.GuestRoleArn
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationPtrOutput) IdentityPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.IdentityPoolId
	}).(pulumi.StringPtrOutput)
}

// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationPtrOutput) IncludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.IncludedPages
	}).(pulumi.StringArrayOutput)
}

// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
func (o AppMonitorConfigurationPtrOutput) SessionSampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.SessionSampleRate
	}).(pulumi.Float64PtrOutput)
}

// An array that lists the types of telemetry data that this app monitor is to collect.
func (o AppMonitorConfigurationPtrOutput) Telemetries() AppMonitorTelemetryArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []AppMonitorTelemetry {
		if v == nil {
			return nil
		}
		return v.Telemetries
	}).(AppMonitorTelemetryArrayOutput)
}

// A key-value pair to associate with a resource.
type AppMonitorTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// AppMonitorTagInput is an input type that accepts AppMonitorTagArgs and AppMonitorTagOutput values.
// You can construct a concrete instance of `AppMonitorTagInput` via:
//
//          AppMonitorTagArgs{...}
type AppMonitorTagInput interface {
	pulumi.Input

	ToAppMonitorTagOutput() AppMonitorTagOutput
	ToAppMonitorTagOutputWithContext(context.Context) AppMonitorTagOutput
}

// A key-value pair to associate with a resource.
type AppMonitorTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AppMonitorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorTag)(nil)).Elem()
}

func (i AppMonitorTagArgs) ToAppMonitorTagOutput() AppMonitorTagOutput {
	return i.ToAppMonitorTagOutputWithContext(context.Background())
}

func (i AppMonitorTagArgs) ToAppMonitorTagOutputWithContext(ctx context.Context) AppMonitorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorTagOutput)
}

// AppMonitorTagArrayInput is an input type that accepts AppMonitorTagArray and AppMonitorTagArrayOutput values.
// You can construct a concrete instance of `AppMonitorTagArrayInput` via:
//
//          AppMonitorTagArray{ AppMonitorTagArgs{...} }
type AppMonitorTagArrayInput interface {
	pulumi.Input

	ToAppMonitorTagArrayOutput() AppMonitorTagArrayOutput
	ToAppMonitorTagArrayOutputWithContext(context.Context) AppMonitorTagArrayOutput
}

type AppMonitorTagArray []AppMonitorTagInput

func (AppMonitorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorTag)(nil)).Elem()
}

func (i AppMonitorTagArray) ToAppMonitorTagArrayOutput() AppMonitorTagArrayOutput {
	return i.ToAppMonitorTagArrayOutputWithContext(context.Background())
}

func (i AppMonitorTagArray) ToAppMonitorTagArrayOutputWithContext(ctx context.Context) AppMonitorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorTagArrayOutput)
}

// A key-value pair to associate with a resource.
type AppMonitorTagOutput struct{ *pulumi.OutputState }

func (AppMonitorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorTag)(nil)).Elem()
}

func (o AppMonitorTagOutput) ToAppMonitorTagOutput() AppMonitorTagOutput {
	return o
}

func (o AppMonitorTagOutput) ToAppMonitorTagOutputWithContext(ctx context.Context) AppMonitorTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AppMonitorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AppMonitorTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AppMonitorTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AppMonitorTag) string { return v.Value }).(pulumi.StringOutput)
}

type AppMonitorTagArrayOutput struct{ *pulumi.OutputState }

func (AppMonitorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorTag)(nil)).Elem()
}

func (o AppMonitorTagArrayOutput) ToAppMonitorTagArrayOutput() AppMonitorTagArrayOutput {
	return o
}

func (o AppMonitorTagArrayOutput) ToAppMonitorTagArrayOutputWithContext(ctx context.Context) AppMonitorTagArrayOutput {
	return o
}

func (o AppMonitorTagArrayOutput) Index(i pulumi.IntInput) AppMonitorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppMonitorTag {
		return vs[0].([]AppMonitorTag)[vs[1].(int)]
	}).(AppMonitorTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorConfigurationInput)(nil)).Elem(), AppMonitorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorConfigurationPtrInput)(nil)).Elem(), AppMonitorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorTagInput)(nil)).Elem(), AppMonitorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorTagArrayInput)(nil)).Elem(), AppMonitorTagArray{})
	pulumi.RegisterOutputType(AppMonitorConfigurationOutput{})
	pulumi.RegisterOutputType(AppMonitorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AppMonitorTagOutput{})
	pulumi.RegisterOutputType(AppMonitorTagArrayOutput{})
}
