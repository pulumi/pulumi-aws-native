// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// AppMonitor configuration
type AppMonitorConfiguration struct {
	// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
	AllowCookies *bool `pulumi:"allowCookies"`
	// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
	EnableXRay *bool `pulumi:"enableXRay"`
	// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
	ExcludedPages []string `pulumi:"excludedPages"`
	// A list of pages in the RUM console that are to be displayed with a favorite icon.
	FavoritePages []string `pulumi:"favoritePages"`
	// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
	GuestRoleArn *string `pulumi:"guestRoleArn"`
	// The ID of the identity pool that is used to authorize the sending of data to RUM.
	IdentityPoolId *string `pulumi:"identityPoolId"`
	// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
	IncludedPages []string `pulumi:"includedPages"`
	// An array of structures which define the destinations and the metrics that you want to send.
	MetricDestinations []AppMonitorMetricDestination `pulumi:"metricDestinations"`
	// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
	SessionSampleRate *float64 `pulumi:"sessionSampleRate"`
	// An array that lists the types of telemetry data that this app monitor is to collect.
	Telemetries []AppMonitorTelemetry `pulumi:"telemetries"`
}

// AppMonitorConfigurationInput is an input type that accepts AppMonitorConfigurationArgs and AppMonitorConfigurationOutput values.
// You can construct a concrete instance of `AppMonitorConfigurationInput` via:
//
//	AppMonitorConfigurationArgs{...}
type AppMonitorConfigurationInput interface {
	pulumi.Input

	ToAppMonitorConfigurationOutput() AppMonitorConfigurationOutput
	ToAppMonitorConfigurationOutputWithContext(context.Context) AppMonitorConfigurationOutput
}

// AppMonitor configuration
type AppMonitorConfigurationArgs struct {
	// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
	AllowCookies pulumi.BoolPtrInput `pulumi:"allowCookies"`
	// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
	EnableXRay pulumi.BoolPtrInput `pulumi:"enableXRay"`
	// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
	ExcludedPages pulumi.StringArrayInput `pulumi:"excludedPages"`
	// A list of pages in the RUM console that are to be displayed with a favorite icon.
	FavoritePages pulumi.StringArrayInput `pulumi:"favoritePages"`
	// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
	GuestRoleArn pulumi.StringPtrInput `pulumi:"guestRoleArn"`
	// The ID of the identity pool that is used to authorize the sending of data to RUM.
	IdentityPoolId pulumi.StringPtrInput `pulumi:"identityPoolId"`
	// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
	IncludedPages pulumi.StringArrayInput `pulumi:"includedPages"`
	// An array of structures which define the destinations and the metrics that you want to send.
	MetricDestinations AppMonitorMetricDestinationArrayInput `pulumi:"metricDestinations"`
	// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
	SessionSampleRate pulumi.Float64PtrInput `pulumi:"sessionSampleRate"`
	// An array that lists the types of telemetry data that this app monitor is to collect.
	Telemetries AppMonitorTelemetryArrayInput `pulumi:"telemetries"`
}

func (AppMonitorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorConfiguration)(nil)).Elem()
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationOutput() AppMonitorConfigurationOutput {
	return i.ToAppMonitorConfigurationOutputWithContext(context.Background())
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationOutputWithContext(ctx context.Context) AppMonitorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorConfigurationOutput)
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return i.ToAppMonitorConfigurationPtrOutputWithContext(context.Background())
}

func (i AppMonitorConfigurationArgs) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorConfigurationOutput).ToAppMonitorConfigurationPtrOutputWithContext(ctx)
}

// AppMonitorConfigurationPtrInput is an input type that accepts AppMonitorConfigurationArgs, AppMonitorConfigurationPtr and AppMonitorConfigurationPtrOutput values.
// You can construct a concrete instance of `AppMonitorConfigurationPtrInput` via:
//
//	        AppMonitorConfigurationArgs{...}
//
//	or:
//
//	        nil
type AppMonitorConfigurationPtrInput interface {
	pulumi.Input

	ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput
	ToAppMonitorConfigurationPtrOutputWithContext(context.Context) AppMonitorConfigurationPtrOutput
}

type appMonitorConfigurationPtrType AppMonitorConfigurationArgs

func AppMonitorConfigurationPtr(v *AppMonitorConfigurationArgs) AppMonitorConfigurationPtrInput {
	return (*appMonitorConfigurationPtrType)(v)
}

func (*appMonitorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitorConfiguration)(nil)).Elem()
}

func (i *appMonitorConfigurationPtrType) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return i.ToAppMonitorConfigurationPtrOutputWithContext(context.Background())
}

func (i *appMonitorConfigurationPtrType) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorConfigurationPtrOutput)
}

// AppMonitor configuration
type AppMonitorConfigurationOutput struct{ *pulumi.OutputState }

func (AppMonitorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorConfiguration)(nil)).Elem()
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationOutput() AppMonitorConfigurationOutput {
	return o
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationOutputWithContext(ctx context.Context) AppMonitorConfigurationOutput {
	return o
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return o.ToAppMonitorConfigurationPtrOutputWithContext(context.Background())
}

func (o AppMonitorConfigurationOutput) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppMonitorConfiguration) *AppMonitorConfiguration {
		return &v
	}).(AppMonitorConfigurationPtrOutput)
}

// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
func (o AppMonitorConfigurationOutput) AllowCookies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *bool { return v.AllowCookies }).(pulumi.BoolPtrOutput)
}

// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
func (o AppMonitorConfigurationOutput) EnableXRay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *bool { return v.EnableXRay }).(pulumi.BoolPtrOutput)
}

// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationOutput) ExcludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []string { return v.ExcludedPages }).(pulumi.StringArrayOutput)
}

// A list of pages in the RUM console that are to be displayed with a favorite icon.
func (o AppMonitorConfigurationOutput) FavoritePages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []string { return v.FavoritePages }).(pulumi.StringArrayOutput)
}

// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationOutput) GuestRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *string { return v.GuestRoleArn }).(pulumi.StringPtrOutput)
}

// The ID of the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationOutput) IdentityPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *string { return v.IdentityPoolId }).(pulumi.StringPtrOutput)
}

// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationOutput) IncludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []string { return v.IncludedPages }).(pulumi.StringArrayOutput)
}

// An array of structures which define the destinations and the metrics that you want to send.
func (o AppMonitorConfigurationOutput) MetricDestinations() AppMonitorMetricDestinationArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []AppMonitorMetricDestination { return v.MetricDestinations }).(AppMonitorMetricDestinationArrayOutput)
}

// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
func (o AppMonitorConfigurationOutput) SessionSampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) *float64 { return v.SessionSampleRate }).(pulumi.Float64PtrOutput)
}

// An array that lists the types of telemetry data that this app monitor is to collect.
func (o AppMonitorConfigurationOutput) Telemetries() AppMonitorTelemetryArrayOutput {
	return o.ApplyT(func(v AppMonitorConfiguration) []AppMonitorTelemetry { return v.Telemetries }).(AppMonitorTelemetryArrayOutput)
}

type AppMonitorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AppMonitorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitorConfiguration)(nil)).Elem()
}

func (o AppMonitorConfigurationPtrOutput) ToAppMonitorConfigurationPtrOutput() AppMonitorConfigurationPtrOutput {
	return o
}

func (o AppMonitorConfigurationPtrOutput) ToAppMonitorConfigurationPtrOutputWithContext(ctx context.Context) AppMonitorConfigurationPtrOutput {
	return o
}

func (o AppMonitorConfigurationPtrOutput) Elem() AppMonitorConfigurationOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) AppMonitorConfiguration {
		if v != nil {
			return *v
		}
		var ret AppMonitorConfiguration
		return ret
	}).(AppMonitorConfigurationOutput)
}

// If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
func (o AppMonitorConfigurationPtrOutput) AllowCookies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCookies
	}).(pulumi.BoolPtrOutput)
}

// If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
func (o AppMonitorConfigurationPtrOutput) EnableXRay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableXRay
	}).(pulumi.BoolPtrOutput)
}

// A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationPtrOutput) ExcludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPages
	}).(pulumi.StringArrayOutput)
}

// A list of pages in the RUM console that are to be displayed with a favorite icon.
func (o AppMonitorConfigurationPtrOutput) FavoritePages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.FavoritePages
	}).(pulumi.StringArrayOutput)
}

// The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationPtrOutput) GuestRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.GuestRoleArn
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity pool that is used to authorize the sending of data to RUM.
func (o AppMonitorConfigurationPtrOutput) IdentityPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.IdentityPoolId
	}).(pulumi.StringPtrOutput)
}

// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
func (o AppMonitorConfigurationPtrOutput) IncludedPages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.IncludedPages
	}).(pulumi.StringArrayOutput)
}

// An array of structures which define the destinations and the metrics that you want to send.
func (o AppMonitorConfigurationPtrOutput) MetricDestinations() AppMonitorMetricDestinationArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []AppMonitorMetricDestination {
		if v == nil {
			return nil
		}
		return v.MetricDestinations
	}).(AppMonitorMetricDestinationArrayOutput)
}

// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
func (o AppMonitorConfigurationPtrOutput) SessionSampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.SessionSampleRate
	}).(pulumi.Float64PtrOutput)
}

// An array that lists the types of telemetry data that this app monitor is to collect.
func (o AppMonitorConfigurationPtrOutput) Telemetries() AppMonitorTelemetryArrayOutput {
	return o.ApplyT(func(v *AppMonitorConfiguration) []AppMonitorTelemetry {
		if v == nil {
			return nil
		}
		return v.Telemetries
	}).(AppMonitorTelemetryArrayOutput)
}

// AppMonitor custom events configuration
type AppMonitorCustomEvents struct {
	// Indicates whether AppMonitor accepts custom events.
	Status *AppMonitorCustomEventsStatus `pulumi:"status"`
}

// AppMonitorCustomEventsInput is an input type that accepts AppMonitorCustomEventsArgs and AppMonitorCustomEventsOutput values.
// You can construct a concrete instance of `AppMonitorCustomEventsInput` via:
//
//	AppMonitorCustomEventsArgs{...}
type AppMonitorCustomEventsInput interface {
	pulumi.Input

	ToAppMonitorCustomEventsOutput() AppMonitorCustomEventsOutput
	ToAppMonitorCustomEventsOutputWithContext(context.Context) AppMonitorCustomEventsOutput
}

// AppMonitor custom events configuration
type AppMonitorCustomEventsArgs struct {
	// Indicates whether AppMonitor accepts custom events.
	Status AppMonitorCustomEventsStatusPtrInput `pulumi:"status"`
}

func (AppMonitorCustomEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorCustomEvents)(nil)).Elem()
}

func (i AppMonitorCustomEventsArgs) ToAppMonitorCustomEventsOutput() AppMonitorCustomEventsOutput {
	return i.ToAppMonitorCustomEventsOutputWithContext(context.Background())
}

func (i AppMonitorCustomEventsArgs) ToAppMonitorCustomEventsOutputWithContext(ctx context.Context) AppMonitorCustomEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorCustomEventsOutput)
}

func (i AppMonitorCustomEventsArgs) ToAppMonitorCustomEventsPtrOutput() AppMonitorCustomEventsPtrOutput {
	return i.ToAppMonitorCustomEventsPtrOutputWithContext(context.Background())
}

func (i AppMonitorCustomEventsArgs) ToAppMonitorCustomEventsPtrOutputWithContext(ctx context.Context) AppMonitorCustomEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorCustomEventsOutput).ToAppMonitorCustomEventsPtrOutputWithContext(ctx)
}

// AppMonitorCustomEventsPtrInput is an input type that accepts AppMonitorCustomEventsArgs, AppMonitorCustomEventsPtr and AppMonitorCustomEventsPtrOutput values.
// You can construct a concrete instance of `AppMonitorCustomEventsPtrInput` via:
//
//	        AppMonitorCustomEventsArgs{...}
//
//	or:
//
//	        nil
type AppMonitorCustomEventsPtrInput interface {
	pulumi.Input

	ToAppMonitorCustomEventsPtrOutput() AppMonitorCustomEventsPtrOutput
	ToAppMonitorCustomEventsPtrOutputWithContext(context.Context) AppMonitorCustomEventsPtrOutput
}

type appMonitorCustomEventsPtrType AppMonitorCustomEventsArgs

func AppMonitorCustomEventsPtr(v *AppMonitorCustomEventsArgs) AppMonitorCustomEventsPtrInput {
	return (*appMonitorCustomEventsPtrType)(v)
}

func (*appMonitorCustomEventsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitorCustomEvents)(nil)).Elem()
}

func (i *appMonitorCustomEventsPtrType) ToAppMonitorCustomEventsPtrOutput() AppMonitorCustomEventsPtrOutput {
	return i.ToAppMonitorCustomEventsPtrOutputWithContext(context.Background())
}

func (i *appMonitorCustomEventsPtrType) ToAppMonitorCustomEventsPtrOutputWithContext(ctx context.Context) AppMonitorCustomEventsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorCustomEventsPtrOutput)
}

// AppMonitor custom events configuration
type AppMonitorCustomEventsOutput struct{ *pulumi.OutputState }

func (AppMonitorCustomEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorCustomEvents)(nil)).Elem()
}

func (o AppMonitorCustomEventsOutput) ToAppMonitorCustomEventsOutput() AppMonitorCustomEventsOutput {
	return o
}

func (o AppMonitorCustomEventsOutput) ToAppMonitorCustomEventsOutputWithContext(ctx context.Context) AppMonitorCustomEventsOutput {
	return o
}

func (o AppMonitorCustomEventsOutput) ToAppMonitorCustomEventsPtrOutput() AppMonitorCustomEventsPtrOutput {
	return o.ToAppMonitorCustomEventsPtrOutputWithContext(context.Background())
}

func (o AppMonitorCustomEventsOutput) ToAppMonitorCustomEventsPtrOutputWithContext(ctx context.Context) AppMonitorCustomEventsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppMonitorCustomEvents) *AppMonitorCustomEvents {
		return &v
	}).(AppMonitorCustomEventsPtrOutput)
}

// Indicates whether AppMonitor accepts custom events.
func (o AppMonitorCustomEventsOutput) Status() AppMonitorCustomEventsStatusPtrOutput {
	return o.ApplyT(func(v AppMonitorCustomEvents) *AppMonitorCustomEventsStatus { return v.Status }).(AppMonitorCustomEventsStatusPtrOutput)
}

type AppMonitorCustomEventsPtrOutput struct{ *pulumi.OutputState }

func (AppMonitorCustomEventsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitorCustomEvents)(nil)).Elem()
}

func (o AppMonitorCustomEventsPtrOutput) ToAppMonitorCustomEventsPtrOutput() AppMonitorCustomEventsPtrOutput {
	return o
}

func (o AppMonitorCustomEventsPtrOutput) ToAppMonitorCustomEventsPtrOutputWithContext(ctx context.Context) AppMonitorCustomEventsPtrOutput {
	return o
}

func (o AppMonitorCustomEventsPtrOutput) Elem() AppMonitorCustomEventsOutput {
	return o.ApplyT(func(v *AppMonitorCustomEvents) AppMonitorCustomEvents {
		if v != nil {
			return *v
		}
		var ret AppMonitorCustomEvents
		return ret
	}).(AppMonitorCustomEventsOutput)
}

// Indicates whether AppMonitor accepts custom events.
func (o AppMonitorCustomEventsPtrOutput) Status() AppMonitorCustomEventsStatusPtrOutput {
	return o.ApplyT(func(v *AppMonitorCustomEvents) *AppMonitorCustomEventsStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(AppMonitorCustomEventsStatusPtrOutput)
}

// A single metric definition
type AppMonitorMetricDefinition struct {
	// Use this field only if you are sending the metric to CloudWatch.
	//
	// This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. For extended metrics, valid values for the entries in this field are the following:
	//
	// "metadata.pageId": "PageId"
	//
	// "metadata.browserName": "BrowserName"
	//
	// "metadata.deviceType": "DeviceType"
	//
	// "metadata.osName": "OSName"
	//
	// "metadata.countryCode": "CountryCode"
	//
	// "event_details.fileType": "FileType"
	//
	// All dimensions listed in this field must also be included in EventPattern.
	DimensionKeys interface{} `pulumi:"dimensionKeys"`
	// The pattern that defines the metric, specified as a JSON object. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.
	//
	// When you define extended metrics, the metric definition is not valid if EventPattern is omitted.
	//
	// Example event patterns:
	//
	// '{ "event_type": ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], } }'
	//
	// '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Firefox" ] }, "event_details": { "duration": [{ "numeric": [ "<", 2000 ] }] } }'
	//
	// '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] }, "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ] }] } }'
	//
	// If the metrics destination' is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
	EventPattern *string `pulumi:"eventPattern"`
	// The name for the metric that is defined in this structure. For extended metrics, valid values are the following:
	//
	// PerformanceNavigationDuration
	//
	// PerformanceResourceDuration
	//
	// NavigationSatisfiedTransaction
	//
	// NavigationToleratedTransaction
	//
	// NavigationFrustratedTransaction
	//
	// WebVitalsCumulativeLayoutShift
	//
	// WebVitalsFirstInputDelay
	//
	// WebVitalsLargestContentfulPaint
	//
	// JsErrorCount
	//
	// HttpErrorCount
	//
	// SessionCount
	Name string `pulumi:"name"`
	// The namespace used by CloudWatch Metrics for the metric that is defined in this structure
	Namespace *string `pulumi:"namespace"`
	// The CloudWatch metric unit to use for this metric. If you omit this field, the metric is recorded with no unit.
	UnitLabel *string `pulumi:"unitLabel"`
	// The field within the event object that the metric value is sourced from.
	//
	// If you omit this field, a hardcoded value of 1 is pushed as the metric value. This is useful if you just want to count the number of events that the filter catches.
	//
	// If this metric is sent to Evidently, this field will be passed to Evidently raw and Evidently will handle data extraction from the event.
	ValueKey *string `pulumi:"valueKey"`
}

// AppMonitorMetricDefinitionInput is an input type that accepts AppMonitorMetricDefinitionArgs and AppMonitorMetricDefinitionOutput values.
// You can construct a concrete instance of `AppMonitorMetricDefinitionInput` via:
//
//	AppMonitorMetricDefinitionArgs{...}
type AppMonitorMetricDefinitionInput interface {
	pulumi.Input

	ToAppMonitorMetricDefinitionOutput() AppMonitorMetricDefinitionOutput
	ToAppMonitorMetricDefinitionOutputWithContext(context.Context) AppMonitorMetricDefinitionOutput
}

// A single metric definition
type AppMonitorMetricDefinitionArgs struct {
	// Use this field only if you are sending the metric to CloudWatch.
	//
	// This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. For extended metrics, valid values for the entries in this field are the following:
	//
	// "metadata.pageId": "PageId"
	//
	// "metadata.browserName": "BrowserName"
	//
	// "metadata.deviceType": "DeviceType"
	//
	// "metadata.osName": "OSName"
	//
	// "metadata.countryCode": "CountryCode"
	//
	// "event_details.fileType": "FileType"
	//
	// All dimensions listed in this field must also be included in EventPattern.
	DimensionKeys pulumi.Input `pulumi:"dimensionKeys"`
	// The pattern that defines the metric, specified as a JSON object. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.
	//
	// When you define extended metrics, the metric definition is not valid if EventPattern is omitted.
	//
	// Example event patterns:
	//
	// '{ "event_type": ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], } }'
	//
	// '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Firefox" ] }, "event_details": { "duration": [{ "numeric": [ "<", 2000 ] }] } }'
	//
	// '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] }, "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ] }] } }'
	//
	// If the metrics destination' is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
	EventPattern pulumi.StringPtrInput `pulumi:"eventPattern"`
	// The name for the metric that is defined in this structure. For extended metrics, valid values are the following:
	//
	// PerformanceNavigationDuration
	//
	// PerformanceResourceDuration
	//
	// NavigationSatisfiedTransaction
	//
	// NavigationToleratedTransaction
	//
	// NavigationFrustratedTransaction
	//
	// WebVitalsCumulativeLayoutShift
	//
	// WebVitalsFirstInputDelay
	//
	// WebVitalsLargestContentfulPaint
	//
	// JsErrorCount
	//
	// HttpErrorCount
	//
	// SessionCount
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace used by CloudWatch Metrics for the metric that is defined in this structure
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The CloudWatch metric unit to use for this metric. If you omit this field, the metric is recorded with no unit.
	UnitLabel pulumi.StringPtrInput `pulumi:"unitLabel"`
	// The field within the event object that the metric value is sourced from.
	//
	// If you omit this field, a hardcoded value of 1 is pushed as the metric value. This is useful if you just want to count the number of events that the filter catches.
	//
	// If this metric is sent to Evidently, this field will be passed to Evidently raw and Evidently will handle data extraction from the event.
	ValueKey pulumi.StringPtrInput `pulumi:"valueKey"`
}

func (AppMonitorMetricDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorMetricDefinition)(nil)).Elem()
}

func (i AppMonitorMetricDefinitionArgs) ToAppMonitorMetricDefinitionOutput() AppMonitorMetricDefinitionOutput {
	return i.ToAppMonitorMetricDefinitionOutputWithContext(context.Background())
}

func (i AppMonitorMetricDefinitionArgs) ToAppMonitorMetricDefinitionOutputWithContext(ctx context.Context) AppMonitorMetricDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorMetricDefinitionOutput)
}

// AppMonitorMetricDefinitionArrayInput is an input type that accepts AppMonitorMetricDefinitionArray and AppMonitorMetricDefinitionArrayOutput values.
// You can construct a concrete instance of `AppMonitorMetricDefinitionArrayInput` via:
//
//	AppMonitorMetricDefinitionArray{ AppMonitorMetricDefinitionArgs{...} }
type AppMonitorMetricDefinitionArrayInput interface {
	pulumi.Input

	ToAppMonitorMetricDefinitionArrayOutput() AppMonitorMetricDefinitionArrayOutput
	ToAppMonitorMetricDefinitionArrayOutputWithContext(context.Context) AppMonitorMetricDefinitionArrayOutput
}

type AppMonitorMetricDefinitionArray []AppMonitorMetricDefinitionInput

func (AppMonitorMetricDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorMetricDefinition)(nil)).Elem()
}

func (i AppMonitorMetricDefinitionArray) ToAppMonitorMetricDefinitionArrayOutput() AppMonitorMetricDefinitionArrayOutput {
	return i.ToAppMonitorMetricDefinitionArrayOutputWithContext(context.Background())
}

func (i AppMonitorMetricDefinitionArray) ToAppMonitorMetricDefinitionArrayOutputWithContext(ctx context.Context) AppMonitorMetricDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorMetricDefinitionArrayOutput)
}

// A single metric definition
type AppMonitorMetricDefinitionOutput struct{ *pulumi.OutputState }

func (AppMonitorMetricDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorMetricDefinition)(nil)).Elem()
}

func (o AppMonitorMetricDefinitionOutput) ToAppMonitorMetricDefinitionOutput() AppMonitorMetricDefinitionOutput {
	return o
}

func (o AppMonitorMetricDefinitionOutput) ToAppMonitorMetricDefinitionOutputWithContext(ctx context.Context) AppMonitorMetricDefinitionOutput {
	return o
}

// Use this field only if you are sending the metric to CloudWatch.
//
// This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. For extended metrics, valid values for the entries in this field are the following:
//
// "metadata.pageId": "PageId"
//
// "metadata.browserName": "BrowserName"
//
// "metadata.deviceType": "DeviceType"
//
// "metadata.osName": "OSName"
//
// "metadata.countryCode": "CountryCode"
//
// "event_details.fileType": "FileType"
//
// All dimensions listed in this field must also be included in EventPattern.
func (o AppMonitorMetricDefinitionOutput) DimensionKeys() pulumi.AnyOutput {
	return o.ApplyT(func(v AppMonitorMetricDefinition) interface{} { return v.DimensionKeys }).(pulumi.AnyOutput)
}

// The pattern that defines the metric, specified as a JSON object. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.
//
// When you define extended metrics, the metric definition is not valid if EventPattern is omitted.
//
// Example event patterns:
//
// '{ "event_type": ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], } }'
//
// '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Firefox" ] }, "event_details": { "duration": [{ "numeric": [ "<", 2000 ] }] } }'
//
// '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] }, "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ] }] } }'
//
// If the metrics destination' is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
func (o AppMonitorMetricDefinitionOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorMetricDefinition) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

// The name for the metric that is defined in this structure. For extended metrics, valid values are the following:
//
// # PerformanceNavigationDuration
//
// # PerformanceResourceDuration
//
// # NavigationSatisfiedTransaction
//
// # NavigationToleratedTransaction
//
// # NavigationFrustratedTransaction
//
// # WebVitalsCumulativeLayoutShift
//
// # WebVitalsFirstInputDelay
//
// # WebVitalsLargestContentfulPaint
//
// # JsErrorCount
//
// # HttpErrorCount
//
// SessionCount
func (o AppMonitorMetricDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppMonitorMetricDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace used by CloudWatch Metrics for the metric that is defined in this structure
func (o AppMonitorMetricDefinitionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorMetricDefinition) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The CloudWatch metric unit to use for this metric. If you omit this field, the metric is recorded with no unit.
func (o AppMonitorMetricDefinitionOutput) UnitLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorMetricDefinition) *string { return v.UnitLabel }).(pulumi.StringPtrOutput)
}

// The field within the event object that the metric value is sourced from.
//
// If you omit this field, a hardcoded value of 1 is pushed as the metric value. This is useful if you just want to count the number of events that the filter catches.
//
// If this metric is sent to Evidently, this field will be passed to Evidently raw and Evidently will handle data extraction from the event.
func (o AppMonitorMetricDefinitionOutput) ValueKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorMetricDefinition) *string { return v.ValueKey }).(pulumi.StringPtrOutput)
}

type AppMonitorMetricDefinitionArrayOutput struct{ *pulumi.OutputState }

func (AppMonitorMetricDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorMetricDefinition)(nil)).Elem()
}

func (o AppMonitorMetricDefinitionArrayOutput) ToAppMonitorMetricDefinitionArrayOutput() AppMonitorMetricDefinitionArrayOutput {
	return o
}

func (o AppMonitorMetricDefinitionArrayOutput) ToAppMonitorMetricDefinitionArrayOutputWithContext(ctx context.Context) AppMonitorMetricDefinitionArrayOutput {
	return o
}

func (o AppMonitorMetricDefinitionArrayOutput) Index(i pulumi.IntInput) AppMonitorMetricDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppMonitorMetricDefinition {
		return vs[0].([]AppMonitorMetricDefinition)[vs[1].(int)]
	}).(AppMonitorMetricDefinitionOutput)
}

// An structure which defines the destination and the metrics that you want to send.
type AppMonitorMetricDestination struct {
	// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the Evidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination AppMonitorMetricDestinationDestination `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn *string `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	//
	// This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
	IamRoleArn *string `pulumi:"iamRoleArn"`
	// An array of structures which define the metrics that you want to send.
	MetricDefinitions []AppMonitorMetricDefinition `pulumi:"metricDefinitions"`
}

// AppMonitorMetricDestinationInput is an input type that accepts AppMonitorMetricDestinationArgs and AppMonitorMetricDestinationOutput values.
// You can construct a concrete instance of `AppMonitorMetricDestinationInput` via:
//
//	AppMonitorMetricDestinationArgs{...}
type AppMonitorMetricDestinationInput interface {
	pulumi.Input

	ToAppMonitorMetricDestinationOutput() AppMonitorMetricDestinationOutput
	ToAppMonitorMetricDestinationOutputWithContext(context.Context) AppMonitorMetricDestinationOutput
}

// An structure which defines the destination and the metrics that you want to send.
type AppMonitorMetricDestinationArgs struct {
	// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the Evidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
	Destination AppMonitorMetricDestinationDestinationInput `pulumi:"destination"`
	// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
	DestinationArn pulumi.StringPtrInput `pulumi:"destinationArn"`
	// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
	//
	// This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
	IamRoleArn pulumi.StringPtrInput `pulumi:"iamRoleArn"`
	// An array of structures which define the metrics that you want to send.
	MetricDefinitions AppMonitorMetricDefinitionArrayInput `pulumi:"metricDefinitions"`
}

func (AppMonitorMetricDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorMetricDestination)(nil)).Elem()
}

func (i AppMonitorMetricDestinationArgs) ToAppMonitorMetricDestinationOutput() AppMonitorMetricDestinationOutput {
	return i.ToAppMonitorMetricDestinationOutputWithContext(context.Background())
}

func (i AppMonitorMetricDestinationArgs) ToAppMonitorMetricDestinationOutputWithContext(ctx context.Context) AppMonitorMetricDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorMetricDestinationOutput)
}

// AppMonitorMetricDestinationArrayInput is an input type that accepts AppMonitorMetricDestinationArray and AppMonitorMetricDestinationArrayOutput values.
// You can construct a concrete instance of `AppMonitorMetricDestinationArrayInput` via:
//
//	AppMonitorMetricDestinationArray{ AppMonitorMetricDestinationArgs{...} }
type AppMonitorMetricDestinationArrayInput interface {
	pulumi.Input

	ToAppMonitorMetricDestinationArrayOutput() AppMonitorMetricDestinationArrayOutput
	ToAppMonitorMetricDestinationArrayOutputWithContext(context.Context) AppMonitorMetricDestinationArrayOutput
}

type AppMonitorMetricDestinationArray []AppMonitorMetricDestinationInput

func (AppMonitorMetricDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorMetricDestination)(nil)).Elem()
}

func (i AppMonitorMetricDestinationArray) ToAppMonitorMetricDestinationArrayOutput() AppMonitorMetricDestinationArrayOutput {
	return i.ToAppMonitorMetricDestinationArrayOutputWithContext(context.Background())
}

func (i AppMonitorMetricDestinationArray) ToAppMonitorMetricDestinationArrayOutputWithContext(ctx context.Context) AppMonitorMetricDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorMetricDestinationArrayOutput)
}

// An structure which defines the destination and the metrics that you want to send.
type AppMonitorMetricDestinationOutput struct{ *pulumi.OutputState }

func (AppMonitorMetricDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorMetricDestination)(nil)).Elem()
}

func (o AppMonitorMetricDestinationOutput) ToAppMonitorMetricDestinationOutput() AppMonitorMetricDestinationOutput {
	return o
}

func (o AppMonitorMetricDestinationOutput) ToAppMonitorMetricDestinationOutputWithContext(ctx context.Context) AppMonitorMetricDestinationOutput {
	return o
}

// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the Evidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
func (o AppMonitorMetricDestinationOutput) Destination() AppMonitorMetricDestinationDestinationOutput {
	return o.ApplyT(func(v AppMonitorMetricDestination) AppMonitorMetricDestinationDestination { return v.Destination }).(AppMonitorMetricDestinationDestinationOutput)
}

// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
func (o AppMonitorMetricDestinationOutput) DestinationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorMetricDestination) *string { return v.DestinationArn }).(pulumi.StringPtrOutput)
}

// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
//
// This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
func (o AppMonitorMetricDestinationOutput) IamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppMonitorMetricDestination) *string { return v.IamRoleArn }).(pulumi.StringPtrOutput)
}

// An array of structures which define the metrics that you want to send.
func (o AppMonitorMetricDestinationOutput) MetricDefinitions() AppMonitorMetricDefinitionArrayOutput {
	return o.ApplyT(func(v AppMonitorMetricDestination) []AppMonitorMetricDefinition { return v.MetricDefinitions }).(AppMonitorMetricDefinitionArrayOutput)
}

type AppMonitorMetricDestinationArrayOutput struct{ *pulumi.OutputState }

func (AppMonitorMetricDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorMetricDestination)(nil)).Elem()
}

func (o AppMonitorMetricDestinationArrayOutput) ToAppMonitorMetricDestinationArrayOutput() AppMonitorMetricDestinationArrayOutput {
	return o
}

func (o AppMonitorMetricDestinationArrayOutput) ToAppMonitorMetricDestinationArrayOutputWithContext(ctx context.Context) AppMonitorMetricDestinationArrayOutput {
	return o
}

func (o AppMonitorMetricDestinationArrayOutput) Index(i pulumi.IntInput) AppMonitorMetricDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppMonitorMetricDestination {
		return vs[0].([]AppMonitorMetricDestination)[vs[1].(int)]
	}).(AppMonitorMetricDestinationOutput)
}

// A key-value pair to associate with a resource.
type AppMonitorTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// AppMonitorTagInput is an input type that accepts AppMonitorTagArgs and AppMonitorTagOutput values.
// You can construct a concrete instance of `AppMonitorTagInput` via:
//
//	AppMonitorTagArgs{...}
type AppMonitorTagInput interface {
	pulumi.Input

	ToAppMonitorTagOutput() AppMonitorTagOutput
	ToAppMonitorTagOutputWithContext(context.Context) AppMonitorTagOutput
}

// A key-value pair to associate with a resource.
type AppMonitorTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AppMonitorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorTag)(nil)).Elem()
}

func (i AppMonitorTagArgs) ToAppMonitorTagOutput() AppMonitorTagOutput {
	return i.ToAppMonitorTagOutputWithContext(context.Background())
}

func (i AppMonitorTagArgs) ToAppMonitorTagOutputWithContext(ctx context.Context) AppMonitorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorTagOutput)
}

// AppMonitorTagArrayInput is an input type that accepts AppMonitorTagArray and AppMonitorTagArrayOutput values.
// You can construct a concrete instance of `AppMonitorTagArrayInput` via:
//
//	AppMonitorTagArray{ AppMonitorTagArgs{...} }
type AppMonitorTagArrayInput interface {
	pulumi.Input

	ToAppMonitorTagArrayOutput() AppMonitorTagArrayOutput
	ToAppMonitorTagArrayOutputWithContext(context.Context) AppMonitorTagArrayOutput
}

type AppMonitorTagArray []AppMonitorTagInput

func (AppMonitorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorTag)(nil)).Elem()
}

func (i AppMonitorTagArray) ToAppMonitorTagArrayOutput() AppMonitorTagArrayOutput {
	return i.ToAppMonitorTagArrayOutputWithContext(context.Background())
}

func (i AppMonitorTagArray) ToAppMonitorTagArrayOutputWithContext(ctx context.Context) AppMonitorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitorTagArrayOutput)
}

// A key-value pair to associate with a resource.
type AppMonitorTagOutput struct{ *pulumi.OutputState }

func (AppMonitorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppMonitorTag)(nil)).Elem()
}

func (o AppMonitorTagOutput) ToAppMonitorTagOutput() AppMonitorTagOutput {
	return o
}

func (o AppMonitorTagOutput) ToAppMonitorTagOutputWithContext(ctx context.Context) AppMonitorTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AppMonitorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AppMonitorTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AppMonitorTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AppMonitorTag) string { return v.Value }).(pulumi.StringOutput)
}

type AppMonitorTagArrayOutput struct{ *pulumi.OutputState }

func (AppMonitorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppMonitorTag)(nil)).Elem()
}

func (o AppMonitorTagArrayOutput) ToAppMonitorTagArrayOutput() AppMonitorTagArrayOutput {
	return o
}

func (o AppMonitorTagArrayOutput) ToAppMonitorTagArrayOutputWithContext(ctx context.Context) AppMonitorTagArrayOutput {
	return o
}

func (o AppMonitorTagArrayOutput) Index(i pulumi.IntInput) AppMonitorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppMonitorTag {
		return vs[0].([]AppMonitorTag)[vs[1].(int)]
	}).(AppMonitorTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorConfigurationInput)(nil)).Elem(), AppMonitorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorConfigurationPtrInput)(nil)).Elem(), AppMonitorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorCustomEventsInput)(nil)).Elem(), AppMonitorCustomEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorCustomEventsPtrInput)(nil)).Elem(), AppMonitorCustomEventsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorMetricDefinitionInput)(nil)).Elem(), AppMonitorMetricDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorMetricDefinitionArrayInput)(nil)).Elem(), AppMonitorMetricDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorMetricDestinationInput)(nil)).Elem(), AppMonitorMetricDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorMetricDestinationArrayInput)(nil)).Elem(), AppMonitorMetricDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorTagInput)(nil)).Elem(), AppMonitorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitorTagArrayInput)(nil)).Elem(), AppMonitorTagArray{})
	pulumi.RegisterOutputType(AppMonitorConfigurationOutput{})
	pulumi.RegisterOutputType(AppMonitorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AppMonitorCustomEventsOutput{})
	pulumi.RegisterOutputType(AppMonitorCustomEventsPtrOutput{})
	pulumi.RegisterOutputType(AppMonitorMetricDefinitionOutput{})
	pulumi.RegisterOutputType(AppMonitorMetricDefinitionArrayOutput{})
	pulumi.RegisterOutputType(AppMonitorMetricDestinationOutput{})
	pulumi.RegisterOutputType(AppMonitorMetricDestinationArrayOutput{})
	pulumi.RegisterOutputType(AppMonitorTagOutput{})
	pulumi.RegisterOutputType(AppMonitorTagArrayOutput{})
}
