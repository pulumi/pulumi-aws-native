// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databrew

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataBrew::Ruleset.
type Ruleset struct {
	pulumi.CustomResourceState

	// Description of the Ruleset
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the Ruleset
	Name pulumi.StringOutput `pulumi:"name"`
	// List of the data quality rules in the ruleset
	Rules RulesetRuleArrayOutput `pulumi:"rules"`
	Tags  RulesetTagArrayOutput  `pulumi:"tags"`
	// Arn of the target resource (dataset) to apply the ruleset to
	TargetArn pulumi.StringOutput `pulumi:"targetArn"`
}

// NewRuleset registers a new resource with the given unique name, arguments, and options.
func NewRuleset(ctx *pulumi.Context,
	name string, args *RulesetArgs, opts ...pulumi.ResourceOption) (*Ruleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	var resource Ruleset
	err := ctx.RegisterResource("aws-native:databrew:Ruleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleset gets an existing Ruleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RulesetState, opts ...pulumi.ResourceOption) (*Ruleset, error) {
	var resource Ruleset
	err := ctx.ReadResource("aws-native:databrew:Ruleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ruleset resources.
type rulesetState struct {
}

type RulesetState struct {
}

func (RulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*rulesetState)(nil)).Elem()
}

type rulesetArgs struct {
	// Description of the Ruleset
	Description *string `pulumi:"description"`
	// Name of the Ruleset
	Name *string `pulumi:"name"`
	// List of the data quality rules in the ruleset
	Rules []RulesetRule `pulumi:"rules"`
	Tags  []RulesetTag  `pulumi:"tags"`
	// Arn of the target resource (dataset) to apply the ruleset to
	TargetArn string `pulumi:"targetArn"`
}

// The set of arguments for constructing a Ruleset resource.
type RulesetArgs struct {
	// Description of the Ruleset
	Description pulumi.StringPtrInput
	// Name of the Ruleset
	Name pulumi.StringPtrInput
	// List of the data quality rules in the ruleset
	Rules RulesetRuleArrayInput
	Tags  RulesetTagArrayInput
	// Arn of the target resource (dataset) to apply the ruleset to
	TargetArn pulumi.StringInput
}

func (RulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rulesetArgs)(nil)).Elem()
}

type RulesetInput interface {
	pulumi.Input

	ToRulesetOutput() RulesetOutput
	ToRulesetOutputWithContext(ctx context.Context) RulesetOutput
}

func (*Ruleset) ElementType() reflect.Type {
	return reflect.TypeOf((*Ruleset)(nil))
}

func (i *Ruleset) ToRulesetOutput() RulesetOutput {
	return i.ToRulesetOutputWithContext(context.Background())
}

func (i *Ruleset) ToRulesetOutputWithContext(ctx context.Context) RulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetOutput)
}

type RulesetOutput struct{ *pulumi.OutputState }

func (RulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ruleset)(nil))
}

func (o RulesetOutput) ToRulesetOutput() RulesetOutput {
	return o
}

func (o RulesetOutput) ToRulesetOutputWithContext(ctx context.Context) RulesetOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetInput)(nil)).Elem(), &Ruleset{})
	pulumi.RegisterOutputType(RulesetOutput{})
}
