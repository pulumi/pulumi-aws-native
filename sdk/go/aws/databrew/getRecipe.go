// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databrew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataBrew::Recipe.
func LookupRecipe(ctx *pulumi.Context, args *LookupRecipeArgs, opts ...pulumi.InvokeOption) (*LookupRecipeResult, error) {
	var rv LookupRecipeResult
	err := ctx.Invoke("aws-native:databrew:getRecipe", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRecipeArgs struct {
	// Recipe name
	Name string `pulumi:"name"`
}

type LookupRecipeResult struct {
	// Description of the recipe
	Description *string      `pulumi:"description"`
	Steps       []RecipeStep `pulumi:"steps"`
}

func LookupRecipeOutput(ctx *pulumi.Context, args LookupRecipeOutputArgs, opts ...pulumi.InvokeOption) LookupRecipeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRecipeResult, error) {
			args := v.(LookupRecipeArgs)
			r, err := LookupRecipe(ctx, &args, opts...)
			var s LookupRecipeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRecipeResultOutput)
}

type LookupRecipeOutputArgs struct {
	// Recipe name
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRecipeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRecipeArgs)(nil)).Elem()
}

type LookupRecipeResultOutput struct{ *pulumi.OutputState }

func (LookupRecipeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRecipeResult)(nil)).Elem()
}

func (o LookupRecipeResultOutput) ToLookupRecipeResultOutput() LookupRecipeResultOutput {
	return o
}

func (o LookupRecipeResultOutput) ToLookupRecipeResultOutputWithContext(ctx context.Context) LookupRecipeResultOutput {
	return o
}

// Description of the recipe
func (o LookupRecipeResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecipeResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupRecipeResultOutput) Steps() RecipeStepArrayOutput {
	return o.ApplyT(func(v LookupRecipeResult) []RecipeStep { return v.Steps }).(RecipeStepArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRecipeResultOutput{})
}
