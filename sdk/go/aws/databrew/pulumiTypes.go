// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databrew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Csv options
type DatasetCsvOptions struct {
	Delimiter *string `pulumi:"delimiter"`
	HeaderRow *bool   `pulumi:"headerRow"`
}

// DatasetCsvOptionsInput is an input type that accepts DatasetCsvOptionsArgs and DatasetCsvOptionsOutput values.
// You can construct a concrete instance of `DatasetCsvOptionsInput` via:
//
//          DatasetCsvOptionsArgs{...}
type DatasetCsvOptionsInput interface {
	pulumi.Input

	ToDatasetCsvOptionsOutput() DatasetCsvOptionsOutput
	ToDatasetCsvOptionsOutputWithContext(context.Context) DatasetCsvOptionsOutput
}

// Csv options
type DatasetCsvOptionsArgs struct {
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	HeaderRow pulumi.BoolPtrInput   `pulumi:"headerRow"`
}

func (DatasetCsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCsvOptions)(nil)).Elem()
}

func (i DatasetCsvOptionsArgs) ToDatasetCsvOptionsOutput() DatasetCsvOptionsOutput {
	return i.ToDatasetCsvOptionsOutputWithContext(context.Background())
}

func (i DatasetCsvOptionsArgs) ToDatasetCsvOptionsOutputWithContext(ctx context.Context) DatasetCsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCsvOptionsOutput)
}

func (i DatasetCsvOptionsArgs) ToDatasetCsvOptionsPtrOutput() DatasetCsvOptionsPtrOutput {
	return i.ToDatasetCsvOptionsPtrOutputWithContext(context.Background())
}

func (i DatasetCsvOptionsArgs) ToDatasetCsvOptionsPtrOutputWithContext(ctx context.Context) DatasetCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCsvOptionsOutput).ToDatasetCsvOptionsPtrOutputWithContext(ctx)
}

// DatasetCsvOptionsPtrInput is an input type that accepts DatasetCsvOptionsArgs, DatasetCsvOptionsPtr and DatasetCsvOptionsPtrOutput values.
// You can construct a concrete instance of `DatasetCsvOptionsPtrInput` via:
//
//          DatasetCsvOptionsArgs{...}
//
//  or:
//
//          nil
type DatasetCsvOptionsPtrInput interface {
	pulumi.Input

	ToDatasetCsvOptionsPtrOutput() DatasetCsvOptionsPtrOutput
	ToDatasetCsvOptionsPtrOutputWithContext(context.Context) DatasetCsvOptionsPtrOutput
}

type datasetCsvOptionsPtrType DatasetCsvOptionsArgs

func DatasetCsvOptionsPtr(v *DatasetCsvOptionsArgs) DatasetCsvOptionsPtrInput {
	return (*datasetCsvOptionsPtrType)(v)
}

func (*datasetCsvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCsvOptions)(nil)).Elem()
}

func (i *datasetCsvOptionsPtrType) ToDatasetCsvOptionsPtrOutput() DatasetCsvOptionsPtrOutput {
	return i.ToDatasetCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *datasetCsvOptionsPtrType) ToDatasetCsvOptionsPtrOutputWithContext(ctx context.Context) DatasetCsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCsvOptionsPtrOutput)
}

// Csv options
type DatasetCsvOptionsOutput struct{ *pulumi.OutputState }

func (DatasetCsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCsvOptions)(nil)).Elem()
}

func (o DatasetCsvOptionsOutput) ToDatasetCsvOptionsOutput() DatasetCsvOptionsOutput {
	return o
}

func (o DatasetCsvOptionsOutput) ToDatasetCsvOptionsOutputWithContext(ctx context.Context) DatasetCsvOptionsOutput {
	return o
}

func (o DatasetCsvOptionsOutput) ToDatasetCsvOptionsPtrOutput() DatasetCsvOptionsPtrOutput {
	return o.ToDatasetCsvOptionsPtrOutputWithContext(context.Background())
}

func (o DatasetCsvOptionsOutput) ToDatasetCsvOptionsPtrOutputWithContext(ctx context.Context) DatasetCsvOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCsvOptions) *DatasetCsvOptions {
		return &v
	}).(DatasetCsvOptionsPtrOutput)
}

func (o DatasetCsvOptionsOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCsvOptions) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

func (o DatasetCsvOptionsOutput) HeaderRow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetCsvOptions) *bool { return v.HeaderRow }).(pulumi.BoolPtrOutput)
}

type DatasetCsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (DatasetCsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCsvOptions)(nil)).Elem()
}

func (o DatasetCsvOptionsPtrOutput) ToDatasetCsvOptionsPtrOutput() DatasetCsvOptionsPtrOutput {
	return o
}

func (o DatasetCsvOptionsPtrOutput) ToDatasetCsvOptionsPtrOutputWithContext(ctx context.Context) DatasetCsvOptionsPtrOutput {
	return o
}

func (o DatasetCsvOptionsPtrOutput) Elem() DatasetCsvOptionsOutput {
	return o.ApplyT(func(v *DatasetCsvOptions) DatasetCsvOptions {
		if v != nil {
			return *v
		}
		var ret DatasetCsvOptions
		return ret
	}).(DatasetCsvOptionsOutput)
}

func (o DatasetCsvOptionsPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

func (o DatasetCsvOptionsPtrOutput) HeaderRow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetCsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.HeaderRow
	}).(pulumi.BoolPtrOutput)
}

type DatasetDataCatalogInputDefinition struct {
	// Catalog id
	CatalogId *string `pulumi:"catalogId"`
	// Database name
	DatabaseName *string `pulumi:"databaseName"`
	// Table name
	TableName     *string            `pulumi:"tableName"`
	TempDirectory *DatasetS3Location `pulumi:"tempDirectory"`
}

// DatasetDataCatalogInputDefinitionInput is an input type that accepts DatasetDataCatalogInputDefinitionArgs and DatasetDataCatalogInputDefinitionOutput values.
// You can construct a concrete instance of `DatasetDataCatalogInputDefinitionInput` via:
//
//          DatasetDataCatalogInputDefinitionArgs{...}
type DatasetDataCatalogInputDefinitionInput interface {
	pulumi.Input

	ToDatasetDataCatalogInputDefinitionOutput() DatasetDataCatalogInputDefinitionOutput
	ToDatasetDataCatalogInputDefinitionOutputWithContext(context.Context) DatasetDataCatalogInputDefinitionOutput
}

type DatasetDataCatalogInputDefinitionArgs struct {
	// Catalog id
	CatalogId pulumi.StringPtrInput `pulumi:"catalogId"`
	// Database name
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Table name
	TableName     pulumi.StringPtrInput     `pulumi:"tableName"`
	TempDirectory DatasetS3LocationPtrInput `pulumi:"tempDirectory"`
}

func (DatasetDataCatalogInputDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDataCatalogInputDefinition)(nil)).Elem()
}

func (i DatasetDataCatalogInputDefinitionArgs) ToDatasetDataCatalogInputDefinitionOutput() DatasetDataCatalogInputDefinitionOutput {
	return i.ToDatasetDataCatalogInputDefinitionOutputWithContext(context.Background())
}

func (i DatasetDataCatalogInputDefinitionArgs) ToDatasetDataCatalogInputDefinitionOutputWithContext(ctx context.Context) DatasetDataCatalogInputDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataCatalogInputDefinitionOutput)
}

func (i DatasetDataCatalogInputDefinitionArgs) ToDatasetDataCatalogInputDefinitionPtrOutput() DatasetDataCatalogInputDefinitionPtrOutput {
	return i.ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(context.Background())
}

func (i DatasetDataCatalogInputDefinitionArgs) ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDataCatalogInputDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataCatalogInputDefinitionOutput).ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(ctx)
}

// DatasetDataCatalogInputDefinitionPtrInput is an input type that accepts DatasetDataCatalogInputDefinitionArgs, DatasetDataCatalogInputDefinitionPtr and DatasetDataCatalogInputDefinitionPtrOutput values.
// You can construct a concrete instance of `DatasetDataCatalogInputDefinitionPtrInput` via:
//
//          DatasetDataCatalogInputDefinitionArgs{...}
//
//  or:
//
//          nil
type DatasetDataCatalogInputDefinitionPtrInput interface {
	pulumi.Input

	ToDatasetDataCatalogInputDefinitionPtrOutput() DatasetDataCatalogInputDefinitionPtrOutput
	ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(context.Context) DatasetDataCatalogInputDefinitionPtrOutput
}

type datasetDataCatalogInputDefinitionPtrType DatasetDataCatalogInputDefinitionArgs

func DatasetDataCatalogInputDefinitionPtr(v *DatasetDataCatalogInputDefinitionArgs) DatasetDataCatalogInputDefinitionPtrInput {
	return (*datasetDataCatalogInputDefinitionPtrType)(v)
}

func (*datasetDataCatalogInputDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDataCatalogInputDefinition)(nil)).Elem()
}

func (i *datasetDataCatalogInputDefinitionPtrType) ToDatasetDataCatalogInputDefinitionPtrOutput() DatasetDataCatalogInputDefinitionPtrOutput {
	return i.ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(context.Background())
}

func (i *datasetDataCatalogInputDefinitionPtrType) ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDataCatalogInputDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataCatalogInputDefinitionPtrOutput)
}

type DatasetDataCatalogInputDefinitionOutput struct{ *pulumi.OutputState }

func (DatasetDataCatalogInputDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDataCatalogInputDefinition)(nil)).Elem()
}

func (o DatasetDataCatalogInputDefinitionOutput) ToDatasetDataCatalogInputDefinitionOutput() DatasetDataCatalogInputDefinitionOutput {
	return o
}

func (o DatasetDataCatalogInputDefinitionOutput) ToDatasetDataCatalogInputDefinitionOutputWithContext(ctx context.Context) DatasetDataCatalogInputDefinitionOutput {
	return o
}

func (o DatasetDataCatalogInputDefinitionOutput) ToDatasetDataCatalogInputDefinitionPtrOutput() DatasetDataCatalogInputDefinitionPtrOutput {
	return o.ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(context.Background())
}

func (o DatasetDataCatalogInputDefinitionOutput) ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDataCatalogInputDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetDataCatalogInputDefinition) *DatasetDataCatalogInputDefinition {
		return &v
	}).(DatasetDataCatalogInputDefinitionPtrOutput)
}

// Catalog id
func (o DatasetDataCatalogInputDefinitionOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataCatalogInputDefinition) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

// Database name
func (o DatasetDataCatalogInputDefinitionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataCatalogInputDefinition) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Table name
func (o DatasetDataCatalogInputDefinitionOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDataCatalogInputDefinition) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

func (o DatasetDataCatalogInputDefinitionOutput) TempDirectory() DatasetS3LocationPtrOutput {
	return o.ApplyT(func(v DatasetDataCatalogInputDefinition) *DatasetS3Location { return v.TempDirectory }).(DatasetS3LocationPtrOutput)
}

type DatasetDataCatalogInputDefinitionPtrOutput struct{ *pulumi.OutputState }

func (DatasetDataCatalogInputDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDataCatalogInputDefinition)(nil)).Elem()
}

func (o DatasetDataCatalogInputDefinitionPtrOutput) ToDatasetDataCatalogInputDefinitionPtrOutput() DatasetDataCatalogInputDefinitionPtrOutput {
	return o
}

func (o DatasetDataCatalogInputDefinitionPtrOutput) ToDatasetDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDataCatalogInputDefinitionPtrOutput {
	return o
}

func (o DatasetDataCatalogInputDefinitionPtrOutput) Elem() DatasetDataCatalogInputDefinitionOutput {
	return o.ApplyT(func(v *DatasetDataCatalogInputDefinition) DatasetDataCatalogInputDefinition {
		if v != nil {
			return *v
		}
		var ret DatasetDataCatalogInputDefinition
		return ret
	}).(DatasetDataCatalogInputDefinitionOutput)
}

// Catalog id
func (o DatasetDataCatalogInputDefinitionPtrOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataCatalogInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.CatalogId
	}).(pulumi.StringPtrOutput)
}

// Database name
func (o DatasetDataCatalogInputDefinitionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataCatalogInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Table name
func (o DatasetDataCatalogInputDefinitionPtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDataCatalogInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

func (o DatasetDataCatalogInputDefinitionPtrOutput) TempDirectory() DatasetS3LocationPtrOutput {
	return o.ApplyT(func(v *DatasetDataCatalogInputDefinition) *DatasetS3Location {
		if v == nil {
			return nil
		}
		return v.TempDirectory
	}).(DatasetS3LocationPtrOutput)
}

type DatasetDatabaseInputDefinition struct {
	// Database table name
	DatabaseTableName *string `pulumi:"databaseTableName"`
	// Glue connection name
	GlueConnectionName *string            `pulumi:"glueConnectionName"`
	TempDirectory      *DatasetS3Location `pulumi:"tempDirectory"`
}

// DatasetDatabaseInputDefinitionInput is an input type that accepts DatasetDatabaseInputDefinitionArgs and DatasetDatabaseInputDefinitionOutput values.
// You can construct a concrete instance of `DatasetDatabaseInputDefinitionInput` via:
//
//          DatasetDatabaseInputDefinitionArgs{...}
type DatasetDatabaseInputDefinitionInput interface {
	pulumi.Input

	ToDatasetDatabaseInputDefinitionOutput() DatasetDatabaseInputDefinitionOutput
	ToDatasetDatabaseInputDefinitionOutputWithContext(context.Context) DatasetDatabaseInputDefinitionOutput
}

type DatasetDatabaseInputDefinitionArgs struct {
	// Database table name
	DatabaseTableName pulumi.StringPtrInput `pulumi:"databaseTableName"`
	// Glue connection name
	GlueConnectionName pulumi.StringPtrInput     `pulumi:"glueConnectionName"`
	TempDirectory      DatasetS3LocationPtrInput `pulumi:"tempDirectory"`
}

func (DatasetDatabaseInputDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatabaseInputDefinition)(nil)).Elem()
}

func (i DatasetDatabaseInputDefinitionArgs) ToDatasetDatabaseInputDefinitionOutput() DatasetDatabaseInputDefinitionOutput {
	return i.ToDatasetDatabaseInputDefinitionOutputWithContext(context.Background())
}

func (i DatasetDatabaseInputDefinitionArgs) ToDatasetDatabaseInputDefinitionOutputWithContext(ctx context.Context) DatasetDatabaseInputDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatabaseInputDefinitionOutput)
}

func (i DatasetDatabaseInputDefinitionArgs) ToDatasetDatabaseInputDefinitionPtrOutput() DatasetDatabaseInputDefinitionPtrOutput {
	return i.ToDatasetDatabaseInputDefinitionPtrOutputWithContext(context.Background())
}

func (i DatasetDatabaseInputDefinitionArgs) ToDatasetDatabaseInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDatabaseInputDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatabaseInputDefinitionOutput).ToDatasetDatabaseInputDefinitionPtrOutputWithContext(ctx)
}

// DatasetDatabaseInputDefinitionPtrInput is an input type that accepts DatasetDatabaseInputDefinitionArgs, DatasetDatabaseInputDefinitionPtr and DatasetDatabaseInputDefinitionPtrOutput values.
// You can construct a concrete instance of `DatasetDatabaseInputDefinitionPtrInput` via:
//
//          DatasetDatabaseInputDefinitionArgs{...}
//
//  or:
//
//          nil
type DatasetDatabaseInputDefinitionPtrInput interface {
	pulumi.Input

	ToDatasetDatabaseInputDefinitionPtrOutput() DatasetDatabaseInputDefinitionPtrOutput
	ToDatasetDatabaseInputDefinitionPtrOutputWithContext(context.Context) DatasetDatabaseInputDefinitionPtrOutput
}

type datasetDatabaseInputDefinitionPtrType DatasetDatabaseInputDefinitionArgs

func DatasetDatabaseInputDefinitionPtr(v *DatasetDatabaseInputDefinitionArgs) DatasetDatabaseInputDefinitionPtrInput {
	return (*datasetDatabaseInputDefinitionPtrType)(v)
}

func (*datasetDatabaseInputDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDatabaseInputDefinition)(nil)).Elem()
}

func (i *datasetDatabaseInputDefinitionPtrType) ToDatasetDatabaseInputDefinitionPtrOutput() DatasetDatabaseInputDefinitionPtrOutput {
	return i.ToDatasetDatabaseInputDefinitionPtrOutputWithContext(context.Background())
}

func (i *datasetDatabaseInputDefinitionPtrType) ToDatasetDatabaseInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDatabaseInputDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatabaseInputDefinitionPtrOutput)
}

type DatasetDatabaseInputDefinitionOutput struct{ *pulumi.OutputState }

func (DatasetDatabaseInputDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatabaseInputDefinition)(nil)).Elem()
}

func (o DatasetDatabaseInputDefinitionOutput) ToDatasetDatabaseInputDefinitionOutput() DatasetDatabaseInputDefinitionOutput {
	return o
}

func (o DatasetDatabaseInputDefinitionOutput) ToDatasetDatabaseInputDefinitionOutputWithContext(ctx context.Context) DatasetDatabaseInputDefinitionOutput {
	return o
}

func (o DatasetDatabaseInputDefinitionOutput) ToDatasetDatabaseInputDefinitionPtrOutput() DatasetDatabaseInputDefinitionPtrOutput {
	return o.ToDatasetDatabaseInputDefinitionPtrOutputWithContext(context.Background())
}

func (o DatasetDatabaseInputDefinitionOutput) ToDatasetDatabaseInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDatabaseInputDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetDatabaseInputDefinition) *DatasetDatabaseInputDefinition {
		return &v
	}).(DatasetDatabaseInputDefinitionPtrOutput)
}

// Database table name
func (o DatasetDatabaseInputDefinitionOutput) DatabaseTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDatabaseInputDefinition) *string { return v.DatabaseTableName }).(pulumi.StringPtrOutput)
}

// Glue connection name
func (o DatasetDatabaseInputDefinitionOutput) GlueConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDatabaseInputDefinition) *string { return v.GlueConnectionName }).(pulumi.StringPtrOutput)
}

func (o DatasetDatabaseInputDefinitionOutput) TempDirectory() DatasetS3LocationPtrOutput {
	return o.ApplyT(func(v DatasetDatabaseInputDefinition) *DatasetS3Location { return v.TempDirectory }).(DatasetS3LocationPtrOutput)
}

type DatasetDatabaseInputDefinitionPtrOutput struct{ *pulumi.OutputState }

func (DatasetDatabaseInputDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDatabaseInputDefinition)(nil)).Elem()
}

func (o DatasetDatabaseInputDefinitionPtrOutput) ToDatasetDatabaseInputDefinitionPtrOutput() DatasetDatabaseInputDefinitionPtrOutput {
	return o
}

func (o DatasetDatabaseInputDefinitionPtrOutput) ToDatasetDatabaseInputDefinitionPtrOutputWithContext(ctx context.Context) DatasetDatabaseInputDefinitionPtrOutput {
	return o
}

func (o DatasetDatabaseInputDefinitionPtrOutput) Elem() DatasetDatabaseInputDefinitionOutput {
	return o.ApplyT(func(v *DatasetDatabaseInputDefinition) DatasetDatabaseInputDefinition {
		if v != nil {
			return *v
		}
		var ret DatasetDatabaseInputDefinition
		return ret
	}).(DatasetDatabaseInputDefinitionOutput)
}

// Database table name
func (o DatasetDatabaseInputDefinitionPtrOutput) DatabaseTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDatabaseInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseTableName
	}).(pulumi.StringPtrOutput)
}

// Glue connection name
func (o DatasetDatabaseInputDefinitionPtrOutput) GlueConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDatabaseInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.GlueConnectionName
	}).(pulumi.StringPtrOutput)
}

func (o DatasetDatabaseInputDefinitionPtrOutput) TempDirectory() DatasetS3LocationPtrOutput {
	return o.ApplyT(func(v *DatasetDatabaseInputDefinition) *DatasetS3Location {
		if v == nil {
			return nil
		}
		return v.TempDirectory
	}).(DatasetS3LocationPtrOutput)
}

type DatasetDatasetParameter struct {
	// Add the value of this parameter as a column in a dataset.
	CreateColumn    *bool                    `pulumi:"createColumn"`
	DatetimeOptions *DatasetDatetimeOptions  `pulumi:"datetimeOptions"`
	Filter          *DatasetFilterExpression `pulumi:"filter"`
	Name            string                   `pulumi:"name"`
	// Parameter type
	Type string `pulumi:"type"`
}

// DatasetDatasetParameterInput is an input type that accepts DatasetDatasetParameterArgs and DatasetDatasetParameterOutput values.
// You can construct a concrete instance of `DatasetDatasetParameterInput` via:
//
//          DatasetDatasetParameterArgs{...}
type DatasetDatasetParameterInput interface {
	pulumi.Input

	ToDatasetDatasetParameterOutput() DatasetDatasetParameterOutput
	ToDatasetDatasetParameterOutputWithContext(context.Context) DatasetDatasetParameterOutput
}

type DatasetDatasetParameterArgs struct {
	// Add the value of this parameter as a column in a dataset.
	CreateColumn    pulumi.BoolPtrInput             `pulumi:"createColumn"`
	DatetimeOptions DatasetDatetimeOptionsPtrInput  `pulumi:"datetimeOptions"`
	Filter          DatasetFilterExpressionPtrInput `pulumi:"filter"`
	Name            pulumi.StringInput              `pulumi:"name"`
	// Parameter type
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetDatasetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatasetParameter)(nil)).Elem()
}

func (i DatasetDatasetParameterArgs) ToDatasetDatasetParameterOutput() DatasetDatasetParameterOutput {
	return i.ToDatasetDatasetParameterOutputWithContext(context.Background())
}

func (i DatasetDatasetParameterArgs) ToDatasetDatasetParameterOutputWithContext(ctx context.Context) DatasetDatasetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatasetParameterOutput)
}

type DatasetDatasetParameterOutput struct{ *pulumi.OutputState }

func (DatasetDatasetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatasetParameter)(nil)).Elem()
}

func (o DatasetDatasetParameterOutput) ToDatasetDatasetParameterOutput() DatasetDatasetParameterOutput {
	return o
}

func (o DatasetDatasetParameterOutput) ToDatasetDatasetParameterOutputWithContext(ctx context.Context) DatasetDatasetParameterOutput {
	return o
}

// Add the value of this parameter as a column in a dataset.
func (o DatasetDatasetParameterOutput) CreateColumn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetDatasetParameter) *bool { return v.CreateColumn }).(pulumi.BoolPtrOutput)
}

func (o DatasetDatasetParameterOutput) DatetimeOptions() DatasetDatetimeOptionsPtrOutput {
	return o.ApplyT(func(v DatasetDatasetParameter) *DatasetDatetimeOptions { return v.DatetimeOptions }).(DatasetDatetimeOptionsPtrOutput)
}

func (o DatasetDatasetParameterOutput) Filter() DatasetFilterExpressionPtrOutput {
	return o.ApplyT(func(v DatasetDatasetParameter) *DatasetFilterExpression { return v.Filter }).(DatasetFilterExpressionPtrOutput)
}

func (o DatasetDatasetParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDatasetParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Parameter type
func (o DatasetDatasetParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDatasetParameter) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetDatetimeOptions struct {
	// Date/time format of a date parameter
	Format string `pulumi:"format"`
	// Locale code for a date parameter
	LocaleCode *string `pulumi:"localeCode"`
	// Timezone offset
	TimezoneOffset *string `pulumi:"timezoneOffset"`
}

// DatasetDatetimeOptionsInput is an input type that accepts DatasetDatetimeOptionsArgs and DatasetDatetimeOptionsOutput values.
// You can construct a concrete instance of `DatasetDatetimeOptionsInput` via:
//
//          DatasetDatetimeOptionsArgs{...}
type DatasetDatetimeOptionsInput interface {
	pulumi.Input

	ToDatasetDatetimeOptionsOutput() DatasetDatetimeOptionsOutput
	ToDatasetDatetimeOptionsOutputWithContext(context.Context) DatasetDatetimeOptionsOutput
}

type DatasetDatetimeOptionsArgs struct {
	// Date/time format of a date parameter
	Format pulumi.StringInput `pulumi:"format"`
	// Locale code for a date parameter
	LocaleCode pulumi.StringPtrInput `pulumi:"localeCode"`
	// Timezone offset
	TimezoneOffset pulumi.StringPtrInput `pulumi:"timezoneOffset"`
}

func (DatasetDatetimeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatetimeOptions)(nil)).Elem()
}

func (i DatasetDatetimeOptionsArgs) ToDatasetDatetimeOptionsOutput() DatasetDatetimeOptionsOutput {
	return i.ToDatasetDatetimeOptionsOutputWithContext(context.Background())
}

func (i DatasetDatetimeOptionsArgs) ToDatasetDatetimeOptionsOutputWithContext(ctx context.Context) DatasetDatetimeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatetimeOptionsOutput)
}

func (i DatasetDatetimeOptionsArgs) ToDatasetDatetimeOptionsPtrOutput() DatasetDatetimeOptionsPtrOutput {
	return i.ToDatasetDatetimeOptionsPtrOutputWithContext(context.Background())
}

func (i DatasetDatetimeOptionsArgs) ToDatasetDatetimeOptionsPtrOutputWithContext(ctx context.Context) DatasetDatetimeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatetimeOptionsOutput).ToDatasetDatetimeOptionsPtrOutputWithContext(ctx)
}

// DatasetDatetimeOptionsPtrInput is an input type that accepts DatasetDatetimeOptionsArgs, DatasetDatetimeOptionsPtr and DatasetDatetimeOptionsPtrOutput values.
// You can construct a concrete instance of `DatasetDatetimeOptionsPtrInput` via:
//
//          DatasetDatetimeOptionsArgs{...}
//
//  or:
//
//          nil
type DatasetDatetimeOptionsPtrInput interface {
	pulumi.Input

	ToDatasetDatetimeOptionsPtrOutput() DatasetDatetimeOptionsPtrOutput
	ToDatasetDatetimeOptionsPtrOutputWithContext(context.Context) DatasetDatetimeOptionsPtrOutput
}

type datasetDatetimeOptionsPtrType DatasetDatetimeOptionsArgs

func DatasetDatetimeOptionsPtr(v *DatasetDatetimeOptionsArgs) DatasetDatetimeOptionsPtrInput {
	return (*datasetDatetimeOptionsPtrType)(v)
}

func (*datasetDatetimeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDatetimeOptions)(nil)).Elem()
}

func (i *datasetDatetimeOptionsPtrType) ToDatasetDatetimeOptionsPtrOutput() DatasetDatetimeOptionsPtrOutput {
	return i.ToDatasetDatetimeOptionsPtrOutputWithContext(context.Background())
}

func (i *datasetDatetimeOptionsPtrType) ToDatasetDatetimeOptionsPtrOutputWithContext(ctx context.Context) DatasetDatetimeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDatetimeOptionsPtrOutput)
}

type DatasetDatetimeOptionsOutput struct{ *pulumi.OutputState }

func (DatasetDatetimeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDatetimeOptions)(nil)).Elem()
}

func (o DatasetDatetimeOptionsOutput) ToDatasetDatetimeOptionsOutput() DatasetDatetimeOptionsOutput {
	return o
}

func (o DatasetDatetimeOptionsOutput) ToDatasetDatetimeOptionsOutputWithContext(ctx context.Context) DatasetDatetimeOptionsOutput {
	return o
}

func (o DatasetDatetimeOptionsOutput) ToDatasetDatetimeOptionsPtrOutput() DatasetDatetimeOptionsPtrOutput {
	return o.ToDatasetDatetimeOptionsPtrOutputWithContext(context.Background())
}

func (o DatasetDatetimeOptionsOutput) ToDatasetDatetimeOptionsPtrOutputWithContext(ctx context.Context) DatasetDatetimeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetDatetimeOptions) *DatasetDatetimeOptions {
		return &v
	}).(DatasetDatetimeOptionsPtrOutput)
}

// Date/time format of a date parameter
func (o DatasetDatetimeOptionsOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDatetimeOptions) string { return v.Format }).(pulumi.StringOutput)
}

// Locale code for a date parameter
func (o DatasetDatetimeOptionsOutput) LocaleCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDatetimeOptions) *string { return v.LocaleCode }).(pulumi.StringPtrOutput)
}

// Timezone offset
func (o DatasetDatetimeOptionsOutput) TimezoneOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDatetimeOptions) *string { return v.TimezoneOffset }).(pulumi.StringPtrOutput)
}

type DatasetDatetimeOptionsPtrOutput struct{ *pulumi.OutputState }

func (DatasetDatetimeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDatetimeOptions)(nil)).Elem()
}

func (o DatasetDatetimeOptionsPtrOutput) ToDatasetDatetimeOptionsPtrOutput() DatasetDatetimeOptionsPtrOutput {
	return o
}

func (o DatasetDatetimeOptionsPtrOutput) ToDatasetDatetimeOptionsPtrOutputWithContext(ctx context.Context) DatasetDatetimeOptionsPtrOutput {
	return o
}

func (o DatasetDatetimeOptionsPtrOutput) Elem() DatasetDatetimeOptionsOutput {
	return o.ApplyT(func(v *DatasetDatetimeOptions) DatasetDatetimeOptions {
		if v != nil {
			return *v
		}
		var ret DatasetDatetimeOptions
		return ret
	}).(DatasetDatetimeOptionsOutput)
}

// Date/time format of a date parameter
func (o DatasetDatetimeOptionsPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDatetimeOptions) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

// Locale code for a date parameter
func (o DatasetDatetimeOptionsPtrOutput) LocaleCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDatetimeOptions) *string {
		if v == nil {
			return nil
		}
		return v.LocaleCode
	}).(pulumi.StringPtrOutput)
}

// Timezone offset
func (o DatasetDatetimeOptionsPtrOutput) TimezoneOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDatetimeOptions) *string {
		if v == nil {
			return nil
		}
		return v.TimezoneOffset
	}).(pulumi.StringPtrOutput)
}

type DatasetExcelOptions struct {
	HeaderRow    *bool    `pulumi:"headerRow"`
	SheetIndexes []int    `pulumi:"sheetIndexes"`
	SheetNames   []string `pulumi:"sheetNames"`
}

// DatasetExcelOptionsInput is an input type that accepts DatasetExcelOptionsArgs and DatasetExcelOptionsOutput values.
// You can construct a concrete instance of `DatasetExcelOptionsInput` via:
//
//          DatasetExcelOptionsArgs{...}
type DatasetExcelOptionsInput interface {
	pulumi.Input

	ToDatasetExcelOptionsOutput() DatasetExcelOptionsOutput
	ToDatasetExcelOptionsOutputWithContext(context.Context) DatasetExcelOptionsOutput
}

type DatasetExcelOptionsArgs struct {
	HeaderRow    pulumi.BoolPtrInput     `pulumi:"headerRow"`
	SheetIndexes pulumi.IntArrayInput    `pulumi:"sheetIndexes"`
	SheetNames   pulumi.StringArrayInput `pulumi:"sheetNames"`
}

func (DatasetExcelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetExcelOptions)(nil)).Elem()
}

func (i DatasetExcelOptionsArgs) ToDatasetExcelOptionsOutput() DatasetExcelOptionsOutput {
	return i.ToDatasetExcelOptionsOutputWithContext(context.Background())
}

func (i DatasetExcelOptionsArgs) ToDatasetExcelOptionsOutputWithContext(ctx context.Context) DatasetExcelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetExcelOptionsOutput)
}

func (i DatasetExcelOptionsArgs) ToDatasetExcelOptionsPtrOutput() DatasetExcelOptionsPtrOutput {
	return i.ToDatasetExcelOptionsPtrOutputWithContext(context.Background())
}

func (i DatasetExcelOptionsArgs) ToDatasetExcelOptionsPtrOutputWithContext(ctx context.Context) DatasetExcelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetExcelOptionsOutput).ToDatasetExcelOptionsPtrOutputWithContext(ctx)
}

// DatasetExcelOptionsPtrInput is an input type that accepts DatasetExcelOptionsArgs, DatasetExcelOptionsPtr and DatasetExcelOptionsPtrOutput values.
// You can construct a concrete instance of `DatasetExcelOptionsPtrInput` via:
//
//          DatasetExcelOptionsArgs{...}
//
//  or:
//
//          nil
type DatasetExcelOptionsPtrInput interface {
	pulumi.Input

	ToDatasetExcelOptionsPtrOutput() DatasetExcelOptionsPtrOutput
	ToDatasetExcelOptionsPtrOutputWithContext(context.Context) DatasetExcelOptionsPtrOutput
}

type datasetExcelOptionsPtrType DatasetExcelOptionsArgs

func DatasetExcelOptionsPtr(v *DatasetExcelOptionsArgs) DatasetExcelOptionsPtrInput {
	return (*datasetExcelOptionsPtrType)(v)
}

func (*datasetExcelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetExcelOptions)(nil)).Elem()
}

func (i *datasetExcelOptionsPtrType) ToDatasetExcelOptionsPtrOutput() DatasetExcelOptionsPtrOutput {
	return i.ToDatasetExcelOptionsPtrOutputWithContext(context.Background())
}

func (i *datasetExcelOptionsPtrType) ToDatasetExcelOptionsPtrOutputWithContext(ctx context.Context) DatasetExcelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetExcelOptionsPtrOutput)
}

type DatasetExcelOptionsOutput struct{ *pulumi.OutputState }

func (DatasetExcelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetExcelOptions)(nil)).Elem()
}

func (o DatasetExcelOptionsOutput) ToDatasetExcelOptionsOutput() DatasetExcelOptionsOutput {
	return o
}

func (o DatasetExcelOptionsOutput) ToDatasetExcelOptionsOutputWithContext(ctx context.Context) DatasetExcelOptionsOutput {
	return o
}

func (o DatasetExcelOptionsOutput) ToDatasetExcelOptionsPtrOutput() DatasetExcelOptionsPtrOutput {
	return o.ToDatasetExcelOptionsPtrOutputWithContext(context.Background())
}

func (o DatasetExcelOptionsOutput) ToDatasetExcelOptionsPtrOutputWithContext(ctx context.Context) DatasetExcelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetExcelOptions) *DatasetExcelOptions {
		return &v
	}).(DatasetExcelOptionsPtrOutput)
}

func (o DatasetExcelOptionsOutput) HeaderRow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetExcelOptions) *bool { return v.HeaderRow }).(pulumi.BoolPtrOutput)
}

func (o DatasetExcelOptionsOutput) SheetIndexes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DatasetExcelOptions) []int { return v.SheetIndexes }).(pulumi.IntArrayOutput)
}

func (o DatasetExcelOptionsOutput) SheetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatasetExcelOptions) []string { return v.SheetNames }).(pulumi.StringArrayOutput)
}

type DatasetExcelOptionsPtrOutput struct{ *pulumi.OutputState }

func (DatasetExcelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetExcelOptions)(nil)).Elem()
}

func (o DatasetExcelOptionsPtrOutput) ToDatasetExcelOptionsPtrOutput() DatasetExcelOptionsPtrOutput {
	return o
}

func (o DatasetExcelOptionsPtrOutput) ToDatasetExcelOptionsPtrOutputWithContext(ctx context.Context) DatasetExcelOptionsPtrOutput {
	return o
}

func (o DatasetExcelOptionsPtrOutput) Elem() DatasetExcelOptionsOutput {
	return o.ApplyT(func(v *DatasetExcelOptions) DatasetExcelOptions {
		if v != nil {
			return *v
		}
		var ret DatasetExcelOptions
		return ret
	}).(DatasetExcelOptionsOutput)
}

func (o DatasetExcelOptionsPtrOutput) HeaderRow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetExcelOptions) *bool {
		if v == nil {
			return nil
		}
		return v.HeaderRow
	}).(pulumi.BoolPtrOutput)
}

func (o DatasetExcelOptionsPtrOutput) SheetIndexes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DatasetExcelOptions) []int {
		if v == nil {
			return nil
		}
		return v.SheetIndexes
	}).(pulumi.IntArrayOutput)
}

func (o DatasetExcelOptionsPtrOutput) SheetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetExcelOptions) []string {
		if v == nil {
			return nil
		}
		return v.SheetNames
	}).(pulumi.StringArrayOutput)
}

type DatasetFilesLimit struct {
	// Maximum number of files
	MaxFiles int `pulumi:"maxFiles"`
	// Order
	Order *string `pulumi:"order"`
	// Ordered by
	OrderedBy *string `pulumi:"orderedBy"`
}

// DatasetFilesLimitInput is an input type that accepts DatasetFilesLimitArgs and DatasetFilesLimitOutput values.
// You can construct a concrete instance of `DatasetFilesLimitInput` via:
//
//          DatasetFilesLimitArgs{...}
type DatasetFilesLimitInput interface {
	pulumi.Input

	ToDatasetFilesLimitOutput() DatasetFilesLimitOutput
	ToDatasetFilesLimitOutputWithContext(context.Context) DatasetFilesLimitOutput
}

type DatasetFilesLimitArgs struct {
	// Maximum number of files
	MaxFiles pulumi.IntInput `pulumi:"maxFiles"`
	// Order
	Order pulumi.StringPtrInput `pulumi:"order"`
	// Ordered by
	OrderedBy pulumi.StringPtrInput `pulumi:"orderedBy"`
}

func (DatasetFilesLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFilesLimit)(nil)).Elem()
}

func (i DatasetFilesLimitArgs) ToDatasetFilesLimitOutput() DatasetFilesLimitOutput {
	return i.ToDatasetFilesLimitOutputWithContext(context.Background())
}

func (i DatasetFilesLimitArgs) ToDatasetFilesLimitOutputWithContext(ctx context.Context) DatasetFilesLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilesLimitOutput)
}

func (i DatasetFilesLimitArgs) ToDatasetFilesLimitPtrOutput() DatasetFilesLimitPtrOutput {
	return i.ToDatasetFilesLimitPtrOutputWithContext(context.Background())
}

func (i DatasetFilesLimitArgs) ToDatasetFilesLimitPtrOutputWithContext(ctx context.Context) DatasetFilesLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilesLimitOutput).ToDatasetFilesLimitPtrOutputWithContext(ctx)
}

// DatasetFilesLimitPtrInput is an input type that accepts DatasetFilesLimitArgs, DatasetFilesLimitPtr and DatasetFilesLimitPtrOutput values.
// You can construct a concrete instance of `DatasetFilesLimitPtrInput` via:
//
//          DatasetFilesLimitArgs{...}
//
//  or:
//
//          nil
type DatasetFilesLimitPtrInput interface {
	pulumi.Input

	ToDatasetFilesLimitPtrOutput() DatasetFilesLimitPtrOutput
	ToDatasetFilesLimitPtrOutputWithContext(context.Context) DatasetFilesLimitPtrOutput
}

type datasetFilesLimitPtrType DatasetFilesLimitArgs

func DatasetFilesLimitPtr(v *DatasetFilesLimitArgs) DatasetFilesLimitPtrInput {
	return (*datasetFilesLimitPtrType)(v)
}

func (*datasetFilesLimitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFilesLimit)(nil)).Elem()
}

func (i *datasetFilesLimitPtrType) ToDatasetFilesLimitPtrOutput() DatasetFilesLimitPtrOutput {
	return i.ToDatasetFilesLimitPtrOutputWithContext(context.Background())
}

func (i *datasetFilesLimitPtrType) ToDatasetFilesLimitPtrOutputWithContext(ctx context.Context) DatasetFilesLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilesLimitPtrOutput)
}

type DatasetFilesLimitOutput struct{ *pulumi.OutputState }

func (DatasetFilesLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFilesLimit)(nil)).Elem()
}

func (o DatasetFilesLimitOutput) ToDatasetFilesLimitOutput() DatasetFilesLimitOutput {
	return o
}

func (o DatasetFilesLimitOutput) ToDatasetFilesLimitOutputWithContext(ctx context.Context) DatasetFilesLimitOutput {
	return o
}

func (o DatasetFilesLimitOutput) ToDatasetFilesLimitPtrOutput() DatasetFilesLimitPtrOutput {
	return o.ToDatasetFilesLimitPtrOutputWithContext(context.Background())
}

func (o DatasetFilesLimitOutput) ToDatasetFilesLimitPtrOutputWithContext(ctx context.Context) DatasetFilesLimitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetFilesLimit) *DatasetFilesLimit {
		return &v
	}).(DatasetFilesLimitPtrOutput)
}

// Maximum number of files
func (o DatasetFilesLimitOutput) MaxFiles() pulumi.IntOutput {
	return o.ApplyT(func(v DatasetFilesLimit) int { return v.MaxFiles }).(pulumi.IntOutput)
}

// Order
func (o DatasetFilesLimitOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetFilesLimit) *string { return v.Order }).(pulumi.StringPtrOutput)
}

// Ordered by
func (o DatasetFilesLimitOutput) OrderedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetFilesLimit) *string { return v.OrderedBy }).(pulumi.StringPtrOutput)
}

type DatasetFilesLimitPtrOutput struct{ *pulumi.OutputState }

func (DatasetFilesLimitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFilesLimit)(nil)).Elem()
}

func (o DatasetFilesLimitPtrOutput) ToDatasetFilesLimitPtrOutput() DatasetFilesLimitPtrOutput {
	return o
}

func (o DatasetFilesLimitPtrOutput) ToDatasetFilesLimitPtrOutputWithContext(ctx context.Context) DatasetFilesLimitPtrOutput {
	return o
}

func (o DatasetFilesLimitPtrOutput) Elem() DatasetFilesLimitOutput {
	return o.ApplyT(func(v *DatasetFilesLimit) DatasetFilesLimit {
		if v != nil {
			return *v
		}
		var ret DatasetFilesLimit
		return ret
	}).(DatasetFilesLimitOutput)
}

// Maximum number of files
func (o DatasetFilesLimitPtrOutput) MaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatasetFilesLimit) *int {
		if v == nil {
			return nil
		}
		return &v.MaxFiles
	}).(pulumi.IntPtrOutput)
}

// Order
func (o DatasetFilesLimitPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetFilesLimit) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

// Ordered by
func (o DatasetFilesLimitPtrOutput) OrderedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetFilesLimit) *string {
		if v == nil {
			return nil
		}
		return v.OrderedBy
	}).(pulumi.StringPtrOutput)
}

type DatasetFilterExpression struct {
	// Filtering expression for a parameter
	Expression string               `pulumi:"expression"`
	ValuesMap  []DatasetFilterValue `pulumi:"valuesMap"`
}

// DatasetFilterExpressionInput is an input type that accepts DatasetFilterExpressionArgs and DatasetFilterExpressionOutput values.
// You can construct a concrete instance of `DatasetFilterExpressionInput` via:
//
//          DatasetFilterExpressionArgs{...}
type DatasetFilterExpressionInput interface {
	pulumi.Input

	ToDatasetFilterExpressionOutput() DatasetFilterExpressionOutput
	ToDatasetFilterExpressionOutputWithContext(context.Context) DatasetFilterExpressionOutput
}

type DatasetFilterExpressionArgs struct {
	// Filtering expression for a parameter
	Expression pulumi.StringInput           `pulumi:"expression"`
	ValuesMap  DatasetFilterValueArrayInput `pulumi:"valuesMap"`
}

func (DatasetFilterExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFilterExpression)(nil)).Elem()
}

func (i DatasetFilterExpressionArgs) ToDatasetFilterExpressionOutput() DatasetFilterExpressionOutput {
	return i.ToDatasetFilterExpressionOutputWithContext(context.Background())
}

func (i DatasetFilterExpressionArgs) ToDatasetFilterExpressionOutputWithContext(ctx context.Context) DatasetFilterExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilterExpressionOutput)
}

func (i DatasetFilterExpressionArgs) ToDatasetFilterExpressionPtrOutput() DatasetFilterExpressionPtrOutput {
	return i.ToDatasetFilterExpressionPtrOutputWithContext(context.Background())
}

func (i DatasetFilterExpressionArgs) ToDatasetFilterExpressionPtrOutputWithContext(ctx context.Context) DatasetFilterExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilterExpressionOutput).ToDatasetFilterExpressionPtrOutputWithContext(ctx)
}

// DatasetFilterExpressionPtrInput is an input type that accepts DatasetFilterExpressionArgs, DatasetFilterExpressionPtr and DatasetFilterExpressionPtrOutput values.
// You can construct a concrete instance of `DatasetFilterExpressionPtrInput` via:
//
//          DatasetFilterExpressionArgs{...}
//
//  or:
//
//          nil
type DatasetFilterExpressionPtrInput interface {
	pulumi.Input

	ToDatasetFilterExpressionPtrOutput() DatasetFilterExpressionPtrOutput
	ToDatasetFilterExpressionPtrOutputWithContext(context.Context) DatasetFilterExpressionPtrOutput
}

type datasetFilterExpressionPtrType DatasetFilterExpressionArgs

func DatasetFilterExpressionPtr(v *DatasetFilterExpressionArgs) DatasetFilterExpressionPtrInput {
	return (*datasetFilterExpressionPtrType)(v)
}

func (*datasetFilterExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFilterExpression)(nil)).Elem()
}

func (i *datasetFilterExpressionPtrType) ToDatasetFilterExpressionPtrOutput() DatasetFilterExpressionPtrOutput {
	return i.ToDatasetFilterExpressionPtrOutputWithContext(context.Background())
}

func (i *datasetFilterExpressionPtrType) ToDatasetFilterExpressionPtrOutputWithContext(ctx context.Context) DatasetFilterExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilterExpressionPtrOutput)
}

type DatasetFilterExpressionOutput struct{ *pulumi.OutputState }

func (DatasetFilterExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFilterExpression)(nil)).Elem()
}

func (o DatasetFilterExpressionOutput) ToDatasetFilterExpressionOutput() DatasetFilterExpressionOutput {
	return o
}

func (o DatasetFilterExpressionOutput) ToDatasetFilterExpressionOutputWithContext(ctx context.Context) DatasetFilterExpressionOutput {
	return o
}

func (o DatasetFilterExpressionOutput) ToDatasetFilterExpressionPtrOutput() DatasetFilterExpressionPtrOutput {
	return o.ToDatasetFilterExpressionPtrOutputWithContext(context.Background())
}

func (o DatasetFilterExpressionOutput) ToDatasetFilterExpressionPtrOutputWithContext(ctx context.Context) DatasetFilterExpressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetFilterExpression) *DatasetFilterExpression {
		return &v
	}).(DatasetFilterExpressionPtrOutput)
}

// Filtering expression for a parameter
func (o DatasetFilterExpressionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetFilterExpression) string { return v.Expression }).(pulumi.StringOutput)
}

func (o DatasetFilterExpressionOutput) ValuesMap() DatasetFilterValueArrayOutput {
	return o.ApplyT(func(v DatasetFilterExpression) []DatasetFilterValue { return v.ValuesMap }).(DatasetFilterValueArrayOutput)
}

type DatasetFilterExpressionPtrOutput struct{ *pulumi.OutputState }

func (DatasetFilterExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFilterExpression)(nil)).Elem()
}

func (o DatasetFilterExpressionPtrOutput) ToDatasetFilterExpressionPtrOutput() DatasetFilterExpressionPtrOutput {
	return o
}

func (o DatasetFilterExpressionPtrOutput) ToDatasetFilterExpressionPtrOutputWithContext(ctx context.Context) DatasetFilterExpressionPtrOutput {
	return o
}

func (o DatasetFilterExpressionPtrOutput) Elem() DatasetFilterExpressionOutput {
	return o.ApplyT(func(v *DatasetFilterExpression) DatasetFilterExpression {
		if v != nil {
			return *v
		}
		var ret DatasetFilterExpression
		return ret
	}).(DatasetFilterExpressionOutput)
}

// Filtering expression for a parameter
func (o DatasetFilterExpressionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetFilterExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

func (o DatasetFilterExpressionPtrOutput) ValuesMap() DatasetFilterValueArrayOutput {
	return o.ApplyT(func(v *DatasetFilterExpression) []DatasetFilterValue {
		if v == nil {
			return nil
		}
		return v.ValuesMap
	}).(DatasetFilterValueArrayOutput)
}

// A key-value pair to associate expression variable names with their values
type DatasetFilterValue struct {
	Value string `pulumi:"value"`
	// Variable name
	ValueReference string `pulumi:"valueReference"`
}

// DatasetFilterValueInput is an input type that accepts DatasetFilterValueArgs and DatasetFilterValueOutput values.
// You can construct a concrete instance of `DatasetFilterValueInput` via:
//
//          DatasetFilterValueArgs{...}
type DatasetFilterValueInput interface {
	pulumi.Input

	ToDatasetFilterValueOutput() DatasetFilterValueOutput
	ToDatasetFilterValueOutputWithContext(context.Context) DatasetFilterValueOutput
}

// A key-value pair to associate expression variable names with their values
type DatasetFilterValueArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
	// Variable name
	ValueReference pulumi.StringInput `pulumi:"valueReference"`
}

func (DatasetFilterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFilterValue)(nil)).Elem()
}

func (i DatasetFilterValueArgs) ToDatasetFilterValueOutput() DatasetFilterValueOutput {
	return i.ToDatasetFilterValueOutputWithContext(context.Background())
}

func (i DatasetFilterValueArgs) ToDatasetFilterValueOutputWithContext(ctx context.Context) DatasetFilterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilterValueOutput)
}

// DatasetFilterValueArrayInput is an input type that accepts DatasetFilterValueArray and DatasetFilterValueArrayOutput values.
// You can construct a concrete instance of `DatasetFilterValueArrayInput` via:
//
//          DatasetFilterValueArray{ DatasetFilterValueArgs{...} }
type DatasetFilterValueArrayInput interface {
	pulumi.Input

	ToDatasetFilterValueArrayOutput() DatasetFilterValueArrayOutput
	ToDatasetFilterValueArrayOutputWithContext(context.Context) DatasetFilterValueArrayOutput
}

type DatasetFilterValueArray []DatasetFilterValueInput

func (DatasetFilterValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetFilterValue)(nil)).Elem()
}

func (i DatasetFilterValueArray) ToDatasetFilterValueArrayOutput() DatasetFilterValueArrayOutput {
	return i.ToDatasetFilterValueArrayOutputWithContext(context.Background())
}

func (i DatasetFilterValueArray) ToDatasetFilterValueArrayOutputWithContext(ctx context.Context) DatasetFilterValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFilterValueArrayOutput)
}

// A key-value pair to associate expression variable names with their values
type DatasetFilterValueOutput struct{ *pulumi.OutputState }

func (DatasetFilterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFilterValue)(nil)).Elem()
}

func (o DatasetFilterValueOutput) ToDatasetFilterValueOutput() DatasetFilterValueOutput {
	return o
}

func (o DatasetFilterValueOutput) ToDatasetFilterValueOutputWithContext(ctx context.Context) DatasetFilterValueOutput {
	return o
}

func (o DatasetFilterValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetFilterValue) string { return v.Value }).(pulumi.StringOutput)
}

// Variable name
func (o DatasetFilterValueOutput) ValueReference() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetFilterValue) string { return v.ValueReference }).(pulumi.StringOutput)
}

type DatasetFilterValueArrayOutput struct{ *pulumi.OutputState }

func (DatasetFilterValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetFilterValue)(nil)).Elem()
}

func (o DatasetFilterValueArrayOutput) ToDatasetFilterValueArrayOutput() DatasetFilterValueArrayOutput {
	return o
}

func (o DatasetFilterValueArrayOutput) ToDatasetFilterValueArrayOutputWithContext(ctx context.Context) DatasetFilterValueArrayOutput {
	return o
}

func (o DatasetFilterValueArrayOutput) Index(i pulumi.IntInput) DatasetFilterValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetFilterValue {
		return vs[0].([]DatasetFilterValue)[vs[1].(int)]
	}).(DatasetFilterValueOutput)
}

// Format options for dataset
type DatasetFormatOptions struct {
	Csv   *DatasetCsvOptions   `pulumi:"csv"`
	Excel *DatasetExcelOptions `pulumi:"excel"`
	Json  *DatasetJsonOptions  `pulumi:"json"`
}

// DatasetFormatOptionsInput is an input type that accepts DatasetFormatOptionsArgs and DatasetFormatOptionsOutput values.
// You can construct a concrete instance of `DatasetFormatOptionsInput` via:
//
//          DatasetFormatOptionsArgs{...}
type DatasetFormatOptionsInput interface {
	pulumi.Input

	ToDatasetFormatOptionsOutput() DatasetFormatOptionsOutput
	ToDatasetFormatOptionsOutputWithContext(context.Context) DatasetFormatOptionsOutput
}

// Format options for dataset
type DatasetFormatOptionsArgs struct {
	Csv   DatasetCsvOptionsPtrInput   `pulumi:"csv"`
	Excel DatasetExcelOptionsPtrInput `pulumi:"excel"`
	Json  DatasetJsonOptionsPtrInput  `pulumi:"json"`
}

func (DatasetFormatOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFormatOptions)(nil)).Elem()
}

func (i DatasetFormatOptionsArgs) ToDatasetFormatOptionsOutput() DatasetFormatOptionsOutput {
	return i.ToDatasetFormatOptionsOutputWithContext(context.Background())
}

func (i DatasetFormatOptionsArgs) ToDatasetFormatOptionsOutputWithContext(ctx context.Context) DatasetFormatOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFormatOptionsOutput)
}

func (i DatasetFormatOptionsArgs) ToDatasetFormatOptionsPtrOutput() DatasetFormatOptionsPtrOutput {
	return i.ToDatasetFormatOptionsPtrOutputWithContext(context.Background())
}

func (i DatasetFormatOptionsArgs) ToDatasetFormatOptionsPtrOutputWithContext(ctx context.Context) DatasetFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFormatOptionsOutput).ToDatasetFormatOptionsPtrOutputWithContext(ctx)
}

// DatasetFormatOptionsPtrInput is an input type that accepts DatasetFormatOptionsArgs, DatasetFormatOptionsPtr and DatasetFormatOptionsPtrOutput values.
// You can construct a concrete instance of `DatasetFormatOptionsPtrInput` via:
//
//          DatasetFormatOptionsArgs{...}
//
//  or:
//
//          nil
type DatasetFormatOptionsPtrInput interface {
	pulumi.Input

	ToDatasetFormatOptionsPtrOutput() DatasetFormatOptionsPtrOutput
	ToDatasetFormatOptionsPtrOutputWithContext(context.Context) DatasetFormatOptionsPtrOutput
}

type datasetFormatOptionsPtrType DatasetFormatOptionsArgs

func DatasetFormatOptionsPtr(v *DatasetFormatOptionsArgs) DatasetFormatOptionsPtrInput {
	return (*datasetFormatOptionsPtrType)(v)
}

func (*datasetFormatOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFormatOptions)(nil)).Elem()
}

func (i *datasetFormatOptionsPtrType) ToDatasetFormatOptionsPtrOutput() DatasetFormatOptionsPtrOutput {
	return i.ToDatasetFormatOptionsPtrOutputWithContext(context.Background())
}

func (i *datasetFormatOptionsPtrType) ToDatasetFormatOptionsPtrOutputWithContext(ctx context.Context) DatasetFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFormatOptionsPtrOutput)
}

// Format options for dataset
type DatasetFormatOptionsOutput struct{ *pulumi.OutputState }

func (DatasetFormatOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFormatOptions)(nil)).Elem()
}

func (o DatasetFormatOptionsOutput) ToDatasetFormatOptionsOutput() DatasetFormatOptionsOutput {
	return o
}

func (o DatasetFormatOptionsOutput) ToDatasetFormatOptionsOutputWithContext(ctx context.Context) DatasetFormatOptionsOutput {
	return o
}

func (o DatasetFormatOptionsOutput) ToDatasetFormatOptionsPtrOutput() DatasetFormatOptionsPtrOutput {
	return o.ToDatasetFormatOptionsPtrOutputWithContext(context.Background())
}

func (o DatasetFormatOptionsOutput) ToDatasetFormatOptionsPtrOutputWithContext(ctx context.Context) DatasetFormatOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetFormatOptions) *DatasetFormatOptions {
		return &v
	}).(DatasetFormatOptionsPtrOutput)
}

func (o DatasetFormatOptionsOutput) Csv() DatasetCsvOptionsPtrOutput {
	return o.ApplyT(func(v DatasetFormatOptions) *DatasetCsvOptions { return v.Csv }).(DatasetCsvOptionsPtrOutput)
}

func (o DatasetFormatOptionsOutput) Excel() DatasetExcelOptionsPtrOutput {
	return o.ApplyT(func(v DatasetFormatOptions) *DatasetExcelOptions { return v.Excel }).(DatasetExcelOptionsPtrOutput)
}

func (o DatasetFormatOptionsOutput) Json() DatasetJsonOptionsPtrOutput {
	return o.ApplyT(func(v DatasetFormatOptions) *DatasetJsonOptions { return v.Json }).(DatasetJsonOptionsPtrOutput)
}

type DatasetFormatOptionsPtrOutput struct{ *pulumi.OutputState }

func (DatasetFormatOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFormatOptions)(nil)).Elem()
}

func (o DatasetFormatOptionsPtrOutput) ToDatasetFormatOptionsPtrOutput() DatasetFormatOptionsPtrOutput {
	return o
}

func (o DatasetFormatOptionsPtrOutput) ToDatasetFormatOptionsPtrOutputWithContext(ctx context.Context) DatasetFormatOptionsPtrOutput {
	return o
}

func (o DatasetFormatOptionsPtrOutput) Elem() DatasetFormatOptionsOutput {
	return o.ApplyT(func(v *DatasetFormatOptions) DatasetFormatOptions {
		if v != nil {
			return *v
		}
		var ret DatasetFormatOptions
		return ret
	}).(DatasetFormatOptionsOutput)
}

func (o DatasetFormatOptionsPtrOutput) Csv() DatasetCsvOptionsPtrOutput {
	return o.ApplyT(func(v *DatasetFormatOptions) *DatasetCsvOptions {
		if v == nil {
			return nil
		}
		return v.Csv
	}).(DatasetCsvOptionsPtrOutput)
}

func (o DatasetFormatOptionsPtrOutput) Excel() DatasetExcelOptionsPtrOutput {
	return o.ApplyT(func(v *DatasetFormatOptions) *DatasetExcelOptions {
		if v == nil {
			return nil
		}
		return v.Excel
	}).(DatasetExcelOptionsPtrOutput)
}

func (o DatasetFormatOptionsPtrOutput) Json() DatasetJsonOptionsPtrOutput {
	return o.ApplyT(func(v *DatasetFormatOptions) *DatasetJsonOptions {
		if v == nil {
			return nil
		}
		return v.Json
	}).(DatasetJsonOptionsPtrOutput)
}

// Input
type DatasetInputType struct {
	DataCatalogInputDefinition *DatasetDataCatalogInputDefinition `pulumi:"dataCatalogInputDefinition"`
	DatabaseInputDefinition    *DatasetDatabaseInputDefinition    `pulumi:"databaseInputDefinition"`
	S3InputDefinition          *DatasetS3Location                 `pulumi:"s3InputDefinition"`
}

// DatasetInputTypeInput is an input type that accepts DatasetInputTypeArgs and DatasetInputTypeOutput values.
// You can construct a concrete instance of `DatasetInputTypeInput` via:
//
//          DatasetInputTypeArgs{...}
type DatasetInputTypeInput interface {
	pulumi.Input

	ToDatasetInputTypeOutput() DatasetInputTypeOutput
	ToDatasetInputTypeOutputWithContext(context.Context) DatasetInputTypeOutput
}

// Input
type DatasetInputTypeArgs struct {
	DataCatalogInputDefinition DatasetDataCatalogInputDefinitionPtrInput `pulumi:"dataCatalogInputDefinition"`
	DatabaseInputDefinition    DatasetDatabaseInputDefinitionPtrInput    `pulumi:"databaseInputDefinition"`
	S3InputDefinition          DatasetS3LocationPtrInput                 `pulumi:"s3InputDefinition"`
}

func (DatasetInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetInputType)(nil)).Elem()
}

func (i DatasetInputTypeArgs) ToDatasetInputTypeOutput() DatasetInputTypeOutput {
	return i.ToDatasetInputTypeOutputWithContext(context.Background())
}

func (i DatasetInputTypeArgs) ToDatasetInputTypeOutputWithContext(ctx context.Context) DatasetInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetInputTypeOutput)
}

func (i DatasetInputTypeArgs) ToDatasetInputTypePtrOutput() DatasetInputTypePtrOutput {
	return i.ToDatasetInputTypePtrOutputWithContext(context.Background())
}

func (i DatasetInputTypeArgs) ToDatasetInputTypePtrOutputWithContext(ctx context.Context) DatasetInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetInputTypeOutput).ToDatasetInputTypePtrOutputWithContext(ctx)
}

// DatasetInputTypePtrInput is an input type that accepts DatasetInputTypeArgs, DatasetInputTypePtr and DatasetInputTypePtrOutput values.
// You can construct a concrete instance of `DatasetInputTypePtrInput` via:
//
//          DatasetInputTypeArgs{...}
//
//  or:
//
//          nil
type DatasetInputTypePtrInput interface {
	pulumi.Input

	ToDatasetInputTypePtrOutput() DatasetInputTypePtrOutput
	ToDatasetInputTypePtrOutputWithContext(context.Context) DatasetInputTypePtrOutput
}

type datasetInputTypePtrType DatasetInputTypeArgs

func DatasetInputTypePtr(v *DatasetInputTypeArgs) DatasetInputTypePtrInput {
	return (*datasetInputTypePtrType)(v)
}

func (*datasetInputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetInputType)(nil)).Elem()
}

func (i *datasetInputTypePtrType) ToDatasetInputTypePtrOutput() DatasetInputTypePtrOutput {
	return i.ToDatasetInputTypePtrOutputWithContext(context.Background())
}

func (i *datasetInputTypePtrType) ToDatasetInputTypePtrOutputWithContext(ctx context.Context) DatasetInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetInputTypePtrOutput)
}

// Input
type DatasetInputTypeOutput struct{ *pulumi.OutputState }

func (DatasetInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetInputType)(nil)).Elem()
}

func (o DatasetInputTypeOutput) ToDatasetInputTypeOutput() DatasetInputTypeOutput {
	return o
}

func (o DatasetInputTypeOutput) ToDatasetInputTypeOutputWithContext(ctx context.Context) DatasetInputTypeOutput {
	return o
}

func (o DatasetInputTypeOutput) ToDatasetInputTypePtrOutput() DatasetInputTypePtrOutput {
	return o.ToDatasetInputTypePtrOutputWithContext(context.Background())
}

func (o DatasetInputTypeOutput) ToDatasetInputTypePtrOutputWithContext(ctx context.Context) DatasetInputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetInputType) *DatasetInputType {
		return &v
	}).(DatasetInputTypePtrOutput)
}

func (o DatasetInputTypeOutput) DataCatalogInputDefinition() DatasetDataCatalogInputDefinitionPtrOutput {
	return o.ApplyT(func(v DatasetInputType) *DatasetDataCatalogInputDefinition { return v.DataCatalogInputDefinition }).(DatasetDataCatalogInputDefinitionPtrOutput)
}

func (o DatasetInputTypeOutput) DatabaseInputDefinition() DatasetDatabaseInputDefinitionPtrOutput {
	return o.ApplyT(func(v DatasetInputType) *DatasetDatabaseInputDefinition { return v.DatabaseInputDefinition }).(DatasetDatabaseInputDefinitionPtrOutput)
}

func (o DatasetInputTypeOutput) S3InputDefinition() DatasetS3LocationPtrOutput {
	return o.ApplyT(func(v DatasetInputType) *DatasetS3Location { return v.S3InputDefinition }).(DatasetS3LocationPtrOutput)
}

type DatasetInputTypePtrOutput struct{ *pulumi.OutputState }

func (DatasetInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetInputType)(nil)).Elem()
}

func (o DatasetInputTypePtrOutput) ToDatasetInputTypePtrOutput() DatasetInputTypePtrOutput {
	return o
}

func (o DatasetInputTypePtrOutput) ToDatasetInputTypePtrOutputWithContext(ctx context.Context) DatasetInputTypePtrOutput {
	return o
}

func (o DatasetInputTypePtrOutput) Elem() DatasetInputTypeOutput {
	return o.ApplyT(func(v *DatasetInputType) DatasetInputType {
		if v != nil {
			return *v
		}
		var ret DatasetInputType
		return ret
	}).(DatasetInputTypeOutput)
}

func (o DatasetInputTypePtrOutput) DataCatalogInputDefinition() DatasetDataCatalogInputDefinitionPtrOutput {
	return o.ApplyT(func(v *DatasetInputType) *DatasetDataCatalogInputDefinition {
		if v == nil {
			return nil
		}
		return v.DataCatalogInputDefinition
	}).(DatasetDataCatalogInputDefinitionPtrOutput)
}

func (o DatasetInputTypePtrOutput) DatabaseInputDefinition() DatasetDatabaseInputDefinitionPtrOutput {
	return o.ApplyT(func(v *DatasetInputType) *DatasetDatabaseInputDefinition {
		if v == nil {
			return nil
		}
		return v.DatabaseInputDefinition
	}).(DatasetDatabaseInputDefinitionPtrOutput)
}

func (o DatasetInputTypePtrOutput) S3InputDefinition() DatasetS3LocationPtrOutput {
	return o.ApplyT(func(v *DatasetInputType) *DatasetS3Location {
		if v == nil {
			return nil
		}
		return v.S3InputDefinition
	}).(DatasetS3LocationPtrOutput)
}

// Json options
type DatasetJsonOptions struct {
	MultiLine *bool `pulumi:"multiLine"`
}

// DatasetJsonOptionsInput is an input type that accepts DatasetJsonOptionsArgs and DatasetJsonOptionsOutput values.
// You can construct a concrete instance of `DatasetJsonOptionsInput` via:
//
//          DatasetJsonOptionsArgs{...}
type DatasetJsonOptionsInput interface {
	pulumi.Input

	ToDatasetJsonOptionsOutput() DatasetJsonOptionsOutput
	ToDatasetJsonOptionsOutputWithContext(context.Context) DatasetJsonOptionsOutput
}

// Json options
type DatasetJsonOptionsArgs struct {
	MultiLine pulumi.BoolPtrInput `pulumi:"multiLine"`
}

func (DatasetJsonOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonOptions)(nil)).Elem()
}

func (i DatasetJsonOptionsArgs) ToDatasetJsonOptionsOutput() DatasetJsonOptionsOutput {
	return i.ToDatasetJsonOptionsOutputWithContext(context.Background())
}

func (i DatasetJsonOptionsArgs) ToDatasetJsonOptionsOutputWithContext(ctx context.Context) DatasetJsonOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonOptionsOutput)
}

func (i DatasetJsonOptionsArgs) ToDatasetJsonOptionsPtrOutput() DatasetJsonOptionsPtrOutput {
	return i.ToDatasetJsonOptionsPtrOutputWithContext(context.Background())
}

func (i DatasetJsonOptionsArgs) ToDatasetJsonOptionsPtrOutputWithContext(ctx context.Context) DatasetJsonOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonOptionsOutput).ToDatasetJsonOptionsPtrOutputWithContext(ctx)
}

// DatasetJsonOptionsPtrInput is an input type that accepts DatasetJsonOptionsArgs, DatasetJsonOptionsPtr and DatasetJsonOptionsPtrOutput values.
// You can construct a concrete instance of `DatasetJsonOptionsPtrInput` via:
//
//          DatasetJsonOptionsArgs{...}
//
//  or:
//
//          nil
type DatasetJsonOptionsPtrInput interface {
	pulumi.Input

	ToDatasetJsonOptionsPtrOutput() DatasetJsonOptionsPtrOutput
	ToDatasetJsonOptionsPtrOutputWithContext(context.Context) DatasetJsonOptionsPtrOutput
}

type datasetJsonOptionsPtrType DatasetJsonOptionsArgs

func DatasetJsonOptionsPtr(v *DatasetJsonOptionsArgs) DatasetJsonOptionsPtrInput {
	return (*datasetJsonOptionsPtrType)(v)
}

func (*datasetJsonOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetJsonOptions)(nil)).Elem()
}

func (i *datasetJsonOptionsPtrType) ToDatasetJsonOptionsPtrOutput() DatasetJsonOptionsPtrOutput {
	return i.ToDatasetJsonOptionsPtrOutputWithContext(context.Background())
}

func (i *datasetJsonOptionsPtrType) ToDatasetJsonOptionsPtrOutputWithContext(ctx context.Context) DatasetJsonOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonOptionsPtrOutput)
}

// Json options
type DatasetJsonOptionsOutput struct{ *pulumi.OutputState }

func (DatasetJsonOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonOptions)(nil)).Elem()
}

func (o DatasetJsonOptionsOutput) ToDatasetJsonOptionsOutput() DatasetJsonOptionsOutput {
	return o
}

func (o DatasetJsonOptionsOutput) ToDatasetJsonOptionsOutputWithContext(ctx context.Context) DatasetJsonOptionsOutput {
	return o
}

func (o DatasetJsonOptionsOutput) ToDatasetJsonOptionsPtrOutput() DatasetJsonOptionsPtrOutput {
	return o.ToDatasetJsonOptionsPtrOutputWithContext(context.Background())
}

func (o DatasetJsonOptionsOutput) ToDatasetJsonOptionsPtrOutputWithContext(ctx context.Context) DatasetJsonOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetJsonOptions) *DatasetJsonOptions {
		return &v
	}).(DatasetJsonOptionsPtrOutput)
}

func (o DatasetJsonOptionsOutput) MultiLine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetJsonOptions) *bool { return v.MultiLine }).(pulumi.BoolPtrOutput)
}

type DatasetJsonOptionsPtrOutput struct{ *pulumi.OutputState }

func (DatasetJsonOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetJsonOptions)(nil)).Elem()
}

func (o DatasetJsonOptionsPtrOutput) ToDatasetJsonOptionsPtrOutput() DatasetJsonOptionsPtrOutput {
	return o
}

func (o DatasetJsonOptionsPtrOutput) ToDatasetJsonOptionsPtrOutputWithContext(ctx context.Context) DatasetJsonOptionsPtrOutput {
	return o
}

func (o DatasetJsonOptionsPtrOutput) Elem() DatasetJsonOptionsOutput {
	return o.ApplyT(func(v *DatasetJsonOptions) DatasetJsonOptions {
		if v != nil {
			return *v
		}
		var ret DatasetJsonOptions
		return ret
	}).(DatasetJsonOptionsOutput)
}

func (o DatasetJsonOptionsPtrOutput) MultiLine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetJsonOptions) *bool {
		if v == nil {
			return nil
		}
		return v.MultiLine
	}).(pulumi.BoolPtrOutput)
}

// Path options for dataset
type DatasetPathOptions struct {
	FilesLimit                *DatasetFilesLimit       `pulumi:"filesLimit"`
	LastModifiedDateCondition *DatasetFilterExpression `pulumi:"lastModifiedDateCondition"`
	Parameters                []DatasetPathParameter   `pulumi:"parameters"`
}

// DatasetPathOptionsInput is an input type that accepts DatasetPathOptionsArgs and DatasetPathOptionsOutput values.
// You can construct a concrete instance of `DatasetPathOptionsInput` via:
//
//          DatasetPathOptionsArgs{...}
type DatasetPathOptionsInput interface {
	pulumi.Input

	ToDatasetPathOptionsOutput() DatasetPathOptionsOutput
	ToDatasetPathOptionsOutputWithContext(context.Context) DatasetPathOptionsOutput
}

// Path options for dataset
type DatasetPathOptionsArgs struct {
	FilesLimit                DatasetFilesLimitPtrInput       `pulumi:"filesLimit"`
	LastModifiedDateCondition DatasetFilterExpressionPtrInput `pulumi:"lastModifiedDateCondition"`
	Parameters                DatasetPathParameterArrayInput  `pulumi:"parameters"`
}

func (DatasetPathOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPathOptions)(nil)).Elem()
}

func (i DatasetPathOptionsArgs) ToDatasetPathOptionsOutput() DatasetPathOptionsOutput {
	return i.ToDatasetPathOptionsOutputWithContext(context.Background())
}

func (i DatasetPathOptionsArgs) ToDatasetPathOptionsOutputWithContext(ctx context.Context) DatasetPathOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPathOptionsOutput)
}

func (i DatasetPathOptionsArgs) ToDatasetPathOptionsPtrOutput() DatasetPathOptionsPtrOutput {
	return i.ToDatasetPathOptionsPtrOutputWithContext(context.Background())
}

func (i DatasetPathOptionsArgs) ToDatasetPathOptionsPtrOutputWithContext(ctx context.Context) DatasetPathOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPathOptionsOutput).ToDatasetPathOptionsPtrOutputWithContext(ctx)
}

// DatasetPathOptionsPtrInput is an input type that accepts DatasetPathOptionsArgs, DatasetPathOptionsPtr and DatasetPathOptionsPtrOutput values.
// You can construct a concrete instance of `DatasetPathOptionsPtrInput` via:
//
//          DatasetPathOptionsArgs{...}
//
//  or:
//
//          nil
type DatasetPathOptionsPtrInput interface {
	pulumi.Input

	ToDatasetPathOptionsPtrOutput() DatasetPathOptionsPtrOutput
	ToDatasetPathOptionsPtrOutputWithContext(context.Context) DatasetPathOptionsPtrOutput
}

type datasetPathOptionsPtrType DatasetPathOptionsArgs

func DatasetPathOptionsPtr(v *DatasetPathOptionsArgs) DatasetPathOptionsPtrInput {
	return (*datasetPathOptionsPtrType)(v)
}

func (*datasetPathOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetPathOptions)(nil)).Elem()
}

func (i *datasetPathOptionsPtrType) ToDatasetPathOptionsPtrOutput() DatasetPathOptionsPtrOutput {
	return i.ToDatasetPathOptionsPtrOutputWithContext(context.Background())
}

func (i *datasetPathOptionsPtrType) ToDatasetPathOptionsPtrOutputWithContext(ctx context.Context) DatasetPathOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPathOptionsPtrOutput)
}

// Path options for dataset
type DatasetPathOptionsOutput struct{ *pulumi.OutputState }

func (DatasetPathOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPathOptions)(nil)).Elem()
}

func (o DatasetPathOptionsOutput) ToDatasetPathOptionsOutput() DatasetPathOptionsOutput {
	return o
}

func (o DatasetPathOptionsOutput) ToDatasetPathOptionsOutputWithContext(ctx context.Context) DatasetPathOptionsOutput {
	return o
}

func (o DatasetPathOptionsOutput) ToDatasetPathOptionsPtrOutput() DatasetPathOptionsPtrOutput {
	return o.ToDatasetPathOptionsPtrOutputWithContext(context.Background())
}

func (o DatasetPathOptionsOutput) ToDatasetPathOptionsPtrOutputWithContext(ctx context.Context) DatasetPathOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetPathOptions) *DatasetPathOptions {
		return &v
	}).(DatasetPathOptionsPtrOutput)
}

func (o DatasetPathOptionsOutput) FilesLimit() DatasetFilesLimitPtrOutput {
	return o.ApplyT(func(v DatasetPathOptions) *DatasetFilesLimit { return v.FilesLimit }).(DatasetFilesLimitPtrOutput)
}

func (o DatasetPathOptionsOutput) LastModifiedDateCondition() DatasetFilterExpressionPtrOutput {
	return o.ApplyT(func(v DatasetPathOptions) *DatasetFilterExpression { return v.LastModifiedDateCondition }).(DatasetFilterExpressionPtrOutput)
}

func (o DatasetPathOptionsOutput) Parameters() DatasetPathParameterArrayOutput {
	return o.ApplyT(func(v DatasetPathOptions) []DatasetPathParameter { return v.Parameters }).(DatasetPathParameterArrayOutput)
}

type DatasetPathOptionsPtrOutput struct{ *pulumi.OutputState }

func (DatasetPathOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetPathOptions)(nil)).Elem()
}

func (o DatasetPathOptionsPtrOutput) ToDatasetPathOptionsPtrOutput() DatasetPathOptionsPtrOutput {
	return o
}

func (o DatasetPathOptionsPtrOutput) ToDatasetPathOptionsPtrOutputWithContext(ctx context.Context) DatasetPathOptionsPtrOutput {
	return o
}

func (o DatasetPathOptionsPtrOutput) Elem() DatasetPathOptionsOutput {
	return o.ApplyT(func(v *DatasetPathOptions) DatasetPathOptions {
		if v != nil {
			return *v
		}
		var ret DatasetPathOptions
		return ret
	}).(DatasetPathOptionsOutput)
}

func (o DatasetPathOptionsPtrOutput) FilesLimit() DatasetFilesLimitPtrOutput {
	return o.ApplyT(func(v *DatasetPathOptions) *DatasetFilesLimit {
		if v == nil {
			return nil
		}
		return v.FilesLimit
	}).(DatasetFilesLimitPtrOutput)
}

func (o DatasetPathOptionsPtrOutput) LastModifiedDateCondition() DatasetFilterExpressionPtrOutput {
	return o.ApplyT(func(v *DatasetPathOptions) *DatasetFilterExpression {
		if v == nil {
			return nil
		}
		return v.LastModifiedDateCondition
	}).(DatasetFilterExpressionPtrOutput)
}

func (o DatasetPathOptionsPtrOutput) Parameters() DatasetPathParameterArrayOutput {
	return o.ApplyT(func(v *DatasetPathOptions) []DatasetPathParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(DatasetPathParameterArrayOutput)
}

// A key-value pair to associate dataset parameter name with its definition.
type DatasetPathParameter struct {
	DatasetParameter  DatasetDatasetParameter `pulumi:"datasetParameter"`
	PathParameterName string                  `pulumi:"pathParameterName"`
}

// DatasetPathParameterInput is an input type that accepts DatasetPathParameterArgs and DatasetPathParameterOutput values.
// You can construct a concrete instance of `DatasetPathParameterInput` via:
//
//          DatasetPathParameterArgs{...}
type DatasetPathParameterInput interface {
	pulumi.Input

	ToDatasetPathParameterOutput() DatasetPathParameterOutput
	ToDatasetPathParameterOutputWithContext(context.Context) DatasetPathParameterOutput
}

// A key-value pair to associate dataset parameter name with its definition.
type DatasetPathParameterArgs struct {
	DatasetParameter  DatasetDatasetParameterInput `pulumi:"datasetParameter"`
	PathParameterName pulumi.StringInput           `pulumi:"pathParameterName"`
}

func (DatasetPathParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPathParameter)(nil)).Elem()
}

func (i DatasetPathParameterArgs) ToDatasetPathParameterOutput() DatasetPathParameterOutput {
	return i.ToDatasetPathParameterOutputWithContext(context.Background())
}

func (i DatasetPathParameterArgs) ToDatasetPathParameterOutputWithContext(ctx context.Context) DatasetPathParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPathParameterOutput)
}

// DatasetPathParameterArrayInput is an input type that accepts DatasetPathParameterArray and DatasetPathParameterArrayOutput values.
// You can construct a concrete instance of `DatasetPathParameterArrayInput` via:
//
//          DatasetPathParameterArray{ DatasetPathParameterArgs{...} }
type DatasetPathParameterArrayInput interface {
	pulumi.Input

	ToDatasetPathParameterArrayOutput() DatasetPathParameterArrayOutput
	ToDatasetPathParameterArrayOutputWithContext(context.Context) DatasetPathParameterArrayOutput
}

type DatasetPathParameterArray []DatasetPathParameterInput

func (DatasetPathParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetPathParameter)(nil)).Elem()
}

func (i DatasetPathParameterArray) ToDatasetPathParameterArrayOutput() DatasetPathParameterArrayOutput {
	return i.ToDatasetPathParameterArrayOutputWithContext(context.Background())
}

func (i DatasetPathParameterArray) ToDatasetPathParameterArrayOutputWithContext(ctx context.Context) DatasetPathParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPathParameterArrayOutput)
}

// A key-value pair to associate dataset parameter name with its definition.
type DatasetPathParameterOutput struct{ *pulumi.OutputState }

func (DatasetPathParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPathParameter)(nil)).Elem()
}

func (o DatasetPathParameterOutput) ToDatasetPathParameterOutput() DatasetPathParameterOutput {
	return o
}

func (o DatasetPathParameterOutput) ToDatasetPathParameterOutputWithContext(ctx context.Context) DatasetPathParameterOutput {
	return o
}

func (o DatasetPathParameterOutput) DatasetParameter() DatasetDatasetParameterOutput {
	return o.ApplyT(func(v DatasetPathParameter) DatasetDatasetParameter { return v.DatasetParameter }).(DatasetDatasetParameterOutput)
}

func (o DatasetPathParameterOutput) PathParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetPathParameter) string { return v.PathParameterName }).(pulumi.StringOutput)
}

type DatasetPathParameterArrayOutput struct{ *pulumi.OutputState }

func (DatasetPathParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetPathParameter)(nil)).Elem()
}

func (o DatasetPathParameterArrayOutput) ToDatasetPathParameterArrayOutput() DatasetPathParameterArrayOutput {
	return o
}

func (o DatasetPathParameterArrayOutput) ToDatasetPathParameterArrayOutputWithContext(ctx context.Context) DatasetPathParameterArrayOutput {
	return o
}

func (o DatasetPathParameterArrayOutput) Index(i pulumi.IntInput) DatasetPathParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetPathParameter {
		return vs[0].([]DatasetPathParameter)[vs[1].(int)]
	}).(DatasetPathParameterOutput)
}

// Input location
type DatasetS3Location struct {
	Bucket string  `pulumi:"bucket"`
	Key    *string `pulumi:"key"`
}

// DatasetS3LocationInput is an input type that accepts DatasetS3LocationArgs and DatasetS3LocationOutput values.
// You can construct a concrete instance of `DatasetS3LocationInput` via:
//
//          DatasetS3LocationArgs{...}
type DatasetS3LocationInput interface {
	pulumi.Input

	ToDatasetS3LocationOutput() DatasetS3LocationOutput
	ToDatasetS3LocationOutputWithContext(context.Context) DatasetS3LocationOutput
}

// Input location
type DatasetS3LocationArgs struct {
	Bucket pulumi.StringInput    `pulumi:"bucket"`
	Key    pulumi.StringPtrInput `pulumi:"key"`
}

func (DatasetS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetS3Location)(nil)).Elem()
}

func (i DatasetS3LocationArgs) ToDatasetS3LocationOutput() DatasetS3LocationOutput {
	return i.ToDatasetS3LocationOutputWithContext(context.Background())
}

func (i DatasetS3LocationArgs) ToDatasetS3LocationOutputWithContext(ctx context.Context) DatasetS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetS3LocationOutput)
}

func (i DatasetS3LocationArgs) ToDatasetS3LocationPtrOutput() DatasetS3LocationPtrOutput {
	return i.ToDatasetS3LocationPtrOutputWithContext(context.Background())
}

func (i DatasetS3LocationArgs) ToDatasetS3LocationPtrOutputWithContext(ctx context.Context) DatasetS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetS3LocationOutput).ToDatasetS3LocationPtrOutputWithContext(ctx)
}

// DatasetS3LocationPtrInput is an input type that accepts DatasetS3LocationArgs, DatasetS3LocationPtr and DatasetS3LocationPtrOutput values.
// You can construct a concrete instance of `DatasetS3LocationPtrInput` via:
//
//          DatasetS3LocationArgs{...}
//
//  or:
//
//          nil
type DatasetS3LocationPtrInput interface {
	pulumi.Input

	ToDatasetS3LocationPtrOutput() DatasetS3LocationPtrOutput
	ToDatasetS3LocationPtrOutputWithContext(context.Context) DatasetS3LocationPtrOutput
}

type datasetS3LocationPtrType DatasetS3LocationArgs

func DatasetS3LocationPtr(v *DatasetS3LocationArgs) DatasetS3LocationPtrInput {
	return (*datasetS3LocationPtrType)(v)
}

func (*datasetS3LocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetS3Location)(nil)).Elem()
}

func (i *datasetS3LocationPtrType) ToDatasetS3LocationPtrOutput() DatasetS3LocationPtrOutput {
	return i.ToDatasetS3LocationPtrOutputWithContext(context.Background())
}

func (i *datasetS3LocationPtrType) ToDatasetS3LocationPtrOutputWithContext(ctx context.Context) DatasetS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetS3LocationPtrOutput)
}

// Input location
type DatasetS3LocationOutput struct{ *pulumi.OutputState }

func (DatasetS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetS3Location)(nil)).Elem()
}

func (o DatasetS3LocationOutput) ToDatasetS3LocationOutput() DatasetS3LocationOutput {
	return o
}

func (o DatasetS3LocationOutput) ToDatasetS3LocationOutputWithContext(ctx context.Context) DatasetS3LocationOutput {
	return o
}

func (o DatasetS3LocationOutput) ToDatasetS3LocationPtrOutput() DatasetS3LocationPtrOutput {
	return o.ToDatasetS3LocationPtrOutputWithContext(context.Background())
}

func (o DatasetS3LocationOutput) ToDatasetS3LocationPtrOutputWithContext(ctx context.Context) DatasetS3LocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetS3Location) *DatasetS3Location {
		return &v
	}).(DatasetS3LocationPtrOutput)
}

func (o DatasetS3LocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetS3Location) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o DatasetS3LocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetS3Location) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type DatasetS3LocationPtrOutput struct{ *pulumi.OutputState }

func (DatasetS3LocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetS3Location)(nil)).Elem()
}

func (o DatasetS3LocationPtrOutput) ToDatasetS3LocationPtrOutput() DatasetS3LocationPtrOutput {
	return o
}

func (o DatasetS3LocationPtrOutput) ToDatasetS3LocationPtrOutputWithContext(ctx context.Context) DatasetS3LocationPtrOutput {
	return o
}

func (o DatasetS3LocationPtrOutput) Elem() DatasetS3LocationOutput {
	return o.ApplyT(func(v *DatasetS3Location) DatasetS3Location {
		if v != nil {
			return *v
		}
		var ret DatasetS3Location
		return ret
	}).(DatasetS3LocationOutput)
}

func (o DatasetS3LocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetS3Location) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

func (o DatasetS3LocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type DatasetTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DatasetTagInput is an input type that accepts DatasetTagArgs and DatasetTagOutput values.
// You can construct a concrete instance of `DatasetTagInput` via:
//
//          DatasetTagArgs{...}
type DatasetTagInput interface {
	pulumi.Input

	ToDatasetTagOutput() DatasetTagOutput
	ToDatasetTagOutputWithContext(context.Context) DatasetTagOutput
}

// A key-value pair to associate with a resource.
type DatasetTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DatasetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTag)(nil)).Elem()
}

func (i DatasetTagArgs) ToDatasetTagOutput() DatasetTagOutput {
	return i.ToDatasetTagOutputWithContext(context.Background())
}

func (i DatasetTagArgs) ToDatasetTagOutputWithContext(ctx context.Context) DatasetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTagOutput)
}

// DatasetTagArrayInput is an input type that accepts DatasetTagArray and DatasetTagArrayOutput values.
// You can construct a concrete instance of `DatasetTagArrayInput` via:
//
//          DatasetTagArray{ DatasetTagArgs{...} }
type DatasetTagArrayInput interface {
	pulumi.Input

	ToDatasetTagArrayOutput() DatasetTagArrayOutput
	ToDatasetTagArrayOutputWithContext(context.Context) DatasetTagArrayOutput
}

type DatasetTagArray []DatasetTagInput

func (DatasetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetTag)(nil)).Elem()
}

func (i DatasetTagArray) ToDatasetTagArrayOutput() DatasetTagArrayOutput {
	return i.ToDatasetTagArrayOutputWithContext(context.Background())
}

func (i DatasetTagArray) ToDatasetTagArrayOutputWithContext(ctx context.Context) DatasetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTagArrayOutput)
}

// A key-value pair to associate with a resource.
type DatasetTagOutput struct{ *pulumi.OutputState }

func (DatasetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTag)(nil)).Elem()
}

func (o DatasetTagOutput) ToDatasetTagOutput() DatasetTagOutput {
	return o
}

func (o DatasetTagOutput) ToDatasetTagOutputWithContext(ctx context.Context) DatasetTagOutput {
	return o
}

func (o DatasetTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DatasetTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTag) string { return v.Value }).(pulumi.StringOutput)
}

type DatasetTagArrayOutput struct{ *pulumi.OutputState }

func (DatasetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetTag)(nil)).Elem()
}

func (o DatasetTagArrayOutput) ToDatasetTagArrayOutput() DatasetTagArrayOutput {
	return o
}

func (o DatasetTagArrayOutput) ToDatasetTagArrayOutputWithContext(ctx context.Context) DatasetTagArrayOutput {
	return o
}

func (o DatasetTagArrayOutput) Index(i pulumi.IntInput) DatasetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetTag {
		return vs[0].([]DatasetTag)[vs[1].(int)]
	}).(DatasetTagOutput)
}

type JobColumnSelector struct {
	Name  *string `pulumi:"name"`
	Regex *string `pulumi:"regex"`
}

// JobColumnSelectorInput is an input type that accepts JobColumnSelectorArgs and JobColumnSelectorOutput values.
// You can construct a concrete instance of `JobColumnSelectorInput` via:
//
//          JobColumnSelectorArgs{...}
type JobColumnSelectorInput interface {
	pulumi.Input

	ToJobColumnSelectorOutput() JobColumnSelectorOutput
	ToJobColumnSelectorOutputWithContext(context.Context) JobColumnSelectorOutput
}

type JobColumnSelectorArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Regex pulumi.StringPtrInput `pulumi:"regex"`
}

func (JobColumnSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobColumnSelector)(nil)).Elem()
}

func (i JobColumnSelectorArgs) ToJobColumnSelectorOutput() JobColumnSelectorOutput {
	return i.ToJobColumnSelectorOutputWithContext(context.Background())
}

func (i JobColumnSelectorArgs) ToJobColumnSelectorOutputWithContext(ctx context.Context) JobColumnSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobColumnSelectorOutput)
}

// JobColumnSelectorArrayInput is an input type that accepts JobColumnSelectorArray and JobColumnSelectorArrayOutput values.
// You can construct a concrete instance of `JobColumnSelectorArrayInput` via:
//
//          JobColumnSelectorArray{ JobColumnSelectorArgs{...} }
type JobColumnSelectorArrayInput interface {
	pulumi.Input

	ToJobColumnSelectorArrayOutput() JobColumnSelectorArrayOutput
	ToJobColumnSelectorArrayOutputWithContext(context.Context) JobColumnSelectorArrayOutput
}

type JobColumnSelectorArray []JobColumnSelectorInput

func (JobColumnSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobColumnSelector)(nil)).Elem()
}

func (i JobColumnSelectorArray) ToJobColumnSelectorArrayOutput() JobColumnSelectorArrayOutput {
	return i.ToJobColumnSelectorArrayOutputWithContext(context.Background())
}

func (i JobColumnSelectorArray) ToJobColumnSelectorArrayOutputWithContext(ctx context.Context) JobColumnSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobColumnSelectorArrayOutput)
}

type JobColumnSelectorOutput struct{ *pulumi.OutputState }

func (JobColumnSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobColumnSelector)(nil)).Elem()
}

func (o JobColumnSelectorOutput) ToJobColumnSelectorOutput() JobColumnSelectorOutput {
	return o
}

func (o JobColumnSelectorOutput) ToJobColumnSelectorOutputWithContext(ctx context.Context) JobColumnSelectorOutput {
	return o
}

func (o JobColumnSelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobColumnSelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o JobColumnSelectorOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobColumnSelector) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

type JobColumnSelectorArrayOutput struct{ *pulumi.OutputState }

func (JobColumnSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobColumnSelector)(nil)).Elem()
}

func (o JobColumnSelectorArrayOutput) ToJobColumnSelectorArrayOutput() JobColumnSelectorArrayOutput {
	return o
}

func (o JobColumnSelectorArrayOutput) ToJobColumnSelectorArrayOutputWithContext(ctx context.Context) JobColumnSelectorArrayOutput {
	return o
}

func (o JobColumnSelectorArrayOutput) Index(i pulumi.IntInput) JobColumnSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobColumnSelector {
		return vs[0].([]JobColumnSelector)[vs[1].(int)]
	}).(JobColumnSelectorOutput)
}

type JobColumnStatisticsConfiguration struct {
	Selectors  []JobColumnSelector        `pulumi:"selectors"`
	Statistics JobStatisticsConfiguration `pulumi:"statistics"`
}

// JobColumnStatisticsConfigurationInput is an input type that accepts JobColumnStatisticsConfigurationArgs and JobColumnStatisticsConfigurationOutput values.
// You can construct a concrete instance of `JobColumnStatisticsConfigurationInput` via:
//
//          JobColumnStatisticsConfigurationArgs{...}
type JobColumnStatisticsConfigurationInput interface {
	pulumi.Input

	ToJobColumnStatisticsConfigurationOutput() JobColumnStatisticsConfigurationOutput
	ToJobColumnStatisticsConfigurationOutputWithContext(context.Context) JobColumnStatisticsConfigurationOutput
}

type JobColumnStatisticsConfigurationArgs struct {
	Selectors  JobColumnSelectorArrayInput     `pulumi:"selectors"`
	Statistics JobStatisticsConfigurationInput `pulumi:"statistics"`
}

func (JobColumnStatisticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobColumnStatisticsConfiguration)(nil)).Elem()
}

func (i JobColumnStatisticsConfigurationArgs) ToJobColumnStatisticsConfigurationOutput() JobColumnStatisticsConfigurationOutput {
	return i.ToJobColumnStatisticsConfigurationOutputWithContext(context.Background())
}

func (i JobColumnStatisticsConfigurationArgs) ToJobColumnStatisticsConfigurationOutputWithContext(ctx context.Context) JobColumnStatisticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobColumnStatisticsConfigurationOutput)
}

// JobColumnStatisticsConfigurationArrayInput is an input type that accepts JobColumnStatisticsConfigurationArray and JobColumnStatisticsConfigurationArrayOutput values.
// You can construct a concrete instance of `JobColumnStatisticsConfigurationArrayInput` via:
//
//          JobColumnStatisticsConfigurationArray{ JobColumnStatisticsConfigurationArgs{...} }
type JobColumnStatisticsConfigurationArrayInput interface {
	pulumi.Input

	ToJobColumnStatisticsConfigurationArrayOutput() JobColumnStatisticsConfigurationArrayOutput
	ToJobColumnStatisticsConfigurationArrayOutputWithContext(context.Context) JobColumnStatisticsConfigurationArrayOutput
}

type JobColumnStatisticsConfigurationArray []JobColumnStatisticsConfigurationInput

func (JobColumnStatisticsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobColumnStatisticsConfiguration)(nil)).Elem()
}

func (i JobColumnStatisticsConfigurationArray) ToJobColumnStatisticsConfigurationArrayOutput() JobColumnStatisticsConfigurationArrayOutput {
	return i.ToJobColumnStatisticsConfigurationArrayOutputWithContext(context.Background())
}

func (i JobColumnStatisticsConfigurationArray) ToJobColumnStatisticsConfigurationArrayOutputWithContext(ctx context.Context) JobColumnStatisticsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobColumnStatisticsConfigurationArrayOutput)
}

type JobColumnStatisticsConfigurationOutput struct{ *pulumi.OutputState }

func (JobColumnStatisticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobColumnStatisticsConfiguration)(nil)).Elem()
}

func (o JobColumnStatisticsConfigurationOutput) ToJobColumnStatisticsConfigurationOutput() JobColumnStatisticsConfigurationOutput {
	return o
}

func (o JobColumnStatisticsConfigurationOutput) ToJobColumnStatisticsConfigurationOutputWithContext(ctx context.Context) JobColumnStatisticsConfigurationOutput {
	return o
}

func (o JobColumnStatisticsConfigurationOutput) Selectors() JobColumnSelectorArrayOutput {
	return o.ApplyT(func(v JobColumnStatisticsConfiguration) []JobColumnSelector { return v.Selectors }).(JobColumnSelectorArrayOutput)
}

func (o JobColumnStatisticsConfigurationOutput) Statistics() JobStatisticsConfigurationOutput {
	return o.ApplyT(func(v JobColumnStatisticsConfiguration) JobStatisticsConfiguration { return v.Statistics }).(JobStatisticsConfigurationOutput)
}

type JobColumnStatisticsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (JobColumnStatisticsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobColumnStatisticsConfiguration)(nil)).Elem()
}

func (o JobColumnStatisticsConfigurationArrayOutput) ToJobColumnStatisticsConfigurationArrayOutput() JobColumnStatisticsConfigurationArrayOutput {
	return o
}

func (o JobColumnStatisticsConfigurationArrayOutput) ToJobColumnStatisticsConfigurationArrayOutputWithContext(ctx context.Context) JobColumnStatisticsConfigurationArrayOutput {
	return o
}

func (o JobColumnStatisticsConfigurationArrayOutput) Index(i pulumi.IntInput) JobColumnStatisticsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobColumnStatisticsConfiguration {
		return vs[0].([]JobColumnStatisticsConfiguration)[vs[1].(int)]
	}).(JobColumnStatisticsConfigurationOutput)
}

// Output Csv options
type JobCsvOutputOptions struct {
	Delimiter *string `pulumi:"delimiter"`
}

// JobCsvOutputOptionsInput is an input type that accepts JobCsvOutputOptionsArgs and JobCsvOutputOptionsOutput values.
// You can construct a concrete instance of `JobCsvOutputOptionsInput` via:
//
//          JobCsvOutputOptionsArgs{...}
type JobCsvOutputOptionsInput interface {
	pulumi.Input

	ToJobCsvOutputOptionsOutput() JobCsvOutputOptionsOutput
	ToJobCsvOutputOptionsOutputWithContext(context.Context) JobCsvOutputOptionsOutput
}

// Output Csv options
type JobCsvOutputOptionsArgs struct {
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
}

func (JobCsvOutputOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCsvOutputOptions)(nil)).Elem()
}

func (i JobCsvOutputOptionsArgs) ToJobCsvOutputOptionsOutput() JobCsvOutputOptionsOutput {
	return i.ToJobCsvOutputOptionsOutputWithContext(context.Background())
}

func (i JobCsvOutputOptionsArgs) ToJobCsvOutputOptionsOutputWithContext(ctx context.Context) JobCsvOutputOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCsvOutputOptionsOutput)
}

func (i JobCsvOutputOptionsArgs) ToJobCsvOutputOptionsPtrOutput() JobCsvOutputOptionsPtrOutput {
	return i.ToJobCsvOutputOptionsPtrOutputWithContext(context.Background())
}

func (i JobCsvOutputOptionsArgs) ToJobCsvOutputOptionsPtrOutputWithContext(ctx context.Context) JobCsvOutputOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCsvOutputOptionsOutput).ToJobCsvOutputOptionsPtrOutputWithContext(ctx)
}

// JobCsvOutputOptionsPtrInput is an input type that accepts JobCsvOutputOptionsArgs, JobCsvOutputOptionsPtr and JobCsvOutputOptionsPtrOutput values.
// You can construct a concrete instance of `JobCsvOutputOptionsPtrInput` via:
//
//          JobCsvOutputOptionsArgs{...}
//
//  or:
//
//          nil
type JobCsvOutputOptionsPtrInput interface {
	pulumi.Input

	ToJobCsvOutputOptionsPtrOutput() JobCsvOutputOptionsPtrOutput
	ToJobCsvOutputOptionsPtrOutputWithContext(context.Context) JobCsvOutputOptionsPtrOutput
}

type jobCsvOutputOptionsPtrType JobCsvOutputOptionsArgs

func JobCsvOutputOptionsPtr(v *JobCsvOutputOptionsArgs) JobCsvOutputOptionsPtrInput {
	return (*jobCsvOutputOptionsPtrType)(v)
}

func (*jobCsvOutputOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCsvOutputOptions)(nil)).Elem()
}

func (i *jobCsvOutputOptionsPtrType) ToJobCsvOutputOptionsPtrOutput() JobCsvOutputOptionsPtrOutput {
	return i.ToJobCsvOutputOptionsPtrOutputWithContext(context.Background())
}

func (i *jobCsvOutputOptionsPtrType) ToJobCsvOutputOptionsPtrOutputWithContext(ctx context.Context) JobCsvOutputOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCsvOutputOptionsPtrOutput)
}

// Output Csv options
type JobCsvOutputOptionsOutput struct{ *pulumi.OutputState }

func (JobCsvOutputOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCsvOutputOptions)(nil)).Elem()
}

func (o JobCsvOutputOptionsOutput) ToJobCsvOutputOptionsOutput() JobCsvOutputOptionsOutput {
	return o
}

func (o JobCsvOutputOptionsOutput) ToJobCsvOutputOptionsOutputWithContext(ctx context.Context) JobCsvOutputOptionsOutput {
	return o
}

func (o JobCsvOutputOptionsOutput) ToJobCsvOutputOptionsPtrOutput() JobCsvOutputOptionsPtrOutput {
	return o.ToJobCsvOutputOptionsPtrOutputWithContext(context.Background())
}

func (o JobCsvOutputOptionsOutput) ToJobCsvOutputOptionsPtrOutputWithContext(ctx context.Context) JobCsvOutputOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobCsvOutputOptions) *JobCsvOutputOptions {
		return &v
	}).(JobCsvOutputOptionsPtrOutput)
}

func (o JobCsvOutputOptionsOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCsvOutputOptions) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

type JobCsvOutputOptionsPtrOutput struct{ *pulumi.OutputState }

func (JobCsvOutputOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCsvOutputOptions)(nil)).Elem()
}

func (o JobCsvOutputOptionsPtrOutput) ToJobCsvOutputOptionsPtrOutput() JobCsvOutputOptionsPtrOutput {
	return o
}

func (o JobCsvOutputOptionsPtrOutput) ToJobCsvOutputOptionsPtrOutputWithContext(ctx context.Context) JobCsvOutputOptionsPtrOutput {
	return o
}

func (o JobCsvOutputOptionsPtrOutput) Elem() JobCsvOutputOptionsOutput {
	return o.ApplyT(func(v *JobCsvOutputOptions) JobCsvOutputOptions {
		if v != nil {
			return *v
		}
		var ret JobCsvOutputOptions
		return ret
	}).(JobCsvOutputOptionsOutput)
}

func (o JobCsvOutputOptionsPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCsvOutputOptions) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

type JobDataCatalogOutput struct {
	CatalogId       *string                        `pulumi:"catalogId"`
	DatabaseName    string                         `pulumi:"databaseName"`
	DatabaseOptions *JobDatabaseTableOutputOptions `pulumi:"databaseOptions"`
	Overwrite       *bool                          `pulumi:"overwrite"`
	S3Options       *JobS3TableOutputOptions       `pulumi:"s3Options"`
	TableName       string                         `pulumi:"tableName"`
}

// JobDataCatalogOutputInput is an input type that accepts JobDataCatalogOutputArgs and JobDataCatalogOutputOutput values.
// You can construct a concrete instance of `JobDataCatalogOutputInput` via:
//
//          JobDataCatalogOutputArgs{...}
type JobDataCatalogOutputInput interface {
	pulumi.Input

	ToJobDataCatalogOutputOutput() JobDataCatalogOutputOutput
	ToJobDataCatalogOutputOutputWithContext(context.Context) JobDataCatalogOutputOutput
}

type JobDataCatalogOutputArgs struct {
	CatalogId       pulumi.StringPtrInput                 `pulumi:"catalogId"`
	DatabaseName    pulumi.StringInput                    `pulumi:"databaseName"`
	DatabaseOptions JobDatabaseTableOutputOptionsPtrInput `pulumi:"databaseOptions"`
	Overwrite       pulumi.BoolPtrInput                   `pulumi:"overwrite"`
	S3Options       JobS3TableOutputOptionsPtrInput       `pulumi:"s3Options"`
	TableName       pulumi.StringInput                    `pulumi:"tableName"`
}

func (JobDataCatalogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDataCatalogOutput)(nil)).Elem()
}

func (i JobDataCatalogOutputArgs) ToJobDataCatalogOutputOutput() JobDataCatalogOutputOutput {
	return i.ToJobDataCatalogOutputOutputWithContext(context.Background())
}

func (i JobDataCatalogOutputArgs) ToJobDataCatalogOutputOutputWithContext(ctx context.Context) JobDataCatalogOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDataCatalogOutputOutput)
}

// JobDataCatalogOutputArrayInput is an input type that accepts JobDataCatalogOutputArray and JobDataCatalogOutputArrayOutput values.
// You can construct a concrete instance of `JobDataCatalogOutputArrayInput` via:
//
//          JobDataCatalogOutputArray{ JobDataCatalogOutputArgs{...} }
type JobDataCatalogOutputArrayInput interface {
	pulumi.Input

	ToJobDataCatalogOutputArrayOutput() JobDataCatalogOutputArrayOutput
	ToJobDataCatalogOutputArrayOutputWithContext(context.Context) JobDataCatalogOutputArrayOutput
}

type JobDataCatalogOutputArray []JobDataCatalogOutputInput

func (JobDataCatalogOutputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDataCatalogOutput)(nil)).Elem()
}

func (i JobDataCatalogOutputArray) ToJobDataCatalogOutputArrayOutput() JobDataCatalogOutputArrayOutput {
	return i.ToJobDataCatalogOutputArrayOutputWithContext(context.Background())
}

func (i JobDataCatalogOutputArray) ToJobDataCatalogOutputArrayOutputWithContext(ctx context.Context) JobDataCatalogOutputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDataCatalogOutputArrayOutput)
}

type JobDataCatalogOutputOutput struct{ *pulumi.OutputState }

func (JobDataCatalogOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDataCatalogOutput)(nil)).Elem()
}

func (o JobDataCatalogOutputOutput) ToJobDataCatalogOutputOutput() JobDataCatalogOutputOutput {
	return o
}

func (o JobDataCatalogOutputOutput) ToJobDataCatalogOutputOutputWithContext(ctx context.Context) JobDataCatalogOutputOutput {
	return o
}

func (o JobDataCatalogOutputOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDataCatalogOutput) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o JobDataCatalogOutputOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v JobDataCatalogOutput) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o JobDataCatalogOutputOutput) DatabaseOptions() JobDatabaseTableOutputOptionsPtrOutput {
	return o.ApplyT(func(v JobDataCatalogOutput) *JobDatabaseTableOutputOptions { return v.DatabaseOptions }).(JobDatabaseTableOutputOptionsPtrOutput)
}

func (o JobDataCatalogOutputOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobDataCatalogOutput) *bool { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

func (o JobDataCatalogOutputOutput) S3Options() JobS3TableOutputOptionsPtrOutput {
	return o.ApplyT(func(v JobDataCatalogOutput) *JobS3TableOutputOptions { return v.S3Options }).(JobS3TableOutputOptionsPtrOutput)
}

func (o JobDataCatalogOutputOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v JobDataCatalogOutput) string { return v.TableName }).(pulumi.StringOutput)
}

type JobDataCatalogOutputArrayOutput struct{ *pulumi.OutputState }

func (JobDataCatalogOutputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDataCatalogOutput)(nil)).Elem()
}

func (o JobDataCatalogOutputArrayOutput) ToJobDataCatalogOutputArrayOutput() JobDataCatalogOutputArrayOutput {
	return o
}

func (o JobDataCatalogOutputArrayOutput) ToJobDataCatalogOutputArrayOutputWithContext(ctx context.Context) JobDataCatalogOutputArrayOutput {
	return o
}

func (o JobDataCatalogOutputArrayOutput) Index(i pulumi.IntInput) JobDataCatalogOutputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDataCatalogOutput {
		return vs[0].([]JobDataCatalogOutput)[vs[1].(int)]
	}).(JobDataCatalogOutputOutput)
}

type JobDatabaseOutput struct {
	DatabaseOptions JobDatabaseTableOutputOptions `pulumi:"databaseOptions"`
	// Database table name
	DatabaseOutputMode *string `pulumi:"databaseOutputMode"`
	// Glue connection name
	GlueConnectionName string `pulumi:"glueConnectionName"`
}

// JobDatabaseOutputInput is an input type that accepts JobDatabaseOutputArgs and JobDatabaseOutputOutput values.
// You can construct a concrete instance of `JobDatabaseOutputInput` via:
//
//          JobDatabaseOutputArgs{...}
type JobDatabaseOutputInput interface {
	pulumi.Input

	ToJobDatabaseOutputOutput() JobDatabaseOutputOutput
	ToJobDatabaseOutputOutputWithContext(context.Context) JobDatabaseOutputOutput
}

type JobDatabaseOutputArgs struct {
	DatabaseOptions JobDatabaseTableOutputOptionsInput `pulumi:"databaseOptions"`
	// Database table name
	DatabaseOutputMode pulumi.StringPtrInput `pulumi:"databaseOutputMode"`
	// Glue connection name
	GlueConnectionName pulumi.StringInput `pulumi:"glueConnectionName"`
}

func (JobDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDatabaseOutput)(nil)).Elem()
}

func (i JobDatabaseOutputArgs) ToJobDatabaseOutputOutput() JobDatabaseOutputOutput {
	return i.ToJobDatabaseOutputOutputWithContext(context.Background())
}

func (i JobDatabaseOutputArgs) ToJobDatabaseOutputOutputWithContext(ctx context.Context) JobDatabaseOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDatabaseOutputOutput)
}

// JobDatabaseOutputArrayInput is an input type that accepts JobDatabaseOutputArray and JobDatabaseOutputArrayOutput values.
// You can construct a concrete instance of `JobDatabaseOutputArrayInput` via:
//
//          JobDatabaseOutputArray{ JobDatabaseOutputArgs{...} }
type JobDatabaseOutputArrayInput interface {
	pulumi.Input

	ToJobDatabaseOutputArrayOutput() JobDatabaseOutputArrayOutput
	ToJobDatabaseOutputArrayOutputWithContext(context.Context) JobDatabaseOutputArrayOutput
}

type JobDatabaseOutputArray []JobDatabaseOutputInput

func (JobDatabaseOutputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDatabaseOutput)(nil)).Elem()
}

func (i JobDatabaseOutputArray) ToJobDatabaseOutputArrayOutput() JobDatabaseOutputArrayOutput {
	return i.ToJobDatabaseOutputArrayOutputWithContext(context.Background())
}

func (i JobDatabaseOutputArray) ToJobDatabaseOutputArrayOutputWithContext(ctx context.Context) JobDatabaseOutputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDatabaseOutputArrayOutput)
}

type JobDatabaseOutputOutput struct{ *pulumi.OutputState }

func (JobDatabaseOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDatabaseOutput)(nil)).Elem()
}

func (o JobDatabaseOutputOutput) ToJobDatabaseOutputOutput() JobDatabaseOutputOutput {
	return o
}

func (o JobDatabaseOutputOutput) ToJobDatabaseOutputOutputWithContext(ctx context.Context) JobDatabaseOutputOutput {
	return o
}

func (o JobDatabaseOutputOutput) DatabaseOptions() JobDatabaseTableOutputOptionsOutput {
	return o.ApplyT(func(v JobDatabaseOutput) JobDatabaseTableOutputOptions { return v.DatabaseOptions }).(JobDatabaseTableOutputOptionsOutput)
}

// Database table name
func (o JobDatabaseOutputOutput) DatabaseOutputMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDatabaseOutput) *string { return v.DatabaseOutputMode }).(pulumi.StringPtrOutput)
}

// Glue connection name
func (o JobDatabaseOutputOutput) GlueConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v JobDatabaseOutput) string { return v.GlueConnectionName }).(pulumi.StringOutput)
}

type JobDatabaseOutputArrayOutput struct{ *pulumi.OutputState }

func (JobDatabaseOutputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobDatabaseOutput)(nil)).Elem()
}

func (o JobDatabaseOutputArrayOutput) ToJobDatabaseOutputArrayOutput() JobDatabaseOutputArrayOutput {
	return o
}

func (o JobDatabaseOutputArrayOutput) ToJobDatabaseOutputArrayOutputWithContext(ctx context.Context) JobDatabaseOutputArrayOutput {
	return o
}

func (o JobDatabaseOutputArrayOutput) Index(i pulumi.IntInput) JobDatabaseOutputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobDatabaseOutput {
		return vs[0].([]JobDatabaseOutput)[vs[1].(int)]
	}).(JobDatabaseOutputOutput)
}

type JobDatabaseTableOutputOptions struct {
	TableName     string         `pulumi:"tableName"`
	TempDirectory *JobS3Location `pulumi:"tempDirectory"`
}

// JobDatabaseTableOutputOptionsInput is an input type that accepts JobDatabaseTableOutputOptionsArgs and JobDatabaseTableOutputOptionsOutput values.
// You can construct a concrete instance of `JobDatabaseTableOutputOptionsInput` via:
//
//          JobDatabaseTableOutputOptionsArgs{...}
type JobDatabaseTableOutputOptionsInput interface {
	pulumi.Input

	ToJobDatabaseTableOutputOptionsOutput() JobDatabaseTableOutputOptionsOutput
	ToJobDatabaseTableOutputOptionsOutputWithContext(context.Context) JobDatabaseTableOutputOptionsOutput
}

type JobDatabaseTableOutputOptionsArgs struct {
	TableName     pulumi.StringInput    `pulumi:"tableName"`
	TempDirectory JobS3LocationPtrInput `pulumi:"tempDirectory"`
}

func (JobDatabaseTableOutputOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDatabaseTableOutputOptions)(nil)).Elem()
}

func (i JobDatabaseTableOutputOptionsArgs) ToJobDatabaseTableOutputOptionsOutput() JobDatabaseTableOutputOptionsOutput {
	return i.ToJobDatabaseTableOutputOptionsOutputWithContext(context.Background())
}

func (i JobDatabaseTableOutputOptionsArgs) ToJobDatabaseTableOutputOptionsOutputWithContext(ctx context.Context) JobDatabaseTableOutputOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDatabaseTableOutputOptionsOutput)
}

func (i JobDatabaseTableOutputOptionsArgs) ToJobDatabaseTableOutputOptionsPtrOutput() JobDatabaseTableOutputOptionsPtrOutput {
	return i.ToJobDatabaseTableOutputOptionsPtrOutputWithContext(context.Background())
}

func (i JobDatabaseTableOutputOptionsArgs) ToJobDatabaseTableOutputOptionsPtrOutputWithContext(ctx context.Context) JobDatabaseTableOutputOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDatabaseTableOutputOptionsOutput).ToJobDatabaseTableOutputOptionsPtrOutputWithContext(ctx)
}

// JobDatabaseTableOutputOptionsPtrInput is an input type that accepts JobDatabaseTableOutputOptionsArgs, JobDatabaseTableOutputOptionsPtr and JobDatabaseTableOutputOptionsPtrOutput values.
// You can construct a concrete instance of `JobDatabaseTableOutputOptionsPtrInput` via:
//
//          JobDatabaseTableOutputOptionsArgs{...}
//
//  or:
//
//          nil
type JobDatabaseTableOutputOptionsPtrInput interface {
	pulumi.Input

	ToJobDatabaseTableOutputOptionsPtrOutput() JobDatabaseTableOutputOptionsPtrOutput
	ToJobDatabaseTableOutputOptionsPtrOutputWithContext(context.Context) JobDatabaseTableOutputOptionsPtrOutput
}

type jobDatabaseTableOutputOptionsPtrType JobDatabaseTableOutputOptionsArgs

func JobDatabaseTableOutputOptionsPtr(v *JobDatabaseTableOutputOptionsArgs) JobDatabaseTableOutputOptionsPtrInput {
	return (*jobDatabaseTableOutputOptionsPtrType)(v)
}

func (*jobDatabaseTableOutputOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDatabaseTableOutputOptions)(nil)).Elem()
}

func (i *jobDatabaseTableOutputOptionsPtrType) ToJobDatabaseTableOutputOptionsPtrOutput() JobDatabaseTableOutputOptionsPtrOutput {
	return i.ToJobDatabaseTableOutputOptionsPtrOutputWithContext(context.Background())
}

func (i *jobDatabaseTableOutputOptionsPtrType) ToJobDatabaseTableOutputOptionsPtrOutputWithContext(ctx context.Context) JobDatabaseTableOutputOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDatabaseTableOutputOptionsPtrOutput)
}

type JobDatabaseTableOutputOptionsOutput struct{ *pulumi.OutputState }

func (JobDatabaseTableOutputOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDatabaseTableOutputOptions)(nil)).Elem()
}

func (o JobDatabaseTableOutputOptionsOutput) ToJobDatabaseTableOutputOptionsOutput() JobDatabaseTableOutputOptionsOutput {
	return o
}

func (o JobDatabaseTableOutputOptionsOutput) ToJobDatabaseTableOutputOptionsOutputWithContext(ctx context.Context) JobDatabaseTableOutputOptionsOutput {
	return o
}

func (o JobDatabaseTableOutputOptionsOutput) ToJobDatabaseTableOutputOptionsPtrOutput() JobDatabaseTableOutputOptionsPtrOutput {
	return o.ToJobDatabaseTableOutputOptionsPtrOutputWithContext(context.Background())
}

func (o JobDatabaseTableOutputOptionsOutput) ToJobDatabaseTableOutputOptionsPtrOutputWithContext(ctx context.Context) JobDatabaseTableOutputOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobDatabaseTableOutputOptions) *JobDatabaseTableOutputOptions {
		return &v
	}).(JobDatabaseTableOutputOptionsPtrOutput)
}

func (o JobDatabaseTableOutputOptionsOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v JobDatabaseTableOutputOptions) string { return v.TableName }).(pulumi.StringOutput)
}

func (o JobDatabaseTableOutputOptionsOutput) TempDirectory() JobS3LocationPtrOutput {
	return o.ApplyT(func(v JobDatabaseTableOutputOptions) *JobS3Location { return v.TempDirectory }).(JobS3LocationPtrOutput)
}

type JobDatabaseTableOutputOptionsPtrOutput struct{ *pulumi.OutputState }

func (JobDatabaseTableOutputOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDatabaseTableOutputOptions)(nil)).Elem()
}

func (o JobDatabaseTableOutputOptionsPtrOutput) ToJobDatabaseTableOutputOptionsPtrOutput() JobDatabaseTableOutputOptionsPtrOutput {
	return o
}

func (o JobDatabaseTableOutputOptionsPtrOutput) ToJobDatabaseTableOutputOptionsPtrOutputWithContext(ctx context.Context) JobDatabaseTableOutputOptionsPtrOutput {
	return o
}

func (o JobDatabaseTableOutputOptionsPtrOutput) Elem() JobDatabaseTableOutputOptionsOutput {
	return o.ApplyT(func(v *JobDatabaseTableOutputOptions) JobDatabaseTableOutputOptions {
		if v != nil {
			return *v
		}
		var ret JobDatabaseTableOutputOptions
		return ret
	}).(JobDatabaseTableOutputOptionsOutput)
}

func (o JobDatabaseTableOutputOptionsPtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDatabaseTableOutputOptions) *string {
		if v == nil {
			return nil
		}
		return &v.TableName
	}).(pulumi.StringPtrOutput)
}

func (o JobDatabaseTableOutputOptionsPtrOutput) TempDirectory() JobS3LocationPtrOutput {
	return o.ApplyT(func(v *JobDatabaseTableOutputOptions) *JobS3Location {
		if v == nil {
			return nil
		}
		return v.TempDirectory
	}).(JobS3LocationPtrOutput)
}

// Job Sample
type JobJobSample struct {
	Mode *string `pulumi:"mode"`
	Size *int    `pulumi:"size"`
}

// JobJobSampleInput is an input type that accepts JobJobSampleArgs and JobJobSampleOutput values.
// You can construct a concrete instance of `JobJobSampleInput` via:
//
//          JobJobSampleArgs{...}
type JobJobSampleInput interface {
	pulumi.Input

	ToJobJobSampleOutput() JobJobSampleOutput
	ToJobJobSampleOutputWithContext(context.Context) JobJobSampleOutput
}

// Job Sample
type JobJobSampleArgs struct {
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	Size pulumi.IntPtrInput    `pulumi:"size"`
}

func (JobJobSampleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobSample)(nil)).Elem()
}

func (i JobJobSampleArgs) ToJobJobSampleOutput() JobJobSampleOutput {
	return i.ToJobJobSampleOutputWithContext(context.Background())
}

func (i JobJobSampleArgs) ToJobJobSampleOutputWithContext(ctx context.Context) JobJobSampleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobSampleOutput)
}

func (i JobJobSampleArgs) ToJobJobSamplePtrOutput() JobJobSamplePtrOutput {
	return i.ToJobJobSamplePtrOutputWithContext(context.Background())
}

func (i JobJobSampleArgs) ToJobJobSamplePtrOutputWithContext(ctx context.Context) JobJobSamplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobSampleOutput).ToJobJobSamplePtrOutputWithContext(ctx)
}

// JobJobSamplePtrInput is an input type that accepts JobJobSampleArgs, JobJobSamplePtr and JobJobSamplePtrOutput values.
// You can construct a concrete instance of `JobJobSamplePtrInput` via:
//
//          JobJobSampleArgs{...}
//
//  or:
//
//          nil
type JobJobSamplePtrInput interface {
	pulumi.Input

	ToJobJobSamplePtrOutput() JobJobSamplePtrOutput
	ToJobJobSamplePtrOutputWithContext(context.Context) JobJobSamplePtrOutput
}

type jobJobSamplePtrType JobJobSampleArgs

func JobJobSamplePtr(v *JobJobSampleArgs) JobJobSamplePtrInput {
	return (*jobJobSamplePtrType)(v)
}

func (*jobJobSamplePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobJobSample)(nil)).Elem()
}

func (i *jobJobSamplePtrType) ToJobJobSamplePtrOutput() JobJobSamplePtrOutput {
	return i.ToJobJobSamplePtrOutputWithContext(context.Background())
}

func (i *jobJobSamplePtrType) ToJobJobSamplePtrOutputWithContext(ctx context.Context) JobJobSamplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobSamplePtrOutput)
}

// Job Sample
type JobJobSampleOutput struct{ *pulumi.OutputState }

func (JobJobSampleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobSample)(nil)).Elem()
}

func (o JobJobSampleOutput) ToJobJobSampleOutput() JobJobSampleOutput {
	return o
}

func (o JobJobSampleOutput) ToJobJobSampleOutputWithContext(ctx context.Context) JobJobSampleOutput {
	return o
}

func (o JobJobSampleOutput) ToJobJobSamplePtrOutput() JobJobSamplePtrOutput {
	return o.ToJobJobSamplePtrOutputWithContext(context.Background())
}

func (o JobJobSampleOutput) ToJobJobSamplePtrOutputWithContext(ctx context.Context) JobJobSamplePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobJobSample) *JobJobSample {
		return &v
	}).(JobJobSamplePtrOutput)
}

func (o JobJobSampleOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobJobSample) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o JobJobSampleOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobJobSample) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type JobJobSamplePtrOutput struct{ *pulumi.OutputState }

func (JobJobSamplePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobJobSample)(nil)).Elem()
}

func (o JobJobSamplePtrOutput) ToJobJobSamplePtrOutput() JobJobSamplePtrOutput {
	return o
}

func (o JobJobSamplePtrOutput) ToJobJobSamplePtrOutputWithContext(ctx context.Context) JobJobSamplePtrOutput {
	return o
}

func (o JobJobSamplePtrOutput) Elem() JobJobSampleOutput {
	return o.ApplyT(func(v *JobJobSample) JobJobSample {
		if v != nil {
			return *v
		}
		var ret JobJobSample
		return ret
	}).(JobJobSampleOutput)
}

func (o JobJobSamplePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobJobSample) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o JobJobSamplePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobJobSample) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type JobOutputType struct {
	CompressionFormat *string                 `pulumi:"compressionFormat"`
	Format            *string                 `pulumi:"format"`
	FormatOptions     *JobOutputFormatOptions `pulumi:"formatOptions"`
	Location          JobS3Location           `pulumi:"location"`
	Overwrite         *bool                   `pulumi:"overwrite"`
	PartitionColumns  []string                `pulumi:"partitionColumns"`
}

// JobOutputTypeInput is an input type that accepts JobOutputTypeArgs and JobOutputTypeOutput values.
// You can construct a concrete instance of `JobOutputTypeInput` via:
//
//          JobOutputTypeArgs{...}
type JobOutputTypeInput interface {
	pulumi.Input

	ToJobOutputTypeOutput() JobOutputTypeOutput
	ToJobOutputTypeOutputWithContext(context.Context) JobOutputTypeOutput
}

type JobOutputTypeArgs struct {
	CompressionFormat pulumi.StringPtrInput          `pulumi:"compressionFormat"`
	Format            pulumi.StringPtrInput          `pulumi:"format"`
	FormatOptions     JobOutputFormatOptionsPtrInput `pulumi:"formatOptions"`
	Location          JobS3LocationInput             `pulumi:"location"`
	Overwrite         pulumi.BoolPtrInput            `pulumi:"overwrite"`
	PartitionColumns  pulumi.StringArrayInput        `pulumi:"partitionColumns"`
}

func (JobOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputType)(nil)).Elem()
}

func (i JobOutputTypeArgs) ToJobOutputTypeOutput() JobOutputTypeOutput {
	return i.ToJobOutputTypeOutputWithContext(context.Background())
}

func (i JobOutputTypeArgs) ToJobOutputTypeOutputWithContext(ctx context.Context) JobOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputTypeOutput)
}

// JobOutputTypeArrayInput is an input type that accepts JobOutputTypeArray and JobOutputTypeArrayOutput values.
// You can construct a concrete instance of `JobOutputTypeArrayInput` via:
//
//          JobOutputTypeArray{ JobOutputTypeArgs{...} }
type JobOutputTypeArrayInput interface {
	pulumi.Input

	ToJobOutputTypeArrayOutput() JobOutputTypeArrayOutput
	ToJobOutputTypeArrayOutputWithContext(context.Context) JobOutputTypeArrayOutput
}

type JobOutputTypeArray []JobOutputTypeInput

func (JobOutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputType)(nil)).Elem()
}

func (i JobOutputTypeArray) ToJobOutputTypeArrayOutput() JobOutputTypeArrayOutput {
	return i.ToJobOutputTypeArrayOutputWithContext(context.Background())
}

func (i JobOutputTypeArray) ToJobOutputTypeArrayOutputWithContext(ctx context.Context) JobOutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputTypeArrayOutput)
}

type JobOutputTypeOutput struct{ *pulumi.OutputState }

func (JobOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputType)(nil)).Elem()
}

func (o JobOutputTypeOutput) ToJobOutputTypeOutput() JobOutputTypeOutput {
	return o
}

func (o JobOutputTypeOutput) ToJobOutputTypeOutputWithContext(ctx context.Context) JobOutputTypeOutput {
	return o
}

func (o JobOutputTypeOutput) CompressionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputType) *string { return v.CompressionFormat }).(pulumi.StringPtrOutput)
}

func (o JobOutputTypeOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputType) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o JobOutputTypeOutput) FormatOptions() JobOutputFormatOptionsPtrOutput {
	return o.ApplyT(func(v JobOutputType) *JobOutputFormatOptions { return v.FormatOptions }).(JobOutputFormatOptionsPtrOutput)
}

func (o JobOutputTypeOutput) Location() JobS3LocationOutput {
	return o.ApplyT(func(v JobOutputType) JobS3Location { return v.Location }).(JobS3LocationOutput)
}

func (o JobOutputTypeOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobOutputType) *bool { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

func (o JobOutputTypeOutput) PartitionColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobOutputType) []string { return v.PartitionColumns }).(pulumi.StringArrayOutput)
}

type JobOutputTypeArrayOutput struct{ *pulumi.OutputState }

func (JobOutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputType)(nil)).Elem()
}

func (o JobOutputTypeArrayOutput) ToJobOutputTypeArrayOutput() JobOutputTypeArrayOutput {
	return o
}

func (o JobOutputTypeArrayOutput) ToJobOutputTypeArrayOutputWithContext(ctx context.Context) JobOutputTypeArrayOutput {
	return o
}

func (o JobOutputTypeArrayOutput) Index(i pulumi.IntInput) JobOutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobOutputType {
		return vs[0].([]JobOutputType)[vs[1].(int)]
	}).(JobOutputTypeOutput)
}

// Format options for job Output
type JobOutputFormatOptions struct {
	Csv *JobCsvOutputOptions `pulumi:"csv"`
}

// JobOutputFormatOptionsInput is an input type that accepts JobOutputFormatOptionsArgs and JobOutputFormatOptionsOutput values.
// You can construct a concrete instance of `JobOutputFormatOptionsInput` via:
//
//          JobOutputFormatOptionsArgs{...}
type JobOutputFormatOptionsInput interface {
	pulumi.Input

	ToJobOutputFormatOptionsOutput() JobOutputFormatOptionsOutput
	ToJobOutputFormatOptionsOutputWithContext(context.Context) JobOutputFormatOptionsOutput
}

// Format options for job Output
type JobOutputFormatOptionsArgs struct {
	Csv JobCsvOutputOptionsPtrInput `pulumi:"csv"`
}

func (JobOutputFormatOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputFormatOptions)(nil)).Elem()
}

func (i JobOutputFormatOptionsArgs) ToJobOutputFormatOptionsOutput() JobOutputFormatOptionsOutput {
	return i.ToJobOutputFormatOptionsOutputWithContext(context.Background())
}

func (i JobOutputFormatOptionsArgs) ToJobOutputFormatOptionsOutputWithContext(ctx context.Context) JobOutputFormatOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputFormatOptionsOutput)
}

func (i JobOutputFormatOptionsArgs) ToJobOutputFormatOptionsPtrOutput() JobOutputFormatOptionsPtrOutput {
	return i.ToJobOutputFormatOptionsPtrOutputWithContext(context.Background())
}

func (i JobOutputFormatOptionsArgs) ToJobOutputFormatOptionsPtrOutputWithContext(ctx context.Context) JobOutputFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputFormatOptionsOutput).ToJobOutputFormatOptionsPtrOutputWithContext(ctx)
}

// JobOutputFormatOptionsPtrInput is an input type that accepts JobOutputFormatOptionsArgs, JobOutputFormatOptionsPtr and JobOutputFormatOptionsPtrOutput values.
// You can construct a concrete instance of `JobOutputFormatOptionsPtrInput` via:
//
//          JobOutputFormatOptionsArgs{...}
//
//  or:
//
//          nil
type JobOutputFormatOptionsPtrInput interface {
	pulumi.Input

	ToJobOutputFormatOptionsPtrOutput() JobOutputFormatOptionsPtrOutput
	ToJobOutputFormatOptionsPtrOutputWithContext(context.Context) JobOutputFormatOptionsPtrOutput
}

type jobOutputFormatOptionsPtrType JobOutputFormatOptionsArgs

func JobOutputFormatOptionsPtr(v *JobOutputFormatOptionsArgs) JobOutputFormatOptionsPtrInput {
	return (*jobOutputFormatOptionsPtrType)(v)
}

func (*jobOutputFormatOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobOutputFormatOptions)(nil)).Elem()
}

func (i *jobOutputFormatOptionsPtrType) ToJobOutputFormatOptionsPtrOutput() JobOutputFormatOptionsPtrOutput {
	return i.ToJobOutputFormatOptionsPtrOutputWithContext(context.Background())
}

func (i *jobOutputFormatOptionsPtrType) ToJobOutputFormatOptionsPtrOutputWithContext(ctx context.Context) JobOutputFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputFormatOptionsPtrOutput)
}

// Format options for job Output
type JobOutputFormatOptionsOutput struct{ *pulumi.OutputState }

func (JobOutputFormatOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputFormatOptions)(nil)).Elem()
}

func (o JobOutputFormatOptionsOutput) ToJobOutputFormatOptionsOutput() JobOutputFormatOptionsOutput {
	return o
}

func (o JobOutputFormatOptionsOutput) ToJobOutputFormatOptionsOutputWithContext(ctx context.Context) JobOutputFormatOptionsOutput {
	return o
}

func (o JobOutputFormatOptionsOutput) ToJobOutputFormatOptionsPtrOutput() JobOutputFormatOptionsPtrOutput {
	return o.ToJobOutputFormatOptionsPtrOutputWithContext(context.Background())
}

func (o JobOutputFormatOptionsOutput) ToJobOutputFormatOptionsPtrOutputWithContext(ctx context.Context) JobOutputFormatOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobOutputFormatOptions) *JobOutputFormatOptions {
		return &v
	}).(JobOutputFormatOptionsPtrOutput)
}

func (o JobOutputFormatOptionsOutput) Csv() JobCsvOutputOptionsPtrOutput {
	return o.ApplyT(func(v JobOutputFormatOptions) *JobCsvOutputOptions { return v.Csv }).(JobCsvOutputOptionsPtrOutput)
}

type JobOutputFormatOptionsPtrOutput struct{ *pulumi.OutputState }

func (JobOutputFormatOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobOutputFormatOptions)(nil)).Elem()
}

func (o JobOutputFormatOptionsPtrOutput) ToJobOutputFormatOptionsPtrOutput() JobOutputFormatOptionsPtrOutput {
	return o
}

func (o JobOutputFormatOptionsPtrOutput) ToJobOutputFormatOptionsPtrOutputWithContext(ctx context.Context) JobOutputFormatOptionsPtrOutput {
	return o
}

func (o JobOutputFormatOptionsPtrOutput) Elem() JobOutputFormatOptionsOutput {
	return o.ApplyT(func(v *JobOutputFormatOptions) JobOutputFormatOptions {
		if v != nil {
			return *v
		}
		var ret JobOutputFormatOptions
		return ret
	}).(JobOutputFormatOptionsOutput)
}

func (o JobOutputFormatOptionsPtrOutput) Csv() JobCsvOutputOptionsPtrOutput {
	return o.ApplyT(func(v *JobOutputFormatOptions) *JobCsvOutputOptions {
		if v == nil {
			return nil
		}
		return v.Csv
	}).(JobCsvOutputOptionsPtrOutput)
}

// Output location
type JobOutputLocation struct {
	Bucket string  `pulumi:"bucket"`
	Key    *string `pulumi:"key"`
}

// JobOutputLocationInput is an input type that accepts JobOutputLocationArgs and JobOutputLocationOutput values.
// You can construct a concrete instance of `JobOutputLocationInput` via:
//
//          JobOutputLocationArgs{...}
type JobOutputLocationInput interface {
	pulumi.Input

	ToJobOutputLocationOutput() JobOutputLocationOutput
	ToJobOutputLocationOutputWithContext(context.Context) JobOutputLocationOutput
}

// Output location
type JobOutputLocationArgs struct {
	Bucket pulumi.StringInput    `pulumi:"bucket"`
	Key    pulumi.StringPtrInput `pulumi:"key"`
}

func (JobOutputLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputLocation)(nil)).Elem()
}

func (i JobOutputLocationArgs) ToJobOutputLocationOutput() JobOutputLocationOutput {
	return i.ToJobOutputLocationOutputWithContext(context.Background())
}

func (i JobOutputLocationArgs) ToJobOutputLocationOutputWithContext(ctx context.Context) JobOutputLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputLocationOutput)
}

func (i JobOutputLocationArgs) ToJobOutputLocationPtrOutput() JobOutputLocationPtrOutput {
	return i.ToJobOutputLocationPtrOutputWithContext(context.Background())
}

func (i JobOutputLocationArgs) ToJobOutputLocationPtrOutputWithContext(ctx context.Context) JobOutputLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputLocationOutput).ToJobOutputLocationPtrOutputWithContext(ctx)
}

// JobOutputLocationPtrInput is an input type that accepts JobOutputLocationArgs, JobOutputLocationPtr and JobOutputLocationPtrOutput values.
// You can construct a concrete instance of `JobOutputLocationPtrInput` via:
//
//          JobOutputLocationArgs{...}
//
//  or:
//
//          nil
type JobOutputLocationPtrInput interface {
	pulumi.Input

	ToJobOutputLocationPtrOutput() JobOutputLocationPtrOutput
	ToJobOutputLocationPtrOutputWithContext(context.Context) JobOutputLocationPtrOutput
}

type jobOutputLocationPtrType JobOutputLocationArgs

func JobOutputLocationPtr(v *JobOutputLocationArgs) JobOutputLocationPtrInput {
	return (*jobOutputLocationPtrType)(v)
}

func (*jobOutputLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobOutputLocation)(nil)).Elem()
}

func (i *jobOutputLocationPtrType) ToJobOutputLocationPtrOutput() JobOutputLocationPtrOutput {
	return i.ToJobOutputLocationPtrOutputWithContext(context.Background())
}

func (i *jobOutputLocationPtrType) ToJobOutputLocationPtrOutputWithContext(ctx context.Context) JobOutputLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputLocationPtrOutput)
}

// Output location
type JobOutputLocationOutput struct{ *pulumi.OutputState }

func (JobOutputLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputLocation)(nil)).Elem()
}

func (o JobOutputLocationOutput) ToJobOutputLocationOutput() JobOutputLocationOutput {
	return o
}

func (o JobOutputLocationOutput) ToJobOutputLocationOutputWithContext(ctx context.Context) JobOutputLocationOutput {
	return o
}

func (o JobOutputLocationOutput) ToJobOutputLocationPtrOutput() JobOutputLocationPtrOutput {
	return o.ToJobOutputLocationPtrOutputWithContext(context.Background())
}

func (o JobOutputLocationOutput) ToJobOutputLocationPtrOutputWithContext(ctx context.Context) JobOutputLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobOutputLocation) *JobOutputLocation {
		return &v
	}).(JobOutputLocationPtrOutput)
}

func (o JobOutputLocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputLocation) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o JobOutputLocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputLocation) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type JobOutputLocationPtrOutput struct{ *pulumi.OutputState }

func (JobOutputLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobOutputLocation)(nil)).Elem()
}

func (o JobOutputLocationPtrOutput) ToJobOutputLocationPtrOutput() JobOutputLocationPtrOutput {
	return o
}

func (o JobOutputLocationPtrOutput) ToJobOutputLocationPtrOutputWithContext(ctx context.Context) JobOutputLocationPtrOutput {
	return o
}

func (o JobOutputLocationPtrOutput) Elem() JobOutputLocationOutput {
	return o.ApplyT(func(v *JobOutputLocation) JobOutputLocation {
		if v != nil {
			return *v
		}
		var ret JobOutputLocation
		return ret
	}).(JobOutputLocationOutput)
}

func (o JobOutputLocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobOutputLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

func (o JobOutputLocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobOutputLocation) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type JobParameterMap struct {
}

// JobParameterMapInput is an input type that accepts JobParameterMap and JobParameterMapOutput values.
// You can construct a concrete instance of `JobParameterMapInput` via:
//
//          JobParameterMap{ "key": JobParameterArgs{...} }
type JobParameterMapInput interface {
	pulumi.Input

	ToJobParameterMapOutput() JobParameterMapOutput
	ToJobParameterMapOutputWithContext(context.Context) JobParameterMapOutput
}

type JobParameterMapArgs struct {
}

func (JobParameterMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobParameterMap)(nil)).Elem()
}

func (i JobParameterMapArgs) ToJobParameterMapOutput() JobParameterMapOutput {
	return i.ToJobParameterMapOutputWithContext(context.Background())
}

func (i JobParameterMapArgs) ToJobParameterMapOutputWithContext(ctx context.Context) JobParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobParameterMapOutput)
}

type JobParameterMapOutput struct{ *pulumi.OutputState }

func (JobParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobParameterMap)(nil)).Elem()
}

func (o JobParameterMapOutput) ToJobParameterMapOutput() JobParameterMapOutput {
	return o
}

func (o JobParameterMapOutput) ToJobParameterMapOutputWithContext(ctx context.Context) JobParameterMapOutput {
	return o
}

type JobProfileConfiguration struct {
	ColumnStatisticsConfigurations []JobColumnStatisticsConfiguration `pulumi:"columnStatisticsConfigurations"`
	DatasetStatisticsConfiguration *JobStatisticsConfiguration        `pulumi:"datasetStatisticsConfiguration"`
	ProfileColumns                 []JobColumnSelector                `pulumi:"profileColumns"`
}

// JobProfileConfigurationInput is an input type that accepts JobProfileConfigurationArgs and JobProfileConfigurationOutput values.
// You can construct a concrete instance of `JobProfileConfigurationInput` via:
//
//          JobProfileConfigurationArgs{...}
type JobProfileConfigurationInput interface {
	pulumi.Input

	ToJobProfileConfigurationOutput() JobProfileConfigurationOutput
	ToJobProfileConfigurationOutputWithContext(context.Context) JobProfileConfigurationOutput
}

type JobProfileConfigurationArgs struct {
	ColumnStatisticsConfigurations JobColumnStatisticsConfigurationArrayInput `pulumi:"columnStatisticsConfigurations"`
	DatasetStatisticsConfiguration JobStatisticsConfigurationPtrInput         `pulumi:"datasetStatisticsConfiguration"`
	ProfileColumns                 JobColumnSelectorArrayInput                `pulumi:"profileColumns"`
}

func (JobProfileConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobProfileConfiguration)(nil)).Elem()
}

func (i JobProfileConfigurationArgs) ToJobProfileConfigurationOutput() JobProfileConfigurationOutput {
	return i.ToJobProfileConfigurationOutputWithContext(context.Background())
}

func (i JobProfileConfigurationArgs) ToJobProfileConfigurationOutputWithContext(ctx context.Context) JobProfileConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobProfileConfigurationOutput)
}

func (i JobProfileConfigurationArgs) ToJobProfileConfigurationPtrOutput() JobProfileConfigurationPtrOutput {
	return i.ToJobProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i JobProfileConfigurationArgs) ToJobProfileConfigurationPtrOutputWithContext(ctx context.Context) JobProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobProfileConfigurationOutput).ToJobProfileConfigurationPtrOutputWithContext(ctx)
}

// JobProfileConfigurationPtrInput is an input type that accepts JobProfileConfigurationArgs, JobProfileConfigurationPtr and JobProfileConfigurationPtrOutput values.
// You can construct a concrete instance of `JobProfileConfigurationPtrInput` via:
//
//          JobProfileConfigurationArgs{...}
//
//  or:
//
//          nil
type JobProfileConfigurationPtrInput interface {
	pulumi.Input

	ToJobProfileConfigurationPtrOutput() JobProfileConfigurationPtrOutput
	ToJobProfileConfigurationPtrOutputWithContext(context.Context) JobProfileConfigurationPtrOutput
}

type jobProfileConfigurationPtrType JobProfileConfigurationArgs

func JobProfileConfigurationPtr(v *JobProfileConfigurationArgs) JobProfileConfigurationPtrInput {
	return (*jobProfileConfigurationPtrType)(v)
}

func (*jobProfileConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobProfileConfiguration)(nil)).Elem()
}

func (i *jobProfileConfigurationPtrType) ToJobProfileConfigurationPtrOutput() JobProfileConfigurationPtrOutput {
	return i.ToJobProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobProfileConfigurationPtrType) ToJobProfileConfigurationPtrOutputWithContext(ctx context.Context) JobProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobProfileConfigurationPtrOutput)
}

type JobProfileConfigurationOutput struct{ *pulumi.OutputState }

func (JobProfileConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobProfileConfiguration)(nil)).Elem()
}

func (o JobProfileConfigurationOutput) ToJobProfileConfigurationOutput() JobProfileConfigurationOutput {
	return o
}

func (o JobProfileConfigurationOutput) ToJobProfileConfigurationOutputWithContext(ctx context.Context) JobProfileConfigurationOutput {
	return o
}

func (o JobProfileConfigurationOutput) ToJobProfileConfigurationPtrOutput() JobProfileConfigurationPtrOutput {
	return o.ToJobProfileConfigurationPtrOutputWithContext(context.Background())
}

func (o JobProfileConfigurationOutput) ToJobProfileConfigurationPtrOutputWithContext(ctx context.Context) JobProfileConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobProfileConfiguration) *JobProfileConfiguration {
		return &v
	}).(JobProfileConfigurationPtrOutput)
}

func (o JobProfileConfigurationOutput) ColumnStatisticsConfigurations() JobColumnStatisticsConfigurationArrayOutput {
	return o.ApplyT(func(v JobProfileConfiguration) []JobColumnStatisticsConfiguration {
		return v.ColumnStatisticsConfigurations
	}).(JobColumnStatisticsConfigurationArrayOutput)
}

func (o JobProfileConfigurationOutput) DatasetStatisticsConfiguration() JobStatisticsConfigurationPtrOutput {
	return o.ApplyT(func(v JobProfileConfiguration) *JobStatisticsConfiguration { return v.DatasetStatisticsConfiguration }).(JobStatisticsConfigurationPtrOutput)
}

func (o JobProfileConfigurationOutput) ProfileColumns() JobColumnSelectorArrayOutput {
	return o.ApplyT(func(v JobProfileConfiguration) []JobColumnSelector { return v.ProfileColumns }).(JobColumnSelectorArrayOutput)
}

type JobProfileConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobProfileConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobProfileConfiguration)(nil)).Elem()
}

func (o JobProfileConfigurationPtrOutput) ToJobProfileConfigurationPtrOutput() JobProfileConfigurationPtrOutput {
	return o
}

func (o JobProfileConfigurationPtrOutput) ToJobProfileConfigurationPtrOutputWithContext(ctx context.Context) JobProfileConfigurationPtrOutput {
	return o
}

func (o JobProfileConfigurationPtrOutput) Elem() JobProfileConfigurationOutput {
	return o.ApplyT(func(v *JobProfileConfiguration) JobProfileConfiguration {
		if v != nil {
			return *v
		}
		var ret JobProfileConfiguration
		return ret
	}).(JobProfileConfigurationOutput)
}

func (o JobProfileConfigurationPtrOutput) ColumnStatisticsConfigurations() JobColumnStatisticsConfigurationArrayOutput {
	return o.ApplyT(func(v *JobProfileConfiguration) []JobColumnStatisticsConfiguration {
		if v == nil {
			return nil
		}
		return v.ColumnStatisticsConfigurations
	}).(JobColumnStatisticsConfigurationArrayOutput)
}

func (o JobProfileConfigurationPtrOutput) DatasetStatisticsConfiguration() JobStatisticsConfigurationPtrOutput {
	return o.ApplyT(func(v *JobProfileConfiguration) *JobStatisticsConfiguration {
		if v == nil {
			return nil
		}
		return v.DatasetStatisticsConfiguration
	}).(JobStatisticsConfigurationPtrOutput)
}

func (o JobProfileConfigurationPtrOutput) ProfileColumns() JobColumnSelectorArrayOutput {
	return o.ApplyT(func(v *JobProfileConfiguration) []JobColumnSelector {
		if v == nil {
			return nil
		}
		return v.ProfileColumns
	}).(JobColumnSelectorArrayOutput)
}

type JobRecipe struct {
	// Recipe name
	Name string `pulumi:"name"`
	// Recipe version
	Version *string `pulumi:"version"`
}

// JobRecipeInput is an input type that accepts JobRecipeArgs and JobRecipeOutput values.
// You can construct a concrete instance of `JobRecipeInput` via:
//
//          JobRecipeArgs{...}
type JobRecipeInput interface {
	pulumi.Input

	ToJobRecipeOutput() JobRecipeOutput
	ToJobRecipeOutputWithContext(context.Context) JobRecipeOutput
}

type JobRecipeArgs struct {
	// Recipe name
	Name pulumi.StringInput `pulumi:"name"`
	// Recipe version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (JobRecipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobRecipe)(nil)).Elem()
}

func (i JobRecipeArgs) ToJobRecipeOutput() JobRecipeOutput {
	return i.ToJobRecipeOutputWithContext(context.Background())
}

func (i JobRecipeArgs) ToJobRecipeOutputWithContext(ctx context.Context) JobRecipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobRecipeOutput)
}

func (i JobRecipeArgs) ToJobRecipePtrOutput() JobRecipePtrOutput {
	return i.ToJobRecipePtrOutputWithContext(context.Background())
}

func (i JobRecipeArgs) ToJobRecipePtrOutputWithContext(ctx context.Context) JobRecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobRecipeOutput).ToJobRecipePtrOutputWithContext(ctx)
}

// JobRecipePtrInput is an input type that accepts JobRecipeArgs, JobRecipePtr and JobRecipePtrOutput values.
// You can construct a concrete instance of `JobRecipePtrInput` via:
//
//          JobRecipeArgs{...}
//
//  or:
//
//          nil
type JobRecipePtrInput interface {
	pulumi.Input

	ToJobRecipePtrOutput() JobRecipePtrOutput
	ToJobRecipePtrOutputWithContext(context.Context) JobRecipePtrOutput
}

type jobRecipePtrType JobRecipeArgs

func JobRecipePtr(v *JobRecipeArgs) JobRecipePtrInput {
	return (*jobRecipePtrType)(v)
}

func (*jobRecipePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobRecipe)(nil)).Elem()
}

func (i *jobRecipePtrType) ToJobRecipePtrOutput() JobRecipePtrOutput {
	return i.ToJobRecipePtrOutputWithContext(context.Background())
}

func (i *jobRecipePtrType) ToJobRecipePtrOutputWithContext(ctx context.Context) JobRecipePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobRecipePtrOutput)
}

type JobRecipeOutput struct{ *pulumi.OutputState }

func (JobRecipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobRecipe)(nil)).Elem()
}

func (o JobRecipeOutput) ToJobRecipeOutput() JobRecipeOutput {
	return o
}

func (o JobRecipeOutput) ToJobRecipeOutputWithContext(ctx context.Context) JobRecipeOutput {
	return o
}

func (o JobRecipeOutput) ToJobRecipePtrOutput() JobRecipePtrOutput {
	return o.ToJobRecipePtrOutputWithContext(context.Background())
}

func (o JobRecipeOutput) ToJobRecipePtrOutputWithContext(ctx context.Context) JobRecipePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobRecipe) *JobRecipe {
		return &v
	}).(JobRecipePtrOutput)
}

// Recipe name
func (o JobRecipeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobRecipe) string { return v.Name }).(pulumi.StringOutput)
}

// Recipe version
func (o JobRecipeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobRecipe) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type JobRecipePtrOutput struct{ *pulumi.OutputState }

func (JobRecipePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobRecipe)(nil)).Elem()
}

func (o JobRecipePtrOutput) ToJobRecipePtrOutput() JobRecipePtrOutput {
	return o
}

func (o JobRecipePtrOutput) ToJobRecipePtrOutputWithContext(ctx context.Context) JobRecipePtrOutput {
	return o
}

func (o JobRecipePtrOutput) Elem() JobRecipeOutput {
	return o.ApplyT(func(v *JobRecipe) JobRecipe {
		if v != nil {
			return *v
		}
		var ret JobRecipe
		return ret
	}).(JobRecipeOutput)
}

// Recipe name
func (o JobRecipePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobRecipe) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Recipe version
func (o JobRecipePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobRecipe) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// S3 Output location
type JobS3Location struct {
	Bucket string  `pulumi:"bucket"`
	Key    *string `pulumi:"key"`
}

// JobS3LocationInput is an input type that accepts JobS3LocationArgs and JobS3LocationOutput values.
// You can construct a concrete instance of `JobS3LocationInput` via:
//
//          JobS3LocationArgs{...}
type JobS3LocationInput interface {
	pulumi.Input

	ToJobS3LocationOutput() JobS3LocationOutput
	ToJobS3LocationOutputWithContext(context.Context) JobS3LocationOutput
}

// S3 Output location
type JobS3LocationArgs struct {
	Bucket pulumi.StringInput    `pulumi:"bucket"`
	Key    pulumi.StringPtrInput `pulumi:"key"`
}

func (JobS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobS3Location)(nil)).Elem()
}

func (i JobS3LocationArgs) ToJobS3LocationOutput() JobS3LocationOutput {
	return i.ToJobS3LocationOutputWithContext(context.Background())
}

func (i JobS3LocationArgs) ToJobS3LocationOutputWithContext(ctx context.Context) JobS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobS3LocationOutput)
}

func (i JobS3LocationArgs) ToJobS3LocationPtrOutput() JobS3LocationPtrOutput {
	return i.ToJobS3LocationPtrOutputWithContext(context.Background())
}

func (i JobS3LocationArgs) ToJobS3LocationPtrOutputWithContext(ctx context.Context) JobS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobS3LocationOutput).ToJobS3LocationPtrOutputWithContext(ctx)
}

// JobS3LocationPtrInput is an input type that accepts JobS3LocationArgs, JobS3LocationPtr and JobS3LocationPtrOutput values.
// You can construct a concrete instance of `JobS3LocationPtrInput` via:
//
//          JobS3LocationArgs{...}
//
//  or:
//
//          nil
type JobS3LocationPtrInput interface {
	pulumi.Input

	ToJobS3LocationPtrOutput() JobS3LocationPtrOutput
	ToJobS3LocationPtrOutputWithContext(context.Context) JobS3LocationPtrOutput
}

type jobS3LocationPtrType JobS3LocationArgs

func JobS3LocationPtr(v *JobS3LocationArgs) JobS3LocationPtrInput {
	return (*jobS3LocationPtrType)(v)
}

func (*jobS3LocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobS3Location)(nil)).Elem()
}

func (i *jobS3LocationPtrType) ToJobS3LocationPtrOutput() JobS3LocationPtrOutput {
	return i.ToJobS3LocationPtrOutputWithContext(context.Background())
}

func (i *jobS3LocationPtrType) ToJobS3LocationPtrOutputWithContext(ctx context.Context) JobS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobS3LocationPtrOutput)
}

// S3 Output location
type JobS3LocationOutput struct{ *pulumi.OutputState }

func (JobS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobS3Location)(nil)).Elem()
}

func (o JobS3LocationOutput) ToJobS3LocationOutput() JobS3LocationOutput {
	return o
}

func (o JobS3LocationOutput) ToJobS3LocationOutputWithContext(ctx context.Context) JobS3LocationOutput {
	return o
}

func (o JobS3LocationOutput) ToJobS3LocationPtrOutput() JobS3LocationPtrOutput {
	return o.ToJobS3LocationPtrOutputWithContext(context.Background())
}

func (o JobS3LocationOutput) ToJobS3LocationPtrOutputWithContext(ctx context.Context) JobS3LocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobS3Location) *JobS3Location {
		return &v
	}).(JobS3LocationPtrOutput)
}

func (o JobS3LocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v JobS3Location) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o JobS3LocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobS3Location) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type JobS3LocationPtrOutput struct{ *pulumi.OutputState }

func (JobS3LocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobS3Location)(nil)).Elem()
}

func (o JobS3LocationPtrOutput) ToJobS3LocationPtrOutput() JobS3LocationPtrOutput {
	return o
}

func (o JobS3LocationPtrOutput) ToJobS3LocationPtrOutputWithContext(ctx context.Context) JobS3LocationPtrOutput {
	return o
}

func (o JobS3LocationPtrOutput) Elem() JobS3LocationOutput {
	return o.ApplyT(func(v *JobS3Location) JobS3Location {
		if v != nil {
			return *v
		}
		var ret JobS3Location
		return ret
	}).(JobS3LocationOutput)
}

func (o JobS3LocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobS3Location) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

func (o JobS3LocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type JobS3TableOutputOptions struct {
	Location JobS3Location `pulumi:"location"`
}

// JobS3TableOutputOptionsInput is an input type that accepts JobS3TableOutputOptionsArgs and JobS3TableOutputOptionsOutput values.
// You can construct a concrete instance of `JobS3TableOutputOptionsInput` via:
//
//          JobS3TableOutputOptionsArgs{...}
type JobS3TableOutputOptionsInput interface {
	pulumi.Input

	ToJobS3TableOutputOptionsOutput() JobS3TableOutputOptionsOutput
	ToJobS3TableOutputOptionsOutputWithContext(context.Context) JobS3TableOutputOptionsOutput
}

type JobS3TableOutputOptionsArgs struct {
	Location JobS3LocationInput `pulumi:"location"`
}

func (JobS3TableOutputOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobS3TableOutputOptions)(nil)).Elem()
}

func (i JobS3TableOutputOptionsArgs) ToJobS3TableOutputOptionsOutput() JobS3TableOutputOptionsOutput {
	return i.ToJobS3TableOutputOptionsOutputWithContext(context.Background())
}

func (i JobS3TableOutputOptionsArgs) ToJobS3TableOutputOptionsOutputWithContext(ctx context.Context) JobS3TableOutputOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobS3TableOutputOptionsOutput)
}

func (i JobS3TableOutputOptionsArgs) ToJobS3TableOutputOptionsPtrOutput() JobS3TableOutputOptionsPtrOutput {
	return i.ToJobS3TableOutputOptionsPtrOutputWithContext(context.Background())
}

func (i JobS3TableOutputOptionsArgs) ToJobS3TableOutputOptionsPtrOutputWithContext(ctx context.Context) JobS3TableOutputOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobS3TableOutputOptionsOutput).ToJobS3TableOutputOptionsPtrOutputWithContext(ctx)
}

// JobS3TableOutputOptionsPtrInput is an input type that accepts JobS3TableOutputOptionsArgs, JobS3TableOutputOptionsPtr and JobS3TableOutputOptionsPtrOutput values.
// You can construct a concrete instance of `JobS3TableOutputOptionsPtrInput` via:
//
//          JobS3TableOutputOptionsArgs{...}
//
//  or:
//
//          nil
type JobS3TableOutputOptionsPtrInput interface {
	pulumi.Input

	ToJobS3TableOutputOptionsPtrOutput() JobS3TableOutputOptionsPtrOutput
	ToJobS3TableOutputOptionsPtrOutputWithContext(context.Context) JobS3TableOutputOptionsPtrOutput
}

type jobS3TableOutputOptionsPtrType JobS3TableOutputOptionsArgs

func JobS3TableOutputOptionsPtr(v *JobS3TableOutputOptionsArgs) JobS3TableOutputOptionsPtrInput {
	return (*jobS3TableOutputOptionsPtrType)(v)
}

func (*jobS3TableOutputOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobS3TableOutputOptions)(nil)).Elem()
}

func (i *jobS3TableOutputOptionsPtrType) ToJobS3TableOutputOptionsPtrOutput() JobS3TableOutputOptionsPtrOutput {
	return i.ToJobS3TableOutputOptionsPtrOutputWithContext(context.Background())
}

func (i *jobS3TableOutputOptionsPtrType) ToJobS3TableOutputOptionsPtrOutputWithContext(ctx context.Context) JobS3TableOutputOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobS3TableOutputOptionsPtrOutput)
}

type JobS3TableOutputOptionsOutput struct{ *pulumi.OutputState }

func (JobS3TableOutputOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobS3TableOutputOptions)(nil)).Elem()
}

func (o JobS3TableOutputOptionsOutput) ToJobS3TableOutputOptionsOutput() JobS3TableOutputOptionsOutput {
	return o
}

func (o JobS3TableOutputOptionsOutput) ToJobS3TableOutputOptionsOutputWithContext(ctx context.Context) JobS3TableOutputOptionsOutput {
	return o
}

func (o JobS3TableOutputOptionsOutput) ToJobS3TableOutputOptionsPtrOutput() JobS3TableOutputOptionsPtrOutput {
	return o.ToJobS3TableOutputOptionsPtrOutputWithContext(context.Background())
}

func (o JobS3TableOutputOptionsOutput) ToJobS3TableOutputOptionsPtrOutputWithContext(ctx context.Context) JobS3TableOutputOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobS3TableOutputOptions) *JobS3TableOutputOptions {
		return &v
	}).(JobS3TableOutputOptionsPtrOutput)
}

func (o JobS3TableOutputOptionsOutput) Location() JobS3LocationOutput {
	return o.ApplyT(func(v JobS3TableOutputOptions) JobS3Location { return v.Location }).(JobS3LocationOutput)
}

type JobS3TableOutputOptionsPtrOutput struct{ *pulumi.OutputState }

func (JobS3TableOutputOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobS3TableOutputOptions)(nil)).Elem()
}

func (o JobS3TableOutputOptionsPtrOutput) ToJobS3TableOutputOptionsPtrOutput() JobS3TableOutputOptionsPtrOutput {
	return o
}

func (o JobS3TableOutputOptionsPtrOutput) ToJobS3TableOutputOptionsPtrOutputWithContext(ctx context.Context) JobS3TableOutputOptionsPtrOutput {
	return o
}

func (o JobS3TableOutputOptionsPtrOutput) Elem() JobS3TableOutputOptionsOutput {
	return o.ApplyT(func(v *JobS3TableOutputOptions) JobS3TableOutputOptions {
		if v != nil {
			return *v
		}
		var ret JobS3TableOutputOptions
		return ret
	}).(JobS3TableOutputOptionsOutput)
}

func (o JobS3TableOutputOptionsPtrOutput) Location() JobS3LocationPtrOutput {
	return o.ApplyT(func(v *JobS3TableOutputOptions) *JobS3Location {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(JobS3LocationPtrOutput)
}

type JobStatisticOverride struct {
	Parameters JobParameterMap `pulumi:"parameters"`
	Statistic  string          `pulumi:"statistic"`
}

// JobStatisticOverrideInput is an input type that accepts JobStatisticOverrideArgs and JobStatisticOverrideOutput values.
// You can construct a concrete instance of `JobStatisticOverrideInput` via:
//
//          JobStatisticOverrideArgs{...}
type JobStatisticOverrideInput interface {
	pulumi.Input

	ToJobStatisticOverrideOutput() JobStatisticOverrideOutput
	ToJobStatisticOverrideOutputWithContext(context.Context) JobStatisticOverrideOutput
}

type JobStatisticOverrideArgs struct {
	Parameters JobParameterMapInput `pulumi:"parameters"`
	Statistic  pulumi.StringInput   `pulumi:"statistic"`
}

func (JobStatisticOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticOverride)(nil)).Elem()
}

func (i JobStatisticOverrideArgs) ToJobStatisticOverrideOutput() JobStatisticOverrideOutput {
	return i.ToJobStatisticOverrideOutputWithContext(context.Background())
}

func (i JobStatisticOverrideArgs) ToJobStatisticOverrideOutputWithContext(ctx context.Context) JobStatisticOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticOverrideOutput)
}

// JobStatisticOverrideArrayInput is an input type that accepts JobStatisticOverrideArray and JobStatisticOverrideArrayOutput values.
// You can construct a concrete instance of `JobStatisticOverrideArrayInput` via:
//
//          JobStatisticOverrideArray{ JobStatisticOverrideArgs{...} }
type JobStatisticOverrideArrayInput interface {
	pulumi.Input

	ToJobStatisticOverrideArrayOutput() JobStatisticOverrideArrayOutput
	ToJobStatisticOverrideArrayOutputWithContext(context.Context) JobStatisticOverrideArrayOutput
}

type JobStatisticOverrideArray []JobStatisticOverrideInput

func (JobStatisticOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatisticOverride)(nil)).Elem()
}

func (i JobStatisticOverrideArray) ToJobStatisticOverrideArrayOutput() JobStatisticOverrideArrayOutput {
	return i.ToJobStatisticOverrideArrayOutputWithContext(context.Background())
}

func (i JobStatisticOverrideArray) ToJobStatisticOverrideArrayOutputWithContext(ctx context.Context) JobStatisticOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticOverrideArrayOutput)
}

type JobStatisticOverrideOutput struct{ *pulumi.OutputState }

func (JobStatisticOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticOverride)(nil)).Elem()
}

func (o JobStatisticOverrideOutput) ToJobStatisticOverrideOutput() JobStatisticOverrideOutput {
	return o
}

func (o JobStatisticOverrideOutput) ToJobStatisticOverrideOutputWithContext(ctx context.Context) JobStatisticOverrideOutput {
	return o
}

func (o JobStatisticOverrideOutput) Parameters() JobParameterMapOutput {
	return o.ApplyT(func(v JobStatisticOverride) JobParameterMap { return v.Parameters }).(JobParameterMapOutput)
}

func (o JobStatisticOverrideOutput) Statistic() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticOverride) string { return v.Statistic }).(pulumi.StringOutput)
}

type JobStatisticOverrideArrayOutput struct{ *pulumi.OutputState }

func (JobStatisticOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatisticOverride)(nil)).Elem()
}

func (o JobStatisticOverrideArrayOutput) ToJobStatisticOverrideArrayOutput() JobStatisticOverrideArrayOutput {
	return o
}

func (o JobStatisticOverrideArrayOutput) ToJobStatisticOverrideArrayOutputWithContext(ctx context.Context) JobStatisticOverrideArrayOutput {
	return o
}

func (o JobStatisticOverrideArrayOutput) Index(i pulumi.IntInput) JobStatisticOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatisticOverride {
		return vs[0].([]JobStatisticOverride)[vs[1].(int)]
	}).(JobStatisticOverrideOutput)
}

type JobStatisticsConfiguration struct {
	IncludedStatistics []string               `pulumi:"includedStatistics"`
	Overrides          []JobStatisticOverride `pulumi:"overrides"`
}

// JobStatisticsConfigurationInput is an input type that accepts JobStatisticsConfigurationArgs and JobStatisticsConfigurationOutput values.
// You can construct a concrete instance of `JobStatisticsConfigurationInput` via:
//
//          JobStatisticsConfigurationArgs{...}
type JobStatisticsConfigurationInput interface {
	pulumi.Input

	ToJobStatisticsConfigurationOutput() JobStatisticsConfigurationOutput
	ToJobStatisticsConfigurationOutputWithContext(context.Context) JobStatisticsConfigurationOutput
}

type JobStatisticsConfigurationArgs struct {
	IncludedStatistics pulumi.StringArrayInput        `pulumi:"includedStatistics"`
	Overrides          JobStatisticOverrideArrayInput `pulumi:"overrides"`
}

func (JobStatisticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticsConfiguration)(nil)).Elem()
}

func (i JobStatisticsConfigurationArgs) ToJobStatisticsConfigurationOutput() JobStatisticsConfigurationOutput {
	return i.ToJobStatisticsConfigurationOutputWithContext(context.Background())
}

func (i JobStatisticsConfigurationArgs) ToJobStatisticsConfigurationOutputWithContext(ctx context.Context) JobStatisticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticsConfigurationOutput)
}

func (i JobStatisticsConfigurationArgs) ToJobStatisticsConfigurationPtrOutput() JobStatisticsConfigurationPtrOutput {
	return i.ToJobStatisticsConfigurationPtrOutputWithContext(context.Background())
}

func (i JobStatisticsConfigurationArgs) ToJobStatisticsConfigurationPtrOutputWithContext(ctx context.Context) JobStatisticsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticsConfigurationOutput).ToJobStatisticsConfigurationPtrOutputWithContext(ctx)
}

// JobStatisticsConfigurationPtrInput is an input type that accepts JobStatisticsConfigurationArgs, JobStatisticsConfigurationPtr and JobStatisticsConfigurationPtrOutput values.
// You can construct a concrete instance of `JobStatisticsConfigurationPtrInput` via:
//
//          JobStatisticsConfigurationArgs{...}
//
//  or:
//
//          nil
type JobStatisticsConfigurationPtrInput interface {
	pulumi.Input

	ToJobStatisticsConfigurationPtrOutput() JobStatisticsConfigurationPtrOutput
	ToJobStatisticsConfigurationPtrOutputWithContext(context.Context) JobStatisticsConfigurationPtrOutput
}

type jobStatisticsConfigurationPtrType JobStatisticsConfigurationArgs

func JobStatisticsConfigurationPtr(v *JobStatisticsConfigurationArgs) JobStatisticsConfigurationPtrInput {
	return (*jobStatisticsConfigurationPtrType)(v)
}

func (*jobStatisticsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatisticsConfiguration)(nil)).Elem()
}

func (i *jobStatisticsConfigurationPtrType) ToJobStatisticsConfigurationPtrOutput() JobStatisticsConfigurationPtrOutput {
	return i.ToJobStatisticsConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobStatisticsConfigurationPtrType) ToJobStatisticsConfigurationPtrOutputWithContext(ctx context.Context) JobStatisticsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticsConfigurationPtrOutput)
}

type JobStatisticsConfigurationOutput struct{ *pulumi.OutputState }

func (JobStatisticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticsConfiguration)(nil)).Elem()
}

func (o JobStatisticsConfigurationOutput) ToJobStatisticsConfigurationOutput() JobStatisticsConfigurationOutput {
	return o
}

func (o JobStatisticsConfigurationOutput) ToJobStatisticsConfigurationOutputWithContext(ctx context.Context) JobStatisticsConfigurationOutput {
	return o
}

func (o JobStatisticsConfigurationOutput) ToJobStatisticsConfigurationPtrOutput() JobStatisticsConfigurationPtrOutput {
	return o.ToJobStatisticsConfigurationPtrOutputWithContext(context.Background())
}

func (o JobStatisticsConfigurationOutput) ToJobStatisticsConfigurationPtrOutputWithContext(ctx context.Context) JobStatisticsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobStatisticsConfiguration) *JobStatisticsConfiguration {
		return &v
	}).(JobStatisticsConfigurationPtrOutput)
}

func (o JobStatisticsConfigurationOutput) IncludedStatistics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobStatisticsConfiguration) []string { return v.IncludedStatistics }).(pulumi.StringArrayOutput)
}

func (o JobStatisticsConfigurationOutput) Overrides() JobStatisticOverrideArrayOutput {
	return o.ApplyT(func(v JobStatisticsConfiguration) []JobStatisticOverride { return v.Overrides }).(JobStatisticOverrideArrayOutput)
}

type JobStatisticsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobStatisticsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatisticsConfiguration)(nil)).Elem()
}

func (o JobStatisticsConfigurationPtrOutput) ToJobStatisticsConfigurationPtrOutput() JobStatisticsConfigurationPtrOutput {
	return o
}

func (o JobStatisticsConfigurationPtrOutput) ToJobStatisticsConfigurationPtrOutputWithContext(ctx context.Context) JobStatisticsConfigurationPtrOutput {
	return o
}

func (o JobStatisticsConfigurationPtrOutput) Elem() JobStatisticsConfigurationOutput {
	return o.ApplyT(func(v *JobStatisticsConfiguration) JobStatisticsConfiguration {
		if v != nil {
			return *v
		}
		var ret JobStatisticsConfiguration
		return ret
	}).(JobStatisticsConfigurationOutput)
}

func (o JobStatisticsConfigurationPtrOutput) IncludedStatistics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobStatisticsConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.IncludedStatistics
	}).(pulumi.StringArrayOutput)
}

func (o JobStatisticsConfigurationPtrOutput) Overrides() JobStatisticOverrideArrayOutput {
	return o.ApplyT(func(v *JobStatisticsConfiguration) []JobStatisticOverride {
		if v == nil {
			return nil
		}
		return v.Overrides
	}).(JobStatisticOverrideArrayOutput)
}

// A key-value pair to associate with a resource.
type JobTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// JobTagInput is an input type that accepts JobTagArgs and JobTagOutput values.
// You can construct a concrete instance of `JobTagInput` via:
//
//          JobTagArgs{...}
type JobTagInput interface {
	pulumi.Input

	ToJobTagOutput() JobTagOutput
	ToJobTagOutputWithContext(context.Context) JobTagOutput
}

// A key-value pair to associate with a resource.
type JobTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (JobTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTag)(nil)).Elem()
}

func (i JobTagArgs) ToJobTagOutput() JobTagOutput {
	return i.ToJobTagOutputWithContext(context.Background())
}

func (i JobTagArgs) ToJobTagOutputWithContext(ctx context.Context) JobTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTagOutput)
}

// JobTagArrayInput is an input type that accepts JobTagArray and JobTagArrayOutput values.
// You can construct a concrete instance of `JobTagArrayInput` via:
//
//          JobTagArray{ JobTagArgs{...} }
type JobTagArrayInput interface {
	pulumi.Input

	ToJobTagArrayOutput() JobTagArrayOutput
	ToJobTagArrayOutputWithContext(context.Context) JobTagArrayOutput
}

type JobTagArray []JobTagInput

func (JobTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTag)(nil)).Elem()
}

func (i JobTagArray) ToJobTagArrayOutput() JobTagArrayOutput {
	return i.ToJobTagArrayOutputWithContext(context.Background())
}

func (i JobTagArray) ToJobTagArrayOutputWithContext(ctx context.Context) JobTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTagArrayOutput)
}

// A key-value pair to associate with a resource.
type JobTagOutput struct{ *pulumi.OutputState }

func (JobTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTag)(nil)).Elem()
}

func (o JobTagOutput) ToJobTagOutput() JobTagOutput {
	return o
}

func (o JobTagOutput) ToJobTagOutputWithContext(ctx context.Context) JobTagOutput {
	return o
}

func (o JobTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v JobTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o JobTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v JobTag) string { return v.Value }).(pulumi.StringOutput)
}

type JobTagArrayOutput struct{ *pulumi.OutputState }

func (JobTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobTag)(nil)).Elem()
}

func (o JobTagArrayOutput) ToJobTagArrayOutput() JobTagArrayOutput {
	return o
}

func (o JobTagArrayOutput) ToJobTagArrayOutputWithContext(ctx context.Context) JobTagArrayOutput {
	return o
}

func (o JobTagArrayOutput) Index(i pulumi.IntInput) JobTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobTag {
		return vs[0].([]JobTag)[vs[1].(int)]
	}).(JobTagOutput)
}

type ProjectSample struct {
	// Sample size
	Size *int `pulumi:"size"`
	// Sample type
	Type string `pulumi:"type"`
}

// ProjectSampleInput is an input type that accepts ProjectSampleArgs and ProjectSampleOutput values.
// You can construct a concrete instance of `ProjectSampleInput` via:
//
//          ProjectSampleArgs{...}
type ProjectSampleInput interface {
	pulumi.Input

	ToProjectSampleOutput() ProjectSampleOutput
	ToProjectSampleOutputWithContext(context.Context) ProjectSampleOutput
}

type ProjectSampleArgs struct {
	// Sample size
	Size pulumi.IntPtrInput `pulumi:"size"`
	// Sample type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectSampleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSample)(nil)).Elem()
}

func (i ProjectSampleArgs) ToProjectSampleOutput() ProjectSampleOutput {
	return i.ToProjectSampleOutputWithContext(context.Background())
}

func (i ProjectSampleArgs) ToProjectSampleOutputWithContext(ctx context.Context) ProjectSampleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSampleOutput)
}

func (i ProjectSampleArgs) ToProjectSamplePtrOutput() ProjectSamplePtrOutput {
	return i.ToProjectSamplePtrOutputWithContext(context.Background())
}

func (i ProjectSampleArgs) ToProjectSamplePtrOutputWithContext(ctx context.Context) ProjectSamplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSampleOutput).ToProjectSamplePtrOutputWithContext(ctx)
}

// ProjectSamplePtrInput is an input type that accepts ProjectSampleArgs, ProjectSamplePtr and ProjectSamplePtrOutput values.
// You can construct a concrete instance of `ProjectSamplePtrInput` via:
//
//          ProjectSampleArgs{...}
//
//  or:
//
//          nil
type ProjectSamplePtrInput interface {
	pulumi.Input

	ToProjectSamplePtrOutput() ProjectSamplePtrOutput
	ToProjectSamplePtrOutputWithContext(context.Context) ProjectSamplePtrOutput
}

type projectSamplePtrType ProjectSampleArgs

func ProjectSamplePtr(v *ProjectSampleArgs) ProjectSamplePtrInput {
	return (*projectSamplePtrType)(v)
}

func (*projectSamplePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSample)(nil)).Elem()
}

func (i *projectSamplePtrType) ToProjectSamplePtrOutput() ProjectSamplePtrOutput {
	return i.ToProjectSamplePtrOutputWithContext(context.Background())
}

func (i *projectSamplePtrType) ToProjectSamplePtrOutputWithContext(ctx context.Context) ProjectSamplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSamplePtrOutput)
}

type ProjectSampleOutput struct{ *pulumi.OutputState }

func (ProjectSampleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSample)(nil)).Elem()
}

func (o ProjectSampleOutput) ToProjectSampleOutput() ProjectSampleOutput {
	return o
}

func (o ProjectSampleOutput) ToProjectSampleOutputWithContext(ctx context.Context) ProjectSampleOutput {
	return o
}

func (o ProjectSampleOutput) ToProjectSamplePtrOutput() ProjectSamplePtrOutput {
	return o.ToProjectSamplePtrOutputWithContext(context.Background())
}

func (o ProjectSampleOutput) ToProjectSamplePtrOutputWithContext(ctx context.Context) ProjectSamplePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectSample) *ProjectSample {
		return &v
	}).(ProjectSamplePtrOutput)
}

// Sample size
func (o ProjectSampleOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectSample) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// Sample type
func (o ProjectSampleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSample) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectSamplePtrOutput struct{ *pulumi.OutputState }

func (ProjectSamplePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSample)(nil)).Elem()
}

func (o ProjectSamplePtrOutput) ToProjectSamplePtrOutput() ProjectSamplePtrOutput {
	return o
}

func (o ProjectSamplePtrOutput) ToProjectSamplePtrOutputWithContext(ctx context.Context) ProjectSamplePtrOutput {
	return o
}

func (o ProjectSamplePtrOutput) Elem() ProjectSampleOutput {
	return o.ApplyT(func(v *ProjectSample) ProjectSample {
		if v != nil {
			return *v
		}
		var ret ProjectSample
		return ret
	}).(ProjectSampleOutput)
}

// Sample size
func (o ProjectSamplePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectSample) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// Sample type
func (o ProjectSamplePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSample) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type ProjectTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ProjectTagInput is an input type that accepts ProjectTagArgs and ProjectTagOutput values.
// You can construct a concrete instance of `ProjectTagInput` via:
//
//          ProjectTagArgs{...}
type ProjectTagInput interface {
	pulumi.Input

	ToProjectTagOutput() ProjectTagOutput
	ToProjectTagOutputWithContext(context.Context) ProjectTagOutput
}

// A key-value pair to associate with a resource.
type ProjectTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (i ProjectTagArgs) ToProjectTagOutput() ProjectTagOutput {
	return i.ToProjectTagOutputWithContext(context.Background())
}

func (i ProjectTagArgs) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagOutput)
}

// ProjectTagArrayInput is an input type that accepts ProjectTagArray and ProjectTagArrayOutput values.
// You can construct a concrete instance of `ProjectTagArrayInput` via:
//
//          ProjectTagArray{ ProjectTagArgs{...} }
type ProjectTagArrayInput interface {
	pulumi.Input

	ToProjectTagArrayOutput() ProjectTagArrayOutput
	ToProjectTagArrayOutputWithContext(context.Context) ProjectTagArrayOutput
}

type ProjectTagArray []ProjectTagInput

func (ProjectTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (i ProjectTagArray) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return i.ToProjectTagArrayOutputWithContext(context.Background())
}

func (i ProjectTagArray) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ProjectTagOutput struct{ *pulumi.OutputState }

func (ProjectTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (o ProjectTagOutput) ToProjectTagOutput() ProjectTagOutput {
	return o
}

func (o ProjectTagOutput) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return o
}

func (o ProjectTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProjectTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectTagArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) Index(i pulumi.IntInput) ProjectTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTag {
		return vs[0].([]ProjectTag)[vs[1].(int)]
	}).(ProjectTagOutput)
}

type RecipeAction struct {
	// Step action operation
	Operation  string      `pulumi:"operation"`
	Parameters interface{} `pulumi:"parameters"`
}

// RecipeActionInput is an input type that accepts RecipeActionArgs and RecipeActionOutput values.
// You can construct a concrete instance of `RecipeActionInput` via:
//
//          RecipeActionArgs{...}
type RecipeActionInput interface {
	pulumi.Input

	ToRecipeActionOutput() RecipeActionOutput
	ToRecipeActionOutputWithContext(context.Context) RecipeActionOutput
}

type RecipeActionArgs struct {
	// Step action operation
	Operation  pulumi.StringInput `pulumi:"operation"`
	Parameters pulumi.Input       `pulumi:"parameters"`
}

func (RecipeActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeAction)(nil)).Elem()
}

func (i RecipeActionArgs) ToRecipeActionOutput() RecipeActionOutput {
	return i.ToRecipeActionOutputWithContext(context.Background())
}

func (i RecipeActionArgs) ToRecipeActionOutputWithContext(ctx context.Context) RecipeActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeActionOutput)
}

type RecipeActionOutput struct{ *pulumi.OutputState }

func (RecipeActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeAction)(nil)).Elem()
}

func (o RecipeActionOutput) ToRecipeActionOutput() RecipeActionOutput {
	return o
}

func (o RecipeActionOutput) ToRecipeActionOutputWithContext(ctx context.Context) RecipeActionOutput {
	return o
}

// Step action operation
func (o RecipeActionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeAction) string { return v.Operation }).(pulumi.StringOutput)
}

func (o RecipeActionOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v RecipeAction) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// Condition expressions applied to the step action
type RecipeConditionExpression struct {
	// Input condition to be applied to the target column
	Condition string `pulumi:"condition"`
	// Name of the target column
	TargetColumn string `pulumi:"targetColumn"`
	// Value of the condition
	Value *string `pulumi:"value"`
}

// RecipeConditionExpressionInput is an input type that accepts RecipeConditionExpressionArgs and RecipeConditionExpressionOutput values.
// You can construct a concrete instance of `RecipeConditionExpressionInput` via:
//
//          RecipeConditionExpressionArgs{...}
type RecipeConditionExpressionInput interface {
	pulumi.Input

	ToRecipeConditionExpressionOutput() RecipeConditionExpressionOutput
	ToRecipeConditionExpressionOutputWithContext(context.Context) RecipeConditionExpressionOutput
}

// Condition expressions applied to the step action
type RecipeConditionExpressionArgs struct {
	// Input condition to be applied to the target column
	Condition pulumi.StringInput `pulumi:"condition"`
	// Name of the target column
	TargetColumn pulumi.StringInput `pulumi:"targetColumn"`
	// Value of the condition
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RecipeConditionExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeConditionExpression)(nil)).Elem()
}

func (i RecipeConditionExpressionArgs) ToRecipeConditionExpressionOutput() RecipeConditionExpressionOutput {
	return i.ToRecipeConditionExpressionOutputWithContext(context.Background())
}

func (i RecipeConditionExpressionArgs) ToRecipeConditionExpressionOutputWithContext(ctx context.Context) RecipeConditionExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeConditionExpressionOutput)
}

// RecipeConditionExpressionArrayInput is an input type that accepts RecipeConditionExpressionArray and RecipeConditionExpressionArrayOutput values.
// You can construct a concrete instance of `RecipeConditionExpressionArrayInput` via:
//
//          RecipeConditionExpressionArray{ RecipeConditionExpressionArgs{...} }
type RecipeConditionExpressionArrayInput interface {
	pulumi.Input

	ToRecipeConditionExpressionArrayOutput() RecipeConditionExpressionArrayOutput
	ToRecipeConditionExpressionArrayOutputWithContext(context.Context) RecipeConditionExpressionArrayOutput
}

type RecipeConditionExpressionArray []RecipeConditionExpressionInput

func (RecipeConditionExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeConditionExpression)(nil)).Elem()
}

func (i RecipeConditionExpressionArray) ToRecipeConditionExpressionArrayOutput() RecipeConditionExpressionArrayOutput {
	return i.ToRecipeConditionExpressionArrayOutputWithContext(context.Background())
}

func (i RecipeConditionExpressionArray) ToRecipeConditionExpressionArrayOutputWithContext(ctx context.Context) RecipeConditionExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeConditionExpressionArrayOutput)
}

// Condition expressions applied to the step action
type RecipeConditionExpressionOutput struct{ *pulumi.OutputState }

func (RecipeConditionExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeConditionExpression)(nil)).Elem()
}

func (o RecipeConditionExpressionOutput) ToRecipeConditionExpressionOutput() RecipeConditionExpressionOutput {
	return o
}

func (o RecipeConditionExpressionOutput) ToRecipeConditionExpressionOutputWithContext(ctx context.Context) RecipeConditionExpressionOutput {
	return o
}

// Input condition to be applied to the target column
func (o RecipeConditionExpressionOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeConditionExpression) string { return v.Condition }).(pulumi.StringOutput)
}

// Name of the target column
func (o RecipeConditionExpressionOutput) TargetColumn() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeConditionExpression) string { return v.TargetColumn }).(pulumi.StringOutput)
}

// Value of the condition
func (o RecipeConditionExpressionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeConditionExpression) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RecipeConditionExpressionArrayOutput struct{ *pulumi.OutputState }

func (RecipeConditionExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeConditionExpression)(nil)).Elem()
}

func (o RecipeConditionExpressionArrayOutput) ToRecipeConditionExpressionArrayOutput() RecipeConditionExpressionArrayOutput {
	return o
}

func (o RecipeConditionExpressionArrayOutput) ToRecipeConditionExpressionArrayOutputWithContext(ctx context.Context) RecipeConditionExpressionArrayOutput {
	return o
}

func (o RecipeConditionExpressionArrayOutput) Index(i pulumi.IntInput) RecipeConditionExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecipeConditionExpression {
		return vs[0].([]RecipeConditionExpression)[vs[1].(int)]
	}).(RecipeConditionExpressionOutput)
}

type RecipeDataCatalogInputDefinition struct {
	// Catalog id
	CatalogId *string `pulumi:"catalogId"`
	// Database name
	DatabaseName *string `pulumi:"databaseName"`
	// Table name
	TableName     *string           `pulumi:"tableName"`
	TempDirectory *RecipeS3Location `pulumi:"tempDirectory"`
}

// RecipeDataCatalogInputDefinitionInput is an input type that accepts RecipeDataCatalogInputDefinitionArgs and RecipeDataCatalogInputDefinitionOutput values.
// You can construct a concrete instance of `RecipeDataCatalogInputDefinitionInput` via:
//
//          RecipeDataCatalogInputDefinitionArgs{...}
type RecipeDataCatalogInputDefinitionInput interface {
	pulumi.Input

	ToRecipeDataCatalogInputDefinitionOutput() RecipeDataCatalogInputDefinitionOutput
	ToRecipeDataCatalogInputDefinitionOutputWithContext(context.Context) RecipeDataCatalogInputDefinitionOutput
}

type RecipeDataCatalogInputDefinitionArgs struct {
	// Catalog id
	CatalogId pulumi.StringPtrInput `pulumi:"catalogId"`
	// Database name
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Table name
	TableName     pulumi.StringPtrInput    `pulumi:"tableName"`
	TempDirectory RecipeS3LocationPtrInput `pulumi:"tempDirectory"`
}

func (RecipeDataCatalogInputDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeDataCatalogInputDefinition)(nil)).Elem()
}

func (i RecipeDataCatalogInputDefinitionArgs) ToRecipeDataCatalogInputDefinitionOutput() RecipeDataCatalogInputDefinitionOutput {
	return i.ToRecipeDataCatalogInputDefinitionOutputWithContext(context.Background())
}

func (i RecipeDataCatalogInputDefinitionArgs) ToRecipeDataCatalogInputDefinitionOutputWithContext(ctx context.Context) RecipeDataCatalogInputDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeDataCatalogInputDefinitionOutput)
}

func (i RecipeDataCatalogInputDefinitionArgs) ToRecipeDataCatalogInputDefinitionPtrOutput() RecipeDataCatalogInputDefinitionPtrOutput {
	return i.ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(context.Background())
}

func (i RecipeDataCatalogInputDefinitionArgs) ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) RecipeDataCatalogInputDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeDataCatalogInputDefinitionOutput).ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(ctx)
}

// RecipeDataCatalogInputDefinitionPtrInput is an input type that accepts RecipeDataCatalogInputDefinitionArgs, RecipeDataCatalogInputDefinitionPtr and RecipeDataCatalogInputDefinitionPtrOutput values.
// You can construct a concrete instance of `RecipeDataCatalogInputDefinitionPtrInput` via:
//
//          RecipeDataCatalogInputDefinitionArgs{...}
//
//  or:
//
//          nil
type RecipeDataCatalogInputDefinitionPtrInput interface {
	pulumi.Input

	ToRecipeDataCatalogInputDefinitionPtrOutput() RecipeDataCatalogInputDefinitionPtrOutput
	ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(context.Context) RecipeDataCatalogInputDefinitionPtrOutput
}

type recipeDataCatalogInputDefinitionPtrType RecipeDataCatalogInputDefinitionArgs

func RecipeDataCatalogInputDefinitionPtr(v *RecipeDataCatalogInputDefinitionArgs) RecipeDataCatalogInputDefinitionPtrInput {
	return (*recipeDataCatalogInputDefinitionPtrType)(v)
}

func (*recipeDataCatalogInputDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecipeDataCatalogInputDefinition)(nil)).Elem()
}

func (i *recipeDataCatalogInputDefinitionPtrType) ToRecipeDataCatalogInputDefinitionPtrOutput() RecipeDataCatalogInputDefinitionPtrOutput {
	return i.ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(context.Background())
}

func (i *recipeDataCatalogInputDefinitionPtrType) ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) RecipeDataCatalogInputDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeDataCatalogInputDefinitionPtrOutput)
}

type RecipeDataCatalogInputDefinitionOutput struct{ *pulumi.OutputState }

func (RecipeDataCatalogInputDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeDataCatalogInputDefinition)(nil)).Elem()
}

func (o RecipeDataCatalogInputDefinitionOutput) ToRecipeDataCatalogInputDefinitionOutput() RecipeDataCatalogInputDefinitionOutput {
	return o
}

func (o RecipeDataCatalogInputDefinitionOutput) ToRecipeDataCatalogInputDefinitionOutputWithContext(ctx context.Context) RecipeDataCatalogInputDefinitionOutput {
	return o
}

func (o RecipeDataCatalogInputDefinitionOutput) ToRecipeDataCatalogInputDefinitionPtrOutput() RecipeDataCatalogInputDefinitionPtrOutput {
	return o.ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(context.Background())
}

func (o RecipeDataCatalogInputDefinitionOutput) ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) RecipeDataCatalogInputDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecipeDataCatalogInputDefinition) *RecipeDataCatalogInputDefinition {
		return &v
	}).(RecipeDataCatalogInputDefinitionPtrOutput)
}

// Catalog id
func (o RecipeDataCatalogInputDefinitionOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeDataCatalogInputDefinition) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

// Database name
func (o RecipeDataCatalogInputDefinitionOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeDataCatalogInputDefinition) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Table name
func (o RecipeDataCatalogInputDefinitionOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeDataCatalogInputDefinition) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

func (o RecipeDataCatalogInputDefinitionOutput) TempDirectory() RecipeS3LocationPtrOutput {
	return o.ApplyT(func(v RecipeDataCatalogInputDefinition) *RecipeS3Location { return v.TempDirectory }).(RecipeS3LocationPtrOutput)
}

type RecipeDataCatalogInputDefinitionPtrOutput struct{ *pulumi.OutputState }

func (RecipeDataCatalogInputDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecipeDataCatalogInputDefinition)(nil)).Elem()
}

func (o RecipeDataCatalogInputDefinitionPtrOutput) ToRecipeDataCatalogInputDefinitionPtrOutput() RecipeDataCatalogInputDefinitionPtrOutput {
	return o
}

func (o RecipeDataCatalogInputDefinitionPtrOutput) ToRecipeDataCatalogInputDefinitionPtrOutputWithContext(ctx context.Context) RecipeDataCatalogInputDefinitionPtrOutput {
	return o
}

func (o RecipeDataCatalogInputDefinitionPtrOutput) Elem() RecipeDataCatalogInputDefinitionOutput {
	return o.ApplyT(func(v *RecipeDataCatalogInputDefinition) RecipeDataCatalogInputDefinition {
		if v != nil {
			return *v
		}
		var ret RecipeDataCatalogInputDefinition
		return ret
	}).(RecipeDataCatalogInputDefinitionOutput)
}

// Catalog id
func (o RecipeDataCatalogInputDefinitionPtrOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecipeDataCatalogInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.CatalogId
	}).(pulumi.StringPtrOutput)
}

// Database name
func (o RecipeDataCatalogInputDefinitionPtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecipeDataCatalogInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Table name
func (o RecipeDataCatalogInputDefinitionPtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecipeDataCatalogInputDefinition) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

func (o RecipeDataCatalogInputDefinitionPtrOutput) TempDirectory() RecipeS3LocationPtrOutput {
	return o.ApplyT(func(v *RecipeDataCatalogInputDefinition) *RecipeS3Location {
		if v == nil {
			return nil
		}
		return v.TempDirectory
	}).(RecipeS3LocationPtrOutput)
}

type RecipeParameterMap struct {
}

// RecipeParameterMapInput is an input type that accepts RecipeParameterMap and RecipeParameterMapOutput values.
// You can construct a concrete instance of `RecipeParameterMapInput` via:
//
//          RecipeParameterMap{ "key": RecipeParameterArgs{...} }
type RecipeParameterMapInput interface {
	pulumi.Input

	ToRecipeParameterMapOutput() RecipeParameterMapOutput
	ToRecipeParameterMapOutputWithContext(context.Context) RecipeParameterMapOutput
}

type RecipeParameterMapArgs struct {
}

func (RecipeParameterMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeParameterMap)(nil)).Elem()
}

func (i RecipeParameterMapArgs) ToRecipeParameterMapOutput() RecipeParameterMapOutput {
	return i.ToRecipeParameterMapOutputWithContext(context.Background())
}

func (i RecipeParameterMapArgs) ToRecipeParameterMapOutputWithContext(ctx context.Context) RecipeParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeParameterMapOutput)
}

type RecipeParameterMapOutput struct{ *pulumi.OutputState }

func (RecipeParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeParameterMap)(nil)).Elem()
}

func (o RecipeParameterMapOutput) ToRecipeParameterMapOutput() RecipeParameterMapOutput {
	return o
}

func (o RecipeParameterMapOutput) ToRecipeParameterMapOutputWithContext(ctx context.Context) RecipeParameterMapOutput {
	return o
}

type RecipeRecipeParameters struct {
	AggregateFunction             *string `pulumi:"aggregateFunction"`
	Base                          *string `pulumi:"base"`
	CaseStatement                 *string `pulumi:"caseStatement"`
	CategoryMap                   *string `pulumi:"categoryMap"`
	CharsToRemove                 *string `pulumi:"charsToRemove"`
	CollapseConsecutiveWhitespace *string `pulumi:"collapseConsecutiveWhitespace"`
	ColumnDataType                *string `pulumi:"columnDataType"`
	ColumnRange                   *string `pulumi:"columnRange"`
	Count                         *string `pulumi:"count"`
	CustomCharacters              *string `pulumi:"customCharacters"`
	CustomStopWords               *string `pulumi:"customStopWords"`
	CustomValue                   *string `pulumi:"customValue"`
	DatasetsColumns               *string `pulumi:"datasetsColumns"`
	DateAddValue                  *string `pulumi:"dateAddValue"`
	DateTimeFormat                *string `pulumi:"dateTimeFormat"`
	DateTimeParameters            *string `pulumi:"dateTimeParameters"`
	DeleteOtherRows               *string `pulumi:"deleteOtherRows"`
	Delimiter                     *string `pulumi:"delimiter"`
	EndPattern                    *string `pulumi:"endPattern"`
	EndPosition                   *string `pulumi:"endPosition"`
	EndValue                      *string `pulumi:"endValue"`
	ExpandContractions            *string `pulumi:"expandContractions"`
	Exponent                      *string `pulumi:"exponent"`
	FalseString                   *string `pulumi:"falseString"`
	GroupByAggFunctionOptions     *string `pulumi:"groupByAggFunctionOptions"`
	GroupByColumns                *string `pulumi:"groupByColumns"`
	HiddenColumns                 *string `pulumi:"hiddenColumns"`
	IgnoreCase                    *string `pulumi:"ignoreCase"`
	IncludeInSplit                *string `pulumi:"includeInSplit"`
	// Input
	Input                               interface{}            `pulumi:"input"`
	Interval                            *string                `pulumi:"interval"`
	IsText                              *string                `pulumi:"isText"`
	JoinKeys                            *string                `pulumi:"joinKeys"`
	JoinType                            *string                `pulumi:"joinType"`
	LeftColumns                         *string                `pulumi:"leftColumns"`
	Limit                               *string                `pulumi:"limit"`
	LowerBound                          *string                `pulumi:"lowerBound"`
	MapType                             *string                `pulumi:"mapType"`
	ModeType                            *string                `pulumi:"modeType"`
	MultiLine                           *bool                  `pulumi:"multiLine"`
	NumRows                             *string                `pulumi:"numRows"`
	NumRowsAfter                        *string                `pulumi:"numRowsAfter"`
	NumRowsBefore                       *string                `pulumi:"numRowsBefore"`
	OrderByColumn                       *string                `pulumi:"orderByColumn"`
	OrderByColumns                      *string                `pulumi:"orderByColumns"`
	Other                               *string                `pulumi:"other"`
	Pattern                             *string                `pulumi:"pattern"`
	PatternOption1                      *string                `pulumi:"patternOption1"`
	PatternOption2                      *string                `pulumi:"patternOption2"`
	PatternOptions                      *string                `pulumi:"patternOptions"`
	Period                              *string                `pulumi:"period"`
	Position                            *string                `pulumi:"position"`
	RemoveAllPunctuation                *string                `pulumi:"removeAllPunctuation"`
	RemoveAllQuotes                     *string                `pulumi:"removeAllQuotes"`
	RemoveAllWhitespace                 *string                `pulumi:"removeAllWhitespace"`
	RemoveCustomCharacters              *string                `pulumi:"removeCustomCharacters"`
	RemoveCustomValue                   *string                `pulumi:"removeCustomValue"`
	RemoveLeadingAndTrailingPunctuation *string                `pulumi:"removeLeadingAndTrailingPunctuation"`
	RemoveLeadingAndTrailingQuotes      *string                `pulumi:"removeLeadingAndTrailingQuotes"`
	RemoveLeadingAndTrailingWhitespace  *string                `pulumi:"removeLeadingAndTrailingWhitespace"`
	RemoveLetters                       *string                `pulumi:"removeLetters"`
	RemoveNumbers                       *string                `pulumi:"removeNumbers"`
	RemoveSourceColumn                  *string                `pulumi:"removeSourceColumn"`
	RemoveSpecialCharacters             *string                `pulumi:"removeSpecialCharacters"`
	RightColumns                        *string                `pulumi:"rightColumns"`
	SampleSize                          *string                `pulumi:"sampleSize"`
	SampleType                          *string                `pulumi:"sampleType"`
	SecondInput                         *string                `pulumi:"secondInput"`
	SecondaryInputs                     []RecipeSecondaryInput `pulumi:"secondaryInputs"`
	SheetIndexes                        []int                  `pulumi:"sheetIndexes"`
	SheetNames                          []string               `pulumi:"sheetNames"`
	SourceColumn                        *string                `pulumi:"sourceColumn"`
	SourceColumn1                       *string                `pulumi:"sourceColumn1"`
	SourceColumn2                       *string                `pulumi:"sourceColumn2"`
	SourceColumns                       *string                `pulumi:"sourceColumns"`
	StartColumnIndex                    *string                `pulumi:"startColumnIndex"`
	StartPattern                        *string                `pulumi:"startPattern"`
	StartPosition                       *string                `pulumi:"startPosition"`
	StartValue                          *string                `pulumi:"startValue"`
	StemmingMode                        *string                `pulumi:"stemmingMode"`
	StepCount                           *string                `pulumi:"stepCount"`
	StepIndex                           *string                `pulumi:"stepIndex"`
	StopWordsMode                       *string                `pulumi:"stopWordsMode"`
	Strategy                            *string                `pulumi:"strategy"`
	TargetColumn                        *string                `pulumi:"targetColumn"`
	TargetColumnNames                   *string                `pulumi:"targetColumnNames"`
	TargetDateFormat                    *string                `pulumi:"targetDateFormat"`
	TargetIndex                         *string                `pulumi:"targetIndex"`
	TimeZone                            *string                `pulumi:"timeZone"`
	TokenizerPattern                    *string                `pulumi:"tokenizerPattern"`
	TrueString                          *string                `pulumi:"trueString"`
	UdfLang                             *string                `pulumi:"udfLang"`
	Units                               *string                `pulumi:"units"`
	UnpivotColumn                       *string                `pulumi:"unpivotColumn"`
	UpperBound                          *string                `pulumi:"upperBound"`
	UseNewDataFrame                     *string                `pulumi:"useNewDataFrame"`
	Value                               *string                `pulumi:"value"`
	Value1                              *string                `pulumi:"value1"`
	Value2                              *string                `pulumi:"value2"`
	ValueColumn                         *string                `pulumi:"valueColumn"`
	ViewFrame                           *string                `pulumi:"viewFrame"`
}

// RecipeRecipeParametersInput is an input type that accepts RecipeRecipeParametersArgs and RecipeRecipeParametersOutput values.
// You can construct a concrete instance of `RecipeRecipeParametersInput` via:
//
//          RecipeRecipeParametersArgs{...}
type RecipeRecipeParametersInput interface {
	pulumi.Input

	ToRecipeRecipeParametersOutput() RecipeRecipeParametersOutput
	ToRecipeRecipeParametersOutputWithContext(context.Context) RecipeRecipeParametersOutput
}

type RecipeRecipeParametersArgs struct {
	AggregateFunction             pulumi.StringPtrInput `pulumi:"aggregateFunction"`
	Base                          pulumi.StringPtrInput `pulumi:"base"`
	CaseStatement                 pulumi.StringPtrInput `pulumi:"caseStatement"`
	CategoryMap                   pulumi.StringPtrInput `pulumi:"categoryMap"`
	CharsToRemove                 pulumi.StringPtrInput `pulumi:"charsToRemove"`
	CollapseConsecutiveWhitespace pulumi.StringPtrInput `pulumi:"collapseConsecutiveWhitespace"`
	ColumnDataType                pulumi.StringPtrInput `pulumi:"columnDataType"`
	ColumnRange                   pulumi.StringPtrInput `pulumi:"columnRange"`
	Count                         pulumi.StringPtrInput `pulumi:"count"`
	CustomCharacters              pulumi.StringPtrInput `pulumi:"customCharacters"`
	CustomStopWords               pulumi.StringPtrInput `pulumi:"customStopWords"`
	CustomValue                   pulumi.StringPtrInput `pulumi:"customValue"`
	DatasetsColumns               pulumi.StringPtrInput `pulumi:"datasetsColumns"`
	DateAddValue                  pulumi.StringPtrInput `pulumi:"dateAddValue"`
	DateTimeFormat                pulumi.StringPtrInput `pulumi:"dateTimeFormat"`
	DateTimeParameters            pulumi.StringPtrInput `pulumi:"dateTimeParameters"`
	DeleteOtherRows               pulumi.StringPtrInput `pulumi:"deleteOtherRows"`
	Delimiter                     pulumi.StringPtrInput `pulumi:"delimiter"`
	EndPattern                    pulumi.StringPtrInput `pulumi:"endPattern"`
	EndPosition                   pulumi.StringPtrInput `pulumi:"endPosition"`
	EndValue                      pulumi.StringPtrInput `pulumi:"endValue"`
	ExpandContractions            pulumi.StringPtrInput `pulumi:"expandContractions"`
	Exponent                      pulumi.StringPtrInput `pulumi:"exponent"`
	FalseString                   pulumi.StringPtrInput `pulumi:"falseString"`
	GroupByAggFunctionOptions     pulumi.StringPtrInput `pulumi:"groupByAggFunctionOptions"`
	GroupByColumns                pulumi.StringPtrInput `pulumi:"groupByColumns"`
	HiddenColumns                 pulumi.StringPtrInput `pulumi:"hiddenColumns"`
	IgnoreCase                    pulumi.StringPtrInput `pulumi:"ignoreCase"`
	IncludeInSplit                pulumi.StringPtrInput `pulumi:"includeInSplit"`
	// Input
	Input                               pulumi.Input                   `pulumi:"input"`
	Interval                            pulumi.StringPtrInput          `pulumi:"interval"`
	IsText                              pulumi.StringPtrInput          `pulumi:"isText"`
	JoinKeys                            pulumi.StringPtrInput          `pulumi:"joinKeys"`
	JoinType                            pulumi.StringPtrInput          `pulumi:"joinType"`
	LeftColumns                         pulumi.StringPtrInput          `pulumi:"leftColumns"`
	Limit                               pulumi.StringPtrInput          `pulumi:"limit"`
	LowerBound                          pulumi.StringPtrInput          `pulumi:"lowerBound"`
	MapType                             pulumi.StringPtrInput          `pulumi:"mapType"`
	ModeType                            pulumi.StringPtrInput          `pulumi:"modeType"`
	MultiLine                           pulumi.BoolPtrInput            `pulumi:"multiLine"`
	NumRows                             pulumi.StringPtrInput          `pulumi:"numRows"`
	NumRowsAfter                        pulumi.StringPtrInput          `pulumi:"numRowsAfter"`
	NumRowsBefore                       pulumi.StringPtrInput          `pulumi:"numRowsBefore"`
	OrderByColumn                       pulumi.StringPtrInput          `pulumi:"orderByColumn"`
	OrderByColumns                      pulumi.StringPtrInput          `pulumi:"orderByColumns"`
	Other                               pulumi.StringPtrInput          `pulumi:"other"`
	Pattern                             pulumi.StringPtrInput          `pulumi:"pattern"`
	PatternOption1                      pulumi.StringPtrInput          `pulumi:"patternOption1"`
	PatternOption2                      pulumi.StringPtrInput          `pulumi:"patternOption2"`
	PatternOptions                      pulumi.StringPtrInput          `pulumi:"patternOptions"`
	Period                              pulumi.StringPtrInput          `pulumi:"period"`
	Position                            pulumi.StringPtrInput          `pulumi:"position"`
	RemoveAllPunctuation                pulumi.StringPtrInput          `pulumi:"removeAllPunctuation"`
	RemoveAllQuotes                     pulumi.StringPtrInput          `pulumi:"removeAllQuotes"`
	RemoveAllWhitespace                 pulumi.StringPtrInput          `pulumi:"removeAllWhitespace"`
	RemoveCustomCharacters              pulumi.StringPtrInput          `pulumi:"removeCustomCharacters"`
	RemoveCustomValue                   pulumi.StringPtrInput          `pulumi:"removeCustomValue"`
	RemoveLeadingAndTrailingPunctuation pulumi.StringPtrInput          `pulumi:"removeLeadingAndTrailingPunctuation"`
	RemoveLeadingAndTrailingQuotes      pulumi.StringPtrInput          `pulumi:"removeLeadingAndTrailingQuotes"`
	RemoveLeadingAndTrailingWhitespace  pulumi.StringPtrInput          `pulumi:"removeLeadingAndTrailingWhitespace"`
	RemoveLetters                       pulumi.StringPtrInput          `pulumi:"removeLetters"`
	RemoveNumbers                       pulumi.StringPtrInput          `pulumi:"removeNumbers"`
	RemoveSourceColumn                  pulumi.StringPtrInput          `pulumi:"removeSourceColumn"`
	RemoveSpecialCharacters             pulumi.StringPtrInput          `pulumi:"removeSpecialCharacters"`
	RightColumns                        pulumi.StringPtrInput          `pulumi:"rightColumns"`
	SampleSize                          pulumi.StringPtrInput          `pulumi:"sampleSize"`
	SampleType                          pulumi.StringPtrInput          `pulumi:"sampleType"`
	SecondInput                         pulumi.StringPtrInput          `pulumi:"secondInput"`
	SecondaryInputs                     RecipeSecondaryInputArrayInput `pulumi:"secondaryInputs"`
	SheetIndexes                        pulumi.IntArrayInput           `pulumi:"sheetIndexes"`
	SheetNames                          pulumi.StringArrayInput        `pulumi:"sheetNames"`
	SourceColumn                        pulumi.StringPtrInput          `pulumi:"sourceColumn"`
	SourceColumn1                       pulumi.StringPtrInput          `pulumi:"sourceColumn1"`
	SourceColumn2                       pulumi.StringPtrInput          `pulumi:"sourceColumn2"`
	SourceColumns                       pulumi.StringPtrInput          `pulumi:"sourceColumns"`
	StartColumnIndex                    pulumi.StringPtrInput          `pulumi:"startColumnIndex"`
	StartPattern                        pulumi.StringPtrInput          `pulumi:"startPattern"`
	StartPosition                       pulumi.StringPtrInput          `pulumi:"startPosition"`
	StartValue                          pulumi.StringPtrInput          `pulumi:"startValue"`
	StemmingMode                        pulumi.StringPtrInput          `pulumi:"stemmingMode"`
	StepCount                           pulumi.StringPtrInput          `pulumi:"stepCount"`
	StepIndex                           pulumi.StringPtrInput          `pulumi:"stepIndex"`
	StopWordsMode                       pulumi.StringPtrInput          `pulumi:"stopWordsMode"`
	Strategy                            pulumi.StringPtrInput          `pulumi:"strategy"`
	TargetColumn                        pulumi.StringPtrInput          `pulumi:"targetColumn"`
	TargetColumnNames                   pulumi.StringPtrInput          `pulumi:"targetColumnNames"`
	TargetDateFormat                    pulumi.StringPtrInput          `pulumi:"targetDateFormat"`
	TargetIndex                         pulumi.StringPtrInput          `pulumi:"targetIndex"`
	TimeZone                            pulumi.StringPtrInput          `pulumi:"timeZone"`
	TokenizerPattern                    pulumi.StringPtrInput          `pulumi:"tokenizerPattern"`
	TrueString                          pulumi.StringPtrInput          `pulumi:"trueString"`
	UdfLang                             pulumi.StringPtrInput          `pulumi:"udfLang"`
	Units                               pulumi.StringPtrInput          `pulumi:"units"`
	UnpivotColumn                       pulumi.StringPtrInput          `pulumi:"unpivotColumn"`
	UpperBound                          pulumi.StringPtrInput          `pulumi:"upperBound"`
	UseNewDataFrame                     pulumi.StringPtrInput          `pulumi:"useNewDataFrame"`
	Value                               pulumi.StringPtrInput          `pulumi:"value"`
	Value1                              pulumi.StringPtrInput          `pulumi:"value1"`
	Value2                              pulumi.StringPtrInput          `pulumi:"value2"`
	ValueColumn                         pulumi.StringPtrInput          `pulumi:"valueColumn"`
	ViewFrame                           pulumi.StringPtrInput          `pulumi:"viewFrame"`
}

func (RecipeRecipeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeRecipeParameters)(nil)).Elem()
}

func (i RecipeRecipeParametersArgs) ToRecipeRecipeParametersOutput() RecipeRecipeParametersOutput {
	return i.ToRecipeRecipeParametersOutputWithContext(context.Background())
}

func (i RecipeRecipeParametersArgs) ToRecipeRecipeParametersOutputWithContext(ctx context.Context) RecipeRecipeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeRecipeParametersOutput)
}

type RecipeRecipeParametersOutput struct{ *pulumi.OutputState }

func (RecipeRecipeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeRecipeParameters)(nil)).Elem()
}

func (o RecipeRecipeParametersOutput) ToRecipeRecipeParametersOutput() RecipeRecipeParametersOutput {
	return o
}

func (o RecipeRecipeParametersOutput) ToRecipeRecipeParametersOutputWithContext(ctx context.Context) RecipeRecipeParametersOutput {
	return o
}

func (o RecipeRecipeParametersOutput) AggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.AggregateFunction }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Base() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Base }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) CaseStatement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.CaseStatement }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) CategoryMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.CategoryMap }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) CharsToRemove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.CharsToRemove }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) CollapseConsecutiveWhitespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.CollapseConsecutiveWhitespace }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) ColumnDataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.ColumnDataType }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) ColumnRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.ColumnRange }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Count }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) CustomCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.CustomCharacters }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) CustomStopWords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.CustomStopWords }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) CustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.CustomValue }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) DatasetsColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.DatasetsColumns }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) DateAddValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.DateAddValue }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) DateTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.DateTimeFormat }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) DateTimeParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.DateTimeParameters }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) DeleteOtherRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.DeleteOtherRows }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) EndPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.EndPattern }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) EndPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.EndPosition }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) EndValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.EndValue }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) ExpandContractions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.ExpandContractions }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Exponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Exponent }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) FalseString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.FalseString }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) GroupByAggFunctionOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.GroupByAggFunctionOptions }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) GroupByColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.GroupByColumns }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) HiddenColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.HiddenColumns }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) IgnoreCase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.IgnoreCase }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) IncludeInSplit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.IncludeInSplit }).(pulumi.StringPtrOutput)
}

// Input
func (o RecipeRecipeParametersOutput) Input() pulumi.AnyOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) interface{} { return v.Input }).(pulumi.AnyOutput)
}

func (o RecipeRecipeParametersOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) IsText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.IsText }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) JoinKeys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.JoinKeys }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) JoinType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.JoinType }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) LeftColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.LeftColumns }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Limit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Limit }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) LowerBound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.LowerBound }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) MapType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.MapType }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) ModeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.ModeType }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) MultiLine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *bool { return v.MultiLine }).(pulumi.BoolPtrOutput)
}

func (o RecipeRecipeParametersOutput) NumRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.NumRows }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) NumRowsAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.NumRowsAfter }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) NumRowsBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.NumRowsBefore }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) OrderByColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.OrderByColumn }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) OrderByColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.OrderByColumns }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Other() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Other }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) PatternOption1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.PatternOption1 }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) PatternOption2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.PatternOption2 }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) PatternOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.PatternOptions }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Period }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Position() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Position }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveAllPunctuation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveAllPunctuation }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveAllQuotes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveAllQuotes }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveAllWhitespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveAllWhitespace }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveCustomCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveCustomCharacters }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveCustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveCustomValue }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveLeadingAndTrailingPunctuation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveLeadingAndTrailingPunctuation }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveLeadingAndTrailingQuotes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveLeadingAndTrailingQuotes }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveLeadingAndTrailingWhitespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveLeadingAndTrailingWhitespace }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveLetters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveLetters }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveNumbers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveNumbers }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveSourceColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveSourceColumn }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RemoveSpecialCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RemoveSpecialCharacters }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) RightColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.RightColumns }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) SampleSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.SampleSize }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) SampleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.SampleType }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) SecondInput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.SecondInput }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) SecondaryInputs() RecipeSecondaryInputArrayOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) []RecipeSecondaryInput { return v.SecondaryInputs }).(RecipeSecondaryInputArrayOutput)
}

func (o RecipeRecipeParametersOutput) SheetIndexes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) []int { return v.SheetIndexes }).(pulumi.IntArrayOutput)
}

func (o RecipeRecipeParametersOutput) SheetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) []string { return v.SheetNames }).(pulumi.StringArrayOutput)
}

func (o RecipeRecipeParametersOutput) SourceColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.SourceColumn }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) SourceColumn1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.SourceColumn1 }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) SourceColumn2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.SourceColumn2 }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) SourceColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.SourceColumns }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StartColumnIndex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StartColumnIndex }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StartPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StartPattern }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StartPosition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StartPosition }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StartValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StartValue }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StemmingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StemmingMode }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StepCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StepCount }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StepIndex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StepIndex }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) StopWordsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.StopWordsMode }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) TargetColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.TargetColumn }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) TargetColumnNames() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.TargetColumnNames }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) TargetDateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.TargetDateFormat }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) TargetIndex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.TargetIndex }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) TokenizerPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.TokenizerPattern }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) TrueString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.TrueString }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) UdfLang() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.UdfLang }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Units }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) UnpivotColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.UnpivotColumn }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) UpperBound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.UpperBound }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) UseNewDataFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.UseNewDataFrame }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Value }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Value1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Value1 }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) Value2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.Value2 }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) ValueColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.ValueColumn }).(pulumi.StringPtrOutput)
}

func (o RecipeRecipeParametersOutput) ViewFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeRecipeParameters) *string { return v.ViewFrame }).(pulumi.StringPtrOutput)
}

type RecipeRecipeStep struct {
	Action RecipeAction `pulumi:"action"`
	// Condition expressions applied to the step action
	ConditionExpressions []RecipeConditionExpression `pulumi:"conditionExpressions"`
}

// RecipeRecipeStepInput is an input type that accepts RecipeRecipeStepArgs and RecipeRecipeStepOutput values.
// You can construct a concrete instance of `RecipeRecipeStepInput` via:
//
//          RecipeRecipeStepArgs{...}
type RecipeRecipeStepInput interface {
	pulumi.Input

	ToRecipeRecipeStepOutput() RecipeRecipeStepOutput
	ToRecipeRecipeStepOutputWithContext(context.Context) RecipeRecipeStepOutput
}

type RecipeRecipeStepArgs struct {
	Action RecipeActionInput `pulumi:"action"`
	// Condition expressions applied to the step action
	ConditionExpressions RecipeConditionExpressionArrayInput `pulumi:"conditionExpressions"`
}

func (RecipeRecipeStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeRecipeStep)(nil)).Elem()
}

func (i RecipeRecipeStepArgs) ToRecipeRecipeStepOutput() RecipeRecipeStepOutput {
	return i.ToRecipeRecipeStepOutputWithContext(context.Background())
}

func (i RecipeRecipeStepArgs) ToRecipeRecipeStepOutputWithContext(ctx context.Context) RecipeRecipeStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeRecipeStepOutput)
}

// RecipeRecipeStepArrayInput is an input type that accepts RecipeRecipeStepArray and RecipeRecipeStepArrayOutput values.
// You can construct a concrete instance of `RecipeRecipeStepArrayInput` via:
//
//          RecipeRecipeStepArray{ RecipeRecipeStepArgs{...} }
type RecipeRecipeStepArrayInput interface {
	pulumi.Input

	ToRecipeRecipeStepArrayOutput() RecipeRecipeStepArrayOutput
	ToRecipeRecipeStepArrayOutputWithContext(context.Context) RecipeRecipeStepArrayOutput
}

type RecipeRecipeStepArray []RecipeRecipeStepInput

func (RecipeRecipeStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeRecipeStep)(nil)).Elem()
}

func (i RecipeRecipeStepArray) ToRecipeRecipeStepArrayOutput() RecipeRecipeStepArrayOutput {
	return i.ToRecipeRecipeStepArrayOutputWithContext(context.Background())
}

func (i RecipeRecipeStepArray) ToRecipeRecipeStepArrayOutputWithContext(ctx context.Context) RecipeRecipeStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeRecipeStepArrayOutput)
}

type RecipeRecipeStepOutput struct{ *pulumi.OutputState }

func (RecipeRecipeStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeRecipeStep)(nil)).Elem()
}

func (o RecipeRecipeStepOutput) ToRecipeRecipeStepOutput() RecipeRecipeStepOutput {
	return o
}

func (o RecipeRecipeStepOutput) ToRecipeRecipeStepOutputWithContext(ctx context.Context) RecipeRecipeStepOutput {
	return o
}

func (o RecipeRecipeStepOutput) Action() RecipeActionOutput {
	return o.ApplyT(func(v RecipeRecipeStep) RecipeAction { return v.Action }).(RecipeActionOutput)
}

// Condition expressions applied to the step action
func (o RecipeRecipeStepOutput) ConditionExpressions() RecipeConditionExpressionArrayOutput {
	return o.ApplyT(func(v RecipeRecipeStep) []RecipeConditionExpression { return v.ConditionExpressions }).(RecipeConditionExpressionArrayOutput)
}

type RecipeRecipeStepArrayOutput struct{ *pulumi.OutputState }

func (RecipeRecipeStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeRecipeStep)(nil)).Elem()
}

func (o RecipeRecipeStepArrayOutput) ToRecipeRecipeStepArrayOutput() RecipeRecipeStepArrayOutput {
	return o
}

func (o RecipeRecipeStepArrayOutput) ToRecipeRecipeStepArrayOutputWithContext(ctx context.Context) RecipeRecipeStepArrayOutput {
	return o
}

func (o RecipeRecipeStepArrayOutput) Index(i pulumi.IntInput) RecipeRecipeStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecipeRecipeStep {
		return vs[0].([]RecipeRecipeStep)[vs[1].(int)]
	}).(RecipeRecipeStepOutput)
}

// Input location
type RecipeS3Location struct {
	Bucket string  `pulumi:"bucket"`
	Key    *string `pulumi:"key"`
}

// RecipeS3LocationInput is an input type that accepts RecipeS3LocationArgs and RecipeS3LocationOutput values.
// You can construct a concrete instance of `RecipeS3LocationInput` via:
//
//          RecipeS3LocationArgs{...}
type RecipeS3LocationInput interface {
	pulumi.Input

	ToRecipeS3LocationOutput() RecipeS3LocationOutput
	ToRecipeS3LocationOutputWithContext(context.Context) RecipeS3LocationOutput
}

// Input location
type RecipeS3LocationArgs struct {
	Bucket pulumi.StringInput    `pulumi:"bucket"`
	Key    pulumi.StringPtrInput `pulumi:"key"`
}

func (RecipeS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeS3Location)(nil)).Elem()
}

func (i RecipeS3LocationArgs) ToRecipeS3LocationOutput() RecipeS3LocationOutput {
	return i.ToRecipeS3LocationOutputWithContext(context.Background())
}

func (i RecipeS3LocationArgs) ToRecipeS3LocationOutputWithContext(ctx context.Context) RecipeS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeS3LocationOutput)
}

func (i RecipeS3LocationArgs) ToRecipeS3LocationPtrOutput() RecipeS3LocationPtrOutput {
	return i.ToRecipeS3LocationPtrOutputWithContext(context.Background())
}

func (i RecipeS3LocationArgs) ToRecipeS3LocationPtrOutputWithContext(ctx context.Context) RecipeS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeS3LocationOutput).ToRecipeS3LocationPtrOutputWithContext(ctx)
}

// RecipeS3LocationPtrInput is an input type that accepts RecipeS3LocationArgs, RecipeS3LocationPtr and RecipeS3LocationPtrOutput values.
// You can construct a concrete instance of `RecipeS3LocationPtrInput` via:
//
//          RecipeS3LocationArgs{...}
//
//  or:
//
//          nil
type RecipeS3LocationPtrInput interface {
	pulumi.Input

	ToRecipeS3LocationPtrOutput() RecipeS3LocationPtrOutput
	ToRecipeS3LocationPtrOutputWithContext(context.Context) RecipeS3LocationPtrOutput
}

type recipeS3LocationPtrType RecipeS3LocationArgs

func RecipeS3LocationPtr(v *RecipeS3LocationArgs) RecipeS3LocationPtrInput {
	return (*recipeS3LocationPtrType)(v)
}

func (*recipeS3LocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecipeS3Location)(nil)).Elem()
}

func (i *recipeS3LocationPtrType) ToRecipeS3LocationPtrOutput() RecipeS3LocationPtrOutput {
	return i.ToRecipeS3LocationPtrOutputWithContext(context.Background())
}

func (i *recipeS3LocationPtrType) ToRecipeS3LocationPtrOutputWithContext(ctx context.Context) RecipeS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeS3LocationPtrOutput)
}

// Input location
type RecipeS3LocationOutput struct{ *pulumi.OutputState }

func (RecipeS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeS3Location)(nil)).Elem()
}

func (o RecipeS3LocationOutput) ToRecipeS3LocationOutput() RecipeS3LocationOutput {
	return o
}

func (o RecipeS3LocationOutput) ToRecipeS3LocationOutputWithContext(ctx context.Context) RecipeS3LocationOutput {
	return o
}

func (o RecipeS3LocationOutput) ToRecipeS3LocationPtrOutput() RecipeS3LocationPtrOutput {
	return o.ToRecipeS3LocationPtrOutputWithContext(context.Background())
}

func (o RecipeS3LocationOutput) ToRecipeS3LocationPtrOutputWithContext(ctx context.Context) RecipeS3LocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecipeS3Location) *RecipeS3Location {
		return &v
	}).(RecipeS3LocationPtrOutput)
}

func (o RecipeS3LocationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeS3Location) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o RecipeS3LocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecipeS3Location) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type RecipeS3LocationPtrOutput struct{ *pulumi.OutputState }

func (RecipeS3LocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecipeS3Location)(nil)).Elem()
}

func (o RecipeS3LocationPtrOutput) ToRecipeS3LocationPtrOutput() RecipeS3LocationPtrOutput {
	return o
}

func (o RecipeS3LocationPtrOutput) ToRecipeS3LocationPtrOutputWithContext(ctx context.Context) RecipeS3LocationPtrOutput {
	return o
}

func (o RecipeS3LocationPtrOutput) Elem() RecipeS3LocationOutput {
	return o.ApplyT(func(v *RecipeS3Location) RecipeS3Location {
		if v != nil {
			return *v
		}
		var ret RecipeS3Location
		return ret
	}).(RecipeS3LocationOutput)
}

func (o RecipeS3LocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecipeS3Location) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

func (o RecipeS3LocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecipeS3Location) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Secondary input
type RecipeSecondaryInput struct {
	DataCatalogInputDefinition *RecipeDataCatalogInputDefinition `pulumi:"dataCatalogInputDefinition"`
	S3InputDefinition          *RecipeS3Location                 `pulumi:"s3InputDefinition"`
}

// RecipeSecondaryInputInput is an input type that accepts RecipeSecondaryInputArgs and RecipeSecondaryInputOutput values.
// You can construct a concrete instance of `RecipeSecondaryInputInput` via:
//
//          RecipeSecondaryInputArgs{...}
type RecipeSecondaryInputInput interface {
	pulumi.Input

	ToRecipeSecondaryInputOutput() RecipeSecondaryInputOutput
	ToRecipeSecondaryInputOutputWithContext(context.Context) RecipeSecondaryInputOutput
}

// Secondary input
type RecipeSecondaryInputArgs struct {
	DataCatalogInputDefinition RecipeDataCatalogInputDefinitionPtrInput `pulumi:"dataCatalogInputDefinition"`
	S3InputDefinition          RecipeS3LocationPtrInput                 `pulumi:"s3InputDefinition"`
}

func (RecipeSecondaryInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeSecondaryInput)(nil)).Elem()
}

func (i RecipeSecondaryInputArgs) ToRecipeSecondaryInputOutput() RecipeSecondaryInputOutput {
	return i.ToRecipeSecondaryInputOutputWithContext(context.Background())
}

func (i RecipeSecondaryInputArgs) ToRecipeSecondaryInputOutputWithContext(ctx context.Context) RecipeSecondaryInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeSecondaryInputOutput)
}

// RecipeSecondaryInputArrayInput is an input type that accepts RecipeSecondaryInputArray and RecipeSecondaryInputArrayOutput values.
// You can construct a concrete instance of `RecipeSecondaryInputArrayInput` via:
//
//          RecipeSecondaryInputArray{ RecipeSecondaryInputArgs{...} }
type RecipeSecondaryInputArrayInput interface {
	pulumi.Input

	ToRecipeSecondaryInputArrayOutput() RecipeSecondaryInputArrayOutput
	ToRecipeSecondaryInputArrayOutputWithContext(context.Context) RecipeSecondaryInputArrayOutput
}

type RecipeSecondaryInputArray []RecipeSecondaryInputInput

func (RecipeSecondaryInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeSecondaryInput)(nil)).Elem()
}

func (i RecipeSecondaryInputArray) ToRecipeSecondaryInputArrayOutput() RecipeSecondaryInputArrayOutput {
	return i.ToRecipeSecondaryInputArrayOutputWithContext(context.Background())
}

func (i RecipeSecondaryInputArray) ToRecipeSecondaryInputArrayOutputWithContext(ctx context.Context) RecipeSecondaryInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeSecondaryInputArrayOutput)
}

// Secondary input
type RecipeSecondaryInputOutput struct{ *pulumi.OutputState }

func (RecipeSecondaryInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeSecondaryInput)(nil)).Elem()
}

func (o RecipeSecondaryInputOutput) ToRecipeSecondaryInputOutput() RecipeSecondaryInputOutput {
	return o
}

func (o RecipeSecondaryInputOutput) ToRecipeSecondaryInputOutputWithContext(ctx context.Context) RecipeSecondaryInputOutput {
	return o
}

func (o RecipeSecondaryInputOutput) DataCatalogInputDefinition() RecipeDataCatalogInputDefinitionPtrOutput {
	return o.ApplyT(func(v RecipeSecondaryInput) *RecipeDataCatalogInputDefinition { return v.DataCatalogInputDefinition }).(RecipeDataCatalogInputDefinitionPtrOutput)
}

func (o RecipeSecondaryInputOutput) S3InputDefinition() RecipeS3LocationPtrOutput {
	return o.ApplyT(func(v RecipeSecondaryInput) *RecipeS3Location { return v.S3InputDefinition }).(RecipeS3LocationPtrOutput)
}

type RecipeSecondaryInputArrayOutput struct{ *pulumi.OutputState }

func (RecipeSecondaryInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeSecondaryInput)(nil)).Elem()
}

func (o RecipeSecondaryInputArrayOutput) ToRecipeSecondaryInputArrayOutput() RecipeSecondaryInputArrayOutput {
	return o
}

func (o RecipeSecondaryInputArrayOutput) ToRecipeSecondaryInputArrayOutputWithContext(ctx context.Context) RecipeSecondaryInputArrayOutput {
	return o
}

func (o RecipeSecondaryInputArrayOutput) Index(i pulumi.IntInput) RecipeSecondaryInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecipeSecondaryInput {
		return vs[0].([]RecipeSecondaryInput)[vs[1].(int)]
	}).(RecipeSecondaryInputOutput)
}

// A key-value pair to associate with a resource.
type RecipeTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// RecipeTagInput is an input type that accepts RecipeTagArgs and RecipeTagOutput values.
// You can construct a concrete instance of `RecipeTagInput` via:
//
//          RecipeTagArgs{...}
type RecipeTagInput interface {
	pulumi.Input

	ToRecipeTagOutput() RecipeTagOutput
	ToRecipeTagOutputWithContext(context.Context) RecipeTagOutput
}

// A key-value pair to associate with a resource.
type RecipeTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RecipeTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeTag)(nil)).Elem()
}

func (i RecipeTagArgs) ToRecipeTagOutput() RecipeTagOutput {
	return i.ToRecipeTagOutputWithContext(context.Background())
}

func (i RecipeTagArgs) ToRecipeTagOutputWithContext(ctx context.Context) RecipeTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeTagOutput)
}

// RecipeTagArrayInput is an input type that accepts RecipeTagArray and RecipeTagArrayOutput values.
// You can construct a concrete instance of `RecipeTagArrayInput` via:
//
//          RecipeTagArray{ RecipeTagArgs{...} }
type RecipeTagArrayInput interface {
	pulumi.Input

	ToRecipeTagArrayOutput() RecipeTagArrayOutput
	ToRecipeTagArrayOutputWithContext(context.Context) RecipeTagArrayOutput
}

type RecipeTagArray []RecipeTagInput

func (RecipeTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeTag)(nil)).Elem()
}

func (i RecipeTagArray) ToRecipeTagArrayOutput() RecipeTagArrayOutput {
	return i.ToRecipeTagArrayOutputWithContext(context.Background())
}

func (i RecipeTagArray) ToRecipeTagArrayOutputWithContext(ctx context.Context) RecipeTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecipeTagArrayOutput)
}

// A key-value pair to associate with a resource.
type RecipeTagOutput struct{ *pulumi.OutputState }

func (RecipeTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecipeTag)(nil)).Elem()
}

func (o RecipeTagOutput) ToRecipeTagOutput() RecipeTagOutput {
	return o
}

func (o RecipeTagOutput) ToRecipeTagOutputWithContext(ctx context.Context) RecipeTagOutput {
	return o
}

func (o RecipeTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o RecipeTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RecipeTag) string { return v.Value }).(pulumi.StringOutput)
}

type RecipeTagArrayOutput struct{ *pulumi.OutputState }

func (RecipeTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecipeTag)(nil)).Elem()
}

func (o RecipeTagArrayOutput) ToRecipeTagArrayOutput() RecipeTagArrayOutput {
	return o
}

func (o RecipeTagArrayOutput) ToRecipeTagArrayOutputWithContext(ctx context.Context) RecipeTagArrayOutput {
	return o
}

func (o RecipeTagArrayOutput) Index(i pulumi.IntInput) RecipeTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecipeTag {
		return vs[0].([]RecipeTag)[vs[1].(int)]
	}).(RecipeTagOutput)
}

// A key-value pair to associate with a resource.
type ScheduleTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ScheduleTagInput is an input type that accepts ScheduleTagArgs and ScheduleTagOutput values.
// You can construct a concrete instance of `ScheduleTagInput` via:
//
//          ScheduleTagArgs{...}
type ScheduleTagInput interface {
	pulumi.Input

	ToScheduleTagOutput() ScheduleTagOutput
	ToScheduleTagOutputWithContext(context.Context) ScheduleTagOutput
}

// A key-value pair to associate with a resource.
type ScheduleTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ScheduleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTag)(nil)).Elem()
}

func (i ScheduleTagArgs) ToScheduleTagOutput() ScheduleTagOutput {
	return i.ToScheduleTagOutputWithContext(context.Background())
}

func (i ScheduleTagArgs) ToScheduleTagOutputWithContext(ctx context.Context) ScheduleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTagOutput)
}

// ScheduleTagArrayInput is an input type that accepts ScheduleTagArray and ScheduleTagArrayOutput values.
// You can construct a concrete instance of `ScheduleTagArrayInput` via:
//
//          ScheduleTagArray{ ScheduleTagArgs{...} }
type ScheduleTagArrayInput interface {
	pulumi.Input

	ToScheduleTagArrayOutput() ScheduleTagArrayOutput
	ToScheduleTagArrayOutputWithContext(context.Context) ScheduleTagArrayOutput
}

type ScheduleTagArray []ScheduleTagInput

func (ScheduleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleTag)(nil)).Elem()
}

func (i ScheduleTagArray) ToScheduleTagArrayOutput() ScheduleTagArrayOutput {
	return i.ToScheduleTagArrayOutputWithContext(context.Background())
}

func (i ScheduleTagArray) ToScheduleTagArrayOutputWithContext(ctx context.Context) ScheduleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ScheduleTagOutput struct{ *pulumi.OutputState }

func (ScheduleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTag)(nil)).Elem()
}

func (o ScheduleTagOutput) ToScheduleTagOutput() ScheduleTagOutput {
	return o
}

func (o ScheduleTagOutput) ToScheduleTagOutputWithContext(ctx context.Context) ScheduleTagOutput {
	return o
}

func (o ScheduleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ScheduleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTag) string { return v.Value }).(pulumi.StringOutput)
}

type ScheduleTagArrayOutput struct{ *pulumi.OutputState }

func (ScheduleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleTag)(nil)).Elem()
}

func (o ScheduleTagArrayOutput) ToScheduleTagArrayOutput() ScheduleTagArrayOutput {
	return o
}

func (o ScheduleTagArrayOutput) ToScheduleTagArrayOutputWithContext(ctx context.Context) ScheduleTagArrayOutput {
	return o
}

func (o ScheduleTagArrayOutput) Index(i pulumi.IntInput) ScheduleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleTag {
		return vs[0].([]ScheduleTag)[vs[1].(int)]
	}).(ScheduleTagOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetCsvOptionsOutput{})
	pulumi.RegisterOutputType(DatasetCsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatasetDataCatalogInputDefinitionOutput{})
	pulumi.RegisterOutputType(DatasetDataCatalogInputDefinitionPtrOutput{})
	pulumi.RegisterOutputType(DatasetDatabaseInputDefinitionOutput{})
	pulumi.RegisterOutputType(DatasetDatabaseInputDefinitionPtrOutput{})
	pulumi.RegisterOutputType(DatasetDatasetParameterOutput{})
	pulumi.RegisterOutputType(DatasetDatetimeOptionsOutput{})
	pulumi.RegisterOutputType(DatasetDatetimeOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatasetExcelOptionsOutput{})
	pulumi.RegisterOutputType(DatasetExcelOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatasetFilesLimitOutput{})
	pulumi.RegisterOutputType(DatasetFilesLimitPtrOutput{})
	pulumi.RegisterOutputType(DatasetFilterExpressionOutput{})
	pulumi.RegisterOutputType(DatasetFilterExpressionPtrOutput{})
	pulumi.RegisterOutputType(DatasetFilterValueOutput{})
	pulumi.RegisterOutputType(DatasetFilterValueArrayOutput{})
	pulumi.RegisterOutputType(DatasetFormatOptionsOutput{})
	pulumi.RegisterOutputType(DatasetFormatOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatasetInputTypeOutput{})
	pulumi.RegisterOutputType(DatasetInputTypePtrOutput{})
	pulumi.RegisterOutputType(DatasetJsonOptionsOutput{})
	pulumi.RegisterOutputType(DatasetJsonOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatasetPathOptionsOutput{})
	pulumi.RegisterOutputType(DatasetPathOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatasetPathParameterOutput{})
	pulumi.RegisterOutputType(DatasetPathParameterArrayOutput{})
	pulumi.RegisterOutputType(DatasetS3LocationOutput{})
	pulumi.RegisterOutputType(DatasetS3LocationPtrOutput{})
	pulumi.RegisterOutputType(DatasetTagOutput{})
	pulumi.RegisterOutputType(DatasetTagArrayOutput{})
	pulumi.RegisterOutputType(JobColumnSelectorOutput{})
	pulumi.RegisterOutputType(JobColumnSelectorArrayOutput{})
	pulumi.RegisterOutputType(JobColumnStatisticsConfigurationOutput{})
	pulumi.RegisterOutputType(JobColumnStatisticsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(JobCsvOutputOptionsOutput{})
	pulumi.RegisterOutputType(JobCsvOutputOptionsPtrOutput{})
	pulumi.RegisterOutputType(JobDataCatalogOutputOutput{})
	pulumi.RegisterOutputType(JobDataCatalogOutputArrayOutput{})
	pulumi.RegisterOutputType(JobDatabaseOutputOutput{})
	pulumi.RegisterOutputType(JobDatabaseOutputArrayOutput{})
	pulumi.RegisterOutputType(JobDatabaseTableOutputOptionsOutput{})
	pulumi.RegisterOutputType(JobDatabaseTableOutputOptionsPtrOutput{})
	pulumi.RegisterOutputType(JobJobSampleOutput{})
	pulumi.RegisterOutputType(JobJobSamplePtrOutput{})
	pulumi.RegisterOutputType(JobOutputTypeOutput{})
	pulumi.RegisterOutputType(JobOutputTypeArrayOutput{})
	pulumi.RegisterOutputType(JobOutputFormatOptionsOutput{})
	pulumi.RegisterOutputType(JobOutputFormatOptionsPtrOutput{})
	pulumi.RegisterOutputType(JobOutputLocationOutput{})
	pulumi.RegisterOutputType(JobOutputLocationPtrOutput{})
	pulumi.RegisterOutputType(JobParameterMapOutput{})
	pulumi.RegisterOutputType(JobProfileConfigurationOutput{})
	pulumi.RegisterOutputType(JobProfileConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobRecipeOutput{})
	pulumi.RegisterOutputType(JobRecipePtrOutput{})
	pulumi.RegisterOutputType(JobS3LocationOutput{})
	pulumi.RegisterOutputType(JobS3LocationPtrOutput{})
	pulumi.RegisterOutputType(JobS3TableOutputOptionsOutput{})
	pulumi.RegisterOutputType(JobS3TableOutputOptionsPtrOutput{})
	pulumi.RegisterOutputType(JobStatisticOverrideOutput{})
	pulumi.RegisterOutputType(JobStatisticOverrideArrayOutput{})
	pulumi.RegisterOutputType(JobStatisticsConfigurationOutput{})
	pulumi.RegisterOutputType(JobStatisticsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobTagOutput{})
	pulumi.RegisterOutputType(JobTagArrayOutput{})
	pulumi.RegisterOutputType(ProjectSampleOutput{})
	pulumi.RegisterOutputType(ProjectSamplePtrOutput{})
	pulumi.RegisterOutputType(ProjectTagOutput{})
	pulumi.RegisterOutputType(ProjectTagArrayOutput{})
	pulumi.RegisterOutputType(RecipeActionOutput{})
	pulumi.RegisterOutputType(RecipeConditionExpressionOutput{})
	pulumi.RegisterOutputType(RecipeConditionExpressionArrayOutput{})
	pulumi.RegisterOutputType(RecipeDataCatalogInputDefinitionOutput{})
	pulumi.RegisterOutputType(RecipeDataCatalogInputDefinitionPtrOutput{})
	pulumi.RegisterOutputType(RecipeParameterMapOutput{})
	pulumi.RegisterOutputType(RecipeRecipeParametersOutput{})
	pulumi.RegisterOutputType(RecipeRecipeStepOutput{})
	pulumi.RegisterOutputType(RecipeRecipeStepArrayOutput{})
	pulumi.RegisterOutputType(RecipeS3LocationOutput{})
	pulumi.RegisterOutputType(RecipeS3LocationPtrOutput{})
	pulumi.RegisterOutputType(RecipeSecondaryInputOutput{})
	pulumi.RegisterOutputType(RecipeSecondaryInputArrayOutput{})
	pulumi.RegisterOutputType(RecipeTagOutput{})
	pulumi.RegisterOutputType(RecipeTagArrayOutput{})
	pulumi.RegisterOutputType(ScheduleTagOutput{})
	pulumi.RegisterOutputType(ScheduleTagArrayOutput{})
}
