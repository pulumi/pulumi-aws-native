// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databrew

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataBrew::Dataset.
type Dataset struct {
	pulumi.CustomResourceState

	// Dataset format
	Format DatasetFormatPtrOutput `pulumi:"format"`
	// Format options for dataset
	FormatOptions DatasetFormatOptionsPtrOutput `pulumi:"formatOptions"`
	// Input
	Input DatasetInputTypeOutput `pulumi:"input"`
	// Dataset name
	Name pulumi.StringOutput `pulumi:"name"`
	// PathOptions
	PathOptions DatasetPathOptionsPtrOutput `pulumi:"pathOptions"`
	Tags        DatasetTagArrayOutput       `pulumi:"tags"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Input == nil {
		return nil, errors.New("invalid value for required argument 'Input'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource Dataset
	err := ctx.RegisterResource("aws-native:databrew:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("aws-native:databrew:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
}

type DatasetState struct {
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	// Dataset format
	Format *DatasetFormat `pulumi:"format"`
	// Format options for dataset
	FormatOptions *DatasetFormatOptions `pulumi:"formatOptions"`
	// Input
	Input DatasetInputType `pulumi:"input"`
	// Dataset name
	Name string `pulumi:"name"`
	// PathOptions
	PathOptions *DatasetPathOptions `pulumi:"pathOptions"`
	Tags        []DatasetTag        `pulumi:"tags"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	// Dataset format
	Format DatasetFormatPtrInput
	// Format options for dataset
	FormatOptions DatasetFormatOptionsPtrInput
	// Input
	Input DatasetInputTypeInput
	// Dataset name
	Name pulumi.StringInput
	// PathOptions
	PathOptions DatasetPathOptionsPtrInput
	Tags        DatasetTagArrayInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((*Dataset)(nil))
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dataset)(nil))
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetInput)(nil)).Elem(), &Dataset{})
	pulumi.RegisterOutputType(DatasetOutput{})
}
