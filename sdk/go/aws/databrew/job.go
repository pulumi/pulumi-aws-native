// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databrew

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataBrew::Job.
type Job struct {
	pulumi.CustomResourceState

	DataCatalogOutputs JobDataCatalogOutputArrayOutput `pulumi:"dataCatalogOutputs"`
	DatabaseOutputs    JobDatabaseOutputArrayOutput    `pulumi:"databaseOutputs"`
	// Dataset name
	DatasetName pulumi.StringPtrOutput `pulumi:"datasetName"`
	// Encryption Key Arn
	EncryptionKeyArn pulumi.StringPtrOutput `pulumi:"encryptionKeyArn"`
	// Encryption mode
	EncryptionMode JobEncryptionModePtrOutput `pulumi:"encryptionMode"`
	// Job Sample
	JobSample JobSamplePtrOutput `pulumi:"jobSample"`
	// Log subscription
	LogSubscription JobLogSubscriptionPtrOutput `pulumi:"logSubscription"`
	// Max capacity
	MaxCapacity pulumi.IntPtrOutput `pulumi:"maxCapacity"`
	// Max retries
	MaxRetries pulumi.IntPtrOutput `pulumi:"maxRetries"`
	// Job name
	Name pulumi.StringOutput `pulumi:"name"`
	// Output location
	OutputLocation JobOutputLocationPtrOutput `pulumi:"outputLocation"`
	Outputs        JobOutputTypeArrayOutput   `pulumi:"outputs"`
	// Profile Job configuration
	ProfileConfiguration JobProfileConfigurationPtrOutput `pulumi:"profileConfiguration"`
	// Project name
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	Recipe      JobRecipePtrOutput     `pulumi:"recipe"`
	// Role arn
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	Tags    JobTagArrayOutput   `pulumi:"tags"`
	// Timeout
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Job type
	Type JobTypeOutput `pulumi:"type"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Job
	err := ctx.RegisterResource("aws-native:databrew:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("aws-native:databrew:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
}

type JobState struct {
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	DataCatalogOutputs []JobDataCatalogOutput `pulumi:"dataCatalogOutputs"`
	DatabaseOutputs    []JobDatabaseOutput    `pulumi:"databaseOutputs"`
	// Dataset name
	DatasetName *string `pulumi:"datasetName"`
	// Encryption Key Arn
	EncryptionKeyArn *string `pulumi:"encryptionKeyArn"`
	// Encryption mode
	EncryptionMode *JobEncryptionMode `pulumi:"encryptionMode"`
	// Job Sample
	JobSample *JobSample `pulumi:"jobSample"`
	// Log subscription
	LogSubscription *JobLogSubscription `pulumi:"logSubscription"`
	// Max capacity
	MaxCapacity *int `pulumi:"maxCapacity"`
	// Max retries
	MaxRetries *int `pulumi:"maxRetries"`
	// Job name
	Name string `pulumi:"name"`
	// Output location
	OutputLocation *JobOutputLocation `pulumi:"outputLocation"`
	Outputs        []JobOutputType    `pulumi:"outputs"`
	// Profile Job configuration
	ProfileConfiguration *JobProfileConfiguration `pulumi:"profileConfiguration"`
	// Project name
	ProjectName *string    `pulumi:"projectName"`
	Recipe      *JobRecipe `pulumi:"recipe"`
	// Role arn
	RoleArn string   `pulumi:"roleArn"`
	Tags    []JobTag `pulumi:"tags"`
	// Timeout
	Timeout *int `pulumi:"timeout"`
	// Job type
	Type JobType `pulumi:"type"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	DataCatalogOutputs JobDataCatalogOutputArrayInput
	DatabaseOutputs    JobDatabaseOutputArrayInput
	// Dataset name
	DatasetName pulumi.StringPtrInput
	// Encryption Key Arn
	EncryptionKeyArn pulumi.StringPtrInput
	// Encryption mode
	EncryptionMode JobEncryptionModePtrInput
	// Job Sample
	JobSample JobSamplePtrInput
	// Log subscription
	LogSubscription JobLogSubscriptionPtrInput
	// Max capacity
	MaxCapacity pulumi.IntPtrInput
	// Max retries
	MaxRetries pulumi.IntPtrInput
	// Job name
	Name pulumi.StringInput
	// Output location
	OutputLocation JobOutputLocationPtrInput
	Outputs        JobOutputTypeArrayInput
	// Profile Job configuration
	ProfileConfiguration JobProfileConfigurationPtrInput
	// Project name
	ProjectName pulumi.StringPtrInput
	Recipe      JobRecipePtrInput
	// Role arn
	RoleArn pulumi.StringInput
	Tags    JobTagArrayInput
	// Timeout
	Timeout pulumi.IntPtrInput
	// Job type
	Type JobTypeInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil))
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil))
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterOutputType(JobOutput{})
}
