// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databrew

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataBrew::Schedule.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/databrew"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databrew.NewSchedule(ctx, "testDataBrewSchedule", &databrew.ScheduleArgs{
//				JobNames: pulumi.StringArray{
//					pulumi.String("job-name"),
//				},
//				Name:           pulumi.String("schedule-name"),
//				CronExpression: pulumi.String("cron(0 0/1 ? * * *)"),
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("key00AtCreate"),
//						Value: pulumi.String("value001AtCreate"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Schedule struct {
	pulumi.CustomResourceState

	// Schedule cron
	CronExpression pulumi.StringOutput `pulumi:"cronExpression"`
	// A list of jobs to be run, according to the schedule.
	JobNames pulumi.StringArrayOutput `pulumi:"jobNames"`
	// Schedule Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Metadata tags that have been applied to the schedule.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CronExpression == nil {
		return nil, errors.New("invalid value for required argument 'CronExpression'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("aws-native:databrew:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("aws-native:databrew:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
}

type ScheduleState struct {
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// Schedule cron
	CronExpression string `pulumi:"cronExpression"`
	// A list of jobs to be run, according to the schedule.
	JobNames []string `pulumi:"jobNames"`
	// Schedule Name
	Name *string `pulumi:"name"`
	// Metadata tags that have been applied to the schedule.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// Schedule cron
	CronExpression pulumi.StringInput
	// A list of jobs to be run, according to the schedule.
	JobNames pulumi.StringArrayInput
	// Schedule Name
	Name pulumi.StringPtrInput
	// Metadata tags that have been applied to the schedule.
	Tags aws.TagArrayInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// Schedule cron
func (o ScheduleOutput) CronExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.CronExpression }).(pulumi.StringOutput)
}

// A list of jobs to be run, according to the schedule.
func (o ScheduleOutput) JobNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringArrayOutput { return v.JobNames }).(pulumi.StringArrayOutput)
}

// Schedule Name
func (o ScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Metadata tags that have been applied to the schedule.
func (o ScheduleOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Schedule) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleInput)(nil)).Elem(), &Schedule{})
	pulumi.RegisterOutputType(ScheduleOutput{})
}
