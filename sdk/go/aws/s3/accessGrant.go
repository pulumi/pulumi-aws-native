// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::S3::AccessGrant resource is an Amazon S3 resource type representing permissions to a specific S3 bucket or prefix hosted in an S3 Access Grants instance.
type AccessGrant struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the specified access grant.
	AccessGrantArn pulumi.StringOutput `pulumi:"accessGrantArn"`
	// The ID assigned to this access grant.
	AccessGrantId pulumi.StringOutput `pulumi:"accessGrantId"`
	// The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
	AccessGrantsLocationConfiguration AccessGrantsLocationConfigurationPtrOutput `pulumi:"accessGrantsLocationConfiguration"`
	// The custom S3 location to be accessed by the grantee
	AccessGrantsLocationId pulumi.StringOutput `pulumi:"accessGrantsLocationId"`
	// The ARN of the application grantees will use to access the location
	ApplicationArn pulumi.StringPtrOutput `pulumi:"applicationArn"`
	// The S3 path of the data to which you are granting access. It is a combination of the S3 path of the registered location and the subprefix.
	GrantScope pulumi.StringOutput `pulumi:"grantScope"`
	// The principal who will be granted permission to access S3.
	Grantee AccessGrantGranteeOutput `pulumi:"grantee"`
	// The level of access to be afforded to the grantee
	Permission AccessGrantPermissionOutput `pulumi:"permission"`
	// The type of S3SubPrefix.
	S3PrefixType AccessGrantS3PrefixTypePtrOutput `pulumi:"s3PrefixType"`
	Tags         AccessGrantTagArrayOutput        `pulumi:"tags"`
}

// NewAccessGrant registers a new resource with the given unique name, arguments, and options.
func NewAccessGrant(ctx *pulumi.Context,
	name string, args *AccessGrantArgs, opts ...pulumi.ResourceOption) (*AccessGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessGrantsLocationId == nil {
		return nil, errors.New("invalid value for required argument 'AccessGrantsLocationId'")
	}
	if args.Grantee == nil {
		return nil, errors.New("invalid value for required argument 'Grantee'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"s3PrefixType",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessGrant
	err := ctx.RegisterResource("aws-native:s3:AccessGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessGrant gets an existing AccessGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessGrantState, opts ...pulumi.ResourceOption) (*AccessGrant, error) {
	var resource AccessGrant
	err := ctx.ReadResource("aws-native:s3:AccessGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessGrant resources.
type accessGrantState struct {
}

type AccessGrantState struct {
}

func (AccessGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGrantState)(nil)).Elem()
}

type accessGrantArgs struct {
	// The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
	AccessGrantsLocationConfiguration *AccessGrantsLocationConfiguration `pulumi:"accessGrantsLocationConfiguration"`
	// The custom S3 location to be accessed by the grantee
	AccessGrantsLocationId string `pulumi:"accessGrantsLocationId"`
	// The ARN of the application grantees will use to access the location
	ApplicationArn *string `pulumi:"applicationArn"`
	// The principal who will be granted permission to access S3.
	Grantee AccessGrantGrantee `pulumi:"grantee"`
	// The level of access to be afforded to the grantee
	Permission AccessGrantPermission `pulumi:"permission"`
	// The type of S3SubPrefix.
	S3PrefixType *AccessGrantS3PrefixType `pulumi:"s3PrefixType"`
	Tags         []AccessGrantTag         `pulumi:"tags"`
}

// The set of arguments for constructing a AccessGrant resource.
type AccessGrantArgs struct {
	// The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
	AccessGrantsLocationConfiguration AccessGrantsLocationConfigurationPtrInput
	// The custom S3 location to be accessed by the grantee
	AccessGrantsLocationId pulumi.StringInput
	// The ARN of the application grantees will use to access the location
	ApplicationArn pulumi.StringPtrInput
	// The principal who will be granted permission to access S3.
	Grantee AccessGrantGranteeInput
	// The level of access to be afforded to the grantee
	Permission AccessGrantPermissionInput
	// The type of S3SubPrefix.
	S3PrefixType AccessGrantS3PrefixTypePtrInput
	Tags         AccessGrantTagArrayInput
}

func (AccessGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGrantArgs)(nil)).Elem()
}

type AccessGrantInput interface {
	pulumi.Input

	ToAccessGrantOutput() AccessGrantOutput
	ToAccessGrantOutputWithContext(ctx context.Context) AccessGrantOutput
}

func (*AccessGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGrant)(nil)).Elem()
}

func (i *AccessGrant) ToAccessGrantOutput() AccessGrantOutput {
	return i.ToAccessGrantOutputWithContext(context.Background())
}

func (i *AccessGrant) ToAccessGrantOutputWithContext(ctx context.Context) AccessGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGrantOutput)
}

func (i *AccessGrant) ToOutput(ctx context.Context) pulumix.Output[*AccessGrant] {
	return pulumix.Output[*AccessGrant]{
		OutputState: i.ToAccessGrantOutputWithContext(ctx).OutputState,
	}
}

type AccessGrantOutput struct{ *pulumi.OutputState }

func (AccessGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGrant)(nil)).Elem()
}

func (o AccessGrantOutput) ToAccessGrantOutput() AccessGrantOutput {
	return o
}

func (o AccessGrantOutput) ToAccessGrantOutputWithContext(ctx context.Context) AccessGrantOutput {
	return o
}

func (o AccessGrantOutput) ToOutput(ctx context.Context) pulumix.Output[*AccessGrant] {
	return pulumix.Output[*AccessGrant]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the specified access grant.
func (o AccessGrantOutput) AccessGrantArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.AccessGrantArn }).(pulumi.StringOutput)
}

// The ID assigned to this access grant.
func (o AccessGrantOutput) AccessGrantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.AccessGrantId }).(pulumi.StringOutput)
}

// The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
func (o AccessGrantOutput) AccessGrantsLocationConfiguration() AccessGrantsLocationConfigurationPtrOutput {
	return o.ApplyT(func(v *AccessGrant) AccessGrantsLocationConfigurationPtrOutput {
		return v.AccessGrantsLocationConfiguration
	}).(AccessGrantsLocationConfigurationPtrOutput)
}

// The custom S3 location to be accessed by the grantee
func (o AccessGrantOutput) AccessGrantsLocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.AccessGrantsLocationId }).(pulumi.StringOutput)
}

// The ARN of the application grantees will use to access the location
func (o AccessGrantOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringPtrOutput { return v.ApplicationArn }).(pulumi.StringPtrOutput)
}

// The S3 path of the data to which you are granting access. It is a combination of the S3 path of the registered location and the subprefix.
func (o AccessGrantOutput) GrantScope() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGrant) pulumi.StringOutput { return v.GrantScope }).(pulumi.StringOutput)
}

// The principal who will be granted permission to access S3.
func (o AccessGrantOutput) Grantee() AccessGrantGranteeOutput {
	return o.ApplyT(func(v *AccessGrant) AccessGrantGranteeOutput { return v.Grantee }).(AccessGrantGranteeOutput)
}

// The level of access to be afforded to the grantee
func (o AccessGrantOutput) Permission() AccessGrantPermissionOutput {
	return o.ApplyT(func(v *AccessGrant) AccessGrantPermissionOutput { return v.Permission }).(AccessGrantPermissionOutput)
}

// The type of S3SubPrefix.
func (o AccessGrantOutput) S3PrefixType() AccessGrantS3PrefixTypePtrOutput {
	return o.ApplyT(func(v *AccessGrant) AccessGrantS3PrefixTypePtrOutput { return v.S3PrefixType }).(AccessGrantS3PrefixTypePtrOutput)
}

func (o AccessGrantOutput) Tags() AccessGrantTagArrayOutput {
	return o.ApplyT(func(v *AccessGrant) AccessGrantTagArrayOutput { return v.Tags }).(AccessGrantTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGrantInput)(nil)).Elem(), &AccessGrant{})
	pulumi.RegisterOutputType(AccessGrantOutput{})
}
