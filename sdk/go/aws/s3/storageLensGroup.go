// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::S3::StorageLensGroup resource is an Amazon S3 resource type that you can use to create Storage Lens Group.
type StorageLensGroup struct {
	pulumi.CustomResourceState

	Filter StorageLensGroupFilterOutput `pulumi:"filter"`
	Name   pulumi.StringOutput          `pulumi:"name"`
	// The ARN for the Amazon S3 Storage Lens Group.
	StorageLensGroupArn pulumi.StringOutput `pulumi:"storageLensGroupArn"`
	// A set of tags (key-value pairs) for this Amazon S3 Storage Lens Group.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewStorageLensGroup registers a new resource with the given unique name, arguments, and options.
func NewStorageLensGroup(ctx *pulumi.Context,
	name string, args *StorageLensGroupArgs, opts ...pulumi.ResourceOption) (*StorageLensGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageLensGroup
	err := ctx.RegisterResource("aws-native:s3:StorageLensGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageLensGroup gets an existing StorageLensGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageLensGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageLensGroupState, opts ...pulumi.ResourceOption) (*StorageLensGroup, error) {
	var resource StorageLensGroup
	err := ctx.ReadResource("aws-native:s3:StorageLensGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageLensGroup resources.
type storageLensGroupState struct {
}

type StorageLensGroupState struct {
}

func (StorageLensGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageLensGroupState)(nil)).Elem()
}

type storageLensGroupArgs struct {
	Filter StorageLensGroupFilter `pulumi:"filter"`
	Name   *string                `pulumi:"name"`
	// A set of tags (key-value pairs) for this Amazon S3 Storage Lens Group.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a StorageLensGroup resource.
type StorageLensGroupArgs struct {
	Filter StorageLensGroupFilterInput
	Name   pulumi.StringPtrInput
	// A set of tags (key-value pairs) for this Amazon S3 Storage Lens Group.
	Tags aws.TagArrayInput
}

func (StorageLensGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageLensGroupArgs)(nil)).Elem()
}

type StorageLensGroupInput interface {
	pulumi.Input

	ToStorageLensGroupOutput() StorageLensGroupOutput
	ToStorageLensGroupOutputWithContext(ctx context.Context) StorageLensGroupOutput
}

func (*StorageLensGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensGroup)(nil)).Elem()
}

func (i *StorageLensGroup) ToStorageLensGroupOutput() StorageLensGroupOutput {
	return i.ToStorageLensGroupOutputWithContext(context.Background())
}

func (i *StorageLensGroup) ToStorageLensGroupOutputWithContext(ctx context.Context) StorageLensGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensGroupOutput)
}

type StorageLensGroupOutput struct{ *pulumi.OutputState }

func (StorageLensGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensGroup)(nil)).Elem()
}

func (o StorageLensGroupOutput) ToStorageLensGroupOutput() StorageLensGroupOutput {
	return o
}

func (o StorageLensGroupOutput) ToStorageLensGroupOutputWithContext(ctx context.Context) StorageLensGroupOutput {
	return o
}

func (o StorageLensGroupOutput) Filter() StorageLensGroupFilterOutput {
	return o.ApplyT(func(v *StorageLensGroup) StorageLensGroupFilterOutput { return v.Filter }).(StorageLensGroupFilterOutput)
}

func (o StorageLensGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageLensGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ARN for the Amazon S3 Storage Lens Group.
func (o StorageLensGroupOutput) StorageLensGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageLensGroup) pulumi.StringOutput { return v.StorageLensGroupArn }).(pulumi.StringOutput)
}

// A set of tags (key-value pairs) for this Amazon S3 Storage Lens Group.
func (o StorageLensGroupOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *StorageLensGroup) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageLensGroupInput)(nil)).Elem(), &StorageLensGroup{})
	pulumi.RegisterOutputType(StorageLensGroupOutput{})
}
