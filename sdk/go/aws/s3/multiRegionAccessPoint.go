// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html
type MultiRegionAccessPoint struct {
	pulumi.CustomResourceState

	Alias     pulumi.StringOutput `pulumi:"alias"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-publicaccessblockconfiguration
	PublicAccessBlockConfiguration MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput `pulumi:"publicAccessBlockConfiguration"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-regions
	Regions MultiRegionAccessPointRegionArrayOutput `pulumi:"regions"`
}

// NewMultiRegionAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewMultiRegionAccessPoint(ctx *pulumi.Context,
	name string, args *MultiRegionAccessPointArgs, opts ...pulumi.ResourceOption) (*MultiRegionAccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	var resource MultiRegionAccessPoint
	err := ctx.RegisterResource("aws-native:s3:MultiRegionAccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMultiRegionAccessPoint gets an existing MultiRegionAccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiRegionAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MultiRegionAccessPointState, opts ...pulumi.ResourceOption) (*MultiRegionAccessPoint, error) {
	var resource MultiRegionAccessPoint
	err := ctx.ReadResource("aws-native:s3:MultiRegionAccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MultiRegionAccessPoint resources.
type multiRegionAccessPointState struct {
}

type MultiRegionAccessPointState struct {
}

func (MultiRegionAccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionAccessPointState)(nil)).Elem()
}

type multiRegionAccessPointArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-name
	Name *string `pulumi:"name"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-publicaccessblockconfiguration
	PublicAccessBlockConfiguration *MultiRegionAccessPointPublicAccessBlockConfiguration `pulumi:"publicAccessBlockConfiguration"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-regions
	Regions []MultiRegionAccessPointRegion `pulumi:"regions"`
}

// The set of arguments for constructing a MultiRegionAccessPoint resource.
type MultiRegionAccessPointArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-name
	Name pulumi.StringPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-publicaccessblockconfiguration
	PublicAccessBlockConfiguration MultiRegionAccessPointPublicAccessBlockConfigurationPtrInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html#cfn-s3-multiregionaccesspoint-regions
	Regions MultiRegionAccessPointRegionArrayInput
}

func (MultiRegionAccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*multiRegionAccessPointArgs)(nil)).Elem()
}

type MultiRegionAccessPointInput interface {
	pulumi.Input

	ToMultiRegionAccessPointOutput() MultiRegionAccessPointOutput
	ToMultiRegionAccessPointOutputWithContext(ctx context.Context) MultiRegionAccessPointOutput
}

func (*MultiRegionAccessPoint) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiRegionAccessPoint)(nil))
}

func (i *MultiRegionAccessPoint) ToMultiRegionAccessPointOutput() MultiRegionAccessPointOutput {
	return i.ToMultiRegionAccessPointOutputWithContext(context.Background())
}

func (i *MultiRegionAccessPoint) ToMultiRegionAccessPointOutputWithContext(ctx context.Context) MultiRegionAccessPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointOutput)
}

type MultiRegionAccessPointOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiRegionAccessPoint)(nil))
}

func (o MultiRegionAccessPointOutput) ToMultiRegionAccessPointOutput() MultiRegionAccessPointOutput {
	return o
}

func (o MultiRegionAccessPointOutput) ToMultiRegionAccessPointOutputWithContext(ctx context.Context) MultiRegionAccessPointOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MultiRegionAccessPointOutput{})
}
