// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessPointPublicAccessBlockConfiguration struct {
	// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
	// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
	//  - PUT Object calls fail if the request includes a public ACL.
	//    . - PUT Bucket calls fail if the request includes a public ACL.
	//    Enabling this setting doesn't affect existing policies or ACLs.
	BlockPublicAcls *bool `pulumi:"blockPublicAcls"`
	// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
	BlockPublicPolicy *bool `pulumi:"blockPublicPolicy"`
	// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
	IgnorePublicAcls *bool `pulumi:"ignorePublicAcls"`
	// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
	// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
	RestrictPublicBuckets *bool `pulumi:"restrictPublicBuckets"`
}

// AccessPointPublicAccessBlockConfigurationInput is an input type that accepts AccessPointPublicAccessBlockConfigurationArgs and AccessPointPublicAccessBlockConfigurationOutput values.
// You can construct a concrete instance of `AccessPointPublicAccessBlockConfigurationInput` via:
//
//          AccessPointPublicAccessBlockConfigurationArgs{...}
type AccessPointPublicAccessBlockConfigurationInput interface {
	pulumi.Input

	ToAccessPointPublicAccessBlockConfigurationOutput() AccessPointPublicAccessBlockConfigurationOutput
	ToAccessPointPublicAccessBlockConfigurationOutputWithContext(context.Context) AccessPointPublicAccessBlockConfigurationOutput
}

type AccessPointPublicAccessBlockConfigurationArgs struct {
	// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
	// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
	//  - PUT Object calls fail if the request includes a public ACL.
	//    . - PUT Bucket calls fail if the request includes a public ACL.
	//    Enabling this setting doesn't affect existing policies or ACLs.
	BlockPublicAcls pulumi.BoolPtrInput `pulumi:"blockPublicAcls"`
	// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
	BlockPublicPolicy pulumi.BoolPtrInput `pulumi:"blockPublicPolicy"`
	// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
	IgnorePublicAcls pulumi.BoolPtrInput `pulumi:"ignorePublicAcls"`
	// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
	// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
	RestrictPublicBuckets pulumi.BoolPtrInput `pulumi:"restrictPublicBuckets"`
}

func (AccessPointPublicAccessBlockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (i AccessPointPublicAccessBlockConfigurationArgs) ToAccessPointPublicAccessBlockConfigurationOutput() AccessPointPublicAccessBlockConfigurationOutput {
	return i.ToAccessPointPublicAccessBlockConfigurationOutputWithContext(context.Background())
}

func (i AccessPointPublicAccessBlockConfigurationArgs) ToAccessPointPublicAccessBlockConfigurationOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPublicAccessBlockConfigurationOutput)
}

func (i AccessPointPublicAccessBlockConfigurationArgs) ToAccessPointPublicAccessBlockConfigurationPtrOutput() AccessPointPublicAccessBlockConfigurationPtrOutput {
	return i.ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Background())
}

func (i AccessPointPublicAccessBlockConfigurationArgs) ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPublicAccessBlockConfigurationOutput).ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx)
}

// AccessPointPublicAccessBlockConfigurationPtrInput is an input type that accepts AccessPointPublicAccessBlockConfigurationArgs, AccessPointPublicAccessBlockConfigurationPtr and AccessPointPublicAccessBlockConfigurationPtrOutput values.
// You can construct a concrete instance of `AccessPointPublicAccessBlockConfigurationPtrInput` via:
//
//          AccessPointPublicAccessBlockConfigurationArgs{...}
//
//  or:
//
//          nil
type AccessPointPublicAccessBlockConfigurationPtrInput interface {
	pulumi.Input

	ToAccessPointPublicAccessBlockConfigurationPtrOutput() AccessPointPublicAccessBlockConfigurationPtrOutput
	ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Context) AccessPointPublicAccessBlockConfigurationPtrOutput
}

type accessPointPublicAccessBlockConfigurationPtrType AccessPointPublicAccessBlockConfigurationArgs

func AccessPointPublicAccessBlockConfigurationPtr(v *AccessPointPublicAccessBlockConfigurationArgs) AccessPointPublicAccessBlockConfigurationPtrInput {
	return (*accessPointPublicAccessBlockConfigurationPtrType)(v)
}

func (*accessPointPublicAccessBlockConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (i *accessPointPublicAccessBlockConfigurationPtrType) ToAccessPointPublicAccessBlockConfigurationPtrOutput() AccessPointPublicAccessBlockConfigurationPtrOutput {
	return i.ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Background())
}

func (i *accessPointPublicAccessBlockConfigurationPtrType) ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPublicAccessBlockConfigurationPtrOutput)
}

type AccessPointPublicAccessBlockConfigurationOutput struct{ *pulumi.OutputState }

func (AccessPointPublicAccessBlockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (o AccessPointPublicAccessBlockConfigurationOutput) ToAccessPointPublicAccessBlockConfigurationOutput() AccessPointPublicAccessBlockConfigurationOutput {
	return o
}

func (o AccessPointPublicAccessBlockConfigurationOutput) ToAccessPointPublicAccessBlockConfigurationOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationOutput {
	return o
}

func (o AccessPointPublicAccessBlockConfigurationOutput) ToAccessPointPublicAccessBlockConfigurationPtrOutput() AccessPointPublicAccessBlockConfigurationPtrOutput {
	return o.ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Background())
}

func (o AccessPointPublicAccessBlockConfigurationOutput) ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointPublicAccessBlockConfiguration) *AccessPointPublicAccessBlockConfiguration {
		return &v
	}).(AccessPointPublicAccessBlockConfigurationPtrOutput)
}

// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
//  - PUT Object calls fail if the request includes a public ACL.
//    . - PUT Bucket calls fail if the request includes a public ACL.
//    Enabling this setting doesn't affect existing policies or ACLs.
func (o AccessPointPublicAccessBlockConfigurationOutput) BlockPublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.BlockPublicAcls }).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
func (o AccessPointPublicAccessBlockConfigurationOutput) BlockPublicPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.BlockPublicPolicy }).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
func (o AccessPointPublicAccessBlockConfigurationOutput) IgnorePublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.IgnorePublicAcls }).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
func (o AccessPointPublicAccessBlockConfigurationOutput) RestrictPublicBuckets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessPointPublicAccessBlockConfiguration) *bool { return v.RestrictPublicBuckets }).(pulumi.BoolPtrOutput)
}

type AccessPointPublicAccessBlockConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AccessPointPublicAccessBlockConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (o AccessPointPublicAccessBlockConfigurationPtrOutput) ToAccessPointPublicAccessBlockConfigurationPtrOutput() AccessPointPublicAccessBlockConfigurationPtrOutput {
	return o
}

func (o AccessPointPublicAccessBlockConfigurationPtrOutput) ToAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) AccessPointPublicAccessBlockConfigurationPtrOutput {
	return o
}

func (o AccessPointPublicAccessBlockConfigurationPtrOutput) Elem() AccessPointPublicAccessBlockConfigurationOutput {
	return o.ApplyT(func(v *AccessPointPublicAccessBlockConfiguration) AccessPointPublicAccessBlockConfiguration {
		if v != nil {
			return *v
		}
		var ret AccessPointPublicAccessBlockConfiguration
		return ret
	}).(AccessPointPublicAccessBlockConfigurationOutput)
}

// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
//  - PUT Object calls fail if the request includes a public ACL.
//    . - PUT Bucket calls fail if the request includes a public ACL.
//    Enabling this setting doesn't affect existing policies or ACLs.
func (o AccessPointPublicAccessBlockConfigurationPtrOutput) BlockPublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.BlockPublicAcls
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
func (o AccessPointPublicAccessBlockConfigurationPtrOutput) BlockPublicPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.BlockPublicPolicy
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
func (o AccessPointPublicAccessBlockConfigurationPtrOutput) IgnorePublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnorePublicAcls
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
func (o AccessPointPublicAccessBlockConfigurationPtrOutput) RestrictPublicBuckets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.RestrictPublicBuckets
	}).(pulumi.BoolPtrOutput)
}

// The Virtual Private Cloud (VPC) configuration for a bucket access point.
type AccessPointVpcConfiguration struct {
	// If this field is specified, this access point will only allow connections from the specified VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

// AccessPointVpcConfigurationInput is an input type that accepts AccessPointVpcConfigurationArgs and AccessPointVpcConfigurationOutput values.
// You can construct a concrete instance of `AccessPointVpcConfigurationInput` via:
//
//          AccessPointVpcConfigurationArgs{...}
type AccessPointVpcConfigurationInput interface {
	pulumi.Input

	ToAccessPointVpcConfigurationOutput() AccessPointVpcConfigurationOutput
	ToAccessPointVpcConfigurationOutputWithContext(context.Context) AccessPointVpcConfigurationOutput
}

// The Virtual Private Cloud (VPC) configuration for a bucket access point.
type AccessPointVpcConfigurationArgs struct {
	// If this field is specified, this access point will only allow connections from the specified VPC ID.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (AccessPointVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointVpcConfiguration)(nil)).Elem()
}

func (i AccessPointVpcConfigurationArgs) ToAccessPointVpcConfigurationOutput() AccessPointVpcConfigurationOutput {
	return i.ToAccessPointVpcConfigurationOutputWithContext(context.Background())
}

func (i AccessPointVpcConfigurationArgs) ToAccessPointVpcConfigurationOutputWithContext(ctx context.Context) AccessPointVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointVpcConfigurationOutput)
}

func (i AccessPointVpcConfigurationArgs) ToAccessPointVpcConfigurationPtrOutput() AccessPointVpcConfigurationPtrOutput {
	return i.ToAccessPointVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i AccessPointVpcConfigurationArgs) ToAccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) AccessPointVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointVpcConfigurationOutput).ToAccessPointVpcConfigurationPtrOutputWithContext(ctx)
}

// AccessPointVpcConfigurationPtrInput is an input type that accepts AccessPointVpcConfigurationArgs, AccessPointVpcConfigurationPtr and AccessPointVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `AccessPointVpcConfigurationPtrInput` via:
//
//          AccessPointVpcConfigurationArgs{...}
//
//  or:
//
//          nil
type AccessPointVpcConfigurationPtrInput interface {
	pulumi.Input

	ToAccessPointVpcConfigurationPtrOutput() AccessPointVpcConfigurationPtrOutput
	ToAccessPointVpcConfigurationPtrOutputWithContext(context.Context) AccessPointVpcConfigurationPtrOutput
}

type accessPointVpcConfigurationPtrType AccessPointVpcConfigurationArgs

func AccessPointVpcConfigurationPtr(v *AccessPointVpcConfigurationArgs) AccessPointVpcConfigurationPtrInput {
	return (*accessPointVpcConfigurationPtrType)(v)
}

func (*accessPointVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointVpcConfiguration)(nil)).Elem()
}

func (i *accessPointVpcConfigurationPtrType) ToAccessPointVpcConfigurationPtrOutput() AccessPointVpcConfigurationPtrOutput {
	return i.ToAccessPointVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *accessPointVpcConfigurationPtrType) ToAccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) AccessPointVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointVpcConfigurationPtrOutput)
}

// The Virtual Private Cloud (VPC) configuration for a bucket access point.
type AccessPointVpcConfigurationOutput struct{ *pulumi.OutputState }

func (AccessPointVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointVpcConfiguration)(nil)).Elem()
}

func (o AccessPointVpcConfigurationOutput) ToAccessPointVpcConfigurationOutput() AccessPointVpcConfigurationOutput {
	return o
}

func (o AccessPointVpcConfigurationOutput) ToAccessPointVpcConfigurationOutputWithContext(ctx context.Context) AccessPointVpcConfigurationOutput {
	return o
}

func (o AccessPointVpcConfigurationOutput) ToAccessPointVpcConfigurationPtrOutput() AccessPointVpcConfigurationPtrOutput {
	return o.ToAccessPointVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o AccessPointVpcConfigurationOutput) ToAccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) AccessPointVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointVpcConfiguration) *AccessPointVpcConfiguration {
		return &v
	}).(AccessPointVpcConfigurationPtrOutput)
}

// If this field is specified, this access point will only allow connections from the specified VPC ID.
func (o AccessPointVpcConfigurationOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessPointVpcConfiguration) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type AccessPointVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AccessPointVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointVpcConfiguration)(nil)).Elem()
}

func (o AccessPointVpcConfigurationPtrOutput) ToAccessPointVpcConfigurationPtrOutput() AccessPointVpcConfigurationPtrOutput {
	return o
}

func (o AccessPointVpcConfigurationPtrOutput) ToAccessPointVpcConfigurationPtrOutputWithContext(ctx context.Context) AccessPointVpcConfigurationPtrOutput {
	return o
}

func (o AccessPointVpcConfigurationPtrOutput) Elem() AccessPointVpcConfigurationOutput {
	return o.ApplyT(func(v *AccessPointVpcConfiguration) AccessPointVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret AccessPointVpcConfiguration
		return ret
	}).(AccessPointVpcConfigurationOutput)
}

// If this field is specified, this access point will only allow connections from the specified VPC ID.
func (o AccessPointVpcConfigurationPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointVpcConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.VpcId
	}).(pulumi.StringPtrOutput)
}

type MultiRegionAccessPointPublicAccessBlockConfiguration struct {
	// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
	// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
	//  - PUT Object calls fail if the request includes a public ACL.
	//    . - PUT Bucket calls fail if the request includes a public ACL.
	//    Enabling this setting doesn't affect existing policies or ACLs.
	BlockPublicAcls *bool `pulumi:"blockPublicAcls"`
	// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
	BlockPublicPolicy *bool `pulumi:"blockPublicPolicy"`
	// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
	IgnorePublicAcls *bool `pulumi:"ignorePublicAcls"`
	// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
	// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
	RestrictPublicBuckets *bool `pulumi:"restrictPublicBuckets"`
}

// MultiRegionAccessPointPublicAccessBlockConfigurationInput is an input type that accepts MultiRegionAccessPointPublicAccessBlockConfigurationArgs and MultiRegionAccessPointPublicAccessBlockConfigurationOutput values.
// You can construct a concrete instance of `MultiRegionAccessPointPublicAccessBlockConfigurationInput` via:
//
//          MultiRegionAccessPointPublicAccessBlockConfigurationArgs{...}
type MultiRegionAccessPointPublicAccessBlockConfigurationInput interface {
	pulumi.Input

	ToMultiRegionAccessPointPublicAccessBlockConfigurationOutput() MultiRegionAccessPointPublicAccessBlockConfigurationOutput
	ToMultiRegionAccessPointPublicAccessBlockConfigurationOutputWithContext(context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationOutput
}

type MultiRegionAccessPointPublicAccessBlockConfigurationArgs struct {
	// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
	// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
	//  - PUT Object calls fail if the request includes a public ACL.
	//    . - PUT Bucket calls fail if the request includes a public ACL.
	//    Enabling this setting doesn't affect existing policies or ACLs.
	BlockPublicAcls pulumi.BoolPtrInput `pulumi:"blockPublicAcls"`
	// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
	BlockPublicPolicy pulumi.BoolPtrInput `pulumi:"blockPublicPolicy"`
	// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
	IgnorePublicAcls pulumi.BoolPtrInput `pulumi:"ignorePublicAcls"`
	// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
	// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
	RestrictPublicBuckets pulumi.BoolPtrInput `pulumi:"restrictPublicBuckets"`
}

func (MultiRegionAccessPointPublicAccessBlockConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiRegionAccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (i MultiRegionAccessPointPublicAccessBlockConfigurationArgs) ToMultiRegionAccessPointPublicAccessBlockConfigurationOutput() MultiRegionAccessPointPublicAccessBlockConfigurationOutput {
	return i.ToMultiRegionAccessPointPublicAccessBlockConfigurationOutputWithContext(context.Background())
}

func (i MultiRegionAccessPointPublicAccessBlockConfigurationArgs) ToMultiRegionAccessPointPublicAccessBlockConfigurationOutputWithContext(ctx context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointPublicAccessBlockConfigurationOutput)
}

func (i MultiRegionAccessPointPublicAccessBlockConfigurationArgs) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput() MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return i.ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Background())
}

func (i MultiRegionAccessPointPublicAccessBlockConfigurationArgs) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointPublicAccessBlockConfigurationOutput).ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx)
}

// MultiRegionAccessPointPublicAccessBlockConfigurationPtrInput is an input type that accepts MultiRegionAccessPointPublicAccessBlockConfigurationArgs, MultiRegionAccessPointPublicAccessBlockConfigurationPtr and MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput values.
// You can construct a concrete instance of `MultiRegionAccessPointPublicAccessBlockConfigurationPtrInput` via:
//
//          MultiRegionAccessPointPublicAccessBlockConfigurationArgs{...}
//
//  or:
//
//          nil
type MultiRegionAccessPointPublicAccessBlockConfigurationPtrInput interface {
	pulumi.Input

	ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput() MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput
	ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput
}

type multiRegionAccessPointPublicAccessBlockConfigurationPtrType MultiRegionAccessPointPublicAccessBlockConfigurationArgs

func MultiRegionAccessPointPublicAccessBlockConfigurationPtr(v *MultiRegionAccessPointPublicAccessBlockConfigurationArgs) MultiRegionAccessPointPublicAccessBlockConfigurationPtrInput {
	return (*multiRegionAccessPointPublicAccessBlockConfigurationPtrType)(v)
}

func (*multiRegionAccessPointPublicAccessBlockConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiRegionAccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (i *multiRegionAccessPointPublicAccessBlockConfigurationPtrType) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput() MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return i.ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Background())
}

func (i *multiRegionAccessPointPublicAccessBlockConfigurationPtrType) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput)
}

type MultiRegionAccessPointPublicAccessBlockConfigurationOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointPublicAccessBlockConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiRegionAccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) ToMultiRegionAccessPointPublicAccessBlockConfigurationOutput() MultiRegionAccessPointPublicAccessBlockConfigurationOutput {
	return o
}

func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) ToMultiRegionAccessPointPublicAccessBlockConfigurationOutputWithContext(ctx context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationOutput {
	return o
}

func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput() MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return o.ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(context.Background())
}

func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiRegionAccessPointPublicAccessBlockConfiguration) *MultiRegionAccessPointPublicAccessBlockConfiguration {
		return &v
	}).(MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput)
}

// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
//  - PUT Object calls fail if the request includes a public ACL.
//    . - PUT Bucket calls fail if the request includes a public ACL.
//    Enabling this setting doesn't affect existing policies or ACLs.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) BlockPublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MultiRegionAccessPointPublicAccessBlockConfiguration) *bool { return v.BlockPublicAcls }).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) BlockPublicPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MultiRegionAccessPointPublicAccessBlockConfiguration) *bool { return v.BlockPublicPolicy }).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) IgnorePublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MultiRegionAccessPointPublicAccessBlockConfiguration) *bool { return v.IgnorePublicAcls }).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationOutput) RestrictPublicBuckets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MultiRegionAccessPointPublicAccessBlockConfiguration) *bool { return v.RestrictPublicBuckets }).(pulumi.BoolPtrOutput)
}

type MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiRegionAccessPointPublicAccessBlockConfiguration)(nil)).Elem()
}

func (o MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput() MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return o
}

func (o MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) ToMultiRegionAccessPointPublicAccessBlockConfigurationPtrOutputWithContext(ctx context.Context) MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput {
	return o
}

func (o MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) Elem() MultiRegionAccessPointPublicAccessBlockConfigurationOutput {
	return o.ApplyT(func(v *MultiRegionAccessPointPublicAccessBlockConfiguration) MultiRegionAccessPointPublicAccessBlockConfiguration {
		if v != nil {
			return *v
		}
		var ret MultiRegionAccessPointPublicAccessBlockConfiguration
		return ret
	}).(MultiRegionAccessPointPublicAccessBlockConfigurationOutput)
}

// Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
// - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
//  - PUT Object calls fail if the request includes a public ACL.
//    . - PUT Bucket calls fail if the request includes a public ACL.
//    Enabling this setting doesn't affect existing policies or ACLs.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) BlockPublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MultiRegionAccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.BlockPublicAcls
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) BlockPublicPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MultiRegionAccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.BlockPublicPolicy
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) IgnorePublicAcls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MultiRegionAccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnorePublicAcls
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
// Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
func (o MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput) RestrictPublicBuckets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MultiRegionAccessPointPublicAccessBlockConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.RestrictPublicBuckets
	}).(pulumi.BoolPtrOutput)
}

type MultiRegionAccessPointRegion struct {
	Bucket string `pulumi:"bucket"`
}

// MultiRegionAccessPointRegionInput is an input type that accepts MultiRegionAccessPointRegionArgs and MultiRegionAccessPointRegionOutput values.
// You can construct a concrete instance of `MultiRegionAccessPointRegionInput` via:
//
//          MultiRegionAccessPointRegionArgs{...}
type MultiRegionAccessPointRegionInput interface {
	pulumi.Input

	ToMultiRegionAccessPointRegionOutput() MultiRegionAccessPointRegionOutput
	ToMultiRegionAccessPointRegionOutputWithContext(context.Context) MultiRegionAccessPointRegionOutput
}

type MultiRegionAccessPointRegionArgs struct {
	Bucket pulumi.StringInput `pulumi:"bucket"`
}

func (MultiRegionAccessPointRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiRegionAccessPointRegion)(nil)).Elem()
}

func (i MultiRegionAccessPointRegionArgs) ToMultiRegionAccessPointRegionOutput() MultiRegionAccessPointRegionOutput {
	return i.ToMultiRegionAccessPointRegionOutputWithContext(context.Background())
}

func (i MultiRegionAccessPointRegionArgs) ToMultiRegionAccessPointRegionOutputWithContext(ctx context.Context) MultiRegionAccessPointRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointRegionOutput)
}

// MultiRegionAccessPointRegionArrayInput is an input type that accepts MultiRegionAccessPointRegionArray and MultiRegionAccessPointRegionArrayOutput values.
// You can construct a concrete instance of `MultiRegionAccessPointRegionArrayInput` via:
//
//          MultiRegionAccessPointRegionArray{ MultiRegionAccessPointRegionArgs{...} }
type MultiRegionAccessPointRegionArrayInput interface {
	pulumi.Input

	ToMultiRegionAccessPointRegionArrayOutput() MultiRegionAccessPointRegionArrayOutput
	ToMultiRegionAccessPointRegionArrayOutputWithContext(context.Context) MultiRegionAccessPointRegionArrayOutput
}

type MultiRegionAccessPointRegionArray []MultiRegionAccessPointRegionInput

func (MultiRegionAccessPointRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MultiRegionAccessPointRegion)(nil)).Elem()
}

func (i MultiRegionAccessPointRegionArray) ToMultiRegionAccessPointRegionArrayOutput() MultiRegionAccessPointRegionArrayOutput {
	return i.ToMultiRegionAccessPointRegionArrayOutputWithContext(context.Background())
}

func (i MultiRegionAccessPointRegionArray) ToMultiRegionAccessPointRegionArrayOutputWithContext(ctx context.Context) MultiRegionAccessPointRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiRegionAccessPointRegionArrayOutput)
}

type MultiRegionAccessPointRegionOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiRegionAccessPointRegion)(nil)).Elem()
}

func (o MultiRegionAccessPointRegionOutput) ToMultiRegionAccessPointRegionOutput() MultiRegionAccessPointRegionOutput {
	return o
}

func (o MultiRegionAccessPointRegionOutput) ToMultiRegionAccessPointRegionOutputWithContext(ctx context.Context) MultiRegionAccessPointRegionOutput {
	return o
}

func (o MultiRegionAccessPointRegionOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v MultiRegionAccessPointRegion) string { return v.Bucket }).(pulumi.StringOutput)
}

type MultiRegionAccessPointRegionArrayOutput struct{ *pulumi.OutputState }

func (MultiRegionAccessPointRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MultiRegionAccessPointRegion)(nil)).Elem()
}

func (o MultiRegionAccessPointRegionArrayOutput) ToMultiRegionAccessPointRegionArrayOutput() MultiRegionAccessPointRegionArrayOutput {
	return o
}

func (o MultiRegionAccessPointRegionArrayOutput) ToMultiRegionAccessPointRegionArrayOutputWithContext(ctx context.Context) MultiRegionAccessPointRegionArrayOutput {
	return o
}

func (o MultiRegionAccessPointRegionArrayOutput) Index(i pulumi.IntInput) MultiRegionAccessPointRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MultiRegionAccessPointRegion {
		return vs[0].([]MultiRegionAccessPointRegion)[vs[1].(int)]
	}).(MultiRegionAccessPointRegionOutput)
}

// Account-level metrics configurations.
type StorageLensAccountLevel struct {
	ActivityMetrics *StorageLensActivityMetrics `pulumi:"activityMetrics"`
	BucketLevel     StorageLensBucketLevel      `pulumi:"bucketLevel"`
}

// StorageLensAccountLevelInput is an input type that accepts StorageLensAccountLevelArgs and StorageLensAccountLevelOutput values.
// You can construct a concrete instance of `StorageLensAccountLevelInput` via:
//
//          StorageLensAccountLevelArgs{...}
type StorageLensAccountLevelInput interface {
	pulumi.Input

	ToStorageLensAccountLevelOutput() StorageLensAccountLevelOutput
	ToStorageLensAccountLevelOutputWithContext(context.Context) StorageLensAccountLevelOutput
}

// Account-level metrics configurations.
type StorageLensAccountLevelArgs struct {
	ActivityMetrics StorageLensActivityMetricsPtrInput `pulumi:"activityMetrics"`
	BucketLevel     StorageLensBucketLevelInput        `pulumi:"bucketLevel"`
}

func (StorageLensAccountLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensAccountLevel)(nil)).Elem()
}

func (i StorageLensAccountLevelArgs) ToStorageLensAccountLevelOutput() StorageLensAccountLevelOutput {
	return i.ToStorageLensAccountLevelOutputWithContext(context.Background())
}

func (i StorageLensAccountLevelArgs) ToStorageLensAccountLevelOutputWithContext(ctx context.Context) StorageLensAccountLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensAccountLevelOutput)
}

func (i StorageLensAccountLevelArgs) ToStorageLensAccountLevelPtrOutput() StorageLensAccountLevelPtrOutput {
	return i.ToStorageLensAccountLevelPtrOutputWithContext(context.Background())
}

func (i StorageLensAccountLevelArgs) ToStorageLensAccountLevelPtrOutputWithContext(ctx context.Context) StorageLensAccountLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensAccountLevelOutput).ToStorageLensAccountLevelPtrOutputWithContext(ctx)
}

// StorageLensAccountLevelPtrInput is an input type that accepts StorageLensAccountLevelArgs, StorageLensAccountLevelPtr and StorageLensAccountLevelPtrOutput values.
// You can construct a concrete instance of `StorageLensAccountLevelPtrInput` via:
//
//          StorageLensAccountLevelArgs{...}
//
//  or:
//
//          nil
type StorageLensAccountLevelPtrInput interface {
	pulumi.Input

	ToStorageLensAccountLevelPtrOutput() StorageLensAccountLevelPtrOutput
	ToStorageLensAccountLevelPtrOutputWithContext(context.Context) StorageLensAccountLevelPtrOutput
}

type storageLensAccountLevelPtrType StorageLensAccountLevelArgs

func StorageLensAccountLevelPtr(v *StorageLensAccountLevelArgs) StorageLensAccountLevelPtrInput {
	return (*storageLensAccountLevelPtrType)(v)
}

func (*storageLensAccountLevelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensAccountLevel)(nil)).Elem()
}

func (i *storageLensAccountLevelPtrType) ToStorageLensAccountLevelPtrOutput() StorageLensAccountLevelPtrOutput {
	return i.ToStorageLensAccountLevelPtrOutputWithContext(context.Background())
}

func (i *storageLensAccountLevelPtrType) ToStorageLensAccountLevelPtrOutputWithContext(ctx context.Context) StorageLensAccountLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensAccountLevelPtrOutput)
}

// Account-level metrics configurations.
type StorageLensAccountLevelOutput struct{ *pulumi.OutputState }

func (StorageLensAccountLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensAccountLevel)(nil)).Elem()
}

func (o StorageLensAccountLevelOutput) ToStorageLensAccountLevelOutput() StorageLensAccountLevelOutput {
	return o
}

func (o StorageLensAccountLevelOutput) ToStorageLensAccountLevelOutputWithContext(ctx context.Context) StorageLensAccountLevelOutput {
	return o
}

func (o StorageLensAccountLevelOutput) ToStorageLensAccountLevelPtrOutput() StorageLensAccountLevelPtrOutput {
	return o.ToStorageLensAccountLevelPtrOutputWithContext(context.Background())
}

func (o StorageLensAccountLevelOutput) ToStorageLensAccountLevelPtrOutputWithContext(ctx context.Context) StorageLensAccountLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensAccountLevel) *StorageLensAccountLevel {
		return &v
	}).(StorageLensAccountLevelPtrOutput)
}

func (o StorageLensAccountLevelOutput) ActivityMetrics() StorageLensActivityMetricsPtrOutput {
	return o.ApplyT(func(v StorageLensAccountLevel) *StorageLensActivityMetrics { return v.ActivityMetrics }).(StorageLensActivityMetricsPtrOutput)
}

func (o StorageLensAccountLevelOutput) BucketLevel() StorageLensBucketLevelOutput {
	return o.ApplyT(func(v StorageLensAccountLevel) StorageLensBucketLevel { return v.BucketLevel }).(StorageLensBucketLevelOutput)
}

type StorageLensAccountLevelPtrOutput struct{ *pulumi.OutputState }

func (StorageLensAccountLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensAccountLevel)(nil)).Elem()
}

func (o StorageLensAccountLevelPtrOutput) ToStorageLensAccountLevelPtrOutput() StorageLensAccountLevelPtrOutput {
	return o
}

func (o StorageLensAccountLevelPtrOutput) ToStorageLensAccountLevelPtrOutputWithContext(ctx context.Context) StorageLensAccountLevelPtrOutput {
	return o
}

func (o StorageLensAccountLevelPtrOutput) Elem() StorageLensAccountLevelOutput {
	return o.ApplyT(func(v *StorageLensAccountLevel) StorageLensAccountLevel {
		if v != nil {
			return *v
		}
		var ret StorageLensAccountLevel
		return ret
	}).(StorageLensAccountLevelOutput)
}

func (o StorageLensAccountLevelPtrOutput) ActivityMetrics() StorageLensActivityMetricsPtrOutput {
	return o.ApplyT(func(v *StorageLensAccountLevel) *StorageLensActivityMetrics {
		if v == nil {
			return nil
		}
		return v.ActivityMetrics
	}).(StorageLensActivityMetricsPtrOutput)
}

func (o StorageLensAccountLevelPtrOutput) BucketLevel() StorageLensBucketLevelPtrOutput {
	return o.ApplyT(func(v *StorageLensAccountLevel) *StorageLensBucketLevel {
		if v == nil {
			return nil
		}
		return &v.BucketLevel
	}).(StorageLensBucketLevelPtrOutput)
}

// Enables activity metrics.
type StorageLensActivityMetrics struct {
	// Specifies whether activity metrics are enabled or disabled.
	IsEnabled *bool `pulumi:"isEnabled"`
}

// StorageLensActivityMetricsInput is an input type that accepts StorageLensActivityMetricsArgs and StorageLensActivityMetricsOutput values.
// You can construct a concrete instance of `StorageLensActivityMetricsInput` via:
//
//          StorageLensActivityMetricsArgs{...}
type StorageLensActivityMetricsInput interface {
	pulumi.Input

	ToStorageLensActivityMetricsOutput() StorageLensActivityMetricsOutput
	ToStorageLensActivityMetricsOutputWithContext(context.Context) StorageLensActivityMetricsOutput
}

// Enables activity metrics.
type StorageLensActivityMetricsArgs struct {
	// Specifies whether activity metrics are enabled or disabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
}

func (StorageLensActivityMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensActivityMetrics)(nil)).Elem()
}

func (i StorageLensActivityMetricsArgs) ToStorageLensActivityMetricsOutput() StorageLensActivityMetricsOutput {
	return i.ToStorageLensActivityMetricsOutputWithContext(context.Background())
}

func (i StorageLensActivityMetricsArgs) ToStorageLensActivityMetricsOutputWithContext(ctx context.Context) StorageLensActivityMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensActivityMetricsOutput)
}

func (i StorageLensActivityMetricsArgs) ToStorageLensActivityMetricsPtrOutput() StorageLensActivityMetricsPtrOutput {
	return i.ToStorageLensActivityMetricsPtrOutputWithContext(context.Background())
}

func (i StorageLensActivityMetricsArgs) ToStorageLensActivityMetricsPtrOutputWithContext(ctx context.Context) StorageLensActivityMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensActivityMetricsOutput).ToStorageLensActivityMetricsPtrOutputWithContext(ctx)
}

// StorageLensActivityMetricsPtrInput is an input type that accepts StorageLensActivityMetricsArgs, StorageLensActivityMetricsPtr and StorageLensActivityMetricsPtrOutput values.
// You can construct a concrete instance of `StorageLensActivityMetricsPtrInput` via:
//
//          StorageLensActivityMetricsArgs{...}
//
//  or:
//
//          nil
type StorageLensActivityMetricsPtrInput interface {
	pulumi.Input

	ToStorageLensActivityMetricsPtrOutput() StorageLensActivityMetricsPtrOutput
	ToStorageLensActivityMetricsPtrOutputWithContext(context.Context) StorageLensActivityMetricsPtrOutput
}

type storageLensActivityMetricsPtrType StorageLensActivityMetricsArgs

func StorageLensActivityMetricsPtr(v *StorageLensActivityMetricsArgs) StorageLensActivityMetricsPtrInput {
	return (*storageLensActivityMetricsPtrType)(v)
}

func (*storageLensActivityMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensActivityMetrics)(nil)).Elem()
}

func (i *storageLensActivityMetricsPtrType) ToStorageLensActivityMetricsPtrOutput() StorageLensActivityMetricsPtrOutput {
	return i.ToStorageLensActivityMetricsPtrOutputWithContext(context.Background())
}

func (i *storageLensActivityMetricsPtrType) ToStorageLensActivityMetricsPtrOutputWithContext(ctx context.Context) StorageLensActivityMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensActivityMetricsPtrOutput)
}

// Enables activity metrics.
type StorageLensActivityMetricsOutput struct{ *pulumi.OutputState }

func (StorageLensActivityMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensActivityMetrics)(nil)).Elem()
}

func (o StorageLensActivityMetricsOutput) ToStorageLensActivityMetricsOutput() StorageLensActivityMetricsOutput {
	return o
}

func (o StorageLensActivityMetricsOutput) ToStorageLensActivityMetricsOutputWithContext(ctx context.Context) StorageLensActivityMetricsOutput {
	return o
}

func (o StorageLensActivityMetricsOutput) ToStorageLensActivityMetricsPtrOutput() StorageLensActivityMetricsPtrOutput {
	return o.ToStorageLensActivityMetricsPtrOutputWithContext(context.Background())
}

func (o StorageLensActivityMetricsOutput) ToStorageLensActivityMetricsPtrOutputWithContext(ctx context.Context) StorageLensActivityMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensActivityMetrics) *StorageLensActivityMetrics {
		return &v
	}).(StorageLensActivityMetricsPtrOutput)
}

// Specifies whether activity metrics are enabled or disabled.
func (o StorageLensActivityMetricsOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageLensActivityMetrics) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

type StorageLensActivityMetricsPtrOutput struct{ *pulumi.OutputState }

func (StorageLensActivityMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensActivityMetrics)(nil)).Elem()
}

func (o StorageLensActivityMetricsPtrOutput) ToStorageLensActivityMetricsPtrOutput() StorageLensActivityMetricsPtrOutput {
	return o
}

func (o StorageLensActivityMetricsPtrOutput) ToStorageLensActivityMetricsPtrOutputWithContext(ctx context.Context) StorageLensActivityMetricsPtrOutput {
	return o
}

func (o StorageLensActivityMetricsPtrOutput) Elem() StorageLensActivityMetricsOutput {
	return o.ApplyT(func(v *StorageLensActivityMetrics) StorageLensActivityMetrics {
		if v != nil {
			return *v
		}
		var ret StorageLensActivityMetrics
		return ret
	}).(StorageLensActivityMetricsOutput)
}

// Specifies whether activity metrics are enabled or disabled.
func (o StorageLensActivityMetricsPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageLensActivityMetrics) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The AWS Organizations ARN to use in the Amazon S3 Storage Lens configuration.
type StorageLensAwsOrg struct {
	Arn string `pulumi:"arn"`
}

// StorageLensAwsOrgInput is an input type that accepts StorageLensAwsOrgArgs and StorageLensAwsOrgOutput values.
// You can construct a concrete instance of `StorageLensAwsOrgInput` via:
//
//          StorageLensAwsOrgArgs{...}
type StorageLensAwsOrgInput interface {
	pulumi.Input

	ToStorageLensAwsOrgOutput() StorageLensAwsOrgOutput
	ToStorageLensAwsOrgOutputWithContext(context.Context) StorageLensAwsOrgOutput
}

// The AWS Organizations ARN to use in the Amazon S3 Storage Lens configuration.
type StorageLensAwsOrgArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (StorageLensAwsOrgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensAwsOrg)(nil)).Elem()
}

func (i StorageLensAwsOrgArgs) ToStorageLensAwsOrgOutput() StorageLensAwsOrgOutput {
	return i.ToStorageLensAwsOrgOutputWithContext(context.Background())
}

func (i StorageLensAwsOrgArgs) ToStorageLensAwsOrgOutputWithContext(ctx context.Context) StorageLensAwsOrgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensAwsOrgOutput)
}

func (i StorageLensAwsOrgArgs) ToStorageLensAwsOrgPtrOutput() StorageLensAwsOrgPtrOutput {
	return i.ToStorageLensAwsOrgPtrOutputWithContext(context.Background())
}

func (i StorageLensAwsOrgArgs) ToStorageLensAwsOrgPtrOutputWithContext(ctx context.Context) StorageLensAwsOrgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensAwsOrgOutput).ToStorageLensAwsOrgPtrOutputWithContext(ctx)
}

// StorageLensAwsOrgPtrInput is an input type that accepts StorageLensAwsOrgArgs, StorageLensAwsOrgPtr and StorageLensAwsOrgPtrOutput values.
// You can construct a concrete instance of `StorageLensAwsOrgPtrInput` via:
//
//          StorageLensAwsOrgArgs{...}
//
//  or:
//
//          nil
type StorageLensAwsOrgPtrInput interface {
	pulumi.Input

	ToStorageLensAwsOrgPtrOutput() StorageLensAwsOrgPtrOutput
	ToStorageLensAwsOrgPtrOutputWithContext(context.Context) StorageLensAwsOrgPtrOutput
}

type storageLensAwsOrgPtrType StorageLensAwsOrgArgs

func StorageLensAwsOrgPtr(v *StorageLensAwsOrgArgs) StorageLensAwsOrgPtrInput {
	return (*storageLensAwsOrgPtrType)(v)
}

func (*storageLensAwsOrgPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensAwsOrg)(nil)).Elem()
}

func (i *storageLensAwsOrgPtrType) ToStorageLensAwsOrgPtrOutput() StorageLensAwsOrgPtrOutput {
	return i.ToStorageLensAwsOrgPtrOutputWithContext(context.Background())
}

func (i *storageLensAwsOrgPtrType) ToStorageLensAwsOrgPtrOutputWithContext(ctx context.Context) StorageLensAwsOrgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensAwsOrgPtrOutput)
}

// The AWS Organizations ARN to use in the Amazon S3 Storage Lens configuration.
type StorageLensAwsOrgOutput struct{ *pulumi.OutputState }

func (StorageLensAwsOrgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensAwsOrg)(nil)).Elem()
}

func (o StorageLensAwsOrgOutput) ToStorageLensAwsOrgOutput() StorageLensAwsOrgOutput {
	return o
}

func (o StorageLensAwsOrgOutput) ToStorageLensAwsOrgOutputWithContext(ctx context.Context) StorageLensAwsOrgOutput {
	return o
}

func (o StorageLensAwsOrgOutput) ToStorageLensAwsOrgPtrOutput() StorageLensAwsOrgPtrOutput {
	return o.ToStorageLensAwsOrgPtrOutputWithContext(context.Background())
}

func (o StorageLensAwsOrgOutput) ToStorageLensAwsOrgPtrOutputWithContext(ctx context.Context) StorageLensAwsOrgPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensAwsOrg) *StorageLensAwsOrg {
		return &v
	}).(StorageLensAwsOrgPtrOutput)
}

func (o StorageLensAwsOrgOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v StorageLensAwsOrg) string { return v.Arn }).(pulumi.StringOutput)
}

type StorageLensAwsOrgPtrOutput struct{ *pulumi.OutputState }

func (StorageLensAwsOrgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensAwsOrg)(nil)).Elem()
}

func (o StorageLensAwsOrgPtrOutput) ToStorageLensAwsOrgPtrOutput() StorageLensAwsOrgPtrOutput {
	return o
}

func (o StorageLensAwsOrgPtrOutput) ToStorageLensAwsOrgPtrOutputWithContext(ctx context.Context) StorageLensAwsOrgPtrOutput {
	return o
}

func (o StorageLensAwsOrgPtrOutput) Elem() StorageLensAwsOrgOutput {
	return o.ApplyT(func(v *StorageLensAwsOrg) StorageLensAwsOrg {
		if v != nil {
			return *v
		}
		var ret StorageLensAwsOrg
		return ret
	}).(StorageLensAwsOrgOutput)
}

func (o StorageLensAwsOrgPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageLensAwsOrg) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// Bucket-level metrics configurations.
type StorageLensBucketLevel struct {
	ActivityMetrics *StorageLensActivityMetrics `pulumi:"activityMetrics"`
	PrefixLevel     *StorageLensPrefixLevel     `pulumi:"prefixLevel"`
}

// StorageLensBucketLevelInput is an input type that accepts StorageLensBucketLevelArgs and StorageLensBucketLevelOutput values.
// You can construct a concrete instance of `StorageLensBucketLevelInput` via:
//
//          StorageLensBucketLevelArgs{...}
type StorageLensBucketLevelInput interface {
	pulumi.Input

	ToStorageLensBucketLevelOutput() StorageLensBucketLevelOutput
	ToStorageLensBucketLevelOutputWithContext(context.Context) StorageLensBucketLevelOutput
}

// Bucket-level metrics configurations.
type StorageLensBucketLevelArgs struct {
	ActivityMetrics StorageLensActivityMetricsPtrInput `pulumi:"activityMetrics"`
	PrefixLevel     StorageLensPrefixLevelPtrInput     `pulumi:"prefixLevel"`
}

func (StorageLensBucketLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensBucketLevel)(nil)).Elem()
}

func (i StorageLensBucketLevelArgs) ToStorageLensBucketLevelOutput() StorageLensBucketLevelOutput {
	return i.ToStorageLensBucketLevelOutputWithContext(context.Background())
}

func (i StorageLensBucketLevelArgs) ToStorageLensBucketLevelOutputWithContext(ctx context.Context) StorageLensBucketLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensBucketLevelOutput)
}

func (i StorageLensBucketLevelArgs) ToStorageLensBucketLevelPtrOutput() StorageLensBucketLevelPtrOutput {
	return i.ToStorageLensBucketLevelPtrOutputWithContext(context.Background())
}

func (i StorageLensBucketLevelArgs) ToStorageLensBucketLevelPtrOutputWithContext(ctx context.Context) StorageLensBucketLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensBucketLevelOutput).ToStorageLensBucketLevelPtrOutputWithContext(ctx)
}

// StorageLensBucketLevelPtrInput is an input type that accepts StorageLensBucketLevelArgs, StorageLensBucketLevelPtr and StorageLensBucketLevelPtrOutput values.
// You can construct a concrete instance of `StorageLensBucketLevelPtrInput` via:
//
//          StorageLensBucketLevelArgs{...}
//
//  or:
//
//          nil
type StorageLensBucketLevelPtrInput interface {
	pulumi.Input

	ToStorageLensBucketLevelPtrOutput() StorageLensBucketLevelPtrOutput
	ToStorageLensBucketLevelPtrOutputWithContext(context.Context) StorageLensBucketLevelPtrOutput
}

type storageLensBucketLevelPtrType StorageLensBucketLevelArgs

func StorageLensBucketLevelPtr(v *StorageLensBucketLevelArgs) StorageLensBucketLevelPtrInput {
	return (*storageLensBucketLevelPtrType)(v)
}

func (*storageLensBucketLevelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensBucketLevel)(nil)).Elem()
}

func (i *storageLensBucketLevelPtrType) ToStorageLensBucketLevelPtrOutput() StorageLensBucketLevelPtrOutput {
	return i.ToStorageLensBucketLevelPtrOutputWithContext(context.Background())
}

func (i *storageLensBucketLevelPtrType) ToStorageLensBucketLevelPtrOutputWithContext(ctx context.Context) StorageLensBucketLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensBucketLevelPtrOutput)
}

// Bucket-level metrics configurations.
type StorageLensBucketLevelOutput struct{ *pulumi.OutputState }

func (StorageLensBucketLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensBucketLevel)(nil)).Elem()
}

func (o StorageLensBucketLevelOutput) ToStorageLensBucketLevelOutput() StorageLensBucketLevelOutput {
	return o
}

func (o StorageLensBucketLevelOutput) ToStorageLensBucketLevelOutputWithContext(ctx context.Context) StorageLensBucketLevelOutput {
	return o
}

func (o StorageLensBucketLevelOutput) ToStorageLensBucketLevelPtrOutput() StorageLensBucketLevelPtrOutput {
	return o.ToStorageLensBucketLevelPtrOutputWithContext(context.Background())
}

func (o StorageLensBucketLevelOutput) ToStorageLensBucketLevelPtrOutputWithContext(ctx context.Context) StorageLensBucketLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensBucketLevel) *StorageLensBucketLevel {
		return &v
	}).(StorageLensBucketLevelPtrOutput)
}

func (o StorageLensBucketLevelOutput) ActivityMetrics() StorageLensActivityMetricsPtrOutput {
	return o.ApplyT(func(v StorageLensBucketLevel) *StorageLensActivityMetrics { return v.ActivityMetrics }).(StorageLensActivityMetricsPtrOutput)
}

func (o StorageLensBucketLevelOutput) PrefixLevel() StorageLensPrefixLevelPtrOutput {
	return o.ApplyT(func(v StorageLensBucketLevel) *StorageLensPrefixLevel { return v.PrefixLevel }).(StorageLensPrefixLevelPtrOutput)
}

type StorageLensBucketLevelPtrOutput struct{ *pulumi.OutputState }

func (StorageLensBucketLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensBucketLevel)(nil)).Elem()
}

func (o StorageLensBucketLevelPtrOutput) ToStorageLensBucketLevelPtrOutput() StorageLensBucketLevelPtrOutput {
	return o
}

func (o StorageLensBucketLevelPtrOutput) ToStorageLensBucketLevelPtrOutputWithContext(ctx context.Context) StorageLensBucketLevelPtrOutput {
	return o
}

func (o StorageLensBucketLevelPtrOutput) Elem() StorageLensBucketLevelOutput {
	return o.ApplyT(func(v *StorageLensBucketLevel) StorageLensBucketLevel {
		if v != nil {
			return *v
		}
		var ret StorageLensBucketLevel
		return ret
	}).(StorageLensBucketLevelOutput)
}

func (o StorageLensBucketLevelPtrOutput) ActivityMetrics() StorageLensActivityMetricsPtrOutput {
	return o.ApplyT(func(v *StorageLensBucketLevel) *StorageLensActivityMetrics {
		if v == nil {
			return nil
		}
		return v.ActivityMetrics
	}).(StorageLensActivityMetricsPtrOutput)
}

func (o StorageLensBucketLevelPtrOutput) PrefixLevel() StorageLensPrefixLevelPtrOutput {
	return o.ApplyT(func(v *StorageLensBucketLevel) *StorageLensPrefixLevel {
		if v == nil {
			return nil
		}
		return v.PrefixLevel
	}).(StorageLensPrefixLevelPtrOutput)
}

// S3 buckets and Regions to include/exclude in the Amazon S3 Storage Lens configuration.
type StorageLensBucketsAndRegions struct {
	Buckets []string `pulumi:"buckets"`
	Regions []string `pulumi:"regions"`
}

// StorageLensBucketsAndRegionsInput is an input type that accepts StorageLensBucketsAndRegionsArgs and StorageLensBucketsAndRegionsOutput values.
// You can construct a concrete instance of `StorageLensBucketsAndRegionsInput` via:
//
//          StorageLensBucketsAndRegionsArgs{...}
type StorageLensBucketsAndRegionsInput interface {
	pulumi.Input

	ToStorageLensBucketsAndRegionsOutput() StorageLensBucketsAndRegionsOutput
	ToStorageLensBucketsAndRegionsOutputWithContext(context.Context) StorageLensBucketsAndRegionsOutput
}

// S3 buckets and Regions to include/exclude in the Amazon S3 Storage Lens configuration.
type StorageLensBucketsAndRegionsArgs struct {
	Buckets pulumi.StringArrayInput `pulumi:"buckets"`
	Regions pulumi.StringArrayInput `pulumi:"regions"`
}

func (StorageLensBucketsAndRegionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensBucketsAndRegions)(nil)).Elem()
}

func (i StorageLensBucketsAndRegionsArgs) ToStorageLensBucketsAndRegionsOutput() StorageLensBucketsAndRegionsOutput {
	return i.ToStorageLensBucketsAndRegionsOutputWithContext(context.Background())
}

func (i StorageLensBucketsAndRegionsArgs) ToStorageLensBucketsAndRegionsOutputWithContext(ctx context.Context) StorageLensBucketsAndRegionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensBucketsAndRegionsOutput)
}

func (i StorageLensBucketsAndRegionsArgs) ToStorageLensBucketsAndRegionsPtrOutput() StorageLensBucketsAndRegionsPtrOutput {
	return i.ToStorageLensBucketsAndRegionsPtrOutputWithContext(context.Background())
}

func (i StorageLensBucketsAndRegionsArgs) ToStorageLensBucketsAndRegionsPtrOutputWithContext(ctx context.Context) StorageLensBucketsAndRegionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensBucketsAndRegionsOutput).ToStorageLensBucketsAndRegionsPtrOutputWithContext(ctx)
}

// StorageLensBucketsAndRegionsPtrInput is an input type that accepts StorageLensBucketsAndRegionsArgs, StorageLensBucketsAndRegionsPtr and StorageLensBucketsAndRegionsPtrOutput values.
// You can construct a concrete instance of `StorageLensBucketsAndRegionsPtrInput` via:
//
//          StorageLensBucketsAndRegionsArgs{...}
//
//  or:
//
//          nil
type StorageLensBucketsAndRegionsPtrInput interface {
	pulumi.Input

	ToStorageLensBucketsAndRegionsPtrOutput() StorageLensBucketsAndRegionsPtrOutput
	ToStorageLensBucketsAndRegionsPtrOutputWithContext(context.Context) StorageLensBucketsAndRegionsPtrOutput
}

type storageLensBucketsAndRegionsPtrType StorageLensBucketsAndRegionsArgs

func StorageLensBucketsAndRegionsPtr(v *StorageLensBucketsAndRegionsArgs) StorageLensBucketsAndRegionsPtrInput {
	return (*storageLensBucketsAndRegionsPtrType)(v)
}

func (*storageLensBucketsAndRegionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensBucketsAndRegions)(nil)).Elem()
}

func (i *storageLensBucketsAndRegionsPtrType) ToStorageLensBucketsAndRegionsPtrOutput() StorageLensBucketsAndRegionsPtrOutput {
	return i.ToStorageLensBucketsAndRegionsPtrOutputWithContext(context.Background())
}

func (i *storageLensBucketsAndRegionsPtrType) ToStorageLensBucketsAndRegionsPtrOutputWithContext(ctx context.Context) StorageLensBucketsAndRegionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensBucketsAndRegionsPtrOutput)
}

// S3 buckets and Regions to include/exclude in the Amazon S3 Storage Lens configuration.
type StorageLensBucketsAndRegionsOutput struct{ *pulumi.OutputState }

func (StorageLensBucketsAndRegionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensBucketsAndRegions)(nil)).Elem()
}

func (o StorageLensBucketsAndRegionsOutput) ToStorageLensBucketsAndRegionsOutput() StorageLensBucketsAndRegionsOutput {
	return o
}

func (o StorageLensBucketsAndRegionsOutput) ToStorageLensBucketsAndRegionsOutputWithContext(ctx context.Context) StorageLensBucketsAndRegionsOutput {
	return o
}

func (o StorageLensBucketsAndRegionsOutput) ToStorageLensBucketsAndRegionsPtrOutput() StorageLensBucketsAndRegionsPtrOutput {
	return o.ToStorageLensBucketsAndRegionsPtrOutputWithContext(context.Background())
}

func (o StorageLensBucketsAndRegionsOutput) ToStorageLensBucketsAndRegionsPtrOutputWithContext(ctx context.Context) StorageLensBucketsAndRegionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensBucketsAndRegions) *StorageLensBucketsAndRegions {
		return &v
	}).(StorageLensBucketsAndRegionsPtrOutput)
}

func (o StorageLensBucketsAndRegionsOutput) Buckets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StorageLensBucketsAndRegions) []string { return v.Buckets }).(pulumi.StringArrayOutput)
}

func (o StorageLensBucketsAndRegionsOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StorageLensBucketsAndRegions) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

type StorageLensBucketsAndRegionsPtrOutput struct{ *pulumi.OutputState }

func (StorageLensBucketsAndRegionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensBucketsAndRegions)(nil)).Elem()
}

func (o StorageLensBucketsAndRegionsPtrOutput) ToStorageLensBucketsAndRegionsPtrOutput() StorageLensBucketsAndRegionsPtrOutput {
	return o
}

func (o StorageLensBucketsAndRegionsPtrOutput) ToStorageLensBucketsAndRegionsPtrOutputWithContext(ctx context.Context) StorageLensBucketsAndRegionsPtrOutput {
	return o
}

func (o StorageLensBucketsAndRegionsPtrOutput) Elem() StorageLensBucketsAndRegionsOutput {
	return o.ApplyT(func(v *StorageLensBucketsAndRegions) StorageLensBucketsAndRegions {
		if v != nil {
			return *v
		}
		var ret StorageLensBucketsAndRegions
		return ret
	}).(StorageLensBucketsAndRegionsOutput)
}

func (o StorageLensBucketsAndRegionsPtrOutput) Buckets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StorageLensBucketsAndRegions) []string {
		if v == nil {
			return nil
		}
		return v.Buckets
	}).(pulumi.StringArrayOutput)
}

func (o StorageLensBucketsAndRegionsPtrOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StorageLensBucketsAndRegions) []string {
		if v == nil {
			return nil
		}
		return v.Regions
	}).(pulumi.StringArrayOutput)
}

// Specifies how Amazon S3 Storage Lens metrics should be exported.
type StorageLensDataExport struct {
	S3BucketDestination StorageLensS3BucketDestination `pulumi:"s3BucketDestination"`
}

// StorageLensDataExportInput is an input type that accepts StorageLensDataExportArgs and StorageLensDataExportOutput values.
// You can construct a concrete instance of `StorageLensDataExportInput` via:
//
//          StorageLensDataExportArgs{...}
type StorageLensDataExportInput interface {
	pulumi.Input

	ToStorageLensDataExportOutput() StorageLensDataExportOutput
	ToStorageLensDataExportOutputWithContext(context.Context) StorageLensDataExportOutput
}

// Specifies how Amazon S3 Storage Lens metrics should be exported.
type StorageLensDataExportArgs struct {
	S3BucketDestination StorageLensS3BucketDestinationInput `pulumi:"s3BucketDestination"`
}

func (StorageLensDataExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensDataExport)(nil)).Elem()
}

func (i StorageLensDataExportArgs) ToStorageLensDataExportOutput() StorageLensDataExportOutput {
	return i.ToStorageLensDataExportOutputWithContext(context.Background())
}

func (i StorageLensDataExportArgs) ToStorageLensDataExportOutputWithContext(ctx context.Context) StorageLensDataExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensDataExportOutput)
}

func (i StorageLensDataExportArgs) ToStorageLensDataExportPtrOutput() StorageLensDataExportPtrOutput {
	return i.ToStorageLensDataExportPtrOutputWithContext(context.Background())
}

func (i StorageLensDataExportArgs) ToStorageLensDataExportPtrOutputWithContext(ctx context.Context) StorageLensDataExportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensDataExportOutput).ToStorageLensDataExportPtrOutputWithContext(ctx)
}

// StorageLensDataExportPtrInput is an input type that accepts StorageLensDataExportArgs, StorageLensDataExportPtr and StorageLensDataExportPtrOutput values.
// You can construct a concrete instance of `StorageLensDataExportPtrInput` via:
//
//          StorageLensDataExportArgs{...}
//
//  or:
//
//          nil
type StorageLensDataExportPtrInput interface {
	pulumi.Input

	ToStorageLensDataExportPtrOutput() StorageLensDataExportPtrOutput
	ToStorageLensDataExportPtrOutputWithContext(context.Context) StorageLensDataExportPtrOutput
}

type storageLensDataExportPtrType StorageLensDataExportArgs

func StorageLensDataExportPtr(v *StorageLensDataExportArgs) StorageLensDataExportPtrInput {
	return (*storageLensDataExportPtrType)(v)
}

func (*storageLensDataExportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensDataExport)(nil)).Elem()
}

func (i *storageLensDataExportPtrType) ToStorageLensDataExportPtrOutput() StorageLensDataExportPtrOutput {
	return i.ToStorageLensDataExportPtrOutputWithContext(context.Background())
}

func (i *storageLensDataExportPtrType) ToStorageLensDataExportPtrOutputWithContext(ctx context.Context) StorageLensDataExportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensDataExportPtrOutput)
}

// Specifies how Amazon S3 Storage Lens metrics should be exported.
type StorageLensDataExportOutput struct{ *pulumi.OutputState }

func (StorageLensDataExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensDataExport)(nil)).Elem()
}

func (o StorageLensDataExportOutput) ToStorageLensDataExportOutput() StorageLensDataExportOutput {
	return o
}

func (o StorageLensDataExportOutput) ToStorageLensDataExportOutputWithContext(ctx context.Context) StorageLensDataExportOutput {
	return o
}

func (o StorageLensDataExportOutput) ToStorageLensDataExportPtrOutput() StorageLensDataExportPtrOutput {
	return o.ToStorageLensDataExportPtrOutputWithContext(context.Background())
}

func (o StorageLensDataExportOutput) ToStorageLensDataExportPtrOutputWithContext(ctx context.Context) StorageLensDataExportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensDataExport) *StorageLensDataExport {
		return &v
	}).(StorageLensDataExportPtrOutput)
}

func (o StorageLensDataExportOutput) S3BucketDestination() StorageLensS3BucketDestinationOutput {
	return o.ApplyT(func(v StorageLensDataExport) StorageLensS3BucketDestination { return v.S3BucketDestination }).(StorageLensS3BucketDestinationOutput)
}

type StorageLensDataExportPtrOutput struct{ *pulumi.OutputState }

func (StorageLensDataExportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensDataExport)(nil)).Elem()
}

func (o StorageLensDataExportPtrOutput) ToStorageLensDataExportPtrOutput() StorageLensDataExportPtrOutput {
	return o
}

func (o StorageLensDataExportPtrOutput) ToStorageLensDataExportPtrOutputWithContext(ctx context.Context) StorageLensDataExportPtrOutput {
	return o
}

func (o StorageLensDataExportPtrOutput) Elem() StorageLensDataExportOutput {
	return o.ApplyT(func(v *StorageLensDataExport) StorageLensDataExport {
		if v != nil {
			return *v
		}
		var ret StorageLensDataExport
		return ret
	}).(StorageLensDataExportOutput)
}

func (o StorageLensDataExportPtrOutput) S3BucketDestination() StorageLensS3BucketDestinationPtrOutput {
	return o.ApplyT(func(v *StorageLensDataExport) *StorageLensS3BucketDestination {
		if v == nil {
			return nil
		}
		return &v.S3BucketDestination
	}).(StorageLensS3BucketDestinationPtrOutput)
}

// Configures the server-side encryption for Amazon S3 Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
type StorageLensEncryption struct {
}

// StorageLensEncryptionInput is an input type that accepts StorageLensEncryptionArgs and StorageLensEncryptionOutput values.
// You can construct a concrete instance of `StorageLensEncryptionInput` via:
//
//          StorageLensEncryptionArgs{...}
type StorageLensEncryptionInput interface {
	pulumi.Input

	ToStorageLensEncryptionOutput() StorageLensEncryptionOutput
	ToStorageLensEncryptionOutputWithContext(context.Context) StorageLensEncryptionOutput
}

// Configures the server-side encryption for Amazon S3 Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
type StorageLensEncryptionArgs struct {
}

func (StorageLensEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensEncryption)(nil)).Elem()
}

func (i StorageLensEncryptionArgs) ToStorageLensEncryptionOutput() StorageLensEncryptionOutput {
	return i.ToStorageLensEncryptionOutputWithContext(context.Background())
}

func (i StorageLensEncryptionArgs) ToStorageLensEncryptionOutputWithContext(ctx context.Context) StorageLensEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensEncryptionOutput)
}

func (i StorageLensEncryptionArgs) ToStorageLensEncryptionPtrOutput() StorageLensEncryptionPtrOutput {
	return i.ToStorageLensEncryptionPtrOutputWithContext(context.Background())
}

func (i StorageLensEncryptionArgs) ToStorageLensEncryptionPtrOutputWithContext(ctx context.Context) StorageLensEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensEncryptionOutput).ToStorageLensEncryptionPtrOutputWithContext(ctx)
}

// StorageLensEncryptionPtrInput is an input type that accepts StorageLensEncryptionArgs, StorageLensEncryptionPtr and StorageLensEncryptionPtrOutput values.
// You can construct a concrete instance of `StorageLensEncryptionPtrInput` via:
//
//          StorageLensEncryptionArgs{...}
//
//  or:
//
//          nil
type StorageLensEncryptionPtrInput interface {
	pulumi.Input

	ToStorageLensEncryptionPtrOutput() StorageLensEncryptionPtrOutput
	ToStorageLensEncryptionPtrOutputWithContext(context.Context) StorageLensEncryptionPtrOutput
}

type storageLensEncryptionPtrType StorageLensEncryptionArgs

func StorageLensEncryptionPtr(v *StorageLensEncryptionArgs) StorageLensEncryptionPtrInput {
	return (*storageLensEncryptionPtrType)(v)
}

func (*storageLensEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensEncryption)(nil)).Elem()
}

func (i *storageLensEncryptionPtrType) ToStorageLensEncryptionPtrOutput() StorageLensEncryptionPtrOutput {
	return i.ToStorageLensEncryptionPtrOutputWithContext(context.Background())
}

func (i *storageLensEncryptionPtrType) ToStorageLensEncryptionPtrOutputWithContext(ctx context.Context) StorageLensEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensEncryptionPtrOutput)
}

// Configures the server-side encryption for Amazon S3 Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
type StorageLensEncryptionOutput struct{ *pulumi.OutputState }

func (StorageLensEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensEncryption)(nil)).Elem()
}

func (o StorageLensEncryptionOutput) ToStorageLensEncryptionOutput() StorageLensEncryptionOutput {
	return o
}

func (o StorageLensEncryptionOutput) ToStorageLensEncryptionOutputWithContext(ctx context.Context) StorageLensEncryptionOutput {
	return o
}

func (o StorageLensEncryptionOutput) ToStorageLensEncryptionPtrOutput() StorageLensEncryptionPtrOutput {
	return o.ToStorageLensEncryptionPtrOutputWithContext(context.Background())
}

func (o StorageLensEncryptionOutput) ToStorageLensEncryptionPtrOutputWithContext(ctx context.Context) StorageLensEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensEncryption) *StorageLensEncryption {
		return &v
	}).(StorageLensEncryptionPtrOutput)
}

type StorageLensEncryptionPtrOutput struct{ *pulumi.OutputState }

func (StorageLensEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensEncryption)(nil)).Elem()
}

func (o StorageLensEncryptionPtrOutput) ToStorageLensEncryptionPtrOutput() StorageLensEncryptionPtrOutput {
	return o
}

func (o StorageLensEncryptionPtrOutput) ToStorageLensEncryptionPtrOutputWithContext(ctx context.Context) StorageLensEncryptionPtrOutput {
	return o
}

func (o StorageLensEncryptionPtrOutput) Elem() StorageLensEncryptionOutput {
	return o.ApplyT(func(v *StorageLensEncryption) StorageLensEncryption {
		if v != nil {
			return *v
		}
		var ret StorageLensEncryption
		return ret
	}).(StorageLensEncryptionOutput)
}

// Prefix-level metrics configurations.
type StorageLensPrefixLevel struct {
	StorageMetrics StorageLensPrefixLevelStorageMetrics `pulumi:"storageMetrics"`
}

// StorageLensPrefixLevelInput is an input type that accepts StorageLensPrefixLevelArgs and StorageLensPrefixLevelOutput values.
// You can construct a concrete instance of `StorageLensPrefixLevelInput` via:
//
//          StorageLensPrefixLevelArgs{...}
type StorageLensPrefixLevelInput interface {
	pulumi.Input

	ToStorageLensPrefixLevelOutput() StorageLensPrefixLevelOutput
	ToStorageLensPrefixLevelOutputWithContext(context.Context) StorageLensPrefixLevelOutput
}

// Prefix-level metrics configurations.
type StorageLensPrefixLevelArgs struct {
	StorageMetrics StorageLensPrefixLevelStorageMetricsInput `pulumi:"storageMetrics"`
}

func (StorageLensPrefixLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensPrefixLevel)(nil)).Elem()
}

func (i StorageLensPrefixLevelArgs) ToStorageLensPrefixLevelOutput() StorageLensPrefixLevelOutput {
	return i.ToStorageLensPrefixLevelOutputWithContext(context.Background())
}

func (i StorageLensPrefixLevelArgs) ToStorageLensPrefixLevelOutputWithContext(ctx context.Context) StorageLensPrefixLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensPrefixLevelOutput)
}

func (i StorageLensPrefixLevelArgs) ToStorageLensPrefixLevelPtrOutput() StorageLensPrefixLevelPtrOutput {
	return i.ToStorageLensPrefixLevelPtrOutputWithContext(context.Background())
}

func (i StorageLensPrefixLevelArgs) ToStorageLensPrefixLevelPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensPrefixLevelOutput).ToStorageLensPrefixLevelPtrOutputWithContext(ctx)
}

// StorageLensPrefixLevelPtrInput is an input type that accepts StorageLensPrefixLevelArgs, StorageLensPrefixLevelPtr and StorageLensPrefixLevelPtrOutput values.
// You can construct a concrete instance of `StorageLensPrefixLevelPtrInput` via:
//
//          StorageLensPrefixLevelArgs{...}
//
//  or:
//
//          nil
type StorageLensPrefixLevelPtrInput interface {
	pulumi.Input

	ToStorageLensPrefixLevelPtrOutput() StorageLensPrefixLevelPtrOutput
	ToStorageLensPrefixLevelPtrOutputWithContext(context.Context) StorageLensPrefixLevelPtrOutput
}

type storageLensPrefixLevelPtrType StorageLensPrefixLevelArgs

func StorageLensPrefixLevelPtr(v *StorageLensPrefixLevelArgs) StorageLensPrefixLevelPtrInput {
	return (*storageLensPrefixLevelPtrType)(v)
}

func (*storageLensPrefixLevelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensPrefixLevel)(nil)).Elem()
}

func (i *storageLensPrefixLevelPtrType) ToStorageLensPrefixLevelPtrOutput() StorageLensPrefixLevelPtrOutput {
	return i.ToStorageLensPrefixLevelPtrOutputWithContext(context.Background())
}

func (i *storageLensPrefixLevelPtrType) ToStorageLensPrefixLevelPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensPrefixLevelPtrOutput)
}

// Prefix-level metrics configurations.
type StorageLensPrefixLevelOutput struct{ *pulumi.OutputState }

func (StorageLensPrefixLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensPrefixLevel)(nil)).Elem()
}

func (o StorageLensPrefixLevelOutput) ToStorageLensPrefixLevelOutput() StorageLensPrefixLevelOutput {
	return o
}

func (o StorageLensPrefixLevelOutput) ToStorageLensPrefixLevelOutputWithContext(ctx context.Context) StorageLensPrefixLevelOutput {
	return o
}

func (o StorageLensPrefixLevelOutput) ToStorageLensPrefixLevelPtrOutput() StorageLensPrefixLevelPtrOutput {
	return o.ToStorageLensPrefixLevelPtrOutputWithContext(context.Background())
}

func (o StorageLensPrefixLevelOutput) ToStorageLensPrefixLevelPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensPrefixLevel) *StorageLensPrefixLevel {
		return &v
	}).(StorageLensPrefixLevelPtrOutput)
}

func (o StorageLensPrefixLevelOutput) StorageMetrics() StorageLensPrefixLevelStorageMetricsOutput {
	return o.ApplyT(func(v StorageLensPrefixLevel) StorageLensPrefixLevelStorageMetrics { return v.StorageMetrics }).(StorageLensPrefixLevelStorageMetricsOutput)
}

type StorageLensPrefixLevelPtrOutput struct{ *pulumi.OutputState }

func (StorageLensPrefixLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensPrefixLevel)(nil)).Elem()
}

func (o StorageLensPrefixLevelPtrOutput) ToStorageLensPrefixLevelPtrOutput() StorageLensPrefixLevelPtrOutput {
	return o
}

func (o StorageLensPrefixLevelPtrOutput) ToStorageLensPrefixLevelPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelPtrOutput {
	return o
}

func (o StorageLensPrefixLevelPtrOutput) Elem() StorageLensPrefixLevelOutput {
	return o.ApplyT(func(v *StorageLensPrefixLevel) StorageLensPrefixLevel {
		if v != nil {
			return *v
		}
		var ret StorageLensPrefixLevel
		return ret
	}).(StorageLensPrefixLevelOutput)
}

func (o StorageLensPrefixLevelPtrOutput) StorageMetrics() StorageLensPrefixLevelStorageMetricsPtrOutput {
	return o.ApplyT(func(v *StorageLensPrefixLevel) *StorageLensPrefixLevelStorageMetrics {
		if v == nil {
			return nil
		}
		return &v.StorageMetrics
	}).(StorageLensPrefixLevelStorageMetricsPtrOutput)
}

type StorageLensPrefixLevelStorageMetrics struct {
	// Specifies whether prefix-level storage metrics are enabled or disabled.
	IsEnabled         *bool                         `pulumi:"isEnabled"`
	SelectionCriteria *StorageLensSelectionCriteria `pulumi:"selectionCriteria"`
}

// StorageLensPrefixLevelStorageMetricsInput is an input type that accepts StorageLensPrefixLevelStorageMetricsArgs and StorageLensPrefixLevelStorageMetricsOutput values.
// You can construct a concrete instance of `StorageLensPrefixLevelStorageMetricsInput` via:
//
//          StorageLensPrefixLevelStorageMetricsArgs{...}
type StorageLensPrefixLevelStorageMetricsInput interface {
	pulumi.Input

	ToStorageLensPrefixLevelStorageMetricsOutput() StorageLensPrefixLevelStorageMetricsOutput
	ToStorageLensPrefixLevelStorageMetricsOutputWithContext(context.Context) StorageLensPrefixLevelStorageMetricsOutput
}

type StorageLensPrefixLevelStorageMetricsArgs struct {
	// Specifies whether prefix-level storage metrics are enabled or disabled.
	IsEnabled         pulumi.BoolPtrInput                  `pulumi:"isEnabled"`
	SelectionCriteria StorageLensSelectionCriteriaPtrInput `pulumi:"selectionCriteria"`
}

func (StorageLensPrefixLevelStorageMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensPrefixLevelStorageMetrics)(nil)).Elem()
}

func (i StorageLensPrefixLevelStorageMetricsArgs) ToStorageLensPrefixLevelStorageMetricsOutput() StorageLensPrefixLevelStorageMetricsOutput {
	return i.ToStorageLensPrefixLevelStorageMetricsOutputWithContext(context.Background())
}

func (i StorageLensPrefixLevelStorageMetricsArgs) ToStorageLensPrefixLevelStorageMetricsOutputWithContext(ctx context.Context) StorageLensPrefixLevelStorageMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensPrefixLevelStorageMetricsOutput)
}

func (i StorageLensPrefixLevelStorageMetricsArgs) ToStorageLensPrefixLevelStorageMetricsPtrOutput() StorageLensPrefixLevelStorageMetricsPtrOutput {
	return i.ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(context.Background())
}

func (i StorageLensPrefixLevelStorageMetricsArgs) ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelStorageMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensPrefixLevelStorageMetricsOutput).ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(ctx)
}

// StorageLensPrefixLevelStorageMetricsPtrInput is an input type that accepts StorageLensPrefixLevelStorageMetricsArgs, StorageLensPrefixLevelStorageMetricsPtr and StorageLensPrefixLevelStorageMetricsPtrOutput values.
// You can construct a concrete instance of `StorageLensPrefixLevelStorageMetricsPtrInput` via:
//
//          StorageLensPrefixLevelStorageMetricsArgs{...}
//
//  or:
//
//          nil
type StorageLensPrefixLevelStorageMetricsPtrInput interface {
	pulumi.Input

	ToStorageLensPrefixLevelStorageMetricsPtrOutput() StorageLensPrefixLevelStorageMetricsPtrOutput
	ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(context.Context) StorageLensPrefixLevelStorageMetricsPtrOutput
}

type storageLensPrefixLevelStorageMetricsPtrType StorageLensPrefixLevelStorageMetricsArgs

func StorageLensPrefixLevelStorageMetricsPtr(v *StorageLensPrefixLevelStorageMetricsArgs) StorageLensPrefixLevelStorageMetricsPtrInput {
	return (*storageLensPrefixLevelStorageMetricsPtrType)(v)
}

func (*storageLensPrefixLevelStorageMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensPrefixLevelStorageMetrics)(nil)).Elem()
}

func (i *storageLensPrefixLevelStorageMetricsPtrType) ToStorageLensPrefixLevelStorageMetricsPtrOutput() StorageLensPrefixLevelStorageMetricsPtrOutput {
	return i.ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(context.Background())
}

func (i *storageLensPrefixLevelStorageMetricsPtrType) ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelStorageMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensPrefixLevelStorageMetricsPtrOutput)
}

type StorageLensPrefixLevelStorageMetricsOutput struct{ *pulumi.OutputState }

func (StorageLensPrefixLevelStorageMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensPrefixLevelStorageMetrics)(nil)).Elem()
}

func (o StorageLensPrefixLevelStorageMetricsOutput) ToStorageLensPrefixLevelStorageMetricsOutput() StorageLensPrefixLevelStorageMetricsOutput {
	return o
}

func (o StorageLensPrefixLevelStorageMetricsOutput) ToStorageLensPrefixLevelStorageMetricsOutputWithContext(ctx context.Context) StorageLensPrefixLevelStorageMetricsOutput {
	return o
}

func (o StorageLensPrefixLevelStorageMetricsOutput) ToStorageLensPrefixLevelStorageMetricsPtrOutput() StorageLensPrefixLevelStorageMetricsPtrOutput {
	return o.ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(context.Background())
}

func (o StorageLensPrefixLevelStorageMetricsOutput) ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelStorageMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensPrefixLevelStorageMetrics) *StorageLensPrefixLevelStorageMetrics {
		return &v
	}).(StorageLensPrefixLevelStorageMetricsPtrOutput)
}

// Specifies whether prefix-level storage metrics are enabled or disabled.
func (o StorageLensPrefixLevelStorageMetricsOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageLensPrefixLevelStorageMetrics) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

func (o StorageLensPrefixLevelStorageMetricsOutput) SelectionCriteria() StorageLensSelectionCriteriaPtrOutput {
	return o.ApplyT(func(v StorageLensPrefixLevelStorageMetrics) *StorageLensSelectionCriteria { return v.SelectionCriteria }).(StorageLensSelectionCriteriaPtrOutput)
}

type StorageLensPrefixLevelStorageMetricsPtrOutput struct{ *pulumi.OutputState }

func (StorageLensPrefixLevelStorageMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensPrefixLevelStorageMetrics)(nil)).Elem()
}

func (o StorageLensPrefixLevelStorageMetricsPtrOutput) ToStorageLensPrefixLevelStorageMetricsPtrOutput() StorageLensPrefixLevelStorageMetricsPtrOutput {
	return o
}

func (o StorageLensPrefixLevelStorageMetricsPtrOutput) ToStorageLensPrefixLevelStorageMetricsPtrOutputWithContext(ctx context.Context) StorageLensPrefixLevelStorageMetricsPtrOutput {
	return o
}

func (o StorageLensPrefixLevelStorageMetricsPtrOutput) Elem() StorageLensPrefixLevelStorageMetricsOutput {
	return o.ApplyT(func(v *StorageLensPrefixLevelStorageMetrics) StorageLensPrefixLevelStorageMetrics {
		if v != nil {
			return *v
		}
		var ret StorageLensPrefixLevelStorageMetrics
		return ret
	}).(StorageLensPrefixLevelStorageMetricsOutput)
}

// Specifies whether prefix-level storage metrics are enabled or disabled.
func (o StorageLensPrefixLevelStorageMetricsPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageLensPrefixLevelStorageMetrics) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o StorageLensPrefixLevelStorageMetricsPtrOutput) SelectionCriteria() StorageLensSelectionCriteriaPtrOutput {
	return o.ApplyT(func(v *StorageLensPrefixLevelStorageMetrics) *StorageLensSelectionCriteria {
		if v == nil {
			return nil
		}
		return v.SelectionCriteria
	}).(StorageLensSelectionCriteriaPtrOutput)
}

// S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
type StorageLensS3BucketDestination struct {
	// The AWS account ID that owns the destination S3 bucket.
	AccountId string `pulumi:"accountId"`
	// The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
	Arn        string                 `pulumi:"arn"`
	Encryption *StorageLensEncryption `pulumi:"encryption"`
	// Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
	Format StorageLensS3BucketDestinationFormat `pulumi:"format"`
	// The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
	OutputSchemaVersion StorageLensS3BucketDestinationOutputSchemaVersion `pulumi:"outputSchemaVersion"`
	// The prefix to use for Amazon S3 Storage Lens export.
	Prefix *string `pulumi:"prefix"`
}

// StorageLensS3BucketDestinationInput is an input type that accepts StorageLensS3BucketDestinationArgs and StorageLensS3BucketDestinationOutput values.
// You can construct a concrete instance of `StorageLensS3BucketDestinationInput` via:
//
//          StorageLensS3BucketDestinationArgs{...}
type StorageLensS3BucketDestinationInput interface {
	pulumi.Input

	ToStorageLensS3BucketDestinationOutput() StorageLensS3BucketDestinationOutput
	ToStorageLensS3BucketDestinationOutputWithContext(context.Context) StorageLensS3BucketDestinationOutput
}

// S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
type StorageLensS3BucketDestinationArgs struct {
	// The AWS account ID that owns the destination S3 bucket.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
	Arn        pulumi.StringInput            `pulumi:"arn"`
	Encryption StorageLensEncryptionPtrInput `pulumi:"encryption"`
	// Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
	Format StorageLensS3BucketDestinationFormatInput `pulumi:"format"`
	// The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
	OutputSchemaVersion StorageLensS3BucketDestinationOutputSchemaVersionInput `pulumi:"outputSchemaVersion"`
	// The prefix to use for Amazon S3 Storage Lens export.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (StorageLensS3BucketDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensS3BucketDestination)(nil)).Elem()
}

func (i StorageLensS3BucketDestinationArgs) ToStorageLensS3BucketDestinationOutput() StorageLensS3BucketDestinationOutput {
	return i.ToStorageLensS3BucketDestinationOutputWithContext(context.Background())
}

func (i StorageLensS3BucketDestinationArgs) ToStorageLensS3BucketDestinationOutputWithContext(ctx context.Context) StorageLensS3BucketDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensS3BucketDestinationOutput)
}

func (i StorageLensS3BucketDestinationArgs) ToStorageLensS3BucketDestinationPtrOutput() StorageLensS3BucketDestinationPtrOutput {
	return i.ToStorageLensS3BucketDestinationPtrOutputWithContext(context.Background())
}

func (i StorageLensS3BucketDestinationArgs) ToStorageLensS3BucketDestinationPtrOutputWithContext(ctx context.Context) StorageLensS3BucketDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensS3BucketDestinationOutput).ToStorageLensS3BucketDestinationPtrOutputWithContext(ctx)
}

// StorageLensS3BucketDestinationPtrInput is an input type that accepts StorageLensS3BucketDestinationArgs, StorageLensS3BucketDestinationPtr and StorageLensS3BucketDestinationPtrOutput values.
// You can construct a concrete instance of `StorageLensS3BucketDestinationPtrInput` via:
//
//          StorageLensS3BucketDestinationArgs{...}
//
//  or:
//
//          nil
type StorageLensS3BucketDestinationPtrInput interface {
	pulumi.Input

	ToStorageLensS3BucketDestinationPtrOutput() StorageLensS3BucketDestinationPtrOutput
	ToStorageLensS3BucketDestinationPtrOutputWithContext(context.Context) StorageLensS3BucketDestinationPtrOutput
}

type storageLensS3BucketDestinationPtrType StorageLensS3BucketDestinationArgs

func StorageLensS3BucketDestinationPtr(v *StorageLensS3BucketDestinationArgs) StorageLensS3BucketDestinationPtrInput {
	return (*storageLensS3BucketDestinationPtrType)(v)
}

func (*storageLensS3BucketDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensS3BucketDestination)(nil)).Elem()
}

func (i *storageLensS3BucketDestinationPtrType) ToStorageLensS3BucketDestinationPtrOutput() StorageLensS3BucketDestinationPtrOutput {
	return i.ToStorageLensS3BucketDestinationPtrOutputWithContext(context.Background())
}

func (i *storageLensS3BucketDestinationPtrType) ToStorageLensS3BucketDestinationPtrOutputWithContext(ctx context.Context) StorageLensS3BucketDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensS3BucketDestinationPtrOutput)
}

// S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
type StorageLensS3BucketDestinationOutput struct{ *pulumi.OutputState }

func (StorageLensS3BucketDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensS3BucketDestination)(nil)).Elem()
}

func (o StorageLensS3BucketDestinationOutput) ToStorageLensS3BucketDestinationOutput() StorageLensS3BucketDestinationOutput {
	return o
}

func (o StorageLensS3BucketDestinationOutput) ToStorageLensS3BucketDestinationOutputWithContext(ctx context.Context) StorageLensS3BucketDestinationOutput {
	return o
}

func (o StorageLensS3BucketDestinationOutput) ToStorageLensS3BucketDestinationPtrOutput() StorageLensS3BucketDestinationPtrOutput {
	return o.ToStorageLensS3BucketDestinationPtrOutputWithContext(context.Background())
}

func (o StorageLensS3BucketDestinationOutput) ToStorageLensS3BucketDestinationPtrOutputWithContext(ctx context.Context) StorageLensS3BucketDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensS3BucketDestination) *StorageLensS3BucketDestination {
		return &v
	}).(StorageLensS3BucketDestinationPtrOutput)
}

// The AWS account ID that owns the destination S3 bucket.
func (o StorageLensS3BucketDestinationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v StorageLensS3BucketDestination) string { return v.AccountId }).(pulumi.StringOutput)
}

// The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
func (o StorageLensS3BucketDestinationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v StorageLensS3BucketDestination) string { return v.Arn }).(pulumi.StringOutput)
}

func (o StorageLensS3BucketDestinationOutput) Encryption() StorageLensEncryptionPtrOutput {
	return o.ApplyT(func(v StorageLensS3BucketDestination) *StorageLensEncryption { return v.Encryption }).(StorageLensEncryptionPtrOutput)
}

// Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
func (o StorageLensS3BucketDestinationOutput) Format() StorageLensS3BucketDestinationFormatOutput {
	return o.ApplyT(func(v StorageLensS3BucketDestination) StorageLensS3BucketDestinationFormat { return v.Format }).(StorageLensS3BucketDestinationFormatOutput)
}

// The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
func (o StorageLensS3BucketDestinationOutput) OutputSchemaVersion() StorageLensS3BucketDestinationOutputSchemaVersionOutput {
	return o.ApplyT(func(v StorageLensS3BucketDestination) StorageLensS3BucketDestinationOutputSchemaVersion {
		return v.OutputSchemaVersion
	}).(StorageLensS3BucketDestinationOutputSchemaVersionOutput)
}

// The prefix to use for Amazon S3 Storage Lens export.
func (o StorageLensS3BucketDestinationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageLensS3BucketDestination) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type StorageLensS3BucketDestinationPtrOutput struct{ *pulumi.OutputState }

func (StorageLensS3BucketDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensS3BucketDestination)(nil)).Elem()
}

func (o StorageLensS3BucketDestinationPtrOutput) ToStorageLensS3BucketDestinationPtrOutput() StorageLensS3BucketDestinationPtrOutput {
	return o
}

func (o StorageLensS3BucketDestinationPtrOutput) ToStorageLensS3BucketDestinationPtrOutputWithContext(ctx context.Context) StorageLensS3BucketDestinationPtrOutput {
	return o
}

func (o StorageLensS3BucketDestinationPtrOutput) Elem() StorageLensS3BucketDestinationOutput {
	return o.ApplyT(func(v *StorageLensS3BucketDestination) StorageLensS3BucketDestination {
		if v != nil {
			return *v
		}
		var ret StorageLensS3BucketDestination
		return ret
	}).(StorageLensS3BucketDestinationOutput)
}

// The AWS account ID that owns the destination S3 bucket.
func (o StorageLensS3BucketDestinationPtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageLensS3BucketDestination) *string {
		if v == nil {
			return nil
		}
		return &v.AccountId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
func (o StorageLensS3BucketDestinationPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageLensS3BucketDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

func (o StorageLensS3BucketDestinationPtrOutput) Encryption() StorageLensEncryptionPtrOutput {
	return o.ApplyT(func(v *StorageLensS3BucketDestination) *StorageLensEncryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(StorageLensEncryptionPtrOutput)
}

// Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
func (o StorageLensS3BucketDestinationPtrOutput) Format() StorageLensS3BucketDestinationFormatPtrOutput {
	return o.ApplyT(func(v *StorageLensS3BucketDestination) *StorageLensS3BucketDestinationFormat {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(StorageLensS3BucketDestinationFormatPtrOutput)
}

// The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
func (o StorageLensS3BucketDestinationPtrOutput) OutputSchemaVersion() StorageLensS3BucketDestinationOutputSchemaVersionPtrOutput {
	return o.ApplyT(func(v *StorageLensS3BucketDestination) *StorageLensS3BucketDestinationOutputSchemaVersion {
		if v == nil {
			return nil
		}
		return &v.OutputSchemaVersion
	}).(StorageLensS3BucketDestinationOutputSchemaVersionPtrOutput)
}

// The prefix to use for Amazon S3 Storage Lens export.
func (o StorageLensS3BucketDestinationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageLensS3BucketDestination) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// Selection criteria for prefix-level metrics.
type StorageLensSelectionCriteria struct {
	// Delimiter to divide S3 key into hierarchy of prefixes.
	Delimiter *string `pulumi:"delimiter"`
	// Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
	MaxDepth *int `pulumi:"maxDepth"`
	// The minimum storage bytes threshold for the prefixes to be included in the analysis.
	MinStorageBytesPercentage *float64 `pulumi:"minStorageBytesPercentage"`
}

// StorageLensSelectionCriteriaInput is an input type that accepts StorageLensSelectionCriteriaArgs and StorageLensSelectionCriteriaOutput values.
// You can construct a concrete instance of `StorageLensSelectionCriteriaInput` via:
//
//          StorageLensSelectionCriteriaArgs{...}
type StorageLensSelectionCriteriaInput interface {
	pulumi.Input

	ToStorageLensSelectionCriteriaOutput() StorageLensSelectionCriteriaOutput
	ToStorageLensSelectionCriteriaOutputWithContext(context.Context) StorageLensSelectionCriteriaOutput
}

// Selection criteria for prefix-level metrics.
type StorageLensSelectionCriteriaArgs struct {
	// Delimiter to divide S3 key into hierarchy of prefixes.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
	MaxDepth pulumi.IntPtrInput `pulumi:"maxDepth"`
	// The minimum storage bytes threshold for the prefixes to be included in the analysis.
	MinStorageBytesPercentage pulumi.Float64PtrInput `pulumi:"minStorageBytesPercentage"`
}

func (StorageLensSelectionCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensSelectionCriteria)(nil)).Elem()
}

func (i StorageLensSelectionCriteriaArgs) ToStorageLensSelectionCriteriaOutput() StorageLensSelectionCriteriaOutput {
	return i.ToStorageLensSelectionCriteriaOutputWithContext(context.Background())
}

func (i StorageLensSelectionCriteriaArgs) ToStorageLensSelectionCriteriaOutputWithContext(ctx context.Context) StorageLensSelectionCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensSelectionCriteriaOutput)
}

func (i StorageLensSelectionCriteriaArgs) ToStorageLensSelectionCriteriaPtrOutput() StorageLensSelectionCriteriaPtrOutput {
	return i.ToStorageLensSelectionCriteriaPtrOutputWithContext(context.Background())
}

func (i StorageLensSelectionCriteriaArgs) ToStorageLensSelectionCriteriaPtrOutputWithContext(ctx context.Context) StorageLensSelectionCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensSelectionCriteriaOutput).ToStorageLensSelectionCriteriaPtrOutputWithContext(ctx)
}

// StorageLensSelectionCriteriaPtrInput is an input type that accepts StorageLensSelectionCriteriaArgs, StorageLensSelectionCriteriaPtr and StorageLensSelectionCriteriaPtrOutput values.
// You can construct a concrete instance of `StorageLensSelectionCriteriaPtrInput` via:
//
//          StorageLensSelectionCriteriaArgs{...}
//
//  or:
//
//          nil
type StorageLensSelectionCriteriaPtrInput interface {
	pulumi.Input

	ToStorageLensSelectionCriteriaPtrOutput() StorageLensSelectionCriteriaPtrOutput
	ToStorageLensSelectionCriteriaPtrOutputWithContext(context.Context) StorageLensSelectionCriteriaPtrOutput
}

type storageLensSelectionCriteriaPtrType StorageLensSelectionCriteriaArgs

func StorageLensSelectionCriteriaPtr(v *StorageLensSelectionCriteriaArgs) StorageLensSelectionCriteriaPtrInput {
	return (*storageLensSelectionCriteriaPtrType)(v)
}

func (*storageLensSelectionCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensSelectionCriteria)(nil)).Elem()
}

func (i *storageLensSelectionCriteriaPtrType) ToStorageLensSelectionCriteriaPtrOutput() StorageLensSelectionCriteriaPtrOutput {
	return i.ToStorageLensSelectionCriteriaPtrOutputWithContext(context.Background())
}

func (i *storageLensSelectionCriteriaPtrType) ToStorageLensSelectionCriteriaPtrOutputWithContext(ctx context.Context) StorageLensSelectionCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensSelectionCriteriaPtrOutput)
}

// Selection criteria for prefix-level metrics.
type StorageLensSelectionCriteriaOutput struct{ *pulumi.OutputState }

func (StorageLensSelectionCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensSelectionCriteria)(nil)).Elem()
}

func (o StorageLensSelectionCriteriaOutput) ToStorageLensSelectionCriteriaOutput() StorageLensSelectionCriteriaOutput {
	return o
}

func (o StorageLensSelectionCriteriaOutput) ToStorageLensSelectionCriteriaOutputWithContext(ctx context.Context) StorageLensSelectionCriteriaOutput {
	return o
}

func (o StorageLensSelectionCriteriaOutput) ToStorageLensSelectionCriteriaPtrOutput() StorageLensSelectionCriteriaPtrOutput {
	return o.ToStorageLensSelectionCriteriaPtrOutputWithContext(context.Background())
}

func (o StorageLensSelectionCriteriaOutput) ToStorageLensSelectionCriteriaPtrOutputWithContext(ctx context.Context) StorageLensSelectionCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensSelectionCriteria) *StorageLensSelectionCriteria {
		return &v
	}).(StorageLensSelectionCriteriaPtrOutput)
}

// Delimiter to divide S3 key into hierarchy of prefixes.
func (o StorageLensSelectionCriteriaOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageLensSelectionCriteria) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
func (o StorageLensSelectionCriteriaOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StorageLensSelectionCriteria) *int { return v.MaxDepth }).(pulumi.IntPtrOutput)
}

// The minimum storage bytes threshold for the prefixes to be included in the analysis.
func (o StorageLensSelectionCriteriaOutput) MinStorageBytesPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StorageLensSelectionCriteria) *float64 { return v.MinStorageBytesPercentage }).(pulumi.Float64PtrOutput)
}

type StorageLensSelectionCriteriaPtrOutput struct{ *pulumi.OutputState }

func (StorageLensSelectionCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensSelectionCriteria)(nil)).Elem()
}

func (o StorageLensSelectionCriteriaPtrOutput) ToStorageLensSelectionCriteriaPtrOutput() StorageLensSelectionCriteriaPtrOutput {
	return o
}

func (o StorageLensSelectionCriteriaPtrOutput) ToStorageLensSelectionCriteriaPtrOutputWithContext(ctx context.Context) StorageLensSelectionCriteriaPtrOutput {
	return o
}

func (o StorageLensSelectionCriteriaPtrOutput) Elem() StorageLensSelectionCriteriaOutput {
	return o.ApplyT(func(v *StorageLensSelectionCriteria) StorageLensSelectionCriteria {
		if v != nil {
			return *v
		}
		var ret StorageLensSelectionCriteria
		return ret
	}).(StorageLensSelectionCriteriaOutput)
}

// Delimiter to divide S3 key into hierarchy of prefixes.
func (o StorageLensSelectionCriteriaPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageLensSelectionCriteria) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
func (o StorageLensSelectionCriteriaPtrOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StorageLensSelectionCriteria) *int {
		if v == nil {
			return nil
		}
		return v.MaxDepth
	}).(pulumi.IntPtrOutput)
}

// The minimum storage bytes threshold for the prefixes to be included in the analysis.
func (o StorageLensSelectionCriteriaPtrOutput) MinStorageBytesPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StorageLensSelectionCriteria) *float64 {
		if v == nil {
			return nil
		}
		return v.MinStorageBytesPercentage
	}).(pulumi.Float64PtrOutput)
}

// Specifies the details of Amazon S3 Storage Lens configuration.
type StorageLensStorageLensConfiguration struct {
	AccountLevel StorageLensAccountLevel       `pulumi:"accountLevel"`
	AwsOrg       *StorageLensAwsOrg            `pulumi:"awsOrg"`
	DataExport   *StorageLensDataExport        `pulumi:"dataExport"`
	Exclude      *StorageLensBucketsAndRegions `pulumi:"exclude"`
	Id           string                        `pulumi:"id"`
	Include      *StorageLensBucketsAndRegions `pulumi:"include"`
	// Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The ARN for the Amazon S3 Storage Lens configuration.
	StorageLensArn *string `pulumi:"storageLensArn"`
}

// StorageLensStorageLensConfigurationInput is an input type that accepts StorageLensStorageLensConfigurationArgs and StorageLensStorageLensConfigurationOutput values.
// You can construct a concrete instance of `StorageLensStorageLensConfigurationInput` via:
//
//          StorageLensStorageLensConfigurationArgs{...}
type StorageLensStorageLensConfigurationInput interface {
	pulumi.Input

	ToStorageLensStorageLensConfigurationOutput() StorageLensStorageLensConfigurationOutput
	ToStorageLensStorageLensConfigurationOutputWithContext(context.Context) StorageLensStorageLensConfigurationOutput
}

// Specifies the details of Amazon S3 Storage Lens configuration.
type StorageLensStorageLensConfigurationArgs struct {
	AccountLevel StorageLensAccountLevelInput         `pulumi:"accountLevel"`
	AwsOrg       StorageLensAwsOrgPtrInput            `pulumi:"awsOrg"`
	DataExport   StorageLensDataExportPtrInput        `pulumi:"dataExport"`
	Exclude      StorageLensBucketsAndRegionsPtrInput `pulumi:"exclude"`
	Id           pulumi.StringInput                   `pulumi:"id"`
	Include      StorageLensBucketsAndRegionsPtrInput `pulumi:"include"`
	// Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The ARN for the Amazon S3 Storage Lens configuration.
	StorageLensArn pulumi.StringPtrInput `pulumi:"storageLensArn"`
}

func (StorageLensStorageLensConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensStorageLensConfiguration)(nil)).Elem()
}

func (i StorageLensStorageLensConfigurationArgs) ToStorageLensStorageLensConfigurationOutput() StorageLensStorageLensConfigurationOutput {
	return i.ToStorageLensStorageLensConfigurationOutputWithContext(context.Background())
}

func (i StorageLensStorageLensConfigurationArgs) ToStorageLensStorageLensConfigurationOutputWithContext(ctx context.Context) StorageLensStorageLensConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensStorageLensConfigurationOutput)
}

func (i StorageLensStorageLensConfigurationArgs) ToStorageLensStorageLensConfigurationPtrOutput() StorageLensStorageLensConfigurationPtrOutput {
	return i.ToStorageLensStorageLensConfigurationPtrOutputWithContext(context.Background())
}

func (i StorageLensStorageLensConfigurationArgs) ToStorageLensStorageLensConfigurationPtrOutputWithContext(ctx context.Context) StorageLensStorageLensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensStorageLensConfigurationOutput).ToStorageLensStorageLensConfigurationPtrOutputWithContext(ctx)
}

// StorageLensStorageLensConfigurationPtrInput is an input type that accepts StorageLensStorageLensConfigurationArgs, StorageLensStorageLensConfigurationPtr and StorageLensStorageLensConfigurationPtrOutput values.
// You can construct a concrete instance of `StorageLensStorageLensConfigurationPtrInput` via:
//
//          StorageLensStorageLensConfigurationArgs{...}
//
//  or:
//
//          nil
type StorageLensStorageLensConfigurationPtrInput interface {
	pulumi.Input

	ToStorageLensStorageLensConfigurationPtrOutput() StorageLensStorageLensConfigurationPtrOutput
	ToStorageLensStorageLensConfigurationPtrOutputWithContext(context.Context) StorageLensStorageLensConfigurationPtrOutput
}

type storageLensStorageLensConfigurationPtrType StorageLensStorageLensConfigurationArgs

func StorageLensStorageLensConfigurationPtr(v *StorageLensStorageLensConfigurationArgs) StorageLensStorageLensConfigurationPtrInput {
	return (*storageLensStorageLensConfigurationPtrType)(v)
}

func (*storageLensStorageLensConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensStorageLensConfiguration)(nil)).Elem()
}

func (i *storageLensStorageLensConfigurationPtrType) ToStorageLensStorageLensConfigurationPtrOutput() StorageLensStorageLensConfigurationPtrOutput {
	return i.ToStorageLensStorageLensConfigurationPtrOutputWithContext(context.Background())
}

func (i *storageLensStorageLensConfigurationPtrType) ToStorageLensStorageLensConfigurationPtrOutputWithContext(ctx context.Context) StorageLensStorageLensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensStorageLensConfigurationPtrOutput)
}

// Specifies the details of Amazon S3 Storage Lens configuration.
type StorageLensStorageLensConfigurationOutput struct{ *pulumi.OutputState }

func (StorageLensStorageLensConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensStorageLensConfiguration)(nil)).Elem()
}

func (o StorageLensStorageLensConfigurationOutput) ToStorageLensStorageLensConfigurationOutput() StorageLensStorageLensConfigurationOutput {
	return o
}

func (o StorageLensStorageLensConfigurationOutput) ToStorageLensStorageLensConfigurationOutputWithContext(ctx context.Context) StorageLensStorageLensConfigurationOutput {
	return o
}

func (o StorageLensStorageLensConfigurationOutput) ToStorageLensStorageLensConfigurationPtrOutput() StorageLensStorageLensConfigurationPtrOutput {
	return o.ToStorageLensStorageLensConfigurationPtrOutputWithContext(context.Background())
}

func (o StorageLensStorageLensConfigurationOutput) ToStorageLensStorageLensConfigurationPtrOutputWithContext(ctx context.Context) StorageLensStorageLensConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageLensStorageLensConfiguration) *StorageLensStorageLensConfiguration {
		return &v
	}).(StorageLensStorageLensConfigurationPtrOutput)
}

func (o StorageLensStorageLensConfigurationOutput) AccountLevel() StorageLensAccountLevelOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) StorageLensAccountLevel { return v.AccountLevel }).(StorageLensAccountLevelOutput)
}

func (o StorageLensStorageLensConfigurationOutput) AwsOrg() StorageLensAwsOrgPtrOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) *StorageLensAwsOrg { return v.AwsOrg }).(StorageLensAwsOrgPtrOutput)
}

func (o StorageLensStorageLensConfigurationOutput) DataExport() StorageLensDataExportPtrOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) *StorageLensDataExport { return v.DataExport }).(StorageLensDataExportPtrOutput)
}

func (o StorageLensStorageLensConfigurationOutput) Exclude() StorageLensBucketsAndRegionsPtrOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) *StorageLensBucketsAndRegions { return v.Exclude }).(StorageLensBucketsAndRegionsPtrOutput)
}

func (o StorageLensStorageLensConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

func (o StorageLensStorageLensConfigurationOutput) Include() StorageLensBucketsAndRegionsPtrOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) *StorageLensBucketsAndRegions { return v.Include }).(StorageLensBucketsAndRegionsPtrOutput)
}

// Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
func (o StorageLensStorageLensConfigurationOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The ARN for the Amazon S3 Storage Lens configuration.
func (o StorageLensStorageLensConfigurationOutput) StorageLensArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageLensStorageLensConfiguration) *string { return v.StorageLensArn }).(pulumi.StringPtrOutput)
}

type StorageLensStorageLensConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StorageLensStorageLensConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageLensStorageLensConfiguration)(nil)).Elem()
}

func (o StorageLensStorageLensConfigurationPtrOutput) ToStorageLensStorageLensConfigurationPtrOutput() StorageLensStorageLensConfigurationPtrOutput {
	return o
}

func (o StorageLensStorageLensConfigurationPtrOutput) ToStorageLensStorageLensConfigurationPtrOutputWithContext(ctx context.Context) StorageLensStorageLensConfigurationPtrOutput {
	return o
}

func (o StorageLensStorageLensConfigurationPtrOutput) Elem() StorageLensStorageLensConfigurationOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) StorageLensStorageLensConfiguration {
		if v != nil {
			return *v
		}
		var ret StorageLensStorageLensConfiguration
		return ret
	}).(StorageLensStorageLensConfigurationOutput)
}

func (o StorageLensStorageLensConfigurationPtrOutput) AccountLevel() StorageLensAccountLevelPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *StorageLensAccountLevel {
		if v == nil {
			return nil
		}
		return &v.AccountLevel
	}).(StorageLensAccountLevelPtrOutput)
}

func (o StorageLensStorageLensConfigurationPtrOutput) AwsOrg() StorageLensAwsOrgPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *StorageLensAwsOrg {
		if v == nil {
			return nil
		}
		return v.AwsOrg
	}).(StorageLensAwsOrgPtrOutput)
}

func (o StorageLensStorageLensConfigurationPtrOutput) DataExport() StorageLensDataExportPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *StorageLensDataExport {
		if v == nil {
			return nil
		}
		return v.DataExport
	}).(StorageLensDataExportPtrOutput)
}

func (o StorageLensStorageLensConfigurationPtrOutput) Exclude() StorageLensBucketsAndRegionsPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *StorageLensBucketsAndRegions {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(StorageLensBucketsAndRegionsPtrOutput)
}

func (o StorageLensStorageLensConfigurationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o StorageLensStorageLensConfigurationPtrOutput) Include() StorageLensBucketsAndRegionsPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *StorageLensBucketsAndRegions {
		if v == nil {
			return nil
		}
		return v.Include
	}).(StorageLensBucketsAndRegionsPtrOutput)
}

// Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
func (o StorageLensStorageLensConfigurationPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The ARN for the Amazon S3 Storage Lens configuration.
func (o StorageLensStorageLensConfigurationPtrOutput) StorageLensArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageLensStorageLensConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.StorageLensArn
	}).(pulumi.StringPtrOutput)
}

type StorageLensTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// StorageLensTagInput is an input type that accepts StorageLensTagArgs and StorageLensTagOutput values.
// You can construct a concrete instance of `StorageLensTagInput` via:
//
//          StorageLensTagArgs{...}
type StorageLensTagInput interface {
	pulumi.Input

	ToStorageLensTagOutput() StorageLensTagOutput
	ToStorageLensTagOutputWithContext(context.Context) StorageLensTagOutput
}

type StorageLensTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (StorageLensTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensTag)(nil)).Elem()
}

func (i StorageLensTagArgs) ToStorageLensTagOutput() StorageLensTagOutput {
	return i.ToStorageLensTagOutputWithContext(context.Background())
}

func (i StorageLensTagArgs) ToStorageLensTagOutputWithContext(ctx context.Context) StorageLensTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensTagOutput)
}

// StorageLensTagArrayInput is an input type that accepts StorageLensTagArray and StorageLensTagArrayOutput values.
// You can construct a concrete instance of `StorageLensTagArrayInput` via:
//
//          StorageLensTagArray{ StorageLensTagArgs{...} }
type StorageLensTagArrayInput interface {
	pulumi.Input

	ToStorageLensTagArrayOutput() StorageLensTagArrayOutput
	ToStorageLensTagArrayOutputWithContext(context.Context) StorageLensTagArrayOutput
}

type StorageLensTagArray []StorageLensTagInput

func (StorageLensTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageLensTag)(nil)).Elem()
}

func (i StorageLensTagArray) ToStorageLensTagArrayOutput() StorageLensTagArrayOutput {
	return i.ToStorageLensTagArrayOutputWithContext(context.Background())
}

func (i StorageLensTagArray) ToStorageLensTagArrayOutputWithContext(ctx context.Context) StorageLensTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageLensTagArrayOutput)
}

type StorageLensTagOutput struct{ *pulumi.OutputState }

func (StorageLensTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageLensTag)(nil)).Elem()
}

func (o StorageLensTagOutput) ToStorageLensTagOutput() StorageLensTagOutput {
	return o
}

func (o StorageLensTagOutput) ToStorageLensTagOutputWithContext(ctx context.Context) StorageLensTagOutput {
	return o
}

func (o StorageLensTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StorageLensTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o StorageLensTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StorageLensTag) string { return v.Value }).(pulumi.StringOutput)
}

type StorageLensTagArrayOutput struct{ *pulumi.OutputState }

func (StorageLensTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageLensTag)(nil)).Elem()
}

func (o StorageLensTagArrayOutput) ToStorageLensTagArrayOutput() StorageLensTagArrayOutput {
	return o
}

func (o StorageLensTagArrayOutput) ToStorageLensTagArrayOutputWithContext(ctx context.Context) StorageLensTagArrayOutput {
	return o
}

func (o StorageLensTagArrayOutput) Index(i pulumi.IntInput) StorageLensTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageLensTag {
		return vs[0].([]StorageLensTag)[vs[1].(int)]
	}).(StorageLensTagOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessPointPublicAccessBlockConfigurationOutput{})
	pulumi.RegisterOutputType(AccessPointPublicAccessBlockConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AccessPointVpcConfigurationOutput{})
	pulumi.RegisterOutputType(AccessPointVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(MultiRegionAccessPointPublicAccessBlockConfigurationOutput{})
	pulumi.RegisterOutputType(MultiRegionAccessPointPublicAccessBlockConfigurationPtrOutput{})
	pulumi.RegisterOutputType(MultiRegionAccessPointRegionOutput{})
	pulumi.RegisterOutputType(MultiRegionAccessPointRegionArrayOutput{})
	pulumi.RegisterOutputType(StorageLensAccountLevelOutput{})
	pulumi.RegisterOutputType(StorageLensAccountLevelPtrOutput{})
	pulumi.RegisterOutputType(StorageLensActivityMetricsOutput{})
	pulumi.RegisterOutputType(StorageLensActivityMetricsPtrOutput{})
	pulumi.RegisterOutputType(StorageLensAwsOrgOutput{})
	pulumi.RegisterOutputType(StorageLensAwsOrgPtrOutput{})
	pulumi.RegisterOutputType(StorageLensBucketLevelOutput{})
	pulumi.RegisterOutputType(StorageLensBucketLevelPtrOutput{})
	pulumi.RegisterOutputType(StorageLensBucketsAndRegionsOutput{})
	pulumi.RegisterOutputType(StorageLensBucketsAndRegionsPtrOutput{})
	pulumi.RegisterOutputType(StorageLensDataExportOutput{})
	pulumi.RegisterOutputType(StorageLensDataExportPtrOutput{})
	pulumi.RegisterOutputType(StorageLensEncryptionOutput{})
	pulumi.RegisterOutputType(StorageLensEncryptionPtrOutput{})
	pulumi.RegisterOutputType(StorageLensPrefixLevelOutput{})
	pulumi.RegisterOutputType(StorageLensPrefixLevelPtrOutput{})
	pulumi.RegisterOutputType(StorageLensPrefixLevelStorageMetricsOutput{})
	pulumi.RegisterOutputType(StorageLensPrefixLevelStorageMetricsPtrOutput{})
	pulumi.RegisterOutputType(StorageLensS3BucketDestinationOutput{})
	pulumi.RegisterOutputType(StorageLensS3BucketDestinationPtrOutput{})
	pulumi.RegisterOutputType(StorageLensSelectionCriteriaOutput{})
	pulumi.RegisterOutputType(StorageLensSelectionCriteriaPtrOutput{})
	pulumi.RegisterOutputType(StorageLensStorageLensConfigurationOutput{})
	pulumi.RegisterOutputType(StorageLensStorageLensConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StorageLensTagOutput{})
	pulumi.RegisterOutputType(StorageLensTagArrayOutput{})
}
