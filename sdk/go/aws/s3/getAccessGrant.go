// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::S3::AccessGrant resource is an Amazon S3 resource type representing permissions to a specific S3 bucket or prefix hosted in an S3 Access Grants instance.
func LookupAccessGrant(ctx *pulumi.Context, args *LookupAccessGrantArgs, opts ...pulumi.InvokeOption) (*LookupAccessGrantResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessGrantResult
	err := ctx.Invoke("aws-native:s3:getAccessGrant", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAccessGrantArgs struct {
	// The ID assigned to this access grant.
	AccessGrantId string `pulumi:"accessGrantId"`
}

type LookupAccessGrantResult struct {
	// The Amazon Resource Name (ARN) of the specified access grant.
	AccessGrantArn *string `pulumi:"accessGrantArn"`
	// The ID assigned to this access grant.
	AccessGrantId *string `pulumi:"accessGrantId"`
	// The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
	AccessGrantsLocationConfiguration *AccessGrantsLocationConfiguration `pulumi:"accessGrantsLocationConfiguration"`
	// The custom S3 location to be accessed by the grantee
	AccessGrantsLocationId *string `pulumi:"accessGrantsLocationId"`
	// The ARN of the application grantees will use to access the location
	ApplicationArn *string `pulumi:"applicationArn"`
	// The S3 path of the data to which you are granting access. It is a combination of the S3 path of the registered location and the subprefix.
	GrantScope *string `pulumi:"grantScope"`
	// The principal who will be granted permission to access S3.
	Grantee *AccessGrantGrantee `pulumi:"grantee"`
	// The level of access to be afforded to the grantee
	Permission *AccessGrantPermission `pulumi:"permission"`
}

func LookupAccessGrantOutput(ctx *pulumi.Context, args LookupAccessGrantOutputArgs, opts ...pulumi.InvokeOption) LookupAccessGrantResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessGrantResult, error) {
			args := v.(LookupAccessGrantArgs)
			r, err := LookupAccessGrant(ctx, &args, opts...)
			var s LookupAccessGrantResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessGrantResultOutput)
}

type LookupAccessGrantOutputArgs struct {
	// The ID assigned to this access grant.
	AccessGrantId pulumi.StringInput `pulumi:"accessGrantId"`
}

func (LookupAccessGrantOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGrantArgs)(nil)).Elem()
}

type LookupAccessGrantResultOutput struct{ *pulumi.OutputState }

func (LookupAccessGrantResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessGrantResult)(nil)).Elem()
}

func (o LookupAccessGrantResultOutput) ToLookupAccessGrantResultOutput() LookupAccessGrantResultOutput {
	return o
}

func (o LookupAccessGrantResultOutput) ToLookupAccessGrantResultOutputWithContext(ctx context.Context) LookupAccessGrantResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the specified access grant.
func (o LookupAccessGrantResultOutput) AccessGrantArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *string { return v.AccessGrantArn }).(pulumi.StringPtrOutput)
}

// The ID assigned to this access grant.
func (o LookupAccessGrantResultOutput) AccessGrantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *string { return v.AccessGrantId }).(pulumi.StringPtrOutput)
}

// The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
func (o LookupAccessGrantResultOutput) AccessGrantsLocationConfiguration() AccessGrantsLocationConfigurationPtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *AccessGrantsLocationConfiguration {
		return v.AccessGrantsLocationConfiguration
	}).(AccessGrantsLocationConfigurationPtrOutput)
}

// The custom S3 location to be accessed by the grantee
func (o LookupAccessGrantResultOutput) AccessGrantsLocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *string { return v.AccessGrantsLocationId }).(pulumi.StringPtrOutput)
}

// The ARN of the application grantees will use to access the location
func (o LookupAccessGrantResultOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *string { return v.ApplicationArn }).(pulumi.StringPtrOutput)
}

// The S3 path of the data to which you are granting access. It is a combination of the S3 path of the registered location and the subprefix.
func (o LookupAccessGrantResultOutput) GrantScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *string { return v.GrantScope }).(pulumi.StringPtrOutput)
}

// The principal who will be granted permission to access S3.
func (o LookupAccessGrantResultOutput) Grantee() AccessGrantGranteePtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *AccessGrantGrantee { return v.Grantee }).(AccessGrantGranteePtrOutput)
}

// The level of access to be afforded to the grantee
func (o LookupAccessGrantResultOutput) Permission() AccessGrantPermissionPtrOutput {
	return o.ApplyT(func(v LookupAccessGrantResult) *AccessGrantPermission { return v.Permission }).(AccessGrantPermissionPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessGrantResultOutput{})
}
