// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appintegrations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventIntegrationAssociation struct {
	// The metadata associated with the client.
	ClientAssociationMetadata []EventIntegrationMetadata `pulumi:"clientAssociationMetadata"`
	// The identifier for the client that is associated with the event integration.
	ClientId *string `pulumi:"clientId"`
	// The name of the Eventbridge rule.
	EventBridgeRuleName *string `pulumi:"eventBridgeRuleName"`
	// The Amazon Resource Name (ARN) for the event integration association.
	EventIntegrationAssociationArn *string `pulumi:"eventIntegrationAssociationArn"`
	// The identifier for the event integration association.
	EventIntegrationAssociationId *string `pulumi:"eventIntegrationAssociationId"`
}

// EventIntegrationAssociationInput is an input type that accepts EventIntegrationAssociationArgs and EventIntegrationAssociationOutput values.
// You can construct a concrete instance of `EventIntegrationAssociationInput` via:
//
//          EventIntegrationAssociationArgs{...}
type EventIntegrationAssociationInput interface {
	pulumi.Input

	ToEventIntegrationAssociationOutput() EventIntegrationAssociationOutput
	ToEventIntegrationAssociationOutputWithContext(context.Context) EventIntegrationAssociationOutput
}

type EventIntegrationAssociationArgs struct {
	// The metadata associated with the client.
	ClientAssociationMetadata EventIntegrationMetadataArrayInput `pulumi:"clientAssociationMetadata"`
	// The identifier for the client that is associated with the event integration.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The name of the Eventbridge rule.
	EventBridgeRuleName pulumi.StringPtrInput `pulumi:"eventBridgeRuleName"`
	// The Amazon Resource Name (ARN) for the event integration association.
	EventIntegrationAssociationArn pulumi.StringPtrInput `pulumi:"eventIntegrationAssociationArn"`
	// The identifier for the event integration association.
	EventIntegrationAssociationId pulumi.StringPtrInput `pulumi:"eventIntegrationAssociationId"`
}

func (EventIntegrationAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationAssociation)(nil)).Elem()
}

func (i EventIntegrationAssociationArgs) ToEventIntegrationAssociationOutput() EventIntegrationAssociationOutput {
	return i.ToEventIntegrationAssociationOutputWithContext(context.Background())
}

func (i EventIntegrationAssociationArgs) ToEventIntegrationAssociationOutputWithContext(ctx context.Context) EventIntegrationAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationAssociationOutput)
}

// EventIntegrationAssociationArrayInput is an input type that accepts EventIntegrationAssociationArray and EventIntegrationAssociationArrayOutput values.
// You can construct a concrete instance of `EventIntegrationAssociationArrayInput` via:
//
//          EventIntegrationAssociationArray{ EventIntegrationAssociationArgs{...} }
type EventIntegrationAssociationArrayInput interface {
	pulumi.Input

	ToEventIntegrationAssociationArrayOutput() EventIntegrationAssociationArrayOutput
	ToEventIntegrationAssociationArrayOutputWithContext(context.Context) EventIntegrationAssociationArrayOutput
}

type EventIntegrationAssociationArray []EventIntegrationAssociationInput

func (EventIntegrationAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventIntegrationAssociation)(nil)).Elem()
}

func (i EventIntegrationAssociationArray) ToEventIntegrationAssociationArrayOutput() EventIntegrationAssociationArrayOutput {
	return i.ToEventIntegrationAssociationArrayOutputWithContext(context.Background())
}

func (i EventIntegrationAssociationArray) ToEventIntegrationAssociationArrayOutputWithContext(ctx context.Context) EventIntegrationAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationAssociationArrayOutput)
}

type EventIntegrationAssociationOutput struct{ *pulumi.OutputState }

func (EventIntegrationAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationAssociation)(nil)).Elem()
}

func (o EventIntegrationAssociationOutput) ToEventIntegrationAssociationOutput() EventIntegrationAssociationOutput {
	return o
}

func (o EventIntegrationAssociationOutput) ToEventIntegrationAssociationOutputWithContext(ctx context.Context) EventIntegrationAssociationOutput {
	return o
}

// The metadata associated with the client.
func (o EventIntegrationAssociationOutput) ClientAssociationMetadata() EventIntegrationMetadataArrayOutput {
	return o.ApplyT(func(v EventIntegrationAssociation) []EventIntegrationMetadata { return v.ClientAssociationMetadata }).(EventIntegrationMetadataArrayOutput)
}

// The identifier for the client that is associated with the event integration.
func (o EventIntegrationAssociationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventIntegrationAssociation) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The name of the Eventbridge rule.
func (o EventIntegrationAssociationOutput) EventBridgeRuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventIntegrationAssociation) *string { return v.EventBridgeRuleName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the event integration association.
func (o EventIntegrationAssociationOutput) EventIntegrationAssociationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventIntegrationAssociation) *string { return v.EventIntegrationAssociationArn }).(pulumi.StringPtrOutput)
}

// The identifier for the event integration association.
func (o EventIntegrationAssociationOutput) EventIntegrationAssociationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventIntegrationAssociation) *string { return v.EventIntegrationAssociationId }).(pulumi.StringPtrOutput)
}

type EventIntegrationAssociationArrayOutput struct{ *pulumi.OutputState }

func (EventIntegrationAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventIntegrationAssociation)(nil)).Elem()
}

func (o EventIntegrationAssociationArrayOutput) ToEventIntegrationAssociationArrayOutput() EventIntegrationAssociationArrayOutput {
	return o
}

func (o EventIntegrationAssociationArrayOutput) ToEventIntegrationAssociationArrayOutputWithContext(ctx context.Context) EventIntegrationAssociationArrayOutput {
	return o
}

func (o EventIntegrationAssociationArrayOutput) Index(i pulumi.IntInput) EventIntegrationAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventIntegrationAssociation {
		return vs[0].([]EventIntegrationAssociation)[vs[1].(int)]
	}).(EventIntegrationAssociationOutput)
}

type EventIntegrationEventFilter struct {
	// The source of the events.
	Source string `pulumi:"source"`
}

// EventIntegrationEventFilterInput is an input type that accepts EventIntegrationEventFilterArgs and EventIntegrationEventFilterOutput values.
// You can construct a concrete instance of `EventIntegrationEventFilterInput` via:
//
//          EventIntegrationEventFilterArgs{...}
type EventIntegrationEventFilterInput interface {
	pulumi.Input

	ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput
	ToEventIntegrationEventFilterOutputWithContext(context.Context) EventIntegrationEventFilterOutput
}

type EventIntegrationEventFilterArgs struct {
	// The source of the events.
	Source pulumi.StringInput `pulumi:"source"`
}

func (EventIntegrationEventFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationEventFilter)(nil)).Elem()
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput {
	return i.ToEventIntegrationEventFilterOutputWithContext(context.Background())
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterOutputWithContext(ctx context.Context) EventIntegrationEventFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationEventFilterOutput)
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return i.ToEventIntegrationEventFilterPtrOutputWithContext(context.Background())
}

func (i EventIntegrationEventFilterArgs) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationEventFilterOutput).ToEventIntegrationEventFilterPtrOutputWithContext(ctx)
}

// EventIntegrationEventFilterPtrInput is an input type that accepts EventIntegrationEventFilterArgs, EventIntegrationEventFilterPtr and EventIntegrationEventFilterPtrOutput values.
// You can construct a concrete instance of `EventIntegrationEventFilterPtrInput` via:
//
//          EventIntegrationEventFilterArgs{...}
//
//  or:
//
//          nil
type EventIntegrationEventFilterPtrInput interface {
	pulumi.Input

	ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput
	ToEventIntegrationEventFilterPtrOutputWithContext(context.Context) EventIntegrationEventFilterPtrOutput
}

type eventIntegrationEventFilterPtrType EventIntegrationEventFilterArgs

func EventIntegrationEventFilterPtr(v *EventIntegrationEventFilterArgs) EventIntegrationEventFilterPtrInput {
	return (*eventIntegrationEventFilterPtrType)(v)
}

func (*eventIntegrationEventFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventIntegrationEventFilter)(nil)).Elem()
}

func (i *eventIntegrationEventFilterPtrType) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return i.ToEventIntegrationEventFilterPtrOutputWithContext(context.Background())
}

func (i *eventIntegrationEventFilterPtrType) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationEventFilterPtrOutput)
}

type EventIntegrationEventFilterOutput struct{ *pulumi.OutputState }

func (EventIntegrationEventFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationEventFilter)(nil)).Elem()
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterOutput() EventIntegrationEventFilterOutput {
	return o
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterOutputWithContext(ctx context.Context) EventIntegrationEventFilterOutput {
	return o
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return o.ToEventIntegrationEventFilterPtrOutputWithContext(context.Background())
}

func (o EventIntegrationEventFilterOutput) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventIntegrationEventFilter) *EventIntegrationEventFilter {
		return &v
	}).(EventIntegrationEventFilterPtrOutput)
}

// The source of the events.
func (o EventIntegrationEventFilterOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v EventIntegrationEventFilter) string { return v.Source }).(pulumi.StringOutput)
}

type EventIntegrationEventFilterPtrOutput struct{ *pulumi.OutputState }

func (EventIntegrationEventFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventIntegrationEventFilter)(nil)).Elem()
}

func (o EventIntegrationEventFilterPtrOutput) ToEventIntegrationEventFilterPtrOutput() EventIntegrationEventFilterPtrOutput {
	return o
}

func (o EventIntegrationEventFilterPtrOutput) ToEventIntegrationEventFilterPtrOutputWithContext(ctx context.Context) EventIntegrationEventFilterPtrOutput {
	return o
}

func (o EventIntegrationEventFilterPtrOutput) Elem() EventIntegrationEventFilterOutput {
	return o.ApplyT(func(v *EventIntegrationEventFilter) EventIntegrationEventFilter {
		if v != nil {
			return *v
		}
		var ret EventIntegrationEventFilter
		return ret
	}).(EventIntegrationEventFilterOutput)
}

// The source of the events.
func (o EventIntegrationEventFilterPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventIntegrationEventFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

type EventIntegrationMetadata struct {
	// A key to identify the metadata.
	Key string `pulumi:"key"`
	// Corresponding metadata value for the key.
	Value string `pulumi:"value"`
}

// EventIntegrationMetadataInput is an input type that accepts EventIntegrationMetadataArgs and EventIntegrationMetadataOutput values.
// You can construct a concrete instance of `EventIntegrationMetadataInput` via:
//
//          EventIntegrationMetadataArgs{...}
type EventIntegrationMetadataInput interface {
	pulumi.Input

	ToEventIntegrationMetadataOutput() EventIntegrationMetadataOutput
	ToEventIntegrationMetadataOutputWithContext(context.Context) EventIntegrationMetadataOutput
}

type EventIntegrationMetadataArgs struct {
	// A key to identify the metadata.
	Key pulumi.StringInput `pulumi:"key"`
	// Corresponding metadata value for the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventIntegrationMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationMetadata)(nil)).Elem()
}

func (i EventIntegrationMetadataArgs) ToEventIntegrationMetadataOutput() EventIntegrationMetadataOutput {
	return i.ToEventIntegrationMetadataOutputWithContext(context.Background())
}

func (i EventIntegrationMetadataArgs) ToEventIntegrationMetadataOutputWithContext(ctx context.Context) EventIntegrationMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationMetadataOutput)
}

// EventIntegrationMetadataArrayInput is an input type that accepts EventIntegrationMetadataArray and EventIntegrationMetadataArrayOutput values.
// You can construct a concrete instance of `EventIntegrationMetadataArrayInput` via:
//
//          EventIntegrationMetadataArray{ EventIntegrationMetadataArgs{...} }
type EventIntegrationMetadataArrayInput interface {
	pulumi.Input

	ToEventIntegrationMetadataArrayOutput() EventIntegrationMetadataArrayOutput
	ToEventIntegrationMetadataArrayOutputWithContext(context.Context) EventIntegrationMetadataArrayOutput
}

type EventIntegrationMetadataArray []EventIntegrationMetadataInput

func (EventIntegrationMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventIntegrationMetadata)(nil)).Elem()
}

func (i EventIntegrationMetadataArray) ToEventIntegrationMetadataArrayOutput() EventIntegrationMetadataArrayOutput {
	return i.ToEventIntegrationMetadataArrayOutputWithContext(context.Background())
}

func (i EventIntegrationMetadataArray) ToEventIntegrationMetadataArrayOutputWithContext(ctx context.Context) EventIntegrationMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationMetadataArrayOutput)
}

type EventIntegrationMetadataOutput struct{ *pulumi.OutputState }

func (EventIntegrationMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationMetadata)(nil)).Elem()
}

func (o EventIntegrationMetadataOutput) ToEventIntegrationMetadataOutput() EventIntegrationMetadataOutput {
	return o
}

func (o EventIntegrationMetadataOutput) ToEventIntegrationMetadataOutputWithContext(ctx context.Context) EventIntegrationMetadataOutput {
	return o
}

// A key to identify the metadata.
func (o EventIntegrationMetadataOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventIntegrationMetadata) string { return v.Key }).(pulumi.StringOutput)
}

// Corresponding metadata value for the key.
func (o EventIntegrationMetadataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventIntegrationMetadata) string { return v.Value }).(pulumi.StringOutput)
}

type EventIntegrationMetadataArrayOutput struct{ *pulumi.OutputState }

func (EventIntegrationMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventIntegrationMetadata)(nil)).Elem()
}

func (o EventIntegrationMetadataArrayOutput) ToEventIntegrationMetadataArrayOutput() EventIntegrationMetadataArrayOutput {
	return o
}

func (o EventIntegrationMetadataArrayOutput) ToEventIntegrationMetadataArrayOutputWithContext(ctx context.Context) EventIntegrationMetadataArrayOutput {
	return o
}

func (o EventIntegrationMetadataArrayOutput) Index(i pulumi.IntInput) EventIntegrationMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventIntegrationMetadata {
		return vs[0].([]EventIntegrationMetadata)[vs[1].(int)]
	}).(EventIntegrationMetadataOutput)
}

type EventIntegrationTag struct {
	// A key to identify the tag.
	Key string `pulumi:"key"`
	// Corresponding tag value for the key.
	Value string `pulumi:"value"`
}

// EventIntegrationTagInput is an input type that accepts EventIntegrationTagArgs and EventIntegrationTagOutput values.
// You can construct a concrete instance of `EventIntegrationTagInput` via:
//
//          EventIntegrationTagArgs{...}
type EventIntegrationTagInput interface {
	pulumi.Input

	ToEventIntegrationTagOutput() EventIntegrationTagOutput
	ToEventIntegrationTagOutputWithContext(context.Context) EventIntegrationTagOutput
}

type EventIntegrationTagArgs struct {
	// A key to identify the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// Corresponding tag value for the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventIntegrationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationTag)(nil)).Elem()
}

func (i EventIntegrationTagArgs) ToEventIntegrationTagOutput() EventIntegrationTagOutput {
	return i.ToEventIntegrationTagOutputWithContext(context.Background())
}

func (i EventIntegrationTagArgs) ToEventIntegrationTagOutputWithContext(ctx context.Context) EventIntegrationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationTagOutput)
}

// EventIntegrationTagArrayInput is an input type that accepts EventIntegrationTagArray and EventIntegrationTagArrayOutput values.
// You can construct a concrete instance of `EventIntegrationTagArrayInput` via:
//
//          EventIntegrationTagArray{ EventIntegrationTagArgs{...} }
type EventIntegrationTagArrayInput interface {
	pulumi.Input

	ToEventIntegrationTagArrayOutput() EventIntegrationTagArrayOutput
	ToEventIntegrationTagArrayOutputWithContext(context.Context) EventIntegrationTagArrayOutput
}

type EventIntegrationTagArray []EventIntegrationTagInput

func (EventIntegrationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventIntegrationTag)(nil)).Elem()
}

func (i EventIntegrationTagArray) ToEventIntegrationTagArrayOutput() EventIntegrationTagArrayOutput {
	return i.ToEventIntegrationTagArrayOutputWithContext(context.Background())
}

func (i EventIntegrationTagArray) ToEventIntegrationTagArrayOutputWithContext(ctx context.Context) EventIntegrationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventIntegrationTagArrayOutput)
}

type EventIntegrationTagOutput struct{ *pulumi.OutputState }

func (EventIntegrationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventIntegrationTag)(nil)).Elem()
}

func (o EventIntegrationTagOutput) ToEventIntegrationTagOutput() EventIntegrationTagOutput {
	return o
}

func (o EventIntegrationTagOutput) ToEventIntegrationTagOutputWithContext(ctx context.Context) EventIntegrationTagOutput {
	return o
}

// A key to identify the tag.
func (o EventIntegrationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventIntegrationTag) string { return v.Key }).(pulumi.StringOutput)
}

// Corresponding tag value for the key.
func (o EventIntegrationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventIntegrationTag) string { return v.Value }).(pulumi.StringOutput)
}

type EventIntegrationTagArrayOutput struct{ *pulumi.OutputState }

func (EventIntegrationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventIntegrationTag)(nil)).Elem()
}

func (o EventIntegrationTagArrayOutput) ToEventIntegrationTagArrayOutput() EventIntegrationTagArrayOutput {
	return o
}

func (o EventIntegrationTagArrayOutput) ToEventIntegrationTagArrayOutputWithContext(ctx context.Context) EventIntegrationTagArrayOutput {
	return o
}

func (o EventIntegrationTagArrayOutput) Index(i pulumi.IntInput) EventIntegrationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventIntegrationTag {
		return vs[0].([]EventIntegrationTag)[vs[1].(int)]
	}).(EventIntegrationTagOutput)
}

func init() {
	pulumi.RegisterOutputType(EventIntegrationAssociationOutput{})
	pulumi.RegisterOutputType(EventIntegrationAssociationArrayOutput{})
	pulumi.RegisterOutputType(EventIntegrationEventFilterOutput{})
	pulumi.RegisterOutputType(EventIntegrationEventFilterPtrOutput{})
	pulumi.RegisterOutputType(EventIntegrationMetadataOutput{})
	pulumi.RegisterOutputType(EventIntegrationMetadataArrayOutput{})
	pulumi.RegisterOutputType(EventIntegrationTagOutput{})
	pulumi.RegisterOutputType(EventIntegrationTagArrayOutput{})
}
