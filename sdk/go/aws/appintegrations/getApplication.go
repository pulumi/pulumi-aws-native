// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appintegrations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS:AppIntegrations::Application
func LookupApplication(ctx *pulumi.Context, args *LookupApplicationArgs, opts ...pulumi.InvokeOption) (*LookupApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApplicationResult
	err := ctx.Invoke("aws-native:appintegrations:getApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApplicationArgs struct {
	// The Amazon Resource Name (ARN) of the application.
	ApplicationArn string `pulumi:"applicationArn"`
}

type LookupApplicationResult struct {
	// The Amazon Resource Name (ARN) of the application.
	ApplicationArn *string `pulumi:"applicationArn"`
	// The application configuration. Cannot be used when IsService is true.
	ApplicationConfig *ApplicationConfig `pulumi:"applicationConfig"`
	// Application source config
	ApplicationSourceConfig *ApplicationSourceConfigProperties `pulumi:"applicationSourceConfig"`
	// The application description.
	Description *string `pulumi:"description"`
	// The id of the application.
	Id *string `pulumi:"id"`
	// The iframe configuration
	IframeConfig *ApplicationIframeConfig `pulumi:"iframeConfig"`
	// The initialization timeout in milliseconds. Required when IsService is true.
	InitializationTimeout *int `pulumi:"initializationTimeout"`
	// Indicates if the application is a service
	IsService *bool `pulumi:"isService"`
	// The name of the application.
	Name *string `pulumi:"name"`
	// The namespace of the application.
	Namespace *string `pulumi:"namespace"`
	// The configuration of events or requests that the application has access to.
	Permissions []string `pulumi:"permissions"`
	// The tags (keys and values) associated with the application.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupApplicationOutput(ctx *pulumi.Context, args LookupApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupApplicationResultOutput, error) {
			args := v.(LookupApplicationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:appintegrations:getApplication", args, LookupApplicationResultOutput{}, options).(LookupApplicationResultOutput), nil
		}).(LookupApplicationResultOutput)
}

type LookupApplicationOutputArgs struct {
	// The Amazon Resource Name (ARN) of the application.
	ApplicationArn pulumi.StringInput `pulumi:"applicationArn"`
}

func (LookupApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationArgs)(nil)).Elem()
}

type LookupApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationResult)(nil)).Elem()
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutput() LookupApplicationResultOutput {
	return o
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutputWithContext(ctx context.Context) LookupApplicationResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the application.
func (o LookupApplicationResultOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.ApplicationArn }).(pulumi.StringPtrOutput)
}

// The application configuration. Cannot be used when IsService is true.
func (o LookupApplicationResultOutput) ApplicationConfig() ApplicationConfigPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *ApplicationConfig { return v.ApplicationConfig }).(ApplicationConfigPtrOutput)
}

// Application source config
func (o LookupApplicationResultOutput) ApplicationSourceConfig() ApplicationSourceConfigPropertiesPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *ApplicationSourceConfigProperties { return v.ApplicationSourceConfig }).(ApplicationSourceConfigPropertiesPtrOutput)
}

// The application description.
func (o LookupApplicationResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The id of the application.
func (o LookupApplicationResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The iframe configuration
func (o LookupApplicationResultOutput) IframeConfig() ApplicationIframeConfigPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *ApplicationIframeConfig { return v.IframeConfig }).(ApplicationIframeConfigPtrOutput)
}

// The initialization timeout in milliseconds. Required when IsService is true.
func (o LookupApplicationResultOutput) InitializationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *int { return v.InitializationTimeout }).(pulumi.IntPtrOutput)
}

// Indicates if the application is a service
func (o LookupApplicationResultOutput) IsService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *bool { return v.IsService }).(pulumi.BoolPtrOutput)
}

// The name of the application.
func (o LookupApplicationResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace of the application.
func (o LookupApplicationResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The configuration of events or requests that the application has access to.
func (o LookupApplicationResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The tags (keys and values) associated with the application.
func (o LookupApplicationResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationResultOutput{})
}
