// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanroomsml

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type TrainingDatasetColumnSchema struct {
	ColumnName  string                      `pulumi:"columnName"`
	ColumnTypes []TrainingDatasetColumnType `pulumi:"columnTypes"`
}

// TrainingDatasetColumnSchemaInput is an input type that accepts TrainingDatasetColumnSchemaArgs and TrainingDatasetColumnSchemaOutput values.
// You can construct a concrete instance of `TrainingDatasetColumnSchemaInput` via:
//
//	TrainingDatasetColumnSchemaArgs{...}
type TrainingDatasetColumnSchemaInput interface {
	pulumi.Input

	ToTrainingDatasetColumnSchemaOutput() TrainingDatasetColumnSchemaOutput
	ToTrainingDatasetColumnSchemaOutputWithContext(context.Context) TrainingDatasetColumnSchemaOutput
}

type TrainingDatasetColumnSchemaArgs struct {
	ColumnName  pulumi.StringInput                  `pulumi:"columnName"`
	ColumnTypes TrainingDatasetColumnTypeArrayInput `pulumi:"columnTypes"`
}

func (TrainingDatasetColumnSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetColumnSchema)(nil)).Elem()
}

func (i TrainingDatasetColumnSchemaArgs) ToTrainingDatasetColumnSchemaOutput() TrainingDatasetColumnSchemaOutput {
	return i.ToTrainingDatasetColumnSchemaOutputWithContext(context.Background())
}

func (i TrainingDatasetColumnSchemaArgs) ToTrainingDatasetColumnSchemaOutputWithContext(ctx context.Context) TrainingDatasetColumnSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetColumnSchemaOutput)
}

// TrainingDatasetColumnSchemaArrayInput is an input type that accepts TrainingDatasetColumnSchemaArray and TrainingDatasetColumnSchemaArrayOutput values.
// You can construct a concrete instance of `TrainingDatasetColumnSchemaArrayInput` via:
//
//	TrainingDatasetColumnSchemaArray{ TrainingDatasetColumnSchemaArgs{...} }
type TrainingDatasetColumnSchemaArrayInput interface {
	pulumi.Input

	ToTrainingDatasetColumnSchemaArrayOutput() TrainingDatasetColumnSchemaArrayOutput
	ToTrainingDatasetColumnSchemaArrayOutputWithContext(context.Context) TrainingDatasetColumnSchemaArrayOutput
}

type TrainingDatasetColumnSchemaArray []TrainingDatasetColumnSchemaInput

func (TrainingDatasetColumnSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrainingDatasetColumnSchema)(nil)).Elem()
}

func (i TrainingDatasetColumnSchemaArray) ToTrainingDatasetColumnSchemaArrayOutput() TrainingDatasetColumnSchemaArrayOutput {
	return i.ToTrainingDatasetColumnSchemaArrayOutputWithContext(context.Background())
}

func (i TrainingDatasetColumnSchemaArray) ToTrainingDatasetColumnSchemaArrayOutputWithContext(ctx context.Context) TrainingDatasetColumnSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetColumnSchemaArrayOutput)
}

type TrainingDatasetColumnSchemaOutput struct{ *pulumi.OutputState }

func (TrainingDatasetColumnSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetColumnSchema)(nil)).Elem()
}

func (o TrainingDatasetColumnSchemaOutput) ToTrainingDatasetColumnSchemaOutput() TrainingDatasetColumnSchemaOutput {
	return o
}

func (o TrainingDatasetColumnSchemaOutput) ToTrainingDatasetColumnSchemaOutputWithContext(ctx context.Context) TrainingDatasetColumnSchemaOutput {
	return o
}

func (o TrainingDatasetColumnSchemaOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingDatasetColumnSchema) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o TrainingDatasetColumnSchemaOutput) ColumnTypes() TrainingDatasetColumnTypeArrayOutput {
	return o.ApplyT(func(v TrainingDatasetColumnSchema) []TrainingDatasetColumnType { return v.ColumnTypes }).(TrainingDatasetColumnTypeArrayOutput)
}

type TrainingDatasetColumnSchemaArrayOutput struct{ *pulumi.OutputState }

func (TrainingDatasetColumnSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrainingDatasetColumnSchema)(nil)).Elem()
}

func (o TrainingDatasetColumnSchemaArrayOutput) ToTrainingDatasetColumnSchemaArrayOutput() TrainingDatasetColumnSchemaArrayOutput {
	return o
}

func (o TrainingDatasetColumnSchemaArrayOutput) ToTrainingDatasetColumnSchemaArrayOutputWithContext(ctx context.Context) TrainingDatasetColumnSchemaArrayOutput {
	return o
}

func (o TrainingDatasetColumnSchemaArrayOutput) Index(i pulumi.IntInput) TrainingDatasetColumnSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrainingDatasetColumnSchema {
		return vs[0].([]TrainingDatasetColumnSchema)[vs[1].(int)]
	}).(TrainingDatasetColumnSchemaOutput)
}

type TrainingDatasetDataSource struct {
	GlueDataSource TrainingDatasetGlueDataSource `pulumi:"glueDataSource"`
}

// TrainingDatasetDataSourceInput is an input type that accepts TrainingDatasetDataSourceArgs and TrainingDatasetDataSourceOutput values.
// You can construct a concrete instance of `TrainingDatasetDataSourceInput` via:
//
//	TrainingDatasetDataSourceArgs{...}
type TrainingDatasetDataSourceInput interface {
	pulumi.Input

	ToTrainingDatasetDataSourceOutput() TrainingDatasetDataSourceOutput
	ToTrainingDatasetDataSourceOutputWithContext(context.Context) TrainingDatasetDataSourceOutput
}

type TrainingDatasetDataSourceArgs struct {
	GlueDataSource TrainingDatasetGlueDataSourceInput `pulumi:"glueDataSource"`
}

func (TrainingDatasetDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDataSource)(nil)).Elem()
}

func (i TrainingDatasetDataSourceArgs) ToTrainingDatasetDataSourceOutput() TrainingDatasetDataSourceOutput {
	return i.ToTrainingDatasetDataSourceOutputWithContext(context.Background())
}

func (i TrainingDatasetDataSourceArgs) ToTrainingDatasetDataSourceOutputWithContext(ctx context.Context) TrainingDatasetDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetDataSourceOutput)
}

type TrainingDatasetDataSourceOutput struct{ *pulumi.OutputState }

func (TrainingDatasetDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDataSource)(nil)).Elem()
}

func (o TrainingDatasetDataSourceOutput) ToTrainingDatasetDataSourceOutput() TrainingDatasetDataSourceOutput {
	return o
}

func (o TrainingDatasetDataSourceOutput) ToTrainingDatasetDataSourceOutputWithContext(ctx context.Context) TrainingDatasetDataSourceOutput {
	return o
}

func (o TrainingDatasetDataSourceOutput) GlueDataSource() TrainingDatasetGlueDataSourceOutput {
	return o.ApplyT(func(v TrainingDatasetDataSource) TrainingDatasetGlueDataSource { return v.GlueDataSource }).(TrainingDatasetGlueDataSourceOutput)
}

type TrainingDatasetDataset struct {
	InputConfig TrainingDatasetDatasetInputConfig `pulumi:"inputConfig"`
	Type        TrainingDatasetDatasetType        `pulumi:"type"`
}

// TrainingDatasetDatasetInput is an input type that accepts TrainingDatasetDatasetArgs and TrainingDatasetDatasetOutput values.
// You can construct a concrete instance of `TrainingDatasetDatasetInput` via:
//
//	TrainingDatasetDatasetArgs{...}
type TrainingDatasetDatasetInput interface {
	pulumi.Input

	ToTrainingDatasetDatasetOutput() TrainingDatasetDatasetOutput
	ToTrainingDatasetDatasetOutputWithContext(context.Context) TrainingDatasetDatasetOutput
}

type TrainingDatasetDatasetArgs struct {
	InputConfig TrainingDatasetDatasetInputConfigInput `pulumi:"inputConfig"`
	Type        TrainingDatasetDatasetTypeInput        `pulumi:"type"`
}

func (TrainingDatasetDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDataset)(nil)).Elem()
}

func (i TrainingDatasetDatasetArgs) ToTrainingDatasetDatasetOutput() TrainingDatasetDatasetOutput {
	return i.ToTrainingDatasetDatasetOutputWithContext(context.Background())
}

func (i TrainingDatasetDatasetArgs) ToTrainingDatasetDatasetOutputWithContext(ctx context.Context) TrainingDatasetDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetDatasetOutput)
}

// TrainingDatasetDatasetArrayInput is an input type that accepts TrainingDatasetDatasetArray and TrainingDatasetDatasetArrayOutput values.
// You can construct a concrete instance of `TrainingDatasetDatasetArrayInput` via:
//
//	TrainingDatasetDatasetArray{ TrainingDatasetDatasetArgs{...} }
type TrainingDatasetDatasetArrayInput interface {
	pulumi.Input

	ToTrainingDatasetDatasetArrayOutput() TrainingDatasetDatasetArrayOutput
	ToTrainingDatasetDatasetArrayOutputWithContext(context.Context) TrainingDatasetDatasetArrayOutput
}

type TrainingDatasetDatasetArray []TrainingDatasetDatasetInput

func (TrainingDatasetDatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrainingDatasetDataset)(nil)).Elem()
}

func (i TrainingDatasetDatasetArray) ToTrainingDatasetDatasetArrayOutput() TrainingDatasetDatasetArrayOutput {
	return i.ToTrainingDatasetDatasetArrayOutputWithContext(context.Background())
}

func (i TrainingDatasetDatasetArray) ToTrainingDatasetDatasetArrayOutputWithContext(ctx context.Context) TrainingDatasetDatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetDatasetArrayOutput)
}

type TrainingDatasetDatasetOutput struct{ *pulumi.OutputState }

func (TrainingDatasetDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDataset)(nil)).Elem()
}

func (o TrainingDatasetDatasetOutput) ToTrainingDatasetDatasetOutput() TrainingDatasetDatasetOutput {
	return o
}

func (o TrainingDatasetDatasetOutput) ToTrainingDatasetDatasetOutputWithContext(ctx context.Context) TrainingDatasetDatasetOutput {
	return o
}

func (o TrainingDatasetDatasetOutput) InputConfig() TrainingDatasetDatasetInputConfigOutput {
	return o.ApplyT(func(v TrainingDatasetDataset) TrainingDatasetDatasetInputConfig { return v.InputConfig }).(TrainingDatasetDatasetInputConfigOutput)
}

func (o TrainingDatasetDatasetOutput) Type() TrainingDatasetDatasetTypeOutput {
	return o.ApplyT(func(v TrainingDatasetDataset) TrainingDatasetDatasetType { return v.Type }).(TrainingDatasetDatasetTypeOutput)
}

type TrainingDatasetDatasetArrayOutput struct{ *pulumi.OutputState }

func (TrainingDatasetDatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrainingDatasetDataset)(nil)).Elem()
}

func (o TrainingDatasetDatasetArrayOutput) ToTrainingDatasetDatasetArrayOutput() TrainingDatasetDatasetArrayOutput {
	return o
}

func (o TrainingDatasetDatasetArrayOutput) ToTrainingDatasetDatasetArrayOutputWithContext(ctx context.Context) TrainingDatasetDatasetArrayOutput {
	return o
}

func (o TrainingDatasetDatasetArrayOutput) Index(i pulumi.IntInput) TrainingDatasetDatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrainingDatasetDataset {
		return vs[0].([]TrainingDatasetDataset)[vs[1].(int)]
	}).(TrainingDatasetDatasetOutput)
}

type TrainingDatasetDatasetInputConfig struct {
	DataSource TrainingDatasetDataSource     `pulumi:"dataSource"`
	Schema     []TrainingDatasetColumnSchema `pulumi:"schema"`
}

// TrainingDatasetDatasetInputConfigInput is an input type that accepts TrainingDatasetDatasetInputConfigArgs and TrainingDatasetDatasetInputConfigOutput values.
// You can construct a concrete instance of `TrainingDatasetDatasetInputConfigInput` via:
//
//	TrainingDatasetDatasetInputConfigArgs{...}
type TrainingDatasetDatasetInputConfigInput interface {
	pulumi.Input

	ToTrainingDatasetDatasetInputConfigOutput() TrainingDatasetDatasetInputConfigOutput
	ToTrainingDatasetDatasetInputConfigOutputWithContext(context.Context) TrainingDatasetDatasetInputConfigOutput
}

type TrainingDatasetDatasetInputConfigArgs struct {
	DataSource TrainingDatasetDataSourceInput        `pulumi:"dataSource"`
	Schema     TrainingDatasetColumnSchemaArrayInput `pulumi:"schema"`
}

func (TrainingDatasetDatasetInputConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDatasetInputConfig)(nil)).Elem()
}

func (i TrainingDatasetDatasetInputConfigArgs) ToTrainingDatasetDatasetInputConfigOutput() TrainingDatasetDatasetInputConfigOutput {
	return i.ToTrainingDatasetDatasetInputConfigOutputWithContext(context.Background())
}

func (i TrainingDatasetDatasetInputConfigArgs) ToTrainingDatasetDatasetInputConfigOutputWithContext(ctx context.Context) TrainingDatasetDatasetInputConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetDatasetInputConfigOutput)
}

type TrainingDatasetDatasetInputConfigOutput struct{ *pulumi.OutputState }

func (TrainingDatasetDatasetInputConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDatasetInputConfig)(nil)).Elem()
}

func (o TrainingDatasetDatasetInputConfigOutput) ToTrainingDatasetDatasetInputConfigOutput() TrainingDatasetDatasetInputConfigOutput {
	return o
}

func (o TrainingDatasetDatasetInputConfigOutput) ToTrainingDatasetDatasetInputConfigOutputWithContext(ctx context.Context) TrainingDatasetDatasetInputConfigOutput {
	return o
}

func (o TrainingDatasetDatasetInputConfigOutput) DataSource() TrainingDatasetDataSourceOutput {
	return o.ApplyT(func(v TrainingDatasetDatasetInputConfig) TrainingDatasetDataSource { return v.DataSource }).(TrainingDatasetDataSourceOutput)
}

func (o TrainingDatasetDatasetInputConfigOutput) Schema() TrainingDatasetColumnSchemaArrayOutput {
	return o.ApplyT(func(v TrainingDatasetDatasetInputConfig) []TrainingDatasetColumnSchema { return v.Schema }).(TrainingDatasetColumnSchemaArrayOutput)
}

type TrainingDatasetGlueDataSource struct {
	CatalogId    *string `pulumi:"catalogId"`
	DatabaseName string  `pulumi:"databaseName"`
	TableName    string  `pulumi:"tableName"`
}

// TrainingDatasetGlueDataSourceInput is an input type that accepts TrainingDatasetGlueDataSourceArgs and TrainingDatasetGlueDataSourceOutput values.
// You can construct a concrete instance of `TrainingDatasetGlueDataSourceInput` via:
//
//	TrainingDatasetGlueDataSourceArgs{...}
type TrainingDatasetGlueDataSourceInput interface {
	pulumi.Input

	ToTrainingDatasetGlueDataSourceOutput() TrainingDatasetGlueDataSourceOutput
	ToTrainingDatasetGlueDataSourceOutputWithContext(context.Context) TrainingDatasetGlueDataSourceOutput
}

type TrainingDatasetGlueDataSourceArgs struct {
	CatalogId    pulumi.StringPtrInput `pulumi:"catalogId"`
	DatabaseName pulumi.StringInput    `pulumi:"databaseName"`
	TableName    pulumi.StringInput    `pulumi:"tableName"`
}

func (TrainingDatasetGlueDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetGlueDataSource)(nil)).Elem()
}

func (i TrainingDatasetGlueDataSourceArgs) ToTrainingDatasetGlueDataSourceOutput() TrainingDatasetGlueDataSourceOutput {
	return i.ToTrainingDatasetGlueDataSourceOutputWithContext(context.Background())
}

func (i TrainingDatasetGlueDataSourceArgs) ToTrainingDatasetGlueDataSourceOutputWithContext(ctx context.Context) TrainingDatasetGlueDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetGlueDataSourceOutput)
}

type TrainingDatasetGlueDataSourceOutput struct{ *pulumi.OutputState }

func (TrainingDatasetGlueDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetGlueDataSource)(nil)).Elem()
}

func (o TrainingDatasetGlueDataSourceOutput) ToTrainingDatasetGlueDataSourceOutput() TrainingDatasetGlueDataSourceOutput {
	return o
}

func (o TrainingDatasetGlueDataSourceOutput) ToTrainingDatasetGlueDataSourceOutputWithContext(ctx context.Context) TrainingDatasetGlueDataSourceOutput {
	return o
}

func (o TrainingDatasetGlueDataSourceOutput) CatalogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrainingDatasetGlueDataSource) *string { return v.CatalogId }).(pulumi.StringPtrOutput)
}

func (o TrainingDatasetGlueDataSourceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingDatasetGlueDataSource) string { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o TrainingDatasetGlueDataSourceOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingDatasetGlueDataSource) string { return v.TableName }).(pulumi.StringOutput)
}

type TrainingDatasetTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetColumnSchemaInput)(nil)).Elem(), TrainingDatasetColumnSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetColumnSchemaArrayInput)(nil)).Elem(), TrainingDatasetColumnSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetDataSourceInput)(nil)).Elem(), TrainingDatasetDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetDatasetInput)(nil)).Elem(), TrainingDatasetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetDatasetArrayInput)(nil)).Elem(), TrainingDatasetDatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetDatasetInputConfigInput)(nil)).Elem(), TrainingDatasetDatasetInputConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetGlueDataSourceInput)(nil)).Elem(), TrainingDatasetGlueDataSourceArgs{})
	pulumi.RegisterOutputType(TrainingDatasetColumnSchemaOutput{})
	pulumi.RegisterOutputType(TrainingDatasetColumnSchemaArrayOutput{})
	pulumi.RegisterOutputType(TrainingDatasetDataSourceOutput{})
	pulumi.RegisterOutputType(TrainingDatasetDatasetOutput{})
	pulumi.RegisterOutputType(TrainingDatasetDatasetArrayOutput{})
	pulumi.RegisterOutputType(TrainingDatasetDatasetInputConfigOutput{})
	pulumi.RegisterOutputType(TrainingDatasetGlueDataSourceOutput{})
}
