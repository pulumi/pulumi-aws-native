// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cleanroomsml

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TrainingDatasetColumnType string

const (
	TrainingDatasetColumnTypeUserId             = TrainingDatasetColumnType("USER_ID")
	TrainingDatasetColumnTypeItemId             = TrainingDatasetColumnType("ITEM_ID")
	TrainingDatasetColumnTypeTimestamp          = TrainingDatasetColumnType("TIMESTAMP")
	TrainingDatasetColumnTypeCategoricalFeature = TrainingDatasetColumnType("CATEGORICAL_FEATURE")
	TrainingDatasetColumnTypeNumericalFeature   = TrainingDatasetColumnType("NUMERICAL_FEATURE")
)

func (TrainingDatasetColumnType) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetColumnType)(nil)).Elem()
}

func (e TrainingDatasetColumnType) ToTrainingDatasetColumnTypeOutput() TrainingDatasetColumnTypeOutput {
	return pulumi.ToOutput(e).(TrainingDatasetColumnTypeOutput)
}

func (e TrainingDatasetColumnType) ToTrainingDatasetColumnTypeOutputWithContext(ctx context.Context) TrainingDatasetColumnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrainingDatasetColumnTypeOutput)
}

func (e TrainingDatasetColumnType) ToTrainingDatasetColumnTypePtrOutput() TrainingDatasetColumnTypePtrOutput {
	return e.ToTrainingDatasetColumnTypePtrOutputWithContext(context.Background())
}

func (e TrainingDatasetColumnType) ToTrainingDatasetColumnTypePtrOutputWithContext(ctx context.Context) TrainingDatasetColumnTypePtrOutput {
	return TrainingDatasetColumnType(e).ToTrainingDatasetColumnTypeOutputWithContext(ctx).ToTrainingDatasetColumnTypePtrOutputWithContext(ctx)
}

func (e TrainingDatasetColumnType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrainingDatasetColumnType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrainingDatasetColumnType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrainingDatasetColumnType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrainingDatasetColumnTypeOutput struct{ *pulumi.OutputState }

func (TrainingDatasetColumnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetColumnType)(nil)).Elem()
}

func (o TrainingDatasetColumnTypeOutput) ToTrainingDatasetColumnTypeOutput() TrainingDatasetColumnTypeOutput {
	return o
}

func (o TrainingDatasetColumnTypeOutput) ToTrainingDatasetColumnTypeOutputWithContext(ctx context.Context) TrainingDatasetColumnTypeOutput {
	return o
}

func (o TrainingDatasetColumnTypeOutput) ToTrainingDatasetColumnTypePtrOutput() TrainingDatasetColumnTypePtrOutput {
	return o.ToTrainingDatasetColumnTypePtrOutputWithContext(context.Background())
}

func (o TrainingDatasetColumnTypeOutput) ToTrainingDatasetColumnTypePtrOutputWithContext(ctx context.Context) TrainingDatasetColumnTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrainingDatasetColumnType) *TrainingDatasetColumnType {
		return &v
	}).(TrainingDatasetColumnTypePtrOutput)
}

func (o TrainingDatasetColumnTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrainingDatasetColumnTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrainingDatasetColumnType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrainingDatasetColumnTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrainingDatasetColumnTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrainingDatasetColumnType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrainingDatasetColumnTypePtrOutput struct{ *pulumi.OutputState }

func (TrainingDatasetColumnTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingDatasetColumnType)(nil)).Elem()
}

func (o TrainingDatasetColumnTypePtrOutput) ToTrainingDatasetColumnTypePtrOutput() TrainingDatasetColumnTypePtrOutput {
	return o
}

func (o TrainingDatasetColumnTypePtrOutput) ToTrainingDatasetColumnTypePtrOutputWithContext(ctx context.Context) TrainingDatasetColumnTypePtrOutput {
	return o
}

func (o TrainingDatasetColumnTypePtrOutput) Elem() TrainingDatasetColumnTypeOutput {
	return o.ApplyT(func(v *TrainingDatasetColumnType) TrainingDatasetColumnType {
		if v != nil {
			return *v
		}
		var ret TrainingDatasetColumnType
		return ret
	}).(TrainingDatasetColumnTypeOutput)
}

func (o TrainingDatasetColumnTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrainingDatasetColumnTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrainingDatasetColumnType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TrainingDatasetColumnTypeInput is an input type that accepts values of the TrainingDatasetColumnType enum
// A concrete instance of `TrainingDatasetColumnTypeInput` can be one of the following:
//
//	TrainingDatasetColumnTypeUserId
//	TrainingDatasetColumnTypeItemId
//	TrainingDatasetColumnTypeTimestamp
//	TrainingDatasetColumnTypeCategoricalFeature
//	TrainingDatasetColumnTypeNumericalFeature
type TrainingDatasetColumnTypeInput interface {
	pulumi.Input

	ToTrainingDatasetColumnTypeOutput() TrainingDatasetColumnTypeOutput
	ToTrainingDatasetColumnTypeOutputWithContext(context.Context) TrainingDatasetColumnTypeOutput
}

var trainingDatasetColumnTypePtrType = reflect.TypeOf((**TrainingDatasetColumnType)(nil)).Elem()

type TrainingDatasetColumnTypePtrInput interface {
	pulumi.Input

	ToTrainingDatasetColumnTypePtrOutput() TrainingDatasetColumnTypePtrOutput
	ToTrainingDatasetColumnTypePtrOutputWithContext(context.Context) TrainingDatasetColumnTypePtrOutput
}

type trainingDatasetColumnTypePtr string

func TrainingDatasetColumnTypePtr(v string) TrainingDatasetColumnTypePtrInput {
	return (*trainingDatasetColumnTypePtr)(&v)
}

func (*trainingDatasetColumnTypePtr) ElementType() reflect.Type {
	return trainingDatasetColumnTypePtrType
}

func (in *trainingDatasetColumnTypePtr) ToTrainingDatasetColumnTypePtrOutput() TrainingDatasetColumnTypePtrOutput {
	return pulumi.ToOutput(in).(TrainingDatasetColumnTypePtrOutput)
}

func (in *trainingDatasetColumnTypePtr) ToTrainingDatasetColumnTypePtrOutputWithContext(ctx context.Context) TrainingDatasetColumnTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrainingDatasetColumnTypePtrOutput)
}

// TrainingDatasetColumnTypeArrayInput is an input type that accepts TrainingDatasetColumnTypeArray and TrainingDatasetColumnTypeArrayOutput values.
// You can construct a concrete instance of `TrainingDatasetColumnTypeArrayInput` via:
//
//	TrainingDatasetColumnTypeArray{ TrainingDatasetColumnTypeArgs{...} }
type TrainingDatasetColumnTypeArrayInput interface {
	pulumi.Input

	ToTrainingDatasetColumnTypeArrayOutput() TrainingDatasetColumnTypeArrayOutput
	ToTrainingDatasetColumnTypeArrayOutputWithContext(context.Context) TrainingDatasetColumnTypeArrayOutput
}

type TrainingDatasetColumnTypeArray []TrainingDatasetColumnType

func (TrainingDatasetColumnTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrainingDatasetColumnType)(nil)).Elem()
}

func (i TrainingDatasetColumnTypeArray) ToTrainingDatasetColumnTypeArrayOutput() TrainingDatasetColumnTypeArrayOutput {
	return i.ToTrainingDatasetColumnTypeArrayOutputWithContext(context.Background())
}

func (i TrainingDatasetColumnTypeArray) ToTrainingDatasetColumnTypeArrayOutputWithContext(ctx context.Context) TrainingDatasetColumnTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDatasetColumnTypeArrayOutput)
}

type TrainingDatasetColumnTypeArrayOutput struct{ *pulumi.OutputState }

func (TrainingDatasetColumnTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrainingDatasetColumnType)(nil)).Elem()
}

func (o TrainingDatasetColumnTypeArrayOutput) ToTrainingDatasetColumnTypeArrayOutput() TrainingDatasetColumnTypeArrayOutput {
	return o
}

func (o TrainingDatasetColumnTypeArrayOutput) ToTrainingDatasetColumnTypeArrayOutputWithContext(ctx context.Context) TrainingDatasetColumnTypeArrayOutput {
	return o
}

func (o TrainingDatasetColumnTypeArrayOutput) Index(i pulumi.IntInput) TrainingDatasetColumnTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrainingDatasetColumnType {
		return vs[0].([]TrainingDatasetColumnType)[vs[1].(int)]
	}).(TrainingDatasetColumnTypeOutput)
}

type TrainingDatasetDatasetType string

const (
	TrainingDatasetDatasetTypeInteractions = TrainingDatasetDatasetType("INTERACTIONS")
)

func (TrainingDatasetDatasetType) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDatasetType)(nil)).Elem()
}

func (e TrainingDatasetDatasetType) ToTrainingDatasetDatasetTypeOutput() TrainingDatasetDatasetTypeOutput {
	return pulumi.ToOutput(e).(TrainingDatasetDatasetTypeOutput)
}

func (e TrainingDatasetDatasetType) ToTrainingDatasetDatasetTypeOutputWithContext(ctx context.Context) TrainingDatasetDatasetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TrainingDatasetDatasetTypeOutput)
}

func (e TrainingDatasetDatasetType) ToTrainingDatasetDatasetTypePtrOutput() TrainingDatasetDatasetTypePtrOutput {
	return e.ToTrainingDatasetDatasetTypePtrOutputWithContext(context.Background())
}

func (e TrainingDatasetDatasetType) ToTrainingDatasetDatasetTypePtrOutputWithContext(ctx context.Context) TrainingDatasetDatasetTypePtrOutput {
	return TrainingDatasetDatasetType(e).ToTrainingDatasetDatasetTypeOutputWithContext(ctx).ToTrainingDatasetDatasetTypePtrOutputWithContext(ctx)
}

func (e TrainingDatasetDatasetType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrainingDatasetDatasetType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TrainingDatasetDatasetType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TrainingDatasetDatasetType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TrainingDatasetDatasetTypeOutput struct{ *pulumi.OutputState }

func (TrainingDatasetDatasetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetDatasetType)(nil)).Elem()
}

func (o TrainingDatasetDatasetTypeOutput) ToTrainingDatasetDatasetTypeOutput() TrainingDatasetDatasetTypeOutput {
	return o
}

func (o TrainingDatasetDatasetTypeOutput) ToTrainingDatasetDatasetTypeOutputWithContext(ctx context.Context) TrainingDatasetDatasetTypeOutput {
	return o
}

func (o TrainingDatasetDatasetTypeOutput) ToTrainingDatasetDatasetTypePtrOutput() TrainingDatasetDatasetTypePtrOutput {
	return o.ToTrainingDatasetDatasetTypePtrOutputWithContext(context.Background())
}

func (o TrainingDatasetDatasetTypeOutput) ToTrainingDatasetDatasetTypePtrOutputWithContext(ctx context.Context) TrainingDatasetDatasetTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrainingDatasetDatasetType) *TrainingDatasetDatasetType {
		return &v
	}).(TrainingDatasetDatasetTypePtrOutput)
}

func (o TrainingDatasetDatasetTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrainingDatasetDatasetTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrainingDatasetDatasetType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrainingDatasetDatasetTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrainingDatasetDatasetTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrainingDatasetDatasetType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrainingDatasetDatasetTypePtrOutput struct{ *pulumi.OutputState }

func (TrainingDatasetDatasetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingDatasetDatasetType)(nil)).Elem()
}

func (o TrainingDatasetDatasetTypePtrOutput) ToTrainingDatasetDatasetTypePtrOutput() TrainingDatasetDatasetTypePtrOutput {
	return o
}

func (o TrainingDatasetDatasetTypePtrOutput) ToTrainingDatasetDatasetTypePtrOutputWithContext(ctx context.Context) TrainingDatasetDatasetTypePtrOutput {
	return o
}

func (o TrainingDatasetDatasetTypePtrOutput) Elem() TrainingDatasetDatasetTypeOutput {
	return o.ApplyT(func(v *TrainingDatasetDatasetType) TrainingDatasetDatasetType {
		if v != nil {
			return *v
		}
		var ret TrainingDatasetDatasetType
		return ret
	}).(TrainingDatasetDatasetTypeOutput)
}

func (o TrainingDatasetDatasetTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrainingDatasetDatasetTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrainingDatasetDatasetType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TrainingDatasetDatasetTypeInput is an input type that accepts values of the TrainingDatasetDatasetType enum
// A concrete instance of `TrainingDatasetDatasetTypeInput` can be one of the following:
//
//	TrainingDatasetDatasetTypeInteractions
type TrainingDatasetDatasetTypeInput interface {
	pulumi.Input

	ToTrainingDatasetDatasetTypeOutput() TrainingDatasetDatasetTypeOutput
	ToTrainingDatasetDatasetTypeOutputWithContext(context.Context) TrainingDatasetDatasetTypeOutput
}

var trainingDatasetDatasetTypePtrType = reflect.TypeOf((**TrainingDatasetDatasetType)(nil)).Elem()

type TrainingDatasetDatasetTypePtrInput interface {
	pulumi.Input

	ToTrainingDatasetDatasetTypePtrOutput() TrainingDatasetDatasetTypePtrOutput
	ToTrainingDatasetDatasetTypePtrOutputWithContext(context.Context) TrainingDatasetDatasetTypePtrOutput
}

type trainingDatasetDatasetTypePtr string

func TrainingDatasetDatasetTypePtr(v string) TrainingDatasetDatasetTypePtrInput {
	return (*trainingDatasetDatasetTypePtr)(&v)
}

func (*trainingDatasetDatasetTypePtr) ElementType() reflect.Type {
	return trainingDatasetDatasetTypePtrType
}

func (in *trainingDatasetDatasetTypePtr) ToTrainingDatasetDatasetTypePtrOutput() TrainingDatasetDatasetTypePtrOutput {
	return pulumi.ToOutput(in).(TrainingDatasetDatasetTypePtrOutput)
}

func (in *trainingDatasetDatasetTypePtr) ToTrainingDatasetDatasetTypePtrOutputWithContext(ctx context.Context) TrainingDatasetDatasetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TrainingDatasetDatasetTypePtrOutput)
}

type TrainingDatasetStatus string

const (
	TrainingDatasetStatusActive = TrainingDatasetStatus("ACTIVE")
)

type TrainingDatasetStatusOutput struct{ *pulumi.OutputState }

func (TrainingDatasetStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDatasetStatus)(nil)).Elem()
}

func (o TrainingDatasetStatusOutput) ToTrainingDatasetStatusOutput() TrainingDatasetStatusOutput {
	return o
}

func (o TrainingDatasetStatusOutput) ToTrainingDatasetStatusOutputWithContext(ctx context.Context) TrainingDatasetStatusOutput {
	return o
}

func (o TrainingDatasetStatusOutput) ToTrainingDatasetStatusPtrOutput() TrainingDatasetStatusPtrOutput {
	return o.ToTrainingDatasetStatusPtrOutputWithContext(context.Background())
}

func (o TrainingDatasetStatusOutput) ToTrainingDatasetStatusPtrOutputWithContext(ctx context.Context) TrainingDatasetStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrainingDatasetStatus) *TrainingDatasetStatus {
		return &v
	}).(TrainingDatasetStatusPtrOutput)
}

func (o TrainingDatasetStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TrainingDatasetStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrainingDatasetStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TrainingDatasetStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrainingDatasetStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TrainingDatasetStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TrainingDatasetStatusPtrOutput struct{ *pulumi.OutputState }

func (TrainingDatasetStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingDatasetStatus)(nil)).Elem()
}

func (o TrainingDatasetStatusPtrOutput) ToTrainingDatasetStatusPtrOutput() TrainingDatasetStatusPtrOutput {
	return o
}

func (o TrainingDatasetStatusPtrOutput) ToTrainingDatasetStatusPtrOutputWithContext(ctx context.Context) TrainingDatasetStatusPtrOutput {
	return o
}

func (o TrainingDatasetStatusPtrOutput) Elem() TrainingDatasetStatusOutput {
	return o.ApplyT(func(v *TrainingDatasetStatus) TrainingDatasetStatus {
		if v != nil {
			return *v
		}
		var ret TrainingDatasetStatus
		return ret
	}).(TrainingDatasetStatusOutput)
}

func (o TrainingDatasetStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TrainingDatasetStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TrainingDatasetStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetColumnTypeInput)(nil)).Elem(), TrainingDatasetColumnType("USER_ID"))
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetColumnTypePtrInput)(nil)).Elem(), TrainingDatasetColumnType("USER_ID"))
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetColumnTypeArrayInput)(nil)).Elem(), TrainingDatasetColumnTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetDatasetTypeInput)(nil)).Elem(), TrainingDatasetDatasetType("INTERACTIONS"))
	pulumi.RegisterInputType(reflect.TypeOf((*TrainingDatasetDatasetTypePtrInput)(nil)).Elem(), TrainingDatasetDatasetType("INTERACTIONS"))
	pulumi.RegisterOutputType(TrainingDatasetColumnTypeOutput{})
	pulumi.RegisterOutputType(TrainingDatasetColumnTypePtrOutput{})
	pulumi.RegisterOutputType(TrainingDatasetColumnTypeArrayOutput{})
	pulumi.RegisterOutputType(TrainingDatasetDatasetTypeOutput{})
	pulumi.RegisterOutputType(TrainingDatasetDatasetTypePtrOutput{})
	pulumi.RegisterOutputType(TrainingDatasetStatusOutput{})
	pulumi.RegisterOutputType(TrainingDatasetStatusPtrOutput{})
}
