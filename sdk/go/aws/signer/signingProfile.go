// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A signing profile is a signing template that can be used to carry out a pre-defined signing job.
type SigningProfile struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the specified signing profile.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the target signing platform.
	PlatformId pulumi.StringOutput `pulumi:"platformId"`
	// A name for the signing profile. AWS CloudFormation generates a unique physical ID and uses that ID for the signing profile name.
	ProfileName pulumi.StringOutput `pulumi:"profileName"`
	// A version for the signing profile. AWS Signer generates a unique version for each profile of the same profile name.
	ProfileVersion pulumi.StringOutput `pulumi:"profileVersion"`
	// The Amazon Resource Name (ARN) of the specified signing profile version.
	ProfileVersionArn pulumi.StringOutput `pulumi:"profileVersionArn"`
	// Signature validity period of the profile.
	SignatureValidityPeriod SigningProfileSignatureValidityPeriodPtrOutput `pulumi:"signatureValidityPeriod"`
	// A list of tags associated with the signing profile.
	Tags SigningProfileTagArrayOutput `pulumi:"tags"`
}

// NewSigningProfile registers a new resource with the given unique name, arguments, and options.
func NewSigningProfile(ctx *pulumi.Context,
	name string, args *SigningProfileArgs, opts ...pulumi.ResourceOption) (*SigningProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlatformId == nil {
		return nil, errors.New("invalid value for required argument 'PlatformId'")
	}
	var resource SigningProfile
	err := ctx.RegisterResource("aws-native:signer:SigningProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSigningProfile gets an existing SigningProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSigningProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SigningProfileState, opts ...pulumi.ResourceOption) (*SigningProfile, error) {
	var resource SigningProfile
	err := ctx.ReadResource("aws-native:signer:SigningProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SigningProfile resources.
type signingProfileState struct {
}

type SigningProfileState struct {
}

func (SigningProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*signingProfileState)(nil)).Elem()
}

type signingProfileArgs struct {
	// The ID of the target signing platform.
	PlatformId string `pulumi:"platformId"`
	// Signature validity period of the profile.
	SignatureValidityPeriod *SigningProfileSignatureValidityPeriod `pulumi:"signatureValidityPeriod"`
	// A list of tags associated with the signing profile.
	Tags []SigningProfileTag `pulumi:"tags"`
}

// The set of arguments for constructing a SigningProfile resource.
type SigningProfileArgs struct {
	// The ID of the target signing platform.
	PlatformId pulumi.StringInput
	// Signature validity period of the profile.
	SignatureValidityPeriod SigningProfileSignatureValidityPeriodPtrInput
	// A list of tags associated with the signing profile.
	Tags SigningProfileTagArrayInput
}

func (SigningProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signingProfileArgs)(nil)).Elem()
}

type SigningProfileInput interface {
	pulumi.Input

	ToSigningProfileOutput() SigningProfileOutput
	ToSigningProfileOutputWithContext(ctx context.Context) SigningProfileOutput
}

func (*SigningProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningProfile)(nil))
}

func (i *SigningProfile) ToSigningProfileOutput() SigningProfileOutput {
	return i.ToSigningProfileOutputWithContext(context.Background())
}

func (i *SigningProfile) ToSigningProfileOutputWithContext(ctx context.Context) SigningProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SigningProfileOutput)
}

type SigningProfileOutput struct{ *pulumi.OutputState }

func (SigningProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SigningProfile)(nil))
}

func (o SigningProfileOutput) ToSigningProfileOutput() SigningProfileOutput {
	return o
}

func (o SigningProfileOutput) ToSigningProfileOutputWithContext(ctx context.Context) SigningProfileOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SigningProfileOutput{})
}
