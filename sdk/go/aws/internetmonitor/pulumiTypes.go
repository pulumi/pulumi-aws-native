// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package internetmonitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type MonitorHealthEventsConfig struct {
	// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
	//
	// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
	//
	// If you don't set a local health event threshold, the default value is 60%.
	//
	// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
	AvailabilityLocalHealthEventsConfig *MonitorLocalHealthEventsConfig `pulumi:"availabilityLocalHealthEventsConfig"`
	// The health event threshold percentage set for availability scores. When the overall availability score is at or below this percentage, Internet Monitor creates a health event.
	AvailabilityScoreThreshold *float64 `pulumi:"availabilityScoreThreshold"`
	// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
	//
	// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
	//
	// If you don't set a local health event threshold, the default value is 60%.
	//
	// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
	PerformanceLocalHealthEventsConfig *MonitorLocalHealthEventsConfig `pulumi:"performanceLocalHealthEventsConfig"`
	// The health event threshold percentage set for performance scores. When the overall performance score is at or below this percentage, Internet Monitor creates a health event.
	PerformanceScoreThreshold *float64 `pulumi:"performanceScoreThreshold"`
}

// MonitorHealthEventsConfigInput is an input type that accepts MonitorHealthEventsConfigArgs and MonitorHealthEventsConfigOutput values.
// You can construct a concrete instance of `MonitorHealthEventsConfigInput` via:
//
//	MonitorHealthEventsConfigArgs{...}
type MonitorHealthEventsConfigInput interface {
	pulumi.Input

	ToMonitorHealthEventsConfigOutput() MonitorHealthEventsConfigOutput
	ToMonitorHealthEventsConfigOutputWithContext(context.Context) MonitorHealthEventsConfigOutput
}

type MonitorHealthEventsConfigArgs struct {
	// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
	//
	// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
	//
	// If you don't set a local health event threshold, the default value is 60%.
	//
	// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
	AvailabilityLocalHealthEventsConfig MonitorLocalHealthEventsConfigPtrInput `pulumi:"availabilityLocalHealthEventsConfig"`
	// The health event threshold percentage set for availability scores. When the overall availability score is at or below this percentage, Internet Monitor creates a health event.
	AvailabilityScoreThreshold pulumi.Float64PtrInput `pulumi:"availabilityScoreThreshold"`
	// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
	//
	// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
	//
	// If you don't set a local health event threshold, the default value is 60%.
	//
	// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
	PerformanceLocalHealthEventsConfig MonitorLocalHealthEventsConfigPtrInput `pulumi:"performanceLocalHealthEventsConfig"`
	// The health event threshold percentage set for performance scores. When the overall performance score is at or below this percentage, Internet Monitor creates a health event.
	PerformanceScoreThreshold pulumi.Float64PtrInput `pulumi:"performanceScoreThreshold"`
}

func (MonitorHealthEventsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorHealthEventsConfig)(nil)).Elem()
}

func (i MonitorHealthEventsConfigArgs) ToMonitorHealthEventsConfigOutput() MonitorHealthEventsConfigOutput {
	return i.ToMonitorHealthEventsConfigOutputWithContext(context.Background())
}

func (i MonitorHealthEventsConfigArgs) ToMonitorHealthEventsConfigOutputWithContext(ctx context.Context) MonitorHealthEventsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorHealthEventsConfigOutput)
}

func (i MonitorHealthEventsConfigArgs) ToMonitorHealthEventsConfigPtrOutput() MonitorHealthEventsConfigPtrOutput {
	return i.ToMonitorHealthEventsConfigPtrOutputWithContext(context.Background())
}

func (i MonitorHealthEventsConfigArgs) ToMonitorHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorHealthEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorHealthEventsConfigOutput).ToMonitorHealthEventsConfigPtrOutputWithContext(ctx)
}

// MonitorHealthEventsConfigPtrInput is an input type that accepts MonitorHealthEventsConfigArgs, MonitorHealthEventsConfigPtr and MonitorHealthEventsConfigPtrOutput values.
// You can construct a concrete instance of `MonitorHealthEventsConfigPtrInput` via:
//
//	        MonitorHealthEventsConfigArgs{...}
//
//	or:
//
//	        nil
type MonitorHealthEventsConfigPtrInput interface {
	pulumi.Input

	ToMonitorHealthEventsConfigPtrOutput() MonitorHealthEventsConfigPtrOutput
	ToMonitorHealthEventsConfigPtrOutputWithContext(context.Context) MonitorHealthEventsConfigPtrOutput
}

type monitorHealthEventsConfigPtrType MonitorHealthEventsConfigArgs

func MonitorHealthEventsConfigPtr(v *MonitorHealthEventsConfigArgs) MonitorHealthEventsConfigPtrInput {
	return (*monitorHealthEventsConfigPtrType)(v)
}

func (*monitorHealthEventsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorHealthEventsConfig)(nil)).Elem()
}

func (i *monitorHealthEventsConfigPtrType) ToMonitorHealthEventsConfigPtrOutput() MonitorHealthEventsConfigPtrOutput {
	return i.ToMonitorHealthEventsConfigPtrOutputWithContext(context.Background())
}

func (i *monitorHealthEventsConfigPtrType) ToMonitorHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorHealthEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorHealthEventsConfigPtrOutput)
}

type MonitorHealthEventsConfigOutput struct{ *pulumi.OutputState }

func (MonitorHealthEventsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorHealthEventsConfig)(nil)).Elem()
}

func (o MonitorHealthEventsConfigOutput) ToMonitorHealthEventsConfigOutput() MonitorHealthEventsConfigOutput {
	return o
}

func (o MonitorHealthEventsConfigOutput) ToMonitorHealthEventsConfigOutputWithContext(ctx context.Context) MonitorHealthEventsConfigOutput {
	return o
}

func (o MonitorHealthEventsConfigOutput) ToMonitorHealthEventsConfigPtrOutput() MonitorHealthEventsConfigPtrOutput {
	return o.ToMonitorHealthEventsConfigPtrOutputWithContext(context.Background())
}

func (o MonitorHealthEventsConfigOutput) ToMonitorHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorHealthEventsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorHealthEventsConfig) *MonitorHealthEventsConfig {
		return &v
	}).(MonitorHealthEventsConfigPtrOutput)
}

// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
//
// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
//
// If you don't set a local health event threshold, the default value is 60%.
//
// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
func (o MonitorHealthEventsConfigOutput) AvailabilityLocalHealthEventsConfig() MonitorLocalHealthEventsConfigPtrOutput {
	return o.ApplyT(func(v MonitorHealthEventsConfig) *MonitorLocalHealthEventsConfig {
		return v.AvailabilityLocalHealthEventsConfig
	}).(MonitorLocalHealthEventsConfigPtrOutput)
}

// The health event threshold percentage set for availability scores. When the overall availability score is at or below this percentage, Internet Monitor creates a health event.
func (o MonitorHealthEventsConfigOutput) AvailabilityScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorHealthEventsConfig) *float64 { return v.AvailabilityScoreThreshold }).(pulumi.Float64PtrOutput)
}

// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
//
// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
//
// If you don't set a local health event threshold, the default value is 60%.
//
// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
func (o MonitorHealthEventsConfigOutput) PerformanceLocalHealthEventsConfig() MonitorLocalHealthEventsConfigPtrOutput {
	return o.ApplyT(func(v MonitorHealthEventsConfig) *MonitorLocalHealthEventsConfig {
		return v.PerformanceLocalHealthEventsConfig
	}).(MonitorLocalHealthEventsConfigPtrOutput)
}

// The health event threshold percentage set for performance scores. When the overall performance score is at or below this percentage, Internet Monitor creates a health event.
func (o MonitorHealthEventsConfigOutput) PerformanceScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorHealthEventsConfig) *float64 { return v.PerformanceScoreThreshold }).(pulumi.Float64PtrOutput)
}

type MonitorHealthEventsConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitorHealthEventsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorHealthEventsConfig)(nil)).Elem()
}

func (o MonitorHealthEventsConfigPtrOutput) ToMonitorHealthEventsConfigPtrOutput() MonitorHealthEventsConfigPtrOutput {
	return o
}

func (o MonitorHealthEventsConfigPtrOutput) ToMonitorHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorHealthEventsConfigPtrOutput {
	return o
}

func (o MonitorHealthEventsConfigPtrOutput) Elem() MonitorHealthEventsConfigOutput {
	return o.ApplyT(func(v *MonitorHealthEventsConfig) MonitorHealthEventsConfig {
		if v != nil {
			return *v
		}
		var ret MonitorHealthEventsConfig
		return ret
	}).(MonitorHealthEventsConfigOutput)
}

// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
//
// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
//
// If you don't set a local health event threshold, the default value is 60%.
//
// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
func (o MonitorHealthEventsConfigPtrOutput) AvailabilityLocalHealthEventsConfig() MonitorLocalHealthEventsConfigPtrOutput {
	return o.ApplyT(func(v *MonitorHealthEventsConfig) *MonitorLocalHealthEventsConfig {
		if v == nil {
			return nil
		}
		return v.AvailabilityLocalHealthEventsConfig
	}).(MonitorLocalHealthEventsConfigPtrOutput)
}

// The health event threshold percentage set for availability scores. When the overall availability score is at or below this percentage, Internet Monitor creates a health event.
func (o MonitorHealthEventsConfigPtrOutput) AvailabilityScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorHealthEventsConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.AvailabilityScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// Configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance or availability issue, when scores cross a threshold for one or more city-networks.
//
// Defines the percentages, for performance scores or availability scores, that are the local thresholds for when Amazon CloudWatch Internet Monitor creates a health event. Also defines whether a local threshold is enabled or disabled, and the minimum percentage of overall traffic that must be impacted by an issue before Internet Monitor creates an event when a	threshold is crossed for a local health score.
//
// If you don't set a local health event threshold, the default value is 60%.
//
// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *Amazon CloudWatch User Guide* .
func (o MonitorHealthEventsConfigPtrOutput) PerformanceLocalHealthEventsConfig() MonitorLocalHealthEventsConfigPtrOutput {
	return o.ApplyT(func(v *MonitorHealthEventsConfig) *MonitorLocalHealthEventsConfig {
		if v == nil {
			return nil
		}
		return v.PerformanceLocalHealthEventsConfig
	}).(MonitorLocalHealthEventsConfigPtrOutput)
}

// The health event threshold percentage set for performance scores. When the overall performance score is at or below this percentage, Internet Monitor creates a health event.
func (o MonitorHealthEventsConfigPtrOutput) PerformanceScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorHealthEventsConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.PerformanceScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

type MonitorInternetMeasurementsLogDelivery struct {
	// The configuration for publishing Amazon CloudWatch Internet Monitor internet measurements to Amazon S3. The configuration includes the bucket name and (optionally) bucket prefix for the S3 bucket to store the measurements, and the delivery status. The delivery status is `ENABLED` if you choose to deliver internet measurements to S3 logs, and `DISABLED` otherwise.
	//
	// The measurements are also published to Amazon CloudWatch Logs.
	S3Config *MonitorS3Config `pulumi:"s3Config"`
}

// MonitorInternetMeasurementsLogDeliveryInput is an input type that accepts MonitorInternetMeasurementsLogDeliveryArgs and MonitorInternetMeasurementsLogDeliveryOutput values.
// You can construct a concrete instance of `MonitorInternetMeasurementsLogDeliveryInput` via:
//
//	MonitorInternetMeasurementsLogDeliveryArgs{...}
type MonitorInternetMeasurementsLogDeliveryInput interface {
	pulumi.Input

	ToMonitorInternetMeasurementsLogDeliveryOutput() MonitorInternetMeasurementsLogDeliveryOutput
	ToMonitorInternetMeasurementsLogDeliveryOutputWithContext(context.Context) MonitorInternetMeasurementsLogDeliveryOutput
}

type MonitorInternetMeasurementsLogDeliveryArgs struct {
	// The configuration for publishing Amazon CloudWatch Internet Monitor internet measurements to Amazon S3. The configuration includes the bucket name and (optionally) bucket prefix for the S3 bucket to store the measurements, and the delivery status. The delivery status is `ENABLED` if you choose to deliver internet measurements to S3 logs, and `DISABLED` otherwise.
	//
	// The measurements are also published to Amazon CloudWatch Logs.
	S3Config MonitorS3ConfigPtrInput `pulumi:"s3Config"`
}

func (MonitorInternetMeasurementsLogDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorInternetMeasurementsLogDelivery)(nil)).Elem()
}

func (i MonitorInternetMeasurementsLogDeliveryArgs) ToMonitorInternetMeasurementsLogDeliveryOutput() MonitorInternetMeasurementsLogDeliveryOutput {
	return i.ToMonitorInternetMeasurementsLogDeliveryOutputWithContext(context.Background())
}

func (i MonitorInternetMeasurementsLogDeliveryArgs) ToMonitorInternetMeasurementsLogDeliveryOutputWithContext(ctx context.Context) MonitorInternetMeasurementsLogDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorInternetMeasurementsLogDeliveryOutput)
}

func (i MonitorInternetMeasurementsLogDeliveryArgs) ToMonitorInternetMeasurementsLogDeliveryPtrOutput() MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return i.ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(context.Background())
}

func (i MonitorInternetMeasurementsLogDeliveryArgs) ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(ctx context.Context) MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorInternetMeasurementsLogDeliveryOutput).ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(ctx)
}

// MonitorInternetMeasurementsLogDeliveryPtrInput is an input type that accepts MonitorInternetMeasurementsLogDeliveryArgs, MonitorInternetMeasurementsLogDeliveryPtr and MonitorInternetMeasurementsLogDeliveryPtrOutput values.
// You can construct a concrete instance of `MonitorInternetMeasurementsLogDeliveryPtrInput` via:
//
//	        MonitorInternetMeasurementsLogDeliveryArgs{...}
//
//	or:
//
//	        nil
type MonitorInternetMeasurementsLogDeliveryPtrInput interface {
	pulumi.Input

	ToMonitorInternetMeasurementsLogDeliveryPtrOutput() MonitorInternetMeasurementsLogDeliveryPtrOutput
	ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(context.Context) MonitorInternetMeasurementsLogDeliveryPtrOutput
}

type monitorInternetMeasurementsLogDeliveryPtrType MonitorInternetMeasurementsLogDeliveryArgs

func MonitorInternetMeasurementsLogDeliveryPtr(v *MonitorInternetMeasurementsLogDeliveryArgs) MonitorInternetMeasurementsLogDeliveryPtrInput {
	return (*monitorInternetMeasurementsLogDeliveryPtrType)(v)
}

func (*monitorInternetMeasurementsLogDeliveryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorInternetMeasurementsLogDelivery)(nil)).Elem()
}

func (i *monitorInternetMeasurementsLogDeliveryPtrType) ToMonitorInternetMeasurementsLogDeliveryPtrOutput() MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return i.ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(context.Background())
}

func (i *monitorInternetMeasurementsLogDeliveryPtrType) ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(ctx context.Context) MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorInternetMeasurementsLogDeliveryPtrOutput)
}

type MonitorInternetMeasurementsLogDeliveryOutput struct{ *pulumi.OutputState }

func (MonitorInternetMeasurementsLogDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorInternetMeasurementsLogDelivery)(nil)).Elem()
}

func (o MonitorInternetMeasurementsLogDeliveryOutput) ToMonitorInternetMeasurementsLogDeliveryOutput() MonitorInternetMeasurementsLogDeliveryOutput {
	return o
}

func (o MonitorInternetMeasurementsLogDeliveryOutput) ToMonitorInternetMeasurementsLogDeliveryOutputWithContext(ctx context.Context) MonitorInternetMeasurementsLogDeliveryOutput {
	return o
}

func (o MonitorInternetMeasurementsLogDeliveryOutput) ToMonitorInternetMeasurementsLogDeliveryPtrOutput() MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return o.ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(context.Background())
}

func (o MonitorInternetMeasurementsLogDeliveryOutput) ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(ctx context.Context) MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorInternetMeasurementsLogDelivery) *MonitorInternetMeasurementsLogDelivery {
		return &v
	}).(MonitorInternetMeasurementsLogDeliveryPtrOutput)
}

// The configuration for publishing Amazon CloudWatch Internet Monitor internet measurements to Amazon S3. The configuration includes the bucket name and (optionally) bucket prefix for the S3 bucket to store the measurements, and the delivery status. The delivery status is `ENABLED` if you choose to deliver internet measurements to S3 logs, and `DISABLED` otherwise.
//
// The measurements are also published to Amazon CloudWatch Logs.
func (o MonitorInternetMeasurementsLogDeliveryOutput) S3Config() MonitorS3ConfigPtrOutput {
	return o.ApplyT(func(v MonitorInternetMeasurementsLogDelivery) *MonitorS3Config { return v.S3Config }).(MonitorS3ConfigPtrOutput)
}

type MonitorInternetMeasurementsLogDeliveryPtrOutput struct{ *pulumi.OutputState }

func (MonitorInternetMeasurementsLogDeliveryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorInternetMeasurementsLogDelivery)(nil)).Elem()
}

func (o MonitorInternetMeasurementsLogDeliveryPtrOutput) ToMonitorInternetMeasurementsLogDeliveryPtrOutput() MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return o
}

func (o MonitorInternetMeasurementsLogDeliveryPtrOutput) ToMonitorInternetMeasurementsLogDeliveryPtrOutputWithContext(ctx context.Context) MonitorInternetMeasurementsLogDeliveryPtrOutput {
	return o
}

func (o MonitorInternetMeasurementsLogDeliveryPtrOutput) Elem() MonitorInternetMeasurementsLogDeliveryOutput {
	return o.ApplyT(func(v *MonitorInternetMeasurementsLogDelivery) MonitorInternetMeasurementsLogDelivery {
		if v != nil {
			return *v
		}
		var ret MonitorInternetMeasurementsLogDelivery
		return ret
	}).(MonitorInternetMeasurementsLogDeliveryOutput)
}

// The configuration for publishing Amazon CloudWatch Internet Monitor internet measurements to Amazon S3. The configuration includes the bucket name and (optionally) bucket prefix for the S3 bucket to store the measurements, and the delivery status. The delivery status is `ENABLED` if you choose to deliver internet measurements to S3 logs, and `DISABLED` otherwise.
//
// The measurements are also published to Amazon CloudWatch Logs.
func (o MonitorInternetMeasurementsLogDeliveryPtrOutput) S3Config() MonitorS3ConfigPtrOutput {
	return o.ApplyT(func(v *MonitorInternetMeasurementsLogDelivery) *MonitorS3Config {
		if v == nil {
			return nil
		}
		return v.S3Config
	}).(MonitorS3ConfigPtrOutput)
}

type MonitorLocalHealthEventsConfig struct {
	// The health event threshold percentage set for a local health score.
	HealthScoreThreshold *float64 `pulumi:"healthScoreThreshold"`
	// The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.
	//
	// If you don't set a minimum traffic impact threshold, the default value is 0.01%.
	MinTrafficImpact *float64 `pulumi:"minTrafficImpact"`
	// The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be `ENABLED` or `DISABLED` .
	Status *MonitorLocalHealthEventsConfigStatus `pulumi:"status"`
}

// MonitorLocalHealthEventsConfigInput is an input type that accepts MonitorLocalHealthEventsConfigArgs and MonitorLocalHealthEventsConfigOutput values.
// You can construct a concrete instance of `MonitorLocalHealthEventsConfigInput` via:
//
//	MonitorLocalHealthEventsConfigArgs{...}
type MonitorLocalHealthEventsConfigInput interface {
	pulumi.Input

	ToMonitorLocalHealthEventsConfigOutput() MonitorLocalHealthEventsConfigOutput
	ToMonitorLocalHealthEventsConfigOutputWithContext(context.Context) MonitorLocalHealthEventsConfigOutput
}

type MonitorLocalHealthEventsConfigArgs struct {
	// The health event threshold percentage set for a local health score.
	HealthScoreThreshold pulumi.Float64PtrInput `pulumi:"healthScoreThreshold"`
	// The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.
	//
	// If you don't set a minimum traffic impact threshold, the default value is 0.01%.
	MinTrafficImpact pulumi.Float64PtrInput `pulumi:"minTrafficImpact"`
	// The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be `ENABLED` or `DISABLED` .
	Status MonitorLocalHealthEventsConfigStatusPtrInput `pulumi:"status"`
}

func (MonitorLocalHealthEventsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorLocalHealthEventsConfig)(nil)).Elem()
}

func (i MonitorLocalHealthEventsConfigArgs) ToMonitorLocalHealthEventsConfigOutput() MonitorLocalHealthEventsConfigOutput {
	return i.ToMonitorLocalHealthEventsConfigOutputWithContext(context.Background())
}

func (i MonitorLocalHealthEventsConfigArgs) ToMonitorLocalHealthEventsConfigOutputWithContext(ctx context.Context) MonitorLocalHealthEventsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorLocalHealthEventsConfigOutput)
}

func (i MonitorLocalHealthEventsConfigArgs) ToMonitorLocalHealthEventsConfigPtrOutput() MonitorLocalHealthEventsConfigPtrOutput {
	return i.ToMonitorLocalHealthEventsConfigPtrOutputWithContext(context.Background())
}

func (i MonitorLocalHealthEventsConfigArgs) ToMonitorLocalHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorLocalHealthEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorLocalHealthEventsConfigOutput).ToMonitorLocalHealthEventsConfigPtrOutputWithContext(ctx)
}

// MonitorLocalHealthEventsConfigPtrInput is an input type that accepts MonitorLocalHealthEventsConfigArgs, MonitorLocalHealthEventsConfigPtr and MonitorLocalHealthEventsConfigPtrOutput values.
// You can construct a concrete instance of `MonitorLocalHealthEventsConfigPtrInput` via:
//
//	        MonitorLocalHealthEventsConfigArgs{...}
//
//	or:
//
//	        nil
type MonitorLocalHealthEventsConfigPtrInput interface {
	pulumi.Input

	ToMonitorLocalHealthEventsConfigPtrOutput() MonitorLocalHealthEventsConfigPtrOutput
	ToMonitorLocalHealthEventsConfigPtrOutputWithContext(context.Context) MonitorLocalHealthEventsConfigPtrOutput
}

type monitorLocalHealthEventsConfigPtrType MonitorLocalHealthEventsConfigArgs

func MonitorLocalHealthEventsConfigPtr(v *MonitorLocalHealthEventsConfigArgs) MonitorLocalHealthEventsConfigPtrInput {
	return (*monitorLocalHealthEventsConfigPtrType)(v)
}

func (*monitorLocalHealthEventsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorLocalHealthEventsConfig)(nil)).Elem()
}

func (i *monitorLocalHealthEventsConfigPtrType) ToMonitorLocalHealthEventsConfigPtrOutput() MonitorLocalHealthEventsConfigPtrOutput {
	return i.ToMonitorLocalHealthEventsConfigPtrOutputWithContext(context.Background())
}

func (i *monitorLocalHealthEventsConfigPtrType) ToMonitorLocalHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorLocalHealthEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorLocalHealthEventsConfigPtrOutput)
}

type MonitorLocalHealthEventsConfigOutput struct{ *pulumi.OutputState }

func (MonitorLocalHealthEventsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorLocalHealthEventsConfig)(nil)).Elem()
}

func (o MonitorLocalHealthEventsConfigOutput) ToMonitorLocalHealthEventsConfigOutput() MonitorLocalHealthEventsConfigOutput {
	return o
}

func (o MonitorLocalHealthEventsConfigOutput) ToMonitorLocalHealthEventsConfigOutputWithContext(ctx context.Context) MonitorLocalHealthEventsConfigOutput {
	return o
}

func (o MonitorLocalHealthEventsConfigOutput) ToMonitorLocalHealthEventsConfigPtrOutput() MonitorLocalHealthEventsConfigPtrOutput {
	return o.ToMonitorLocalHealthEventsConfigPtrOutputWithContext(context.Background())
}

func (o MonitorLocalHealthEventsConfigOutput) ToMonitorLocalHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorLocalHealthEventsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorLocalHealthEventsConfig) *MonitorLocalHealthEventsConfig {
		return &v
	}).(MonitorLocalHealthEventsConfigPtrOutput)
}

// The health event threshold percentage set for a local health score.
func (o MonitorLocalHealthEventsConfigOutput) HealthScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorLocalHealthEventsConfig) *float64 { return v.HealthScoreThreshold }).(pulumi.Float64PtrOutput)
}

// The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.
//
// If you don't set a minimum traffic impact threshold, the default value is 0.01%.
func (o MonitorLocalHealthEventsConfigOutput) MinTrafficImpact() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorLocalHealthEventsConfig) *float64 { return v.MinTrafficImpact }).(pulumi.Float64PtrOutput)
}

// The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be `ENABLED` or `DISABLED` .
func (o MonitorLocalHealthEventsConfigOutput) Status() MonitorLocalHealthEventsConfigStatusPtrOutput {
	return o.ApplyT(func(v MonitorLocalHealthEventsConfig) *MonitorLocalHealthEventsConfigStatus { return v.Status }).(MonitorLocalHealthEventsConfigStatusPtrOutput)
}

type MonitorLocalHealthEventsConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitorLocalHealthEventsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorLocalHealthEventsConfig)(nil)).Elem()
}

func (o MonitorLocalHealthEventsConfigPtrOutput) ToMonitorLocalHealthEventsConfigPtrOutput() MonitorLocalHealthEventsConfigPtrOutput {
	return o
}

func (o MonitorLocalHealthEventsConfigPtrOutput) ToMonitorLocalHealthEventsConfigPtrOutputWithContext(ctx context.Context) MonitorLocalHealthEventsConfigPtrOutput {
	return o
}

func (o MonitorLocalHealthEventsConfigPtrOutput) Elem() MonitorLocalHealthEventsConfigOutput {
	return o.ApplyT(func(v *MonitorLocalHealthEventsConfig) MonitorLocalHealthEventsConfig {
		if v != nil {
			return *v
		}
		var ret MonitorLocalHealthEventsConfig
		return ret
	}).(MonitorLocalHealthEventsConfigOutput)
}

// The health event threshold percentage set for a local health score.
func (o MonitorLocalHealthEventsConfigPtrOutput) HealthScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorLocalHealthEventsConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.HealthScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.
//
// If you don't set a minimum traffic impact threshold, the default value is 0.01%.
func (o MonitorLocalHealthEventsConfigPtrOutput) MinTrafficImpact() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorLocalHealthEventsConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MinTrafficImpact
	}).(pulumi.Float64PtrOutput)
}

// The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be `ENABLED` or `DISABLED` .
func (o MonitorLocalHealthEventsConfigPtrOutput) Status() MonitorLocalHealthEventsConfigStatusPtrOutput {
	return o.ApplyT(func(v *MonitorLocalHealthEventsConfig) *MonitorLocalHealthEventsConfigStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(MonitorLocalHealthEventsConfigStatusPtrOutput)
}

type MonitorS3Config struct {
	// The Amazon S3 bucket name for internet measurements publishing.
	BucketName *string `pulumi:"bucketName"`
	// An optional Amazon S3 bucket prefix for internet measurements publishing.
	BucketPrefix *string `pulumi:"bucketPrefix"`
	// The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket. The delivery status is `ENABLED` if you choose to deliver internet measurements to an S3 bucket, and `DISABLED` otherwise.
	LogDeliveryStatus *MonitorS3ConfigLogDeliveryStatus `pulumi:"logDeliveryStatus"`
}

// MonitorS3ConfigInput is an input type that accepts MonitorS3ConfigArgs and MonitorS3ConfigOutput values.
// You can construct a concrete instance of `MonitorS3ConfigInput` via:
//
//	MonitorS3ConfigArgs{...}
type MonitorS3ConfigInput interface {
	pulumi.Input

	ToMonitorS3ConfigOutput() MonitorS3ConfigOutput
	ToMonitorS3ConfigOutputWithContext(context.Context) MonitorS3ConfigOutput
}

type MonitorS3ConfigArgs struct {
	// The Amazon S3 bucket name for internet measurements publishing.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// An optional Amazon S3 bucket prefix for internet measurements publishing.
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
	// The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket. The delivery status is `ENABLED` if you choose to deliver internet measurements to an S3 bucket, and `DISABLED` otherwise.
	LogDeliveryStatus MonitorS3ConfigLogDeliveryStatusPtrInput `pulumi:"logDeliveryStatus"`
}

func (MonitorS3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorS3Config)(nil)).Elem()
}

func (i MonitorS3ConfigArgs) ToMonitorS3ConfigOutput() MonitorS3ConfigOutput {
	return i.ToMonitorS3ConfigOutputWithContext(context.Background())
}

func (i MonitorS3ConfigArgs) ToMonitorS3ConfigOutputWithContext(ctx context.Context) MonitorS3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorS3ConfigOutput)
}

func (i MonitorS3ConfigArgs) ToMonitorS3ConfigPtrOutput() MonitorS3ConfigPtrOutput {
	return i.ToMonitorS3ConfigPtrOutputWithContext(context.Background())
}

func (i MonitorS3ConfigArgs) ToMonitorS3ConfigPtrOutputWithContext(ctx context.Context) MonitorS3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorS3ConfigOutput).ToMonitorS3ConfigPtrOutputWithContext(ctx)
}

// MonitorS3ConfigPtrInput is an input type that accepts MonitorS3ConfigArgs, MonitorS3ConfigPtr and MonitorS3ConfigPtrOutput values.
// You can construct a concrete instance of `MonitorS3ConfigPtrInput` via:
//
//	        MonitorS3ConfigArgs{...}
//
//	or:
//
//	        nil
type MonitorS3ConfigPtrInput interface {
	pulumi.Input

	ToMonitorS3ConfigPtrOutput() MonitorS3ConfigPtrOutput
	ToMonitorS3ConfigPtrOutputWithContext(context.Context) MonitorS3ConfigPtrOutput
}

type monitorS3ConfigPtrType MonitorS3ConfigArgs

func MonitorS3ConfigPtr(v *MonitorS3ConfigArgs) MonitorS3ConfigPtrInput {
	return (*monitorS3ConfigPtrType)(v)
}

func (*monitorS3ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorS3Config)(nil)).Elem()
}

func (i *monitorS3ConfigPtrType) ToMonitorS3ConfigPtrOutput() MonitorS3ConfigPtrOutput {
	return i.ToMonitorS3ConfigPtrOutputWithContext(context.Background())
}

func (i *monitorS3ConfigPtrType) ToMonitorS3ConfigPtrOutputWithContext(ctx context.Context) MonitorS3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorS3ConfigPtrOutput)
}

type MonitorS3ConfigOutput struct{ *pulumi.OutputState }

func (MonitorS3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorS3Config)(nil)).Elem()
}

func (o MonitorS3ConfigOutput) ToMonitorS3ConfigOutput() MonitorS3ConfigOutput {
	return o
}

func (o MonitorS3ConfigOutput) ToMonitorS3ConfigOutputWithContext(ctx context.Context) MonitorS3ConfigOutput {
	return o
}

func (o MonitorS3ConfigOutput) ToMonitorS3ConfigPtrOutput() MonitorS3ConfigPtrOutput {
	return o.ToMonitorS3ConfigPtrOutputWithContext(context.Background())
}

func (o MonitorS3ConfigOutput) ToMonitorS3ConfigPtrOutputWithContext(ctx context.Context) MonitorS3ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorS3Config) *MonitorS3Config {
		return &v
	}).(MonitorS3ConfigPtrOutput)
}

// The Amazon S3 bucket name for internet measurements publishing.
func (o MonitorS3ConfigOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorS3Config) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// An optional Amazon S3 bucket prefix for internet measurements publishing.
func (o MonitorS3ConfigOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorS3Config) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

// The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket. The delivery status is `ENABLED` if you choose to deliver internet measurements to an S3 bucket, and `DISABLED` otherwise.
func (o MonitorS3ConfigOutput) LogDeliveryStatus() MonitorS3ConfigLogDeliveryStatusPtrOutput {
	return o.ApplyT(func(v MonitorS3Config) *MonitorS3ConfigLogDeliveryStatus { return v.LogDeliveryStatus }).(MonitorS3ConfigLogDeliveryStatusPtrOutput)
}

type MonitorS3ConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitorS3ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorS3Config)(nil)).Elem()
}

func (o MonitorS3ConfigPtrOutput) ToMonitorS3ConfigPtrOutput() MonitorS3ConfigPtrOutput {
	return o
}

func (o MonitorS3ConfigPtrOutput) ToMonitorS3ConfigPtrOutputWithContext(ctx context.Context) MonitorS3ConfigPtrOutput {
	return o
}

func (o MonitorS3ConfigPtrOutput) Elem() MonitorS3ConfigOutput {
	return o.ApplyT(func(v *MonitorS3Config) MonitorS3Config {
		if v != nil {
			return *v
		}
		var ret MonitorS3Config
		return ret
	}).(MonitorS3ConfigOutput)
}

// The Amazon S3 bucket name for internet measurements publishing.
func (o MonitorS3ConfigPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorS3Config) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// An optional Amazon S3 bucket prefix for internet measurements publishing.
func (o MonitorS3ConfigPtrOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorS3Config) *string {
		if v == nil {
			return nil
		}
		return v.BucketPrefix
	}).(pulumi.StringPtrOutput)
}

// The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket. The delivery status is `ENABLED` if you choose to deliver internet measurements to an S3 bucket, and `DISABLED` otherwise.
func (o MonitorS3ConfigPtrOutput) LogDeliveryStatus() MonitorS3ConfigLogDeliveryStatusPtrOutput {
	return o.ApplyT(func(v *MonitorS3Config) *MonitorS3ConfigLogDeliveryStatus {
		if v == nil {
			return nil
		}
		return v.LogDeliveryStatus
	}).(MonitorS3ConfigLogDeliveryStatusPtrOutput)
}

// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
type MonitorTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorHealthEventsConfigInput)(nil)).Elem(), MonitorHealthEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorHealthEventsConfigPtrInput)(nil)).Elem(), MonitorHealthEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorInternetMeasurementsLogDeliveryInput)(nil)).Elem(), MonitorInternetMeasurementsLogDeliveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorInternetMeasurementsLogDeliveryPtrInput)(nil)).Elem(), MonitorInternetMeasurementsLogDeliveryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorLocalHealthEventsConfigInput)(nil)).Elem(), MonitorLocalHealthEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorLocalHealthEventsConfigPtrInput)(nil)).Elem(), MonitorLocalHealthEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorS3ConfigInput)(nil)).Elem(), MonitorS3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorS3ConfigPtrInput)(nil)).Elem(), MonitorS3ConfigArgs{})
	pulumi.RegisterOutputType(MonitorHealthEventsConfigOutput{})
	pulumi.RegisterOutputType(MonitorHealthEventsConfigPtrOutput{})
	pulumi.RegisterOutputType(MonitorInternetMeasurementsLogDeliveryOutput{})
	pulumi.RegisterOutputType(MonitorInternetMeasurementsLogDeliveryPtrOutput{})
	pulumi.RegisterOutputType(MonitorLocalHealthEventsConfigOutput{})
	pulumi.RegisterOutputType(MonitorLocalHealthEventsConfigPtrOutput{})
	pulumi.RegisterOutputType(MonitorS3ConfigOutput{})
	pulumi.RegisterOutputType(MonitorS3ConfigPtrOutput{})
}
