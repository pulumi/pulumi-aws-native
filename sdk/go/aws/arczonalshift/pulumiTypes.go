// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arczonalshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ZonalAutoshiftConfigurationControlCondition struct {
	// The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.
	AlarmIdentifier string `pulumi:"alarmIdentifier"`
	// The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is `CLOUDWATCH` .
	Type string `pulumi:"type"`
}

// ZonalAutoshiftConfigurationControlConditionInput is an input type that accepts ZonalAutoshiftConfigurationControlConditionArgs and ZonalAutoshiftConfigurationControlConditionOutput values.
// You can construct a concrete instance of `ZonalAutoshiftConfigurationControlConditionInput` via:
//
//	ZonalAutoshiftConfigurationControlConditionArgs{...}
type ZonalAutoshiftConfigurationControlConditionInput interface {
	pulumi.Input

	ToZonalAutoshiftConfigurationControlConditionOutput() ZonalAutoshiftConfigurationControlConditionOutput
	ToZonalAutoshiftConfigurationControlConditionOutputWithContext(context.Context) ZonalAutoshiftConfigurationControlConditionOutput
}

type ZonalAutoshiftConfigurationControlConditionArgs struct {
	// The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.
	AlarmIdentifier pulumi.StringInput `pulumi:"alarmIdentifier"`
	// The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is `CLOUDWATCH` .
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZonalAutoshiftConfigurationControlConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonalAutoshiftConfigurationControlCondition)(nil)).Elem()
}

func (i ZonalAutoshiftConfigurationControlConditionArgs) ToZonalAutoshiftConfigurationControlConditionOutput() ZonalAutoshiftConfigurationControlConditionOutput {
	return i.ToZonalAutoshiftConfigurationControlConditionOutputWithContext(context.Background())
}

func (i ZonalAutoshiftConfigurationControlConditionArgs) ToZonalAutoshiftConfigurationControlConditionOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationControlConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAutoshiftConfigurationControlConditionOutput)
}

// ZonalAutoshiftConfigurationControlConditionArrayInput is an input type that accepts ZonalAutoshiftConfigurationControlConditionArray and ZonalAutoshiftConfigurationControlConditionArrayOutput values.
// You can construct a concrete instance of `ZonalAutoshiftConfigurationControlConditionArrayInput` via:
//
//	ZonalAutoshiftConfigurationControlConditionArray{ ZonalAutoshiftConfigurationControlConditionArgs{...} }
type ZonalAutoshiftConfigurationControlConditionArrayInput interface {
	pulumi.Input

	ToZonalAutoshiftConfigurationControlConditionArrayOutput() ZonalAutoshiftConfigurationControlConditionArrayOutput
	ToZonalAutoshiftConfigurationControlConditionArrayOutputWithContext(context.Context) ZonalAutoshiftConfigurationControlConditionArrayOutput
}

type ZonalAutoshiftConfigurationControlConditionArray []ZonalAutoshiftConfigurationControlConditionInput

func (ZonalAutoshiftConfigurationControlConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonalAutoshiftConfigurationControlCondition)(nil)).Elem()
}

func (i ZonalAutoshiftConfigurationControlConditionArray) ToZonalAutoshiftConfigurationControlConditionArrayOutput() ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return i.ToZonalAutoshiftConfigurationControlConditionArrayOutputWithContext(context.Background())
}

func (i ZonalAutoshiftConfigurationControlConditionArray) ToZonalAutoshiftConfigurationControlConditionArrayOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAutoshiftConfigurationControlConditionArrayOutput)
}

type ZonalAutoshiftConfigurationControlConditionOutput struct{ *pulumi.OutputState }

func (ZonalAutoshiftConfigurationControlConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonalAutoshiftConfigurationControlCondition)(nil)).Elem()
}

func (o ZonalAutoshiftConfigurationControlConditionOutput) ToZonalAutoshiftConfigurationControlConditionOutput() ZonalAutoshiftConfigurationControlConditionOutput {
	return o
}

func (o ZonalAutoshiftConfigurationControlConditionOutput) ToZonalAutoshiftConfigurationControlConditionOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationControlConditionOutput {
	return o
}

// The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.
func (o ZonalAutoshiftConfigurationControlConditionOutput) AlarmIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ZonalAutoshiftConfigurationControlCondition) string { return v.AlarmIdentifier }).(pulumi.StringOutput)
}

// The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is `CLOUDWATCH` .
func (o ZonalAutoshiftConfigurationControlConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZonalAutoshiftConfigurationControlCondition) string { return v.Type }).(pulumi.StringOutput)
}

type ZonalAutoshiftConfigurationControlConditionArrayOutput struct{ *pulumi.OutputState }

func (ZonalAutoshiftConfigurationControlConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonalAutoshiftConfigurationControlCondition)(nil)).Elem()
}

func (o ZonalAutoshiftConfigurationControlConditionArrayOutput) ToZonalAutoshiftConfigurationControlConditionArrayOutput() ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return o
}

func (o ZonalAutoshiftConfigurationControlConditionArrayOutput) ToZonalAutoshiftConfigurationControlConditionArrayOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return o
}

func (o ZonalAutoshiftConfigurationControlConditionArrayOutput) Index(i pulumi.IntInput) ZonalAutoshiftConfigurationControlConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonalAutoshiftConfigurationControlCondition {
		return vs[0].([]ZonalAutoshiftConfigurationControlCondition)[vs[1].(int)]
	}).(ZonalAutoshiftConfigurationControlConditionOutput)
}

type ZonalAutoshiftConfigurationPracticeRunConfiguration struct {
	// An array of one or more dates that you can specify when AWS does not start practice runs for a resource. Dates are in UTC.
	//
	// Specify blocked dates in the format `YYYY-MM-DD` , separated by spaces.
	BlockedDates []string `pulumi:"blockedDates"`
	// An array of one or more days and times that you can specify when Route 53 ARC does not start practice runs for a resource. Days and times are in UTC.
	//
	// Specify blocked windows in the format `DAY:HH:MM-DAY:HH:MM` , separated by spaces. For example, `MON:18:30-MON:19:30 TUE:18:30-TUE:19:30` .
	BlockedWindows []string `pulumi:"blockedWindows"`
	// An optional alarm that you can specify that blocks practice runs when the alarm is in an `ALARM` state. When a blocking alarm goes into an `ALARM` state, it prevents practice runs from being started, and ends practice runs that are in progress.
	BlockingAlarms []ZonalAutoshiftConfigurationControlCondition `pulumi:"blockingAlarms"`
	// The alarm that you specify to monitor the health of your application during practice runs. When the outcome alarm goes into an `ALARM` state, the practice run is ended and the outcome is set to `FAILED` .
	OutcomeAlarms []ZonalAutoshiftConfigurationControlCondition `pulumi:"outcomeAlarms"`
}

// ZonalAutoshiftConfigurationPracticeRunConfigurationInput is an input type that accepts ZonalAutoshiftConfigurationPracticeRunConfigurationArgs and ZonalAutoshiftConfigurationPracticeRunConfigurationOutput values.
// You can construct a concrete instance of `ZonalAutoshiftConfigurationPracticeRunConfigurationInput` via:
//
//	ZonalAutoshiftConfigurationPracticeRunConfigurationArgs{...}
type ZonalAutoshiftConfigurationPracticeRunConfigurationInput interface {
	pulumi.Input

	ToZonalAutoshiftConfigurationPracticeRunConfigurationOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationOutput
	ToZonalAutoshiftConfigurationPracticeRunConfigurationOutputWithContext(context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationOutput
}

type ZonalAutoshiftConfigurationPracticeRunConfigurationArgs struct {
	// An array of one or more dates that you can specify when AWS does not start practice runs for a resource. Dates are in UTC.
	//
	// Specify blocked dates in the format `YYYY-MM-DD` , separated by spaces.
	BlockedDates pulumi.StringArrayInput `pulumi:"blockedDates"`
	// An array of one or more days and times that you can specify when Route 53 ARC does not start practice runs for a resource. Days and times are in UTC.
	//
	// Specify blocked windows in the format `DAY:HH:MM-DAY:HH:MM` , separated by spaces. For example, `MON:18:30-MON:19:30 TUE:18:30-TUE:19:30` .
	BlockedWindows pulumi.StringArrayInput `pulumi:"blockedWindows"`
	// An optional alarm that you can specify that blocks practice runs when the alarm is in an `ALARM` state. When a blocking alarm goes into an `ALARM` state, it prevents practice runs from being started, and ends practice runs that are in progress.
	BlockingAlarms ZonalAutoshiftConfigurationControlConditionArrayInput `pulumi:"blockingAlarms"`
	// The alarm that you specify to monitor the health of your application during practice runs. When the outcome alarm goes into an `ALARM` state, the practice run is ended and the outcome is set to `FAILED` .
	OutcomeAlarms ZonalAutoshiftConfigurationControlConditionArrayInput `pulumi:"outcomeAlarms"`
}

func (ZonalAutoshiftConfigurationPracticeRunConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonalAutoshiftConfigurationPracticeRunConfiguration)(nil)).Elem()
}

func (i ZonalAutoshiftConfigurationPracticeRunConfigurationArgs) ToZonalAutoshiftConfigurationPracticeRunConfigurationOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationOutput {
	return i.ToZonalAutoshiftConfigurationPracticeRunConfigurationOutputWithContext(context.Background())
}

func (i ZonalAutoshiftConfigurationPracticeRunConfigurationArgs) ToZonalAutoshiftConfigurationPracticeRunConfigurationOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAutoshiftConfigurationPracticeRunConfigurationOutput)
}

func (i ZonalAutoshiftConfigurationPracticeRunConfigurationArgs) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return i.ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(context.Background())
}

func (i ZonalAutoshiftConfigurationPracticeRunConfigurationArgs) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAutoshiftConfigurationPracticeRunConfigurationOutput).ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(ctx)
}

// ZonalAutoshiftConfigurationPracticeRunConfigurationPtrInput is an input type that accepts ZonalAutoshiftConfigurationPracticeRunConfigurationArgs, ZonalAutoshiftConfigurationPracticeRunConfigurationPtr and ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput values.
// You can construct a concrete instance of `ZonalAutoshiftConfigurationPracticeRunConfigurationPtrInput` via:
//
//	        ZonalAutoshiftConfigurationPracticeRunConfigurationArgs{...}
//
//	or:
//
//	        nil
type ZonalAutoshiftConfigurationPracticeRunConfigurationPtrInput interface {
	pulumi.Input

	ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput
	ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput
}

type zonalAutoshiftConfigurationPracticeRunConfigurationPtrType ZonalAutoshiftConfigurationPracticeRunConfigurationArgs

func ZonalAutoshiftConfigurationPracticeRunConfigurationPtr(v *ZonalAutoshiftConfigurationPracticeRunConfigurationArgs) ZonalAutoshiftConfigurationPracticeRunConfigurationPtrInput {
	return (*zonalAutoshiftConfigurationPracticeRunConfigurationPtrType)(v)
}

func (*zonalAutoshiftConfigurationPracticeRunConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonalAutoshiftConfigurationPracticeRunConfiguration)(nil)).Elem()
}

func (i *zonalAutoshiftConfigurationPracticeRunConfigurationPtrType) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return i.ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(context.Background())
}

func (i *zonalAutoshiftConfigurationPracticeRunConfigurationPtrType) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput)
}

type ZonalAutoshiftConfigurationPracticeRunConfigurationOutput struct{ *pulumi.OutputState }

func (ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonalAutoshiftConfigurationPracticeRunConfiguration)(nil)).Elem()
}

func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) ToZonalAutoshiftConfigurationPracticeRunConfigurationOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationOutput {
	return o
}

func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) ToZonalAutoshiftConfigurationPracticeRunConfigurationOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationOutput {
	return o
}

func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return o.ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(context.Background())
}

func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ZonalAutoshiftConfigurationPracticeRunConfiguration) *ZonalAutoshiftConfigurationPracticeRunConfiguration {
		return &v
	}).(ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput)
}

// An array of one or more dates that you can specify when AWS does not start practice runs for a resource. Dates are in UTC.
//
// Specify blocked dates in the format `YYYY-MM-DD` , separated by spaces.
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) BlockedDates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZonalAutoshiftConfigurationPracticeRunConfiguration) []string { return v.BlockedDates }).(pulumi.StringArrayOutput)
}

// An array of one or more days and times that you can specify when Route 53 ARC does not start practice runs for a resource. Days and times are in UTC.
//
// Specify blocked windows in the format `DAY:HH:MM-DAY:HH:MM` , separated by spaces. For example, `MON:18:30-MON:19:30 TUE:18:30-TUE:19:30` .
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) BlockedWindows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZonalAutoshiftConfigurationPracticeRunConfiguration) []string { return v.BlockedWindows }).(pulumi.StringArrayOutput)
}

// An optional alarm that you can specify that blocks practice runs when the alarm is in an `ALARM` state. When a blocking alarm goes into an `ALARM` state, it prevents practice runs from being started, and ends practice runs that are in progress.
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) BlockingAlarms() ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return o.ApplyT(func(v ZonalAutoshiftConfigurationPracticeRunConfiguration) []ZonalAutoshiftConfigurationControlCondition {
		return v.BlockingAlarms
	}).(ZonalAutoshiftConfigurationControlConditionArrayOutput)
}

// The alarm that you specify to monitor the health of your application during practice runs. When the outcome alarm goes into an `ALARM` state, the practice run is ended and the outcome is set to `FAILED` .
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationOutput) OutcomeAlarms() ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return o.ApplyT(func(v ZonalAutoshiftConfigurationPracticeRunConfiguration) []ZonalAutoshiftConfigurationControlCondition {
		return v.OutcomeAlarms
	}).(ZonalAutoshiftConfigurationControlConditionArrayOutput)
}

type ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonalAutoshiftConfigurationPracticeRunConfiguration)(nil)).Elem()
}

func (o ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput() ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return o
}

func (o ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) ToZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutputWithContext(ctx context.Context) ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput {
	return o
}

func (o ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) Elem() ZonalAutoshiftConfigurationPracticeRunConfigurationOutput {
	return o.ApplyT(func(v *ZonalAutoshiftConfigurationPracticeRunConfiguration) ZonalAutoshiftConfigurationPracticeRunConfiguration {
		if v != nil {
			return *v
		}
		var ret ZonalAutoshiftConfigurationPracticeRunConfiguration
		return ret
	}).(ZonalAutoshiftConfigurationPracticeRunConfigurationOutput)
}

// An array of one or more dates that you can specify when AWS does not start practice runs for a resource. Dates are in UTC.
//
// Specify blocked dates in the format `YYYY-MM-DD` , separated by spaces.
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) BlockedDates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZonalAutoshiftConfigurationPracticeRunConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.BlockedDates
	}).(pulumi.StringArrayOutput)
}

// An array of one or more days and times that you can specify when Route 53 ARC does not start practice runs for a resource. Days and times are in UTC.
//
// Specify blocked windows in the format `DAY:HH:MM-DAY:HH:MM` , separated by spaces. For example, `MON:18:30-MON:19:30 TUE:18:30-TUE:19:30` .
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) BlockedWindows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZonalAutoshiftConfigurationPracticeRunConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.BlockedWindows
	}).(pulumi.StringArrayOutput)
}

// An optional alarm that you can specify that blocks practice runs when the alarm is in an `ALARM` state. When a blocking alarm goes into an `ALARM` state, it prevents practice runs from being started, and ends practice runs that are in progress.
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) BlockingAlarms() ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return o.ApplyT(func(v *ZonalAutoshiftConfigurationPracticeRunConfiguration) []ZonalAutoshiftConfigurationControlCondition {
		if v == nil {
			return nil
		}
		return v.BlockingAlarms
	}).(ZonalAutoshiftConfigurationControlConditionArrayOutput)
}

// The alarm that you specify to monitor the health of your application during practice runs. When the outcome alarm goes into an `ALARM` state, the practice run is ended and the outcome is set to `FAILED` .
func (o ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput) OutcomeAlarms() ZonalAutoshiftConfigurationControlConditionArrayOutput {
	return o.ApplyT(func(v *ZonalAutoshiftConfigurationPracticeRunConfiguration) []ZonalAutoshiftConfigurationControlCondition {
		if v == nil {
			return nil
		}
		return v.OutcomeAlarms
	}).(ZonalAutoshiftConfigurationControlConditionArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZonalAutoshiftConfigurationControlConditionInput)(nil)).Elem(), ZonalAutoshiftConfigurationControlConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonalAutoshiftConfigurationControlConditionArrayInput)(nil)).Elem(), ZonalAutoshiftConfigurationControlConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonalAutoshiftConfigurationPracticeRunConfigurationInput)(nil)).Elem(), ZonalAutoshiftConfigurationPracticeRunConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonalAutoshiftConfigurationPracticeRunConfigurationPtrInput)(nil)).Elem(), ZonalAutoshiftConfigurationPracticeRunConfigurationArgs{})
	pulumi.RegisterOutputType(ZonalAutoshiftConfigurationControlConditionOutput{})
	pulumi.RegisterOutputType(ZonalAutoshiftConfigurationControlConditionArrayOutput{})
	pulumi.RegisterOutputType(ZonalAutoshiftConfigurationPracticeRunConfigurationOutput{})
	pulumi.RegisterOutputType(ZonalAutoshiftConfigurationPracticeRunConfigurationPtrOutput{})
}
