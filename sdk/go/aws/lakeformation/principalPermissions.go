// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lakeformation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A resource schema representing a Lake Formation Permission.
type PrincipalPermissions struct {
	pulumi.CustomResourceState

	Catalog                    pulumi.StringPtrOutput                      `pulumi:"catalog"`
	Permissions                PrincipalPermissionsPermissionArrayOutput   `pulumi:"permissions"`
	PermissionsWithGrantOption PrincipalPermissionsPermissionArrayOutput   `pulumi:"permissionsWithGrantOption"`
	Principal                  PrincipalPermissionsDataLakePrincipalOutput `pulumi:"principal"`
	PrincipalIdentifier        pulumi.StringOutput                         `pulumi:"principalIdentifier"`
	Resource                   PrincipalPermissionsResourceOutput          `pulumi:"resource"`
	ResourceIdentifier         pulumi.StringOutput                         `pulumi:"resourceIdentifier"`
}

// NewPrincipalPermissions registers a new resource with the given unique name, arguments, and options.
func NewPrincipalPermissions(ctx *pulumi.Context,
	name string, args *PrincipalPermissionsArgs, opts ...pulumi.ResourceOption) (*PrincipalPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.PermissionsWithGrantOption == nil {
		return nil, errors.New("invalid value for required argument 'PermissionsWithGrantOption'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"catalog",
		"permissions[*]",
		"permissionsWithGrantOption[*]",
		"principal",
		"resource",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrincipalPermissions
	err := ctx.RegisterResource("aws-native:lakeformation:PrincipalPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrincipalPermissions gets an existing PrincipalPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrincipalPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrincipalPermissionsState, opts ...pulumi.ResourceOption) (*PrincipalPermissions, error) {
	var resource PrincipalPermissions
	err := ctx.ReadResource("aws-native:lakeformation:PrincipalPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrincipalPermissions resources.
type principalPermissionsState struct {
}

type PrincipalPermissionsState struct {
}

func (PrincipalPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPermissionsState)(nil)).Elem()
}

type principalPermissionsArgs struct {
	Catalog                    *string                               `pulumi:"catalog"`
	Permissions                []PrincipalPermissionsPermission      `pulumi:"permissions"`
	PermissionsWithGrantOption []PrincipalPermissionsPermission      `pulumi:"permissionsWithGrantOption"`
	Principal                  PrincipalPermissionsDataLakePrincipal `pulumi:"principal"`
	Resource                   PrincipalPermissionsResource          `pulumi:"resource"`
}

// The set of arguments for constructing a PrincipalPermissions resource.
type PrincipalPermissionsArgs struct {
	Catalog                    pulumi.StringPtrInput
	Permissions                PrincipalPermissionsPermissionArrayInput
	PermissionsWithGrantOption PrincipalPermissionsPermissionArrayInput
	Principal                  PrincipalPermissionsDataLakePrincipalInput
	Resource                   PrincipalPermissionsResourceInput
}

func (PrincipalPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*principalPermissionsArgs)(nil)).Elem()
}

type PrincipalPermissionsInput interface {
	pulumi.Input

	ToPrincipalPermissionsOutput() PrincipalPermissionsOutput
	ToPrincipalPermissionsOutputWithContext(ctx context.Context) PrincipalPermissionsOutput
}

func (*PrincipalPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPermissions)(nil)).Elem()
}

func (i *PrincipalPermissions) ToPrincipalPermissionsOutput() PrincipalPermissionsOutput {
	return i.ToPrincipalPermissionsOutputWithContext(context.Background())
}

func (i *PrincipalPermissions) ToPrincipalPermissionsOutputWithContext(ctx context.Context) PrincipalPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalPermissionsOutput)
}

type PrincipalPermissionsOutput struct{ *pulumi.OutputState }

func (PrincipalPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalPermissions)(nil)).Elem()
}

func (o PrincipalPermissionsOutput) ToPrincipalPermissionsOutput() PrincipalPermissionsOutput {
	return o
}

func (o PrincipalPermissionsOutput) ToPrincipalPermissionsOutputWithContext(ctx context.Context) PrincipalPermissionsOutput {
	return o
}

func (o PrincipalPermissionsOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalPermissions) pulumi.StringPtrOutput { return v.Catalog }).(pulumi.StringPtrOutput)
}

func (o PrincipalPermissionsOutput) Permissions() PrincipalPermissionsPermissionArrayOutput {
	return o.ApplyT(func(v *PrincipalPermissions) PrincipalPermissionsPermissionArrayOutput { return v.Permissions }).(PrincipalPermissionsPermissionArrayOutput)
}

func (o PrincipalPermissionsOutput) PermissionsWithGrantOption() PrincipalPermissionsPermissionArrayOutput {
	return o.ApplyT(func(v *PrincipalPermissions) PrincipalPermissionsPermissionArrayOutput {
		return v.PermissionsWithGrantOption
	}).(PrincipalPermissionsPermissionArrayOutput)
}

func (o PrincipalPermissionsOutput) Principal() PrincipalPermissionsDataLakePrincipalOutput {
	return o.ApplyT(func(v *PrincipalPermissions) PrincipalPermissionsDataLakePrincipalOutput { return v.Principal }).(PrincipalPermissionsDataLakePrincipalOutput)
}

func (o PrincipalPermissionsOutput) PrincipalIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalPermissions) pulumi.StringOutput { return v.PrincipalIdentifier }).(pulumi.StringOutput)
}

func (o PrincipalPermissionsOutput) Resource() PrincipalPermissionsResourceOutput {
	return o.ApplyT(func(v *PrincipalPermissions) PrincipalPermissionsResourceOutput { return v.Resource }).(PrincipalPermissionsResourceOutput)
}

func (o PrincipalPermissionsOutput) ResourceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PrincipalPermissions) pulumi.StringOutput { return v.ResourceIdentifier }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrincipalPermissionsInput)(nil)).Elem(), &PrincipalPermissions{})
	pulumi.RegisterOutputType(PrincipalPermissionsOutput{})
}
