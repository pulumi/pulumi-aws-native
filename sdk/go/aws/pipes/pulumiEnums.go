// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type PipeAssignPublicIp string

const (
	PipeAssignPublicIpEnabled  = PipeAssignPublicIp("ENABLED")
	PipeAssignPublicIpDisabled = PipeAssignPublicIp("DISABLED")
)

func (PipeAssignPublicIp) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeAssignPublicIp)(nil)).Elem()
}

func (e PipeAssignPublicIp) ToPipeAssignPublicIpOutput() PipeAssignPublicIpOutput {
	return pulumi.ToOutput(e).(PipeAssignPublicIpOutput)
}

func (e PipeAssignPublicIp) ToPipeAssignPublicIpOutputWithContext(ctx context.Context) PipeAssignPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeAssignPublicIpOutput)
}

func (e PipeAssignPublicIp) ToPipeAssignPublicIpPtrOutput() PipeAssignPublicIpPtrOutput {
	return e.ToPipeAssignPublicIpPtrOutputWithContext(context.Background())
}

func (e PipeAssignPublicIp) ToPipeAssignPublicIpPtrOutputWithContext(ctx context.Context) PipeAssignPublicIpPtrOutput {
	return PipeAssignPublicIp(e).ToPipeAssignPublicIpOutputWithContext(ctx).ToPipeAssignPublicIpPtrOutputWithContext(ctx)
}

func (e PipeAssignPublicIp) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeAssignPublicIp) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeAssignPublicIp) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeAssignPublicIp) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeAssignPublicIpOutput struct{ *pulumi.OutputState }

func (PipeAssignPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeAssignPublicIp)(nil)).Elem()
}

func (o PipeAssignPublicIpOutput) ToPipeAssignPublicIpOutput() PipeAssignPublicIpOutput {
	return o
}

func (o PipeAssignPublicIpOutput) ToPipeAssignPublicIpOutputWithContext(ctx context.Context) PipeAssignPublicIpOutput {
	return o
}

func (o PipeAssignPublicIpOutput) ToPipeAssignPublicIpPtrOutput() PipeAssignPublicIpPtrOutput {
	return o.ToPipeAssignPublicIpPtrOutputWithContext(context.Background())
}

func (o PipeAssignPublicIpOutput) ToPipeAssignPublicIpPtrOutputWithContext(ctx context.Context) PipeAssignPublicIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeAssignPublicIp) *PipeAssignPublicIp {
		return &v
	}).(PipeAssignPublicIpPtrOutput)
}

func (o PipeAssignPublicIpOutput) ToOutput(ctx context.Context) pulumix.Output[PipeAssignPublicIp] {
	return pulumix.Output[PipeAssignPublicIp]{
		OutputState: o.OutputState,
	}
}

func (o PipeAssignPublicIpOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeAssignPublicIpOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeAssignPublicIp) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeAssignPublicIpOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeAssignPublicIpOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeAssignPublicIp) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeAssignPublicIpPtrOutput struct{ *pulumi.OutputState }

func (PipeAssignPublicIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeAssignPublicIp)(nil)).Elem()
}

func (o PipeAssignPublicIpPtrOutput) ToPipeAssignPublicIpPtrOutput() PipeAssignPublicIpPtrOutput {
	return o
}

func (o PipeAssignPublicIpPtrOutput) ToPipeAssignPublicIpPtrOutputWithContext(ctx context.Context) PipeAssignPublicIpPtrOutput {
	return o
}

func (o PipeAssignPublicIpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeAssignPublicIp] {
	return pulumix.Output[*PipeAssignPublicIp]{
		OutputState: o.OutputState,
	}
}

func (o PipeAssignPublicIpPtrOutput) Elem() PipeAssignPublicIpOutput {
	return o.ApplyT(func(v *PipeAssignPublicIp) PipeAssignPublicIp {
		if v != nil {
			return *v
		}
		var ret PipeAssignPublicIp
		return ret
	}).(PipeAssignPublicIpOutput)
}

func (o PipeAssignPublicIpPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeAssignPublicIpPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeAssignPublicIp) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeAssignPublicIpInput is an input type that accepts PipeAssignPublicIpArgs and PipeAssignPublicIpOutput values.
// You can construct a concrete instance of `PipeAssignPublicIpInput` via:
//
//	PipeAssignPublicIpArgs{...}
type PipeAssignPublicIpInput interface {
	pulumi.Input

	ToPipeAssignPublicIpOutput() PipeAssignPublicIpOutput
	ToPipeAssignPublicIpOutputWithContext(context.Context) PipeAssignPublicIpOutput
}

var pipeAssignPublicIpPtrType = reflect.TypeOf((**PipeAssignPublicIp)(nil)).Elem()

type PipeAssignPublicIpPtrInput interface {
	pulumi.Input

	ToPipeAssignPublicIpPtrOutput() PipeAssignPublicIpPtrOutput
	ToPipeAssignPublicIpPtrOutputWithContext(context.Context) PipeAssignPublicIpPtrOutput
}

type pipeAssignPublicIpPtr string

func PipeAssignPublicIpPtr(v string) PipeAssignPublicIpPtrInput {
	return (*pipeAssignPublicIpPtr)(&v)
}

func (*pipeAssignPublicIpPtr) ElementType() reflect.Type {
	return pipeAssignPublicIpPtrType
}

func (in *pipeAssignPublicIpPtr) ToPipeAssignPublicIpPtrOutput() PipeAssignPublicIpPtrOutput {
	return pulumi.ToOutput(in).(PipeAssignPublicIpPtrOutput)
}

func (in *pipeAssignPublicIpPtr) ToPipeAssignPublicIpPtrOutputWithContext(ctx context.Context) PipeAssignPublicIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeAssignPublicIpPtrOutput)
}

func (in *pipeAssignPublicIpPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeAssignPublicIp] {
	return pulumix.Output[*PipeAssignPublicIp]{
		OutputState: in.ToPipeAssignPublicIpPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeBatchJobDependencyType string

const (
	PipeBatchJobDependencyTypeNToN       = PipeBatchJobDependencyType("N_TO_N")
	PipeBatchJobDependencyTypeSequential = PipeBatchJobDependencyType("SEQUENTIAL")
)

func (PipeBatchJobDependencyType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchJobDependencyType)(nil)).Elem()
}

func (e PipeBatchJobDependencyType) ToPipeBatchJobDependencyTypeOutput() PipeBatchJobDependencyTypeOutput {
	return pulumi.ToOutput(e).(PipeBatchJobDependencyTypeOutput)
}

func (e PipeBatchJobDependencyType) ToPipeBatchJobDependencyTypeOutputWithContext(ctx context.Context) PipeBatchJobDependencyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeBatchJobDependencyTypeOutput)
}

func (e PipeBatchJobDependencyType) ToPipeBatchJobDependencyTypePtrOutput() PipeBatchJobDependencyTypePtrOutput {
	return e.ToPipeBatchJobDependencyTypePtrOutputWithContext(context.Background())
}

func (e PipeBatchJobDependencyType) ToPipeBatchJobDependencyTypePtrOutputWithContext(ctx context.Context) PipeBatchJobDependencyTypePtrOutput {
	return PipeBatchJobDependencyType(e).ToPipeBatchJobDependencyTypeOutputWithContext(ctx).ToPipeBatchJobDependencyTypePtrOutputWithContext(ctx)
}

func (e PipeBatchJobDependencyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeBatchJobDependencyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeBatchJobDependencyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeBatchJobDependencyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeBatchJobDependencyTypeOutput struct{ *pulumi.OutputState }

func (PipeBatchJobDependencyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchJobDependencyType)(nil)).Elem()
}

func (o PipeBatchJobDependencyTypeOutput) ToPipeBatchJobDependencyTypeOutput() PipeBatchJobDependencyTypeOutput {
	return o
}

func (o PipeBatchJobDependencyTypeOutput) ToPipeBatchJobDependencyTypeOutputWithContext(ctx context.Context) PipeBatchJobDependencyTypeOutput {
	return o
}

func (o PipeBatchJobDependencyTypeOutput) ToPipeBatchJobDependencyTypePtrOutput() PipeBatchJobDependencyTypePtrOutput {
	return o.ToPipeBatchJobDependencyTypePtrOutputWithContext(context.Background())
}

func (o PipeBatchJobDependencyTypeOutput) ToPipeBatchJobDependencyTypePtrOutputWithContext(ctx context.Context) PipeBatchJobDependencyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeBatchJobDependencyType) *PipeBatchJobDependencyType {
		return &v
	}).(PipeBatchJobDependencyTypePtrOutput)
}

func (o PipeBatchJobDependencyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipeBatchJobDependencyType] {
	return pulumix.Output[PipeBatchJobDependencyType]{
		OutputState: o.OutputState,
	}
}

func (o PipeBatchJobDependencyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeBatchJobDependencyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeBatchJobDependencyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeBatchJobDependencyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeBatchJobDependencyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeBatchJobDependencyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeBatchJobDependencyTypePtrOutput struct{ *pulumi.OutputState }

func (PipeBatchJobDependencyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchJobDependencyType)(nil)).Elem()
}

func (o PipeBatchJobDependencyTypePtrOutput) ToPipeBatchJobDependencyTypePtrOutput() PipeBatchJobDependencyTypePtrOutput {
	return o
}

func (o PipeBatchJobDependencyTypePtrOutput) ToPipeBatchJobDependencyTypePtrOutputWithContext(ctx context.Context) PipeBatchJobDependencyTypePtrOutput {
	return o
}

func (o PipeBatchJobDependencyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeBatchJobDependencyType] {
	return pulumix.Output[*PipeBatchJobDependencyType]{
		OutputState: o.OutputState,
	}
}

func (o PipeBatchJobDependencyTypePtrOutput) Elem() PipeBatchJobDependencyTypeOutput {
	return o.ApplyT(func(v *PipeBatchJobDependencyType) PipeBatchJobDependencyType {
		if v != nil {
			return *v
		}
		var ret PipeBatchJobDependencyType
		return ret
	}).(PipeBatchJobDependencyTypeOutput)
}

func (o PipeBatchJobDependencyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeBatchJobDependencyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeBatchJobDependencyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeBatchJobDependencyTypeInput is an input type that accepts PipeBatchJobDependencyTypeArgs and PipeBatchJobDependencyTypeOutput values.
// You can construct a concrete instance of `PipeBatchJobDependencyTypeInput` via:
//
//	PipeBatchJobDependencyTypeArgs{...}
type PipeBatchJobDependencyTypeInput interface {
	pulumi.Input

	ToPipeBatchJobDependencyTypeOutput() PipeBatchJobDependencyTypeOutput
	ToPipeBatchJobDependencyTypeOutputWithContext(context.Context) PipeBatchJobDependencyTypeOutput
}

var pipeBatchJobDependencyTypePtrType = reflect.TypeOf((**PipeBatchJobDependencyType)(nil)).Elem()

type PipeBatchJobDependencyTypePtrInput interface {
	pulumi.Input

	ToPipeBatchJobDependencyTypePtrOutput() PipeBatchJobDependencyTypePtrOutput
	ToPipeBatchJobDependencyTypePtrOutputWithContext(context.Context) PipeBatchJobDependencyTypePtrOutput
}

type pipeBatchJobDependencyTypePtr string

func PipeBatchJobDependencyTypePtr(v string) PipeBatchJobDependencyTypePtrInput {
	return (*pipeBatchJobDependencyTypePtr)(&v)
}

func (*pipeBatchJobDependencyTypePtr) ElementType() reflect.Type {
	return pipeBatchJobDependencyTypePtrType
}

func (in *pipeBatchJobDependencyTypePtr) ToPipeBatchJobDependencyTypePtrOutput() PipeBatchJobDependencyTypePtrOutput {
	return pulumi.ToOutput(in).(PipeBatchJobDependencyTypePtrOutput)
}

func (in *pipeBatchJobDependencyTypePtr) ToPipeBatchJobDependencyTypePtrOutputWithContext(ctx context.Context) PipeBatchJobDependencyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeBatchJobDependencyTypePtrOutput)
}

func (in *pipeBatchJobDependencyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipeBatchJobDependencyType] {
	return pulumix.Output[*PipeBatchJobDependencyType]{
		OutputState: in.ToPipeBatchJobDependencyTypePtrOutputWithContext(ctx).OutputState,
	}
}

type PipeBatchResourceRequirementType string

const (
	PipeBatchResourceRequirementTypeGpu    = PipeBatchResourceRequirementType("GPU")
	PipeBatchResourceRequirementTypeMemory = PipeBatchResourceRequirementType("MEMORY")
	PipeBatchResourceRequirementTypeVcpu   = PipeBatchResourceRequirementType("VCPU")
)

func (PipeBatchResourceRequirementType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchResourceRequirementType)(nil)).Elem()
}

func (e PipeBatchResourceRequirementType) ToPipeBatchResourceRequirementTypeOutput() PipeBatchResourceRequirementTypeOutput {
	return pulumi.ToOutput(e).(PipeBatchResourceRequirementTypeOutput)
}

func (e PipeBatchResourceRequirementType) ToPipeBatchResourceRequirementTypeOutputWithContext(ctx context.Context) PipeBatchResourceRequirementTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeBatchResourceRequirementTypeOutput)
}

func (e PipeBatchResourceRequirementType) ToPipeBatchResourceRequirementTypePtrOutput() PipeBatchResourceRequirementTypePtrOutput {
	return e.ToPipeBatchResourceRequirementTypePtrOutputWithContext(context.Background())
}

func (e PipeBatchResourceRequirementType) ToPipeBatchResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeBatchResourceRequirementTypePtrOutput {
	return PipeBatchResourceRequirementType(e).ToPipeBatchResourceRequirementTypeOutputWithContext(ctx).ToPipeBatchResourceRequirementTypePtrOutputWithContext(ctx)
}

func (e PipeBatchResourceRequirementType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeBatchResourceRequirementType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeBatchResourceRequirementType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeBatchResourceRequirementType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeBatchResourceRequirementTypeOutput struct{ *pulumi.OutputState }

func (PipeBatchResourceRequirementTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchResourceRequirementType)(nil)).Elem()
}

func (o PipeBatchResourceRequirementTypeOutput) ToPipeBatchResourceRequirementTypeOutput() PipeBatchResourceRequirementTypeOutput {
	return o
}

func (o PipeBatchResourceRequirementTypeOutput) ToPipeBatchResourceRequirementTypeOutputWithContext(ctx context.Context) PipeBatchResourceRequirementTypeOutput {
	return o
}

func (o PipeBatchResourceRequirementTypeOutput) ToPipeBatchResourceRequirementTypePtrOutput() PipeBatchResourceRequirementTypePtrOutput {
	return o.ToPipeBatchResourceRequirementTypePtrOutputWithContext(context.Background())
}

func (o PipeBatchResourceRequirementTypeOutput) ToPipeBatchResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeBatchResourceRequirementTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeBatchResourceRequirementType) *PipeBatchResourceRequirementType {
		return &v
	}).(PipeBatchResourceRequirementTypePtrOutput)
}

func (o PipeBatchResourceRequirementTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipeBatchResourceRequirementType] {
	return pulumix.Output[PipeBatchResourceRequirementType]{
		OutputState: o.OutputState,
	}
}

func (o PipeBatchResourceRequirementTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeBatchResourceRequirementTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeBatchResourceRequirementType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeBatchResourceRequirementTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeBatchResourceRequirementTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeBatchResourceRequirementType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeBatchResourceRequirementTypePtrOutput struct{ *pulumi.OutputState }

func (PipeBatchResourceRequirementTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchResourceRequirementType)(nil)).Elem()
}

func (o PipeBatchResourceRequirementTypePtrOutput) ToPipeBatchResourceRequirementTypePtrOutput() PipeBatchResourceRequirementTypePtrOutput {
	return o
}

func (o PipeBatchResourceRequirementTypePtrOutput) ToPipeBatchResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeBatchResourceRequirementTypePtrOutput {
	return o
}

func (o PipeBatchResourceRequirementTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeBatchResourceRequirementType] {
	return pulumix.Output[*PipeBatchResourceRequirementType]{
		OutputState: o.OutputState,
	}
}

func (o PipeBatchResourceRequirementTypePtrOutput) Elem() PipeBatchResourceRequirementTypeOutput {
	return o.ApplyT(func(v *PipeBatchResourceRequirementType) PipeBatchResourceRequirementType {
		if v != nil {
			return *v
		}
		var ret PipeBatchResourceRequirementType
		return ret
	}).(PipeBatchResourceRequirementTypeOutput)
}

func (o PipeBatchResourceRequirementTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeBatchResourceRequirementTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeBatchResourceRequirementType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeBatchResourceRequirementTypeInput is an input type that accepts PipeBatchResourceRequirementTypeArgs and PipeBatchResourceRequirementTypeOutput values.
// You can construct a concrete instance of `PipeBatchResourceRequirementTypeInput` via:
//
//	PipeBatchResourceRequirementTypeArgs{...}
type PipeBatchResourceRequirementTypeInput interface {
	pulumi.Input

	ToPipeBatchResourceRequirementTypeOutput() PipeBatchResourceRequirementTypeOutput
	ToPipeBatchResourceRequirementTypeOutputWithContext(context.Context) PipeBatchResourceRequirementTypeOutput
}

var pipeBatchResourceRequirementTypePtrType = reflect.TypeOf((**PipeBatchResourceRequirementType)(nil)).Elem()

type PipeBatchResourceRequirementTypePtrInput interface {
	pulumi.Input

	ToPipeBatchResourceRequirementTypePtrOutput() PipeBatchResourceRequirementTypePtrOutput
	ToPipeBatchResourceRequirementTypePtrOutputWithContext(context.Context) PipeBatchResourceRequirementTypePtrOutput
}

type pipeBatchResourceRequirementTypePtr string

func PipeBatchResourceRequirementTypePtr(v string) PipeBatchResourceRequirementTypePtrInput {
	return (*pipeBatchResourceRequirementTypePtr)(&v)
}

func (*pipeBatchResourceRequirementTypePtr) ElementType() reflect.Type {
	return pipeBatchResourceRequirementTypePtrType
}

func (in *pipeBatchResourceRequirementTypePtr) ToPipeBatchResourceRequirementTypePtrOutput() PipeBatchResourceRequirementTypePtrOutput {
	return pulumi.ToOutput(in).(PipeBatchResourceRequirementTypePtrOutput)
}

func (in *pipeBatchResourceRequirementTypePtr) ToPipeBatchResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeBatchResourceRequirementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeBatchResourceRequirementTypePtrOutput)
}

func (in *pipeBatchResourceRequirementTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipeBatchResourceRequirementType] {
	return pulumix.Output[*PipeBatchResourceRequirementType]{
		OutputState: in.ToPipeBatchResourceRequirementTypePtrOutputWithContext(ctx).OutputState,
	}
}

type PipeDynamoDbStreamStartPosition string

const (
	PipeDynamoDbStreamStartPositionTrimHorizon = PipeDynamoDbStreamStartPosition("TRIM_HORIZON")
	PipeDynamoDbStreamStartPositionLatest      = PipeDynamoDbStreamStartPosition("LATEST")
)

func (PipeDynamoDbStreamStartPosition) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeDynamoDbStreamStartPosition)(nil)).Elem()
}

func (e PipeDynamoDbStreamStartPosition) ToPipeDynamoDbStreamStartPositionOutput() PipeDynamoDbStreamStartPositionOutput {
	return pulumi.ToOutput(e).(PipeDynamoDbStreamStartPositionOutput)
}

func (e PipeDynamoDbStreamStartPosition) ToPipeDynamoDbStreamStartPositionOutputWithContext(ctx context.Context) PipeDynamoDbStreamStartPositionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeDynamoDbStreamStartPositionOutput)
}

func (e PipeDynamoDbStreamStartPosition) ToPipeDynamoDbStreamStartPositionPtrOutput() PipeDynamoDbStreamStartPositionPtrOutput {
	return e.ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(context.Background())
}

func (e PipeDynamoDbStreamStartPosition) ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeDynamoDbStreamStartPositionPtrOutput {
	return PipeDynamoDbStreamStartPosition(e).ToPipeDynamoDbStreamStartPositionOutputWithContext(ctx).ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(ctx)
}

func (e PipeDynamoDbStreamStartPosition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeDynamoDbStreamStartPosition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeDynamoDbStreamStartPosition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeDynamoDbStreamStartPosition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeDynamoDbStreamStartPositionOutput struct{ *pulumi.OutputState }

func (PipeDynamoDbStreamStartPositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeDynamoDbStreamStartPosition)(nil)).Elem()
}

func (o PipeDynamoDbStreamStartPositionOutput) ToPipeDynamoDbStreamStartPositionOutput() PipeDynamoDbStreamStartPositionOutput {
	return o
}

func (o PipeDynamoDbStreamStartPositionOutput) ToPipeDynamoDbStreamStartPositionOutputWithContext(ctx context.Context) PipeDynamoDbStreamStartPositionOutput {
	return o
}

func (o PipeDynamoDbStreamStartPositionOutput) ToPipeDynamoDbStreamStartPositionPtrOutput() PipeDynamoDbStreamStartPositionPtrOutput {
	return o.ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(context.Background())
}

func (o PipeDynamoDbStreamStartPositionOutput) ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeDynamoDbStreamStartPositionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeDynamoDbStreamStartPosition) *PipeDynamoDbStreamStartPosition {
		return &v
	}).(PipeDynamoDbStreamStartPositionPtrOutput)
}

func (o PipeDynamoDbStreamStartPositionOutput) ToOutput(ctx context.Context) pulumix.Output[PipeDynamoDbStreamStartPosition] {
	return pulumix.Output[PipeDynamoDbStreamStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeDynamoDbStreamStartPositionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeDynamoDbStreamStartPositionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeDynamoDbStreamStartPosition) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeDynamoDbStreamStartPositionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeDynamoDbStreamStartPositionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeDynamoDbStreamStartPosition) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeDynamoDbStreamStartPositionPtrOutput struct{ *pulumi.OutputState }

func (PipeDynamoDbStreamStartPositionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeDynamoDbStreamStartPosition)(nil)).Elem()
}

func (o PipeDynamoDbStreamStartPositionPtrOutput) ToPipeDynamoDbStreamStartPositionPtrOutput() PipeDynamoDbStreamStartPositionPtrOutput {
	return o
}

func (o PipeDynamoDbStreamStartPositionPtrOutput) ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeDynamoDbStreamStartPositionPtrOutput {
	return o
}

func (o PipeDynamoDbStreamStartPositionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeDynamoDbStreamStartPosition] {
	return pulumix.Output[*PipeDynamoDbStreamStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeDynamoDbStreamStartPositionPtrOutput) Elem() PipeDynamoDbStreamStartPositionOutput {
	return o.ApplyT(func(v *PipeDynamoDbStreamStartPosition) PipeDynamoDbStreamStartPosition {
		if v != nil {
			return *v
		}
		var ret PipeDynamoDbStreamStartPosition
		return ret
	}).(PipeDynamoDbStreamStartPositionOutput)
}

func (o PipeDynamoDbStreamStartPositionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeDynamoDbStreamStartPositionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeDynamoDbStreamStartPosition) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeDynamoDbStreamStartPositionInput is an input type that accepts PipeDynamoDbStreamStartPositionArgs and PipeDynamoDbStreamStartPositionOutput values.
// You can construct a concrete instance of `PipeDynamoDbStreamStartPositionInput` via:
//
//	PipeDynamoDbStreamStartPositionArgs{...}
type PipeDynamoDbStreamStartPositionInput interface {
	pulumi.Input

	ToPipeDynamoDbStreamStartPositionOutput() PipeDynamoDbStreamStartPositionOutput
	ToPipeDynamoDbStreamStartPositionOutputWithContext(context.Context) PipeDynamoDbStreamStartPositionOutput
}

var pipeDynamoDbStreamStartPositionPtrType = reflect.TypeOf((**PipeDynamoDbStreamStartPosition)(nil)).Elem()

type PipeDynamoDbStreamStartPositionPtrInput interface {
	pulumi.Input

	ToPipeDynamoDbStreamStartPositionPtrOutput() PipeDynamoDbStreamStartPositionPtrOutput
	ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(context.Context) PipeDynamoDbStreamStartPositionPtrOutput
}

type pipeDynamoDbStreamStartPositionPtr string

func PipeDynamoDbStreamStartPositionPtr(v string) PipeDynamoDbStreamStartPositionPtrInput {
	return (*pipeDynamoDbStreamStartPositionPtr)(&v)
}

func (*pipeDynamoDbStreamStartPositionPtr) ElementType() reflect.Type {
	return pipeDynamoDbStreamStartPositionPtrType
}

func (in *pipeDynamoDbStreamStartPositionPtr) ToPipeDynamoDbStreamStartPositionPtrOutput() PipeDynamoDbStreamStartPositionPtrOutput {
	return pulumi.ToOutput(in).(PipeDynamoDbStreamStartPositionPtrOutput)
}

func (in *pipeDynamoDbStreamStartPositionPtr) ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeDynamoDbStreamStartPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeDynamoDbStreamStartPositionPtrOutput)
}

func (in *pipeDynamoDbStreamStartPositionPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeDynamoDbStreamStartPosition] {
	return pulumix.Output[*PipeDynamoDbStreamStartPosition]{
		OutputState: in.ToPipeDynamoDbStreamStartPositionPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeEcsEnvironmentFileType string

const (
	PipeEcsEnvironmentFileTypeS3 = PipeEcsEnvironmentFileType("s3")
)

func (PipeEcsEnvironmentFileType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEnvironmentFileType)(nil)).Elem()
}

func (e PipeEcsEnvironmentFileType) ToPipeEcsEnvironmentFileTypeOutput() PipeEcsEnvironmentFileTypeOutput {
	return pulumi.ToOutput(e).(PipeEcsEnvironmentFileTypeOutput)
}

func (e PipeEcsEnvironmentFileType) ToPipeEcsEnvironmentFileTypeOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeEcsEnvironmentFileTypeOutput)
}

func (e PipeEcsEnvironmentFileType) ToPipeEcsEnvironmentFileTypePtrOutput() PipeEcsEnvironmentFileTypePtrOutput {
	return e.ToPipeEcsEnvironmentFileTypePtrOutputWithContext(context.Background())
}

func (e PipeEcsEnvironmentFileType) ToPipeEcsEnvironmentFileTypePtrOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileTypePtrOutput {
	return PipeEcsEnvironmentFileType(e).ToPipeEcsEnvironmentFileTypeOutputWithContext(ctx).ToPipeEcsEnvironmentFileTypePtrOutputWithContext(ctx)
}

func (e PipeEcsEnvironmentFileType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeEcsEnvironmentFileType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeEcsEnvironmentFileType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeEcsEnvironmentFileType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeEcsEnvironmentFileTypeOutput struct{ *pulumi.OutputState }

func (PipeEcsEnvironmentFileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEnvironmentFileType)(nil)).Elem()
}

func (o PipeEcsEnvironmentFileTypeOutput) ToPipeEcsEnvironmentFileTypeOutput() PipeEcsEnvironmentFileTypeOutput {
	return o
}

func (o PipeEcsEnvironmentFileTypeOutput) ToPipeEcsEnvironmentFileTypeOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileTypeOutput {
	return o
}

func (o PipeEcsEnvironmentFileTypeOutput) ToPipeEcsEnvironmentFileTypePtrOutput() PipeEcsEnvironmentFileTypePtrOutput {
	return o.ToPipeEcsEnvironmentFileTypePtrOutputWithContext(context.Background())
}

func (o PipeEcsEnvironmentFileTypeOutput) ToPipeEcsEnvironmentFileTypePtrOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEcsEnvironmentFileType) *PipeEcsEnvironmentFileType {
		return &v
	}).(PipeEcsEnvironmentFileTypePtrOutput)
}

func (o PipeEcsEnvironmentFileTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipeEcsEnvironmentFileType] {
	return pulumix.Output[PipeEcsEnvironmentFileType]{
		OutputState: o.OutputState,
	}
}

func (o PipeEcsEnvironmentFileTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeEcsEnvironmentFileTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeEcsEnvironmentFileType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeEcsEnvironmentFileTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeEcsEnvironmentFileTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeEcsEnvironmentFileType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeEcsEnvironmentFileTypePtrOutput struct{ *pulumi.OutputState }

func (PipeEcsEnvironmentFileTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEcsEnvironmentFileType)(nil)).Elem()
}

func (o PipeEcsEnvironmentFileTypePtrOutput) ToPipeEcsEnvironmentFileTypePtrOutput() PipeEcsEnvironmentFileTypePtrOutput {
	return o
}

func (o PipeEcsEnvironmentFileTypePtrOutput) ToPipeEcsEnvironmentFileTypePtrOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileTypePtrOutput {
	return o
}

func (o PipeEcsEnvironmentFileTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeEcsEnvironmentFileType] {
	return pulumix.Output[*PipeEcsEnvironmentFileType]{
		OutputState: o.OutputState,
	}
}

func (o PipeEcsEnvironmentFileTypePtrOutput) Elem() PipeEcsEnvironmentFileTypeOutput {
	return o.ApplyT(func(v *PipeEcsEnvironmentFileType) PipeEcsEnvironmentFileType {
		if v != nil {
			return *v
		}
		var ret PipeEcsEnvironmentFileType
		return ret
	}).(PipeEcsEnvironmentFileTypeOutput)
}

func (o PipeEcsEnvironmentFileTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeEcsEnvironmentFileTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeEcsEnvironmentFileType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeEcsEnvironmentFileTypeInput is an input type that accepts PipeEcsEnvironmentFileTypeArgs and PipeEcsEnvironmentFileTypeOutput values.
// You can construct a concrete instance of `PipeEcsEnvironmentFileTypeInput` via:
//
//	PipeEcsEnvironmentFileTypeArgs{...}
type PipeEcsEnvironmentFileTypeInput interface {
	pulumi.Input

	ToPipeEcsEnvironmentFileTypeOutput() PipeEcsEnvironmentFileTypeOutput
	ToPipeEcsEnvironmentFileTypeOutputWithContext(context.Context) PipeEcsEnvironmentFileTypeOutput
}

var pipeEcsEnvironmentFileTypePtrType = reflect.TypeOf((**PipeEcsEnvironmentFileType)(nil)).Elem()

type PipeEcsEnvironmentFileTypePtrInput interface {
	pulumi.Input

	ToPipeEcsEnvironmentFileTypePtrOutput() PipeEcsEnvironmentFileTypePtrOutput
	ToPipeEcsEnvironmentFileTypePtrOutputWithContext(context.Context) PipeEcsEnvironmentFileTypePtrOutput
}

type pipeEcsEnvironmentFileTypePtr string

func PipeEcsEnvironmentFileTypePtr(v string) PipeEcsEnvironmentFileTypePtrInput {
	return (*pipeEcsEnvironmentFileTypePtr)(&v)
}

func (*pipeEcsEnvironmentFileTypePtr) ElementType() reflect.Type {
	return pipeEcsEnvironmentFileTypePtrType
}

func (in *pipeEcsEnvironmentFileTypePtr) ToPipeEcsEnvironmentFileTypePtrOutput() PipeEcsEnvironmentFileTypePtrOutput {
	return pulumi.ToOutput(in).(PipeEcsEnvironmentFileTypePtrOutput)
}

func (in *pipeEcsEnvironmentFileTypePtr) ToPipeEcsEnvironmentFileTypePtrOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeEcsEnvironmentFileTypePtrOutput)
}

func (in *pipeEcsEnvironmentFileTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipeEcsEnvironmentFileType] {
	return pulumix.Output[*PipeEcsEnvironmentFileType]{
		OutputState: in.ToPipeEcsEnvironmentFileTypePtrOutputWithContext(ctx).OutputState,
	}
}

type PipeEcsResourceRequirementType string

const (
	PipeEcsResourceRequirementTypeGpu                  = PipeEcsResourceRequirementType("GPU")
	PipeEcsResourceRequirementTypeInferenceAccelerator = PipeEcsResourceRequirementType("InferenceAccelerator")
)

func (PipeEcsResourceRequirementType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsResourceRequirementType)(nil)).Elem()
}

func (e PipeEcsResourceRequirementType) ToPipeEcsResourceRequirementTypeOutput() PipeEcsResourceRequirementTypeOutput {
	return pulumi.ToOutput(e).(PipeEcsResourceRequirementTypeOutput)
}

func (e PipeEcsResourceRequirementType) ToPipeEcsResourceRequirementTypeOutputWithContext(ctx context.Context) PipeEcsResourceRequirementTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeEcsResourceRequirementTypeOutput)
}

func (e PipeEcsResourceRequirementType) ToPipeEcsResourceRequirementTypePtrOutput() PipeEcsResourceRequirementTypePtrOutput {
	return e.ToPipeEcsResourceRequirementTypePtrOutputWithContext(context.Background())
}

func (e PipeEcsResourceRequirementType) ToPipeEcsResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeEcsResourceRequirementTypePtrOutput {
	return PipeEcsResourceRequirementType(e).ToPipeEcsResourceRequirementTypeOutputWithContext(ctx).ToPipeEcsResourceRequirementTypePtrOutputWithContext(ctx)
}

func (e PipeEcsResourceRequirementType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeEcsResourceRequirementType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeEcsResourceRequirementType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeEcsResourceRequirementType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeEcsResourceRequirementTypeOutput struct{ *pulumi.OutputState }

func (PipeEcsResourceRequirementTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsResourceRequirementType)(nil)).Elem()
}

func (o PipeEcsResourceRequirementTypeOutput) ToPipeEcsResourceRequirementTypeOutput() PipeEcsResourceRequirementTypeOutput {
	return o
}

func (o PipeEcsResourceRequirementTypeOutput) ToPipeEcsResourceRequirementTypeOutputWithContext(ctx context.Context) PipeEcsResourceRequirementTypeOutput {
	return o
}

func (o PipeEcsResourceRequirementTypeOutput) ToPipeEcsResourceRequirementTypePtrOutput() PipeEcsResourceRequirementTypePtrOutput {
	return o.ToPipeEcsResourceRequirementTypePtrOutputWithContext(context.Background())
}

func (o PipeEcsResourceRequirementTypeOutput) ToPipeEcsResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeEcsResourceRequirementTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEcsResourceRequirementType) *PipeEcsResourceRequirementType {
		return &v
	}).(PipeEcsResourceRequirementTypePtrOutput)
}

func (o PipeEcsResourceRequirementTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipeEcsResourceRequirementType] {
	return pulumix.Output[PipeEcsResourceRequirementType]{
		OutputState: o.OutputState,
	}
}

func (o PipeEcsResourceRequirementTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeEcsResourceRequirementTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeEcsResourceRequirementType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeEcsResourceRequirementTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeEcsResourceRequirementTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeEcsResourceRequirementType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeEcsResourceRequirementTypePtrOutput struct{ *pulumi.OutputState }

func (PipeEcsResourceRequirementTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEcsResourceRequirementType)(nil)).Elem()
}

func (o PipeEcsResourceRequirementTypePtrOutput) ToPipeEcsResourceRequirementTypePtrOutput() PipeEcsResourceRequirementTypePtrOutput {
	return o
}

func (o PipeEcsResourceRequirementTypePtrOutput) ToPipeEcsResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeEcsResourceRequirementTypePtrOutput {
	return o
}

func (o PipeEcsResourceRequirementTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeEcsResourceRequirementType] {
	return pulumix.Output[*PipeEcsResourceRequirementType]{
		OutputState: o.OutputState,
	}
}

func (o PipeEcsResourceRequirementTypePtrOutput) Elem() PipeEcsResourceRequirementTypeOutput {
	return o.ApplyT(func(v *PipeEcsResourceRequirementType) PipeEcsResourceRequirementType {
		if v != nil {
			return *v
		}
		var ret PipeEcsResourceRequirementType
		return ret
	}).(PipeEcsResourceRequirementTypeOutput)
}

func (o PipeEcsResourceRequirementTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeEcsResourceRequirementTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeEcsResourceRequirementType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeEcsResourceRequirementTypeInput is an input type that accepts PipeEcsResourceRequirementTypeArgs and PipeEcsResourceRequirementTypeOutput values.
// You can construct a concrete instance of `PipeEcsResourceRequirementTypeInput` via:
//
//	PipeEcsResourceRequirementTypeArgs{...}
type PipeEcsResourceRequirementTypeInput interface {
	pulumi.Input

	ToPipeEcsResourceRequirementTypeOutput() PipeEcsResourceRequirementTypeOutput
	ToPipeEcsResourceRequirementTypeOutputWithContext(context.Context) PipeEcsResourceRequirementTypeOutput
}

var pipeEcsResourceRequirementTypePtrType = reflect.TypeOf((**PipeEcsResourceRequirementType)(nil)).Elem()

type PipeEcsResourceRequirementTypePtrInput interface {
	pulumi.Input

	ToPipeEcsResourceRequirementTypePtrOutput() PipeEcsResourceRequirementTypePtrOutput
	ToPipeEcsResourceRequirementTypePtrOutputWithContext(context.Context) PipeEcsResourceRequirementTypePtrOutput
}

type pipeEcsResourceRequirementTypePtr string

func PipeEcsResourceRequirementTypePtr(v string) PipeEcsResourceRequirementTypePtrInput {
	return (*pipeEcsResourceRequirementTypePtr)(&v)
}

func (*pipeEcsResourceRequirementTypePtr) ElementType() reflect.Type {
	return pipeEcsResourceRequirementTypePtrType
}

func (in *pipeEcsResourceRequirementTypePtr) ToPipeEcsResourceRequirementTypePtrOutput() PipeEcsResourceRequirementTypePtrOutput {
	return pulumi.ToOutput(in).(PipeEcsResourceRequirementTypePtrOutput)
}

func (in *pipeEcsResourceRequirementTypePtr) ToPipeEcsResourceRequirementTypePtrOutputWithContext(ctx context.Context) PipeEcsResourceRequirementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeEcsResourceRequirementTypePtrOutput)
}

func (in *pipeEcsResourceRequirementTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipeEcsResourceRequirementType] {
	return pulumix.Output[*PipeEcsResourceRequirementType]{
		OutputState: in.ToPipeEcsResourceRequirementTypePtrOutputWithContext(ctx).OutputState,
	}
}

type PipeIncludeExecutionDataOption string

const (
	PipeIncludeExecutionDataOptionAll = PipeIncludeExecutionDataOption("ALL")
)

func (PipeIncludeExecutionDataOption) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeIncludeExecutionDataOption)(nil)).Elem()
}

func (e PipeIncludeExecutionDataOption) ToPipeIncludeExecutionDataOptionOutput() PipeIncludeExecutionDataOptionOutput {
	return pulumi.ToOutput(e).(PipeIncludeExecutionDataOptionOutput)
}

func (e PipeIncludeExecutionDataOption) ToPipeIncludeExecutionDataOptionOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeIncludeExecutionDataOptionOutput)
}

func (e PipeIncludeExecutionDataOption) ToPipeIncludeExecutionDataOptionPtrOutput() PipeIncludeExecutionDataOptionPtrOutput {
	return e.ToPipeIncludeExecutionDataOptionPtrOutputWithContext(context.Background())
}

func (e PipeIncludeExecutionDataOption) ToPipeIncludeExecutionDataOptionPtrOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionPtrOutput {
	return PipeIncludeExecutionDataOption(e).ToPipeIncludeExecutionDataOptionOutputWithContext(ctx).ToPipeIncludeExecutionDataOptionPtrOutputWithContext(ctx)
}

func (e PipeIncludeExecutionDataOption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeIncludeExecutionDataOption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeIncludeExecutionDataOption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeIncludeExecutionDataOption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeIncludeExecutionDataOptionOutput struct{ *pulumi.OutputState }

func (PipeIncludeExecutionDataOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeIncludeExecutionDataOption)(nil)).Elem()
}

func (o PipeIncludeExecutionDataOptionOutput) ToPipeIncludeExecutionDataOptionOutput() PipeIncludeExecutionDataOptionOutput {
	return o
}

func (o PipeIncludeExecutionDataOptionOutput) ToPipeIncludeExecutionDataOptionOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionOutput {
	return o
}

func (o PipeIncludeExecutionDataOptionOutput) ToPipeIncludeExecutionDataOptionPtrOutput() PipeIncludeExecutionDataOptionPtrOutput {
	return o.ToPipeIncludeExecutionDataOptionPtrOutputWithContext(context.Background())
}

func (o PipeIncludeExecutionDataOptionOutput) ToPipeIncludeExecutionDataOptionPtrOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeIncludeExecutionDataOption) *PipeIncludeExecutionDataOption {
		return &v
	}).(PipeIncludeExecutionDataOptionPtrOutput)
}

func (o PipeIncludeExecutionDataOptionOutput) ToOutput(ctx context.Context) pulumix.Output[PipeIncludeExecutionDataOption] {
	return pulumix.Output[PipeIncludeExecutionDataOption]{
		OutputState: o.OutputState,
	}
}

func (o PipeIncludeExecutionDataOptionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeIncludeExecutionDataOptionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeIncludeExecutionDataOption) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeIncludeExecutionDataOptionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeIncludeExecutionDataOptionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeIncludeExecutionDataOption) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeIncludeExecutionDataOptionPtrOutput struct{ *pulumi.OutputState }

func (PipeIncludeExecutionDataOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeIncludeExecutionDataOption)(nil)).Elem()
}

func (o PipeIncludeExecutionDataOptionPtrOutput) ToPipeIncludeExecutionDataOptionPtrOutput() PipeIncludeExecutionDataOptionPtrOutput {
	return o
}

func (o PipeIncludeExecutionDataOptionPtrOutput) ToPipeIncludeExecutionDataOptionPtrOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionPtrOutput {
	return o
}

func (o PipeIncludeExecutionDataOptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeIncludeExecutionDataOption] {
	return pulumix.Output[*PipeIncludeExecutionDataOption]{
		OutputState: o.OutputState,
	}
}

func (o PipeIncludeExecutionDataOptionPtrOutput) Elem() PipeIncludeExecutionDataOptionOutput {
	return o.ApplyT(func(v *PipeIncludeExecutionDataOption) PipeIncludeExecutionDataOption {
		if v != nil {
			return *v
		}
		var ret PipeIncludeExecutionDataOption
		return ret
	}).(PipeIncludeExecutionDataOptionOutput)
}

func (o PipeIncludeExecutionDataOptionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeIncludeExecutionDataOptionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeIncludeExecutionDataOption) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeIncludeExecutionDataOptionInput is an input type that accepts PipeIncludeExecutionDataOptionArgs and PipeIncludeExecutionDataOptionOutput values.
// You can construct a concrete instance of `PipeIncludeExecutionDataOptionInput` via:
//
//	PipeIncludeExecutionDataOptionArgs{...}
type PipeIncludeExecutionDataOptionInput interface {
	pulumi.Input

	ToPipeIncludeExecutionDataOptionOutput() PipeIncludeExecutionDataOptionOutput
	ToPipeIncludeExecutionDataOptionOutputWithContext(context.Context) PipeIncludeExecutionDataOptionOutput
}

var pipeIncludeExecutionDataOptionPtrType = reflect.TypeOf((**PipeIncludeExecutionDataOption)(nil)).Elem()

type PipeIncludeExecutionDataOptionPtrInput interface {
	pulumi.Input

	ToPipeIncludeExecutionDataOptionPtrOutput() PipeIncludeExecutionDataOptionPtrOutput
	ToPipeIncludeExecutionDataOptionPtrOutputWithContext(context.Context) PipeIncludeExecutionDataOptionPtrOutput
}

type pipeIncludeExecutionDataOptionPtr string

func PipeIncludeExecutionDataOptionPtr(v string) PipeIncludeExecutionDataOptionPtrInput {
	return (*pipeIncludeExecutionDataOptionPtr)(&v)
}

func (*pipeIncludeExecutionDataOptionPtr) ElementType() reflect.Type {
	return pipeIncludeExecutionDataOptionPtrType
}

func (in *pipeIncludeExecutionDataOptionPtr) ToPipeIncludeExecutionDataOptionPtrOutput() PipeIncludeExecutionDataOptionPtrOutput {
	return pulumi.ToOutput(in).(PipeIncludeExecutionDataOptionPtrOutput)
}

func (in *pipeIncludeExecutionDataOptionPtr) ToPipeIncludeExecutionDataOptionPtrOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeIncludeExecutionDataOptionPtrOutput)
}

func (in *pipeIncludeExecutionDataOptionPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeIncludeExecutionDataOption] {
	return pulumix.Output[*PipeIncludeExecutionDataOption]{
		OutputState: in.ToPipeIncludeExecutionDataOptionPtrOutputWithContext(ctx).OutputState,
	}
}

// PipeIncludeExecutionDataOptionArrayInput is an input type that accepts PipeIncludeExecutionDataOptionArray and PipeIncludeExecutionDataOptionArrayOutput values.
// You can construct a concrete instance of `PipeIncludeExecutionDataOptionArrayInput` via:
//
//	PipeIncludeExecutionDataOptionArray{ PipeIncludeExecutionDataOptionArgs{...} }
type PipeIncludeExecutionDataOptionArrayInput interface {
	pulumi.Input

	ToPipeIncludeExecutionDataOptionArrayOutput() PipeIncludeExecutionDataOptionArrayOutput
	ToPipeIncludeExecutionDataOptionArrayOutputWithContext(context.Context) PipeIncludeExecutionDataOptionArrayOutput
}

type PipeIncludeExecutionDataOptionArray []PipeIncludeExecutionDataOption

func (PipeIncludeExecutionDataOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeIncludeExecutionDataOption)(nil)).Elem()
}

func (i PipeIncludeExecutionDataOptionArray) ToPipeIncludeExecutionDataOptionArrayOutput() PipeIncludeExecutionDataOptionArrayOutput {
	return i.ToPipeIncludeExecutionDataOptionArrayOutputWithContext(context.Background())
}

func (i PipeIncludeExecutionDataOptionArray) ToPipeIncludeExecutionDataOptionArrayOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeIncludeExecutionDataOptionArrayOutput)
}

func (i PipeIncludeExecutionDataOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]PipeIncludeExecutionDataOption] {
	return pulumix.Output[[]PipeIncludeExecutionDataOption]{
		OutputState: i.ToPipeIncludeExecutionDataOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type PipeIncludeExecutionDataOptionArrayOutput struct{ *pulumi.OutputState }

func (PipeIncludeExecutionDataOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeIncludeExecutionDataOption)(nil)).Elem()
}

func (o PipeIncludeExecutionDataOptionArrayOutput) ToPipeIncludeExecutionDataOptionArrayOutput() PipeIncludeExecutionDataOptionArrayOutput {
	return o
}

func (o PipeIncludeExecutionDataOptionArrayOutput) ToPipeIncludeExecutionDataOptionArrayOutputWithContext(ctx context.Context) PipeIncludeExecutionDataOptionArrayOutput {
	return o
}

func (o PipeIncludeExecutionDataOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PipeIncludeExecutionDataOption] {
	return pulumix.Output[[]PipeIncludeExecutionDataOption]{
		OutputState: o.OutputState,
	}
}

func (o PipeIncludeExecutionDataOptionArrayOutput) Index(i pulumi.IntInput) PipeIncludeExecutionDataOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeIncludeExecutionDataOption {
		return vs[0].([]PipeIncludeExecutionDataOption)[vs[1].(int)]
	}).(PipeIncludeExecutionDataOptionOutput)
}

type PipeKinesisStreamStartPosition string

const (
	PipeKinesisStreamStartPositionTrimHorizon = PipeKinesisStreamStartPosition("TRIM_HORIZON")
	PipeKinesisStreamStartPositionLatest      = PipeKinesisStreamStartPosition("LATEST")
	PipeKinesisStreamStartPositionAtTimestamp = PipeKinesisStreamStartPosition("AT_TIMESTAMP")
)

func (PipeKinesisStreamStartPosition) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeKinesisStreamStartPosition)(nil)).Elem()
}

func (e PipeKinesisStreamStartPosition) ToPipeKinesisStreamStartPositionOutput() PipeKinesisStreamStartPositionOutput {
	return pulumi.ToOutput(e).(PipeKinesisStreamStartPositionOutput)
}

func (e PipeKinesisStreamStartPosition) ToPipeKinesisStreamStartPositionOutputWithContext(ctx context.Context) PipeKinesisStreamStartPositionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeKinesisStreamStartPositionOutput)
}

func (e PipeKinesisStreamStartPosition) ToPipeKinesisStreamStartPositionPtrOutput() PipeKinesisStreamStartPositionPtrOutput {
	return e.ToPipeKinesisStreamStartPositionPtrOutputWithContext(context.Background())
}

func (e PipeKinesisStreamStartPosition) ToPipeKinesisStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeKinesisStreamStartPositionPtrOutput {
	return PipeKinesisStreamStartPosition(e).ToPipeKinesisStreamStartPositionOutputWithContext(ctx).ToPipeKinesisStreamStartPositionPtrOutputWithContext(ctx)
}

func (e PipeKinesisStreamStartPosition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeKinesisStreamStartPosition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeKinesisStreamStartPosition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeKinesisStreamStartPosition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeKinesisStreamStartPositionOutput struct{ *pulumi.OutputState }

func (PipeKinesisStreamStartPositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeKinesisStreamStartPosition)(nil)).Elem()
}

func (o PipeKinesisStreamStartPositionOutput) ToPipeKinesisStreamStartPositionOutput() PipeKinesisStreamStartPositionOutput {
	return o
}

func (o PipeKinesisStreamStartPositionOutput) ToPipeKinesisStreamStartPositionOutputWithContext(ctx context.Context) PipeKinesisStreamStartPositionOutput {
	return o
}

func (o PipeKinesisStreamStartPositionOutput) ToPipeKinesisStreamStartPositionPtrOutput() PipeKinesisStreamStartPositionPtrOutput {
	return o.ToPipeKinesisStreamStartPositionPtrOutputWithContext(context.Background())
}

func (o PipeKinesisStreamStartPositionOutput) ToPipeKinesisStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeKinesisStreamStartPositionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeKinesisStreamStartPosition) *PipeKinesisStreamStartPosition {
		return &v
	}).(PipeKinesisStreamStartPositionPtrOutput)
}

func (o PipeKinesisStreamStartPositionOutput) ToOutput(ctx context.Context) pulumix.Output[PipeKinesisStreamStartPosition] {
	return pulumix.Output[PipeKinesisStreamStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeKinesisStreamStartPositionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeKinesisStreamStartPositionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeKinesisStreamStartPosition) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeKinesisStreamStartPositionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeKinesisStreamStartPositionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeKinesisStreamStartPosition) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeKinesisStreamStartPositionPtrOutput struct{ *pulumi.OutputState }

func (PipeKinesisStreamStartPositionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeKinesisStreamStartPosition)(nil)).Elem()
}

func (o PipeKinesisStreamStartPositionPtrOutput) ToPipeKinesisStreamStartPositionPtrOutput() PipeKinesisStreamStartPositionPtrOutput {
	return o
}

func (o PipeKinesisStreamStartPositionPtrOutput) ToPipeKinesisStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeKinesisStreamStartPositionPtrOutput {
	return o
}

func (o PipeKinesisStreamStartPositionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeKinesisStreamStartPosition] {
	return pulumix.Output[*PipeKinesisStreamStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeKinesisStreamStartPositionPtrOutput) Elem() PipeKinesisStreamStartPositionOutput {
	return o.ApplyT(func(v *PipeKinesisStreamStartPosition) PipeKinesisStreamStartPosition {
		if v != nil {
			return *v
		}
		var ret PipeKinesisStreamStartPosition
		return ret
	}).(PipeKinesisStreamStartPositionOutput)
}

func (o PipeKinesisStreamStartPositionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeKinesisStreamStartPositionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeKinesisStreamStartPosition) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeKinesisStreamStartPositionInput is an input type that accepts PipeKinesisStreamStartPositionArgs and PipeKinesisStreamStartPositionOutput values.
// You can construct a concrete instance of `PipeKinesisStreamStartPositionInput` via:
//
//	PipeKinesisStreamStartPositionArgs{...}
type PipeKinesisStreamStartPositionInput interface {
	pulumi.Input

	ToPipeKinesisStreamStartPositionOutput() PipeKinesisStreamStartPositionOutput
	ToPipeKinesisStreamStartPositionOutputWithContext(context.Context) PipeKinesisStreamStartPositionOutput
}

var pipeKinesisStreamStartPositionPtrType = reflect.TypeOf((**PipeKinesisStreamStartPosition)(nil)).Elem()

type PipeKinesisStreamStartPositionPtrInput interface {
	pulumi.Input

	ToPipeKinesisStreamStartPositionPtrOutput() PipeKinesisStreamStartPositionPtrOutput
	ToPipeKinesisStreamStartPositionPtrOutputWithContext(context.Context) PipeKinesisStreamStartPositionPtrOutput
}

type pipeKinesisStreamStartPositionPtr string

func PipeKinesisStreamStartPositionPtr(v string) PipeKinesisStreamStartPositionPtrInput {
	return (*pipeKinesisStreamStartPositionPtr)(&v)
}

func (*pipeKinesisStreamStartPositionPtr) ElementType() reflect.Type {
	return pipeKinesisStreamStartPositionPtrType
}

func (in *pipeKinesisStreamStartPositionPtr) ToPipeKinesisStreamStartPositionPtrOutput() PipeKinesisStreamStartPositionPtrOutput {
	return pulumi.ToOutput(in).(PipeKinesisStreamStartPositionPtrOutput)
}

func (in *pipeKinesisStreamStartPositionPtr) ToPipeKinesisStreamStartPositionPtrOutputWithContext(ctx context.Context) PipeKinesisStreamStartPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeKinesisStreamStartPositionPtrOutput)
}

func (in *pipeKinesisStreamStartPositionPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeKinesisStreamStartPosition] {
	return pulumix.Output[*PipeKinesisStreamStartPosition]{
		OutputState: in.ToPipeKinesisStreamStartPositionPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeLaunchType string

const (
	PipeLaunchTypeEc2      = PipeLaunchType("EC2")
	PipeLaunchTypeFargate  = PipeLaunchType("FARGATE")
	PipeLaunchTypeExternal = PipeLaunchType("EXTERNAL")
)

func (PipeLaunchType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeLaunchType)(nil)).Elem()
}

func (e PipeLaunchType) ToPipeLaunchTypeOutput() PipeLaunchTypeOutput {
	return pulumi.ToOutput(e).(PipeLaunchTypeOutput)
}

func (e PipeLaunchType) ToPipeLaunchTypeOutputWithContext(ctx context.Context) PipeLaunchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeLaunchTypeOutput)
}

func (e PipeLaunchType) ToPipeLaunchTypePtrOutput() PipeLaunchTypePtrOutput {
	return e.ToPipeLaunchTypePtrOutputWithContext(context.Background())
}

func (e PipeLaunchType) ToPipeLaunchTypePtrOutputWithContext(ctx context.Context) PipeLaunchTypePtrOutput {
	return PipeLaunchType(e).ToPipeLaunchTypeOutputWithContext(ctx).ToPipeLaunchTypePtrOutputWithContext(ctx)
}

func (e PipeLaunchType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeLaunchType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeLaunchType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeLaunchType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeLaunchTypeOutput struct{ *pulumi.OutputState }

func (PipeLaunchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeLaunchType)(nil)).Elem()
}

func (o PipeLaunchTypeOutput) ToPipeLaunchTypeOutput() PipeLaunchTypeOutput {
	return o
}

func (o PipeLaunchTypeOutput) ToPipeLaunchTypeOutputWithContext(ctx context.Context) PipeLaunchTypeOutput {
	return o
}

func (o PipeLaunchTypeOutput) ToPipeLaunchTypePtrOutput() PipeLaunchTypePtrOutput {
	return o.ToPipeLaunchTypePtrOutputWithContext(context.Background())
}

func (o PipeLaunchTypeOutput) ToPipeLaunchTypePtrOutputWithContext(ctx context.Context) PipeLaunchTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeLaunchType) *PipeLaunchType {
		return &v
	}).(PipeLaunchTypePtrOutput)
}

func (o PipeLaunchTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipeLaunchType] {
	return pulumix.Output[PipeLaunchType]{
		OutputState: o.OutputState,
	}
}

func (o PipeLaunchTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeLaunchTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeLaunchType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeLaunchTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeLaunchTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeLaunchType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeLaunchTypePtrOutput struct{ *pulumi.OutputState }

func (PipeLaunchTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeLaunchType)(nil)).Elem()
}

func (o PipeLaunchTypePtrOutput) ToPipeLaunchTypePtrOutput() PipeLaunchTypePtrOutput {
	return o
}

func (o PipeLaunchTypePtrOutput) ToPipeLaunchTypePtrOutputWithContext(ctx context.Context) PipeLaunchTypePtrOutput {
	return o
}

func (o PipeLaunchTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeLaunchType] {
	return pulumix.Output[*PipeLaunchType]{
		OutputState: o.OutputState,
	}
}

func (o PipeLaunchTypePtrOutput) Elem() PipeLaunchTypeOutput {
	return o.ApplyT(func(v *PipeLaunchType) PipeLaunchType {
		if v != nil {
			return *v
		}
		var ret PipeLaunchType
		return ret
	}).(PipeLaunchTypeOutput)
}

func (o PipeLaunchTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeLaunchTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeLaunchType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeLaunchTypeInput is an input type that accepts PipeLaunchTypeArgs and PipeLaunchTypeOutput values.
// You can construct a concrete instance of `PipeLaunchTypeInput` via:
//
//	PipeLaunchTypeArgs{...}
type PipeLaunchTypeInput interface {
	pulumi.Input

	ToPipeLaunchTypeOutput() PipeLaunchTypeOutput
	ToPipeLaunchTypeOutputWithContext(context.Context) PipeLaunchTypeOutput
}

var pipeLaunchTypePtrType = reflect.TypeOf((**PipeLaunchType)(nil)).Elem()

type PipeLaunchTypePtrInput interface {
	pulumi.Input

	ToPipeLaunchTypePtrOutput() PipeLaunchTypePtrOutput
	ToPipeLaunchTypePtrOutputWithContext(context.Context) PipeLaunchTypePtrOutput
}

type pipeLaunchTypePtr string

func PipeLaunchTypePtr(v string) PipeLaunchTypePtrInput {
	return (*pipeLaunchTypePtr)(&v)
}

func (*pipeLaunchTypePtr) ElementType() reflect.Type {
	return pipeLaunchTypePtrType
}

func (in *pipeLaunchTypePtr) ToPipeLaunchTypePtrOutput() PipeLaunchTypePtrOutput {
	return pulumi.ToOutput(in).(PipeLaunchTypePtrOutput)
}

func (in *pipeLaunchTypePtr) ToPipeLaunchTypePtrOutputWithContext(ctx context.Context) PipeLaunchTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeLaunchTypePtrOutput)
}

func (in *pipeLaunchTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipeLaunchType] {
	return pulumix.Output[*PipeLaunchType]{
		OutputState: in.ToPipeLaunchTypePtrOutputWithContext(ctx).OutputState,
	}
}

type PipeLogLevel string

const (
	PipeLogLevelOff   = PipeLogLevel("OFF")
	PipeLogLevelError = PipeLogLevel("ERROR")
	PipeLogLevelInfo  = PipeLogLevel("INFO")
	PipeLogLevelTrace = PipeLogLevel("TRACE")
)

func (PipeLogLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeLogLevel)(nil)).Elem()
}

func (e PipeLogLevel) ToPipeLogLevelOutput() PipeLogLevelOutput {
	return pulumi.ToOutput(e).(PipeLogLevelOutput)
}

func (e PipeLogLevel) ToPipeLogLevelOutputWithContext(ctx context.Context) PipeLogLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeLogLevelOutput)
}

func (e PipeLogLevel) ToPipeLogLevelPtrOutput() PipeLogLevelPtrOutput {
	return e.ToPipeLogLevelPtrOutputWithContext(context.Background())
}

func (e PipeLogLevel) ToPipeLogLevelPtrOutputWithContext(ctx context.Context) PipeLogLevelPtrOutput {
	return PipeLogLevel(e).ToPipeLogLevelOutputWithContext(ctx).ToPipeLogLevelPtrOutputWithContext(ctx)
}

func (e PipeLogLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeLogLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeLogLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeLogLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeLogLevelOutput struct{ *pulumi.OutputState }

func (PipeLogLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeLogLevel)(nil)).Elem()
}

func (o PipeLogLevelOutput) ToPipeLogLevelOutput() PipeLogLevelOutput {
	return o
}

func (o PipeLogLevelOutput) ToPipeLogLevelOutputWithContext(ctx context.Context) PipeLogLevelOutput {
	return o
}

func (o PipeLogLevelOutput) ToPipeLogLevelPtrOutput() PipeLogLevelPtrOutput {
	return o.ToPipeLogLevelPtrOutputWithContext(context.Background())
}

func (o PipeLogLevelOutput) ToPipeLogLevelPtrOutputWithContext(ctx context.Context) PipeLogLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeLogLevel) *PipeLogLevel {
		return &v
	}).(PipeLogLevelPtrOutput)
}

func (o PipeLogLevelOutput) ToOutput(ctx context.Context) pulumix.Output[PipeLogLevel] {
	return pulumix.Output[PipeLogLevel]{
		OutputState: o.OutputState,
	}
}

func (o PipeLogLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeLogLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeLogLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeLogLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeLogLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeLogLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeLogLevelPtrOutput struct{ *pulumi.OutputState }

func (PipeLogLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeLogLevel)(nil)).Elem()
}

func (o PipeLogLevelPtrOutput) ToPipeLogLevelPtrOutput() PipeLogLevelPtrOutput {
	return o
}

func (o PipeLogLevelPtrOutput) ToPipeLogLevelPtrOutputWithContext(ctx context.Context) PipeLogLevelPtrOutput {
	return o
}

func (o PipeLogLevelPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeLogLevel] {
	return pulumix.Output[*PipeLogLevel]{
		OutputState: o.OutputState,
	}
}

func (o PipeLogLevelPtrOutput) Elem() PipeLogLevelOutput {
	return o.ApplyT(func(v *PipeLogLevel) PipeLogLevel {
		if v != nil {
			return *v
		}
		var ret PipeLogLevel
		return ret
	}).(PipeLogLevelOutput)
}

func (o PipeLogLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeLogLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeLogLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeLogLevelInput is an input type that accepts PipeLogLevelArgs and PipeLogLevelOutput values.
// You can construct a concrete instance of `PipeLogLevelInput` via:
//
//	PipeLogLevelArgs{...}
type PipeLogLevelInput interface {
	pulumi.Input

	ToPipeLogLevelOutput() PipeLogLevelOutput
	ToPipeLogLevelOutputWithContext(context.Context) PipeLogLevelOutput
}

var pipeLogLevelPtrType = reflect.TypeOf((**PipeLogLevel)(nil)).Elem()

type PipeLogLevelPtrInput interface {
	pulumi.Input

	ToPipeLogLevelPtrOutput() PipeLogLevelPtrOutput
	ToPipeLogLevelPtrOutputWithContext(context.Context) PipeLogLevelPtrOutput
}

type pipeLogLevelPtr string

func PipeLogLevelPtr(v string) PipeLogLevelPtrInput {
	return (*pipeLogLevelPtr)(&v)
}

func (*pipeLogLevelPtr) ElementType() reflect.Type {
	return pipeLogLevelPtrType
}

func (in *pipeLogLevelPtr) ToPipeLogLevelPtrOutput() PipeLogLevelPtrOutput {
	return pulumi.ToOutput(in).(PipeLogLevelPtrOutput)
}

func (in *pipeLogLevelPtr) ToPipeLogLevelPtrOutputWithContext(ctx context.Context) PipeLogLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeLogLevelPtrOutput)
}

func (in *pipeLogLevelPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeLogLevel] {
	return pulumix.Output[*PipeLogLevel]{
		OutputState: in.ToPipeLogLevelPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeMskStartPosition string

const (
	PipeMskStartPositionTrimHorizon = PipeMskStartPosition("TRIM_HORIZON")
	PipeMskStartPositionLatest      = PipeMskStartPosition("LATEST")
)

func (PipeMskStartPosition) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMskStartPosition)(nil)).Elem()
}

func (e PipeMskStartPosition) ToPipeMskStartPositionOutput() PipeMskStartPositionOutput {
	return pulumi.ToOutput(e).(PipeMskStartPositionOutput)
}

func (e PipeMskStartPosition) ToPipeMskStartPositionOutputWithContext(ctx context.Context) PipeMskStartPositionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeMskStartPositionOutput)
}

func (e PipeMskStartPosition) ToPipeMskStartPositionPtrOutput() PipeMskStartPositionPtrOutput {
	return e.ToPipeMskStartPositionPtrOutputWithContext(context.Background())
}

func (e PipeMskStartPosition) ToPipeMskStartPositionPtrOutputWithContext(ctx context.Context) PipeMskStartPositionPtrOutput {
	return PipeMskStartPosition(e).ToPipeMskStartPositionOutputWithContext(ctx).ToPipeMskStartPositionPtrOutputWithContext(ctx)
}

func (e PipeMskStartPosition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeMskStartPosition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeMskStartPosition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeMskStartPosition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeMskStartPositionOutput struct{ *pulumi.OutputState }

func (PipeMskStartPositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMskStartPosition)(nil)).Elem()
}

func (o PipeMskStartPositionOutput) ToPipeMskStartPositionOutput() PipeMskStartPositionOutput {
	return o
}

func (o PipeMskStartPositionOutput) ToPipeMskStartPositionOutputWithContext(ctx context.Context) PipeMskStartPositionOutput {
	return o
}

func (o PipeMskStartPositionOutput) ToPipeMskStartPositionPtrOutput() PipeMskStartPositionPtrOutput {
	return o.ToPipeMskStartPositionPtrOutputWithContext(context.Background())
}

func (o PipeMskStartPositionOutput) ToPipeMskStartPositionPtrOutputWithContext(ctx context.Context) PipeMskStartPositionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeMskStartPosition) *PipeMskStartPosition {
		return &v
	}).(PipeMskStartPositionPtrOutput)
}

func (o PipeMskStartPositionOutput) ToOutput(ctx context.Context) pulumix.Output[PipeMskStartPosition] {
	return pulumix.Output[PipeMskStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeMskStartPositionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeMskStartPositionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeMskStartPosition) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeMskStartPositionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeMskStartPositionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeMskStartPosition) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeMskStartPositionPtrOutput struct{ *pulumi.OutputState }

func (PipeMskStartPositionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeMskStartPosition)(nil)).Elem()
}

func (o PipeMskStartPositionPtrOutput) ToPipeMskStartPositionPtrOutput() PipeMskStartPositionPtrOutput {
	return o
}

func (o PipeMskStartPositionPtrOutput) ToPipeMskStartPositionPtrOutputWithContext(ctx context.Context) PipeMskStartPositionPtrOutput {
	return o
}

func (o PipeMskStartPositionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeMskStartPosition] {
	return pulumix.Output[*PipeMskStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeMskStartPositionPtrOutput) Elem() PipeMskStartPositionOutput {
	return o.ApplyT(func(v *PipeMskStartPosition) PipeMskStartPosition {
		if v != nil {
			return *v
		}
		var ret PipeMskStartPosition
		return ret
	}).(PipeMskStartPositionOutput)
}

func (o PipeMskStartPositionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeMskStartPositionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeMskStartPosition) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeMskStartPositionInput is an input type that accepts PipeMskStartPositionArgs and PipeMskStartPositionOutput values.
// You can construct a concrete instance of `PipeMskStartPositionInput` via:
//
//	PipeMskStartPositionArgs{...}
type PipeMskStartPositionInput interface {
	pulumi.Input

	ToPipeMskStartPositionOutput() PipeMskStartPositionOutput
	ToPipeMskStartPositionOutputWithContext(context.Context) PipeMskStartPositionOutput
}

var pipeMskStartPositionPtrType = reflect.TypeOf((**PipeMskStartPosition)(nil)).Elem()

type PipeMskStartPositionPtrInput interface {
	pulumi.Input

	ToPipeMskStartPositionPtrOutput() PipeMskStartPositionPtrOutput
	ToPipeMskStartPositionPtrOutputWithContext(context.Context) PipeMskStartPositionPtrOutput
}

type pipeMskStartPositionPtr string

func PipeMskStartPositionPtr(v string) PipeMskStartPositionPtrInput {
	return (*pipeMskStartPositionPtr)(&v)
}

func (*pipeMskStartPositionPtr) ElementType() reflect.Type {
	return pipeMskStartPositionPtrType
}

func (in *pipeMskStartPositionPtr) ToPipeMskStartPositionPtrOutput() PipeMskStartPositionPtrOutput {
	return pulumi.ToOutput(in).(PipeMskStartPositionPtrOutput)
}

func (in *pipeMskStartPositionPtr) ToPipeMskStartPositionPtrOutputWithContext(ctx context.Context) PipeMskStartPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeMskStartPositionPtrOutput)
}

func (in *pipeMskStartPositionPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeMskStartPosition] {
	return pulumix.Output[*PipeMskStartPosition]{
		OutputState: in.ToPipeMskStartPositionPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeOnPartialBatchItemFailureStreams string

const (
	PipeOnPartialBatchItemFailureStreamsAutomaticBisect = PipeOnPartialBatchItemFailureStreams("AUTOMATIC_BISECT")
)

func (PipeOnPartialBatchItemFailureStreams) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeOnPartialBatchItemFailureStreams)(nil)).Elem()
}

func (e PipeOnPartialBatchItemFailureStreams) ToPipeOnPartialBatchItemFailureStreamsOutput() PipeOnPartialBatchItemFailureStreamsOutput {
	return pulumi.ToOutput(e).(PipeOnPartialBatchItemFailureStreamsOutput)
}

func (e PipeOnPartialBatchItemFailureStreams) ToPipeOnPartialBatchItemFailureStreamsOutputWithContext(ctx context.Context) PipeOnPartialBatchItemFailureStreamsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeOnPartialBatchItemFailureStreamsOutput)
}

func (e PipeOnPartialBatchItemFailureStreams) ToPipeOnPartialBatchItemFailureStreamsPtrOutput() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return e.ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(context.Background())
}

func (e PipeOnPartialBatchItemFailureStreams) ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(ctx context.Context) PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return PipeOnPartialBatchItemFailureStreams(e).ToPipeOnPartialBatchItemFailureStreamsOutputWithContext(ctx).ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(ctx)
}

func (e PipeOnPartialBatchItemFailureStreams) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeOnPartialBatchItemFailureStreams) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeOnPartialBatchItemFailureStreams) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeOnPartialBatchItemFailureStreams) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeOnPartialBatchItemFailureStreamsOutput struct{ *pulumi.OutputState }

func (PipeOnPartialBatchItemFailureStreamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeOnPartialBatchItemFailureStreams)(nil)).Elem()
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToPipeOnPartialBatchItemFailureStreamsOutput() PipeOnPartialBatchItemFailureStreamsOutput {
	return o
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToPipeOnPartialBatchItemFailureStreamsOutputWithContext(ctx context.Context) PipeOnPartialBatchItemFailureStreamsOutput {
	return o
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToPipeOnPartialBatchItemFailureStreamsPtrOutput() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o.ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(context.Background())
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(ctx context.Context) PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeOnPartialBatchItemFailureStreams) *PipeOnPartialBatchItemFailureStreams {
		return &v
	}).(PipeOnPartialBatchItemFailureStreamsPtrOutput)
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToOutput(ctx context.Context) pulumix.Output[PipeOnPartialBatchItemFailureStreams] {
	return pulumix.Output[PipeOnPartialBatchItemFailureStreams]{
		OutputState: o.OutputState,
	}
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeOnPartialBatchItemFailureStreams) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeOnPartialBatchItemFailureStreamsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeOnPartialBatchItemFailureStreams) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeOnPartialBatchItemFailureStreamsPtrOutput struct{ *pulumi.OutputState }

func (PipeOnPartialBatchItemFailureStreamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeOnPartialBatchItemFailureStreams)(nil)).Elem()
}

func (o PipeOnPartialBatchItemFailureStreamsPtrOutput) ToPipeOnPartialBatchItemFailureStreamsPtrOutput() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o
}

func (o PipeOnPartialBatchItemFailureStreamsPtrOutput) ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(ctx context.Context) PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o
}

func (o PipeOnPartialBatchItemFailureStreamsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeOnPartialBatchItemFailureStreams] {
	return pulumix.Output[*PipeOnPartialBatchItemFailureStreams]{
		OutputState: o.OutputState,
	}
}

func (o PipeOnPartialBatchItemFailureStreamsPtrOutput) Elem() PipeOnPartialBatchItemFailureStreamsOutput {
	return o.ApplyT(func(v *PipeOnPartialBatchItemFailureStreams) PipeOnPartialBatchItemFailureStreams {
		if v != nil {
			return *v
		}
		var ret PipeOnPartialBatchItemFailureStreams
		return ret
	}).(PipeOnPartialBatchItemFailureStreamsOutput)
}

func (o PipeOnPartialBatchItemFailureStreamsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeOnPartialBatchItemFailureStreamsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeOnPartialBatchItemFailureStreams) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeOnPartialBatchItemFailureStreamsInput is an input type that accepts PipeOnPartialBatchItemFailureStreamsArgs and PipeOnPartialBatchItemFailureStreamsOutput values.
// You can construct a concrete instance of `PipeOnPartialBatchItemFailureStreamsInput` via:
//
//	PipeOnPartialBatchItemFailureStreamsArgs{...}
type PipeOnPartialBatchItemFailureStreamsInput interface {
	pulumi.Input

	ToPipeOnPartialBatchItemFailureStreamsOutput() PipeOnPartialBatchItemFailureStreamsOutput
	ToPipeOnPartialBatchItemFailureStreamsOutputWithContext(context.Context) PipeOnPartialBatchItemFailureStreamsOutput
}

var pipeOnPartialBatchItemFailureStreamsPtrType = reflect.TypeOf((**PipeOnPartialBatchItemFailureStreams)(nil)).Elem()

type PipeOnPartialBatchItemFailureStreamsPtrInput interface {
	pulumi.Input

	ToPipeOnPartialBatchItemFailureStreamsPtrOutput() PipeOnPartialBatchItemFailureStreamsPtrOutput
	ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(context.Context) PipeOnPartialBatchItemFailureStreamsPtrOutput
}

type pipeOnPartialBatchItemFailureStreamsPtr string

func PipeOnPartialBatchItemFailureStreamsPtr(v string) PipeOnPartialBatchItemFailureStreamsPtrInput {
	return (*pipeOnPartialBatchItemFailureStreamsPtr)(&v)
}

func (*pipeOnPartialBatchItemFailureStreamsPtr) ElementType() reflect.Type {
	return pipeOnPartialBatchItemFailureStreamsPtrType
}

func (in *pipeOnPartialBatchItemFailureStreamsPtr) ToPipeOnPartialBatchItemFailureStreamsPtrOutput() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return pulumi.ToOutput(in).(PipeOnPartialBatchItemFailureStreamsPtrOutput)
}

func (in *pipeOnPartialBatchItemFailureStreamsPtr) ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(ctx context.Context) PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeOnPartialBatchItemFailureStreamsPtrOutput)
}

func (in *pipeOnPartialBatchItemFailureStreamsPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeOnPartialBatchItemFailureStreams] {
	return pulumix.Output[*PipeOnPartialBatchItemFailureStreams]{
		OutputState: in.ToPipeOnPartialBatchItemFailureStreamsPtrOutputWithContext(ctx).OutputState,
	}
}

type PipePlacementConstraintType string

const (
	PipePlacementConstraintTypeDistinctInstance = PipePlacementConstraintType("distinctInstance")
	PipePlacementConstraintTypeMemberOf         = PipePlacementConstraintType("memberOf")
)

func (PipePlacementConstraintType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementConstraintType)(nil)).Elem()
}

func (e PipePlacementConstraintType) ToPipePlacementConstraintTypeOutput() PipePlacementConstraintTypeOutput {
	return pulumi.ToOutput(e).(PipePlacementConstraintTypeOutput)
}

func (e PipePlacementConstraintType) ToPipePlacementConstraintTypeOutputWithContext(ctx context.Context) PipePlacementConstraintTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipePlacementConstraintTypeOutput)
}

func (e PipePlacementConstraintType) ToPipePlacementConstraintTypePtrOutput() PipePlacementConstraintTypePtrOutput {
	return e.ToPipePlacementConstraintTypePtrOutputWithContext(context.Background())
}

func (e PipePlacementConstraintType) ToPipePlacementConstraintTypePtrOutputWithContext(ctx context.Context) PipePlacementConstraintTypePtrOutput {
	return PipePlacementConstraintType(e).ToPipePlacementConstraintTypeOutputWithContext(ctx).ToPipePlacementConstraintTypePtrOutputWithContext(ctx)
}

func (e PipePlacementConstraintType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipePlacementConstraintType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipePlacementConstraintType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipePlacementConstraintType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipePlacementConstraintTypeOutput struct{ *pulumi.OutputState }

func (PipePlacementConstraintTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementConstraintType)(nil)).Elem()
}

func (o PipePlacementConstraintTypeOutput) ToPipePlacementConstraintTypeOutput() PipePlacementConstraintTypeOutput {
	return o
}

func (o PipePlacementConstraintTypeOutput) ToPipePlacementConstraintTypeOutputWithContext(ctx context.Context) PipePlacementConstraintTypeOutput {
	return o
}

func (o PipePlacementConstraintTypeOutput) ToPipePlacementConstraintTypePtrOutput() PipePlacementConstraintTypePtrOutput {
	return o.ToPipePlacementConstraintTypePtrOutputWithContext(context.Background())
}

func (o PipePlacementConstraintTypeOutput) ToPipePlacementConstraintTypePtrOutputWithContext(ctx context.Context) PipePlacementConstraintTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipePlacementConstraintType) *PipePlacementConstraintType {
		return &v
	}).(PipePlacementConstraintTypePtrOutput)
}

func (o PipePlacementConstraintTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipePlacementConstraintType] {
	return pulumix.Output[PipePlacementConstraintType]{
		OutputState: o.OutputState,
	}
}

func (o PipePlacementConstraintTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipePlacementConstraintTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipePlacementConstraintType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipePlacementConstraintTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipePlacementConstraintTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipePlacementConstraintType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipePlacementConstraintTypePtrOutput struct{ *pulumi.OutputState }

func (PipePlacementConstraintTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipePlacementConstraintType)(nil)).Elem()
}

func (o PipePlacementConstraintTypePtrOutput) ToPipePlacementConstraintTypePtrOutput() PipePlacementConstraintTypePtrOutput {
	return o
}

func (o PipePlacementConstraintTypePtrOutput) ToPipePlacementConstraintTypePtrOutputWithContext(ctx context.Context) PipePlacementConstraintTypePtrOutput {
	return o
}

func (o PipePlacementConstraintTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipePlacementConstraintType] {
	return pulumix.Output[*PipePlacementConstraintType]{
		OutputState: o.OutputState,
	}
}

func (o PipePlacementConstraintTypePtrOutput) Elem() PipePlacementConstraintTypeOutput {
	return o.ApplyT(func(v *PipePlacementConstraintType) PipePlacementConstraintType {
		if v != nil {
			return *v
		}
		var ret PipePlacementConstraintType
		return ret
	}).(PipePlacementConstraintTypeOutput)
}

func (o PipePlacementConstraintTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipePlacementConstraintTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipePlacementConstraintType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipePlacementConstraintTypeInput is an input type that accepts PipePlacementConstraintTypeArgs and PipePlacementConstraintTypeOutput values.
// You can construct a concrete instance of `PipePlacementConstraintTypeInput` via:
//
//	PipePlacementConstraintTypeArgs{...}
type PipePlacementConstraintTypeInput interface {
	pulumi.Input

	ToPipePlacementConstraintTypeOutput() PipePlacementConstraintTypeOutput
	ToPipePlacementConstraintTypeOutputWithContext(context.Context) PipePlacementConstraintTypeOutput
}

var pipePlacementConstraintTypePtrType = reflect.TypeOf((**PipePlacementConstraintType)(nil)).Elem()

type PipePlacementConstraintTypePtrInput interface {
	pulumi.Input

	ToPipePlacementConstraintTypePtrOutput() PipePlacementConstraintTypePtrOutput
	ToPipePlacementConstraintTypePtrOutputWithContext(context.Context) PipePlacementConstraintTypePtrOutput
}

type pipePlacementConstraintTypePtr string

func PipePlacementConstraintTypePtr(v string) PipePlacementConstraintTypePtrInput {
	return (*pipePlacementConstraintTypePtr)(&v)
}

func (*pipePlacementConstraintTypePtr) ElementType() reflect.Type {
	return pipePlacementConstraintTypePtrType
}

func (in *pipePlacementConstraintTypePtr) ToPipePlacementConstraintTypePtrOutput() PipePlacementConstraintTypePtrOutput {
	return pulumi.ToOutput(in).(PipePlacementConstraintTypePtrOutput)
}

func (in *pipePlacementConstraintTypePtr) ToPipePlacementConstraintTypePtrOutputWithContext(ctx context.Context) PipePlacementConstraintTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipePlacementConstraintTypePtrOutput)
}

func (in *pipePlacementConstraintTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipePlacementConstraintType] {
	return pulumix.Output[*PipePlacementConstraintType]{
		OutputState: in.ToPipePlacementConstraintTypePtrOutputWithContext(ctx).OutputState,
	}
}

type PipePlacementStrategyType string

const (
	PipePlacementStrategyTypeRandom  = PipePlacementStrategyType("random")
	PipePlacementStrategyTypeSpread  = PipePlacementStrategyType("spread")
	PipePlacementStrategyTypeBinpack = PipePlacementStrategyType("binpack")
)

func (PipePlacementStrategyType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementStrategyType)(nil)).Elem()
}

func (e PipePlacementStrategyType) ToPipePlacementStrategyTypeOutput() PipePlacementStrategyTypeOutput {
	return pulumi.ToOutput(e).(PipePlacementStrategyTypeOutput)
}

func (e PipePlacementStrategyType) ToPipePlacementStrategyTypeOutputWithContext(ctx context.Context) PipePlacementStrategyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipePlacementStrategyTypeOutput)
}

func (e PipePlacementStrategyType) ToPipePlacementStrategyTypePtrOutput() PipePlacementStrategyTypePtrOutput {
	return e.ToPipePlacementStrategyTypePtrOutputWithContext(context.Background())
}

func (e PipePlacementStrategyType) ToPipePlacementStrategyTypePtrOutputWithContext(ctx context.Context) PipePlacementStrategyTypePtrOutput {
	return PipePlacementStrategyType(e).ToPipePlacementStrategyTypeOutputWithContext(ctx).ToPipePlacementStrategyTypePtrOutputWithContext(ctx)
}

func (e PipePlacementStrategyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipePlacementStrategyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipePlacementStrategyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipePlacementStrategyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipePlacementStrategyTypeOutput struct{ *pulumi.OutputState }

func (PipePlacementStrategyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementStrategyType)(nil)).Elem()
}

func (o PipePlacementStrategyTypeOutput) ToPipePlacementStrategyTypeOutput() PipePlacementStrategyTypeOutput {
	return o
}

func (o PipePlacementStrategyTypeOutput) ToPipePlacementStrategyTypeOutputWithContext(ctx context.Context) PipePlacementStrategyTypeOutput {
	return o
}

func (o PipePlacementStrategyTypeOutput) ToPipePlacementStrategyTypePtrOutput() PipePlacementStrategyTypePtrOutput {
	return o.ToPipePlacementStrategyTypePtrOutputWithContext(context.Background())
}

func (o PipePlacementStrategyTypeOutput) ToPipePlacementStrategyTypePtrOutputWithContext(ctx context.Context) PipePlacementStrategyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipePlacementStrategyType) *PipePlacementStrategyType {
		return &v
	}).(PipePlacementStrategyTypePtrOutput)
}

func (o PipePlacementStrategyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipePlacementStrategyType] {
	return pulumix.Output[PipePlacementStrategyType]{
		OutputState: o.OutputState,
	}
}

func (o PipePlacementStrategyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipePlacementStrategyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipePlacementStrategyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipePlacementStrategyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipePlacementStrategyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipePlacementStrategyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipePlacementStrategyTypePtrOutput struct{ *pulumi.OutputState }

func (PipePlacementStrategyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipePlacementStrategyType)(nil)).Elem()
}

func (o PipePlacementStrategyTypePtrOutput) ToPipePlacementStrategyTypePtrOutput() PipePlacementStrategyTypePtrOutput {
	return o
}

func (o PipePlacementStrategyTypePtrOutput) ToPipePlacementStrategyTypePtrOutputWithContext(ctx context.Context) PipePlacementStrategyTypePtrOutput {
	return o
}

func (o PipePlacementStrategyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipePlacementStrategyType] {
	return pulumix.Output[*PipePlacementStrategyType]{
		OutputState: o.OutputState,
	}
}

func (o PipePlacementStrategyTypePtrOutput) Elem() PipePlacementStrategyTypeOutput {
	return o.ApplyT(func(v *PipePlacementStrategyType) PipePlacementStrategyType {
		if v != nil {
			return *v
		}
		var ret PipePlacementStrategyType
		return ret
	}).(PipePlacementStrategyTypeOutput)
}

func (o PipePlacementStrategyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipePlacementStrategyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipePlacementStrategyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipePlacementStrategyTypeInput is an input type that accepts PipePlacementStrategyTypeArgs and PipePlacementStrategyTypeOutput values.
// You can construct a concrete instance of `PipePlacementStrategyTypeInput` via:
//
//	PipePlacementStrategyTypeArgs{...}
type PipePlacementStrategyTypeInput interface {
	pulumi.Input

	ToPipePlacementStrategyTypeOutput() PipePlacementStrategyTypeOutput
	ToPipePlacementStrategyTypeOutputWithContext(context.Context) PipePlacementStrategyTypeOutput
}

var pipePlacementStrategyTypePtrType = reflect.TypeOf((**PipePlacementStrategyType)(nil)).Elem()

type PipePlacementStrategyTypePtrInput interface {
	pulumi.Input

	ToPipePlacementStrategyTypePtrOutput() PipePlacementStrategyTypePtrOutput
	ToPipePlacementStrategyTypePtrOutputWithContext(context.Context) PipePlacementStrategyTypePtrOutput
}

type pipePlacementStrategyTypePtr string

func PipePlacementStrategyTypePtr(v string) PipePlacementStrategyTypePtrInput {
	return (*pipePlacementStrategyTypePtr)(&v)
}

func (*pipePlacementStrategyTypePtr) ElementType() reflect.Type {
	return pipePlacementStrategyTypePtrType
}

func (in *pipePlacementStrategyTypePtr) ToPipePlacementStrategyTypePtrOutput() PipePlacementStrategyTypePtrOutput {
	return pulumi.ToOutput(in).(PipePlacementStrategyTypePtrOutput)
}

func (in *pipePlacementStrategyTypePtr) ToPipePlacementStrategyTypePtrOutputWithContext(ctx context.Context) PipePlacementStrategyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipePlacementStrategyTypePtrOutput)
}

func (in *pipePlacementStrategyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipePlacementStrategyType] {
	return pulumix.Output[*PipePlacementStrategyType]{
		OutputState: in.ToPipePlacementStrategyTypePtrOutputWithContext(ctx).OutputState,
	}
}

type PipePropagateTags string

const (
	PipePropagateTagsTaskDefinition = PipePropagateTags("TASK_DEFINITION")
)

func (PipePropagateTags) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePropagateTags)(nil)).Elem()
}

func (e PipePropagateTags) ToPipePropagateTagsOutput() PipePropagateTagsOutput {
	return pulumi.ToOutput(e).(PipePropagateTagsOutput)
}

func (e PipePropagateTags) ToPipePropagateTagsOutputWithContext(ctx context.Context) PipePropagateTagsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipePropagateTagsOutput)
}

func (e PipePropagateTags) ToPipePropagateTagsPtrOutput() PipePropagateTagsPtrOutput {
	return e.ToPipePropagateTagsPtrOutputWithContext(context.Background())
}

func (e PipePropagateTags) ToPipePropagateTagsPtrOutputWithContext(ctx context.Context) PipePropagateTagsPtrOutput {
	return PipePropagateTags(e).ToPipePropagateTagsOutputWithContext(ctx).ToPipePropagateTagsPtrOutputWithContext(ctx)
}

func (e PipePropagateTags) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipePropagateTags) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipePropagateTags) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipePropagateTags) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipePropagateTagsOutput struct{ *pulumi.OutputState }

func (PipePropagateTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePropagateTags)(nil)).Elem()
}

func (o PipePropagateTagsOutput) ToPipePropagateTagsOutput() PipePropagateTagsOutput {
	return o
}

func (o PipePropagateTagsOutput) ToPipePropagateTagsOutputWithContext(ctx context.Context) PipePropagateTagsOutput {
	return o
}

func (o PipePropagateTagsOutput) ToPipePropagateTagsPtrOutput() PipePropagateTagsPtrOutput {
	return o.ToPipePropagateTagsPtrOutputWithContext(context.Background())
}

func (o PipePropagateTagsOutput) ToPipePropagateTagsPtrOutputWithContext(ctx context.Context) PipePropagateTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipePropagateTags) *PipePropagateTags {
		return &v
	}).(PipePropagateTagsPtrOutput)
}

func (o PipePropagateTagsOutput) ToOutput(ctx context.Context) pulumix.Output[PipePropagateTags] {
	return pulumix.Output[PipePropagateTags]{
		OutputState: o.OutputState,
	}
}

func (o PipePropagateTagsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipePropagateTagsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipePropagateTags) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipePropagateTagsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipePropagateTagsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipePropagateTags) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipePropagateTagsPtrOutput struct{ *pulumi.OutputState }

func (PipePropagateTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipePropagateTags)(nil)).Elem()
}

func (o PipePropagateTagsPtrOutput) ToPipePropagateTagsPtrOutput() PipePropagateTagsPtrOutput {
	return o
}

func (o PipePropagateTagsPtrOutput) ToPipePropagateTagsPtrOutputWithContext(ctx context.Context) PipePropagateTagsPtrOutput {
	return o
}

func (o PipePropagateTagsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipePropagateTags] {
	return pulumix.Output[*PipePropagateTags]{
		OutputState: o.OutputState,
	}
}

func (o PipePropagateTagsPtrOutput) Elem() PipePropagateTagsOutput {
	return o.ApplyT(func(v *PipePropagateTags) PipePropagateTags {
		if v != nil {
			return *v
		}
		var ret PipePropagateTags
		return ret
	}).(PipePropagateTagsOutput)
}

func (o PipePropagateTagsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipePropagateTagsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipePropagateTags) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipePropagateTagsInput is an input type that accepts PipePropagateTagsArgs and PipePropagateTagsOutput values.
// You can construct a concrete instance of `PipePropagateTagsInput` via:
//
//	PipePropagateTagsArgs{...}
type PipePropagateTagsInput interface {
	pulumi.Input

	ToPipePropagateTagsOutput() PipePropagateTagsOutput
	ToPipePropagateTagsOutputWithContext(context.Context) PipePropagateTagsOutput
}

var pipePropagateTagsPtrType = reflect.TypeOf((**PipePropagateTags)(nil)).Elem()

type PipePropagateTagsPtrInput interface {
	pulumi.Input

	ToPipePropagateTagsPtrOutput() PipePropagateTagsPtrOutput
	ToPipePropagateTagsPtrOutputWithContext(context.Context) PipePropagateTagsPtrOutput
}

type pipePropagateTagsPtr string

func PipePropagateTagsPtr(v string) PipePropagateTagsPtrInput {
	return (*pipePropagateTagsPtr)(&v)
}

func (*pipePropagateTagsPtr) ElementType() reflect.Type {
	return pipePropagateTagsPtrType
}

func (in *pipePropagateTagsPtr) ToPipePropagateTagsPtrOutput() PipePropagateTagsPtrOutput {
	return pulumi.ToOutput(in).(PipePropagateTagsPtrOutput)
}

func (in *pipePropagateTagsPtr) ToPipePropagateTagsPtrOutputWithContext(ctx context.Context) PipePropagateTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipePropagateTagsPtrOutput)
}

func (in *pipePropagateTagsPtr) ToOutput(ctx context.Context) pulumix.Output[*PipePropagateTags] {
	return pulumix.Output[*PipePropagateTags]{
		OutputState: in.ToPipePropagateTagsPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeRequestedPipeState string

const (
	PipeRequestedPipeStateRunning = PipeRequestedPipeState("RUNNING")
	PipeRequestedPipeStateStopped = PipeRequestedPipeState("STOPPED")
)

func (PipeRequestedPipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeRequestedPipeState)(nil)).Elem()
}

func (e PipeRequestedPipeState) ToPipeRequestedPipeStateOutput() PipeRequestedPipeStateOutput {
	return pulumi.ToOutput(e).(PipeRequestedPipeStateOutput)
}

func (e PipeRequestedPipeState) ToPipeRequestedPipeStateOutputWithContext(ctx context.Context) PipeRequestedPipeStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeRequestedPipeStateOutput)
}

func (e PipeRequestedPipeState) ToPipeRequestedPipeStatePtrOutput() PipeRequestedPipeStatePtrOutput {
	return e.ToPipeRequestedPipeStatePtrOutputWithContext(context.Background())
}

func (e PipeRequestedPipeState) ToPipeRequestedPipeStatePtrOutputWithContext(ctx context.Context) PipeRequestedPipeStatePtrOutput {
	return PipeRequestedPipeState(e).ToPipeRequestedPipeStateOutputWithContext(ctx).ToPipeRequestedPipeStatePtrOutputWithContext(ctx)
}

func (e PipeRequestedPipeState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeRequestedPipeState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeRequestedPipeState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeRequestedPipeState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeRequestedPipeStateOutput struct{ *pulumi.OutputState }

func (PipeRequestedPipeStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeRequestedPipeState)(nil)).Elem()
}

func (o PipeRequestedPipeStateOutput) ToPipeRequestedPipeStateOutput() PipeRequestedPipeStateOutput {
	return o
}

func (o PipeRequestedPipeStateOutput) ToPipeRequestedPipeStateOutputWithContext(ctx context.Context) PipeRequestedPipeStateOutput {
	return o
}

func (o PipeRequestedPipeStateOutput) ToPipeRequestedPipeStatePtrOutput() PipeRequestedPipeStatePtrOutput {
	return o.ToPipeRequestedPipeStatePtrOutputWithContext(context.Background())
}

func (o PipeRequestedPipeStateOutput) ToPipeRequestedPipeStatePtrOutputWithContext(ctx context.Context) PipeRequestedPipeStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeRequestedPipeState) *PipeRequestedPipeState {
		return &v
	}).(PipeRequestedPipeStatePtrOutput)
}

func (o PipeRequestedPipeStateOutput) ToOutput(ctx context.Context) pulumix.Output[PipeRequestedPipeState] {
	return pulumix.Output[PipeRequestedPipeState]{
		OutputState: o.OutputState,
	}
}

func (o PipeRequestedPipeStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeRequestedPipeStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeRequestedPipeState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeRequestedPipeStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeRequestedPipeStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeRequestedPipeState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeRequestedPipeStatePtrOutput struct{ *pulumi.OutputState }

func (PipeRequestedPipeStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeRequestedPipeState)(nil)).Elem()
}

func (o PipeRequestedPipeStatePtrOutput) ToPipeRequestedPipeStatePtrOutput() PipeRequestedPipeStatePtrOutput {
	return o
}

func (o PipeRequestedPipeStatePtrOutput) ToPipeRequestedPipeStatePtrOutputWithContext(ctx context.Context) PipeRequestedPipeStatePtrOutput {
	return o
}

func (o PipeRequestedPipeStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeRequestedPipeState] {
	return pulumix.Output[*PipeRequestedPipeState]{
		OutputState: o.OutputState,
	}
}

func (o PipeRequestedPipeStatePtrOutput) Elem() PipeRequestedPipeStateOutput {
	return o.ApplyT(func(v *PipeRequestedPipeState) PipeRequestedPipeState {
		if v != nil {
			return *v
		}
		var ret PipeRequestedPipeState
		return ret
	}).(PipeRequestedPipeStateOutput)
}

func (o PipeRequestedPipeStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeRequestedPipeStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeRequestedPipeState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeRequestedPipeStateInput is an input type that accepts PipeRequestedPipeStateArgs and PipeRequestedPipeStateOutput values.
// You can construct a concrete instance of `PipeRequestedPipeStateInput` via:
//
//	PipeRequestedPipeStateArgs{...}
type PipeRequestedPipeStateInput interface {
	pulumi.Input

	ToPipeRequestedPipeStateOutput() PipeRequestedPipeStateOutput
	ToPipeRequestedPipeStateOutputWithContext(context.Context) PipeRequestedPipeStateOutput
}

var pipeRequestedPipeStatePtrType = reflect.TypeOf((**PipeRequestedPipeState)(nil)).Elem()

type PipeRequestedPipeStatePtrInput interface {
	pulumi.Input

	ToPipeRequestedPipeStatePtrOutput() PipeRequestedPipeStatePtrOutput
	ToPipeRequestedPipeStatePtrOutputWithContext(context.Context) PipeRequestedPipeStatePtrOutput
}

type pipeRequestedPipeStatePtr string

func PipeRequestedPipeStatePtr(v string) PipeRequestedPipeStatePtrInput {
	return (*pipeRequestedPipeStatePtr)(&v)
}

func (*pipeRequestedPipeStatePtr) ElementType() reflect.Type {
	return pipeRequestedPipeStatePtrType
}

func (in *pipeRequestedPipeStatePtr) ToPipeRequestedPipeStatePtrOutput() PipeRequestedPipeStatePtrOutput {
	return pulumi.ToOutput(in).(PipeRequestedPipeStatePtrOutput)
}

func (in *pipeRequestedPipeStatePtr) ToPipeRequestedPipeStatePtrOutputWithContext(ctx context.Context) PipeRequestedPipeStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeRequestedPipeStatePtrOutput)
}

func (in *pipeRequestedPipeStatePtr) ToOutput(ctx context.Context) pulumix.Output[*PipeRequestedPipeState] {
	return pulumix.Output[*PipeRequestedPipeState]{
		OutputState: in.ToPipeRequestedPipeStatePtrOutputWithContext(ctx).OutputState,
	}
}

type PipeS3OutputFormat string

const (
	PipeS3OutputFormatJson  = PipeS3OutputFormat("json")
	PipeS3OutputFormatPlain = PipeS3OutputFormat("plain")
	PipeS3OutputFormatW3c   = PipeS3OutputFormat("w3c")
)

func (PipeS3OutputFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeS3OutputFormat)(nil)).Elem()
}

func (e PipeS3OutputFormat) ToPipeS3OutputFormatOutput() PipeS3OutputFormatOutput {
	return pulumi.ToOutput(e).(PipeS3OutputFormatOutput)
}

func (e PipeS3OutputFormat) ToPipeS3OutputFormatOutputWithContext(ctx context.Context) PipeS3OutputFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeS3OutputFormatOutput)
}

func (e PipeS3OutputFormat) ToPipeS3OutputFormatPtrOutput() PipeS3OutputFormatPtrOutput {
	return e.ToPipeS3OutputFormatPtrOutputWithContext(context.Background())
}

func (e PipeS3OutputFormat) ToPipeS3OutputFormatPtrOutputWithContext(ctx context.Context) PipeS3OutputFormatPtrOutput {
	return PipeS3OutputFormat(e).ToPipeS3OutputFormatOutputWithContext(ctx).ToPipeS3OutputFormatPtrOutputWithContext(ctx)
}

func (e PipeS3OutputFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeS3OutputFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeS3OutputFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeS3OutputFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeS3OutputFormatOutput struct{ *pulumi.OutputState }

func (PipeS3OutputFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeS3OutputFormat)(nil)).Elem()
}

func (o PipeS3OutputFormatOutput) ToPipeS3OutputFormatOutput() PipeS3OutputFormatOutput {
	return o
}

func (o PipeS3OutputFormatOutput) ToPipeS3OutputFormatOutputWithContext(ctx context.Context) PipeS3OutputFormatOutput {
	return o
}

func (o PipeS3OutputFormatOutput) ToPipeS3OutputFormatPtrOutput() PipeS3OutputFormatPtrOutput {
	return o.ToPipeS3OutputFormatPtrOutputWithContext(context.Background())
}

func (o PipeS3OutputFormatOutput) ToPipeS3OutputFormatPtrOutputWithContext(ctx context.Context) PipeS3OutputFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeS3OutputFormat) *PipeS3OutputFormat {
		return &v
	}).(PipeS3OutputFormatPtrOutput)
}

func (o PipeS3OutputFormatOutput) ToOutput(ctx context.Context) pulumix.Output[PipeS3OutputFormat] {
	return pulumix.Output[PipeS3OutputFormat]{
		OutputState: o.OutputState,
	}
}

func (o PipeS3OutputFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeS3OutputFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeS3OutputFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeS3OutputFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeS3OutputFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeS3OutputFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeS3OutputFormatPtrOutput struct{ *pulumi.OutputState }

func (PipeS3OutputFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeS3OutputFormat)(nil)).Elem()
}

func (o PipeS3OutputFormatPtrOutput) ToPipeS3OutputFormatPtrOutput() PipeS3OutputFormatPtrOutput {
	return o
}

func (o PipeS3OutputFormatPtrOutput) ToPipeS3OutputFormatPtrOutputWithContext(ctx context.Context) PipeS3OutputFormatPtrOutput {
	return o
}

func (o PipeS3OutputFormatPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeS3OutputFormat] {
	return pulumix.Output[*PipeS3OutputFormat]{
		OutputState: o.OutputState,
	}
}

func (o PipeS3OutputFormatPtrOutput) Elem() PipeS3OutputFormatOutput {
	return o.ApplyT(func(v *PipeS3OutputFormat) PipeS3OutputFormat {
		if v != nil {
			return *v
		}
		var ret PipeS3OutputFormat
		return ret
	}).(PipeS3OutputFormatOutput)
}

func (o PipeS3OutputFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeS3OutputFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeS3OutputFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeS3OutputFormatInput is an input type that accepts PipeS3OutputFormatArgs and PipeS3OutputFormatOutput values.
// You can construct a concrete instance of `PipeS3OutputFormatInput` via:
//
//	PipeS3OutputFormatArgs{...}
type PipeS3OutputFormatInput interface {
	pulumi.Input

	ToPipeS3OutputFormatOutput() PipeS3OutputFormatOutput
	ToPipeS3OutputFormatOutputWithContext(context.Context) PipeS3OutputFormatOutput
}

var pipeS3OutputFormatPtrType = reflect.TypeOf((**PipeS3OutputFormat)(nil)).Elem()

type PipeS3OutputFormatPtrInput interface {
	pulumi.Input

	ToPipeS3OutputFormatPtrOutput() PipeS3OutputFormatPtrOutput
	ToPipeS3OutputFormatPtrOutputWithContext(context.Context) PipeS3OutputFormatPtrOutput
}

type pipeS3OutputFormatPtr string

func PipeS3OutputFormatPtr(v string) PipeS3OutputFormatPtrInput {
	return (*pipeS3OutputFormatPtr)(&v)
}

func (*pipeS3OutputFormatPtr) ElementType() reflect.Type {
	return pipeS3OutputFormatPtrType
}

func (in *pipeS3OutputFormatPtr) ToPipeS3OutputFormatPtrOutput() PipeS3OutputFormatPtrOutput {
	return pulumi.ToOutput(in).(PipeS3OutputFormatPtrOutput)
}

func (in *pipeS3OutputFormatPtr) ToPipeS3OutputFormatPtrOutputWithContext(ctx context.Context) PipeS3OutputFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeS3OutputFormatPtrOutput)
}

func (in *pipeS3OutputFormatPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeS3OutputFormat] {
	return pulumix.Output[*PipeS3OutputFormat]{
		OutputState: in.ToPipeS3OutputFormatPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeSelfManagedKafkaStartPosition string

const (
	PipeSelfManagedKafkaStartPositionTrimHorizon = PipeSelfManagedKafkaStartPosition("TRIM_HORIZON")
	PipeSelfManagedKafkaStartPositionLatest      = PipeSelfManagedKafkaStartPosition("LATEST")
)

func (PipeSelfManagedKafkaStartPosition) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaStartPosition)(nil)).Elem()
}

func (e PipeSelfManagedKafkaStartPosition) ToPipeSelfManagedKafkaStartPositionOutput() PipeSelfManagedKafkaStartPositionOutput {
	return pulumi.ToOutput(e).(PipeSelfManagedKafkaStartPositionOutput)
}

func (e PipeSelfManagedKafkaStartPosition) ToPipeSelfManagedKafkaStartPositionOutputWithContext(ctx context.Context) PipeSelfManagedKafkaStartPositionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeSelfManagedKafkaStartPositionOutput)
}

func (e PipeSelfManagedKafkaStartPosition) ToPipeSelfManagedKafkaStartPositionPtrOutput() PipeSelfManagedKafkaStartPositionPtrOutput {
	return e.ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(context.Background())
}

func (e PipeSelfManagedKafkaStartPosition) ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaStartPositionPtrOutput {
	return PipeSelfManagedKafkaStartPosition(e).ToPipeSelfManagedKafkaStartPositionOutputWithContext(ctx).ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(ctx)
}

func (e PipeSelfManagedKafkaStartPosition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeSelfManagedKafkaStartPosition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeSelfManagedKafkaStartPosition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeSelfManagedKafkaStartPosition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeSelfManagedKafkaStartPositionOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaStartPositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaStartPosition)(nil)).Elem()
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToPipeSelfManagedKafkaStartPositionOutput() PipeSelfManagedKafkaStartPositionOutput {
	return o
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToPipeSelfManagedKafkaStartPositionOutputWithContext(ctx context.Context) PipeSelfManagedKafkaStartPositionOutput {
	return o
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToPipeSelfManagedKafkaStartPositionPtrOutput() PipeSelfManagedKafkaStartPositionPtrOutput {
	return o.ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaStartPositionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSelfManagedKafkaStartPosition) *PipeSelfManagedKafkaStartPosition {
		return &v
	}).(PipeSelfManagedKafkaStartPositionPtrOutput)
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToOutput(ctx context.Context) pulumix.Output[PipeSelfManagedKafkaStartPosition] {
	return pulumix.Output[PipeSelfManagedKafkaStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeSelfManagedKafkaStartPosition) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaStartPositionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeSelfManagedKafkaStartPosition) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeSelfManagedKafkaStartPositionPtrOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaStartPositionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaStartPosition)(nil)).Elem()
}

func (o PipeSelfManagedKafkaStartPositionPtrOutput) ToPipeSelfManagedKafkaStartPositionPtrOutput() PipeSelfManagedKafkaStartPositionPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaStartPositionPtrOutput) ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaStartPositionPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaStartPositionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeSelfManagedKafkaStartPosition] {
	return pulumix.Output[*PipeSelfManagedKafkaStartPosition]{
		OutputState: o.OutputState,
	}
}

func (o PipeSelfManagedKafkaStartPositionPtrOutput) Elem() PipeSelfManagedKafkaStartPositionOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaStartPosition) PipeSelfManagedKafkaStartPosition {
		if v != nil {
			return *v
		}
		var ret PipeSelfManagedKafkaStartPosition
		return ret
	}).(PipeSelfManagedKafkaStartPositionOutput)
}

func (o PipeSelfManagedKafkaStartPositionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaStartPositionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeSelfManagedKafkaStartPosition) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeSelfManagedKafkaStartPositionInput is an input type that accepts PipeSelfManagedKafkaStartPositionArgs and PipeSelfManagedKafkaStartPositionOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaStartPositionInput` via:
//
//	PipeSelfManagedKafkaStartPositionArgs{...}
type PipeSelfManagedKafkaStartPositionInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaStartPositionOutput() PipeSelfManagedKafkaStartPositionOutput
	ToPipeSelfManagedKafkaStartPositionOutputWithContext(context.Context) PipeSelfManagedKafkaStartPositionOutput
}

var pipeSelfManagedKafkaStartPositionPtrType = reflect.TypeOf((**PipeSelfManagedKafkaStartPosition)(nil)).Elem()

type PipeSelfManagedKafkaStartPositionPtrInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaStartPositionPtrOutput() PipeSelfManagedKafkaStartPositionPtrOutput
	ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(context.Context) PipeSelfManagedKafkaStartPositionPtrOutput
}

type pipeSelfManagedKafkaStartPositionPtr string

func PipeSelfManagedKafkaStartPositionPtr(v string) PipeSelfManagedKafkaStartPositionPtrInput {
	return (*pipeSelfManagedKafkaStartPositionPtr)(&v)
}

func (*pipeSelfManagedKafkaStartPositionPtr) ElementType() reflect.Type {
	return pipeSelfManagedKafkaStartPositionPtrType
}

func (in *pipeSelfManagedKafkaStartPositionPtr) ToPipeSelfManagedKafkaStartPositionPtrOutput() PipeSelfManagedKafkaStartPositionPtrOutput {
	return pulumi.ToOutput(in).(PipeSelfManagedKafkaStartPositionPtrOutput)
}

func (in *pipeSelfManagedKafkaStartPositionPtr) ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaStartPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeSelfManagedKafkaStartPositionPtrOutput)
}

func (in *pipeSelfManagedKafkaStartPositionPtr) ToOutput(ctx context.Context) pulumix.Output[*PipeSelfManagedKafkaStartPosition] {
	return pulumix.Output[*PipeSelfManagedKafkaStartPosition]{
		OutputState: in.ToPipeSelfManagedKafkaStartPositionPtrOutputWithContext(ctx).OutputState,
	}
}

type PipeStateEnum string

const (
	PipeStateEnumRunning              = PipeStateEnum("RUNNING")
	PipeStateEnumStopped              = PipeStateEnum("STOPPED")
	PipeStateEnumCreating             = PipeStateEnum("CREATING")
	PipeStateEnumUpdating             = PipeStateEnum("UPDATING")
	PipeStateEnumDeleting             = PipeStateEnum("DELETING")
	PipeStateEnumStarting             = PipeStateEnum("STARTING")
	PipeStateEnumStopping             = PipeStateEnum("STOPPING")
	PipeStateEnumCreateFailed         = PipeStateEnum("CREATE_FAILED")
	PipeStateEnumUpdateFailed         = PipeStateEnum("UPDATE_FAILED")
	PipeStateEnumStartFailed          = PipeStateEnum("START_FAILED")
	PipeStateEnumStopFailed           = PipeStateEnum("STOP_FAILED")
	PipeStateEnumDeleteFailed         = PipeStateEnum("DELETE_FAILED")
	PipeStateEnumCreateRollbackFailed = PipeStateEnum("CREATE_ROLLBACK_FAILED")
	PipeStateEnumDeleteRollbackFailed = PipeStateEnum("DELETE_ROLLBACK_FAILED")
	PipeStateEnumUpdateRollbackFailed = PipeStateEnum("UPDATE_ROLLBACK_FAILED")
)

type PipeStateEnumOutput struct{ *pulumi.OutputState }

func (PipeStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeStateEnum)(nil)).Elem()
}

func (o PipeStateEnumOutput) ToPipeStateEnumOutput() PipeStateEnumOutput {
	return o
}

func (o PipeStateEnumOutput) ToPipeStateEnumOutputWithContext(ctx context.Context) PipeStateEnumOutput {
	return o
}

func (o PipeStateEnumOutput) ToPipeStateEnumPtrOutput() PipeStateEnumPtrOutput {
	return o.ToPipeStateEnumPtrOutputWithContext(context.Background())
}

func (o PipeStateEnumOutput) ToPipeStateEnumPtrOutputWithContext(ctx context.Context) PipeStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeStateEnum) *PipeStateEnum {
		return &v
	}).(PipeStateEnumPtrOutput)
}

func (o PipeStateEnumOutput) ToOutput(ctx context.Context) pulumix.Output[PipeStateEnum] {
	return pulumix.Output[PipeStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o PipeStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeStateEnumPtrOutput struct{ *pulumi.OutputState }

func (PipeStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeStateEnum)(nil)).Elem()
}

func (o PipeStateEnumPtrOutput) ToPipeStateEnumPtrOutput() PipeStateEnumPtrOutput {
	return o
}

func (o PipeStateEnumPtrOutput) ToPipeStateEnumPtrOutputWithContext(ctx context.Context) PipeStateEnumPtrOutput {
	return o
}

func (o PipeStateEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeStateEnum] {
	return pulumix.Output[*PipeStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o PipeStateEnumPtrOutput) Elem() PipeStateEnumOutput {
	return o.ApplyT(func(v *PipeStateEnum) PipeStateEnum {
		if v != nil {
			return *v
		}
		var ret PipeStateEnum
		return ret
	}).(PipeStateEnumOutput)
}

func (o PipeStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeTargetInvocationType string

const (
	PipeTargetInvocationTypeRequestResponse = PipeTargetInvocationType("REQUEST_RESPONSE")
	PipeTargetInvocationTypeFireAndForget   = PipeTargetInvocationType("FIRE_AND_FORGET")
)

func (PipeTargetInvocationType) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetInvocationType)(nil)).Elem()
}

func (e PipeTargetInvocationType) ToPipeTargetInvocationTypeOutput() PipeTargetInvocationTypeOutput {
	return pulumi.ToOutput(e).(PipeTargetInvocationTypeOutput)
}

func (e PipeTargetInvocationType) ToPipeTargetInvocationTypeOutputWithContext(ctx context.Context) PipeTargetInvocationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PipeTargetInvocationTypeOutput)
}

func (e PipeTargetInvocationType) ToPipeTargetInvocationTypePtrOutput() PipeTargetInvocationTypePtrOutput {
	return e.ToPipeTargetInvocationTypePtrOutputWithContext(context.Background())
}

func (e PipeTargetInvocationType) ToPipeTargetInvocationTypePtrOutputWithContext(ctx context.Context) PipeTargetInvocationTypePtrOutput {
	return PipeTargetInvocationType(e).ToPipeTargetInvocationTypeOutputWithContext(ctx).ToPipeTargetInvocationTypePtrOutputWithContext(ctx)
}

func (e PipeTargetInvocationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeTargetInvocationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PipeTargetInvocationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PipeTargetInvocationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PipeTargetInvocationTypeOutput struct{ *pulumi.OutputState }

func (PipeTargetInvocationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetInvocationType)(nil)).Elem()
}

func (o PipeTargetInvocationTypeOutput) ToPipeTargetInvocationTypeOutput() PipeTargetInvocationTypeOutput {
	return o
}

func (o PipeTargetInvocationTypeOutput) ToPipeTargetInvocationTypeOutputWithContext(ctx context.Context) PipeTargetInvocationTypeOutput {
	return o
}

func (o PipeTargetInvocationTypeOutput) ToPipeTargetInvocationTypePtrOutput() PipeTargetInvocationTypePtrOutput {
	return o.ToPipeTargetInvocationTypePtrOutputWithContext(context.Background())
}

func (o PipeTargetInvocationTypeOutput) ToPipeTargetInvocationTypePtrOutputWithContext(ctx context.Context) PipeTargetInvocationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetInvocationType) *PipeTargetInvocationType {
		return &v
	}).(PipeTargetInvocationTypePtrOutput)
}

func (o PipeTargetInvocationTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PipeTargetInvocationType] {
	return pulumix.Output[PipeTargetInvocationType]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetInvocationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PipeTargetInvocationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeTargetInvocationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PipeTargetInvocationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeTargetInvocationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PipeTargetInvocationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PipeTargetInvocationTypePtrOutput struct{ *pulumi.OutputState }

func (PipeTargetInvocationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetInvocationType)(nil)).Elem()
}

func (o PipeTargetInvocationTypePtrOutput) ToPipeTargetInvocationTypePtrOutput() PipeTargetInvocationTypePtrOutput {
	return o
}

func (o PipeTargetInvocationTypePtrOutput) ToPipeTargetInvocationTypePtrOutputWithContext(ctx context.Context) PipeTargetInvocationTypePtrOutput {
	return o
}

func (o PipeTargetInvocationTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetInvocationType] {
	return pulumix.Output[*PipeTargetInvocationType]{
		OutputState: o.OutputState,
	}
}

func (o PipeTargetInvocationTypePtrOutput) Elem() PipeTargetInvocationTypeOutput {
	return o.ApplyT(func(v *PipeTargetInvocationType) PipeTargetInvocationType {
		if v != nil {
			return *v
		}
		var ret PipeTargetInvocationType
		return ret
	}).(PipeTargetInvocationTypeOutput)
}

func (o PipeTargetInvocationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PipeTargetInvocationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PipeTargetInvocationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PipeTargetInvocationTypeInput is an input type that accepts PipeTargetInvocationTypeArgs and PipeTargetInvocationTypeOutput values.
// You can construct a concrete instance of `PipeTargetInvocationTypeInput` via:
//
//	PipeTargetInvocationTypeArgs{...}
type PipeTargetInvocationTypeInput interface {
	pulumi.Input

	ToPipeTargetInvocationTypeOutput() PipeTargetInvocationTypeOutput
	ToPipeTargetInvocationTypeOutputWithContext(context.Context) PipeTargetInvocationTypeOutput
}

var pipeTargetInvocationTypePtrType = reflect.TypeOf((**PipeTargetInvocationType)(nil)).Elem()

type PipeTargetInvocationTypePtrInput interface {
	pulumi.Input

	ToPipeTargetInvocationTypePtrOutput() PipeTargetInvocationTypePtrOutput
	ToPipeTargetInvocationTypePtrOutputWithContext(context.Context) PipeTargetInvocationTypePtrOutput
}

type pipeTargetInvocationTypePtr string

func PipeTargetInvocationTypePtr(v string) PipeTargetInvocationTypePtrInput {
	return (*pipeTargetInvocationTypePtr)(&v)
}

func (*pipeTargetInvocationTypePtr) ElementType() reflect.Type {
	return pipeTargetInvocationTypePtrType
}

func (in *pipeTargetInvocationTypePtr) ToPipeTargetInvocationTypePtrOutput() PipeTargetInvocationTypePtrOutput {
	return pulumi.ToOutput(in).(PipeTargetInvocationTypePtrOutput)
}

func (in *pipeTargetInvocationTypePtr) ToPipeTargetInvocationTypePtrOutputWithContext(ctx context.Context) PipeTargetInvocationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PipeTargetInvocationTypePtrOutput)
}

func (in *pipeTargetInvocationTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PipeTargetInvocationType] {
	return pulumix.Output[*PipeTargetInvocationType]{
		OutputState: in.ToPipeTargetInvocationTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipeAssignPublicIpInput)(nil)).Elem(), PipeAssignPublicIp("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeAssignPublicIpPtrInput)(nil)).Elem(), PipeAssignPublicIp("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchJobDependencyTypeInput)(nil)).Elem(), PipeBatchJobDependencyType("N_TO_N"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchJobDependencyTypePtrInput)(nil)).Elem(), PipeBatchJobDependencyType("N_TO_N"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchResourceRequirementTypeInput)(nil)).Elem(), PipeBatchResourceRequirementType("GPU"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchResourceRequirementTypePtrInput)(nil)).Elem(), PipeBatchResourceRequirementType("GPU"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeDynamoDbStreamStartPositionInput)(nil)).Elem(), PipeDynamoDbStreamStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeDynamoDbStreamStartPositionPtrInput)(nil)).Elem(), PipeDynamoDbStreamStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEnvironmentFileTypeInput)(nil)).Elem(), PipeEcsEnvironmentFileType("s3"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEnvironmentFileTypePtrInput)(nil)).Elem(), PipeEcsEnvironmentFileType("s3"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsResourceRequirementTypeInput)(nil)).Elem(), PipeEcsResourceRequirementType("GPU"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsResourceRequirementTypePtrInput)(nil)).Elem(), PipeEcsResourceRequirementType("GPU"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeIncludeExecutionDataOptionInput)(nil)).Elem(), PipeIncludeExecutionDataOption("ALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeIncludeExecutionDataOptionPtrInput)(nil)).Elem(), PipeIncludeExecutionDataOption("ALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeIncludeExecutionDataOptionArrayInput)(nil)).Elem(), PipeIncludeExecutionDataOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeKinesisStreamStartPositionInput)(nil)).Elem(), PipeKinesisStreamStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeKinesisStreamStartPositionPtrInput)(nil)).Elem(), PipeKinesisStreamStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeLaunchTypeInput)(nil)).Elem(), PipeLaunchType("EC2"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeLaunchTypePtrInput)(nil)).Elem(), PipeLaunchType("EC2"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeLogLevelInput)(nil)).Elem(), PipeLogLevel("OFF"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeLogLevelPtrInput)(nil)).Elem(), PipeLogLevel("OFF"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMskStartPositionInput)(nil)).Elem(), PipeMskStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMskStartPositionPtrInput)(nil)).Elem(), PipeMskStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeOnPartialBatchItemFailureStreamsInput)(nil)).Elem(), PipeOnPartialBatchItemFailureStreams("AUTOMATIC_BISECT"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeOnPartialBatchItemFailureStreamsPtrInput)(nil)).Elem(), PipeOnPartialBatchItemFailureStreams("AUTOMATIC_BISECT"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementConstraintTypeInput)(nil)).Elem(), PipePlacementConstraintType("distinctInstance"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementConstraintTypePtrInput)(nil)).Elem(), PipePlacementConstraintType("distinctInstance"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementStrategyTypeInput)(nil)).Elem(), PipePlacementStrategyType("random"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementStrategyTypePtrInput)(nil)).Elem(), PipePlacementStrategyType("random"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipePropagateTagsInput)(nil)).Elem(), PipePropagateTags("TASK_DEFINITION"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipePropagateTagsPtrInput)(nil)).Elem(), PipePropagateTags("TASK_DEFINITION"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeRequestedPipeStateInput)(nil)).Elem(), PipeRequestedPipeState("RUNNING"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeRequestedPipeStatePtrInput)(nil)).Elem(), PipeRequestedPipeState("RUNNING"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeS3OutputFormatInput)(nil)).Elem(), PipeS3OutputFormat("json"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeS3OutputFormatPtrInput)(nil)).Elem(), PipeS3OutputFormat("json"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaStartPositionInput)(nil)).Elem(), PipeSelfManagedKafkaStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaStartPositionPtrInput)(nil)).Elem(), PipeSelfManagedKafkaStartPosition("TRIM_HORIZON"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetInvocationTypeInput)(nil)).Elem(), PipeTargetInvocationType("REQUEST_RESPONSE"))
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetInvocationTypePtrInput)(nil)).Elem(), PipeTargetInvocationType("REQUEST_RESPONSE"))
	pulumi.RegisterOutputType(PipeAssignPublicIpOutput{})
	pulumi.RegisterOutputType(PipeAssignPublicIpPtrOutput{})
	pulumi.RegisterOutputType(PipeBatchJobDependencyTypeOutput{})
	pulumi.RegisterOutputType(PipeBatchJobDependencyTypePtrOutput{})
	pulumi.RegisterOutputType(PipeBatchResourceRequirementTypeOutput{})
	pulumi.RegisterOutputType(PipeBatchResourceRequirementTypePtrOutput{})
	pulumi.RegisterOutputType(PipeDynamoDbStreamStartPositionOutput{})
	pulumi.RegisterOutputType(PipeDynamoDbStreamStartPositionPtrOutput{})
	pulumi.RegisterOutputType(PipeEcsEnvironmentFileTypeOutput{})
	pulumi.RegisterOutputType(PipeEcsEnvironmentFileTypePtrOutput{})
	pulumi.RegisterOutputType(PipeEcsResourceRequirementTypeOutput{})
	pulumi.RegisterOutputType(PipeEcsResourceRequirementTypePtrOutput{})
	pulumi.RegisterOutputType(PipeIncludeExecutionDataOptionOutput{})
	pulumi.RegisterOutputType(PipeIncludeExecutionDataOptionPtrOutput{})
	pulumi.RegisterOutputType(PipeIncludeExecutionDataOptionArrayOutput{})
	pulumi.RegisterOutputType(PipeKinesisStreamStartPositionOutput{})
	pulumi.RegisterOutputType(PipeKinesisStreamStartPositionPtrOutput{})
	pulumi.RegisterOutputType(PipeLaunchTypeOutput{})
	pulumi.RegisterOutputType(PipeLaunchTypePtrOutput{})
	pulumi.RegisterOutputType(PipeLogLevelOutput{})
	pulumi.RegisterOutputType(PipeLogLevelPtrOutput{})
	pulumi.RegisterOutputType(PipeMskStartPositionOutput{})
	pulumi.RegisterOutputType(PipeMskStartPositionPtrOutput{})
	pulumi.RegisterOutputType(PipeOnPartialBatchItemFailureStreamsOutput{})
	pulumi.RegisterOutputType(PipeOnPartialBatchItemFailureStreamsPtrOutput{})
	pulumi.RegisterOutputType(PipePlacementConstraintTypeOutput{})
	pulumi.RegisterOutputType(PipePlacementConstraintTypePtrOutput{})
	pulumi.RegisterOutputType(PipePlacementStrategyTypeOutput{})
	pulumi.RegisterOutputType(PipePlacementStrategyTypePtrOutput{})
	pulumi.RegisterOutputType(PipePropagateTagsOutput{})
	pulumi.RegisterOutputType(PipePropagateTagsPtrOutput{})
	pulumi.RegisterOutputType(PipeRequestedPipeStateOutput{})
	pulumi.RegisterOutputType(PipeRequestedPipeStatePtrOutput{})
	pulumi.RegisterOutputType(PipeS3OutputFormatOutput{})
	pulumi.RegisterOutputType(PipeS3OutputFormatPtrOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaStartPositionOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaStartPositionPtrOutput{})
	pulumi.RegisterOutputType(PipeStateEnumOutput{})
	pulumi.RegisterOutputType(PipeStateEnumPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetInvocationTypeOutput{})
	pulumi.RegisterOutputType(PipeTargetInvocationTypePtrOutput{})
}
