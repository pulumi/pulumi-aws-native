// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Pipes::Pipe Resource Type
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/pipes"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pipes.NewPipe(ctx, "testPipe", &pipes.PipeArgs{
//				Name:       pulumi.String("PipeCfnExample"),
//				RoleArn:    pulumi.String("arn:aws:iam::123456789123:role/Pipe-Dev-All-Targets-Dummy-Execution-Role"),
//				Source:     pulumi.String("arn:aws:sqs:us-east-1:123456789123:pipeDemoSource"),
//				Enrichment: pulumi.String("arn:aws:execute-api:us-east-1:123456789123:53eo2i89p9/*/POST/pets"),
//				Target:     pulumi.String("arn:aws:states:us-east-1:123456789123:stateMachine:PipeTargetStateMachine"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/pipes"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pipes.NewPipe(ctx, "testPipe", &pipes.PipeArgs{
//				Name:       pulumi.String("PipeCfnExample"),
//				RoleArn:    pulumi.String("arn:aws:iam::123456789123:role/Pipe-Dev-All-Targets-Dummy-Execution-Role"),
//				Source:     pulumi.String("arn:aws:sqs:us-east-1:123456789123:pipeDemoSource"),
//				Enrichment: pulumi.String("arn:aws:execute-api:us-east-1:123456789123:53eo2i89p9/*/POST/pets"),
//				Target:     pulumi.String("arn:aws:states:us-east-1:123456789123:stateMachine:PipeTargetStateMachine"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Pipe struct {
	pulumi.CustomResourceState

	// The ARN of the pipe.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The time the pipe was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The state the pipe is in.
	CurrentState PipeStateEnumOutput `pulumi:"currentState"`
	// A description of the pipe.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The state the pipe should be in.
	DesiredState PipeRequestedPipeStatePtrOutput `pulumi:"desiredState"`
	// The ARN of the enrichment resource.
	Enrichment pulumi.StringPtrOutput `pulumi:"enrichment"`
	// The parameters required to set up enrichment on your pipe.
	EnrichmentParameters PipeEnrichmentParametersPtrOutput `pulumi:"enrichmentParameters"`
	// When the pipe was last updated, in [ISO-8601 format](https://docs.aws.amazon.com/https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// Represents the configuration settings for the logs to which this pipe should report events.
	LogConfiguration PipeLogConfigurationPtrOutput `pulumi:"logConfiguration"`
	// The name of the pipe.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The ARN of the source resource.
	Source pulumi.StringOutput `pulumi:"source"`
	// The parameters required to set up a source for your pipe.
	SourceParameters PipeSourceParametersPtrOutput `pulumi:"sourceParameters"`
	// The reason the pipe is in its current state.
	StateReason pulumi.StringOutput `pulumi:"stateReason"`
	// The list of key-value pairs to associate with the pipe.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ARN of the target resource.
	Target pulumi.StringOutput `pulumi:"target"`
	// The parameters required to set up a target for your pipe.
	//
	// For more information about pipe target parameters, including how to use dynamic path parameters, see [Target parameters](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-target.html) in the *Amazon EventBridge User Guide* .
	TargetParameters PipeTargetParametersPtrOutput `pulumi:"targetParameters"`
}

// NewPipe registers a new resource with the given unique name, arguments, and options.
func NewPipe(ctx *pulumi.Context,
	name string, args *PipeArgs, opts ...pulumi.ResourceOption) (*Pipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"source",
		"sourceParameters.activeMqBrokerParameters.queueName",
		"sourceParameters.dynamoDbStreamParameters.startingPosition",
		"sourceParameters.kinesisStreamParameters.startingPosition",
		"sourceParameters.kinesisStreamParameters.startingPositionTimestamp",
		"sourceParameters.managedStreamingKafkaParameters.consumerGroupId",
		"sourceParameters.managedStreamingKafkaParameters.startingPosition",
		"sourceParameters.managedStreamingKafkaParameters.topicName",
		"sourceParameters.rabbitMqBrokerParameters.queueName",
		"sourceParameters.rabbitMqBrokerParameters.virtualHost",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipe
	err := ctx.RegisterResource("aws-native:pipes:Pipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipe gets an existing Pipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipeState, opts ...pulumi.ResourceOption) (*Pipe, error) {
	var resource Pipe
	err := ctx.ReadResource("aws-native:pipes:Pipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipe resources.
type pipeState struct {
}

type PipeState struct {
}

func (PipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipeState)(nil)).Elem()
}

type pipeArgs struct {
	// A description of the pipe.
	Description *string `pulumi:"description"`
	// The state the pipe should be in.
	DesiredState *PipeRequestedPipeState `pulumi:"desiredState"`
	// The ARN of the enrichment resource.
	Enrichment *string `pulumi:"enrichment"`
	// The parameters required to set up enrichment on your pipe.
	EnrichmentParameters *PipeEnrichmentParameters `pulumi:"enrichmentParameters"`
	// Represents the configuration settings for the logs to which this pipe should report events.
	LogConfiguration *PipeLogConfiguration `pulumi:"logConfiguration"`
	// The name of the pipe.
	Name *string `pulumi:"name"`
	// The ARN of the role that allows the pipe to send data to the target.
	RoleArn string `pulumi:"roleArn"`
	// The ARN of the source resource.
	Source string `pulumi:"source"`
	// The parameters required to set up a source for your pipe.
	SourceParameters *PipeSourceParameters `pulumi:"sourceParameters"`
	// The list of key-value pairs to associate with the pipe.
	Tags map[string]string `pulumi:"tags"`
	// The ARN of the target resource.
	Target string `pulumi:"target"`
	// The parameters required to set up a target for your pipe.
	//
	// For more information about pipe target parameters, including how to use dynamic path parameters, see [Target parameters](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-target.html) in the *Amazon EventBridge User Guide* .
	TargetParameters *PipeTargetParameters `pulumi:"targetParameters"`
}

// The set of arguments for constructing a Pipe resource.
type PipeArgs struct {
	// A description of the pipe.
	Description pulumi.StringPtrInput
	// The state the pipe should be in.
	DesiredState PipeRequestedPipeStatePtrInput
	// The ARN of the enrichment resource.
	Enrichment pulumi.StringPtrInput
	// The parameters required to set up enrichment on your pipe.
	EnrichmentParameters PipeEnrichmentParametersPtrInput
	// Represents the configuration settings for the logs to which this pipe should report events.
	LogConfiguration PipeLogConfigurationPtrInput
	// The name of the pipe.
	Name pulumi.StringPtrInput
	// The ARN of the role that allows the pipe to send data to the target.
	RoleArn pulumi.StringInput
	// The ARN of the source resource.
	Source pulumi.StringInput
	// The parameters required to set up a source for your pipe.
	SourceParameters PipeSourceParametersPtrInput
	// The list of key-value pairs to associate with the pipe.
	Tags pulumi.StringMapInput
	// The ARN of the target resource.
	Target pulumi.StringInput
	// The parameters required to set up a target for your pipe.
	//
	// For more information about pipe target parameters, including how to use dynamic path parameters, see [Target parameters](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-target.html) in the *Amazon EventBridge User Guide* .
	TargetParameters PipeTargetParametersPtrInput
}

func (PipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipeArgs)(nil)).Elem()
}

type PipeInput interface {
	pulumi.Input

	ToPipeOutput() PipeOutput
	ToPipeOutputWithContext(ctx context.Context) PipeOutput
}

func (*Pipe) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipe)(nil)).Elem()
}

func (i *Pipe) ToPipeOutput() PipeOutput {
	return i.ToPipeOutputWithContext(context.Background())
}

func (i *Pipe) ToPipeOutputWithContext(ctx context.Context) PipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeOutput)
}

type PipeOutput struct{ *pulumi.OutputState }

func (PipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipe)(nil)).Elem()
}

func (o PipeOutput) ToPipeOutput() PipeOutput {
	return o
}

func (o PipeOutput) ToPipeOutputWithContext(ctx context.Context) PipeOutput {
	return o
}

// The ARN of the pipe.
func (o PipeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The time the pipe was created.
func (o PipeOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The state the pipe is in.
func (o PipeOutput) CurrentState() PipeStateEnumOutput {
	return o.ApplyT(func(v *Pipe) PipeStateEnumOutput { return v.CurrentState }).(PipeStateEnumOutput)
}

// A description of the pipe.
func (o PipeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The state the pipe should be in.
func (o PipeOutput) DesiredState() PipeRequestedPipeStatePtrOutput {
	return o.ApplyT(func(v *Pipe) PipeRequestedPipeStatePtrOutput { return v.DesiredState }).(PipeRequestedPipeStatePtrOutput)
}

// The ARN of the enrichment resource.
func (o PipeOutput) Enrichment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringPtrOutput { return v.Enrichment }).(pulumi.StringPtrOutput)
}

// The parameters required to set up enrichment on your pipe.
func (o PipeOutput) EnrichmentParameters() PipeEnrichmentParametersPtrOutput {
	return o.ApplyT(func(v *Pipe) PipeEnrichmentParametersPtrOutput { return v.EnrichmentParameters }).(PipeEnrichmentParametersPtrOutput)
}

// When the pipe was last updated, in [ISO-8601 format](https://docs.aws.amazon.com/https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
func (o PipeOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Represents the configuration settings for the logs to which this pipe should report events.
func (o PipeOutput) LogConfiguration() PipeLogConfigurationPtrOutput {
	return o.ApplyT(func(v *Pipe) PipeLogConfigurationPtrOutput { return v.LogConfiguration }).(PipeLogConfigurationPtrOutput)
}

// The name of the pipe.
func (o PipeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The ARN of the role that allows the pipe to send data to the target.
func (o PipeOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The ARN of the source resource.
func (o PipeOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The parameters required to set up a source for your pipe.
func (o PipeOutput) SourceParameters() PipeSourceParametersPtrOutput {
	return o.ApplyT(func(v *Pipe) PipeSourceParametersPtrOutput { return v.SourceParameters }).(PipeSourceParametersPtrOutput)
}

// The reason the pipe is in its current state.
func (o PipeOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.StateReason }).(pulumi.StringOutput)
}

// The list of key-value pairs to associate with the pipe.
func (o PipeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ARN of the target resource.
func (o PipeOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipe) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// The parameters required to set up a target for your pipe.
//
// For more information about pipe target parameters, including how to use dynamic path parameters, see [Target parameters](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-target.html) in the *Amazon EventBridge User Guide* .
func (o PipeOutput) TargetParameters() PipeTargetParametersPtrOutput {
	return o.ApplyT(func(v *Pipe) PipeTargetParametersPtrOutput { return v.TargetParameters }).(PipeTargetParametersPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipeInput)(nil)).Elem(), &Pipe{})
	pulumi.RegisterOutputType(PipeOutput{})
}
