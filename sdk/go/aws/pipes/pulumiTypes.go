// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pipes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type PipeAwsVpcConfiguration struct {
	AssignPublicIp *PipeAssignPublicIp `pulumi:"assignPublicIp"`
	SecurityGroups []string            `pulumi:"securityGroups"`
	Subnets        []string            `pulumi:"subnets"`
}

// PipeAwsVpcConfigurationInput is an input type that accepts PipeAwsVpcConfigurationArgs and PipeAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `PipeAwsVpcConfigurationInput` via:
//
//	PipeAwsVpcConfigurationArgs{...}
type PipeAwsVpcConfigurationInput interface {
	pulumi.Input

	ToPipeAwsVpcConfigurationOutput() PipeAwsVpcConfigurationOutput
	ToPipeAwsVpcConfigurationOutputWithContext(context.Context) PipeAwsVpcConfigurationOutput
}

type PipeAwsVpcConfigurationArgs struct {
	AssignPublicIp PipeAssignPublicIpPtrInput `pulumi:"assignPublicIp"`
	SecurityGroups pulumi.StringArrayInput    `pulumi:"securityGroups"`
	Subnets        pulumi.StringArrayInput    `pulumi:"subnets"`
}

func (PipeAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeAwsVpcConfiguration)(nil)).Elem()
}

func (i PipeAwsVpcConfigurationArgs) ToPipeAwsVpcConfigurationOutput() PipeAwsVpcConfigurationOutput {
	return i.ToPipeAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i PipeAwsVpcConfigurationArgs) ToPipeAwsVpcConfigurationOutputWithContext(ctx context.Context) PipeAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeAwsVpcConfigurationOutput)
}

func (i PipeAwsVpcConfigurationArgs) ToPipeAwsVpcConfigurationPtrOutput() PipeAwsVpcConfigurationPtrOutput {
	return i.ToPipeAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i PipeAwsVpcConfigurationArgs) ToPipeAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeAwsVpcConfigurationOutput).ToPipeAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// PipeAwsVpcConfigurationPtrInput is an input type that accepts PipeAwsVpcConfigurationArgs, PipeAwsVpcConfigurationPtr and PipeAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `PipeAwsVpcConfigurationPtrInput` via:
//
//	        PipeAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type PipeAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToPipeAwsVpcConfigurationPtrOutput() PipeAwsVpcConfigurationPtrOutput
	ToPipeAwsVpcConfigurationPtrOutputWithContext(context.Context) PipeAwsVpcConfigurationPtrOutput
}

type pipeAwsVpcConfigurationPtrType PipeAwsVpcConfigurationArgs

func PipeAwsVpcConfigurationPtr(v *PipeAwsVpcConfigurationArgs) PipeAwsVpcConfigurationPtrInput {
	return (*pipeAwsVpcConfigurationPtrType)(v)
}

func (*pipeAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeAwsVpcConfiguration)(nil)).Elem()
}

func (i *pipeAwsVpcConfigurationPtrType) ToPipeAwsVpcConfigurationPtrOutput() PipeAwsVpcConfigurationPtrOutput {
	return i.ToPipeAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *pipeAwsVpcConfigurationPtrType) ToPipeAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeAwsVpcConfigurationPtrOutput)
}

type PipeAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (PipeAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeAwsVpcConfiguration)(nil)).Elem()
}

func (o PipeAwsVpcConfigurationOutput) ToPipeAwsVpcConfigurationOutput() PipeAwsVpcConfigurationOutput {
	return o
}

func (o PipeAwsVpcConfigurationOutput) ToPipeAwsVpcConfigurationOutputWithContext(ctx context.Context) PipeAwsVpcConfigurationOutput {
	return o
}

func (o PipeAwsVpcConfigurationOutput) ToPipeAwsVpcConfigurationPtrOutput() PipeAwsVpcConfigurationPtrOutput {
	return o.ToPipeAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o PipeAwsVpcConfigurationOutput) ToPipeAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeAwsVpcConfiguration) *PipeAwsVpcConfiguration {
		return &v
	}).(PipeAwsVpcConfigurationPtrOutput)
}

func (o PipeAwsVpcConfigurationOutput) AssignPublicIp() PipeAssignPublicIpPtrOutput {
	return o.ApplyT(func(v PipeAwsVpcConfiguration) *PipeAssignPublicIp { return v.AssignPublicIp }).(PipeAssignPublicIpPtrOutput)
}

func (o PipeAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeAwsVpcConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o PipeAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeAwsVpcConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type PipeAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PipeAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeAwsVpcConfiguration)(nil)).Elem()
}

func (o PipeAwsVpcConfigurationPtrOutput) ToPipeAwsVpcConfigurationPtrOutput() PipeAwsVpcConfigurationPtrOutput {
	return o
}

func (o PipeAwsVpcConfigurationPtrOutput) ToPipeAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) PipeAwsVpcConfigurationPtrOutput {
	return o
}

func (o PipeAwsVpcConfigurationPtrOutput) Elem() PipeAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *PipeAwsVpcConfiguration) PipeAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret PipeAwsVpcConfiguration
		return ret
	}).(PipeAwsVpcConfigurationOutput)
}

func (o PipeAwsVpcConfigurationPtrOutput) AssignPublicIp() PipeAssignPublicIpPtrOutput {
	return o.ApplyT(func(v *PipeAwsVpcConfiguration) *PipeAssignPublicIp {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(PipeAssignPublicIpPtrOutput)
}

func (o PipeAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

func (o PipeAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type PipeBatchArrayProperties struct {
	Size *int `pulumi:"size"`
}

// PipeBatchArrayPropertiesInput is an input type that accepts PipeBatchArrayPropertiesArgs and PipeBatchArrayPropertiesOutput values.
// You can construct a concrete instance of `PipeBatchArrayPropertiesInput` via:
//
//	PipeBatchArrayPropertiesArgs{...}
type PipeBatchArrayPropertiesInput interface {
	pulumi.Input

	ToPipeBatchArrayPropertiesOutput() PipeBatchArrayPropertiesOutput
	ToPipeBatchArrayPropertiesOutputWithContext(context.Context) PipeBatchArrayPropertiesOutput
}

type PipeBatchArrayPropertiesArgs struct {
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (PipeBatchArrayPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchArrayProperties)(nil)).Elem()
}

func (i PipeBatchArrayPropertiesArgs) ToPipeBatchArrayPropertiesOutput() PipeBatchArrayPropertiesOutput {
	return i.ToPipeBatchArrayPropertiesOutputWithContext(context.Background())
}

func (i PipeBatchArrayPropertiesArgs) ToPipeBatchArrayPropertiesOutputWithContext(ctx context.Context) PipeBatchArrayPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchArrayPropertiesOutput)
}

func (i PipeBatchArrayPropertiesArgs) ToPipeBatchArrayPropertiesPtrOutput() PipeBatchArrayPropertiesPtrOutput {
	return i.ToPipeBatchArrayPropertiesPtrOutputWithContext(context.Background())
}

func (i PipeBatchArrayPropertiesArgs) ToPipeBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeBatchArrayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchArrayPropertiesOutput).ToPipeBatchArrayPropertiesPtrOutputWithContext(ctx)
}

// PipeBatchArrayPropertiesPtrInput is an input type that accepts PipeBatchArrayPropertiesArgs, PipeBatchArrayPropertiesPtr and PipeBatchArrayPropertiesPtrOutput values.
// You can construct a concrete instance of `PipeBatchArrayPropertiesPtrInput` via:
//
//	        PipeBatchArrayPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeBatchArrayPropertiesPtrInput interface {
	pulumi.Input

	ToPipeBatchArrayPropertiesPtrOutput() PipeBatchArrayPropertiesPtrOutput
	ToPipeBatchArrayPropertiesPtrOutputWithContext(context.Context) PipeBatchArrayPropertiesPtrOutput
}

type pipeBatchArrayPropertiesPtrType PipeBatchArrayPropertiesArgs

func PipeBatchArrayPropertiesPtr(v *PipeBatchArrayPropertiesArgs) PipeBatchArrayPropertiesPtrInput {
	return (*pipeBatchArrayPropertiesPtrType)(v)
}

func (*pipeBatchArrayPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchArrayProperties)(nil)).Elem()
}

func (i *pipeBatchArrayPropertiesPtrType) ToPipeBatchArrayPropertiesPtrOutput() PipeBatchArrayPropertiesPtrOutput {
	return i.ToPipeBatchArrayPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeBatchArrayPropertiesPtrType) ToPipeBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeBatchArrayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchArrayPropertiesPtrOutput)
}

type PipeBatchArrayPropertiesOutput struct{ *pulumi.OutputState }

func (PipeBatchArrayPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchArrayProperties)(nil)).Elem()
}

func (o PipeBatchArrayPropertiesOutput) ToPipeBatchArrayPropertiesOutput() PipeBatchArrayPropertiesOutput {
	return o
}

func (o PipeBatchArrayPropertiesOutput) ToPipeBatchArrayPropertiesOutputWithContext(ctx context.Context) PipeBatchArrayPropertiesOutput {
	return o
}

func (o PipeBatchArrayPropertiesOutput) ToPipeBatchArrayPropertiesPtrOutput() PipeBatchArrayPropertiesPtrOutput {
	return o.ToPipeBatchArrayPropertiesPtrOutputWithContext(context.Background())
}

func (o PipeBatchArrayPropertiesOutput) ToPipeBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeBatchArrayPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeBatchArrayProperties) *PipeBatchArrayProperties {
		return &v
	}).(PipeBatchArrayPropertiesPtrOutput)
}

func (o PipeBatchArrayPropertiesOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeBatchArrayProperties) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type PipeBatchArrayPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeBatchArrayPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchArrayProperties)(nil)).Elem()
}

func (o PipeBatchArrayPropertiesPtrOutput) ToPipeBatchArrayPropertiesPtrOutput() PipeBatchArrayPropertiesPtrOutput {
	return o
}

func (o PipeBatchArrayPropertiesPtrOutput) ToPipeBatchArrayPropertiesPtrOutputWithContext(ctx context.Context) PipeBatchArrayPropertiesPtrOutput {
	return o
}

func (o PipeBatchArrayPropertiesPtrOutput) Elem() PipeBatchArrayPropertiesOutput {
	return o.ApplyT(func(v *PipeBatchArrayProperties) PipeBatchArrayProperties {
		if v != nil {
			return *v
		}
		var ret PipeBatchArrayProperties
		return ret
	}).(PipeBatchArrayPropertiesOutput)
}

func (o PipeBatchArrayPropertiesPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeBatchArrayProperties) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type PipeBatchContainerOverrides struct {
	Command              []string                       `pulumi:"command"`
	Environment          []PipeBatchEnvironmentVariable `pulumi:"environment"`
	InstanceType         *string                        `pulumi:"instanceType"`
	ResourceRequirements []PipeBatchResourceRequirement `pulumi:"resourceRequirements"`
}

// PipeBatchContainerOverridesInput is an input type that accepts PipeBatchContainerOverridesArgs and PipeBatchContainerOverridesOutput values.
// You can construct a concrete instance of `PipeBatchContainerOverridesInput` via:
//
//	PipeBatchContainerOverridesArgs{...}
type PipeBatchContainerOverridesInput interface {
	pulumi.Input

	ToPipeBatchContainerOverridesOutput() PipeBatchContainerOverridesOutput
	ToPipeBatchContainerOverridesOutputWithContext(context.Context) PipeBatchContainerOverridesOutput
}

type PipeBatchContainerOverridesArgs struct {
	Command              pulumi.StringArrayInput                `pulumi:"command"`
	Environment          PipeBatchEnvironmentVariableArrayInput `pulumi:"environment"`
	InstanceType         pulumi.StringPtrInput                  `pulumi:"instanceType"`
	ResourceRequirements PipeBatchResourceRequirementArrayInput `pulumi:"resourceRequirements"`
}

func (PipeBatchContainerOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchContainerOverrides)(nil)).Elem()
}

func (i PipeBatchContainerOverridesArgs) ToPipeBatchContainerOverridesOutput() PipeBatchContainerOverridesOutput {
	return i.ToPipeBatchContainerOverridesOutputWithContext(context.Background())
}

func (i PipeBatchContainerOverridesArgs) ToPipeBatchContainerOverridesOutputWithContext(ctx context.Context) PipeBatchContainerOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchContainerOverridesOutput)
}

func (i PipeBatchContainerOverridesArgs) ToPipeBatchContainerOverridesPtrOutput() PipeBatchContainerOverridesPtrOutput {
	return i.ToPipeBatchContainerOverridesPtrOutputWithContext(context.Background())
}

func (i PipeBatchContainerOverridesArgs) ToPipeBatchContainerOverridesPtrOutputWithContext(ctx context.Context) PipeBatchContainerOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchContainerOverridesOutput).ToPipeBatchContainerOverridesPtrOutputWithContext(ctx)
}

// PipeBatchContainerOverridesPtrInput is an input type that accepts PipeBatchContainerOverridesArgs, PipeBatchContainerOverridesPtr and PipeBatchContainerOverridesPtrOutput values.
// You can construct a concrete instance of `PipeBatchContainerOverridesPtrInput` via:
//
//	        PipeBatchContainerOverridesArgs{...}
//
//	or:
//
//	        nil
type PipeBatchContainerOverridesPtrInput interface {
	pulumi.Input

	ToPipeBatchContainerOverridesPtrOutput() PipeBatchContainerOverridesPtrOutput
	ToPipeBatchContainerOverridesPtrOutputWithContext(context.Context) PipeBatchContainerOverridesPtrOutput
}

type pipeBatchContainerOverridesPtrType PipeBatchContainerOverridesArgs

func PipeBatchContainerOverridesPtr(v *PipeBatchContainerOverridesArgs) PipeBatchContainerOverridesPtrInput {
	return (*pipeBatchContainerOverridesPtrType)(v)
}

func (*pipeBatchContainerOverridesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchContainerOverrides)(nil)).Elem()
}

func (i *pipeBatchContainerOverridesPtrType) ToPipeBatchContainerOverridesPtrOutput() PipeBatchContainerOverridesPtrOutput {
	return i.ToPipeBatchContainerOverridesPtrOutputWithContext(context.Background())
}

func (i *pipeBatchContainerOverridesPtrType) ToPipeBatchContainerOverridesPtrOutputWithContext(ctx context.Context) PipeBatchContainerOverridesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchContainerOverridesPtrOutput)
}

type PipeBatchContainerOverridesOutput struct{ *pulumi.OutputState }

func (PipeBatchContainerOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchContainerOverrides)(nil)).Elem()
}

func (o PipeBatchContainerOverridesOutput) ToPipeBatchContainerOverridesOutput() PipeBatchContainerOverridesOutput {
	return o
}

func (o PipeBatchContainerOverridesOutput) ToPipeBatchContainerOverridesOutputWithContext(ctx context.Context) PipeBatchContainerOverridesOutput {
	return o
}

func (o PipeBatchContainerOverridesOutput) ToPipeBatchContainerOverridesPtrOutput() PipeBatchContainerOverridesPtrOutput {
	return o.ToPipeBatchContainerOverridesPtrOutputWithContext(context.Background())
}

func (o PipeBatchContainerOverridesOutput) ToPipeBatchContainerOverridesPtrOutputWithContext(ctx context.Context) PipeBatchContainerOverridesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeBatchContainerOverrides) *PipeBatchContainerOverrides {
		return &v
	}).(PipeBatchContainerOverridesPtrOutput)
}

func (o PipeBatchContainerOverridesOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeBatchContainerOverrides) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o PipeBatchContainerOverridesOutput) Environment() PipeBatchEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v PipeBatchContainerOverrides) []PipeBatchEnvironmentVariable { return v.Environment }).(PipeBatchEnvironmentVariableArrayOutput)
}

func (o PipeBatchContainerOverridesOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeBatchContainerOverrides) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

func (o PipeBatchContainerOverridesOutput) ResourceRequirements() PipeBatchResourceRequirementArrayOutput {
	return o.ApplyT(func(v PipeBatchContainerOverrides) []PipeBatchResourceRequirement { return v.ResourceRequirements }).(PipeBatchResourceRequirementArrayOutput)
}

type PipeBatchContainerOverridesPtrOutput struct{ *pulumi.OutputState }

func (PipeBatchContainerOverridesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchContainerOverrides)(nil)).Elem()
}

func (o PipeBatchContainerOverridesPtrOutput) ToPipeBatchContainerOverridesPtrOutput() PipeBatchContainerOverridesPtrOutput {
	return o
}

func (o PipeBatchContainerOverridesPtrOutput) ToPipeBatchContainerOverridesPtrOutputWithContext(ctx context.Context) PipeBatchContainerOverridesPtrOutput {
	return o
}

func (o PipeBatchContainerOverridesPtrOutput) Elem() PipeBatchContainerOverridesOutput {
	return o.ApplyT(func(v *PipeBatchContainerOverrides) PipeBatchContainerOverrides {
		if v != nil {
			return *v
		}
		var ret PipeBatchContainerOverrides
		return ret
	}).(PipeBatchContainerOverridesOutput)
}

func (o PipeBatchContainerOverridesPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeBatchContainerOverrides) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o PipeBatchContainerOverridesPtrOutput) Environment() PipeBatchEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *PipeBatchContainerOverrides) []PipeBatchEnvironmentVariable {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(PipeBatchEnvironmentVariableArrayOutput)
}

func (o PipeBatchContainerOverridesPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeBatchContainerOverrides) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

func (o PipeBatchContainerOverridesPtrOutput) ResourceRequirements() PipeBatchResourceRequirementArrayOutput {
	return o.ApplyT(func(v *PipeBatchContainerOverrides) []PipeBatchResourceRequirement {
		if v == nil {
			return nil
		}
		return v.ResourceRequirements
	}).(PipeBatchResourceRequirementArrayOutput)
}

type PipeBatchEnvironmentVariable struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// PipeBatchEnvironmentVariableInput is an input type that accepts PipeBatchEnvironmentVariableArgs and PipeBatchEnvironmentVariableOutput values.
// You can construct a concrete instance of `PipeBatchEnvironmentVariableInput` via:
//
//	PipeBatchEnvironmentVariableArgs{...}
type PipeBatchEnvironmentVariableInput interface {
	pulumi.Input

	ToPipeBatchEnvironmentVariableOutput() PipeBatchEnvironmentVariableOutput
	ToPipeBatchEnvironmentVariableOutputWithContext(context.Context) PipeBatchEnvironmentVariableOutput
}

type PipeBatchEnvironmentVariableArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PipeBatchEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchEnvironmentVariable)(nil)).Elem()
}

func (i PipeBatchEnvironmentVariableArgs) ToPipeBatchEnvironmentVariableOutput() PipeBatchEnvironmentVariableOutput {
	return i.ToPipeBatchEnvironmentVariableOutputWithContext(context.Background())
}

func (i PipeBatchEnvironmentVariableArgs) ToPipeBatchEnvironmentVariableOutputWithContext(ctx context.Context) PipeBatchEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchEnvironmentVariableOutput)
}

// PipeBatchEnvironmentVariableArrayInput is an input type that accepts PipeBatchEnvironmentVariableArray and PipeBatchEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `PipeBatchEnvironmentVariableArrayInput` via:
//
//	PipeBatchEnvironmentVariableArray{ PipeBatchEnvironmentVariableArgs{...} }
type PipeBatchEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToPipeBatchEnvironmentVariableArrayOutput() PipeBatchEnvironmentVariableArrayOutput
	ToPipeBatchEnvironmentVariableArrayOutputWithContext(context.Context) PipeBatchEnvironmentVariableArrayOutput
}

type PipeBatchEnvironmentVariableArray []PipeBatchEnvironmentVariableInput

func (PipeBatchEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeBatchEnvironmentVariable)(nil)).Elem()
}

func (i PipeBatchEnvironmentVariableArray) ToPipeBatchEnvironmentVariableArrayOutput() PipeBatchEnvironmentVariableArrayOutput {
	return i.ToPipeBatchEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i PipeBatchEnvironmentVariableArray) ToPipeBatchEnvironmentVariableArrayOutputWithContext(ctx context.Context) PipeBatchEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchEnvironmentVariableArrayOutput)
}

type PipeBatchEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (PipeBatchEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchEnvironmentVariable)(nil)).Elem()
}

func (o PipeBatchEnvironmentVariableOutput) ToPipeBatchEnvironmentVariableOutput() PipeBatchEnvironmentVariableOutput {
	return o
}

func (o PipeBatchEnvironmentVariableOutput) ToPipeBatchEnvironmentVariableOutputWithContext(ctx context.Context) PipeBatchEnvironmentVariableOutput {
	return o
}

func (o PipeBatchEnvironmentVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeBatchEnvironmentVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PipeBatchEnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeBatchEnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PipeBatchEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (PipeBatchEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeBatchEnvironmentVariable)(nil)).Elem()
}

func (o PipeBatchEnvironmentVariableArrayOutput) ToPipeBatchEnvironmentVariableArrayOutput() PipeBatchEnvironmentVariableArrayOutput {
	return o
}

func (o PipeBatchEnvironmentVariableArrayOutput) ToPipeBatchEnvironmentVariableArrayOutputWithContext(ctx context.Context) PipeBatchEnvironmentVariableArrayOutput {
	return o
}

func (o PipeBatchEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) PipeBatchEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeBatchEnvironmentVariable {
		return vs[0].([]PipeBatchEnvironmentVariable)[vs[1].(int)]
	}).(PipeBatchEnvironmentVariableOutput)
}

type PipeBatchJobDependency struct {
	JobId *string                     `pulumi:"jobId"`
	Type  *PipeBatchJobDependencyType `pulumi:"type"`
}

// PipeBatchJobDependencyInput is an input type that accepts PipeBatchJobDependencyArgs and PipeBatchJobDependencyOutput values.
// You can construct a concrete instance of `PipeBatchJobDependencyInput` via:
//
//	PipeBatchJobDependencyArgs{...}
type PipeBatchJobDependencyInput interface {
	pulumi.Input

	ToPipeBatchJobDependencyOutput() PipeBatchJobDependencyOutput
	ToPipeBatchJobDependencyOutputWithContext(context.Context) PipeBatchJobDependencyOutput
}

type PipeBatchJobDependencyArgs struct {
	JobId pulumi.StringPtrInput              `pulumi:"jobId"`
	Type  PipeBatchJobDependencyTypePtrInput `pulumi:"type"`
}

func (PipeBatchJobDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchJobDependency)(nil)).Elem()
}

func (i PipeBatchJobDependencyArgs) ToPipeBatchJobDependencyOutput() PipeBatchJobDependencyOutput {
	return i.ToPipeBatchJobDependencyOutputWithContext(context.Background())
}

func (i PipeBatchJobDependencyArgs) ToPipeBatchJobDependencyOutputWithContext(ctx context.Context) PipeBatchJobDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchJobDependencyOutput)
}

// PipeBatchJobDependencyArrayInput is an input type that accepts PipeBatchJobDependencyArray and PipeBatchJobDependencyArrayOutput values.
// You can construct a concrete instance of `PipeBatchJobDependencyArrayInput` via:
//
//	PipeBatchJobDependencyArray{ PipeBatchJobDependencyArgs{...} }
type PipeBatchJobDependencyArrayInput interface {
	pulumi.Input

	ToPipeBatchJobDependencyArrayOutput() PipeBatchJobDependencyArrayOutput
	ToPipeBatchJobDependencyArrayOutputWithContext(context.Context) PipeBatchJobDependencyArrayOutput
}

type PipeBatchJobDependencyArray []PipeBatchJobDependencyInput

func (PipeBatchJobDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeBatchJobDependency)(nil)).Elem()
}

func (i PipeBatchJobDependencyArray) ToPipeBatchJobDependencyArrayOutput() PipeBatchJobDependencyArrayOutput {
	return i.ToPipeBatchJobDependencyArrayOutputWithContext(context.Background())
}

func (i PipeBatchJobDependencyArray) ToPipeBatchJobDependencyArrayOutputWithContext(ctx context.Context) PipeBatchJobDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchJobDependencyArrayOutput)
}

type PipeBatchJobDependencyOutput struct{ *pulumi.OutputState }

func (PipeBatchJobDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchJobDependency)(nil)).Elem()
}

func (o PipeBatchJobDependencyOutput) ToPipeBatchJobDependencyOutput() PipeBatchJobDependencyOutput {
	return o
}

func (o PipeBatchJobDependencyOutput) ToPipeBatchJobDependencyOutputWithContext(ctx context.Context) PipeBatchJobDependencyOutput {
	return o
}

func (o PipeBatchJobDependencyOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeBatchJobDependency) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

func (o PipeBatchJobDependencyOutput) Type() PipeBatchJobDependencyTypePtrOutput {
	return o.ApplyT(func(v PipeBatchJobDependency) *PipeBatchJobDependencyType { return v.Type }).(PipeBatchJobDependencyTypePtrOutput)
}

type PipeBatchJobDependencyArrayOutput struct{ *pulumi.OutputState }

func (PipeBatchJobDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeBatchJobDependency)(nil)).Elem()
}

func (o PipeBatchJobDependencyArrayOutput) ToPipeBatchJobDependencyArrayOutput() PipeBatchJobDependencyArrayOutput {
	return o
}

func (o PipeBatchJobDependencyArrayOutput) ToPipeBatchJobDependencyArrayOutputWithContext(ctx context.Context) PipeBatchJobDependencyArrayOutput {
	return o
}

func (o PipeBatchJobDependencyArrayOutput) Index(i pulumi.IntInput) PipeBatchJobDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeBatchJobDependency {
		return vs[0].([]PipeBatchJobDependency)[vs[1].(int)]
	}).(PipeBatchJobDependencyOutput)
}

type PipeBatchParametersMap struct {
}

// PipeBatchParametersMapInput is an input type that accepts PipeBatchParametersMap and PipeBatchParametersMapOutput values.
// You can construct a concrete instance of `PipeBatchParametersMapInput` via:
//
//	PipeBatchParametersMap{ "key": PipeBatchParametersArgs{...} }
type PipeBatchParametersMapInput interface {
	pulumi.Input

	ToPipeBatchParametersMapOutput() PipeBatchParametersMapOutput
	ToPipeBatchParametersMapOutputWithContext(context.Context) PipeBatchParametersMapOutput
}

type PipeBatchParametersMapArgs struct {
}

func (PipeBatchParametersMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchParametersMap)(nil)).Elem()
}

func (i PipeBatchParametersMapArgs) ToPipeBatchParametersMapOutput() PipeBatchParametersMapOutput {
	return i.ToPipeBatchParametersMapOutputWithContext(context.Background())
}

func (i PipeBatchParametersMapArgs) ToPipeBatchParametersMapOutputWithContext(ctx context.Context) PipeBatchParametersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchParametersMapOutput)
}

func (i PipeBatchParametersMapArgs) ToPipeBatchParametersMapPtrOutput() PipeBatchParametersMapPtrOutput {
	return i.ToPipeBatchParametersMapPtrOutputWithContext(context.Background())
}

func (i PipeBatchParametersMapArgs) ToPipeBatchParametersMapPtrOutputWithContext(ctx context.Context) PipeBatchParametersMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchParametersMapOutput).ToPipeBatchParametersMapPtrOutputWithContext(ctx)
}

// PipeBatchParametersMapPtrInput is an input type that accepts PipeBatchParametersMapArgs, PipeBatchParametersMapPtr and PipeBatchParametersMapPtrOutput values.
// You can construct a concrete instance of `PipeBatchParametersMapPtrInput` via:
//
//	        PipeBatchParametersMapArgs{...}
//
//	or:
//
//	        nil
type PipeBatchParametersMapPtrInput interface {
	pulumi.Input

	ToPipeBatchParametersMapPtrOutput() PipeBatchParametersMapPtrOutput
	ToPipeBatchParametersMapPtrOutputWithContext(context.Context) PipeBatchParametersMapPtrOutput
}

type pipeBatchParametersMapPtrType PipeBatchParametersMapArgs

func PipeBatchParametersMapPtr(v *PipeBatchParametersMapArgs) PipeBatchParametersMapPtrInput {
	return (*pipeBatchParametersMapPtrType)(v)
}

func (*pipeBatchParametersMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchParametersMap)(nil)).Elem()
}

func (i *pipeBatchParametersMapPtrType) ToPipeBatchParametersMapPtrOutput() PipeBatchParametersMapPtrOutput {
	return i.ToPipeBatchParametersMapPtrOutputWithContext(context.Background())
}

func (i *pipeBatchParametersMapPtrType) ToPipeBatchParametersMapPtrOutputWithContext(ctx context.Context) PipeBatchParametersMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchParametersMapPtrOutput)
}

type PipeBatchParametersMapOutput struct{ *pulumi.OutputState }

func (PipeBatchParametersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchParametersMap)(nil)).Elem()
}

func (o PipeBatchParametersMapOutput) ToPipeBatchParametersMapOutput() PipeBatchParametersMapOutput {
	return o
}

func (o PipeBatchParametersMapOutput) ToPipeBatchParametersMapOutputWithContext(ctx context.Context) PipeBatchParametersMapOutput {
	return o
}

func (o PipeBatchParametersMapOutput) ToPipeBatchParametersMapPtrOutput() PipeBatchParametersMapPtrOutput {
	return o.ToPipeBatchParametersMapPtrOutputWithContext(context.Background())
}

func (o PipeBatchParametersMapOutput) ToPipeBatchParametersMapPtrOutputWithContext(ctx context.Context) PipeBatchParametersMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeBatchParametersMap) *PipeBatchParametersMap {
		return &v
	}).(PipeBatchParametersMapPtrOutput)
}

type PipeBatchParametersMapPtrOutput struct{ *pulumi.OutputState }

func (PipeBatchParametersMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchParametersMap)(nil)).Elem()
}

func (o PipeBatchParametersMapPtrOutput) ToPipeBatchParametersMapPtrOutput() PipeBatchParametersMapPtrOutput {
	return o
}

func (o PipeBatchParametersMapPtrOutput) ToPipeBatchParametersMapPtrOutputWithContext(ctx context.Context) PipeBatchParametersMapPtrOutput {
	return o
}

func (o PipeBatchParametersMapPtrOutput) Elem() PipeBatchParametersMapOutput {
	return o.ApplyT(func(v *PipeBatchParametersMap) PipeBatchParametersMap {
		if v != nil {
			return *v
		}
		var ret PipeBatchParametersMap
		return ret
	}).(PipeBatchParametersMapOutput)
}

type PipeBatchResourceRequirement struct {
	Type  PipeBatchResourceRequirementType `pulumi:"type"`
	Value string                           `pulumi:"value"`
}

// PipeBatchResourceRequirementInput is an input type that accepts PipeBatchResourceRequirementArgs and PipeBatchResourceRequirementOutput values.
// You can construct a concrete instance of `PipeBatchResourceRequirementInput` via:
//
//	PipeBatchResourceRequirementArgs{...}
type PipeBatchResourceRequirementInput interface {
	pulumi.Input

	ToPipeBatchResourceRequirementOutput() PipeBatchResourceRequirementOutput
	ToPipeBatchResourceRequirementOutputWithContext(context.Context) PipeBatchResourceRequirementOutput
}

type PipeBatchResourceRequirementArgs struct {
	Type  PipeBatchResourceRequirementTypeInput `pulumi:"type"`
	Value pulumi.StringInput                    `pulumi:"value"`
}

func (PipeBatchResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchResourceRequirement)(nil)).Elem()
}

func (i PipeBatchResourceRequirementArgs) ToPipeBatchResourceRequirementOutput() PipeBatchResourceRequirementOutput {
	return i.ToPipeBatchResourceRequirementOutputWithContext(context.Background())
}

func (i PipeBatchResourceRequirementArgs) ToPipeBatchResourceRequirementOutputWithContext(ctx context.Context) PipeBatchResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchResourceRequirementOutput)
}

// PipeBatchResourceRequirementArrayInput is an input type that accepts PipeBatchResourceRequirementArray and PipeBatchResourceRequirementArrayOutput values.
// You can construct a concrete instance of `PipeBatchResourceRequirementArrayInput` via:
//
//	PipeBatchResourceRequirementArray{ PipeBatchResourceRequirementArgs{...} }
type PipeBatchResourceRequirementArrayInput interface {
	pulumi.Input

	ToPipeBatchResourceRequirementArrayOutput() PipeBatchResourceRequirementArrayOutput
	ToPipeBatchResourceRequirementArrayOutputWithContext(context.Context) PipeBatchResourceRequirementArrayOutput
}

type PipeBatchResourceRequirementArray []PipeBatchResourceRequirementInput

func (PipeBatchResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeBatchResourceRequirement)(nil)).Elem()
}

func (i PipeBatchResourceRequirementArray) ToPipeBatchResourceRequirementArrayOutput() PipeBatchResourceRequirementArrayOutput {
	return i.ToPipeBatchResourceRequirementArrayOutputWithContext(context.Background())
}

func (i PipeBatchResourceRequirementArray) ToPipeBatchResourceRequirementArrayOutputWithContext(ctx context.Context) PipeBatchResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchResourceRequirementArrayOutput)
}

type PipeBatchResourceRequirementOutput struct{ *pulumi.OutputState }

func (PipeBatchResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchResourceRequirement)(nil)).Elem()
}

func (o PipeBatchResourceRequirementOutput) ToPipeBatchResourceRequirementOutput() PipeBatchResourceRequirementOutput {
	return o
}

func (o PipeBatchResourceRequirementOutput) ToPipeBatchResourceRequirementOutputWithContext(ctx context.Context) PipeBatchResourceRequirementOutput {
	return o
}

func (o PipeBatchResourceRequirementOutput) Type() PipeBatchResourceRequirementTypeOutput {
	return o.ApplyT(func(v PipeBatchResourceRequirement) PipeBatchResourceRequirementType { return v.Type }).(PipeBatchResourceRequirementTypeOutput)
}

func (o PipeBatchResourceRequirementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeBatchResourceRequirement) string { return v.Value }).(pulumi.StringOutput)
}

type PipeBatchResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (PipeBatchResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeBatchResourceRequirement)(nil)).Elem()
}

func (o PipeBatchResourceRequirementArrayOutput) ToPipeBatchResourceRequirementArrayOutput() PipeBatchResourceRequirementArrayOutput {
	return o
}

func (o PipeBatchResourceRequirementArrayOutput) ToPipeBatchResourceRequirementArrayOutputWithContext(ctx context.Context) PipeBatchResourceRequirementArrayOutput {
	return o
}

func (o PipeBatchResourceRequirementArrayOutput) Index(i pulumi.IntInput) PipeBatchResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeBatchResourceRequirement {
		return vs[0].([]PipeBatchResourceRequirement)[vs[1].(int)]
	}).(PipeBatchResourceRequirementOutput)
}

type PipeBatchRetryStrategy struct {
	Attempts *int `pulumi:"attempts"`
}

// PipeBatchRetryStrategyInput is an input type that accepts PipeBatchRetryStrategyArgs and PipeBatchRetryStrategyOutput values.
// You can construct a concrete instance of `PipeBatchRetryStrategyInput` via:
//
//	PipeBatchRetryStrategyArgs{...}
type PipeBatchRetryStrategyInput interface {
	pulumi.Input

	ToPipeBatchRetryStrategyOutput() PipeBatchRetryStrategyOutput
	ToPipeBatchRetryStrategyOutputWithContext(context.Context) PipeBatchRetryStrategyOutput
}

type PipeBatchRetryStrategyArgs struct {
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
}

func (PipeBatchRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchRetryStrategy)(nil)).Elem()
}

func (i PipeBatchRetryStrategyArgs) ToPipeBatchRetryStrategyOutput() PipeBatchRetryStrategyOutput {
	return i.ToPipeBatchRetryStrategyOutputWithContext(context.Background())
}

func (i PipeBatchRetryStrategyArgs) ToPipeBatchRetryStrategyOutputWithContext(ctx context.Context) PipeBatchRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchRetryStrategyOutput)
}

func (i PipeBatchRetryStrategyArgs) ToPipeBatchRetryStrategyPtrOutput() PipeBatchRetryStrategyPtrOutput {
	return i.ToPipeBatchRetryStrategyPtrOutputWithContext(context.Background())
}

func (i PipeBatchRetryStrategyArgs) ToPipeBatchRetryStrategyPtrOutputWithContext(ctx context.Context) PipeBatchRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchRetryStrategyOutput).ToPipeBatchRetryStrategyPtrOutputWithContext(ctx)
}

// PipeBatchRetryStrategyPtrInput is an input type that accepts PipeBatchRetryStrategyArgs, PipeBatchRetryStrategyPtr and PipeBatchRetryStrategyPtrOutput values.
// You can construct a concrete instance of `PipeBatchRetryStrategyPtrInput` via:
//
//	        PipeBatchRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type PipeBatchRetryStrategyPtrInput interface {
	pulumi.Input

	ToPipeBatchRetryStrategyPtrOutput() PipeBatchRetryStrategyPtrOutput
	ToPipeBatchRetryStrategyPtrOutputWithContext(context.Context) PipeBatchRetryStrategyPtrOutput
}

type pipeBatchRetryStrategyPtrType PipeBatchRetryStrategyArgs

func PipeBatchRetryStrategyPtr(v *PipeBatchRetryStrategyArgs) PipeBatchRetryStrategyPtrInput {
	return (*pipeBatchRetryStrategyPtrType)(v)
}

func (*pipeBatchRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchRetryStrategy)(nil)).Elem()
}

func (i *pipeBatchRetryStrategyPtrType) ToPipeBatchRetryStrategyPtrOutput() PipeBatchRetryStrategyPtrOutput {
	return i.ToPipeBatchRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *pipeBatchRetryStrategyPtrType) ToPipeBatchRetryStrategyPtrOutputWithContext(ctx context.Context) PipeBatchRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeBatchRetryStrategyPtrOutput)
}

type PipeBatchRetryStrategyOutput struct{ *pulumi.OutputState }

func (PipeBatchRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeBatchRetryStrategy)(nil)).Elem()
}

func (o PipeBatchRetryStrategyOutput) ToPipeBatchRetryStrategyOutput() PipeBatchRetryStrategyOutput {
	return o
}

func (o PipeBatchRetryStrategyOutput) ToPipeBatchRetryStrategyOutputWithContext(ctx context.Context) PipeBatchRetryStrategyOutput {
	return o
}

func (o PipeBatchRetryStrategyOutput) ToPipeBatchRetryStrategyPtrOutput() PipeBatchRetryStrategyPtrOutput {
	return o.ToPipeBatchRetryStrategyPtrOutputWithContext(context.Background())
}

func (o PipeBatchRetryStrategyOutput) ToPipeBatchRetryStrategyPtrOutputWithContext(ctx context.Context) PipeBatchRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeBatchRetryStrategy) *PipeBatchRetryStrategy {
		return &v
	}).(PipeBatchRetryStrategyPtrOutput)
}

func (o PipeBatchRetryStrategyOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeBatchRetryStrategy) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

type PipeBatchRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (PipeBatchRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeBatchRetryStrategy)(nil)).Elem()
}

func (o PipeBatchRetryStrategyPtrOutput) ToPipeBatchRetryStrategyPtrOutput() PipeBatchRetryStrategyPtrOutput {
	return o
}

func (o PipeBatchRetryStrategyPtrOutput) ToPipeBatchRetryStrategyPtrOutputWithContext(ctx context.Context) PipeBatchRetryStrategyPtrOutput {
	return o
}

func (o PipeBatchRetryStrategyPtrOutput) Elem() PipeBatchRetryStrategyOutput {
	return o.ApplyT(func(v *PipeBatchRetryStrategy) PipeBatchRetryStrategy {
		if v != nil {
			return *v
		}
		var ret PipeBatchRetryStrategy
		return ret
	}).(PipeBatchRetryStrategyOutput)
}

func (o PipeBatchRetryStrategyPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeBatchRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

type PipeCapacityProviderStrategyItem struct {
	Base             *int   `pulumi:"base"`
	CapacityProvider string `pulumi:"capacityProvider"`
	Weight           *int   `pulumi:"weight"`
}

// PipeCapacityProviderStrategyItemInput is an input type that accepts PipeCapacityProviderStrategyItemArgs and PipeCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `PipeCapacityProviderStrategyItemInput` via:
//
//	PipeCapacityProviderStrategyItemArgs{...}
type PipeCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToPipeCapacityProviderStrategyItemOutput() PipeCapacityProviderStrategyItemOutput
	ToPipeCapacityProviderStrategyItemOutputWithContext(context.Context) PipeCapacityProviderStrategyItemOutput
}

type PipeCapacityProviderStrategyItemArgs struct {
	Base             pulumi.IntPtrInput `pulumi:"base"`
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	Weight           pulumi.IntPtrInput `pulumi:"weight"`
}

func (PipeCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeCapacityProviderStrategyItem)(nil)).Elem()
}

func (i PipeCapacityProviderStrategyItemArgs) ToPipeCapacityProviderStrategyItemOutput() PipeCapacityProviderStrategyItemOutput {
	return i.ToPipeCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i PipeCapacityProviderStrategyItemArgs) ToPipeCapacityProviderStrategyItemOutputWithContext(ctx context.Context) PipeCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeCapacityProviderStrategyItemOutput)
}

// PipeCapacityProviderStrategyItemArrayInput is an input type that accepts PipeCapacityProviderStrategyItemArray and PipeCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `PipeCapacityProviderStrategyItemArrayInput` via:
//
//	PipeCapacityProviderStrategyItemArray{ PipeCapacityProviderStrategyItemArgs{...} }
type PipeCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToPipeCapacityProviderStrategyItemArrayOutput() PipeCapacityProviderStrategyItemArrayOutput
	ToPipeCapacityProviderStrategyItemArrayOutputWithContext(context.Context) PipeCapacityProviderStrategyItemArrayOutput
}

type PipeCapacityProviderStrategyItemArray []PipeCapacityProviderStrategyItemInput

func (PipeCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeCapacityProviderStrategyItem)(nil)).Elem()
}

func (i PipeCapacityProviderStrategyItemArray) ToPipeCapacityProviderStrategyItemArrayOutput() PipeCapacityProviderStrategyItemArrayOutput {
	return i.ToPipeCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i PipeCapacityProviderStrategyItemArray) ToPipeCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) PipeCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeCapacityProviderStrategyItemArrayOutput)
}

type PipeCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (PipeCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeCapacityProviderStrategyItem)(nil)).Elem()
}

func (o PipeCapacityProviderStrategyItemOutput) ToPipeCapacityProviderStrategyItemOutput() PipeCapacityProviderStrategyItemOutput {
	return o
}

func (o PipeCapacityProviderStrategyItemOutput) ToPipeCapacityProviderStrategyItemOutputWithContext(ctx context.Context) PipeCapacityProviderStrategyItemOutput {
	return o
}

func (o PipeCapacityProviderStrategyItemOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeCapacityProviderStrategyItem) *int { return v.Base }).(pulumi.IntPtrOutput)
}

func (o PipeCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v PipeCapacityProviderStrategyItem) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

func (o PipeCapacityProviderStrategyItemOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeCapacityProviderStrategyItem) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type PipeCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (PipeCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeCapacityProviderStrategyItem)(nil)).Elem()
}

func (o PipeCapacityProviderStrategyItemArrayOutput) ToPipeCapacityProviderStrategyItemArrayOutput() PipeCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o PipeCapacityProviderStrategyItemArrayOutput) ToPipeCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) PipeCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o PipeCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) PipeCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeCapacityProviderStrategyItem {
		return vs[0].([]PipeCapacityProviderStrategyItem)[vs[1].(int)]
	}).(PipeCapacityProviderStrategyItemOutput)
}

type PipeCloudwatchLogsLogDestination struct {
	LogGroupArn *string `pulumi:"logGroupArn"`
}

// PipeCloudwatchLogsLogDestinationInput is an input type that accepts PipeCloudwatchLogsLogDestinationArgs and PipeCloudwatchLogsLogDestinationOutput values.
// You can construct a concrete instance of `PipeCloudwatchLogsLogDestinationInput` via:
//
//	PipeCloudwatchLogsLogDestinationArgs{...}
type PipeCloudwatchLogsLogDestinationInput interface {
	pulumi.Input

	ToPipeCloudwatchLogsLogDestinationOutput() PipeCloudwatchLogsLogDestinationOutput
	ToPipeCloudwatchLogsLogDestinationOutputWithContext(context.Context) PipeCloudwatchLogsLogDestinationOutput
}

type PipeCloudwatchLogsLogDestinationArgs struct {
	LogGroupArn pulumi.StringPtrInput `pulumi:"logGroupArn"`
}

func (PipeCloudwatchLogsLogDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeCloudwatchLogsLogDestination)(nil)).Elem()
}

func (i PipeCloudwatchLogsLogDestinationArgs) ToPipeCloudwatchLogsLogDestinationOutput() PipeCloudwatchLogsLogDestinationOutput {
	return i.ToPipeCloudwatchLogsLogDestinationOutputWithContext(context.Background())
}

func (i PipeCloudwatchLogsLogDestinationArgs) ToPipeCloudwatchLogsLogDestinationOutputWithContext(ctx context.Context) PipeCloudwatchLogsLogDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeCloudwatchLogsLogDestinationOutput)
}

func (i PipeCloudwatchLogsLogDestinationArgs) ToPipeCloudwatchLogsLogDestinationPtrOutput() PipeCloudwatchLogsLogDestinationPtrOutput {
	return i.ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(context.Background())
}

func (i PipeCloudwatchLogsLogDestinationArgs) ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(ctx context.Context) PipeCloudwatchLogsLogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeCloudwatchLogsLogDestinationOutput).ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(ctx)
}

// PipeCloudwatchLogsLogDestinationPtrInput is an input type that accepts PipeCloudwatchLogsLogDestinationArgs, PipeCloudwatchLogsLogDestinationPtr and PipeCloudwatchLogsLogDestinationPtrOutput values.
// You can construct a concrete instance of `PipeCloudwatchLogsLogDestinationPtrInput` via:
//
//	        PipeCloudwatchLogsLogDestinationArgs{...}
//
//	or:
//
//	        nil
type PipeCloudwatchLogsLogDestinationPtrInput interface {
	pulumi.Input

	ToPipeCloudwatchLogsLogDestinationPtrOutput() PipeCloudwatchLogsLogDestinationPtrOutput
	ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(context.Context) PipeCloudwatchLogsLogDestinationPtrOutput
}

type pipeCloudwatchLogsLogDestinationPtrType PipeCloudwatchLogsLogDestinationArgs

func PipeCloudwatchLogsLogDestinationPtr(v *PipeCloudwatchLogsLogDestinationArgs) PipeCloudwatchLogsLogDestinationPtrInput {
	return (*pipeCloudwatchLogsLogDestinationPtrType)(v)
}

func (*pipeCloudwatchLogsLogDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeCloudwatchLogsLogDestination)(nil)).Elem()
}

func (i *pipeCloudwatchLogsLogDestinationPtrType) ToPipeCloudwatchLogsLogDestinationPtrOutput() PipeCloudwatchLogsLogDestinationPtrOutput {
	return i.ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(context.Background())
}

func (i *pipeCloudwatchLogsLogDestinationPtrType) ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(ctx context.Context) PipeCloudwatchLogsLogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeCloudwatchLogsLogDestinationPtrOutput)
}

type PipeCloudwatchLogsLogDestinationOutput struct{ *pulumi.OutputState }

func (PipeCloudwatchLogsLogDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeCloudwatchLogsLogDestination)(nil)).Elem()
}

func (o PipeCloudwatchLogsLogDestinationOutput) ToPipeCloudwatchLogsLogDestinationOutput() PipeCloudwatchLogsLogDestinationOutput {
	return o
}

func (o PipeCloudwatchLogsLogDestinationOutput) ToPipeCloudwatchLogsLogDestinationOutputWithContext(ctx context.Context) PipeCloudwatchLogsLogDestinationOutput {
	return o
}

func (o PipeCloudwatchLogsLogDestinationOutput) ToPipeCloudwatchLogsLogDestinationPtrOutput() PipeCloudwatchLogsLogDestinationPtrOutput {
	return o.ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(context.Background())
}

func (o PipeCloudwatchLogsLogDestinationOutput) ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(ctx context.Context) PipeCloudwatchLogsLogDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeCloudwatchLogsLogDestination) *PipeCloudwatchLogsLogDestination {
		return &v
	}).(PipeCloudwatchLogsLogDestinationPtrOutput)
}

func (o PipeCloudwatchLogsLogDestinationOutput) LogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeCloudwatchLogsLogDestination) *string { return v.LogGroupArn }).(pulumi.StringPtrOutput)
}

type PipeCloudwatchLogsLogDestinationPtrOutput struct{ *pulumi.OutputState }

func (PipeCloudwatchLogsLogDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeCloudwatchLogsLogDestination)(nil)).Elem()
}

func (o PipeCloudwatchLogsLogDestinationPtrOutput) ToPipeCloudwatchLogsLogDestinationPtrOutput() PipeCloudwatchLogsLogDestinationPtrOutput {
	return o
}

func (o PipeCloudwatchLogsLogDestinationPtrOutput) ToPipeCloudwatchLogsLogDestinationPtrOutputWithContext(ctx context.Context) PipeCloudwatchLogsLogDestinationPtrOutput {
	return o
}

func (o PipeCloudwatchLogsLogDestinationPtrOutput) Elem() PipeCloudwatchLogsLogDestinationOutput {
	return o.ApplyT(func(v *PipeCloudwatchLogsLogDestination) PipeCloudwatchLogsLogDestination {
		if v != nil {
			return *v
		}
		var ret PipeCloudwatchLogsLogDestination
		return ret
	}).(PipeCloudwatchLogsLogDestinationOutput)
}

func (o PipeCloudwatchLogsLogDestinationPtrOutput) LogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeCloudwatchLogsLogDestination) *string {
		if v == nil {
			return nil
		}
		return v.LogGroupArn
	}).(pulumi.StringPtrOutput)
}

type PipeDeadLetterConfig struct {
	Arn *string `pulumi:"arn"`
}

// PipeDeadLetterConfigInput is an input type that accepts PipeDeadLetterConfigArgs and PipeDeadLetterConfigOutput values.
// You can construct a concrete instance of `PipeDeadLetterConfigInput` via:
//
//	PipeDeadLetterConfigArgs{...}
type PipeDeadLetterConfigInput interface {
	pulumi.Input

	ToPipeDeadLetterConfigOutput() PipeDeadLetterConfigOutput
	ToPipeDeadLetterConfigOutputWithContext(context.Context) PipeDeadLetterConfigOutput
}

type PipeDeadLetterConfigArgs struct {
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (PipeDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeDeadLetterConfig)(nil)).Elem()
}

func (i PipeDeadLetterConfigArgs) ToPipeDeadLetterConfigOutput() PipeDeadLetterConfigOutput {
	return i.ToPipeDeadLetterConfigOutputWithContext(context.Background())
}

func (i PipeDeadLetterConfigArgs) ToPipeDeadLetterConfigOutputWithContext(ctx context.Context) PipeDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeDeadLetterConfigOutput)
}

func (i PipeDeadLetterConfigArgs) ToPipeDeadLetterConfigPtrOutput() PipeDeadLetterConfigPtrOutput {
	return i.ToPipeDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i PipeDeadLetterConfigArgs) ToPipeDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeDeadLetterConfigOutput).ToPipeDeadLetterConfigPtrOutputWithContext(ctx)
}

// PipeDeadLetterConfigPtrInput is an input type that accepts PipeDeadLetterConfigArgs, PipeDeadLetterConfigPtr and PipeDeadLetterConfigPtrOutput values.
// You can construct a concrete instance of `PipeDeadLetterConfigPtrInput` via:
//
//	        PipeDeadLetterConfigArgs{...}
//
//	or:
//
//	        nil
type PipeDeadLetterConfigPtrInput interface {
	pulumi.Input

	ToPipeDeadLetterConfigPtrOutput() PipeDeadLetterConfigPtrOutput
	ToPipeDeadLetterConfigPtrOutputWithContext(context.Context) PipeDeadLetterConfigPtrOutput
}

type pipeDeadLetterConfigPtrType PipeDeadLetterConfigArgs

func PipeDeadLetterConfigPtr(v *PipeDeadLetterConfigArgs) PipeDeadLetterConfigPtrInput {
	return (*pipeDeadLetterConfigPtrType)(v)
}

func (*pipeDeadLetterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeDeadLetterConfig)(nil)).Elem()
}

func (i *pipeDeadLetterConfigPtrType) ToPipeDeadLetterConfigPtrOutput() PipeDeadLetterConfigPtrOutput {
	return i.ToPipeDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i *pipeDeadLetterConfigPtrType) ToPipeDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeDeadLetterConfigPtrOutput)
}

type PipeDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (PipeDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeDeadLetterConfig)(nil)).Elem()
}

func (o PipeDeadLetterConfigOutput) ToPipeDeadLetterConfigOutput() PipeDeadLetterConfigOutput {
	return o
}

func (o PipeDeadLetterConfigOutput) ToPipeDeadLetterConfigOutputWithContext(ctx context.Context) PipeDeadLetterConfigOutput {
	return o
}

func (o PipeDeadLetterConfigOutput) ToPipeDeadLetterConfigPtrOutput() PipeDeadLetterConfigPtrOutput {
	return o.ToPipeDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (o PipeDeadLetterConfigOutput) ToPipeDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeDeadLetterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeDeadLetterConfig) *PipeDeadLetterConfig {
		return &v
	}).(PipeDeadLetterConfigPtrOutput)
}

func (o PipeDeadLetterConfigOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeDeadLetterConfig) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type PipeDeadLetterConfigPtrOutput struct{ *pulumi.OutputState }

func (PipeDeadLetterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeDeadLetterConfig)(nil)).Elem()
}

func (o PipeDeadLetterConfigPtrOutput) ToPipeDeadLetterConfigPtrOutput() PipeDeadLetterConfigPtrOutput {
	return o
}

func (o PipeDeadLetterConfigPtrOutput) ToPipeDeadLetterConfigPtrOutputWithContext(ctx context.Context) PipeDeadLetterConfigPtrOutput {
	return o
}

func (o PipeDeadLetterConfigPtrOutput) Elem() PipeDeadLetterConfigOutput {
	return o.ApplyT(func(v *PipeDeadLetterConfig) PipeDeadLetterConfig {
		if v != nil {
			return *v
		}
		var ret PipeDeadLetterConfig
		return ret
	}).(PipeDeadLetterConfigOutput)
}

func (o PipeDeadLetterConfigPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeDeadLetterConfig) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

type PipeEcsContainerOverride struct {
	Command              []string                     `pulumi:"command"`
	Cpu                  *int                         `pulumi:"cpu"`
	Environment          []PipeEcsEnvironmentVariable `pulumi:"environment"`
	EnvironmentFiles     []PipeEcsEnvironmentFile     `pulumi:"environmentFiles"`
	Memory               *int                         `pulumi:"memory"`
	MemoryReservation    *int                         `pulumi:"memoryReservation"`
	Name                 *string                      `pulumi:"name"`
	ResourceRequirements []PipeEcsResourceRequirement `pulumi:"resourceRequirements"`
}

// PipeEcsContainerOverrideInput is an input type that accepts PipeEcsContainerOverrideArgs and PipeEcsContainerOverrideOutput values.
// You can construct a concrete instance of `PipeEcsContainerOverrideInput` via:
//
//	PipeEcsContainerOverrideArgs{...}
type PipeEcsContainerOverrideInput interface {
	pulumi.Input

	ToPipeEcsContainerOverrideOutput() PipeEcsContainerOverrideOutput
	ToPipeEcsContainerOverrideOutputWithContext(context.Context) PipeEcsContainerOverrideOutput
}

type PipeEcsContainerOverrideArgs struct {
	Command              pulumi.StringArrayInput              `pulumi:"command"`
	Cpu                  pulumi.IntPtrInput                   `pulumi:"cpu"`
	Environment          PipeEcsEnvironmentVariableArrayInput `pulumi:"environment"`
	EnvironmentFiles     PipeEcsEnvironmentFileArrayInput     `pulumi:"environmentFiles"`
	Memory               pulumi.IntPtrInput                   `pulumi:"memory"`
	MemoryReservation    pulumi.IntPtrInput                   `pulumi:"memoryReservation"`
	Name                 pulumi.StringPtrInput                `pulumi:"name"`
	ResourceRequirements PipeEcsResourceRequirementArrayInput `pulumi:"resourceRequirements"`
}

func (PipeEcsContainerOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsContainerOverride)(nil)).Elem()
}

func (i PipeEcsContainerOverrideArgs) ToPipeEcsContainerOverrideOutput() PipeEcsContainerOverrideOutput {
	return i.ToPipeEcsContainerOverrideOutputWithContext(context.Background())
}

func (i PipeEcsContainerOverrideArgs) ToPipeEcsContainerOverrideOutputWithContext(ctx context.Context) PipeEcsContainerOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsContainerOverrideOutput)
}

// PipeEcsContainerOverrideArrayInput is an input type that accepts PipeEcsContainerOverrideArray and PipeEcsContainerOverrideArrayOutput values.
// You can construct a concrete instance of `PipeEcsContainerOverrideArrayInput` via:
//
//	PipeEcsContainerOverrideArray{ PipeEcsContainerOverrideArgs{...} }
type PipeEcsContainerOverrideArrayInput interface {
	pulumi.Input

	ToPipeEcsContainerOverrideArrayOutput() PipeEcsContainerOverrideArrayOutput
	ToPipeEcsContainerOverrideArrayOutputWithContext(context.Context) PipeEcsContainerOverrideArrayOutput
}

type PipeEcsContainerOverrideArray []PipeEcsContainerOverrideInput

func (PipeEcsContainerOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsContainerOverride)(nil)).Elem()
}

func (i PipeEcsContainerOverrideArray) ToPipeEcsContainerOverrideArrayOutput() PipeEcsContainerOverrideArrayOutput {
	return i.ToPipeEcsContainerOverrideArrayOutputWithContext(context.Background())
}

func (i PipeEcsContainerOverrideArray) ToPipeEcsContainerOverrideArrayOutputWithContext(ctx context.Context) PipeEcsContainerOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsContainerOverrideArrayOutput)
}

type PipeEcsContainerOverrideOutput struct{ *pulumi.OutputState }

func (PipeEcsContainerOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsContainerOverride)(nil)).Elem()
}

func (o PipeEcsContainerOverrideOutput) ToPipeEcsContainerOverrideOutput() PipeEcsContainerOverrideOutput {
	return o
}

func (o PipeEcsContainerOverrideOutput) ToPipeEcsContainerOverrideOutputWithContext(ctx context.Context) PipeEcsContainerOverrideOutput {
	return o
}

func (o PipeEcsContainerOverrideOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o PipeEcsContainerOverrideOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

func (o PipeEcsContainerOverrideOutput) Environment() PipeEcsEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) []PipeEcsEnvironmentVariable { return v.Environment }).(PipeEcsEnvironmentVariableArrayOutput)
}

func (o PipeEcsContainerOverrideOutput) EnvironmentFiles() PipeEcsEnvironmentFileArrayOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) []PipeEcsEnvironmentFile { return v.EnvironmentFiles }).(PipeEcsEnvironmentFileArrayOutput)
}

func (o PipeEcsContainerOverrideOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o PipeEcsContainerOverrideOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) *int { return v.MemoryReservation }).(pulumi.IntPtrOutput)
}

func (o PipeEcsContainerOverrideOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PipeEcsContainerOverrideOutput) ResourceRequirements() PipeEcsResourceRequirementArrayOutput {
	return o.ApplyT(func(v PipeEcsContainerOverride) []PipeEcsResourceRequirement { return v.ResourceRequirements }).(PipeEcsResourceRequirementArrayOutput)
}

type PipeEcsContainerOverrideArrayOutput struct{ *pulumi.OutputState }

func (PipeEcsContainerOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsContainerOverride)(nil)).Elem()
}

func (o PipeEcsContainerOverrideArrayOutput) ToPipeEcsContainerOverrideArrayOutput() PipeEcsContainerOverrideArrayOutput {
	return o
}

func (o PipeEcsContainerOverrideArrayOutput) ToPipeEcsContainerOverrideArrayOutputWithContext(ctx context.Context) PipeEcsContainerOverrideArrayOutput {
	return o
}

func (o PipeEcsContainerOverrideArrayOutput) Index(i pulumi.IntInput) PipeEcsContainerOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeEcsContainerOverride {
		return vs[0].([]PipeEcsContainerOverride)[vs[1].(int)]
	}).(PipeEcsContainerOverrideOutput)
}

type PipeEcsEnvironmentFile struct {
	Type  PipeEcsEnvironmentFileType `pulumi:"type"`
	Value string                     `pulumi:"value"`
}

// PipeEcsEnvironmentFileInput is an input type that accepts PipeEcsEnvironmentFileArgs and PipeEcsEnvironmentFileOutput values.
// You can construct a concrete instance of `PipeEcsEnvironmentFileInput` via:
//
//	PipeEcsEnvironmentFileArgs{...}
type PipeEcsEnvironmentFileInput interface {
	pulumi.Input

	ToPipeEcsEnvironmentFileOutput() PipeEcsEnvironmentFileOutput
	ToPipeEcsEnvironmentFileOutputWithContext(context.Context) PipeEcsEnvironmentFileOutput
}

type PipeEcsEnvironmentFileArgs struct {
	Type  PipeEcsEnvironmentFileTypeInput `pulumi:"type"`
	Value pulumi.StringInput              `pulumi:"value"`
}

func (PipeEcsEnvironmentFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEnvironmentFile)(nil)).Elem()
}

func (i PipeEcsEnvironmentFileArgs) ToPipeEcsEnvironmentFileOutput() PipeEcsEnvironmentFileOutput {
	return i.ToPipeEcsEnvironmentFileOutputWithContext(context.Background())
}

func (i PipeEcsEnvironmentFileArgs) ToPipeEcsEnvironmentFileOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsEnvironmentFileOutput)
}

// PipeEcsEnvironmentFileArrayInput is an input type that accepts PipeEcsEnvironmentFileArray and PipeEcsEnvironmentFileArrayOutput values.
// You can construct a concrete instance of `PipeEcsEnvironmentFileArrayInput` via:
//
//	PipeEcsEnvironmentFileArray{ PipeEcsEnvironmentFileArgs{...} }
type PipeEcsEnvironmentFileArrayInput interface {
	pulumi.Input

	ToPipeEcsEnvironmentFileArrayOutput() PipeEcsEnvironmentFileArrayOutput
	ToPipeEcsEnvironmentFileArrayOutputWithContext(context.Context) PipeEcsEnvironmentFileArrayOutput
}

type PipeEcsEnvironmentFileArray []PipeEcsEnvironmentFileInput

func (PipeEcsEnvironmentFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsEnvironmentFile)(nil)).Elem()
}

func (i PipeEcsEnvironmentFileArray) ToPipeEcsEnvironmentFileArrayOutput() PipeEcsEnvironmentFileArrayOutput {
	return i.ToPipeEcsEnvironmentFileArrayOutputWithContext(context.Background())
}

func (i PipeEcsEnvironmentFileArray) ToPipeEcsEnvironmentFileArrayOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsEnvironmentFileArrayOutput)
}

type PipeEcsEnvironmentFileOutput struct{ *pulumi.OutputState }

func (PipeEcsEnvironmentFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEnvironmentFile)(nil)).Elem()
}

func (o PipeEcsEnvironmentFileOutput) ToPipeEcsEnvironmentFileOutput() PipeEcsEnvironmentFileOutput {
	return o
}

func (o PipeEcsEnvironmentFileOutput) ToPipeEcsEnvironmentFileOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileOutput {
	return o
}

func (o PipeEcsEnvironmentFileOutput) Type() PipeEcsEnvironmentFileTypeOutput {
	return o.ApplyT(func(v PipeEcsEnvironmentFile) PipeEcsEnvironmentFileType { return v.Type }).(PipeEcsEnvironmentFileTypeOutput)
}

func (o PipeEcsEnvironmentFileOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeEcsEnvironmentFile) string { return v.Value }).(pulumi.StringOutput)
}

type PipeEcsEnvironmentFileArrayOutput struct{ *pulumi.OutputState }

func (PipeEcsEnvironmentFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsEnvironmentFile)(nil)).Elem()
}

func (o PipeEcsEnvironmentFileArrayOutput) ToPipeEcsEnvironmentFileArrayOutput() PipeEcsEnvironmentFileArrayOutput {
	return o
}

func (o PipeEcsEnvironmentFileArrayOutput) ToPipeEcsEnvironmentFileArrayOutputWithContext(ctx context.Context) PipeEcsEnvironmentFileArrayOutput {
	return o
}

func (o PipeEcsEnvironmentFileArrayOutput) Index(i pulumi.IntInput) PipeEcsEnvironmentFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeEcsEnvironmentFile {
		return vs[0].([]PipeEcsEnvironmentFile)[vs[1].(int)]
	}).(PipeEcsEnvironmentFileOutput)
}

type PipeEcsEnvironmentVariable struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// PipeEcsEnvironmentVariableInput is an input type that accepts PipeEcsEnvironmentVariableArgs and PipeEcsEnvironmentVariableOutput values.
// You can construct a concrete instance of `PipeEcsEnvironmentVariableInput` via:
//
//	PipeEcsEnvironmentVariableArgs{...}
type PipeEcsEnvironmentVariableInput interface {
	pulumi.Input

	ToPipeEcsEnvironmentVariableOutput() PipeEcsEnvironmentVariableOutput
	ToPipeEcsEnvironmentVariableOutputWithContext(context.Context) PipeEcsEnvironmentVariableOutput
}

type PipeEcsEnvironmentVariableArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PipeEcsEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEnvironmentVariable)(nil)).Elem()
}

func (i PipeEcsEnvironmentVariableArgs) ToPipeEcsEnvironmentVariableOutput() PipeEcsEnvironmentVariableOutput {
	return i.ToPipeEcsEnvironmentVariableOutputWithContext(context.Background())
}

func (i PipeEcsEnvironmentVariableArgs) ToPipeEcsEnvironmentVariableOutputWithContext(ctx context.Context) PipeEcsEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsEnvironmentVariableOutput)
}

// PipeEcsEnvironmentVariableArrayInput is an input type that accepts PipeEcsEnvironmentVariableArray and PipeEcsEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `PipeEcsEnvironmentVariableArrayInput` via:
//
//	PipeEcsEnvironmentVariableArray{ PipeEcsEnvironmentVariableArgs{...} }
type PipeEcsEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToPipeEcsEnvironmentVariableArrayOutput() PipeEcsEnvironmentVariableArrayOutput
	ToPipeEcsEnvironmentVariableArrayOutputWithContext(context.Context) PipeEcsEnvironmentVariableArrayOutput
}

type PipeEcsEnvironmentVariableArray []PipeEcsEnvironmentVariableInput

func (PipeEcsEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsEnvironmentVariable)(nil)).Elem()
}

func (i PipeEcsEnvironmentVariableArray) ToPipeEcsEnvironmentVariableArrayOutput() PipeEcsEnvironmentVariableArrayOutput {
	return i.ToPipeEcsEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i PipeEcsEnvironmentVariableArray) ToPipeEcsEnvironmentVariableArrayOutputWithContext(ctx context.Context) PipeEcsEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsEnvironmentVariableArrayOutput)
}

type PipeEcsEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (PipeEcsEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEnvironmentVariable)(nil)).Elem()
}

func (o PipeEcsEnvironmentVariableOutput) ToPipeEcsEnvironmentVariableOutput() PipeEcsEnvironmentVariableOutput {
	return o
}

func (o PipeEcsEnvironmentVariableOutput) ToPipeEcsEnvironmentVariableOutputWithContext(ctx context.Context) PipeEcsEnvironmentVariableOutput {
	return o
}

func (o PipeEcsEnvironmentVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsEnvironmentVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PipeEcsEnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsEnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PipeEcsEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (PipeEcsEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsEnvironmentVariable)(nil)).Elem()
}

func (o PipeEcsEnvironmentVariableArrayOutput) ToPipeEcsEnvironmentVariableArrayOutput() PipeEcsEnvironmentVariableArrayOutput {
	return o
}

func (o PipeEcsEnvironmentVariableArrayOutput) ToPipeEcsEnvironmentVariableArrayOutputWithContext(ctx context.Context) PipeEcsEnvironmentVariableArrayOutput {
	return o
}

func (o PipeEcsEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) PipeEcsEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeEcsEnvironmentVariable {
		return vs[0].([]PipeEcsEnvironmentVariable)[vs[1].(int)]
	}).(PipeEcsEnvironmentVariableOutput)
}

type PipeEcsEphemeralStorage struct {
	SizeInGiB int `pulumi:"sizeInGiB"`
}

// PipeEcsEphemeralStorageInput is an input type that accepts PipeEcsEphemeralStorageArgs and PipeEcsEphemeralStorageOutput values.
// You can construct a concrete instance of `PipeEcsEphemeralStorageInput` via:
//
//	PipeEcsEphemeralStorageArgs{...}
type PipeEcsEphemeralStorageInput interface {
	pulumi.Input

	ToPipeEcsEphemeralStorageOutput() PipeEcsEphemeralStorageOutput
	ToPipeEcsEphemeralStorageOutputWithContext(context.Context) PipeEcsEphemeralStorageOutput
}

type PipeEcsEphemeralStorageArgs struct {
	SizeInGiB pulumi.IntInput `pulumi:"sizeInGiB"`
}

func (PipeEcsEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEphemeralStorage)(nil)).Elem()
}

func (i PipeEcsEphemeralStorageArgs) ToPipeEcsEphemeralStorageOutput() PipeEcsEphemeralStorageOutput {
	return i.ToPipeEcsEphemeralStorageOutputWithContext(context.Background())
}

func (i PipeEcsEphemeralStorageArgs) ToPipeEcsEphemeralStorageOutputWithContext(ctx context.Context) PipeEcsEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsEphemeralStorageOutput)
}

func (i PipeEcsEphemeralStorageArgs) ToPipeEcsEphemeralStoragePtrOutput() PipeEcsEphemeralStoragePtrOutput {
	return i.ToPipeEcsEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i PipeEcsEphemeralStorageArgs) ToPipeEcsEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeEcsEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsEphemeralStorageOutput).ToPipeEcsEphemeralStoragePtrOutputWithContext(ctx)
}

// PipeEcsEphemeralStoragePtrInput is an input type that accepts PipeEcsEphemeralStorageArgs, PipeEcsEphemeralStoragePtr and PipeEcsEphemeralStoragePtrOutput values.
// You can construct a concrete instance of `PipeEcsEphemeralStoragePtrInput` via:
//
//	        PipeEcsEphemeralStorageArgs{...}
//
//	or:
//
//	        nil
type PipeEcsEphemeralStoragePtrInput interface {
	pulumi.Input

	ToPipeEcsEphemeralStoragePtrOutput() PipeEcsEphemeralStoragePtrOutput
	ToPipeEcsEphemeralStoragePtrOutputWithContext(context.Context) PipeEcsEphemeralStoragePtrOutput
}

type pipeEcsEphemeralStoragePtrType PipeEcsEphemeralStorageArgs

func PipeEcsEphemeralStoragePtr(v *PipeEcsEphemeralStorageArgs) PipeEcsEphemeralStoragePtrInput {
	return (*pipeEcsEphemeralStoragePtrType)(v)
}

func (*pipeEcsEphemeralStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEcsEphemeralStorage)(nil)).Elem()
}

func (i *pipeEcsEphemeralStoragePtrType) ToPipeEcsEphemeralStoragePtrOutput() PipeEcsEphemeralStoragePtrOutput {
	return i.ToPipeEcsEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i *pipeEcsEphemeralStoragePtrType) ToPipeEcsEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeEcsEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsEphemeralStoragePtrOutput)
}

type PipeEcsEphemeralStorageOutput struct{ *pulumi.OutputState }

func (PipeEcsEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsEphemeralStorage)(nil)).Elem()
}

func (o PipeEcsEphemeralStorageOutput) ToPipeEcsEphemeralStorageOutput() PipeEcsEphemeralStorageOutput {
	return o
}

func (o PipeEcsEphemeralStorageOutput) ToPipeEcsEphemeralStorageOutputWithContext(ctx context.Context) PipeEcsEphemeralStorageOutput {
	return o
}

func (o PipeEcsEphemeralStorageOutput) ToPipeEcsEphemeralStoragePtrOutput() PipeEcsEphemeralStoragePtrOutput {
	return o.ToPipeEcsEphemeralStoragePtrOutputWithContext(context.Background())
}

func (o PipeEcsEphemeralStorageOutput) ToPipeEcsEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeEcsEphemeralStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEcsEphemeralStorage) *PipeEcsEphemeralStorage {
		return &v
	}).(PipeEcsEphemeralStoragePtrOutput)
}

func (o PipeEcsEphemeralStorageOutput) SizeInGiB() pulumi.IntOutput {
	return o.ApplyT(func(v PipeEcsEphemeralStorage) int { return v.SizeInGiB }).(pulumi.IntOutput)
}

type PipeEcsEphemeralStoragePtrOutput struct{ *pulumi.OutputState }

func (PipeEcsEphemeralStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEcsEphemeralStorage)(nil)).Elem()
}

func (o PipeEcsEphemeralStoragePtrOutput) ToPipeEcsEphemeralStoragePtrOutput() PipeEcsEphemeralStoragePtrOutput {
	return o
}

func (o PipeEcsEphemeralStoragePtrOutput) ToPipeEcsEphemeralStoragePtrOutputWithContext(ctx context.Context) PipeEcsEphemeralStoragePtrOutput {
	return o
}

func (o PipeEcsEphemeralStoragePtrOutput) Elem() PipeEcsEphemeralStorageOutput {
	return o.ApplyT(func(v *PipeEcsEphemeralStorage) PipeEcsEphemeralStorage {
		if v != nil {
			return *v
		}
		var ret PipeEcsEphemeralStorage
		return ret
	}).(PipeEcsEphemeralStorageOutput)
}

func (o PipeEcsEphemeralStoragePtrOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeEcsEphemeralStorage) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGiB
	}).(pulumi.IntPtrOutput)
}

type PipeEcsInferenceAcceleratorOverride struct {
	DeviceName *string `pulumi:"deviceName"`
	DeviceType *string `pulumi:"deviceType"`
}

// PipeEcsInferenceAcceleratorOverrideInput is an input type that accepts PipeEcsInferenceAcceleratorOverrideArgs and PipeEcsInferenceAcceleratorOverrideOutput values.
// You can construct a concrete instance of `PipeEcsInferenceAcceleratorOverrideInput` via:
//
//	PipeEcsInferenceAcceleratorOverrideArgs{...}
type PipeEcsInferenceAcceleratorOverrideInput interface {
	pulumi.Input

	ToPipeEcsInferenceAcceleratorOverrideOutput() PipeEcsInferenceAcceleratorOverrideOutput
	ToPipeEcsInferenceAcceleratorOverrideOutputWithContext(context.Context) PipeEcsInferenceAcceleratorOverrideOutput
}

type PipeEcsInferenceAcceleratorOverrideArgs struct {
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	DeviceType pulumi.StringPtrInput `pulumi:"deviceType"`
}

func (PipeEcsInferenceAcceleratorOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsInferenceAcceleratorOverride)(nil)).Elem()
}

func (i PipeEcsInferenceAcceleratorOverrideArgs) ToPipeEcsInferenceAcceleratorOverrideOutput() PipeEcsInferenceAcceleratorOverrideOutput {
	return i.ToPipeEcsInferenceAcceleratorOverrideOutputWithContext(context.Background())
}

func (i PipeEcsInferenceAcceleratorOverrideArgs) ToPipeEcsInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) PipeEcsInferenceAcceleratorOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsInferenceAcceleratorOverrideOutput)
}

// PipeEcsInferenceAcceleratorOverrideArrayInput is an input type that accepts PipeEcsInferenceAcceleratorOverrideArray and PipeEcsInferenceAcceleratorOverrideArrayOutput values.
// You can construct a concrete instance of `PipeEcsInferenceAcceleratorOverrideArrayInput` via:
//
//	PipeEcsInferenceAcceleratorOverrideArray{ PipeEcsInferenceAcceleratorOverrideArgs{...} }
type PipeEcsInferenceAcceleratorOverrideArrayInput interface {
	pulumi.Input

	ToPipeEcsInferenceAcceleratorOverrideArrayOutput() PipeEcsInferenceAcceleratorOverrideArrayOutput
	ToPipeEcsInferenceAcceleratorOverrideArrayOutputWithContext(context.Context) PipeEcsInferenceAcceleratorOverrideArrayOutput
}

type PipeEcsInferenceAcceleratorOverrideArray []PipeEcsInferenceAcceleratorOverrideInput

func (PipeEcsInferenceAcceleratorOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsInferenceAcceleratorOverride)(nil)).Elem()
}

func (i PipeEcsInferenceAcceleratorOverrideArray) ToPipeEcsInferenceAcceleratorOverrideArrayOutput() PipeEcsInferenceAcceleratorOverrideArrayOutput {
	return i.ToPipeEcsInferenceAcceleratorOverrideArrayOutputWithContext(context.Background())
}

func (i PipeEcsInferenceAcceleratorOverrideArray) ToPipeEcsInferenceAcceleratorOverrideArrayOutputWithContext(ctx context.Context) PipeEcsInferenceAcceleratorOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsInferenceAcceleratorOverrideArrayOutput)
}

type PipeEcsInferenceAcceleratorOverrideOutput struct{ *pulumi.OutputState }

func (PipeEcsInferenceAcceleratorOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsInferenceAcceleratorOverride)(nil)).Elem()
}

func (o PipeEcsInferenceAcceleratorOverrideOutput) ToPipeEcsInferenceAcceleratorOverrideOutput() PipeEcsInferenceAcceleratorOverrideOutput {
	return o
}

func (o PipeEcsInferenceAcceleratorOverrideOutput) ToPipeEcsInferenceAcceleratorOverrideOutputWithContext(ctx context.Context) PipeEcsInferenceAcceleratorOverrideOutput {
	return o
}

func (o PipeEcsInferenceAcceleratorOverrideOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsInferenceAcceleratorOverride) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

func (o PipeEcsInferenceAcceleratorOverrideOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsInferenceAcceleratorOverride) *string { return v.DeviceType }).(pulumi.StringPtrOutput)
}

type PipeEcsInferenceAcceleratorOverrideArrayOutput struct{ *pulumi.OutputState }

func (PipeEcsInferenceAcceleratorOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsInferenceAcceleratorOverride)(nil)).Elem()
}

func (o PipeEcsInferenceAcceleratorOverrideArrayOutput) ToPipeEcsInferenceAcceleratorOverrideArrayOutput() PipeEcsInferenceAcceleratorOverrideArrayOutput {
	return o
}

func (o PipeEcsInferenceAcceleratorOverrideArrayOutput) ToPipeEcsInferenceAcceleratorOverrideArrayOutputWithContext(ctx context.Context) PipeEcsInferenceAcceleratorOverrideArrayOutput {
	return o
}

func (o PipeEcsInferenceAcceleratorOverrideArrayOutput) Index(i pulumi.IntInput) PipeEcsInferenceAcceleratorOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeEcsInferenceAcceleratorOverride {
		return vs[0].([]PipeEcsInferenceAcceleratorOverride)[vs[1].(int)]
	}).(PipeEcsInferenceAcceleratorOverrideOutput)
}

type PipeEcsResourceRequirement struct {
	Type  PipeEcsResourceRequirementType `pulumi:"type"`
	Value string                         `pulumi:"value"`
}

// PipeEcsResourceRequirementInput is an input type that accepts PipeEcsResourceRequirementArgs and PipeEcsResourceRequirementOutput values.
// You can construct a concrete instance of `PipeEcsResourceRequirementInput` via:
//
//	PipeEcsResourceRequirementArgs{...}
type PipeEcsResourceRequirementInput interface {
	pulumi.Input

	ToPipeEcsResourceRequirementOutput() PipeEcsResourceRequirementOutput
	ToPipeEcsResourceRequirementOutputWithContext(context.Context) PipeEcsResourceRequirementOutput
}

type PipeEcsResourceRequirementArgs struct {
	Type  PipeEcsResourceRequirementTypeInput `pulumi:"type"`
	Value pulumi.StringInput                  `pulumi:"value"`
}

func (PipeEcsResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsResourceRequirement)(nil)).Elem()
}

func (i PipeEcsResourceRequirementArgs) ToPipeEcsResourceRequirementOutput() PipeEcsResourceRequirementOutput {
	return i.ToPipeEcsResourceRequirementOutputWithContext(context.Background())
}

func (i PipeEcsResourceRequirementArgs) ToPipeEcsResourceRequirementOutputWithContext(ctx context.Context) PipeEcsResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsResourceRequirementOutput)
}

// PipeEcsResourceRequirementArrayInput is an input type that accepts PipeEcsResourceRequirementArray and PipeEcsResourceRequirementArrayOutput values.
// You can construct a concrete instance of `PipeEcsResourceRequirementArrayInput` via:
//
//	PipeEcsResourceRequirementArray{ PipeEcsResourceRequirementArgs{...} }
type PipeEcsResourceRequirementArrayInput interface {
	pulumi.Input

	ToPipeEcsResourceRequirementArrayOutput() PipeEcsResourceRequirementArrayOutput
	ToPipeEcsResourceRequirementArrayOutputWithContext(context.Context) PipeEcsResourceRequirementArrayOutput
}

type PipeEcsResourceRequirementArray []PipeEcsResourceRequirementInput

func (PipeEcsResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsResourceRequirement)(nil)).Elem()
}

func (i PipeEcsResourceRequirementArray) ToPipeEcsResourceRequirementArrayOutput() PipeEcsResourceRequirementArrayOutput {
	return i.ToPipeEcsResourceRequirementArrayOutputWithContext(context.Background())
}

func (i PipeEcsResourceRequirementArray) ToPipeEcsResourceRequirementArrayOutputWithContext(ctx context.Context) PipeEcsResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsResourceRequirementArrayOutput)
}

type PipeEcsResourceRequirementOutput struct{ *pulumi.OutputState }

func (PipeEcsResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsResourceRequirement)(nil)).Elem()
}

func (o PipeEcsResourceRequirementOutput) ToPipeEcsResourceRequirementOutput() PipeEcsResourceRequirementOutput {
	return o
}

func (o PipeEcsResourceRequirementOutput) ToPipeEcsResourceRequirementOutputWithContext(ctx context.Context) PipeEcsResourceRequirementOutput {
	return o
}

func (o PipeEcsResourceRequirementOutput) Type() PipeEcsResourceRequirementTypeOutput {
	return o.ApplyT(func(v PipeEcsResourceRequirement) PipeEcsResourceRequirementType { return v.Type }).(PipeEcsResourceRequirementTypeOutput)
}

func (o PipeEcsResourceRequirementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeEcsResourceRequirement) string { return v.Value }).(pulumi.StringOutput)
}

type PipeEcsResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (PipeEcsResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeEcsResourceRequirement)(nil)).Elem()
}

func (o PipeEcsResourceRequirementArrayOutput) ToPipeEcsResourceRequirementArrayOutput() PipeEcsResourceRequirementArrayOutput {
	return o
}

func (o PipeEcsResourceRequirementArrayOutput) ToPipeEcsResourceRequirementArrayOutputWithContext(ctx context.Context) PipeEcsResourceRequirementArrayOutput {
	return o
}

func (o PipeEcsResourceRequirementArrayOutput) Index(i pulumi.IntInput) PipeEcsResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeEcsResourceRequirement {
		return vs[0].([]PipeEcsResourceRequirement)[vs[1].(int)]
	}).(PipeEcsResourceRequirementOutput)
}

type PipeEcsTaskOverride struct {
	ContainerOverrides            []PipeEcsContainerOverride            `pulumi:"containerOverrides"`
	Cpu                           *string                               `pulumi:"cpu"`
	EphemeralStorage              *PipeEcsEphemeralStorage              `pulumi:"ephemeralStorage"`
	ExecutionRoleArn              *string                               `pulumi:"executionRoleArn"`
	InferenceAcceleratorOverrides []PipeEcsInferenceAcceleratorOverride `pulumi:"inferenceAcceleratorOverrides"`
	Memory                        *string                               `pulumi:"memory"`
	TaskRoleArn                   *string                               `pulumi:"taskRoleArn"`
}

// PipeEcsTaskOverrideInput is an input type that accepts PipeEcsTaskOverrideArgs and PipeEcsTaskOverrideOutput values.
// You can construct a concrete instance of `PipeEcsTaskOverrideInput` via:
//
//	PipeEcsTaskOverrideArgs{...}
type PipeEcsTaskOverrideInput interface {
	pulumi.Input

	ToPipeEcsTaskOverrideOutput() PipeEcsTaskOverrideOutput
	ToPipeEcsTaskOverrideOutputWithContext(context.Context) PipeEcsTaskOverrideOutput
}

type PipeEcsTaskOverrideArgs struct {
	ContainerOverrides            PipeEcsContainerOverrideArrayInput            `pulumi:"containerOverrides"`
	Cpu                           pulumi.StringPtrInput                         `pulumi:"cpu"`
	EphemeralStorage              PipeEcsEphemeralStoragePtrInput               `pulumi:"ephemeralStorage"`
	ExecutionRoleArn              pulumi.StringPtrInput                         `pulumi:"executionRoleArn"`
	InferenceAcceleratorOverrides PipeEcsInferenceAcceleratorOverrideArrayInput `pulumi:"inferenceAcceleratorOverrides"`
	Memory                        pulumi.StringPtrInput                         `pulumi:"memory"`
	TaskRoleArn                   pulumi.StringPtrInput                         `pulumi:"taskRoleArn"`
}

func (PipeEcsTaskOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsTaskOverride)(nil)).Elem()
}

func (i PipeEcsTaskOverrideArgs) ToPipeEcsTaskOverrideOutput() PipeEcsTaskOverrideOutput {
	return i.ToPipeEcsTaskOverrideOutputWithContext(context.Background())
}

func (i PipeEcsTaskOverrideArgs) ToPipeEcsTaskOverrideOutputWithContext(ctx context.Context) PipeEcsTaskOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsTaskOverrideOutput)
}

func (i PipeEcsTaskOverrideArgs) ToPipeEcsTaskOverridePtrOutput() PipeEcsTaskOverridePtrOutput {
	return i.ToPipeEcsTaskOverridePtrOutputWithContext(context.Background())
}

func (i PipeEcsTaskOverrideArgs) ToPipeEcsTaskOverridePtrOutputWithContext(ctx context.Context) PipeEcsTaskOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsTaskOverrideOutput).ToPipeEcsTaskOverridePtrOutputWithContext(ctx)
}

// PipeEcsTaskOverridePtrInput is an input type that accepts PipeEcsTaskOverrideArgs, PipeEcsTaskOverridePtr and PipeEcsTaskOverridePtrOutput values.
// You can construct a concrete instance of `PipeEcsTaskOverridePtrInput` via:
//
//	        PipeEcsTaskOverrideArgs{...}
//
//	or:
//
//	        nil
type PipeEcsTaskOverridePtrInput interface {
	pulumi.Input

	ToPipeEcsTaskOverridePtrOutput() PipeEcsTaskOverridePtrOutput
	ToPipeEcsTaskOverridePtrOutputWithContext(context.Context) PipeEcsTaskOverridePtrOutput
}

type pipeEcsTaskOverridePtrType PipeEcsTaskOverrideArgs

func PipeEcsTaskOverridePtr(v *PipeEcsTaskOverrideArgs) PipeEcsTaskOverridePtrInput {
	return (*pipeEcsTaskOverridePtrType)(v)
}

func (*pipeEcsTaskOverridePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEcsTaskOverride)(nil)).Elem()
}

func (i *pipeEcsTaskOverridePtrType) ToPipeEcsTaskOverridePtrOutput() PipeEcsTaskOverridePtrOutput {
	return i.ToPipeEcsTaskOverridePtrOutputWithContext(context.Background())
}

func (i *pipeEcsTaskOverridePtrType) ToPipeEcsTaskOverridePtrOutputWithContext(ctx context.Context) PipeEcsTaskOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEcsTaskOverridePtrOutput)
}

type PipeEcsTaskOverrideOutput struct{ *pulumi.OutputState }

func (PipeEcsTaskOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEcsTaskOverride)(nil)).Elem()
}

func (o PipeEcsTaskOverrideOutput) ToPipeEcsTaskOverrideOutput() PipeEcsTaskOverrideOutput {
	return o
}

func (o PipeEcsTaskOverrideOutput) ToPipeEcsTaskOverrideOutputWithContext(ctx context.Context) PipeEcsTaskOverrideOutput {
	return o
}

func (o PipeEcsTaskOverrideOutput) ToPipeEcsTaskOverridePtrOutput() PipeEcsTaskOverridePtrOutput {
	return o.ToPipeEcsTaskOverridePtrOutputWithContext(context.Background())
}

func (o PipeEcsTaskOverrideOutput) ToPipeEcsTaskOverridePtrOutputWithContext(ctx context.Context) PipeEcsTaskOverridePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEcsTaskOverride) *PipeEcsTaskOverride {
		return &v
	}).(PipeEcsTaskOverridePtrOutput)
}

func (o PipeEcsTaskOverrideOutput) ContainerOverrides() PipeEcsContainerOverrideArrayOutput {
	return o.ApplyT(func(v PipeEcsTaskOverride) []PipeEcsContainerOverride { return v.ContainerOverrides }).(PipeEcsContainerOverrideArrayOutput)
}

func (o PipeEcsTaskOverrideOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsTaskOverride) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

func (o PipeEcsTaskOverrideOutput) EphemeralStorage() PipeEcsEphemeralStoragePtrOutput {
	return o.ApplyT(func(v PipeEcsTaskOverride) *PipeEcsEphemeralStorage { return v.EphemeralStorage }).(PipeEcsEphemeralStoragePtrOutput)
}

func (o PipeEcsTaskOverrideOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsTaskOverride) *string { return v.ExecutionRoleArn }).(pulumi.StringPtrOutput)
}

func (o PipeEcsTaskOverrideOutput) InferenceAcceleratorOverrides() PipeEcsInferenceAcceleratorOverrideArrayOutput {
	return o.ApplyT(func(v PipeEcsTaskOverride) []PipeEcsInferenceAcceleratorOverride {
		return v.InferenceAcceleratorOverrides
	}).(PipeEcsInferenceAcceleratorOverrideArrayOutput)
}

func (o PipeEcsTaskOverrideOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsTaskOverride) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

func (o PipeEcsTaskOverrideOutput) TaskRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEcsTaskOverride) *string { return v.TaskRoleArn }).(pulumi.StringPtrOutput)
}

type PipeEcsTaskOverridePtrOutput struct{ *pulumi.OutputState }

func (PipeEcsTaskOverridePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEcsTaskOverride)(nil)).Elem()
}

func (o PipeEcsTaskOverridePtrOutput) ToPipeEcsTaskOverridePtrOutput() PipeEcsTaskOverridePtrOutput {
	return o
}

func (o PipeEcsTaskOverridePtrOutput) ToPipeEcsTaskOverridePtrOutputWithContext(ctx context.Context) PipeEcsTaskOverridePtrOutput {
	return o
}

func (o PipeEcsTaskOverridePtrOutput) Elem() PipeEcsTaskOverrideOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) PipeEcsTaskOverride {
		if v != nil {
			return *v
		}
		var ret PipeEcsTaskOverride
		return ret
	}).(PipeEcsTaskOverrideOutput)
}

func (o PipeEcsTaskOverridePtrOutput) ContainerOverrides() PipeEcsContainerOverrideArrayOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) []PipeEcsContainerOverride {
		if v == nil {
			return nil
		}
		return v.ContainerOverrides
	}).(PipeEcsContainerOverrideArrayOutput)
}

func (o PipeEcsTaskOverridePtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

func (o PipeEcsTaskOverridePtrOutput) EphemeralStorage() PipeEcsEphemeralStoragePtrOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) *PipeEcsEphemeralStorage {
		if v == nil {
			return nil
		}
		return v.EphemeralStorage
	}).(PipeEcsEphemeralStoragePtrOutput)
}

func (o PipeEcsTaskOverridePtrOutput) ExecutionRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionRoleArn
	}).(pulumi.StringPtrOutput)
}

func (o PipeEcsTaskOverridePtrOutput) InferenceAcceleratorOverrides() PipeEcsInferenceAcceleratorOverrideArrayOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) []PipeEcsInferenceAcceleratorOverride {
		if v == nil {
			return nil
		}
		return v.InferenceAcceleratorOverrides
	}).(PipeEcsInferenceAcceleratorOverrideArrayOutput)
}

func (o PipeEcsTaskOverridePtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

func (o PipeEcsTaskOverridePtrOutput) TaskRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeEcsTaskOverride) *string {
		if v == nil {
			return nil
		}
		return v.TaskRoleArn
	}).(pulumi.StringPtrOutput)
}

type PipeEnrichmentHttpParameters struct {
	HeaderParameters      *PipeHeaderParametersMap      `pulumi:"headerParameters"`
	PathParameterValues   []string                      `pulumi:"pathParameterValues"`
	QueryStringParameters *PipeQueryStringParametersMap `pulumi:"queryStringParameters"`
}

// PipeEnrichmentHttpParametersInput is an input type that accepts PipeEnrichmentHttpParametersArgs and PipeEnrichmentHttpParametersOutput values.
// You can construct a concrete instance of `PipeEnrichmentHttpParametersInput` via:
//
//	PipeEnrichmentHttpParametersArgs{...}
type PipeEnrichmentHttpParametersInput interface {
	pulumi.Input

	ToPipeEnrichmentHttpParametersOutput() PipeEnrichmentHttpParametersOutput
	ToPipeEnrichmentHttpParametersOutputWithContext(context.Context) PipeEnrichmentHttpParametersOutput
}

type PipeEnrichmentHttpParametersArgs struct {
	HeaderParameters      PipeHeaderParametersMapPtrInput      `pulumi:"headerParameters"`
	PathParameterValues   pulumi.StringArrayInput              `pulumi:"pathParameterValues"`
	QueryStringParameters PipeQueryStringParametersMapPtrInput `pulumi:"queryStringParameters"`
}

func (PipeEnrichmentHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentHttpParameters)(nil)).Elem()
}

func (i PipeEnrichmentHttpParametersArgs) ToPipeEnrichmentHttpParametersOutput() PipeEnrichmentHttpParametersOutput {
	return i.ToPipeEnrichmentHttpParametersOutputWithContext(context.Background())
}

func (i PipeEnrichmentHttpParametersArgs) ToPipeEnrichmentHttpParametersOutputWithContext(ctx context.Context) PipeEnrichmentHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentHttpParametersOutput)
}

func (i PipeEnrichmentHttpParametersArgs) ToPipeEnrichmentHttpParametersPtrOutput() PipeEnrichmentHttpParametersPtrOutput {
	return i.ToPipeEnrichmentHttpParametersPtrOutputWithContext(context.Background())
}

func (i PipeEnrichmentHttpParametersArgs) ToPipeEnrichmentHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentHttpParametersOutput).ToPipeEnrichmentHttpParametersPtrOutputWithContext(ctx)
}

// PipeEnrichmentHttpParametersPtrInput is an input type that accepts PipeEnrichmentHttpParametersArgs, PipeEnrichmentHttpParametersPtr and PipeEnrichmentHttpParametersPtrOutput values.
// You can construct a concrete instance of `PipeEnrichmentHttpParametersPtrInput` via:
//
//	        PipeEnrichmentHttpParametersArgs{...}
//
//	or:
//
//	        nil
type PipeEnrichmentHttpParametersPtrInput interface {
	pulumi.Input

	ToPipeEnrichmentHttpParametersPtrOutput() PipeEnrichmentHttpParametersPtrOutput
	ToPipeEnrichmentHttpParametersPtrOutputWithContext(context.Context) PipeEnrichmentHttpParametersPtrOutput
}

type pipeEnrichmentHttpParametersPtrType PipeEnrichmentHttpParametersArgs

func PipeEnrichmentHttpParametersPtr(v *PipeEnrichmentHttpParametersArgs) PipeEnrichmentHttpParametersPtrInput {
	return (*pipeEnrichmentHttpParametersPtrType)(v)
}

func (*pipeEnrichmentHttpParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentHttpParameters)(nil)).Elem()
}

func (i *pipeEnrichmentHttpParametersPtrType) ToPipeEnrichmentHttpParametersPtrOutput() PipeEnrichmentHttpParametersPtrOutput {
	return i.ToPipeEnrichmentHttpParametersPtrOutputWithContext(context.Background())
}

func (i *pipeEnrichmentHttpParametersPtrType) ToPipeEnrichmentHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentHttpParametersPtrOutput)
}

type PipeEnrichmentHttpParametersOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentHttpParameters)(nil)).Elem()
}

func (o PipeEnrichmentHttpParametersOutput) ToPipeEnrichmentHttpParametersOutput() PipeEnrichmentHttpParametersOutput {
	return o
}

func (o PipeEnrichmentHttpParametersOutput) ToPipeEnrichmentHttpParametersOutputWithContext(ctx context.Context) PipeEnrichmentHttpParametersOutput {
	return o
}

func (o PipeEnrichmentHttpParametersOutput) ToPipeEnrichmentHttpParametersPtrOutput() PipeEnrichmentHttpParametersPtrOutput {
	return o.ToPipeEnrichmentHttpParametersPtrOutputWithContext(context.Background())
}

func (o PipeEnrichmentHttpParametersOutput) ToPipeEnrichmentHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentHttpParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEnrichmentHttpParameters) *PipeEnrichmentHttpParameters {
		return &v
	}).(PipeEnrichmentHttpParametersPtrOutput)
}

func (o PipeEnrichmentHttpParametersOutput) HeaderParameters() PipeHeaderParametersMapPtrOutput {
	return o.ApplyT(func(v PipeEnrichmentHttpParameters) *PipeHeaderParametersMap { return v.HeaderParameters }).(PipeHeaderParametersMapPtrOutput)
}

func (o PipeEnrichmentHttpParametersOutput) PathParameterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeEnrichmentHttpParameters) []string { return v.PathParameterValues }).(pulumi.StringArrayOutput)
}

func (o PipeEnrichmentHttpParametersOutput) QueryStringParameters() PipeQueryStringParametersMapPtrOutput {
	return o.ApplyT(func(v PipeEnrichmentHttpParameters) *PipeQueryStringParametersMap { return v.QueryStringParameters }).(PipeQueryStringParametersMapPtrOutput)
}

type PipeEnrichmentHttpParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentHttpParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentHttpParameters)(nil)).Elem()
}

func (o PipeEnrichmentHttpParametersPtrOutput) ToPipeEnrichmentHttpParametersPtrOutput() PipeEnrichmentHttpParametersPtrOutput {
	return o
}

func (o PipeEnrichmentHttpParametersPtrOutput) ToPipeEnrichmentHttpParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentHttpParametersPtrOutput {
	return o
}

func (o PipeEnrichmentHttpParametersPtrOutput) Elem() PipeEnrichmentHttpParametersOutput {
	return o.ApplyT(func(v *PipeEnrichmentHttpParameters) PipeEnrichmentHttpParameters {
		if v != nil {
			return *v
		}
		var ret PipeEnrichmentHttpParameters
		return ret
	}).(PipeEnrichmentHttpParametersOutput)
}

func (o PipeEnrichmentHttpParametersPtrOutput) HeaderParameters() PipeHeaderParametersMapPtrOutput {
	return o.ApplyT(func(v *PipeEnrichmentHttpParameters) *PipeHeaderParametersMap {
		if v == nil {
			return nil
		}
		return v.HeaderParameters
	}).(PipeHeaderParametersMapPtrOutput)
}

func (o PipeEnrichmentHttpParametersPtrOutput) PathParameterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeEnrichmentHttpParameters) []string {
		if v == nil {
			return nil
		}
		return v.PathParameterValues
	}).(pulumi.StringArrayOutput)
}

func (o PipeEnrichmentHttpParametersPtrOutput) QueryStringParameters() PipeQueryStringParametersMapPtrOutput {
	return o.ApplyT(func(v *PipeEnrichmentHttpParameters) *PipeQueryStringParametersMap {
		if v == nil {
			return nil
		}
		return v.QueryStringParameters
	}).(PipeQueryStringParametersMapPtrOutput)
}

type PipeEnrichmentParameters struct {
	HttpParameters *PipeEnrichmentHttpParameters `pulumi:"httpParameters"`
	InputTemplate  *string                       `pulumi:"inputTemplate"`
}

// PipeEnrichmentParametersInput is an input type that accepts PipeEnrichmentParametersArgs and PipeEnrichmentParametersOutput values.
// You can construct a concrete instance of `PipeEnrichmentParametersInput` via:
//
//	PipeEnrichmentParametersArgs{...}
type PipeEnrichmentParametersInput interface {
	pulumi.Input

	ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput
	ToPipeEnrichmentParametersOutputWithContext(context.Context) PipeEnrichmentParametersOutput
}

type PipeEnrichmentParametersArgs struct {
	HttpParameters PipeEnrichmentHttpParametersPtrInput `pulumi:"httpParameters"`
	InputTemplate  pulumi.StringPtrInput                `pulumi:"inputTemplate"`
}

func (PipeEnrichmentParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParameters)(nil)).Elem()
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput {
	return i.ToPipeEnrichmentParametersOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersOutput)
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return i.ToPipeEnrichmentParametersPtrOutputWithContext(context.Background())
}

func (i PipeEnrichmentParametersArgs) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersOutput).ToPipeEnrichmentParametersPtrOutputWithContext(ctx)
}

// PipeEnrichmentParametersPtrInput is an input type that accepts PipeEnrichmentParametersArgs, PipeEnrichmentParametersPtr and PipeEnrichmentParametersPtrOutput values.
// You can construct a concrete instance of `PipeEnrichmentParametersPtrInput` via:
//
//	        PipeEnrichmentParametersArgs{...}
//
//	or:
//
//	        nil
type PipeEnrichmentParametersPtrInput interface {
	pulumi.Input

	ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput
	ToPipeEnrichmentParametersPtrOutputWithContext(context.Context) PipeEnrichmentParametersPtrOutput
}

type pipeEnrichmentParametersPtrType PipeEnrichmentParametersArgs

func PipeEnrichmentParametersPtr(v *PipeEnrichmentParametersArgs) PipeEnrichmentParametersPtrInput {
	return (*pipeEnrichmentParametersPtrType)(v)
}

func (*pipeEnrichmentParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentParameters)(nil)).Elem()
}

func (i *pipeEnrichmentParametersPtrType) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return i.ToPipeEnrichmentParametersPtrOutputWithContext(context.Background())
}

func (i *pipeEnrichmentParametersPtrType) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeEnrichmentParametersPtrOutput)
}

type PipeEnrichmentParametersOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeEnrichmentParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersOutput() PipeEnrichmentParametersOutput {
	return o
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersOutputWithContext(ctx context.Context) PipeEnrichmentParametersOutput {
	return o
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return o.ToPipeEnrichmentParametersPtrOutputWithContext(context.Background())
}

func (o PipeEnrichmentParametersOutput) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeEnrichmentParameters) *PipeEnrichmentParameters {
		return &v
	}).(PipeEnrichmentParametersPtrOutput)
}

func (o PipeEnrichmentParametersOutput) HttpParameters() PipeEnrichmentHttpParametersPtrOutput {
	return o.ApplyT(func(v PipeEnrichmentParameters) *PipeEnrichmentHttpParameters { return v.HttpParameters }).(PipeEnrichmentHttpParametersPtrOutput)
}

func (o PipeEnrichmentParametersOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeEnrichmentParameters) *string { return v.InputTemplate }).(pulumi.StringPtrOutput)
}

type PipeEnrichmentParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeEnrichmentParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeEnrichmentParameters)(nil)).Elem()
}

func (o PipeEnrichmentParametersPtrOutput) ToPipeEnrichmentParametersPtrOutput() PipeEnrichmentParametersPtrOutput {
	return o
}

func (o PipeEnrichmentParametersPtrOutput) ToPipeEnrichmentParametersPtrOutputWithContext(ctx context.Context) PipeEnrichmentParametersPtrOutput {
	return o
}

func (o PipeEnrichmentParametersPtrOutput) Elem() PipeEnrichmentParametersOutput {
	return o.ApplyT(func(v *PipeEnrichmentParameters) PipeEnrichmentParameters {
		if v != nil {
			return *v
		}
		var ret PipeEnrichmentParameters
		return ret
	}).(PipeEnrichmentParametersOutput)
}

func (o PipeEnrichmentParametersPtrOutput) HttpParameters() PipeEnrichmentHttpParametersPtrOutput {
	return o.ApplyT(func(v *PipeEnrichmentParameters) *PipeEnrichmentHttpParameters {
		if v == nil {
			return nil
		}
		return v.HttpParameters
	}).(PipeEnrichmentHttpParametersPtrOutput)
}

func (o PipeEnrichmentParametersPtrOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeEnrichmentParameters) *string {
		if v == nil {
			return nil
		}
		return v.InputTemplate
	}).(pulumi.StringPtrOutput)
}

type PipeFilter struct {
	Pattern *string `pulumi:"pattern"`
}

// PipeFilterInput is an input type that accepts PipeFilterArgs and PipeFilterOutput values.
// You can construct a concrete instance of `PipeFilterInput` via:
//
//	PipeFilterArgs{...}
type PipeFilterInput interface {
	pulumi.Input

	ToPipeFilterOutput() PipeFilterOutput
	ToPipeFilterOutputWithContext(context.Context) PipeFilterOutput
}

type PipeFilterArgs struct {
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (PipeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeFilter)(nil)).Elem()
}

func (i PipeFilterArgs) ToPipeFilterOutput() PipeFilterOutput {
	return i.ToPipeFilterOutputWithContext(context.Background())
}

func (i PipeFilterArgs) ToPipeFilterOutputWithContext(ctx context.Context) PipeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFilterOutput)
}

// PipeFilterArrayInput is an input type that accepts PipeFilterArray and PipeFilterArrayOutput values.
// You can construct a concrete instance of `PipeFilterArrayInput` via:
//
//	PipeFilterArray{ PipeFilterArgs{...} }
type PipeFilterArrayInput interface {
	pulumi.Input

	ToPipeFilterArrayOutput() PipeFilterArrayOutput
	ToPipeFilterArrayOutputWithContext(context.Context) PipeFilterArrayOutput
}

type PipeFilterArray []PipeFilterInput

func (PipeFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeFilter)(nil)).Elem()
}

func (i PipeFilterArray) ToPipeFilterArrayOutput() PipeFilterArrayOutput {
	return i.ToPipeFilterArrayOutputWithContext(context.Background())
}

func (i PipeFilterArray) ToPipeFilterArrayOutputWithContext(ctx context.Context) PipeFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFilterArrayOutput)
}

type PipeFilterOutput struct{ *pulumi.OutputState }

func (PipeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeFilter)(nil)).Elem()
}

func (o PipeFilterOutput) ToPipeFilterOutput() PipeFilterOutput {
	return o
}

func (o PipeFilterOutput) ToPipeFilterOutputWithContext(ctx context.Context) PipeFilterOutput {
	return o
}

func (o PipeFilterOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeFilter) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

type PipeFilterArrayOutput struct{ *pulumi.OutputState }

func (PipeFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeFilter)(nil)).Elem()
}

func (o PipeFilterArrayOutput) ToPipeFilterArrayOutput() PipeFilterArrayOutput {
	return o
}

func (o PipeFilterArrayOutput) ToPipeFilterArrayOutputWithContext(ctx context.Context) PipeFilterArrayOutput {
	return o
}

func (o PipeFilterArrayOutput) Index(i pulumi.IntInput) PipeFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeFilter {
		return vs[0].([]PipeFilter)[vs[1].(int)]
	}).(PipeFilterOutput)
}

type PipeFilterCriteria struct {
	Filters []PipeFilter `pulumi:"filters"`
}

// PipeFilterCriteriaInput is an input type that accepts PipeFilterCriteriaArgs and PipeFilterCriteriaOutput values.
// You can construct a concrete instance of `PipeFilterCriteriaInput` via:
//
//	PipeFilterCriteriaArgs{...}
type PipeFilterCriteriaInput interface {
	pulumi.Input

	ToPipeFilterCriteriaOutput() PipeFilterCriteriaOutput
	ToPipeFilterCriteriaOutputWithContext(context.Context) PipeFilterCriteriaOutput
}

type PipeFilterCriteriaArgs struct {
	Filters PipeFilterArrayInput `pulumi:"filters"`
}

func (PipeFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeFilterCriteria)(nil)).Elem()
}

func (i PipeFilterCriteriaArgs) ToPipeFilterCriteriaOutput() PipeFilterCriteriaOutput {
	return i.ToPipeFilterCriteriaOutputWithContext(context.Background())
}

func (i PipeFilterCriteriaArgs) ToPipeFilterCriteriaOutputWithContext(ctx context.Context) PipeFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFilterCriteriaOutput)
}

func (i PipeFilterCriteriaArgs) ToPipeFilterCriteriaPtrOutput() PipeFilterCriteriaPtrOutput {
	return i.ToPipeFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i PipeFilterCriteriaArgs) ToPipeFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFilterCriteriaOutput).ToPipeFilterCriteriaPtrOutputWithContext(ctx)
}

// PipeFilterCriteriaPtrInput is an input type that accepts PipeFilterCriteriaArgs, PipeFilterCriteriaPtr and PipeFilterCriteriaPtrOutput values.
// You can construct a concrete instance of `PipeFilterCriteriaPtrInput` via:
//
//	        PipeFilterCriteriaArgs{...}
//
//	or:
//
//	        nil
type PipeFilterCriteriaPtrInput interface {
	pulumi.Input

	ToPipeFilterCriteriaPtrOutput() PipeFilterCriteriaPtrOutput
	ToPipeFilterCriteriaPtrOutputWithContext(context.Context) PipeFilterCriteriaPtrOutput
}

type pipeFilterCriteriaPtrType PipeFilterCriteriaArgs

func PipeFilterCriteriaPtr(v *PipeFilterCriteriaArgs) PipeFilterCriteriaPtrInput {
	return (*pipeFilterCriteriaPtrType)(v)
}

func (*pipeFilterCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeFilterCriteria)(nil)).Elem()
}

func (i *pipeFilterCriteriaPtrType) ToPipeFilterCriteriaPtrOutput() PipeFilterCriteriaPtrOutput {
	return i.ToPipeFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i *pipeFilterCriteriaPtrType) ToPipeFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFilterCriteriaPtrOutput)
}

type PipeFilterCriteriaOutput struct{ *pulumi.OutputState }

func (PipeFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeFilterCriteria)(nil)).Elem()
}

func (o PipeFilterCriteriaOutput) ToPipeFilterCriteriaOutput() PipeFilterCriteriaOutput {
	return o
}

func (o PipeFilterCriteriaOutput) ToPipeFilterCriteriaOutputWithContext(ctx context.Context) PipeFilterCriteriaOutput {
	return o
}

func (o PipeFilterCriteriaOutput) ToPipeFilterCriteriaPtrOutput() PipeFilterCriteriaPtrOutput {
	return o.ToPipeFilterCriteriaPtrOutputWithContext(context.Background())
}

func (o PipeFilterCriteriaOutput) ToPipeFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeFilterCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeFilterCriteria) *PipeFilterCriteria {
		return &v
	}).(PipeFilterCriteriaPtrOutput)
}

func (o PipeFilterCriteriaOutput) Filters() PipeFilterArrayOutput {
	return o.ApplyT(func(v PipeFilterCriteria) []PipeFilter { return v.Filters }).(PipeFilterArrayOutput)
}

type PipeFilterCriteriaPtrOutput struct{ *pulumi.OutputState }

func (PipeFilterCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeFilterCriteria)(nil)).Elem()
}

func (o PipeFilterCriteriaPtrOutput) ToPipeFilterCriteriaPtrOutput() PipeFilterCriteriaPtrOutput {
	return o
}

func (o PipeFilterCriteriaPtrOutput) ToPipeFilterCriteriaPtrOutputWithContext(ctx context.Context) PipeFilterCriteriaPtrOutput {
	return o
}

func (o PipeFilterCriteriaPtrOutput) Elem() PipeFilterCriteriaOutput {
	return o.ApplyT(func(v *PipeFilterCriteria) PipeFilterCriteria {
		if v != nil {
			return *v
		}
		var ret PipeFilterCriteria
		return ret
	}).(PipeFilterCriteriaOutput)
}

func (o PipeFilterCriteriaPtrOutput) Filters() PipeFilterArrayOutput {
	return o.ApplyT(func(v *PipeFilterCriteria) []PipeFilter {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(PipeFilterArrayOutput)
}

type PipeFirehoseLogDestination struct {
	DeliveryStreamArn *string `pulumi:"deliveryStreamArn"`
}

// PipeFirehoseLogDestinationInput is an input type that accepts PipeFirehoseLogDestinationArgs and PipeFirehoseLogDestinationOutput values.
// You can construct a concrete instance of `PipeFirehoseLogDestinationInput` via:
//
//	PipeFirehoseLogDestinationArgs{...}
type PipeFirehoseLogDestinationInput interface {
	pulumi.Input

	ToPipeFirehoseLogDestinationOutput() PipeFirehoseLogDestinationOutput
	ToPipeFirehoseLogDestinationOutputWithContext(context.Context) PipeFirehoseLogDestinationOutput
}

type PipeFirehoseLogDestinationArgs struct {
	DeliveryStreamArn pulumi.StringPtrInput `pulumi:"deliveryStreamArn"`
}

func (PipeFirehoseLogDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeFirehoseLogDestination)(nil)).Elem()
}

func (i PipeFirehoseLogDestinationArgs) ToPipeFirehoseLogDestinationOutput() PipeFirehoseLogDestinationOutput {
	return i.ToPipeFirehoseLogDestinationOutputWithContext(context.Background())
}

func (i PipeFirehoseLogDestinationArgs) ToPipeFirehoseLogDestinationOutputWithContext(ctx context.Context) PipeFirehoseLogDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFirehoseLogDestinationOutput)
}

func (i PipeFirehoseLogDestinationArgs) ToPipeFirehoseLogDestinationPtrOutput() PipeFirehoseLogDestinationPtrOutput {
	return i.ToPipeFirehoseLogDestinationPtrOutputWithContext(context.Background())
}

func (i PipeFirehoseLogDestinationArgs) ToPipeFirehoseLogDestinationPtrOutputWithContext(ctx context.Context) PipeFirehoseLogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFirehoseLogDestinationOutput).ToPipeFirehoseLogDestinationPtrOutputWithContext(ctx)
}

// PipeFirehoseLogDestinationPtrInput is an input type that accepts PipeFirehoseLogDestinationArgs, PipeFirehoseLogDestinationPtr and PipeFirehoseLogDestinationPtrOutput values.
// You can construct a concrete instance of `PipeFirehoseLogDestinationPtrInput` via:
//
//	        PipeFirehoseLogDestinationArgs{...}
//
//	or:
//
//	        nil
type PipeFirehoseLogDestinationPtrInput interface {
	pulumi.Input

	ToPipeFirehoseLogDestinationPtrOutput() PipeFirehoseLogDestinationPtrOutput
	ToPipeFirehoseLogDestinationPtrOutputWithContext(context.Context) PipeFirehoseLogDestinationPtrOutput
}

type pipeFirehoseLogDestinationPtrType PipeFirehoseLogDestinationArgs

func PipeFirehoseLogDestinationPtr(v *PipeFirehoseLogDestinationArgs) PipeFirehoseLogDestinationPtrInput {
	return (*pipeFirehoseLogDestinationPtrType)(v)
}

func (*pipeFirehoseLogDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeFirehoseLogDestination)(nil)).Elem()
}

func (i *pipeFirehoseLogDestinationPtrType) ToPipeFirehoseLogDestinationPtrOutput() PipeFirehoseLogDestinationPtrOutput {
	return i.ToPipeFirehoseLogDestinationPtrOutputWithContext(context.Background())
}

func (i *pipeFirehoseLogDestinationPtrType) ToPipeFirehoseLogDestinationPtrOutputWithContext(ctx context.Context) PipeFirehoseLogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeFirehoseLogDestinationPtrOutput)
}

type PipeFirehoseLogDestinationOutput struct{ *pulumi.OutputState }

func (PipeFirehoseLogDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeFirehoseLogDestination)(nil)).Elem()
}

func (o PipeFirehoseLogDestinationOutput) ToPipeFirehoseLogDestinationOutput() PipeFirehoseLogDestinationOutput {
	return o
}

func (o PipeFirehoseLogDestinationOutput) ToPipeFirehoseLogDestinationOutputWithContext(ctx context.Context) PipeFirehoseLogDestinationOutput {
	return o
}

func (o PipeFirehoseLogDestinationOutput) ToPipeFirehoseLogDestinationPtrOutput() PipeFirehoseLogDestinationPtrOutput {
	return o.ToPipeFirehoseLogDestinationPtrOutputWithContext(context.Background())
}

func (o PipeFirehoseLogDestinationOutput) ToPipeFirehoseLogDestinationPtrOutputWithContext(ctx context.Context) PipeFirehoseLogDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeFirehoseLogDestination) *PipeFirehoseLogDestination {
		return &v
	}).(PipeFirehoseLogDestinationPtrOutput)
}

func (o PipeFirehoseLogDestinationOutput) DeliveryStreamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeFirehoseLogDestination) *string { return v.DeliveryStreamArn }).(pulumi.StringPtrOutput)
}

type PipeFirehoseLogDestinationPtrOutput struct{ *pulumi.OutputState }

func (PipeFirehoseLogDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeFirehoseLogDestination)(nil)).Elem()
}

func (o PipeFirehoseLogDestinationPtrOutput) ToPipeFirehoseLogDestinationPtrOutput() PipeFirehoseLogDestinationPtrOutput {
	return o
}

func (o PipeFirehoseLogDestinationPtrOutput) ToPipeFirehoseLogDestinationPtrOutputWithContext(ctx context.Context) PipeFirehoseLogDestinationPtrOutput {
	return o
}

func (o PipeFirehoseLogDestinationPtrOutput) Elem() PipeFirehoseLogDestinationOutput {
	return o.ApplyT(func(v *PipeFirehoseLogDestination) PipeFirehoseLogDestination {
		if v != nil {
			return *v
		}
		var ret PipeFirehoseLogDestination
		return ret
	}).(PipeFirehoseLogDestinationOutput)
}

func (o PipeFirehoseLogDestinationPtrOutput) DeliveryStreamArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeFirehoseLogDestination) *string {
		if v == nil {
			return nil
		}
		return v.DeliveryStreamArn
	}).(pulumi.StringPtrOutput)
}

type PipeHeaderParametersMap struct {
}

// PipeHeaderParametersMapInput is an input type that accepts PipeHeaderParametersMap and PipeHeaderParametersMapOutput values.
// You can construct a concrete instance of `PipeHeaderParametersMapInput` via:
//
//	PipeHeaderParametersMap{ "key": PipeHeaderParametersArgs{...} }
type PipeHeaderParametersMapInput interface {
	pulumi.Input

	ToPipeHeaderParametersMapOutput() PipeHeaderParametersMapOutput
	ToPipeHeaderParametersMapOutputWithContext(context.Context) PipeHeaderParametersMapOutput
}

type PipeHeaderParametersMapArgs struct {
}

func (PipeHeaderParametersMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeHeaderParametersMap)(nil)).Elem()
}

func (i PipeHeaderParametersMapArgs) ToPipeHeaderParametersMapOutput() PipeHeaderParametersMapOutput {
	return i.ToPipeHeaderParametersMapOutputWithContext(context.Background())
}

func (i PipeHeaderParametersMapArgs) ToPipeHeaderParametersMapOutputWithContext(ctx context.Context) PipeHeaderParametersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeHeaderParametersMapOutput)
}

func (i PipeHeaderParametersMapArgs) ToPipeHeaderParametersMapPtrOutput() PipeHeaderParametersMapPtrOutput {
	return i.ToPipeHeaderParametersMapPtrOutputWithContext(context.Background())
}

func (i PipeHeaderParametersMapArgs) ToPipeHeaderParametersMapPtrOutputWithContext(ctx context.Context) PipeHeaderParametersMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeHeaderParametersMapOutput).ToPipeHeaderParametersMapPtrOutputWithContext(ctx)
}

// PipeHeaderParametersMapPtrInput is an input type that accepts PipeHeaderParametersMapArgs, PipeHeaderParametersMapPtr and PipeHeaderParametersMapPtrOutput values.
// You can construct a concrete instance of `PipeHeaderParametersMapPtrInput` via:
//
//	        PipeHeaderParametersMapArgs{...}
//
//	or:
//
//	        nil
type PipeHeaderParametersMapPtrInput interface {
	pulumi.Input

	ToPipeHeaderParametersMapPtrOutput() PipeHeaderParametersMapPtrOutput
	ToPipeHeaderParametersMapPtrOutputWithContext(context.Context) PipeHeaderParametersMapPtrOutput
}

type pipeHeaderParametersMapPtrType PipeHeaderParametersMapArgs

func PipeHeaderParametersMapPtr(v *PipeHeaderParametersMapArgs) PipeHeaderParametersMapPtrInput {
	return (*pipeHeaderParametersMapPtrType)(v)
}

func (*pipeHeaderParametersMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeHeaderParametersMap)(nil)).Elem()
}

func (i *pipeHeaderParametersMapPtrType) ToPipeHeaderParametersMapPtrOutput() PipeHeaderParametersMapPtrOutput {
	return i.ToPipeHeaderParametersMapPtrOutputWithContext(context.Background())
}

func (i *pipeHeaderParametersMapPtrType) ToPipeHeaderParametersMapPtrOutputWithContext(ctx context.Context) PipeHeaderParametersMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeHeaderParametersMapPtrOutput)
}

type PipeHeaderParametersMapOutput struct{ *pulumi.OutputState }

func (PipeHeaderParametersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeHeaderParametersMap)(nil)).Elem()
}

func (o PipeHeaderParametersMapOutput) ToPipeHeaderParametersMapOutput() PipeHeaderParametersMapOutput {
	return o
}

func (o PipeHeaderParametersMapOutput) ToPipeHeaderParametersMapOutputWithContext(ctx context.Context) PipeHeaderParametersMapOutput {
	return o
}

func (o PipeHeaderParametersMapOutput) ToPipeHeaderParametersMapPtrOutput() PipeHeaderParametersMapPtrOutput {
	return o.ToPipeHeaderParametersMapPtrOutputWithContext(context.Background())
}

func (o PipeHeaderParametersMapOutput) ToPipeHeaderParametersMapPtrOutputWithContext(ctx context.Context) PipeHeaderParametersMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeHeaderParametersMap) *PipeHeaderParametersMap {
		return &v
	}).(PipeHeaderParametersMapPtrOutput)
}

type PipeHeaderParametersMapPtrOutput struct{ *pulumi.OutputState }

func (PipeHeaderParametersMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeHeaderParametersMap)(nil)).Elem()
}

func (o PipeHeaderParametersMapPtrOutput) ToPipeHeaderParametersMapPtrOutput() PipeHeaderParametersMapPtrOutput {
	return o
}

func (o PipeHeaderParametersMapPtrOutput) ToPipeHeaderParametersMapPtrOutputWithContext(ctx context.Context) PipeHeaderParametersMapPtrOutput {
	return o
}

func (o PipeHeaderParametersMapPtrOutput) Elem() PipeHeaderParametersMapOutput {
	return o.ApplyT(func(v *PipeHeaderParametersMap) PipeHeaderParametersMap {
		if v != nil {
			return *v
		}
		var ret PipeHeaderParametersMap
		return ret
	}).(PipeHeaderParametersMapOutput)
}

type PipeLogConfiguration struct {
	CloudwatchLogsLogDestination *PipeCloudwatchLogsLogDestination `pulumi:"cloudwatchLogsLogDestination"`
	FirehoseLogDestination       *PipeFirehoseLogDestination       `pulumi:"firehoseLogDestination"`
	IncludeExecutionData         []PipeIncludeExecutionDataOption  `pulumi:"includeExecutionData"`
	Level                        *PipeLogLevel                     `pulumi:"level"`
	S3LogDestination             *PipeS3LogDestination             `pulumi:"s3LogDestination"`
}

// PipeLogConfigurationInput is an input type that accepts PipeLogConfigurationArgs and PipeLogConfigurationOutput values.
// You can construct a concrete instance of `PipeLogConfigurationInput` via:
//
//	PipeLogConfigurationArgs{...}
type PipeLogConfigurationInput interface {
	pulumi.Input

	ToPipeLogConfigurationOutput() PipeLogConfigurationOutput
	ToPipeLogConfigurationOutputWithContext(context.Context) PipeLogConfigurationOutput
}

type PipeLogConfigurationArgs struct {
	CloudwatchLogsLogDestination PipeCloudwatchLogsLogDestinationPtrInput `pulumi:"cloudwatchLogsLogDestination"`
	FirehoseLogDestination       PipeFirehoseLogDestinationPtrInput       `pulumi:"firehoseLogDestination"`
	IncludeExecutionData         PipeIncludeExecutionDataOptionArrayInput `pulumi:"includeExecutionData"`
	Level                        PipeLogLevelPtrInput                     `pulumi:"level"`
	S3LogDestination             PipeS3LogDestinationPtrInput             `pulumi:"s3LogDestination"`
}

func (PipeLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeLogConfiguration)(nil)).Elem()
}

func (i PipeLogConfigurationArgs) ToPipeLogConfigurationOutput() PipeLogConfigurationOutput {
	return i.ToPipeLogConfigurationOutputWithContext(context.Background())
}

func (i PipeLogConfigurationArgs) ToPipeLogConfigurationOutputWithContext(ctx context.Context) PipeLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeLogConfigurationOutput)
}

func (i PipeLogConfigurationArgs) ToPipeLogConfigurationPtrOutput() PipeLogConfigurationPtrOutput {
	return i.ToPipeLogConfigurationPtrOutputWithContext(context.Background())
}

func (i PipeLogConfigurationArgs) ToPipeLogConfigurationPtrOutputWithContext(ctx context.Context) PipeLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeLogConfigurationOutput).ToPipeLogConfigurationPtrOutputWithContext(ctx)
}

// PipeLogConfigurationPtrInput is an input type that accepts PipeLogConfigurationArgs, PipeLogConfigurationPtr and PipeLogConfigurationPtrOutput values.
// You can construct a concrete instance of `PipeLogConfigurationPtrInput` via:
//
//	        PipeLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type PipeLogConfigurationPtrInput interface {
	pulumi.Input

	ToPipeLogConfigurationPtrOutput() PipeLogConfigurationPtrOutput
	ToPipeLogConfigurationPtrOutputWithContext(context.Context) PipeLogConfigurationPtrOutput
}

type pipeLogConfigurationPtrType PipeLogConfigurationArgs

func PipeLogConfigurationPtr(v *PipeLogConfigurationArgs) PipeLogConfigurationPtrInput {
	return (*pipeLogConfigurationPtrType)(v)
}

func (*pipeLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeLogConfiguration)(nil)).Elem()
}

func (i *pipeLogConfigurationPtrType) ToPipeLogConfigurationPtrOutput() PipeLogConfigurationPtrOutput {
	return i.ToPipeLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *pipeLogConfigurationPtrType) ToPipeLogConfigurationPtrOutputWithContext(ctx context.Context) PipeLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeLogConfigurationPtrOutput)
}

type PipeLogConfigurationOutput struct{ *pulumi.OutputState }

func (PipeLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeLogConfiguration)(nil)).Elem()
}

func (o PipeLogConfigurationOutput) ToPipeLogConfigurationOutput() PipeLogConfigurationOutput {
	return o
}

func (o PipeLogConfigurationOutput) ToPipeLogConfigurationOutputWithContext(ctx context.Context) PipeLogConfigurationOutput {
	return o
}

func (o PipeLogConfigurationOutput) ToPipeLogConfigurationPtrOutput() PipeLogConfigurationPtrOutput {
	return o.ToPipeLogConfigurationPtrOutputWithContext(context.Background())
}

func (o PipeLogConfigurationOutput) ToPipeLogConfigurationPtrOutputWithContext(ctx context.Context) PipeLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeLogConfiguration) *PipeLogConfiguration {
		return &v
	}).(PipeLogConfigurationPtrOutput)
}

func (o PipeLogConfigurationOutput) CloudwatchLogsLogDestination() PipeCloudwatchLogsLogDestinationPtrOutput {
	return o.ApplyT(func(v PipeLogConfiguration) *PipeCloudwatchLogsLogDestination { return v.CloudwatchLogsLogDestination }).(PipeCloudwatchLogsLogDestinationPtrOutput)
}

func (o PipeLogConfigurationOutput) FirehoseLogDestination() PipeFirehoseLogDestinationPtrOutput {
	return o.ApplyT(func(v PipeLogConfiguration) *PipeFirehoseLogDestination { return v.FirehoseLogDestination }).(PipeFirehoseLogDestinationPtrOutput)
}

func (o PipeLogConfigurationOutput) IncludeExecutionData() PipeIncludeExecutionDataOptionArrayOutput {
	return o.ApplyT(func(v PipeLogConfiguration) []PipeIncludeExecutionDataOption { return v.IncludeExecutionData }).(PipeIncludeExecutionDataOptionArrayOutput)
}

func (o PipeLogConfigurationOutput) Level() PipeLogLevelPtrOutput {
	return o.ApplyT(func(v PipeLogConfiguration) *PipeLogLevel { return v.Level }).(PipeLogLevelPtrOutput)
}

func (o PipeLogConfigurationOutput) S3LogDestination() PipeS3LogDestinationPtrOutput {
	return o.ApplyT(func(v PipeLogConfiguration) *PipeS3LogDestination { return v.S3LogDestination }).(PipeS3LogDestinationPtrOutput)
}

type PipeLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PipeLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeLogConfiguration)(nil)).Elem()
}

func (o PipeLogConfigurationPtrOutput) ToPipeLogConfigurationPtrOutput() PipeLogConfigurationPtrOutput {
	return o
}

func (o PipeLogConfigurationPtrOutput) ToPipeLogConfigurationPtrOutputWithContext(ctx context.Context) PipeLogConfigurationPtrOutput {
	return o
}

func (o PipeLogConfigurationPtrOutput) Elem() PipeLogConfigurationOutput {
	return o.ApplyT(func(v *PipeLogConfiguration) PipeLogConfiguration {
		if v != nil {
			return *v
		}
		var ret PipeLogConfiguration
		return ret
	}).(PipeLogConfigurationOutput)
}

func (o PipeLogConfigurationPtrOutput) CloudwatchLogsLogDestination() PipeCloudwatchLogsLogDestinationPtrOutput {
	return o.ApplyT(func(v *PipeLogConfiguration) *PipeCloudwatchLogsLogDestination {
		if v == nil {
			return nil
		}
		return v.CloudwatchLogsLogDestination
	}).(PipeCloudwatchLogsLogDestinationPtrOutput)
}

func (o PipeLogConfigurationPtrOutput) FirehoseLogDestination() PipeFirehoseLogDestinationPtrOutput {
	return o.ApplyT(func(v *PipeLogConfiguration) *PipeFirehoseLogDestination {
		if v == nil {
			return nil
		}
		return v.FirehoseLogDestination
	}).(PipeFirehoseLogDestinationPtrOutput)
}

func (o PipeLogConfigurationPtrOutput) IncludeExecutionData() PipeIncludeExecutionDataOptionArrayOutput {
	return o.ApplyT(func(v *PipeLogConfiguration) []PipeIncludeExecutionDataOption {
		if v == nil {
			return nil
		}
		return v.IncludeExecutionData
	}).(PipeIncludeExecutionDataOptionArrayOutput)
}

func (o PipeLogConfigurationPtrOutput) Level() PipeLogLevelPtrOutput {
	return o.ApplyT(func(v *PipeLogConfiguration) *PipeLogLevel {
		if v == nil {
			return nil
		}
		return v.Level
	}).(PipeLogLevelPtrOutput)
}

func (o PipeLogConfigurationPtrOutput) S3LogDestination() PipeS3LogDestinationPtrOutput {
	return o.ApplyT(func(v *PipeLogConfiguration) *PipeS3LogDestination {
		if v == nil {
			return nil
		}
		return v.S3LogDestination
	}).(PipeS3LogDestinationPtrOutput)
}

type PipeMqBrokerAccessCredentials0Properties struct {
	// Optional SecretManager ARN which stores the database credentials
	BasicAuth string `pulumi:"basicAuth"`
}

type PipeMqBrokerAccessCredentialsProperties struct {
	// Optional SecretManager ARN which stores the database credentials
	BasicAuth string `pulumi:"basicAuth"`
}

// PipeMqBrokerAccessCredentialsPropertiesInput is an input type that accepts PipeMqBrokerAccessCredentialsPropertiesArgs and PipeMqBrokerAccessCredentialsPropertiesOutput values.
// You can construct a concrete instance of `PipeMqBrokerAccessCredentialsPropertiesInput` via:
//
//	PipeMqBrokerAccessCredentialsPropertiesArgs{...}
type PipeMqBrokerAccessCredentialsPropertiesInput interface {
	pulumi.Input

	ToPipeMqBrokerAccessCredentialsPropertiesOutput() PipeMqBrokerAccessCredentialsPropertiesOutput
	ToPipeMqBrokerAccessCredentialsPropertiesOutputWithContext(context.Context) PipeMqBrokerAccessCredentialsPropertiesOutput
}

type PipeMqBrokerAccessCredentialsPropertiesArgs struct {
	// Optional SecretManager ARN which stores the database credentials
	BasicAuth pulumi.StringInput `pulumi:"basicAuth"`
}

func (PipeMqBrokerAccessCredentialsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMqBrokerAccessCredentialsProperties)(nil)).Elem()
}

func (i PipeMqBrokerAccessCredentialsPropertiesArgs) ToPipeMqBrokerAccessCredentialsPropertiesOutput() PipeMqBrokerAccessCredentialsPropertiesOutput {
	return i.ToPipeMqBrokerAccessCredentialsPropertiesOutputWithContext(context.Background())
}

func (i PipeMqBrokerAccessCredentialsPropertiesArgs) ToPipeMqBrokerAccessCredentialsPropertiesOutputWithContext(ctx context.Context) PipeMqBrokerAccessCredentialsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMqBrokerAccessCredentialsPropertiesOutput)
}

func (i PipeMqBrokerAccessCredentialsPropertiesArgs) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutput() PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return i.ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (i PipeMqBrokerAccessCredentialsPropertiesArgs) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(ctx context.Context) PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMqBrokerAccessCredentialsPropertiesOutput).ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(ctx)
}

// PipeMqBrokerAccessCredentialsPropertiesPtrInput is an input type that accepts PipeMqBrokerAccessCredentialsPropertiesArgs, PipeMqBrokerAccessCredentialsPropertiesPtr and PipeMqBrokerAccessCredentialsPropertiesPtrOutput values.
// You can construct a concrete instance of `PipeMqBrokerAccessCredentialsPropertiesPtrInput` via:
//
//	        PipeMqBrokerAccessCredentialsPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeMqBrokerAccessCredentialsPropertiesPtrInput interface {
	pulumi.Input

	ToPipeMqBrokerAccessCredentialsPropertiesPtrOutput() PipeMqBrokerAccessCredentialsPropertiesPtrOutput
	ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(context.Context) PipeMqBrokerAccessCredentialsPropertiesPtrOutput
}

type pipeMqBrokerAccessCredentialsPropertiesPtrType PipeMqBrokerAccessCredentialsPropertiesArgs

func PipeMqBrokerAccessCredentialsPropertiesPtr(v *PipeMqBrokerAccessCredentialsPropertiesArgs) PipeMqBrokerAccessCredentialsPropertiesPtrInput {
	return (*pipeMqBrokerAccessCredentialsPropertiesPtrType)(v)
}

func (*pipeMqBrokerAccessCredentialsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeMqBrokerAccessCredentialsProperties)(nil)).Elem()
}

func (i *pipeMqBrokerAccessCredentialsPropertiesPtrType) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutput() PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return i.ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeMqBrokerAccessCredentialsPropertiesPtrType) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(ctx context.Context) PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMqBrokerAccessCredentialsPropertiesPtrOutput)
}

type PipeMqBrokerAccessCredentialsPropertiesOutput struct{ *pulumi.OutputState }

func (PipeMqBrokerAccessCredentialsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMqBrokerAccessCredentialsProperties)(nil)).Elem()
}

func (o PipeMqBrokerAccessCredentialsPropertiesOutput) ToPipeMqBrokerAccessCredentialsPropertiesOutput() PipeMqBrokerAccessCredentialsPropertiesOutput {
	return o
}

func (o PipeMqBrokerAccessCredentialsPropertiesOutput) ToPipeMqBrokerAccessCredentialsPropertiesOutputWithContext(ctx context.Context) PipeMqBrokerAccessCredentialsPropertiesOutput {
	return o
}

func (o PipeMqBrokerAccessCredentialsPropertiesOutput) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutput() PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return o.ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(context.Background())
}

func (o PipeMqBrokerAccessCredentialsPropertiesOutput) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(ctx context.Context) PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeMqBrokerAccessCredentialsProperties) *PipeMqBrokerAccessCredentialsProperties {
		return &v
	}).(PipeMqBrokerAccessCredentialsPropertiesPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeMqBrokerAccessCredentialsPropertiesOutput) BasicAuth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeMqBrokerAccessCredentialsProperties) string { return v.BasicAuth }).(pulumi.StringOutput)
}

type PipeMqBrokerAccessCredentialsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeMqBrokerAccessCredentialsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeMqBrokerAccessCredentialsProperties)(nil)).Elem()
}

func (o PipeMqBrokerAccessCredentialsPropertiesPtrOutput) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutput() PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return o
}

func (o PipeMqBrokerAccessCredentialsPropertiesPtrOutput) ToPipeMqBrokerAccessCredentialsPropertiesPtrOutputWithContext(ctx context.Context) PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return o
}

func (o PipeMqBrokerAccessCredentialsPropertiesPtrOutput) Elem() PipeMqBrokerAccessCredentialsPropertiesOutput {
	return o.ApplyT(func(v *PipeMqBrokerAccessCredentialsProperties) PipeMqBrokerAccessCredentialsProperties {
		if v != nil {
			return *v
		}
		var ret PipeMqBrokerAccessCredentialsProperties
		return ret
	}).(PipeMqBrokerAccessCredentialsPropertiesOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeMqBrokerAccessCredentialsPropertiesPtrOutput) BasicAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeMqBrokerAccessCredentialsProperties) *string {
		if v == nil {
			return nil
		}
		return &v.BasicAuth
	}).(pulumi.StringPtrOutput)
}

type PipeMskAccessCredentials0Properties struct {
	// Optional SecretManager ARN which stores the database credentials
	SaslScram512Auth string `pulumi:"saslScram512Auth"`
}

// PipeMskAccessCredentials0PropertiesInput is an input type that accepts PipeMskAccessCredentials0PropertiesArgs and PipeMskAccessCredentials0PropertiesOutput values.
// You can construct a concrete instance of `PipeMskAccessCredentials0PropertiesInput` via:
//
//	PipeMskAccessCredentials0PropertiesArgs{...}
type PipeMskAccessCredentials0PropertiesInput interface {
	pulumi.Input

	ToPipeMskAccessCredentials0PropertiesOutput() PipeMskAccessCredentials0PropertiesOutput
	ToPipeMskAccessCredentials0PropertiesOutputWithContext(context.Context) PipeMskAccessCredentials0PropertiesOutput
}

type PipeMskAccessCredentials0PropertiesArgs struct {
	// Optional SecretManager ARN which stores the database credentials
	SaslScram512Auth pulumi.StringInput `pulumi:"saslScram512Auth"`
}

func (PipeMskAccessCredentials0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMskAccessCredentials0Properties)(nil)).Elem()
}

func (i PipeMskAccessCredentials0PropertiesArgs) ToPipeMskAccessCredentials0PropertiesOutput() PipeMskAccessCredentials0PropertiesOutput {
	return i.ToPipeMskAccessCredentials0PropertiesOutputWithContext(context.Background())
}

func (i PipeMskAccessCredentials0PropertiesArgs) ToPipeMskAccessCredentials0PropertiesOutputWithContext(ctx context.Context) PipeMskAccessCredentials0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMskAccessCredentials0PropertiesOutput)
}

func (i PipeMskAccessCredentials0PropertiesArgs) ToPipeMskAccessCredentials0PropertiesPtrOutput() PipeMskAccessCredentials0PropertiesPtrOutput {
	return i.ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(context.Background())
}

func (i PipeMskAccessCredentials0PropertiesArgs) ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMskAccessCredentials0PropertiesOutput).ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(ctx)
}

// PipeMskAccessCredentials0PropertiesPtrInput is an input type that accepts PipeMskAccessCredentials0PropertiesArgs, PipeMskAccessCredentials0PropertiesPtr and PipeMskAccessCredentials0PropertiesPtrOutput values.
// You can construct a concrete instance of `PipeMskAccessCredentials0PropertiesPtrInput` via:
//
//	        PipeMskAccessCredentials0PropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeMskAccessCredentials0PropertiesPtrInput interface {
	pulumi.Input

	ToPipeMskAccessCredentials0PropertiesPtrOutput() PipeMskAccessCredentials0PropertiesPtrOutput
	ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(context.Context) PipeMskAccessCredentials0PropertiesPtrOutput
}

type pipeMskAccessCredentials0PropertiesPtrType PipeMskAccessCredentials0PropertiesArgs

func PipeMskAccessCredentials0PropertiesPtr(v *PipeMskAccessCredentials0PropertiesArgs) PipeMskAccessCredentials0PropertiesPtrInput {
	return (*pipeMskAccessCredentials0PropertiesPtrType)(v)
}

func (*pipeMskAccessCredentials0PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeMskAccessCredentials0Properties)(nil)).Elem()
}

func (i *pipeMskAccessCredentials0PropertiesPtrType) ToPipeMskAccessCredentials0PropertiesPtrOutput() PipeMskAccessCredentials0PropertiesPtrOutput {
	return i.ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeMskAccessCredentials0PropertiesPtrType) ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMskAccessCredentials0PropertiesPtrOutput)
}

type PipeMskAccessCredentials0PropertiesOutput struct{ *pulumi.OutputState }

func (PipeMskAccessCredentials0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMskAccessCredentials0Properties)(nil)).Elem()
}

func (o PipeMskAccessCredentials0PropertiesOutput) ToPipeMskAccessCredentials0PropertiesOutput() PipeMskAccessCredentials0PropertiesOutput {
	return o
}

func (o PipeMskAccessCredentials0PropertiesOutput) ToPipeMskAccessCredentials0PropertiesOutputWithContext(ctx context.Context) PipeMskAccessCredentials0PropertiesOutput {
	return o
}

func (o PipeMskAccessCredentials0PropertiesOutput) ToPipeMskAccessCredentials0PropertiesPtrOutput() PipeMskAccessCredentials0PropertiesPtrOutput {
	return o.ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(context.Background())
}

func (o PipeMskAccessCredentials0PropertiesOutput) ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials0PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeMskAccessCredentials0Properties) *PipeMskAccessCredentials0Properties {
		return &v
	}).(PipeMskAccessCredentials0PropertiesPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeMskAccessCredentials0PropertiesOutput) SaslScram512Auth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeMskAccessCredentials0Properties) string { return v.SaslScram512Auth }).(pulumi.StringOutput)
}

type PipeMskAccessCredentials0PropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeMskAccessCredentials0PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeMskAccessCredentials0Properties)(nil)).Elem()
}

func (o PipeMskAccessCredentials0PropertiesPtrOutput) ToPipeMskAccessCredentials0PropertiesPtrOutput() PipeMskAccessCredentials0PropertiesPtrOutput {
	return o
}

func (o PipeMskAccessCredentials0PropertiesPtrOutput) ToPipeMskAccessCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials0PropertiesPtrOutput {
	return o
}

func (o PipeMskAccessCredentials0PropertiesPtrOutput) Elem() PipeMskAccessCredentials0PropertiesOutput {
	return o.ApplyT(func(v *PipeMskAccessCredentials0Properties) PipeMskAccessCredentials0Properties {
		if v != nil {
			return *v
		}
		var ret PipeMskAccessCredentials0Properties
		return ret
	}).(PipeMskAccessCredentials0PropertiesOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeMskAccessCredentials0PropertiesPtrOutput) SaslScram512Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeMskAccessCredentials0Properties) *string {
		if v == nil {
			return nil
		}
		return &v.SaslScram512Auth
	}).(pulumi.StringPtrOutput)
}

type PipeMskAccessCredentials1Properties struct {
	// Optional SecretManager ARN which stores the database credentials
	ClientCertificateTlsAuth string `pulumi:"clientCertificateTlsAuth"`
}

// PipeMskAccessCredentials1PropertiesInput is an input type that accepts PipeMskAccessCredentials1PropertiesArgs and PipeMskAccessCredentials1PropertiesOutput values.
// You can construct a concrete instance of `PipeMskAccessCredentials1PropertiesInput` via:
//
//	PipeMskAccessCredentials1PropertiesArgs{...}
type PipeMskAccessCredentials1PropertiesInput interface {
	pulumi.Input

	ToPipeMskAccessCredentials1PropertiesOutput() PipeMskAccessCredentials1PropertiesOutput
	ToPipeMskAccessCredentials1PropertiesOutputWithContext(context.Context) PipeMskAccessCredentials1PropertiesOutput
}

type PipeMskAccessCredentials1PropertiesArgs struct {
	// Optional SecretManager ARN which stores the database credentials
	ClientCertificateTlsAuth pulumi.StringInput `pulumi:"clientCertificateTlsAuth"`
}

func (PipeMskAccessCredentials1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMskAccessCredentials1Properties)(nil)).Elem()
}

func (i PipeMskAccessCredentials1PropertiesArgs) ToPipeMskAccessCredentials1PropertiesOutput() PipeMskAccessCredentials1PropertiesOutput {
	return i.ToPipeMskAccessCredentials1PropertiesOutputWithContext(context.Background())
}

func (i PipeMskAccessCredentials1PropertiesArgs) ToPipeMskAccessCredentials1PropertiesOutputWithContext(ctx context.Context) PipeMskAccessCredentials1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMskAccessCredentials1PropertiesOutput)
}

func (i PipeMskAccessCredentials1PropertiesArgs) ToPipeMskAccessCredentials1PropertiesPtrOutput() PipeMskAccessCredentials1PropertiesPtrOutput {
	return i.ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(context.Background())
}

func (i PipeMskAccessCredentials1PropertiesArgs) ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMskAccessCredentials1PropertiesOutput).ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(ctx)
}

// PipeMskAccessCredentials1PropertiesPtrInput is an input type that accepts PipeMskAccessCredentials1PropertiesArgs, PipeMskAccessCredentials1PropertiesPtr and PipeMskAccessCredentials1PropertiesPtrOutput values.
// You can construct a concrete instance of `PipeMskAccessCredentials1PropertiesPtrInput` via:
//
//	        PipeMskAccessCredentials1PropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeMskAccessCredentials1PropertiesPtrInput interface {
	pulumi.Input

	ToPipeMskAccessCredentials1PropertiesPtrOutput() PipeMskAccessCredentials1PropertiesPtrOutput
	ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(context.Context) PipeMskAccessCredentials1PropertiesPtrOutput
}

type pipeMskAccessCredentials1PropertiesPtrType PipeMskAccessCredentials1PropertiesArgs

func PipeMskAccessCredentials1PropertiesPtr(v *PipeMskAccessCredentials1PropertiesArgs) PipeMskAccessCredentials1PropertiesPtrInput {
	return (*pipeMskAccessCredentials1PropertiesPtrType)(v)
}

func (*pipeMskAccessCredentials1PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeMskAccessCredentials1Properties)(nil)).Elem()
}

func (i *pipeMskAccessCredentials1PropertiesPtrType) ToPipeMskAccessCredentials1PropertiesPtrOutput() PipeMskAccessCredentials1PropertiesPtrOutput {
	return i.ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeMskAccessCredentials1PropertiesPtrType) ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeMskAccessCredentials1PropertiesPtrOutput)
}

type PipeMskAccessCredentials1PropertiesOutput struct{ *pulumi.OutputState }

func (PipeMskAccessCredentials1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeMskAccessCredentials1Properties)(nil)).Elem()
}

func (o PipeMskAccessCredentials1PropertiesOutput) ToPipeMskAccessCredentials1PropertiesOutput() PipeMskAccessCredentials1PropertiesOutput {
	return o
}

func (o PipeMskAccessCredentials1PropertiesOutput) ToPipeMskAccessCredentials1PropertiesOutputWithContext(ctx context.Context) PipeMskAccessCredentials1PropertiesOutput {
	return o
}

func (o PipeMskAccessCredentials1PropertiesOutput) ToPipeMskAccessCredentials1PropertiesPtrOutput() PipeMskAccessCredentials1PropertiesPtrOutput {
	return o.ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(context.Background())
}

func (o PipeMskAccessCredentials1PropertiesOutput) ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials1PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeMskAccessCredentials1Properties) *PipeMskAccessCredentials1Properties {
		return &v
	}).(PipeMskAccessCredentials1PropertiesPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeMskAccessCredentials1PropertiesOutput) ClientCertificateTlsAuth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeMskAccessCredentials1Properties) string { return v.ClientCertificateTlsAuth }).(pulumi.StringOutput)
}

type PipeMskAccessCredentials1PropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeMskAccessCredentials1PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeMskAccessCredentials1Properties)(nil)).Elem()
}

func (o PipeMskAccessCredentials1PropertiesPtrOutput) ToPipeMskAccessCredentials1PropertiesPtrOutput() PipeMskAccessCredentials1PropertiesPtrOutput {
	return o
}

func (o PipeMskAccessCredentials1PropertiesPtrOutput) ToPipeMskAccessCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeMskAccessCredentials1PropertiesPtrOutput {
	return o
}

func (o PipeMskAccessCredentials1PropertiesPtrOutput) Elem() PipeMskAccessCredentials1PropertiesOutput {
	return o.ApplyT(func(v *PipeMskAccessCredentials1Properties) PipeMskAccessCredentials1Properties {
		if v != nil {
			return *v
		}
		var ret PipeMskAccessCredentials1Properties
		return ret
	}).(PipeMskAccessCredentials1PropertiesOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeMskAccessCredentials1PropertiesPtrOutput) ClientCertificateTlsAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeMskAccessCredentials1Properties) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertificateTlsAuth
	}).(pulumi.StringPtrOutput)
}

type PipeNetworkConfiguration struct {
	AwsvpcConfiguration *PipeAwsVpcConfiguration `pulumi:"awsvpcConfiguration"`
}

// PipeNetworkConfigurationInput is an input type that accepts PipeNetworkConfigurationArgs and PipeNetworkConfigurationOutput values.
// You can construct a concrete instance of `PipeNetworkConfigurationInput` via:
//
//	PipeNetworkConfigurationArgs{...}
type PipeNetworkConfigurationInput interface {
	pulumi.Input

	ToPipeNetworkConfigurationOutput() PipeNetworkConfigurationOutput
	ToPipeNetworkConfigurationOutputWithContext(context.Context) PipeNetworkConfigurationOutput
}

type PipeNetworkConfigurationArgs struct {
	AwsvpcConfiguration PipeAwsVpcConfigurationPtrInput `pulumi:"awsvpcConfiguration"`
}

func (PipeNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeNetworkConfiguration)(nil)).Elem()
}

func (i PipeNetworkConfigurationArgs) ToPipeNetworkConfigurationOutput() PipeNetworkConfigurationOutput {
	return i.ToPipeNetworkConfigurationOutputWithContext(context.Background())
}

func (i PipeNetworkConfigurationArgs) ToPipeNetworkConfigurationOutputWithContext(ctx context.Context) PipeNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeNetworkConfigurationOutput)
}

func (i PipeNetworkConfigurationArgs) ToPipeNetworkConfigurationPtrOutput() PipeNetworkConfigurationPtrOutput {
	return i.ToPipeNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i PipeNetworkConfigurationArgs) ToPipeNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeNetworkConfigurationOutput).ToPipeNetworkConfigurationPtrOutputWithContext(ctx)
}

// PipeNetworkConfigurationPtrInput is an input type that accepts PipeNetworkConfigurationArgs, PipeNetworkConfigurationPtr and PipeNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `PipeNetworkConfigurationPtrInput` via:
//
//	        PipeNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type PipeNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToPipeNetworkConfigurationPtrOutput() PipeNetworkConfigurationPtrOutput
	ToPipeNetworkConfigurationPtrOutputWithContext(context.Context) PipeNetworkConfigurationPtrOutput
}

type pipeNetworkConfigurationPtrType PipeNetworkConfigurationArgs

func PipeNetworkConfigurationPtr(v *PipeNetworkConfigurationArgs) PipeNetworkConfigurationPtrInput {
	return (*pipeNetworkConfigurationPtrType)(v)
}

func (*pipeNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeNetworkConfiguration)(nil)).Elem()
}

func (i *pipeNetworkConfigurationPtrType) ToPipeNetworkConfigurationPtrOutput() PipeNetworkConfigurationPtrOutput {
	return i.ToPipeNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *pipeNetworkConfigurationPtrType) ToPipeNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeNetworkConfigurationPtrOutput)
}

type PipeNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (PipeNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeNetworkConfiguration)(nil)).Elem()
}

func (o PipeNetworkConfigurationOutput) ToPipeNetworkConfigurationOutput() PipeNetworkConfigurationOutput {
	return o
}

func (o PipeNetworkConfigurationOutput) ToPipeNetworkConfigurationOutputWithContext(ctx context.Context) PipeNetworkConfigurationOutput {
	return o
}

func (o PipeNetworkConfigurationOutput) ToPipeNetworkConfigurationPtrOutput() PipeNetworkConfigurationPtrOutput {
	return o.ToPipeNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o PipeNetworkConfigurationOutput) ToPipeNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeNetworkConfiguration) *PipeNetworkConfiguration {
		return &v
	}).(PipeNetworkConfigurationPtrOutput)
}

func (o PipeNetworkConfigurationOutput) AwsvpcConfiguration() PipeAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v PipeNetworkConfiguration) *PipeAwsVpcConfiguration { return v.AwsvpcConfiguration }).(PipeAwsVpcConfigurationPtrOutput)
}

type PipeNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PipeNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeNetworkConfiguration)(nil)).Elem()
}

func (o PipeNetworkConfigurationPtrOutput) ToPipeNetworkConfigurationPtrOutput() PipeNetworkConfigurationPtrOutput {
	return o
}

func (o PipeNetworkConfigurationPtrOutput) ToPipeNetworkConfigurationPtrOutputWithContext(ctx context.Context) PipeNetworkConfigurationPtrOutput {
	return o
}

func (o PipeNetworkConfigurationPtrOutput) Elem() PipeNetworkConfigurationOutput {
	return o.ApplyT(func(v *PipeNetworkConfiguration) PipeNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret PipeNetworkConfiguration
		return ret
	}).(PipeNetworkConfigurationOutput)
}

func (o PipeNetworkConfigurationPtrOutput) AwsvpcConfiguration() PipeAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *PipeNetworkConfiguration) *PipeAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsvpcConfiguration
	}).(PipeAwsVpcConfigurationPtrOutput)
}

type PipePlacementConstraint struct {
	Expression *string                      `pulumi:"expression"`
	Type       *PipePlacementConstraintType `pulumi:"type"`
}

// PipePlacementConstraintInput is an input type that accepts PipePlacementConstraintArgs and PipePlacementConstraintOutput values.
// You can construct a concrete instance of `PipePlacementConstraintInput` via:
//
//	PipePlacementConstraintArgs{...}
type PipePlacementConstraintInput interface {
	pulumi.Input

	ToPipePlacementConstraintOutput() PipePlacementConstraintOutput
	ToPipePlacementConstraintOutputWithContext(context.Context) PipePlacementConstraintOutput
}

type PipePlacementConstraintArgs struct {
	Expression pulumi.StringPtrInput               `pulumi:"expression"`
	Type       PipePlacementConstraintTypePtrInput `pulumi:"type"`
}

func (PipePlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementConstraint)(nil)).Elem()
}

func (i PipePlacementConstraintArgs) ToPipePlacementConstraintOutput() PipePlacementConstraintOutput {
	return i.ToPipePlacementConstraintOutputWithContext(context.Background())
}

func (i PipePlacementConstraintArgs) ToPipePlacementConstraintOutputWithContext(ctx context.Context) PipePlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipePlacementConstraintOutput)
}

// PipePlacementConstraintArrayInput is an input type that accepts PipePlacementConstraintArray and PipePlacementConstraintArrayOutput values.
// You can construct a concrete instance of `PipePlacementConstraintArrayInput` via:
//
//	PipePlacementConstraintArray{ PipePlacementConstraintArgs{...} }
type PipePlacementConstraintArrayInput interface {
	pulumi.Input

	ToPipePlacementConstraintArrayOutput() PipePlacementConstraintArrayOutput
	ToPipePlacementConstraintArrayOutputWithContext(context.Context) PipePlacementConstraintArrayOutput
}

type PipePlacementConstraintArray []PipePlacementConstraintInput

func (PipePlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipePlacementConstraint)(nil)).Elem()
}

func (i PipePlacementConstraintArray) ToPipePlacementConstraintArrayOutput() PipePlacementConstraintArrayOutput {
	return i.ToPipePlacementConstraintArrayOutputWithContext(context.Background())
}

func (i PipePlacementConstraintArray) ToPipePlacementConstraintArrayOutputWithContext(ctx context.Context) PipePlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipePlacementConstraintArrayOutput)
}

type PipePlacementConstraintOutput struct{ *pulumi.OutputState }

func (PipePlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementConstraint)(nil)).Elem()
}

func (o PipePlacementConstraintOutput) ToPipePlacementConstraintOutput() PipePlacementConstraintOutput {
	return o
}

func (o PipePlacementConstraintOutput) ToPipePlacementConstraintOutputWithContext(ctx context.Context) PipePlacementConstraintOutput {
	return o
}

func (o PipePlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipePlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o PipePlacementConstraintOutput) Type() PipePlacementConstraintTypePtrOutput {
	return o.ApplyT(func(v PipePlacementConstraint) *PipePlacementConstraintType { return v.Type }).(PipePlacementConstraintTypePtrOutput)
}

type PipePlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (PipePlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipePlacementConstraint)(nil)).Elem()
}

func (o PipePlacementConstraintArrayOutput) ToPipePlacementConstraintArrayOutput() PipePlacementConstraintArrayOutput {
	return o
}

func (o PipePlacementConstraintArrayOutput) ToPipePlacementConstraintArrayOutputWithContext(ctx context.Context) PipePlacementConstraintArrayOutput {
	return o
}

func (o PipePlacementConstraintArrayOutput) Index(i pulumi.IntInput) PipePlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipePlacementConstraint {
		return vs[0].([]PipePlacementConstraint)[vs[1].(int)]
	}).(PipePlacementConstraintOutput)
}

type PipePlacementStrategy struct {
	Field *string                    `pulumi:"field"`
	Type  *PipePlacementStrategyType `pulumi:"type"`
}

// PipePlacementStrategyInput is an input type that accepts PipePlacementStrategyArgs and PipePlacementStrategyOutput values.
// You can construct a concrete instance of `PipePlacementStrategyInput` via:
//
//	PipePlacementStrategyArgs{...}
type PipePlacementStrategyInput interface {
	pulumi.Input

	ToPipePlacementStrategyOutput() PipePlacementStrategyOutput
	ToPipePlacementStrategyOutputWithContext(context.Context) PipePlacementStrategyOutput
}

type PipePlacementStrategyArgs struct {
	Field pulumi.StringPtrInput             `pulumi:"field"`
	Type  PipePlacementStrategyTypePtrInput `pulumi:"type"`
}

func (PipePlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementStrategy)(nil)).Elem()
}

func (i PipePlacementStrategyArgs) ToPipePlacementStrategyOutput() PipePlacementStrategyOutput {
	return i.ToPipePlacementStrategyOutputWithContext(context.Background())
}

func (i PipePlacementStrategyArgs) ToPipePlacementStrategyOutputWithContext(ctx context.Context) PipePlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipePlacementStrategyOutput)
}

// PipePlacementStrategyArrayInput is an input type that accepts PipePlacementStrategyArray and PipePlacementStrategyArrayOutput values.
// You can construct a concrete instance of `PipePlacementStrategyArrayInput` via:
//
//	PipePlacementStrategyArray{ PipePlacementStrategyArgs{...} }
type PipePlacementStrategyArrayInput interface {
	pulumi.Input

	ToPipePlacementStrategyArrayOutput() PipePlacementStrategyArrayOutput
	ToPipePlacementStrategyArrayOutputWithContext(context.Context) PipePlacementStrategyArrayOutput
}

type PipePlacementStrategyArray []PipePlacementStrategyInput

func (PipePlacementStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipePlacementStrategy)(nil)).Elem()
}

func (i PipePlacementStrategyArray) ToPipePlacementStrategyArrayOutput() PipePlacementStrategyArrayOutput {
	return i.ToPipePlacementStrategyArrayOutputWithContext(context.Background())
}

func (i PipePlacementStrategyArray) ToPipePlacementStrategyArrayOutputWithContext(ctx context.Context) PipePlacementStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipePlacementStrategyArrayOutput)
}

type PipePlacementStrategyOutput struct{ *pulumi.OutputState }

func (PipePlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipePlacementStrategy)(nil)).Elem()
}

func (o PipePlacementStrategyOutput) ToPipePlacementStrategyOutput() PipePlacementStrategyOutput {
	return o
}

func (o PipePlacementStrategyOutput) ToPipePlacementStrategyOutputWithContext(ctx context.Context) PipePlacementStrategyOutput {
	return o
}

func (o PipePlacementStrategyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipePlacementStrategy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o PipePlacementStrategyOutput) Type() PipePlacementStrategyTypePtrOutput {
	return o.ApplyT(func(v PipePlacementStrategy) *PipePlacementStrategyType { return v.Type }).(PipePlacementStrategyTypePtrOutput)
}

type PipePlacementStrategyArrayOutput struct{ *pulumi.OutputState }

func (PipePlacementStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipePlacementStrategy)(nil)).Elem()
}

func (o PipePlacementStrategyArrayOutput) ToPipePlacementStrategyArrayOutput() PipePlacementStrategyArrayOutput {
	return o
}

func (o PipePlacementStrategyArrayOutput) ToPipePlacementStrategyArrayOutputWithContext(ctx context.Context) PipePlacementStrategyArrayOutput {
	return o
}

func (o PipePlacementStrategyArrayOutput) Index(i pulumi.IntInput) PipePlacementStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipePlacementStrategy {
		return vs[0].([]PipePlacementStrategy)[vs[1].(int)]
	}).(PipePlacementStrategyOutput)
}

type PipeQueryStringParametersMap struct {
}

// PipeQueryStringParametersMapInput is an input type that accepts PipeQueryStringParametersMap and PipeQueryStringParametersMapOutput values.
// You can construct a concrete instance of `PipeQueryStringParametersMapInput` via:
//
//	PipeQueryStringParametersMap{ "key": PipeQueryStringParametersArgs{...} }
type PipeQueryStringParametersMapInput interface {
	pulumi.Input

	ToPipeQueryStringParametersMapOutput() PipeQueryStringParametersMapOutput
	ToPipeQueryStringParametersMapOutputWithContext(context.Context) PipeQueryStringParametersMapOutput
}

type PipeQueryStringParametersMapArgs struct {
}

func (PipeQueryStringParametersMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeQueryStringParametersMap)(nil)).Elem()
}

func (i PipeQueryStringParametersMapArgs) ToPipeQueryStringParametersMapOutput() PipeQueryStringParametersMapOutput {
	return i.ToPipeQueryStringParametersMapOutputWithContext(context.Background())
}

func (i PipeQueryStringParametersMapArgs) ToPipeQueryStringParametersMapOutputWithContext(ctx context.Context) PipeQueryStringParametersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeQueryStringParametersMapOutput)
}

func (i PipeQueryStringParametersMapArgs) ToPipeQueryStringParametersMapPtrOutput() PipeQueryStringParametersMapPtrOutput {
	return i.ToPipeQueryStringParametersMapPtrOutputWithContext(context.Background())
}

func (i PipeQueryStringParametersMapArgs) ToPipeQueryStringParametersMapPtrOutputWithContext(ctx context.Context) PipeQueryStringParametersMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeQueryStringParametersMapOutput).ToPipeQueryStringParametersMapPtrOutputWithContext(ctx)
}

// PipeQueryStringParametersMapPtrInput is an input type that accepts PipeQueryStringParametersMapArgs, PipeQueryStringParametersMapPtr and PipeQueryStringParametersMapPtrOutput values.
// You can construct a concrete instance of `PipeQueryStringParametersMapPtrInput` via:
//
//	        PipeQueryStringParametersMapArgs{...}
//
//	or:
//
//	        nil
type PipeQueryStringParametersMapPtrInput interface {
	pulumi.Input

	ToPipeQueryStringParametersMapPtrOutput() PipeQueryStringParametersMapPtrOutput
	ToPipeQueryStringParametersMapPtrOutputWithContext(context.Context) PipeQueryStringParametersMapPtrOutput
}

type pipeQueryStringParametersMapPtrType PipeQueryStringParametersMapArgs

func PipeQueryStringParametersMapPtr(v *PipeQueryStringParametersMapArgs) PipeQueryStringParametersMapPtrInput {
	return (*pipeQueryStringParametersMapPtrType)(v)
}

func (*pipeQueryStringParametersMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeQueryStringParametersMap)(nil)).Elem()
}

func (i *pipeQueryStringParametersMapPtrType) ToPipeQueryStringParametersMapPtrOutput() PipeQueryStringParametersMapPtrOutput {
	return i.ToPipeQueryStringParametersMapPtrOutputWithContext(context.Background())
}

func (i *pipeQueryStringParametersMapPtrType) ToPipeQueryStringParametersMapPtrOutputWithContext(ctx context.Context) PipeQueryStringParametersMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeQueryStringParametersMapPtrOutput)
}

type PipeQueryStringParametersMapOutput struct{ *pulumi.OutputState }

func (PipeQueryStringParametersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeQueryStringParametersMap)(nil)).Elem()
}

func (o PipeQueryStringParametersMapOutput) ToPipeQueryStringParametersMapOutput() PipeQueryStringParametersMapOutput {
	return o
}

func (o PipeQueryStringParametersMapOutput) ToPipeQueryStringParametersMapOutputWithContext(ctx context.Context) PipeQueryStringParametersMapOutput {
	return o
}

func (o PipeQueryStringParametersMapOutput) ToPipeQueryStringParametersMapPtrOutput() PipeQueryStringParametersMapPtrOutput {
	return o.ToPipeQueryStringParametersMapPtrOutputWithContext(context.Background())
}

func (o PipeQueryStringParametersMapOutput) ToPipeQueryStringParametersMapPtrOutputWithContext(ctx context.Context) PipeQueryStringParametersMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeQueryStringParametersMap) *PipeQueryStringParametersMap {
		return &v
	}).(PipeQueryStringParametersMapPtrOutput)
}

type PipeQueryStringParametersMapPtrOutput struct{ *pulumi.OutputState }

func (PipeQueryStringParametersMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeQueryStringParametersMap)(nil)).Elem()
}

func (o PipeQueryStringParametersMapPtrOutput) ToPipeQueryStringParametersMapPtrOutput() PipeQueryStringParametersMapPtrOutput {
	return o
}

func (o PipeQueryStringParametersMapPtrOutput) ToPipeQueryStringParametersMapPtrOutputWithContext(ctx context.Context) PipeQueryStringParametersMapPtrOutput {
	return o
}

func (o PipeQueryStringParametersMapPtrOutput) Elem() PipeQueryStringParametersMapOutput {
	return o.ApplyT(func(v *PipeQueryStringParametersMap) PipeQueryStringParametersMap {
		if v != nil {
			return *v
		}
		var ret PipeQueryStringParametersMap
		return ret
	}).(PipeQueryStringParametersMapOutput)
}

type PipeS3LogDestination struct {
	BucketName   *string             `pulumi:"bucketName"`
	BucketOwner  *string             `pulumi:"bucketOwner"`
	OutputFormat *PipeS3OutputFormat `pulumi:"outputFormat"`
	Prefix       *string             `pulumi:"prefix"`
}

// PipeS3LogDestinationInput is an input type that accepts PipeS3LogDestinationArgs and PipeS3LogDestinationOutput values.
// You can construct a concrete instance of `PipeS3LogDestinationInput` via:
//
//	PipeS3LogDestinationArgs{...}
type PipeS3LogDestinationInput interface {
	pulumi.Input

	ToPipeS3LogDestinationOutput() PipeS3LogDestinationOutput
	ToPipeS3LogDestinationOutputWithContext(context.Context) PipeS3LogDestinationOutput
}

type PipeS3LogDestinationArgs struct {
	BucketName   pulumi.StringPtrInput      `pulumi:"bucketName"`
	BucketOwner  pulumi.StringPtrInput      `pulumi:"bucketOwner"`
	OutputFormat PipeS3OutputFormatPtrInput `pulumi:"outputFormat"`
	Prefix       pulumi.StringPtrInput      `pulumi:"prefix"`
}

func (PipeS3LogDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeS3LogDestination)(nil)).Elem()
}

func (i PipeS3LogDestinationArgs) ToPipeS3LogDestinationOutput() PipeS3LogDestinationOutput {
	return i.ToPipeS3LogDestinationOutputWithContext(context.Background())
}

func (i PipeS3LogDestinationArgs) ToPipeS3LogDestinationOutputWithContext(ctx context.Context) PipeS3LogDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeS3LogDestinationOutput)
}

func (i PipeS3LogDestinationArgs) ToPipeS3LogDestinationPtrOutput() PipeS3LogDestinationPtrOutput {
	return i.ToPipeS3LogDestinationPtrOutputWithContext(context.Background())
}

func (i PipeS3LogDestinationArgs) ToPipeS3LogDestinationPtrOutputWithContext(ctx context.Context) PipeS3LogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeS3LogDestinationOutput).ToPipeS3LogDestinationPtrOutputWithContext(ctx)
}

// PipeS3LogDestinationPtrInput is an input type that accepts PipeS3LogDestinationArgs, PipeS3LogDestinationPtr and PipeS3LogDestinationPtrOutput values.
// You can construct a concrete instance of `PipeS3LogDestinationPtrInput` via:
//
//	        PipeS3LogDestinationArgs{...}
//
//	or:
//
//	        nil
type PipeS3LogDestinationPtrInput interface {
	pulumi.Input

	ToPipeS3LogDestinationPtrOutput() PipeS3LogDestinationPtrOutput
	ToPipeS3LogDestinationPtrOutputWithContext(context.Context) PipeS3LogDestinationPtrOutput
}

type pipeS3LogDestinationPtrType PipeS3LogDestinationArgs

func PipeS3LogDestinationPtr(v *PipeS3LogDestinationArgs) PipeS3LogDestinationPtrInput {
	return (*pipeS3LogDestinationPtrType)(v)
}

func (*pipeS3LogDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeS3LogDestination)(nil)).Elem()
}

func (i *pipeS3LogDestinationPtrType) ToPipeS3LogDestinationPtrOutput() PipeS3LogDestinationPtrOutput {
	return i.ToPipeS3LogDestinationPtrOutputWithContext(context.Background())
}

func (i *pipeS3LogDestinationPtrType) ToPipeS3LogDestinationPtrOutputWithContext(ctx context.Context) PipeS3LogDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeS3LogDestinationPtrOutput)
}

type PipeS3LogDestinationOutput struct{ *pulumi.OutputState }

func (PipeS3LogDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeS3LogDestination)(nil)).Elem()
}

func (o PipeS3LogDestinationOutput) ToPipeS3LogDestinationOutput() PipeS3LogDestinationOutput {
	return o
}

func (o PipeS3LogDestinationOutput) ToPipeS3LogDestinationOutputWithContext(ctx context.Context) PipeS3LogDestinationOutput {
	return o
}

func (o PipeS3LogDestinationOutput) ToPipeS3LogDestinationPtrOutput() PipeS3LogDestinationPtrOutput {
	return o.ToPipeS3LogDestinationPtrOutputWithContext(context.Background())
}

func (o PipeS3LogDestinationOutput) ToPipeS3LogDestinationPtrOutputWithContext(ctx context.Context) PipeS3LogDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeS3LogDestination) *PipeS3LogDestination {
		return &v
	}).(PipeS3LogDestinationPtrOutput)
}

func (o PipeS3LogDestinationOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeS3LogDestination) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o PipeS3LogDestinationOutput) BucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeS3LogDestination) *string { return v.BucketOwner }).(pulumi.StringPtrOutput)
}

func (o PipeS3LogDestinationOutput) OutputFormat() PipeS3OutputFormatPtrOutput {
	return o.ApplyT(func(v PipeS3LogDestination) *PipeS3OutputFormat { return v.OutputFormat }).(PipeS3OutputFormatPtrOutput)
}

func (o PipeS3LogDestinationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeS3LogDestination) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type PipeS3LogDestinationPtrOutput struct{ *pulumi.OutputState }

func (PipeS3LogDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeS3LogDestination)(nil)).Elem()
}

func (o PipeS3LogDestinationPtrOutput) ToPipeS3LogDestinationPtrOutput() PipeS3LogDestinationPtrOutput {
	return o
}

func (o PipeS3LogDestinationPtrOutput) ToPipeS3LogDestinationPtrOutputWithContext(ctx context.Context) PipeS3LogDestinationPtrOutput {
	return o
}

func (o PipeS3LogDestinationPtrOutput) Elem() PipeS3LogDestinationOutput {
	return o.ApplyT(func(v *PipeS3LogDestination) PipeS3LogDestination {
		if v != nil {
			return *v
		}
		var ret PipeS3LogDestination
		return ret
	}).(PipeS3LogDestinationOutput)
}

func (o PipeS3LogDestinationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeS3LogDestination) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o PipeS3LogDestinationPtrOutput) BucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeS3LogDestination) *string {
		if v == nil {
			return nil
		}
		return v.BucketOwner
	}).(pulumi.StringPtrOutput)
}

func (o PipeS3LogDestinationPtrOutput) OutputFormat() PipeS3OutputFormatPtrOutput {
	return o.ApplyT(func(v *PipeS3LogDestination) *PipeS3OutputFormat {
		if v == nil {
			return nil
		}
		return v.OutputFormat
	}).(PipeS3OutputFormatPtrOutput)
}

func (o PipeS3LogDestinationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeS3LogDestination) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

type PipeSageMakerPipelineParameter struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// PipeSageMakerPipelineParameterInput is an input type that accepts PipeSageMakerPipelineParameterArgs and PipeSageMakerPipelineParameterOutput values.
// You can construct a concrete instance of `PipeSageMakerPipelineParameterInput` via:
//
//	PipeSageMakerPipelineParameterArgs{...}
type PipeSageMakerPipelineParameterInput interface {
	pulumi.Input

	ToPipeSageMakerPipelineParameterOutput() PipeSageMakerPipelineParameterOutput
	ToPipeSageMakerPipelineParameterOutputWithContext(context.Context) PipeSageMakerPipelineParameterOutput
}

type PipeSageMakerPipelineParameterArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipeSageMakerPipelineParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSageMakerPipelineParameter)(nil)).Elem()
}

func (i PipeSageMakerPipelineParameterArgs) ToPipeSageMakerPipelineParameterOutput() PipeSageMakerPipelineParameterOutput {
	return i.ToPipeSageMakerPipelineParameterOutputWithContext(context.Background())
}

func (i PipeSageMakerPipelineParameterArgs) ToPipeSageMakerPipelineParameterOutputWithContext(ctx context.Context) PipeSageMakerPipelineParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSageMakerPipelineParameterOutput)
}

// PipeSageMakerPipelineParameterArrayInput is an input type that accepts PipeSageMakerPipelineParameterArray and PipeSageMakerPipelineParameterArrayOutput values.
// You can construct a concrete instance of `PipeSageMakerPipelineParameterArrayInput` via:
//
//	PipeSageMakerPipelineParameterArray{ PipeSageMakerPipelineParameterArgs{...} }
type PipeSageMakerPipelineParameterArrayInput interface {
	pulumi.Input

	ToPipeSageMakerPipelineParameterArrayOutput() PipeSageMakerPipelineParameterArrayOutput
	ToPipeSageMakerPipelineParameterArrayOutputWithContext(context.Context) PipeSageMakerPipelineParameterArrayOutput
}

type PipeSageMakerPipelineParameterArray []PipeSageMakerPipelineParameterInput

func (PipeSageMakerPipelineParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeSageMakerPipelineParameter)(nil)).Elem()
}

func (i PipeSageMakerPipelineParameterArray) ToPipeSageMakerPipelineParameterArrayOutput() PipeSageMakerPipelineParameterArrayOutput {
	return i.ToPipeSageMakerPipelineParameterArrayOutputWithContext(context.Background())
}

func (i PipeSageMakerPipelineParameterArray) ToPipeSageMakerPipelineParameterArrayOutputWithContext(ctx context.Context) PipeSageMakerPipelineParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSageMakerPipelineParameterArrayOutput)
}

type PipeSageMakerPipelineParameterOutput struct{ *pulumi.OutputState }

func (PipeSageMakerPipelineParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSageMakerPipelineParameter)(nil)).Elem()
}

func (o PipeSageMakerPipelineParameterOutput) ToPipeSageMakerPipelineParameterOutput() PipeSageMakerPipelineParameterOutput {
	return o
}

func (o PipeSageMakerPipelineParameterOutput) ToPipeSageMakerPipelineParameterOutputWithContext(ctx context.Context) PipeSageMakerPipelineParameterOutput {
	return o
}

func (o PipeSageMakerPipelineParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSageMakerPipelineParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o PipeSageMakerPipelineParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSageMakerPipelineParameter) string { return v.Value }).(pulumi.StringOutput)
}

type PipeSageMakerPipelineParameterArrayOutput struct{ *pulumi.OutputState }

func (PipeSageMakerPipelineParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeSageMakerPipelineParameter)(nil)).Elem()
}

func (o PipeSageMakerPipelineParameterArrayOutput) ToPipeSageMakerPipelineParameterArrayOutput() PipeSageMakerPipelineParameterArrayOutput {
	return o
}

func (o PipeSageMakerPipelineParameterArrayOutput) ToPipeSageMakerPipelineParameterArrayOutputWithContext(ctx context.Context) PipeSageMakerPipelineParameterArrayOutput {
	return o
}

func (o PipeSageMakerPipelineParameterArrayOutput) Index(i pulumi.IntInput) PipeSageMakerPipelineParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeSageMakerPipelineParameter {
		return vs[0].([]PipeSageMakerPipelineParameter)[vs[1].(int)]
	}).(PipeSageMakerPipelineParameterOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials0Properties struct {
	// Optional SecretManager ARN which stores the database credentials
	BasicAuth string `pulumi:"basicAuth"`
}

// PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs and PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesInput` via:
//
//	PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs{...}
type PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput
}

type PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs struct {
	// Optional SecretManager ARN which stores the database credentials
	BasicAuth pulumi.StringInput `pulumi:"basicAuth"`
}

func (PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials0Properties)(nil)).Elem()
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput)
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput).ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(ctx)
}

// PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs, PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtr and PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrInput` via:
//
//	        PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput
}

type pipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrType PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs

func PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtr(v *PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrInput {
	return (*pipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrType)(v)
}

func (*pipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials0Properties)(nil)).Elem()
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials0Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return o.ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSelfManagedKafkaAccessConfigurationCredentials0Properties) *PipeSelfManagedKafkaAccessConfigurationCredentials0Properties {
		return &v
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput) BasicAuth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSelfManagedKafkaAccessConfigurationCredentials0Properties) string { return v.BasicAuth }).(pulumi.StringOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials0Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput) Elem() PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials0Properties) PipeSelfManagedKafkaAccessConfigurationCredentials0Properties {
		if v != nil {
			return *v
		}
		var ret PipeSelfManagedKafkaAccessConfigurationCredentials0Properties
		return ret
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput) BasicAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials0Properties) *string {
		if v == nil {
			return nil
		}
		return &v.BasicAuth
	}).(pulumi.StringPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials1Properties struct {
	// Optional SecretManager ARN which stores the database credentials
	SaslScram512Auth string `pulumi:"saslScram512Auth"`
}

// PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs and PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesInput` via:
//
//	PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs{...}
type PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput
}

type PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs struct {
	// Optional SecretManager ARN which stores the database credentials
	SaslScram512Auth pulumi.StringInput `pulumi:"saslScram512Auth"`
}

func (PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials1Properties)(nil)).Elem()
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput)
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput).ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(ctx)
}

// PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs, PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtr and PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrInput` via:
//
//	        PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput
}

type pipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrType PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs

func PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtr(v *PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrInput {
	return (*pipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrType)(v)
}

func (*pipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials1Properties)(nil)).Elem()
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials1Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return o.ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSelfManagedKafkaAccessConfigurationCredentials1Properties) *PipeSelfManagedKafkaAccessConfigurationCredentials1Properties {
		return &v
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput) SaslScram512Auth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSelfManagedKafkaAccessConfigurationCredentials1Properties) string {
		return v.SaslScram512Auth
	}).(pulumi.StringOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials1Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput) Elem() PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials1Properties) PipeSelfManagedKafkaAccessConfigurationCredentials1Properties {
		if v != nil {
			return *v
		}
		var ret PipeSelfManagedKafkaAccessConfigurationCredentials1Properties
		return ret
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput) SaslScram512Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials1Properties) *string {
		if v == nil {
			return nil
		}
		return &v.SaslScram512Auth
	}).(pulumi.StringPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials2Properties struct {
	// Optional SecretManager ARN which stores the database credentials
	SaslScram256Auth string `pulumi:"saslScram256Auth"`
}

// PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs and PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesInput` via:
//
//	PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs{...}
type PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput
}

type PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs struct {
	// Optional SecretManager ARN which stores the database credentials
	SaslScram256Auth pulumi.StringInput `pulumi:"saslScram256Auth"`
}

func (PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials2Properties)(nil)).Elem()
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput)
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput).ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(ctx)
}

// PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs, PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtr and PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrInput` via:
//
//	        PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput
}

type pipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrType PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs

func PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtr(v *PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrInput {
	return (*pipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrType)(v)
}

func (*pipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials2Properties)(nil)).Elem()
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials2Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return o.ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSelfManagedKafkaAccessConfigurationCredentials2Properties) *PipeSelfManagedKafkaAccessConfigurationCredentials2Properties {
		return &v
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput) SaslScram256Auth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSelfManagedKafkaAccessConfigurationCredentials2Properties) string {
		return v.SaslScram256Auth
	}).(pulumi.StringOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials2Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput) Elem() PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials2Properties) PipeSelfManagedKafkaAccessConfigurationCredentials2Properties {
		if v != nil {
			return *v
		}
		var ret PipeSelfManagedKafkaAccessConfigurationCredentials2Properties
		return ret
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput) SaslScram256Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials2Properties) *string {
		if v == nil {
			return nil
		}
		return &v.SaslScram256Auth
	}).(pulumi.StringPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials3Properties struct {
	// Optional SecretManager ARN which stores the database credentials
	ClientCertificateTlsAuth string `pulumi:"clientCertificateTlsAuth"`
}

// PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs and PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesInput` via:
//
//	PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs{...}
type PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput
}

type PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs struct {
	// Optional SecretManager ARN which stores the database credentials
	ClientCertificateTlsAuth pulumi.StringInput `pulumi:"clientCertificateTlsAuth"`
}

func (PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials3Properties)(nil)).Elem()
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput)
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput).ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(ctx)
}

// PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs, PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtr and PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrInput` via:
//
//	        PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs{...}
//
//	or:
//
//	        nil
type PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput
	ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput
}

type pipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrType PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs

func PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtr(v *PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrInput {
	return (*pipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrType)(v)
}

func (*pipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials3Properties)(nil)).Elem()
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(context.Background())
}

func (i *pipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrType) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials3Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return o.ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSelfManagedKafkaAccessConfigurationCredentials3Properties) *PipeSelfManagedKafkaAccessConfigurationCredentials3Properties {
		return &v
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput) ClientCertificateTlsAuth() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSelfManagedKafkaAccessConfigurationCredentials3Properties) string {
		return v.ClientCertificateTlsAuth
	}).(pulumi.StringOutput)
}

type PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationCredentials3Properties)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput) Elem() PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials3Properties) PipeSelfManagedKafkaAccessConfigurationCredentials3Properties {
		if v != nil {
			return *v
		}
		var ret PipeSelfManagedKafkaAccessConfigurationCredentials3Properties
		return ret
	}).(PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput) ClientCertificateTlsAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationCredentials3Properties) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertificateTlsAuth
	}).(pulumi.StringPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationVpc struct {
	// List of SecurityGroupId.
	SecurityGroup []string `pulumi:"securityGroup"`
	// List of SubnetId.
	Subnets []string `pulumi:"subnets"`
}

// PipeSelfManagedKafkaAccessConfigurationVpcInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationVpcArgs and PipeSelfManagedKafkaAccessConfigurationVpcOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationVpcInput` via:
//
//	PipeSelfManagedKafkaAccessConfigurationVpcArgs{...}
type PipeSelfManagedKafkaAccessConfigurationVpcInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationVpcOutput() PipeSelfManagedKafkaAccessConfigurationVpcOutput
	ToPipeSelfManagedKafkaAccessConfigurationVpcOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationVpcOutput
}

type PipeSelfManagedKafkaAccessConfigurationVpcArgs struct {
	// List of SecurityGroupId.
	SecurityGroup pulumi.StringArrayInput `pulumi:"securityGroup"`
	// List of SubnetId.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (PipeSelfManagedKafkaAccessConfigurationVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationVpc)(nil)).Elem()
}

func (i PipeSelfManagedKafkaAccessConfigurationVpcArgs) ToPipeSelfManagedKafkaAccessConfigurationVpcOutput() PipeSelfManagedKafkaAccessConfigurationVpcOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationVpcOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationVpcArgs) ToPipeSelfManagedKafkaAccessConfigurationVpcOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationVpcOutput)
}

func (i PipeSelfManagedKafkaAccessConfigurationVpcArgs) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutput() PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(context.Background())
}

func (i PipeSelfManagedKafkaAccessConfigurationVpcArgs) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationVpcOutput).ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(ctx)
}

// PipeSelfManagedKafkaAccessConfigurationVpcPtrInput is an input type that accepts PipeSelfManagedKafkaAccessConfigurationVpcArgs, PipeSelfManagedKafkaAccessConfigurationVpcPtr and PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput values.
// You can construct a concrete instance of `PipeSelfManagedKafkaAccessConfigurationVpcPtrInput` via:
//
//	        PipeSelfManagedKafkaAccessConfigurationVpcArgs{...}
//
//	or:
//
//	        nil
type PipeSelfManagedKafkaAccessConfigurationVpcPtrInput interface {
	pulumi.Input

	ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutput() PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput
	ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(context.Context) PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput
}

type pipeSelfManagedKafkaAccessConfigurationVpcPtrType PipeSelfManagedKafkaAccessConfigurationVpcArgs

func PipeSelfManagedKafkaAccessConfigurationVpcPtr(v *PipeSelfManagedKafkaAccessConfigurationVpcArgs) PipeSelfManagedKafkaAccessConfigurationVpcPtrInput {
	return (*pipeSelfManagedKafkaAccessConfigurationVpcPtrType)(v)
}

func (*pipeSelfManagedKafkaAccessConfigurationVpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationVpc)(nil)).Elem()
}

func (i *pipeSelfManagedKafkaAccessConfigurationVpcPtrType) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutput() PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return i.ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(context.Background())
}

func (i *pipeSelfManagedKafkaAccessConfigurationVpcPtrType) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput)
}

type PipeSelfManagedKafkaAccessConfigurationVpcOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationVpc)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationVpcOutput) ToPipeSelfManagedKafkaAccessConfigurationVpcOutput() PipeSelfManagedKafkaAccessConfigurationVpcOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationVpcOutput) ToPipeSelfManagedKafkaAccessConfigurationVpcOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationVpcOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationVpcOutput) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutput() PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return o.ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(context.Background())
}

func (o PipeSelfManagedKafkaAccessConfigurationVpcOutput) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSelfManagedKafkaAccessConfigurationVpc) *PipeSelfManagedKafkaAccessConfigurationVpc {
		return &v
	}).(PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput)
}

// List of SecurityGroupId.
func (o PipeSelfManagedKafkaAccessConfigurationVpcOutput) SecurityGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeSelfManagedKafkaAccessConfigurationVpc) []string { return v.SecurityGroup }).(pulumi.StringArrayOutput)
}

// List of SubnetId.
func (o PipeSelfManagedKafkaAccessConfigurationVpcOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeSelfManagedKafkaAccessConfigurationVpc) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput struct{ *pulumi.OutputState }

func (PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSelfManagedKafkaAccessConfigurationVpc)(nil)).Elem()
}

func (o PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutput() PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput) ToPipeSelfManagedKafkaAccessConfigurationVpcPtrOutputWithContext(ctx context.Context) PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return o
}

func (o PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput) Elem() PipeSelfManagedKafkaAccessConfigurationVpcOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationVpc) PipeSelfManagedKafkaAccessConfigurationVpc {
		if v != nil {
			return *v
		}
		var ret PipeSelfManagedKafkaAccessConfigurationVpc
		return ret
	}).(PipeSelfManagedKafkaAccessConfigurationVpcOutput)
}

// List of SecurityGroupId.
func (o PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput) SecurityGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationVpc) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroup
	}).(pulumi.StringArrayOutput)
}

// List of SubnetId.
func (o PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeSelfManagedKafkaAccessConfigurationVpc) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type PipeSourceActiveMqBrokerParameters struct {
	BatchSize                      *int                                    `pulumi:"batchSize"`
	Credentials                    PipeMqBrokerAccessCredentialsProperties `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds *int                                    `pulumi:"maximumBatchingWindowInSeconds"`
	QueueName                      string                                  `pulumi:"queueName"`
}

// PipeSourceActiveMqBrokerParametersInput is an input type that accepts PipeSourceActiveMqBrokerParametersArgs and PipeSourceActiveMqBrokerParametersOutput values.
// You can construct a concrete instance of `PipeSourceActiveMqBrokerParametersInput` via:
//
//	PipeSourceActiveMqBrokerParametersArgs{...}
type PipeSourceActiveMqBrokerParametersInput interface {
	pulumi.Input

	ToPipeSourceActiveMqBrokerParametersOutput() PipeSourceActiveMqBrokerParametersOutput
	ToPipeSourceActiveMqBrokerParametersOutputWithContext(context.Context) PipeSourceActiveMqBrokerParametersOutput
}

type PipeSourceActiveMqBrokerParametersArgs struct {
	BatchSize                      pulumi.IntPtrInput                           `pulumi:"batchSize"`
	Credentials                    PipeMqBrokerAccessCredentialsPropertiesInput `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput                           `pulumi:"maximumBatchingWindowInSeconds"`
	QueueName                      pulumi.StringInput                           `pulumi:"queueName"`
}

func (PipeSourceActiveMqBrokerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceActiveMqBrokerParameters)(nil)).Elem()
}

func (i PipeSourceActiveMqBrokerParametersArgs) ToPipeSourceActiveMqBrokerParametersOutput() PipeSourceActiveMqBrokerParametersOutput {
	return i.ToPipeSourceActiveMqBrokerParametersOutputWithContext(context.Background())
}

func (i PipeSourceActiveMqBrokerParametersArgs) ToPipeSourceActiveMqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceActiveMqBrokerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceActiveMqBrokerParametersOutput)
}

func (i PipeSourceActiveMqBrokerParametersArgs) ToPipeSourceActiveMqBrokerParametersPtrOutput() PipeSourceActiveMqBrokerParametersPtrOutput {
	return i.ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceActiveMqBrokerParametersArgs) ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceActiveMqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceActiveMqBrokerParametersOutput).ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(ctx)
}

// PipeSourceActiveMqBrokerParametersPtrInput is an input type that accepts PipeSourceActiveMqBrokerParametersArgs, PipeSourceActiveMqBrokerParametersPtr and PipeSourceActiveMqBrokerParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceActiveMqBrokerParametersPtrInput` via:
//
//	        PipeSourceActiveMqBrokerParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceActiveMqBrokerParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceActiveMqBrokerParametersPtrOutput() PipeSourceActiveMqBrokerParametersPtrOutput
	ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(context.Context) PipeSourceActiveMqBrokerParametersPtrOutput
}

type pipeSourceActiveMqBrokerParametersPtrType PipeSourceActiveMqBrokerParametersArgs

func PipeSourceActiveMqBrokerParametersPtr(v *PipeSourceActiveMqBrokerParametersArgs) PipeSourceActiveMqBrokerParametersPtrInput {
	return (*pipeSourceActiveMqBrokerParametersPtrType)(v)
}

func (*pipeSourceActiveMqBrokerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceActiveMqBrokerParameters)(nil)).Elem()
}

func (i *pipeSourceActiveMqBrokerParametersPtrType) ToPipeSourceActiveMqBrokerParametersPtrOutput() PipeSourceActiveMqBrokerParametersPtrOutput {
	return i.ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceActiveMqBrokerParametersPtrType) ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceActiveMqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceActiveMqBrokerParametersPtrOutput)
}

type PipeSourceActiveMqBrokerParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceActiveMqBrokerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceActiveMqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceActiveMqBrokerParametersOutput) ToPipeSourceActiveMqBrokerParametersOutput() PipeSourceActiveMqBrokerParametersOutput {
	return o
}

func (o PipeSourceActiveMqBrokerParametersOutput) ToPipeSourceActiveMqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceActiveMqBrokerParametersOutput {
	return o
}

func (o PipeSourceActiveMqBrokerParametersOutput) ToPipeSourceActiveMqBrokerParametersPtrOutput() PipeSourceActiveMqBrokerParametersPtrOutput {
	return o.ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceActiveMqBrokerParametersOutput) ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceActiveMqBrokerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceActiveMqBrokerParameters) *PipeSourceActiveMqBrokerParameters {
		return &v
	}).(PipeSourceActiveMqBrokerParametersPtrOutput)
}

func (o PipeSourceActiveMqBrokerParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceActiveMqBrokerParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o PipeSourceActiveMqBrokerParametersOutput) Credentials() PipeMqBrokerAccessCredentialsPropertiesOutput {
	return o.ApplyT(func(v PipeSourceActiveMqBrokerParameters) PipeMqBrokerAccessCredentialsProperties {
		return v.Credentials
	}).(PipeMqBrokerAccessCredentialsPropertiesOutput)
}

func (o PipeSourceActiveMqBrokerParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceActiveMqBrokerParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

func (o PipeSourceActiveMqBrokerParametersOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceActiveMqBrokerParameters) string { return v.QueueName }).(pulumi.StringOutput)
}

type PipeSourceActiveMqBrokerParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceActiveMqBrokerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceActiveMqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceActiveMqBrokerParametersPtrOutput) ToPipeSourceActiveMqBrokerParametersPtrOutput() PipeSourceActiveMqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceActiveMqBrokerParametersPtrOutput) ToPipeSourceActiveMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceActiveMqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceActiveMqBrokerParametersPtrOutput) Elem() PipeSourceActiveMqBrokerParametersOutput {
	return o.ApplyT(func(v *PipeSourceActiveMqBrokerParameters) PipeSourceActiveMqBrokerParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceActiveMqBrokerParameters
		return ret
	}).(PipeSourceActiveMqBrokerParametersOutput)
}

func (o PipeSourceActiveMqBrokerParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceActiveMqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceActiveMqBrokerParametersPtrOutput) Credentials() PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return o.ApplyT(func(v *PipeSourceActiveMqBrokerParameters) *PipeMqBrokerAccessCredentialsProperties {
		if v == nil {
			return nil
		}
		return &v.Credentials
	}).(PipeMqBrokerAccessCredentialsPropertiesPtrOutput)
}

func (o PipeSourceActiveMqBrokerParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceActiveMqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceActiveMqBrokerParametersPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceActiveMqBrokerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

type PipeSourceDynamoDbStreamParameters struct {
	BatchSize                      *int                                  `pulumi:"batchSize"`
	DeadLetterConfig               *PipeDeadLetterConfig                 `pulumi:"deadLetterConfig"`
	MaximumBatchingWindowInSeconds *int                                  `pulumi:"maximumBatchingWindowInSeconds"`
	MaximumRecordAgeInSeconds      *int                                  `pulumi:"maximumRecordAgeInSeconds"`
	MaximumRetryAttempts           *int                                  `pulumi:"maximumRetryAttempts"`
	OnPartialBatchItemFailure      *PipeOnPartialBatchItemFailureStreams `pulumi:"onPartialBatchItemFailure"`
	ParallelizationFactor          *int                                  `pulumi:"parallelizationFactor"`
	StartingPosition               PipeDynamoDbStreamStartPosition       `pulumi:"startingPosition"`
}

// PipeSourceDynamoDbStreamParametersInput is an input type that accepts PipeSourceDynamoDbStreamParametersArgs and PipeSourceDynamoDbStreamParametersOutput values.
// You can construct a concrete instance of `PipeSourceDynamoDbStreamParametersInput` via:
//
//	PipeSourceDynamoDbStreamParametersArgs{...}
type PipeSourceDynamoDbStreamParametersInput interface {
	pulumi.Input

	ToPipeSourceDynamoDbStreamParametersOutput() PipeSourceDynamoDbStreamParametersOutput
	ToPipeSourceDynamoDbStreamParametersOutputWithContext(context.Context) PipeSourceDynamoDbStreamParametersOutput
}

type PipeSourceDynamoDbStreamParametersArgs struct {
	BatchSize                      pulumi.IntPtrInput                           `pulumi:"batchSize"`
	DeadLetterConfig               PipeDeadLetterConfigPtrInput                 `pulumi:"deadLetterConfig"`
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput                           `pulumi:"maximumBatchingWindowInSeconds"`
	MaximumRecordAgeInSeconds      pulumi.IntPtrInput                           `pulumi:"maximumRecordAgeInSeconds"`
	MaximumRetryAttempts           pulumi.IntPtrInput                           `pulumi:"maximumRetryAttempts"`
	OnPartialBatchItemFailure      PipeOnPartialBatchItemFailureStreamsPtrInput `pulumi:"onPartialBatchItemFailure"`
	ParallelizationFactor          pulumi.IntPtrInput                           `pulumi:"parallelizationFactor"`
	StartingPosition               PipeDynamoDbStreamStartPositionInput         `pulumi:"startingPosition"`
}

func (PipeSourceDynamoDbStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceDynamoDbStreamParameters)(nil)).Elem()
}

func (i PipeSourceDynamoDbStreamParametersArgs) ToPipeSourceDynamoDbStreamParametersOutput() PipeSourceDynamoDbStreamParametersOutput {
	return i.ToPipeSourceDynamoDbStreamParametersOutputWithContext(context.Background())
}

func (i PipeSourceDynamoDbStreamParametersArgs) ToPipeSourceDynamoDbStreamParametersOutputWithContext(ctx context.Context) PipeSourceDynamoDbStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceDynamoDbStreamParametersOutput)
}

func (i PipeSourceDynamoDbStreamParametersArgs) ToPipeSourceDynamoDbStreamParametersPtrOutput() PipeSourceDynamoDbStreamParametersPtrOutput {
	return i.ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceDynamoDbStreamParametersArgs) ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceDynamoDbStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceDynamoDbStreamParametersOutput).ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(ctx)
}

// PipeSourceDynamoDbStreamParametersPtrInput is an input type that accepts PipeSourceDynamoDbStreamParametersArgs, PipeSourceDynamoDbStreamParametersPtr and PipeSourceDynamoDbStreamParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceDynamoDbStreamParametersPtrInput` via:
//
//	        PipeSourceDynamoDbStreamParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceDynamoDbStreamParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceDynamoDbStreamParametersPtrOutput() PipeSourceDynamoDbStreamParametersPtrOutput
	ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(context.Context) PipeSourceDynamoDbStreamParametersPtrOutput
}

type pipeSourceDynamoDbStreamParametersPtrType PipeSourceDynamoDbStreamParametersArgs

func PipeSourceDynamoDbStreamParametersPtr(v *PipeSourceDynamoDbStreamParametersArgs) PipeSourceDynamoDbStreamParametersPtrInput {
	return (*pipeSourceDynamoDbStreamParametersPtrType)(v)
}

func (*pipeSourceDynamoDbStreamParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceDynamoDbStreamParameters)(nil)).Elem()
}

func (i *pipeSourceDynamoDbStreamParametersPtrType) ToPipeSourceDynamoDbStreamParametersPtrOutput() PipeSourceDynamoDbStreamParametersPtrOutput {
	return i.ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceDynamoDbStreamParametersPtrType) ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceDynamoDbStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceDynamoDbStreamParametersPtrOutput)
}

type PipeSourceDynamoDbStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceDynamoDbStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceDynamoDbStreamParameters)(nil)).Elem()
}

func (o PipeSourceDynamoDbStreamParametersOutput) ToPipeSourceDynamoDbStreamParametersOutput() PipeSourceDynamoDbStreamParametersOutput {
	return o
}

func (o PipeSourceDynamoDbStreamParametersOutput) ToPipeSourceDynamoDbStreamParametersOutputWithContext(ctx context.Context) PipeSourceDynamoDbStreamParametersOutput {
	return o
}

func (o PipeSourceDynamoDbStreamParametersOutput) ToPipeSourceDynamoDbStreamParametersPtrOutput() PipeSourceDynamoDbStreamParametersPtrOutput {
	return o.ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceDynamoDbStreamParametersOutput) ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceDynamoDbStreamParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceDynamoDbStreamParameters) *PipeSourceDynamoDbStreamParameters {
		return &v
	}).(PipeSourceDynamoDbStreamParametersPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) DeadLetterConfig() PipeDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) *PipeDeadLetterConfig { return v.DeadLetterConfig }).(PipeDeadLetterConfigPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) *int { return v.MaximumRecordAgeInSeconds }).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) *int { return v.MaximumRetryAttempts }).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) OnPartialBatchItemFailure() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) *PipeOnPartialBatchItemFailureStreams {
		return v.OnPartialBatchItemFailure
	}).(PipeOnPartialBatchItemFailureStreamsPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) *int { return v.ParallelizationFactor }).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersOutput) StartingPosition() PipeDynamoDbStreamStartPositionOutput {
	return o.ApplyT(func(v PipeSourceDynamoDbStreamParameters) PipeDynamoDbStreamStartPosition { return v.StartingPosition }).(PipeDynamoDbStreamStartPositionOutput)
}

type PipeSourceDynamoDbStreamParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceDynamoDbStreamParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceDynamoDbStreamParameters)(nil)).Elem()
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) ToPipeSourceDynamoDbStreamParametersPtrOutput() PipeSourceDynamoDbStreamParametersPtrOutput {
	return o
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) ToPipeSourceDynamoDbStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceDynamoDbStreamParametersPtrOutput {
	return o
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) Elem() PipeSourceDynamoDbStreamParametersOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) PipeSourceDynamoDbStreamParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceDynamoDbStreamParameters
		return ret
	}).(PipeSourceDynamoDbStreamParametersOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) DeadLetterConfig() PipeDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *PipeDeadLetterConfig {
		if v == nil {
			return nil
		}
		return v.DeadLetterConfig
	}).(PipeDeadLetterConfigPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRecordAgeInSeconds
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRetryAttempts
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) OnPartialBatchItemFailure() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *PipeOnPartialBatchItemFailureStreams {
		if v == nil {
			return nil
		}
		return v.OnPartialBatchItemFailure
	}).(PipeOnPartialBatchItemFailureStreamsPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.ParallelizationFactor
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceDynamoDbStreamParametersPtrOutput) StartingPosition() PipeDynamoDbStreamStartPositionPtrOutput {
	return o.ApplyT(func(v *PipeSourceDynamoDbStreamParameters) *PipeDynamoDbStreamStartPosition {
		if v == nil {
			return nil
		}
		return &v.StartingPosition
	}).(PipeDynamoDbStreamStartPositionPtrOutput)
}

type PipeSourceKinesisStreamParameters struct {
	BatchSize                      *int                                  `pulumi:"batchSize"`
	DeadLetterConfig               *PipeDeadLetterConfig                 `pulumi:"deadLetterConfig"`
	MaximumBatchingWindowInSeconds *int                                  `pulumi:"maximumBatchingWindowInSeconds"`
	MaximumRecordAgeInSeconds      *int                                  `pulumi:"maximumRecordAgeInSeconds"`
	MaximumRetryAttempts           *int                                  `pulumi:"maximumRetryAttempts"`
	OnPartialBatchItemFailure      *PipeOnPartialBatchItemFailureStreams `pulumi:"onPartialBatchItemFailure"`
	ParallelizationFactor          *int                                  `pulumi:"parallelizationFactor"`
	StartingPosition               PipeKinesisStreamStartPosition        `pulumi:"startingPosition"`
	StartingPositionTimestamp      *string                               `pulumi:"startingPositionTimestamp"`
}

// PipeSourceKinesisStreamParametersInput is an input type that accepts PipeSourceKinesisStreamParametersArgs and PipeSourceKinesisStreamParametersOutput values.
// You can construct a concrete instance of `PipeSourceKinesisStreamParametersInput` via:
//
//	PipeSourceKinesisStreamParametersArgs{...}
type PipeSourceKinesisStreamParametersInput interface {
	pulumi.Input

	ToPipeSourceKinesisStreamParametersOutput() PipeSourceKinesisStreamParametersOutput
	ToPipeSourceKinesisStreamParametersOutputWithContext(context.Context) PipeSourceKinesisStreamParametersOutput
}

type PipeSourceKinesisStreamParametersArgs struct {
	BatchSize                      pulumi.IntPtrInput                           `pulumi:"batchSize"`
	DeadLetterConfig               PipeDeadLetterConfigPtrInput                 `pulumi:"deadLetterConfig"`
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput                           `pulumi:"maximumBatchingWindowInSeconds"`
	MaximumRecordAgeInSeconds      pulumi.IntPtrInput                           `pulumi:"maximumRecordAgeInSeconds"`
	MaximumRetryAttempts           pulumi.IntPtrInput                           `pulumi:"maximumRetryAttempts"`
	OnPartialBatchItemFailure      PipeOnPartialBatchItemFailureStreamsPtrInput `pulumi:"onPartialBatchItemFailure"`
	ParallelizationFactor          pulumi.IntPtrInput                           `pulumi:"parallelizationFactor"`
	StartingPosition               PipeKinesisStreamStartPositionInput          `pulumi:"startingPosition"`
	StartingPositionTimestamp      pulumi.StringPtrInput                        `pulumi:"startingPositionTimestamp"`
}

func (PipeSourceKinesisStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceKinesisStreamParameters)(nil)).Elem()
}

func (i PipeSourceKinesisStreamParametersArgs) ToPipeSourceKinesisStreamParametersOutput() PipeSourceKinesisStreamParametersOutput {
	return i.ToPipeSourceKinesisStreamParametersOutputWithContext(context.Background())
}

func (i PipeSourceKinesisStreamParametersArgs) ToPipeSourceKinesisStreamParametersOutputWithContext(ctx context.Context) PipeSourceKinesisStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceKinesisStreamParametersOutput)
}

func (i PipeSourceKinesisStreamParametersArgs) ToPipeSourceKinesisStreamParametersPtrOutput() PipeSourceKinesisStreamParametersPtrOutput {
	return i.ToPipeSourceKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceKinesisStreamParametersArgs) ToPipeSourceKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceKinesisStreamParametersOutput).ToPipeSourceKinesisStreamParametersPtrOutputWithContext(ctx)
}

// PipeSourceKinesisStreamParametersPtrInput is an input type that accepts PipeSourceKinesisStreamParametersArgs, PipeSourceKinesisStreamParametersPtr and PipeSourceKinesisStreamParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceKinesisStreamParametersPtrInput` via:
//
//	        PipeSourceKinesisStreamParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceKinesisStreamParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceKinesisStreamParametersPtrOutput() PipeSourceKinesisStreamParametersPtrOutput
	ToPipeSourceKinesisStreamParametersPtrOutputWithContext(context.Context) PipeSourceKinesisStreamParametersPtrOutput
}

type pipeSourceKinesisStreamParametersPtrType PipeSourceKinesisStreamParametersArgs

func PipeSourceKinesisStreamParametersPtr(v *PipeSourceKinesisStreamParametersArgs) PipeSourceKinesisStreamParametersPtrInput {
	return (*pipeSourceKinesisStreamParametersPtrType)(v)
}

func (*pipeSourceKinesisStreamParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceKinesisStreamParameters)(nil)).Elem()
}

func (i *pipeSourceKinesisStreamParametersPtrType) ToPipeSourceKinesisStreamParametersPtrOutput() PipeSourceKinesisStreamParametersPtrOutput {
	return i.ToPipeSourceKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceKinesisStreamParametersPtrType) ToPipeSourceKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceKinesisStreamParametersPtrOutput)
}

type PipeSourceKinesisStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceKinesisStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceKinesisStreamParameters)(nil)).Elem()
}

func (o PipeSourceKinesisStreamParametersOutput) ToPipeSourceKinesisStreamParametersOutput() PipeSourceKinesisStreamParametersOutput {
	return o
}

func (o PipeSourceKinesisStreamParametersOutput) ToPipeSourceKinesisStreamParametersOutputWithContext(ctx context.Context) PipeSourceKinesisStreamParametersOutput {
	return o
}

func (o PipeSourceKinesisStreamParametersOutput) ToPipeSourceKinesisStreamParametersPtrOutput() PipeSourceKinesisStreamParametersPtrOutput {
	return o.ToPipeSourceKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceKinesisStreamParametersOutput) ToPipeSourceKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceKinesisStreamParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceKinesisStreamParameters) *PipeSourceKinesisStreamParameters {
		return &v
	}).(PipeSourceKinesisStreamParametersPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) DeadLetterConfig() PipeDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *PipeDeadLetterConfig { return v.DeadLetterConfig }).(PipeDeadLetterConfigPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *int { return v.MaximumRecordAgeInSeconds }).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *int { return v.MaximumRetryAttempts }).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) OnPartialBatchItemFailure() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *PipeOnPartialBatchItemFailureStreams {
		return v.OnPartialBatchItemFailure
	}).(PipeOnPartialBatchItemFailureStreamsPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *int { return v.ParallelizationFactor }).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) StartingPosition() PipeKinesisStreamStartPositionOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) PipeKinesisStreamStartPosition { return v.StartingPosition }).(PipeKinesisStreamStartPositionOutput)
}

func (o PipeSourceKinesisStreamParametersOutput) StartingPositionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceKinesisStreamParameters) *string { return v.StartingPositionTimestamp }).(pulumi.StringPtrOutput)
}

type PipeSourceKinesisStreamParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceKinesisStreamParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceKinesisStreamParameters)(nil)).Elem()
}

func (o PipeSourceKinesisStreamParametersPtrOutput) ToPipeSourceKinesisStreamParametersPtrOutput() PipeSourceKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeSourceKinesisStreamParametersPtrOutput) ToPipeSourceKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeSourceKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeSourceKinesisStreamParametersPtrOutput) Elem() PipeSourceKinesisStreamParametersOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) PipeSourceKinesisStreamParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceKinesisStreamParameters
		return ret
	}).(PipeSourceKinesisStreamParametersOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) DeadLetterConfig() PipeDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *PipeDeadLetterConfig {
		if v == nil {
			return nil
		}
		return v.DeadLetterConfig
	}).(PipeDeadLetterConfigPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) MaximumRecordAgeInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRecordAgeInSeconds
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) MaximumRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumRetryAttempts
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) OnPartialBatchItemFailure() PipeOnPartialBatchItemFailureStreamsPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *PipeOnPartialBatchItemFailureStreams {
		if v == nil {
			return nil
		}
		return v.OnPartialBatchItemFailure
	}).(PipeOnPartialBatchItemFailureStreamsPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) ParallelizationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *int {
		if v == nil {
			return nil
		}
		return v.ParallelizationFactor
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) StartingPosition() PipeKinesisStreamStartPositionPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *PipeKinesisStreamStartPosition {
		if v == nil {
			return nil
		}
		return &v.StartingPosition
	}).(PipeKinesisStreamStartPositionPtrOutput)
}

func (o PipeSourceKinesisStreamParametersPtrOutput) StartingPositionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceKinesisStreamParameters) *string {
		if v == nil {
			return nil
		}
		return v.StartingPositionTimestamp
	}).(pulumi.StringPtrOutput)
}

type PipeSourceManagedStreamingKafkaParameters struct {
	BatchSize                      *int                  `pulumi:"batchSize"`
	ConsumerGroupId                *string               `pulumi:"consumerGroupId"`
	Credentials                    interface{}           `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds *int                  `pulumi:"maximumBatchingWindowInSeconds"`
	StartingPosition               *PipeMskStartPosition `pulumi:"startingPosition"`
	TopicName                      string                `pulumi:"topicName"`
}

// PipeSourceManagedStreamingKafkaParametersInput is an input type that accepts PipeSourceManagedStreamingKafkaParametersArgs and PipeSourceManagedStreamingKafkaParametersOutput values.
// You can construct a concrete instance of `PipeSourceManagedStreamingKafkaParametersInput` via:
//
//	PipeSourceManagedStreamingKafkaParametersArgs{...}
type PipeSourceManagedStreamingKafkaParametersInput interface {
	pulumi.Input

	ToPipeSourceManagedStreamingKafkaParametersOutput() PipeSourceManagedStreamingKafkaParametersOutput
	ToPipeSourceManagedStreamingKafkaParametersOutputWithContext(context.Context) PipeSourceManagedStreamingKafkaParametersOutput
}

type PipeSourceManagedStreamingKafkaParametersArgs struct {
	BatchSize                      pulumi.IntPtrInput           `pulumi:"batchSize"`
	ConsumerGroupId                pulumi.StringPtrInput        `pulumi:"consumerGroupId"`
	Credentials                    pulumi.Input                 `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput           `pulumi:"maximumBatchingWindowInSeconds"`
	StartingPosition               PipeMskStartPositionPtrInput `pulumi:"startingPosition"`
	TopicName                      pulumi.StringInput           `pulumi:"topicName"`
}

func (PipeSourceManagedStreamingKafkaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceManagedStreamingKafkaParameters)(nil)).Elem()
}

func (i PipeSourceManagedStreamingKafkaParametersArgs) ToPipeSourceManagedStreamingKafkaParametersOutput() PipeSourceManagedStreamingKafkaParametersOutput {
	return i.ToPipeSourceManagedStreamingKafkaParametersOutputWithContext(context.Background())
}

func (i PipeSourceManagedStreamingKafkaParametersArgs) ToPipeSourceManagedStreamingKafkaParametersOutputWithContext(ctx context.Context) PipeSourceManagedStreamingKafkaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceManagedStreamingKafkaParametersOutput)
}

func (i PipeSourceManagedStreamingKafkaParametersArgs) ToPipeSourceManagedStreamingKafkaParametersPtrOutput() PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return i.ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceManagedStreamingKafkaParametersArgs) ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceManagedStreamingKafkaParametersOutput).ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(ctx)
}

// PipeSourceManagedStreamingKafkaParametersPtrInput is an input type that accepts PipeSourceManagedStreamingKafkaParametersArgs, PipeSourceManagedStreamingKafkaParametersPtr and PipeSourceManagedStreamingKafkaParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceManagedStreamingKafkaParametersPtrInput` via:
//
//	        PipeSourceManagedStreamingKafkaParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceManagedStreamingKafkaParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceManagedStreamingKafkaParametersPtrOutput() PipeSourceManagedStreamingKafkaParametersPtrOutput
	ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(context.Context) PipeSourceManagedStreamingKafkaParametersPtrOutput
}

type pipeSourceManagedStreamingKafkaParametersPtrType PipeSourceManagedStreamingKafkaParametersArgs

func PipeSourceManagedStreamingKafkaParametersPtr(v *PipeSourceManagedStreamingKafkaParametersArgs) PipeSourceManagedStreamingKafkaParametersPtrInput {
	return (*pipeSourceManagedStreamingKafkaParametersPtrType)(v)
}

func (*pipeSourceManagedStreamingKafkaParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceManagedStreamingKafkaParameters)(nil)).Elem()
}

func (i *pipeSourceManagedStreamingKafkaParametersPtrType) ToPipeSourceManagedStreamingKafkaParametersPtrOutput() PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return i.ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceManagedStreamingKafkaParametersPtrType) ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceManagedStreamingKafkaParametersPtrOutput)
}

type PipeSourceManagedStreamingKafkaParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceManagedStreamingKafkaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceManagedStreamingKafkaParameters)(nil)).Elem()
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) ToPipeSourceManagedStreamingKafkaParametersOutput() PipeSourceManagedStreamingKafkaParametersOutput {
	return o
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) ToPipeSourceManagedStreamingKafkaParametersOutputWithContext(ctx context.Context) PipeSourceManagedStreamingKafkaParametersOutput {
	return o
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) ToPipeSourceManagedStreamingKafkaParametersPtrOutput() PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return o.ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceManagedStreamingKafkaParameters) *PipeSourceManagedStreamingKafkaParameters {
		return &v
	}).(PipeSourceManagedStreamingKafkaParametersPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceManagedStreamingKafkaParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceManagedStreamingKafkaParameters) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v PipeSourceManagedStreamingKafkaParameters) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceManagedStreamingKafkaParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) StartingPosition() PipeMskStartPositionPtrOutput {
	return o.ApplyT(func(v PipeSourceManagedStreamingKafkaParameters) *PipeMskStartPosition { return v.StartingPosition }).(PipeMskStartPositionPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceManagedStreamingKafkaParameters) string { return v.TopicName }).(pulumi.StringOutput)
}

type PipeSourceManagedStreamingKafkaParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceManagedStreamingKafkaParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceManagedStreamingKafkaParameters)(nil)).Elem()
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) ToPipeSourceManagedStreamingKafkaParametersPtrOutput() PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) ToPipeSourceManagedStreamingKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) Elem() PipeSourceManagedStreamingKafkaParametersOutput {
	return o.ApplyT(func(v *PipeSourceManagedStreamingKafkaParameters) PipeSourceManagedStreamingKafkaParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceManagedStreamingKafkaParameters
		return ret
	}).(PipeSourceManagedStreamingKafkaParametersOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceManagedStreamingKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceManagedStreamingKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipeSourceManagedStreamingKafkaParameters) interface{} {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(pulumi.AnyOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceManagedStreamingKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) StartingPosition() PipeMskStartPositionPtrOutput {
	return o.ApplyT(func(v *PipeSourceManagedStreamingKafkaParameters) *PipeMskStartPosition {
		if v == nil {
			return nil
		}
		return v.StartingPosition
	}).(PipeMskStartPositionPtrOutput)
}

func (o PipeSourceManagedStreamingKafkaParametersPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceManagedStreamingKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

type PipeSourceParameters struct {
	ActiveMqBrokerParameters        *PipeSourceActiveMqBrokerParameters        `pulumi:"activeMqBrokerParameters"`
	DynamoDbStreamParameters        *PipeSourceDynamoDbStreamParameters        `pulumi:"dynamoDbStreamParameters"`
	FilterCriteria                  *PipeFilterCriteria                        `pulumi:"filterCriteria"`
	KinesisStreamParameters         *PipeSourceKinesisStreamParameters         `pulumi:"kinesisStreamParameters"`
	ManagedStreamingKafkaParameters *PipeSourceManagedStreamingKafkaParameters `pulumi:"managedStreamingKafkaParameters"`
	RabbitMqBrokerParameters        *PipeSourceRabbitMqBrokerParameters        `pulumi:"rabbitMqBrokerParameters"`
	SelfManagedKafkaParameters      *PipeSourceSelfManagedKafkaParameters      `pulumi:"selfManagedKafkaParameters"`
	SqsQueueParameters              *PipeSourceSqsQueueParameters              `pulumi:"sqsQueueParameters"`
}

// PipeSourceParametersInput is an input type that accepts PipeSourceParametersArgs and PipeSourceParametersOutput values.
// You can construct a concrete instance of `PipeSourceParametersInput` via:
//
//	PipeSourceParametersArgs{...}
type PipeSourceParametersInput interface {
	pulumi.Input

	ToPipeSourceParametersOutput() PipeSourceParametersOutput
	ToPipeSourceParametersOutputWithContext(context.Context) PipeSourceParametersOutput
}

type PipeSourceParametersArgs struct {
	ActiveMqBrokerParameters        PipeSourceActiveMqBrokerParametersPtrInput        `pulumi:"activeMqBrokerParameters"`
	DynamoDbStreamParameters        PipeSourceDynamoDbStreamParametersPtrInput        `pulumi:"dynamoDbStreamParameters"`
	FilterCriteria                  PipeFilterCriteriaPtrInput                        `pulumi:"filterCriteria"`
	KinesisStreamParameters         PipeSourceKinesisStreamParametersPtrInput         `pulumi:"kinesisStreamParameters"`
	ManagedStreamingKafkaParameters PipeSourceManagedStreamingKafkaParametersPtrInput `pulumi:"managedStreamingKafkaParameters"`
	RabbitMqBrokerParameters        PipeSourceRabbitMqBrokerParametersPtrInput        `pulumi:"rabbitMqBrokerParameters"`
	SelfManagedKafkaParameters      PipeSourceSelfManagedKafkaParametersPtrInput      `pulumi:"selfManagedKafkaParameters"`
	SqsQueueParameters              PipeSourceSqsQueueParametersPtrInput              `pulumi:"sqsQueueParameters"`
}

func (PipeSourceParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return i.ToPipeSourceParametersOutputWithContext(context.Background())
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersOutput)
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return i.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceParametersArgs) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersOutput).ToPipeSourceParametersPtrOutputWithContext(ctx)
}

// PipeSourceParametersPtrInput is an input type that accepts PipeSourceParametersArgs, PipeSourceParametersPtr and PipeSourceParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceParametersPtrInput` via:
//
//	        PipeSourceParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput
	ToPipeSourceParametersPtrOutputWithContext(context.Context) PipeSourceParametersPtrOutput
}

type pipeSourceParametersPtrType PipeSourceParametersArgs

func PipeSourceParametersPtr(v *PipeSourceParametersArgs) PipeSourceParametersPtrInput {
	return (*pipeSourceParametersPtrType)(v)
}

func (*pipeSourceParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParameters)(nil)).Elem()
}

func (i *pipeSourceParametersPtrType) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return i.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceParametersPtrType) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceParametersPtrOutput)
}

type PipeSourceParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceParameters)(nil)).Elem()
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutput() PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersOutputWithContext(ctx context.Context) PipeSourceParametersOutput {
	return o
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return o.ToPipeSourceParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceParametersOutput) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceParameters) *PipeSourceParameters {
		return &v
	}).(PipeSourceParametersPtrOutput)
}

func (o PipeSourceParametersOutput) ActiveMqBrokerParameters() PipeSourceActiveMqBrokerParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceActiveMqBrokerParameters { return v.ActiveMqBrokerParameters }).(PipeSourceActiveMqBrokerParametersPtrOutput)
}

func (o PipeSourceParametersOutput) DynamoDbStreamParameters() PipeSourceDynamoDbStreamParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceDynamoDbStreamParameters { return v.DynamoDbStreamParameters }).(PipeSourceDynamoDbStreamParametersPtrOutput)
}

func (o PipeSourceParametersOutput) FilterCriteria() PipeFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeFilterCriteria { return v.FilterCriteria }).(PipeFilterCriteriaPtrOutput)
}

func (o PipeSourceParametersOutput) KinesisStreamParameters() PipeSourceKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceKinesisStreamParameters { return v.KinesisStreamParameters }).(PipeSourceKinesisStreamParametersPtrOutput)
}

func (o PipeSourceParametersOutput) ManagedStreamingKafkaParameters() PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceManagedStreamingKafkaParameters {
		return v.ManagedStreamingKafkaParameters
	}).(PipeSourceManagedStreamingKafkaParametersPtrOutput)
}

func (o PipeSourceParametersOutput) RabbitMqBrokerParameters() PipeSourceRabbitMqBrokerParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceRabbitMqBrokerParameters { return v.RabbitMqBrokerParameters }).(PipeSourceRabbitMqBrokerParametersPtrOutput)
}

func (o PipeSourceParametersOutput) SelfManagedKafkaParameters() PipeSourceSelfManagedKafkaParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceSelfManagedKafkaParameters {
		return v.SelfManagedKafkaParameters
	}).(PipeSourceSelfManagedKafkaParametersPtrOutput)
}

func (o PipeSourceParametersOutput) SqsQueueParameters() PipeSourceSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v PipeSourceParameters) *PipeSourceSqsQueueParameters { return v.SqsQueueParameters }).(PipeSourceSqsQueueParametersPtrOutput)
}

type PipeSourceParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceParameters)(nil)).Elem()
}

func (o PipeSourceParametersPtrOutput) ToPipeSourceParametersPtrOutput() PipeSourceParametersPtrOutput {
	return o
}

func (o PipeSourceParametersPtrOutput) ToPipeSourceParametersPtrOutputWithContext(ctx context.Context) PipeSourceParametersPtrOutput {
	return o
}

func (o PipeSourceParametersPtrOutput) Elem() PipeSourceParametersOutput {
	return o.ApplyT(func(v *PipeSourceParameters) PipeSourceParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceParameters
		return ret
	}).(PipeSourceParametersOutput)
}

func (o PipeSourceParametersPtrOutput) ActiveMqBrokerParameters() PipeSourceActiveMqBrokerParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceActiveMqBrokerParameters {
		if v == nil {
			return nil
		}
		return v.ActiveMqBrokerParameters
	}).(PipeSourceActiveMqBrokerParametersPtrOutput)
}

func (o PipeSourceParametersPtrOutput) DynamoDbStreamParameters() PipeSourceDynamoDbStreamParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceDynamoDbStreamParameters {
		if v == nil {
			return nil
		}
		return v.DynamoDbStreamParameters
	}).(PipeSourceDynamoDbStreamParametersPtrOutput)
}

func (o PipeSourceParametersPtrOutput) FilterCriteria() PipeFilterCriteriaPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeFilterCriteria {
		if v == nil {
			return nil
		}
		return v.FilterCriteria
	}).(PipeFilterCriteriaPtrOutput)
}

func (o PipeSourceParametersPtrOutput) KinesisStreamParameters() PipeSourceKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceKinesisStreamParameters {
		if v == nil {
			return nil
		}
		return v.KinesisStreamParameters
	}).(PipeSourceKinesisStreamParametersPtrOutput)
}

func (o PipeSourceParametersPtrOutput) ManagedStreamingKafkaParameters() PipeSourceManagedStreamingKafkaParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceManagedStreamingKafkaParameters {
		if v == nil {
			return nil
		}
		return v.ManagedStreamingKafkaParameters
	}).(PipeSourceManagedStreamingKafkaParametersPtrOutput)
}

func (o PipeSourceParametersPtrOutput) RabbitMqBrokerParameters() PipeSourceRabbitMqBrokerParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceRabbitMqBrokerParameters {
		if v == nil {
			return nil
		}
		return v.RabbitMqBrokerParameters
	}).(PipeSourceRabbitMqBrokerParametersPtrOutput)
}

func (o PipeSourceParametersPtrOutput) SelfManagedKafkaParameters() PipeSourceSelfManagedKafkaParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceSelfManagedKafkaParameters {
		if v == nil {
			return nil
		}
		return v.SelfManagedKafkaParameters
	}).(PipeSourceSelfManagedKafkaParametersPtrOutput)
}

func (o PipeSourceParametersPtrOutput) SqsQueueParameters() PipeSourceSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v *PipeSourceParameters) *PipeSourceSqsQueueParameters {
		if v == nil {
			return nil
		}
		return v.SqsQueueParameters
	}).(PipeSourceSqsQueueParametersPtrOutput)
}

type PipeSourceRabbitMqBrokerParameters struct {
	BatchSize                      *int                                    `pulumi:"batchSize"`
	Credentials                    PipeMqBrokerAccessCredentialsProperties `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds *int                                    `pulumi:"maximumBatchingWindowInSeconds"`
	QueueName                      string                                  `pulumi:"queueName"`
	VirtualHost                    *string                                 `pulumi:"virtualHost"`
}

// PipeSourceRabbitMqBrokerParametersInput is an input type that accepts PipeSourceRabbitMqBrokerParametersArgs and PipeSourceRabbitMqBrokerParametersOutput values.
// You can construct a concrete instance of `PipeSourceRabbitMqBrokerParametersInput` via:
//
//	PipeSourceRabbitMqBrokerParametersArgs{...}
type PipeSourceRabbitMqBrokerParametersInput interface {
	pulumi.Input

	ToPipeSourceRabbitMqBrokerParametersOutput() PipeSourceRabbitMqBrokerParametersOutput
	ToPipeSourceRabbitMqBrokerParametersOutputWithContext(context.Context) PipeSourceRabbitMqBrokerParametersOutput
}

type PipeSourceRabbitMqBrokerParametersArgs struct {
	BatchSize                      pulumi.IntPtrInput                           `pulumi:"batchSize"`
	Credentials                    PipeMqBrokerAccessCredentialsPropertiesInput `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput                           `pulumi:"maximumBatchingWindowInSeconds"`
	QueueName                      pulumi.StringInput                           `pulumi:"queueName"`
	VirtualHost                    pulumi.StringPtrInput                        `pulumi:"virtualHost"`
}

func (PipeSourceRabbitMqBrokerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceRabbitMqBrokerParameters)(nil)).Elem()
}

func (i PipeSourceRabbitMqBrokerParametersArgs) ToPipeSourceRabbitMqBrokerParametersOutput() PipeSourceRabbitMqBrokerParametersOutput {
	return i.ToPipeSourceRabbitMqBrokerParametersOutputWithContext(context.Background())
}

func (i PipeSourceRabbitMqBrokerParametersArgs) ToPipeSourceRabbitMqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceRabbitMqBrokerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceRabbitMqBrokerParametersOutput)
}

func (i PipeSourceRabbitMqBrokerParametersArgs) ToPipeSourceRabbitMqBrokerParametersPtrOutput() PipeSourceRabbitMqBrokerParametersPtrOutput {
	return i.ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceRabbitMqBrokerParametersArgs) ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceRabbitMqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceRabbitMqBrokerParametersOutput).ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(ctx)
}

// PipeSourceRabbitMqBrokerParametersPtrInput is an input type that accepts PipeSourceRabbitMqBrokerParametersArgs, PipeSourceRabbitMqBrokerParametersPtr and PipeSourceRabbitMqBrokerParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceRabbitMqBrokerParametersPtrInput` via:
//
//	        PipeSourceRabbitMqBrokerParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceRabbitMqBrokerParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceRabbitMqBrokerParametersPtrOutput() PipeSourceRabbitMqBrokerParametersPtrOutput
	ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(context.Context) PipeSourceRabbitMqBrokerParametersPtrOutput
}

type pipeSourceRabbitMqBrokerParametersPtrType PipeSourceRabbitMqBrokerParametersArgs

func PipeSourceRabbitMqBrokerParametersPtr(v *PipeSourceRabbitMqBrokerParametersArgs) PipeSourceRabbitMqBrokerParametersPtrInput {
	return (*pipeSourceRabbitMqBrokerParametersPtrType)(v)
}

func (*pipeSourceRabbitMqBrokerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceRabbitMqBrokerParameters)(nil)).Elem()
}

func (i *pipeSourceRabbitMqBrokerParametersPtrType) ToPipeSourceRabbitMqBrokerParametersPtrOutput() PipeSourceRabbitMqBrokerParametersPtrOutput {
	return i.ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceRabbitMqBrokerParametersPtrType) ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceRabbitMqBrokerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceRabbitMqBrokerParametersPtrOutput)
}

type PipeSourceRabbitMqBrokerParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceRabbitMqBrokerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceRabbitMqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceRabbitMqBrokerParametersOutput) ToPipeSourceRabbitMqBrokerParametersOutput() PipeSourceRabbitMqBrokerParametersOutput {
	return o
}

func (o PipeSourceRabbitMqBrokerParametersOutput) ToPipeSourceRabbitMqBrokerParametersOutputWithContext(ctx context.Context) PipeSourceRabbitMqBrokerParametersOutput {
	return o
}

func (o PipeSourceRabbitMqBrokerParametersOutput) ToPipeSourceRabbitMqBrokerParametersPtrOutput() PipeSourceRabbitMqBrokerParametersPtrOutput {
	return o.ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceRabbitMqBrokerParametersOutput) ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceRabbitMqBrokerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceRabbitMqBrokerParameters) *PipeSourceRabbitMqBrokerParameters {
		return &v
	}).(PipeSourceRabbitMqBrokerParametersPtrOutput)
}

func (o PipeSourceRabbitMqBrokerParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceRabbitMqBrokerParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o PipeSourceRabbitMqBrokerParametersOutput) Credentials() PipeMqBrokerAccessCredentialsPropertiesOutput {
	return o.ApplyT(func(v PipeSourceRabbitMqBrokerParameters) PipeMqBrokerAccessCredentialsProperties {
		return v.Credentials
	}).(PipeMqBrokerAccessCredentialsPropertiesOutput)
}

func (o PipeSourceRabbitMqBrokerParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceRabbitMqBrokerParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

func (o PipeSourceRabbitMqBrokerParametersOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceRabbitMqBrokerParameters) string { return v.QueueName }).(pulumi.StringOutput)
}

func (o PipeSourceRabbitMqBrokerParametersOutput) VirtualHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceRabbitMqBrokerParameters) *string { return v.VirtualHost }).(pulumi.StringPtrOutput)
}

type PipeSourceRabbitMqBrokerParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceRabbitMqBrokerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceRabbitMqBrokerParameters)(nil)).Elem()
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) ToPipeSourceRabbitMqBrokerParametersPtrOutput() PipeSourceRabbitMqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) ToPipeSourceRabbitMqBrokerParametersPtrOutputWithContext(ctx context.Context) PipeSourceRabbitMqBrokerParametersPtrOutput {
	return o
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) Elem() PipeSourceRabbitMqBrokerParametersOutput {
	return o.ApplyT(func(v *PipeSourceRabbitMqBrokerParameters) PipeSourceRabbitMqBrokerParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceRabbitMqBrokerParameters
		return ret
	}).(PipeSourceRabbitMqBrokerParametersOutput)
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceRabbitMqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) Credentials() PipeMqBrokerAccessCredentialsPropertiesPtrOutput {
	return o.ApplyT(func(v *PipeSourceRabbitMqBrokerParameters) *PipeMqBrokerAccessCredentialsProperties {
		if v == nil {
			return nil
		}
		return &v.Credentials
	}).(PipeMqBrokerAccessCredentialsPropertiesPtrOutput)
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceRabbitMqBrokerParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceRabbitMqBrokerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

func (o PipeSourceRabbitMqBrokerParametersPtrOutput) VirtualHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceRabbitMqBrokerParameters) *string {
		if v == nil {
			return nil
		}
		return v.VirtualHost
	}).(pulumi.StringPtrOutput)
}

type PipeSourceSelfManagedKafkaParameters struct {
	AdditionalBootstrapServers     []string    `pulumi:"additionalBootstrapServers"`
	BatchSize                      *int        `pulumi:"batchSize"`
	ConsumerGroupId                *string     `pulumi:"consumerGroupId"`
	Credentials                    interface{} `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds *int        `pulumi:"maximumBatchingWindowInSeconds"`
	// Optional SecretManager ARN which stores the database credentials
	ServerRootCaCertificate *string                                     `pulumi:"serverRootCaCertificate"`
	StartingPosition        *PipeSelfManagedKafkaStartPosition          `pulumi:"startingPosition"`
	TopicName               string                                      `pulumi:"topicName"`
	Vpc                     *PipeSelfManagedKafkaAccessConfigurationVpc `pulumi:"vpc"`
}

// PipeSourceSelfManagedKafkaParametersInput is an input type that accepts PipeSourceSelfManagedKafkaParametersArgs and PipeSourceSelfManagedKafkaParametersOutput values.
// You can construct a concrete instance of `PipeSourceSelfManagedKafkaParametersInput` via:
//
//	PipeSourceSelfManagedKafkaParametersArgs{...}
type PipeSourceSelfManagedKafkaParametersInput interface {
	pulumi.Input

	ToPipeSourceSelfManagedKafkaParametersOutput() PipeSourceSelfManagedKafkaParametersOutput
	ToPipeSourceSelfManagedKafkaParametersOutputWithContext(context.Context) PipeSourceSelfManagedKafkaParametersOutput
}

type PipeSourceSelfManagedKafkaParametersArgs struct {
	AdditionalBootstrapServers     pulumi.StringArrayInput `pulumi:"additionalBootstrapServers"`
	BatchSize                      pulumi.IntPtrInput      `pulumi:"batchSize"`
	ConsumerGroupId                pulumi.StringPtrInput   `pulumi:"consumerGroupId"`
	Credentials                    pulumi.Input            `pulumi:"credentials"`
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput      `pulumi:"maximumBatchingWindowInSeconds"`
	// Optional SecretManager ARN which stores the database credentials
	ServerRootCaCertificate pulumi.StringPtrInput                              `pulumi:"serverRootCaCertificate"`
	StartingPosition        PipeSelfManagedKafkaStartPositionPtrInput          `pulumi:"startingPosition"`
	TopicName               pulumi.StringInput                                 `pulumi:"topicName"`
	Vpc                     PipeSelfManagedKafkaAccessConfigurationVpcPtrInput `pulumi:"vpc"`
}

func (PipeSourceSelfManagedKafkaParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceSelfManagedKafkaParameters)(nil)).Elem()
}

func (i PipeSourceSelfManagedKafkaParametersArgs) ToPipeSourceSelfManagedKafkaParametersOutput() PipeSourceSelfManagedKafkaParametersOutput {
	return i.ToPipeSourceSelfManagedKafkaParametersOutputWithContext(context.Background())
}

func (i PipeSourceSelfManagedKafkaParametersArgs) ToPipeSourceSelfManagedKafkaParametersOutputWithContext(ctx context.Context) PipeSourceSelfManagedKafkaParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceSelfManagedKafkaParametersOutput)
}

func (i PipeSourceSelfManagedKafkaParametersArgs) ToPipeSourceSelfManagedKafkaParametersPtrOutput() PipeSourceSelfManagedKafkaParametersPtrOutput {
	return i.ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceSelfManagedKafkaParametersArgs) ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceSelfManagedKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceSelfManagedKafkaParametersOutput).ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(ctx)
}

// PipeSourceSelfManagedKafkaParametersPtrInput is an input type that accepts PipeSourceSelfManagedKafkaParametersArgs, PipeSourceSelfManagedKafkaParametersPtr and PipeSourceSelfManagedKafkaParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceSelfManagedKafkaParametersPtrInput` via:
//
//	        PipeSourceSelfManagedKafkaParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceSelfManagedKafkaParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceSelfManagedKafkaParametersPtrOutput() PipeSourceSelfManagedKafkaParametersPtrOutput
	ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(context.Context) PipeSourceSelfManagedKafkaParametersPtrOutput
}

type pipeSourceSelfManagedKafkaParametersPtrType PipeSourceSelfManagedKafkaParametersArgs

func PipeSourceSelfManagedKafkaParametersPtr(v *PipeSourceSelfManagedKafkaParametersArgs) PipeSourceSelfManagedKafkaParametersPtrInput {
	return (*pipeSourceSelfManagedKafkaParametersPtrType)(v)
}

func (*pipeSourceSelfManagedKafkaParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceSelfManagedKafkaParameters)(nil)).Elem()
}

func (i *pipeSourceSelfManagedKafkaParametersPtrType) ToPipeSourceSelfManagedKafkaParametersPtrOutput() PipeSourceSelfManagedKafkaParametersPtrOutput {
	return i.ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceSelfManagedKafkaParametersPtrType) ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceSelfManagedKafkaParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceSelfManagedKafkaParametersPtrOutput)
}

type PipeSourceSelfManagedKafkaParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceSelfManagedKafkaParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceSelfManagedKafkaParameters)(nil)).Elem()
}

func (o PipeSourceSelfManagedKafkaParametersOutput) ToPipeSourceSelfManagedKafkaParametersOutput() PipeSourceSelfManagedKafkaParametersOutput {
	return o
}

func (o PipeSourceSelfManagedKafkaParametersOutput) ToPipeSourceSelfManagedKafkaParametersOutputWithContext(ctx context.Context) PipeSourceSelfManagedKafkaParametersOutput {
	return o
}

func (o PipeSourceSelfManagedKafkaParametersOutput) ToPipeSourceSelfManagedKafkaParametersPtrOutput() PipeSourceSelfManagedKafkaParametersPtrOutput {
	return o.ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceSelfManagedKafkaParametersOutput) ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceSelfManagedKafkaParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceSelfManagedKafkaParameters) *PipeSourceSelfManagedKafkaParameters {
		return &v
	}).(PipeSourceSelfManagedKafkaParametersPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) AdditionalBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) []string { return v.AdditionalBootstrapServers }).(pulumi.StringArrayOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSourceSelfManagedKafkaParametersOutput) ServerRootCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) *string { return v.ServerRootCaCertificate }).(pulumi.StringPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) StartingPosition() PipeSelfManagedKafkaStartPositionPtrOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) *PipeSelfManagedKafkaStartPosition {
		return v.StartingPosition
	}).(PipeSelfManagedKafkaStartPositionPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) string { return v.TopicName }).(pulumi.StringOutput)
}

func (o PipeSourceSelfManagedKafkaParametersOutput) Vpc() PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return o.ApplyT(func(v PipeSourceSelfManagedKafkaParameters) *PipeSelfManagedKafkaAccessConfigurationVpc { return v.Vpc }).(PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput)
}

type PipeSourceSelfManagedKafkaParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceSelfManagedKafkaParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceSelfManagedKafkaParameters)(nil)).Elem()
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) ToPipeSourceSelfManagedKafkaParametersPtrOutput() PipeSourceSelfManagedKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) ToPipeSourceSelfManagedKafkaParametersPtrOutputWithContext(ctx context.Context) PipeSourceSelfManagedKafkaParametersPtrOutput {
	return o
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) Elem() PipeSourceSelfManagedKafkaParametersOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) PipeSourceSelfManagedKafkaParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceSelfManagedKafkaParameters
		return ret
	}).(PipeSourceSelfManagedKafkaParametersOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) AdditionalBootstrapServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalBootstrapServers
	}).(pulumi.StringArrayOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupId
	}).(pulumi.StringPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) interface{} {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(pulumi.AnyOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeSourceSelfManagedKafkaParametersPtrOutput) ServerRootCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return v.ServerRootCaCertificate
	}).(pulumi.StringPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) StartingPosition() PipeSelfManagedKafkaStartPositionPtrOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) *PipeSelfManagedKafkaStartPosition {
		if v == nil {
			return nil
		}
		return v.StartingPosition
	}).(PipeSelfManagedKafkaStartPositionPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

func (o PipeSourceSelfManagedKafkaParametersPtrOutput) Vpc() PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput {
	return o.ApplyT(func(v *PipeSourceSelfManagedKafkaParameters) *PipeSelfManagedKafkaAccessConfigurationVpc {
		if v == nil {
			return nil
		}
		return v.Vpc
	}).(PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput)
}

type PipeSourceSqsQueueParameters struct {
	BatchSize                      *int `pulumi:"batchSize"`
	MaximumBatchingWindowInSeconds *int `pulumi:"maximumBatchingWindowInSeconds"`
}

// PipeSourceSqsQueueParametersInput is an input type that accepts PipeSourceSqsQueueParametersArgs and PipeSourceSqsQueueParametersOutput values.
// You can construct a concrete instance of `PipeSourceSqsQueueParametersInput` via:
//
//	PipeSourceSqsQueueParametersArgs{...}
type PipeSourceSqsQueueParametersInput interface {
	pulumi.Input

	ToPipeSourceSqsQueueParametersOutput() PipeSourceSqsQueueParametersOutput
	ToPipeSourceSqsQueueParametersOutputWithContext(context.Context) PipeSourceSqsQueueParametersOutput
}

type PipeSourceSqsQueueParametersArgs struct {
	BatchSize                      pulumi.IntPtrInput `pulumi:"batchSize"`
	MaximumBatchingWindowInSeconds pulumi.IntPtrInput `pulumi:"maximumBatchingWindowInSeconds"`
}

func (PipeSourceSqsQueueParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceSqsQueueParameters)(nil)).Elem()
}

func (i PipeSourceSqsQueueParametersArgs) ToPipeSourceSqsQueueParametersOutput() PipeSourceSqsQueueParametersOutput {
	return i.ToPipeSourceSqsQueueParametersOutputWithContext(context.Background())
}

func (i PipeSourceSqsQueueParametersArgs) ToPipeSourceSqsQueueParametersOutputWithContext(ctx context.Context) PipeSourceSqsQueueParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceSqsQueueParametersOutput)
}

func (i PipeSourceSqsQueueParametersArgs) ToPipeSourceSqsQueueParametersPtrOutput() PipeSourceSqsQueueParametersPtrOutput {
	return i.ToPipeSourceSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i PipeSourceSqsQueueParametersArgs) ToPipeSourceSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceSqsQueueParametersOutput).ToPipeSourceSqsQueueParametersPtrOutputWithContext(ctx)
}

// PipeSourceSqsQueueParametersPtrInput is an input type that accepts PipeSourceSqsQueueParametersArgs, PipeSourceSqsQueueParametersPtr and PipeSourceSqsQueueParametersPtrOutput values.
// You can construct a concrete instance of `PipeSourceSqsQueueParametersPtrInput` via:
//
//	        PipeSourceSqsQueueParametersArgs{...}
//
//	or:
//
//	        nil
type PipeSourceSqsQueueParametersPtrInput interface {
	pulumi.Input

	ToPipeSourceSqsQueueParametersPtrOutput() PipeSourceSqsQueueParametersPtrOutput
	ToPipeSourceSqsQueueParametersPtrOutputWithContext(context.Context) PipeSourceSqsQueueParametersPtrOutput
}

type pipeSourceSqsQueueParametersPtrType PipeSourceSqsQueueParametersArgs

func PipeSourceSqsQueueParametersPtr(v *PipeSourceSqsQueueParametersArgs) PipeSourceSqsQueueParametersPtrInput {
	return (*pipeSourceSqsQueueParametersPtrType)(v)
}

func (*pipeSourceSqsQueueParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceSqsQueueParameters)(nil)).Elem()
}

func (i *pipeSourceSqsQueueParametersPtrType) ToPipeSourceSqsQueueParametersPtrOutput() PipeSourceSqsQueueParametersPtrOutput {
	return i.ToPipeSourceSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i *pipeSourceSqsQueueParametersPtrType) ToPipeSourceSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeSourceSqsQueueParametersPtrOutput)
}

type PipeSourceSqsQueueParametersOutput struct{ *pulumi.OutputState }

func (PipeSourceSqsQueueParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeSourceSqsQueueParameters)(nil)).Elem()
}

func (o PipeSourceSqsQueueParametersOutput) ToPipeSourceSqsQueueParametersOutput() PipeSourceSqsQueueParametersOutput {
	return o
}

func (o PipeSourceSqsQueueParametersOutput) ToPipeSourceSqsQueueParametersOutputWithContext(ctx context.Context) PipeSourceSqsQueueParametersOutput {
	return o
}

func (o PipeSourceSqsQueueParametersOutput) ToPipeSourceSqsQueueParametersPtrOutput() PipeSourceSqsQueueParametersPtrOutput {
	return o.ToPipeSourceSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (o PipeSourceSqsQueueParametersOutput) ToPipeSourceSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceSqsQueueParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeSourceSqsQueueParameters) *PipeSourceSqsQueueParameters {
		return &v
	}).(PipeSourceSqsQueueParametersPtrOutput)
}

func (o PipeSourceSqsQueueParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceSqsQueueParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

func (o PipeSourceSqsQueueParametersOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeSourceSqsQueueParameters) *int { return v.MaximumBatchingWindowInSeconds }).(pulumi.IntPtrOutput)
}

type PipeSourceSqsQueueParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeSourceSqsQueueParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeSourceSqsQueueParameters)(nil)).Elem()
}

func (o PipeSourceSqsQueueParametersPtrOutput) ToPipeSourceSqsQueueParametersPtrOutput() PipeSourceSqsQueueParametersPtrOutput {
	return o
}

func (o PipeSourceSqsQueueParametersPtrOutput) ToPipeSourceSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeSourceSqsQueueParametersPtrOutput {
	return o
}

func (o PipeSourceSqsQueueParametersPtrOutput) Elem() PipeSourceSqsQueueParametersOutput {
	return o.ApplyT(func(v *PipeSourceSqsQueueParameters) PipeSourceSqsQueueParameters {
		if v != nil {
			return *v
		}
		var ret PipeSourceSqsQueueParameters
		return ret
	}).(PipeSourceSqsQueueParametersOutput)
}

func (o PipeSourceSqsQueueParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceSqsQueueParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

func (o PipeSourceSqsQueueParametersPtrOutput) MaximumBatchingWindowInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeSourceSqsQueueParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBatchingWindowInSeconds
	}).(pulumi.IntPtrOutput)
}

type PipeTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// PipeTagInput is an input type that accepts PipeTagArgs and PipeTagOutput values.
// You can construct a concrete instance of `PipeTagInput` via:
//
//	PipeTagArgs{...}
type PipeTagInput interface {
	pulumi.Input

	ToPipeTagOutput() PipeTagOutput
	ToPipeTagOutputWithContext(context.Context) PipeTagOutput
}

type PipeTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipeTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTag)(nil)).Elem()
}

func (i PipeTagArgs) ToPipeTagOutput() PipeTagOutput {
	return i.ToPipeTagOutputWithContext(context.Background())
}

func (i PipeTagArgs) ToPipeTagOutputWithContext(ctx context.Context) PipeTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTagOutput)
}

// PipeTagArrayInput is an input type that accepts PipeTagArray and PipeTagArrayOutput values.
// You can construct a concrete instance of `PipeTagArrayInput` via:
//
//	PipeTagArray{ PipeTagArgs{...} }
type PipeTagArrayInput interface {
	pulumi.Input

	ToPipeTagArrayOutput() PipeTagArrayOutput
	ToPipeTagArrayOutputWithContext(context.Context) PipeTagArrayOutput
}

type PipeTagArray []PipeTagInput

func (PipeTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTag)(nil)).Elem()
}

func (i PipeTagArray) ToPipeTagArrayOutput() PipeTagArrayOutput {
	return i.ToPipeTagArrayOutputWithContext(context.Background())
}

func (i PipeTagArray) ToPipeTagArrayOutputWithContext(ctx context.Context) PipeTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTagArrayOutput)
}

type PipeTagOutput struct{ *pulumi.OutputState }

func (PipeTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTag)(nil)).Elem()
}

func (o PipeTagOutput) ToPipeTagOutput() PipeTagOutput {
	return o
}

func (o PipeTagOutput) ToPipeTagOutputWithContext(ctx context.Context) PipeTagOutput {
	return o
}

func (o PipeTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PipeTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTag) string { return v.Value }).(pulumi.StringOutput)
}

type PipeTagArrayOutput struct{ *pulumi.OutputState }

func (PipeTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipeTag)(nil)).Elem()
}

func (o PipeTagArrayOutput) ToPipeTagArrayOutput() PipeTagArrayOutput {
	return o
}

func (o PipeTagArrayOutput) ToPipeTagArrayOutputWithContext(ctx context.Context) PipeTagArrayOutput {
	return o
}

func (o PipeTagArrayOutput) Index(i pulumi.IntInput) PipeTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipeTag {
		return vs[0].([]PipeTag)[vs[1].(int)]
	}).(PipeTagOutput)
}

type PipeTagMap struct {
}

// PipeTagMapInput is an input type that accepts PipeTagMap and PipeTagMapOutput values.
// You can construct a concrete instance of `PipeTagMapInput` via:
//
//	PipeTagMap{ "key": PipeTagArgs{...} }
type PipeTagMapInput interface {
	pulumi.Input

	ToPipeTagMapOutput() PipeTagMapOutput
	ToPipeTagMapOutputWithContext(context.Context) PipeTagMapOutput
}

type PipeTagMapArgs struct {
}

func (PipeTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTagMap)(nil)).Elem()
}

func (i PipeTagMapArgs) ToPipeTagMapOutput() PipeTagMapOutput {
	return i.ToPipeTagMapOutputWithContext(context.Background())
}

func (i PipeTagMapArgs) ToPipeTagMapOutputWithContext(ctx context.Context) PipeTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTagMapOutput)
}

func (i PipeTagMapArgs) ToPipeTagMapPtrOutput() PipeTagMapPtrOutput {
	return i.ToPipeTagMapPtrOutputWithContext(context.Background())
}

func (i PipeTagMapArgs) ToPipeTagMapPtrOutputWithContext(ctx context.Context) PipeTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTagMapOutput).ToPipeTagMapPtrOutputWithContext(ctx)
}

// PipeTagMapPtrInput is an input type that accepts PipeTagMapArgs, PipeTagMapPtr and PipeTagMapPtrOutput values.
// You can construct a concrete instance of `PipeTagMapPtrInput` via:
//
//	        PipeTagMapArgs{...}
//
//	or:
//
//	        nil
type PipeTagMapPtrInput interface {
	pulumi.Input

	ToPipeTagMapPtrOutput() PipeTagMapPtrOutput
	ToPipeTagMapPtrOutputWithContext(context.Context) PipeTagMapPtrOutput
}

type pipeTagMapPtrType PipeTagMapArgs

func PipeTagMapPtr(v *PipeTagMapArgs) PipeTagMapPtrInput {
	return (*pipeTagMapPtrType)(v)
}

func (*pipeTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTagMap)(nil)).Elem()
}

func (i *pipeTagMapPtrType) ToPipeTagMapPtrOutput() PipeTagMapPtrOutput {
	return i.ToPipeTagMapPtrOutputWithContext(context.Background())
}

func (i *pipeTagMapPtrType) ToPipeTagMapPtrOutputWithContext(ctx context.Context) PipeTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTagMapPtrOutput)
}

type PipeTagMapOutput struct{ *pulumi.OutputState }

func (PipeTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTagMap)(nil)).Elem()
}

func (o PipeTagMapOutput) ToPipeTagMapOutput() PipeTagMapOutput {
	return o
}

func (o PipeTagMapOutput) ToPipeTagMapOutputWithContext(ctx context.Context) PipeTagMapOutput {
	return o
}

func (o PipeTagMapOutput) ToPipeTagMapPtrOutput() PipeTagMapPtrOutput {
	return o.ToPipeTagMapPtrOutputWithContext(context.Background())
}

func (o PipeTagMapOutput) ToPipeTagMapPtrOutputWithContext(ctx context.Context) PipeTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTagMap) *PipeTagMap {
		return &v
	}).(PipeTagMapPtrOutput)
}

type PipeTagMapPtrOutput struct{ *pulumi.OutputState }

func (PipeTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTagMap)(nil)).Elem()
}

func (o PipeTagMapPtrOutput) ToPipeTagMapPtrOutput() PipeTagMapPtrOutput {
	return o
}

func (o PipeTagMapPtrOutput) ToPipeTagMapPtrOutputWithContext(ctx context.Context) PipeTagMapPtrOutput {
	return o
}

func (o PipeTagMapPtrOutput) Elem() PipeTagMapOutput {
	return o.ApplyT(func(v *PipeTagMap) PipeTagMap {
		if v != nil {
			return *v
		}
		var ret PipeTagMap
		return ret
	}).(PipeTagMapOutput)
}

type PipeTargetBatchJobParameters struct {
	ArrayProperties    *PipeBatchArrayProperties    `pulumi:"arrayProperties"`
	ContainerOverrides *PipeBatchContainerOverrides `pulumi:"containerOverrides"`
	DependsOn          []PipeBatchJobDependency     `pulumi:"dependsOn"`
	JobDefinition      string                       `pulumi:"jobDefinition"`
	JobName            string                       `pulumi:"jobName"`
	Parameters         *PipeBatchParametersMap      `pulumi:"parameters"`
	RetryStrategy      *PipeBatchRetryStrategy      `pulumi:"retryStrategy"`
}

// PipeTargetBatchJobParametersInput is an input type that accepts PipeTargetBatchJobParametersArgs and PipeTargetBatchJobParametersOutput values.
// You can construct a concrete instance of `PipeTargetBatchJobParametersInput` via:
//
//	PipeTargetBatchJobParametersArgs{...}
type PipeTargetBatchJobParametersInput interface {
	pulumi.Input

	ToPipeTargetBatchJobParametersOutput() PipeTargetBatchJobParametersOutput
	ToPipeTargetBatchJobParametersOutputWithContext(context.Context) PipeTargetBatchJobParametersOutput
}

type PipeTargetBatchJobParametersArgs struct {
	ArrayProperties    PipeBatchArrayPropertiesPtrInput    `pulumi:"arrayProperties"`
	ContainerOverrides PipeBatchContainerOverridesPtrInput `pulumi:"containerOverrides"`
	DependsOn          PipeBatchJobDependencyArrayInput    `pulumi:"dependsOn"`
	JobDefinition      pulumi.StringInput                  `pulumi:"jobDefinition"`
	JobName            pulumi.StringInput                  `pulumi:"jobName"`
	Parameters         PipeBatchParametersMapPtrInput      `pulumi:"parameters"`
	RetryStrategy      PipeBatchRetryStrategyPtrInput      `pulumi:"retryStrategy"`
}

func (PipeTargetBatchJobParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetBatchJobParameters)(nil)).Elem()
}

func (i PipeTargetBatchJobParametersArgs) ToPipeTargetBatchJobParametersOutput() PipeTargetBatchJobParametersOutput {
	return i.ToPipeTargetBatchJobParametersOutputWithContext(context.Background())
}

func (i PipeTargetBatchJobParametersArgs) ToPipeTargetBatchJobParametersOutputWithContext(ctx context.Context) PipeTargetBatchJobParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetBatchJobParametersOutput)
}

func (i PipeTargetBatchJobParametersArgs) ToPipeTargetBatchJobParametersPtrOutput() PipeTargetBatchJobParametersPtrOutput {
	return i.ToPipeTargetBatchJobParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetBatchJobParametersArgs) ToPipeTargetBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetBatchJobParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetBatchJobParametersOutput).ToPipeTargetBatchJobParametersPtrOutputWithContext(ctx)
}

// PipeTargetBatchJobParametersPtrInput is an input type that accepts PipeTargetBatchJobParametersArgs, PipeTargetBatchJobParametersPtr and PipeTargetBatchJobParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetBatchJobParametersPtrInput` via:
//
//	        PipeTargetBatchJobParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetBatchJobParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetBatchJobParametersPtrOutput() PipeTargetBatchJobParametersPtrOutput
	ToPipeTargetBatchJobParametersPtrOutputWithContext(context.Context) PipeTargetBatchJobParametersPtrOutput
}

type pipeTargetBatchJobParametersPtrType PipeTargetBatchJobParametersArgs

func PipeTargetBatchJobParametersPtr(v *PipeTargetBatchJobParametersArgs) PipeTargetBatchJobParametersPtrInput {
	return (*pipeTargetBatchJobParametersPtrType)(v)
}

func (*pipeTargetBatchJobParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetBatchJobParameters)(nil)).Elem()
}

func (i *pipeTargetBatchJobParametersPtrType) ToPipeTargetBatchJobParametersPtrOutput() PipeTargetBatchJobParametersPtrOutput {
	return i.ToPipeTargetBatchJobParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetBatchJobParametersPtrType) ToPipeTargetBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetBatchJobParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetBatchJobParametersPtrOutput)
}

type PipeTargetBatchJobParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetBatchJobParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetBatchJobParameters)(nil)).Elem()
}

func (o PipeTargetBatchJobParametersOutput) ToPipeTargetBatchJobParametersOutput() PipeTargetBatchJobParametersOutput {
	return o
}

func (o PipeTargetBatchJobParametersOutput) ToPipeTargetBatchJobParametersOutputWithContext(ctx context.Context) PipeTargetBatchJobParametersOutput {
	return o
}

func (o PipeTargetBatchJobParametersOutput) ToPipeTargetBatchJobParametersPtrOutput() PipeTargetBatchJobParametersPtrOutput {
	return o.ToPipeTargetBatchJobParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetBatchJobParametersOutput) ToPipeTargetBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetBatchJobParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetBatchJobParameters) *PipeTargetBatchJobParameters {
		return &v
	}).(PipeTargetBatchJobParametersPtrOutput)
}

func (o PipeTargetBatchJobParametersOutput) ArrayProperties() PipeBatchArrayPropertiesPtrOutput {
	return o.ApplyT(func(v PipeTargetBatchJobParameters) *PipeBatchArrayProperties { return v.ArrayProperties }).(PipeBatchArrayPropertiesPtrOutput)
}

func (o PipeTargetBatchJobParametersOutput) ContainerOverrides() PipeBatchContainerOverridesPtrOutput {
	return o.ApplyT(func(v PipeTargetBatchJobParameters) *PipeBatchContainerOverrides { return v.ContainerOverrides }).(PipeBatchContainerOverridesPtrOutput)
}

func (o PipeTargetBatchJobParametersOutput) DependsOn() PipeBatchJobDependencyArrayOutput {
	return o.ApplyT(func(v PipeTargetBatchJobParameters) []PipeBatchJobDependency { return v.DependsOn }).(PipeBatchJobDependencyArrayOutput)
}

func (o PipeTargetBatchJobParametersOutput) JobDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetBatchJobParameters) string { return v.JobDefinition }).(pulumi.StringOutput)
}

func (o PipeTargetBatchJobParametersOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetBatchJobParameters) string { return v.JobName }).(pulumi.StringOutput)
}

func (o PipeTargetBatchJobParametersOutput) Parameters() PipeBatchParametersMapPtrOutput {
	return o.ApplyT(func(v PipeTargetBatchJobParameters) *PipeBatchParametersMap { return v.Parameters }).(PipeBatchParametersMapPtrOutput)
}

func (o PipeTargetBatchJobParametersOutput) RetryStrategy() PipeBatchRetryStrategyPtrOutput {
	return o.ApplyT(func(v PipeTargetBatchJobParameters) *PipeBatchRetryStrategy { return v.RetryStrategy }).(PipeBatchRetryStrategyPtrOutput)
}

type PipeTargetBatchJobParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetBatchJobParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetBatchJobParameters)(nil)).Elem()
}

func (o PipeTargetBatchJobParametersPtrOutput) ToPipeTargetBatchJobParametersPtrOutput() PipeTargetBatchJobParametersPtrOutput {
	return o
}

func (o PipeTargetBatchJobParametersPtrOutput) ToPipeTargetBatchJobParametersPtrOutputWithContext(ctx context.Context) PipeTargetBatchJobParametersPtrOutput {
	return o
}

func (o PipeTargetBatchJobParametersPtrOutput) Elem() PipeTargetBatchJobParametersOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) PipeTargetBatchJobParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetBatchJobParameters
		return ret
	}).(PipeTargetBatchJobParametersOutput)
}

func (o PipeTargetBatchJobParametersPtrOutput) ArrayProperties() PipeBatchArrayPropertiesPtrOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) *PipeBatchArrayProperties {
		if v == nil {
			return nil
		}
		return v.ArrayProperties
	}).(PipeBatchArrayPropertiesPtrOutput)
}

func (o PipeTargetBatchJobParametersPtrOutput) ContainerOverrides() PipeBatchContainerOverridesPtrOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) *PipeBatchContainerOverrides {
		if v == nil {
			return nil
		}
		return v.ContainerOverrides
	}).(PipeBatchContainerOverridesPtrOutput)
}

func (o PipeTargetBatchJobParametersPtrOutput) DependsOn() PipeBatchJobDependencyArrayOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) []PipeBatchJobDependency {
		if v == nil {
			return nil
		}
		return v.DependsOn
	}).(PipeBatchJobDependencyArrayOutput)
}

func (o PipeTargetBatchJobParametersPtrOutput) JobDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) *string {
		if v == nil {
			return nil
		}
		return &v.JobDefinition
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetBatchJobParametersPtrOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) *string {
		if v == nil {
			return nil
		}
		return &v.JobName
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetBatchJobParametersPtrOutput) Parameters() PipeBatchParametersMapPtrOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) *PipeBatchParametersMap {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(PipeBatchParametersMapPtrOutput)
}

func (o PipeTargetBatchJobParametersPtrOutput) RetryStrategy() PipeBatchRetryStrategyPtrOutput {
	return o.ApplyT(func(v *PipeTargetBatchJobParameters) *PipeBatchRetryStrategy {
		if v == nil {
			return nil
		}
		return v.RetryStrategy
	}).(PipeBatchRetryStrategyPtrOutput)
}

type PipeTargetCloudWatchLogsParameters struct {
	LogStreamName *string `pulumi:"logStreamName"`
	Timestamp     *string `pulumi:"timestamp"`
}

// PipeTargetCloudWatchLogsParametersInput is an input type that accepts PipeTargetCloudWatchLogsParametersArgs and PipeTargetCloudWatchLogsParametersOutput values.
// You can construct a concrete instance of `PipeTargetCloudWatchLogsParametersInput` via:
//
//	PipeTargetCloudWatchLogsParametersArgs{...}
type PipeTargetCloudWatchLogsParametersInput interface {
	pulumi.Input

	ToPipeTargetCloudWatchLogsParametersOutput() PipeTargetCloudWatchLogsParametersOutput
	ToPipeTargetCloudWatchLogsParametersOutputWithContext(context.Context) PipeTargetCloudWatchLogsParametersOutput
}

type PipeTargetCloudWatchLogsParametersArgs struct {
	LogStreamName pulumi.StringPtrInput `pulumi:"logStreamName"`
	Timestamp     pulumi.StringPtrInput `pulumi:"timestamp"`
}

func (PipeTargetCloudWatchLogsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetCloudWatchLogsParameters)(nil)).Elem()
}

func (i PipeTargetCloudWatchLogsParametersArgs) ToPipeTargetCloudWatchLogsParametersOutput() PipeTargetCloudWatchLogsParametersOutput {
	return i.ToPipeTargetCloudWatchLogsParametersOutputWithContext(context.Background())
}

func (i PipeTargetCloudWatchLogsParametersArgs) ToPipeTargetCloudWatchLogsParametersOutputWithContext(ctx context.Context) PipeTargetCloudWatchLogsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetCloudWatchLogsParametersOutput)
}

func (i PipeTargetCloudWatchLogsParametersArgs) ToPipeTargetCloudWatchLogsParametersPtrOutput() PipeTargetCloudWatchLogsParametersPtrOutput {
	return i.ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetCloudWatchLogsParametersArgs) ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetCloudWatchLogsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetCloudWatchLogsParametersOutput).ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(ctx)
}

// PipeTargetCloudWatchLogsParametersPtrInput is an input type that accepts PipeTargetCloudWatchLogsParametersArgs, PipeTargetCloudWatchLogsParametersPtr and PipeTargetCloudWatchLogsParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetCloudWatchLogsParametersPtrInput` via:
//
//	        PipeTargetCloudWatchLogsParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetCloudWatchLogsParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetCloudWatchLogsParametersPtrOutput() PipeTargetCloudWatchLogsParametersPtrOutput
	ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(context.Context) PipeTargetCloudWatchLogsParametersPtrOutput
}

type pipeTargetCloudWatchLogsParametersPtrType PipeTargetCloudWatchLogsParametersArgs

func PipeTargetCloudWatchLogsParametersPtr(v *PipeTargetCloudWatchLogsParametersArgs) PipeTargetCloudWatchLogsParametersPtrInput {
	return (*pipeTargetCloudWatchLogsParametersPtrType)(v)
}

func (*pipeTargetCloudWatchLogsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetCloudWatchLogsParameters)(nil)).Elem()
}

func (i *pipeTargetCloudWatchLogsParametersPtrType) ToPipeTargetCloudWatchLogsParametersPtrOutput() PipeTargetCloudWatchLogsParametersPtrOutput {
	return i.ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetCloudWatchLogsParametersPtrType) ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetCloudWatchLogsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetCloudWatchLogsParametersPtrOutput)
}

type PipeTargetCloudWatchLogsParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetCloudWatchLogsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetCloudWatchLogsParameters)(nil)).Elem()
}

func (o PipeTargetCloudWatchLogsParametersOutput) ToPipeTargetCloudWatchLogsParametersOutput() PipeTargetCloudWatchLogsParametersOutput {
	return o
}

func (o PipeTargetCloudWatchLogsParametersOutput) ToPipeTargetCloudWatchLogsParametersOutputWithContext(ctx context.Context) PipeTargetCloudWatchLogsParametersOutput {
	return o
}

func (o PipeTargetCloudWatchLogsParametersOutput) ToPipeTargetCloudWatchLogsParametersPtrOutput() PipeTargetCloudWatchLogsParametersPtrOutput {
	return o.ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetCloudWatchLogsParametersOutput) ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetCloudWatchLogsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetCloudWatchLogsParameters) *PipeTargetCloudWatchLogsParameters {
		return &v
	}).(PipeTargetCloudWatchLogsParametersPtrOutput)
}

func (o PipeTargetCloudWatchLogsParametersOutput) LogStreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetCloudWatchLogsParameters) *string { return v.LogStreamName }).(pulumi.StringPtrOutput)
}

func (o PipeTargetCloudWatchLogsParametersOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetCloudWatchLogsParameters) *string { return v.Timestamp }).(pulumi.StringPtrOutput)
}

type PipeTargetCloudWatchLogsParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetCloudWatchLogsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetCloudWatchLogsParameters)(nil)).Elem()
}

func (o PipeTargetCloudWatchLogsParametersPtrOutput) ToPipeTargetCloudWatchLogsParametersPtrOutput() PipeTargetCloudWatchLogsParametersPtrOutput {
	return o
}

func (o PipeTargetCloudWatchLogsParametersPtrOutput) ToPipeTargetCloudWatchLogsParametersPtrOutputWithContext(ctx context.Context) PipeTargetCloudWatchLogsParametersPtrOutput {
	return o
}

func (o PipeTargetCloudWatchLogsParametersPtrOutput) Elem() PipeTargetCloudWatchLogsParametersOutput {
	return o.ApplyT(func(v *PipeTargetCloudWatchLogsParameters) PipeTargetCloudWatchLogsParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetCloudWatchLogsParameters
		return ret
	}).(PipeTargetCloudWatchLogsParametersOutput)
}

func (o PipeTargetCloudWatchLogsParametersPtrOutput) LogStreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetCloudWatchLogsParameters) *string {
		if v == nil {
			return nil
		}
		return v.LogStreamName
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetCloudWatchLogsParametersPtrOutput) Timestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetCloudWatchLogsParameters) *string {
		if v == nil {
			return nil
		}
		return v.Timestamp
	}).(pulumi.StringPtrOutput)
}

type PipeTargetEcsTaskParameters struct {
	CapacityProviderStrategy []PipeCapacityProviderStrategyItem `pulumi:"capacityProviderStrategy"`
	EnableEcsManagedTags     *bool                              `pulumi:"enableEcsManagedTags"`
	EnableExecuteCommand     *bool                              `pulumi:"enableExecuteCommand"`
	Group                    *string                            `pulumi:"group"`
	LaunchType               *PipeLaunchType                    `pulumi:"launchType"`
	NetworkConfiguration     *PipeNetworkConfiguration          `pulumi:"networkConfiguration"`
	Overrides                *PipeEcsTaskOverride               `pulumi:"overrides"`
	PlacementConstraints     []PipePlacementConstraint          `pulumi:"placementConstraints"`
	PlacementStrategy        []PipePlacementStrategy            `pulumi:"placementStrategy"`
	PlatformVersion          *string                            `pulumi:"platformVersion"`
	PropagateTags            *PipePropagateTags                 `pulumi:"propagateTags"`
	ReferenceId              *string                            `pulumi:"referenceId"`
	Tags                     []PipeTag                          `pulumi:"tags"`
	TaskCount                *int                               `pulumi:"taskCount"`
	TaskDefinitionArn        string                             `pulumi:"taskDefinitionArn"`
}

// PipeTargetEcsTaskParametersInput is an input type that accepts PipeTargetEcsTaskParametersArgs and PipeTargetEcsTaskParametersOutput values.
// You can construct a concrete instance of `PipeTargetEcsTaskParametersInput` via:
//
//	PipeTargetEcsTaskParametersArgs{...}
type PipeTargetEcsTaskParametersInput interface {
	pulumi.Input

	ToPipeTargetEcsTaskParametersOutput() PipeTargetEcsTaskParametersOutput
	ToPipeTargetEcsTaskParametersOutputWithContext(context.Context) PipeTargetEcsTaskParametersOutput
}

type PipeTargetEcsTaskParametersArgs struct {
	CapacityProviderStrategy PipeCapacityProviderStrategyItemArrayInput `pulumi:"capacityProviderStrategy"`
	EnableEcsManagedTags     pulumi.BoolPtrInput                        `pulumi:"enableEcsManagedTags"`
	EnableExecuteCommand     pulumi.BoolPtrInput                        `pulumi:"enableExecuteCommand"`
	Group                    pulumi.StringPtrInput                      `pulumi:"group"`
	LaunchType               PipeLaunchTypePtrInput                     `pulumi:"launchType"`
	NetworkConfiguration     PipeNetworkConfigurationPtrInput           `pulumi:"networkConfiguration"`
	Overrides                PipeEcsTaskOverridePtrInput                `pulumi:"overrides"`
	PlacementConstraints     PipePlacementConstraintArrayInput          `pulumi:"placementConstraints"`
	PlacementStrategy        PipePlacementStrategyArrayInput            `pulumi:"placementStrategy"`
	PlatformVersion          pulumi.StringPtrInput                      `pulumi:"platformVersion"`
	PropagateTags            PipePropagateTagsPtrInput                  `pulumi:"propagateTags"`
	ReferenceId              pulumi.StringPtrInput                      `pulumi:"referenceId"`
	Tags                     PipeTagArrayInput                          `pulumi:"tags"`
	TaskCount                pulumi.IntPtrInput                         `pulumi:"taskCount"`
	TaskDefinitionArn        pulumi.StringInput                         `pulumi:"taskDefinitionArn"`
}

func (PipeTargetEcsTaskParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetEcsTaskParameters)(nil)).Elem()
}

func (i PipeTargetEcsTaskParametersArgs) ToPipeTargetEcsTaskParametersOutput() PipeTargetEcsTaskParametersOutput {
	return i.ToPipeTargetEcsTaskParametersOutputWithContext(context.Background())
}

func (i PipeTargetEcsTaskParametersArgs) ToPipeTargetEcsTaskParametersOutputWithContext(ctx context.Context) PipeTargetEcsTaskParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetEcsTaskParametersOutput)
}

func (i PipeTargetEcsTaskParametersArgs) ToPipeTargetEcsTaskParametersPtrOutput() PipeTargetEcsTaskParametersPtrOutput {
	return i.ToPipeTargetEcsTaskParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetEcsTaskParametersArgs) ToPipeTargetEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetEcsTaskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetEcsTaskParametersOutput).ToPipeTargetEcsTaskParametersPtrOutputWithContext(ctx)
}

// PipeTargetEcsTaskParametersPtrInput is an input type that accepts PipeTargetEcsTaskParametersArgs, PipeTargetEcsTaskParametersPtr and PipeTargetEcsTaskParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetEcsTaskParametersPtrInput` via:
//
//	        PipeTargetEcsTaskParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetEcsTaskParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetEcsTaskParametersPtrOutput() PipeTargetEcsTaskParametersPtrOutput
	ToPipeTargetEcsTaskParametersPtrOutputWithContext(context.Context) PipeTargetEcsTaskParametersPtrOutput
}

type pipeTargetEcsTaskParametersPtrType PipeTargetEcsTaskParametersArgs

func PipeTargetEcsTaskParametersPtr(v *PipeTargetEcsTaskParametersArgs) PipeTargetEcsTaskParametersPtrInput {
	return (*pipeTargetEcsTaskParametersPtrType)(v)
}

func (*pipeTargetEcsTaskParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetEcsTaskParameters)(nil)).Elem()
}

func (i *pipeTargetEcsTaskParametersPtrType) ToPipeTargetEcsTaskParametersPtrOutput() PipeTargetEcsTaskParametersPtrOutput {
	return i.ToPipeTargetEcsTaskParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetEcsTaskParametersPtrType) ToPipeTargetEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetEcsTaskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetEcsTaskParametersPtrOutput)
}

type PipeTargetEcsTaskParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetEcsTaskParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetEcsTaskParameters)(nil)).Elem()
}

func (o PipeTargetEcsTaskParametersOutput) ToPipeTargetEcsTaskParametersOutput() PipeTargetEcsTaskParametersOutput {
	return o
}

func (o PipeTargetEcsTaskParametersOutput) ToPipeTargetEcsTaskParametersOutputWithContext(ctx context.Context) PipeTargetEcsTaskParametersOutput {
	return o
}

func (o PipeTargetEcsTaskParametersOutput) ToPipeTargetEcsTaskParametersPtrOutput() PipeTargetEcsTaskParametersPtrOutput {
	return o.ToPipeTargetEcsTaskParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetEcsTaskParametersOutput) ToPipeTargetEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetEcsTaskParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetEcsTaskParameters) *PipeTargetEcsTaskParameters {
		return &v
	}).(PipeTargetEcsTaskParametersPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) CapacityProviderStrategy() PipeCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) []PipeCapacityProviderStrategyItem {
		return v.CapacityProviderStrategy
	}).(PipeCapacityProviderStrategyItemArrayOutput)
}

func (o PipeTargetEcsTaskParametersOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *bool { return v.EnableEcsManagedTags }).(pulumi.BoolPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) LaunchType() PipeLaunchTypePtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *PipeLaunchType { return v.LaunchType }).(PipeLaunchTypePtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) NetworkConfiguration() PipeNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *PipeNetworkConfiguration { return v.NetworkConfiguration }).(PipeNetworkConfigurationPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) Overrides() PipeEcsTaskOverridePtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *PipeEcsTaskOverride { return v.Overrides }).(PipeEcsTaskOverridePtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) PlacementConstraints() PipePlacementConstraintArrayOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) []PipePlacementConstraint { return v.PlacementConstraints }).(PipePlacementConstraintArrayOutput)
}

func (o PipeTargetEcsTaskParametersOutput) PlacementStrategy() PipePlacementStrategyArrayOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) []PipePlacementStrategy { return v.PlacementStrategy }).(PipePlacementStrategyArrayOutput)
}

func (o PipeTargetEcsTaskParametersOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) PropagateTags() PipePropagateTagsPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *PipePropagateTags { return v.PropagateTags }).(PipePropagateTagsPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *string { return v.ReferenceId }).(pulumi.StringPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) Tags() PipeTagArrayOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) []PipeTag { return v.Tags }).(PipeTagArrayOutput)
}

func (o PipeTargetEcsTaskParametersOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

func (o PipeTargetEcsTaskParametersOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetEcsTaskParameters) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type PipeTargetEcsTaskParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetEcsTaskParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetEcsTaskParameters)(nil)).Elem()
}

func (o PipeTargetEcsTaskParametersPtrOutput) ToPipeTargetEcsTaskParametersPtrOutput() PipeTargetEcsTaskParametersPtrOutput {
	return o
}

func (o PipeTargetEcsTaskParametersPtrOutput) ToPipeTargetEcsTaskParametersPtrOutputWithContext(ctx context.Context) PipeTargetEcsTaskParametersPtrOutput {
	return o
}

func (o PipeTargetEcsTaskParametersPtrOutput) Elem() PipeTargetEcsTaskParametersOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) PipeTargetEcsTaskParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetEcsTaskParameters
		return ret
	}).(PipeTargetEcsTaskParametersOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) CapacityProviderStrategy() PipeCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) []PipeCapacityProviderStrategyItem {
		if v == nil {
			return nil
		}
		return v.CapacityProviderStrategy
	}).(PipeCapacityProviderStrategyItemArrayOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEcsManagedTags
	}).(pulumi.BoolPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExecuteCommand
	}).(pulumi.BoolPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) LaunchType() PipeLaunchTypePtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *PipeLaunchType {
		if v == nil {
			return nil
		}
		return v.LaunchType
	}).(PipeLaunchTypePtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) NetworkConfiguration() PipeNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *PipeNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(PipeNetworkConfigurationPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) Overrides() PipeEcsTaskOverridePtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *PipeEcsTaskOverride {
		if v == nil {
			return nil
		}
		return v.Overrides
	}).(PipeEcsTaskOverridePtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) PlacementConstraints() PipePlacementConstraintArrayOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) []PipePlacementConstraint {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(PipePlacementConstraintArrayOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) PlacementStrategy() PipePlacementStrategyArrayOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) []PipePlacementStrategy {
		if v == nil {
			return nil
		}
		return v.PlacementStrategy
	}).(PipePlacementStrategyArrayOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.PlatformVersion
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) PropagateTags() PipePropagateTagsPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *PipePropagateTags {
		if v == nil {
			return nil
		}
		return v.PropagateTags
	}).(PipePropagateTagsPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceId
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) Tags() PipeTagArrayOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) []PipeTag {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(PipeTagArrayOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *int {
		if v == nil {
			return nil
		}
		return v.TaskCount
	}).(pulumi.IntPtrOutput)
}

func (o PipeTargetEcsTaskParametersPtrOutput) TaskDefinitionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEcsTaskParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TaskDefinitionArn
	}).(pulumi.StringPtrOutput)
}

type PipeTargetEventBridgeEventBusParameters struct {
	DetailType *string  `pulumi:"detailType"`
	EndpointId *string  `pulumi:"endpointId"`
	Resources  []string `pulumi:"resources"`
	Source     *string  `pulumi:"source"`
	Time       *string  `pulumi:"time"`
}

// PipeTargetEventBridgeEventBusParametersInput is an input type that accepts PipeTargetEventBridgeEventBusParametersArgs and PipeTargetEventBridgeEventBusParametersOutput values.
// You can construct a concrete instance of `PipeTargetEventBridgeEventBusParametersInput` via:
//
//	PipeTargetEventBridgeEventBusParametersArgs{...}
type PipeTargetEventBridgeEventBusParametersInput interface {
	pulumi.Input

	ToPipeTargetEventBridgeEventBusParametersOutput() PipeTargetEventBridgeEventBusParametersOutput
	ToPipeTargetEventBridgeEventBusParametersOutputWithContext(context.Context) PipeTargetEventBridgeEventBusParametersOutput
}

type PipeTargetEventBridgeEventBusParametersArgs struct {
	DetailType pulumi.StringPtrInput   `pulumi:"detailType"`
	EndpointId pulumi.StringPtrInput   `pulumi:"endpointId"`
	Resources  pulumi.StringArrayInput `pulumi:"resources"`
	Source     pulumi.StringPtrInput   `pulumi:"source"`
	Time       pulumi.StringPtrInput   `pulumi:"time"`
}

func (PipeTargetEventBridgeEventBusParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetEventBridgeEventBusParameters)(nil)).Elem()
}

func (i PipeTargetEventBridgeEventBusParametersArgs) ToPipeTargetEventBridgeEventBusParametersOutput() PipeTargetEventBridgeEventBusParametersOutput {
	return i.ToPipeTargetEventBridgeEventBusParametersOutputWithContext(context.Background())
}

func (i PipeTargetEventBridgeEventBusParametersArgs) ToPipeTargetEventBridgeEventBusParametersOutputWithContext(ctx context.Context) PipeTargetEventBridgeEventBusParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetEventBridgeEventBusParametersOutput)
}

func (i PipeTargetEventBridgeEventBusParametersArgs) ToPipeTargetEventBridgeEventBusParametersPtrOutput() PipeTargetEventBridgeEventBusParametersPtrOutput {
	return i.ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetEventBridgeEventBusParametersArgs) ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetEventBridgeEventBusParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetEventBridgeEventBusParametersOutput).ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(ctx)
}

// PipeTargetEventBridgeEventBusParametersPtrInput is an input type that accepts PipeTargetEventBridgeEventBusParametersArgs, PipeTargetEventBridgeEventBusParametersPtr and PipeTargetEventBridgeEventBusParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetEventBridgeEventBusParametersPtrInput` via:
//
//	        PipeTargetEventBridgeEventBusParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetEventBridgeEventBusParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetEventBridgeEventBusParametersPtrOutput() PipeTargetEventBridgeEventBusParametersPtrOutput
	ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(context.Context) PipeTargetEventBridgeEventBusParametersPtrOutput
}

type pipeTargetEventBridgeEventBusParametersPtrType PipeTargetEventBridgeEventBusParametersArgs

func PipeTargetEventBridgeEventBusParametersPtr(v *PipeTargetEventBridgeEventBusParametersArgs) PipeTargetEventBridgeEventBusParametersPtrInput {
	return (*pipeTargetEventBridgeEventBusParametersPtrType)(v)
}

func (*pipeTargetEventBridgeEventBusParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetEventBridgeEventBusParameters)(nil)).Elem()
}

func (i *pipeTargetEventBridgeEventBusParametersPtrType) ToPipeTargetEventBridgeEventBusParametersPtrOutput() PipeTargetEventBridgeEventBusParametersPtrOutput {
	return i.ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetEventBridgeEventBusParametersPtrType) ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetEventBridgeEventBusParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetEventBridgeEventBusParametersPtrOutput)
}

type PipeTargetEventBridgeEventBusParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetEventBridgeEventBusParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetEventBridgeEventBusParameters)(nil)).Elem()
}

func (o PipeTargetEventBridgeEventBusParametersOutput) ToPipeTargetEventBridgeEventBusParametersOutput() PipeTargetEventBridgeEventBusParametersOutput {
	return o
}

func (o PipeTargetEventBridgeEventBusParametersOutput) ToPipeTargetEventBridgeEventBusParametersOutputWithContext(ctx context.Context) PipeTargetEventBridgeEventBusParametersOutput {
	return o
}

func (o PipeTargetEventBridgeEventBusParametersOutput) ToPipeTargetEventBridgeEventBusParametersPtrOutput() PipeTargetEventBridgeEventBusParametersPtrOutput {
	return o.ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetEventBridgeEventBusParametersOutput) ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetEventBridgeEventBusParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetEventBridgeEventBusParameters) *PipeTargetEventBridgeEventBusParameters {
		return &v
	}).(PipeTargetEventBridgeEventBusParametersPtrOutput)
}

func (o PipeTargetEventBridgeEventBusParametersOutput) DetailType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetEventBridgeEventBusParameters) *string { return v.DetailType }).(pulumi.StringPtrOutput)
}

func (o PipeTargetEventBridgeEventBusParametersOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetEventBridgeEventBusParameters) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

func (o PipeTargetEventBridgeEventBusParametersOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetEventBridgeEventBusParameters) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

func (o PipeTargetEventBridgeEventBusParametersOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetEventBridgeEventBusParameters) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o PipeTargetEventBridgeEventBusParametersOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetEventBridgeEventBusParameters) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type PipeTargetEventBridgeEventBusParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetEventBridgeEventBusParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetEventBridgeEventBusParameters)(nil)).Elem()
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) ToPipeTargetEventBridgeEventBusParametersPtrOutput() PipeTargetEventBridgeEventBusParametersPtrOutput {
	return o
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) ToPipeTargetEventBridgeEventBusParametersPtrOutputWithContext(ctx context.Context) PipeTargetEventBridgeEventBusParametersPtrOutput {
	return o
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) Elem() PipeTargetEventBridgeEventBusParametersOutput {
	return o.ApplyT(func(v *PipeTargetEventBridgeEventBusParameters) PipeTargetEventBridgeEventBusParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetEventBridgeEventBusParameters
		return ret
	}).(PipeTargetEventBridgeEventBusParametersOutput)
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) DetailType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEventBridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.DetailType
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEventBridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetEventBridgeEventBusParameters) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEventBridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetEventBridgeEventBusParametersPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetEventBridgeEventBusParameters) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type PipeTargetHttpParameters struct {
	HeaderParameters      *PipeHeaderParametersMap      `pulumi:"headerParameters"`
	PathParameterValues   []string                      `pulumi:"pathParameterValues"`
	QueryStringParameters *PipeQueryStringParametersMap `pulumi:"queryStringParameters"`
}

// PipeTargetHttpParametersInput is an input type that accepts PipeTargetHttpParametersArgs and PipeTargetHttpParametersOutput values.
// You can construct a concrete instance of `PipeTargetHttpParametersInput` via:
//
//	PipeTargetHttpParametersArgs{...}
type PipeTargetHttpParametersInput interface {
	pulumi.Input

	ToPipeTargetHttpParametersOutput() PipeTargetHttpParametersOutput
	ToPipeTargetHttpParametersOutputWithContext(context.Context) PipeTargetHttpParametersOutput
}

type PipeTargetHttpParametersArgs struct {
	HeaderParameters      PipeHeaderParametersMapPtrInput      `pulumi:"headerParameters"`
	PathParameterValues   pulumi.StringArrayInput              `pulumi:"pathParameterValues"`
	QueryStringParameters PipeQueryStringParametersMapPtrInput `pulumi:"queryStringParameters"`
}

func (PipeTargetHttpParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetHttpParameters)(nil)).Elem()
}

func (i PipeTargetHttpParametersArgs) ToPipeTargetHttpParametersOutput() PipeTargetHttpParametersOutput {
	return i.ToPipeTargetHttpParametersOutputWithContext(context.Background())
}

func (i PipeTargetHttpParametersArgs) ToPipeTargetHttpParametersOutputWithContext(ctx context.Context) PipeTargetHttpParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetHttpParametersOutput)
}

func (i PipeTargetHttpParametersArgs) ToPipeTargetHttpParametersPtrOutput() PipeTargetHttpParametersPtrOutput {
	return i.ToPipeTargetHttpParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetHttpParametersArgs) ToPipeTargetHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetHttpParametersOutput).ToPipeTargetHttpParametersPtrOutputWithContext(ctx)
}

// PipeTargetHttpParametersPtrInput is an input type that accepts PipeTargetHttpParametersArgs, PipeTargetHttpParametersPtr and PipeTargetHttpParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetHttpParametersPtrInput` via:
//
//	        PipeTargetHttpParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetHttpParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetHttpParametersPtrOutput() PipeTargetHttpParametersPtrOutput
	ToPipeTargetHttpParametersPtrOutputWithContext(context.Context) PipeTargetHttpParametersPtrOutput
}

type pipeTargetHttpParametersPtrType PipeTargetHttpParametersArgs

func PipeTargetHttpParametersPtr(v *PipeTargetHttpParametersArgs) PipeTargetHttpParametersPtrInput {
	return (*pipeTargetHttpParametersPtrType)(v)
}

func (*pipeTargetHttpParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetHttpParameters)(nil)).Elem()
}

func (i *pipeTargetHttpParametersPtrType) ToPipeTargetHttpParametersPtrOutput() PipeTargetHttpParametersPtrOutput {
	return i.ToPipeTargetHttpParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetHttpParametersPtrType) ToPipeTargetHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetHttpParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetHttpParametersPtrOutput)
}

type PipeTargetHttpParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetHttpParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetHttpParameters)(nil)).Elem()
}

func (o PipeTargetHttpParametersOutput) ToPipeTargetHttpParametersOutput() PipeTargetHttpParametersOutput {
	return o
}

func (o PipeTargetHttpParametersOutput) ToPipeTargetHttpParametersOutputWithContext(ctx context.Context) PipeTargetHttpParametersOutput {
	return o
}

func (o PipeTargetHttpParametersOutput) ToPipeTargetHttpParametersPtrOutput() PipeTargetHttpParametersPtrOutput {
	return o.ToPipeTargetHttpParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetHttpParametersOutput) ToPipeTargetHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetHttpParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetHttpParameters) *PipeTargetHttpParameters {
		return &v
	}).(PipeTargetHttpParametersPtrOutput)
}

func (o PipeTargetHttpParametersOutput) HeaderParameters() PipeHeaderParametersMapPtrOutput {
	return o.ApplyT(func(v PipeTargetHttpParameters) *PipeHeaderParametersMap { return v.HeaderParameters }).(PipeHeaderParametersMapPtrOutput)
}

func (o PipeTargetHttpParametersOutput) PathParameterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetHttpParameters) []string { return v.PathParameterValues }).(pulumi.StringArrayOutput)
}

func (o PipeTargetHttpParametersOutput) QueryStringParameters() PipeQueryStringParametersMapPtrOutput {
	return o.ApplyT(func(v PipeTargetHttpParameters) *PipeQueryStringParametersMap { return v.QueryStringParameters }).(PipeQueryStringParametersMapPtrOutput)
}

type PipeTargetHttpParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetHttpParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetHttpParameters)(nil)).Elem()
}

func (o PipeTargetHttpParametersPtrOutput) ToPipeTargetHttpParametersPtrOutput() PipeTargetHttpParametersPtrOutput {
	return o
}

func (o PipeTargetHttpParametersPtrOutput) ToPipeTargetHttpParametersPtrOutputWithContext(ctx context.Context) PipeTargetHttpParametersPtrOutput {
	return o
}

func (o PipeTargetHttpParametersPtrOutput) Elem() PipeTargetHttpParametersOutput {
	return o.ApplyT(func(v *PipeTargetHttpParameters) PipeTargetHttpParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetHttpParameters
		return ret
	}).(PipeTargetHttpParametersOutput)
}

func (o PipeTargetHttpParametersPtrOutput) HeaderParameters() PipeHeaderParametersMapPtrOutput {
	return o.ApplyT(func(v *PipeTargetHttpParameters) *PipeHeaderParametersMap {
		if v == nil {
			return nil
		}
		return v.HeaderParameters
	}).(PipeHeaderParametersMapPtrOutput)
}

func (o PipeTargetHttpParametersPtrOutput) PathParameterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetHttpParameters) []string {
		if v == nil {
			return nil
		}
		return v.PathParameterValues
	}).(pulumi.StringArrayOutput)
}

func (o PipeTargetHttpParametersPtrOutput) QueryStringParameters() PipeQueryStringParametersMapPtrOutput {
	return o.ApplyT(func(v *PipeTargetHttpParameters) *PipeQueryStringParametersMap {
		if v == nil {
			return nil
		}
		return v.QueryStringParameters
	}).(PipeQueryStringParametersMapPtrOutput)
}

type PipeTargetKinesisStreamParameters struct {
	PartitionKey string `pulumi:"partitionKey"`
}

// PipeTargetKinesisStreamParametersInput is an input type that accepts PipeTargetKinesisStreamParametersArgs and PipeTargetKinesisStreamParametersOutput values.
// You can construct a concrete instance of `PipeTargetKinesisStreamParametersInput` via:
//
//	PipeTargetKinesisStreamParametersArgs{...}
type PipeTargetKinesisStreamParametersInput interface {
	pulumi.Input

	ToPipeTargetKinesisStreamParametersOutput() PipeTargetKinesisStreamParametersOutput
	ToPipeTargetKinesisStreamParametersOutputWithContext(context.Context) PipeTargetKinesisStreamParametersOutput
}

type PipeTargetKinesisStreamParametersArgs struct {
	PartitionKey pulumi.StringInput `pulumi:"partitionKey"`
}

func (PipeTargetKinesisStreamParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetKinesisStreamParameters)(nil)).Elem()
}

func (i PipeTargetKinesisStreamParametersArgs) ToPipeTargetKinesisStreamParametersOutput() PipeTargetKinesisStreamParametersOutput {
	return i.ToPipeTargetKinesisStreamParametersOutputWithContext(context.Background())
}

func (i PipeTargetKinesisStreamParametersArgs) ToPipeTargetKinesisStreamParametersOutputWithContext(ctx context.Context) PipeTargetKinesisStreamParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetKinesisStreamParametersOutput)
}

func (i PipeTargetKinesisStreamParametersArgs) ToPipeTargetKinesisStreamParametersPtrOutput() PipeTargetKinesisStreamParametersPtrOutput {
	return i.ToPipeTargetKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetKinesisStreamParametersArgs) ToPipeTargetKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetKinesisStreamParametersOutput).ToPipeTargetKinesisStreamParametersPtrOutputWithContext(ctx)
}

// PipeTargetKinesisStreamParametersPtrInput is an input type that accepts PipeTargetKinesisStreamParametersArgs, PipeTargetKinesisStreamParametersPtr and PipeTargetKinesisStreamParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetKinesisStreamParametersPtrInput` via:
//
//	        PipeTargetKinesisStreamParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetKinesisStreamParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetKinesisStreamParametersPtrOutput() PipeTargetKinesisStreamParametersPtrOutput
	ToPipeTargetKinesisStreamParametersPtrOutputWithContext(context.Context) PipeTargetKinesisStreamParametersPtrOutput
}

type pipeTargetKinesisStreamParametersPtrType PipeTargetKinesisStreamParametersArgs

func PipeTargetKinesisStreamParametersPtr(v *PipeTargetKinesisStreamParametersArgs) PipeTargetKinesisStreamParametersPtrInput {
	return (*pipeTargetKinesisStreamParametersPtrType)(v)
}

func (*pipeTargetKinesisStreamParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetKinesisStreamParameters)(nil)).Elem()
}

func (i *pipeTargetKinesisStreamParametersPtrType) ToPipeTargetKinesisStreamParametersPtrOutput() PipeTargetKinesisStreamParametersPtrOutput {
	return i.ToPipeTargetKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetKinesisStreamParametersPtrType) ToPipeTargetKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetKinesisStreamParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetKinesisStreamParametersPtrOutput)
}

type PipeTargetKinesisStreamParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetKinesisStreamParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetKinesisStreamParameters)(nil)).Elem()
}

func (o PipeTargetKinesisStreamParametersOutput) ToPipeTargetKinesisStreamParametersOutput() PipeTargetKinesisStreamParametersOutput {
	return o
}

func (o PipeTargetKinesisStreamParametersOutput) ToPipeTargetKinesisStreamParametersOutputWithContext(ctx context.Context) PipeTargetKinesisStreamParametersOutput {
	return o
}

func (o PipeTargetKinesisStreamParametersOutput) ToPipeTargetKinesisStreamParametersPtrOutput() PipeTargetKinesisStreamParametersPtrOutput {
	return o.ToPipeTargetKinesisStreamParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetKinesisStreamParametersOutput) ToPipeTargetKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetKinesisStreamParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetKinesisStreamParameters) *PipeTargetKinesisStreamParameters {
		return &v
	}).(PipeTargetKinesisStreamParametersPtrOutput)
}

func (o PipeTargetKinesisStreamParametersOutput) PartitionKey() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetKinesisStreamParameters) string { return v.PartitionKey }).(pulumi.StringOutput)
}

type PipeTargetKinesisStreamParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetKinesisStreamParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetKinesisStreamParameters)(nil)).Elem()
}

func (o PipeTargetKinesisStreamParametersPtrOutput) ToPipeTargetKinesisStreamParametersPtrOutput() PipeTargetKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeTargetKinesisStreamParametersPtrOutput) ToPipeTargetKinesisStreamParametersPtrOutputWithContext(ctx context.Context) PipeTargetKinesisStreamParametersPtrOutput {
	return o
}

func (o PipeTargetKinesisStreamParametersPtrOutput) Elem() PipeTargetKinesisStreamParametersOutput {
	return o.ApplyT(func(v *PipeTargetKinesisStreamParameters) PipeTargetKinesisStreamParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetKinesisStreamParameters
		return ret
	}).(PipeTargetKinesisStreamParametersOutput)
}

func (o PipeTargetKinesisStreamParametersPtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetKinesisStreamParameters) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

type PipeTargetLambdaFunctionParameters struct {
	InvocationType *PipeTargetInvocationType `pulumi:"invocationType"`
}

// PipeTargetLambdaFunctionParametersInput is an input type that accepts PipeTargetLambdaFunctionParametersArgs and PipeTargetLambdaFunctionParametersOutput values.
// You can construct a concrete instance of `PipeTargetLambdaFunctionParametersInput` via:
//
//	PipeTargetLambdaFunctionParametersArgs{...}
type PipeTargetLambdaFunctionParametersInput interface {
	pulumi.Input

	ToPipeTargetLambdaFunctionParametersOutput() PipeTargetLambdaFunctionParametersOutput
	ToPipeTargetLambdaFunctionParametersOutputWithContext(context.Context) PipeTargetLambdaFunctionParametersOutput
}

type PipeTargetLambdaFunctionParametersArgs struct {
	InvocationType PipeTargetInvocationTypePtrInput `pulumi:"invocationType"`
}

func (PipeTargetLambdaFunctionParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetLambdaFunctionParameters)(nil)).Elem()
}

func (i PipeTargetLambdaFunctionParametersArgs) ToPipeTargetLambdaFunctionParametersOutput() PipeTargetLambdaFunctionParametersOutput {
	return i.ToPipeTargetLambdaFunctionParametersOutputWithContext(context.Background())
}

func (i PipeTargetLambdaFunctionParametersArgs) ToPipeTargetLambdaFunctionParametersOutputWithContext(ctx context.Context) PipeTargetLambdaFunctionParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetLambdaFunctionParametersOutput)
}

func (i PipeTargetLambdaFunctionParametersArgs) ToPipeTargetLambdaFunctionParametersPtrOutput() PipeTargetLambdaFunctionParametersPtrOutput {
	return i.ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetLambdaFunctionParametersArgs) ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetLambdaFunctionParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetLambdaFunctionParametersOutput).ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(ctx)
}

// PipeTargetLambdaFunctionParametersPtrInput is an input type that accepts PipeTargetLambdaFunctionParametersArgs, PipeTargetLambdaFunctionParametersPtr and PipeTargetLambdaFunctionParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetLambdaFunctionParametersPtrInput` via:
//
//	        PipeTargetLambdaFunctionParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetLambdaFunctionParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetLambdaFunctionParametersPtrOutput() PipeTargetLambdaFunctionParametersPtrOutput
	ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(context.Context) PipeTargetLambdaFunctionParametersPtrOutput
}

type pipeTargetLambdaFunctionParametersPtrType PipeTargetLambdaFunctionParametersArgs

func PipeTargetLambdaFunctionParametersPtr(v *PipeTargetLambdaFunctionParametersArgs) PipeTargetLambdaFunctionParametersPtrInput {
	return (*pipeTargetLambdaFunctionParametersPtrType)(v)
}

func (*pipeTargetLambdaFunctionParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetLambdaFunctionParameters)(nil)).Elem()
}

func (i *pipeTargetLambdaFunctionParametersPtrType) ToPipeTargetLambdaFunctionParametersPtrOutput() PipeTargetLambdaFunctionParametersPtrOutput {
	return i.ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetLambdaFunctionParametersPtrType) ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetLambdaFunctionParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetLambdaFunctionParametersPtrOutput)
}

type PipeTargetLambdaFunctionParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetLambdaFunctionParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetLambdaFunctionParameters)(nil)).Elem()
}

func (o PipeTargetLambdaFunctionParametersOutput) ToPipeTargetLambdaFunctionParametersOutput() PipeTargetLambdaFunctionParametersOutput {
	return o
}

func (o PipeTargetLambdaFunctionParametersOutput) ToPipeTargetLambdaFunctionParametersOutputWithContext(ctx context.Context) PipeTargetLambdaFunctionParametersOutput {
	return o
}

func (o PipeTargetLambdaFunctionParametersOutput) ToPipeTargetLambdaFunctionParametersPtrOutput() PipeTargetLambdaFunctionParametersPtrOutput {
	return o.ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetLambdaFunctionParametersOutput) ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetLambdaFunctionParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetLambdaFunctionParameters) *PipeTargetLambdaFunctionParameters {
		return &v
	}).(PipeTargetLambdaFunctionParametersPtrOutput)
}

func (o PipeTargetLambdaFunctionParametersOutput) InvocationType() PipeTargetInvocationTypePtrOutput {
	return o.ApplyT(func(v PipeTargetLambdaFunctionParameters) *PipeTargetInvocationType { return v.InvocationType }).(PipeTargetInvocationTypePtrOutput)
}

type PipeTargetLambdaFunctionParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetLambdaFunctionParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetLambdaFunctionParameters)(nil)).Elem()
}

func (o PipeTargetLambdaFunctionParametersPtrOutput) ToPipeTargetLambdaFunctionParametersPtrOutput() PipeTargetLambdaFunctionParametersPtrOutput {
	return o
}

func (o PipeTargetLambdaFunctionParametersPtrOutput) ToPipeTargetLambdaFunctionParametersPtrOutputWithContext(ctx context.Context) PipeTargetLambdaFunctionParametersPtrOutput {
	return o
}

func (o PipeTargetLambdaFunctionParametersPtrOutput) Elem() PipeTargetLambdaFunctionParametersOutput {
	return o.ApplyT(func(v *PipeTargetLambdaFunctionParameters) PipeTargetLambdaFunctionParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetLambdaFunctionParameters
		return ret
	}).(PipeTargetLambdaFunctionParametersOutput)
}

func (o PipeTargetLambdaFunctionParametersPtrOutput) InvocationType() PipeTargetInvocationTypePtrOutput {
	return o.ApplyT(func(v *PipeTargetLambdaFunctionParameters) *PipeTargetInvocationType {
		if v == nil {
			return nil
		}
		return v.InvocationType
	}).(PipeTargetInvocationTypePtrOutput)
}

type PipeTargetParameters struct {
	BatchJobParameters                 *PipeTargetBatchJobParameters            `pulumi:"batchJobParameters"`
	CloudWatchLogsParameters           *PipeTargetCloudWatchLogsParameters      `pulumi:"cloudWatchLogsParameters"`
	EcsTaskParameters                  *PipeTargetEcsTaskParameters             `pulumi:"ecsTaskParameters"`
	EventBridgeEventBusParameters      *PipeTargetEventBridgeEventBusParameters `pulumi:"eventBridgeEventBusParameters"`
	HttpParameters                     *PipeTargetHttpParameters                `pulumi:"httpParameters"`
	InputTemplate                      *string                                  `pulumi:"inputTemplate"`
	KinesisStreamParameters            *PipeTargetKinesisStreamParameters       `pulumi:"kinesisStreamParameters"`
	LambdaFunctionParameters           *PipeTargetLambdaFunctionParameters      `pulumi:"lambdaFunctionParameters"`
	RedshiftDataParameters             *PipeTargetRedshiftDataParameters        `pulumi:"redshiftDataParameters"`
	SageMakerPipelineParameters        *PipeTargetSageMakerPipelineParameters   `pulumi:"sageMakerPipelineParameters"`
	SqsQueueParameters                 *PipeTargetSqsQueueParameters            `pulumi:"sqsQueueParameters"`
	StepFunctionStateMachineParameters *PipeTargetStateMachineParameters        `pulumi:"stepFunctionStateMachineParameters"`
}

// PipeTargetParametersInput is an input type that accepts PipeTargetParametersArgs and PipeTargetParametersOutput values.
// You can construct a concrete instance of `PipeTargetParametersInput` via:
//
//	PipeTargetParametersArgs{...}
type PipeTargetParametersInput interface {
	pulumi.Input

	ToPipeTargetParametersOutput() PipeTargetParametersOutput
	ToPipeTargetParametersOutputWithContext(context.Context) PipeTargetParametersOutput
}

type PipeTargetParametersArgs struct {
	BatchJobParameters                 PipeTargetBatchJobParametersPtrInput            `pulumi:"batchJobParameters"`
	CloudWatchLogsParameters           PipeTargetCloudWatchLogsParametersPtrInput      `pulumi:"cloudWatchLogsParameters"`
	EcsTaskParameters                  PipeTargetEcsTaskParametersPtrInput             `pulumi:"ecsTaskParameters"`
	EventBridgeEventBusParameters      PipeTargetEventBridgeEventBusParametersPtrInput `pulumi:"eventBridgeEventBusParameters"`
	HttpParameters                     PipeTargetHttpParametersPtrInput                `pulumi:"httpParameters"`
	InputTemplate                      pulumi.StringPtrInput                           `pulumi:"inputTemplate"`
	KinesisStreamParameters            PipeTargetKinesisStreamParametersPtrInput       `pulumi:"kinesisStreamParameters"`
	LambdaFunctionParameters           PipeTargetLambdaFunctionParametersPtrInput      `pulumi:"lambdaFunctionParameters"`
	RedshiftDataParameters             PipeTargetRedshiftDataParametersPtrInput        `pulumi:"redshiftDataParameters"`
	SageMakerPipelineParameters        PipeTargetSageMakerPipelineParametersPtrInput   `pulumi:"sageMakerPipelineParameters"`
	SqsQueueParameters                 PipeTargetSqsQueueParametersPtrInput            `pulumi:"sqsQueueParameters"`
	StepFunctionStateMachineParameters PipeTargetStateMachineParametersPtrInput        `pulumi:"stepFunctionStateMachineParameters"`
}

func (PipeTargetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return i.ToPipeTargetParametersOutputWithContext(context.Background())
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersOutput)
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return i.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetParametersArgs) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersOutput).ToPipeTargetParametersPtrOutputWithContext(ctx)
}

// PipeTargetParametersPtrInput is an input type that accepts PipeTargetParametersArgs, PipeTargetParametersPtr and PipeTargetParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetParametersPtrInput` via:
//
//	        PipeTargetParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput
	ToPipeTargetParametersPtrOutputWithContext(context.Context) PipeTargetParametersPtrOutput
}

type pipeTargetParametersPtrType PipeTargetParametersArgs

func PipeTargetParametersPtr(v *PipeTargetParametersArgs) PipeTargetParametersPtrInput {
	return (*pipeTargetParametersPtrType)(v)
}

func (*pipeTargetParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParameters)(nil)).Elem()
}

func (i *pipeTargetParametersPtrType) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return i.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetParametersPtrType) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetParametersPtrOutput)
}

type PipeTargetParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetParameters)(nil)).Elem()
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutput() PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersOutputWithContext(ctx context.Context) PipeTargetParametersOutput {
	return o
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return o.ToPipeTargetParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetParametersOutput) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetParameters) *PipeTargetParameters {
		return &v
	}).(PipeTargetParametersPtrOutput)
}

func (o PipeTargetParametersOutput) BatchJobParameters() PipeTargetBatchJobParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetBatchJobParameters { return v.BatchJobParameters }).(PipeTargetBatchJobParametersPtrOutput)
}

func (o PipeTargetParametersOutput) CloudWatchLogsParameters() PipeTargetCloudWatchLogsParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetCloudWatchLogsParameters { return v.CloudWatchLogsParameters }).(PipeTargetCloudWatchLogsParametersPtrOutput)
}

func (o PipeTargetParametersOutput) EcsTaskParameters() PipeTargetEcsTaskParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetEcsTaskParameters { return v.EcsTaskParameters }).(PipeTargetEcsTaskParametersPtrOutput)
}

func (o PipeTargetParametersOutput) EventBridgeEventBusParameters() PipeTargetEventBridgeEventBusParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetEventBridgeEventBusParameters {
		return v.EventBridgeEventBusParameters
	}).(PipeTargetEventBridgeEventBusParametersPtrOutput)
}

func (o PipeTargetParametersOutput) HttpParameters() PipeTargetHttpParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetHttpParameters { return v.HttpParameters }).(PipeTargetHttpParametersPtrOutput)
}

func (o PipeTargetParametersOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *string { return v.InputTemplate }).(pulumi.StringPtrOutput)
}

func (o PipeTargetParametersOutput) KinesisStreamParameters() PipeTargetKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetKinesisStreamParameters { return v.KinesisStreamParameters }).(PipeTargetKinesisStreamParametersPtrOutput)
}

func (o PipeTargetParametersOutput) LambdaFunctionParameters() PipeTargetLambdaFunctionParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetLambdaFunctionParameters { return v.LambdaFunctionParameters }).(PipeTargetLambdaFunctionParametersPtrOutput)
}

func (o PipeTargetParametersOutput) RedshiftDataParameters() PipeTargetRedshiftDataParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetRedshiftDataParameters { return v.RedshiftDataParameters }).(PipeTargetRedshiftDataParametersPtrOutput)
}

func (o PipeTargetParametersOutput) SageMakerPipelineParameters() PipeTargetSageMakerPipelineParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetSageMakerPipelineParameters {
		return v.SageMakerPipelineParameters
	}).(PipeTargetSageMakerPipelineParametersPtrOutput)
}

func (o PipeTargetParametersOutput) SqsQueueParameters() PipeTargetSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetSqsQueueParameters { return v.SqsQueueParameters }).(PipeTargetSqsQueueParametersPtrOutput)
}

func (o PipeTargetParametersOutput) StepFunctionStateMachineParameters() PipeTargetStateMachineParametersPtrOutput {
	return o.ApplyT(func(v PipeTargetParameters) *PipeTargetStateMachineParameters {
		return v.StepFunctionStateMachineParameters
	}).(PipeTargetStateMachineParametersPtrOutput)
}

type PipeTargetParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetParameters)(nil)).Elem()
}

func (o PipeTargetParametersPtrOutput) ToPipeTargetParametersPtrOutput() PipeTargetParametersPtrOutput {
	return o
}

func (o PipeTargetParametersPtrOutput) ToPipeTargetParametersPtrOutputWithContext(ctx context.Context) PipeTargetParametersPtrOutput {
	return o
}

func (o PipeTargetParametersPtrOutput) Elem() PipeTargetParametersOutput {
	return o.ApplyT(func(v *PipeTargetParameters) PipeTargetParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetParameters
		return ret
	}).(PipeTargetParametersOutput)
}

func (o PipeTargetParametersPtrOutput) BatchJobParameters() PipeTargetBatchJobParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetBatchJobParameters {
		if v == nil {
			return nil
		}
		return v.BatchJobParameters
	}).(PipeTargetBatchJobParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) CloudWatchLogsParameters() PipeTargetCloudWatchLogsParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetCloudWatchLogsParameters {
		if v == nil {
			return nil
		}
		return v.CloudWatchLogsParameters
	}).(PipeTargetCloudWatchLogsParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) EcsTaskParameters() PipeTargetEcsTaskParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetEcsTaskParameters {
		if v == nil {
			return nil
		}
		return v.EcsTaskParameters
	}).(PipeTargetEcsTaskParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) EventBridgeEventBusParameters() PipeTargetEventBridgeEventBusParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetEventBridgeEventBusParameters {
		if v == nil {
			return nil
		}
		return v.EventBridgeEventBusParameters
	}).(PipeTargetEventBridgeEventBusParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) HttpParameters() PipeTargetHttpParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetHttpParameters {
		if v == nil {
			return nil
		}
		return v.HttpParameters
	}).(PipeTargetHttpParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) InputTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *string {
		if v == nil {
			return nil
		}
		return v.InputTemplate
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetParametersPtrOutput) KinesisStreamParameters() PipeTargetKinesisStreamParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetKinesisStreamParameters {
		if v == nil {
			return nil
		}
		return v.KinesisStreamParameters
	}).(PipeTargetKinesisStreamParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) LambdaFunctionParameters() PipeTargetLambdaFunctionParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetLambdaFunctionParameters {
		if v == nil {
			return nil
		}
		return v.LambdaFunctionParameters
	}).(PipeTargetLambdaFunctionParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) RedshiftDataParameters() PipeTargetRedshiftDataParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetRedshiftDataParameters {
		if v == nil {
			return nil
		}
		return v.RedshiftDataParameters
	}).(PipeTargetRedshiftDataParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) SageMakerPipelineParameters() PipeTargetSageMakerPipelineParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetSageMakerPipelineParameters {
		if v == nil {
			return nil
		}
		return v.SageMakerPipelineParameters
	}).(PipeTargetSageMakerPipelineParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) SqsQueueParameters() PipeTargetSqsQueueParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetSqsQueueParameters {
		if v == nil {
			return nil
		}
		return v.SqsQueueParameters
	}).(PipeTargetSqsQueueParametersPtrOutput)
}

func (o PipeTargetParametersPtrOutput) StepFunctionStateMachineParameters() PipeTargetStateMachineParametersPtrOutput {
	return o.ApplyT(func(v *PipeTargetParameters) *PipeTargetStateMachineParameters {
		if v == nil {
			return nil
		}
		return v.StepFunctionStateMachineParameters
	}).(PipeTargetStateMachineParametersPtrOutput)
}

type PipeTargetRedshiftDataParameters struct {
	// Redshift Database
	Database string `pulumi:"database"`
	// Database user name
	DbUser *string `pulumi:"dbUser"`
	// Optional SecretManager ARN which stores the database credentials
	SecretManagerArn *string `pulumi:"secretManagerArn"`
	// A list of SQLs.
	Sqls []string `pulumi:"sqls"`
	// A name for Redshift DataAPI statement which can be used as filter of ListStatement.
	StatementName *string `pulumi:"statementName"`
	WithEvent     *bool   `pulumi:"withEvent"`
}

// PipeTargetRedshiftDataParametersInput is an input type that accepts PipeTargetRedshiftDataParametersArgs and PipeTargetRedshiftDataParametersOutput values.
// You can construct a concrete instance of `PipeTargetRedshiftDataParametersInput` via:
//
//	PipeTargetRedshiftDataParametersArgs{...}
type PipeTargetRedshiftDataParametersInput interface {
	pulumi.Input

	ToPipeTargetRedshiftDataParametersOutput() PipeTargetRedshiftDataParametersOutput
	ToPipeTargetRedshiftDataParametersOutputWithContext(context.Context) PipeTargetRedshiftDataParametersOutput
}

type PipeTargetRedshiftDataParametersArgs struct {
	// Redshift Database
	Database pulumi.StringInput `pulumi:"database"`
	// Database user name
	DbUser pulumi.StringPtrInput `pulumi:"dbUser"`
	// Optional SecretManager ARN which stores the database credentials
	SecretManagerArn pulumi.StringPtrInput `pulumi:"secretManagerArn"`
	// A list of SQLs.
	Sqls pulumi.StringArrayInput `pulumi:"sqls"`
	// A name for Redshift DataAPI statement which can be used as filter of ListStatement.
	StatementName pulumi.StringPtrInput `pulumi:"statementName"`
	WithEvent     pulumi.BoolPtrInput   `pulumi:"withEvent"`
}

func (PipeTargetRedshiftDataParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetRedshiftDataParameters)(nil)).Elem()
}

func (i PipeTargetRedshiftDataParametersArgs) ToPipeTargetRedshiftDataParametersOutput() PipeTargetRedshiftDataParametersOutput {
	return i.ToPipeTargetRedshiftDataParametersOutputWithContext(context.Background())
}

func (i PipeTargetRedshiftDataParametersArgs) ToPipeTargetRedshiftDataParametersOutputWithContext(ctx context.Context) PipeTargetRedshiftDataParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetRedshiftDataParametersOutput)
}

func (i PipeTargetRedshiftDataParametersArgs) ToPipeTargetRedshiftDataParametersPtrOutput() PipeTargetRedshiftDataParametersPtrOutput {
	return i.ToPipeTargetRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetRedshiftDataParametersArgs) ToPipeTargetRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetRedshiftDataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetRedshiftDataParametersOutput).ToPipeTargetRedshiftDataParametersPtrOutputWithContext(ctx)
}

// PipeTargetRedshiftDataParametersPtrInput is an input type that accepts PipeTargetRedshiftDataParametersArgs, PipeTargetRedshiftDataParametersPtr and PipeTargetRedshiftDataParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetRedshiftDataParametersPtrInput` via:
//
//	        PipeTargetRedshiftDataParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetRedshiftDataParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetRedshiftDataParametersPtrOutput() PipeTargetRedshiftDataParametersPtrOutput
	ToPipeTargetRedshiftDataParametersPtrOutputWithContext(context.Context) PipeTargetRedshiftDataParametersPtrOutput
}

type pipeTargetRedshiftDataParametersPtrType PipeTargetRedshiftDataParametersArgs

func PipeTargetRedshiftDataParametersPtr(v *PipeTargetRedshiftDataParametersArgs) PipeTargetRedshiftDataParametersPtrInput {
	return (*pipeTargetRedshiftDataParametersPtrType)(v)
}

func (*pipeTargetRedshiftDataParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetRedshiftDataParameters)(nil)).Elem()
}

func (i *pipeTargetRedshiftDataParametersPtrType) ToPipeTargetRedshiftDataParametersPtrOutput() PipeTargetRedshiftDataParametersPtrOutput {
	return i.ToPipeTargetRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetRedshiftDataParametersPtrType) ToPipeTargetRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetRedshiftDataParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetRedshiftDataParametersPtrOutput)
}

type PipeTargetRedshiftDataParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetRedshiftDataParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetRedshiftDataParameters)(nil)).Elem()
}

func (o PipeTargetRedshiftDataParametersOutput) ToPipeTargetRedshiftDataParametersOutput() PipeTargetRedshiftDataParametersOutput {
	return o
}

func (o PipeTargetRedshiftDataParametersOutput) ToPipeTargetRedshiftDataParametersOutputWithContext(ctx context.Context) PipeTargetRedshiftDataParametersOutput {
	return o
}

func (o PipeTargetRedshiftDataParametersOutput) ToPipeTargetRedshiftDataParametersPtrOutput() PipeTargetRedshiftDataParametersPtrOutput {
	return o.ToPipeTargetRedshiftDataParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetRedshiftDataParametersOutput) ToPipeTargetRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetRedshiftDataParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetRedshiftDataParameters) *PipeTargetRedshiftDataParameters {
		return &v
	}).(PipeTargetRedshiftDataParametersPtrOutput)
}

// Redshift Database
func (o PipeTargetRedshiftDataParametersOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v PipeTargetRedshiftDataParameters) string { return v.Database }).(pulumi.StringOutput)
}

// Database user name
func (o PipeTargetRedshiftDataParametersOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetRedshiftDataParameters) *string { return v.DbUser }).(pulumi.StringPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeTargetRedshiftDataParametersOutput) SecretManagerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetRedshiftDataParameters) *string { return v.SecretManagerArn }).(pulumi.StringPtrOutput)
}

// A list of SQLs.
func (o PipeTargetRedshiftDataParametersOutput) Sqls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipeTargetRedshiftDataParameters) []string { return v.Sqls }).(pulumi.StringArrayOutput)
}

// A name for Redshift DataAPI statement which can be used as filter of ListStatement.
func (o PipeTargetRedshiftDataParametersOutput) StatementName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetRedshiftDataParameters) *string { return v.StatementName }).(pulumi.StringPtrOutput)
}

func (o PipeTargetRedshiftDataParametersOutput) WithEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipeTargetRedshiftDataParameters) *bool { return v.WithEvent }).(pulumi.BoolPtrOutput)
}

type PipeTargetRedshiftDataParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetRedshiftDataParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetRedshiftDataParameters)(nil)).Elem()
}

func (o PipeTargetRedshiftDataParametersPtrOutput) ToPipeTargetRedshiftDataParametersPtrOutput() PipeTargetRedshiftDataParametersPtrOutput {
	return o
}

func (o PipeTargetRedshiftDataParametersPtrOutput) ToPipeTargetRedshiftDataParametersPtrOutputWithContext(ctx context.Context) PipeTargetRedshiftDataParametersPtrOutput {
	return o
}

func (o PipeTargetRedshiftDataParametersPtrOutput) Elem() PipeTargetRedshiftDataParametersOutput {
	return o.ApplyT(func(v *PipeTargetRedshiftDataParameters) PipeTargetRedshiftDataParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetRedshiftDataParameters
		return ret
	}).(PipeTargetRedshiftDataParametersOutput)
}

// Redshift Database
func (o PipeTargetRedshiftDataParametersPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// Database user name
func (o PipeTargetRedshiftDataParametersPtrOutput) DbUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.DbUser
	}).(pulumi.StringPtrOutput)
}

// Optional SecretManager ARN which stores the database credentials
func (o PipeTargetRedshiftDataParametersPtrOutput) SecretManagerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.SecretManagerArn
	}).(pulumi.StringPtrOutput)
}

// A list of SQLs.
func (o PipeTargetRedshiftDataParametersPtrOutput) Sqls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipeTargetRedshiftDataParameters) []string {
		if v == nil {
			return nil
		}
		return v.Sqls
	}).(pulumi.StringArrayOutput)
}

// A name for Redshift DataAPI statement which can be used as filter of ListStatement.
func (o PipeTargetRedshiftDataParametersPtrOutput) StatementName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetRedshiftDataParameters) *string {
		if v == nil {
			return nil
		}
		return v.StatementName
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetRedshiftDataParametersPtrOutput) WithEvent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PipeTargetRedshiftDataParameters) *bool {
		if v == nil {
			return nil
		}
		return v.WithEvent
	}).(pulumi.BoolPtrOutput)
}

type PipeTargetSageMakerPipelineParameters struct {
	PipelineParameterList []PipeSageMakerPipelineParameter `pulumi:"pipelineParameterList"`
}

// PipeTargetSageMakerPipelineParametersInput is an input type that accepts PipeTargetSageMakerPipelineParametersArgs and PipeTargetSageMakerPipelineParametersOutput values.
// You can construct a concrete instance of `PipeTargetSageMakerPipelineParametersInput` via:
//
//	PipeTargetSageMakerPipelineParametersArgs{...}
type PipeTargetSageMakerPipelineParametersInput interface {
	pulumi.Input

	ToPipeTargetSageMakerPipelineParametersOutput() PipeTargetSageMakerPipelineParametersOutput
	ToPipeTargetSageMakerPipelineParametersOutputWithContext(context.Context) PipeTargetSageMakerPipelineParametersOutput
}

type PipeTargetSageMakerPipelineParametersArgs struct {
	PipelineParameterList PipeSageMakerPipelineParameterArrayInput `pulumi:"pipelineParameterList"`
}

func (PipeTargetSageMakerPipelineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetSageMakerPipelineParameters)(nil)).Elem()
}

func (i PipeTargetSageMakerPipelineParametersArgs) ToPipeTargetSageMakerPipelineParametersOutput() PipeTargetSageMakerPipelineParametersOutput {
	return i.ToPipeTargetSageMakerPipelineParametersOutputWithContext(context.Background())
}

func (i PipeTargetSageMakerPipelineParametersArgs) ToPipeTargetSageMakerPipelineParametersOutputWithContext(ctx context.Context) PipeTargetSageMakerPipelineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetSageMakerPipelineParametersOutput)
}

func (i PipeTargetSageMakerPipelineParametersArgs) ToPipeTargetSageMakerPipelineParametersPtrOutput() PipeTargetSageMakerPipelineParametersPtrOutput {
	return i.ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetSageMakerPipelineParametersArgs) ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetSageMakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetSageMakerPipelineParametersOutput).ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(ctx)
}

// PipeTargetSageMakerPipelineParametersPtrInput is an input type that accepts PipeTargetSageMakerPipelineParametersArgs, PipeTargetSageMakerPipelineParametersPtr and PipeTargetSageMakerPipelineParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetSageMakerPipelineParametersPtrInput` via:
//
//	        PipeTargetSageMakerPipelineParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetSageMakerPipelineParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetSageMakerPipelineParametersPtrOutput() PipeTargetSageMakerPipelineParametersPtrOutput
	ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(context.Context) PipeTargetSageMakerPipelineParametersPtrOutput
}

type pipeTargetSageMakerPipelineParametersPtrType PipeTargetSageMakerPipelineParametersArgs

func PipeTargetSageMakerPipelineParametersPtr(v *PipeTargetSageMakerPipelineParametersArgs) PipeTargetSageMakerPipelineParametersPtrInput {
	return (*pipeTargetSageMakerPipelineParametersPtrType)(v)
}

func (*pipeTargetSageMakerPipelineParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetSageMakerPipelineParameters)(nil)).Elem()
}

func (i *pipeTargetSageMakerPipelineParametersPtrType) ToPipeTargetSageMakerPipelineParametersPtrOutput() PipeTargetSageMakerPipelineParametersPtrOutput {
	return i.ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetSageMakerPipelineParametersPtrType) ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetSageMakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetSageMakerPipelineParametersPtrOutput)
}

type PipeTargetSageMakerPipelineParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetSageMakerPipelineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetSageMakerPipelineParameters)(nil)).Elem()
}

func (o PipeTargetSageMakerPipelineParametersOutput) ToPipeTargetSageMakerPipelineParametersOutput() PipeTargetSageMakerPipelineParametersOutput {
	return o
}

func (o PipeTargetSageMakerPipelineParametersOutput) ToPipeTargetSageMakerPipelineParametersOutputWithContext(ctx context.Context) PipeTargetSageMakerPipelineParametersOutput {
	return o
}

func (o PipeTargetSageMakerPipelineParametersOutput) ToPipeTargetSageMakerPipelineParametersPtrOutput() PipeTargetSageMakerPipelineParametersPtrOutput {
	return o.ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetSageMakerPipelineParametersOutput) ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetSageMakerPipelineParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetSageMakerPipelineParameters) *PipeTargetSageMakerPipelineParameters {
		return &v
	}).(PipeTargetSageMakerPipelineParametersPtrOutput)
}

func (o PipeTargetSageMakerPipelineParametersOutput) PipelineParameterList() PipeSageMakerPipelineParameterArrayOutput {
	return o.ApplyT(func(v PipeTargetSageMakerPipelineParameters) []PipeSageMakerPipelineParameter {
		return v.PipelineParameterList
	}).(PipeSageMakerPipelineParameterArrayOutput)
}

type PipeTargetSageMakerPipelineParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetSageMakerPipelineParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetSageMakerPipelineParameters)(nil)).Elem()
}

func (o PipeTargetSageMakerPipelineParametersPtrOutput) ToPipeTargetSageMakerPipelineParametersPtrOutput() PipeTargetSageMakerPipelineParametersPtrOutput {
	return o
}

func (o PipeTargetSageMakerPipelineParametersPtrOutput) ToPipeTargetSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) PipeTargetSageMakerPipelineParametersPtrOutput {
	return o
}

func (o PipeTargetSageMakerPipelineParametersPtrOutput) Elem() PipeTargetSageMakerPipelineParametersOutput {
	return o.ApplyT(func(v *PipeTargetSageMakerPipelineParameters) PipeTargetSageMakerPipelineParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetSageMakerPipelineParameters
		return ret
	}).(PipeTargetSageMakerPipelineParametersOutput)
}

func (o PipeTargetSageMakerPipelineParametersPtrOutput) PipelineParameterList() PipeSageMakerPipelineParameterArrayOutput {
	return o.ApplyT(func(v *PipeTargetSageMakerPipelineParameters) []PipeSageMakerPipelineParameter {
		if v == nil {
			return nil
		}
		return v.PipelineParameterList
	}).(PipeSageMakerPipelineParameterArrayOutput)
}

type PipeTargetSqsQueueParameters struct {
	MessageDeduplicationId *string `pulumi:"messageDeduplicationId"`
	MessageGroupId         *string `pulumi:"messageGroupId"`
}

// PipeTargetSqsQueueParametersInput is an input type that accepts PipeTargetSqsQueueParametersArgs and PipeTargetSqsQueueParametersOutput values.
// You can construct a concrete instance of `PipeTargetSqsQueueParametersInput` via:
//
//	PipeTargetSqsQueueParametersArgs{...}
type PipeTargetSqsQueueParametersInput interface {
	pulumi.Input

	ToPipeTargetSqsQueueParametersOutput() PipeTargetSqsQueueParametersOutput
	ToPipeTargetSqsQueueParametersOutputWithContext(context.Context) PipeTargetSqsQueueParametersOutput
}

type PipeTargetSqsQueueParametersArgs struct {
	MessageDeduplicationId pulumi.StringPtrInput `pulumi:"messageDeduplicationId"`
	MessageGroupId         pulumi.StringPtrInput `pulumi:"messageGroupId"`
}

func (PipeTargetSqsQueueParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetSqsQueueParameters)(nil)).Elem()
}

func (i PipeTargetSqsQueueParametersArgs) ToPipeTargetSqsQueueParametersOutput() PipeTargetSqsQueueParametersOutput {
	return i.ToPipeTargetSqsQueueParametersOutputWithContext(context.Background())
}

func (i PipeTargetSqsQueueParametersArgs) ToPipeTargetSqsQueueParametersOutputWithContext(ctx context.Context) PipeTargetSqsQueueParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetSqsQueueParametersOutput)
}

func (i PipeTargetSqsQueueParametersArgs) ToPipeTargetSqsQueueParametersPtrOutput() PipeTargetSqsQueueParametersPtrOutput {
	return i.ToPipeTargetSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetSqsQueueParametersArgs) ToPipeTargetSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetSqsQueueParametersOutput).ToPipeTargetSqsQueueParametersPtrOutputWithContext(ctx)
}

// PipeTargetSqsQueueParametersPtrInput is an input type that accepts PipeTargetSqsQueueParametersArgs, PipeTargetSqsQueueParametersPtr and PipeTargetSqsQueueParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetSqsQueueParametersPtrInput` via:
//
//	        PipeTargetSqsQueueParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetSqsQueueParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetSqsQueueParametersPtrOutput() PipeTargetSqsQueueParametersPtrOutput
	ToPipeTargetSqsQueueParametersPtrOutputWithContext(context.Context) PipeTargetSqsQueueParametersPtrOutput
}

type pipeTargetSqsQueueParametersPtrType PipeTargetSqsQueueParametersArgs

func PipeTargetSqsQueueParametersPtr(v *PipeTargetSqsQueueParametersArgs) PipeTargetSqsQueueParametersPtrInput {
	return (*pipeTargetSqsQueueParametersPtrType)(v)
}

func (*pipeTargetSqsQueueParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetSqsQueueParameters)(nil)).Elem()
}

func (i *pipeTargetSqsQueueParametersPtrType) ToPipeTargetSqsQueueParametersPtrOutput() PipeTargetSqsQueueParametersPtrOutput {
	return i.ToPipeTargetSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetSqsQueueParametersPtrType) ToPipeTargetSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetSqsQueueParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetSqsQueueParametersPtrOutput)
}

type PipeTargetSqsQueueParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetSqsQueueParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetSqsQueueParameters)(nil)).Elem()
}

func (o PipeTargetSqsQueueParametersOutput) ToPipeTargetSqsQueueParametersOutput() PipeTargetSqsQueueParametersOutput {
	return o
}

func (o PipeTargetSqsQueueParametersOutput) ToPipeTargetSqsQueueParametersOutputWithContext(ctx context.Context) PipeTargetSqsQueueParametersOutput {
	return o
}

func (o PipeTargetSqsQueueParametersOutput) ToPipeTargetSqsQueueParametersPtrOutput() PipeTargetSqsQueueParametersPtrOutput {
	return o.ToPipeTargetSqsQueueParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetSqsQueueParametersOutput) ToPipeTargetSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetSqsQueueParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetSqsQueueParameters) *PipeTargetSqsQueueParameters {
		return &v
	}).(PipeTargetSqsQueueParametersPtrOutput)
}

func (o PipeTargetSqsQueueParametersOutput) MessageDeduplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetSqsQueueParameters) *string { return v.MessageDeduplicationId }).(pulumi.StringPtrOutput)
}

func (o PipeTargetSqsQueueParametersOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipeTargetSqsQueueParameters) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type PipeTargetSqsQueueParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetSqsQueueParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetSqsQueueParameters)(nil)).Elem()
}

func (o PipeTargetSqsQueueParametersPtrOutput) ToPipeTargetSqsQueueParametersPtrOutput() PipeTargetSqsQueueParametersPtrOutput {
	return o
}

func (o PipeTargetSqsQueueParametersPtrOutput) ToPipeTargetSqsQueueParametersPtrOutputWithContext(ctx context.Context) PipeTargetSqsQueueParametersPtrOutput {
	return o
}

func (o PipeTargetSqsQueueParametersPtrOutput) Elem() PipeTargetSqsQueueParametersOutput {
	return o.ApplyT(func(v *PipeTargetSqsQueueParameters) PipeTargetSqsQueueParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetSqsQueueParameters
		return ret
	}).(PipeTargetSqsQueueParametersOutput)
}

func (o PipeTargetSqsQueueParametersPtrOutput) MessageDeduplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetSqsQueueParameters) *string {
		if v == nil {
			return nil
		}
		return v.MessageDeduplicationId
	}).(pulumi.StringPtrOutput)
}

func (o PipeTargetSqsQueueParametersPtrOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipeTargetSqsQueueParameters) *string {
		if v == nil {
			return nil
		}
		return v.MessageGroupId
	}).(pulumi.StringPtrOutput)
}

type PipeTargetStateMachineParameters struct {
	InvocationType *PipeTargetInvocationType `pulumi:"invocationType"`
}

// PipeTargetStateMachineParametersInput is an input type that accepts PipeTargetStateMachineParametersArgs and PipeTargetStateMachineParametersOutput values.
// You can construct a concrete instance of `PipeTargetStateMachineParametersInput` via:
//
//	PipeTargetStateMachineParametersArgs{...}
type PipeTargetStateMachineParametersInput interface {
	pulumi.Input

	ToPipeTargetStateMachineParametersOutput() PipeTargetStateMachineParametersOutput
	ToPipeTargetStateMachineParametersOutputWithContext(context.Context) PipeTargetStateMachineParametersOutput
}

type PipeTargetStateMachineParametersArgs struct {
	InvocationType PipeTargetInvocationTypePtrInput `pulumi:"invocationType"`
}

func (PipeTargetStateMachineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetStateMachineParameters)(nil)).Elem()
}

func (i PipeTargetStateMachineParametersArgs) ToPipeTargetStateMachineParametersOutput() PipeTargetStateMachineParametersOutput {
	return i.ToPipeTargetStateMachineParametersOutputWithContext(context.Background())
}

func (i PipeTargetStateMachineParametersArgs) ToPipeTargetStateMachineParametersOutputWithContext(ctx context.Context) PipeTargetStateMachineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetStateMachineParametersOutput)
}

func (i PipeTargetStateMachineParametersArgs) ToPipeTargetStateMachineParametersPtrOutput() PipeTargetStateMachineParametersPtrOutput {
	return i.ToPipeTargetStateMachineParametersPtrOutputWithContext(context.Background())
}

func (i PipeTargetStateMachineParametersArgs) ToPipeTargetStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetStateMachineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetStateMachineParametersOutput).ToPipeTargetStateMachineParametersPtrOutputWithContext(ctx)
}

// PipeTargetStateMachineParametersPtrInput is an input type that accepts PipeTargetStateMachineParametersArgs, PipeTargetStateMachineParametersPtr and PipeTargetStateMachineParametersPtrOutput values.
// You can construct a concrete instance of `PipeTargetStateMachineParametersPtrInput` via:
//
//	        PipeTargetStateMachineParametersArgs{...}
//
//	or:
//
//	        nil
type PipeTargetStateMachineParametersPtrInput interface {
	pulumi.Input

	ToPipeTargetStateMachineParametersPtrOutput() PipeTargetStateMachineParametersPtrOutput
	ToPipeTargetStateMachineParametersPtrOutputWithContext(context.Context) PipeTargetStateMachineParametersPtrOutput
}

type pipeTargetStateMachineParametersPtrType PipeTargetStateMachineParametersArgs

func PipeTargetStateMachineParametersPtr(v *PipeTargetStateMachineParametersArgs) PipeTargetStateMachineParametersPtrInput {
	return (*pipeTargetStateMachineParametersPtrType)(v)
}

func (*pipeTargetStateMachineParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetStateMachineParameters)(nil)).Elem()
}

func (i *pipeTargetStateMachineParametersPtrType) ToPipeTargetStateMachineParametersPtrOutput() PipeTargetStateMachineParametersPtrOutput {
	return i.ToPipeTargetStateMachineParametersPtrOutputWithContext(context.Background())
}

func (i *pipeTargetStateMachineParametersPtrType) ToPipeTargetStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetStateMachineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipeTargetStateMachineParametersPtrOutput)
}

type PipeTargetStateMachineParametersOutput struct{ *pulumi.OutputState }

func (PipeTargetStateMachineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipeTargetStateMachineParameters)(nil)).Elem()
}

func (o PipeTargetStateMachineParametersOutput) ToPipeTargetStateMachineParametersOutput() PipeTargetStateMachineParametersOutput {
	return o
}

func (o PipeTargetStateMachineParametersOutput) ToPipeTargetStateMachineParametersOutputWithContext(ctx context.Context) PipeTargetStateMachineParametersOutput {
	return o
}

func (o PipeTargetStateMachineParametersOutput) ToPipeTargetStateMachineParametersPtrOutput() PipeTargetStateMachineParametersPtrOutput {
	return o.ToPipeTargetStateMachineParametersPtrOutputWithContext(context.Background())
}

func (o PipeTargetStateMachineParametersOutput) ToPipeTargetStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetStateMachineParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipeTargetStateMachineParameters) *PipeTargetStateMachineParameters {
		return &v
	}).(PipeTargetStateMachineParametersPtrOutput)
}

func (o PipeTargetStateMachineParametersOutput) InvocationType() PipeTargetInvocationTypePtrOutput {
	return o.ApplyT(func(v PipeTargetStateMachineParameters) *PipeTargetInvocationType { return v.InvocationType }).(PipeTargetInvocationTypePtrOutput)
}

type PipeTargetStateMachineParametersPtrOutput struct{ *pulumi.OutputState }

func (PipeTargetStateMachineParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipeTargetStateMachineParameters)(nil)).Elem()
}

func (o PipeTargetStateMachineParametersPtrOutput) ToPipeTargetStateMachineParametersPtrOutput() PipeTargetStateMachineParametersPtrOutput {
	return o
}

func (o PipeTargetStateMachineParametersPtrOutput) ToPipeTargetStateMachineParametersPtrOutputWithContext(ctx context.Context) PipeTargetStateMachineParametersPtrOutput {
	return o
}

func (o PipeTargetStateMachineParametersPtrOutput) Elem() PipeTargetStateMachineParametersOutput {
	return o.ApplyT(func(v *PipeTargetStateMachineParameters) PipeTargetStateMachineParameters {
		if v != nil {
			return *v
		}
		var ret PipeTargetStateMachineParameters
		return ret
	}).(PipeTargetStateMachineParametersOutput)
}

func (o PipeTargetStateMachineParametersPtrOutput) InvocationType() PipeTargetInvocationTypePtrOutput {
	return o.ApplyT(func(v *PipeTargetStateMachineParameters) *PipeTargetInvocationType {
		if v == nil {
			return nil
		}
		return v.InvocationType
	}).(PipeTargetInvocationTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipeAwsVpcConfigurationInput)(nil)).Elem(), PipeAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeAwsVpcConfigurationPtrInput)(nil)).Elem(), PipeAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchArrayPropertiesInput)(nil)).Elem(), PipeBatchArrayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchArrayPropertiesPtrInput)(nil)).Elem(), PipeBatchArrayPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchContainerOverridesInput)(nil)).Elem(), PipeBatchContainerOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchContainerOverridesPtrInput)(nil)).Elem(), PipeBatchContainerOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchEnvironmentVariableInput)(nil)).Elem(), PipeBatchEnvironmentVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchEnvironmentVariableArrayInput)(nil)).Elem(), PipeBatchEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchJobDependencyInput)(nil)).Elem(), PipeBatchJobDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchJobDependencyArrayInput)(nil)).Elem(), PipeBatchJobDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchParametersMapInput)(nil)).Elem(), PipeBatchParametersMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchParametersMapPtrInput)(nil)).Elem(), PipeBatchParametersMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchResourceRequirementInput)(nil)).Elem(), PipeBatchResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchResourceRequirementArrayInput)(nil)).Elem(), PipeBatchResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchRetryStrategyInput)(nil)).Elem(), PipeBatchRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeBatchRetryStrategyPtrInput)(nil)).Elem(), PipeBatchRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeCapacityProviderStrategyItemInput)(nil)).Elem(), PipeCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeCapacityProviderStrategyItemArrayInput)(nil)).Elem(), PipeCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeCloudwatchLogsLogDestinationInput)(nil)).Elem(), PipeCloudwatchLogsLogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeCloudwatchLogsLogDestinationPtrInput)(nil)).Elem(), PipeCloudwatchLogsLogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeDeadLetterConfigInput)(nil)).Elem(), PipeDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeDeadLetterConfigPtrInput)(nil)).Elem(), PipeDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsContainerOverrideInput)(nil)).Elem(), PipeEcsContainerOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsContainerOverrideArrayInput)(nil)).Elem(), PipeEcsContainerOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEnvironmentFileInput)(nil)).Elem(), PipeEcsEnvironmentFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEnvironmentFileArrayInput)(nil)).Elem(), PipeEcsEnvironmentFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEnvironmentVariableInput)(nil)).Elem(), PipeEcsEnvironmentVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEnvironmentVariableArrayInput)(nil)).Elem(), PipeEcsEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEphemeralStorageInput)(nil)).Elem(), PipeEcsEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsEphemeralStoragePtrInput)(nil)).Elem(), PipeEcsEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsInferenceAcceleratorOverrideInput)(nil)).Elem(), PipeEcsInferenceAcceleratorOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsInferenceAcceleratorOverrideArrayInput)(nil)).Elem(), PipeEcsInferenceAcceleratorOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsResourceRequirementInput)(nil)).Elem(), PipeEcsResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsResourceRequirementArrayInput)(nil)).Elem(), PipeEcsResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsTaskOverrideInput)(nil)).Elem(), PipeEcsTaskOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEcsTaskOverridePtrInput)(nil)).Elem(), PipeEcsTaskOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentHttpParametersInput)(nil)).Elem(), PipeEnrichmentHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentHttpParametersPtrInput)(nil)).Elem(), PipeEnrichmentHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentParametersInput)(nil)).Elem(), PipeEnrichmentParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeEnrichmentParametersPtrInput)(nil)).Elem(), PipeEnrichmentParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeFilterInput)(nil)).Elem(), PipeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeFilterArrayInput)(nil)).Elem(), PipeFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeFilterCriteriaInput)(nil)).Elem(), PipeFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeFilterCriteriaPtrInput)(nil)).Elem(), PipeFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeFirehoseLogDestinationInput)(nil)).Elem(), PipeFirehoseLogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeFirehoseLogDestinationPtrInput)(nil)).Elem(), PipeFirehoseLogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeHeaderParametersMapInput)(nil)).Elem(), PipeHeaderParametersMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeHeaderParametersMapPtrInput)(nil)).Elem(), PipeHeaderParametersMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeLogConfigurationInput)(nil)).Elem(), PipeLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeLogConfigurationPtrInput)(nil)).Elem(), PipeLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMqBrokerAccessCredentialsPropertiesInput)(nil)).Elem(), PipeMqBrokerAccessCredentialsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMqBrokerAccessCredentialsPropertiesPtrInput)(nil)).Elem(), PipeMqBrokerAccessCredentialsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMskAccessCredentials0PropertiesInput)(nil)).Elem(), PipeMskAccessCredentials0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMskAccessCredentials0PropertiesPtrInput)(nil)).Elem(), PipeMskAccessCredentials0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMskAccessCredentials1PropertiesInput)(nil)).Elem(), PipeMskAccessCredentials1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeMskAccessCredentials1PropertiesPtrInput)(nil)).Elem(), PipeMskAccessCredentials1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeNetworkConfigurationInput)(nil)).Elem(), PipeNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeNetworkConfigurationPtrInput)(nil)).Elem(), PipeNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementConstraintInput)(nil)).Elem(), PipePlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementConstraintArrayInput)(nil)).Elem(), PipePlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementStrategyInput)(nil)).Elem(), PipePlacementStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipePlacementStrategyArrayInput)(nil)).Elem(), PipePlacementStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeQueryStringParametersMapInput)(nil)).Elem(), PipeQueryStringParametersMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeQueryStringParametersMapPtrInput)(nil)).Elem(), PipeQueryStringParametersMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeS3LogDestinationInput)(nil)).Elem(), PipeS3LogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeS3LogDestinationPtrInput)(nil)).Elem(), PipeS3LogDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSageMakerPipelineParameterInput)(nil)).Elem(), PipeSageMakerPipelineParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSageMakerPipelineParameterArrayInput)(nil)).Elem(), PipeSageMakerPipelineParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationVpcInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSelfManagedKafkaAccessConfigurationVpcPtrInput)(nil)).Elem(), PipeSelfManagedKafkaAccessConfigurationVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceActiveMqBrokerParametersInput)(nil)).Elem(), PipeSourceActiveMqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceActiveMqBrokerParametersPtrInput)(nil)).Elem(), PipeSourceActiveMqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceDynamoDbStreamParametersInput)(nil)).Elem(), PipeSourceDynamoDbStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceDynamoDbStreamParametersPtrInput)(nil)).Elem(), PipeSourceDynamoDbStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceKinesisStreamParametersInput)(nil)).Elem(), PipeSourceKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceKinesisStreamParametersPtrInput)(nil)).Elem(), PipeSourceKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceManagedStreamingKafkaParametersInput)(nil)).Elem(), PipeSourceManagedStreamingKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceManagedStreamingKafkaParametersPtrInput)(nil)).Elem(), PipeSourceManagedStreamingKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersInput)(nil)).Elem(), PipeSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceParametersPtrInput)(nil)).Elem(), PipeSourceParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceRabbitMqBrokerParametersInput)(nil)).Elem(), PipeSourceRabbitMqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceRabbitMqBrokerParametersPtrInput)(nil)).Elem(), PipeSourceRabbitMqBrokerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceSelfManagedKafkaParametersInput)(nil)).Elem(), PipeSourceSelfManagedKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceSelfManagedKafkaParametersPtrInput)(nil)).Elem(), PipeSourceSelfManagedKafkaParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceSqsQueueParametersInput)(nil)).Elem(), PipeSourceSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeSourceSqsQueueParametersPtrInput)(nil)).Elem(), PipeSourceSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTagInput)(nil)).Elem(), PipeTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTagArrayInput)(nil)).Elem(), PipeTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTagMapInput)(nil)).Elem(), PipeTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTagMapPtrInput)(nil)).Elem(), PipeTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetBatchJobParametersInput)(nil)).Elem(), PipeTargetBatchJobParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetBatchJobParametersPtrInput)(nil)).Elem(), PipeTargetBatchJobParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetCloudWatchLogsParametersInput)(nil)).Elem(), PipeTargetCloudWatchLogsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetCloudWatchLogsParametersPtrInput)(nil)).Elem(), PipeTargetCloudWatchLogsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetEcsTaskParametersInput)(nil)).Elem(), PipeTargetEcsTaskParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetEcsTaskParametersPtrInput)(nil)).Elem(), PipeTargetEcsTaskParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetEventBridgeEventBusParametersInput)(nil)).Elem(), PipeTargetEventBridgeEventBusParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetEventBridgeEventBusParametersPtrInput)(nil)).Elem(), PipeTargetEventBridgeEventBusParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetHttpParametersInput)(nil)).Elem(), PipeTargetHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetHttpParametersPtrInput)(nil)).Elem(), PipeTargetHttpParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetKinesisStreamParametersInput)(nil)).Elem(), PipeTargetKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetKinesisStreamParametersPtrInput)(nil)).Elem(), PipeTargetKinesisStreamParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetLambdaFunctionParametersInput)(nil)).Elem(), PipeTargetLambdaFunctionParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetLambdaFunctionParametersPtrInput)(nil)).Elem(), PipeTargetLambdaFunctionParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersInput)(nil)).Elem(), PipeTargetParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetParametersPtrInput)(nil)).Elem(), PipeTargetParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetRedshiftDataParametersInput)(nil)).Elem(), PipeTargetRedshiftDataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetRedshiftDataParametersPtrInput)(nil)).Elem(), PipeTargetRedshiftDataParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetSageMakerPipelineParametersInput)(nil)).Elem(), PipeTargetSageMakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetSageMakerPipelineParametersPtrInput)(nil)).Elem(), PipeTargetSageMakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetSqsQueueParametersInput)(nil)).Elem(), PipeTargetSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetSqsQueueParametersPtrInput)(nil)).Elem(), PipeTargetSqsQueueParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetStateMachineParametersInput)(nil)).Elem(), PipeTargetStateMachineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipeTargetStateMachineParametersPtrInput)(nil)).Elem(), PipeTargetStateMachineParametersArgs{})
	pulumi.RegisterOutputType(PipeAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(PipeAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PipeBatchArrayPropertiesOutput{})
	pulumi.RegisterOutputType(PipeBatchArrayPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeBatchContainerOverridesOutput{})
	pulumi.RegisterOutputType(PipeBatchContainerOverridesPtrOutput{})
	pulumi.RegisterOutputType(PipeBatchEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(PipeBatchEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(PipeBatchJobDependencyOutput{})
	pulumi.RegisterOutputType(PipeBatchJobDependencyArrayOutput{})
	pulumi.RegisterOutputType(PipeBatchParametersMapOutput{})
	pulumi.RegisterOutputType(PipeBatchParametersMapPtrOutput{})
	pulumi.RegisterOutputType(PipeBatchResourceRequirementOutput{})
	pulumi.RegisterOutputType(PipeBatchResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(PipeBatchRetryStrategyOutput{})
	pulumi.RegisterOutputType(PipeBatchRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(PipeCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(PipeCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(PipeCloudwatchLogsLogDestinationOutput{})
	pulumi.RegisterOutputType(PipeCloudwatchLogsLogDestinationPtrOutput{})
	pulumi.RegisterOutputType(PipeDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(PipeDeadLetterConfigPtrOutput{})
	pulumi.RegisterOutputType(PipeEcsContainerOverrideOutput{})
	pulumi.RegisterOutputType(PipeEcsContainerOverrideArrayOutput{})
	pulumi.RegisterOutputType(PipeEcsEnvironmentFileOutput{})
	pulumi.RegisterOutputType(PipeEcsEnvironmentFileArrayOutput{})
	pulumi.RegisterOutputType(PipeEcsEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(PipeEcsEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(PipeEcsEphemeralStorageOutput{})
	pulumi.RegisterOutputType(PipeEcsEphemeralStoragePtrOutput{})
	pulumi.RegisterOutputType(PipeEcsInferenceAcceleratorOverrideOutput{})
	pulumi.RegisterOutputType(PipeEcsInferenceAcceleratorOverrideArrayOutput{})
	pulumi.RegisterOutputType(PipeEcsResourceRequirementOutput{})
	pulumi.RegisterOutputType(PipeEcsResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(PipeEcsTaskOverrideOutput{})
	pulumi.RegisterOutputType(PipeEcsTaskOverridePtrOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentHttpParametersOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentHttpParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentParametersOutput{})
	pulumi.RegisterOutputType(PipeEnrichmentParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeFilterOutput{})
	pulumi.RegisterOutputType(PipeFilterArrayOutput{})
	pulumi.RegisterOutputType(PipeFilterCriteriaOutput{})
	pulumi.RegisterOutputType(PipeFilterCriteriaPtrOutput{})
	pulumi.RegisterOutputType(PipeFirehoseLogDestinationOutput{})
	pulumi.RegisterOutputType(PipeFirehoseLogDestinationPtrOutput{})
	pulumi.RegisterOutputType(PipeHeaderParametersMapOutput{})
	pulumi.RegisterOutputType(PipeHeaderParametersMapPtrOutput{})
	pulumi.RegisterOutputType(PipeLogConfigurationOutput{})
	pulumi.RegisterOutputType(PipeLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PipeMqBrokerAccessCredentialsPropertiesOutput{})
	pulumi.RegisterOutputType(PipeMqBrokerAccessCredentialsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeMskAccessCredentials0PropertiesOutput{})
	pulumi.RegisterOutputType(PipeMskAccessCredentials0PropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeMskAccessCredentials1PropertiesOutput{})
	pulumi.RegisterOutputType(PipeMskAccessCredentials1PropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(PipeNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PipePlacementConstraintOutput{})
	pulumi.RegisterOutputType(PipePlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(PipePlacementStrategyOutput{})
	pulumi.RegisterOutputType(PipePlacementStrategyArrayOutput{})
	pulumi.RegisterOutputType(PipeQueryStringParametersMapOutput{})
	pulumi.RegisterOutputType(PipeQueryStringParametersMapPtrOutput{})
	pulumi.RegisterOutputType(PipeS3LogDestinationOutput{})
	pulumi.RegisterOutputType(PipeS3LogDestinationPtrOutput{})
	pulumi.RegisterOutputType(PipeSageMakerPipelineParameterOutput{})
	pulumi.RegisterOutputType(PipeSageMakerPipelineParameterArrayOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationVpcOutput{})
	pulumi.RegisterOutputType(PipeSelfManagedKafkaAccessConfigurationVpcPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceActiveMqBrokerParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceActiveMqBrokerParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceDynamoDbStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceDynamoDbStreamParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceKinesisStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceKinesisStreamParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceManagedStreamingKafkaParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceManagedStreamingKafkaParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceRabbitMqBrokerParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceRabbitMqBrokerParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceSelfManagedKafkaParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceSelfManagedKafkaParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeSourceSqsQueueParametersOutput{})
	pulumi.RegisterOutputType(PipeSourceSqsQueueParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTagOutput{})
	pulumi.RegisterOutputType(PipeTagArrayOutput{})
	pulumi.RegisterOutputType(PipeTagMapOutput{})
	pulumi.RegisterOutputType(PipeTagMapPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetBatchJobParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetBatchJobParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetCloudWatchLogsParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetCloudWatchLogsParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetEcsTaskParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetEcsTaskParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetEventBridgeEventBusParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetEventBridgeEventBusParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetHttpParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetHttpParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetKinesisStreamParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetKinesisStreamParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetLambdaFunctionParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetLambdaFunctionParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetRedshiftDataParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetRedshiftDataParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetSageMakerPipelineParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetSageMakerPipelineParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetSqsQueueParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetSqsQueueParametersPtrOutput{})
	pulumi.RegisterOutputType(PipeTargetStateMachineParametersOutput{})
	pulumi.RegisterOutputType(PipeTargetStateMachineParametersPtrOutput{})
}
