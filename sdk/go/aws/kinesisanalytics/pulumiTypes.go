// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesisanalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ApplicationCsvMappingParameters struct {
	RecordColumnDelimiter string `pulumi:"recordColumnDelimiter"`
	RecordRowDelimiter    string `pulumi:"recordRowDelimiter"`
}

// ApplicationCsvMappingParametersInput is an input type that accepts ApplicationCsvMappingParametersArgs and ApplicationCsvMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationCsvMappingParametersInput` via:
//
//	ApplicationCsvMappingParametersArgs{...}
type ApplicationCsvMappingParametersInput interface {
	pulumi.Input

	ToApplicationCsvMappingParametersOutput() ApplicationCsvMappingParametersOutput
	ToApplicationCsvMappingParametersOutputWithContext(context.Context) ApplicationCsvMappingParametersOutput
}

type ApplicationCsvMappingParametersArgs struct {
	RecordColumnDelimiter pulumi.StringInput `pulumi:"recordColumnDelimiter"`
	RecordRowDelimiter    pulumi.StringInput `pulumi:"recordRowDelimiter"`
}

func (ApplicationCsvMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCsvMappingParameters)(nil)).Elem()
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersOutput() ApplicationCsvMappingParametersOutput {
	return i.ToApplicationCsvMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCsvMappingParametersOutput)
}

func (i ApplicationCsvMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationCsvMappingParameters] {
	return pulumix.Output[ApplicationCsvMappingParameters]{
		OutputState: i.ToApplicationCsvMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return i.ToApplicationCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationCsvMappingParametersArgs) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCsvMappingParametersOutput).ToApplicationCsvMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationCsvMappingParametersPtrInput is an input type that accepts ApplicationCsvMappingParametersArgs, ApplicationCsvMappingParametersPtr and ApplicationCsvMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationCsvMappingParametersPtrInput` via:
//
//	        ApplicationCsvMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationCsvMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput
	ToApplicationCsvMappingParametersPtrOutputWithContext(context.Context) ApplicationCsvMappingParametersPtrOutput
}

type applicationCsvMappingParametersPtrType ApplicationCsvMappingParametersArgs

func ApplicationCsvMappingParametersPtr(v *ApplicationCsvMappingParametersArgs) ApplicationCsvMappingParametersPtrInput {
	return (*applicationCsvMappingParametersPtrType)(v)
}

func (*applicationCsvMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCsvMappingParameters)(nil)).Elem()
}

func (i *applicationCsvMappingParametersPtrType) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return i.ToApplicationCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationCsvMappingParametersPtrType) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCsvMappingParametersPtrOutput)
}

func (i *applicationCsvMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCsvMappingParameters] {
	return pulumix.Output[*ApplicationCsvMappingParameters]{
		OutputState: i.ToApplicationCsvMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationCsvMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationCsvMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersOutput() ApplicationCsvMappingParametersOutput {
	return o
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersOutput {
	return o
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return o.ToApplicationCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationCsvMappingParametersOutput) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationCsvMappingParameters) *ApplicationCsvMappingParameters {
		return &v
	}).(ApplicationCsvMappingParametersPtrOutput)
}

func (o ApplicationCsvMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationCsvMappingParameters] {
	return pulumix.Output[ApplicationCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCsvMappingParametersOutput) RecordColumnDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationCsvMappingParameters) string { return v.RecordColumnDelimiter }).(pulumi.StringOutput)
}

func (o ApplicationCsvMappingParametersOutput) RecordRowDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationCsvMappingParameters) string { return v.RecordRowDelimiter }).(pulumi.StringOutput)
}

type ApplicationCsvMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationCsvMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationCsvMappingParametersPtrOutput) ToApplicationCsvMappingParametersPtrOutput() ApplicationCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationCsvMappingParametersPtrOutput) ToApplicationCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationCsvMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationCsvMappingParameters] {
	return pulumix.Output[*ApplicationCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationCsvMappingParametersPtrOutput) Elem() ApplicationCsvMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationCsvMappingParameters) ApplicationCsvMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationCsvMappingParameters
		return ret
	}).(ApplicationCsvMappingParametersOutput)
}

func (o ApplicationCsvMappingParametersPtrOutput) RecordColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordColumnDelimiter
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationCsvMappingParametersPtrOutput) RecordRowDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowDelimiter
	}).(pulumi.StringPtrOutput)
}

type ApplicationInputType struct {
	InputParallelism             *ApplicationInputParallelism             `pulumi:"inputParallelism"`
	InputProcessingConfiguration *ApplicationInputProcessingConfiguration `pulumi:"inputProcessingConfiguration"`
	InputSchema                  ApplicationInputSchema                   `pulumi:"inputSchema"`
	KinesisFirehoseInput         *ApplicationKinesisFirehoseInput         `pulumi:"kinesisFirehoseInput"`
	KinesisStreamsInput          *ApplicationKinesisStreamsInput          `pulumi:"kinesisStreamsInput"`
	NamePrefix                   string                                   `pulumi:"namePrefix"`
}

// ApplicationInputTypeInput is an input type that accepts ApplicationInputTypeArgs and ApplicationInputTypeOutput values.
// You can construct a concrete instance of `ApplicationInputTypeInput` via:
//
//	ApplicationInputTypeArgs{...}
type ApplicationInputTypeInput interface {
	pulumi.Input

	ToApplicationInputTypeOutput() ApplicationInputTypeOutput
	ToApplicationInputTypeOutputWithContext(context.Context) ApplicationInputTypeOutput
}

type ApplicationInputTypeArgs struct {
	InputParallelism             ApplicationInputParallelismPtrInput             `pulumi:"inputParallelism"`
	InputProcessingConfiguration ApplicationInputProcessingConfigurationPtrInput `pulumi:"inputProcessingConfiguration"`
	InputSchema                  ApplicationInputSchemaInput                     `pulumi:"inputSchema"`
	KinesisFirehoseInput         ApplicationKinesisFirehoseInputPtrInput         `pulumi:"kinesisFirehoseInput"`
	KinesisStreamsInput          ApplicationKinesisStreamsInputPtrInput          `pulumi:"kinesisStreamsInput"`
	NamePrefix                   pulumi.StringInput                              `pulumi:"namePrefix"`
}

func (ApplicationInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputType)(nil)).Elem()
}

func (i ApplicationInputTypeArgs) ToApplicationInputTypeOutput() ApplicationInputTypeOutput {
	return i.ToApplicationInputTypeOutputWithContext(context.Background())
}

func (i ApplicationInputTypeArgs) ToApplicationInputTypeOutputWithContext(ctx context.Context) ApplicationInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputTypeOutput)
}

func (i ApplicationInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputType] {
	return pulumix.Output[ApplicationInputType]{
		OutputState: i.ToApplicationInputTypeOutputWithContext(ctx).OutputState,
	}
}

// ApplicationInputTypeArrayInput is an input type that accepts ApplicationInputTypeArray and ApplicationInputTypeArrayOutput values.
// You can construct a concrete instance of `ApplicationInputTypeArrayInput` via:
//
//	ApplicationInputTypeArray{ ApplicationInputTypeArgs{...} }
type ApplicationInputTypeArrayInput interface {
	pulumi.Input

	ToApplicationInputTypeArrayOutput() ApplicationInputTypeArrayOutput
	ToApplicationInputTypeArrayOutputWithContext(context.Context) ApplicationInputTypeArrayOutput
}

type ApplicationInputTypeArray []ApplicationInputTypeInput

func (ApplicationInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationInputType)(nil)).Elem()
}

func (i ApplicationInputTypeArray) ToApplicationInputTypeArrayOutput() ApplicationInputTypeArrayOutput {
	return i.ToApplicationInputTypeArrayOutputWithContext(context.Background())
}

func (i ApplicationInputTypeArray) ToApplicationInputTypeArrayOutputWithContext(ctx context.Context) ApplicationInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputTypeArrayOutput)
}

func (i ApplicationInputTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationInputType] {
	return pulumix.Output[[]ApplicationInputType]{
		OutputState: i.ToApplicationInputTypeArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationInputTypeOutput struct{ *pulumi.OutputState }

func (ApplicationInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputType)(nil)).Elem()
}

func (o ApplicationInputTypeOutput) ToApplicationInputTypeOutput() ApplicationInputTypeOutput {
	return o
}

func (o ApplicationInputTypeOutput) ToApplicationInputTypeOutputWithContext(ctx context.Context) ApplicationInputTypeOutput {
	return o
}

func (o ApplicationInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputType] {
	return pulumix.Output[ApplicationInputType]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputTypeOutput) InputParallelism() ApplicationInputParallelismPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationInputParallelism { return v.InputParallelism }).(ApplicationInputParallelismPtrOutput)
}

func (o ApplicationInputTypeOutput) InputProcessingConfiguration() ApplicationInputProcessingConfigurationPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationInputProcessingConfiguration {
		return v.InputProcessingConfiguration
	}).(ApplicationInputProcessingConfigurationPtrOutput)
}

func (o ApplicationInputTypeOutput) InputSchema() ApplicationInputSchemaOutput {
	return o.ApplyT(func(v ApplicationInputType) ApplicationInputSchema { return v.InputSchema }).(ApplicationInputSchemaOutput)
}

func (o ApplicationInputTypeOutput) KinesisFirehoseInput() ApplicationKinesisFirehoseInputPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationKinesisFirehoseInput { return v.KinesisFirehoseInput }).(ApplicationKinesisFirehoseInputPtrOutput)
}

func (o ApplicationInputTypeOutput) KinesisStreamsInput() ApplicationKinesisStreamsInputPtrOutput {
	return o.ApplyT(func(v ApplicationInputType) *ApplicationKinesisStreamsInput { return v.KinesisStreamsInput }).(ApplicationKinesisStreamsInputPtrOutput)
}

func (o ApplicationInputTypeOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInputType) string { return v.NamePrefix }).(pulumi.StringOutput)
}

type ApplicationInputTypeArrayOutput struct{ *pulumi.OutputState }

func (ApplicationInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationInputType)(nil)).Elem()
}

func (o ApplicationInputTypeArrayOutput) ToApplicationInputTypeArrayOutput() ApplicationInputTypeArrayOutput {
	return o
}

func (o ApplicationInputTypeArrayOutput) ToApplicationInputTypeArrayOutputWithContext(ctx context.Context) ApplicationInputTypeArrayOutput {
	return o
}

func (o ApplicationInputTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationInputType] {
	return pulumix.Output[[]ApplicationInputType]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputTypeArrayOutput) Index(i pulumi.IntInput) ApplicationInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationInputType {
		return vs[0].([]ApplicationInputType)[vs[1].(int)]
	}).(ApplicationInputTypeOutput)
}

type ApplicationInputLambdaProcessor struct {
	ResourceArn string `pulumi:"resourceArn"`
	RoleArn     string `pulumi:"roleArn"`
}

// ApplicationInputLambdaProcessorInput is an input type that accepts ApplicationInputLambdaProcessorArgs and ApplicationInputLambdaProcessorOutput values.
// You can construct a concrete instance of `ApplicationInputLambdaProcessorInput` via:
//
//	ApplicationInputLambdaProcessorArgs{...}
type ApplicationInputLambdaProcessorInput interface {
	pulumi.Input

	ToApplicationInputLambdaProcessorOutput() ApplicationInputLambdaProcessorOutput
	ToApplicationInputLambdaProcessorOutputWithContext(context.Context) ApplicationInputLambdaProcessorOutput
}

type ApplicationInputLambdaProcessorArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	RoleArn     pulumi.StringInput `pulumi:"roleArn"`
}

func (ApplicationInputLambdaProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorOutput() ApplicationInputLambdaProcessorOutput {
	return i.ToApplicationInputLambdaProcessorOutputWithContext(context.Background())
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputLambdaProcessorOutput)
}

func (i ApplicationInputLambdaProcessorArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputLambdaProcessor] {
	return pulumix.Output[ApplicationInputLambdaProcessor]{
		OutputState: i.ToApplicationInputLambdaProcessorOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return i.ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Background())
}

func (i ApplicationInputLambdaProcessorArgs) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputLambdaProcessorOutput).ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx)
}

// ApplicationInputLambdaProcessorPtrInput is an input type that accepts ApplicationInputLambdaProcessorArgs, ApplicationInputLambdaProcessorPtr and ApplicationInputLambdaProcessorPtrOutput values.
// You can construct a concrete instance of `ApplicationInputLambdaProcessorPtrInput` via:
//
//	        ApplicationInputLambdaProcessorArgs{...}
//
//	or:
//
//	        nil
type ApplicationInputLambdaProcessorPtrInput interface {
	pulumi.Input

	ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput
	ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Context) ApplicationInputLambdaProcessorPtrOutput
}

type applicationInputLambdaProcessorPtrType ApplicationInputLambdaProcessorArgs

func ApplicationInputLambdaProcessorPtr(v *ApplicationInputLambdaProcessorArgs) ApplicationInputLambdaProcessorPtrInput {
	return (*applicationInputLambdaProcessorPtrType)(v)
}

func (*applicationInputLambdaProcessorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (i *applicationInputLambdaProcessorPtrType) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return i.ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Background())
}

func (i *applicationInputLambdaProcessorPtrType) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputLambdaProcessorPtrOutput)
}

func (i *applicationInputLambdaProcessorPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputLambdaProcessor] {
	return pulumix.Output[*ApplicationInputLambdaProcessor]{
		OutputState: i.ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationInputLambdaProcessorOutput struct{ *pulumi.OutputState }

func (ApplicationInputLambdaProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorOutput() ApplicationInputLambdaProcessorOutput {
	return o
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorOutput {
	return o
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return o.ToApplicationInputLambdaProcessorPtrOutputWithContext(context.Background())
}

func (o ApplicationInputLambdaProcessorOutput) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInputLambdaProcessor) *ApplicationInputLambdaProcessor {
		return &v
	}).(ApplicationInputLambdaProcessorPtrOutput)
}

func (o ApplicationInputLambdaProcessorOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputLambdaProcessor] {
	return pulumix.Output[ApplicationInputLambdaProcessor]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputLambdaProcessorOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInputLambdaProcessor) string { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ApplicationInputLambdaProcessorOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInputLambdaProcessor) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ApplicationInputLambdaProcessorPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInputLambdaProcessorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputLambdaProcessor)(nil)).Elem()
}

func (o ApplicationInputLambdaProcessorPtrOutput) ToApplicationInputLambdaProcessorPtrOutput() ApplicationInputLambdaProcessorPtrOutput {
	return o
}

func (o ApplicationInputLambdaProcessorPtrOutput) ToApplicationInputLambdaProcessorPtrOutputWithContext(ctx context.Context) ApplicationInputLambdaProcessorPtrOutput {
	return o
}

func (o ApplicationInputLambdaProcessorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputLambdaProcessor] {
	return pulumix.Output[*ApplicationInputLambdaProcessor]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputLambdaProcessorPtrOutput) Elem() ApplicationInputLambdaProcessorOutput {
	return o.ApplyT(func(v *ApplicationInputLambdaProcessor) ApplicationInputLambdaProcessor {
		if v != nil {
			return *v
		}
		var ret ApplicationInputLambdaProcessor
		return ret
	}).(ApplicationInputLambdaProcessorOutput)
}

func (o ApplicationInputLambdaProcessorPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInputLambdaProcessor) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationInputLambdaProcessorPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInputLambdaProcessor) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationInputParallelism struct {
	Count *int `pulumi:"count"`
}

// ApplicationInputParallelismInput is an input type that accepts ApplicationInputParallelismArgs and ApplicationInputParallelismOutput values.
// You can construct a concrete instance of `ApplicationInputParallelismInput` via:
//
//	ApplicationInputParallelismArgs{...}
type ApplicationInputParallelismInput interface {
	pulumi.Input

	ToApplicationInputParallelismOutput() ApplicationInputParallelismOutput
	ToApplicationInputParallelismOutputWithContext(context.Context) ApplicationInputParallelismOutput
}

type ApplicationInputParallelismArgs struct {
	Count pulumi.IntPtrInput `pulumi:"count"`
}

func (ApplicationInputParallelismArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputParallelism)(nil)).Elem()
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismOutput() ApplicationInputParallelismOutput {
	return i.ToApplicationInputParallelismOutputWithContext(context.Background())
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismOutputWithContext(ctx context.Context) ApplicationInputParallelismOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputParallelismOutput)
}

func (i ApplicationInputParallelismArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputParallelism] {
	return pulumix.Output[ApplicationInputParallelism]{
		OutputState: i.ToApplicationInputParallelismOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return i.ToApplicationInputParallelismPtrOutputWithContext(context.Background())
}

func (i ApplicationInputParallelismArgs) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputParallelismOutput).ToApplicationInputParallelismPtrOutputWithContext(ctx)
}

// ApplicationInputParallelismPtrInput is an input type that accepts ApplicationInputParallelismArgs, ApplicationInputParallelismPtr and ApplicationInputParallelismPtrOutput values.
// You can construct a concrete instance of `ApplicationInputParallelismPtrInput` via:
//
//	        ApplicationInputParallelismArgs{...}
//
//	or:
//
//	        nil
type ApplicationInputParallelismPtrInput interface {
	pulumi.Input

	ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput
	ToApplicationInputParallelismPtrOutputWithContext(context.Context) ApplicationInputParallelismPtrOutput
}

type applicationInputParallelismPtrType ApplicationInputParallelismArgs

func ApplicationInputParallelismPtr(v *ApplicationInputParallelismArgs) ApplicationInputParallelismPtrInput {
	return (*applicationInputParallelismPtrType)(v)
}

func (*applicationInputParallelismPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputParallelism)(nil)).Elem()
}

func (i *applicationInputParallelismPtrType) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return i.ToApplicationInputParallelismPtrOutputWithContext(context.Background())
}

func (i *applicationInputParallelismPtrType) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputParallelismPtrOutput)
}

func (i *applicationInputParallelismPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputParallelism] {
	return pulumix.Output[*ApplicationInputParallelism]{
		OutputState: i.ToApplicationInputParallelismPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationInputParallelismOutput struct{ *pulumi.OutputState }

func (ApplicationInputParallelismOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputParallelism)(nil)).Elem()
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismOutput() ApplicationInputParallelismOutput {
	return o
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismOutputWithContext(ctx context.Context) ApplicationInputParallelismOutput {
	return o
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return o.ToApplicationInputParallelismPtrOutputWithContext(context.Background())
}

func (o ApplicationInputParallelismOutput) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInputParallelism) *ApplicationInputParallelism {
		return &v
	}).(ApplicationInputParallelismPtrOutput)
}

func (o ApplicationInputParallelismOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputParallelism] {
	return pulumix.Output[ApplicationInputParallelism]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputParallelismOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationInputParallelism) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type ApplicationInputParallelismPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInputParallelismPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputParallelism)(nil)).Elem()
}

func (o ApplicationInputParallelismPtrOutput) ToApplicationInputParallelismPtrOutput() ApplicationInputParallelismPtrOutput {
	return o
}

func (o ApplicationInputParallelismPtrOutput) ToApplicationInputParallelismPtrOutputWithContext(ctx context.Context) ApplicationInputParallelismPtrOutput {
	return o
}

func (o ApplicationInputParallelismPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputParallelism] {
	return pulumix.Output[*ApplicationInputParallelism]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputParallelismPtrOutput) Elem() ApplicationInputParallelismOutput {
	return o.ApplyT(func(v *ApplicationInputParallelism) ApplicationInputParallelism {
		if v != nil {
			return *v
		}
		var ret ApplicationInputParallelism
		return ret
	}).(ApplicationInputParallelismOutput)
}

func (o ApplicationInputParallelismPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationInputParallelism) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

type ApplicationInputProcessingConfiguration struct {
	InputLambdaProcessor *ApplicationInputLambdaProcessor `pulumi:"inputLambdaProcessor"`
}

// ApplicationInputProcessingConfigurationInput is an input type that accepts ApplicationInputProcessingConfigurationArgs and ApplicationInputProcessingConfigurationOutput values.
// You can construct a concrete instance of `ApplicationInputProcessingConfigurationInput` via:
//
//	ApplicationInputProcessingConfigurationArgs{...}
type ApplicationInputProcessingConfigurationInput interface {
	pulumi.Input

	ToApplicationInputProcessingConfigurationOutput() ApplicationInputProcessingConfigurationOutput
	ToApplicationInputProcessingConfigurationOutputWithContext(context.Context) ApplicationInputProcessingConfigurationOutput
}

type ApplicationInputProcessingConfigurationArgs struct {
	InputLambdaProcessor ApplicationInputLambdaProcessorPtrInput `pulumi:"inputLambdaProcessor"`
}

func (ApplicationInputProcessingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationOutput() ApplicationInputProcessingConfigurationOutput {
	return i.ToApplicationInputProcessingConfigurationOutputWithContext(context.Background())
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputProcessingConfigurationOutput)
}

func (i ApplicationInputProcessingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputProcessingConfiguration] {
	return pulumix.Output[ApplicationInputProcessingConfiguration]{
		OutputState: i.ToApplicationInputProcessingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return i.ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationInputProcessingConfigurationArgs) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputProcessingConfigurationOutput).ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx)
}

// ApplicationInputProcessingConfigurationPtrInput is an input type that accepts ApplicationInputProcessingConfigurationArgs, ApplicationInputProcessingConfigurationPtr and ApplicationInputProcessingConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationInputProcessingConfigurationPtrInput` via:
//
//	        ApplicationInputProcessingConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationInputProcessingConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput
	ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Context) ApplicationInputProcessingConfigurationPtrOutput
}

type applicationInputProcessingConfigurationPtrType ApplicationInputProcessingConfigurationArgs

func ApplicationInputProcessingConfigurationPtr(v *ApplicationInputProcessingConfigurationArgs) ApplicationInputProcessingConfigurationPtrInput {
	return (*applicationInputProcessingConfigurationPtrType)(v)
}

func (*applicationInputProcessingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (i *applicationInputProcessingConfigurationPtrType) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return i.ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationInputProcessingConfigurationPtrType) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputProcessingConfigurationPtrOutput)
}

func (i *applicationInputProcessingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputProcessingConfiguration] {
	return pulumix.Output[*ApplicationInputProcessingConfiguration]{
		OutputState: i.ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationInputProcessingConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationInputProcessingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationOutput() ApplicationInputProcessingConfigurationOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return o.ToApplicationInputProcessingConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationInputProcessingConfigurationOutput) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInputProcessingConfiguration) *ApplicationInputProcessingConfiguration {
		return &v
	}).(ApplicationInputProcessingConfigurationPtrOutput)
}

func (o ApplicationInputProcessingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputProcessingConfiguration] {
	return pulumix.Output[ApplicationInputProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputProcessingConfigurationOutput) InputLambdaProcessor() ApplicationInputLambdaProcessorPtrOutput {
	return o.ApplyT(func(v ApplicationInputProcessingConfiguration) *ApplicationInputLambdaProcessor {
		return v.InputLambdaProcessor
	}).(ApplicationInputLambdaProcessorPtrOutput)
}

type ApplicationInputProcessingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInputProcessingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInputProcessingConfiguration)(nil)).Elem()
}

func (o ApplicationInputProcessingConfigurationPtrOutput) ToApplicationInputProcessingConfigurationPtrOutput() ApplicationInputProcessingConfigurationPtrOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationPtrOutput) ToApplicationInputProcessingConfigurationPtrOutputWithContext(ctx context.Context) ApplicationInputProcessingConfigurationPtrOutput {
	return o
}

func (o ApplicationInputProcessingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationInputProcessingConfiguration] {
	return pulumix.Output[*ApplicationInputProcessingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputProcessingConfigurationPtrOutput) Elem() ApplicationInputProcessingConfigurationOutput {
	return o.ApplyT(func(v *ApplicationInputProcessingConfiguration) ApplicationInputProcessingConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationInputProcessingConfiguration
		return ret
	}).(ApplicationInputProcessingConfigurationOutput)
}

func (o ApplicationInputProcessingConfigurationPtrOutput) InputLambdaProcessor() ApplicationInputLambdaProcessorPtrOutput {
	return o.ApplyT(func(v *ApplicationInputProcessingConfiguration) *ApplicationInputLambdaProcessor {
		if v == nil {
			return nil
		}
		return v.InputLambdaProcessor
	}).(ApplicationInputLambdaProcessorPtrOutput)
}

type ApplicationInputSchema struct {
	RecordColumns  []ApplicationRecordColumn `pulumi:"recordColumns"`
	RecordEncoding *string                   `pulumi:"recordEncoding"`
	RecordFormat   ApplicationRecordFormat   `pulumi:"recordFormat"`
}

// ApplicationInputSchemaInput is an input type that accepts ApplicationInputSchemaArgs and ApplicationInputSchemaOutput values.
// You can construct a concrete instance of `ApplicationInputSchemaInput` via:
//
//	ApplicationInputSchemaArgs{...}
type ApplicationInputSchemaInput interface {
	pulumi.Input

	ToApplicationInputSchemaOutput() ApplicationInputSchemaOutput
	ToApplicationInputSchemaOutputWithContext(context.Context) ApplicationInputSchemaOutput
}

type ApplicationInputSchemaArgs struct {
	RecordColumns  ApplicationRecordColumnArrayInput `pulumi:"recordColumns"`
	RecordEncoding pulumi.StringPtrInput             `pulumi:"recordEncoding"`
	RecordFormat   ApplicationRecordFormatInput      `pulumi:"recordFormat"`
}

func (ApplicationInputSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputSchema)(nil)).Elem()
}

func (i ApplicationInputSchemaArgs) ToApplicationInputSchemaOutput() ApplicationInputSchemaOutput {
	return i.ToApplicationInputSchemaOutputWithContext(context.Background())
}

func (i ApplicationInputSchemaArgs) ToApplicationInputSchemaOutputWithContext(ctx context.Context) ApplicationInputSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInputSchemaOutput)
}

func (i ApplicationInputSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputSchema] {
	return pulumix.Output[ApplicationInputSchema]{
		OutputState: i.ToApplicationInputSchemaOutputWithContext(ctx).OutputState,
	}
}

type ApplicationInputSchemaOutput struct{ *pulumi.OutputState }

func (ApplicationInputSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInputSchema)(nil)).Elem()
}

func (o ApplicationInputSchemaOutput) ToApplicationInputSchemaOutput() ApplicationInputSchemaOutput {
	return o
}

func (o ApplicationInputSchemaOutput) ToApplicationInputSchemaOutputWithContext(ctx context.Context) ApplicationInputSchemaOutput {
	return o
}

func (o ApplicationInputSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationInputSchema] {
	return pulumix.Output[ApplicationInputSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationInputSchemaOutput) RecordColumns() ApplicationRecordColumnArrayOutput {
	return o.ApplyT(func(v ApplicationInputSchema) []ApplicationRecordColumn { return v.RecordColumns }).(ApplicationRecordColumnArrayOutput)
}

func (o ApplicationInputSchemaOutput) RecordEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInputSchema) *string { return v.RecordEncoding }).(pulumi.StringPtrOutput)
}

func (o ApplicationInputSchemaOutput) RecordFormat() ApplicationRecordFormatOutput {
	return o.ApplyT(func(v ApplicationInputSchema) ApplicationRecordFormat { return v.RecordFormat }).(ApplicationRecordFormatOutput)
}

type ApplicationJsonMappingParameters struct {
	RecordRowPath string `pulumi:"recordRowPath"`
}

// ApplicationJsonMappingParametersInput is an input type that accepts ApplicationJsonMappingParametersArgs and ApplicationJsonMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationJsonMappingParametersInput` via:
//
//	ApplicationJsonMappingParametersArgs{...}
type ApplicationJsonMappingParametersInput interface {
	pulumi.Input

	ToApplicationJsonMappingParametersOutput() ApplicationJsonMappingParametersOutput
	ToApplicationJsonMappingParametersOutputWithContext(context.Context) ApplicationJsonMappingParametersOutput
}

type ApplicationJsonMappingParametersArgs struct {
	RecordRowPath pulumi.StringInput `pulumi:"recordRowPath"`
}

func (ApplicationJsonMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationJsonMappingParameters)(nil)).Elem()
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersOutput() ApplicationJsonMappingParametersOutput {
	return i.ToApplicationJsonMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationJsonMappingParametersOutput)
}

func (i ApplicationJsonMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationJsonMappingParameters] {
	return pulumix.Output[ApplicationJsonMappingParameters]{
		OutputState: i.ToApplicationJsonMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return i.ToApplicationJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationJsonMappingParametersArgs) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationJsonMappingParametersOutput).ToApplicationJsonMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationJsonMappingParametersPtrInput is an input type that accepts ApplicationJsonMappingParametersArgs, ApplicationJsonMappingParametersPtr and ApplicationJsonMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationJsonMappingParametersPtrInput` via:
//
//	        ApplicationJsonMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationJsonMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput
	ToApplicationJsonMappingParametersPtrOutputWithContext(context.Context) ApplicationJsonMappingParametersPtrOutput
}

type applicationJsonMappingParametersPtrType ApplicationJsonMappingParametersArgs

func ApplicationJsonMappingParametersPtr(v *ApplicationJsonMappingParametersArgs) ApplicationJsonMappingParametersPtrInput {
	return (*applicationJsonMappingParametersPtrType)(v)
}

func (*applicationJsonMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationJsonMappingParameters)(nil)).Elem()
}

func (i *applicationJsonMappingParametersPtrType) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return i.ToApplicationJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationJsonMappingParametersPtrType) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationJsonMappingParametersPtrOutput)
}

func (i *applicationJsonMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationJsonMappingParameters] {
	return pulumix.Output[*ApplicationJsonMappingParameters]{
		OutputState: i.ToApplicationJsonMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationJsonMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationJsonMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersOutput() ApplicationJsonMappingParametersOutput {
	return o
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersOutput {
	return o
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return o.ToApplicationJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationJsonMappingParametersOutput) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationJsonMappingParameters) *ApplicationJsonMappingParameters {
		return &v
	}).(ApplicationJsonMappingParametersPtrOutput)
}

func (o ApplicationJsonMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationJsonMappingParameters] {
	return pulumix.Output[ApplicationJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationJsonMappingParametersOutput) RecordRowPath() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationJsonMappingParameters) string { return v.RecordRowPath }).(pulumi.StringOutput)
}

type ApplicationJsonMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationJsonMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationJsonMappingParametersPtrOutput) ToApplicationJsonMappingParametersPtrOutput() ApplicationJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationJsonMappingParametersPtrOutput) ToApplicationJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationJsonMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationJsonMappingParameters] {
	return pulumix.Output[*ApplicationJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationJsonMappingParametersPtrOutput) Elem() ApplicationJsonMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationJsonMappingParameters) ApplicationJsonMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationJsonMappingParameters
		return ret
	}).(ApplicationJsonMappingParametersOutput)
}

func (o ApplicationJsonMappingParametersPtrOutput) RecordRowPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationJsonMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowPath
	}).(pulumi.StringPtrOutput)
}

type ApplicationKinesisFirehoseInput struct {
	ResourceArn string `pulumi:"resourceArn"`
	RoleArn     string `pulumi:"roleArn"`
}

// ApplicationKinesisFirehoseInputInput is an input type that accepts ApplicationKinesisFirehoseInputArgs and ApplicationKinesisFirehoseInputOutput values.
// You can construct a concrete instance of `ApplicationKinesisFirehoseInputInput` via:
//
//	ApplicationKinesisFirehoseInputArgs{...}
type ApplicationKinesisFirehoseInputInput interface {
	pulumi.Input

	ToApplicationKinesisFirehoseInputOutput() ApplicationKinesisFirehoseInputOutput
	ToApplicationKinesisFirehoseInputOutputWithContext(context.Context) ApplicationKinesisFirehoseInputOutput
}

type ApplicationKinesisFirehoseInputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	RoleArn     pulumi.StringInput `pulumi:"roleArn"`
}

func (ApplicationKinesisFirehoseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputOutput() ApplicationKinesisFirehoseInputOutput {
	return i.ToApplicationKinesisFirehoseInputOutputWithContext(context.Background())
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisFirehoseInputOutput)
}

func (i ApplicationKinesisFirehoseInputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisFirehoseInput] {
	return pulumix.Output[ApplicationKinesisFirehoseInput]{
		OutputState: i.ToApplicationKinesisFirehoseInputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return i.ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Background())
}

func (i ApplicationKinesisFirehoseInputArgs) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisFirehoseInputOutput).ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx)
}

// ApplicationKinesisFirehoseInputPtrInput is an input type that accepts ApplicationKinesisFirehoseInputArgs, ApplicationKinesisFirehoseInputPtr and ApplicationKinesisFirehoseInputPtrOutput values.
// You can construct a concrete instance of `ApplicationKinesisFirehoseInputPtrInput` via:
//
//	        ApplicationKinesisFirehoseInputArgs{...}
//
//	or:
//
//	        nil
type ApplicationKinesisFirehoseInputPtrInput interface {
	pulumi.Input

	ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput
	ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Context) ApplicationKinesisFirehoseInputPtrOutput
}

type applicationKinesisFirehoseInputPtrType ApplicationKinesisFirehoseInputArgs

func ApplicationKinesisFirehoseInputPtr(v *ApplicationKinesisFirehoseInputArgs) ApplicationKinesisFirehoseInputPtrInput {
	return (*applicationKinesisFirehoseInputPtrType)(v)
}

func (*applicationKinesisFirehoseInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (i *applicationKinesisFirehoseInputPtrType) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return i.ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Background())
}

func (i *applicationKinesisFirehoseInputPtrType) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisFirehoseInputPtrOutput)
}

func (i *applicationKinesisFirehoseInputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisFirehoseInput] {
	return pulumix.Output[*ApplicationKinesisFirehoseInput]{
		OutputState: i.ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationKinesisFirehoseInputOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisFirehoseInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputOutput() ApplicationKinesisFirehoseInputOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return o.ToApplicationKinesisFirehoseInputPtrOutputWithContext(context.Background())
}

func (o ApplicationKinesisFirehoseInputOutput) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationKinesisFirehoseInput) *ApplicationKinesisFirehoseInput {
		return &v
	}).(ApplicationKinesisFirehoseInputPtrOutput)
}

func (o ApplicationKinesisFirehoseInputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisFirehoseInput] {
	return pulumix.Output[ApplicationKinesisFirehoseInput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKinesisFirehoseInputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationKinesisFirehoseInput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ApplicationKinesisFirehoseInputOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationKinesisFirehoseInput) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ApplicationKinesisFirehoseInputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisFirehoseInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisFirehoseInput)(nil)).Elem()
}

func (o ApplicationKinesisFirehoseInputPtrOutput) ToApplicationKinesisFirehoseInputPtrOutput() ApplicationKinesisFirehoseInputPtrOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputPtrOutput) ToApplicationKinesisFirehoseInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisFirehoseInputPtrOutput {
	return o
}

func (o ApplicationKinesisFirehoseInputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisFirehoseInput] {
	return pulumix.Output[*ApplicationKinesisFirehoseInput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKinesisFirehoseInputPtrOutput) Elem() ApplicationKinesisFirehoseInputOutput {
	return o.ApplyT(func(v *ApplicationKinesisFirehoseInput) ApplicationKinesisFirehoseInput {
		if v != nil {
			return *v
		}
		var ret ApplicationKinesisFirehoseInput
		return ret
	}).(ApplicationKinesisFirehoseInputOutput)
}

func (o ApplicationKinesisFirehoseInputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKinesisFirehoseInput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationKinesisFirehoseInputPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKinesisFirehoseInput) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationKinesisStreamsInput struct {
	ResourceArn string `pulumi:"resourceArn"`
	RoleArn     string `pulumi:"roleArn"`
}

// ApplicationKinesisStreamsInputInput is an input type that accepts ApplicationKinesisStreamsInputArgs and ApplicationKinesisStreamsInputOutput values.
// You can construct a concrete instance of `ApplicationKinesisStreamsInputInput` via:
//
//	ApplicationKinesisStreamsInputArgs{...}
type ApplicationKinesisStreamsInputInput interface {
	pulumi.Input

	ToApplicationKinesisStreamsInputOutput() ApplicationKinesisStreamsInputOutput
	ToApplicationKinesisStreamsInputOutputWithContext(context.Context) ApplicationKinesisStreamsInputOutput
}

type ApplicationKinesisStreamsInputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	RoleArn     pulumi.StringInput `pulumi:"roleArn"`
}

func (ApplicationKinesisStreamsInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputOutput() ApplicationKinesisStreamsInputOutput {
	return i.ToApplicationKinesisStreamsInputOutputWithContext(context.Background())
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisStreamsInputOutput)
}

func (i ApplicationKinesisStreamsInputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisStreamsInput] {
	return pulumix.Output[ApplicationKinesisStreamsInput]{
		OutputState: i.ToApplicationKinesisStreamsInputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return i.ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Background())
}

func (i ApplicationKinesisStreamsInputArgs) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisStreamsInputOutput).ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx)
}

// ApplicationKinesisStreamsInputPtrInput is an input type that accepts ApplicationKinesisStreamsInputArgs, ApplicationKinesisStreamsInputPtr and ApplicationKinesisStreamsInputPtrOutput values.
// You can construct a concrete instance of `ApplicationKinesisStreamsInputPtrInput` via:
//
//	        ApplicationKinesisStreamsInputArgs{...}
//
//	or:
//
//	        nil
type ApplicationKinesisStreamsInputPtrInput interface {
	pulumi.Input

	ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput
	ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Context) ApplicationKinesisStreamsInputPtrOutput
}

type applicationKinesisStreamsInputPtrType ApplicationKinesisStreamsInputArgs

func ApplicationKinesisStreamsInputPtr(v *ApplicationKinesisStreamsInputArgs) ApplicationKinesisStreamsInputPtrInput {
	return (*applicationKinesisStreamsInputPtrType)(v)
}

func (*applicationKinesisStreamsInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (i *applicationKinesisStreamsInputPtrType) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return i.ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Background())
}

func (i *applicationKinesisStreamsInputPtrType) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKinesisStreamsInputPtrOutput)
}

func (i *applicationKinesisStreamsInputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisStreamsInput] {
	return pulumix.Output[*ApplicationKinesisStreamsInput]{
		OutputState: i.ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationKinesisStreamsInputOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisStreamsInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputOutput() ApplicationKinesisStreamsInputOutput {
	return o
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputOutput {
	return o
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return o.ToApplicationKinesisStreamsInputPtrOutputWithContext(context.Background())
}

func (o ApplicationKinesisStreamsInputOutput) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationKinesisStreamsInput) *ApplicationKinesisStreamsInput {
		return &v
	}).(ApplicationKinesisStreamsInputPtrOutput)
}

func (o ApplicationKinesisStreamsInputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationKinesisStreamsInput] {
	return pulumix.Output[ApplicationKinesisStreamsInput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKinesisStreamsInputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationKinesisStreamsInput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ApplicationKinesisStreamsInputOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationKinesisStreamsInput) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ApplicationKinesisStreamsInputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationKinesisStreamsInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKinesisStreamsInput)(nil)).Elem()
}

func (o ApplicationKinesisStreamsInputPtrOutput) ToApplicationKinesisStreamsInputPtrOutput() ApplicationKinesisStreamsInputPtrOutput {
	return o
}

func (o ApplicationKinesisStreamsInputPtrOutput) ToApplicationKinesisStreamsInputPtrOutputWithContext(ctx context.Context) ApplicationKinesisStreamsInputPtrOutput {
	return o
}

func (o ApplicationKinesisStreamsInputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationKinesisStreamsInput] {
	return pulumix.Output[*ApplicationKinesisStreamsInput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationKinesisStreamsInputPtrOutput) Elem() ApplicationKinesisStreamsInputOutput {
	return o.ApplyT(func(v *ApplicationKinesisStreamsInput) ApplicationKinesisStreamsInput {
		if v != nil {
			return *v
		}
		var ret ApplicationKinesisStreamsInput
		return ret
	}).(ApplicationKinesisStreamsInputOutput)
}

func (o ApplicationKinesisStreamsInputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKinesisStreamsInput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationKinesisStreamsInputPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKinesisStreamsInput) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationMappingParameters struct {
	CsvMappingParameters  *ApplicationCsvMappingParameters  `pulumi:"csvMappingParameters"`
	JsonMappingParameters *ApplicationJsonMappingParameters `pulumi:"jsonMappingParameters"`
}

// ApplicationMappingParametersInput is an input type that accepts ApplicationMappingParametersArgs and ApplicationMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationMappingParametersInput` via:
//
//	ApplicationMappingParametersArgs{...}
type ApplicationMappingParametersInput interface {
	pulumi.Input

	ToApplicationMappingParametersOutput() ApplicationMappingParametersOutput
	ToApplicationMappingParametersOutputWithContext(context.Context) ApplicationMappingParametersOutput
}

type ApplicationMappingParametersArgs struct {
	CsvMappingParameters  ApplicationCsvMappingParametersPtrInput  `pulumi:"csvMappingParameters"`
	JsonMappingParameters ApplicationJsonMappingParametersPtrInput `pulumi:"jsonMappingParameters"`
}

func (ApplicationMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMappingParameters)(nil)).Elem()
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersOutput() ApplicationMappingParametersOutput {
	return i.ToApplicationMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersOutputWithContext(ctx context.Context) ApplicationMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMappingParametersOutput)
}

func (i ApplicationMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationMappingParameters] {
	return pulumix.Output[ApplicationMappingParameters]{
		OutputState: i.ToApplicationMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return i.ToApplicationMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationMappingParametersArgs) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMappingParametersOutput).ToApplicationMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationMappingParametersPtrInput is an input type that accepts ApplicationMappingParametersArgs, ApplicationMappingParametersPtr and ApplicationMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationMappingParametersPtrInput` via:
//
//	        ApplicationMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput
	ToApplicationMappingParametersPtrOutputWithContext(context.Context) ApplicationMappingParametersPtrOutput
}

type applicationMappingParametersPtrType ApplicationMappingParametersArgs

func ApplicationMappingParametersPtr(v *ApplicationMappingParametersArgs) ApplicationMappingParametersPtrInput {
	return (*applicationMappingParametersPtrType)(v)
}

func (*applicationMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMappingParameters)(nil)).Elem()
}

func (i *applicationMappingParametersPtrType) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return i.ToApplicationMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationMappingParametersPtrType) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMappingParametersPtrOutput)
}

func (i *applicationMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMappingParameters] {
	return pulumix.Output[*ApplicationMappingParameters]{
		OutputState: i.ToApplicationMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMappingParameters)(nil)).Elem()
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersOutput() ApplicationMappingParametersOutput {
	return o
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersOutputWithContext(ctx context.Context) ApplicationMappingParametersOutput {
	return o
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return o.ToApplicationMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationMappingParametersOutput) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationMappingParameters) *ApplicationMappingParameters {
		return &v
	}).(ApplicationMappingParametersPtrOutput)
}

func (o ApplicationMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationMappingParameters] {
	return pulumix.Output[ApplicationMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationMappingParametersOutput) CsvMappingParameters() ApplicationCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationMappingParameters) *ApplicationCsvMappingParameters { return v.CsvMappingParameters }).(ApplicationCsvMappingParametersPtrOutput)
}

func (o ApplicationMappingParametersOutput) JsonMappingParameters() ApplicationJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationMappingParameters) *ApplicationJsonMappingParameters { return v.JsonMappingParameters }).(ApplicationJsonMappingParametersPtrOutput)
}

type ApplicationMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMappingParameters)(nil)).Elem()
}

func (o ApplicationMappingParametersPtrOutput) ToApplicationMappingParametersPtrOutput() ApplicationMappingParametersPtrOutput {
	return o
}

func (o ApplicationMappingParametersPtrOutput) ToApplicationMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationMappingParametersPtrOutput {
	return o
}

func (o ApplicationMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationMappingParameters] {
	return pulumix.Output[*ApplicationMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationMappingParametersPtrOutput) Elem() ApplicationMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationMappingParameters) ApplicationMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationMappingParameters
		return ret
	}).(ApplicationMappingParametersOutput)
}

func (o ApplicationMappingParametersPtrOutput) CsvMappingParameters() ApplicationCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationMappingParameters) *ApplicationCsvMappingParameters {
		if v == nil {
			return nil
		}
		return v.CsvMappingParameters
	}).(ApplicationCsvMappingParametersPtrOutput)
}

func (o ApplicationMappingParametersPtrOutput) JsonMappingParameters() ApplicationJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationMappingParameters) *ApplicationJsonMappingParameters {
		if v == nil {
			return nil
		}
		return v.JsonMappingParameters
	}).(ApplicationJsonMappingParametersPtrOutput)
}

type ApplicationOutputResourceDestinationSchema struct {
	RecordFormatType *string `pulumi:"recordFormatType"`
}

// ApplicationOutputResourceDestinationSchemaInput is an input type that accepts ApplicationOutputResourceDestinationSchemaArgs and ApplicationOutputResourceDestinationSchemaOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceDestinationSchemaInput` via:
//
//	ApplicationOutputResourceDestinationSchemaArgs{...}
type ApplicationOutputResourceDestinationSchemaInput interface {
	pulumi.Input

	ToApplicationOutputResourceDestinationSchemaOutput() ApplicationOutputResourceDestinationSchemaOutput
	ToApplicationOutputResourceDestinationSchemaOutputWithContext(context.Context) ApplicationOutputResourceDestinationSchemaOutput
}

type ApplicationOutputResourceDestinationSchemaArgs struct {
	RecordFormatType pulumi.StringPtrInput `pulumi:"recordFormatType"`
}

func (ApplicationOutputResourceDestinationSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceDestinationSchema)(nil)).Elem()
}

func (i ApplicationOutputResourceDestinationSchemaArgs) ToApplicationOutputResourceDestinationSchemaOutput() ApplicationOutputResourceDestinationSchemaOutput {
	return i.ToApplicationOutputResourceDestinationSchemaOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceDestinationSchemaArgs) ToApplicationOutputResourceDestinationSchemaOutputWithContext(ctx context.Context) ApplicationOutputResourceDestinationSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceDestinationSchemaOutput)
}

func (i ApplicationOutputResourceDestinationSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceDestinationSchema] {
	return pulumix.Output[ApplicationOutputResourceDestinationSchema]{
		OutputState: i.ToApplicationOutputResourceDestinationSchemaOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceDestinationSchemaOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceDestinationSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceDestinationSchema)(nil)).Elem()
}

func (o ApplicationOutputResourceDestinationSchemaOutput) ToApplicationOutputResourceDestinationSchemaOutput() ApplicationOutputResourceDestinationSchemaOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaOutput) ToApplicationOutputResourceDestinationSchemaOutputWithContext(ctx context.Context) ApplicationOutputResourceDestinationSchemaOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceDestinationSchema] {
	return pulumix.Output[ApplicationOutputResourceDestinationSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceDestinationSchemaOutput) RecordFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceDestinationSchema) *string { return v.RecordFormatType }).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceDestinationSchemaPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceDestinationSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceDestinationSchema)(nil)).Elem()
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) ToApplicationOutputResourceDestinationSchemaPtrOutput() ApplicationOutputResourceDestinationSchemaPtrOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) ToApplicationOutputResourceDestinationSchemaPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceDestinationSchemaPtrOutput {
	return o
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceDestinationSchema] {
	return pulumix.Output[*ApplicationOutputResourceDestinationSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) Elem() ApplicationOutputResourceDestinationSchemaOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceDestinationSchema) ApplicationOutputResourceDestinationSchema {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceDestinationSchema
		return ret
	}).(ApplicationOutputResourceDestinationSchemaOutput)
}

func (o ApplicationOutputResourceDestinationSchemaPtrOutput) RecordFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceDestinationSchema) *string {
		if v == nil {
			return nil
		}
		return v.RecordFormatType
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceKinesisFirehoseOutput struct {
	ResourceArn string `pulumi:"resourceArn"`
	RoleArn     string `pulumi:"roleArn"`
}

// ApplicationOutputResourceKinesisFirehoseOutputInput is an input type that accepts ApplicationOutputResourceKinesisFirehoseOutputArgs and ApplicationOutputResourceKinesisFirehoseOutputOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisFirehoseOutputInput` via:
//
//	ApplicationOutputResourceKinesisFirehoseOutputArgs{...}
type ApplicationOutputResourceKinesisFirehoseOutputInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisFirehoseOutputOutput() ApplicationOutputResourceKinesisFirehoseOutputOutput
	ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(context.Context) ApplicationOutputResourceKinesisFirehoseOutputOutput
}

type ApplicationOutputResourceKinesisFirehoseOutputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	RoleArn     pulumi.StringInput `pulumi:"roleArn"`
}

func (ApplicationOutputResourceKinesisFirehoseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputOutput() ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return i.ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisFirehoseOutputOutput)
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisFirehoseOutputArgs) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisFirehoseOutputOutput).ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx)
}

// ApplicationOutputResourceKinesisFirehoseOutputPtrInput is an input type that accepts ApplicationOutputResourceKinesisFirehoseOutputArgs, ApplicationOutputResourceKinesisFirehoseOutputPtr and ApplicationOutputResourceKinesisFirehoseOutputPtrOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisFirehoseOutputPtrInput` via:
//
//	        ApplicationOutputResourceKinesisFirehoseOutputArgs{...}
//
//	or:
//
//	        nil
type ApplicationOutputResourceKinesisFirehoseOutputPtrInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput
	ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput
}

type applicationOutputResourceKinesisFirehoseOutputPtrType ApplicationOutputResourceKinesisFirehoseOutputArgs

func ApplicationOutputResourceKinesisFirehoseOutputPtr(v *ApplicationOutputResourceKinesisFirehoseOutputArgs) ApplicationOutputResourceKinesisFirehoseOutputPtrInput {
	return (*applicationOutputResourceKinesisFirehoseOutputPtrType)(v)
}

func (*applicationOutputResourceKinesisFirehoseOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (i *applicationOutputResourceKinesisFirehoseOutputPtrType) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Background())
}

func (i *applicationOutputResourceKinesisFirehoseOutputPtrType) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (i *applicationOutputResourceKinesisFirehoseOutputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceKinesisFirehoseOutputOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisFirehoseOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputOutput() ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(context.Background())
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationOutputResourceKinesisFirehoseOutput) *ApplicationOutputResourceKinesisFirehoseOutput {
		return &v
	}).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceKinesisFirehoseOutput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ApplicationOutputResourceKinesisFirehoseOutputOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceKinesisFirehoseOutput) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ApplicationOutputResourceKinesisFirehoseOutputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisFirehoseOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ToApplicationOutputResourceKinesisFirehoseOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisFirehoseOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) Elem() ApplicationOutputResourceKinesisFirehoseOutputOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisFirehoseOutput) ApplicationOutputResourceKinesisFirehoseOutput {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceKinesisFirehoseOutput
		return ret
	}).(ApplicationOutputResourceKinesisFirehoseOutputOutput)
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisFirehoseOutput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationOutputResourceKinesisFirehoseOutputPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisFirehoseOutput) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceKinesisStreamsOutput struct {
	ResourceArn string `pulumi:"resourceArn"`
	RoleArn     string `pulumi:"roleArn"`
}

// ApplicationOutputResourceKinesisStreamsOutputInput is an input type that accepts ApplicationOutputResourceKinesisStreamsOutputArgs and ApplicationOutputResourceKinesisStreamsOutputOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisStreamsOutputInput` via:
//
//	ApplicationOutputResourceKinesisStreamsOutputArgs{...}
type ApplicationOutputResourceKinesisStreamsOutputInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisStreamsOutputOutput() ApplicationOutputResourceKinesisStreamsOutputOutput
	ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(context.Context) ApplicationOutputResourceKinesisStreamsOutputOutput
}

type ApplicationOutputResourceKinesisStreamsOutputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	RoleArn     pulumi.StringInput `pulumi:"roleArn"`
}

func (ApplicationOutputResourceKinesisStreamsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputOutput() ApplicationOutputResourceKinesisStreamsOutputOutput {
	return i.ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisStreamsOutputOutput)
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceKinesisStreamsOutputArgs) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisStreamsOutputOutput).ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx)
}

// ApplicationOutputResourceKinesisStreamsOutputPtrInput is an input type that accepts ApplicationOutputResourceKinesisStreamsOutputArgs, ApplicationOutputResourceKinesisStreamsOutputPtr and ApplicationOutputResourceKinesisStreamsOutputPtrOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceKinesisStreamsOutputPtrInput` via:
//
//	        ApplicationOutputResourceKinesisStreamsOutputArgs{...}
//
//	or:
//
//	        nil
type ApplicationOutputResourceKinesisStreamsOutputPtrInput interface {
	pulumi.Input

	ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput
	ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput
}

type applicationOutputResourceKinesisStreamsOutputPtrType ApplicationOutputResourceKinesisStreamsOutputArgs

func ApplicationOutputResourceKinesisStreamsOutputPtr(v *ApplicationOutputResourceKinesisStreamsOutputArgs) ApplicationOutputResourceKinesisStreamsOutputPtrInput {
	return (*applicationOutputResourceKinesisStreamsOutputPtrType)(v)
}

func (*applicationOutputResourceKinesisStreamsOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (i *applicationOutputResourceKinesisStreamsOutputPtrType) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return i.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Background())
}

func (i *applicationOutputResourceKinesisStreamsOutputPtrType) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (i *applicationOutputResourceKinesisStreamsOutputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: i.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceKinesisStreamsOutputOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisStreamsOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputOutput() ApplicationOutputResourceKinesisStreamsOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(context.Background())
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationOutputResourceKinesisStreamsOutput) *ApplicationOutputResourceKinesisStreamsOutput {
		return &v
	}).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceKinesisStreamsOutput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ApplicationOutputResourceKinesisStreamsOutputOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceKinesisStreamsOutput) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ApplicationOutputResourceKinesisStreamsOutputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceKinesisStreamsOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ToApplicationOutputResourceKinesisStreamsOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput] {
	return pulumix.Output[*ApplicationOutputResourceKinesisStreamsOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) Elem() ApplicationOutputResourceKinesisStreamsOutputOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisStreamsOutput) ApplicationOutputResourceKinesisStreamsOutput {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceKinesisStreamsOutput
		return ret
	}).(ApplicationOutputResourceKinesisStreamsOutputOutput)
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisStreamsOutput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationOutputResourceKinesisStreamsOutputPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceKinesisStreamsOutput) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceLambdaOutput struct {
	ResourceArn string `pulumi:"resourceArn"`
	RoleArn     string `pulumi:"roleArn"`
}

// ApplicationOutputResourceLambdaOutputInput is an input type that accepts ApplicationOutputResourceLambdaOutputArgs and ApplicationOutputResourceLambdaOutputOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceLambdaOutputInput` via:
//
//	ApplicationOutputResourceLambdaOutputArgs{...}
type ApplicationOutputResourceLambdaOutputInput interface {
	pulumi.Input

	ToApplicationOutputResourceLambdaOutputOutput() ApplicationOutputResourceLambdaOutputOutput
	ToApplicationOutputResourceLambdaOutputOutputWithContext(context.Context) ApplicationOutputResourceLambdaOutputOutput
}

type ApplicationOutputResourceLambdaOutputArgs struct {
	ResourceArn pulumi.StringInput `pulumi:"resourceArn"`
	RoleArn     pulumi.StringInput `pulumi:"roleArn"`
}

func (ApplicationOutputResourceLambdaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputOutput() ApplicationOutputResourceLambdaOutputOutput {
	return i.ToApplicationOutputResourceLambdaOutputOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceLambdaOutputOutput)
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[ApplicationOutputResourceLambdaOutput]{
		OutputState: i.ToApplicationOutputResourceLambdaOutputOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return i.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceLambdaOutputArgs) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceLambdaOutputOutput).ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx)
}

// ApplicationOutputResourceLambdaOutputPtrInput is an input type that accepts ApplicationOutputResourceLambdaOutputArgs, ApplicationOutputResourceLambdaOutputPtr and ApplicationOutputResourceLambdaOutputPtrOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceLambdaOutputPtrInput` via:
//
//	        ApplicationOutputResourceLambdaOutputArgs{...}
//
//	or:
//
//	        nil
type ApplicationOutputResourceLambdaOutputPtrInput interface {
	pulumi.Input

	ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput
	ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Context) ApplicationOutputResourceLambdaOutputPtrOutput
}

type applicationOutputResourceLambdaOutputPtrType ApplicationOutputResourceLambdaOutputArgs

func ApplicationOutputResourceLambdaOutputPtr(v *ApplicationOutputResourceLambdaOutputArgs) ApplicationOutputResourceLambdaOutputPtrInput {
	return (*applicationOutputResourceLambdaOutputPtrType)(v)
}

func (*applicationOutputResourceLambdaOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (i *applicationOutputResourceLambdaOutputPtrType) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return i.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Background())
}

func (i *applicationOutputResourceLambdaOutputPtrType) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (i *applicationOutputResourceLambdaOutputPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[*ApplicationOutputResourceLambdaOutput]{
		OutputState: i.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceLambdaOutputOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceLambdaOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputOutput() ApplicationOutputResourceLambdaOutputOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(context.Background())
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationOutputResourceLambdaOutput) *ApplicationOutputResourceLambdaOutput {
		return &v
	}).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (o ApplicationOutputResourceLambdaOutputOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[ApplicationOutputResourceLambdaOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceLambdaOutputOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceLambdaOutput) string { return v.ResourceArn }).(pulumi.StringOutput)
}

func (o ApplicationOutputResourceLambdaOutputOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOutputResourceLambdaOutput) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ApplicationOutputResourceLambdaOutputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceLambdaOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceLambdaOutput)(nil)).Elem()
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ToApplicationOutputResourceLambdaOutputPtrOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ToApplicationOutputResourceLambdaOutputPtrOutputWithContext(ctx context.Context) ApplicationOutputResourceLambdaOutputPtrOutput {
	return o
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceLambdaOutput] {
	return pulumix.Output[*ApplicationOutputResourceLambdaOutput]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) Elem() ApplicationOutputResourceLambdaOutputOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceLambdaOutput) ApplicationOutputResourceLambdaOutput {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceLambdaOutput
		return ret
	}).(ApplicationOutputResourceLambdaOutputOutput)
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceLambdaOutput) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationOutputResourceLambdaOutputPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceLambdaOutput) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceOutputType struct {
	DestinationSchema     ApplicationOutputResourceDestinationSchema      `pulumi:"destinationSchema"`
	KinesisFirehoseOutput *ApplicationOutputResourceKinesisFirehoseOutput `pulumi:"kinesisFirehoseOutput"`
	KinesisStreamsOutput  *ApplicationOutputResourceKinesisStreamsOutput  `pulumi:"kinesisStreamsOutput"`
	LambdaOutput          *ApplicationOutputResourceLambdaOutput          `pulumi:"lambdaOutput"`
	Name                  *string                                         `pulumi:"name"`
}

// ApplicationOutputResourceOutputTypeInput is an input type that accepts ApplicationOutputResourceOutputTypeArgs and ApplicationOutputResourceOutputTypeOutput values.
// You can construct a concrete instance of `ApplicationOutputResourceOutputTypeInput` via:
//
//	ApplicationOutputResourceOutputTypeArgs{...}
type ApplicationOutputResourceOutputTypeInput interface {
	pulumi.Input

	ToApplicationOutputResourceOutputTypeOutput() ApplicationOutputResourceOutputTypeOutput
	ToApplicationOutputResourceOutputTypeOutputWithContext(context.Context) ApplicationOutputResourceOutputTypeOutput
}

type ApplicationOutputResourceOutputTypeArgs struct {
	DestinationSchema     ApplicationOutputResourceDestinationSchemaInput        `pulumi:"destinationSchema"`
	KinesisFirehoseOutput ApplicationOutputResourceKinesisFirehoseOutputPtrInput `pulumi:"kinesisFirehoseOutput"`
	KinesisStreamsOutput  ApplicationOutputResourceKinesisStreamsOutputPtrInput  `pulumi:"kinesisStreamsOutput"`
	LambdaOutput          ApplicationOutputResourceLambdaOutputPtrInput          `pulumi:"lambdaOutput"`
	Name                  pulumi.StringPtrInput                                  `pulumi:"name"`
}

func (ApplicationOutputResourceOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceOutputType)(nil)).Elem()
}

func (i ApplicationOutputResourceOutputTypeArgs) ToApplicationOutputResourceOutputTypeOutput() ApplicationOutputResourceOutputTypeOutput {
	return i.ToApplicationOutputResourceOutputTypeOutputWithContext(context.Background())
}

func (i ApplicationOutputResourceOutputTypeArgs) ToApplicationOutputResourceOutputTypeOutputWithContext(ctx context.Context) ApplicationOutputResourceOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutputResourceOutputTypeOutput)
}

func (i ApplicationOutputResourceOutputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceOutputType] {
	return pulumix.Output[ApplicationOutputResourceOutputType]{
		OutputState: i.ToApplicationOutputResourceOutputTypeOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutputResourceOutputTypeOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOutputResourceOutputType)(nil)).Elem()
}

func (o ApplicationOutputResourceOutputTypeOutput) ToApplicationOutputResourceOutputTypeOutput() ApplicationOutputResourceOutputTypeOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypeOutput) ToApplicationOutputResourceOutputTypeOutputWithContext(ctx context.Context) ApplicationOutputResourceOutputTypeOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationOutputResourceOutputType] {
	return pulumix.Output[ApplicationOutputResourceOutputType]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceOutputTypeOutput) DestinationSchema() ApplicationOutputResourceDestinationSchemaOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) ApplicationOutputResourceDestinationSchema {
		return v.DestinationSchema
	}).(ApplicationOutputResourceDestinationSchemaOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) KinesisFirehoseOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisFirehoseOutput {
		return v.KinesisFirehoseOutput
	}).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) KinesisStreamsOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisStreamsOutput {
		return v.KinesisStreamsOutput
	}).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) LambdaOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *ApplicationOutputResourceLambdaOutput {
		return v.LambdaOutput
	}).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOutputResourceOutputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ApplicationOutputResourceOutputTypePtrOutput struct{ *pulumi.OutputState }

func (ApplicationOutputResourceOutputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOutputResourceOutputType)(nil)).Elem()
}

func (o ApplicationOutputResourceOutputTypePtrOutput) ToApplicationOutputResourceOutputTypePtrOutput() ApplicationOutputResourceOutputTypePtrOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypePtrOutput) ToApplicationOutputResourceOutputTypePtrOutputWithContext(ctx context.Context) ApplicationOutputResourceOutputTypePtrOutput {
	return o
}

func (o ApplicationOutputResourceOutputTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationOutputResourceOutputType] {
	return pulumix.Output[*ApplicationOutputResourceOutputType]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationOutputResourceOutputTypePtrOutput) Elem() ApplicationOutputResourceOutputTypeOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) ApplicationOutputResourceOutputType {
		if v != nil {
			return *v
		}
		var ret ApplicationOutputResourceOutputType
		return ret
	}).(ApplicationOutputResourceOutputTypeOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) DestinationSchema() ApplicationOutputResourceDestinationSchemaPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceDestinationSchema {
		if v == nil {
			return nil
		}
		return &v.DestinationSchema
	}).(ApplicationOutputResourceDestinationSchemaPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) KinesisFirehoseOutput() ApplicationOutputResourceKinesisFirehoseOutputPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisFirehoseOutput {
		if v == nil {
			return nil
		}
		return v.KinesisFirehoseOutput
	}).(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) KinesisStreamsOutput() ApplicationOutputResourceKinesisStreamsOutputPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceKinesisStreamsOutput {
		if v == nil {
			return nil
		}
		return v.KinesisStreamsOutput
	}).(ApplicationOutputResourceKinesisStreamsOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) LambdaOutput() ApplicationOutputResourceLambdaOutputPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *ApplicationOutputResourceLambdaOutput {
		if v == nil {
			return nil
		}
		return v.LambdaOutput
	}).(ApplicationOutputResourceLambdaOutputPtrOutput)
}

func (o ApplicationOutputResourceOutputTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationOutputResourceOutputType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ApplicationRecordColumn struct {
	Mapping *string `pulumi:"mapping"`
	Name    string  `pulumi:"name"`
	SqlType string  `pulumi:"sqlType"`
}

// ApplicationRecordColumnInput is an input type that accepts ApplicationRecordColumnArgs and ApplicationRecordColumnOutput values.
// You can construct a concrete instance of `ApplicationRecordColumnInput` via:
//
//	ApplicationRecordColumnArgs{...}
type ApplicationRecordColumnInput interface {
	pulumi.Input

	ToApplicationRecordColumnOutput() ApplicationRecordColumnOutput
	ToApplicationRecordColumnOutputWithContext(context.Context) ApplicationRecordColumnOutput
}

type ApplicationRecordColumnArgs struct {
	Mapping pulumi.StringPtrInput `pulumi:"mapping"`
	Name    pulumi.StringInput    `pulumi:"name"`
	SqlType pulumi.StringInput    `pulumi:"sqlType"`
}

func (ApplicationRecordColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordColumn)(nil)).Elem()
}

func (i ApplicationRecordColumnArgs) ToApplicationRecordColumnOutput() ApplicationRecordColumnOutput {
	return i.ToApplicationRecordColumnOutputWithContext(context.Background())
}

func (i ApplicationRecordColumnArgs) ToApplicationRecordColumnOutputWithContext(ctx context.Context) ApplicationRecordColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRecordColumnOutput)
}

func (i ApplicationRecordColumnArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordColumn] {
	return pulumix.Output[ApplicationRecordColumn]{
		OutputState: i.ToApplicationRecordColumnOutputWithContext(ctx).OutputState,
	}
}

// ApplicationRecordColumnArrayInput is an input type that accepts ApplicationRecordColumnArray and ApplicationRecordColumnArrayOutput values.
// You can construct a concrete instance of `ApplicationRecordColumnArrayInput` via:
//
//	ApplicationRecordColumnArray{ ApplicationRecordColumnArgs{...} }
type ApplicationRecordColumnArrayInput interface {
	pulumi.Input

	ToApplicationRecordColumnArrayOutput() ApplicationRecordColumnArrayOutput
	ToApplicationRecordColumnArrayOutputWithContext(context.Context) ApplicationRecordColumnArrayOutput
}

type ApplicationRecordColumnArray []ApplicationRecordColumnInput

func (ApplicationRecordColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRecordColumn)(nil)).Elem()
}

func (i ApplicationRecordColumnArray) ToApplicationRecordColumnArrayOutput() ApplicationRecordColumnArrayOutput {
	return i.ToApplicationRecordColumnArrayOutputWithContext(context.Background())
}

func (i ApplicationRecordColumnArray) ToApplicationRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationRecordColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRecordColumnArrayOutput)
}

func (i ApplicationRecordColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationRecordColumn] {
	return pulumix.Output[[]ApplicationRecordColumn]{
		OutputState: i.ToApplicationRecordColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationRecordColumnOutput struct{ *pulumi.OutputState }

func (ApplicationRecordColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordColumn)(nil)).Elem()
}

func (o ApplicationRecordColumnOutput) ToApplicationRecordColumnOutput() ApplicationRecordColumnOutput {
	return o
}

func (o ApplicationRecordColumnOutput) ToApplicationRecordColumnOutputWithContext(ctx context.Context) ApplicationRecordColumnOutput {
	return o
}

func (o ApplicationRecordColumnOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordColumn] {
	return pulumix.Output[ApplicationRecordColumn]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationRecordColumnOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationRecordColumn) *string { return v.Mapping }).(pulumi.StringPtrOutput)
}

func (o ApplicationRecordColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRecordColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationRecordColumnOutput) SqlType() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRecordColumn) string { return v.SqlType }).(pulumi.StringOutput)
}

type ApplicationRecordColumnArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRecordColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRecordColumn)(nil)).Elem()
}

func (o ApplicationRecordColumnArrayOutput) ToApplicationRecordColumnArrayOutput() ApplicationRecordColumnArrayOutput {
	return o
}

func (o ApplicationRecordColumnArrayOutput) ToApplicationRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationRecordColumnArrayOutput {
	return o
}

func (o ApplicationRecordColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationRecordColumn] {
	return pulumix.Output[[]ApplicationRecordColumn]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationRecordColumnArrayOutput) Index(i pulumi.IntInput) ApplicationRecordColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRecordColumn {
		return vs[0].([]ApplicationRecordColumn)[vs[1].(int)]
	}).(ApplicationRecordColumnOutput)
}

type ApplicationRecordFormat struct {
	MappingParameters *ApplicationMappingParameters `pulumi:"mappingParameters"`
	RecordFormatType  string                        `pulumi:"recordFormatType"`
}

// ApplicationRecordFormatInput is an input type that accepts ApplicationRecordFormatArgs and ApplicationRecordFormatOutput values.
// You can construct a concrete instance of `ApplicationRecordFormatInput` via:
//
//	ApplicationRecordFormatArgs{...}
type ApplicationRecordFormatInput interface {
	pulumi.Input

	ToApplicationRecordFormatOutput() ApplicationRecordFormatOutput
	ToApplicationRecordFormatOutputWithContext(context.Context) ApplicationRecordFormatOutput
}

type ApplicationRecordFormatArgs struct {
	MappingParameters ApplicationMappingParametersPtrInput `pulumi:"mappingParameters"`
	RecordFormatType  pulumi.StringInput                   `pulumi:"recordFormatType"`
}

func (ApplicationRecordFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordFormat)(nil)).Elem()
}

func (i ApplicationRecordFormatArgs) ToApplicationRecordFormatOutput() ApplicationRecordFormatOutput {
	return i.ToApplicationRecordFormatOutputWithContext(context.Background())
}

func (i ApplicationRecordFormatArgs) ToApplicationRecordFormatOutputWithContext(ctx context.Context) ApplicationRecordFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRecordFormatOutput)
}

func (i ApplicationRecordFormatArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordFormat] {
	return pulumix.Output[ApplicationRecordFormat]{
		OutputState: i.ToApplicationRecordFormatOutputWithContext(ctx).OutputState,
	}
}

type ApplicationRecordFormatOutput struct{ *pulumi.OutputState }

func (ApplicationRecordFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRecordFormat)(nil)).Elem()
}

func (o ApplicationRecordFormatOutput) ToApplicationRecordFormatOutput() ApplicationRecordFormatOutput {
	return o
}

func (o ApplicationRecordFormatOutput) ToApplicationRecordFormatOutputWithContext(ctx context.Context) ApplicationRecordFormatOutput {
	return o
}

func (o ApplicationRecordFormatOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationRecordFormat] {
	return pulumix.Output[ApplicationRecordFormat]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationRecordFormatOutput) MappingParameters() ApplicationMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationRecordFormat) *ApplicationMappingParameters { return v.MappingParameters }).(ApplicationMappingParametersPtrOutput)
}

func (o ApplicationRecordFormatOutput) RecordFormatType() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRecordFormat) string { return v.RecordFormatType }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceCsvMappingParameters struct {
	RecordColumnDelimiter string `pulumi:"recordColumnDelimiter"`
	RecordRowDelimiter    string `pulumi:"recordRowDelimiter"`
}

// ApplicationReferenceDataSourceCsvMappingParametersInput is an input type that accepts ApplicationReferenceDataSourceCsvMappingParametersArgs and ApplicationReferenceDataSourceCsvMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceCsvMappingParametersInput` via:
//
//	ApplicationReferenceDataSourceCsvMappingParametersArgs{...}
type ApplicationReferenceDataSourceCsvMappingParametersInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceCsvMappingParametersOutput() ApplicationReferenceDataSourceCsvMappingParametersOutput
	ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(context.Context) ApplicationReferenceDataSourceCsvMappingParametersOutput
}

type ApplicationReferenceDataSourceCsvMappingParametersArgs struct {
	RecordColumnDelimiter pulumi.StringInput `pulumi:"recordColumnDelimiter"`
	RecordRowDelimiter    pulumi.StringInput `pulumi:"recordRowDelimiter"`
}

func (ApplicationReferenceDataSourceCsvMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersOutput() ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return i.ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceCsvMappingParametersOutput)
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceCsvMappingParametersArgs) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceCsvMappingParametersOutput).ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceCsvMappingParametersPtrInput is an input type that accepts ApplicationReferenceDataSourceCsvMappingParametersArgs, ApplicationReferenceDataSourceCsvMappingParametersPtr and ApplicationReferenceDataSourceCsvMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceCsvMappingParametersPtrInput` via:
//
//	        ApplicationReferenceDataSourceCsvMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceCsvMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput
	ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput
}

type applicationReferenceDataSourceCsvMappingParametersPtrType ApplicationReferenceDataSourceCsvMappingParametersArgs

func ApplicationReferenceDataSourceCsvMappingParametersPtr(v *ApplicationReferenceDataSourceCsvMappingParametersArgs) ApplicationReferenceDataSourceCsvMappingParametersPtrInput {
	return (*applicationReferenceDataSourceCsvMappingParametersPtrType)(v)
}

func (*applicationReferenceDataSourceCsvMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (i *applicationReferenceDataSourceCsvMappingParametersPtrType) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceCsvMappingParametersPtrType) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (i *applicationReferenceDataSourceCsvMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceCsvMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceCsvMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersOutput() ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceCsvMappingParameters) *ApplicationReferenceDataSourceCsvMappingParameters {
		return &v
	}).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) RecordColumnDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceCsvMappingParameters) string { return v.RecordColumnDelimiter }).(pulumi.StringOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersOutput) RecordRowDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceCsvMappingParameters) string { return v.RecordRowDelimiter }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceCsvMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceCsvMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutput() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ToApplicationReferenceDataSourceCsvMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceCsvMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) Elem() ApplicationReferenceDataSourceCsvMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceCsvMappingParameters) ApplicationReferenceDataSourceCsvMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceCsvMappingParameters
		return ret
	}).(ApplicationReferenceDataSourceCsvMappingParametersOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) RecordColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordColumnDelimiter
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceCsvMappingParametersPtrOutput) RecordRowDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceCsvMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowDelimiter
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceJsonMappingParameters struct {
	RecordRowPath string `pulumi:"recordRowPath"`
}

// ApplicationReferenceDataSourceJsonMappingParametersInput is an input type that accepts ApplicationReferenceDataSourceJsonMappingParametersArgs and ApplicationReferenceDataSourceJsonMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceJsonMappingParametersInput` via:
//
//	ApplicationReferenceDataSourceJsonMappingParametersArgs{...}
type ApplicationReferenceDataSourceJsonMappingParametersInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceJsonMappingParametersOutput() ApplicationReferenceDataSourceJsonMappingParametersOutput
	ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(context.Context) ApplicationReferenceDataSourceJsonMappingParametersOutput
}

type ApplicationReferenceDataSourceJsonMappingParametersArgs struct {
	RecordRowPath pulumi.StringInput `pulumi:"recordRowPath"`
}

func (ApplicationReferenceDataSourceJsonMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersOutput() ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return i.ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceJsonMappingParametersOutput)
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceJsonMappingParametersArgs) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceJsonMappingParametersOutput).ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceJsonMappingParametersPtrInput is an input type that accepts ApplicationReferenceDataSourceJsonMappingParametersArgs, ApplicationReferenceDataSourceJsonMappingParametersPtr and ApplicationReferenceDataSourceJsonMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceJsonMappingParametersPtrInput` via:
//
//	        ApplicationReferenceDataSourceJsonMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceJsonMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput
	ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput
}

type applicationReferenceDataSourceJsonMappingParametersPtrType ApplicationReferenceDataSourceJsonMappingParametersArgs

func ApplicationReferenceDataSourceJsonMappingParametersPtr(v *ApplicationReferenceDataSourceJsonMappingParametersArgs) ApplicationReferenceDataSourceJsonMappingParametersPtrInput {
	return (*applicationReferenceDataSourceJsonMappingParametersPtrType)(v)
}

func (*applicationReferenceDataSourceJsonMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (i *applicationReferenceDataSourceJsonMappingParametersPtrType) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceJsonMappingParametersPtrType) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

func (i *applicationReferenceDataSourceJsonMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceJsonMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceJsonMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersOutput() ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceJsonMappingParameters) *ApplicationReferenceDataSourceJsonMappingParameters {
		return &v
	}).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceJsonMappingParametersOutput) RecordRowPath() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceJsonMappingParameters) string { return v.RecordRowPath }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceJsonMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceJsonMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutput() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ToApplicationReferenceDataSourceJsonMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceJsonMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) Elem() ApplicationReferenceDataSourceJsonMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceJsonMappingParameters) ApplicationReferenceDataSourceJsonMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceJsonMappingParameters
		return ret
	}).(ApplicationReferenceDataSourceJsonMappingParametersOutput)
}

func (o ApplicationReferenceDataSourceJsonMappingParametersPtrOutput) RecordRowPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceJsonMappingParameters) *string {
		if v == nil {
			return nil
		}
		return &v.RecordRowPath
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceMappingParameters struct {
	CsvMappingParameters  *ApplicationReferenceDataSourceCsvMappingParameters  `pulumi:"csvMappingParameters"`
	JsonMappingParameters *ApplicationReferenceDataSourceJsonMappingParameters `pulumi:"jsonMappingParameters"`
}

// ApplicationReferenceDataSourceMappingParametersInput is an input type that accepts ApplicationReferenceDataSourceMappingParametersArgs and ApplicationReferenceDataSourceMappingParametersOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceMappingParametersInput` via:
//
//	ApplicationReferenceDataSourceMappingParametersArgs{...}
type ApplicationReferenceDataSourceMappingParametersInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceMappingParametersOutput() ApplicationReferenceDataSourceMappingParametersOutput
	ToApplicationReferenceDataSourceMappingParametersOutputWithContext(context.Context) ApplicationReferenceDataSourceMappingParametersOutput
}

type ApplicationReferenceDataSourceMappingParametersArgs struct {
	CsvMappingParameters  ApplicationReferenceDataSourceCsvMappingParametersPtrInput  `pulumi:"csvMappingParameters"`
	JsonMappingParameters ApplicationReferenceDataSourceJsonMappingParametersPtrInput `pulumi:"jsonMappingParameters"`
}

func (ApplicationReferenceDataSourceMappingParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersOutput() ApplicationReferenceDataSourceMappingParametersOutput {
	return i.ToApplicationReferenceDataSourceMappingParametersOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceMappingParametersOutput)
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceMappingParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceMappingParametersArgs) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceMappingParametersOutput).ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceMappingParametersPtrInput is an input type that accepts ApplicationReferenceDataSourceMappingParametersArgs, ApplicationReferenceDataSourceMappingParametersPtr and ApplicationReferenceDataSourceMappingParametersPtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceMappingParametersPtrInput` via:
//
//	        ApplicationReferenceDataSourceMappingParametersArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceMappingParametersPtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput
	ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput
}

type applicationReferenceDataSourceMappingParametersPtrType ApplicationReferenceDataSourceMappingParametersArgs

func ApplicationReferenceDataSourceMappingParametersPtr(v *ApplicationReferenceDataSourceMappingParametersArgs) ApplicationReferenceDataSourceMappingParametersPtrInput {
	return (*applicationReferenceDataSourceMappingParametersPtrType)(v)
}

func (*applicationReferenceDataSourceMappingParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (i *applicationReferenceDataSourceMappingParametersPtrType) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return i.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceMappingParametersPtrType) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (i *applicationReferenceDataSourceMappingParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceMappingParameters]{
		OutputState: i.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceMappingParametersOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceMappingParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersOutput() ApplicationReferenceDataSourceMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceMappingParameters {
		return &v
	}).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[ApplicationReferenceDataSourceMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) CsvMappingParameters() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceCsvMappingParameters {
		return v.CsvMappingParameters
	}).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersOutput) JsonMappingParameters() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceJsonMappingParameters {
		return v.JsonMappingParameters
	}).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

type ApplicationReferenceDataSourceMappingParametersPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceMappingParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceMappingParameters)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutput() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) ToApplicationReferenceDataSourceMappingParametersPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceMappingParameters] {
	return pulumix.Output[*ApplicationReferenceDataSourceMappingParameters]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) Elem() ApplicationReferenceDataSourceMappingParametersOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceMappingParameters) ApplicationReferenceDataSourceMappingParameters {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceMappingParameters
		return ret
	}).(ApplicationReferenceDataSourceMappingParametersOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) CsvMappingParameters() ApplicationReferenceDataSourceCsvMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceCsvMappingParameters {
		if v == nil {
			return nil
		}
		return v.CsvMappingParameters
	}).(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceMappingParametersPtrOutput) JsonMappingParameters() ApplicationReferenceDataSourceJsonMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceMappingParameters) *ApplicationReferenceDataSourceJsonMappingParameters {
		if v == nil {
			return nil
		}
		return v.JsonMappingParameters
	}).(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput)
}

type ApplicationReferenceDataSourceRecordColumn struct {
	Mapping *string `pulumi:"mapping"`
	Name    string  `pulumi:"name"`
	SqlType string  `pulumi:"sqlType"`
}

// ApplicationReferenceDataSourceRecordColumnInput is an input type that accepts ApplicationReferenceDataSourceRecordColumnArgs and ApplicationReferenceDataSourceRecordColumnOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceRecordColumnInput` via:
//
//	ApplicationReferenceDataSourceRecordColumnArgs{...}
type ApplicationReferenceDataSourceRecordColumnInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceRecordColumnOutput() ApplicationReferenceDataSourceRecordColumnOutput
	ToApplicationReferenceDataSourceRecordColumnOutputWithContext(context.Context) ApplicationReferenceDataSourceRecordColumnOutput
}

type ApplicationReferenceDataSourceRecordColumnArgs struct {
	Mapping pulumi.StringPtrInput `pulumi:"mapping"`
	Name    pulumi.StringInput    `pulumi:"name"`
	SqlType pulumi.StringInput    `pulumi:"sqlType"`
}

func (ApplicationReferenceDataSourceRecordColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceRecordColumnArgs) ToApplicationReferenceDataSourceRecordColumnOutput() ApplicationReferenceDataSourceRecordColumnOutput {
	return i.ToApplicationReferenceDataSourceRecordColumnOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceRecordColumnArgs) ToApplicationReferenceDataSourceRecordColumnOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceRecordColumnOutput)
}

func (i ApplicationReferenceDataSourceRecordColumnArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordColumn]{
		OutputState: i.ToApplicationReferenceDataSourceRecordColumnOutputWithContext(ctx).OutputState,
	}
}

// ApplicationReferenceDataSourceRecordColumnArrayInput is an input type that accepts ApplicationReferenceDataSourceRecordColumnArray and ApplicationReferenceDataSourceRecordColumnArrayOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceRecordColumnArrayInput` via:
//
//	ApplicationReferenceDataSourceRecordColumnArray{ ApplicationReferenceDataSourceRecordColumnArgs{...} }
type ApplicationReferenceDataSourceRecordColumnArrayInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceRecordColumnArrayOutput() ApplicationReferenceDataSourceRecordColumnArrayOutput
	ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(context.Context) ApplicationReferenceDataSourceRecordColumnArrayOutput
}

type ApplicationReferenceDataSourceRecordColumnArray []ApplicationReferenceDataSourceRecordColumnInput

func (ApplicationReferenceDataSourceRecordColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceRecordColumnArray) ToApplicationReferenceDataSourceRecordColumnArrayOutput() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return i.ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceRecordColumnArray) ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceRecordColumnArrayOutput)
}

func (i ApplicationReferenceDataSourceRecordColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn]{
		OutputState: i.ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceRecordColumnOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) ToApplicationReferenceDataSourceRecordColumnOutput() ApplicationReferenceDataSourceRecordColumnOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) ToApplicationReferenceDataSourceRecordColumnOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordColumn]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) Mapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordColumn) *string { return v.Mapping }).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationReferenceDataSourceRecordColumnOutput) SqlType() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordColumn) string { return v.SqlType }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceRecordColumnArrayOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationReferenceDataSourceRecordColumn)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) ToApplicationReferenceDataSourceRecordColumnArrayOutput() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) ToApplicationReferenceDataSourceRecordColumnArrayOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn] {
	return pulumix.Output[[]ApplicationReferenceDataSourceRecordColumn]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordColumnArrayOutput) Index(i pulumi.IntInput) ApplicationReferenceDataSourceRecordColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationReferenceDataSourceRecordColumn {
		return vs[0].([]ApplicationReferenceDataSourceRecordColumn)[vs[1].(int)]
	}).(ApplicationReferenceDataSourceRecordColumnOutput)
}

type ApplicationReferenceDataSourceRecordFormat struct {
	MappingParameters *ApplicationReferenceDataSourceMappingParameters `pulumi:"mappingParameters"`
	RecordFormatType  string                                           `pulumi:"recordFormatType"`
}

// ApplicationReferenceDataSourceRecordFormatInput is an input type that accepts ApplicationReferenceDataSourceRecordFormatArgs and ApplicationReferenceDataSourceRecordFormatOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceRecordFormatInput` via:
//
//	ApplicationReferenceDataSourceRecordFormatArgs{...}
type ApplicationReferenceDataSourceRecordFormatInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceRecordFormatOutput() ApplicationReferenceDataSourceRecordFormatOutput
	ToApplicationReferenceDataSourceRecordFormatOutputWithContext(context.Context) ApplicationReferenceDataSourceRecordFormatOutput
}

type ApplicationReferenceDataSourceRecordFormatArgs struct {
	MappingParameters ApplicationReferenceDataSourceMappingParametersPtrInput `pulumi:"mappingParameters"`
	RecordFormatType  pulumi.StringInput                                      `pulumi:"recordFormatType"`
}

func (ApplicationReferenceDataSourceRecordFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordFormat)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceRecordFormatArgs) ToApplicationReferenceDataSourceRecordFormatOutput() ApplicationReferenceDataSourceRecordFormatOutput {
	return i.ToApplicationReferenceDataSourceRecordFormatOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceRecordFormatArgs) ToApplicationReferenceDataSourceRecordFormatOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceRecordFormatOutput)
}

func (i ApplicationReferenceDataSourceRecordFormatArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordFormat] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordFormat]{
		OutputState: i.ToApplicationReferenceDataSourceRecordFormatOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceRecordFormatOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceRecordFormat)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) ToApplicationReferenceDataSourceRecordFormatOutput() ApplicationReferenceDataSourceRecordFormatOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) ToApplicationReferenceDataSourceRecordFormatOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordFormatOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceRecordFormat] {
	return pulumix.Output[ApplicationReferenceDataSourceRecordFormat]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) MappingParameters() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordFormat) *ApplicationReferenceDataSourceMappingParameters {
		return v.MappingParameters
	}).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceRecordFormatOutput) RecordFormatType() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceRecordFormat) string { return v.RecordFormatType }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceRecordFormatPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceRecordFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceRecordFormat)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) ToApplicationReferenceDataSourceRecordFormatPtrOutput() ApplicationReferenceDataSourceRecordFormatPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) ToApplicationReferenceDataSourceRecordFormatPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceRecordFormatPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceRecordFormat] {
	return pulumix.Output[*ApplicationReferenceDataSourceRecordFormat]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) Elem() ApplicationReferenceDataSourceRecordFormatOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceRecordFormat) ApplicationReferenceDataSourceRecordFormat {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceRecordFormat
		return ret
	}).(ApplicationReferenceDataSourceRecordFormatOutput)
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) MappingParameters() ApplicationReferenceDataSourceMappingParametersPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceRecordFormat) *ApplicationReferenceDataSourceMappingParameters {
		if v == nil {
			return nil
		}
		return v.MappingParameters
	}).(ApplicationReferenceDataSourceMappingParametersPtrOutput)
}

func (o ApplicationReferenceDataSourceRecordFormatPtrOutput) RecordFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceRecordFormat) *string {
		if v == nil {
			return nil
		}
		return &v.RecordFormatType
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceReferenceDataSource struct {
	ReferenceSchema       ApplicationReferenceDataSourceReferenceSchema        `pulumi:"referenceSchema"`
	S3ReferenceDataSource *ApplicationReferenceDataSourceS3ReferenceDataSource `pulumi:"s3ReferenceDataSource"`
	TableName             *string                                              `pulumi:"tableName"`
}

// ApplicationReferenceDataSourceReferenceDataSourceInput is an input type that accepts ApplicationReferenceDataSourceReferenceDataSourceArgs and ApplicationReferenceDataSourceReferenceDataSourceOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceReferenceDataSourceInput` via:
//
//	ApplicationReferenceDataSourceReferenceDataSourceArgs{...}
type ApplicationReferenceDataSourceReferenceDataSourceInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceReferenceDataSourceOutput() ApplicationReferenceDataSourceReferenceDataSourceOutput
	ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(context.Context) ApplicationReferenceDataSourceReferenceDataSourceOutput
}

type ApplicationReferenceDataSourceReferenceDataSourceArgs struct {
	ReferenceSchema       ApplicationReferenceDataSourceReferenceSchemaInput          `pulumi:"referenceSchema"`
	S3ReferenceDataSource ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput `pulumi:"s3ReferenceDataSource"`
	TableName             pulumi.StringPtrInput                                       `pulumi:"tableName"`
}

func (ApplicationReferenceDataSourceReferenceDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceDataSource)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceReferenceDataSourceArgs) ToApplicationReferenceDataSourceReferenceDataSourceOutput() ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return i.ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceReferenceDataSourceArgs) ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceReferenceDataSourceOutput)
}

func (i ApplicationReferenceDataSourceReferenceDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource]{
		OutputState: i.ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceReferenceDataSourceOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ToApplicationReferenceDataSourceReferenceDataSourceOutput() ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ToApplicationReferenceDataSourceReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) ReferenceSchema() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceDataSource) ApplicationReferenceDataSourceReferenceSchema {
		return v.ReferenceSchema
	}).(ApplicationReferenceDataSourceReferenceSchemaOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) S3ReferenceDataSource() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceDataSource) *ApplicationReferenceDataSourceS3ReferenceDataSource {
		return v.S3ReferenceDataSource
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourceOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceDataSource) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceReferenceDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceReferenceDataSource] {
	return pulumix.Output[*ApplicationReferenceDataSourceReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) Elem() ApplicationReferenceDataSourceReferenceDataSourceOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) ApplicationReferenceDataSourceReferenceDataSource {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceReferenceDataSource
		return ret
	}).(ApplicationReferenceDataSourceReferenceDataSourceOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) ReferenceSchema() ApplicationReferenceDataSourceReferenceSchemaPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) *ApplicationReferenceDataSourceReferenceSchema {
		if v == nil {
			return nil
		}
		return &v.ReferenceSchema
	}).(ApplicationReferenceDataSourceReferenceSchemaPtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) S3ReferenceDataSource() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) *ApplicationReferenceDataSourceS3ReferenceDataSource {
		if v == nil {
			return nil
		}
		return v.S3ReferenceDataSource
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceDataSourcePtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

type ApplicationReferenceDataSourceReferenceSchema struct {
	RecordColumns  []ApplicationReferenceDataSourceRecordColumn `pulumi:"recordColumns"`
	RecordEncoding *string                                      `pulumi:"recordEncoding"`
	RecordFormat   ApplicationReferenceDataSourceRecordFormat   `pulumi:"recordFormat"`
}

// ApplicationReferenceDataSourceReferenceSchemaInput is an input type that accepts ApplicationReferenceDataSourceReferenceSchemaArgs and ApplicationReferenceDataSourceReferenceSchemaOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceReferenceSchemaInput` via:
//
//	ApplicationReferenceDataSourceReferenceSchemaArgs{...}
type ApplicationReferenceDataSourceReferenceSchemaInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceReferenceSchemaOutput() ApplicationReferenceDataSourceReferenceSchemaOutput
	ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(context.Context) ApplicationReferenceDataSourceReferenceSchemaOutput
}

type ApplicationReferenceDataSourceReferenceSchemaArgs struct {
	RecordColumns  ApplicationReferenceDataSourceRecordColumnArrayInput `pulumi:"recordColumns"`
	RecordEncoding pulumi.StringPtrInput                                `pulumi:"recordEncoding"`
	RecordFormat   ApplicationReferenceDataSourceRecordFormatInput      `pulumi:"recordFormat"`
}

func (ApplicationReferenceDataSourceReferenceSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceSchema)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceReferenceSchemaArgs) ToApplicationReferenceDataSourceReferenceSchemaOutput() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return i.ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceReferenceSchemaArgs) ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceReferenceSchemaOutput)
}

func (i ApplicationReferenceDataSourceReferenceSchemaArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceSchema] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceSchema]{
		OutputState: i.ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceReferenceSchemaOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceReferenceSchema)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) ToApplicationReferenceDataSourceReferenceSchemaOutput() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) ToApplicationReferenceDataSourceReferenceSchemaOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceReferenceSchema] {
	return pulumix.Output[ApplicationReferenceDataSourceReferenceSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) RecordColumns() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceSchema) []ApplicationReferenceDataSourceRecordColumn {
		return v.RecordColumns
	}).(ApplicationReferenceDataSourceRecordColumnArrayOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) RecordEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceSchema) *string { return v.RecordEncoding }).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaOutput) RecordFormat() ApplicationReferenceDataSourceRecordFormatOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceReferenceSchema) ApplicationReferenceDataSourceRecordFormat {
		return v.RecordFormat
	}).(ApplicationReferenceDataSourceRecordFormatOutput)
}

type ApplicationReferenceDataSourceReferenceSchemaPtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceReferenceSchema)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ToApplicationReferenceDataSourceReferenceSchemaPtrOutput() ApplicationReferenceDataSourceReferenceSchemaPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ToApplicationReferenceDataSourceReferenceSchemaPtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceReferenceSchemaPtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceReferenceSchema] {
	return pulumix.Output[*ApplicationReferenceDataSourceReferenceSchema]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) Elem() ApplicationReferenceDataSourceReferenceSchemaOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) ApplicationReferenceDataSourceReferenceSchema {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceReferenceSchema
		return ret
	}).(ApplicationReferenceDataSourceReferenceSchemaOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) RecordColumns() ApplicationReferenceDataSourceRecordColumnArrayOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) []ApplicationReferenceDataSourceRecordColumn {
		if v == nil {
			return nil
		}
		return v.RecordColumns
	}).(ApplicationReferenceDataSourceRecordColumnArrayOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) RecordEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) *string {
		if v == nil {
			return nil
		}
		return v.RecordEncoding
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceReferenceSchemaPtrOutput) RecordFormat() ApplicationReferenceDataSourceRecordFormatPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceReferenceSchema) *ApplicationReferenceDataSourceRecordFormat {
		if v == nil {
			return nil
		}
		return &v.RecordFormat
	}).(ApplicationReferenceDataSourceRecordFormatPtrOutput)
}

type ApplicationReferenceDataSourceS3ReferenceDataSource struct {
	BucketArn        string `pulumi:"bucketArn"`
	FileKey          string `pulumi:"fileKey"`
	ReferenceRoleArn string `pulumi:"referenceRoleArn"`
}

// ApplicationReferenceDataSourceS3ReferenceDataSourceInput is an input type that accepts ApplicationReferenceDataSourceS3ReferenceDataSourceArgs and ApplicationReferenceDataSourceS3ReferenceDataSourceOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceS3ReferenceDataSourceInput` via:
//
//	ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{...}
type ApplicationReferenceDataSourceS3ReferenceDataSourceInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceS3ReferenceDataSourceOutput() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput
	ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourceOutput
}

type ApplicationReferenceDataSourceS3ReferenceDataSourceArgs struct {
	BucketArn        pulumi.StringInput `pulumi:"bucketArn"`
	FileKey          pulumi.StringInput `pulumi:"fileKey"`
	ReferenceRoleArn pulumi.StringInput `pulumi:"referenceRoleArn"`
}

func (ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutput() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return i.ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput)
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: i.ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(ctx).OutputState,
	}
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return i.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Background())
}

func (i ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput).ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx)
}

// ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput is an input type that accepts ApplicationReferenceDataSourceS3ReferenceDataSourceArgs, ApplicationReferenceDataSourceS3ReferenceDataSourcePtr and ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput values.
// You can construct a concrete instance of `ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput` via:
//
//	        ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{...}
//
//	or:
//
//	        nil
type ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput interface {
	pulumi.Input

	ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput
	ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput
}

type applicationReferenceDataSourceS3ReferenceDataSourcePtrType ApplicationReferenceDataSourceS3ReferenceDataSourceArgs

func ApplicationReferenceDataSourceS3ReferenceDataSourcePtr(v *ApplicationReferenceDataSourceS3ReferenceDataSourceArgs) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput {
	return (*applicationReferenceDataSourceS3ReferenceDataSourcePtrType)(v)
}

func (*applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (i *applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return i.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Background())
}

func (i *applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (i *applicationReferenceDataSourceS3ReferenceDataSourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: i.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx).OutputState,
	}
}

type ApplicationReferenceDataSourceS3ReferenceDataSourceOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutput() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourceOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(context.Background())
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationReferenceDataSourceS3ReferenceDataSource) *ApplicationReferenceDataSourceS3ReferenceDataSource {
		return &v
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) BucketArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceS3ReferenceDataSource) string { return v.BucketArn }).(pulumi.StringOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) FileKey() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceS3ReferenceDataSource) string { return v.FileKey }).(pulumi.StringOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourceOutput) ReferenceRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationReferenceDataSourceS3ReferenceDataSource) string { return v.ReferenceRoleArn }).(pulumi.StringOutput)
}

type ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReferenceDataSourceS3ReferenceDataSource)(nil)).Elem()
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput() ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ToApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutputWithContext(ctx context.Context) ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput {
	return o
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource] {
	return pulumix.Output[*ApplicationReferenceDataSourceS3ReferenceDataSource]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) Elem() ApplicationReferenceDataSourceS3ReferenceDataSourceOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceS3ReferenceDataSource) ApplicationReferenceDataSourceS3ReferenceDataSource {
		if v != nil {
			return *v
		}
		var ret ApplicationReferenceDataSourceS3ReferenceDataSource
		return ret
	}).(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) BucketArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceS3ReferenceDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.BucketArn
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) FileKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceS3ReferenceDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.FileKey
	}).(pulumi.StringPtrOutput)
}

func (o ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput) ReferenceRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationReferenceDataSourceS3ReferenceDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceRoleArn
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCsvMappingParametersInput)(nil)).Elem(), ApplicationCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCsvMappingParametersPtrInput)(nil)).Elem(), ApplicationCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputTypeInput)(nil)).Elem(), ApplicationInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputTypeArrayInput)(nil)).Elem(), ApplicationInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputLambdaProcessorInput)(nil)).Elem(), ApplicationInputLambdaProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputLambdaProcessorPtrInput)(nil)).Elem(), ApplicationInputLambdaProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputParallelismInput)(nil)).Elem(), ApplicationInputParallelismArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputParallelismPtrInput)(nil)).Elem(), ApplicationInputParallelismArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputProcessingConfigurationInput)(nil)).Elem(), ApplicationInputProcessingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputProcessingConfigurationPtrInput)(nil)).Elem(), ApplicationInputProcessingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInputSchemaInput)(nil)).Elem(), ApplicationInputSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationJsonMappingParametersInput)(nil)).Elem(), ApplicationJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationJsonMappingParametersPtrInput)(nil)).Elem(), ApplicationJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisFirehoseInputInput)(nil)).Elem(), ApplicationKinesisFirehoseInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisFirehoseInputPtrInput)(nil)).Elem(), ApplicationKinesisFirehoseInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisStreamsInputInput)(nil)).Elem(), ApplicationKinesisStreamsInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKinesisStreamsInputPtrInput)(nil)).Elem(), ApplicationKinesisStreamsInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMappingParametersInput)(nil)).Elem(), ApplicationMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMappingParametersPtrInput)(nil)).Elem(), ApplicationMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceDestinationSchemaInput)(nil)).Elem(), ApplicationOutputResourceDestinationSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutputInput)(nil)).Elem(), ApplicationOutputResourceKinesisFirehoseOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisFirehoseOutputPtrInput)(nil)).Elem(), ApplicationOutputResourceKinesisFirehoseOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutputInput)(nil)).Elem(), ApplicationOutputResourceKinesisStreamsOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceKinesisStreamsOutputPtrInput)(nil)).Elem(), ApplicationOutputResourceKinesisStreamsOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceLambdaOutputInput)(nil)).Elem(), ApplicationOutputResourceLambdaOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceLambdaOutputPtrInput)(nil)).Elem(), ApplicationOutputResourceLambdaOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationOutputResourceOutputTypeInput)(nil)).Elem(), ApplicationOutputResourceOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRecordColumnInput)(nil)).Elem(), ApplicationRecordColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRecordColumnArrayInput)(nil)).Elem(), ApplicationRecordColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationRecordFormatInput)(nil)).Elem(), ApplicationRecordFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParametersInput)(nil)).Elem(), ApplicationReferenceDataSourceCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceCsvMappingParametersPtrInput)(nil)).Elem(), ApplicationReferenceDataSourceCsvMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParametersInput)(nil)).Elem(), ApplicationReferenceDataSourceJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceJsonMappingParametersPtrInput)(nil)).Elem(), ApplicationReferenceDataSourceJsonMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceMappingParametersInput)(nil)).Elem(), ApplicationReferenceDataSourceMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceMappingParametersPtrInput)(nil)).Elem(), ApplicationReferenceDataSourceMappingParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumnInput)(nil)).Elem(), ApplicationReferenceDataSourceRecordColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceRecordColumnArrayInput)(nil)).Elem(), ApplicationReferenceDataSourceRecordColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceRecordFormatInput)(nil)).Elem(), ApplicationReferenceDataSourceRecordFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceReferenceDataSourceInput)(nil)).Elem(), ApplicationReferenceDataSourceReferenceDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceReferenceSchemaInput)(nil)).Elem(), ApplicationReferenceDataSourceReferenceSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSourceInput)(nil)).Elem(), ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReferenceDataSourceS3ReferenceDataSourcePtrInput)(nil)).Elem(), ApplicationReferenceDataSourceS3ReferenceDataSourceArgs{})
	pulumi.RegisterOutputType(ApplicationCsvMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationCsvMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputTypeOutput{})
	pulumi.RegisterOutputType(ApplicationInputTypeArrayOutput{})
	pulumi.RegisterOutputType(ApplicationInputLambdaProcessorOutput{})
	pulumi.RegisterOutputType(ApplicationInputLambdaProcessorPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputParallelismOutput{})
	pulumi.RegisterOutputType(ApplicationInputParallelismPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputProcessingConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationInputProcessingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInputSchemaOutput{})
	pulumi.RegisterOutputType(ApplicationJsonMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationJsonMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisFirehoseInputOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisFirehoseInputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisStreamsInputOutput{})
	pulumi.RegisterOutputType(ApplicationKinesisStreamsInputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceDestinationSchemaOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceDestinationSchemaPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisFirehoseOutputOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisFirehoseOutputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisStreamsOutputOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceKinesisStreamsOutputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceLambdaOutputOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceLambdaOutputPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceOutputTypeOutput{})
	pulumi.RegisterOutputType(ApplicationOutputResourceOutputTypePtrOutput{})
	pulumi.RegisterOutputType(ApplicationRecordColumnOutput{})
	pulumi.RegisterOutputType(ApplicationRecordColumnArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRecordFormatOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceCsvMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceCsvMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceJsonMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceJsonMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceMappingParametersOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceMappingParametersPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordColumnOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordColumnArrayOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordFormatOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceRecordFormatPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceDataSourceOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceSchemaOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceReferenceSchemaPtrOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceS3ReferenceDataSourceOutput{})
	pulumi.RegisterOutputType(ApplicationReferenceDataSourceS3ReferenceDataSourcePtrOutput{})
}
