// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scheduler

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
type ScheduleAwsVpcConfiguration struct {
	AssignPublicIp *ScheduleAssignPublicIp `pulumi:"assignPublicIp"`
	// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets []string `pulumi:"subnets"`
}

// ScheduleAwsVpcConfigurationInput is an input type that accepts ScheduleAwsVpcConfigurationArgs and ScheduleAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `ScheduleAwsVpcConfigurationInput` via:
//
//	ScheduleAwsVpcConfigurationArgs{...}
type ScheduleAwsVpcConfigurationInput interface {
	pulumi.Input

	ToScheduleAwsVpcConfigurationOutput() ScheduleAwsVpcConfigurationOutput
	ToScheduleAwsVpcConfigurationOutputWithContext(context.Context) ScheduleAwsVpcConfigurationOutput
}

// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
type ScheduleAwsVpcConfigurationArgs struct {
	AssignPublicIp ScheduleAssignPublicIpPtrInput `pulumi:"assignPublicIp"`
	// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (ScheduleAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleAwsVpcConfiguration)(nil)).Elem()
}

func (i ScheduleAwsVpcConfigurationArgs) ToScheduleAwsVpcConfigurationOutput() ScheduleAwsVpcConfigurationOutput {
	return i.ToScheduleAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i ScheduleAwsVpcConfigurationArgs) ToScheduleAwsVpcConfigurationOutputWithContext(ctx context.Context) ScheduleAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleAwsVpcConfigurationOutput)
}

func (i ScheduleAwsVpcConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleAwsVpcConfiguration] {
	return pulumix.Output[ScheduleAwsVpcConfiguration]{
		OutputState: i.ToScheduleAwsVpcConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleAwsVpcConfigurationArgs) ToScheduleAwsVpcConfigurationPtrOutput() ScheduleAwsVpcConfigurationPtrOutput {
	return i.ToScheduleAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i ScheduleAwsVpcConfigurationArgs) ToScheduleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ScheduleAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleAwsVpcConfigurationOutput).ToScheduleAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// ScheduleAwsVpcConfigurationPtrInput is an input type that accepts ScheduleAwsVpcConfigurationArgs, ScheduleAwsVpcConfigurationPtr and ScheduleAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `ScheduleAwsVpcConfigurationPtrInput` via:
//
//	        ScheduleAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type ScheduleAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToScheduleAwsVpcConfigurationPtrOutput() ScheduleAwsVpcConfigurationPtrOutput
	ToScheduleAwsVpcConfigurationPtrOutputWithContext(context.Context) ScheduleAwsVpcConfigurationPtrOutput
}

type scheduleAwsVpcConfigurationPtrType ScheduleAwsVpcConfigurationArgs

func ScheduleAwsVpcConfigurationPtr(v *ScheduleAwsVpcConfigurationArgs) ScheduleAwsVpcConfigurationPtrInput {
	return (*scheduleAwsVpcConfigurationPtrType)(v)
}

func (*scheduleAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleAwsVpcConfiguration)(nil)).Elem()
}

func (i *scheduleAwsVpcConfigurationPtrType) ToScheduleAwsVpcConfigurationPtrOutput() ScheduleAwsVpcConfigurationPtrOutput {
	return i.ToScheduleAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *scheduleAwsVpcConfigurationPtrType) ToScheduleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ScheduleAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleAwsVpcConfigurationPtrOutput)
}

func (i *scheduleAwsVpcConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleAwsVpcConfiguration] {
	return pulumix.Output[*ScheduleAwsVpcConfiguration]{
		OutputState: i.ToScheduleAwsVpcConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
type ScheduleAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (ScheduleAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleAwsVpcConfiguration)(nil)).Elem()
}

func (o ScheduleAwsVpcConfigurationOutput) ToScheduleAwsVpcConfigurationOutput() ScheduleAwsVpcConfigurationOutput {
	return o
}

func (o ScheduleAwsVpcConfigurationOutput) ToScheduleAwsVpcConfigurationOutputWithContext(ctx context.Context) ScheduleAwsVpcConfigurationOutput {
	return o
}

func (o ScheduleAwsVpcConfigurationOutput) ToScheduleAwsVpcConfigurationPtrOutput() ScheduleAwsVpcConfigurationPtrOutput {
	return o.ToScheduleAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o ScheduleAwsVpcConfigurationOutput) ToScheduleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ScheduleAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleAwsVpcConfiguration) *ScheduleAwsVpcConfiguration {
		return &v
	}).(ScheduleAwsVpcConfigurationPtrOutput)
}

func (o ScheduleAwsVpcConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleAwsVpcConfiguration] {
	return pulumix.Output[ScheduleAwsVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleAwsVpcConfigurationOutput) AssignPublicIp() ScheduleAssignPublicIpPtrOutput {
	return o.ApplyT(func(v ScheduleAwsVpcConfiguration) *ScheduleAssignPublicIp { return v.AssignPublicIp }).(ScheduleAssignPublicIpPtrOutput)
}

// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o ScheduleAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleAwsVpcConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o ScheduleAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleAwsVpcConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type ScheduleAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ScheduleAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleAwsVpcConfiguration)(nil)).Elem()
}

func (o ScheduleAwsVpcConfigurationPtrOutput) ToScheduleAwsVpcConfigurationPtrOutput() ScheduleAwsVpcConfigurationPtrOutput {
	return o
}

func (o ScheduleAwsVpcConfigurationPtrOutput) ToScheduleAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ScheduleAwsVpcConfigurationPtrOutput {
	return o
}

func (o ScheduleAwsVpcConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleAwsVpcConfiguration] {
	return pulumix.Output[*ScheduleAwsVpcConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleAwsVpcConfigurationPtrOutput) Elem() ScheduleAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *ScheduleAwsVpcConfiguration) ScheduleAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret ScheduleAwsVpcConfiguration
		return ret
	}).(ScheduleAwsVpcConfigurationOutput)
}

func (o ScheduleAwsVpcConfigurationPtrOutput) AssignPublicIp() ScheduleAssignPublicIpPtrOutput {
	return o.ApplyT(func(v *ScheduleAwsVpcConfiguration) *ScheduleAssignPublicIp {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(ScheduleAssignPublicIpPtrOutput)
}

// Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
func (o ScheduleAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
func (o ScheduleAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

// The details of a capacity provider strategy.
type ScheduleCapacityProviderStrategyItem struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
	Base *float64 `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider string `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
	Weight *float64 `pulumi:"weight"`
}

// ScheduleCapacityProviderStrategyItemInput is an input type that accepts ScheduleCapacityProviderStrategyItemArgs and ScheduleCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `ScheduleCapacityProviderStrategyItemInput` via:
//
//	ScheduleCapacityProviderStrategyItemArgs{...}
type ScheduleCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToScheduleCapacityProviderStrategyItemOutput() ScheduleCapacityProviderStrategyItemOutput
	ToScheduleCapacityProviderStrategyItemOutputWithContext(context.Context) ScheduleCapacityProviderStrategyItemOutput
}

// The details of a capacity provider strategy.
type ScheduleCapacityProviderStrategyItemArgs struct {
	// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
	Base pulumi.Float64PtrInput `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
	Weight pulumi.Float64PtrInput `pulumi:"weight"`
}

func (ScheduleCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ScheduleCapacityProviderStrategyItemArgs) ToScheduleCapacityProviderStrategyItemOutput() ScheduleCapacityProviderStrategyItemOutput {
	return i.ToScheduleCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i ScheduleCapacityProviderStrategyItemArgs) ToScheduleCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ScheduleCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleCapacityProviderStrategyItemOutput)
}

func (i ScheduleCapacityProviderStrategyItemArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleCapacityProviderStrategyItem] {
	return pulumix.Output[ScheduleCapacityProviderStrategyItem]{
		OutputState: i.ToScheduleCapacityProviderStrategyItemOutputWithContext(ctx).OutputState,
	}
}

// ScheduleCapacityProviderStrategyItemArrayInput is an input type that accepts ScheduleCapacityProviderStrategyItemArray and ScheduleCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `ScheduleCapacityProviderStrategyItemArrayInput` via:
//
//	ScheduleCapacityProviderStrategyItemArray{ ScheduleCapacityProviderStrategyItemArgs{...} }
type ScheduleCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToScheduleCapacityProviderStrategyItemArrayOutput() ScheduleCapacityProviderStrategyItemArrayOutput
	ToScheduleCapacityProviderStrategyItemArrayOutputWithContext(context.Context) ScheduleCapacityProviderStrategyItemArrayOutput
}

type ScheduleCapacityProviderStrategyItemArray []ScheduleCapacityProviderStrategyItemInput

func (ScheduleCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ScheduleCapacityProviderStrategyItemArray) ToScheduleCapacityProviderStrategyItemArrayOutput() ScheduleCapacityProviderStrategyItemArrayOutput {
	return i.ToScheduleCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i ScheduleCapacityProviderStrategyItemArray) ToScheduleCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ScheduleCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleCapacityProviderStrategyItemArrayOutput)
}

func (i ScheduleCapacityProviderStrategyItemArray) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleCapacityProviderStrategyItem] {
	return pulumix.Output[[]ScheduleCapacityProviderStrategyItem]{
		OutputState: i.ToScheduleCapacityProviderStrategyItemArrayOutputWithContext(ctx).OutputState,
	}
}

// The details of a capacity provider strategy.
type ScheduleCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (ScheduleCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ScheduleCapacityProviderStrategyItemOutput) ToScheduleCapacityProviderStrategyItemOutput() ScheduleCapacityProviderStrategyItemOutput {
	return o
}

func (o ScheduleCapacityProviderStrategyItemOutput) ToScheduleCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ScheduleCapacityProviderStrategyItemOutput {
	return o
}

func (o ScheduleCapacityProviderStrategyItemOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleCapacityProviderStrategyItem] {
	return pulumix.Output[ScheduleCapacityProviderStrategyItem]{
		OutputState: o.OutputState,
	}
}

// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
func (o ScheduleCapacityProviderStrategyItemOutput) Base() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ScheduleCapacityProviderStrategyItem) *float64 { return v.Base }).(pulumi.Float64PtrOutput)
}

// The short name of the capacity provider.
func (o ScheduleCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleCapacityProviderStrategyItem) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
func (o ScheduleCapacityProviderStrategyItemOutput) Weight() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ScheduleCapacityProviderStrategyItem) *float64 { return v.Weight }).(pulumi.Float64PtrOutput)
}

type ScheduleCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (ScheduleCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ScheduleCapacityProviderStrategyItemArrayOutput) ToScheduleCapacityProviderStrategyItemArrayOutput() ScheduleCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ScheduleCapacityProviderStrategyItemArrayOutput) ToScheduleCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ScheduleCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ScheduleCapacityProviderStrategyItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleCapacityProviderStrategyItem] {
	return pulumix.Output[[]ScheduleCapacityProviderStrategyItem]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) ScheduleCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleCapacityProviderStrategyItem {
		return vs[0].([]ScheduleCapacityProviderStrategyItem)[vs[1].(int)]
	}).(ScheduleCapacityProviderStrategyItemOutput)
}

// A DeadLetterConfig object that contains information about a dead-letter queue configuration.
type ScheduleDeadLetterConfig struct {
	// The ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn *string `pulumi:"arn"`
}

// ScheduleDeadLetterConfigInput is an input type that accepts ScheduleDeadLetterConfigArgs and ScheduleDeadLetterConfigOutput values.
// You can construct a concrete instance of `ScheduleDeadLetterConfigInput` via:
//
//	ScheduleDeadLetterConfigArgs{...}
type ScheduleDeadLetterConfigInput interface {
	pulumi.Input

	ToScheduleDeadLetterConfigOutput() ScheduleDeadLetterConfigOutput
	ToScheduleDeadLetterConfigOutputWithContext(context.Context) ScheduleDeadLetterConfigOutput
}

// A DeadLetterConfig object that contains information about a dead-letter queue configuration.
type ScheduleDeadLetterConfigArgs struct {
	// The ARN of the SQS queue specified as the target for the dead-letter queue.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (ScheduleDeadLetterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleDeadLetterConfig)(nil)).Elem()
}

func (i ScheduleDeadLetterConfigArgs) ToScheduleDeadLetterConfigOutput() ScheduleDeadLetterConfigOutput {
	return i.ToScheduleDeadLetterConfigOutputWithContext(context.Background())
}

func (i ScheduleDeadLetterConfigArgs) ToScheduleDeadLetterConfigOutputWithContext(ctx context.Context) ScheduleDeadLetterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleDeadLetterConfigOutput)
}

func (i ScheduleDeadLetterConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleDeadLetterConfig] {
	return pulumix.Output[ScheduleDeadLetterConfig]{
		OutputState: i.ToScheduleDeadLetterConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleDeadLetterConfigArgs) ToScheduleDeadLetterConfigPtrOutput() ScheduleDeadLetterConfigPtrOutput {
	return i.ToScheduleDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i ScheduleDeadLetterConfigArgs) ToScheduleDeadLetterConfigPtrOutputWithContext(ctx context.Context) ScheduleDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleDeadLetterConfigOutput).ToScheduleDeadLetterConfigPtrOutputWithContext(ctx)
}

// ScheduleDeadLetterConfigPtrInput is an input type that accepts ScheduleDeadLetterConfigArgs, ScheduleDeadLetterConfigPtr and ScheduleDeadLetterConfigPtrOutput values.
// You can construct a concrete instance of `ScheduleDeadLetterConfigPtrInput` via:
//
//	        ScheduleDeadLetterConfigArgs{...}
//
//	or:
//
//	        nil
type ScheduleDeadLetterConfigPtrInput interface {
	pulumi.Input

	ToScheduleDeadLetterConfigPtrOutput() ScheduleDeadLetterConfigPtrOutput
	ToScheduleDeadLetterConfigPtrOutputWithContext(context.Context) ScheduleDeadLetterConfigPtrOutput
}

type scheduleDeadLetterConfigPtrType ScheduleDeadLetterConfigArgs

func ScheduleDeadLetterConfigPtr(v *ScheduleDeadLetterConfigArgs) ScheduleDeadLetterConfigPtrInput {
	return (*scheduleDeadLetterConfigPtrType)(v)
}

func (*scheduleDeadLetterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleDeadLetterConfig)(nil)).Elem()
}

func (i *scheduleDeadLetterConfigPtrType) ToScheduleDeadLetterConfigPtrOutput() ScheduleDeadLetterConfigPtrOutput {
	return i.ToScheduleDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (i *scheduleDeadLetterConfigPtrType) ToScheduleDeadLetterConfigPtrOutputWithContext(ctx context.Context) ScheduleDeadLetterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleDeadLetterConfigPtrOutput)
}

func (i *scheduleDeadLetterConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleDeadLetterConfig] {
	return pulumix.Output[*ScheduleDeadLetterConfig]{
		OutputState: i.ToScheduleDeadLetterConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// A DeadLetterConfig object that contains information about a dead-letter queue configuration.
type ScheduleDeadLetterConfigOutput struct{ *pulumi.OutputState }

func (ScheduleDeadLetterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleDeadLetterConfig)(nil)).Elem()
}

func (o ScheduleDeadLetterConfigOutput) ToScheduleDeadLetterConfigOutput() ScheduleDeadLetterConfigOutput {
	return o
}

func (o ScheduleDeadLetterConfigOutput) ToScheduleDeadLetterConfigOutputWithContext(ctx context.Context) ScheduleDeadLetterConfigOutput {
	return o
}

func (o ScheduleDeadLetterConfigOutput) ToScheduleDeadLetterConfigPtrOutput() ScheduleDeadLetterConfigPtrOutput {
	return o.ToScheduleDeadLetterConfigPtrOutputWithContext(context.Background())
}

func (o ScheduleDeadLetterConfigOutput) ToScheduleDeadLetterConfigPtrOutputWithContext(ctx context.Context) ScheduleDeadLetterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleDeadLetterConfig) *ScheduleDeadLetterConfig {
		return &v
	}).(ScheduleDeadLetterConfigPtrOutput)
}

func (o ScheduleDeadLetterConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleDeadLetterConfig] {
	return pulumix.Output[ScheduleDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

// The ARN of the SQS queue specified as the target for the dead-letter queue.
func (o ScheduleDeadLetterConfigOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleDeadLetterConfig) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type ScheduleDeadLetterConfigPtrOutput struct{ *pulumi.OutputState }

func (ScheduleDeadLetterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleDeadLetterConfig)(nil)).Elem()
}

func (o ScheduleDeadLetterConfigPtrOutput) ToScheduleDeadLetterConfigPtrOutput() ScheduleDeadLetterConfigPtrOutput {
	return o
}

func (o ScheduleDeadLetterConfigPtrOutput) ToScheduleDeadLetterConfigPtrOutputWithContext(ctx context.Context) ScheduleDeadLetterConfigPtrOutput {
	return o
}

func (o ScheduleDeadLetterConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleDeadLetterConfig] {
	return pulumix.Output[*ScheduleDeadLetterConfig]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleDeadLetterConfigPtrOutput) Elem() ScheduleDeadLetterConfigOutput {
	return o.ApplyT(func(v *ScheduleDeadLetterConfig) ScheduleDeadLetterConfig {
		if v != nil {
			return *v
		}
		var ret ScheduleDeadLetterConfig
		return ret
	}).(ScheduleDeadLetterConfigOutput)
}

// The ARN of the SQS queue specified as the target for the dead-letter queue.
func (o ScheduleDeadLetterConfigPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleDeadLetterConfig) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// The custom parameters to be used when the target is an Amazon ECS task.
type ScheduleEcsParameters struct {
	// The capacity provider strategy to use for the task.
	CapacityProviderStrategy []ScheduleCapacityProviderStrategyItem `pulumi:"capacityProviderStrategy"`
	// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group                *string                       `pulumi:"group"`
	LaunchType           *ScheduleLaunchType           `pulumi:"launchType"`
	NetworkConfiguration *ScheduleNetworkConfiguration `pulumi:"networkConfiguration"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
	PlacementConstraints []SchedulePlacementConstraint `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
	PlacementStrategy []SchedulePlacementStrategy `pulumi:"placementStrategy"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
	PlatformVersion *string                `pulumi:"platformVersion"`
	PropagateTags   *SchedulePropagateTags `pulumi:"propagateTags"`
	// The reference ID to use for the task.
	ReferenceId *string `pulumi:"referenceId"`
	// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see RunTask in the Amazon ECS API Reference.
	Tags []ScheduleTagMap `pulumi:"tags"`
	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount *float64 `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn string `pulumi:"taskDefinitionArn"`
}

// ScheduleEcsParametersInput is an input type that accepts ScheduleEcsParametersArgs and ScheduleEcsParametersOutput values.
// You can construct a concrete instance of `ScheduleEcsParametersInput` via:
//
//	ScheduleEcsParametersArgs{...}
type ScheduleEcsParametersInput interface {
	pulumi.Input

	ToScheduleEcsParametersOutput() ScheduleEcsParametersOutput
	ToScheduleEcsParametersOutputWithContext(context.Context) ScheduleEcsParametersOutput
}

// The custom parameters to be used when the target is an Amazon ECS task.
type ScheduleEcsParametersArgs struct {
	// The capacity provider strategy to use for the task.
	CapacityProviderStrategy ScheduleCapacityProviderStrategyItemArrayInput `pulumi:"capacityProviderStrategy"`
	// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
	EnableEcsManagedTags pulumi.BoolPtrInput `pulumi:"enableEcsManagedTags"`
	// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
	EnableExecuteCommand pulumi.BoolPtrInput `pulumi:"enableExecuteCommand"`
	// Specifies an ECS task group for the task. The maximum length is 255 characters.
	Group                pulumi.StringPtrInput                `pulumi:"group"`
	LaunchType           ScheduleLaunchTypePtrInput           `pulumi:"launchType"`
	NetworkConfiguration ScheduleNetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
	PlacementConstraints SchedulePlacementConstraintArrayInput `pulumi:"placementConstraints"`
	// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
	PlacementStrategy SchedulePlacementStrategyArrayInput `pulumi:"placementStrategy"`
	// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
	PlatformVersion pulumi.StringPtrInput         `pulumi:"platformVersion"`
	PropagateTags   SchedulePropagateTagsPtrInput `pulumi:"propagateTags"`
	// The reference ID to use for the task.
	ReferenceId pulumi.StringPtrInput `pulumi:"referenceId"`
	// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see RunTask in the Amazon ECS API Reference.
	Tags ScheduleTagMapArrayInput `pulumi:"tags"`
	// The number of tasks to create based on TaskDefinition. The default is 1.
	TaskCount pulumi.Float64PtrInput `pulumi:"taskCount"`
	// The ARN of the task definition to use if the event target is an Amazon ECS task.
	TaskDefinitionArn pulumi.StringInput `pulumi:"taskDefinitionArn"`
}

func (ScheduleEcsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEcsParameters)(nil)).Elem()
}

func (i ScheduleEcsParametersArgs) ToScheduleEcsParametersOutput() ScheduleEcsParametersOutput {
	return i.ToScheduleEcsParametersOutputWithContext(context.Background())
}

func (i ScheduleEcsParametersArgs) ToScheduleEcsParametersOutputWithContext(ctx context.Context) ScheduleEcsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEcsParametersOutput)
}

func (i ScheduleEcsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleEcsParameters] {
	return pulumix.Output[ScheduleEcsParameters]{
		OutputState: i.ToScheduleEcsParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleEcsParametersArgs) ToScheduleEcsParametersPtrOutput() ScheduleEcsParametersPtrOutput {
	return i.ToScheduleEcsParametersPtrOutputWithContext(context.Background())
}

func (i ScheduleEcsParametersArgs) ToScheduleEcsParametersPtrOutputWithContext(ctx context.Context) ScheduleEcsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEcsParametersOutput).ToScheduleEcsParametersPtrOutputWithContext(ctx)
}

// ScheduleEcsParametersPtrInput is an input type that accepts ScheduleEcsParametersArgs, ScheduleEcsParametersPtr and ScheduleEcsParametersPtrOutput values.
// You can construct a concrete instance of `ScheduleEcsParametersPtrInput` via:
//
//	        ScheduleEcsParametersArgs{...}
//
//	or:
//
//	        nil
type ScheduleEcsParametersPtrInput interface {
	pulumi.Input

	ToScheduleEcsParametersPtrOutput() ScheduleEcsParametersPtrOutput
	ToScheduleEcsParametersPtrOutputWithContext(context.Context) ScheduleEcsParametersPtrOutput
}

type scheduleEcsParametersPtrType ScheduleEcsParametersArgs

func ScheduleEcsParametersPtr(v *ScheduleEcsParametersArgs) ScheduleEcsParametersPtrInput {
	return (*scheduleEcsParametersPtrType)(v)
}

func (*scheduleEcsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEcsParameters)(nil)).Elem()
}

func (i *scheduleEcsParametersPtrType) ToScheduleEcsParametersPtrOutput() ScheduleEcsParametersPtrOutput {
	return i.ToScheduleEcsParametersPtrOutputWithContext(context.Background())
}

func (i *scheduleEcsParametersPtrType) ToScheduleEcsParametersPtrOutputWithContext(ctx context.Context) ScheduleEcsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEcsParametersPtrOutput)
}

func (i *scheduleEcsParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleEcsParameters] {
	return pulumix.Output[*ScheduleEcsParameters]{
		OutputState: i.ToScheduleEcsParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// The custom parameters to be used when the target is an Amazon ECS task.
type ScheduleEcsParametersOutput struct{ *pulumi.OutputState }

func (ScheduleEcsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEcsParameters)(nil)).Elem()
}

func (o ScheduleEcsParametersOutput) ToScheduleEcsParametersOutput() ScheduleEcsParametersOutput {
	return o
}

func (o ScheduleEcsParametersOutput) ToScheduleEcsParametersOutputWithContext(ctx context.Context) ScheduleEcsParametersOutput {
	return o
}

func (o ScheduleEcsParametersOutput) ToScheduleEcsParametersPtrOutput() ScheduleEcsParametersPtrOutput {
	return o.ToScheduleEcsParametersPtrOutputWithContext(context.Background())
}

func (o ScheduleEcsParametersOutput) ToScheduleEcsParametersPtrOutputWithContext(ctx context.Context) ScheduleEcsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleEcsParameters) *ScheduleEcsParameters {
		return &v
	}).(ScheduleEcsParametersPtrOutput)
}

func (o ScheduleEcsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleEcsParameters] {
	return pulumix.Output[ScheduleEcsParameters]{
		OutputState: o.OutputState,
	}
}

// The capacity provider strategy to use for the task.
func (o ScheduleEcsParametersOutput) CapacityProviderStrategy() ScheduleCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) []ScheduleCapacityProviderStrategyItem {
		return v.CapacityProviderStrategy
	}).(ScheduleCapacityProviderStrategyItemArrayOutput)
}

// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
func (o ScheduleEcsParametersOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *bool { return v.EnableEcsManagedTags }).(pulumi.BoolPtrOutput)
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
func (o ScheduleEcsParametersOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o ScheduleEcsParametersOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o ScheduleEcsParametersOutput) LaunchType() ScheduleLaunchTypePtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *ScheduleLaunchType { return v.LaunchType }).(ScheduleLaunchTypePtrOutput)
}

func (o ScheduleEcsParametersOutput) NetworkConfiguration() ScheduleNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *ScheduleNetworkConfiguration { return v.NetworkConfiguration }).(ScheduleNetworkConfigurationPtrOutput)
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
func (o ScheduleEcsParametersOutput) PlacementConstraints() SchedulePlacementConstraintArrayOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) []SchedulePlacementConstraint { return v.PlacementConstraints }).(SchedulePlacementConstraintArrayOutput)
}

// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
func (o ScheduleEcsParametersOutput) PlacementStrategy() SchedulePlacementStrategyArrayOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) []SchedulePlacementStrategy { return v.PlacementStrategy }).(SchedulePlacementStrategyArrayOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
func (o ScheduleEcsParametersOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

func (o ScheduleEcsParametersOutput) PropagateTags() SchedulePropagateTagsPtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *SchedulePropagateTags { return v.PropagateTags }).(SchedulePropagateTagsPtrOutput)
}

// The reference ID to use for the task.
func (o ScheduleEcsParametersOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *string { return v.ReferenceId }).(pulumi.StringPtrOutput)
}

// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see RunTask in the Amazon ECS API Reference.
func (o ScheduleEcsParametersOutput) Tags() ScheduleTagMapArrayOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) []ScheduleTagMap { return v.Tags }).(ScheduleTagMapArrayOutput)
}

// The number of tasks to create based on TaskDefinition. The default is 1.
func (o ScheduleEcsParametersOutput) TaskCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) *float64 { return v.TaskCount }).(pulumi.Float64PtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS task.
func (o ScheduleEcsParametersOutput) TaskDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleEcsParameters) string { return v.TaskDefinitionArn }).(pulumi.StringOutput)
}

type ScheduleEcsParametersPtrOutput struct{ *pulumi.OutputState }

func (ScheduleEcsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEcsParameters)(nil)).Elem()
}

func (o ScheduleEcsParametersPtrOutput) ToScheduleEcsParametersPtrOutput() ScheduleEcsParametersPtrOutput {
	return o
}

func (o ScheduleEcsParametersPtrOutput) ToScheduleEcsParametersPtrOutputWithContext(ctx context.Context) ScheduleEcsParametersPtrOutput {
	return o
}

func (o ScheduleEcsParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleEcsParameters] {
	return pulumix.Output[*ScheduleEcsParameters]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleEcsParametersPtrOutput) Elem() ScheduleEcsParametersOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) ScheduleEcsParameters {
		if v != nil {
			return *v
		}
		var ret ScheduleEcsParameters
		return ret
	}).(ScheduleEcsParametersOutput)
}

// The capacity provider strategy to use for the task.
func (o ScheduleEcsParametersPtrOutput) CapacityProviderStrategy() ScheduleCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) []ScheduleCapacityProviderStrategyItem {
		if v == nil {
			return nil
		}
		return v.CapacityProviderStrategy
	}).(ScheduleCapacityProviderStrategyItemArrayOutput)
}

// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
func (o ScheduleEcsParametersPtrOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEcsManagedTags
	}).(pulumi.BoolPtrOutput)
}

// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
func (o ScheduleEcsParametersPtrOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExecuteCommand
	}).(pulumi.BoolPtrOutput)
}

// Specifies an ECS task group for the task. The maximum length is 255 characters.
func (o ScheduleEcsParametersPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

func (o ScheduleEcsParametersPtrOutput) LaunchType() ScheduleLaunchTypePtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *ScheduleLaunchType {
		if v == nil {
			return nil
		}
		return v.LaunchType
	}).(ScheduleLaunchTypePtrOutput)
}

func (o ScheduleEcsParametersPtrOutput) NetworkConfiguration() ScheduleNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *ScheduleNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(ScheduleNetworkConfigurationPtrOutput)
}

// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
func (o ScheduleEcsParametersPtrOutput) PlacementConstraints() SchedulePlacementConstraintArrayOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) []SchedulePlacementConstraint {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(SchedulePlacementConstraintArrayOutput)
}

// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
func (o ScheduleEcsParametersPtrOutput) PlacementStrategy() SchedulePlacementStrategyArrayOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) []SchedulePlacementStrategy {
		if v == nil {
			return nil
		}
		return v.PlacementStrategy
	}).(SchedulePlacementStrategyArrayOutput)
}

// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
func (o ScheduleEcsParametersPtrOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.PlatformVersion
	}).(pulumi.StringPtrOutput)
}

func (o ScheduleEcsParametersPtrOutput) PropagateTags() SchedulePropagateTagsPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *SchedulePropagateTags {
		if v == nil {
			return nil
		}
		return v.PropagateTags
	}).(SchedulePropagateTagsPtrOutput)
}

// The reference ID to use for the task.
func (o ScheduleEcsParametersPtrOutput) ReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceId
	}).(pulumi.StringPtrOutput)
}

// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see RunTask in the Amazon ECS API Reference.
func (o ScheduleEcsParametersPtrOutput) Tags() ScheduleTagMapArrayOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) []ScheduleTagMap {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(ScheduleTagMapArrayOutput)
}

// The number of tasks to create based on TaskDefinition. The default is 1.
func (o ScheduleEcsParametersPtrOutput) TaskCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.TaskCount
	}).(pulumi.Float64PtrOutput)
}

// The ARN of the task definition to use if the event target is an Amazon ECS task.
func (o ScheduleEcsParametersPtrOutput) TaskDefinitionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleEcsParameters) *string {
		if v == nil {
			return nil
		}
		return &v.TaskDefinitionArn
	}).(pulumi.StringPtrOutput)
}

// EventBridge PutEvent predefined target type.
type ScheduleEventBridgeParameters struct {
	// Free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType string `pulumi:"detailType"`
	// The source of the event.
	Source string `pulumi:"source"`
}

// ScheduleEventBridgeParametersInput is an input type that accepts ScheduleEventBridgeParametersArgs and ScheduleEventBridgeParametersOutput values.
// You can construct a concrete instance of `ScheduleEventBridgeParametersInput` via:
//
//	ScheduleEventBridgeParametersArgs{...}
type ScheduleEventBridgeParametersInput interface {
	pulumi.Input

	ToScheduleEventBridgeParametersOutput() ScheduleEventBridgeParametersOutput
	ToScheduleEventBridgeParametersOutputWithContext(context.Context) ScheduleEventBridgeParametersOutput
}

// EventBridge PutEvent predefined target type.
type ScheduleEventBridgeParametersArgs struct {
	// Free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
	DetailType pulumi.StringInput `pulumi:"detailType"`
	// The source of the event.
	Source pulumi.StringInput `pulumi:"source"`
}

func (ScheduleEventBridgeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEventBridgeParameters)(nil)).Elem()
}

func (i ScheduleEventBridgeParametersArgs) ToScheduleEventBridgeParametersOutput() ScheduleEventBridgeParametersOutput {
	return i.ToScheduleEventBridgeParametersOutputWithContext(context.Background())
}

func (i ScheduleEventBridgeParametersArgs) ToScheduleEventBridgeParametersOutputWithContext(ctx context.Context) ScheduleEventBridgeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEventBridgeParametersOutput)
}

func (i ScheduleEventBridgeParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleEventBridgeParameters] {
	return pulumix.Output[ScheduleEventBridgeParameters]{
		OutputState: i.ToScheduleEventBridgeParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleEventBridgeParametersArgs) ToScheduleEventBridgeParametersPtrOutput() ScheduleEventBridgeParametersPtrOutput {
	return i.ToScheduleEventBridgeParametersPtrOutputWithContext(context.Background())
}

func (i ScheduleEventBridgeParametersArgs) ToScheduleEventBridgeParametersPtrOutputWithContext(ctx context.Context) ScheduleEventBridgeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEventBridgeParametersOutput).ToScheduleEventBridgeParametersPtrOutputWithContext(ctx)
}

// ScheduleEventBridgeParametersPtrInput is an input type that accepts ScheduleEventBridgeParametersArgs, ScheduleEventBridgeParametersPtr and ScheduleEventBridgeParametersPtrOutput values.
// You can construct a concrete instance of `ScheduleEventBridgeParametersPtrInput` via:
//
//	        ScheduleEventBridgeParametersArgs{...}
//
//	or:
//
//	        nil
type ScheduleEventBridgeParametersPtrInput interface {
	pulumi.Input

	ToScheduleEventBridgeParametersPtrOutput() ScheduleEventBridgeParametersPtrOutput
	ToScheduleEventBridgeParametersPtrOutputWithContext(context.Context) ScheduleEventBridgeParametersPtrOutput
}

type scheduleEventBridgeParametersPtrType ScheduleEventBridgeParametersArgs

func ScheduleEventBridgeParametersPtr(v *ScheduleEventBridgeParametersArgs) ScheduleEventBridgeParametersPtrInput {
	return (*scheduleEventBridgeParametersPtrType)(v)
}

func (*scheduleEventBridgeParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEventBridgeParameters)(nil)).Elem()
}

func (i *scheduleEventBridgeParametersPtrType) ToScheduleEventBridgeParametersPtrOutput() ScheduleEventBridgeParametersPtrOutput {
	return i.ToScheduleEventBridgeParametersPtrOutputWithContext(context.Background())
}

func (i *scheduleEventBridgeParametersPtrType) ToScheduleEventBridgeParametersPtrOutputWithContext(ctx context.Context) ScheduleEventBridgeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEventBridgeParametersPtrOutput)
}

func (i *scheduleEventBridgeParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleEventBridgeParameters] {
	return pulumix.Output[*ScheduleEventBridgeParameters]{
		OutputState: i.ToScheduleEventBridgeParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// EventBridge PutEvent predefined target type.
type ScheduleEventBridgeParametersOutput struct{ *pulumi.OutputState }

func (ScheduleEventBridgeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEventBridgeParameters)(nil)).Elem()
}

func (o ScheduleEventBridgeParametersOutput) ToScheduleEventBridgeParametersOutput() ScheduleEventBridgeParametersOutput {
	return o
}

func (o ScheduleEventBridgeParametersOutput) ToScheduleEventBridgeParametersOutputWithContext(ctx context.Context) ScheduleEventBridgeParametersOutput {
	return o
}

func (o ScheduleEventBridgeParametersOutput) ToScheduleEventBridgeParametersPtrOutput() ScheduleEventBridgeParametersPtrOutput {
	return o.ToScheduleEventBridgeParametersPtrOutputWithContext(context.Background())
}

func (o ScheduleEventBridgeParametersOutput) ToScheduleEventBridgeParametersPtrOutputWithContext(ctx context.Context) ScheduleEventBridgeParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleEventBridgeParameters) *ScheduleEventBridgeParameters {
		return &v
	}).(ScheduleEventBridgeParametersPtrOutput)
}

func (o ScheduleEventBridgeParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleEventBridgeParameters] {
	return pulumix.Output[ScheduleEventBridgeParameters]{
		OutputState: o.OutputState,
	}
}

// Free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
func (o ScheduleEventBridgeParametersOutput) DetailType() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleEventBridgeParameters) string { return v.DetailType }).(pulumi.StringOutput)
}

// The source of the event.
func (o ScheduleEventBridgeParametersOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleEventBridgeParameters) string { return v.Source }).(pulumi.StringOutput)
}

type ScheduleEventBridgeParametersPtrOutput struct{ *pulumi.OutputState }

func (ScheduleEventBridgeParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEventBridgeParameters)(nil)).Elem()
}

func (o ScheduleEventBridgeParametersPtrOutput) ToScheduleEventBridgeParametersPtrOutput() ScheduleEventBridgeParametersPtrOutput {
	return o
}

func (o ScheduleEventBridgeParametersPtrOutput) ToScheduleEventBridgeParametersPtrOutputWithContext(ctx context.Context) ScheduleEventBridgeParametersPtrOutput {
	return o
}

func (o ScheduleEventBridgeParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleEventBridgeParameters] {
	return pulumix.Output[*ScheduleEventBridgeParameters]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleEventBridgeParametersPtrOutput) Elem() ScheduleEventBridgeParametersOutput {
	return o.ApplyT(func(v *ScheduleEventBridgeParameters) ScheduleEventBridgeParameters {
		if v != nil {
			return *v
		}
		var ret ScheduleEventBridgeParameters
		return ret
	}).(ScheduleEventBridgeParametersOutput)
}

// Free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
func (o ScheduleEventBridgeParametersPtrOutput) DetailType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleEventBridgeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.DetailType
	}).(pulumi.StringPtrOutput)
}

// The source of the event.
func (o ScheduleEventBridgeParametersPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleEventBridgeParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

// Flexible time window allows configuration of a window within which a schedule can be invoked
type ScheduleFlexibleTimeWindow struct {
	// The maximum time window during which a schedule can be invoked.
	MaximumWindowInMinutes *float64                       `pulumi:"maximumWindowInMinutes"`
	Mode                   ScheduleFlexibleTimeWindowMode `pulumi:"mode"`
}

// ScheduleFlexibleTimeWindowInput is an input type that accepts ScheduleFlexibleTimeWindowArgs and ScheduleFlexibleTimeWindowOutput values.
// You can construct a concrete instance of `ScheduleFlexibleTimeWindowInput` via:
//
//	ScheduleFlexibleTimeWindowArgs{...}
type ScheduleFlexibleTimeWindowInput interface {
	pulumi.Input

	ToScheduleFlexibleTimeWindowOutput() ScheduleFlexibleTimeWindowOutput
	ToScheduleFlexibleTimeWindowOutputWithContext(context.Context) ScheduleFlexibleTimeWindowOutput
}

// Flexible time window allows configuration of a window within which a schedule can be invoked
type ScheduleFlexibleTimeWindowArgs struct {
	// The maximum time window during which a schedule can be invoked.
	MaximumWindowInMinutes pulumi.Float64PtrInput              `pulumi:"maximumWindowInMinutes"`
	Mode                   ScheduleFlexibleTimeWindowModeInput `pulumi:"mode"`
}

func (ScheduleFlexibleTimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFlexibleTimeWindow)(nil)).Elem()
}

func (i ScheduleFlexibleTimeWindowArgs) ToScheduleFlexibleTimeWindowOutput() ScheduleFlexibleTimeWindowOutput {
	return i.ToScheduleFlexibleTimeWindowOutputWithContext(context.Background())
}

func (i ScheduleFlexibleTimeWindowArgs) ToScheduleFlexibleTimeWindowOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleFlexibleTimeWindowOutput)
}

func (i ScheduleFlexibleTimeWindowArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleFlexibleTimeWindow] {
	return pulumix.Output[ScheduleFlexibleTimeWindow]{
		OutputState: i.ToScheduleFlexibleTimeWindowOutputWithContext(ctx).OutputState,
	}
}

// Flexible time window allows configuration of a window within which a schedule can be invoked
type ScheduleFlexibleTimeWindowOutput struct{ *pulumi.OutputState }

func (ScheduleFlexibleTimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFlexibleTimeWindow)(nil)).Elem()
}

func (o ScheduleFlexibleTimeWindowOutput) ToScheduleFlexibleTimeWindowOutput() ScheduleFlexibleTimeWindowOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowOutput) ToScheduleFlexibleTimeWindowOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleFlexibleTimeWindow] {
	return pulumix.Output[ScheduleFlexibleTimeWindow]{
		OutputState: o.OutputState,
	}
}

// The maximum time window during which a schedule can be invoked.
func (o ScheduleFlexibleTimeWindowOutput) MaximumWindowInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ScheduleFlexibleTimeWindow) *float64 { return v.MaximumWindowInMinutes }).(pulumi.Float64PtrOutput)
}

func (o ScheduleFlexibleTimeWindowOutput) Mode() ScheduleFlexibleTimeWindowModeOutput {
	return o.ApplyT(func(v ScheduleFlexibleTimeWindow) ScheduleFlexibleTimeWindowMode { return v.Mode }).(ScheduleFlexibleTimeWindowModeOutput)
}

type ScheduleFlexibleTimeWindowPtrOutput struct{ *pulumi.OutputState }

func (ScheduleFlexibleTimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleFlexibleTimeWindow)(nil)).Elem()
}

func (o ScheduleFlexibleTimeWindowPtrOutput) ToScheduleFlexibleTimeWindowPtrOutput() ScheduleFlexibleTimeWindowPtrOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowPtrOutput) ToScheduleFlexibleTimeWindowPtrOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowPtrOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleFlexibleTimeWindow] {
	return pulumix.Output[*ScheduleFlexibleTimeWindow]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleFlexibleTimeWindowPtrOutput) Elem() ScheduleFlexibleTimeWindowOutput {
	return o.ApplyT(func(v *ScheduleFlexibleTimeWindow) ScheduleFlexibleTimeWindow {
		if v != nil {
			return *v
		}
		var ret ScheduleFlexibleTimeWindow
		return ret
	}).(ScheduleFlexibleTimeWindowOutput)
}

// The maximum time window during which a schedule can be invoked.
func (o ScheduleFlexibleTimeWindowPtrOutput) MaximumWindowInMinutes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ScheduleFlexibleTimeWindow) *float64 {
		if v == nil {
			return nil
		}
		return v.MaximumWindowInMinutes
	}).(pulumi.Float64PtrOutput)
}

func (o ScheduleFlexibleTimeWindowPtrOutput) Mode() ScheduleFlexibleTimeWindowModePtrOutput {
	return o.ApplyT(func(v *ScheduleFlexibleTimeWindow) *ScheduleFlexibleTimeWindowMode {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(ScheduleFlexibleTimeWindowModePtrOutput)
}

// Tag to associate with the resource.
type ScheduleGroupTag struct {
	// Key for the tag
	Key string `pulumi:"key"`
	// Value for the tag
	Value string `pulumi:"value"`
}

// ScheduleGroupTagInput is an input type that accepts ScheduleGroupTagArgs and ScheduleGroupTagOutput values.
// You can construct a concrete instance of `ScheduleGroupTagInput` via:
//
//	ScheduleGroupTagArgs{...}
type ScheduleGroupTagInput interface {
	pulumi.Input

	ToScheduleGroupTagOutput() ScheduleGroupTagOutput
	ToScheduleGroupTagOutputWithContext(context.Context) ScheduleGroupTagOutput
}

// Tag to associate with the resource.
type ScheduleGroupTagArgs struct {
	// Key for the tag
	Key pulumi.StringInput `pulumi:"key"`
	// Value for the tag
	Value pulumi.StringInput `pulumi:"value"`
}

func (ScheduleGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleGroupTag)(nil)).Elem()
}

func (i ScheduleGroupTagArgs) ToScheduleGroupTagOutput() ScheduleGroupTagOutput {
	return i.ToScheduleGroupTagOutputWithContext(context.Background())
}

func (i ScheduleGroupTagArgs) ToScheduleGroupTagOutputWithContext(ctx context.Context) ScheduleGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleGroupTagOutput)
}

func (i ScheduleGroupTagArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleGroupTag] {
	return pulumix.Output[ScheduleGroupTag]{
		OutputState: i.ToScheduleGroupTagOutputWithContext(ctx).OutputState,
	}
}

// ScheduleGroupTagArrayInput is an input type that accepts ScheduleGroupTagArray and ScheduleGroupTagArrayOutput values.
// You can construct a concrete instance of `ScheduleGroupTagArrayInput` via:
//
//	ScheduleGroupTagArray{ ScheduleGroupTagArgs{...} }
type ScheduleGroupTagArrayInput interface {
	pulumi.Input

	ToScheduleGroupTagArrayOutput() ScheduleGroupTagArrayOutput
	ToScheduleGroupTagArrayOutputWithContext(context.Context) ScheduleGroupTagArrayOutput
}

type ScheduleGroupTagArray []ScheduleGroupTagInput

func (ScheduleGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleGroupTag)(nil)).Elem()
}

func (i ScheduleGroupTagArray) ToScheduleGroupTagArrayOutput() ScheduleGroupTagArrayOutput {
	return i.ToScheduleGroupTagArrayOutputWithContext(context.Background())
}

func (i ScheduleGroupTagArray) ToScheduleGroupTagArrayOutputWithContext(ctx context.Context) ScheduleGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleGroupTagArrayOutput)
}

func (i ScheduleGroupTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleGroupTag] {
	return pulumix.Output[[]ScheduleGroupTag]{
		OutputState: i.ToScheduleGroupTagArrayOutputWithContext(ctx).OutputState,
	}
}

// Tag to associate with the resource.
type ScheduleGroupTagOutput struct{ *pulumi.OutputState }

func (ScheduleGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleGroupTag)(nil)).Elem()
}

func (o ScheduleGroupTagOutput) ToScheduleGroupTagOutput() ScheduleGroupTagOutput {
	return o
}

func (o ScheduleGroupTagOutput) ToScheduleGroupTagOutputWithContext(ctx context.Context) ScheduleGroupTagOutput {
	return o
}

func (o ScheduleGroupTagOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleGroupTag] {
	return pulumix.Output[ScheduleGroupTag]{
		OutputState: o.OutputState,
	}
}

// Key for the tag
func (o ScheduleGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

// Value for the tag
func (o ScheduleGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type ScheduleGroupTagArrayOutput struct{ *pulumi.OutputState }

func (ScheduleGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleGroupTag)(nil)).Elem()
}

func (o ScheduleGroupTagArrayOutput) ToScheduleGroupTagArrayOutput() ScheduleGroupTagArrayOutput {
	return o
}

func (o ScheduleGroupTagArrayOutput) ToScheduleGroupTagArrayOutputWithContext(ctx context.Context) ScheduleGroupTagArrayOutput {
	return o
}

func (o ScheduleGroupTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleGroupTag] {
	return pulumix.Output[[]ScheduleGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleGroupTagArrayOutput) Index(i pulumi.IntInput) ScheduleGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleGroupTag {
		return vs[0].([]ScheduleGroupTag)[vs[1].(int)]
	}).(ScheduleGroupTagOutput)
}

// The custom parameter you can use to control the shard to which EventBridge Scheduler sends the event.
type ScheduleKinesisParameters struct {
	// The custom parameter used as the Kinesis partition key. For more information, see Amazon Kinesis Streams Key Concepts in the Amazon Kinesis Streams Developer Guide.
	PartitionKey string `pulumi:"partitionKey"`
}

// ScheduleKinesisParametersInput is an input type that accepts ScheduleKinesisParametersArgs and ScheduleKinesisParametersOutput values.
// You can construct a concrete instance of `ScheduleKinesisParametersInput` via:
//
//	ScheduleKinesisParametersArgs{...}
type ScheduleKinesisParametersInput interface {
	pulumi.Input

	ToScheduleKinesisParametersOutput() ScheduleKinesisParametersOutput
	ToScheduleKinesisParametersOutputWithContext(context.Context) ScheduleKinesisParametersOutput
}

// The custom parameter you can use to control the shard to which EventBridge Scheduler sends the event.
type ScheduleKinesisParametersArgs struct {
	// The custom parameter used as the Kinesis partition key. For more information, see Amazon Kinesis Streams Key Concepts in the Amazon Kinesis Streams Developer Guide.
	PartitionKey pulumi.StringInput `pulumi:"partitionKey"`
}

func (ScheduleKinesisParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleKinesisParameters)(nil)).Elem()
}

func (i ScheduleKinesisParametersArgs) ToScheduleKinesisParametersOutput() ScheduleKinesisParametersOutput {
	return i.ToScheduleKinesisParametersOutputWithContext(context.Background())
}

func (i ScheduleKinesisParametersArgs) ToScheduleKinesisParametersOutputWithContext(ctx context.Context) ScheduleKinesisParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleKinesisParametersOutput)
}

func (i ScheduleKinesisParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleKinesisParameters] {
	return pulumix.Output[ScheduleKinesisParameters]{
		OutputState: i.ToScheduleKinesisParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleKinesisParametersArgs) ToScheduleKinesisParametersPtrOutput() ScheduleKinesisParametersPtrOutput {
	return i.ToScheduleKinesisParametersPtrOutputWithContext(context.Background())
}

func (i ScheduleKinesisParametersArgs) ToScheduleKinesisParametersPtrOutputWithContext(ctx context.Context) ScheduleKinesisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleKinesisParametersOutput).ToScheduleKinesisParametersPtrOutputWithContext(ctx)
}

// ScheduleKinesisParametersPtrInput is an input type that accepts ScheduleKinesisParametersArgs, ScheduleKinesisParametersPtr and ScheduleKinesisParametersPtrOutput values.
// You can construct a concrete instance of `ScheduleKinesisParametersPtrInput` via:
//
//	        ScheduleKinesisParametersArgs{...}
//
//	or:
//
//	        nil
type ScheduleKinesisParametersPtrInput interface {
	pulumi.Input

	ToScheduleKinesisParametersPtrOutput() ScheduleKinesisParametersPtrOutput
	ToScheduleKinesisParametersPtrOutputWithContext(context.Context) ScheduleKinesisParametersPtrOutput
}

type scheduleKinesisParametersPtrType ScheduleKinesisParametersArgs

func ScheduleKinesisParametersPtr(v *ScheduleKinesisParametersArgs) ScheduleKinesisParametersPtrInput {
	return (*scheduleKinesisParametersPtrType)(v)
}

func (*scheduleKinesisParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleKinesisParameters)(nil)).Elem()
}

func (i *scheduleKinesisParametersPtrType) ToScheduleKinesisParametersPtrOutput() ScheduleKinesisParametersPtrOutput {
	return i.ToScheduleKinesisParametersPtrOutputWithContext(context.Background())
}

func (i *scheduleKinesisParametersPtrType) ToScheduleKinesisParametersPtrOutputWithContext(ctx context.Context) ScheduleKinesisParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleKinesisParametersPtrOutput)
}

func (i *scheduleKinesisParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleKinesisParameters] {
	return pulumix.Output[*ScheduleKinesisParameters]{
		OutputState: i.ToScheduleKinesisParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// The custom parameter you can use to control the shard to which EventBridge Scheduler sends the event.
type ScheduleKinesisParametersOutput struct{ *pulumi.OutputState }

func (ScheduleKinesisParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleKinesisParameters)(nil)).Elem()
}

func (o ScheduleKinesisParametersOutput) ToScheduleKinesisParametersOutput() ScheduleKinesisParametersOutput {
	return o
}

func (o ScheduleKinesisParametersOutput) ToScheduleKinesisParametersOutputWithContext(ctx context.Context) ScheduleKinesisParametersOutput {
	return o
}

func (o ScheduleKinesisParametersOutput) ToScheduleKinesisParametersPtrOutput() ScheduleKinesisParametersPtrOutput {
	return o.ToScheduleKinesisParametersPtrOutputWithContext(context.Background())
}

func (o ScheduleKinesisParametersOutput) ToScheduleKinesisParametersPtrOutputWithContext(ctx context.Context) ScheduleKinesisParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleKinesisParameters) *ScheduleKinesisParameters {
		return &v
	}).(ScheduleKinesisParametersPtrOutput)
}

func (o ScheduleKinesisParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleKinesisParameters] {
	return pulumix.Output[ScheduleKinesisParameters]{
		OutputState: o.OutputState,
	}
}

// The custom parameter used as the Kinesis partition key. For more information, see Amazon Kinesis Streams Key Concepts in the Amazon Kinesis Streams Developer Guide.
func (o ScheduleKinesisParametersOutput) PartitionKey() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleKinesisParameters) string { return v.PartitionKey }).(pulumi.StringOutput)
}

type ScheduleKinesisParametersPtrOutput struct{ *pulumi.OutputState }

func (ScheduleKinesisParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleKinesisParameters)(nil)).Elem()
}

func (o ScheduleKinesisParametersPtrOutput) ToScheduleKinesisParametersPtrOutput() ScheduleKinesisParametersPtrOutput {
	return o
}

func (o ScheduleKinesisParametersPtrOutput) ToScheduleKinesisParametersPtrOutputWithContext(ctx context.Context) ScheduleKinesisParametersPtrOutput {
	return o
}

func (o ScheduleKinesisParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleKinesisParameters] {
	return pulumix.Output[*ScheduleKinesisParameters]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleKinesisParametersPtrOutput) Elem() ScheduleKinesisParametersOutput {
	return o.ApplyT(func(v *ScheduleKinesisParameters) ScheduleKinesisParameters {
		if v != nil {
			return *v
		}
		var ret ScheduleKinesisParameters
		return ret
	}).(ScheduleKinesisParametersOutput)
}

// The custom parameter used as the Kinesis partition key. For more information, see Amazon Kinesis Streams Key Concepts in the Amazon Kinesis Streams Developer Guide.
func (o ScheduleKinesisParametersPtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleKinesisParameters) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// This structure specifies the network configuration for an ECS task.
type ScheduleNetworkConfiguration struct {
	AwsvpcConfiguration *ScheduleAwsVpcConfiguration `pulumi:"awsvpcConfiguration"`
}

// ScheduleNetworkConfigurationInput is an input type that accepts ScheduleNetworkConfigurationArgs and ScheduleNetworkConfigurationOutput values.
// You can construct a concrete instance of `ScheduleNetworkConfigurationInput` via:
//
//	ScheduleNetworkConfigurationArgs{...}
type ScheduleNetworkConfigurationInput interface {
	pulumi.Input

	ToScheduleNetworkConfigurationOutput() ScheduleNetworkConfigurationOutput
	ToScheduleNetworkConfigurationOutputWithContext(context.Context) ScheduleNetworkConfigurationOutput
}

// This structure specifies the network configuration for an ECS task.
type ScheduleNetworkConfigurationArgs struct {
	AwsvpcConfiguration ScheduleAwsVpcConfigurationPtrInput `pulumi:"awsvpcConfiguration"`
}

func (ScheduleNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleNetworkConfiguration)(nil)).Elem()
}

func (i ScheduleNetworkConfigurationArgs) ToScheduleNetworkConfigurationOutput() ScheduleNetworkConfigurationOutput {
	return i.ToScheduleNetworkConfigurationOutputWithContext(context.Background())
}

func (i ScheduleNetworkConfigurationArgs) ToScheduleNetworkConfigurationOutputWithContext(ctx context.Context) ScheduleNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleNetworkConfigurationOutput)
}

func (i ScheduleNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleNetworkConfiguration] {
	return pulumix.Output[ScheduleNetworkConfiguration]{
		OutputState: i.ToScheduleNetworkConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleNetworkConfigurationArgs) ToScheduleNetworkConfigurationPtrOutput() ScheduleNetworkConfigurationPtrOutput {
	return i.ToScheduleNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i ScheduleNetworkConfigurationArgs) ToScheduleNetworkConfigurationPtrOutputWithContext(ctx context.Context) ScheduleNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleNetworkConfigurationOutput).ToScheduleNetworkConfigurationPtrOutputWithContext(ctx)
}

// ScheduleNetworkConfigurationPtrInput is an input type that accepts ScheduleNetworkConfigurationArgs, ScheduleNetworkConfigurationPtr and ScheduleNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `ScheduleNetworkConfigurationPtrInput` via:
//
//	        ScheduleNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type ScheduleNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToScheduleNetworkConfigurationPtrOutput() ScheduleNetworkConfigurationPtrOutput
	ToScheduleNetworkConfigurationPtrOutputWithContext(context.Context) ScheduleNetworkConfigurationPtrOutput
}

type scheduleNetworkConfigurationPtrType ScheduleNetworkConfigurationArgs

func ScheduleNetworkConfigurationPtr(v *ScheduleNetworkConfigurationArgs) ScheduleNetworkConfigurationPtrInput {
	return (*scheduleNetworkConfigurationPtrType)(v)
}

func (*scheduleNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleNetworkConfiguration)(nil)).Elem()
}

func (i *scheduleNetworkConfigurationPtrType) ToScheduleNetworkConfigurationPtrOutput() ScheduleNetworkConfigurationPtrOutput {
	return i.ToScheduleNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *scheduleNetworkConfigurationPtrType) ToScheduleNetworkConfigurationPtrOutputWithContext(ctx context.Context) ScheduleNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleNetworkConfigurationPtrOutput)
}

func (i *scheduleNetworkConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleNetworkConfiguration] {
	return pulumix.Output[*ScheduleNetworkConfiguration]{
		OutputState: i.ToScheduleNetworkConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// This structure specifies the network configuration for an ECS task.
type ScheduleNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (ScheduleNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleNetworkConfiguration)(nil)).Elem()
}

func (o ScheduleNetworkConfigurationOutput) ToScheduleNetworkConfigurationOutput() ScheduleNetworkConfigurationOutput {
	return o
}

func (o ScheduleNetworkConfigurationOutput) ToScheduleNetworkConfigurationOutputWithContext(ctx context.Context) ScheduleNetworkConfigurationOutput {
	return o
}

func (o ScheduleNetworkConfigurationOutput) ToScheduleNetworkConfigurationPtrOutput() ScheduleNetworkConfigurationPtrOutput {
	return o.ToScheduleNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o ScheduleNetworkConfigurationOutput) ToScheduleNetworkConfigurationPtrOutputWithContext(ctx context.Context) ScheduleNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleNetworkConfiguration) *ScheduleNetworkConfiguration {
		return &v
	}).(ScheduleNetworkConfigurationPtrOutput)
}

func (o ScheduleNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleNetworkConfiguration] {
	return pulumix.Output[ScheduleNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleNetworkConfigurationOutput) AwsvpcConfiguration() ScheduleAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v ScheduleNetworkConfiguration) *ScheduleAwsVpcConfiguration { return v.AwsvpcConfiguration }).(ScheduleAwsVpcConfigurationPtrOutput)
}

type ScheduleNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ScheduleNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleNetworkConfiguration)(nil)).Elem()
}

func (o ScheduleNetworkConfigurationPtrOutput) ToScheduleNetworkConfigurationPtrOutput() ScheduleNetworkConfigurationPtrOutput {
	return o
}

func (o ScheduleNetworkConfigurationPtrOutput) ToScheduleNetworkConfigurationPtrOutputWithContext(ctx context.Context) ScheduleNetworkConfigurationPtrOutput {
	return o
}

func (o ScheduleNetworkConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleNetworkConfiguration] {
	return pulumix.Output[*ScheduleNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleNetworkConfigurationPtrOutput) Elem() ScheduleNetworkConfigurationOutput {
	return o.ApplyT(func(v *ScheduleNetworkConfiguration) ScheduleNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret ScheduleNetworkConfiguration
		return ret
	}).(ScheduleNetworkConfigurationOutput)
}

func (o ScheduleNetworkConfigurationPtrOutput) AwsvpcConfiguration() ScheduleAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *ScheduleNetworkConfiguration) *ScheduleAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsvpcConfiguration
	}).(ScheduleAwsVpcConfigurationPtrOutput)
}

// An object representing a constraint on task placement.
type SchedulePlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. To learn more, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
	Expression *string                          `pulumi:"expression"`
	Type       *SchedulePlacementConstraintType `pulumi:"type"`
}

// SchedulePlacementConstraintInput is an input type that accepts SchedulePlacementConstraintArgs and SchedulePlacementConstraintOutput values.
// You can construct a concrete instance of `SchedulePlacementConstraintInput` via:
//
//	SchedulePlacementConstraintArgs{...}
type SchedulePlacementConstraintInput interface {
	pulumi.Input

	ToSchedulePlacementConstraintOutput() SchedulePlacementConstraintOutput
	ToSchedulePlacementConstraintOutputWithContext(context.Context) SchedulePlacementConstraintOutput
}

// An object representing a constraint on task placement.
type SchedulePlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. To learn more, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
	Expression pulumi.StringPtrInput                   `pulumi:"expression"`
	Type       SchedulePlacementConstraintTypePtrInput `pulumi:"type"`
}

func (SchedulePlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementConstraint)(nil)).Elem()
}

func (i SchedulePlacementConstraintArgs) ToSchedulePlacementConstraintOutput() SchedulePlacementConstraintOutput {
	return i.ToSchedulePlacementConstraintOutputWithContext(context.Background())
}

func (i SchedulePlacementConstraintArgs) ToSchedulePlacementConstraintOutputWithContext(ctx context.Context) SchedulePlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePlacementConstraintOutput)
}

func (i SchedulePlacementConstraintArgs) ToOutput(ctx context.Context) pulumix.Output[SchedulePlacementConstraint] {
	return pulumix.Output[SchedulePlacementConstraint]{
		OutputState: i.ToSchedulePlacementConstraintOutputWithContext(ctx).OutputState,
	}
}

// SchedulePlacementConstraintArrayInput is an input type that accepts SchedulePlacementConstraintArray and SchedulePlacementConstraintArrayOutput values.
// You can construct a concrete instance of `SchedulePlacementConstraintArrayInput` via:
//
//	SchedulePlacementConstraintArray{ SchedulePlacementConstraintArgs{...} }
type SchedulePlacementConstraintArrayInput interface {
	pulumi.Input

	ToSchedulePlacementConstraintArrayOutput() SchedulePlacementConstraintArrayOutput
	ToSchedulePlacementConstraintArrayOutputWithContext(context.Context) SchedulePlacementConstraintArrayOutput
}

type SchedulePlacementConstraintArray []SchedulePlacementConstraintInput

func (SchedulePlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulePlacementConstraint)(nil)).Elem()
}

func (i SchedulePlacementConstraintArray) ToSchedulePlacementConstraintArrayOutput() SchedulePlacementConstraintArrayOutput {
	return i.ToSchedulePlacementConstraintArrayOutputWithContext(context.Background())
}

func (i SchedulePlacementConstraintArray) ToSchedulePlacementConstraintArrayOutputWithContext(ctx context.Context) SchedulePlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePlacementConstraintArrayOutput)
}

func (i SchedulePlacementConstraintArray) ToOutput(ctx context.Context) pulumix.Output[[]SchedulePlacementConstraint] {
	return pulumix.Output[[]SchedulePlacementConstraint]{
		OutputState: i.ToSchedulePlacementConstraintArrayOutputWithContext(ctx).OutputState,
	}
}

// An object representing a constraint on task placement.
type SchedulePlacementConstraintOutput struct{ *pulumi.OutputState }

func (SchedulePlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementConstraint)(nil)).Elem()
}

func (o SchedulePlacementConstraintOutput) ToSchedulePlacementConstraintOutput() SchedulePlacementConstraintOutput {
	return o
}

func (o SchedulePlacementConstraintOutput) ToSchedulePlacementConstraintOutputWithContext(ctx context.Context) SchedulePlacementConstraintOutput {
	return o
}

func (o SchedulePlacementConstraintOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulePlacementConstraint] {
	return pulumix.Output[SchedulePlacementConstraint]{
		OutputState: o.OutputState,
	}
}

// A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. To learn more, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
func (o SchedulePlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulePlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o SchedulePlacementConstraintOutput) Type() SchedulePlacementConstraintTypePtrOutput {
	return o.ApplyT(func(v SchedulePlacementConstraint) *SchedulePlacementConstraintType { return v.Type }).(SchedulePlacementConstraintTypePtrOutput)
}

type SchedulePlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (SchedulePlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulePlacementConstraint)(nil)).Elem()
}

func (o SchedulePlacementConstraintArrayOutput) ToSchedulePlacementConstraintArrayOutput() SchedulePlacementConstraintArrayOutput {
	return o
}

func (o SchedulePlacementConstraintArrayOutput) ToSchedulePlacementConstraintArrayOutputWithContext(ctx context.Context) SchedulePlacementConstraintArrayOutput {
	return o
}

func (o SchedulePlacementConstraintArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchedulePlacementConstraint] {
	return pulumix.Output[[]SchedulePlacementConstraint]{
		OutputState: o.OutputState,
	}
}

func (o SchedulePlacementConstraintArrayOutput) Index(i pulumi.IntInput) SchedulePlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulePlacementConstraint {
		return vs[0].([]SchedulePlacementConstraint)[vs[1].(int)]
	}).(SchedulePlacementConstraintOutput)
}

// The task placement strategy for a task or service.
type SchedulePlacementStrategy struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
	Field *string                        `pulumi:"field"`
	Type  *SchedulePlacementStrategyType `pulumi:"type"`
}

// SchedulePlacementStrategyInput is an input type that accepts SchedulePlacementStrategyArgs and SchedulePlacementStrategyOutput values.
// You can construct a concrete instance of `SchedulePlacementStrategyInput` via:
//
//	SchedulePlacementStrategyArgs{...}
type SchedulePlacementStrategyInput interface {
	pulumi.Input

	ToSchedulePlacementStrategyOutput() SchedulePlacementStrategyOutput
	ToSchedulePlacementStrategyOutputWithContext(context.Context) SchedulePlacementStrategyOutput
}

// The task placement strategy for a task or service.
type SchedulePlacementStrategyArgs struct {
	// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
	Field pulumi.StringPtrInput                 `pulumi:"field"`
	Type  SchedulePlacementStrategyTypePtrInput `pulumi:"type"`
}

func (SchedulePlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementStrategy)(nil)).Elem()
}

func (i SchedulePlacementStrategyArgs) ToSchedulePlacementStrategyOutput() SchedulePlacementStrategyOutput {
	return i.ToSchedulePlacementStrategyOutputWithContext(context.Background())
}

func (i SchedulePlacementStrategyArgs) ToSchedulePlacementStrategyOutputWithContext(ctx context.Context) SchedulePlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePlacementStrategyOutput)
}

func (i SchedulePlacementStrategyArgs) ToOutput(ctx context.Context) pulumix.Output[SchedulePlacementStrategy] {
	return pulumix.Output[SchedulePlacementStrategy]{
		OutputState: i.ToSchedulePlacementStrategyOutputWithContext(ctx).OutputState,
	}
}

// SchedulePlacementStrategyArrayInput is an input type that accepts SchedulePlacementStrategyArray and SchedulePlacementStrategyArrayOutput values.
// You can construct a concrete instance of `SchedulePlacementStrategyArrayInput` via:
//
//	SchedulePlacementStrategyArray{ SchedulePlacementStrategyArgs{...} }
type SchedulePlacementStrategyArrayInput interface {
	pulumi.Input

	ToSchedulePlacementStrategyArrayOutput() SchedulePlacementStrategyArrayOutput
	ToSchedulePlacementStrategyArrayOutputWithContext(context.Context) SchedulePlacementStrategyArrayOutput
}

type SchedulePlacementStrategyArray []SchedulePlacementStrategyInput

func (SchedulePlacementStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulePlacementStrategy)(nil)).Elem()
}

func (i SchedulePlacementStrategyArray) ToSchedulePlacementStrategyArrayOutput() SchedulePlacementStrategyArrayOutput {
	return i.ToSchedulePlacementStrategyArrayOutputWithContext(context.Background())
}

func (i SchedulePlacementStrategyArray) ToSchedulePlacementStrategyArrayOutputWithContext(ctx context.Context) SchedulePlacementStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePlacementStrategyArrayOutput)
}

func (i SchedulePlacementStrategyArray) ToOutput(ctx context.Context) pulumix.Output[[]SchedulePlacementStrategy] {
	return pulumix.Output[[]SchedulePlacementStrategy]{
		OutputState: i.ToSchedulePlacementStrategyArrayOutputWithContext(ctx).OutputState,
	}
}

// The task placement strategy for a task or service.
type SchedulePlacementStrategyOutput struct{ *pulumi.OutputState }

func (SchedulePlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementStrategy)(nil)).Elem()
}

func (o SchedulePlacementStrategyOutput) ToSchedulePlacementStrategyOutput() SchedulePlacementStrategyOutput {
	return o
}

func (o SchedulePlacementStrategyOutput) ToSchedulePlacementStrategyOutputWithContext(ctx context.Context) SchedulePlacementStrategyOutput {
	return o
}

func (o SchedulePlacementStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulePlacementStrategy] {
	return pulumix.Output[SchedulePlacementStrategy]{
		OutputState: o.OutputState,
	}
}

// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
func (o SchedulePlacementStrategyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulePlacementStrategy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o SchedulePlacementStrategyOutput) Type() SchedulePlacementStrategyTypePtrOutput {
	return o.ApplyT(func(v SchedulePlacementStrategy) *SchedulePlacementStrategyType { return v.Type }).(SchedulePlacementStrategyTypePtrOutput)
}

type SchedulePlacementStrategyArrayOutput struct{ *pulumi.OutputState }

func (SchedulePlacementStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulePlacementStrategy)(nil)).Elem()
}

func (o SchedulePlacementStrategyArrayOutput) ToSchedulePlacementStrategyArrayOutput() SchedulePlacementStrategyArrayOutput {
	return o
}

func (o SchedulePlacementStrategyArrayOutput) ToSchedulePlacementStrategyArrayOutputWithContext(ctx context.Context) SchedulePlacementStrategyArrayOutput {
	return o
}

func (o SchedulePlacementStrategyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchedulePlacementStrategy] {
	return pulumix.Output[[]SchedulePlacementStrategy]{
		OutputState: o.OutputState,
	}
}

func (o SchedulePlacementStrategyArrayOutput) Index(i pulumi.IntInput) SchedulePlacementStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulePlacementStrategy {
		return vs[0].([]SchedulePlacementStrategy)[vs[1].(int)]
	}).(SchedulePlacementStrategyOutput)
}

// A RetryPolicy object that includes information about the retry policy settings.
type ScheduleRetryPolicy struct {
	// The maximum amount of time, in seconds, to continue to make retry attempts.
	MaximumEventAgeInSeconds *float64 `pulumi:"maximumEventAgeInSeconds"`
	// The maximum number of retry attempts to make before the request fails. Retry attempts with exponential backoff continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is reached.
	MaximumRetryAttempts *float64 `pulumi:"maximumRetryAttempts"`
}

// ScheduleRetryPolicyInput is an input type that accepts ScheduleRetryPolicyArgs and ScheduleRetryPolicyOutput values.
// You can construct a concrete instance of `ScheduleRetryPolicyInput` via:
//
//	ScheduleRetryPolicyArgs{...}
type ScheduleRetryPolicyInput interface {
	pulumi.Input

	ToScheduleRetryPolicyOutput() ScheduleRetryPolicyOutput
	ToScheduleRetryPolicyOutputWithContext(context.Context) ScheduleRetryPolicyOutput
}

// A RetryPolicy object that includes information about the retry policy settings.
type ScheduleRetryPolicyArgs struct {
	// The maximum amount of time, in seconds, to continue to make retry attempts.
	MaximumEventAgeInSeconds pulumi.Float64PtrInput `pulumi:"maximumEventAgeInSeconds"`
	// The maximum number of retry attempts to make before the request fails. Retry attempts with exponential backoff continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is reached.
	MaximumRetryAttempts pulumi.Float64PtrInput `pulumi:"maximumRetryAttempts"`
}

func (ScheduleRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRetryPolicy)(nil)).Elem()
}

func (i ScheduleRetryPolicyArgs) ToScheduleRetryPolicyOutput() ScheduleRetryPolicyOutput {
	return i.ToScheduleRetryPolicyOutputWithContext(context.Background())
}

func (i ScheduleRetryPolicyArgs) ToScheduleRetryPolicyOutputWithContext(ctx context.Context) ScheduleRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRetryPolicyOutput)
}

func (i ScheduleRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleRetryPolicy] {
	return pulumix.Output[ScheduleRetryPolicy]{
		OutputState: i.ToScheduleRetryPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleRetryPolicyArgs) ToScheduleRetryPolicyPtrOutput() ScheduleRetryPolicyPtrOutput {
	return i.ToScheduleRetryPolicyPtrOutputWithContext(context.Background())
}

func (i ScheduleRetryPolicyArgs) ToScheduleRetryPolicyPtrOutputWithContext(ctx context.Context) ScheduleRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRetryPolicyOutput).ToScheduleRetryPolicyPtrOutputWithContext(ctx)
}

// ScheduleRetryPolicyPtrInput is an input type that accepts ScheduleRetryPolicyArgs, ScheduleRetryPolicyPtr and ScheduleRetryPolicyPtrOutput values.
// You can construct a concrete instance of `ScheduleRetryPolicyPtrInput` via:
//
//	        ScheduleRetryPolicyArgs{...}
//
//	or:
//
//	        nil
type ScheduleRetryPolicyPtrInput interface {
	pulumi.Input

	ToScheduleRetryPolicyPtrOutput() ScheduleRetryPolicyPtrOutput
	ToScheduleRetryPolicyPtrOutputWithContext(context.Context) ScheduleRetryPolicyPtrOutput
}

type scheduleRetryPolicyPtrType ScheduleRetryPolicyArgs

func ScheduleRetryPolicyPtr(v *ScheduleRetryPolicyArgs) ScheduleRetryPolicyPtrInput {
	return (*scheduleRetryPolicyPtrType)(v)
}

func (*scheduleRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleRetryPolicy)(nil)).Elem()
}

func (i *scheduleRetryPolicyPtrType) ToScheduleRetryPolicyPtrOutput() ScheduleRetryPolicyPtrOutput {
	return i.ToScheduleRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *scheduleRetryPolicyPtrType) ToScheduleRetryPolicyPtrOutputWithContext(ctx context.Context) ScheduleRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRetryPolicyPtrOutput)
}

func (i *scheduleRetryPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleRetryPolicy] {
	return pulumix.Output[*ScheduleRetryPolicy]{
		OutputState: i.ToScheduleRetryPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// A RetryPolicy object that includes information about the retry policy settings.
type ScheduleRetryPolicyOutput struct{ *pulumi.OutputState }

func (ScheduleRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRetryPolicy)(nil)).Elem()
}

func (o ScheduleRetryPolicyOutput) ToScheduleRetryPolicyOutput() ScheduleRetryPolicyOutput {
	return o
}

func (o ScheduleRetryPolicyOutput) ToScheduleRetryPolicyOutputWithContext(ctx context.Context) ScheduleRetryPolicyOutput {
	return o
}

func (o ScheduleRetryPolicyOutput) ToScheduleRetryPolicyPtrOutput() ScheduleRetryPolicyPtrOutput {
	return o.ToScheduleRetryPolicyPtrOutputWithContext(context.Background())
}

func (o ScheduleRetryPolicyOutput) ToScheduleRetryPolicyPtrOutputWithContext(ctx context.Context) ScheduleRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleRetryPolicy) *ScheduleRetryPolicy {
		return &v
	}).(ScheduleRetryPolicyPtrOutput)
}

func (o ScheduleRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleRetryPolicy] {
	return pulumix.Output[ScheduleRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// The maximum amount of time, in seconds, to continue to make retry attempts.
func (o ScheduleRetryPolicyOutput) MaximumEventAgeInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ScheduleRetryPolicy) *float64 { return v.MaximumEventAgeInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum number of retry attempts to make before the request fails. Retry attempts with exponential backoff continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is reached.
func (o ScheduleRetryPolicyOutput) MaximumRetryAttempts() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ScheduleRetryPolicy) *float64 { return v.MaximumRetryAttempts }).(pulumi.Float64PtrOutput)
}

type ScheduleRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (ScheduleRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleRetryPolicy)(nil)).Elem()
}

func (o ScheduleRetryPolicyPtrOutput) ToScheduleRetryPolicyPtrOutput() ScheduleRetryPolicyPtrOutput {
	return o
}

func (o ScheduleRetryPolicyPtrOutput) ToScheduleRetryPolicyPtrOutputWithContext(ctx context.Context) ScheduleRetryPolicyPtrOutput {
	return o
}

func (o ScheduleRetryPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleRetryPolicy] {
	return pulumix.Output[*ScheduleRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleRetryPolicyPtrOutput) Elem() ScheduleRetryPolicyOutput {
	return o.ApplyT(func(v *ScheduleRetryPolicy) ScheduleRetryPolicy {
		if v != nil {
			return *v
		}
		var ret ScheduleRetryPolicy
		return ret
	}).(ScheduleRetryPolicyOutput)
}

// The maximum amount of time, in seconds, to continue to make retry attempts.
func (o ScheduleRetryPolicyPtrOutput) MaximumEventAgeInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ScheduleRetryPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.MaximumEventAgeInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum number of retry attempts to make before the request fails. Retry attempts with exponential backoff continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is reached.
func (o ScheduleRetryPolicyPtrOutput) MaximumRetryAttempts() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ScheduleRetryPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.MaximumRetryAttempts
	}).(pulumi.Float64PtrOutput)
}

// Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
type ScheduleSageMakerPipelineParameter struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name string `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value string `pulumi:"value"`
}

// ScheduleSageMakerPipelineParameterInput is an input type that accepts ScheduleSageMakerPipelineParameterArgs and ScheduleSageMakerPipelineParameterOutput values.
// You can construct a concrete instance of `ScheduleSageMakerPipelineParameterInput` via:
//
//	ScheduleSageMakerPipelineParameterArgs{...}
type ScheduleSageMakerPipelineParameterInput interface {
	pulumi.Input

	ToScheduleSageMakerPipelineParameterOutput() ScheduleSageMakerPipelineParameterOutput
	ToScheduleSageMakerPipelineParameterOutputWithContext(context.Context) ScheduleSageMakerPipelineParameterOutput
}

// Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
type ScheduleSageMakerPipelineParameterArgs struct {
	// Name of parameter to start execution of a SageMaker Model Building Pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of parameter to start execution of a SageMaker Model Building Pipeline.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ScheduleSageMakerPipelineParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSageMakerPipelineParameter)(nil)).Elem()
}

func (i ScheduleSageMakerPipelineParameterArgs) ToScheduleSageMakerPipelineParameterOutput() ScheduleSageMakerPipelineParameterOutput {
	return i.ToScheduleSageMakerPipelineParameterOutputWithContext(context.Background())
}

func (i ScheduleSageMakerPipelineParameterArgs) ToScheduleSageMakerPipelineParameterOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSageMakerPipelineParameterOutput)
}

func (i ScheduleSageMakerPipelineParameterArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleSageMakerPipelineParameter] {
	return pulumix.Output[ScheduleSageMakerPipelineParameter]{
		OutputState: i.ToScheduleSageMakerPipelineParameterOutputWithContext(ctx).OutputState,
	}
}

// ScheduleSageMakerPipelineParameterArrayInput is an input type that accepts ScheduleSageMakerPipelineParameterArray and ScheduleSageMakerPipelineParameterArrayOutput values.
// You can construct a concrete instance of `ScheduleSageMakerPipelineParameterArrayInput` via:
//
//	ScheduleSageMakerPipelineParameterArray{ ScheduleSageMakerPipelineParameterArgs{...} }
type ScheduleSageMakerPipelineParameterArrayInput interface {
	pulumi.Input

	ToScheduleSageMakerPipelineParameterArrayOutput() ScheduleSageMakerPipelineParameterArrayOutput
	ToScheduleSageMakerPipelineParameterArrayOutputWithContext(context.Context) ScheduleSageMakerPipelineParameterArrayOutput
}

type ScheduleSageMakerPipelineParameterArray []ScheduleSageMakerPipelineParameterInput

func (ScheduleSageMakerPipelineParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSageMakerPipelineParameter)(nil)).Elem()
}

func (i ScheduleSageMakerPipelineParameterArray) ToScheduleSageMakerPipelineParameterArrayOutput() ScheduleSageMakerPipelineParameterArrayOutput {
	return i.ToScheduleSageMakerPipelineParameterArrayOutputWithContext(context.Background())
}

func (i ScheduleSageMakerPipelineParameterArray) ToScheduleSageMakerPipelineParameterArrayOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSageMakerPipelineParameterArrayOutput)
}

func (i ScheduleSageMakerPipelineParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleSageMakerPipelineParameter] {
	return pulumix.Output[[]ScheduleSageMakerPipelineParameter]{
		OutputState: i.ToScheduleSageMakerPipelineParameterArrayOutputWithContext(ctx).OutputState,
	}
}

// Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
type ScheduleSageMakerPipelineParameterOutput struct{ *pulumi.OutputState }

func (ScheduleSageMakerPipelineParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSageMakerPipelineParameter)(nil)).Elem()
}

func (o ScheduleSageMakerPipelineParameterOutput) ToScheduleSageMakerPipelineParameterOutput() ScheduleSageMakerPipelineParameterOutput {
	return o
}

func (o ScheduleSageMakerPipelineParameterOutput) ToScheduleSageMakerPipelineParameterOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParameterOutput {
	return o
}

func (o ScheduleSageMakerPipelineParameterOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleSageMakerPipelineParameter] {
	return pulumix.Output[ScheduleSageMakerPipelineParameter]{
		OutputState: o.OutputState,
	}
}

// Name of parameter to start execution of a SageMaker Model Building Pipeline.
func (o ScheduleSageMakerPipelineParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSageMakerPipelineParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Value of parameter to start execution of a SageMaker Model Building Pipeline.
func (o ScheduleSageMakerPipelineParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSageMakerPipelineParameter) string { return v.Value }).(pulumi.StringOutput)
}

type ScheduleSageMakerPipelineParameterArrayOutput struct{ *pulumi.OutputState }

func (ScheduleSageMakerPipelineParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSageMakerPipelineParameter)(nil)).Elem()
}

func (o ScheduleSageMakerPipelineParameterArrayOutput) ToScheduleSageMakerPipelineParameterArrayOutput() ScheduleSageMakerPipelineParameterArrayOutput {
	return o
}

func (o ScheduleSageMakerPipelineParameterArrayOutput) ToScheduleSageMakerPipelineParameterArrayOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParameterArrayOutput {
	return o
}

func (o ScheduleSageMakerPipelineParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleSageMakerPipelineParameter] {
	return pulumix.Output[[]ScheduleSageMakerPipelineParameter]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleSageMakerPipelineParameterArrayOutput) Index(i pulumi.IntInput) ScheduleSageMakerPipelineParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleSageMakerPipelineParameter {
		return vs[0].([]ScheduleSageMakerPipelineParameter)[vs[1].(int)]
	}).(ScheduleSageMakerPipelineParameterOutput)
}

// These are custom parameters to use when the target is a SageMaker Model Building Pipeline that starts based on AWS EventBridge Scheduler schedules.
type ScheduleSageMakerPipelineParameters struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution.
	PipelineParameterList []ScheduleSageMakerPipelineParameter `pulumi:"pipelineParameterList"`
}

// ScheduleSageMakerPipelineParametersInput is an input type that accepts ScheduleSageMakerPipelineParametersArgs and ScheduleSageMakerPipelineParametersOutput values.
// You can construct a concrete instance of `ScheduleSageMakerPipelineParametersInput` via:
//
//	ScheduleSageMakerPipelineParametersArgs{...}
type ScheduleSageMakerPipelineParametersInput interface {
	pulumi.Input

	ToScheduleSageMakerPipelineParametersOutput() ScheduleSageMakerPipelineParametersOutput
	ToScheduleSageMakerPipelineParametersOutputWithContext(context.Context) ScheduleSageMakerPipelineParametersOutput
}

// These are custom parameters to use when the target is a SageMaker Model Building Pipeline that starts based on AWS EventBridge Scheduler schedules.
type ScheduleSageMakerPipelineParametersArgs struct {
	// List of Parameter names and values for SageMaker Model Building Pipeline execution.
	PipelineParameterList ScheduleSageMakerPipelineParameterArrayInput `pulumi:"pipelineParameterList"`
}

func (ScheduleSageMakerPipelineParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSageMakerPipelineParameters)(nil)).Elem()
}

func (i ScheduleSageMakerPipelineParametersArgs) ToScheduleSageMakerPipelineParametersOutput() ScheduleSageMakerPipelineParametersOutput {
	return i.ToScheduleSageMakerPipelineParametersOutputWithContext(context.Background())
}

func (i ScheduleSageMakerPipelineParametersArgs) ToScheduleSageMakerPipelineParametersOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSageMakerPipelineParametersOutput)
}

func (i ScheduleSageMakerPipelineParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleSageMakerPipelineParameters] {
	return pulumix.Output[ScheduleSageMakerPipelineParameters]{
		OutputState: i.ToScheduleSageMakerPipelineParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleSageMakerPipelineParametersArgs) ToScheduleSageMakerPipelineParametersPtrOutput() ScheduleSageMakerPipelineParametersPtrOutput {
	return i.ToScheduleSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i ScheduleSageMakerPipelineParametersArgs) ToScheduleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSageMakerPipelineParametersOutput).ToScheduleSageMakerPipelineParametersPtrOutputWithContext(ctx)
}

// ScheduleSageMakerPipelineParametersPtrInput is an input type that accepts ScheduleSageMakerPipelineParametersArgs, ScheduleSageMakerPipelineParametersPtr and ScheduleSageMakerPipelineParametersPtrOutput values.
// You can construct a concrete instance of `ScheduleSageMakerPipelineParametersPtrInput` via:
//
//	        ScheduleSageMakerPipelineParametersArgs{...}
//
//	or:
//
//	        nil
type ScheduleSageMakerPipelineParametersPtrInput interface {
	pulumi.Input

	ToScheduleSageMakerPipelineParametersPtrOutput() ScheduleSageMakerPipelineParametersPtrOutput
	ToScheduleSageMakerPipelineParametersPtrOutputWithContext(context.Context) ScheduleSageMakerPipelineParametersPtrOutput
}

type scheduleSageMakerPipelineParametersPtrType ScheduleSageMakerPipelineParametersArgs

func ScheduleSageMakerPipelineParametersPtr(v *ScheduleSageMakerPipelineParametersArgs) ScheduleSageMakerPipelineParametersPtrInput {
	return (*scheduleSageMakerPipelineParametersPtrType)(v)
}

func (*scheduleSageMakerPipelineParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSageMakerPipelineParameters)(nil)).Elem()
}

func (i *scheduleSageMakerPipelineParametersPtrType) ToScheduleSageMakerPipelineParametersPtrOutput() ScheduleSageMakerPipelineParametersPtrOutput {
	return i.ToScheduleSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (i *scheduleSageMakerPipelineParametersPtrType) ToScheduleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSageMakerPipelineParametersPtrOutput)
}

func (i *scheduleSageMakerPipelineParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleSageMakerPipelineParameters] {
	return pulumix.Output[*ScheduleSageMakerPipelineParameters]{
		OutputState: i.ToScheduleSageMakerPipelineParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// These are custom parameters to use when the target is a SageMaker Model Building Pipeline that starts based on AWS EventBridge Scheduler schedules.
type ScheduleSageMakerPipelineParametersOutput struct{ *pulumi.OutputState }

func (ScheduleSageMakerPipelineParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSageMakerPipelineParameters)(nil)).Elem()
}

func (o ScheduleSageMakerPipelineParametersOutput) ToScheduleSageMakerPipelineParametersOutput() ScheduleSageMakerPipelineParametersOutput {
	return o
}

func (o ScheduleSageMakerPipelineParametersOutput) ToScheduleSageMakerPipelineParametersOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParametersOutput {
	return o
}

func (o ScheduleSageMakerPipelineParametersOutput) ToScheduleSageMakerPipelineParametersPtrOutput() ScheduleSageMakerPipelineParametersPtrOutput {
	return o.ToScheduleSageMakerPipelineParametersPtrOutputWithContext(context.Background())
}

func (o ScheduleSageMakerPipelineParametersOutput) ToScheduleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleSageMakerPipelineParameters) *ScheduleSageMakerPipelineParameters {
		return &v
	}).(ScheduleSageMakerPipelineParametersPtrOutput)
}

func (o ScheduleSageMakerPipelineParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleSageMakerPipelineParameters] {
	return pulumix.Output[ScheduleSageMakerPipelineParameters]{
		OutputState: o.OutputState,
	}
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution.
func (o ScheduleSageMakerPipelineParametersOutput) PipelineParameterList() ScheduleSageMakerPipelineParameterArrayOutput {
	return o.ApplyT(func(v ScheduleSageMakerPipelineParameters) []ScheduleSageMakerPipelineParameter {
		return v.PipelineParameterList
	}).(ScheduleSageMakerPipelineParameterArrayOutput)
}

type ScheduleSageMakerPipelineParametersPtrOutput struct{ *pulumi.OutputState }

func (ScheduleSageMakerPipelineParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSageMakerPipelineParameters)(nil)).Elem()
}

func (o ScheduleSageMakerPipelineParametersPtrOutput) ToScheduleSageMakerPipelineParametersPtrOutput() ScheduleSageMakerPipelineParametersPtrOutput {
	return o
}

func (o ScheduleSageMakerPipelineParametersPtrOutput) ToScheduleSageMakerPipelineParametersPtrOutputWithContext(ctx context.Context) ScheduleSageMakerPipelineParametersPtrOutput {
	return o
}

func (o ScheduleSageMakerPipelineParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleSageMakerPipelineParameters] {
	return pulumix.Output[*ScheduleSageMakerPipelineParameters]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleSageMakerPipelineParametersPtrOutput) Elem() ScheduleSageMakerPipelineParametersOutput {
	return o.ApplyT(func(v *ScheduleSageMakerPipelineParameters) ScheduleSageMakerPipelineParameters {
		if v != nil {
			return *v
		}
		var ret ScheduleSageMakerPipelineParameters
		return ret
	}).(ScheduleSageMakerPipelineParametersOutput)
}

// List of Parameter names and values for SageMaker Model Building Pipeline execution.
func (o ScheduleSageMakerPipelineParametersPtrOutput) PipelineParameterList() ScheduleSageMakerPipelineParameterArrayOutput {
	return o.ApplyT(func(v *ScheduleSageMakerPipelineParameters) []ScheduleSageMakerPipelineParameter {
		if v == nil {
			return nil
		}
		return v.PipelineParameterList
	}).(ScheduleSageMakerPipelineParameterArrayOutput)
}

// Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
type ScheduleSqsParameters struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId *string `pulumi:"messageGroupId"`
}

// ScheduleSqsParametersInput is an input type that accepts ScheduleSqsParametersArgs and ScheduleSqsParametersOutput values.
// You can construct a concrete instance of `ScheduleSqsParametersInput` via:
//
//	ScheduleSqsParametersArgs{...}
type ScheduleSqsParametersInput interface {
	pulumi.Input

	ToScheduleSqsParametersOutput() ScheduleSqsParametersOutput
	ToScheduleSqsParametersOutputWithContext(context.Context) ScheduleSqsParametersOutput
}

// Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
type ScheduleSqsParametersArgs struct {
	// The FIFO message group ID to use as the target.
	MessageGroupId pulumi.StringPtrInput `pulumi:"messageGroupId"`
}

func (ScheduleSqsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSqsParameters)(nil)).Elem()
}

func (i ScheduleSqsParametersArgs) ToScheduleSqsParametersOutput() ScheduleSqsParametersOutput {
	return i.ToScheduleSqsParametersOutputWithContext(context.Background())
}

func (i ScheduleSqsParametersArgs) ToScheduleSqsParametersOutputWithContext(ctx context.Context) ScheduleSqsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSqsParametersOutput)
}

func (i ScheduleSqsParametersArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleSqsParameters] {
	return pulumix.Output[ScheduleSqsParameters]{
		OutputState: i.ToScheduleSqsParametersOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduleSqsParametersArgs) ToScheduleSqsParametersPtrOutput() ScheduleSqsParametersPtrOutput {
	return i.ToScheduleSqsParametersPtrOutputWithContext(context.Background())
}

func (i ScheduleSqsParametersArgs) ToScheduleSqsParametersPtrOutputWithContext(ctx context.Context) ScheduleSqsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSqsParametersOutput).ToScheduleSqsParametersPtrOutputWithContext(ctx)
}

// ScheduleSqsParametersPtrInput is an input type that accepts ScheduleSqsParametersArgs, ScheduleSqsParametersPtr and ScheduleSqsParametersPtrOutput values.
// You can construct a concrete instance of `ScheduleSqsParametersPtrInput` via:
//
//	        ScheduleSqsParametersArgs{...}
//
//	or:
//
//	        nil
type ScheduleSqsParametersPtrInput interface {
	pulumi.Input

	ToScheduleSqsParametersPtrOutput() ScheduleSqsParametersPtrOutput
	ToScheduleSqsParametersPtrOutputWithContext(context.Context) ScheduleSqsParametersPtrOutput
}

type scheduleSqsParametersPtrType ScheduleSqsParametersArgs

func ScheduleSqsParametersPtr(v *ScheduleSqsParametersArgs) ScheduleSqsParametersPtrInput {
	return (*scheduleSqsParametersPtrType)(v)
}

func (*scheduleSqsParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSqsParameters)(nil)).Elem()
}

func (i *scheduleSqsParametersPtrType) ToScheduleSqsParametersPtrOutput() ScheduleSqsParametersPtrOutput {
	return i.ToScheduleSqsParametersPtrOutputWithContext(context.Background())
}

func (i *scheduleSqsParametersPtrType) ToScheduleSqsParametersPtrOutputWithContext(ctx context.Context) ScheduleSqsParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSqsParametersPtrOutput)
}

func (i *scheduleSqsParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduleSqsParameters] {
	return pulumix.Output[*ScheduleSqsParameters]{
		OutputState: i.ToScheduleSqsParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
type ScheduleSqsParametersOutput struct{ *pulumi.OutputState }

func (ScheduleSqsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSqsParameters)(nil)).Elem()
}

func (o ScheduleSqsParametersOutput) ToScheduleSqsParametersOutput() ScheduleSqsParametersOutput {
	return o
}

func (o ScheduleSqsParametersOutput) ToScheduleSqsParametersOutputWithContext(ctx context.Context) ScheduleSqsParametersOutput {
	return o
}

func (o ScheduleSqsParametersOutput) ToScheduleSqsParametersPtrOutput() ScheduleSqsParametersPtrOutput {
	return o.ToScheduleSqsParametersPtrOutputWithContext(context.Background())
}

func (o ScheduleSqsParametersOutput) ToScheduleSqsParametersPtrOutputWithContext(ctx context.Context) ScheduleSqsParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleSqsParameters) *ScheduleSqsParameters {
		return &v
	}).(ScheduleSqsParametersPtrOutput)
}

func (o ScheduleSqsParametersOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleSqsParameters] {
	return pulumix.Output[ScheduleSqsParameters]{
		OutputState: o.OutputState,
	}
}

// The FIFO message group ID to use as the target.
func (o ScheduleSqsParametersOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSqsParameters) *string { return v.MessageGroupId }).(pulumi.StringPtrOutput)
}

type ScheduleSqsParametersPtrOutput struct{ *pulumi.OutputState }

func (ScheduleSqsParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSqsParameters)(nil)).Elem()
}

func (o ScheduleSqsParametersPtrOutput) ToScheduleSqsParametersPtrOutput() ScheduleSqsParametersPtrOutput {
	return o
}

func (o ScheduleSqsParametersPtrOutput) ToScheduleSqsParametersPtrOutputWithContext(ctx context.Context) ScheduleSqsParametersPtrOutput {
	return o
}

func (o ScheduleSqsParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleSqsParameters] {
	return pulumix.Output[*ScheduleSqsParameters]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleSqsParametersPtrOutput) Elem() ScheduleSqsParametersOutput {
	return o.ApplyT(func(v *ScheduleSqsParameters) ScheduleSqsParameters {
		if v != nil {
			return *v
		}
		var ret ScheduleSqsParameters
		return ret
	}).(ScheduleSqsParametersOutput)
}

// The FIFO message group ID to use as the target.
func (o ScheduleSqsParametersPtrOutput) MessageGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleSqsParameters) *string {
		if v == nil {
			return nil
		}
		return v.MessageGroupId
	}).(pulumi.StringPtrOutput)
}

type ScheduleTagMap struct {
}

// ScheduleTagMapInput is an input type that accepts ScheduleTagMap and ScheduleTagMapOutput values.
// You can construct a concrete instance of `ScheduleTagMapInput` via:
//
//	ScheduleTagMap{ "key": ScheduleTagArgs{...} }
type ScheduleTagMapInput interface {
	pulumi.Input

	ToScheduleTagMapOutput() ScheduleTagMapOutput
	ToScheduleTagMapOutputWithContext(context.Context) ScheduleTagMapOutput
}

type ScheduleTagMapArgs struct {
}

func (ScheduleTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTagMap)(nil)).Elem()
}

func (i ScheduleTagMapArgs) ToScheduleTagMapOutput() ScheduleTagMapOutput {
	return i.ToScheduleTagMapOutputWithContext(context.Background())
}

func (i ScheduleTagMapArgs) ToScheduleTagMapOutputWithContext(ctx context.Context) ScheduleTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTagMapOutput)
}

func (i ScheduleTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleTagMap] {
	return pulumix.Output[ScheduleTagMap]{
		OutputState: i.ToScheduleTagMapOutputWithContext(ctx).OutputState,
	}
}

// ScheduleTagMapArrayInput is an input type that accepts ScheduleTagMapArray and ScheduleTagMapArrayOutput values.
// You can construct a concrete instance of `ScheduleTagMapArrayInput` via:
//
//	ScheduleTagMapArray{ ScheduleTagMapArgs{...} }
type ScheduleTagMapArrayInput interface {
	pulumi.Input

	ToScheduleTagMapArrayOutput() ScheduleTagMapArrayOutput
	ToScheduleTagMapArrayOutputWithContext(context.Context) ScheduleTagMapArrayOutput
}

type ScheduleTagMapArray []ScheduleTagMapInput

func (ScheduleTagMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleTagMap)(nil)).Elem()
}

func (i ScheduleTagMapArray) ToScheduleTagMapArrayOutput() ScheduleTagMapArrayOutput {
	return i.ToScheduleTagMapArrayOutputWithContext(context.Background())
}

func (i ScheduleTagMapArray) ToScheduleTagMapArrayOutputWithContext(ctx context.Context) ScheduleTagMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTagMapArrayOutput)
}

func (i ScheduleTagMapArray) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleTagMap] {
	return pulumix.Output[[]ScheduleTagMap]{
		OutputState: i.ToScheduleTagMapArrayOutputWithContext(ctx).OutputState,
	}
}

type ScheduleTagMapOutput struct{ *pulumi.OutputState }

func (ScheduleTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTagMap)(nil)).Elem()
}

func (o ScheduleTagMapOutput) ToScheduleTagMapOutput() ScheduleTagMapOutput {
	return o
}

func (o ScheduleTagMapOutput) ToScheduleTagMapOutputWithContext(ctx context.Context) ScheduleTagMapOutput {
	return o
}

func (o ScheduleTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTagMap] {
	return pulumix.Output[ScheduleTagMap]{
		OutputState: o.OutputState,
	}
}

type ScheduleTagMapArrayOutput struct{ *pulumi.OutputState }

func (ScheduleTagMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleTagMap)(nil)).Elem()
}

func (o ScheduleTagMapArrayOutput) ToScheduleTagMapArrayOutput() ScheduleTagMapArrayOutput {
	return o
}

func (o ScheduleTagMapArrayOutput) ToScheduleTagMapArrayOutputWithContext(ctx context.Context) ScheduleTagMapArrayOutput {
	return o
}

func (o ScheduleTagMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScheduleTagMap] {
	return pulumix.Output[[]ScheduleTagMap]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleTagMapArrayOutput) Index(i pulumi.IntInput) ScheduleTagMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleTagMap {
		return vs[0].([]ScheduleTagMap)[vs[1].(int)]
	}).(ScheduleTagMapOutput)
}

// The schedule target.
type ScheduleTarget struct {
	// The Amazon Resource Name (ARN) of the target.
	Arn                   string                         `pulumi:"arn"`
	DeadLetterConfig      *ScheduleDeadLetterConfig      `pulumi:"deadLetterConfig"`
	EcsParameters         *ScheduleEcsParameters         `pulumi:"ecsParameters"`
	EventBridgeParameters *ScheduleEventBridgeParameters `pulumi:"eventBridgeParameters"`
	// The text, or well-formed JSON, passed to the target. If you are configuring a templated Lambda, AWS Step Functions, or Amazon EventBridge target, the input must be a well-formed JSON. For all other target types, a JSON is not required. If you do not specify anything for this field, EventBridge Scheduler delivers a default notification to the target.
	Input             *string                    `pulumi:"input"`
	KinesisParameters *ScheduleKinesisParameters `pulumi:"kinesisParameters"`
	RetryPolicy       *ScheduleRetryPolicy       `pulumi:"retryPolicy"`
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the schedule is triggered.
	RoleArn                     string                               `pulumi:"roleArn"`
	SageMakerPipelineParameters *ScheduleSageMakerPipelineParameters `pulumi:"sageMakerPipelineParameters"`
	SqsParameters               *ScheduleSqsParameters               `pulumi:"sqsParameters"`
}

// ScheduleTargetInput is an input type that accepts ScheduleTargetArgs and ScheduleTargetOutput values.
// You can construct a concrete instance of `ScheduleTargetInput` via:
//
//	ScheduleTargetArgs{...}
type ScheduleTargetInput interface {
	pulumi.Input

	ToScheduleTargetOutput() ScheduleTargetOutput
	ToScheduleTargetOutputWithContext(context.Context) ScheduleTargetOutput
}

// The schedule target.
type ScheduleTargetArgs struct {
	// The Amazon Resource Name (ARN) of the target.
	Arn                   pulumi.StringInput                    `pulumi:"arn"`
	DeadLetterConfig      ScheduleDeadLetterConfigPtrInput      `pulumi:"deadLetterConfig"`
	EcsParameters         ScheduleEcsParametersPtrInput         `pulumi:"ecsParameters"`
	EventBridgeParameters ScheduleEventBridgeParametersPtrInput `pulumi:"eventBridgeParameters"`
	// The text, or well-formed JSON, passed to the target. If you are configuring a templated Lambda, AWS Step Functions, or Amazon EventBridge target, the input must be a well-formed JSON. For all other target types, a JSON is not required. If you do not specify anything for this field, EventBridge Scheduler delivers a default notification to the target.
	Input             pulumi.StringPtrInput             `pulumi:"input"`
	KinesisParameters ScheduleKinesisParametersPtrInput `pulumi:"kinesisParameters"`
	RetryPolicy       ScheduleRetryPolicyPtrInput       `pulumi:"retryPolicy"`
	// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the schedule is triggered.
	RoleArn                     pulumi.StringInput                          `pulumi:"roleArn"`
	SageMakerPipelineParameters ScheduleSageMakerPipelineParametersPtrInput `pulumi:"sageMakerPipelineParameters"`
	SqsParameters               ScheduleSqsParametersPtrInput               `pulumi:"sqsParameters"`
}

func (ScheduleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTarget)(nil)).Elem()
}

func (i ScheduleTargetArgs) ToScheduleTargetOutput() ScheduleTargetOutput {
	return i.ToScheduleTargetOutputWithContext(context.Background())
}

func (i ScheduleTargetArgs) ToScheduleTargetOutputWithContext(ctx context.Context) ScheduleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTargetOutput)
}

func (i ScheduleTargetArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduleTarget] {
	return pulumix.Output[ScheduleTarget]{
		OutputState: i.ToScheduleTargetOutputWithContext(ctx).OutputState,
	}
}

// The schedule target.
type ScheduleTargetOutput struct{ *pulumi.OutputState }

func (ScheduleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTarget)(nil)).Elem()
}

func (o ScheduleTargetOutput) ToScheduleTargetOutput() ScheduleTargetOutput {
	return o
}

func (o ScheduleTargetOutput) ToScheduleTargetOutputWithContext(ctx context.Context) ScheduleTargetOutput {
	return o
}

func (o ScheduleTargetOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduleTarget] {
	return pulumix.Output[ScheduleTarget]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the target.
func (o ScheduleTargetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTarget) string { return v.Arn }).(pulumi.StringOutput)
}

func (o ScheduleTargetOutput) DeadLetterConfig() ScheduleDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *ScheduleDeadLetterConfig { return v.DeadLetterConfig }).(ScheduleDeadLetterConfigPtrOutput)
}

func (o ScheduleTargetOutput) EcsParameters() ScheduleEcsParametersPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *ScheduleEcsParameters { return v.EcsParameters }).(ScheduleEcsParametersPtrOutput)
}

func (o ScheduleTargetOutput) EventBridgeParameters() ScheduleEventBridgeParametersPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *ScheduleEventBridgeParameters { return v.EventBridgeParameters }).(ScheduleEventBridgeParametersPtrOutput)
}

// The text, or well-formed JSON, passed to the target. If you are configuring a templated Lambda, AWS Step Functions, or Amazon EventBridge target, the input must be a well-formed JSON. For all other target types, a JSON is not required. If you do not specify anything for this field, EventBridge Scheduler delivers a default notification to the target.
func (o ScheduleTargetOutput) Input() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *string { return v.Input }).(pulumi.StringPtrOutput)
}

func (o ScheduleTargetOutput) KinesisParameters() ScheduleKinesisParametersPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *ScheduleKinesisParameters { return v.KinesisParameters }).(ScheduleKinesisParametersPtrOutput)
}

func (o ScheduleTargetOutput) RetryPolicy() ScheduleRetryPolicyPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *ScheduleRetryPolicy { return v.RetryPolicy }).(ScheduleRetryPolicyPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the schedule is triggered.
func (o ScheduleTargetOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTarget) string { return v.RoleArn }).(pulumi.StringOutput)
}

func (o ScheduleTargetOutput) SageMakerPipelineParameters() ScheduleSageMakerPipelineParametersPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *ScheduleSageMakerPipelineParameters { return v.SageMakerPipelineParameters }).(ScheduleSageMakerPipelineParametersPtrOutput)
}

func (o ScheduleTargetOutput) SqsParameters() ScheduleSqsParametersPtrOutput {
	return o.ApplyT(func(v ScheduleTarget) *ScheduleSqsParameters { return v.SqsParameters }).(ScheduleSqsParametersPtrOutput)
}

type ScheduleTargetPtrOutput struct{ *pulumi.OutputState }

func (ScheduleTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleTarget)(nil)).Elem()
}

func (o ScheduleTargetPtrOutput) ToScheduleTargetPtrOutput() ScheduleTargetPtrOutput {
	return o
}

func (o ScheduleTargetPtrOutput) ToScheduleTargetPtrOutputWithContext(ctx context.Context) ScheduleTargetPtrOutput {
	return o
}

func (o ScheduleTargetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduleTarget] {
	return pulumix.Output[*ScheduleTarget]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleTargetPtrOutput) Elem() ScheduleTargetOutput {
	return o.ApplyT(func(v *ScheduleTarget) ScheduleTarget {
		if v != nil {
			return *v
		}
		var ret ScheduleTarget
		return ret
	}).(ScheduleTargetOutput)
}

// The Amazon Resource Name (ARN) of the target.
func (o ScheduleTargetPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

func (o ScheduleTargetPtrOutput) DeadLetterConfig() ScheduleDeadLetterConfigPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *ScheduleDeadLetterConfig {
		if v == nil {
			return nil
		}
		return v.DeadLetterConfig
	}).(ScheduleDeadLetterConfigPtrOutput)
}

func (o ScheduleTargetPtrOutput) EcsParameters() ScheduleEcsParametersPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *ScheduleEcsParameters {
		if v == nil {
			return nil
		}
		return v.EcsParameters
	}).(ScheduleEcsParametersPtrOutput)
}

func (o ScheduleTargetPtrOutput) EventBridgeParameters() ScheduleEventBridgeParametersPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *ScheduleEventBridgeParameters {
		if v == nil {
			return nil
		}
		return v.EventBridgeParameters
	}).(ScheduleEventBridgeParametersPtrOutput)
}

// The text, or well-formed JSON, passed to the target. If you are configuring a templated Lambda, AWS Step Functions, or Amazon EventBridge target, the input must be a well-formed JSON. For all other target types, a JSON is not required. If you do not specify anything for this field, EventBridge Scheduler delivers a default notification to the target.
func (o ScheduleTargetPtrOutput) Input() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Input
	}).(pulumi.StringPtrOutput)
}

func (o ScheduleTargetPtrOutput) KinesisParameters() ScheduleKinesisParametersPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *ScheduleKinesisParameters {
		if v == nil {
			return nil
		}
		return v.KinesisParameters
	}).(ScheduleKinesisParametersPtrOutput)
}

func (o ScheduleTargetPtrOutput) RetryPolicy() ScheduleRetryPolicyPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *ScheduleRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(ScheduleRetryPolicyPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the schedule is triggered.
func (o ScheduleTargetPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

func (o ScheduleTargetPtrOutput) SageMakerPipelineParameters() ScheduleSageMakerPipelineParametersPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *ScheduleSageMakerPipelineParameters {
		if v == nil {
			return nil
		}
		return v.SageMakerPipelineParameters
	}).(ScheduleSageMakerPipelineParametersPtrOutput)
}

func (o ScheduleTargetPtrOutput) SqsParameters() ScheduleSqsParametersPtrOutput {
	return o.ApplyT(func(v *ScheduleTarget) *ScheduleSqsParameters {
		if v == nil {
			return nil
		}
		return v.SqsParameters
	}).(ScheduleSqsParametersPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleAwsVpcConfigurationInput)(nil)).Elem(), ScheduleAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleAwsVpcConfigurationPtrInput)(nil)).Elem(), ScheduleAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleCapacityProviderStrategyItemInput)(nil)).Elem(), ScheduleCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleCapacityProviderStrategyItemArrayInput)(nil)).Elem(), ScheduleCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleDeadLetterConfigInput)(nil)).Elem(), ScheduleDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleDeadLetterConfigPtrInput)(nil)).Elem(), ScheduleDeadLetterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleEcsParametersInput)(nil)).Elem(), ScheduleEcsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleEcsParametersPtrInput)(nil)).Elem(), ScheduleEcsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleEventBridgeParametersInput)(nil)).Elem(), ScheduleEventBridgeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleEventBridgeParametersPtrInput)(nil)).Elem(), ScheduleEventBridgeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleFlexibleTimeWindowInput)(nil)).Elem(), ScheduleFlexibleTimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleGroupTagInput)(nil)).Elem(), ScheduleGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleGroupTagArrayInput)(nil)).Elem(), ScheduleGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleKinesisParametersInput)(nil)).Elem(), ScheduleKinesisParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleKinesisParametersPtrInput)(nil)).Elem(), ScheduleKinesisParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleNetworkConfigurationInput)(nil)).Elem(), ScheduleNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleNetworkConfigurationPtrInput)(nil)).Elem(), ScheduleNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementConstraintInput)(nil)).Elem(), SchedulePlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementConstraintArrayInput)(nil)).Elem(), SchedulePlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementStrategyInput)(nil)).Elem(), SchedulePlacementStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementStrategyArrayInput)(nil)).Elem(), SchedulePlacementStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRetryPolicyInput)(nil)).Elem(), ScheduleRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRetryPolicyPtrInput)(nil)).Elem(), ScheduleRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleSageMakerPipelineParameterInput)(nil)).Elem(), ScheduleSageMakerPipelineParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleSageMakerPipelineParameterArrayInput)(nil)).Elem(), ScheduleSageMakerPipelineParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleSageMakerPipelineParametersInput)(nil)).Elem(), ScheduleSageMakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleSageMakerPipelineParametersPtrInput)(nil)).Elem(), ScheduleSageMakerPipelineParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleSqsParametersInput)(nil)).Elem(), ScheduleSqsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleSqsParametersPtrInput)(nil)).Elem(), ScheduleSqsParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleTagMapInput)(nil)).Elem(), ScheduleTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleTagMapArrayInput)(nil)).Elem(), ScheduleTagMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleTargetInput)(nil)).Elem(), ScheduleTargetArgs{})
	pulumi.RegisterOutputType(ScheduleAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(ScheduleAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ScheduleCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(ScheduleCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(ScheduleDeadLetterConfigOutput{})
	pulumi.RegisterOutputType(ScheduleDeadLetterConfigPtrOutput{})
	pulumi.RegisterOutputType(ScheduleEcsParametersOutput{})
	pulumi.RegisterOutputType(ScheduleEcsParametersPtrOutput{})
	pulumi.RegisterOutputType(ScheduleEventBridgeParametersOutput{})
	pulumi.RegisterOutputType(ScheduleEventBridgeParametersPtrOutput{})
	pulumi.RegisterOutputType(ScheduleFlexibleTimeWindowOutput{})
	pulumi.RegisterOutputType(ScheduleFlexibleTimeWindowPtrOutput{})
	pulumi.RegisterOutputType(ScheduleGroupTagOutput{})
	pulumi.RegisterOutputType(ScheduleGroupTagArrayOutput{})
	pulumi.RegisterOutputType(ScheduleKinesisParametersOutput{})
	pulumi.RegisterOutputType(ScheduleKinesisParametersPtrOutput{})
	pulumi.RegisterOutputType(ScheduleNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(ScheduleNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SchedulePlacementConstraintOutput{})
	pulumi.RegisterOutputType(SchedulePlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(SchedulePlacementStrategyOutput{})
	pulumi.RegisterOutputType(SchedulePlacementStrategyArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRetryPolicyOutput{})
	pulumi.RegisterOutputType(ScheduleRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(ScheduleSageMakerPipelineParameterOutput{})
	pulumi.RegisterOutputType(ScheduleSageMakerPipelineParameterArrayOutput{})
	pulumi.RegisterOutputType(ScheduleSageMakerPipelineParametersOutput{})
	pulumi.RegisterOutputType(ScheduleSageMakerPipelineParametersPtrOutput{})
	pulumi.RegisterOutputType(ScheduleSqsParametersOutput{})
	pulumi.RegisterOutputType(ScheduleSqsParametersPtrOutput{})
	pulumi.RegisterOutputType(ScheduleTagMapOutput{})
	pulumi.RegisterOutputType(ScheduleTagMapArrayOutput{})
	pulumi.RegisterOutputType(ScheduleTargetOutput{})
	pulumi.RegisterOutputType(ScheduleTargetPtrOutput{})
}
