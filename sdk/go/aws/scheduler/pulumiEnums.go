// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scheduler

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE.
type ScheduleAssignPublicIp string

const (
	ScheduleAssignPublicIpEnabled  = ScheduleAssignPublicIp("ENABLED")
	ScheduleAssignPublicIpDisabled = ScheduleAssignPublicIp("DISABLED")
)

func (ScheduleAssignPublicIp) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleAssignPublicIp)(nil)).Elem()
}

func (e ScheduleAssignPublicIp) ToScheduleAssignPublicIpOutput() ScheduleAssignPublicIpOutput {
	return pulumi.ToOutput(e).(ScheduleAssignPublicIpOutput)
}

func (e ScheduleAssignPublicIp) ToScheduleAssignPublicIpOutputWithContext(ctx context.Context) ScheduleAssignPublicIpOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleAssignPublicIpOutput)
}

func (e ScheduleAssignPublicIp) ToScheduleAssignPublicIpPtrOutput() ScheduleAssignPublicIpPtrOutput {
	return e.ToScheduleAssignPublicIpPtrOutputWithContext(context.Background())
}

func (e ScheduleAssignPublicIp) ToScheduleAssignPublicIpPtrOutputWithContext(ctx context.Context) ScheduleAssignPublicIpPtrOutput {
	return ScheduleAssignPublicIp(e).ToScheduleAssignPublicIpOutputWithContext(ctx).ToScheduleAssignPublicIpPtrOutputWithContext(ctx)
}

func (e ScheduleAssignPublicIp) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleAssignPublicIp) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleAssignPublicIp) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleAssignPublicIp) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleAssignPublicIpOutput struct{ *pulumi.OutputState }

func (ScheduleAssignPublicIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleAssignPublicIp)(nil)).Elem()
}

func (o ScheduleAssignPublicIpOutput) ToScheduleAssignPublicIpOutput() ScheduleAssignPublicIpOutput {
	return o
}

func (o ScheduleAssignPublicIpOutput) ToScheduleAssignPublicIpOutputWithContext(ctx context.Context) ScheduleAssignPublicIpOutput {
	return o
}

func (o ScheduleAssignPublicIpOutput) ToScheduleAssignPublicIpPtrOutput() ScheduleAssignPublicIpPtrOutput {
	return o.ToScheduleAssignPublicIpPtrOutputWithContext(context.Background())
}

func (o ScheduleAssignPublicIpOutput) ToScheduleAssignPublicIpPtrOutputWithContext(ctx context.Context) ScheduleAssignPublicIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleAssignPublicIp) *ScheduleAssignPublicIp {
		return &v
	}).(ScheduleAssignPublicIpPtrOutput)
}

func (o ScheduleAssignPublicIpOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleAssignPublicIpOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleAssignPublicIp) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleAssignPublicIpOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleAssignPublicIpOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleAssignPublicIp) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleAssignPublicIpPtrOutput struct{ *pulumi.OutputState }

func (ScheduleAssignPublicIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleAssignPublicIp)(nil)).Elem()
}

func (o ScheduleAssignPublicIpPtrOutput) ToScheduleAssignPublicIpPtrOutput() ScheduleAssignPublicIpPtrOutput {
	return o
}

func (o ScheduleAssignPublicIpPtrOutput) ToScheduleAssignPublicIpPtrOutputWithContext(ctx context.Context) ScheduleAssignPublicIpPtrOutput {
	return o
}

func (o ScheduleAssignPublicIpPtrOutput) Elem() ScheduleAssignPublicIpOutput {
	return o.ApplyT(func(v *ScheduleAssignPublicIp) ScheduleAssignPublicIp {
		if v != nil {
			return *v
		}
		var ret ScheduleAssignPublicIp
		return ret
	}).(ScheduleAssignPublicIpOutput)
}

func (o ScheduleAssignPublicIpPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleAssignPublicIpPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleAssignPublicIp) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleAssignPublicIpInput is an input type that accepts values of the ScheduleAssignPublicIp enum
// A concrete instance of `ScheduleAssignPublicIpInput` can be one of the following:
//
//	ScheduleAssignPublicIpEnabled
//	ScheduleAssignPublicIpDisabled
type ScheduleAssignPublicIpInput interface {
	pulumi.Input

	ToScheduleAssignPublicIpOutput() ScheduleAssignPublicIpOutput
	ToScheduleAssignPublicIpOutputWithContext(context.Context) ScheduleAssignPublicIpOutput
}

var scheduleAssignPublicIpPtrType = reflect.TypeOf((**ScheduleAssignPublicIp)(nil)).Elem()

type ScheduleAssignPublicIpPtrInput interface {
	pulumi.Input

	ToScheduleAssignPublicIpPtrOutput() ScheduleAssignPublicIpPtrOutput
	ToScheduleAssignPublicIpPtrOutputWithContext(context.Context) ScheduleAssignPublicIpPtrOutput
}

type scheduleAssignPublicIpPtr string

func ScheduleAssignPublicIpPtr(v string) ScheduleAssignPublicIpPtrInput {
	return (*scheduleAssignPublicIpPtr)(&v)
}

func (*scheduleAssignPublicIpPtr) ElementType() reflect.Type {
	return scheduleAssignPublicIpPtrType
}

func (in *scheduleAssignPublicIpPtr) ToScheduleAssignPublicIpPtrOutput() ScheduleAssignPublicIpPtrOutput {
	return pulumi.ToOutput(in).(ScheduleAssignPublicIpPtrOutput)
}

func (in *scheduleAssignPublicIpPtr) ToScheduleAssignPublicIpPtrOutputWithContext(ctx context.Context) ScheduleAssignPublicIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleAssignPublicIpPtrOutput)
}

// Determines whether the schedule is executed within a flexible time window.
type ScheduleFlexibleTimeWindowMode string

const (
	ScheduleFlexibleTimeWindowModeOff      = ScheduleFlexibleTimeWindowMode("OFF")
	ScheduleFlexibleTimeWindowModeFlexible = ScheduleFlexibleTimeWindowMode("FLEXIBLE")
)

func (ScheduleFlexibleTimeWindowMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFlexibleTimeWindowMode)(nil)).Elem()
}

func (e ScheduleFlexibleTimeWindowMode) ToScheduleFlexibleTimeWindowModeOutput() ScheduleFlexibleTimeWindowModeOutput {
	return pulumi.ToOutput(e).(ScheduleFlexibleTimeWindowModeOutput)
}

func (e ScheduleFlexibleTimeWindowMode) ToScheduleFlexibleTimeWindowModeOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleFlexibleTimeWindowModeOutput)
}

func (e ScheduleFlexibleTimeWindowMode) ToScheduleFlexibleTimeWindowModePtrOutput() ScheduleFlexibleTimeWindowModePtrOutput {
	return e.ToScheduleFlexibleTimeWindowModePtrOutputWithContext(context.Background())
}

func (e ScheduleFlexibleTimeWindowMode) ToScheduleFlexibleTimeWindowModePtrOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowModePtrOutput {
	return ScheduleFlexibleTimeWindowMode(e).ToScheduleFlexibleTimeWindowModeOutputWithContext(ctx).ToScheduleFlexibleTimeWindowModePtrOutputWithContext(ctx)
}

func (e ScheduleFlexibleTimeWindowMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleFlexibleTimeWindowMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleFlexibleTimeWindowMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleFlexibleTimeWindowMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleFlexibleTimeWindowModeOutput struct{ *pulumi.OutputState }

func (ScheduleFlexibleTimeWindowModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleFlexibleTimeWindowMode)(nil)).Elem()
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToScheduleFlexibleTimeWindowModeOutput() ScheduleFlexibleTimeWindowModeOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToScheduleFlexibleTimeWindowModeOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowModeOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToScheduleFlexibleTimeWindowModePtrOutput() ScheduleFlexibleTimeWindowModePtrOutput {
	return o.ToScheduleFlexibleTimeWindowModePtrOutputWithContext(context.Background())
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToScheduleFlexibleTimeWindowModePtrOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleFlexibleTimeWindowMode) *ScheduleFlexibleTimeWindowMode {
		return &v
	}).(ScheduleFlexibleTimeWindowModePtrOutput)
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleFlexibleTimeWindowMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleFlexibleTimeWindowModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleFlexibleTimeWindowMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleFlexibleTimeWindowModePtrOutput struct{ *pulumi.OutputState }

func (ScheduleFlexibleTimeWindowModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleFlexibleTimeWindowMode)(nil)).Elem()
}

func (o ScheduleFlexibleTimeWindowModePtrOutput) ToScheduleFlexibleTimeWindowModePtrOutput() ScheduleFlexibleTimeWindowModePtrOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowModePtrOutput) ToScheduleFlexibleTimeWindowModePtrOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowModePtrOutput {
	return o
}

func (o ScheduleFlexibleTimeWindowModePtrOutput) Elem() ScheduleFlexibleTimeWindowModeOutput {
	return o.ApplyT(func(v *ScheduleFlexibleTimeWindowMode) ScheduleFlexibleTimeWindowMode {
		if v != nil {
			return *v
		}
		var ret ScheduleFlexibleTimeWindowMode
		return ret
	}).(ScheduleFlexibleTimeWindowModeOutput)
}

func (o ScheduleFlexibleTimeWindowModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleFlexibleTimeWindowModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleFlexibleTimeWindowMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleFlexibleTimeWindowModeInput is an input type that accepts values of the ScheduleFlexibleTimeWindowMode enum
// A concrete instance of `ScheduleFlexibleTimeWindowModeInput` can be one of the following:
//
//	ScheduleFlexibleTimeWindowModeOff
//	ScheduleFlexibleTimeWindowModeFlexible
type ScheduleFlexibleTimeWindowModeInput interface {
	pulumi.Input

	ToScheduleFlexibleTimeWindowModeOutput() ScheduleFlexibleTimeWindowModeOutput
	ToScheduleFlexibleTimeWindowModeOutputWithContext(context.Context) ScheduleFlexibleTimeWindowModeOutput
}

var scheduleFlexibleTimeWindowModePtrType = reflect.TypeOf((**ScheduleFlexibleTimeWindowMode)(nil)).Elem()

type ScheduleFlexibleTimeWindowModePtrInput interface {
	pulumi.Input

	ToScheduleFlexibleTimeWindowModePtrOutput() ScheduleFlexibleTimeWindowModePtrOutput
	ToScheduleFlexibleTimeWindowModePtrOutputWithContext(context.Context) ScheduleFlexibleTimeWindowModePtrOutput
}

type scheduleFlexibleTimeWindowModePtr string

func ScheduleFlexibleTimeWindowModePtr(v string) ScheduleFlexibleTimeWindowModePtrInput {
	return (*scheduleFlexibleTimeWindowModePtr)(&v)
}

func (*scheduleFlexibleTimeWindowModePtr) ElementType() reflect.Type {
	return scheduleFlexibleTimeWindowModePtrType
}

func (in *scheduleFlexibleTimeWindowModePtr) ToScheduleFlexibleTimeWindowModePtrOutput() ScheduleFlexibleTimeWindowModePtrOutput {
	return pulumi.ToOutput(in).(ScheduleFlexibleTimeWindowModePtrOutput)
}

func (in *scheduleFlexibleTimeWindowModePtr) ToScheduleFlexibleTimeWindowModePtrOutputWithContext(ctx context.Context) ScheduleFlexibleTimeWindowModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleFlexibleTimeWindowModePtrOutput)
}

// Specifies the state of the schedule group.
type ScheduleGroupStateEnum string

const (
	ScheduleGroupStateEnumActive   = ScheduleGroupStateEnum("ACTIVE")
	ScheduleGroupStateEnumDeleting = ScheduleGroupStateEnum("DELETING")
)

type ScheduleGroupStateEnumOutput struct{ *pulumi.OutputState }

func (ScheduleGroupStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleGroupStateEnum)(nil)).Elem()
}

func (o ScheduleGroupStateEnumOutput) ToScheduleGroupStateEnumOutput() ScheduleGroupStateEnumOutput {
	return o
}

func (o ScheduleGroupStateEnumOutput) ToScheduleGroupStateEnumOutputWithContext(ctx context.Context) ScheduleGroupStateEnumOutput {
	return o
}

func (o ScheduleGroupStateEnumOutput) ToScheduleGroupStateEnumPtrOutput() ScheduleGroupStateEnumPtrOutput {
	return o.ToScheduleGroupStateEnumPtrOutputWithContext(context.Background())
}

func (o ScheduleGroupStateEnumOutput) ToScheduleGroupStateEnumPtrOutputWithContext(ctx context.Context) ScheduleGroupStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleGroupStateEnum) *ScheduleGroupStateEnum {
		return &v
	}).(ScheduleGroupStateEnumPtrOutput)
}

func (o ScheduleGroupStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleGroupStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleGroupStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleGroupStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleGroupStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleGroupStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleGroupStateEnumPtrOutput struct{ *pulumi.OutputState }

func (ScheduleGroupStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleGroupStateEnum)(nil)).Elem()
}

func (o ScheduleGroupStateEnumPtrOutput) ToScheduleGroupStateEnumPtrOutput() ScheduleGroupStateEnumPtrOutput {
	return o
}

func (o ScheduleGroupStateEnumPtrOutput) ToScheduleGroupStateEnumPtrOutputWithContext(ctx context.Context) ScheduleGroupStateEnumPtrOutput {
	return o
}

func (o ScheduleGroupStateEnumPtrOutput) Elem() ScheduleGroupStateEnumOutput {
	return o.ApplyT(func(v *ScheduleGroupStateEnum) ScheduleGroupStateEnum {
		if v != nil {
			return *v
		}
		var ret ScheduleGroupStateEnum
		return ret
	}).(ScheduleGroupStateEnumOutput)
}

func (o ScheduleGroupStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleGroupStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleGroupStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see AWS Fargate on Amazon ECS in the Amazon Elastic Container Service Developer Guide.
type ScheduleLaunchType string

const (
	ScheduleLaunchTypeEc2      = ScheduleLaunchType("EC2")
	ScheduleLaunchTypeFargate  = ScheduleLaunchType("FARGATE")
	ScheduleLaunchTypeExternal = ScheduleLaunchType("EXTERNAL")
)

func (ScheduleLaunchType) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleLaunchType)(nil)).Elem()
}

func (e ScheduleLaunchType) ToScheduleLaunchTypeOutput() ScheduleLaunchTypeOutput {
	return pulumi.ToOutput(e).(ScheduleLaunchTypeOutput)
}

func (e ScheduleLaunchType) ToScheduleLaunchTypeOutputWithContext(ctx context.Context) ScheduleLaunchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleLaunchTypeOutput)
}

func (e ScheduleLaunchType) ToScheduleLaunchTypePtrOutput() ScheduleLaunchTypePtrOutput {
	return e.ToScheduleLaunchTypePtrOutputWithContext(context.Background())
}

func (e ScheduleLaunchType) ToScheduleLaunchTypePtrOutputWithContext(ctx context.Context) ScheduleLaunchTypePtrOutput {
	return ScheduleLaunchType(e).ToScheduleLaunchTypeOutputWithContext(ctx).ToScheduleLaunchTypePtrOutputWithContext(ctx)
}

func (e ScheduleLaunchType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleLaunchType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleLaunchType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleLaunchType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleLaunchTypeOutput struct{ *pulumi.OutputState }

func (ScheduleLaunchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleLaunchType)(nil)).Elem()
}

func (o ScheduleLaunchTypeOutput) ToScheduleLaunchTypeOutput() ScheduleLaunchTypeOutput {
	return o
}

func (o ScheduleLaunchTypeOutput) ToScheduleLaunchTypeOutputWithContext(ctx context.Context) ScheduleLaunchTypeOutput {
	return o
}

func (o ScheduleLaunchTypeOutput) ToScheduleLaunchTypePtrOutput() ScheduleLaunchTypePtrOutput {
	return o.ToScheduleLaunchTypePtrOutputWithContext(context.Background())
}

func (o ScheduleLaunchTypeOutput) ToScheduleLaunchTypePtrOutputWithContext(ctx context.Context) ScheduleLaunchTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleLaunchType) *ScheduleLaunchType {
		return &v
	}).(ScheduleLaunchTypePtrOutput)
}

func (o ScheduleLaunchTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleLaunchTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleLaunchType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleLaunchTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleLaunchTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleLaunchType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleLaunchTypePtrOutput struct{ *pulumi.OutputState }

func (ScheduleLaunchTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleLaunchType)(nil)).Elem()
}

func (o ScheduleLaunchTypePtrOutput) ToScheduleLaunchTypePtrOutput() ScheduleLaunchTypePtrOutput {
	return o
}

func (o ScheduleLaunchTypePtrOutput) ToScheduleLaunchTypePtrOutputWithContext(ctx context.Context) ScheduleLaunchTypePtrOutput {
	return o
}

func (o ScheduleLaunchTypePtrOutput) Elem() ScheduleLaunchTypeOutput {
	return o.ApplyT(func(v *ScheduleLaunchType) ScheduleLaunchType {
		if v != nil {
			return *v
		}
		var ret ScheduleLaunchType
		return ret
	}).(ScheduleLaunchTypeOutput)
}

func (o ScheduleLaunchTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleLaunchTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleLaunchType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleLaunchTypeInput is an input type that accepts values of the ScheduleLaunchType enum
// A concrete instance of `ScheduleLaunchTypeInput` can be one of the following:
//
//	ScheduleLaunchTypeEc2
//	ScheduleLaunchTypeFargate
//	ScheduleLaunchTypeExternal
type ScheduleLaunchTypeInput interface {
	pulumi.Input

	ToScheduleLaunchTypeOutput() ScheduleLaunchTypeOutput
	ToScheduleLaunchTypeOutputWithContext(context.Context) ScheduleLaunchTypeOutput
}

var scheduleLaunchTypePtrType = reflect.TypeOf((**ScheduleLaunchType)(nil)).Elem()

type ScheduleLaunchTypePtrInput interface {
	pulumi.Input

	ToScheduleLaunchTypePtrOutput() ScheduleLaunchTypePtrOutput
	ToScheduleLaunchTypePtrOutputWithContext(context.Context) ScheduleLaunchTypePtrOutput
}

type scheduleLaunchTypePtr string

func ScheduleLaunchTypePtr(v string) ScheduleLaunchTypePtrInput {
	return (*scheduleLaunchTypePtr)(&v)
}

func (*scheduleLaunchTypePtr) ElementType() reflect.Type {
	return scheduleLaunchTypePtrType
}

func (in *scheduleLaunchTypePtr) ToScheduleLaunchTypePtrOutput() ScheduleLaunchTypePtrOutput {
	return pulumi.ToOutput(in).(ScheduleLaunchTypePtrOutput)
}

func (in *scheduleLaunchTypePtr) ToScheduleLaunchTypePtrOutputWithContext(ctx context.Context) ScheduleLaunchTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleLaunchTypePtrOutput)
}

// The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
type SchedulePlacementConstraintType string

const (
	SchedulePlacementConstraintTypeDistinctInstance = SchedulePlacementConstraintType("distinctInstance")
	SchedulePlacementConstraintTypeMemberOf         = SchedulePlacementConstraintType("memberOf")
)

func (SchedulePlacementConstraintType) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementConstraintType)(nil)).Elem()
}

func (e SchedulePlacementConstraintType) ToSchedulePlacementConstraintTypeOutput() SchedulePlacementConstraintTypeOutput {
	return pulumi.ToOutput(e).(SchedulePlacementConstraintTypeOutput)
}

func (e SchedulePlacementConstraintType) ToSchedulePlacementConstraintTypeOutputWithContext(ctx context.Context) SchedulePlacementConstraintTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SchedulePlacementConstraintTypeOutput)
}

func (e SchedulePlacementConstraintType) ToSchedulePlacementConstraintTypePtrOutput() SchedulePlacementConstraintTypePtrOutput {
	return e.ToSchedulePlacementConstraintTypePtrOutputWithContext(context.Background())
}

func (e SchedulePlacementConstraintType) ToSchedulePlacementConstraintTypePtrOutputWithContext(ctx context.Context) SchedulePlacementConstraintTypePtrOutput {
	return SchedulePlacementConstraintType(e).ToSchedulePlacementConstraintTypeOutputWithContext(ctx).ToSchedulePlacementConstraintTypePtrOutputWithContext(ctx)
}

func (e SchedulePlacementConstraintType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulePlacementConstraintType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulePlacementConstraintType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchedulePlacementConstraintType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SchedulePlacementConstraintTypeOutput struct{ *pulumi.OutputState }

func (SchedulePlacementConstraintTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementConstraintType)(nil)).Elem()
}

func (o SchedulePlacementConstraintTypeOutput) ToSchedulePlacementConstraintTypeOutput() SchedulePlacementConstraintTypeOutput {
	return o
}

func (o SchedulePlacementConstraintTypeOutput) ToSchedulePlacementConstraintTypeOutputWithContext(ctx context.Context) SchedulePlacementConstraintTypeOutput {
	return o
}

func (o SchedulePlacementConstraintTypeOutput) ToSchedulePlacementConstraintTypePtrOutput() SchedulePlacementConstraintTypePtrOutput {
	return o.ToSchedulePlacementConstraintTypePtrOutputWithContext(context.Background())
}

func (o SchedulePlacementConstraintTypeOutput) ToSchedulePlacementConstraintTypePtrOutputWithContext(ctx context.Context) SchedulePlacementConstraintTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulePlacementConstraintType) *SchedulePlacementConstraintType {
		return &v
	}).(SchedulePlacementConstraintTypePtrOutput)
}

func (o SchedulePlacementConstraintTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SchedulePlacementConstraintTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulePlacementConstraintType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SchedulePlacementConstraintTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulePlacementConstraintTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulePlacementConstraintType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SchedulePlacementConstraintTypePtrOutput struct{ *pulumi.OutputState }

func (SchedulePlacementConstraintTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulePlacementConstraintType)(nil)).Elem()
}

func (o SchedulePlacementConstraintTypePtrOutput) ToSchedulePlacementConstraintTypePtrOutput() SchedulePlacementConstraintTypePtrOutput {
	return o
}

func (o SchedulePlacementConstraintTypePtrOutput) ToSchedulePlacementConstraintTypePtrOutputWithContext(ctx context.Context) SchedulePlacementConstraintTypePtrOutput {
	return o
}

func (o SchedulePlacementConstraintTypePtrOutput) Elem() SchedulePlacementConstraintTypeOutput {
	return o.ApplyT(func(v *SchedulePlacementConstraintType) SchedulePlacementConstraintType {
		if v != nil {
			return *v
		}
		var ret SchedulePlacementConstraintType
		return ret
	}).(SchedulePlacementConstraintTypeOutput)
}

func (o SchedulePlacementConstraintTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulePlacementConstraintTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SchedulePlacementConstraintType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SchedulePlacementConstraintTypeInput is an input type that accepts values of the SchedulePlacementConstraintType enum
// A concrete instance of `SchedulePlacementConstraintTypeInput` can be one of the following:
//
//	SchedulePlacementConstraintTypeDistinctInstance
//	SchedulePlacementConstraintTypeMemberOf
type SchedulePlacementConstraintTypeInput interface {
	pulumi.Input

	ToSchedulePlacementConstraintTypeOutput() SchedulePlacementConstraintTypeOutput
	ToSchedulePlacementConstraintTypeOutputWithContext(context.Context) SchedulePlacementConstraintTypeOutput
}

var schedulePlacementConstraintTypePtrType = reflect.TypeOf((**SchedulePlacementConstraintType)(nil)).Elem()

type SchedulePlacementConstraintTypePtrInput interface {
	pulumi.Input

	ToSchedulePlacementConstraintTypePtrOutput() SchedulePlacementConstraintTypePtrOutput
	ToSchedulePlacementConstraintTypePtrOutputWithContext(context.Context) SchedulePlacementConstraintTypePtrOutput
}

type schedulePlacementConstraintTypePtr string

func SchedulePlacementConstraintTypePtr(v string) SchedulePlacementConstraintTypePtrInput {
	return (*schedulePlacementConstraintTypePtr)(&v)
}

func (*schedulePlacementConstraintTypePtr) ElementType() reflect.Type {
	return schedulePlacementConstraintTypePtrType
}

func (in *schedulePlacementConstraintTypePtr) ToSchedulePlacementConstraintTypePtrOutput() SchedulePlacementConstraintTypePtrOutput {
	return pulumi.ToOutput(in).(SchedulePlacementConstraintTypePtrOutput)
}

func (in *schedulePlacementConstraintTypePtr) ToSchedulePlacementConstraintTypePtrOutputWithContext(ctx context.Context) SchedulePlacementConstraintTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SchedulePlacementConstraintTypePtrOutput)
}

// The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
type SchedulePlacementStrategyType string

const (
	SchedulePlacementStrategyTypeRandom  = SchedulePlacementStrategyType("random")
	SchedulePlacementStrategyTypeSpread  = SchedulePlacementStrategyType("spread")
	SchedulePlacementStrategyTypeBinpack = SchedulePlacementStrategyType("binpack")
)

func (SchedulePlacementStrategyType) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementStrategyType)(nil)).Elem()
}

func (e SchedulePlacementStrategyType) ToSchedulePlacementStrategyTypeOutput() SchedulePlacementStrategyTypeOutput {
	return pulumi.ToOutput(e).(SchedulePlacementStrategyTypeOutput)
}

func (e SchedulePlacementStrategyType) ToSchedulePlacementStrategyTypeOutputWithContext(ctx context.Context) SchedulePlacementStrategyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SchedulePlacementStrategyTypeOutput)
}

func (e SchedulePlacementStrategyType) ToSchedulePlacementStrategyTypePtrOutput() SchedulePlacementStrategyTypePtrOutput {
	return e.ToSchedulePlacementStrategyTypePtrOutputWithContext(context.Background())
}

func (e SchedulePlacementStrategyType) ToSchedulePlacementStrategyTypePtrOutputWithContext(ctx context.Context) SchedulePlacementStrategyTypePtrOutput {
	return SchedulePlacementStrategyType(e).ToSchedulePlacementStrategyTypeOutputWithContext(ctx).ToSchedulePlacementStrategyTypePtrOutputWithContext(ctx)
}

func (e SchedulePlacementStrategyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulePlacementStrategyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulePlacementStrategyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchedulePlacementStrategyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SchedulePlacementStrategyTypeOutput struct{ *pulumi.OutputState }

func (SchedulePlacementStrategyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePlacementStrategyType)(nil)).Elem()
}

func (o SchedulePlacementStrategyTypeOutput) ToSchedulePlacementStrategyTypeOutput() SchedulePlacementStrategyTypeOutput {
	return o
}

func (o SchedulePlacementStrategyTypeOutput) ToSchedulePlacementStrategyTypeOutputWithContext(ctx context.Context) SchedulePlacementStrategyTypeOutput {
	return o
}

func (o SchedulePlacementStrategyTypeOutput) ToSchedulePlacementStrategyTypePtrOutput() SchedulePlacementStrategyTypePtrOutput {
	return o.ToSchedulePlacementStrategyTypePtrOutputWithContext(context.Background())
}

func (o SchedulePlacementStrategyTypeOutput) ToSchedulePlacementStrategyTypePtrOutputWithContext(ctx context.Context) SchedulePlacementStrategyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulePlacementStrategyType) *SchedulePlacementStrategyType {
		return &v
	}).(SchedulePlacementStrategyTypePtrOutput)
}

func (o SchedulePlacementStrategyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SchedulePlacementStrategyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulePlacementStrategyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SchedulePlacementStrategyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulePlacementStrategyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulePlacementStrategyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SchedulePlacementStrategyTypePtrOutput struct{ *pulumi.OutputState }

func (SchedulePlacementStrategyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulePlacementStrategyType)(nil)).Elem()
}

func (o SchedulePlacementStrategyTypePtrOutput) ToSchedulePlacementStrategyTypePtrOutput() SchedulePlacementStrategyTypePtrOutput {
	return o
}

func (o SchedulePlacementStrategyTypePtrOutput) ToSchedulePlacementStrategyTypePtrOutputWithContext(ctx context.Context) SchedulePlacementStrategyTypePtrOutput {
	return o
}

func (o SchedulePlacementStrategyTypePtrOutput) Elem() SchedulePlacementStrategyTypeOutput {
	return o.ApplyT(func(v *SchedulePlacementStrategyType) SchedulePlacementStrategyType {
		if v != nil {
			return *v
		}
		var ret SchedulePlacementStrategyType
		return ret
	}).(SchedulePlacementStrategyTypeOutput)
}

func (o SchedulePlacementStrategyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulePlacementStrategyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SchedulePlacementStrategyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SchedulePlacementStrategyTypeInput is an input type that accepts values of the SchedulePlacementStrategyType enum
// A concrete instance of `SchedulePlacementStrategyTypeInput` can be one of the following:
//
//	SchedulePlacementStrategyTypeRandom
//	SchedulePlacementStrategyTypeSpread
//	SchedulePlacementStrategyTypeBinpack
type SchedulePlacementStrategyTypeInput interface {
	pulumi.Input

	ToSchedulePlacementStrategyTypeOutput() SchedulePlacementStrategyTypeOutput
	ToSchedulePlacementStrategyTypeOutputWithContext(context.Context) SchedulePlacementStrategyTypeOutput
}

var schedulePlacementStrategyTypePtrType = reflect.TypeOf((**SchedulePlacementStrategyType)(nil)).Elem()

type SchedulePlacementStrategyTypePtrInput interface {
	pulumi.Input

	ToSchedulePlacementStrategyTypePtrOutput() SchedulePlacementStrategyTypePtrOutput
	ToSchedulePlacementStrategyTypePtrOutputWithContext(context.Context) SchedulePlacementStrategyTypePtrOutput
}

type schedulePlacementStrategyTypePtr string

func SchedulePlacementStrategyTypePtr(v string) SchedulePlacementStrategyTypePtrInput {
	return (*schedulePlacementStrategyTypePtr)(&v)
}

func (*schedulePlacementStrategyTypePtr) ElementType() reflect.Type {
	return schedulePlacementStrategyTypePtrType
}

func (in *schedulePlacementStrategyTypePtr) ToSchedulePlacementStrategyTypePtrOutput() SchedulePlacementStrategyTypePtrOutput {
	return pulumi.ToOutput(in).(SchedulePlacementStrategyTypePtrOutput)
}

func (in *schedulePlacementStrategyTypePtr) ToSchedulePlacementStrategyTypePtrOutputWithContext(ctx context.Context) SchedulePlacementStrategyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SchedulePlacementStrategyTypePtrOutput)
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
type SchedulePropagateTags string

const (
	SchedulePropagateTagsTaskDefinition = SchedulePropagateTags("TASK_DEFINITION")
)

func (SchedulePropagateTags) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePropagateTags)(nil)).Elem()
}

func (e SchedulePropagateTags) ToSchedulePropagateTagsOutput() SchedulePropagateTagsOutput {
	return pulumi.ToOutput(e).(SchedulePropagateTagsOutput)
}

func (e SchedulePropagateTags) ToSchedulePropagateTagsOutputWithContext(ctx context.Context) SchedulePropagateTagsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SchedulePropagateTagsOutput)
}

func (e SchedulePropagateTags) ToSchedulePropagateTagsPtrOutput() SchedulePropagateTagsPtrOutput {
	return e.ToSchedulePropagateTagsPtrOutputWithContext(context.Background())
}

func (e SchedulePropagateTags) ToSchedulePropagateTagsPtrOutputWithContext(ctx context.Context) SchedulePropagateTagsPtrOutput {
	return SchedulePropagateTags(e).ToSchedulePropagateTagsOutputWithContext(ctx).ToSchedulePropagateTagsPtrOutputWithContext(ctx)
}

func (e SchedulePropagateTags) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulePropagateTags) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulePropagateTags) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchedulePropagateTags) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SchedulePropagateTagsOutput struct{ *pulumi.OutputState }

func (SchedulePropagateTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePropagateTags)(nil)).Elem()
}

func (o SchedulePropagateTagsOutput) ToSchedulePropagateTagsOutput() SchedulePropagateTagsOutput {
	return o
}

func (o SchedulePropagateTagsOutput) ToSchedulePropagateTagsOutputWithContext(ctx context.Context) SchedulePropagateTagsOutput {
	return o
}

func (o SchedulePropagateTagsOutput) ToSchedulePropagateTagsPtrOutput() SchedulePropagateTagsPtrOutput {
	return o.ToSchedulePropagateTagsPtrOutputWithContext(context.Background())
}

func (o SchedulePropagateTagsOutput) ToSchedulePropagateTagsPtrOutputWithContext(ctx context.Context) SchedulePropagateTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulePropagateTags) *SchedulePropagateTags {
		return &v
	}).(SchedulePropagateTagsPtrOutput)
}

func (o SchedulePropagateTagsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SchedulePropagateTagsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulePropagateTags) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SchedulePropagateTagsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulePropagateTagsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchedulePropagateTags) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SchedulePropagateTagsPtrOutput struct{ *pulumi.OutputState }

func (SchedulePropagateTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulePropagateTags)(nil)).Elem()
}

func (o SchedulePropagateTagsPtrOutput) ToSchedulePropagateTagsPtrOutput() SchedulePropagateTagsPtrOutput {
	return o
}

func (o SchedulePropagateTagsPtrOutput) ToSchedulePropagateTagsPtrOutputWithContext(ctx context.Context) SchedulePropagateTagsPtrOutput {
	return o
}

func (o SchedulePropagateTagsPtrOutput) Elem() SchedulePropagateTagsOutput {
	return o.ApplyT(func(v *SchedulePropagateTags) SchedulePropagateTags {
		if v != nil {
			return *v
		}
		var ret SchedulePropagateTags
		return ret
	}).(SchedulePropagateTagsOutput)
}

func (o SchedulePropagateTagsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchedulePropagateTagsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SchedulePropagateTags) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SchedulePropagateTagsInput is an input type that accepts values of the SchedulePropagateTags enum
// A concrete instance of `SchedulePropagateTagsInput` can be one of the following:
//
//	SchedulePropagateTagsTaskDefinition
type SchedulePropagateTagsInput interface {
	pulumi.Input

	ToSchedulePropagateTagsOutput() SchedulePropagateTagsOutput
	ToSchedulePropagateTagsOutputWithContext(context.Context) SchedulePropagateTagsOutput
}

var schedulePropagateTagsPtrType = reflect.TypeOf((**SchedulePropagateTags)(nil)).Elem()

type SchedulePropagateTagsPtrInput interface {
	pulumi.Input

	ToSchedulePropagateTagsPtrOutput() SchedulePropagateTagsPtrOutput
	ToSchedulePropagateTagsPtrOutputWithContext(context.Context) SchedulePropagateTagsPtrOutput
}

type schedulePropagateTagsPtr string

func SchedulePropagateTagsPtr(v string) SchedulePropagateTagsPtrInput {
	return (*schedulePropagateTagsPtr)(&v)
}

func (*schedulePropagateTagsPtr) ElementType() reflect.Type {
	return schedulePropagateTagsPtrType
}

func (in *schedulePropagateTagsPtr) ToSchedulePropagateTagsPtrOutput() SchedulePropagateTagsPtrOutput {
	return pulumi.ToOutput(in).(SchedulePropagateTagsPtrOutput)
}

func (in *schedulePropagateTagsPtr) ToSchedulePropagateTagsPtrOutputWithContext(ctx context.Context) SchedulePropagateTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SchedulePropagateTagsPtrOutput)
}

// Specifies whether the schedule is enabled or disabled.
type ScheduleStateEnum string

const (
	ScheduleStateEnumEnabled  = ScheduleStateEnum("ENABLED")
	ScheduleStateEnumDisabled = ScheduleStateEnum("DISABLED")
)

func (ScheduleStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleStateEnum)(nil)).Elem()
}

func (e ScheduleStateEnum) ToScheduleStateEnumOutput() ScheduleStateEnumOutput {
	return pulumi.ToOutput(e).(ScheduleStateEnumOutput)
}

func (e ScheduleStateEnum) ToScheduleStateEnumOutputWithContext(ctx context.Context) ScheduleStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleStateEnumOutput)
}

func (e ScheduleStateEnum) ToScheduleStateEnumPtrOutput() ScheduleStateEnumPtrOutput {
	return e.ToScheduleStateEnumPtrOutputWithContext(context.Background())
}

func (e ScheduleStateEnum) ToScheduleStateEnumPtrOutputWithContext(ctx context.Context) ScheduleStateEnumPtrOutput {
	return ScheduleStateEnum(e).ToScheduleStateEnumOutputWithContext(ctx).ToScheduleStateEnumPtrOutputWithContext(ctx)
}

func (e ScheduleStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleStateEnumOutput struct{ *pulumi.OutputState }

func (ScheduleStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleStateEnum)(nil)).Elem()
}

func (o ScheduleStateEnumOutput) ToScheduleStateEnumOutput() ScheduleStateEnumOutput {
	return o
}

func (o ScheduleStateEnumOutput) ToScheduleStateEnumOutputWithContext(ctx context.Context) ScheduleStateEnumOutput {
	return o
}

func (o ScheduleStateEnumOutput) ToScheduleStateEnumPtrOutput() ScheduleStateEnumPtrOutput {
	return o.ToScheduleStateEnumPtrOutputWithContext(context.Background())
}

func (o ScheduleStateEnumOutput) ToScheduleStateEnumPtrOutputWithContext(ctx context.Context) ScheduleStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleStateEnum) *ScheduleStateEnum {
		return &v
	}).(ScheduleStateEnumPtrOutput)
}

func (o ScheduleStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleStateEnumPtrOutput struct{ *pulumi.OutputState }

func (ScheduleStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleStateEnum)(nil)).Elem()
}

func (o ScheduleStateEnumPtrOutput) ToScheduleStateEnumPtrOutput() ScheduleStateEnumPtrOutput {
	return o
}

func (o ScheduleStateEnumPtrOutput) ToScheduleStateEnumPtrOutputWithContext(ctx context.Context) ScheduleStateEnumPtrOutput {
	return o
}

func (o ScheduleStateEnumPtrOutput) Elem() ScheduleStateEnumOutput {
	return o.ApplyT(func(v *ScheduleStateEnum) ScheduleStateEnum {
		if v != nil {
			return *v
		}
		var ret ScheduleStateEnum
		return ret
	}).(ScheduleStateEnumOutput)
}

func (o ScheduleStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleStateEnumInput is an input type that accepts values of the ScheduleStateEnum enum
// A concrete instance of `ScheduleStateEnumInput` can be one of the following:
//
//	ScheduleStateEnumEnabled
//	ScheduleStateEnumDisabled
type ScheduleStateEnumInput interface {
	pulumi.Input

	ToScheduleStateEnumOutput() ScheduleStateEnumOutput
	ToScheduleStateEnumOutputWithContext(context.Context) ScheduleStateEnumOutput
}

var scheduleStateEnumPtrType = reflect.TypeOf((**ScheduleStateEnum)(nil)).Elem()

type ScheduleStateEnumPtrInput interface {
	pulumi.Input

	ToScheduleStateEnumPtrOutput() ScheduleStateEnumPtrOutput
	ToScheduleStateEnumPtrOutputWithContext(context.Context) ScheduleStateEnumPtrOutput
}

type scheduleStateEnumPtr string

func ScheduleStateEnumPtr(v string) ScheduleStateEnumPtrInput {
	return (*scheduleStateEnumPtr)(&v)
}

func (*scheduleStateEnumPtr) ElementType() reflect.Type {
	return scheduleStateEnumPtrType
}

func (in *scheduleStateEnumPtr) ToScheduleStateEnumPtrOutput() ScheduleStateEnumPtrOutput {
	return pulumi.ToOutput(in).(ScheduleStateEnumPtrOutput)
}

func (in *scheduleStateEnumPtr) ToScheduleStateEnumPtrOutputWithContext(ctx context.Context) ScheduleStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleStateEnumPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleAssignPublicIpInput)(nil)).Elem(), ScheduleAssignPublicIp("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleAssignPublicIpPtrInput)(nil)).Elem(), ScheduleAssignPublicIp("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleFlexibleTimeWindowModeInput)(nil)).Elem(), ScheduleFlexibleTimeWindowMode("OFF"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleFlexibleTimeWindowModePtrInput)(nil)).Elem(), ScheduleFlexibleTimeWindowMode("OFF"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleLaunchTypeInput)(nil)).Elem(), ScheduleLaunchType("EC2"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleLaunchTypePtrInput)(nil)).Elem(), ScheduleLaunchType("EC2"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementConstraintTypeInput)(nil)).Elem(), SchedulePlacementConstraintType("distinctInstance"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementConstraintTypePtrInput)(nil)).Elem(), SchedulePlacementConstraintType("distinctInstance"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementStrategyTypeInput)(nil)).Elem(), SchedulePlacementStrategyType("random"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePlacementStrategyTypePtrInput)(nil)).Elem(), SchedulePlacementStrategyType("random"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePropagateTagsInput)(nil)).Elem(), SchedulePropagateTags("TASK_DEFINITION"))
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulePropagateTagsPtrInput)(nil)).Elem(), SchedulePropagateTags("TASK_DEFINITION"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleStateEnumInput)(nil)).Elem(), ScheduleStateEnum("ENABLED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleStateEnumPtrInput)(nil)).Elem(), ScheduleStateEnum("ENABLED"))
	pulumi.RegisterOutputType(ScheduleAssignPublicIpOutput{})
	pulumi.RegisterOutputType(ScheduleAssignPublicIpPtrOutput{})
	pulumi.RegisterOutputType(ScheduleFlexibleTimeWindowModeOutput{})
	pulumi.RegisterOutputType(ScheduleFlexibleTimeWindowModePtrOutput{})
	pulumi.RegisterOutputType(ScheduleGroupStateEnumOutput{})
	pulumi.RegisterOutputType(ScheduleGroupStateEnumPtrOutput{})
	pulumi.RegisterOutputType(ScheduleLaunchTypeOutput{})
	pulumi.RegisterOutputType(ScheduleLaunchTypePtrOutput{})
	pulumi.RegisterOutputType(SchedulePlacementConstraintTypeOutput{})
	pulumi.RegisterOutputType(SchedulePlacementConstraintTypePtrOutput{})
	pulumi.RegisterOutputType(SchedulePlacementStrategyTypeOutput{})
	pulumi.RegisterOutputType(SchedulePlacementStrategyTypePtrOutput{})
	pulumi.RegisterOutputType(SchedulePropagateTagsOutput{})
	pulumi.RegisterOutputType(SchedulePropagateTagsPtrOutput{})
	pulumi.RegisterOutputType(ScheduleStateEnumOutput{})
	pulumi.RegisterOutputType(ScheduleStateEnumPtrOutput{})
}
