// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EMR::WALWorkspace Type
type WalWorkspace struct {
	pulumi.CustomResourceState

	// An array of key-value pairs to apply to this resource.
	Tags WalWorkspaceTagArrayOutput `pulumi:"tags"`
	// The name of the emrwal container
	WalWorkspaceName pulumi.StringPtrOutput `pulumi:"walWorkspaceName"`
}

// NewWalWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWalWorkspace(ctx *pulumi.Context,
	name string, args *WalWorkspaceArgs, opts ...pulumi.ResourceOption) (*WalWorkspace, error) {
	if args == nil {
		args = &WalWorkspaceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WalWorkspace
	err := ctx.RegisterResource("aws-native:emr:WalWorkspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWalWorkspace gets an existing WalWorkspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWalWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WalWorkspaceState, opts ...pulumi.ResourceOption) (*WalWorkspace, error) {
	var resource WalWorkspace
	err := ctx.ReadResource("aws-native:emr:WalWorkspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WalWorkspace resources.
type walWorkspaceState struct {
}

type WalWorkspaceState struct {
}

func (WalWorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*walWorkspaceState)(nil)).Elem()
}

type walWorkspaceArgs struct {
	// An array of key-value pairs to apply to this resource.
	Tags []WalWorkspaceTag `pulumi:"tags"`
	// The name of the emrwal container
	WalWorkspaceName *string `pulumi:"walWorkspaceName"`
}

// The set of arguments for constructing a WalWorkspace resource.
type WalWorkspaceArgs struct {
	// An array of key-value pairs to apply to this resource.
	Tags WalWorkspaceTagArrayInput
	// The name of the emrwal container
	WalWorkspaceName pulumi.StringPtrInput
}

func (WalWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*walWorkspaceArgs)(nil)).Elem()
}

type WalWorkspaceInput interface {
	pulumi.Input

	ToWalWorkspaceOutput() WalWorkspaceOutput
	ToWalWorkspaceOutputWithContext(ctx context.Context) WalWorkspaceOutput
}

func (*WalWorkspace) ElementType() reflect.Type {
	return reflect.TypeOf((**WalWorkspace)(nil)).Elem()
}

func (i *WalWorkspace) ToWalWorkspaceOutput() WalWorkspaceOutput {
	return i.ToWalWorkspaceOutputWithContext(context.Background())
}

func (i *WalWorkspace) ToWalWorkspaceOutputWithContext(ctx context.Context) WalWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WalWorkspaceOutput)
}

type WalWorkspaceOutput struct{ *pulumi.OutputState }

func (WalWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WalWorkspace)(nil)).Elem()
}

func (o WalWorkspaceOutput) ToWalWorkspaceOutput() WalWorkspaceOutput {
	return o
}

func (o WalWorkspaceOutput) ToWalWorkspaceOutputWithContext(ctx context.Context) WalWorkspaceOutput {
	return o
}

// An array of key-value pairs to apply to this resource.
func (o WalWorkspaceOutput) Tags() WalWorkspaceTagArrayOutput {
	return o.ApplyT(func(v *WalWorkspace) WalWorkspaceTagArrayOutput { return v.Tags }).(WalWorkspaceTagArrayOutput)
}

// The name of the emrwal container
func (o WalWorkspaceOutput) WalWorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WalWorkspace) pulumi.StringPtrOutput { return v.WalWorkspaceName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WalWorkspaceInput)(nil)).Elem(), &WalWorkspace{})
	pulumi.RegisterOutputType(WalWorkspaceOutput{})
}
