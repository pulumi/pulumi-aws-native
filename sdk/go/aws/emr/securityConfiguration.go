// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use a SecurityConfiguration resource to configure data encryption, Kerberos authentication, and Amazon S3 authorization for EMRFS.
type SecurityConfiguration struct {
	pulumi.CustomResourceState

	// The name of the security configuration.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The security configuration details in JSON format.
	SecurityConfiguration pulumi.AnyOutput `pulumi:"securityConfiguration"`
}

// NewSecurityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSecurityConfiguration(ctx *pulumi.Context,
	name string, args *SecurityConfigurationArgs, opts ...pulumi.ResourceOption) (*SecurityConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'SecurityConfiguration'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"securityConfiguration",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityConfiguration
	err := ctx.RegisterResource("aws-native:emr:SecurityConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityConfiguration gets an existing SecurityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityConfigurationState, opts ...pulumi.ResourceOption) (*SecurityConfiguration, error) {
	var resource SecurityConfiguration
	err := ctx.ReadResource("aws-native:emr:SecurityConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityConfiguration resources.
type securityConfigurationState struct {
}

type SecurityConfigurationState struct {
}

func (SecurityConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityConfigurationState)(nil)).Elem()
}

type securityConfigurationArgs struct {
	// The name of the security configuration.
	Name *string `pulumi:"name"`
	// The security configuration details in JSON format.
	SecurityConfiguration interface{} `pulumi:"securityConfiguration"`
}

// The set of arguments for constructing a SecurityConfiguration resource.
type SecurityConfigurationArgs struct {
	// The name of the security configuration.
	Name pulumi.StringPtrInput
	// The security configuration details in JSON format.
	SecurityConfiguration pulumi.Input
}

func (SecurityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityConfigurationArgs)(nil)).Elem()
}

type SecurityConfigurationInput interface {
	pulumi.Input

	ToSecurityConfigurationOutput() SecurityConfigurationOutput
	ToSecurityConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationOutput
}

func (*SecurityConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfiguration)(nil)).Elem()
}

func (i *SecurityConfiguration) ToSecurityConfigurationOutput() SecurityConfigurationOutput {
	return i.ToSecurityConfigurationOutputWithContext(context.Background())
}

func (i *SecurityConfiguration) ToSecurityConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationOutput)
}

func (i *SecurityConfiguration) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfiguration] {
	return pulumix.Output[*SecurityConfiguration]{
		OutputState: i.ToSecurityConfigurationOutputWithContext(ctx).OutputState,
	}
}

type SecurityConfigurationOutput struct{ *pulumi.OutputState }

func (SecurityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityConfiguration)(nil)).Elem()
}

func (o SecurityConfigurationOutput) ToSecurityConfigurationOutput() SecurityConfigurationOutput {
	return o
}

func (o SecurityConfigurationOutput) ToSecurityConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationOutput {
	return o
}

func (o SecurityConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityConfiguration] {
	return pulumix.Output[*SecurityConfiguration]{
		OutputState: o.OutputState,
	}
}

// The name of the security configuration.
func (o SecurityConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityConfiguration) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The security configuration details in JSON format.
func (o SecurityConfigurationOutput) SecurityConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *SecurityConfiguration) pulumi.AnyOutput { return v.SecurityConfiguration }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityConfigurationInput)(nil)).Elem(), &SecurityConfiguration{})
	pulumi.RegisterOutputType(SecurityConfigurationOutput{})
}
