// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The encryption type to use. The only valid value is KMS.
type StreamEncryptionEncryptionType string

const (
	StreamEncryptionEncryptionTypeKms = StreamEncryptionEncryptionType("KMS")
)

func (StreamEncryptionEncryptionType) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamEncryptionEncryptionType)(nil)).Elem()
}

func (e StreamEncryptionEncryptionType) ToStreamEncryptionEncryptionTypeOutput() StreamEncryptionEncryptionTypeOutput {
	return pulumi.ToOutput(e).(StreamEncryptionEncryptionTypeOutput)
}

func (e StreamEncryptionEncryptionType) ToStreamEncryptionEncryptionTypeOutputWithContext(ctx context.Context) StreamEncryptionEncryptionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StreamEncryptionEncryptionTypeOutput)
}

func (e StreamEncryptionEncryptionType) ToStreamEncryptionEncryptionTypePtrOutput() StreamEncryptionEncryptionTypePtrOutput {
	return e.ToStreamEncryptionEncryptionTypePtrOutputWithContext(context.Background())
}

func (e StreamEncryptionEncryptionType) ToStreamEncryptionEncryptionTypePtrOutputWithContext(ctx context.Context) StreamEncryptionEncryptionTypePtrOutput {
	return StreamEncryptionEncryptionType(e).ToStreamEncryptionEncryptionTypeOutputWithContext(ctx).ToStreamEncryptionEncryptionTypePtrOutputWithContext(ctx)
}

func (e StreamEncryptionEncryptionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamEncryptionEncryptionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamEncryptionEncryptionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StreamEncryptionEncryptionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StreamEncryptionEncryptionTypeOutput struct{ *pulumi.OutputState }

func (StreamEncryptionEncryptionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamEncryptionEncryptionType)(nil)).Elem()
}

func (o StreamEncryptionEncryptionTypeOutput) ToStreamEncryptionEncryptionTypeOutput() StreamEncryptionEncryptionTypeOutput {
	return o
}

func (o StreamEncryptionEncryptionTypeOutput) ToStreamEncryptionEncryptionTypeOutputWithContext(ctx context.Context) StreamEncryptionEncryptionTypeOutput {
	return o
}

func (o StreamEncryptionEncryptionTypeOutput) ToStreamEncryptionEncryptionTypePtrOutput() StreamEncryptionEncryptionTypePtrOutput {
	return o.ToStreamEncryptionEncryptionTypePtrOutputWithContext(context.Background())
}

func (o StreamEncryptionEncryptionTypeOutput) ToStreamEncryptionEncryptionTypePtrOutputWithContext(ctx context.Context) StreamEncryptionEncryptionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamEncryptionEncryptionType) *StreamEncryptionEncryptionType {
		return &v
	}).(StreamEncryptionEncryptionTypePtrOutput)
}

func (o StreamEncryptionEncryptionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StreamEncryptionEncryptionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamEncryptionEncryptionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StreamEncryptionEncryptionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamEncryptionEncryptionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamEncryptionEncryptionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StreamEncryptionEncryptionTypePtrOutput struct{ *pulumi.OutputState }

func (StreamEncryptionEncryptionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamEncryptionEncryptionType)(nil)).Elem()
}

func (o StreamEncryptionEncryptionTypePtrOutput) ToStreamEncryptionEncryptionTypePtrOutput() StreamEncryptionEncryptionTypePtrOutput {
	return o
}

func (o StreamEncryptionEncryptionTypePtrOutput) ToStreamEncryptionEncryptionTypePtrOutputWithContext(ctx context.Context) StreamEncryptionEncryptionTypePtrOutput {
	return o
}

func (o StreamEncryptionEncryptionTypePtrOutput) Elem() StreamEncryptionEncryptionTypeOutput {
	return o.ApplyT(func(v *StreamEncryptionEncryptionType) StreamEncryptionEncryptionType {
		if v != nil {
			return *v
		}
		var ret StreamEncryptionEncryptionType
		return ret
	}).(StreamEncryptionEncryptionTypeOutput)
}

func (o StreamEncryptionEncryptionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamEncryptionEncryptionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StreamEncryptionEncryptionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StreamEncryptionEncryptionTypeInput is an input type that accepts StreamEncryptionEncryptionTypeArgs and StreamEncryptionEncryptionTypeOutput values.
// You can construct a concrete instance of `StreamEncryptionEncryptionTypeInput` via:
//
//          StreamEncryptionEncryptionTypeArgs{...}
type StreamEncryptionEncryptionTypeInput interface {
	pulumi.Input

	ToStreamEncryptionEncryptionTypeOutput() StreamEncryptionEncryptionTypeOutput
	ToStreamEncryptionEncryptionTypeOutputWithContext(context.Context) StreamEncryptionEncryptionTypeOutput
}

var streamEncryptionEncryptionTypePtrType = reflect.TypeOf((**StreamEncryptionEncryptionType)(nil)).Elem()

type StreamEncryptionEncryptionTypePtrInput interface {
	pulumi.Input

	ToStreamEncryptionEncryptionTypePtrOutput() StreamEncryptionEncryptionTypePtrOutput
	ToStreamEncryptionEncryptionTypePtrOutputWithContext(context.Context) StreamEncryptionEncryptionTypePtrOutput
}

type streamEncryptionEncryptionTypePtr string

func StreamEncryptionEncryptionTypePtr(v string) StreamEncryptionEncryptionTypePtrInput {
	return (*streamEncryptionEncryptionTypePtr)(&v)
}

func (*streamEncryptionEncryptionTypePtr) ElementType() reflect.Type {
	return streamEncryptionEncryptionTypePtrType
}

func (in *streamEncryptionEncryptionTypePtr) ToStreamEncryptionEncryptionTypePtrOutput() StreamEncryptionEncryptionTypePtrOutput {
	return pulumi.ToOutput(in).(StreamEncryptionEncryptionTypePtrOutput)
}

func (in *streamEncryptionEncryptionTypePtr) ToStreamEncryptionEncryptionTypePtrOutputWithContext(ctx context.Context) StreamEncryptionEncryptionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StreamEncryptionEncryptionTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(StreamEncryptionEncryptionTypeOutput{})
	pulumi.RegisterOutputType(StreamEncryptionEncryptionTypePtrOutput{})
}
