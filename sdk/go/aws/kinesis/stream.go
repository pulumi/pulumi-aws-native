// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Kinesis::Stream
type Stream struct {
	pulumi.CustomResourceState

	// The Amazon resource name (ARN) of the Kinesis stream
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the Kinesis stream.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The number of hours for the data records that are stored in shards to remain accessible.
	RetentionPeriodHours pulumi.IntPtrOutput `pulumi:"retentionPeriodHours"`
	// The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
	ShardCount pulumi.IntPtrOutput `pulumi:"shardCount"`
	// When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
	StreamEncryption StreamEncryptionPtrOutput `pulumi:"streamEncryption"`
	// The mode in which the stream is running.
	StreamModeDetails StreamModeDetailsPtrOutput `pulumi:"streamModeDetails"`
	// An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
	Tags StreamTagArrayOutput `pulumi:"tags"`
}

// NewStream registers a new resource with the given unique name, arguments, and options.
func NewStream(ctx *pulumi.Context,
	name string, args *StreamArgs, opts ...pulumi.ResourceOption) (*Stream, error) {
	if args == nil {
		args = &StreamArgs{}
	}

	var resource Stream
	err := ctx.RegisterResource("aws-native:kinesis:Stream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStream gets an existing Stream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamState, opts ...pulumi.ResourceOption) (*Stream, error) {
	var resource Stream
	err := ctx.ReadResource("aws-native:kinesis:Stream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stream resources.
type streamState struct {
}

type StreamState struct {
}

func (StreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamState)(nil)).Elem()
}

type streamArgs struct {
	// The name of the Kinesis stream.
	Name *string `pulumi:"name"`
	// The number of hours for the data records that are stored in shards to remain accessible.
	RetentionPeriodHours *int `pulumi:"retentionPeriodHours"`
	// The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
	ShardCount *int `pulumi:"shardCount"`
	// When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
	StreamEncryption *StreamEncryption `pulumi:"streamEncryption"`
	// The mode in which the stream is running.
	StreamModeDetails *StreamModeDetails `pulumi:"streamModeDetails"`
	// An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
	Tags []StreamTag `pulumi:"tags"`
}

// The set of arguments for constructing a Stream resource.
type StreamArgs struct {
	// The name of the Kinesis stream.
	Name pulumi.StringPtrInput
	// The number of hours for the data records that are stored in shards to remain accessible.
	RetentionPeriodHours pulumi.IntPtrInput
	// The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
	ShardCount pulumi.IntPtrInput
	// When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
	StreamEncryption StreamEncryptionPtrInput
	// The mode in which the stream is running.
	StreamModeDetails StreamModeDetailsPtrInput
	// An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
	Tags StreamTagArrayInput
}

func (StreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamArgs)(nil)).Elem()
}

type StreamInput interface {
	pulumi.Input

	ToStreamOutput() StreamOutput
	ToStreamOutputWithContext(ctx context.Context) StreamOutput
}

func (*Stream) ElementType() reflect.Type {
	return reflect.TypeOf((*Stream)(nil))
}

func (i *Stream) ToStreamOutput() StreamOutput {
	return i.ToStreamOutputWithContext(context.Background())
}

func (i *Stream) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOutput)
}

type StreamOutput struct{ *pulumi.OutputState }

func (StreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stream)(nil))
}

func (o StreamOutput) ToStreamOutput() StreamOutput {
	return o
}

func (o StreamOutput) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInput)(nil)).Elem(), &Stream{})
	pulumi.RegisterOutputType(StreamOutput{})
}
