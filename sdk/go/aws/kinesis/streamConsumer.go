// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Kinesis::StreamConsumer
type StreamConsumer struct {
	pulumi.CustomResourceState

	// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
	ConsumerArn pulumi.StringOutput `pulumi:"consumerArn"`
	// Timestamp when the consumer was created.
	ConsumerCreationTimestamp pulumi.StringOutput `pulumi:"consumerCreationTimestamp"`
	// The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
	ConsumerName pulumi.StringOutput `pulumi:"consumerName"`
	// A consumer can't read data while in the CREATING or DELETING states. Valid Values: CREATING | DELETING | ACTIVE
	ConsumerStatus pulumi.StringOutput `pulumi:"consumerStatus"`
	// The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
	StreamArn pulumi.StringOutput `pulumi:"streamArn"`
	// An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
}

// NewStreamConsumer registers a new resource with the given unique name, arguments, and options.
func NewStreamConsumer(ctx *pulumi.Context,
	name string, args *StreamConsumerArgs, opts ...pulumi.ResourceOption) (*StreamConsumer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StreamArn == nil {
		return nil, errors.New("invalid value for required argument 'StreamArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"consumerName",
		"streamArn",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamConsumer
	err := ctx.RegisterResource("aws-native:kinesis:StreamConsumer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamConsumer gets an existing StreamConsumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamConsumer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamConsumerState, opts ...pulumi.ResourceOption) (*StreamConsumer, error) {
	var resource StreamConsumer
	err := ctx.ReadResource("aws-native:kinesis:StreamConsumer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamConsumer resources.
type streamConsumerState struct {
}

type StreamConsumerState struct {
}

func (StreamConsumerState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamConsumerState)(nil)).Elem()
}

type streamConsumerArgs struct {
	// The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
	ConsumerName *string `pulumi:"consumerName"`
	// The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
	StreamArn string `pulumi:"streamArn"`
	// An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
}

// The set of arguments for constructing a StreamConsumer resource.
type StreamConsumerArgs struct {
	// The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
	ConsumerName pulumi.StringPtrInput
	// The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
	StreamArn pulumi.StringInput
	// An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
	Tags aws.CreateOnlyTagArrayInput
}

func (StreamConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamConsumerArgs)(nil)).Elem()
}

type StreamConsumerInput interface {
	pulumi.Input

	ToStreamConsumerOutput() StreamConsumerOutput
	ToStreamConsumerOutputWithContext(ctx context.Context) StreamConsumerOutput
}

func (*StreamConsumer) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamConsumer)(nil)).Elem()
}

func (i *StreamConsumer) ToStreamConsumerOutput() StreamConsumerOutput {
	return i.ToStreamConsumerOutputWithContext(context.Background())
}

func (i *StreamConsumer) ToStreamConsumerOutputWithContext(ctx context.Context) StreamConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamConsumerOutput)
}

type StreamConsumerOutput struct{ *pulumi.OutputState }

func (StreamConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamConsumer)(nil)).Elem()
}

func (o StreamConsumerOutput) ToStreamConsumerOutput() StreamConsumerOutput {
	return o
}

func (o StreamConsumerOutput) ToStreamConsumerOutputWithContext(ctx context.Context) StreamConsumerOutput {
	return o
}

// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
func (o StreamConsumerOutput) ConsumerArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConsumer) pulumi.StringOutput { return v.ConsumerArn }).(pulumi.StringOutput)
}

// Timestamp when the consumer was created.
func (o StreamConsumerOutput) ConsumerCreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConsumer) pulumi.StringOutput { return v.ConsumerCreationTimestamp }).(pulumi.StringOutput)
}

// The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
func (o StreamConsumerOutput) ConsumerName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConsumer) pulumi.StringOutput { return v.ConsumerName }).(pulumi.StringOutput)
}

// A consumer can't read data while in the CREATING or DELETING states. Valid Values: CREATING | DELETING | ACTIVE
func (o StreamConsumerOutput) ConsumerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConsumer) pulumi.StringOutput { return v.ConsumerStatus }).(pulumi.StringOutput)
}

// The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
func (o StreamConsumerOutput) StreamArn() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConsumer) pulumi.StringOutput { return v.StreamArn }).(pulumi.StringOutput)
}

// An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
func (o StreamConsumerOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *StreamConsumer) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamConsumerInput)(nil)).Elem(), &StreamConsumer{})
	pulumi.RegisterOutputType(StreamConsumerOutput{})
}
