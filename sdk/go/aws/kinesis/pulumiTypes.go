// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption.
type StreamStreamEncryption struct {
	// The encryption type to use. The only valid value is KMS.
	EncryptionType StreamStreamEncryptionEncryptionType `pulumi:"encryptionType"`
	// The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
	KeyId string `pulumi:"keyId"`
}

// StreamStreamEncryptionInput is an input type that accepts StreamStreamEncryptionArgs and StreamStreamEncryptionOutput values.
// You can construct a concrete instance of `StreamStreamEncryptionInput` via:
//
//          StreamStreamEncryptionArgs{...}
type StreamStreamEncryptionInput interface {
	pulumi.Input

	ToStreamStreamEncryptionOutput() StreamStreamEncryptionOutput
	ToStreamStreamEncryptionOutputWithContext(context.Context) StreamStreamEncryptionOutput
}

// When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption.
type StreamStreamEncryptionArgs struct {
	// The encryption type to use. The only valid value is KMS.
	EncryptionType StreamStreamEncryptionEncryptionTypeInput `pulumi:"encryptionType"`
	// The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
	KeyId pulumi.StringInput `pulumi:"keyId"`
}

func (StreamStreamEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamStreamEncryption)(nil)).Elem()
}

func (i StreamStreamEncryptionArgs) ToStreamStreamEncryptionOutput() StreamStreamEncryptionOutput {
	return i.ToStreamStreamEncryptionOutputWithContext(context.Background())
}

func (i StreamStreamEncryptionArgs) ToStreamStreamEncryptionOutputWithContext(ctx context.Context) StreamStreamEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamStreamEncryptionOutput)
}

func (i StreamStreamEncryptionArgs) ToStreamStreamEncryptionPtrOutput() StreamStreamEncryptionPtrOutput {
	return i.ToStreamStreamEncryptionPtrOutputWithContext(context.Background())
}

func (i StreamStreamEncryptionArgs) ToStreamStreamEncryptionPtrOutputWithContext(ctx context.Context) StreamStreamEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamStreamEncryptionOutput).ToStreamStreamEncryptionPtrOutputWithContext(ctx)
}

// StreamStreamEncryptionPtrInput is an input type that accepts StreamStreamEncryptionArgs, StreamStreamEncryptionPtr and StreamStreamEncryptionPtrOutput values.
// You can construct a concrete instance of `StreamStreamEncryptionPtrInput` via:
//
//          StreamStreamEncryptionArgs{...}
//
//  or:
//
//          nil
type StreamStreamEncryptionPtrInput interface {
	pulumi.Input

	ToStreamStreamEncryptionPtrOutput() StreamStreamEncryptionPtrOutput
	ToStreamStreamEncryptionPtrOutputWithContext(context.Context) StreamStreamEncryptionPtrOutput
}

type streamStreamEncryptionPtrType StreamStreamEncryptionArgs

func StreamStreamEncryptionPtr(v *StreamStreamEncryptionArgs) StreamStreamEncryptionPtrInput {
	return (*streamStreamEncryptionPtrType)(v)
}

func (*streamStreamEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamStreamEncryption)(nil)).Elem()
}

func (i *streamStreamEncryptionPtrType) ToStreamStreamEncryptionPtrOutput() StreamStreamEncryptionPtrOutput {
	return i.ToStreamStreamEncryptionPtrOutputWithContext(context.Background())
}

func (i *streamStreamEncryptionPtrType) ToStreamStreamEncryptionPtrOutputWithContext(ctx context.Context) StreamStreamEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamStreamEncryptionPtrOutput)
}

// When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption.
type StreamStreamEncryptionOutput struct{ *pulumi.OutputState }

func (StreamStreamEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamStreamEncryption)(nil)).Elem()
}

func (o StreamStreamEncryptionOutput) ToStreamStreamEncryptionOutput() StreamStreamEncryptionOutput {
	return o
}

func (o StreamStreamEncryptionOutput) ToStreamStreamEncryptionOutputWithContext(ctx context.Context) StreamStreamEncryptionOutput {
	return o
}

func (o StreamStreamEncryptionOutput) ToStreamStreamEncryptionPtrOutput() StreamStreamEncryptionPtrOutput {
	return o.ToStreamStreamEncryptionPtrOutputWithContext(context.Background())
}

func (o StreamStreamEncryptionOutput) ToStreamStreamEncryptionPtrOutputWithContext(ctx context.Context) StreamStreamEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamStreamEncryption) *StreamStreamEncryption {
		return &v
	}).(StreamStreamEncryptionPtrOutput)
}

// The encryption type to use. The only valid value is KMS.
func (o StreamStreamEncryptionOutput) EncryptionType() StreamStreamEncryptionEncryptionTypeOutput {
	return o.ApplyT(func(v StreamStreamEncryption) StreamStreamEncryptionEncryptionType { return v.EncryptionType }).(StreamStreamEncryptionEncryptionTypeOutput)
}

// The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
func (o StreamStreamEncryptionOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v StreamStreamEncryption) string { return v.KeyId }).(pulumi.StringOutput)
}

type StreamStreamEncryptionPtrOutput struct{ *pulumi.OutputState }

func (StreamStreamEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamStreamEncryption)(nil)).Elem()
}

func (o StreamStreamEncryptionPtrOutput) ToStreamStreamEncryptionPtrOutput() StreamStreamEncryptionPtrOutput {
	return o
}

func (o StreamStreamEncryptionPtrOutput) ToStreamStreamEncryptionPtrOutputWithContext(ctx context.Context) StreamStreamEncryptionPtrOutput {
	return o
}

func (o StreamStreamEncryptionPtrOutput) Elem() StreamStreamEncryptionOutput {
	return o.ApplyT(func(v *StreamStreamEncryption) StreamStreamEncryption {
		if v != nil {
			return *v
		}
		var ret StreamStreamEncryption
		return ret
	}).(StreamStreamEncryptionOutput)
}

// The encryption type to use. The only valid value is KMS.
func (o StreamStreamEncryptionPtrOutput) EncryptionType() StreamStreamEncryptionEncryptionTypePtrOutput {
	return o.ApplyT(func(v *StreamStreamEncryption) *StreamStreamEncryptionEncryptionType {
		if v == nil {
			return nil
		}
		return &v.EncryptionType
	}).(StreamStreamEncryptionEncryptionTypePtrOutput)
}

// The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
func (o StreamStreamEncryptionPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamStreamEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyId
	}).(pulumi.StringPtrOutput)
}

// An arbitrary set of tags (key-value pairs) to associate with the Kinesis stream.
type StreamTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// StreamTagInput is an input type that accepts StreamTagArgs and StreamTagOutput values.
// You can construct a concrete instance of `StreamTagInput` via:
//
//          StreamTagArgs{...}
type StreamTagInput interface {
	pulumi.Input

	ToStreamTagOutput() StreamTagOutput
	ToStreamTagOutputWithContext(context.Context) StreamTagOutput
}

// An arbitrary set of tags (key-value pairs) to associate with the Kinesis stream.
type StreamTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StreamTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamTag)(nil)).Elem()
}

func (i StreamTagArgs) ToStreamTagOutput() StreamTagOutput {
	return i.ToStreamTagOutputWithContext(context.Background())
}

func (i StreamTagArgs) ToStreamTagOutputWithContext(ctx context.Context) StreamTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamTagOutput)
}

// StreamTagArrayInput is an input type that accepts StreamTagArray and StreamTagArrayOutput values.
// You can construct a concrete instance of `StreamTagArrayInput` via:
//
//          StreamTagArray{ StreamTagArgs{...} }
type StreamTagArrayInput interface {
	pulumi.Input

	ToStreamTagArrayOutput() StreamTagArrayOutput
	ToStreamTagArrayOutputWithContext(context.Context) StreamTagArrayOutput
}

type StreamTagArray []StreamTagInput

func (StreamTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamTag)(nil)).Elem()
}

func (i StreamTagArray) ToStreamTagArrayOutput() StreamTagArrayOutput {
	return i.ToStreamTagArrayOutputWithContext(context.Background())
}

func (i StreamTagArray) ToStreamTagArrayOutputWithContext(ctx context.Context) StreamTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamTagArrayOutput)
}

// An arbitrary set of tags (key-value pairs) to associate with the Kinesis stream.
type StreamTagOutput struct{ *pulumi.OutputState }

func (StreamTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamTag)(nil)).Elem()
}

func (o StreamTagOutput) ToStreamTagOutput() StreamTagOutput {
	return o
}

func (o StreamTagOutput) ToStreamTagOutputWithContext(ctx context.Context) StreamTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o StreamTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StreamTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o StreamTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StreamTag) string { return v.Value }).(pulumi.StringOutput)
}

type StreamTagArrayOutput struct{ *pulumi.OutputState }

func (StreamTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamTag)(nil)).Elem()
}

func (o StreamTagArrayOutput) ToStreamTagArrayOutput() StreamTagArrayOutput {
	return o
}

func (o StreamTagArrayOutput) ToStreamTagArrayOutputWithContext(ctx context.Context) StreamTagArrayOutput {
	return o
}

func (o StreamTagArrayOutput) Index(i pulumi.IntInput) StreamTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamTag {
		return vs[0].([]StreamTag)[vs[1].(int)]
	}).(StreamTagOutput)
}

func init() {
	pulumi.RegisterOutputType(StreamStreamEncryptionOutput{})
	pulumi.RegisterOutputType(StreamStreamEncryptionPtrOutput{})
	pulumi.RegisterOutputType(StreamTagOutput{})
	pulumi.RegisterOutputType(StreamTagArrayOutput{})
}
