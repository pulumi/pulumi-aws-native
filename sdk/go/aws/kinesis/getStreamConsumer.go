// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kinesis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Kinesis::StreamConsumer
func LookupStreamConsumer(ctx *pulumi.Context, args *LookupStreamConsumerArgs, opts ...pulumi.InvokeOption) (*LookupStreamConsumerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamConsumerResult
	err := ctx.Invoke("aws-native:kinesis:getStreamConsumer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStreamConsumerArgs struct {
	// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
	ConsumerArn string `pulumi:"consumerArn"`
}

type LookupStreamConsumerResult struct {
	// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
	ConsumerArn *string `pulumi:"consumerArn"`
	// Timestamp when the consumer was created.
	ConsumerCreationTimestamp *string `pulumi:"consumerCreationTimestamp"`
	// A consumer can't read data while in the CREATING or DELETING states. Valid Values: CREATING | DELETING | ACTIVE
	ConsumerStatus *string `pulumi:"consumerStatus"`
}

func LookupStreamConsumerOutput(ctx *pulumi.Context, args LookupStreamConsumerOutputArgs, opts ...pulumi.InvokeOption) LookupStreamConsumerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamConsumerResultOutput, error) {
			args := v.(LookupStreamConsumerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:kinesis:getStreamConsumer", args, LookupStreamConsumerResultOutput{}, options).(LookupStreamConsumerResultOutput), nil
		}).(LookupStreamConsumerResultOutput)
}

type LookupStreamConsumerOutputArgs struct {
	// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
	ConsumerArn pulumi.StringInput `pulumi:"consumerArn"`
}

func (LookupStreamConsumerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamConsumerArgs)(nil)).Elem()
}

type LookupStreamConsumerResultOutput struct{ *pulumi.OutputState }

func (LookupStreamConsumerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamConsumerResult)(nil)).Elem()
}

func (o LookupStreamConsumerResultOutput) ToLookupStreamConsumerResultOutput() LookupStreamConsumerResultOutput {
	return o
}

func (o LookupStreamConsumerResultOutput) ToLookupStreamConsumerResultOutputWithContext(ctx context.Context) LookupStreamConsumerResultOutput {
	return o
}

// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
func (o LookupStreamConsumerResultOutput) ConsumerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamConsumerResult) *string { return v.ConsumerArn }).(pulumi.StringPtrOutput)
}

// Timestamp when the consumer was created.
func (o LookupStreamConsumerResultOutput) ConsumerCreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamConsumerResult) *string { return v.ConsumerCreationTimestamp }).(pulumi.StringPtrOutput)
}

// A consumer can't read data while in the CREATING or DELETING states. Valid Values: CREATING | DELETING | ACTIVE
func (o LookupStreamConsumerResultOutput) ConsumerStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStreamConsumerResult) *string { return v.ConsumerStatus }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamConsumerResultOutput{})
}
