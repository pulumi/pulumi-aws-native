// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::APS::Scraper
func LookupScraper(ctx *pulumi.Context, args *LookupScraperArgs, opts ...pulumi.InvokeOption) (*LookupScraperResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScraperResult
	err := ctx.Invoke("aws-native:aps:getScraper", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScraperArgs struct {
	// Scraper ARN.
	Arn string `pulumi:"arn"`
}

type LookupScraperResult struct {
	// Scraper ARN.
	Arn *string `pulumi:"arn"`
	// IAM role ARN for the scraper.
	RoleArn *string `pulumi:"roleArn"`
	// Required to identify a specific scraper.
	ScraperId *string `pulumi:"scraperId"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupScraperOutput(ctx *pulumi.Context, args LookupScraperOutputArgs, opts ...pulumi.InvokeOption) LookupScraperResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScraperResultOutput, error) {
			args := v.(LookupScraperArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupScraperResult
			secret, err := ctx.InvokePackageRaw("aws-native:aps:getScraper", args, &rv, "", opts...)
			if err != nil {
				return LookupScraperResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupScraperResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupScraperResultOutput), nil
			}
			return output, nil
		}).(LookupScraperResultOutput)
}

type LookupScraperOutputArgs struct {
	// Scraper ARN.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupScraperOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScraperArgs)(nil)).Elem()
}

type LookupScraperResultOutput struct{ *pulumi.OutputState }

func (LookupScraperResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScraperResult)(nil)).Elem()
}

func (o LookupScraperResultOutput) ToLookupScraperResultOutput() LookupScraperResultOutput {
	return o
}

func (o LookupScraperResultOutput) ToLookupScraperResultOutputWithContext(ctx context.Context) LookupScraperResultOutput {
	return o
}

// Scraper ARN.
func (o LookupScraperResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScraperResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// IAM role ARN for the scraper.
func (o LookupScraperResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScraperResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Required to identify a specific scraper.
func (o LookupScraperResultOutput) ScraperId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScraperResult) *string { return v.ScraperId }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupScraperResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupScraperResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScraperResultOutput{})
}
