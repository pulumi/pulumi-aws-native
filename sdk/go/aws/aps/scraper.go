// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aps

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::APS::Scraper
type Scraper struct {
	pulumi.CustomResourceState

	// Scraper alias.
	Alias pulumi.StringPtrOutput `pulumi:"alias"`
	// Scraper ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon Managed Service for Prometheus workspace the scraper sends metrics to.
	Destination ScraperDestinationOutput `pulumi:"destination"`
	// IAM role ARN for the scraper.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The configuration in use by the scraper.
	ScrapeConfiguration ScraperScrapeConfigurationOutput `pulumi:"scrapeConfiguration"`
	// Required to identify a specific scraper.
	ScraperId pulumi.StringOutput `pulumi:"scraperId"`
	// The Amazon EKS cluster from which the scraper collects metrics.
	Source ScraperSourceOutput `pulumi:"source"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewScraper registers a new resource with the given unique name, arguments, and options.
func NewScraper(ctx *pulumi.Context,
	name string, args *ScraperArgs, opts ...pulumi.ResourceOption) (*Scraper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.ScrapeConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ScrapeConfiguration'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"source",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Scraper
	err := ctx.RegisterResource("aws-native:aps:Scraper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScraper gets an existing Scraper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScraper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScraperState, opts ...pulumi.ResourceOption) (*Scraper, error) {
	var resource Scraper
	err := ctx.ReadResource("aws-native:aps:Scraper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Scraper resources.
type scraperState struct {
}

type ScraperState struct {
}

func (ScraperState) ElementType() reflect.Type {
	return reflect.TypeOf((*scraperState)(nil)).Elem()
}

type scraperArgs struct {
	// Scraper alias.
	Alias *string `pulumi:"alias"`
	// The Amazon Managed Service for Prometheus workspace the scraper sends metrics to.
	Destination ScraperDestination `pulumi:"destination"`
	// The configuration in use by the scraper.
	ScrapeConfiguration ScraperScrapeConfiguration `pulumi:"scrapeConfiguration"`
	// The Amazon EKS cluster from which the scraper collects metrics.
	Source ScraperSource `pulumi:"source"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Scraper resource.
type ScraperArgs struct {
	// Scraper alias.
	Alias pulumi.StringPtrInput
	// The Amazon Managed Service for Prometheus workspace the scraper sends metrics to.
	Destination ScraperDestinationInput
	// The configuration in use by the scraper.
	ScrapeConfiguration ScraperScrapeConfigurationInput
	// The Amazon EKS cluster from which the scraper collects metrics.
	Source ScraperSourceInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (ScraperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scraperArgs)(nil)).Elem()
}

type ScraperInput interface {
	pulumi.Input

	ToScraperOutput() ScraperOutput
	ToScraperOutputWithContext(ctx context.Context) ScraperOutput
}

func (*Scraper) ElementType() reflect.Type {
	return reflect.TypeOf((**Scraper)(nil)).Elem()
}

func (i *Scraper) ToScraperOutput() ScraperOutput {
	return i.ToScraperOutputWithContext(context.Background())
}

func (i *Scraper) ToScraperOutputWithContext(ctx context.Context) ScraperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScraperOutput)
}

type ScraperOutput struct{ *pulumi.OutputState }

func (ScraperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scraper)(nil)).Elem()
}

func (o ScraperOutput) ToScraperOutput() ScraperOutput {
	return o
}

func (o ScraperOutput) ToScraperOutputWithContext(ctx context.Context) ScraperOutput {
	return o
}

// Scraper alias.
func (o ScraperOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringPtrOutput { return v.Alias }).(pulumi.StringPtrOutput)
}

// Scraper ARN.
func (o ScraperOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Amazon Managed Service for Prometheus workspace the scraper sends metrics to.
func (o ScraperOutput) Destination() ScraperDestinationOutput {
	return o.ApplyT(func(v *Scraper) ScraperDestinationOutput { return v.Destination }).(ScraperDestinationOutput)
}

// IAM role ARN for the scraper.
func (o ScraperOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The configuration in use by the scraper.
func (o ScraperOutput) ScrapeConfiguration() ScraperScrapeConfigurationOutput {
	return o.ApplyT(func(v *Scraper) ScraperScrapeConfigurationOutput { return v.ScrapeConfiguration }).(ScraperScrapeConfigurationOutput)
}

// Required to identify a specific scraper.
func (o ScraperOutput) ScraperId() pulumi.StringOutput {
	return o.ApplyT(func(v *Scraper) pulumi.StringOutput { return v.ScraperId }).(pulumi.StringOutput)
}

// The Amazon EKS cluster from which the scraper collects metrics.
func (o ScraperOutput) Source() ScraperSourceOutput {
	return o.ApplyT(func(v *Scraper) ScraperSourceOutput { return v.Source }).(ScraperSourceOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ScraperOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Scraper) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScraperInput)(nil)).Elem(), &Scraper{})
	pulumi.RegisterOutputType(ScraperOutput{})
}
