// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloud9

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnvironmentEC2Repository struct {
	PathComponent string `pulumi:"pathComponent"`
	RepositoryUrl string `pulumi:"repositoryUrl"`
}

// EnvironmentEC2RepositoryInput is an input type that accepts EnvironmentEC2RepositoryArgs and EnvironmentEC2RepositoryOutput values.
// You can construct a concrete instance of `EnvironmentEC2RepositoryInput` via:
//
//          EnvironmentEC2RepositoryArgs{...}
type EnvironmentEC2RepositoryInput interface {
	pulumi.Input

	ToEnvironmentEC2RepositoryOutput() EnvironmentEC2RepositoryOutput
	ToEnvironmentEC2RepositoryOutputWithContext(context.Context) EnvironmentEC2RepositoryOutput
}

type EnvironmentEC2RepositoryArgs struct {
	PathComponent pulumi.StringInput `pulumi:"pathComponent"`
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
}

func (EnvironmentEC2RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentEC2Repository)(nil)).Elem()
}

func (i EnvironmentEC2RepositoryArgs) ToEnvironmentEC2RepositoryOutput() EnvironmentEC2RepositoryOutput {
	return i.ToEnvironmentEC2RepositoryOutputWithContext(context.Background())
}

func (i EnvironmentEC2RepositoryArgs) ToEnvironmentEC2RepositoryOutputWithContext(ctx context.Context) EnvironmentEC2RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEC2RepositoryOutput)
}

// EnvironmentEC2RepositoryArrayInput is an input type that accepts EnvironmentEC2RepositoryArray and EnvironmentEC2RepositoryArrayOutput values.
// You can construct a concrete instance of `EnvironmentEC2RepositoryArrayInput` via:
//
//          EnvironmentEC2RepositoryArray{ EnvironmentEC2RepositoryArgs{...} }
type EnvironmentEC2RepositoryArrayInput interface {
	pulumi.Input

	ToEnvironmentEC2RepositoryArrayOutput() EnvironmentEC2RepositoryArrayOutput
	ToEnvironmentEC2RepositoryArrayOutputWithContext(context.Context) EnvironmentEC2RepositoryArrayOutput
}

type EnvironmentEC2RepositoryArray []EnvironmentEC2RepositoryInput

func (EnvironmentEC2RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentEC2Repository)(nil)).Elem()
}

func (i EnvironmentEC2RepositoryArray) ToEnvironmentEC2RepositoryArrayOutput() EnvironmentEC2RepositoryArrayOutput {
	return i.ToEnvironmentEC2RepositoryArrayOutputWithContext(context.Background())
}

func (i EnvironmentEC2RepositoryArray) ToEnvironmentEC2RepositoryArrayOutputWithContext(ctx context.Context) EnvironmentEC2RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEC2RepositoryArrayOutput)
}

type EnvironmentEC2RepositoryOutput struct{ *pulumi.OutputState }

func (EnvironmentEC2RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentEC2Repository)(nil)).Elem()
}

func (o EnvironmentEC2RepositoryOutput) ToEnvironmentEC2RepositoryOutput() EnvironmentEC2RepositoryOutput {
	return o
}

func (o EnvironmentEC2RepositoryOutput) ToEnvironmentEC2RepositoryOutputWithContext(ctx context.Context) EnvironmentEC2RepositoryOutput {
	return o
}

func (o EnvironmentEC2RepositoryOutput) PathComponent() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentEC2Repository) string { return v.PathComponent }).(pulumi.StringOutput)
}

func (o EnvironmentEC2RepositoryOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentEC2Repository) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

type EnvironmentEC2RepositoryArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentEC2RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentEC2Repository)(nil)).Elem()
}

func (o EnvironmentEC2RepositoryArrayOutput) ToEnvironmentEC2RepositoryArrayOutput() EnvironmentEC2RepositoryArrayOutput {
	return o
}

func (o EnvironmentEC2RepositoryArrayOutput) ToEnvironmentEC2RepositoryArrayOutputWithContext(ctx context.Context) EnvironmentEC2RepositoryArrayOutput {
	return o
}

func (o EnvironmentEC2RepositoryArrayOutput) Index(i pulumi.IntInput) EnvironmentEC2RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentEC2Repository {
		return vs[0].([]EnvironmentEC2Repository)[vs[1].(int)]
	}).(EnvironmentEC2RepositoryOutput)
}

type EnvironmentEC2Tag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// EnvironmentEC2TagInput is an input type that accepts EnvironmentEC2TagArgs and EnvironmentEC2TagOutput values.
// You can construct a concrete instance of `EnvironmentEC2TagInput` via:
//
//          EnvironmentEC2TagArgs{...}
type EnvironmentEC2TagInput interface {
	pulumi.Input

	ToEnvironmentEC2TagOutput() EnvironmentEC2TagOutput
	ToEnvironmentEC2TagOutputWithContext(context.Context) EnvironmentEC2TagOutput
}

type EnvironmentEC2TagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (EnvironmentEC2TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentEC2Tag)(nil)).Elem()
}

func (i EnvironmentEC2TagArgs) ToEnvironmentEC2TagOutput() EnvironmentEC2TagOutput {
	return i.ToEnvironmentEC2TagOutputWithContext(context.Background())
}

func (i EnvironmentEC2TagArgs) ToEnvironmentEC2TagOutputWithContext(ctx context.Context) EnvironmentEC2TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEC2TagOutput)
}

// EnvironmentEC2TagArrayInput is an input type that accepts EnvironmentEC2TagArray and EnvironmentEC2TagArrayOutput values.
// You can construct a concrete instance of `EnvironmentEC2TagArrayInput` via:
//
//          EnvironmentEC2TagArray{ EnvironmentEC2TagArgs{...} }
type EnvironmentEC2TagArrayInput interface {
	pulumi.Input

	ToEnvironmentEC2TagArrayOutput() EnvironmentEC2TagArrayOutput
	ToEnvironmentEC2TagArrayOutputWithContext(context.Context) EnvironmentEC2TagArrayOutput
}

type EnvironmentEC2TagArray []EnvironmentEC2TagInput

func (EnvironmentEC2TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentEC2Tag)(nil)).Elem()
}

func (i EnvironmentEC2TagArray) ToEnvironmentEC2TagArrayOutput() EnvironmentEC2TagArrayOutput {
	return i.ToEnvironmentEC2TagArrayOutputWithContext(context.Background())
}

func (i EnvironmentEC2TagArray) ToEnvironmentEC2TagArrayOutputWithContext(ctx context.Context) EnvironmentEC2TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEC2TagArrayOutput)
}

type EnvironmentEC2TagOutput struct{ *pulumi.OutputState }

func (EnvironmentEC2TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentEC2Tag)(nil)).Elem()
}

func (o EnvironmentEC2TagOutput) ToEnvironmentEC2TagOutput() EnvironmentEC2TagOutput {
	return o
}

func (o EnvironmentEC2TagOutput) ToEnvironmentEC2TagOutputWithContext(ctx context.Context) EnvironmentEC2TagOutput {
	return o
}

func (o EnvironmentEC2TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentEC2Tag) string { return v.Key }).(pulumi.StringOutput)
}

func (o EnvironmentEC2TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentEC2Tag) string { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentEC2TagArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentEC2TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentEC2Tag)(nil)).Elem()
}

func (o EnvironmentEC2TagArrayOutput) ToEnvironmentEC2TagArrayOutput() EnvironmentEC2TagArrayOutput {
	return o
}

func (o EnvironmentEC2TagArrayOutput) ToEnvironmentEC2TagArrayOutputWithContext(ctx context.Context) EnvironmentEC2TagArrayOutput {
	return o
}

func (o EnvironmentEC2TagArrayOutput) Index(i pulumi.IntInput) EnvironmentEC2TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentEC2Tag {
		return vs[0].([]EnvironmentEC2Tag)[vs[1].(int)]
	}).(EnvironmentEC2TagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEC2RepositoryInput)(nil)).Elem(), EnvironmentEC2RepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEC2RepositoryArrayInput)(nil)).Elem(), EnvironmentEC2RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEC2TagInput)(nil)).Elem(), EnvironmentEC2TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEC2TagArrayInput)(nil)).Elem(), EnvironmentEC2TagArray{})
	pulumi.RegisterOutputType(EnvironmentEC2RepositoryOutput{})
	pulumi.RegisterOutputType(EnvironmentEC2RepositoryArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentEC2TagOutput{})
	pulumi.RegisterOutputType(EnvironmentEC2TagArrayOutput{})
}
