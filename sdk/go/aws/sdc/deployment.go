// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AMZN::SDC::Deployment
//
// Deprecated: Deployment is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Deployment struct {
	pulumi.CustomResourceState

	ConfigName           pulumi.StringOutput    `pulumi:"configName"`
	Dimension            pulumi.StringOutput    `pulumi:"dimension"`
	PipelineId           pulumi.StringPtrOutput `pulumi:"pipelineId"`
	S3Bucket             pulumi.StringOutput    `pulumi:"s3Bucket"`
	S3Key                pulumi.StringOutput    `pulumi:"s3Key"`
	Stage                pulumi.StringOutput    `pulumi:"stage"`
	TargetRegionOverride pulumi.StringPtrOutput `pulumi:"targetRegionOverride"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigName'")
	}
	if args.Dimension == nil {
		return nil, errors.New("invalid value for required argument 'Dimension'")
	}
	if args.S3Bucket == nil {
		return nil, errors.New("invalid value for required argument 'S3Bucket'")
	}
	if args.S3Key == nil {
		return nil, errors.New("invalid value for required argument 'S3Key'")
	}
	if args.Stage == nil {
		return nil, errors.New("invalid value for required argument 'Stage'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"s3Key",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("aws-native:sdc:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("aws-native:sdc:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
}

type DeploymentState struct {
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	ConfigName           string  `pulumi:"configName"`
	Dimension            string  `pulumi:"dimension"`
	PipelineId           *string `pulumi:"pipelineId"`
	S3Bucket             string  `pulumi:"s3Bucket"`
	S3Key                string  `pulumi:"s3Key"`
	Stage                string  `pulumi:"stage"`
	TargetRegionOverride *string `pulumi:"targetRegionOverride"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	ConfigName           pulumi.StringInput
	Dimension            pulumi.StringInput
	PipelineId           pulumi.StringPtrInput
	S3Bucket             pulumi.StringInput
	S3Key                pulumi.StringInput
	Stage                pulumi.StringInput
	TargetRegionOverride pulumi.StringPtrInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

func (i *Deployment) ToOutput(ctx context.Context) pulumix.Output[*Deployment] {
	return pulumix.Output[*Deployment]{
		OutputState: i.ToDeploymentOutputWithContext(ctx).OutputState,
	}
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[*Deployment] {
	return pulumix.Output[*Deployment]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentOutput) ConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ConfigName }).(pulumi.StringOutput)
}

func (o DeploymentOutput) Dimension() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Dimension }).(pulumi.StringOutput)
}

func (o DeploymentOutput) PipelineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.PipelineId }).(pulumi.StringPtrOutput)
}

func (o DeploymentOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.S3Bucket }).(pulumi.StringOutput)
}

func (o DeploymentOutput) S3Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.S3Key }).(pulumi.StringOutput)
}

func (o DeploymentOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Stage }).(pulumi.StringOutput)
}

func (o DeploymentOutput) TargetRegionOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.TargetRegionOverride }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterOutputType(DeploymentOutput{})
}
