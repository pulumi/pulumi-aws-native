// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::DynamoDB::Table“ resource creates a DDB table. For more information, see [CreateTable](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html) in the *API Reference*.
//
//	You should be aware of the following behaviors when working with DDB tables:
//	 +   CFNlong typically creates DDB tables in parallel. However, if your template includes multiple DDB tables with indexes, you must declare dependencies so that the tables are created sequentially. DDBlong limits the number of tables with secondary indexes that are in the creating state. If you create multiple tables with indexes at the same time, DDB returns an error and the stack operation fails. For an example, see [DynamoDB Table with a DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#aws-resource-dynamodb-table--examples--DynamoDB_Table_with_a_DependsOn_Attribute).
//
//	  Our guidance is to use the latest schema documented for your CFNlong templates. This schema supports the provisioning of all table settings below. When using this schema in your CFNlong templates, please ensure that your Identity and Access Management (IAM) policies are updated with appropriate permissions to allow for the authorization of these setting changes.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/dynamodb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynamodb.NewTable(ctx, "myDynamoDBTable", &dynamodb.TableArgs{
//				AttributeDefinitions: dynamodb.TableAttributeDefinitionArray{
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("Album"),
//						AttributeType: pulumi.String("S"),
//					},
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("Artist"),
//						AttributeType: pulumi.String("S"),
//					},
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("Sales"),
//						AttributeType: pulumi.String("N"),
//					},
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("NumberOfSongs"),
//						AttributeType: pulumi.String("N"),
//					},
//				},
//				KeySchema: pulumi.Any{
//					&dynamodb.TableKeySchemaArgs{
//						AttributeName: pulumi.String("Album"),
//						KeyType:       pulumi.String("HASH"),
//					},
//					&dynamodb.TableKeySchemaArgs{
//						AttributeName: pulumi.String("Artist"),
//						KeyType:       pulumi.String("RANGE"),
//					},
//				},
//				ProvisionedThroughput: &dynamodb.TableProvisionedThroughputArgs{
//					ReadCapacityUnits:  pulumi.Int(5),
//					WriteCapacityUnits: pulumi.Int(5),
//				},
//				TableName: pulumi.String("myTableName"),
//				GlobalSecondaryIndexes: dynamodb.TableGlobalSecondaryIndexArray{
//					&dynamodb.TableGlobalSecondaryIndexArgs{
//						IndexName: pulumi.String("myGSI"),
//						KeySchema: dynamodb.TableKeySchemaArray{
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Sales"),
//								KeyType:       pulumi.String("HASH"),
//							},
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Artist"),
//								KeyType:       pulumi.String("RANGE"),
//							},
//						},
//						Projection: &dynamodb.TableProjectionArgs{
//							NonKeyAttributes: pulumi.StringArray{
//								pulumi.String("Album"),
//								pulumi.String("NumberOfSongs"),
//							},
//							ProjectionType: pulumi.String("INCLUDE"),
//						},
//						ProvisionedThroughput: &dynamodb.TableProvisionedThroughputArgs{
//							ReadCapacityUnits:  pulumi.Int(5),
//							WriteCapacityUnits: pulumi.Int(5),
//						},
//					},
//					&dynamodb.TableGlobalSecondaryIndexArgs{
//						IndexName: pulumi.String("myGSI2"),
//						KeySchema: dynamodb.TableKeySchemaArray{
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("NumberOfSongs"),
//								KeyType:       pulumi.String("HASH"),
//							},
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Sales"),
//								KeyType:       pulumi.String("RANGE"),
//							},
//						},
//						Projection: &dynamodb.TableProjectionArgs{
//							NonKeyAttributes: pulumi.StringArray{
//								pulumi.String("Album"),
//								pulumi.String("Artist"),
//							},
//							ProjectionType: pulumi.String("INCLUDE"),
//						},
//						ProvisionedThroughput: &dynamodb.TableProvisionedThroughputArgs{
//							ReadCapacityUnits:  pulumi.Int(5),
//							WriteCapacityUnits: pulumi.Int(5),
//						},
//					},
//				},
//				LocalSecondaryIndexes: dynamodb.TableLocalSecondaryIndexArray{
//					&dynamodb.TableLocalSecondaryIndexArgs{
//						IndexName: pulumi.String("myLSI"),
//						KeySchema: dynamodb.TableKeySchemaArray{
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Album"),
//								KeyType:       pulumi.String("HASH"),
//							},
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Sales"),
//								KeyType:       pulumi.String("RANGE"),
//							},
//						},
//						Projection: &dynamodb.TableProjectionArgs{
//							NonKeyAttributes: pulumi.StringArray{
//								pulumi.String("Artist"),
//								pulumi.String("NumberOfSongs"),
//							},
//							ProjectionType: pulumi.String("INCLUDE"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/dynamodb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynamodb.NewTable(ctx, "myDynamoDBTable", &dynamodb.TableArgs{
//				AttributeDefinitions: dynamodb.TableAttributeDefinitionArray{
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("Album"),
//						AttributeType: pulumi.String("S"),
//					},
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("Artist"),
//						AttributeType: pulumi.String("S"),
//					},
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("Sales"),
//						AttributeType: pulumi.String("N"),
//					},
//					&dynamodb.TableAttributeDefinitionArgs{
//						AttributeName: pulumi.String("NumberOfSongs"),
//						AttributeType: pulumi.String("N"),
//					},
//				},
//				KeySchema: pulumi.Any{
//					&dynamodb.TableKeySchemaArgs{
//						AttributeName: pulumi.String("Album"),
//						KeyType:       pulumi.String("HASH"),
//					},
//					&dynamodb.TableKeySchemaArgs{
//						AttributeName: pulumi.String("Artist"),
//						KeyType:       pulumi.String("RANGE"),
//					},
//				},
//				ProvisionedThroughput: &dynamodb.TableProvisionedThroughputArgs{
//					ReadCapacityUnits:  pulumi.Int(5),
//					WriteCapacityUnits: pulumi.Int(5),
//				},
//				TableName: pulumi.String("myTableName"),
//				GlobalSecondaryIndexes: dynamodb.TableGlobalSecondaryIndexArray{
//					&dynamodb.TableGlobalSecondaryIndexArgs{
//						IndexName: pulumi.String("myGSI"),
//						KeySchema: dynamodb.TableKeySchemaArray{
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Sales"),
//								KeyType:       pulumi.String("HASH"),
//							},
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Artist"),
//								KeyType:       pulumi.String("RANGE"),
//							},
//						},
//						Projection: &dynamodb.TableProjectionArgs{
//							NonKeyAttributes: pulumi.StringArray{
//								pulumi.String("Album"),
//								pulumi.String("NumberOfSongs"),
//							},
//							ProjectionType: pulumi.String("INCLUDE"),
//						},
//						ProvisionedThroughput: &dynamodb.TableProvisionedThroughputArgs{
//							ReadCapacityUnits:  pulumi.Int(5),
//							WriteCapacityUnits: pulumi.Int(5),
//						},
//					},
//					&dynamodb.TableGlobalSecondaryIndexArgs{
//						IndexName: pulumi.String("myGSI2"),
//						KeySchema: dynamodb.TableKeySchemaArray{
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("NumberOfSongs"),
//								KeyType:       pulumi.String("HASH"),
//							},
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Sales"),
//								KeyType:       pulumi.String("RANGE"),
//							},
//						},
//						Projection: &dynamodb.TableProjectionArgs{
//							NonKeyAttributes: pulumi.StringArray{
//								pulumi.String("Album"),
//								pulumi.String("Artist"),
//							},
//							ProjectionType: pulumi.String("INCLUDE"),
//						},
//						ProvisionedThroughput: &dynamodb.TableProvisionedThroughputArgs{
//							ReadCapacityUnits:  pulumi.Int(5),
//							WriteCapacityUnits: pulumi.Int(5),
//						},
//					},
//				},
//				LocalSecondaryIndexes: dynamodb.TableLocalSecondaryIndexArray{
//					&dynamodb.TableLocalSecondaryIndexArgs{
//						IndexName: pulumi.String("myLSI"),
//						KeySchema: dynamodb.TableKeySchemaArray{
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Album"),
//								KeyType:       pulumi.String("HASH"),
//							},
//							&dynamodb.TableKeySchemaArgs{
//								AttributeName: pulumi.String("Sales"),
//								KeyType:       pulumi.String("RANGE"),
//							},
//						},
//						Projection: &dynamodb.TableProjectionArgs{
//							NonKeyAttributes: pulumi.StringArray{
//								pulumi.String("Artist"),
//								pulumi.String("NumberOfSongs"),
//							},
//							ProjectionType: pulumi.String("INCLUDE"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Table struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the DynamoDB table, such as `arn:aws:dynamodb:us-east-2:123456789012:table/myDynamoDBTable` .
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A list of attributes that describe the key schema for the table and indexes.
	//  This property is required to create a DDB table.
	//  Update requires: [Some interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
	AttributeDefinitions TableAttributeDefinitionArrayOutput `pulumi:"attributeDefinitions"`
	// Specify how you are charged for read and write throughput and how you manage capacity.
	//  Valid values include:
	//   +   ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
	//   +   ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
	//
	//  If not specified, the default is ``PROVISIONED``.
	BillingMode pulumi.StringPtrOutput `pulumi:"billingMode"`
	// The settings used to enable or disable CloudWatch Contributor Insights for the specified table.
	ContributorInsightsSpecification TableContributorInsightsSpecificationPtrOutput `pulumi:"contributorInsightsSpecification"`
	// Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
	DeletionProtectionEnabled pulumi.BoolPtrOutput `pulumi:"deletionProtectionEnabled"`
	// Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.
	//   If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
	//  If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index.
	//  Updates are not supported. The following are exceptions:
	//   +  If you update either the contributor insights specification or the provisioned throughput values of global secondary indexes, you can update the table without interruption.
	//   +  You can delete or add one global secondary index without interruption. If you do both in the same update (for example, by changing the index's logical ID), the update fails.
	GlobalSecondaryIndexes TableGlobalSecondaryIndexArrayOutput `pulumi:"globalSecondaryIndexes"`
	// Specifies the properties of data being imported from the S3 bucket source to the table.
	//   If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission.
	ImportSourceSpecification TableImportSourceSpecificationPtrOutput `pulumi:"importSourceSpecification"`
	// Specifies the attributes that make up the primary key for the table. The attributes in the ``KeySchema`` property must also be defined in the ``AttributeDefinitions`` property.
	KeySchema pulumi.AnyOutput `pulumi:"keySchema"`
	// The Kinesis Data Streams configuration for the specified table.
	KinesisStreamSpecification TableKinesisStreamSpecificationPtrOutput `pulumi:"kinesisStreamSpecification"`
	// Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
	LocalSecondaryIndexes TableLocalSecondaryIndexArrayOutput `pulumi:"localSecondaryIndexes"`
	// Sets the maximum number of read and write units for the specified on-demand table. If you use this property, you must specify ``MaxReadRequestUnits``, ``MaxWriteRequestUnits``, or both.
	OnDemandThroughput TableOnDemandThroughputPtrOutput `pulumi:"onDemandThroughput"`
	// The settings used to enable point in time recovery.
	PointInTimeRecoverySpecification TablePointInTimeRecoverySpecificationPtrOutput `pulumi:"pointInTimeRecoverySpecification"`
	// Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
	//  If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as ``PAY_PER_REQUEST``, you cannot specify this property.
	ProvisionedThroughput TableProvisionedThroughputPtrOutput `pulumi:"provisionedThroughput"`
	// A resource-based policy document that contains permissions to add to the specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
	//  When you attach a resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
	ResourcePolicy TableResourcePolicyPtrOutput `pulumi:"resourcePolicy"`
	// Specifies the settings to enable server-side encryption.
	SseSpecification TableSseSpecificationPtrOutput `pulumi:"sseSpecification"`
	// The ARN of the DynamoDB stream, such as `arn:aws:dynamodb:us-east-1:123456789012:table/testddbstack-myDynamoDBTable-012A1SL7SMP5Q/stream/2015-11-30T20:10:00.000` .
	//
	// > You must specify the `StreamSpecification` property to use this attribute.
	StreamArn pulumi.StringOutput `pulumi:"streamArn"`
	// The settings for the DDB table stream, which capture changes to items stored in the table.
	StreamSpecification TableStreamSpecificationPtrOutput `pulumi:"streamSpecification"`
	// The table class of the new table. Valid values are ``STANDARD`` and ``STANDARD_INFREQUENT_ACCESS``.
	TableClass pulumi.StringPtrOutput `pulumi:"tableClass"`
	// A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the table name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
	//   If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	TableName pulumi.StringPtrOutput `pulumi:"tableName"`
	// An array of key-value pairs to apply to this resource.
	//  For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// Specifies the Time to Live (TTL) settings for the table.
	//   For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
	TimeToLiveSpecification TableTimeToLiveSpecificationPtrOutput `pulumi:"timeToLiveSpecification"`
	// Represents the warm throughput (in read units per second and write units per second) for creating a table.
	WarmThroughput TableWarmThroughputPtrOutput `pulumi:"warmThroughput"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeySchema == nil {
		return nil, errors.New("invalid value for required argument 'KeySchema'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"importSourceSpecification",
		"tableName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("aws-native:dynamodb:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("aws-native:dynamodb:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
}

type TableState struct {
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// A list of attributes that describe the key schema for the table and indexes.
	//  This property is required to create a DDB table.
	//  Update requires: [Some interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
	AttributeDefinitions []TableAttributeDefinition `pulumi:"attributeDefinitions"`
	// Specify how you are charged for read and write throughput and how you manage capacity.
	//  Valid values include:
	//   +   ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
	//   +   ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
	//
	//  If not specified, the default is ``PROVISIONED``.
	BillingMode *string `pulumi:"billingMode"`
	// The settings used to enable or disable CloudWatch Contributor Insights for the specified table.
	ContributorInsightsSpecification *TableContributorInsightsSpecification `pulumi:"contributorInsightsSpecification"`
	// Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
	DeletionProtectionEnabled *bool `pulumi:"deletionProtectionEnabled"`
	// Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.
	//   If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
	//  If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index.
	//  Updates are not supported. The following are exceptions:
	//   +  If you update either the contributor insights specification or the provisioned throughput values of global secondary indexes, you can update the table without interruption.
	//   +  You can delete or add one global secondary index without interruption. If you do both in the same update (for example, by changing the index's logical ID), the update fails.
	GlobalSecondaryIndexes []TableGlobalSecondaryIndex `pulumi:"globalSecondaryIndexes"`
	// Specifies the properties of data being imported from the S3 bucket source to the table.
	//   If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission.
	ImportSourceSpecification *TableImportSourceSpecification `pulumi:"importSourceSpecification"`
	// Specifies the attributes that make up the primary key for the table. The attributes in the ``KeySchema`` property must also be defined in the ``AttributeDefinitions`` property.
	KeySchema interface{} `pulumi:"keySchema"`
	// The Kinesis Data Streams configuration for the specified table.
	KinesisStreamSpecification *TableKinesisStreamSpecification `pulumi:"kinesisStreamSpecification"`
	// Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
	LocalSecondaryIndexes []TableLocalSecondaryIndex `pulumi:"localSecondaryIndexes"`
	// Sets the maximum number of read and write units for the specified on-demand table. If you use this property, you must specify ``MaxReadRequestUnits``, ``MaxWriteRequestUnits``, or both.
	OnDemandThroughput *TableOnDemandThroughput `pulumi:"onDemandThroughput"`
	// The settings used to enable point in time recovery.
	PointInTimeRecoverySpecification *TablePointInTimeRecoverySpecification `pulumi:"pointInTimeRecoverySpecification"`
	// Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
	//  If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as ``PAY_PER_REQUEST``, you cannot specify this property.
	ProvisionedThroughput *TableProvisionedThroughput `pulumi:"provisionedThroughput"`
	// A resource-based policy document that contains permissions to add to the specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
	//  When you attach a resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
	ResourcePolicy *TableResourcePolicy `pulumi:"resourcePolicy"`
	// Specifies the settings to enable server-side encryption.
	SseSpecification *TableSseSpecification `pulumi:"sseSpecification"`
	// The settings for the DDB table stream, which capture changes to items stored in the table.
	StreamSpecification *TableStreamSpecification `pulumi:"streamSpecification"`
	// The table class of the new table. Valid values are ``STANDARD`` and ``STANDARD_INFREQUENT_ACCESS``.
	TableClass *string `pulumi:"tableClass"`
	// A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the table name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
	//   If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	TableName *string `pulumi:"tableName"`
	// An array of key-value pairs to apply to this resource.
	//  For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
	Tags []aws.Tag `pulumi:"tags"`
	// Specifies the Time to Live (TTL) settings for the table.
	//   For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
	TimeToLiveSpecification *TableTimeToLiveSpecification `pulumi:"timeToLiveSpecification"`
	// Represents the warm throughput (in read units per second and write units per second) for creating a table.
	WarmThroughput *TableWarmThroughput `pulumi:"warmThroughput"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// A list of attributes that describe the key schema for the table and indexes.
	//  This property is required to create a DDB table.
	//  Update requires: [Some interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
	AttributeDefinitions TableAttributeDefinitionArrayInput
	// Specify how you are charged for read and write throughput and how you manage capacity.
	//  Valid values include:
	//   +   ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
	//   +   ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
	//
	//  If not specified, the default is ``PROVISIONED``.
	BillingMode pulumi.StringPtrInput
	// The settings used to enable or disable CloudWatch Contributor Insights for the specified table.
	ContributorInsightsSpecification TableContributorInsightsSpecificationPtrInput
	// Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
	DeletionProtectionEnabled pulumi.BoolPtrInput
	// Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.
	//   If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
	//  If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index.
	//  Updates are not supported. The following are exceptions:
	//   +  If you update either the contributor insights specification or the provisioned throughput values of global secondary indexes, you can update the table without interruption.
	//   +  You can delete or add one global secondary index without interruption. If you do both in the same update (for example, by changing the index's logical ID), the update fails.
	GlobalSecondaryIndexes TableGlobalSecondaryIndexArrayInput
	// Specifies the properties of data being imported from the S3 bucket source to the table.
	//   If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission.
	ImportSourceSpecification TableImportSourceSpecificationPtrInput
	// Specifies the attributes that make up the primary key for the table. The attributes in the ``KeySchema`` property must also be defined in the ``AttributeDefinitions`` property.
	KeySchema pulumi.Input
	// The Kinesis Data Streams configuration for the specified table.
	KinesisStreamSpecification TableKinesisStreamSpecificationPtrInput
	// Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
	LocalSecondaryIndexes TableLocalSecondaryIndexArrayInput
	// Sets the maximum number of read and write units for the specified on-demand table. If you use this property, you must specify ``MaxReadRequestUnits``, ``MaxWriteRequestUnits``, or both.
	OnDemandThroughput TableOnDemandThroughputPtrInput
	// The settings used to enable point in time recovery.
	PointInTimeRecoverySpecification TablePointInTimeRecoverySpecificationPtrInput
	// Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
	//  If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as ``PAY_PER_REQUEST``, you cannot specify this property.
	ProvisionedThroughput TableProvisionedThroughputPtrInput
	// A resource-based policy document that contains permissions to add to the specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
	//  When you attach a resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
	ResourcePolicy TableResourcePolicyPtrInput
	// Specifies the settings to enable server-side encryption.
	SseSpecification TableSseSpecificationPtrInput
	// The settings for the DDB table stream, which capture changes to items stored in the table.
	StreamSpecification TableStreamSpecificationPtrInput
	// The table class of the new table. Valid values are ``STANDARD`` and ``STANDARD_INFREQUENT_ACCESS``.
	TableClass pulumi.StringPtrInput
	// A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the table name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
	//   If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
	TableName pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	//  For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
	Tags aws.TagArrayInput
	// Specifies the Time to Live (TTL) settings for the table.
	//   For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
	TimeToLiveSpecification TableTimeToLiveSpecificationPtrInput
	// Represents the warm throughput (in read units per second and write units per second) for creating a table.
	WarmThroughput TableWarmThroughputPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// The Amazon Resource Name (ARN) of the DynamoDB table, such as `arn:aws:dynamodb:us-east-2:123456789012:table/myDynamoDBTable` .
func (o TableOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A list of attributes that describe the key schema for the table and indexes.
//
//	This property is required to create a DDB table.
//	Update requires: [Some interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
func (o TableOutput) AttributeDefinitions() TableAttributeDefinitionArrayOutput {
	return o.ApplyT(func(v *Table) TableAttributeDefinitionArrayOutput { return v.AttributeDefinitions }).(TableAttributeDefinitionArrayOutput)
}

// Specify how you are charged for read and write throughput and how you manage capacity.
//
//	Valid values include:
//	 +   ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
//	 +   ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
//
//	If not specified, the default is ``PROVISIONED``.
func (o TableOutput) BillingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.BillingMode }).(pulumi.StringPtrOutput)
}

// The settings used to enable or disable CloudWatch Contributor Insights for the specified table.
func (o TableOutput) ContributorInsightsSpecification() TableContributorInsightsSpecificationPtrOutput {
	return o.ApplyT(func(v *Table) TableContributorInsightsSpecificationPtrOutput {
		return v.ContributorInsightsSpecification
	}).(TableContributorInsightsSpecificationPtrOutput)
}

// Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
func (o TableOutput) DeletionProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.BoolPtrOutput { return v.DeletionProtectionEnabled }).(pulumi.BoolPtrOutput)
}

// Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.
//
//	 If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
//	If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index.
//	Updates are not supported. The following are exceptions:
//	 +  If you update either the contributor insights specification or the provisioned throughput values of global secondary indexes, you can update the table without interruption.
//	 +  You can delete or add one global secondary index without interruption. If you do both in the same update (for example, by changing the index's logical ID), the update fails.
func (o TableOutput) GlobalSecondaryIndexes() TableGlobalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *Table) TableGlobalSecondaryIndexArrayOutput { return v.GlobalSecondaryIndexes }).(TableGlobalSecondaryIndexArrayOutput)
}

// Specifies the properties of data being imported from the S3 bucket source to the table.
//
//	If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission.
func (o TableOutput) ImportSourceSpecification() TableImportSourceSpecificationPtrOutput {
	return o.ApplyT(func(v *Table) TableImportSourceSpecificationPtrOutput { return v.ImportSourceSpecification }).(TableImportSourceSpecificationPtrOutput)
}

// Specifies the attributes that make up the primary key for the table. The attributes in the “KeySchema“ property must also be defined in the “AttributeDefinitions“ property.
func (o TableOutput) KeySchema() pulumi.AnyOutput {
	return o.ApplyT(func(v *Table) pulumi.AnyOutput { return v.KeySchema }).(pulumi.AnyOutput)
}

// The Kinesis Data Streams configuration for the specified table.
func (o TableOutput) KinesisStreamSpecification() TableKinesisStreamSpecificationPtrOutput {
	return o.ApplyT(func(v *Table) TableKinesisStreamSpecificationPtrOutput { return v.KinesisStreamSpecification }).(TableKinesisStreamSpecificationPtrOutput)
}

// Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
func (o TableOutput) LocalSecondaryIndexes() TableLocalSecondaryIndexArrayOutput {
	return o.ApplyT(func(v *Table) TableLocalSecondaryIndexArrayOutput { return v.LocalSecondaryIndexes }).(TableLocalSecondaryIndexArrayOutput)
}

// Sets the maximum number of read and write units for the specified on-demand table. If you use this property, you must specify “MaxReadRequestUnits“, “MaxWriteRequestUnits“, or both.
func (o TableOutput) OnDemandThroughput() TableOnDemandThroughputPtrOutput {
	return o.ApplyT(func(v *Table) TableOnDemandThroughputPtrOutput { return v.OnDemandThroughput }).(TableOnDemandThroughputPtrOutput)
}

// The settings used to enable point in time recovery.
func (o TableOutput) PointInTimeRecoverySpecification() TablePointInTimeRecoverySpecificationPtrOutput {
	return o.ApplyT(func(v *Table) TablePointInTimeRecoverySpecificationPtrOutput {
		return v.PointInTimeRecoverySpecification
	}).(TablePointInTimeRecoverySpecificationPtrOutput)
}

// Throughput for the specified table, which consists of values for “ReadCapacityUnits“ and “WriteCapacityUnits“. For more information about the contents of a provisioned throughput structure, see [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
//
//	If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as ``PAY_PER_REQUEST``, you cannot specify this property.
func (o TableOutput) ProvisionedThroughput() TableProvisionedThroughputPtrOutput {
	return o.ApplyT(func(v *Table) TableProvisionedThroughputPtrOutput { return v.ProvisionedThroughput }).(TableProvisionedThroughputPtrOutput)
}

// A resource-based policy document that contains permissions to add to the specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
//
//	When you attach a resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
func (o TableOutput) ResourcePolicy() TableResourcePolicyPtrOutput {
	return o.ApplyT(func(v *Table) TableResourcePolicyPtrOutput { return v.ResourcePolicy }).(TableResourcePolicyPtrOutput)
}

// Specifies the settings to enable server-side encryption.
func (o TableOutput) SseSpecification() TableSseSpecificationPtrOutput {
	return o.ApplyT(func(v *Table) TableSseSpecificationPtrOutput { return v.SseSpecification }).(TableSseSpecificationPtrOutput)
}

// The ARN of the DynamoDB stream, such as `arn:aws:dynamodb:us-east-1:123456789012:table/testddbstack-myDynamoDBTable-012A1SL7SMP5Q/stream/2015-11-30T20:10:00.000` .
//
// > You must specify the `StreamSpecification` property to use this attribute.
func (o TableOutput) StreamArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.StreamArn }).(pulumi.StringOutput)
}

// The settings for the DDB table stream, which capture changes to items stored in the table.
func (o TableOutput) StreamSpecification() TableStreamSpecificationPtrOutput {
	return o.ApplyT(func(v *Table) TableStreamSpecificationPtrOutput { return v.StreamSpecification }).(TableStreamSpecificationPtrOutput)
}

// The table class of the new table. Valid values are “STANDARD“ and “STANDARD_INFREQUENT_ACCESS“.
func (o TableOutput) TableClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.TableClass }).(pulumi.StringPtrOutput)
}

// A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the table name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
//
//	If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
func (o TableOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Table) pulumi.StringPtrOutput { return v.TableName }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
//
//	For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
func (o TableOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Table) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// Specifies the Time to Live (TTL) settings for the table.
//
//	For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
func (o TableOutput) TimeToLiveSpecification() TableTimeToLiveSpecificationPtrOutput {
	return o.ApplyT(func(v *Table) TableTimeToLiveSpecificationPtrOutput { return v.TimeToLiveSpecification }).(TableTimeToLiveSpecificationPtrOutput)
}

// Represents the warm throughput (in read units per second and write units per second) for creating a table.
func (o TableOutput) WarmThroughput() TableWarmThroughputPtrOutput {
	return o.ApplyT(func(v *Table) TableWarmThroughputPtrOutput { return v.WarmThroughput }).(TableWarmThroughputPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterOutputType(TableOutput{})
}
