// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package personalize

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema for AWS::Personalize::DatasetGroup.
type DatasetGroup struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the dataset group.
	DatasetGroupArn pulumi.StringOutput `pulumi:"datasetGroupArn"`
	// The domain of a Domain dataset group.
	Domain DatasetGroupDomainPtrOutput `pulumi:"domain"`
	// The Amazon Resource Name(ARN) of a AWS Key Management Service (KMS) key used to encrypt the datasets.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// The name for the new dataset group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ARN of the AWS Identity and Access Management (IAM) role that has permissions to access the AWS Key Management Service (KMS) key. Supplying an IAM role is only valid when also specifying a KMS key.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
}

// NewDatasetGroup registers a new resource with the given unique name, arguments, and options.
func NewDatasetGroup(ctx *pulumi.Context,
	name string, args *DatasetGroupArgs, opts ...pulumi.ResourceOption) (*DatasetGroup, error) {
	if args == nil {
		args = &DatasetGroupArgs{}
	}

	var resource DatasetGroup
	err := ctx.RegisterResource("aws-native:personalize:DatasetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetGroup gets an existing DatasetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetGroupState, opts ...pulumi.ResourceOption) (*DatasetGroup, error) {
	var resource DatasetGroup
	err := ctx.ReadResource("aws-native:personalize:DatasetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetGroup resources.
type datasetGroupState struct {
}

type DatasetGroupState struct {
}

func (DatasetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetGroupState)(nil)).Elem()
}

type datasetGroupArgs struct {
	// The domain of a Domain dataset group.
	Domain *DatasetGroupDomain `pulumi:"domain"`
	// The Amazon Resource Name(ARN) of a AWS Key Management Service (KMS) key used to encrypt the datasets.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The name for the new dataset group.
	Name *string `pulumi:"name"`
	// The ARN of the AWS Identity and Access Management (IAM) role that has permissions to access the AWS Key Management Service (KMS) key. Supplying an IAM role is only valid when also specifying a KMS key.
	RoleArn *string `pulumi:"roleArn"`
}

// The set of arguments for constructing a DatasetGroup resource.
type DatasetGroupArgs struct {
	// The domain of a Domain dataset group.
	Domain DatasetGroupDomainPtrInput
	// The Amazon Resource Name(ARN) of a AWS Key Management Service (KMS) key used to encrypt the datasets.
	KmsKeyArn pulumi.StringPtrInput
	// The name for the new dataset group.
	Name pulumi.StringPtrInput
	// The ARN of the AWS Identity and Access Management (IAM) role that has permissions to access the AWS Key Management Service (KMS) key. Supplying an IAM role is only valid when also specifying a KMS key.
	RoleArn pulumi.StringPtrInput
}

func (DatasetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetGroupArgs)(nil)).Elem()
}

type DatasetGroupInput interface {
	pulumi.Input

	ToDatasetGroupOutput() DatasetGroupOutput
	ToDatasetGroupOutputWithContext(ctx context.Context) DatasetGroupOutput
}

func (*DatasetGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetGroup)(nil)).Elem()
}

func (i *DatasetGroup) ToDatasetGroupOutput() DatasetGroupOutput {
	return i.ToDatasetGroupOutputWithContext(context.Background())
}

func (i *DatasetGroup) ToDatasetGroupOutputWithContext(ctx context.Context) DatasetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetGroupOutput)
}

type DatasetGroupOutput struct{ *pulumi.OutputState }

func (DatasetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetGroup)(nil)).Elem()
}

func (o DatasetGroupOutput) ToDatasetGroupOutput() DatasetGroupOutput {
	return o
}

func (o DatasetGroupOutput) ToDatasetGroupOutputWithContext(ctx context.Context) DatasetGroupOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetGroupInput)(nil)).Elem(), &DatasetGroup{})
	pulumi.RegisterOutputType(DatasetGroupOutput{})
}
