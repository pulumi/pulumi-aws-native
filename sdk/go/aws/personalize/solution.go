// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package personalize

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Personalize::Solution.
type Solution struct {
	pulumi.CustomResourceState

	// The ARN of the dataset group that provides the training data.
	DatasetGroupArn pulumi.StringOutput `pulumi:"datasetGroupArn"`
	// When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
	EventType pulumi.StringPtrOutput `pulumi:"eventType"`
	// The name for the solution
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
	PerformAutoML pulumi.BoolPtrOutput `pulumi:"performAutoML"`
	// Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
	PerformHPO pulumi.BoolPtrOutput `pulumi:"performHPO"`
	// The ARN of the recipe to use for model training. Only specified when performAutoML is false.
	RecipeArn      pulumi.StringPtrOutput  `pulumi:"recipeArn"`
	SolutionArn    pulumi.StringOutput     `pulumi:"solutionArn"`
	SolutionConfig SolutionConfigPtrOutput `pulumi:"solutionConfig"`
}

// NewSolution registers a new resource with the given unique name, arguments, and options.
func NewSolution(ctx *pulumi.Context,
	name string, args *SolutionArgs, opts ...pulumi.ResourceOption) (*Solution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetGroupArn == nil {
		return nil, errors.New("invalid value for required argument 'DatasetGroupArn'")
	}
	var resource Solution
	err := ctx.RegisterResource("aws-native:personalize:Solution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolution gets an existing Solution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionState, opts ...pulumi.ResourceOption) (*Solution, error) {
	var resource Solution
	err := ctx.ReadResource("aws-native:personalize:Solution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Solution resources.
type solutionState struct {
}

type SolutionState struct {
}

func (SolutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionState)(nil)).Elem()
}

type solutionArgs struct {
	// The ARN of the dataset group that provides the training data.
	DatasetGroupArn string `pulumi:"datasetGroupArn"`
	// When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
	EventType *string `pulumi:"eventType"`
	// The name for the solution
	Name *string `pulumi:"name"`
	// Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
	PerformAutoML *bool `pulumi:"performAutoML"`
	// Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
	PerformHPO *bool `pulumi:"performHPO"`
	// The ARN of the recipe to use for model training. Only specified when performAutoML is false.
	RecipeArn      *string         `pulumi:"recipeArn"`
	SolutionConfig *SolutionConfig `pulumi:"solutionConfig"`
}

// The set of arguments for constructing a Solution resource.
type SolutionArgs struct {
	// The ARN of the dataset group that provides the training data.
	DatasetGroupArn pulumi.StringInput
	// When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
	EventType pulumi.StringPtrInput
	// The name for the solution
	Name pulumi.StringPtrInput
	// Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
	PerformAutoML pulumi.BoolPtrInput
	// Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
	PerformHPO pulumi.BoolPtrInput
	// The ARN of the recipe to use for model training. Only specified when performAutoML is false.
	RecipeArn      pulumi.StringPtrInput
	SolutionConfig SolutionConfigPtrInput
}

func (SolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionArgs)(nil)).Elem()
}

type SolutionInput interface {
	pulumi.Input

	ToSolutionOutput() SolutionOutput
	ToSolutionOutputWithContext(ctx context.Context) SolutionOutput
}

func (*Solution) ElementType() reflect.Type {
	return reflect.TypeOf((**Solution)(nil)).Elem()
}

func (i *Solution) ToSolutionOutput() SolutionOutput {
	return i.ToSolutionOutputWithContext(context.Background())
}

func (i *Solution) ToSolutionOutputWithContext(ctx context.Context) SolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionOutput)
}

type SolutionOutput struct{ *pulumi.OutputState }

func (SolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Solution)(nil)).Elem()
}

func (o SolutionOutput) ToSolutionOutput() SolutionOutput {
	return o
}

func (o SolutionOutput) ToSolutionOutputWithContext(ctx context.Context) SolutionOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionInput)(nil)).Elem(), &Solution{})
	pulumi.RegisterOutputType(SolutionOutput{})
}
