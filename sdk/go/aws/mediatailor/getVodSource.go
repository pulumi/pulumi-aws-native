// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediatailor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaTailor::VodSource Resource Type
func LookupVodSource(ctx *pulumi.Context, args *LookupVodSourceArgs, opts ...pulumi.InvokeOption) (*LookupVodSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVodSourceResult
	err := ctx.Invoke("aws-native:mediatailor:getVodSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVodSourceArgs struct {
	// The name of the source location that the VOD source is associated with.
	SourceLocationName string `pulumi:"sourceLocationName"`
	// The name of the VOD source.
	VodSourceName string `pulumi:"vodSourceName"`
}

type LookupVodSourceResult struct {
	// <p>The ARN of the VOD source.</p>
	Arn *string `pulumi:"arn"`
	// <p>A list of HTTP package configuration parameters for this VOD source.</p>
	HttpPackageConfigurations []VodSourceHttpPackageConfiguration `pulumi:"httpPackageConfigurations"`
	// The tags to assign to the VOD source.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupVodSourceOutput(ctx *pulumi.Context, args LookupVodSourceOutputArgs, opts ...pulumi.InvokeOption) LookupVodSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVodSourceResultOutput, error) {
			args := v.(LookupVodSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:mediatailor:getVodSource", args, LookupVodSourceResultOutput{}, options).(LookupVodSourceResultOutput), nil
		}).(LookupVodSourceResultOutput)
}

type LookupVodSourceOutputArgs struct {
	// The name of the source location that the VOD source is associated with.
	SourceLocationName pulumi.StringInput `pulumi:"sourceLocationName"`
	// The name of the VOD source.
	VodSourceName pulumi.StringInput `pulumi:"vodSourceName"`
}

func (LookupVodSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVodSourceArgs)(nil)).Elem()
}

type LookupVodSourceResultOutput struct{ *pulumi.OutputState }

func (LookupVodSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVodSourceResult)(nil)).Elem()
}

func (o LookupVodSourceResultOutput) ToLookupVodSourceResultOutput() LookupVodSourceResultOutput {
	return o
}

func (o LookupVodSourceResultOutput) ToLookupVodSourceResultOutputWithContext(ctx context.Context) LookupVodSourceResultOutput {
	return o
}

// <p>The ARN of the VOD source.</p>
func (o LookupVodSourceResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVodSourceResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// <p>A list of HTTP package configuration parameters for this VOD source.</p>
func (o LookupVodSourceResultOutput) HttpPackageConfigurations() VodSourceHttpPackageConfigurationArrayOutput {
	return o.ApplyT(func(v LookupVodSourceResult) []VodSourceHttpPackageConfiguration { return v.HttpPackageConfigurations }).(VodSourceHttpPackageConfigurationArrayOutput)
}

// The tags to assign to the VOD source.
func (o LookupVodSourceResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupVodSourceResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVodSourceResultOutput{})
}
