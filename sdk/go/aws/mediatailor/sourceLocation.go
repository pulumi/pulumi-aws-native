// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediatailor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::MediaTailor::SourceLocation Resource Type
type SourceLocation struct {
	pulumi.CustomResourceState

	AccessConfiguration SourceLocationAccessConfigurationPtrOutput `pulumi:"accessConfiguration"`
	// <p>The ARN of the source location.</p>
	Arn                                 pulumi.StringOutput                                        `pulumi:"arn"`
	DefaultSegmentDeliveryConfiguration SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput `pulumi:"defaultSegmentDeliveryConfiguration"`
	HttpConfiguration                   SourceLocationHttpConfigurationOutput                      `pulumi:"httpConfiguration"`
	// <p>A list of the segment delivery configurations associated with this resource.</p>
	SegmentDeliveryConfigurations SourceLocationSegmentDeliveryConfigurationArrayOutput `pulumi:"segmentDeliveryConfigurations"`
	SourceLocationName            pulumi.StringOutput                                   `pulumi:"sourceLocationName"`
	// The tags to assign to the source location.
	Tags SourceLocationTagArrayOutput `pulumi:"tags"`
}

// NewSourceLocation registers a new resource with the given unique name, arguments, and options.
func NewSourceLocation(ctx *pulumi.Context,
	name string, args *SourceLocationArgs, opts ...pulumi.ResourceOption) (*SourceLocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'HttpConfiguration'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"sourceLocationName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceLocation
	err := ctx.RegisterResource("aws-native:mediatailor:SourceLocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceLocation gets an existing SourceLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceLocationState, opts ...pulumi.ResourceOption) (*SourceLocation, error) {
	var resource SourceLocation
	err := ctx.ReadResource("aws-native:mediatailor:SourceLocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceLocation resources.
type sourceLocationState struct {
}

type SourceLocationState struct {
}

func (SourceLocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLocationState)(nil)).Elem()
}

type sourceLocationArgs struct {
	AccessConfiguration                 *SourceLocationAccessConfiguration                 `pulumi:"accessConfiguration"`
	DefaultSegmentDeliveryConfiguration *SourceLocationDefaultSegmentDeliveryConfiguration `pulumi:"defaultSegmentDeliveryConfiguration"`
	HttpConfiguration                   SourceLocationHttpConfiguration                    `pulumi:"httpConfiguration"`
	// <p>A list of the segment delivery configurations associated with this resource.</p>
	SegmentDeliveryConfigurations []SourceLocationSegmentDeliveryConfiguration `pulumi:"segmentDeliveryConfigurations"`
	SourceLocationName            *string                                      `pulumi:"sourceLocationName"`
	// The tags to assign to the source location.
	Tags []SourceLocationTag `pulumi:"tags"`
}

// The set of arguments for constructing a SourceLocation resource.
type SourceLocationArgs struct {
	AccessConfiguration                 SourceLocationAccessConfigurationPtrInput
	DefaultSegmentDeliveryConfiguration SourceLocationDefaultSegmentDeliveryConfigurationPtrInput
	HttpConfiguration                   SourceLocationHttpConfigurationInput
	// <p>A list of the segment delivery configurations associated with this resource.</p>
	SegmentDeliveryConfigurations SourceLocationSegmentDeliveryConfigurationArrayInput
	SourceLocationName            pulumi.StringPtrInput
	// The tags to assign to the source location.
	Tags SourceLocationTagArrayInput
}

func (SourceLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceLocationArgs)(nil)).Elem()
}

type SourceLocationInput interface {
	pulumi.Input

	ToSourceLocationOutput() SourceLocationOutput
	ToSourceLocationOutputWithContext(ctx context.Context) SourceLocationOutput
}

func (*SourceLocation) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocation)(nil)).Elem()
}

func (i *SourceLocation) ToSourceLocationOutput() SourceLocationOutput {
	return i.ToSourceLocationOutputWithContext(context.Background())
}

func (i *SourceLocation) ToSourceLocationOutputWithContext(ctx context.Context) SourceLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationOutput)
}

func (i *SourceLocation) ToOutput(ctx context.Context) pulumix.Output[*SourceLocation] {
	return pulumix.Output[*SourceLocation]{
		OutputState: i.ToSourceLocationOutputWithContext(ctx).OutputState,
	}
}

type SourceLocationOutput struct{ *pulumi.OutputState }

func (SourceLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocation)(nil)).Elem()
}

func (o SourceLocationOutput) ToSourceLocationOutput() SourceLocationOutput {
	return o
}

func (o SourceLocationOutput) ToSourceLocationOutputWithContext(ctx context.Context) SourceLocationOutput {
	return o
}

func (o SourceLocationOutput) ToOutput(ctx context.Context) pulumix.Output[*SourceLocation] {
	return pulumix.Output[*SourceLocation]{
		OutputState: o.OutputState,
	}
}

func (o SourceLocationOutput) AccessConfiguration() SourceLocationAccessConfigurationPtrOutput {
	return o.ApplyT(func(v *SourceLocation) SourceLocationAccessConfigurationPtrOutput { return v.AccessConfiguration }).(SourceLocationAccessConfigurationPtrOutput)
}

// <p>The ARN of the source location.</p>
func (o SourceLocationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLocation) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o SourceLocationOutput) DefaultSegmentDeliveryConfiguration() SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return o.ApplyT(func(v *SourceLocation) SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
		return v.DefaultSegmentDeliveryConfiguration
	}).(SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput)
}

func (o SourceLocationOutput) HttpConfiguration() SourceLocationHttpConfigurationOutput {
	return o.ApplyT(func(v *SourceLocation) SourceLocationHttpConfigurationOutput { return v.HttpConfiguration }).(SourceLocationHttpConfigurationOutput)
}

// <p>A list of the segment delivery configurations associated with this resource.</p>
func (o SourceLocationOutput) SegmentDeliveryConfigurations() SourceLocationSegmentDeliveryConfigurationArrayOutput {
	return o.ApplyT(func(v *SourceLocation) SourceLocationSegmentDeliveryConfigurationArrayOutput {
		return v.SegmentDeliveryConfigurations
	}).(SourceLocationSegmentDeliveryConfigurationArrayOutput)
}

func (o SourceLocationOutput) SourceLocationName() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceLocation) pulumi.StringOutput { return v.SourceLocationName }).(pulumi.StringOutput)
}

// The tags to assign to the source location.
func (o SourceLocationOutput) Tags() SourceLocationTagArrayOutput {
	return o.ApplyT(func(v *SourceLocation) SourceLocationTagArrayOutput { return v.Tags }).(SourceLocationTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationInput)(nil)).Elem(), &SourceLocation{})
	pulumi.RegisterOutputType(SourceLocationOutput{})
}
