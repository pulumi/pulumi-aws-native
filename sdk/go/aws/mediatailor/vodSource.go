// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediatailor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaTailor::VodSource Resource Type
type VodSource struct {
	pulumi.CustomResourceState

	// <p>The ARN of the VOD source.</p>
	Arn pulumi.StringOutput `pulumi:"arn"`
	// <p>A list of HTTP package configuration parameters for this VOD source.</p>
	HttpPackageConfigurations VodSourceHttpPackageConfigurationArrayOutput `pulumi:"httpPackageConfigurations"`
	SourceLocationName        pulumi.StringOutput                          `pulumi:"sourceLocationName"`
	// The tags to assign to the VOD source.
	Tags          VodSourceTagArrayOutput `pulumi:"tags"`
	VodSourceName pulumi.StringOutput     `pulumi:"vodSourceName"`
}

// NewVodSource registers a new resource with the given unique name, arguments, and options.
func NewVodSource(ctx *pulumi.Context,
	name string, args *VodSourceArgs, opts ...pulumi.ResourceOption) (*VodSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpPackageConfigurations == nil {
		return nil, errors.New("invalid value for required argument 'HttpPackageConfigurations'")
	}
	if args.SourceLocationName == nil {
		return nil, errors.New("invalid value for required argument 'SourceLocationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VodSource
	err := ctx.RegisterResource("aws-native:mediatailor:VodSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVodSource gets an existing VodSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVodSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VodSourceState, opts ...pulumi.ResourceOption) (*VodSource, error) {
	var resource VodSource
	err := ctx.ReadResource("aws-native:mediatailor:VodSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VodSource resources.
type vodSourceState struct {
}

type VodSourceState struct {
}

func (VodSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vodSourceState)(nil)).Elem()
}

type vodSourceArgs struct {
	// <p>A list of HTTP package configuration parameters for this VOD source.</p>
	HttpPackageConfigurations []VodSourceHttpPackageConfiguration `pulumi:"httpPackageConfigurations"`
	SourceLocationName        string                              `pulumi:"sourceLocationName"`
	// The tags to assign to the VOD source.
	Tags          []VodSourceTag `pulumi:"tags"`
	VodSourceName *string        `pulumi:"vodSourceName"`
}

// The set of arguments for constructing a VodSource resource.
type VodSourceArgs struct {
	// <p>A list of HTTP package configuration parameters for this VOD source.</p>
	HttpPackageConfigurations VodSourceHttpPackageConfigurationArrayInput
	SourceLocationName        pulumi.StringInput
	// The tags to assign to the VOD source.
	Tags          VodSourceTagArrayInput
	VodSourceName pulumi.StringPtrInput
}

func (VodSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vodSourceArgs)(nil)).Elem()
}

type VodSourceInput interface {
	pulumi.Input

	ToVodSourceOutput() VodSourceOutput
	ToVodSourceOutputWithContext(ctx context.Context) VodSourceOutput
}

func (*VodSource) ElementType() reflect.Type {
	return reflect.TypeOf((**VodSource)(nil)).Elem()
}

func (i *VodSource) ToVodSourceOutput() VodSourceOutput {
	return i.ToVodSourceOutputWithContext(context.Background())
}

func (i *VodSource) ToVodSourceOutputWithContext(ctx context.Context) VodSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VodSourceOutput)
}

type VodSourceOutput struct{ *pulumi.OutputState }

func (VodSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VodSource)(nil)).Elem()
}

func (o VodSourceOutput) ToVodSourceOutput() VodSourceOutput {
	return o
}

func (o VodSourceOutput) ToVodSourceOutputWithContext(ctx context.Context) VodSourceOutput {
	return o
}

// <p>The ARN of the VOD source.</p>
func (o VodSourceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VodSource) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// <p>A list of HTTP package configuration parameters for this VOD source.</p>
func (o VodSourceOutput) HttpPackageConfigurations() VodSourceHttpPackageConfigurationArrayOutput {
	return o.ApplyT(func(v *VodSource) VodSourceHttpPackageConfigurationArrayOutput { return v.HttpPackageConfigurations }).(VodSourceHttpPackageConfigurationArrayOutput)
}

func (o VodSourceOutput) SourceLocationName() pulumi.StringOutput {
	return o.ApplyT(func(v *VodSource) pulumi.StringOutput { return v.SourceLocationName }).(pulumi.StringOutput)
}

// The tags to assign to the VOD source.
func (o VodSourceOutput) Tags() VodSourceTagArrayOutput {
	return o.ApplyT(func(v *VodSource) VodSourceTagArrayOutput { return v.Tags }).(VodSourceTagArrayOutput)
}

func (o VodSourceOutput) VodSourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VodSource) pulumi.StringOutput { return v.VodSourceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VodSourceInput)(nil)).Elem(), &VodSource{})
	pulumi.RegisterOutputType(VodSourceOutput{})
}
