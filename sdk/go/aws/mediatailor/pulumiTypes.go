// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediatailor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
type PlaybackConfigurationAdMarkerPassthrough struct {
	// Enables ad marker passthrough for your configuration.
	Enabled *bool `pulumi:"enabled"`
}

// PlaybackConfigurationAdMarkerPassthroughInput is an input type that accepts PlaybackConfigurationAdMarkerPassthroughArgs and PlaybackConfigurationAdMarkerPassthroughOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAdMarkerPassthroughInput` via:
//
//          PlaybackConfigurationAdMarkerPassthroughArgs{...}
type PlaybackConfigurationAdMarkerPassthroughInput interface {
	pulumi.Input

	ToPlaybackConfigurationAdMarkerPassthroughOutput() PlaybackConfigurationAdMarkerPassthroughOutput
	ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(context.Context) PlaybackConfigurationAdMarkerPassthroughOutput
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
type PlaybackConfigurationAdMarkerPassthroughArgs struct {
	// Enables ad marker passthrough for your configuration.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (PlaybackConfigurationAdMarkerPassthroughArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughOutput() PlaybackConfigurationAdMarkerPassthroughOutput {
	return i.ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAdMarkerPassthroughOutput)
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return i.ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAdMarkerPassthroughOutput).ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx)
}

// PlaybackConfigurationAdMarkerPassthroughPtrInput is an input type that accepts PlaybackConfigurationAdMarkerPassthroughArgs, PlaybackConfigurationAdMarkerPassthroughPtr and PlaybackConfigurationAdMarkerPassthroughPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAdMarkerPassthroughPtrInput` via:
//
//          PlaybackConfigurationAdMarkerPassthroughArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationAdMarkerPassthroughPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput
	ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput
}

type playbackConfigurationAdMarkerPassthroughPtrType PlaybackConfigurationAdMarkerPassthroughArgs

func PlaybackConfigurationAdMarkerPassthroughPtr(v *PlaybackConfigurationAdMarkerPassthroughArgs) PlaybackConfigurationAdMarkerPassthroughPtrInput {
	return (*playbackConfigurationAdMarkerPassthroughPtrType)(v)
}

func (*playbackConfigurationAdMarkerPassthroughPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (i *playbackConfigurationAdMarkerPassthroughPtrType) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return i.ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationAdMarkerPassthroughPtrType) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
type PlaybackConfigurationAdMarkerPassthroughOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAdMarkerPassthroughOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughOutput() PlaybackConfigurationAdMarkerPassthroughOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationAdMarkerPassthrough) *PlaybackConfigurationAdMarkerPassthrough {
		return &v
	}).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

// Enables ad marker passthrough for your configuration.
func (o PlaybackConfigurationAdMarkerPassthroughOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationAdMarkerPassthrough) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type PlaybackConfigurationAdMarkerPassthroughPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAdMarkerPassthroughPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) Elem() PlaybackConfigurationAdMarkerPassthroughOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAdMarkerPassthrough) PlaybackConfigurationAdMarkerPassthrough {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationAdMarkerPassthrough
		return ret
	}).(PlaybackConfigurationAdMarkerPassthroughOutput)
}

// Enables ad marker passthrough for your configuration.
func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAdMarkerPassthrough) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
type PlaybackConfigurationAvailSuppression struct {
	// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
	Mode *PlaybackConfigurationAvailSuppressionMode `pulumi:"mode"`
	// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
	Value *string `pulumi:"value"`
}

// PlaybackConfigurationAvailSuppressionInput is an input type that accepts PlaybackConfigurationAvailSuppressionArgs and PlaybackConfigurationAvailSuppressionOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAvailSuppressionInput` via:
//
//          PlaybackConfigurationAvailSuppressionArgs{...}
type PlaybackConfigurationAvailSuppressionInput interface {
	pulumi.Input

	ToPlaybackConfigurationAvailSuppressionOutput() PlaybackConfigurationAvailSuppressionOutput
	ToPlaybackConfigurationAvailSuppressionOutputWithContext(context.Context) PlaybackConfigurationAvailSuppressionOutput
}

// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
type PlaybackConfigurationAvailSuppressionArgs struct {
	// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
	Mode PlaybackConfigurationAvailSuppressionModePtrInput `pulumi:"mode"`
	// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PlaybackConfigurationAvailSuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionOutput() PlaybackConfigurationAvailSuppressionOutput {
	return i.ToPlaybackConfigurationAvailSuppressionOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAvailSuppressionOutput)
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return i.ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAvailSuppressionOutput).ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx)
}

// PlaybackConfigurationAvailSuppressionPtrInput is an input type that accepts PlaybackConfigurationAvailSuppressionArgs, PlaybackConfigurationAvailSuppressionPtr and PlaybackConfigurationAvailSuppressionPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAvailSuppressionPtrInput` via:
//
//          PlaybackConfigurationAvailSuppressionArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationAvailSuppressionPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput
	ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Context) PlaybackConfigurationAvailSuppressionPtrOutput
}

type playbackConfigurationAvailSuppressionPtrType PlaybackConfigurationAvailSuppressionArgs

func PlaybackConfigurationAvailSuppressionPtr(v *PlaybackConfigurationAvailSuppressionArgs) PlaybackConfigurationAvailSuppressionPtrInput {
	return (*playbackConfigurationAvailSuppressionPtrType)(v)
}

func (*playbackConfigurationAvailSuppressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (i *playbackConfigurationAvailSuppressionPtrType) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return i.ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationAvailSuppressionPtrType) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAvailSuppressionPtrOutput)
}

// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
type PlaybackConfigurationAvailSuppressionOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAvailSuppressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionOutput() PlaybackConfigurationAvailSuppressionOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return o.ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationAvailSuppression) *PlaybackConfigurationAvailSuppression {
		return &v
	}).(PlaybackConfigurationAvailSuppressionPtrOutput)
}

// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
func (o PlaybackConfigurationAvailSuppressionOutput) Mode() PlaybackConfigurationAvailSuppressionModePtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationAvailSuppression) *PlaybackConfigurationAvailSuppressionMode {
		return v.Mode
	}).(PlaybackConfigurationAvailSuppressionModePtrOutput)
}

// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
func (o PlaybackConfigurationAvailSuppressionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationAvailSuppression) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PlaybackConfigurationAvailSuppressionPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAvailSuppressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (o PlaybackConfigurationAvailSuppressionPtrOutput) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionPtrOutput) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionPtrOutput) Elem() PlaybackConfigurationAvailSuppressionOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAvailSuppression) PlaybackConfigurationAvailSuppression {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationAvailSuppression
		return ret
	}).(PlaybackConfigurationAvailSuppressionOutput)
}

// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
func (o PlaybackConfigurationAvailSuppressionPtrOutput) Mode() PlaybackConfigurationAvailSuppressionModePtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAvailSuppression) *PlaybackConfigurationAvailSuppressionMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(PlaybackConfigurationAvailSuppressionModePtrOutput)
}

// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
func (o PlaybackConfigurationAvailSuppressionPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAvailSuppression) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
type PlaybackConfigurationBumper struct {
	// The URL for the end bumper asset.
	EndUrl *string `pulumi:"endUrl"`
	// The URL for the start bumper asset.
	StartUrl *string `pulumi:"startUrl"`
}

// PlaybackConfigurationBumperInput is an input type that accepts PlaybackConfigurationBumperArgs and PlaybackConfigurationBumperOutput values.
// You can construct a concrete instance of `PlaybackConfigurationBumperInput` via:
//
//          PlaybackConfigurationBumperArgs{...}
type PlaybackConfigurationBumperInput interface {
	pulumi.Input

	ToPlaybackConfigurationBumperOutput() PlaybackConfigurationBumperOutput
	ToPlaybackConfigurationBumperOutputWithContext(context.Context) PlaybackConfigurationBumperOutput
}

// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
type PlaybackConfigurationBumperArgs struct {
	// The URL for the end bumper asset.
	EndUrl pulumi.StringPtrInput `pulumi:"endUrl"`
	// The URL for the start bumper asset.
	StartUrl pulumi.StringPtrInput `pulumi:"startUrl"`
}

func (PlaybackConfigurationBumperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationBumper)(nil)).Elem()
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperOutput() PlaybackConfigurationBumperOutput {
	return i.ToPlaybackConfigurationBumperOutputWithContext(context.Background())
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperOutputWithContext(ctx context.Context) PlaybackConfigurationBumperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationBumperOutput)
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return i.ToPlaybackConfigurationBumperPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationBumperOutput).ToPlaybackConfigurationBumperPtrOutputWithContext(ctx)
}

// PlaybackConfigurationBumperPtrInput is an input type that accepts PlaybackConfigurationBumperArgs, PlaybackConfigurationBumperPtr and PlaybackConfigurationBumperPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationBumperPtrInput` via:
//
//          PlaybackConfigurationBumperArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationBumperPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput
	ToPlaybackConfigurationBumperPtrOutputWithContext(context.Context) PlaybackConfigurationBumperPtrOutput
}

type playbackConfigurationBumperPtrType PlaybackConfigurationBumperArgs

func PlaybackConfigurationBumperPtr(v *PlaybackConfigurationBumperArgs) PlaybackConfigurationBumperPtrInput {
	return (*playbackConfigurationBumperPtrType)(v)
}

func (*playbackConfigurationBumperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationBumper)(nil)).Elem()
}

func (i *playbackConfigurationBumperPtrType) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return i.ToPlaybackConfigurationBumperPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationBumperPtrType) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationBumperPtrOutput)
}

// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
type PlaybackConfigurationBumperOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationBumperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationBumper)(nil)).Elem()
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperOutput() PlaybackConfigurationBumperOutput {
	return o
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperOutputWithContext(ctx context.Context) PlaybackConfigurationBumperOutput {
	return o
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return o.ToPlaybackConfigurationBumperPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationBumper) *PlaybackConfigurationBumper {
		return &v
	}).(PlaybackConfigurationBumperPtrOutput)
}

// The URL for the end bumper asset.
func (o PlaybackConfigurationBumperOutput) EndUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationBumper) *string { return v.EndUrl }).(pulumi.StringPtrOutput)
}

// The URL for the start bumper asset.
func (o PlaybackConfigurationBumperOutput) StartUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationBumper) *string { return v.StartUrl }).(pulumi.StringPtrOutput)
}

type PlaybackConfigurationBumperPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationBumperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationBumper)(nil)).Elem()
}

func (o PlaybackConfigurationBumperPtrOutput) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return o
}

func (o PlaybackConfigurationBumperPtrOutput) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return o
}

func (o PlaybackConfigurationBumperPtrOutput) Elem() PlaybackConfigurationBumperOutput {
	return o.ApplyT(func(v *PlaybackConfigurationBumper) PlaybackConfigurationBumper {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationBumper
		return ret
	}).(PlaybackConfigurationBumperOutput)
}

// The URL for the end bumper asset.
func (o PlaybackConfigurationBumperPtrOutput) EndUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationBumper) *string {
		if v == nil {
			return nil
		}
		return v.EndUrl
	}).(pulumi.StringPtrOutput)
}

// The URL for the start bumper asset.
func (o PlaybackConfigurationBumperPtrOutput) StartUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationBumper) *string {
		if v == nil {
			return nil
		}
		return v.StartUrl
	}).(pulumi.StringPtrOutput)
}

// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
type PlaybackConfigurationCdnConfiguration struct {
	// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
	AdSegmentUrlPrefix *string `pulumi:"adSegmentUrlPrefix"`
	// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
	ContentSegmentUrlPrefix *string `pulumi:"contentSegmentUrlPrefix"`
}

// PlaybackConfigurationCdnConfigurationInput is an input type that accepts PlaybackConfigurationCdnConfigurationArgs and PlaybackConfigurationCdnConfigurationOutput values.
// You can construct a concrete instance of `PlaybackConfigurationCdnConfigurationInput` via:
//
//          PlaybackConfigurationCdnConfigurationArgs{...}
type PlaybackConfigurationCdnConfigurationInput interface {
	pulumi.Input

	ToPlaybackConfigurationCdnConfigurationOutput() PlaybackConfigurationCdnConfigurationOutput
	ToPlaybackConfigurationCdnConfigurationOutputWithContext(context.Context) PlaybackConfigurationCdnConfigurationOutput
}

// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
type PlaybackConfigurationCdnConfigurationArgs struct {
	// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
	AdSegmentUrlPrefix pulumi.StringPtrInput `pulumi:"adSegmentUrlPrefix"`
	// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
	ContentSegmentUrlPrefix pulumi.StringPtrInput `pulumi:"contentSegmentUrlPrefix"`
}

func (PlaybackConfigurationCdnConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationOutput() PlaybackConfigurationCdnConfigurationOutput {
	return i.ToPlaybackConfigurationCdnConfigurationOutputWithContext(context.Background())
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationCdnConfigurationOutput)
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return i.ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationCdnConfigurationOutput).ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx)
}

// PlaybackConfigurationCdnConfigurationPtrInput is an input type that accepts PlaybackConfigurationCdnConfigurationArgs, PlaybackConfigurationCdnConfigurationPtr and PlaybackConfigurationCdnConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationCdnConfigurationPtrInput` via:
//
//          PlaybackConfigurationCdnConfigurationArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationCdnConfigurationPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput
	ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Context) PlaybackConfigurationCdnConfigurationPtrOutput
}

type playbackConfigurationCdnConfigurationPtrType PlaybackConfigurationCdnConfigurationArgs

func PlaybackConfigurationCdnConfigurationPtr(v *PlaybackConfigurationCdnConfigurationArgs) PlaybackConfigurationCdnConfigurationPtrInput {
	return (*playbackConfigurationCdnConfigurationPtrType)(v)
}

func (*playbackConfigurationCdnConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (i *playbackConfigurationCdnConfigurationPtrType) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return i.ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationCdnConfigurationPtrType) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationCdnConfigurationPtrOutput)
}

// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
type PlaybackConfigurationCdnConfigurationOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationCdnConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationOutput() PlaybackConfigurationCdnConfigurationOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return o.ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationCdnConfiguration) *PlaybackConfigurationCdnConfiguration {
		return &v
	}).(PlaybackConfigurationCdnConfigurationPtrOutput)
}

// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
func (o PlaybackConfigurationCdnConfigurationOutput) AdSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationCdnConfiguration) *string { return v.AdSegmentUrlPrefix }).(pulumi.StringPtrOutput)
}

// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
func (o PlaybackConfigurationCdnConfigurationOutput) ContentSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationCdnConfiguration) *string { return v.ContentSegmentUrlPrefix }).(pulumi.StringPtrOutput)
}

type PlaybackConfigurationCdnConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationCdnConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationCdnConfigurationPtrOutput) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationPtrOutput) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationPtrOutput) Elem() PlaybackConfigurationCdnConfigurationOutput {
	return o.ApplyT(func(v *PlaybackConfigurationCdnConfiguration) PlaybackConfigurationCdnConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationCdnConfiguration
		return ret
	}).(PlaybackConfigurationCdnConfigurationOutput)
}

// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
func (o PlaybackConfigurationCdnConfigurationPtrOutput) AdSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationCdnConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdSegmentUrlPrefix
	}).(pulumi.StringPtrOutput)
}

// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
func (o PlaybackConfigurationCdnConfigurationPtrOutput) ContentSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationCdnConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ContentSegmentUrlPrefix
	}).(pulumi.StringPtrOutput)
}

// The predefined aliases for dynamic variables.
type PlaybackConfigurationConfigurationAliases struct {
}

// PlaybackConfigurationConfigurationAliasesInput is an input type that accepts PlaybackConfigurationConfigurationAliasesArgs and PlaybackConfigurationConfigurationAliasesOutput values.
// You can construct a concrete instance of `PlaybackConfigurationConfigurationAliasesInput` via:
//
//          PlaybackConfigurationConfigurationAliasesArgs{...}
type PlaybackConfigurationConfigurationAliasesInput interface {
	pulumi.Input

	ToPlaybackConfigurationConfigurationAliasesOutput() PlaybackConfigurationConfigurationAliasesOutput
	ToPlaybackConfigurationConfigurationAliasesOutputWithContext(context.Context) PlaybackConfigurationConfigurationAliasesOutput
}

// The predefined aliases for dynamic variables.
type PlaybackConfigurationConfigurationAliasesArgs struct {
}

func (PlaybackConfigurationConfigurationAliasesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesOutput() PlaybackConfigurationConfigurationAliasesOutput {
	return i.ToPlaybackConfigurationConfigurationAliasesOutputWithContext(context.Background())
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationConfigurationAliasesOutput)
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return i.ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationConfigurationAliasesOutput).ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx)
}

// PlaybackConfigurationConfigurationAliasesPtrInput is an input type that accepts PlaybackConfigurationConfigurationAliasesArgs, PlaybackConfigurationConfigurationAliasesPtr and PlaybackConfigurationConfigurationAliasesPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationConfigurationAliasesPtrInput` via:
//
//          PlaybackConfigurationConfigurationAliasesArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationConfigurationAliasesPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput
	ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput
}

type playbackConfigurationConfigurationAliasesPtrType PlaybackConfigurationConfigurationAliasesArgs

func PlaybackConfigurationConfigurationAliasesPtr(v *PlaybackConfigurationConfigurationAliasesArgs) PlaybackConfigurationConfigurationAliasesPtrInput {
	return (*playbackConfigurationConfigurationAliasesPtrType)(v)
}

func (*playbackConfigurationConfigurationAliasesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (i *playbackConfigurationConfigurationAliasesPtrType) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return i.ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationConfigurationAliasesPtrType) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationConfigurationAliasesPtrOutput)
}

// The predefined aliases for dynamic variables.
type PlaybackConfigurationConfigurationAliasesOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationConfigurationAliasesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesOutput() PlaybackConfigurationConfigurationAliasesOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o.ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationConfigurationAliases) *PlaybackConfigurationConfigurationAliases {
		return &v
	}).(PlaybackConfigurationConfigurationAliasesPtrOutput)
}

type PlaybackConfigurationConfigurationAliasesPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationConfigurationAliasesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (o PlaybackConfigurationConfigurationAliasesPtrOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesPtrOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesPtrOutput) Elem() PlaybackConfigurationConfigurationAliasesOutput {
	return o.ApplyT(func(v *PlaybackConfigurationConfigurationAliases) PlaybackConfigurationConfigurationAliases {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationConfigurationAliases
		return ret
	}).(PlaybackConfigurationConfigurationAliasesOutput)
}

// The configuration for DASH PUT operations.
type PlaybackConfigurationDashConfigurationForPut struct {
	// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
	MpdLocation *string `pulumi:"mpdLocation"`
	// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
	OriginManifestType *PlaybackConfigurationDashConfigurationForPutOriginManifestType `pulumi:"originManifestType"`
}

// PlaybackConfigurationDashConfigurationForPutInput is an input type that accepts PlaybackConfigurationDashConfigurationForPutArgs and PlaybackConfigurationDashConfigurationForPutOutput values.
// You can construct a concrete instance of `PlaybackConfigurationDashConfigurationForPutInput` via:
//
//          PlaybackConfigurationDashConfigurationForPutArgs{...}
type PlaybackConfigurationDashConfigurationForPutInput interface {
	pulumi.Input

	ToPlaybackConfigurationDashConfigurationForPutOutput() PlaybackConfigurationDashConfigurationForPutOutput
	ToPlaybackConfigurationDashConfigurationForPutOutputWithContext(context.Context) PlaybackConfigurationDashConfigurationForPutOutput
}

// The configuration for DASH PUT operations.
type PlaybackConfigurationDashConfigurationForPutArgs struct {
	// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
	MpdLocation pulumi.StringPtrInput `pulumi:"mpdLocation"`
	// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
	OriginManifestType PlaybackConfigurationDashConfigurationForPutOriginManifestTypePtrInput `pulumi:"originManifestType"`
}

func (PlaybackConfigurationDashConfigurationForPutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationDashConfigurationForPut)(nil)).Elem()
}

func (i PlaybackConfigurationDashConfigurationForPutArgs) ToPlaybackConfigurationDashConfigurationForPutOutput() PlaybackConfigurationDashConfigurationForPutOutput {
	return i.ToPlaybackConfigurationDashConfigurationForPutOutputWithContext(context.Background())
}

func (i PlaybackConfigurationDashConfigurationForPutArgs) ToPlaybackConfigurationDashConfigurationForPutOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationForPutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationDashConfigurationForPutOutput)
}

func (i PlaybackConfigurationDashConfigurationForPutArgs) ToPlaybackConfigurationDashConfigurationForPutPtrOutput() PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return i.ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationDashConfigurationForPutArgs) ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationDashConfigurationForPutOutput).ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(ctx)
}

// PlaybackConfigurationDashConfigurationForPutPtrInput is an input type that accepts PlaybackConfigurationDashConfigurationForPutArgs, PlaybackConfigurationDashConfigurationForPutPtr and PlaybackConfigurationDashConfigurationForPutPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationDashConfigurationForPutPtrInput` via:
//
//          PlaybackConfigurationDashConfigurationForPutArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationDashConfigurationForPutPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationDashConfigurationForPutPtrOutput() PlaybackConfigurationDashConfigurationForPutPtrOutput
	ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(context.Context) PlaybackConfigurationDashConfigurationForPutPtrOutput
}

type playbackConfigurationDashConfigurationForPutPtrType PlaybackConfigurationDashConfigurationForPutArgs

func PlaybackConfigurationDashConfigurationForPutPtr(v *PlaybackConfigurationDashConfigurationForPutArgs) PlaybackConfigurationDashConfigurationForPutPtrInput {
	return (*playbackConfigurationDashConfigurationForPutPtrType)(v)
}

func (*playbackConfigurationDashConfigurationForPutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationDashConfigurationForPut)(nil)).Elem()
}

func (i *playbackConfigurationDashConfigurationForPutPtrType) ToPlaybackConfigurationDashConfigurationForPutPtrOutput() PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return i.ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationDashConfigurationForPutPtrType) ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationDashConfigurationForPutPtrOutput)
}

// The configuration for DASH PUT operations.
type PlaybackConfigurationDashConfigurationForPutOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationDashConfigurationForPutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationDashConfigurationForPut)(nil)).Elem()
}

func (o PlaybackConfigurationDashConfigurationForPutOutput) ToPlaybackConfigurationDashConfigurationForPutOutput() PlaybackConfigurationDashConfigurationForPutOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationForPutOutput) ToPlaybackConfigurationDashConfigurationForPutOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationForPutOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationForPutOutput) ToPlaybackConfigurationDashConfigurationForPutPtrOutput() PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return o.ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationDashConfigurationForPutOutput) ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationDashConfigurationForPut) *PlaybackConfigurationDashConfigurationForPut {
		return &v
	}).(PlaybackConfigurationDashConfigurationForPutPtrOutput)
}

// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
func (o PlaybackConfigurationDashConfigurationForPutOutput) MpdLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationDashConfigurationForPut) *string { return v.MpdLocation }).(pulumi.StringPtrOutput)
}

// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
func (o PlaybackConfigurationDashConfigurationForPutOutput) OriginManifestType() PlaybackConfigurationDashConfigurationForPutOriginManifestTypePtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationDashConfigurationForPut) *PlaybackConfigurationDashConfigurationForPutOriginManifestType {
		return v.OriginManifestType
	}).(PlaybackConfigurationDashConfigurationForPutOriginManifestTypePtrOutput)
}

type PlaybackConfigurationDashConfigurationForPutPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationDashConfigurationForPutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationDashConfigurationForPut)(nil)).Elem()
}

func (o PlaybackConfigurationDashConfigurationForPutPtrOutput) ToPlaybackConfigurationDashConfigurationForPutPtrOutput() PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationForPutPtrOutput) ToPlaybackConfigurationDashConfigurationForPutPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationForPutPtrOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationForPutPtrOutput) Elem() PlaybackConfigurationDashConfigurationForPutOutput {
	return o.ApplyT(func(v *PlaybackConfigurationDashConfigurationForPut) PlaybackConfigurationDashConfigurationForPut {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationDashConfigurationForPut
		return ret
	}).(PlaybackConfigurationDashConfigurationForPutOutput)
}

// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
func (o PlaybackConfigurationDashConfigurationForPutPtrOutput) MpdLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationDashConfigurationForPut) *string {
		if v == nil {
			return nil
		}
		return v.MpdLocation
	}).(pulumi.StringPtrOutput)
}

// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
func (o PlaybackConfigurationDashConfigurationForPutPtrOutput) OriginManifestType() PlaybackConfigurationDashConfigurationForPutOriginManifestTypePtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationDashConfigurationForPut) *PlaybackConfigurationDashConfigurationForPutOriginManifestType {
		if v == nil {
			return nil
		}
		return v.OriginManifestType
	}).(PlaybackConfigurationDashConfigurationForPutOriginManifestTypePtrOutput)
}

// The configuration for pre-roll ad insertion.
type PlaybackConfigurationLivePreRollConfiguration struct {
	// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
	AdDecisionServerUrl *string `pulumi:"adDecisionServerUrl"`
	// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
}

// PlaybackConfigurationLivePreRollConfigurationInput is an input type that accepts PlaybackConfigurationLivePreRollConfigurationArgs and PlaybackConfigurationLivePreRollConfigurationOutput values.
// You can construct a concrete instance of `PlaybackConfigurationLivePreRollConfigurationInput` via:
//
//          PlaybackConfigurationLivePreRollConfigurationArgs{...}
type PlaybackConfigurationLivePreRollConfigurationInput interface {
	pulumi.Input

	ToPlaybackConfigurationLivePreRollConfigurationOutput() PlaybackConfigurationLivePreRollConfigurationOutput
	ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(context.Context) PlaybackConfigurationLivePreRollConfigurationOutput
}

// The configuration for pre-roll ad insertion.
type PlaybackConfigurationLivePreRollConfigurationArgs struct {
	// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
	AdDecisionServerUrl pulumi.StringPtrInput `pulumi:"adDecisionServerUrl"`
	// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
	MaxDurationSeconds pulumi.IntPtrInput `pulumi:"maxDurationSeconds"`
}

func (PlaybackConfigurationLivePreRollConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationOutput() PlaybackConfigurationLivePreRollConfigurationOutput {
	return i.ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(context.Background())
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationLivePreRollConfigurationOutput)
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return i.ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationLivePreRollConfigurationOutput).ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx)
}

// PlaybackConfigurationLivePreRollConfigurationPtrInput is an input type that accepts PlaybackConfigurationLivePreRollConfigurationArgs, PlaybackConfigurationLivePreRollConfigurationPtr and PlaybackConfigurationLivePreRollConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationLivePreRollConfigurationPtrInput` via:
//
//          PlaybackConfigurationLivePreRollConfigurationArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationLivePreRollConfigurationPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput
	ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput
}

type playbackConfigurationLivePreRollConfigurationPtrType PlaybackConfigurationLivePreRollConfigurationArgs

func PlaybackConfigurationLivePreRollConfigurationPtr(v *PlaybackConfigurationLivePreRollConfigurationArgs) PlaybackConfigurationLivePreRollConfigurationPtrInput {
	return (*playbackConfigurationLivePreRollConfigurationPtrType)(v)
}

func (*playbackConfigurationLivePreRollConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (i *playbackConfigurationLivePreRollConfigurationPtrType) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return i.ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationLivePreRollConfigurationPtrType) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationLivePreRollConfigurationPtrOutput)
}

// The configuration for pre-roll ad insertion.
type PlaybackConfigurationLivePreRollConfigurationOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationLivePreRollConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationOutput() PlaybackConfigurationLivePreRollConfigurationOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o.ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationLivePreRollConfiguration) *PlaybackConfigurationLivePreRollConfiguration {
		return &v
	}).(PlaybackConfigurationLivePreRollConfigurationPtrOutput)
}

// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
func (o PlaybackConfigurationLivePreRollConfigurationOutput) AdDecisionServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationLivePreRollConfiguration) *string { return v.AdDecisionServerUrl }).(pulumi.StringPtrOutput)
}

// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
func (o PlaybackConfigurationLivePreRollConfigurationOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationLivePreRollConfiguration) *int { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

type PlaybackConfigurationLivePreRollConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationLivePreRollConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) Elem() PlaybackConfigurationLivePreRollConfigurationOutput {
	return o.ApplyT(func(v *PlaybackConfigurationLivePreRollConfiguration) PlaybackConfigurationLivePreRollConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationLivePreRollConfiguration
		return ret
	}).(PlaybackConfigurationLivePreRollConfigurationOutput)
}

// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) AdDecisionServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationLivePreRollConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdDecisionServerUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationLivePreRollConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
type PlaybackConfigurationManifestProcessingRules struct {
	// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
	AdMarkerPassthrough *PlaybackConfigurationAdMarkerPassthrough `pulumi:"adMarkerPassthrough"`
}

// PlaybackConfigurationManifestProcessingRulesInput is an input type that accepts PlaybackConfigurationManifestProcessingRulesArgs and PlaybackConfigurationManifestProcessingRulesOutput values.
// You can construct a concrete instance of `PlaybackConfigurationManifestProcessingRulesInput` via:
//
//          PlaybackConfigurationManifestProcessingRulesArgs{...}
type PlaybackConfigurationManifestProcessingRulesInput interface {
	pulumi.Input

	ToPlaybackConfigurationManifestProcessingRulesOutput() PlaybackConfigurationManifestProcessingRulesOutput
	ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(context.Context) PlaybackConfigurationManifestProcessingRulesOutput
}

// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
type PlaybackConfigurationManifestProcessingRulesArgs struct {
	// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
	AdMarkerPassthrough PlaybackConfigurationAdMarkerPassthroughPtrInput `pulumi:"adMarkerPassthrough"`
}

func (PlaybackConfigurationManifestProcessingRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesOutput() PlaybackConfigurationManifestProcessingRulesOutput {
	return i.ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(context.Background())
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationManifestProcessingRulesOutput)
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return i.ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationManifestProcessingRulesOutput).ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx)
}

// PlaybackConfigurationManifestProcessingRulesPtrInput is an input type that accepts PlaybackConfigurationManifestProcessingRulesArgs, PlaybackConfigurationManifestProcessingRulesPtr and PlaybackConfigurationManifestProcessingRulesPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationManifestProcessingRulesPtrInput` via:
//
//          PlaybackConfigurationManifestProcessingRulesArgs{...}
//
//  or:
//
//          nil
type PlaybackConfigurationManifestProcessingRulesPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput
	ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput
}

type playbackConfigurationManifestProcessingRulesPtrType PlaybackConfigurationManifestProcessingRulesArgs

func PlaybackConfigurationManifestProcessingRulesPtr(v *PlaybackConfigurationManifestProcessingRulesArgs) PlaybackConfigurationManifestProcessingRulesPtrInput {
	return (*playbackConfigurationManifestProcessingRulesPtrType)(v)
}

func (*playbackConfigurationManifestProcessingRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (i *playbackConfigurationManifestProcessingRulesPtrType) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return i.ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationManifestProcessingRulesPtrType) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationManifestProcessingRulesPtrOutput)
}

// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
type PlaybackConfigurationManifestProcessingRulesOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationManifestProcessingRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesOutput() PlaybackConfigurationManifestProcessingRulesOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o.ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationManifestProcessingRules) *PlaybackConfigurationManifestProcessingRules {
		return &v
	}).(PlaybackConfigurationManifestProcessingRulesPtrOutput)
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
func (o PlaybackConfigurationManifestProcessingRulesOutput) AdMarkerPassthrough() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationManifestProcessingRules) *PlaybackConfigurationAdMarkerPassthrough {
		return v.AdMarkerPassthrough
	}).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

type PlaybackConfigurationManifestProcessingRulesPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationManifestProcessingRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) Elem() PlaybackConfigurationManifestProcessingRulesOutput {
	return o.ApplyT(func(v *PlaybackConfigurationManifestProcessingRules) PlaybackConfigurationManifestProcessingRules {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationManifestProcessingRules
		return ret
	}).(PlaybackConfigurationManifestProcessingRulesOutput)
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) AdMarkerPassthrough() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationManifestProcessingRules) *PlaybackConfigurationAdMarkerPassthrough {
		if v == nil {
			return nil
		}
		return v.AdMarkerPassthrough
	}).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

type PlaybackConfigurationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// PlaybackConfigurationTagInput is an input type that accepts PlaybackConfigurationTagArgs and PlaybackConfigurationTagOutput values.
// You can construct a concrete instance of `PlaybackConfigurationTagInput` via:
//
//          PlaybackConfigurationTagArgs{...}
type PlaybackConfigurationTagInput interface {
	pulumi.Input

	ToPlaybackConfigurationTagOutput() PlaybackConfigurationTagOutput
	ToPlaybackConfigurationTagOutputWithContext(context.Context) PlaybackConfigurationTagOutput
}

type PlaybackConfigurationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (PlaybackConfigurationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationTag)(nil)).Elem()
}

func (i PlaybackConfigurationTagArgs) ToPlaybackConfigurationTagOutput() PlaybackConfigurationTagOutput {
	return i.ToPlaybackConfigurationTagOutputWithContext(context.Background())
}

func (i PlaybackConfigurationTagArgs) ToPlaybackConfigurationTagOutputWithContext(ctx context.Context) PlaybackConfigurationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationTagOutput)
}

// PlaybackConfigurationTagArrayInput is an input type that accepts PlaybackConfigurationTagArray and PlaybackConfigurationTagArrayOutput values.
// You can construct a concrete instance of `PlaybackConfigurationTagArrayInput` via:
//
//          PlaybackConfigurationTagArray{ PlaybackConfigurationTagArgs{...} }
type PlaybackConfigurationTagArrayInput interface {
	pulumi.Input

	ToPlaybackConfigurationTagArrayOutput() PlaybackConfigurationTagArrayOutput
	ToPlaybackConfigurationTagArrayOutputWithContext(context.Context) PlaybackConfigurationTagArrayOutput
}

type PlaybackConfigurationTagArray []PlaybackConfigurationTagInput

func (PlaybackConfigurationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaybackConfigurationTag)(nil)).Elem()
}

func (i PlaybackConfigurationTagArray) ToPlaybackConfigurationTagArrayOutput() PlaybackConfigurationTagArrayOutput {
	return i.ToPlaybackConfigurationTagArrayOutputWithContext(context.Background())
}

func (i PlaybackConfigurationTagArray) ToPlaybackConfigurationTagArrayOutputWithContext(ctx context.Context) PlaybackConfigurationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationTagArrayOutput)
}

type PlaybackConfigurationTagOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationTag)(nil)).Elem()
}

func (o PlaybackConfigurationTagOutput) ToPlaybackConfigurationTagOutput() PlaybackConfigurationTagOutput {
	return o
}

func (o PlaybackConfigurationTagOutput) ToPlaybackConfigurationTagOutputWithContext(ctx context.Context) PlaybackConfigurationTagOutput {
	return o
}

func (o PlaybackConfigurationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PlaybackConfigurationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o PlaybackConfigurationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PlaybackConfigurationTag) string { return v.Value }).(pulumi.StringOutput)
}

type PlaybackConfigurationTagArrayOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaybackConfigurationTag)(nil)).Elem()
}

func (o PlaybackConfigurationTagArrayOutput) ToPlaybackConfigurationTagArrayOutput() PlaybackConfigurationTagArrayOutput {
	return o
}

func (o PlaybackConfigurationTagArrayOutput) ToPlaybackConfigurationTagArrayOutputWithContext(ctx context.Context) PlaybackConfigurationTagArrayOutput {
	return o
}

func (o PlaybackConfigurationTagArrayOutput) Index(i pulumi.IntInput) PlaybackConfigurationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlaybackConfigurationTag {
		return vs[0].([]PlaybackConfigurationTag)[vs[1].(int)]
	}).(PlaybackConfigurationTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthroughInput)(nil)).Elem(), PlaybackConfigurationAdMarkerPassthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthroughPtrInput)(nil)).Elem(), PlaybackConfigurationAdMarkerPassthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAvailSuppressionInput)(nil)).Elem(), PlaybackConfigurationAvailSuppressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAvailSuppressionPtrInput)(nil)).Elem(), PlaybackConfigurationAvailSuppressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationBumperInput)(nil)).Elem(), PlaybackConfigurationBumperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationBumperPtrInput)(nil)).Elem(), PlaybackConfigurationBumperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationCdnConfigurationInput)(nil)).Elem(), PlaybackConfigurationCdnConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationCdnConfigurationPtrInput)(nil)).Elem(), PlaybackConfigurationCdnConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationConfigurationAliasesInput)(nil)).Elem(), PlaybackConfigurationConfigurationAliasesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationConfigurationAliasesPtrInput)(nil)).Elem(), PlaybackConfigurationConfigurationAliasesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationDashConfigurationForPutInput)(nil)).Elem(), PlaybackConfigurationDashConfigurationForPutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationDashConfigurationForPutPtrInput)(nil)).Elem(), PlaybackConfigurationDashConfigurationForPutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationLivePreRollConfigurationInput)(nil)).Elem(), PlaybackConfigurationLivePreRollConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationLivePreRollConfigurationPtrInput)(nil)).Elem(), PlaybackConfigurationLivePreRollConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationManifestProcessingRulesInput)(nil)).Elem(), PlaybackConfigurationManifestProcessingRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationManifestProcessingRulesPtrInput)(nil)).Elem(), PlaybackConfigurationManifestProcessingRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationTagInput)(nil)).Elem(), PlaybackConfigurationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationTagArrayInput)(nil)).Elem(), PlaybackConfigurationTagArray{})
	pulumi.RegisterOutputType(PlaybackConfigurationAdMarkerPassthroughOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationAdMarkerPassthroughPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationAvailSuppressionOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationAvailSuppressionPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationBumperOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationBumperPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationCdnConfigurationOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationCdnConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationConfigurationAliasesOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationConfigurationAliasesPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationDashConfigurationForPutOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationDashConfigurationForPutPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationLivePreRollConfigurationOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationLivePreRollConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationManifestProcessingRulesOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationManifestProcessingRulesPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationTagOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationTagArrayOutput{})
}
