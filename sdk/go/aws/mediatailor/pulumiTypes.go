// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediatailor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// <p>Dash manifest configuration parameters.</p>
type ChannelDashPlaylistSettings struct {
	// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
	ManifestWindowSeconds *float64 `pulumi:"manifestWindowSeconds"`
	// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
	MinBufferTimeSeconds *float64 `pulumi:"minBufferTimeSeconds"`
	// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
	MinUpdatePeriodSeconds *float64 `pulumi:"minUpdatePeriodSeconds"`
	// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
	SuggestedPresentationDelaySeconds *float64 `pulumi:"suggestedPresentationDelaySeconds"`
}

// ChannelDashPlaylistSettingsInput is an input type that accepts ChannelDashPlaylistSettingsArgs and ChannelDashPlaylistSettingsOutput values.
// You can construct a concrete instance of `ChannelDashPlaylistSettingsInput` via:
//
//	ChannelDashPlaylistSettingsArgs{...}
type ChannelDashPlaylistSettingsInput interface {
	pulumi.Input

	ToChannelDashPlaylistSettingsOutput() ChannelDashPlaylistSettingsOutput
	ToChannelDashPlaylistSettingsOutputWithContext(context.Context) ChannelDashPlaylistSettingsOutput
}

// <p>Dash manifest configuration parameters.</p>
type ChannelDashPlaylistSettingsArgs struct {
	// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
	ManifestWindowSeconds pulumi.Float64PtrInput `pulumi:"manifestWindowSeconds"`
	// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
	MinBufferTimeSeconds pulumi.Float64PtrInput `pulumi:"minBufferTimeSeconds"`
	// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
	MinUpdatePeriodSeconds pulumi.Float64PtrInput `pulumi:"minUpdatePeriodSeconds"`
	// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
	SuggestedPresentationDelaySeconds pulumi.Float64PtrInput `pulumi:"suggestedPresentationDelaySeconds"`
}

func (ChannelDashPlaylistSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDashPlaylistSettings)(nil)).Elem()
}

func (i ChannelDashPlaylistSettingsArgs) ToChannelDashPlaylistSettingsOutput() ChannelDashPlaylistSettingsOutput {
	return i.ToChannelDashPlaylistSettingsOutputWithContext(context.Background())
}

func (i ChannelDashPlaylistSettingsArgs) ToChannelDashPlaylistSettingsOutputWithContext(ctx context.Context) ChannelDashPlaylistSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDashPlaylistSettingsOutput)
}

func (i ChannelDashPlaylistSettingsArgs) ToChannelDashPlaylistSettingsPtrOutput() ChannelDashPlaylistSettingsPtrOutput {
	return i.ToChannelDashPlaylistSettingsPtrOutputWithContext(context.Background())
}

func (i ChannelDashPlaylistSettingsArgs) ToChannelDashPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelDashPlaylistSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDashPlaylistSettingsOutput).ToChannelDashPlaylistSettingsPtrOutputWithContext(ctx)
}

// ChannelDashPlaylistSettingsPtrInput is an input type that accepts ChannelDashPlaylistSettingsArgs, ChannelDashPlaylistSettingsPtr and ChannelDashPlaylistSettingsPtrOutput values.
// You can construct a concrete instance of `ChannelDashPlaylistSettingsPtrInput` via:
//
//	        ChannelDashPlaylistSettingsArgs{...}
//
//	or:
//
//	        nil
type ChannelDashPlaylistSettingsPtrInput interface {
	pulumi.Input

	ToChannelDashPlaylistSettingsPtrOutput() ChannelDashPlaylistSettingsPtrOutput
	ToChannelDashPlaylistSettingsPtrOutputWithContext(context.Context) ChannelDashPlaylistSettingsPtrOutput
}

type channelDashPlaylistSettingsPtrType ChannelDashPlaylistSettingsArgs

func ChannelDashPlaylistSettingsPtr(v *ChannelDashPlaylistSettingsArgs) ChannelDashPlaylistSettingsPtrInput {
	return (*channelDashPlaylistSettingsPtrType)(v)
}

func (*channelDashPlaylistSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelDashPlaylistSettings)(nil)).Elem()
}

func (i *channelDashPlaylistSettingsPtrType) ToChannelDashPlaylistSettingsPtrOutput() ChannelDashPlaylistSettingsPtrOutput {
	return i.ToChannelDashPlaylistSettingsPtrOutputWithContext(context.Background())
}

func (i *channelDashPlaylistSettingsPtrType) ToChannelDashPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelDashPlaylistSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDashPlaylistSettingsPtrOutput)
}

// <p>Dash manifest configuration parameters.</p>
type ChannelDashPlaylistSettingsOutput struct{ *pulumi.OutputState }

func (ChannelDashPlaylistSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelDashPlaylistSettings)(nil)).Elem()
}

func (o ChannelDashPlaylistSettingsOutput) ToChannelDashPlaylistSettingsOutput() ChannelDashPlaylistSettingsOutput {
	return o
}

func (o ChannelDashPlaylistSettingsOutput) ToChannelDashPlaylistSettingsOutputWithContext(ctx context.Context) ChannelDashPlaylistSettingsOutput {
	return o
}

func (o ChannelDashPlaylistSettingsOutput) ToChannelDashPlaylistSettingsPtrOutput() ChannelDashPlaylistSettingsPtrOutput {
	return o.ToChannelDashPlaylistSettingsPtrOutputWithContext(context.Background())
}

func (o ChannelDashPlaylistSettingsOutput) ToChannelDashPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelDashPlaylistSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelDashPlaylistSettings) *ChannelDashPlaylistSettings {
		return &v
	}).(ChannelDashPlaylistSettingsPtrOutput)
}

// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
func (o ChannelDashPlaylistSettingsOutput) ManifestWindowSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ChannelDashPlaylistSettings) *float64 { return v.ManifestWindowSeconds }).(pulumi.Float64PtrOutput)
}

// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
func (o ChannelDashPlaylistSettingsOutput) MinBufferTimeSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ChannelDashPlaylistSettings) *float64 { return v.MinBufferTimeSeconds }).(pulumi.Float64PtrOutput)
}

// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
func (o ChannelDashPlaylistSettingsOutput) MinUpdatePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ChannelDashPlaylistSettings) *float64 { return v.MinUpdatePeriodSeconds }).(pulumi.Float64PtrOutput)
}

// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
func (o ChannelDashPlaylistSettingsOutput) SuggestedPresentationDelaySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ChannelDashPlaylistSettings) *float64 { return v.SuggestedPresentationDelaySeconds }).(pulumi.Float64PtrOutput)
}

type ChannelDashPlaylistSettingsPtrOutput struct{ *pulumi.OutputState }

func (ChannelDashPlaylistSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelDashPlaylistSettings)(nil)).Elem()
}

func (o ChannelDashPlaylistSettingsPtrOutput) ToChannelDashPlaylistSettingsPtrOutput() ChannelDashPlaylistSettingsPtrOutput {
	return o
}

func (o ChannelDashPlaylistSettingsPtrOutput) ToChannelDashPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelDashPlaylistSettingsPtrOutput {
	return o
}

func (o ChannelDashPlaylistSettingsPtrOutput) Elem() ChannelDashPlaylistSettingsOutput {
	return o.ApplyT(func(v *ChannelDashPlaylistSettings) ChannelDashPlaylistSettings {
		if v != nil {
			return *v
		}
		var ret ChannelDashPlaylistSettings
		return ret
	}).(ChannelDashPlaylistSettingsOutput)
}

// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
func (o ChannelDashPlaylistSettingsPtrOutput) ManifestWindowSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ChannelDashPlaylistSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ManifestWindowSeconds
	}).(pulumi.Float64PtrOutput)
}

// <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
func (o ChannelDashPlaylistSettingsPtrOutput) MinBufferTimeSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ChannelDashPlaylistSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.MinBufferTimeSeconds
	}).(pulumi.Float64PtrOutput)
}

// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
func (o ChannelDashPlaylistSettingsPtrOutput) MinUpdatePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ChannelDashPlaylistSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.MinUpdatePeriodSeconds
	}).(pulumi.Float64PtrOutput)
}

// <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
func (o ChannelDashPlaylistSettingsPtrOutput) SuggestedPresentationDelaySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ChannelDashPlaylistSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.SuggestedPresentationDelaySeconds
	}).(pulumi.Float64PtrOutput)
}

// <p>HLS playlist configuration parameters.</p>
type ChannelHlsPlaylistSettings struct {
	// <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
	AdMarkupType []ChannelAdMarkupType `pulumi:"adMarkupType"`
	// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
	ManifestWindowSeconds *float64 `pulumi:"manifestWindowSeconds"`
}

// ChannelHlsPlaylistSettingsInput is an input type that accepts ChannelHlsPlaylistSettingsArgs and ChannelHlsPlaylistSettingsOutput values.
// You can construct a concrete instance of `ChannelHlsPlaylistSettingsInput` via:
//
//	ChannelHlsPlaylistSettingsArgs{...}
type ChannelHlsPlaylistSettingsInput interface {
	pulumi.Input

	ToChannelHlsPlaylistSettingsOutput() ChannelHlsPlaylistSettingsOutput
	ToChannelHlsPlaylistSettingsOutputWithContext(context.Context) ChannelHlsPlaylistSettingsOutput
}

// <p>HLS playlist configuration parameters.</p>
type ChannelHlsPlaylistSettingsArgs struct {
	// <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
	AdMarkupType ChannelAdMarkupTypeArrayInput `pulumi:"adMarkupType"`
	// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
	ManifestWindowSeconds pulumi.Float64PtrInput `pulumi:"manifestWindowSeconds"`
}

func (ChannelHlsPlaylistSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelHlsPlaylistSettings)(nil)).Elem()
}

func (i ChannelHlsPlaylistSettingsArgs) ToChannelHlsPlaylistSettingsOutput() ChannelHlsPlaylistSettingsOutput {
	return i.ToChannelHlsPlaylistSettingsOutputWithContext(context.Background())
}

func (i ChannelHlsPlaylistSettingsArgs) ToChannelHlsPlaylistSettingsOutputWithContext(ctx context.Context) ChannelHlsPlaylistSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelHlsPlaylistSettingsOutput)
}

func (i ChannelHlsPlaylistSettingsArgs) ToChannelHlsPlaylistSettingsPtrOutput() ChannelHlsPlaylistSettingsPtrOutput {
	return i.ToChannelHlsPlaylistSettingsPtrOutputWithContext(context.Background())
}

func (i ChannelHlsPlaylistSettingsArgs) ToChannelHlsPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelHlsPlaylistSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelHlsPlaylistSettingsOutput).ToChannelHlsPlaylistSettingsPtrOutputWithContext(ctx)
}

// ChannelHlsPlaylistSettingsPtrInput is an input type that accepts ChannelHlsPlaylistSettingsArgs, ChannelHlsPlaylistSettingsPtr and ChannelHlsPlaylistSettingsPtrOutput values.
// You can construct a concrete instance of `ChannelHlsPlaylistSettingsPtrInput` via:
//
//	        ChannelHlsPlaylistSettingsArgs{...}
//
//	or:
//
//	        nil
type ChannelHlsPlaylistSettingsPtrInput interface {
	pulumi.Input

	ToChannelHlsPlaylistSettingsPtrOutput() ChannelHlsPlaylistSettingsPtrOutput
	ToChannelHlsPlaylistSettingsPtrOutputWithContext(context.Context) ChannelHlsPlaylistSettingsPtrOutput
}

type channelHlsPlaylistSettingsPtrType ChannelHlsPlaylistSettingsArgs

func ChannelHlsPlaylistSettingsPtr(v *ChannelHlsPlaylistSettingsArgs) ChannelHlsPlaylistSettingsPtrInput {
	return (*channelHlsPlaylistSettingsPtrType)(v)
}

func (*channelHlsPlaylistSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelHlsPlaylistSettings)(nil)).Elem()
}

func (i *channelHlsPlaylistSettingsPtrType) ToChannelHlsPlaylistSettingsPtrOutput() ChannelHlsPlaylistSettingsPtrOutput {
	return i.ToChannelHlsPlaylistSettingsPtrOutputWithContext(context.Background())
}

func (i *channelHlsPlaylistSettingsPtrType) ToChannelHlsPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelHlsPlaylistSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelHlsPlaylistSettingsPtrOutput)
}

// <p>HLS playlist configuration parameters.</p>
type ChannelHlsPlaylistSettingsOutput struct{ *pulumi.OutputState }

func (ChannelHlsPlaylistSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelHlsPlaylistSettings)(nil)).Elem()
}

func (o ChannelHlsPlaylistSettingsOutput) ToChannelHlsPlaylistSettingsOutput() ChannelHlsPlaylistSettingsOutput {
	return o
}

func (o ChannelHlsPlaylistSettingsOutput) ToChannelHlsPlaylistSettingsOutputWithContext(ctx context.Context) ChannelHlsPlaylistSettingsOutput {
	return o
}

func (o ChannelHlsPlaylistSettingsOutput) ToChannelHlsPlaylistSettingsPtrOutput() ChannelHlsPlaylistSettingsPtrOutput {
	return o.ToChannelHlsPlaylistSettingsPtrOutputWithContext(context.Background())
}

func (o ChannelHlsPlaylistSettingsOutput) ToChannelHlsPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelHlsPlaylistSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelHlsPlaylistSettings) *ChannelHlsPlaylistSettings {
		return &v
	}).(ChannelHlsPlaylistSettingsPtrOutput)
}

// <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
func (o ChannelHlsPlaylistSettingsOutput) AdMarkupType() ChannelAdMarkupTypeArrayOutput {
	return o.ApplyT(func(v ChannelHlsPlaylistSettings) []ChannelAdMarkupType { return v.AdMarkupType }).(ChannelAdMarkupTypeArrayOutput)
}

// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
func (o ChannelHlsPlaylistSettingsOutput) ManifestWindowSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ChannelHlsPlaylistSettings) *float64 { return v.ManifestWindowSeconds }).(pulumi.Float64PtrOutput)
}

type ChannelHlsPlaylistSettingsPtrOutput struct{ *pulumi.OutputState }

func (ChannelHlsPlaylistSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelHlsPlaylistSettings)(nil)).Elem()
}

func (o ChannelHlsPlaylistSettingsPtrOutput) ToChannelHlsPlaylistSettingsPtrOutput() ChannelHlsPlaylistSettingsPtrOutput {
	return o
}

func (o ChannelHlsPlaylistSettingsPtrOutput) ToChannelHlsPlaylistSettingsPtrOutputWithContext(ctx context.Context) ChannelHlsPlaylistSettingsPtrOutput {
	return o
}

func (o ChannelHlsPlaylistSettingsPtrOutput) Elem() ChannelHlsPlaylistSettingsOutput {
	return o.ApplyT(func(v *ChannelHlsPlaylistSettings) ChannelHlsPlaylistSettings {
		if v != nil {
			return *v
		}
		var ret ChannelHlsPlaylistSettings
		return ret
	}).(ChannelHlsPlaylistSettingsOutput)
}

// <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
func (o ChannelHlsPlaylistSettingsPtrOutput) AdMarkupType() ChannelAdMarkupTypeArrayOutput {
	return o.ApplyT(func(v *ChannelHlsPlaylistSettings) []ChannelAdMarkupType {
		if v == nil {
			return nil
		}
		return v.AdMarkupType
	}).(ChannelAdMarkupTypeArrayOutput)
}

// <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
func (o ChannelHlsPlaylistSettingsPtrOutput) ManifestWindowSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ChannelHlsPlaylistSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ManifestWindowSeconds
	}).(pulumi.Float64PtrOutput)
}

// <p>The log configuration for the channel.</p>
type ChannelLogConfigurationForChannel struct {
	// <p>The log types.</p>
	LogTypes []ChannelLogType `pulumi:"logTypes"`
}

// ChannelLogConfigurationForChannelInput is an input type that accepts ChannelLogConfigurationForChannelArgs and ChannelLogConfigurationForChannelOutput values.
// You can construct a concrete instance of `ChannelLogConfigurationForChannelInput` via:
//
//	ChannelLogConfigurationForChannelArgs{...}
type ChannelLogConfigurationForChannelInput interface {
	pulumi.Input

	ToChannelLogConfigurationForChannelOutput() ChannelLogConfigurationForChannelOutput
	ToChannelLogConfigurationForChannelOutputWithContext(context.Context) ChannelLogConfigurationForChannelOutput
}

// <p>The log configuration for the channel.</p>
type ChannelLogConfigurationForChannelArgs struct {
	// <p>The log types.</p>
	LogTypes ChannelLogTypeArrayInput `pulumi:"logTypes"`
}

func (ChannelLogConfigurationForChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelLogConfigurationForChannel)(nil)).Elem()
}

func (i ChannelLogConfigurationForChannelArgs) ToChannelLogConfigurationForChannelOutput() ChannelLogConfigurationForChannelOutput {
	return i.ToChannelLogConfigurationForChannelOutputWithContext(context.Background())
}

func (i ChannelLogConfigurationForChannelArgs) ToChannelLogConfigurationForChannelOutputWithContext(ctx context.Context) ChannelLogConfigurationForChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelLogConfigurationForChannelOutput)
}

func (i ChannelLogConfigurationForChannelArgs) ToChannelLogConfigurationForChannelPtrOutput() ChannelLogConfigurationForChannelPtrOutput {
	return i.ToChannelLogConfigurationForChannelPtrOutputWithContext(context.Background())
}

func (i ChannelLogConfigurationForChannelArgs) ToChannelLogConfigurationForChannelPtrOutputWithContext(ctx context.Context) ChannelLogConfigurationForChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelLogConfigurationForChannelOutput).ToChannelLogConfigurationForChannelPtrOutputWithContext(ctx)
}

// ChannelLogConfigurationForChannelPtrInput is an input type that accepts ChannelLogConfigurationForChannelArgs, ChannelLogConfigurationForChannelPtr and ChannelLogConfigurationForChannelPtrOutput values.
// You can construct a concrete instance of `ChannelLogConfigurationForChannelPtrInput` via:
//
//	        ChannelLogConfigurationForChannelArgs{...}
//
//	or:
//
//	        nil
type ChannelLogConfigurationForChannelPtrInput interface {
	pulumi.Input

	ToChannelLogConfigurationForChannelPtrOutput() ChannelLogConfigurationForChannelPtrOutput
	ToChannelLogConfigurationForChannelPtrOutputWithContext(context.Context) ChannelLogConfigurationForChannelPtrOutput
}

type channelLogConfigurationForChannelPtrType ChannelLogConfigurationForChannelArgs

func ChannelLogConfigurationForChannelPtr(v *ChannelLogConfigurationForChannelArgs) ChannelLogConfigurationForChannelPtrInput {
	return (*channelLogConfigurationForChannelPtrType)(v)
}

func (*channelLogConfigurationForChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelLogConfigurationForChannel)(nil)).Elem()
}

func (i *channelLogConfigurationForChannelPtrType) ToChannelLogConfigurationForChannelPtrOutput() ChannelLogConfigurationForChannelPtrOutput {
	return i.ToChannelLogConfigurationForChannelPtrOutputWithContext(context.Background())
}

func (i *channelLogConfigurationForChannelPtrType) ToChannelLogConfigurationForChannelPtrOutputWithContext(ctx context.Context) ChannelLogConfigurationForChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelLogConfigurationForChannelPtrOutput)
}

// <p>The log configuration for the channel.</p>
type ChannelLogConfigurationForChannelOutput struct{ *pulumi.OutputState }

func (ChannelLogConfigurationForChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelLogConfigurationForChannel)(nil)).Elem()
}

func (o ChannelLogConfigurationForChannelOutput) ToChannelLogConfigurationForChannelOutput() ChannelLogConfigurationForChannelOutput {
	return o
}

func (o ChannelLogConfigurationForChannelOutput) ToChannelLogConfigurationForChannelOutputWithContext(ctx context.Context) ChannelLogConfigurationForChannelOutput {
	return o
}

func (o ChannelLogConfigurationForChannelOutput) ToChannelLogConfigurationForChannelPtrOutput() ChannelLogConfigurationForChannelPtrOutput {
	return o.ToChannelLogConfigurationForChannelPtrOutputWithContext(context.Background())
}

func (o ChannelLogConfigurationForChannelOutput) ToChannelLogConfigurationForChannelPtrOutputWithContext(ctx context.Context) ChannelLogConfigurationForChannelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelLogConfigurationForChannel) *ChannelLogConfigurationForChannel {
		return &v
	}).(ChannelLogConfigurationForChannelPtrOutput)
}

// <p>The log types.</p>
func (o ChannelLogConfigurationForChannelOutput) LogTypes() ChannelLogTypeArrayOutput {
	return o.ApplyT(func(v ChannelLogConfigurationForChannel) []ChannelLogType { return v.LogTypes }).(ChannelLogTypeArrayOutput)
}

type ChannelLogConfigurationForChannelPtrOutput struct{ *pulumi.OutputState }

func (ChannelLogConfigurationForChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelLogConfigurationForChannel)(nil)).Elem()
}

func (o ChannelLogConfigurationForChannelPtrOutput) ToChannelLogConfigurationForChannelPtrOutput() ChannelLogConfigurationForChannelPtrOutput {
	return o
}

func (o ChannelLogConfigurationForChannelPtrOutput) ToChannelLogConfigurationForChannelPtrOutputWithContext(ctx context.Context) ChannelLogConfigurationForChannelPtrOutput {
	return o
}

func (o ChannelLogConfigurationForChannelPtrOutput) Elem() ChannelLogConfigurationForChannelOutput {
	return o.ApplyT(func(v *ChannelLogConfigurationForChannel) ChannelLogConfigurationForChannel {
		if v != nil {
			return *v
		}
		var ret ChannelLogConfigurationForChannel
		return ret
	}).(ChannelLogConfigurationForChannelOutput)
}

// <p>The log types.</p>
func (o ChannelLogConfigurationForChannelPtrOutput) LogTypes() ChannelLogTypeArrayOutput {
	return o.ApplyT(func(v *ChannelLogConfigurationForChannel) []ChannelLogType {
		if v == nil {
			return nil
		}
		return v.LogTypes
	}).(ChannelLogTypeArrayOutput)
}

// <p>The output configuration for this channel.</p>
type ChannelRequestOutputItem struct {
	DashPlaylistSettings *ChannelDashPlaylistSettings `pulumi:"dashPlaylistSettings"`
	HlsPlaylistSettings  *ChannelHlsPlaylistSettings  `pulumi:"hlsPlaylistSettings"`
	// <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
	ManifestName string `pulumi:"manifestName"`
	// <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
	SourceGroup string `pulumi:"sourceGroup"`
}

// ChannelRequestOutputItemInput is an input type that accepts ChannelRequestOutputItemArgs and ChannelRequestOutputItemOutput values.
// You can construct a concrete instance of `ChannelRequestOutputItemInput` via:
//
//	ChannelRequestOutputItemArgs{...}
type ChannelRequestOutputItemInput interface {
	pulumi.Input

	ToChannelRequestOutputItemOutput() ChannelRequestOutputItemOutput
	ToChannelRequestOutputItemOutputWithContext(context.Context) ChannelRequestOutputItemOutput
}

// <p>The output configuration for this channel.</p>
type ChannelRequestOutputItemArgs struct {
	DashPlaylistSettings ChannelDashPlaylistSettingsPtrInput `pulumi:"dashPlaylistSettings"`
	HlsPlaylistSettings  ChannelHlsPlaylistSettingsPtrInput  `pulumi:"hlsPlaylistSettings"`
	// <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
	ManifestName pulumi.StringInput `pulumi:"manifestName"`
	// <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
	SourceGroup pulumi.StringInput `pulumi:"sourceGroup"`
}

func (ChannelRequestOutputItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelRequestOutputItem)(nil)).Elem()
}

func (i ChannelRequestOutputItemArgs) ToChannelRequestOutputItemOutput() ChannelRequestOutputItemOutput {
	return i.ToChannelRequestOutputItemOutputWithContext(context.Background())
}

func (i ChannelRequestOutputItemArgs) ToChannelRequestOutputItemOutputWithContext(ctx context.Context) ChannelRequestOutputItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelRequestOutputItemOutput)
}

// ChannelRequestOutputItemArrayInput is an input type that accepts ChannelRequestOutputItemArray and ChannelRequestOutputItemArrayOutput values.
// You can construct a concrete instance of `ChannelRequestOutputItemArrayInput` via:
//
//	ChannelRequestOutputItemArray{ ChannelRequestOutputItemArgs{...} }
type ChannelRequestOutputItemArrayInput interface {
	pulumi.Input

	ToChannelRequestOutputItemArrayOutput() ChannelRequestOutputItemArrayOutput
	ToChannelRequestOutputItemArrayOutputWithContext(context.Context) ChannelRequestOutputItemArrayOutput
}

type ChannelRequestOutputItemArray []ChannelRequestOutputItemInput

func (ChannelRequestOutputItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelRequestOutputItem)(nil)).Elem()
}

func (i ChannelRequestOutputItemArray) ToChannelRequestOutputItemArrayOutput() ChannelRequestOutputItemArrayOutput {
	return i.ToChannelRequestOutputItemArrayOutputWithContext(context.Background())
}

func (i ChannelRequestOutputItemArray) ToChannelRequestOutputItemArrayOutputWithContext(ctx context.Context) ChannelRequestOutputItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelRequestOutputItemArrayOutput)
}

// <p>The output configuration for this channel.</p>
type ChannelRequestOutputItemOutput struct{ *pulumi.OutputState }

func (ChannelRequestOutputItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelRequestOutputItem)(nil)).Elem()
}

func (o ChannelRequestOutputItemOutput) ToChannelRequestOutputItemOutput() ChannelRequestOutputItemOutput {
	return o
}

func (o ChannelRequestOutputItemOutput) ToChannelRequestOutputItemOutputWithContext(ctx context.Context) ChannelRequestOutputItemOutput {
	return o
}

func (o ChannelRequestOutputItemOutput) DashPlaylistSettings() ChannelDashPlaylistSettingsPtrOutput {
	return o.ApplyT(func(v ChannelRequestOutputItem) *ChannelDashPlaylistSettings { return v.DashPlaylistSettings }).(ChannelDashPlaylistSettingsPtrOutput)
}

func (o ChannelRequestOutputItemOutput) HlsPlaylistSettings() ChannelHlsPlaylistSettingsPtrOutput {
	return o.ApplyT(func(v ChannelRequestOutputItem) *ChannelHlsPlaylistSettings { return v.HlsPlaylistSettings }).(ChannelHlsPlaylistSettingsPtrOutput)
}

// <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
func (o ChannelRequestOutputItemOutput) ManifestName() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelRequestOutputItem) string { return v.ManifestName }).(pulumi.StringOutput)
}

// <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
func (o ChannelRequestOutputItemOutput) SourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ChannelRequestOutputItem) string { return v.SourceGroup }).(pulumi.StringOutput)
}

type ChannelRequestOutputItemArrayOutput struct{ *pulumi.OutputState }

func (ChannelRequestOutputItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelRequestOutputItem)(nil)).Elem()
}

func (o ChannelRequestOutputItemArrayOutput) ToChannelRequestOutputItemArrayOutput() ChannelRequestOutputItemArrayOutput {
	return o
}

func (o ChannelRequestOutputItemArrayOutput) ToChannelRequestOutputItemArrayOutputWithContext(ctx context.Context) ChannelRequestOutputItemArrayOutput {
	return o
}

func (o ChannelRequestOutputItemArrayOutput) Index(i pulumi.IntInput) ChannelRequestOutputItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelRequestOutputItem {
		return vs[0].([]ChannelRequestOutputItem)[vs[1].(int)]
	}).(ChannelRequestOutputItemOutput)
}

// <p>Slate VOD source configuration.</p>
type ChannelSlateSource struct {
	// <p>The name of the source location where the slate VOD source is stored.</p>
	SourceLocationName *string `pulumi:"sourceLocationName"`
	// <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
	VodSourceName *string `pulumi:"vodSourceName"`
}

// ChannelSlateSourceInput is an input type that accepts ChannelSlateSourceArgs and ChannelSlateSourceOutput values.
// You can construct a concrete instance of `ChannelSlateSourceInput` via:
//
//	ChannelSlateSourceArgs{...}
type ChannelSlateSourceInput interface {
	pulumi.Input

	ToChannelSlateSourceOutput() ChannelSlateSourceOutput
	ToChannelSlateSourceOutputWithContext(context.Context) ChannelSlateSourceOutput
}

// <p>Slate VOD source configuration.</p>
type ChannelSlateSourceArgs struct {
	// <p>The name of the source location where the slate VOD source is stored.</p>
	SourceLocationName pulumi.StringPtrInput `pulumi:"sourceLocationName"`
	// <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
	VodSourceName pulumi.StringPtrInput `pulumi:"vodSourceName"`
}

func (ChannelSlateSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSlateSource)(nil)).Elem()
}

func (i ChannelSlateSourceArgs) ToChannelSlateSourceOutput() ChannelSlateSourceOutput {
	return i.ToChannelSlateSourceOutputWithContext(context.Background())
}

func (i ChannelSlateSourceArgs) ToChannelSlateSourceOutputWithContext(ctx context.Context) ChannelSlateSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSlateSourceOutput)
}

func (i ChannelSlateSourceArgs) ToChannelSlateSourcePtrOutput() ChannelSlateSourcePtrOutput {
	return i.ToChannelSlateSourcePtrOutputWithContext(context.Background())
}

func (i ChannelSlateSourceArgs) ToChannelSlateSourcePtrOutputWithContext(ctx context.Context) ChannelSlateSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSlateSourceOutput).ToChannelSlateSourcePtrOutputWithContext(ctx)
}

// ChannelSlateSourcePtrInput is an input type that accepts ChannelSlateSourceArgs, ChannelSlateSourcePtr and ChannelSlateSourcePtrOutput values.
// You can construct a concrete instance of `ChannelSlateSourcePtrInput` via:
//
//	        ChannelSlateSourceArgs{...}
//
//	or:
//
//	        nil
type ChannelSlateSourcePtrInput interface {
	pulumi.Input

	ToChannelSlateSourcePtrOutput() ChannelSlateSourcePtrOutput
	ToChannelSlateSourcePtrOutputWithContext(context.Context) ChannelSlateSourcePtrOutput
}

type channelSlateSourcePtrType ChannelSlateSourceArgs

func ChannelSlateSourcePtr(v *ChannelSlateSourceArgs) ChannelSlateSourcePtrInput {
	return (*channelSlateSourcePtrType)(v)
}

func (*channelSlateSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSlateSource)(nil)).Elem()
}

func (i *channelSlateSourcePtrType) ToChannelSlateSourcePtrOutput() ChannelSlateSourcePtrOutput {
	return i.ToChannelSlateSourcePtrOutputWithContext(context.Background())
}

func (i *channelSlateSourcePtrType) ToChannelSlateSourcePtrOutputWithContext(ctx context.Context) ChannelSlateSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSlateSourcePtrOutput)
}

// <p>Slate VOD source configuration.</p>
type ChannelSlateSourceOutput struct{ *pulumi.OutputState }

func (ChannelSlateSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSlateSource)(nil)).Elem()
}

func (o ChannelSlateSourceOutput) ToChannelSlateSourceOutput() ChannelSlateSourceOutput {
	return o
}

func (o ChannelSlateSourceOutput) ToChannelSlateSourceOutputWithContext(ctx context.Context) ChannelSlateSourceOutput {
	return o
}

func (o ChannelSlateSourceOutput) ToChannelSlateSourcePtrOutput() ChannelSlateSourcePtrOutput {
	return o.ToChannelSlateSourcePtrOutputWithContext(context.Background())
}

func (o ChannelSlateSourceOutput) ToChannelSlateSourcePtrOutputWithContext(ctx context.Context) ChannelSlateSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelSlateSource) *ChannelSlateSource {
		return &v
	}).(ChannelSlateSourcePtrOutput)
}

// <p>The name of the source location where the slate VOD source is stored.</p>
func (o ChannelSlateSourceOutput) SourceLocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSlateSource) *string { return v.SourceLocationName }).(pulumi.StringPtrOutput)
}

// <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
func (o ChannelSlateSourceOutput) VodSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSlateSource) *string { return v.VodSourceName }).(pulumi.StringPtrOutput)
}

type ChannelSlateSourcePtrOutput struct{ *pulumi.OutputState }

func (ChannelSlateSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSlateSource)(nil)).Elem()
}

func (o ChannelSlateSourcePtrOutput) ToChannelSlateSourcePtrOutput() ChannelSlateSourcePtrOutput {
	return o
}

func (o ChannelSlateSourcePtrOutput) ToChannelSlateSourcePtrOutputWithContext(ctx context.Context) ChannelSlateSourcePtrOutput {
	return o
}

func (o ChannelSlateSourcePtrOutput) Elem() ChannelSlateSourceOutput {
	return o.ApplyT(func(v *ChannelSlateSource) ChannelSlateSource {
		if v != nil {
			return *v
		}
		var ret ChannelSlateSource
		return ret
	}).(ChannelSlateSourceOutput)
}

// <p>The name of the source location where the slate VOD source is stored.</p>
func (o ChannelSlateSourcePtrOutput) SourceLocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSlateSource) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocationName
	}).(pulumi.StringPtrOutput)
}

// <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
func (o ChannelSlateSourcePtrOutput) VodSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSlateSource) *string {
		if v == nil {
			return nil
		}
		return v.VodSourceName
	}).(pulumi.StringPtrOutput)
}

type ChannelTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// <p>The configuration for time-shifted viewing.</p>
type ChannelTimeShiftConfiguration struct {
	// <p>The maximum time delay for time-shifted viewing. The minimum allowed maximum time delay is 0 seconds, and the maximum allowed maximum time delay is 21600 seconds (6 hours).</p>
	MaxTimeDelaySeconds float64 `pulumi:"maxTimeDelaySeconds"`
}

// ChannelTimeShiftConfigurationInput is an input type that accepts ChannelTimeShiftConfigurationArgs and ChannelTimeShiftConfigurationOutput values.
// You can construct a concrete instance of `ChannelTimeShiftConfigurationInput` via:
//
//	ChannelTimeShiftConfigurationArgs{...}
type ChannelTimeShiftConfigurationInput interface {
	pulumi.Input

	ToChannelTimeShiftConfigurationOutput() ChannelTimeShiftConfigurationOutput
	ToChannelTimeShiftConfigurationOutputWithContext(context.Context) ChannelTimeShiftConfigurationOutput
}

// <p>The configuration for time-shifted viewing.</p>
type ChannelTimeShiftConfigurationArgs struct {
	// <p>The maximum time delay for time-shifted viewing. The minimum allowed maximum time delay is 0 seconds, and the maximum allowed maximum time delay is 21600 seconds (6 hours).</p>
	MaxTimeDelaySeconds pulumi.Float64Input `pulumi:"maxTimeDelaySeconds"`
}

func (ChannelTimeShiftConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTimeShiftConfiguration)(nil)).Elem()
}

func (i ChannelTimeShiftConfigurationArgs) ToChannelTimeShiftConfigurationOutput() ChannelTimeShiftConfigurationOutput {
	return i.ToChannelTimeShiftConfigurationOutputWithContext(context.Background())
}

func (i ChannelTimeShiftConfigurationArgs) ToChannelTimeShiftConfigurationOutputWithContext(ctx context.Context) ChannelTimeShiftConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTimeShiftConfigurationOutput)
}

func (i ChannelTimeShiftConfigurationArgs) ToChannelTimeShiftConfigurationPtrOutput() ChannelTimeShiftConfigurationPtrOutput {
	return i.ToChannelTimeShiftConfigurationPtrOutputWithContext(context.Background())
}

func (i ChannelTimeShiftConfigurationArgs) ToChannelTimeShiftConfigurationPtrOutputWithContext(ctx context.Context) ChannelTimeShiftConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTimeShiftConfigurationOutput).ToChannelTimeShiftConfigurationPtrOutputWithContext(ctx)
}

// ChannelTimeShiftConfigurationPtrInput is an input type that accepts ChannelTimeShiftConfigurationArgs, ChannelTimeShiftConfigurationPtr and ChannelTimeShiftConfigurationPtrOutput values.
// You can construct a concrete instance of `ChannelTimeShiftConfigurationPtrInput` via:
//
//	        ChannelTimeShiftConfigurationArgs{...}
//
//	or:
//
//	        nil
type ChannelTimeShiftConfigurationPtrInput interface {
	pulumi.Input

	ToChannelTimeShiftConfigurationPtrOutput() ChannelTimeShiftConfigurationPtrOutput
	ToChannelTimeShiftConfigurationPtrOutputWithContext(context.Context) ChannelTimeShiftConfigurationPtrOutput
}

type channelTimeShiftConfigurationPtrType ChannelTimeShiftConfigurationArgs

func ChannelTimeShiftConfigurationPtr(v *ChannelTimeShiftConfigurationArgs) ChannelTimeShiftConfigurationPtrInput {
	return (*channelTimeShiftConfigurationPtrType)(v)
}

func (*channelTimeShiftConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelTimeShiftConfiguration)(nil)).Elem()
}

func (i *channelTimeShiftConfigurationPtrType) ToChannelTimeShiftConfigurationPtrOutput() ChannelTimeShiftConfigurationPtrOutput {
	return i.ToChannelTimeShiftConfigurationPtrOutputWithContext(context.Background())
}

func (i *channelTimeShiftConfigurationPtrType) ToChannelTimeShiftConfigurationPtrOutputWithContext(ctx context.Context) ChannelTimeShiftConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTimeShiftConfigurationPtrOutput)
}

// <p>The configuration for time-shifted viewing.</p>
type ChannelTimeShiftConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelTimeShiftConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTimeShiftConfiguration)(nil)).Elem()
}

func (o ChannelTimeShiftConfigurationOutput) ToChannelTimeShiftConfigurationOutput() ChannelTimeShiftConfigurationOutput {
	return o
}

func (o ChannelTimeShiftConfigurationOutput) ToChannelTimeShiftConfigurationOutputWithContext(ctx context.Context) ChannelTimeShiftConfigurationOutput {
	return o
}

func (o ChannelTimeShiftConfigurationOutput) ToChannelTimeShiftConfigurationPtrOutput() ChannelTimeShiftConfigurationPtrOutput {
	return o.ToChannelTimeShiftConfigurationPtrOutputWithContext(context.Background())
}

func (o ChannelTimeShiftConfigurationOutput) ToChannelTimeShiftConfigurationPtrOutputWithContext(ctx context.Context) ChannelTimeShiftConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelTimeShiftConfiguration) *ChannelTimeShiftConfiguration {
		return &v
	}).(ChannelTimeShiftConfigurationPtrOutput)
}

// <p>The maximum time delay for time-shifted viewing. The minimum allowed maximum time delay is 0 seconds, and the maximum allowed maximum time delay is 21600 seconds (6 hours).</p>
func (o ChannelTimeShiftConfigurationOutput) MaxTimeDelaySeconds() pulumi.Float64Output {
	return o.ApplyT(func(v ChannelTimeShiftConfiguration) float64 { return v.MaxTimeDelaySeconds }).(pulumi.Float64Output)
}

type ChannelTimeShiftConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ChannelTimeShiftConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelTimeShiftConfiguration)(nil)).Elem()
}

func (o ChannelTimeShiftConfigurationPtrOutput) ToChannelTimeShiftConfigurationPtrOutput() ChannelTimeShiftConfigurationPtrOutput {
	return o
}

func (o ChannelTimeShiftConfigurationPtrOutput) ToChannelTimeShiftConfigurationPtrOutputWithContext(ctx context.Context) ChannelTimeShiftConfigurationPtrOutput {
	return o
}

func (o ChannelTimeShiftConfigurationPtrOutput) Elem() ChannelTimeShiftConfigurationOutput {
	return o.ApplyT(func(v *ChannelTimeShiftConfiguration) ChannelTimeShiftConfiguration {
		if v != nil {
			return *v
		}
		var ret ChannelTimeShiftConfiguration
		return ret
	}).(ChannelTimeShiftConfigurationOutput)
}

// <p>The maximum time delay for time-shifted viewing. The minimum allowed maximum time delay is 0 seconds, and the maximum allowed maximum time delay is 21600 seconds (6 hours).</p>
func (o ChannelTimeShiftConfigurationPtrOutput) MaxTimeDelaySeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ChannelTimeShiftConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxTimeDelaySeconds
	}).(pulumi.Float64PtrOutput)
}

// <p>The HTTP package configuration properties for the requested VOD source.</p>
type LiveSourceHttpPackageConfiguration struct {
	// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
	Path string `pulumi:"path"`
	// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
	SourceGroup string         `pulumi:"sourceGroup"`
	Type        LiveSourceType `pulumi:"type"`
}

// LiveSourceHttpPackageConfigurationInput is an input type that accepts LiveSourceHttpPackageConfigurationArgs and LiveSourceHttpPackageConfigurationOutput values.
// You can construct a concrete instance of `LiveSourceHttpPackageConfigurationInput` via:
//
//	LiveSourceHttpPackageConfigurationArgs{...}
type LiveSourceHttpPackageConfigurationInput interface {
	pulumi.Input

	ToLiveSourceHttpPackageConfigurationOutput() LiveSourceHttpPackageConfigurationOutput
	ToLiveSourceHttpPackageConfigurationOutputWithContext(context.Context) LiveSourceHttpPackageConfigurationOutput
}

// <p>The HTTP package configuration properties for the requested VOD source.</p>
type LiveSourceHttpPackageConfigurationArgs struct {
	// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
	Path pulumi.StringInput `pulumi:"path"`
	// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
	SourceGroup pulumi.StringInput  `pulumi:"sourceGroup"`
	Type        LiveSourceTypeInput `pulumi:"type"`
}

func (LiveSourceHttpPackageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveSourceHttpPackageConfiguration)(nil)).Elem()
}

func (i LiveSourceHttpPackageConfigurationArgs) ToLiveSourceHttpPackageConfigurationOutput() LiveSourceHttpPackageConfigurationOutput {
	return i.ToLiveSourceHttpPackageConfigurationOutputWithContext(context.Background())
}

func (i LiveSourceHttpPackageConfigurationArgs) ToLiveSourceHttpPackageConfigurationOutputWithContext(ctx context.Context) LiveSourceHttpPackageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveSourceHttpPackageConfigurationOutput)
}

// LiveSourceHttpPackageConfigurationArrayInput is an input type that accepts LiveSourceHttpPackageConfigurationArray and LiveSourceHttpPackageConfigurationArrayOutput values.
// You can construct a concrete instance of `LiveSourceHttpPackageConfigurationArrayInput` via:
//
//	LiveSourceHttpPackageConfigurationArray{ LiveSourceHttpPackageConfigurationArgs{...} }
type LiveSourceHttpPackageConfigurationArrayInput interface {
	pulumi.Input

	ToLiveSourceHttpPackageConfigurationArrayOutput() LiveSourceHttpPackageConfigurationArrayOutput
	ToLiveSourceHttpPackageConfigurationArrayOutputWithContext(context.Context) LiveSourceHttpPackageConfigurationArrayOutput
}

type LiveSourceHttpPackageConfigurationArray []LiveSourceHttpPackageConfigurationInput

func (LiveSourceHttpPackageConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveSourceHttpPackageConfiguration)(nil)).Elem()
}

func (i LiveSourceHttpPackageConfigurationArray) ToLiveSourceHttpPackageConfigurationArrayOutput() LiveSourceHttpPackageConfigurationArrayOutput {
	return i.ToLiveSourceHttpPackageConfigurationArrayOutputWithContext(context.Background())
}

func (i LiveSourceHttpPackageConfigurationArray) ToLiveSourceHttpPackageConfigurationArrayOutputWithContext(ctx context.Context) LiveSourceHttpPackageConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveSourceHttpPackageConfigurationArrayOutput)
}

// <p>The HTTP package configuration properties for the requested VOD source.</p>
type LiveSourceHttpPackageConfigurationOutput struct{ *pulumi.OutputState }

func (LiveSourceHttpPackageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveSourceHttpPackageConfiguration)(nil)).Elem()
}

func (o LiveSourceHttpPackageConfigurationOutput) ToLiveSourceHttpPackageConfigurationOutput() LiveSourceHttpPackageConfigurationOutput {
	return o
}

func (o LiveSourceHttpPackageConfigurationOutput) ToLiveSourceHttpPackageConfigurationOutputWithContext(ctx context.Context) LiveSourceHttpPackageConfigurationOutput {
	return o
}

// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
func (o LiveSourceHttpPackageConfigurationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LiveSourceHttpPackageConfiguration) string { return v.Path }).(pulumi.StringOutput)
}

// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
func (o LiveSourceHttpPackageConfigurationOutput) SourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LiveSourceHttpPackageConfiguration) string { return v.SourceGroup }).(pulumi.StringOutput)
}

func (o LiveSourceHttpPackageConfigurationOutput) Type() LiveSourceTypeOutput {
	return o.ApplyT(func(v LiveSourceHttpPackageConfiguration) LiveSourceType { return v.Type }).(LiveSourceTypeOutput)
}

type LiveSourceHttpPackageConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LiveSourceHttpPackageConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveSourceHttpPackageConfiguration)(nil)).Elem()
}

func (o LiveSourceHttpPackageConfigurationArrayOutput) ToLiveSourceHttpPackageConfigurationArrayOutput() LiveSourceHttpPackageConfigurationArrayOutput {
	return o
}

func (o LiveSourceHttpPackageConfigurationArrayOutput) ToLiveSourceHttpPackageConfigurationArrayOutputWithContext(ctx context.Context) LiveSourceHttpPackageConfigurationArrayOutput {
	return o
}

func (o LiveSourceHttpPackageConfigurationArrayOutput) Index(i pulumi.IntInput) LiveSourceHttpPackageConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveSourceHttpPackageConfiguration {
		return vs[0].([]LiveSourceHttpPackageConfiguration)[vs[1].(int)]
	}).(LiveSourceHttpPackageConfigurationOutput)
}

type LiveSourceTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
type PlaybackConfigurationAdMarkerPassthrough struct {
	// Enables ad marker passthrough for your configuration.
	Enabled *bool `pulumi:"enabled"`
}

// PlaybackConfigurationAdMarkerPassthroughInput is an input type that accepts PlaybackConfigurationAdMarkerPassthroughArgs and PlaybackConfigurationAdMarkerPassthroughOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAdMarkerPassthroughInput` via:
//
//	PlaybackConfigurationAdMarkerPassthroughArgs{...}
type PlaybackConfigurationAdMarkerPassthroughInput interface {
	pulumi.Input

	ToPlaybackConfigurationAdMarkerPassthroughOutput() PlaybackConfigurationAdMarkerPassthroughOutput
	ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(context.Context) PlaybackConfigurationAdMarkerPassthroughOutput
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
type PlaybackConfigurationAdMarkerPassthroughArgs struct {
	// Enables ad marker passthrough for your configuration.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (PlaybackConfigurationAdMarkerPassthroughArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughOutput() PlaybackConfigurationAdMarkerPassthroughOutput {
	return i.ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAdMarkerPassthroughOutput)
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return i.ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAdMarkerPassthroughArgs) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAdMarkerPassthroughOutput).ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx)
}

// PlaybackConfigurationAdMarkerPassthroughPtrInput is an input type that accepts PlaybackConfigurationAdMarkerPassthroughArgs, PlaybackConfigurationAdMarkerPassthroughPtr and PlaybackConfigurationAdMarkerPassthroughPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAdMarkerPassthroughPtrInput` via:
//
//	        PlaybackConfigurationAdMarkerPassthroughArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationAdMarkerPassthroughPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput
	ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput
}

type playbackConfigurationAdMarkerPassthroughPtrType PlaybackConfigurationAdMarkerPassthroughArgs

func PlaybackConfigurationAdMarkerPassthroughPtr(v *PlaybackConfigurationAdMarkerPassthroughArgs) PlaybackConfigurationAdMarkerPassthroughPtrInput {
	return (*playbackConfigurationAdMarkerPassthroughPtrType)(v)
}

func (*playbackConfigurationAdMarkerPassthroughPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (i *playbackConfigurationAdMarkerPassthroughPtrType) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return i.ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationAdMarkerPassthroughPtrType) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
type PlaybackConfigurationAdMarkerPassthroughOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAdMarkerPassthroughOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughOutput() PlaybackConfigurationAdMarkerPassthroughOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationAdMarkerPassthroughOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationAdMarkerPassthrough) *PlaybackConfigurationAdMarkerPassthrough {
		return &v
	}).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

// Enables ad marker passthrough for your configuration.
func (o PlaybackConfigurationAdMarkerPassthroughOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationAdMarkerPassthrough) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type PlaybackConfigurationAdMarkerPassthroughPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAdMarkerPassthroughPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAdMarkerPassthrough)(nil)).Elem()
}

func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutput() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) ToPlaybackConfigurationAdMarkerPassthroughPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o
}

func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) Elem() PlaybackConfigurationAdMarkerPassthroughOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAdMarkerPassthrough) PlaybackConfigurationAdMarkerPassthrough {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationAdMarkerPassthrough
		return ret
	}).(PlaybackConfigurationAdMarkerPassthroughOutput)
}

// Enables ad marker passthrough for your configuration.
func (o PlaybackConfigurationAdMarkerPassthroughPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAdMarkerPassthrough) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
type PlaybackConfigurationAvailSuppression struct {
	// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
	Mode *PlaybackConfigurationAvailSuppressionMode `pulumi:"mode"`
	// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
	Value *string `pulumi:"value"`
}

// PlaybackConfigurationAvailSuppressionInput is an input type that accepts PlaybackConfigurationAvailSuppressionArgs and PlaybackConfigurationAvailSuppressionOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAvailSuppressionInput` via:
//
//	PlaybackConfigurationAvailSuppressionArgs{...}
type PlaybackConfigurationAvailSuppressionInput interface {
	pulumi.Input

	ToPlaybackConfigurationAvailSuppressionOutput() PlaybackConfigurationAvailSuppressionOutput
	ToPlaybackConfigurationAvailSuppressionOutputWithContext(context.Context) PlaybackConfigurationAvailSuppressionOutput
}

// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
type PlaybackConfigurationAvailSuppressionArgs struct {
	// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
	Mode PlaybackConfigurationAvailSuppressionModePtrInput `pulumi:"mode"`
	// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PlaybackConfigurationAvailSuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionOutput() PlaybackConfigurationAvailSuppressionOutput {
	return i.ToPlaybackConfigurationAvailSuppressionOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAvailSuppressionOutput)
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return i.ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationAvailSuppressionArgs) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAvailSuppressionOutput).ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx)
}

// PlaybackConfigurationAvailSuppressionPtrInput is an input type that accepts PlaybackConfigurationAvailSuppressionArgs, PlaybackConfigurationAvailSuppressionPtr and PlaybackConfigurationAvailSuppressionPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationAvailSuppressionPtrInput` via:
//
//	        PlaybackConfigurationAvailSuppressionArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationAvailSuppressionPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput
	ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Context) PlaybackConfigurationAvailSuppressionPtrOutput
}

type playbackConfigurationAvailSuppressionPtrType PlaybackConfigurationAvailSuppressionArgs

func PlaybackConfigurationAvailSuppressionPtr(v *PlaybackConfigurationAvailSuppressionArgs) PlaybackConfigurationAvailSuppressionPtrInput {
	return (*playbackConfigurationAvailSuppressionPtrType)(v)
}

func (*playbackConfigurationAvailSuppressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (i *playbackConfigurationAvailSuppressionPtrType) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return i.ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationAvailSuppressionPtrType) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationAvailSuppressionPtrOutput)
}

// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
type PlaybackConfigurationAvailSuppressionOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAvailSuppressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionOutput() PlaybackConfigurationAvailSuppressionOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return o.ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationAvailSuppressionOutput) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationAvailSuppression) *PlaybackConfigurationAvailSuppression {
		return &v
	}).(PlaybackConfigurationAvailSuppressionPtrOutput)
}

// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
func (o PlaybackConfigurationAvailSuppressionOutput) Mode() PlaybackConfigurationAvailSuppressionModePtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationAvailSuppression) *PlaybackConfigurationAvailSuppressionMode {
		return v.Mode
	}).(PlaybackConfigurationAvailSuppressionModePtrOutput)
}

// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
func (o PlaybackConfigurationAvailSuppressionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationAvailSuppression) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PlaybackConfigurationAvailSuppressionPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationAvailSuppressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationAvailSuppression)(nil)).Elem()
}

func (o PlaybackConfigurationAvailSuppressionPtrOutput) ToPlaybackConfigurationAvailSuppressionPtrOutput() PlaybackConfigurationAvailSuppressionPtrOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionPtrOutput) ToPlaybackConfigurationAvailSuppressionPtrOutputWithContext(ctx context.Context) PlaybackConfigurationAvailSuppressionPtrOutput {
	return o
}

func (o PlaybackConfigurationAvailSuppressionPtrOutput) Elem() PlaybackConfigurationAvailSuppressionOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAvailSuppression) PlaybackConfigurationAvailSuppression {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationAvailSuppression
		return ret
	}).(PlaybackConfigurationAvailSuppressionOutput)
}

// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
func (o PlaybackConfigurationAvailSuppressionPtrOutput) Mode() PlaybackConfigurationAvailSuppressionModePtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAvailSuppression) *PlaybackConfigurationAvailSuppressionMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(PlaybackConfigurationAvailSuppressionModePtrOutput)
}

// A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
func (o PlaybackConfigurationAvailSuppressionPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationAvailSuppression) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
type PlaybackConfigurationBumper struct {
	// The URL for the end bumper asset.
	EndUrl *string `pulumi:"endUrl"`
	// The URL for the start bumper asset.
	StartUrl *string `pulumi:"startUrl"`
}

// PlaybackConfigurationBumperInput is an input type that accepts PlaybackConfigurationBumperArgs and PlaybackConfigurationBumperOutput values.
// You can construct a concrete instance of `PlaybackConfigurationBumperInput` via:
//
//	PlaybackConfigurationBumperArgs{...}
type PlaybackConfigurationBumperInput interface {
	pulumi.Input

	ToPlaybackConfigurationBumperOutput() PlaybackConfigurationBumperOutput
	ToPlaybackConfigurationBumperOutputWithContext(context.Context) PlaybackConfigurationBumperOutput
}

// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
type PlaybackConfigurationBumperArgs struct {
	// The URL for the end bumper asset.
	EndUrl pulumi.StringPtrInput `pulumi:"endUrl"`
	// The URL for the start bumper asset.
	StartUrl pulumi.StringPtrInput `pulumi:"startUrl"`
}

func (PlaybackConfigurationBumperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationBumper)(nil)).Elem()
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperOutput() PlaybackConfigurationBumperOutput {
	return i.ToPlaybackConfigurationBumperOutputWithContext(context.Background())
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperOutputWithContext(ctx context.Context) PlaybackConfigurationBumperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationBumperOutput)
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return i.ToPlaybackConfigurationBumperPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationBumperArgs) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationBumperOutput).ToPlaybackConfigurationBumperPtrOutputWithContext(ctx)
}

// PlaybackConfigurationBumperPtrInput is an input type that accepts PlaybackConfigurationBumperArgs, PlaybackConfigurationBumperPtr and PlaybackConfigurationBumperPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationBumperPtrInput` via:
//
//	        PlaybackConfigurationBumperArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationBumperPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput
	ToPlaybackConfigurationBumperPtrOutputWithContext(context.Context) PlaybackConfigurationBumperPtrOutput
}

type playbackConfigurationBumperPtrType PlaybackConfigurationBumperArgs

func PlaybackConfigurationBumperPtr(v *PlaybackConfigurationBumperArgs) PlaybackConfigurationBumperPtrInput {
	return (*playbackConfigurationBumperPtrType)(v)
}

func (*playbackConfigurationBumperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationBumper)(nil)).Elem()
}

func (i *playbackConfigurationBumperPtrType) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return i.ToPlaybackConfigurationBumperPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationBumperPtrType) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationBumperPtrOutput)
}

// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
type PlaybackConfigurationBumperOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationBumperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationBumper)(nil)).Elem()
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperOutput() PlaybackConfigurationBumperOutput {
	return o
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperOutputWithContext(ctx context.Context) PlaybackConfigurationBumperOutput {
	return o
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return o.ToPlaybackConfigurationBumperPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationBumperOutput) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationBumper) *PlaybackConfigurationBumper {
		return &v
	}).(PlaybackConfigurationBumperPtrOutput)
}

// The URL for the end bumper asset.
func (o PlaybackConfigurationBumperOutput) EndUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationBumper) *string { return v.EndUrl }).(pulumi.StringPtrOutput)
}

// The URL for the start bumper asset.
func (o PlaybackConfigurationBumperOutput) StartUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationBumper) *string { return v.StartUrl }).(pulumi.StringPtrOutput)
}

type PlaybackConfigurationBumperPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationBumperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationBumper)(nil)).Elem()
}

func (o PlaybackConfigurationBumperPtrOutput) ToPlaybackConfigurationBumperPtrOutput() PlaybackConfigurationBumperPtrOutput {
	return o
}

func (o PlaybackConfigurationBumperPtrOutput) ToPlaybackConfigurationBumperPtrOutputWithContext(ctx context.Context) PlaybackConfigurationBumperPtrOutput {
	return o
}

func (o PlaybackConfigurationBumperPtrOutput) Elem() PlaybackConfigurationBumperOutput {
	return o.ApplyT(func(v *PlaybackConfigurationBumper) PlaybackConfigurationBumper {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationBumper
		return ret
	}).(PlaybackConfigurationBumperOutput)
}

// The URL for the end bumper asset.
func (o PlaybackConfigurationBumperPtrOutput) EndUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationBumper) *string {
		if v == nil {
			return nil
		}
		return v.EndUrl
	}).(pulumi.StringPtrOutput)
}

// The URL for the start bumper asset.
func (o PlaybackConfigurationBumperPtrOutput) StartUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationBumper) *string {
		if v == nil {
			return nil
		}
		return v.StartUrl
	}).(pulumi.StringPtrOutput)
}

// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
type PlaybackConfigurationCdnConfiguration struct {
	// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
	AdSegmentUrlPrefix *string `pulumi:"adSegmentUrlPrefix"`
	// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
	ContentSegmentUrlPrefix *string `pulumi:"contentSegmentUrlPrefix"`
}

// PlaybackConfigurationCdnConfigurationInput is an input type that accepts PlaybackConfigurationCdnConfigurationArgs and PlaybackConfigurationCdnConfigurationOutput values.
// You can construct a concrete instance of `PlaybackConfigurationCdnConfigurationInput` via:
//
//	PlaybackConfigurationCdnConfigurationArgs{...}
type PlaybackConfigurationCdnConfigurationInput interface {
	pulumi.Input

	ToPlaybackConfigurationCdnConfigurationOutput() PlaybackConfigurationCdnConfigurationOutput
	ToPlaybackConfigurationCdnConfigurationOutputWithContext(context.Context) PlaybackConfigurationCdnConfigurationOutput
}

// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
type PlaybackConfigurationCdnConfigurationArgs struct {
	// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
	AdSegmentUrlPrefix pulumi.StringPtrInput `pulumi:"adSegmentUrlPrefix"`
	// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
	ContentSegmentUrlPrefix pulumi.StringPtrInput `pulumi:"contentSegmentUrlPrefix"`
}

func (PlaybackConfigurationCdnConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationOutput() PlaybackConfigurationCdnConfigurationOutput {
	return i.ToPlaybackConfigurationCdnConfigurationOutputWithContext(context.Background())
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationCdnConfigurationOutput)
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return i.ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationCdnConfigurationArgs) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationCdnConfigurationOutput).ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx)
}

// PlaybackConfigurationCdnConfigurationPtrInput is an input type that accepts PlaybackConfigurationCdnConfigurationArgs, PlaybackConfigurationCdnConfigurationPtr and PlaybackConfigurationCdnConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationCdnConfigurationPtrInput` via:
//
//	        PlaybackConfigurationCdnConfigurationArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationCdnConfigurationPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput
	ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Context) PlaybackConfigurationCdnConfigurationPtrOutput
}

type playbackConfigurationCdnConfigurationPtrType PlaybackConfigurationCdnConfigurationArgs

func PlaybackConfigurationCdnConfigurationPtr(v *PlaybackConfigurationCdnConfigurationArgs) PlaybackConfigurationCdnConfigurationPtrInput {
	return (*playbackConfigurationCdnConfigurationPtrType)(v)
}

func (*playbackConfigurationCdnConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (i *playbackConfigurationCdnConfigurationPtrType) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return i.ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationCdnConfigurationPtrType) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationCdnConfigurationPtrOutput)
}

// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
type PlaybackConfigurationCdnConfigurationOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationCdnConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationOutput() PlaybackConfigurationCdnConfigurationOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return o.ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationCdnConfigurationOutput) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationCdnConfiguration) *PlaybackConfigurationCdnConfiguration {
		return &v
	}).(PlaybackConfigurationCdnConfigurationPtrOutput)
}

// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
func (o PlaybackConfigurationCdnConfigurationOutput) AdSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationCdnConfiguration) *string { return v.AdSegmentUrlPrefix }).(pulumi.StringPtrOutput)
}

// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
func (o PlaybackConfigurationCdnConfigurationOutput) ContentSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationCdnConfiguration) *string { return v.ContentSegmentUrlPrefix }).(pulumi.StringPtrOutput)
}

type PlaybackConfigurationCdnConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationCdnConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationCdnConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationCdnConfigurationPtrOutput) ToPlaybackConfigurationCdnConfigurationPtrOutput() PlaybackConfigurationCdnConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationPtrOutput) ToPlaybackConfigurationCdnConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationCdnConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationCdnConfigurationPtrOutput) Elem() PlaybackConfigurationCdnConfigurationOutput {
	return o.ApplyT(func(v *PlaybackConfigurationCdnConfiguration) PlaybackConfigurationCdnConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationCdnConfiguration
		return ret
	}).(PlaybackConfigurationCdnConfigurationOutput)
}

// A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
func (o PlaybackConfigurationCdnConfigurationPtrOutput) AdSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationCdnConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdSegmentUrlPrefix
	}).(pulumi.StringPtrOutput)
}

// A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
func (o PlaybackConfigurationCdnConfigurationPtrOutput) ContentSegmentUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationCdnConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ContentSegmentUrlPrefix
	}).(pulumi.StringPtrOutput)
}

// The predefined aliases for dynamic variables.
type PlaybackConfigurationConfigurationAliases struct {
}

// PlaybackConfigurationConfigurationAliasesInput is an input type that accepts PlaybackConfigurationConfigurationAliasesArgs and PlaybackConfigurationConfigurationAliasesOutput values.
// You can construct a concrete instance of `PlaybackConfigurationConfigurationAliasesInput` via:
//
//	PlaybackConfigurationConfigurationAliasesArgs{...}
type PlaybackConfigurationConfigurationAliasesInput interface {
	pulumi.Input

	ToPlaybackConfigurationConfigurationAliasesOutput() PlaybackConfigurationConfigurationAliasesOutput
	ToPlaybackConfigurationConfigurationAliasesOutputWithContext(context.Context) PlaybackConfigurationConfigurationAliasesOutput
}

// The predefined aliases for dynamic variables.
type PlaybackConfigurationConfigurationAliasesArgs struct {
}

func (PlaybackConfigurationConfigurationAliasesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesOutput() PlaybackConfigurationConfigurationAliasesOutput {
	return i.ToPlaybackConfigurationConfigurationAliasesOutputWithContext(context.Background())
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationConfigurationAliasesOutput)
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return i.ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationConfigurationAliasesArgs) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationConfigurationAliasesOutput).ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx)
}

// PlaybackConfigurationConfigurationAliasesPtrInput is an input type that accepts PlaybackConfigurationConfigurationAliasesArgs, PlaybackConfigurationConfigurationAliasesPtr and PlaybackConfigurationConfigurationAliasesPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationConfigurationAliasesPtrInput` via:
//
//	        PlaybackConfigurationConfigurationAliasesArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationConfigurationAliasesPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput
	ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput
}

type playbackConfigurationConfigurationAliasesPtrType PlaybackConfigurationConfigurationAliasesArgs

func PlaybackConfigurationConfigurationAliasesPtr(v *PlaybackConfigurationConfigurationAliasesArgs) PlaybackConfigurationConfigurationAliasesPtrInput {
	return (*playbackConfigurationConfigurationAliasesPtrType)(v)
}

func (*playbackConfigurationConfigurationAliasesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (i *playbackConfigurationConfigurationAliasesPtrType) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return i.ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationConfigurationAliasesPtrType) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationConfigurationAliasesPtrOutput)
}

// The predefined aliases for dynamic variables.
type PlaybackConfigurationConfigurationAliasesOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationConfigurationAliasesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesOutput() PlaybackConfigurationConfigurationAliasesOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o.ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationConfigurationAliasesOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationConfigurationAliases) *PlaybackConfigurationConfigurationAliases {
		return &v
	}).(PlaybackConfigurationConfigurationAliasesPtrOutput)
}

type PlaybackConfigurationConfigurationAliasesPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationConfigurationAliasesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationConfigurationAliases)(nil)).Elem()
}

func (o PlaybackConfigurationConfigurationAliasesPtrOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutput() PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesPtrOutput) ToPlaybackConfigurationConfigurationAliasesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationConfigurationAliasesPtrOutput {
	return o
}

func (o PlaybackConfigurationConfigurationAliasesPtrOutput) Elem() PlaybackConfigurationConfigurationAliasesOutput {
	return o.ApplyT(func(v *PlaybackConfigurationConfigurationAliases) PlaybackConfigurationConfigurationAliases {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationConfigurationAliases
		return ret
	}).(PlaybackConfigurationConfigurationAliasesOutput)
}

// The configuration for DASH PUT operations.
type PlaybackConfigurationDashConfiguration struct {
	// The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
	ManifestEndpointPrefix *string `pulumi:"manifestEndpointPrefix"`
	// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
	MpdLocation *string `pulumi:"mpdLocation"`
	// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
	OriginManifestType *PlaybackConfigurationDashConfigurationOriginManifestType `pulumi:"originManifestType"`
}

// PlaybackConfigurationDashConfigurationInput is an input type that accepts PlaybackConfigurationDashConfigurationArgs and PlaybackConfigurationDashConfigurationOutput values.
// You can construct a concrete instance of `PlaybackConfigurationDashConfigurationInput` via:
//
//	PlaybackConfigurationDashConfigurationArgs{...}
type PlaybackConfigurationDashConfigurationInput interface {
	pulumi.Input

	ToPlaybackConfigurationDashConfigurationOutput() PlaybackConfigurationDashConfigurationOutput
	ToPlaybackConfigurationDashConfigurationOutputWithContext(context.Context) PlaybackConfigurationDashConfigurationOutput
}

// The configuration for DASH PUT operations.
type PlaybackConfigurationDashConfigurationArgs struct {
	// The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
	ManifestEndpointPrefix pulumi.StringPtrInput `pulumi:"manifestEndpointPrefix"`
	// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
	MpdLocation pulumi.StringPtrInput `pulumi:"mpdLocation"`
	// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
	OriginManifestType PlaybackConfigurationDashConfigurationOriginManifestTypePtrInput `pulumi:"originManifestType"`
}

func (PlaybackConfigurationDashConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationDashConfiguration)(nil)).Elem()
}

func (i PlaybackConfigurationDashConfigurationArgs) ToPlaybackConfigurationDashConfigurationOutput() PlaybackConfigurationDashConfigurationOutput {
	return i.ToPlaybackConfigurationDashConfigurationOutputWithContext(context.Background())
}

func (i PlaybackConfigurationDashConfigurationArgs) ToPlaybackConfigurationDashConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationDashConfigurationOutput)
}

func (i PlaybackConfigurationDashConfigurationArgs) ToPlaybackConfigurationDashConfigurationPtrOutput() PlaybackConfigurationDashConfigurationPtrOutput {
	return i.ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationDashConfigurationArgs) ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationDashConfigurationOutput).ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(ctx)
}

// PlaybackConfigurationDashConfigurationPtrInput is an input type that accepts PlaybackConfigurationDashConfigurationArgs, PlaybackConfigurationDashConfigurationPtr and PlaybackConfigurationDashConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationDashConfigurationPtrInput` via:
//
//	        PlaybackConfigurationDashConfigurationArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationDashConfigurationPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationDashConfigurationPtrOutput() PlaybackConfigurationDashConfigurationPtrOutput
	ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(context.Context) PlaybackConfigurationDashConfigurationPtrOutput
}

type playbackConfigurationDashConfigurationPtrType PlaybackConfigurationDashConfigurationArgs

func PlaybackConfigurationDashConfigurationPtr(v *PlaybackConfigurationDashConfigurationArgs) PlaybackConfigurationDashConfigurationPtrInput {
	return (*playbackConfigurationDashConfigurationPtrType)(v)
}

func (*playbackConfigurationDashConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationDashConfiguration)(nil)).Elem()
}

func (i *playbackConfigurationDashConfigurationPtrType) ToPlaybackConfigurationDashConfigurationPtrOutput() PlaybackConfigurationDashConfigurationPtrOutput {
	return i.ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationDashConfigurationPtrType) ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationDashConfigurationPtrOutput)
}

// The configuration for DASH PUT operations.
type PlaybackConfigurationDashConfigurationOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationDashConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationDashConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationDashConfigurationOutput) ToPlaybackConfigurationDashConfigurationOutput() PlaybackConfigurationDashConfigurationOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationOutput) ToPlaybackConfigurationDashConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationOutput) ToPlaybackConfigurationDashConfigurationPtrOutput() PlaybackConfigurationDashConfigurationPtrOutput {
	return o.ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationDashConfigurationOutput) ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationDashConfiguration) *PlaybackConfigurationDashConfiguration {
		return &v
	}).(PlaybackConfigurationDashConfigurationPtrOutput)
}

// The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
func (o PlaybackConfigurationDashConfigurationOutput) ManifestEndpointPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationDashConfiguration) *string { return v.ManifestEndpointPrefix }).(pulumi.StringPtrOutput)
}

// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
func (o PlaybackConfigurationDashConfigurationOutput) MpdLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationDashConfiguration) *string { return v.MpdLocation }).(pulumi.StringPtrOutput)
}

// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
func (o PlaybackConfigurationDashConfigurationOutput) OriginManifestType() PlaybackConfigurationDashConfigurationOriginManifestTypePtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationDashConfiguration) *PlaybackConfigurationDashConfigurationOriginManifestType {
		return v.OriginManifestType
	}).(PlaybackConfigurationDashConfigurationOriginManifestTypePtrOutput)
}

type PlaybackConfigurationDashConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationDashConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationDashConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationDashConfigurationPtrOutput) ToPlaybackConfigurationDashConfigurationPtrOutput() PlaybackConfigurationDashConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationPtrOutput) ToPlaybackConfigurationDashConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationDashConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationDashConfigurationPtrOutput) Elem() PlaybackConfigurationDashConfigurationOutput {
	return o.ApplyT(func(v *PlaybackConfigurationDashConfiguration) PlaybackConfigurationDashConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationDashConfiguration
		return ret
	}).(PlaybackConfigurationDashConfigurationOutput)
}

// The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
func (o PlaybackConfigurationDashConfigurationPtrOutput) ManifestEndpointPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationDashConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ManifestEndpointPrefix
	}).(pulumi.StringPtrOutput)
}

// The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
func (o PlaybackConfigurationDashConfigurationPtrOutput) MpdLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationDashConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MpdLocation
	}).(pulumi.StringPtrOutput)
}

// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
func (o PlaybackConfigurationDashConfigurationPtrOutput) OriginManifestType() PlaybackConfigurationDashConfigurationOriginManifestTypePtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationDashConfiguration) *PlaybackConfigurationDashConfigurationOriginManifestType {
		if v == nil {
			return nil
		}
		return v.OriginManifestType
	}).(PlaybackConfigurationDashConfigurationOriginManifestTypePtrOutput)
}

type PlaybackConfigurationHlsConfiguration struct {
	// The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
	ManifestEndpointPrefix *string `pulumi:"manifestEndpointPrefix"`
}

// PlaybackConfigurationHlsConfigurationInput is an input type that accepts PlaybackConfigurationHlsConfigurationArgs and PlaybackConfigurationHlsConfigurationOutput values.
// You can construct a concrete instance of `PlaybackConfigurationHlsConfigurationInput` via:
//
//	PlaybackConfigurationHlsConfigurationArgs{...}
type PlaybackConfigurationHlsConfigurationInput interface {
	pulumi.Input

	ToPlaybackConfigurationHlsConfigurationOutput() PlaybackConfigurationHlsConfigurationOutput
	ToPlaybackConfigurationHlsConfigurationOutputWithContext(context.Context) PlaybackConfigurationHlsConfigurationOutput
}

type PlaybackConfigurationHlsConfigurationArgs struct {
	// The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
	ManifestEndpointPrefix pulumi.StringPtrInput `pulumi:"manifestEndpointPrefix"`
}

func (PlaybackConfigurationHlsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationHlsConfiguration)(nil)).Elem()
}

func (i PlaybackConfigurationHlsConfigurationArgs) ToPlaybackConfigurationHlsConfigurationOutput() PlaybackConfigurationHlsConfigurationOutput {
	return i.ToPlaybackConfigurationHlsConfigurationOutputWithContext(context.Background())
}

func (i PlaybackConfigurationHlsConfigurationArgs) ToPlaybackConfigurationHlsConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationHlsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationHlsConfigurationOutput)
}

func (i PlaybackConfigurationHlsConfigurationArgs) ToPlaybackConfigurationHlsConfigurationPtrOutput() PlaybackConfigurationHlsConfigurationPtrOutput {
	return i.ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationHlsConfigurationArgs) ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationHlsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationHlsConfigurationOutput).ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(ctx)
}

// PlaybackConfigurationHlsConfigurationPtrInput is an input type that accepts PlaybackConfigurationHlsConfigurationArgs, PlaybackConfigurationHlsConfigurationPtr and PlaybackConfigurationHlsConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationHlsConfigurationPtrInput` via:
//
//	        PlaybackConfigurationHlsConfigurationArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationHlsConfigurationPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationHlsConfigurationPtrOutput() PlaybackConfigurationHlsConfigurationPtrOutput
	ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(context.Context) PlaybackConfigurationHlsConfigurationPtrOutput
}

type playbackConfigurationHlsConfigurationPtrType PlaybackConfigurationHlsConfigurationArgs

func PlaybackConfigurationHlsConfigurationPtr(v *PlaybackConfigurationHlsConfigurationArgs) PlaybackConfigurationHlsConfigurationPtrInput {
	return (*playbackConfigurationHlsConfigurationPtrType)(v)
}

func (*playbackConfigurationHlsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationHlsConfiguration)(nil)).Elem()
}

func (i *playbackConfigurationHlsConfigurationPtrType) ToPlaybackConfigurationHlsConfigurationPtrOutput() PlaybackConfigurationHlsConfigurationPtrOutput {
	return i.ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationHlsConfigurationPtrType) ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationHlsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationHlsConfigurationPtrOutput)
}

type PlaybackConfigurationHlsConfigurationOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationHlsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationHlsConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationHlsConfigurationOutput) ToPlaybackConfigurationHlsConfigurationOutput() PlaybackConfigurationHlsConfigurationOutput {
	return o
}

func (o PlaybackConfigurationHlsConfigurationOutput) ToPlaybackConfigurationHlsConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationHlsConfigurationOutput {
	return o
}

func (o PlaybackConfigurationHlsConfigurationOutput) ToPlaybackConfigurationHlsConfigurationPtrOutput() PlaybackConfigurationHlsConfigurationPtrOutput {
	return o.ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationHlsConfigurationOutput) ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationHlsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationHlsConfiguration) *PlaybackConfigurationHlsConfiguration {
		return &v
	}).(PlaybackConfigurationHlsConfigurationPtrOutput)
}

// The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
func (o PlaybackConfigurationHlsConfigurationOutput) ManifestEndpointPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationHlsConfiguration) *string { return v.ManifestEndpointPrefix }).(pulumi.StringPtrOutput)
}

type PlaybackConfigurationHlsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationHlsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationHlsConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationHlsConfigurationPtrOutput) ToPlaybackConfigurationHlsConfigurationPtrOutput() PlaybackConfigurationHlsConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationHlsConfigurationPtrOutput) ToPlaybackConfigurationHlsConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationHlsConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationHlsConfigurationPtrOutput) Elem() PlaybackConfigurationHlsConfigurationOutput {
	return o.ApplyT(func(v *PlaybackConfigurationHlsConfiguration) PlaybackConfigurationHlsConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationHlsConfiguration
		return ret
	}).(PlaybackConfigurationHlsConfigurationOutput)
}

// The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
func (o PlaybackConfigurationHlsConfigurationPtrOutput) ManifestEndpointPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationHlsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ManifestEndpointPrefix
	}).(pulumi.StringPtrOutput)
}

// The configuration for pre-roll ad insertion.
type PlaybackConfigurationLivePreRollConfiguration struct {
	// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
	AdDecisionServerUrl *string `pulumi:"adDecisionServerUrl"`
	// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
}

// PlaybackConfigurationLivePreRollConfigurationInput is an input type that accepts PlaybackConfigurationLivePreRollConfigurationArgs and PlaybackConfigurationLivePreRollConfigurationOutput values.
// You can construct a concrete instance of `PlaybackConfigurationLivePreRollConfigurationInput` via:
//
//	PlaybackConfigurationLivePreRollConfigurationArgs{...}
type PlaybackConfigurationLivePreRollConfigurationInput interface {
	pulumi.Input

	ToPlaybackConfigurationLivePreRollConfigurationOutput() PlaybackConfigurationLivePreRollConfigurationOutput
	ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(context.Context) PlaybackConfigurationLivePreRollConfigurationOutput
}

// The configuration for pre-roll ad insertion.
type PlaybackConfigurationLivePreRollConfigurationArgs struct {
	// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
	AdDecisionServerUrl pulumi.StringPtrInput `pulumi:"adDecisionServerUrl"`
	// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
	MaxDurationSeconds pulumi.IntPtrInput `pulumi:"maxDurationSeconds"`
}

func (PlaybackConfigurationLivePreRollConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationOutput() PlaybackConfigurationLivePreRollConfigurationOutput {
	return i.ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(context.Background())
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationLivePreRollConfigurationOutput)
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return i.ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationLivePreRollConfigurationArgs) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationLivePreRollConfigurationOutput).ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx)
}

// PlaybackConfigurationLivePreRollConfigurationPtrInput is an input type that accepts PlaybackConfigurationLivePreRollConfigurationArgs, PlaybackConfigurationLivePreRollConfigurationPtr and PlaybackConfigurationLivePreRollConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationLivePreRollConfigurationPtrInput` via:
//
//	        PlaybackConfigurationLivePreRollConfigurationArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationLivePreRollConfigurationPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput
	ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput
}

type playbackConfigurationLivePreRollConfigurationPtrType PlaybackConfigurationLivePreRollConfigurationArgs

func PlaybackConfigurationLivePreRollConfigurationPtr(v *PlaybackConfigurationLivePreRollConfigurationArgs) PlaybackConfigurationLivePreRollConfigurationPtrInput {
	return (*playbackConfigurationLivePreRollConfigurationPtrType)(v)
}

func (*playbackConfigurationLivePreRollConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (i *playbackConfigurationLivePreRollConfigurationPtrType) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return i.ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationLivePreRollConfigurationPtrType) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationLivePreRollConfigurationPtrOutput)
}

// The configuration for pre-roll ad insertion.
type PlaybackConfigurationLivePreRollConfigurationOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationLivePreRollConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationOutput() PlaybackConfigurationLivePreRollConfigurationOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o.ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationLivePreRollConfigurationOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationLivePreRollConfiguration) *PlaybackConfigurationLivePreRollConfiguration {
		return &v
	}).(PlaybackConfigurationLivePreRollConfigurationPtrOutput)
}

// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
func (o PlaybackConfigurationLivePreRollConfigurationOutput) AdDecisionServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationLivePreRollConfiguration) *string { return v.AdDecisionServerUrl }).(pulumi.StringPtrOutput)
}

// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
func (o PlaybackConfigurationLivePreRollConfigurationOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationLivePreRollConfiguration) *int { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

type PlaybackConfigurationLivePreRollConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationLivePreRollConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationLivePreRollConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutput() PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) ToPlaybackConfigurationLivePreRollConfigurationPtrOutputWithContext(ctx context.Context) PlaybackConfigurationLivePreRollConfigurationPtrOutput {
	return o
}

func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) Elem() PlaybackConfigurationLivePreRollConfigurationOutput {
	return o.ApplyT(func(v *PlaybackConfigurationLivePreRollConfiguration) PlaybackConfigurationLivePreRollConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationLivePreRollConfiguration
		return ret
	}).(PlaybackConfigurationLivePreRollConfigurationOutput)
}

// The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) AdDecisionServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationLivePreRollConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdDecisionServerUrl
	}).(pulumi.StringPtrOutput)
}

// The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
func (o PlaybackConfigurationLivePreRollConfigurationPtrOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationLivePreRollConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
type PlaybackConfigurationManifestProcessingRules struct {
	// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
	AdMarkerPassthrough *PlaybackConfigurationAdMarkerPassthrough `pulumi:"adMarkerPassthrough"`
}

// PlaybackConfigurationManifestProcessingRulesInput is an input type that accepts PlaybackConfigurationManifestProcessingRulesArgs and PlaybackConfigurationManifestProcessingRulesOutput values.
// You can construct a concrete instance of `PlaybackConfigurationManifestProcessingRulesInput` via:
//
//	PlaybackConfigurationManifestProcessingRulesArgs{...}
type PlaybackConfigurationManifestProcessingRulesInput interface {
	pulumi.Input

	ToPlaybackConfigurationManifestProcessingRulesOutput() PlaybackConfigurationManifestProcessingRulesOutput
	ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(context.Context) PlaybackConfigurationManifestProcessingRulesOutput
}

// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
type PlaybackConfigurationManifestProcessingRulesArgs struct {
	// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
	AdMarkerPassthrough PlaybackConfigurationAdMarkerPassthroughPtrInput `pulumi:"adMarkerPassthrough"`
}

func (PlaybackConfigurationManifestProcessingRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesOutput() PlaybackConfigurationManifestProcessingRulesOutput {
	return i.ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(context.Background())
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationManifestProcessingRulesOutput)
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return i.ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Background())
}

func (i PlaybackConfigurationManifestProcessingRulesArgs) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationManifestProcessingRulesOutput).ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx)
}

// PlaybackConfigurationManifestProcessingRulesPtrInput is an input type that accepts PlaybackConfigurationManifestProcessingRulesArgs, PlaybackConfigurationManifestProcessingRulesPtr and PlaybackConfigurationManifestProcessingRulesPtrOutput values.
// You can construct a concrete instance of `PlaybackConfigurationManifestProcessingRulesPtrInput` via:
//
//	        PlaybackConfigurationManifestProcessingRulesArgs{...}
//
//	or:
//
//	        nil
type PlaybackConfigurationManifestProcessingRulesPtrInput interface {
	pulumi.Input

	ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput
	ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput
}

type playbackConfigurationManifestProcessingRulesPtrType PlaybackConfigurationManifestProcessingRulesArgs

func PlaybackConfigurationManifestProcessingRulesPtr(v *PlaybackConfigurationManifestProcessingRulesArgs) PlaybackConfigurationManifestProcessingRulesPtrInput {
	return (*playbackConfigurationManifestProcessingRulesPtrType)(v)
}

func (*playbackConfigurationManifestProcessingRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (i *playbackConfigurationManifestProcessingRulesPtrType) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return i.ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Background())
}

func (i *playbackConfigurationManifestProcessingRulesPtrType) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationManifestProcessingRulesPtrOutput)
}

// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
type PlaybackConfigurationManifestProcessingRulesOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationManifestProcessingRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesOutput() PlaybackConfigurationManifestProcessingRulesOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o.ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(context.Background())
}

func (o PlaybackConfigurationManifestProcessingRulesOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaybackConfigurationManifestProcessingRules) *PlaybackConfigurationManifestProcessingRules {
		return &v
	}).(PlaybackConfigurationManifestProcessingRulesPtrOutput)
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
func (o PlaybackConfigurationManifestProcessingRulesOutput) AdMarkerPassthrough() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ApplyT(func(v PlaybackConfigurationManifestProcessingRules) *PlaybackConfigurationAdMarkerPassthrough {
		return v.AdMarkerPassthrough
	}).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

type PlaybackConfigurationManifestProcessingRulesPtrOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationManifestProcessingRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfigurationManifestProcessingRules)(nil)).Elem()
}

func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutput() PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) ToPlaybackConfigurationManifestProcessingRulesPtrOutputWithContext(ctx context.Context) PlaybackConfigurationManifestProcessingRulesPtrOutput {
	return o
}

func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) Elem() PlaybackConfigurationManifestProcessingRulesOutput {
	return o.ApplyT(func(v *PlaybackConfigurationManifestProcessingRules) PlaybackConfigurationManifestProcessingRules {
		if v != nil {
			return *v
		}
		var ret PlaybackConfigurationManifestProcessingRules
		return ret
	}).(PlaybackConfigurationManifestProcessingRulesOutput)
}

// For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
func (o PlaybackConfigurationManifestProcessingRulesPtrOutput) AdMarkerPassthrough() PlaybackConfigurationAdMarkerPassthroughPtrOutput {
	return o.ApplyT(func(v *PlaybackConfigurationManifestProcessingRules) *PlaybackConfigurationAdMarkerPassthrough {
		if v == nil {
			return nil
		}
		return v.AdMarkerPassthrough
	}).(PlaybackConfigurationAdMarkerPassthroughPtrOutput)
}

type PlaybackConfigurationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// <p>Access configuration parameters.</p>
type SourceLocationAccessConfiguration struct {
	AccessType                             *SourceLocationAccessType                             `pulumi:"accessType"`
	SecretsManagerAccessTokenConfiguration *SourceLocationSecretsManagerAccessTokenConfiguration `pulumi:"secretsManagerAccessTokenConfiguration"`
}

// SourceLocationAccessConfigurationInput is an input type that accepts SourceLocationAccessConfigurationArgs and SourceLocationAccessConfigurationOutput values.
// You can construct a concrete instance of `SourceLocationAccessConfigurationInput` via:
//
//	SourceLocationAccessConfigurationArgs{...}
type SourceLocationAccessConfigurationInput interface {
	pulumi.Input

	ToSourceLocationAccessConfigurationOutput() SourceLocationAccessConfigurationOutput
	ToSourceLocationAccessConfigurationOutputWithContext(context.Context) SourceLocationAccessConfigurationOutput
}

// <p>Access configuration parameters.</p>
type SourceLocationAccessConfigurationArgs struct {
	AccessType                             SourceLocationAccessTypePtrInput                             `pulumi:"accessType"`
	SecretsManagerAccessTokenConfiguration SourceLocationSecretsManagerAccessTokenConfigurationPtrInput `pulumi:"secretsManagerAccessTokenConfiguration"`
}

func (SourceLocationAccessConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationAccessConfiguration)(nil)).Elem()
}

func (i SourceLocationAccessConfigurationArgs) ToSourceLocationAccessConfigurationOutput() SourceLocationAccessConfigurationOutput {
	return i.ToSourceLocationAccessConfigurationOutputWithContext(context.Background())
}

func (i SourceLocationAccessConfigurationArgs) ToSourceLocationAccessConfigurationOutputWithContext(ctx context.Context) SourceLocationAccessConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationAccessConfigurationOutput)
}

func (i SourceLocationAccessConfigurationArgs) ToSourceLocationAccessConfigurationPtrOutput() SourceLocationAccessConfigurationPtrOutput {
	return i.ToSourceLocationAccessConfigurationPtrOutputWithContext(context.Background())
}

func (i SourceLocationAccessConfigurationArgs) ToSourceLocationAccessConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationAccessConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationAccessConfigurationOutput).ToSourceLocationAccessConfigurationPtrOutputWithContext(ctx)
}

// SourceLocationAccessConfigurationPtrInput is an input type that accepts SourceLocationAccessConfigurationArgs, SourceLocationAccessConfigurationPtr and SourceLocationAccessConfigurationPtrOutput values.
// You can construct a concrete instance of `SourceLocationAccessConfigurationPtrInput` via:
//
//	        SourceLocationAccessConfigurationArgs{...}
//
//	or:
//
//	        nil
type SourceLocationAccessConfigurationPtrInput interface {
	pulumi.Input

	ToSourceLocationAccessConfigurationPtrOutput() SourceLocationAccessConfigurationPtrOutput
	ToSourceLocationAccessConfigurationPtrOutputWithContext(context.Context) SourceLocationAccessConfigurationPtrOutput
}

type sourceLocationAccessConfigurationPtrType SourceLocationAccessConfigurationArgs

func SourceLocationAccessConfigurationPtr(v *SourceLocationAccessConfigurationArgs) SourceLocationAccessConfigurationPtrInput {
	return (*sourceLocationAccessConfigurationPtrType)(v)
}

func (*sourceLocationAccessConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocationAccessConfiguration)(nil)).Elem()
}

func (i *sourceLocationAccessConfigurationPtrType) ToSourceLocationAccessConfigurationPtrOutput() SourceLocationAccessConfigurationPtrOutput {
	return i.ToSourceLocationAccessConfigurationPtrOutputWithContext(context.Background())
}

func (i *sourceLocationAccessConfigurationPtrType) ToSourceLocationAccessConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationAccessConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationAccessConfigurationPtrOutput)
}

// <p>Access configuration parameters.</p>
type SourceLocationAccessConfigurationOutput struct{ *pulumi.OutputState }

func (SourceLocationAccessConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationAccessConfiguration)(nil)).Elem()
}

func (o SourceLocationAccessConfigurationOutput) ToSourceLocationAccessConfigurationOutput() SourceLocationAccessConfigurationOutput {
	return o
}

func (o SourceLocationAccessConfigurationOutput) ToSourceLocationAccessConfigurationOutputWithContext(ctx context.Context) SourceLocationAccessConfigurationOutput {
	return o
}

func (o SourceLocationAccessConfigurationOutput) ToSourceLocationAccessConfigurationPtrOutput() SourceLocationAccessConfigurationPtrOutput {
	return o.ToSourceLocationAccessConfigurationPtrOutputWithContext(context.Background())
}

func (o SourceLocationAccessConfigurationOutput) ToSourceLocationAccessConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationAccessConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceLocationAccessConfiguration) *SourceLocationAccessConfiguration {
		return &v
	}).(SourceLocationAccessConfigurationPtrOutput)
}

func (o SourceLocationAccessConfigurationOutput) AccessType() SourceLocationAccessTypePtrOutput {
	return o.ApplyT(func(v SourceLocationAccessConfiguration) *SourceLocationAccessType { return v.AccessType }).(SourceLocationAccessTypePtrOutput)
}

func (o SourceLocationAccessConfigurationOutput) SecretsManagerAccessTokenConfiguration() SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return o.ApplyT(func(v SourceLocationAccessConfiguration) *SourceLocationSecretsManagerAccessTokenConfiguration {
		return v.SecretsManagerAccessTokenConfiguration
	}).(SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput)
}

type SourceLocationAccessConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SourceLocationAccessConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocationAccessConfiguration)(nil)).Elem()
}

func (o SourceLocationAccessConfigurationPtrOutput) ToSourceLocationAccessConfigurationPtrOutput() SourceLocationAccessConfigurationPtrOutput {
	return o
}

func (o SourceLocationAccessConfigurationPtrOutput) ToSourceLocationAccessConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationAccessConfigurationPtrOutput {
	return o
}

func (o SourceLocationAccessConfigurationPtrOutput) Elem() SourceLocationAccessConfigurationOutput {
	return o.ApplyT(func(v *SourceLocationAccessConfiguration) SourceLocationAccessConfiguration {
		if v != nil {
			return *v
		}
		var ret SourceLocationAccessConfiguration
		return ret
	}).(SourceLocationAccessConfigurationOutput)
}

func (o SourceLocationAccessConfigurationPtrOutput) AccessType() SourceLocationAccessTypePtrOutput {
	return o.ApplyT(func(v *SourceLocationAccessConfiguration) *SourceLocationAccessType {
		if v == nil {
			return nil
		}
		return v.AccessType
	}).(SourceLocationAccessTypePtrOutput)
}

func (o SourceLocationAccessConfigurationPtrOutput) SecretsManagerAccessTokenConfiguration() SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return o.ApplyT(func(v *SourceLocationAccessConfiguration) *SourceLocationSecretsManagerAccessTokenConfiguration {
		if v == nil {
			return nil
		}
		return v.SecretsManagerAccessTokenConfiguration
	}).(SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput)
}

// <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
type SourceLocationDefaultSegmentDeliveryConfiguration struct {
	// <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
	BaseUrl *string `pulumi:"baseUrl"`
}

// SourceLocationDefaultSegmentDeliveryConfigurationInput is an input type that accepts SourceLocationDefaultSegmentDeliveryConfigurationArgs and SourceLocationDefaultSegmentDeliveryConfigurationOutput values.
// You can construct a concrete instance of `SourceLocationDefaultSegmentDeliveryConfigurationInput` via:
//
//	SourceLocationDefaultSegmentDeliveryConfigurationArgs{...}
type SourceLocationDefaultSegmentDeliveryConfigurationInput interface {
	pulumi.Input

	ToSourceLocationDefaultSegmentDeliveryConfigurationOutput() SourceLocationDefaultSegmentDeliveryConfigurationOutput
	ToSourceLocationDefaultSegmentDeliveryConfigurationOutputWithContext(context.Context) SourceLocationDefaultSegmentDeliveryConfigurationOutput
}

// <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
type SourceLocationDefaultSegmentDeliveryConfigurationArgs struct {
	// <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
}

func (SourceLocationDefaultSegmentDeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationDefaultSegmentDeliveryConfiguration)(nil)).Elem()
}

func (i SourceLocationDefaultSegmentDeliveryConfigurationArgs) ToSourceLocationDefaultSegmentDeliveryConfigurationOutput() SourceLocationDefaultSegmentDeliveryConfigurationOutput {
	return i.ToSourceLocationDefaultSegmentDeliveryConfigurationOutputWithContext(context.Background())
}

func (i SourceLocationDefaultSegmentDeliveryConfigurationArgs) ToSourceLocationDefaultSegmentDeliveryConfigurationOutputWithContext(ctx context.Context) SourceLocationDefaultSegmentDeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationDefaultSegmentDeliveryConfigurationOutput)
}

func (i SourceLocationDefaultSegmentDeliveryConfigurationArgs) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutput() SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return i.ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(context.Background())
}

func (i SourceLocationDefaultSegmentDeliveryConfigurationArgs) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationDefaultSegmentDeliveryConfigurationOutput).ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(ctx)
}

// SourceLocationDefaultSegmentDeliveryConfigurationPtrInput is an input type that accepts SourceLocationDefaultSegmentDeliveryConfigurationArgs, SourceLocationDefaultSegmentDeliveryConfigurationPtr and SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput values.
// You can construct a concrete instance of `SourceLocationDefaultSegmentDeliveryConfigurationPtrInput` via:
//
//	        SourceLocationDefaultSegmentDeliveryConfigurationArgs{...}
//
//	or:
//
//	        nil
type SourceLocationDefaultSegmentDeliveryConfigurationPtrInput interface {
	pulumi.Input

	ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutput() SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput
	ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(context.Context) SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput
}

type sourceLocationDefaultSegmentDeliveryConfigurationPtrType SourceLocationDefaultSegmentDeliveryConfigurationArgs

func SourceLocationDefaultSegmentDeliveryConfigurationPtr(v *SourceLocationDefaultSegmentDeliveryConfigurationArgs) SourceLocationDefaultSegmentDeliveryConfigurationPtrInput {
	return (*sourceLocationDefaultSegmentDeliveryConfigurationPtrType)(v)
}

func (*sourceLocationDefaultSegmentDeliveryConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocationDefaultSegmentDeliveryConfiguration)(nil)).Elem()
}

func (i *sourceLocationDefaultSegmentDeliveryConfigurationPtrType) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutput() SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return i.ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(context.Background())
}

func (i *sourceLocationDefaultSegmentDeliveryConfigurationPtrType) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput)
}

// <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
type SourceLocationDefaultSegmentDeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (SourceLocationDefaultSegmentDeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationDefaultSegmentDeliveryConfiguration)(nil)).Elem()
}

func (o SourceLocationDefaultSegmentDeliveryConfigurationOutput) ToSourceLocationDefaultSegmentDeliveryConfigurationOutput() SourceLocationDefaultSegmentDeliveryConfigurationOutput {
	return o
}

func (o SourceLocationDefaultSegmentDeliveryConfigurationOutput) ToSourceLocationDefaultSegmentDeliveryConfigurationOutputWithContext(ctx context.Context) SourceLocationDefaultSegmentDeliveryConfigurationOutput {
	return o
}

func (o SourceLocationDefaultSegmentDeliveryConfigurationOutput) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutput() SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return o.ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(context.Background())
}

func (o SourceLocationDefaultSegmentDeliveryConfigurationOutput) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceLocationDefaultSegmentDeliveryConfiguration) *SourceLocationDefaultSegmentDeliveryConfiguration {
		return &v
	}).(SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput)
}

// <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
func (o SourceLocationDefaultSegmentDeliveryConfigurationOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLocationDefaultSegmentDeliveryConfiguration) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

type SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocationDefaultSegmentDeliveryConfiguration)(nil)).Elem()
}

func (o SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutput() SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return o
}

func (o SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput) ToSourceLocationDefaultSegmentDeliveryConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return o
}

func (o SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput) Elem() SourceLocationDefaultSegmentDeliveryConfigurationOutput {
	return o.ApplyT(func(v *SourceLocationDefaultSegmentDeliveryConfiguration) SourceLocationDefaultSegmentDeliveryConfiguration {
		if v != nil {
			return *v
		}
		var ret SourceLocationDefaultSegmentDeliveryConfiguration
		return ret
	}).(SourceLocationDefaultSegmentDeliveryConfigurationOutput)
}

// <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
func (o SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLocationDefaultSegmentDeliveryConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// <p>The HTTP configuration for the source location.</p>
type SourceLocationHttpConfiguration struct {
	// <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
	BaseUrl string `pulumi:"baseUrl"`
}

// SourceLocationHttpConfigurationInput is an input type that accepts SourceLocationHttpConfigurationArgs and SourceLocationHttpConfigurationOutput values.
// You can construct a concrete instance of `SourceLocationHttpConfigurationInput` via:
//
//	SourceLocationHttpConfigurationArgs{...}
type SourceLocationHttpConfigurationInput interface {
	pulumi.Input

	ToSourceLocationHttpConfigurationOutput() SourceLocationHttpConfigurationOutput
	ToSourceLocationHttpConfigurationOutputWithContext(context.Context) SourceLocationHttpConfigurationOutput
}

// <p>The HTTP configuration for the source location.</p>
type SourceLocationHttpConfigurationArgs struct {
	// <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
}

func (SourceLocationHttpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationHttpConfiguration)(nil)).Elem()
}

func (i SourceLocationHttpConfigurationArgs) ToSourceLocationHttpConfigurationOutput() SourceLocationHttpConfigurationOutput {
	return i.ToSourceLocationHttpConfigurationOutputWithContext(context.Background())
}

func (i SourceLocationHttpConfigurationArgs) ToSourceLocationHttpConfigurationOutputWithContext(ctx context.Context) SourceLocationHttpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationHttpConfigurationOutput)
}

// <p>The HTTP configuration for the source location.</p>
type SourceLocationHttpConfigurationOutput struct{ *pulumi.OutputState }

func (SourceLocationHttpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationHttpConfiguration)(nil)).Elem()
}

func (o SourceLocationHttpConfigurationOutput) ToSourceLocationHttpConfigurationOutput() SourceLocationHttpConfigurationOutput {
	return o
}

func (o SourceLocationHttpConfigurationOutput) ToSourceLocationHttpConfigurationOutputWithContext(ctx context.Context) SourceLocationHttpConfigurationOutput {
	return o
}

// <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
func (o SourceLocationHttpConfigurationOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceLocationHttpConfiguration) string { return v.BaseUrl }).(pulumi.StringOutput)
}

type SourceLocationHttpConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SourceLocationHttpConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocationHttpConfiguration)(nil)).Elem()
}

func (o SourceLocationHttpConfigurationPtrOutput) ToSourceLocationHttpConfigurationPtrOutput() SourceLocationHttpConfigurationPtrOutput {
	return o
}

func (o SourceLocationHttpConfigurationPtrOutput) ToSourceLocationHttpConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationHttpConfigurationPtrOutput {
	return o
}

func (o SourceLocationHttpConfigurationPtrOutput) Elem() SourceLocationHttpConfigurationOutput {
	return o.ApplyT(func(v *SourceLocationHttpConfiguration) SourceLocationHttpConfiguration {
		if v != nil {
			return *v
		}
		var ret SourceLocationHttpConfiguration
		return ret
	}).(SourceLocationHttpConfigurationOutput)
}

// <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
func (o SourceLocationHttpConfigurationPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLocationHttpConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
type SourceLocationSecretsManagerAccessTokenConfiguration struct {
	// <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
	HeaderName *string `pulumi:"headerName"`
	// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
	SecretArn *string `pulumi:"secretArn"`
	// <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
	SecretStringKey *string `pulumi:"secretStringKey"`
}

// SourceLocationSecretsManagerAccessTokenConfigurationInput is an input type that accepts SourceLocationSecretsManagerAccessTokenConfigurationArgs and SourceLocationSecretsManagerAccessTokenConfigurationOutput values.
// You can construct a concrete instance of `SourceLocationSecretsManagerAccessTokenConfigurationInput` via:
//
//	SourceLocationSecretsManagerAccessTokenConfigurationArgs{...}
type SourceLocationSecretsManagerAccessTokenConfigurationInput interface {
	pulumi.Input

	ToSourceLocationSecretsManagerAccessTokenConfigurationOutput() SourceLocationSecretsManagerAccessTokenConfigurationOutput
	ToSourceLocationSecretsManagerAccessTokenConfigurationOutputWithContext(context.Context) SourceLocationSecretsManagerAccessTokenConfigurationOutput
}

// <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
type SourceLocationSecretsManagerAccessTokenConfigurationArgs struct {
	// <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
	SecretArn pulumi.StringPtrInput `pulumi:"secretArn"`
	// <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
	SecretStringKey pulumi.StringPtrInput `pulumi:"secretStringKey"`
}

func (SourceLocationSecretsManagerAccessTokenConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationSecretsManagerAccessTokenConfiguration)(nil)).Elem()
}

func (i SourceLocationSecretsManagerAccessTokenConfigurationArgs) ToSourceLocationSecretsManagerAccessTokenConfigurationOutput() SourceLocationSecretsManagerAccessTokenConfigurationOutput {
	return i.ToSourceLocationSecretsManagerAccessTokenConfigurationOutputWithContext(context.Background())
}

func (i SourceLocationSecretsManagerAccessTokenConfigurationArgs) ToSourceLocationSecretsManagerAccessTokenConfigurationOutputWithContext(ctx context.Context) SourceLocationSecretsManagerAccessTokenConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationSecretsManagerAccessTokenConfigurationOutput)
}

func (i SourceLocationSecretsManagerAccessTokenConfigurationArgs) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutput() SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return i.ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(context.Background())
}

func (i SourceLocationSecretsManagerAccessTokenConfigurationArgs) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationSecretsManagerAccessTokenConfigurationOutput).ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(ctx)
}

// SourceLocationSecretsManagerAccessTokenConfigurationPtrInput is an input type that accepts SourceLocationSecretsManagerAccessTokenConfigurationArgs, SourceLocationSecretsManagerAccessTokenConfigurationPtr and SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput values.
// You can construct a concrete instance of `SourceLocationSecretsManagerAccessTokenConfigurationPtrInput` via:
//
//	        SourceLocationSecretsManagerAccessTokenConfigurationArgs{...}
//
//	or:
//
//	        nil
type SourceLocationSecretsManagerAccessTokenConfigurationPtrInput interface {
	pulumi.Input

	ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutput() SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput
	ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(context.Context) SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput
}

type sourceLocationSecretsManagerAccessTokenConfigurationPtrType SourceLocationSecretsManagerAccessTokenConfigurationArgs

func SourceLocationSecretsManagerAccessTokenConfigurationPtr(v *SourceLocationSecretsManagerAccessTokenConfigurationArgs) SourceLocationSecretsManagerAccessTokenConfigurationPtrInput {
	return (*sourceLocationSecretsManagerAccessTokenConfigurationPtrType)(v)
}

func (*sourceLocationSecretsManagerAccessTokenConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocationSecretsManagerAccessTokenConfiguration)(nil)).Elem()
}

func (i *sourceLocationSecretsManagerAccessTokenConfigurationPtrType) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutput() SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return i.ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(context.Background())
}

func (i *sourceLocationSecretsManagerAccessTokenConfigurationPtrType) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput)
}

// <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
type SourceLocationSecretsManagerAccessTokenConfigurationOutput struct{ *pulumi.OutputState }

func (SourceLocationSecretsManagerAccessTokenConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationSecretsManagerAccessTokenConfiguration)(nil)).Elem()
}

func (o SourceLocationSecretsManagerAccessTokenConfigurationOutput) ToSourceLocationSecretsManagerAccessTokenConfigurationOutput() SourceLocationSecretsManagerAccessTokenConfigurationOutput {
	return o
}

func (o SourceLocationSecretsManagerAccessTokenConfigurationOutput) ToSourceLocationSecretsManagerAccessTokenConfigurationOutputWithContext(ctx context.Context) SourceLocationSecretsManagerAccessTokenConfigurationOutput {
	return o
}

func (o SourceLocationSecretsManagerAccessTokenConfigurationOutput) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutput() SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return o.ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(context.Background())
}

func (o SourceLocationSecretsManagerAccessTokenConfigurationOutput) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceLocationSecretsManagerAccessTokenConfiguration) *SourceLocationSecretsManagerAccessTokenConfiguration {
		return &v
	}).(SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput)
}

// <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
func (o SourceLocationSecretsManagerAccessTokenConfigurationOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLocationSecretsManagerAccessTokenConfiguration) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
func (o SourceLocationSecretsManagerAccessTokenConfigurationOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLocationSecretsManagerAccessTokenConfiguration) *string { return v.SecretArn }).(pulumi.StringPtrOutput)
}

// <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
func (o SourceLocationSecretsManagerAccessTokenConfigurationOutput) SecretStringKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLocationSecretsManagerAccessTokenConfiguration) *string { return v.SecretStringKey }).(pulumi.StringPtrOutput)
}

type SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceLocationSecretsManagerAccessTokenConfiguration)(nil)).Elem()
}

func (o SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutput() SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return o
}

func (o SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput) ToSourceLocationSecretsManagerAccessTokenConfigurationPtrOutputWithContext(ctx context.Context) SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput {
	return o
}

func (o SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput) Elem() SourceLocationSecretsManagerAccessTokenConfigurationOutput {
	return o.ApplyT(func(v *SourceLocationSecretsManagerAccessTokenConfiguration) SourceLocationSecretsManagerAccessTokenConfiguration {
		if v != nil {
			return *v
		}
		var ret SourceLocationSecretsManagerAccessTokenConfiguration
		return ret
	}).(SourceLocationSecretsManagerAccessTokenConfigurationOutput)
}

// <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
func (o SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLocationSecretsManagerAccessTokenConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.HeaderName
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
func (o SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput) SecretArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLocationSecretsManagerAccessTokenConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SecretArn
	}).(pulumi.StringPtrOutput)
}

// <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
func (o SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput) SecretStringKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceLocationSecretsManagerAccessTokenConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SecretStringKey
	}).(pulumi.StringPtrOutput)
}

// <p>The segment delivery configuration settings.</p>
type SourceLocationSegmentDeliveryConfiguration struct {
	// <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
	BaseUrl *string `pulumi:"baseUrl"`
	// <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
	Name *string `pulumi:"name"`
}

// SourceLocationSegmentDeliveryConfigurationInput is an input type that accepts SourceLocationSegmentDeliveryConfigurationArgs and SourceLocationSegmentDeliveryConfigurationOutput values.
// You can construct a concrete instance of `SourceLocationSegmentDeliveryConfigurationInput` via:
//
//	SourceLocationSegmentDeliveryConfigurationArgs{...}
type SourceLocationSegmentDeliveryConfigurationInput interface {
	pulumi.Input

	ToSourceLocationSegmentDeliveryConfigurationOutput() SourceLocationSegmentDeliveryConfigurationOutput
	ToSourceLocationSegmentDeliveryConfigurationOutputWithContext(context.Context) SourceLocationSegmentDeliveryConfigurationOutput
}

// <p>The segment delivery configuration settings.</p>
type SourceLocationSegmentDeliveryConfigurationArgs struct {
	// <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SourceLocationSegmentDeliveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationSegmentDeliveryConfiguration)(nil)).Elem()
}

func (i SourceLocationSegmentDeliveryConfigurationArgs) ToSourceLocationSegmentDeliveryConfigurationOutput() SourceLocationSegmentDeliveryConfigurationOutput {
	return i.ToSourceLocationSegmentDeliveryConfigurationOutputWithContext(context.Background())
}

func (i SourceLocationSegmentDeliveryConfigurationArgs) ToSourceLocationSegmentDeliveryConfigurationOutputWithContext(ctx context.Context) SourceLocationSegmentDeliveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationSegmentDeliveryConfigurationOutput)
}

// SourceLocationSegmentDeliveryConfigurationArrayInput is an input type that accepts SourceLocationSegmentDeliveryConfigurationArray and SourceLocationSegmentDeliveryConfigurationArrayOutput values.
// You can construct a concrete instance of `SourceLocationSegmentDeliveryConfigurationArrayInput` via:
//
//	SourceLocationSegmentDeliveryConfigurationArray{ SourceLocationSegmentDeliveryConfigurationArgs{...} }
type SourceLocationSegmentDeliveryConfigurationArrayInput interface {
	pulumi.Input

	ToSourceLocationSegmentDeliveryConfigurationArrayOutput() SourceLocationSegmentDeliveryConfigurationArrayOutput
	ToSourceLocationSegmentDeliveryConfigurationArrayOutputWithContext(context.Context) SourceLocationSegmentDeliveryConfigurationArrayOutput
}

type SourceLocationSegmentDeliveryConfigurationArray []SourceLocationSegmentDeliveryConfigurationInput

func (SourceLocationSegmentDeliveryConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLocationSegmentDeliveryConfiguration)(nil)).Elem()
}

func (i SourceLocationSegmentDeliveryConfigurationArray) ToSourceLocationSegmentDeliveryConfigurationArrayOutput() SourceLocationSegmentDeliveryConfigurationArrayOutput {
	return i.ToSourceLocationSegmentDeliveryConfigurationArrayOutputWithContext(context.Background())
}

func (i SourceLocationSegmentDeliveryConfigurationArray) ToSourceLocationSegmentDeliveryConfigurationArrayOutputWithContext(ctx context.Context) SourceLocationSegmentDeliveryConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceLocationSegmentDeliveryConfigurationArrayOutput)
}

// <p>The segment delivery configuration settings.</p>
type SourceLocationSegmentDeliveryConfigurationOutput struct{ *pulumi.OutputState }

func (SourceLocationSegmentDeliveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceLocationSegmentDeliveryConfiguration)(nil)).Elem()
}

func (o SourceLocationSegmentDeliveryConfigurationOutput) ToSourceLocationSegmentDeliveryConfigurationOutput() SourceLocationSegmentDeliveryConfigurationOutput {
	return o
}

func (o SourceLocationSegmentDeliveryConfigurationOutput) ToSourceLocationSegmentDeliveryConfigurationOutputWithContext(ctx context.Context) SourceLocationSegmentDeliveryConfigurationOutput {
	return o
}

// <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
func (o SourceLocationSegmentDeliveryConfigurationOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLocationSegmentDeliveryConfiguration) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
func (o SourceLocationSegmentDeliveryConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceLocationSegmentDeliveryConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SourceLocationSegmentDeliveryConfigurationArrayOutput struct{ *pulumi.OutputState }

func (SourceLocationSegmentDeliveryConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceLocationSegmentDeliveryConfiguration)(nil)).Elem()
}

func (o SourceLocationSegmentDeliveryConfigurationArrayOutput) ToSourceLocationSegmentDeliveryConfigurationArrayOutput() SourceLocationSegmentDeliveryConfigurationArrayOutput {
	return o
}

func (o SourceLocationSegmentDeliveryConfigurationArrayOutput) ToSourceLocationSegmentDeliveryConfigurationArrayOutputWithContext(ctx context.Context) SourceLocationSegmentDeliveryConfigurationArrayOutput {
	return o
}

func (o SourceLocationSegmentDeliveryConfigurationArrayOutput) Index(i pulumi.IntInput) SourceLocationSegmentDeliveryConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceLocationSegmentDeliveryConfiguration {
		return vs[0].([]SourceLocationSegmentDeliveryConfiguration)[vs[1].(int)]
	}).(SourceLocationSegmentDeliveryConfigurationOutput)
}

type SourceLocationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// <p>The HTTP package configuration properties for the requested VOD source.</p>
type VodSourceHttpPackageConfiguration struct {
	// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
	Path string `pulumi:"path"`
	// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
	SourceGroup string        `pulumi:"sourceGroup"`
	Type        VodSourceType `pulumi:"type"`
}

// VodSourceHttpPackageConfigurationInput is an input type that accepts VodSourceHttpPackageConfigurationArgs and VodSourceHttpPackageConfigurationOutput values.
// You can construct a concrete instance of `VodSourceHttpPackageConfigurationInput` via:
//
//	VodSourceHttpPackageConfigurationArgs{...}
type VodSourceHttpPackageConfigurationInput interface {
	pulumi.Input

	ToVodSourceHttpPackageConfigurationOutput() VodSourceHttpPackageConfigurationOutput
	ToVodSourceHttpPackageConfigurationOutputWithContext(context.Context) VodSourceHttpPackageConfigurationOutput
}

// <p>The HTTP package configuration properties for the requested VOD source.</p>
type VodSourceHttpPackageConfigurationArgs struct {
	// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
	Path pulumi.StringInput `pulumi:"path"`
	// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
	SourceGroup pulumi.StringInput `pulumi:"sourceGroup"`
	Type        VodSourceTypeInput `pulumi:"type"`
}

func (VodSourceHttpPackageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VodSourceHttpPackageConfiguration)(nil)).Elem()
}

func (i VodSourceHttpPackageConfigurationArgs) ToVodSourceHttpPackageConfigurationOutput() VodSourceHttpPackageConfigurationOutput {
	return i.ToVodSourceHttpPackageConfigurationOutputWithContext(context.Background())
}

func (i VodSourceHttpPackageConfigurationArgs) ToVodSourceHttpPackageConfigurationOutputWithContext(ctx context.Context) VodSourceHttpPackageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VodSourceHttpPackageConfigurationOutput)
}

// VodSourceHttpPackageConfigurationArrayInput is an input type that accepts VodSourceHttpPackageConfigurationArray and VodSourceHttpPackageConfigurationArrayOutput values.
// You can construct a concrete instance of `VodSourceHttpPackageConfigurationArrayInput` via:
//
//	VodSourceHttpPackageConfigurationArray{ VodSourceHttpPackageConfigurationArgs{...} }
type VodSourceHttpPackageConfigurationArrayInput interface {
	pulumi.Input

	ToVodSourceHttpPackageConfigurationArrayOutput() VodSourceHttpPackageConfigurationArrayOutput
	ToVodSourceHttpPackageConfigurationArrayOutputWithContext(context.Context) VodSourceHttpPackageConfigurationArrayOutput
}

type VodSourceHttpPackageConfigurationArray []VodSourceHttpPackageConfigurationInput

func (VodSourceHttpPackageConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VodSourceHttpPackageConfiguration)(nil)).Elem()
}

func (i VodSourceHttpPackageConfigurationArray) ToVodSourceHttpPackageConfigurationArrayOutput() VodSourceHttpPackageConfigurationArrayOutput {
	return i.ToVodSourceHttpPackageConfigurationArrayOutputWithContext(context.Background())
}

func (i VodSourceHttpPackageConfigurationArray) ToVodSourceHttpPackageConfigurationArrayOutputWithContext(ctx context.Context) VodSourceHttpPackageConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VodSourceHttpPackageConfigurationArrayOutput)
}

// <p>The HTTP package configuration properties for the requested VOD source.</p>
type VodSourceHttpPackageConfigurationOutput struct{ *pulumi.OutputState }

func (VodSourceHttpPackageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VodSourceHttpPackageConfiguration)(nil)).Elem()
}

func (o VodSourceHttpPackageConfigurationOutput) ToVodSourceHttpPackageConfigurationOutput() VodSourceHttpPackageConfigurationOutput {
	return o
}

func (o VodSourceHttpPackageConfigurationOutput) ToVodSourceHttpPackageConfigurationOutputWithContext(ctx context.Context) VodSourceHttpPackageConfigurationOutput {
	return o
}

// <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
func (o VodSourceHttpPackageConfigurationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VodSourceHttpPackageConfiguration) string { return v.Path }).(pulumi.StringOutput)
}

// <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
func (o VodSourceHttpPackageConfigurationOutput) SourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v VodSourceHttpPackageConfiguration) string { return v.SourceGroup }).(pulumi.StringOutput)
}

func (o VodSourceHttpPackageConfigurationOutput) Type() VodSourceTypeOutput {
	return o.ApplyT(func(v VodSourceHttpPackageConfiguration) VodSourceType { return v.Type }).(VodSourceTypeOutput)
}

type VodSourceHttpPackageConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VodSourceHttpPackageConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VodSourceHttpPackageConfiguration)(nil)).Elem()
}

func (o VodSourceHttpPackageConfigurationArrayOutput) ToVodSourceHttpPackageConfigurationArrayOutput() VodSourceHttpPackageConfigurationArrayOutput {
	return o
}

func (o VodSourceHttpPackageConfigurationArrayOutput) ToVodSourceHttpPackageConfigurationArrayOutputWithContext(ctx context.Context) VodSourceHttpPackageConfigurationArrayOutput {
	return o
}

func (o VodSourceHttpPackageConfigurationArrayOutput) Index(i pulumi.IntInput) VodSourceHttpPackageConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VodSourceHttpPackageConfiguration {
		return vs[0].([]VodSourceHttpPackageConfiguration)[vs[1].(int)]
	}).(VodSourceHttpPackageConfigurationOutput)
}

type VodSourceTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDashPlaylistSettingsInput)(nil)).Elem(), ChannelDashPlaylistSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDashPlaylistSettingsPtrInput)(nil)).Elem(), ChannelDashPlaylistSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelHlsPlaylistSettingsInput)(nil)).Elem(), ChannelHlsPlaylistSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelHlsPlaylistSettingsPtrInput)(nil)).Elem(), ChannelHlsPlaylistSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelLogConfigurationForChannelInput)(nil)).Elem(), ChannelLogConfigurationForChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelLogConfigurationForChannelPtrInput)(nil)).Elem(), ChannelLogConfigurationForChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelRequestOutputItemInput)(nil)).Elem(), ChannelRequestOutputItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelRequestOutputItemArrayInput)(nil)).Elem(), ChannelRequestOutputItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelSlateSourceInput)(nil)).Elem(), ChannelSlateSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelSlateSourcePtrInput)(nil)).Elem(), ChannelSlateSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelTimeShiftConfigurationInput)(nil)).Elem(), ChannelTimeShiftConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelTimeShiftConfigurationPtrInput)(nil)).Elem(), ChannelTimeShiftConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveSourceHttpPackageConfigurationInput)(nil)).Elem(), LiveSourceHttpPackageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveSourceHttpPackageConfigurationArrayInput)(nil)).Elem(), LiveSourceHttpPackageConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthroughInput)(nil)).Elem(), PlaybackConfigurationAdMarkerPassthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAdMarkerPassthroughPtrInput)(nil)).Elem(), PlaybackConfigurationAdMarkerPassthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAvailSuppressionInput)(nil)).Elem(), PlaybackConfigurationAvailSuppressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationAvailSuppressionPtrInput)(nil)).Elem(), PlaybackConfigurationAvailSuppressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationBumperInput)(nil)).Elem(), PlaybackConfigurationBumperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationBumperPtrInput)(nil)).Elem(), PlaybackConfigurationBumperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationCdnConfigurationInput)(nil)).Elem(), PlaybackConfigurationCdnConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationCdnConfigurationPtrInput)(nil)).Elem(), PlaybackConfigurationCdnConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationConfigurationAliasesInput)(nil)).Elem(), PlaybackConfigurationConfigurationAliasesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationConfigurationAliasesPtrInput)(nil)).Elem(), PlaybackConfigurationConfigurationAliasesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationDashConfigurationInput)(nil)).Elem(), PlaybackConfigurationDashConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationDashConfigurationPtrInput)(nil)).Elem(), PlaybackConfigurationDashConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationHlsConfigurationInput)(nil)).Elem(), PlaybackConfigurationHlsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationHlsConfigurationPtrInput)(nil)).Elem(), PlaybackConfigurationHlsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationLivePreRollConfigurationInput)(nil)).Elem(), PlaybackConfigurationLivePreRollConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationLivePreRollConfigurationPtrInput)(nil)).Elem(), PlaybackConfigurationLivePreRollConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationManifestProcessingRulesInput)(nil)).Elem(), PlaybackConfigurationManifestProcessingRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationManifestProcessingRulesPtrInput)(nil)).Elem(), PlaybackConfigurationManifestProcessingRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationAccessConfigurationInput)(nil)).Elem(), SourceLocationAccessConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationAccessConfigurationPtrInput)(nil)).Elem(), SourceLocationAccessConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationDefaultSegmentDeliveryConfigurationInput)(nil)).Elem(), SourceLocationDefaultSegmentDeliveryConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationDefaultSegmentDeliveryConfigurationPtrInput)(nil)).Elem(), SourceLocationDefaultSegmentDeliveryConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationHttpConfigurationInput)(nil)).Elem(), SourceLocationHttpConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationSecretsManagerAccessTokenConfigurationInput)(nil)).Elem(), SourceLocationSecretsManagerAccessTokenConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationSecretsManagerAccessTokenConfigurationPtrInput)(nil)).Elem(), SourceLocationSecretsManagerAccessTokenConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationSegmentDeliveryConfigurationInput)(nil)).Elem(), SourceLocationSegmentDeliveryConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceLocationSegmentDeliveryConfigurationArrayInput)(nil)).Elem(), SourceLocationSegmentDeliveryConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VodSourceHttpPackageConfigurationInput)(nil)).Elem(), VodSourceHttpPackageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VodSourceHttpPackageConfigurationArrayInput)(nil)).Elem(), VodSourceHttpPackageConfigurationArray{})
	pulumi.RegisterOutputType(ChannelDashPlaylistSettingsOutput{})
	pulumi.RegisterOutputType(ChannelDashPlaylistSettingsPtrOutput{})
	pulumi.RegisterOutputType(ChannelHlsPlaylistSettingsOutput{})
	pulumi.RegisterOutputType(ChannelHlsPlaylistSettingsPtrOutput{})
	pulumi.RegisterOutputType(ChannelLogConfigurationForChannelOutput{})
	pulumi.RegisterOutputType(ChannelLogConfigurationForChannelPtrOutput{})
	pulumi.RegisterOutputType(ChannelRequestOutputItemOutput{})
	pulumi.RegisterOutputType(ChannelRequestOutputItemArrayOutput{})
	pulumi.RegisterOutputType(ChannelSlateSourceOutput{})
	pulumi.RegisterOutputType(ChannelSlateSourcePtrOutput{})
	pulumi.RegisterOutputType(ChannelTimeShiftConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelTimeShiftConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LiveSourceHttpPackageConfigurationOutput{})
	pulumi.RegisterOutputType(LiveSourceHttpPackageConfigurationArrayOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationAdMarkerPassthroughOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationAdMarkerPassthroughPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationAvailSuppressionOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationAvailSuppressionPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationBumperOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationBumperPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationCdnConfigurationOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationCdnConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationConfigurationAliasesOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationConfigurationAliasesPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationDashConfigurationOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationDashConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationHlsConfigurationOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationHlsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationLivePreRollConfigurationOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationLivePreRollConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationManifestProcessingRulesOutput{})
	pulumi.RegisterOutputType(PlaybackConfigurationManifestProcessingRulesPtrOutput{})
	pulumi.RegisterOutputType(SourceLocationAccessConfigurationOutput{})
	pulumi.RegisterOutputType(SourceLocationAccessConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SourceLocationDefaultSegmentDeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SourceLocationHttpConfigurationOutput{})
	pulumi.RegisterOutputType(SourceLocationHttpConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SourceLocationSecretsManagerAccessTokenConfigurationOutput{})
	pulumi.RegisterOutputType(SourceLocationSecretsManagerAccessTokenConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SourceLocationSegmentDeliveryConfigurationOutput{})
	pulumi.RegisterOutputType(SourceLocationSegmentDeliveryConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VodSourceHttpPackageConfigurationOutput{})
	pulumi.RegisterOutputType(VodSourceHttpPackageConfigurationArrayOutput{})
}
