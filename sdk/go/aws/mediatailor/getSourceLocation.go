// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediatailor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::MediaTailor::SourceLocation Resource Type
func LookupSourceLocation(ctx *pulumi.Context, args *LookupSourceLocationArgs, opts ...pulumi.InvokeOption) (*LookupSourceLocationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSourceLocationResult
	err := ctx.Invoke("aws-native:mediatailor:getSourceLocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSourceLocationArgs struct {
	// The name of the source location.
	SourceLocationName string `pulumi:"sourceLocationName"`
}

type LookupSourceLocationResult struct {
	// Access configuration parameters.
	AccessConfiguration *SourceLocationAccessConfiguration `pulumi:"accessConfiguration"`
	// <p>The ARN of the source location.</p>
	Arn *string `pulumi:"arn"`
	// The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.
	DefaultSegmentDeliveryConfiguration *SourceLocationDefaultSegmentDeliveryConfiguration `pulumi:"defaultSegmentDeliveryConfiguration"`
	// The HTTP configuration for the source location.
	HttpConfiguration *SourceLocationHttpConfiguration `pulumi:"httpConfiguration"`
	// <p>A list of the segment delivery configurations associated with this resource.</p>
	SegmentDeliveryConfigurations []SourceLocationSegmentDeliveryConfiguration `pulumi:"segmentDeliveryConfigurations"`
	// The tags to assign to the source location.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupSourceLocationOutput(ctx *pulumi.Context, args LookupSourceLocationOutputArgs, opts ...pulumi.InvokeOption) LookupSourceLocationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSourceLocationResult, error) {
			args := v.(LookupSourceLocationArgs)
			r, err := LookupSourceLocation(ctx, &args, opts...)
			var s LookupSourceLocationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSourceLocationResultOutput)
}

type LookupSourceLocationOutputArgs struct {
	// The name of the source location.
	SourceLocationName pulumi.StringInput `pulumi:"sourceLocationName"`
}

func (LookupSourceLocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceLocationArgs)(nil)).Elem()
}

type LookupSourceLocationResultOutput struct{ *pulumi.OutputState }

func (LookupSourceLocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceLocationResult)(nil)).Elem()
}

func (o LookupSourceLocationResultOutput) ToLookupSourceLocationResultOutput() LookupSourceLocationResultOutput {
	return o
}

func (o LookupSourceLocationResultOutput) ToLookupSourceLocationResultOutputWithContext(ctx context.Context) LookupSourceLocationResultOutput {
	return o
}

// Access configuration parameters.
func (o LookupSourceLocationResultOutput) AccessConfiguration() SourceLocationAccessConfigurationPtrOutput {
	return o.ApplyT(func(v LookupSourceLocationResult) *SourceLocationAccessConfiguration { return v.AccessConfiguration }).(SourceLocationAccessConfigurationPtrOutput)
}

// <p>The ARN of the source location.</p>
func (o LookupSourceLocationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSourceLocationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.
func (o LookupSourceLocationResultOutput) DefaultSegmentDeliveryConfiguration() SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput {
	return o.ApplyT(func(v LookupSourceLocationResult) *SourceLocationDefaultSegmentDeliveryConfiguration {
		return v.DefaultSegmentDeliveryConfiguration
	}).(SourceLocationDefaultSegmentDeliveryConfigurationPtrOutput)
}

// The HTTP configuration for the source location.
func (o LookupSourceLocationResultOutput) HttpConfiguration() SourceLocationHttpConfigurationPtrOutput {
	return o.ApplyT(func(v LookupSourceLocationResult) *SourceLocationHttpConfiguration { return v.HttpConfiguration }).(SourceLocationHttpConfigurationPtrOutput)
}

// <p>A list of the segment delivery configurations associated with this resource.</p>
func (o LookupSourceLocationResultOutput) SegmentDeliveryConfigurations() SourceLocationSegmentDeliveryConfigurationArrayOutput {
	return o.ApplyT(func(v LookupSourceLocationResult) []SourceLocationSegmentDeliveryConfiguration {
		return v.SegmentDeliveryConfigurations
	}).(SourceLocationSegmentDeliveryConfigurationArrayOutput)
}

// The tags to assign to the source location.
func (o LookupSourceLocationResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupSourceLocationResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSourceLocationResultOutput{})
}
