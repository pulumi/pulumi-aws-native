// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediatailor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::MediaTailor::PlaybackConfiguration
type PlaybackConfiguration struct {
	pulumi.CustomResourceState

	// The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.
	AdDecisionServerUrl pulumi.StringOutput `pulumi:"adDecisionServerUrl"`
	// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
	AvailSuppression PlaybackConfigurationAvailSuppressionPtrOutput `pulumi:"availSuppression"`
	// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
	Bumper PlaybackConfigurationBumperPtrOutput `pulumi:"bumper"`
	// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
	CdnConfiguration PlaybackConfigurationCdnConfigurationPtrOutput `pulumi:"cdnConfiguration"`
	// The player parameters and aliases used as dynamic variables during session initialization. For more information, see Domain Variables.
	ConfigurationAliases PlaybackConfigurationConfigurationAliasesPtrOutput `pulumi:"configurationAliases"`
	// The configuration for DASH content.
	DashConfiguration PlaybackConfigurationDashConfigurationForPutPtrOutput `pulumi:"dashConfiguration"`
	// The configuration for pre-roll ad insertion.
	LivePreRollConfiguration PlaybackConfigurationLivePreRollConfigurationPtrOutput `pulumi:"livePreRollConfiguration"`
	// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
	ManifestProcessingRules PlaybackConfigurationManifestProcessingRulesPtrOutput `pulumi:"manifestProcessingRules"`
	// The identifier for the playback configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to ad replacement in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see Ad Behavior in AWS Elemental MediaTailor (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
	PersonalizationThresholdSeconds pulumi.IntPtrOutput `pulumi:"personalizationThresholdSeconds"`
	// The URL that the player uses to initialize a session that uses client-side reporting.
	SessionInitializationEndpointPrefix pulumi.StringPtrOutput `pulumi:"sessionInitializationEndpointPrefix"`
	// The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.
	SlateAdUrl pulumi.StringPtrOutput `pulumi:"slateAdUrl"`
	// The tags to assign to the playback configuration.
	Tags PlaybackConfigurationTagArrayOutput `pulumi:"tags"`
	// The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.
	TranscodeProfileName pulumi.StringPtrOutput `pulumi:"transcodeProfileName"`
	// The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.
	VideoContentSourceUrl pulumi.StringOutput `pulumi:"videoContentSourceUrl"`
}

// NewPlaybackConfiguration registers a new resource with the given unique name, arguments, and options.
func NewPlaybackConfiguration(ctx *pulumi.Context,
	name string, args *PlaybackConfigurationArgs, opts ...pulumi.ResourceOption) (*PlaybackConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdDecisionServerUrl == nil {
		return nil, errors.New("invalid value for required argument 'AdDecisionServerUrl'")
	}
	if args.VideoContentSourceUrl == nil {
		return nil, errors.New("invalid value for required argument 'VideoContentSourceUrl'")
	}
	var resource PlaybackConfiguration
	err := ctx.RegisterResource("aws-native:mediatailor:PlaybackConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaybackConfiguration gets an existing PlaybackConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaybackConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaybackConfigurationState, opts ...pulumi.ResourceOption) (*PlaybackConfiguration, error) {
	var resource PlaybackConfiguration
	err := ctx.ReadResource("aws-native:mediatailor:PlaybackConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlaybackConfiguration resources.
type playbackConfigurationState struct {
}

type PlaybackConfigurationState struct {
}

func (PlaybackConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackConfigurationState)(nil)).Elem()
}

type playbackConfigurationArgs struct {
	// The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.
	AdDecisionServerUrl string `pulumi:"adDecisionServerUrl"`
	// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
	AvailSuppression *PlaybackConfigurationAvailSuppression `pulumi:"availSuppression"`
	// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
	Bumper *PlaybackConfigurationBumper `pulumi:"bumper"`
	// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
	CdnConfiguration *PlaybackConfigurationCdnConfiguration `pulumi:"cdnConfiguration"`
	// The player parameters and aliases used as dynamic variables during session initialization. For more information, see Domain Variables.
	ConfigurationAliases *PlaybackConfigurationConfigurationAliases `pulumi:"configurationAliases"`
	// The configuration for DASH content.
	DashConfiguration *PlaybackConfigurationDashConfigurationForPut `pulumi:"dashConfiguration"`
	// The configuration for pre-roll ad insertion.
	LivePreRollConfiguration *PlaybackConfigurationLivePreRollConfiguration `pulumi:"livePreRollConfiguration"`
	// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
	ManifestProcessingRules *PlaybackConfigurationManifestProcessingRules `pulumi:"manifestProcessingRules"`
	// The identifier for the playback configuration.
	Name *string `pulumi:"name"`
	// Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to ad replacement in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see Ad Behavior in AWS Elemental MediaTailor (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
	PersonalizationThresholdSeconds *int `pulumi:"personalizationThresholdSeconds"`
	// The URL that the player uses to initialize a session that uses client-side reporting.
	SessionInitializationEndpointPrefix *string `pulumi:"sessionInitializationEndpointPrefix"`
	// The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.
	SlateAdUrl *string `pulumi:"slateAdUrl"`
	// The tags to assign to the playback configuration.
	Tags []PlaybackConfigurationTag `pulumi:"tags"`
	// The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.
	TranscodeProfileName *string `pulumi:"transcodeProfileName"`
	// The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.
	VideoContentSourceUrl string `pulumi:"videoContentSourceUrl"`
}

// The set of arguments for constructing a PlaybackConfiguration resource.
type PlaybackConfigurationArgs struct {
	// The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.
	AdDecisionServerUrl pulumi.StringInput
	// The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
	AvailSuppression PlaybackConfigurationAvailSuppressionPtrInput
	// The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
	Bumper PlaybackConfigurationBumperPtrInput
	// The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
	CdnConfiguration PlaybackConfigurationCdnConfigurationPtrInput
	// The player parameters and aliases used as dynamic variables during session initialization. For more information, see Domain Variables.
	ConfigurationAliases PlaybackConfigurationConfigurationAliasesPtrInput
	// The configuration for DASH content.
	DashConfiguration PlaybackConfigurationDashConfigurationForPutPtrInput
	// The configuration for pre-roll ad insertion.
	LivePreRollConfiguration PlaybackConfigurationLivePreRollConfigurationPtrInput
	// The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
	ManifestProcessingRules PlaybackConfigurationManifestProcessingRulesPtrInput
	// The identifier for the playback configuration.
	Name pulumi.StringPtrInput
	// Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to ad replacement in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see Ad Behavior in AWS Elemental MediaTailor (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
	PersonalizationThresholdSeconds pulumi.IntPtrInput
	// The URL that the player uses to initialize a session that uses client-side reporting.
	SessionInitializationEndpointPrefix pulumi.StringPtrInput
	// The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.
	SlateAdUrl pulumi.StringPtrInput
	// The tags to assign to the playback configuration.
	Tags PlaybackConfigurationTagArrayInput
	// The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.
	TranscodeProfileName pulumi.StringPtrInput
	// The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.
	VideoContentSourceUrl pulumi.StringInput
}

func (PlaybackConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playbackConfigurationArgs)(nil)).Elem()
}

type PlaybackConfigurationInput interface {
	pulumi.Input

	ToPlaybackConfigurationOutput() PlaybackConfigurationOutput
	ToPlaybackConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationOutput
}

func (*PlaybackConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfiguration)(nil)).Elem()
}

func (i *PlaybackConfiguration) ToPlaybackConfigurationOutput() PlaybackConfigurationOutput {
	return i.ToPlaybackConfigurationOutputWithContext(context.Background())
}

func (i *PlaybackConfiguration) ToPlaybackConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybackConfigurationOutput)
}

type PlaybackConfigurationOutput struct{ *pulumi.OutputState }

func (PlaybackConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybackConfiguration)(nil)).Elem()
}

func (o PlaybackConfigurationOutput) ToPlaybackConfigurationOutput() PlaybackConfigurationOutput {
	return o
}

func (o PlaybackConfigurationOutput) ToPlaybackConfigurationOutputWithContext(ctx context.Context) PlaybackConfigurationOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybackConfigurationInput)(nil)).Elem(), &PlaybackConfiguration{})
	pulumi.RegisterOutputType(PlaybackConfigurationOutput{})
}
