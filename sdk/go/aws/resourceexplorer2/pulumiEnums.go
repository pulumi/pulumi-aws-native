// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourceexplorer2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IndexStateEnum string

const (
	IndexStateEnumActive   = IndexStateEnum("ACTIVE")
	IndexStateEnumCreating = IndexStateEnum("CREATING")
	IndexStateEnumDeleting = IndexStateEnum("DELETING")
	IndexStateEnumDeleted  = IndexStateEnum("DELETED")
	IndexStateEnumUpdating = IndexStateEnum("UPDATING")
)

type IndexStateEnumOutput struct{ *pulumi.OutputState }

func (IndexStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexStateEnum)(nil)).Elem()
}

func (o IndexStateEnumOutput) ToIndexStateEnumOutput() IndexStateEnumOutput {
	return o
}

func (o IndexStateEnumOutput) ToIndexStateEnumOutputWithContext(ctx context.Context) IndexStateEnumOutput {
	return o
}

func (o IndexStateEnumOutput) ToIndexStateEnumPtrOutput() IndexStateEnumPtrOutput {
	return o.ToIndexStateEnumPtrOutputWithContext(context.Background())
}

func (o IndexStateEnumOutput) ToIndexStateEnumPtrOutputWithContext(ctx context.Context) IndexStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexStateEnum) *IndexStateEnum {
		return &v
	}).(IndexStateEnumPtrOutput)
}

func (o IndexStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IndexStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IndexStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndexStateEnumPtrOutput struct{ *pulumi.OutputState }

func (IndexStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexStateEnum)(nil)).Elem()
}

func (o IndexStateEnumPtrOutput) ToIndexStateEnumPtrOutput() IndexStateEnumPtrOutput {
	return o
}

func (o IndexStateEnumPtrOutput) ToIndexStateEnumPtrOutputWithContext(ctx context.Context) IndexStateEnumPtrOutput {
	return o
}

func (o IndexStateEnumPtrOutput) Elem() IndexStateEnumOutput {
	return o.ApplyT(func(v *IndexStateEnum) IndexStateEnum {
		if v != nil {
			return *v
		}
		var ret IndexStateEnum
		return ret
	}).(IndexStateEnumOutput)
}

func (o IndexStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IndexStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndexType string

const (
	IndexTypeLocal      = IndexType("LOCAL")
	IndexTypeAggregator = IndexType("AGGREGATOR")
)

func (IndexType) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexType)(nil)).Elem()
}

func (e IndexType) ToIndexTypeOutput() IndexTypeOutput {
	return pulumi.ToOutput(e).(IndexTypeOutput)
}

func (e IndexType) ToIndexTypeOutputWithContext(ctx context.Context) IndexTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IndexTypeOutput)
}

func (e IndexType) ToIndexTypePtrOutput() IndexTypePtrOutput {
	return e.ToIndexTypePtrOutputWithContext(context.Background())
}

func (e IndexType) ToIndexTypePtrOutputWithContext(ctx context.Context) IndexTypePtrOutput {
	return IndexType(e).ToIndexTypeOutputWithContext(ctx).ToIndexTypePtrOutputWithContext(ctx)
}

func (e IndexType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IndexType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IndexTypeOutput struct{ *pulumi.OutputState }

func (IndexTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexType)(nil)).Elem()
}

func (o IndexTypeOutput) ToIndexTypeOutput() IndexTypeOutput {
	return o
}

func (o IndexTypeOutput) ToIndexTypeOutputWithContext(ctx context.Context) IndexTypeOutput {
	return o
}

func (o IndexTypeOutput) ToIndexTypePtrOutput() IndexTypePtrOutput {
	return o.ToIndexTypePtrOutputWithContext(context.Background())
}

func (o IndexTypeOutput) ToIndexTypePtrOutputWithContext(ctx context.Context) IndexTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexType) *IndexType {
		return &v
	}).(IndexTypePtrOutput)
}

func (o IndexTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IndexTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IndexTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndexTypePtrOutput struct{ *pulumi.OutputState }

func (IndexTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexType)(nil)).Elem()
}

func (o IndexTypePtrOutput) ToIndexTypePtrOutput() IndexTypePtrOutput {
	return o
}

func (o IndexTypePtrOutput) ToIndexTypePtrOutputWithContext(ctx context.Context) IndexTypePtrOutput {
	return o
}

func (o IndexTypePtrOutput) Elem() IndexTypeOutput {
	return o.ApplyT(func(v *IndexType) IndexType {
		if v != nil {
			return *v
		}
		var ret IndexType
		return ret
	}).(IndexTypeOutput)
}

func (o IndexTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IndexType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IndexTypeInput is an input type that accepts values of the IndexType enum
// A concrete instance of `IndexTypeInput` can be one of the following:
//
//	IndexTypeLocal
//	IndexTypeAggregator
type IndexTypeInput interface {
	pulumi.Input

	ToIndexTypeOutput() IndexTypeOutput
	ToIndexTypeOutputWithContext(context.Context) IndexTypeOutput
}

var indexTypePtrType = reflect.TypeOf((**IndexType)(nil)).Elem()

type IndexTypePtrInput interface {
	pulumi.Input

	ToIndexTypePtrOutput() IndexTypePtrOutput
	ToIndexTypePtrOutputWithContext(context.Context) IndexTypePtrOutput
}

type indexTypePtr string

func IndexTypePtr(v string) IndexTypePtrInput {
	return (*indexTypePtr)(&v)
}

func (*indexTypePtr) ElementType() reflect.Type {
	return indexTypePtrType
}

func (in *indexTypePtr) ToIndexTypePtrOutput() IndexTypePtrOutput {
	return pulumi.ToOutput(in).(IndexTypePtrOutput)
}

func (in *indexTypePtr) ToIndexTypePtrOutputWithContext(ctx context.Context) IndexTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IndexTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexTypeInput)(nil)).Elem(), IndexType("LOCAL"))
	pulumi.RegisterInputType(reflect.TypeOf((*IndexTypePtrInput)(nil)).Elem(), IndexType("LOCAL"))
	pulumi.RegisterOutputType(IndexStateEnumOutput{})
	pulumi.RegisterOutputType(IndexStateEnumPtrOutput{})
	pulumi.RegisterOutputType(IndexTypeOutput{})
	pulumi.RegisterOutputType(IndexTypePtrOutput{})
}
