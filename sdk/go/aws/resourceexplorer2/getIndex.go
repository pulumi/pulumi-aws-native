// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourceexplorer2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::ResourceExplorer2::Index Resource Type
func LookupIndex(ctx *pulumi.Context, args *LookupIndexArgs, opts ...pulumi.InvokeOption) (*LookupIndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIndexResult
	err := ctx.Invoke("aws-native:resourceexplorer2:getIndex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIndexArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupIndexResult struct {
	Arn        *string         `pulumi:"arn"`
	IndexState *IndexStateEnum `pulumi:"indexState"`
	Tags       *IndexTagMap    `pulumi:"tags"`
	Type       *IndexType      `pulumi:"type"`
}

func LookupIndexOutput(ctx *pulumi.Context, args LookupIndexOutputArgs, opts ...pulumi.InvokeOption) LookupIndexResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIndexResult, error) {
			args := v.(LookupIndexArgs)
			r, err := LookupIndex(ctx, &args, opts...)
			var s LookupIndexResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIndexResultOutput)
}

type LookupIndexOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupIndexOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexArgs)(nil)).Elem()
}

type LookupIndexResultOutput struct{ *pulumi.OutputState }

func (LookupIndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexResult)(nil)).Elem()
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutput() LookupIndexResultOutput {
	return o
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutputWithContext(ctx context.Context) LookupIndexResultOutput {
	return o
}

func (o LookupIndexResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupIndexResult] {
	return pulumix.Output[LookupIndexResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupIndexResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupIndexResultOutput) IndexState() IndexStateEnumPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *IndexStateEnum { return v.IndexState }).(IndexStateEnumPtrOutput)
}

func (o LookupIndexResultOutput) Tags() IndexTagMapPtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *IndexTagMap { return v.Tags }).(IndexTagMapPtrOutput)
}

func (o LookupIndexResultOutput) Type() IndexTypePtrOutput {
	return o.ApplyT(func(v LookupIndexResult) *IndexType { return v.Type }).(IndexTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIndexResultOutput{})
}
