// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourceexplorer2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ViewIncludedProperty struct {
	// The name of the property that is included in this view.
	Name string `pulumi:"name"`
}

// ViewIncludedPropertyInput is an input type that accepts ViewIncludedPropertyArgs and ViewIncludedPropertyOutput values.
// You can construct a concrete instance of `ViewIncludedPropertyInput` via:
//
//	ViewIncludedPropertyArgs{...}
type ViewIncludedPropertyInput interface {
	pulumi.Input

	ToViewIncludedPropertyOutput() ViewIncludedPropertyOutput
	ToViewIncludedPropertyOutputWithContext(context.Context) ViewIncludedPropertyOutput
}

type ViewIncludedPropertyArgs struct {
	// The name of the property that is included in this view.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ViewIncludedPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewIncludedProperty)(nil)).Elem()
}

func (i ViewIncludedPropertyArgs) ToViewIncludedPropertyOutput() ViewIncludedPropertyOutput {
	return i.ToViewIncludedPropertyOutputWithContext(context.Background())
}

func (i ViewIncludedPropertyArgs) ToViewIncludedPropertyOutputWithContext(ctx context.Context) ViewIncludedPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewIncludedPropertyOutput)
}

// ViewIncludedPropertyArrayInput is an input type that accepts ViewIncludedPropertyArray and ViewIncludedPropertyArrayOutput values.
// You can construct a concrete instance of `ViewIncludedPropertyArrayInput` via:
//
//	ViewIncludedPropertyArray{ ViewIncludedPropertyArgs{...} }
type ViewIncludedPropertyArrayInput interface {
	pulumi.Input

	ToViewIncludedPropertyArrayOutput() ViewIncludedPropertyArrayOutput
	ToViewIncludedPropertyArrayOutputWithContext(context.Context) ViewIncludedPropertyArrayOutput
}

type ViewIncludedPropertyArray []ViewIncludedPropertyInput

func (ViewIncludedPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewIncludedProperty)(nil)).Elem()
}

func (i ViewIncludedPropertyArray) ToViewIncludedPropertyArrayOutput() ViewIncludedPropertyArrayOutput {
	return i.ToViewIncludedPropertyArrayOutputWithContext(context.Background())
}

func (i ViewIncludedPropertyArray) ToViewIncludedPropertyArrayOutputWithContext(ctx context.Context) ViewIncludedPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewIncludedPropertyArrayOutput)
}

type ViewIncludedPropertyOutput struct{ *pulumi.OutputState }

func (ViewIncludedPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewIncludedProperty)(nil)).Elem()
}

func (o ViewIncludedPropertyOutput) ToViewIncludedPropertyOutput() ViewIncludedPropertyOutput {
	return o
}

func (o ViewIncludedPropertyOutput) ToViewIncludedPropertyOutputWithContext(ctx context.Context) ViewIncludedPropertyOutput {
	return o
}

// The name of the property that is included in this view.
func (o ViewIncludedPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ViewIncludedProperty) string { return v.Name }).(pulumi.StringOutput)
}

type ViewIncludedPropertyArrayOutput struct{ *pulumi.OutputState }

func (ViewIncludedPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewIncludedProperty)(nil)).Elem()
}

func (o ViewIncludedPropertyArrayOutput) ToViewIncludedPropertyArrayOutput() ViewIncludedPropertyArrayOutput {
	return o
}

func (o ViewIncludedPropertyArrayOutput) ToViewIncludedPropertyArrayOutputWithContext(ctx context.Context) ViewIncludedPropertyArrayOutput {
	return o
}

func (o ViewIncludedPropertyArrayOutput) Index(i pulumi.IntInput) ViewIncludedPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ViewIncludedProperty {
		return vs[0].([]ViewIncludedProperty)[vs[1].(int)]
	}).(ViewIncludedPropertyOutput)
}

type ViewSearchFilter struct {
	// The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a Search operation.
	//
	// For information about the supported syntax, see [Search query reference](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html) in the *AWS Resource Explorer User Guide* .
	//
	// > This query string in the context of this operation supports only [filter prefixes](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-filters) with optional [operators](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-operators) . It doesn't support free-form text. For example, the string `region:us* service:ec2 -tag:stage=prod` includes all Amazon EC2 resources in any AWS Region that begin with the letters `us` and are *not* tagged with a key `Stage` that has the value `prod` .
	FilterString string `pulumi:"filterString"`
}

// ViewSearchFilterInput is an input type that accepts ViewSearchFilterArgs and ViewSearchFilterOutput values.
// You can construct a concrete instance of `ViewSearchFilterInput` via:
//
//	ViewSearchFilterArgs{...}
type ViewSearchFilterInput interface {
	pulumi.Input

	ToViewSearchFilterOutput() ViewSearchFilterOutput
	ToViewSearchFilterOutputWithContext(context.Context) ViewSearchFilterOutput
}

type ViewSearchFilterArgs struct {
	// The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a Search operation.
	//
	// For information about the supported syntax, see [Search query reference](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html) in the *AWS Resource Explorer User Guide* .
	//
	// > This query string in the context of this operation supports only [filter prefixes](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-filters) with optional [operators](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-operators) . It doesn't support free-form text. For example, the string `region:us* service:ec2 -tag:stage=prod` includes all Amazon EC2 resources in any AWS Region that begin with the letters `us` and are *not* tagged with a key `Stage` that has the value `prod` .
	FilterString pulumi.StringInput `pulumi:"filterString"`
}

func (ViewSearchFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewSearchFilter)(nil)).Elem()
}

func (i ViewSearchFilterArgs) ToViewSearchFilterOutput() ViewSearchFilterOutput {
	return i.ToViewSearchFilterOutputWithContext(context.Background())
}

func (i ViewSearchFilterArgs) ToViewSearchFilterOutputWithContext(ctx context.Context) ViewSearchFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewSearchFilterOutput)
}

func (i ViewSearchFilterArgs) ToViewSearchFilterPtrOutput() ViewSearchFilterPtrOutput {
	return i.ToViewSearchFilterPtrOutputWithContext(context.Background())
}

func (i ViewSearchFilterArgs) ToViewSearchFilterPtrOutputWithContext(ctx context.Context) ViewSearchFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewSearchFilterOutput).ToViewSearchFilterPtrOutputWithContext(ctx)
}

// ViewSearchFilterPtrInput is an input type that accepts ViewSearchFilterArgs, ViewSearchFilterPtr and ViewSearchFilterPtrOutput values.
// You can construct a concrete instance of `ViewSearchFilterPtrInput` via:
//
//	        ViewSearchFilterArgs{...}
//
//	or:
//
//	        nil
type ViewSearchFilterPtrInput interface {
	pulumi.Input

	ToViewSearchFilterPtrOutput() ViewSearchFilterPtrOutput
	ToViewSearchFilterPtrOutputWithContext(context.Context) ViewSearchFilterPtrOutput
}

type viewSearchFilterPtrType ViewSearchFilterArgs

func ViewSearchFilterPtr(v *ViewSearchFilterArgs) ViewSearchFilterPtrInput {
	return (*viewSearchFilterPtrType)(v)
}

func (*viewSearchFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewSearchFilter)(nil)).Elem()
}

func (i *viewSearchFilterPtrType) ToViewSearchFilterPtrOutput() ViewSearchFilterPtrOutput {
	return i.ToViewSearchFilterPtrOutputWithContext(context.Background())
}

func (i *viewSearchFilterPtrType) ToViewSearchFilterPtrOutputWithContext(ctx context.Context) ViewSearchFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewSearchFilterPtrOutput)
}

type ViewSearchFilterOutput struct{ *pulumi.OutputState }

func (ViewSearchFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewSearchFilter)(nil)).Elem()
}

func (o ViewSearchFilterOutput) ToViewSearchFilterOutput() ViewSearchFilterOutput {
	return o
}

func (o ViewSearchFilterOutput) ToViewSearchFilterOutputWithContext(ctx context.Context) ViewSearchFilterOutput {
	return o
}

func (o ViewSearchFilterOutput) ToViewSearchFilterPtrOutput() ViewSearchFilterPtrOutput {
	return o.ToViewSearchFilterPtrOutputWithContext(context.Background())
}

func (o ViewSearchFilterOutput) ToViewSearchFilterPtrOutputWithContext(ctx context.Context) ViewSearchFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ViewSearchFilter) *ViewSearchFilter {
		return &v
	}).(ViewSearchFilterPtrOutput)
}

// The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a Search operation.
//
// For information about the supported syntax, see [Search query reference](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html) in the *AWS Resource Explorer User Guide* .
//
// > This query string in the context of this operation supports only [filter prefixes](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-filters) with optional [operators](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-operators) . It doesn't support free-form text. For example, the string `region:us* service:ec2 -tag:stage=prod` includes all Amazon EC2 resources in any AWS Region that begin with the letters `us` and are *not* tagged with a key `Stage` that has the value `prod` .
func (o ViewSearchFilterOutput) FilterString() pulumi.StringOutput {
	return o.ApplyT(func(v ViewSearchFilter) string { return v.FilterString }).(pulumi.StringOutput)
}

type ViewSearchFilterPtrOutput struct{ *pulumi.OutputState }

func (ViewSearchFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewSearchFilter)(nil)).Elem()
}

func (o ViewSearchFilterPtrOutput) ToViewSearchFilterPtrOutput() ViewSearchFilterPtrOutput {
	return o
}

func (o ViewSearchFilterPtrOutput) ToViewSearchFilterPtrOutputWithContext(ctx context.Context) ViewSearchFilterPtrOutput {
	return o
}

func (o ViewSearchFilterPtrOutput) Elem() ViewSearchFilterOutput {
	return o.ApplyT(func(v *ViewSearchFilter) ViewSearchFilter {
		if v != nil {
			return *v
		}
		var ret ViewSearchFilter
		return ret
	}).(ViewSearchFilterOutput)
}

// The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a Search operation.
//
// For information about the supported syntax, see [Search query reference](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html) in the *AWS Resource Explorer User Guide* .
//
// > This query string in the context of this operation supports only [filter prefixes](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-filters) with optional [operators](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-operators) . It doesn't support free-form text. For example, the string `region:us* service:ec2 -tag:stage=prod` includes all Amazon EC2 resources in any AWS Region that begin with the letters `us` and are *not* tagged with a key `Stage` that has the value `prod` .
func (o ViewSearchFilterPtrOutput) FilterString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewSearchFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterString
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewIncludedPropertyInput)(nil)).Elem(), ViewIncludedPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewIncludedPropertyArrayInput)(nil)).Elem(), ViewIncludedPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewSearchFilterInput)(nil)).Elem(), ViewSearchFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewSearchFilterPtrInput)(nil)).Elem(), ViewSearchFilterArgs{})
	pulumi.RegisterOutputType(ViewIncludedPropertyOutput{})
	pulumi.RegisterOutputType(ViewIncludedPropertyArrayOutput{})
	pulumi.RegisterOutputType(ViewSearchFilterOutput{})
	pulumi.RegisterOutputType(ViewSearchFilterPtrOutput{})
}
