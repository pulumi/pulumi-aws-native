// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourceexplorer2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type IndexTagMap struct {
}

// IndexTagMapInput is an input type that accepts IndexTagMap and IndexTagMapOutput values.
// You can construct a concrete instance of `IndexTagMapInput` via:
//
//	IndexTagMap{ "key": IndexTagArgs{...} }
type IndexTagMapInput interface {
	pulumi.Input

	ToIndexTagMapOutput() IndexTagMapOutput
	ToIndexTagMapOutputWithContext(context.Context) IndexTagMapOutput
}

type IndexTagMapArgs struct {
}

func (IndexTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexTagMap)(nil)).Elem()
}

func (i IndexTagMapArgs) ToIndexTagMapOutput() IndexTagMapOutput {
	return i.ToIndexTagMapOutputWithContext(context.Background())
}

func (i IndexTagMapArgs) ToIndexTagMapOutputWithContext(ctx context.Context) IndexTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexTagMapOutput)
}

func (i IndexTagMapArgs) ToIndexTagMapPtrOutput() IndexTagMapPtrOutput {
	return i.ToIndexTagMapPtrOutputWithContext(context.Background())
}

func (i IndexTagMapArgs) ToIndexTagMapPtrOutputWithContext(ctx context.Context) IndexTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexTagMapOutput).ToIndexTagMapPtrOutputWithContext(ctx)
}

// IndexTagMapPtrInput is an input type that accepts IndexTagMapArgs, IndexTagMapPtr and IndexTagMapPtrOutput values.
// You can construct a concrete instance of `IndexTagMapPtrInput` via:
//
//	        IndexTagMapArgs{...}
//
//	or:
//
//	        nil
type IndexTagMapPtrInput interface {
	pulumi.Input

	ToIndexTagMapPtrOutput() IndexTagMapPtrOutput
	ToIndexTagMapPtrOutputWithContext(context.Context) IndexTagMapPtrOutput
}

type indexTagMapPtrType IndexTagMapArgs

func IndexTagMapPtr(v *IndexTagMapArgs) IndexTagMapPtrInput {
	return (*indexTagMapPtrType)(v)
}

func (*indexTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexTagMap)(nil)).Elem()
}

func (i *indexTagMapPtrType) ToIndexTagMapPtrOutput() IndexTagMapPtrOutput {
	return i.ToIndexTagMapPtrOutputWithContext(context.Background())
}

func (i *indexTagMapPtrType) ToIndexTagMapPtrOutputWithContext(ctx context.Context) IndexTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexTagMapPtrOutput)
}

type IndexTagMapOutput struct{ *pulumi.OutputState }

func (IndexTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexTagMap)(nil)).Elem()
}

func (o IndexTagMapOutput) ToIndexTagMapOutput() IndexTagMapOutput {
	return o
}

func (o IndexTagMapOutput) ToIndexTagMapOutputWithContext(ctx context.Context) IndexTagMapOutput {
	return o
}

func (o IndexTagMapOutput) ToIndexTagMapPtrOutput() IndexTagMapPtrOutput {
	return o.ToIndexTagMapPtrOutputWithContext(context.Background())
}

func (o IndexTagMapOutput) ToIndexTagMapPtrOutputWithContext(ctx context.Context) IndexTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexTagMap) *IndexTagMap {
		return &v
	}).(IndexTagMapPtrOutput)
}

type IndexTagMapPtrOutput struct{ *pulumi.OutputState }

func (IndexTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexTagMap)(nil)).Elem()
}

func (o IndexTagMapPtrOutput) ToIndexTagMapPtrOutput() IndexTagMapPtrOutput {
	return o
}

func (o IndexTagMapPtrOutput) ToIndexTagMapPtrOutputWithContext(ctx context.Context) IndexTagMapPtrOutput {
	return o
}

func (o IndexTagMapPtrOutput) Elem() IndexTagMapOutput {
	return o.ApplyT(func(v *IndexTagMap) IndexTagMap {
		if v != nil {
			return *v
		}
		var ret IndexTagMap
		return ret
	}).(IndexTagMapOutput)
}

type ViewFilters struct {
	FilterString string `pulumi:"filterString"`
}

// ViewFiltersInput is an input type that accepts ViewFiltersArgs and ViewFiltersOutput values.
// You can construct a concrete instance of `ViewFiltersInput` via:
//
//	ViewFiltersArgs{...}
type ViewFiltersInput interface {
	pulumi.Input

	ToViewFiltersOutput() ViewFiltersOutput
	ToViewFiltersOutputWithContext(context.Context) ViewFiltersOutput
}

type ViewFiltersArgs struct {
	FilterString pulumi.StringInput `pulumi:"filterString"`
}

func (ViewFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewFilters)(nil)).Elem()
}

func (i ViewFiltersArgs) ToViewFiltersOutput() ViewFiltersOutput {
	return i.ToViewFiltersOutputWithContext(context.Background())
}

func (i ViewFiltersArgs) ToViewFiltersOutputWithContext(ctx context.Context) ViewFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewFiltersOutput)
}

func (i ViewFiltersArgs) ToViewFiltersPtrOutput() ViewFiltersPtrOutput {
	return i.ToViewFiltersPtrOutputWithContext(context.Background())
}

func (i ViewFiltersArgs) ToViewFiltersPtrOutputWithContext(ctx context.Context) ViewFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewFiltersOutput).ToViewFiltersPtrOutputWithContext(ctx)
}

// ViewFiltersPtrInput is an input type that accepts ViewFiltersArgs, ViewFiltersPtr and ViewFiltersPtrOutput values.
// You can construct a concrete instance of `ViewFiltersPtrInput` via:
//
//	        ViewFiltersArgs{...}
//
//	or:
//
//	        nil
type ViewFiltersPtrInput interface {
	pulumi.Input

	ToViewFiltersPtrOutput() ViewFiltersPtrOutput
	ToViewFiltersPtrOutputWithContext(context.Context) ViewFiltersPtrOutput
}

type viewFiltersPtrType ViewFiltersArgs

func ViewFiltersPtr(v *ViewFiltersArgs) ViewFiltersPtrInput {
	return (*viewFiltersPtrType)(v)
}

func (*viewFiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewFilters)(nil)).Elem()
}

func (i *viewFiltersPtrType) ToViewFiltersPtrOutput() ViewFiltersPtrOutput {
	return i.ToViewFiltersPtrOutputWithContext(context.Background())
}

func (i *viewFiltersPtrType) ToViewFiltersPtrOutputWithContext(ctx context.Context) ViewFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewFiltersPtrOutput)
}

type ViewFiltersOutput struct{ *pulumi.OutputState }

func (ViewFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewFilters)(nil)).Elem()
}

func (o ViewFiltersOutput) ToViewFiltersOutput() ViewFiltersOutput {
	return o
}

func (o ViewFiltersOutput) ToViewFiltersOutputWithContext(ctx context.Context) ViewFiltersOutput {
	return o
}

func (o ViewFiltersOutput) ToViewFiltersPtrOutput() ViewFiltersPtrOutput {
	return o.ToViewFiltersPtrOutputWithContext(context.Background())
}

func (o ViewFiltersOutput) ToViewFiltersPtrOutputWithContext(ctx context.Context) ViewFiltersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ViewFilters) *ViewFilters {
		return &v
	}).(ViewFiltersPtrOutput)
}

func (o ViewFiltersOutput) FilterString() pulumi.StringOutput {
	return o.ApplyT(func(v ViewFilters) string { return v.FilterString }).(pulumi.StringOutput)
}

type ViewFiltersPtrOutput struct{ *pulumi.OutputState }

func (ViewFiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewFilters)(nil)).Elem()
}

func (o ViewFiltersPtrOutput) ToViewFiltersPtrOutput() ViewFiltersPtrOutput {
	return o
}

func (o ViewFiltersPtrOutput) ToViewFiltersPtrOutputWithContext(ctx context.Context) ViewFiltersPtrOutput {
	return o
}

func (o ViewFiltersPtrOutput) Elem() ViewFiltersOutput {
	return o.ApplyT(func(v *ViewFilters) ViewFilters {
		if v != nil {
			return *v
		}
		var ret ViewFilters
		return ret
	}).(ViewFiltersOutput)
}

func (o ViewFiltersPtrOutput) FilterString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewFilters) *string {
		if v == nil {
			return nil
		}
		return &v.FilterString
	}).(pulumi.StringPtrOutput)
}

type ViewIncludedProperty struct {
	Name string `pulumi:"name"`
}

// ViewIncludedPropertyInput is an input type that accepts ViewIncludedPropertyArgs and ViewIncludedPropertyOutput values.
// You can construct a concrete instance of `ViewIncludedPropertyInput` via:
//
//	ViewIncludedPropertyArgs{...}
type ViewIncludedPropertyInput interface {
	pulumi.Input

	ToViewIncludedPropertyOutput() ViewIncludedPropertyOutput
	ToViewIncludedPropertyOutputWithContext(context.Context) ViewIncludedPropertyOutput
}

type ViewIncludedPropertyArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (ViewIncludedPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewIncludedProperty)(nil)).Elem()
}

func (i ViewIncludedPropertyArgs) ToViewIncludedPropertyOutput() ViewIncludedPropertyOutput {
	return i.ToViewIncludedPropertyOutputWithContext(context.Background())
}

func (i ViewIncludedPropertyArgs) ToViewIncludedPropertyOutputWithContext(ctx context.Context) ViewIncludedPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewIncludedPropertyOutput)
}

// ViewIncludedPropertyArrayInput is an input type that accepts ViewIncludedPropertyArray and ViewIncludedPropertyArrayOutput values.
// You can construct a concrete instance of `ViewIncludedPropertyArrayInput` via:
//
//	ViewIncludedPropertyArray{ ViewIncludedPropertyArgs{...} }
type ViewIncludedPropertyArrayInput interface {
	pulumi.Input

	ToViewIncludedPropertyArrayOutput() ViewIncludedPropertyArrayOutput
	ToViewIncludedPropertyArrayOutputWithContext(context.Context) ViewIncludedPropertyArrayOutput
}

type ViewIncludedPropertyArray []ViewIncludedPropertyInput

func (ViewIncludedPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewIncludedProperty)(nil)).Elem()
}

func (i ViewIncludedPropertyArray) ToViewIncludedPropertyArrayOutput() ViewIncludedPropertyArrayOutput {
	return i.ToViewIncludedPropertyArrayOutputWithContext(context.Background())
}

func (i ViewIncludedPropertyArray) ToViewIncludedPropertyArrayOutputWithContext(ctx context.Context) ViewIncludedPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewIncludedPropertyArrayOutput)
}

type ViewIncludedPropertyOutput struct{ *pulumi.OutputState }

func (ViewIncludedPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewIncludedProperty)(nil)).Elem()
}

func (o ViewIncludedPropertyOutput) ToViewIncludedPropertyOutput() ViewIncludedPropertyOutput {
	return o
}

func (o ViewIncludedPropertyOutput) ToViewIncludedPropertyOutputWithContext(ctx context.Context) ViewIncludedPropertyOutput {
	return o
}

func (o ViewIncludedPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ViewIncludedProperty) string { return v.Name }).(pulumi.StringOutput)
}

type ViewIncludedPropertyArrayOutput struct{ *pulumi.OutputState }

func (ViewIncludedPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ViewIncludedProperty)(nil)).Elem()
}

func (o ViewIncludedPropertyArrayOutput) ToViewIncludedPropertyArrayOutput() ViewIncludedPropertyArrayOutput {
	return o
}

func (o ViewIncludedPropertyArrayOutput) ToViewIncludedPropertyArrayOutputWithContext(ctx context.Context) ViewIncludedPropertyArrayOutput {
	return o
}

func (o ViewIncludedPropertyArrayOutput) Index(i pulumi.IntInput) ViewIncludedPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ViewIncludedProperty {
		return vs[0].([]ViewIncludedProperty)[vs[1].(int)]
	}).(ViewIncludedPropertyOutput)
}

type ViewTagMap struct {
}

// ViewTagMapInput is an input type that accepts ViewTagMap and ViewTagMapOutput values.
// You can construct a concrete instance of `ViewTagMapInput` via:
//
//	ViewTagMap{ "key": ViewTagArgs{...} }
type ViewTagMapInput interface {
	pulumi.Input

	ToViewTagMapOutput() ViewTagMapOutput
	ToViewTagMapOutputWithContext(context.Context) ViewTagMapOutput
}

type ViewTagMapArgs struct {
}

func (ViewTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewTagMap)(nil)).Elem()
}

func (i ViewTagMapArgs) ToViewTagMapOutput() ViewTagMapOutput {
	return i.ToViewTagMapOutputWithContext(context.Background())
}

func (i ViewTagMapArgs) ToViewTagMapOutputWithContext(ctx context.Context) ViewTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewTagMapOutput)
}

func (i ViewTagMapArgs) ToViewTagMapPtrOutput() ViewTagMapPtrOutput {
	return i.ToViewTagMapPtrOutputWithContext(context.Background())
}

func (i ViewTagMapArgs) ToViewTagMapPtrOutputWithContext(ctx context.Context) ViewTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewTagMapOutput).ToViewTagMapPtrOutputWithContext(ctx)
}

// ViewTagMapPtrInput is an input type that accepts ViewTagMapArgs, ViewTagMapPtr and ViewTagMapPtrOutput values.
// You can construct a concrete instance of `ViewTagMapPtrInput` via:
//
//	        ViewTagMapArgs{...}
//
//	or:
//
//	        nil
type ViewTagMapPtrInput interface {
	pulumi.Input

	ToViewTagMapPtrOutput() ViewTagMapPtrOutput
	ToViewTagMapPtrOutputWithContext(context.Context) ViewTagMapPtrOutput
}

type viewTagMapPtrType ViewTagMapArgs

func ViewTagMapPtr(v *ViewTagMapArgs) ViewTagMapPtrInput {
	return (*viewTagMapPtrType)(v)
}

func (*viewTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewTagMap)(nil)).Elem()
}

func (i *viewTagMapPtrType) ToViewTagMapPtrOutput() ViewTagMapPtrOutput {
	return i.ToViewTagMapPtrOutputWithContext(context.Background())
}

func (i *viewTagMapPtrType) ToViewTagMapPtrOutputWithContext(ctx context.Context) ViewTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewTagMapPtrOutput)
}

type ViewTagMapOutput struct{ *pulumi.OutputState }

func (ViewTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewTagMap)(nil)).Elem()
}

func (o ViewTagMapOutput) ToViewTagMapOutput() ViewTagMapOutput {
	return o
}

func (o ViewTagMapOutput) ToViewTagMapOutputWithContext(ctx context.Context) ViewTagMapOutput {
	return o
}

func (o ViewTagMapOutput) ToViewTagMapPtrOutput() ViewTagMapPtrOutput {
	return o.ToViewTagMapPtrOutputWithContext(context.Background())
}

func (o ViewTagMapOutput) ToViewTagMapPtrOutputWithContext(ctx context.Context) ViewTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ViewTagMap) *ViewTagMap {
		return &v
	}).(ViewTagMapPtrOutput)
}

type ViewTagMapPtrOutput struct{ *pulumi.OutputState }

func (ViewTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewTagMap)(nil)).Elem()
}

func (o ViewTagMapPtrOutput) ToViewTagMapPtrOutput() ViewTagMapPtrOutput {
	return o
}

func (o ViewTagMapPtrOutput) ToViewTagMapPtrOutputWithContext(ctx context.Context) ViewTagMapPtrOutput {
	return o
}

func (o ViewTagMapPtrOutput) Elem() ViewTagMapOutput {
	return o.ApplyT(func(v *ViewTagMap) ViewTagMap {
		if v != nil {
			return *v
		}
		var ret ViewTagMap
		return ret
	}).(ViewTagMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexTagMapInput)(nil)).Elem(), IndexTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexTagMapPtrInput)(nil)).Elem(), IndexTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewFiltersInput)(nil)).Elem(), ViewFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewFiltersPtrInput)(nil)).Elem(), ViewFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewIncludedPropertyInput)(nil)).Elem(), ViewIncludedPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewIncludedPropertyArrayInput)(nil)).Elem(), ViewIncludedPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewTagMapInput)(nil)).Elem(), ViewTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewTagMapPtrInput)(nil)).Elem(), ViewTagMapArgs{})
	pulumi.RegisterOutputType(IndexTagMapOutput{})
	pulumi.RegisterOutputType(IndexTagMapPtrOutput{})
	pulumi.RegisterOutputType(ViewFiltersOutput{})
	pulumi.RegisterOutputType(ViewFiltersPtrOutput{})
	pulumi.RegisterOutputType(ViewIncludedPropertyOutput{})
	pulumi.RegisterOutputType(ViewIncludedPropertyArrayOutput{})
	pulumi.RegisterOutputType(ViewTagMapOutput{})
	pulumi.RegisterOutputType(ViewTagMapPtrOutput{})
}
