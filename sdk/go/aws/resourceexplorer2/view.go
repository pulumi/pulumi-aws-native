// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourceexplorer2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::ResourceExplorer2::View Resource Type
type View struct {
	pulumi.CustomResourceState

	// A search filter defines which resources can be part of a search query result set.
	Filters ViewSearchFilterPtrOutput `pulumi:"filters"`
	// Information about an additional property that describes a resource, that you can optionally include in a view.
	IncludedProperties ViewIncludedPropertyArrayOutput `pulumi:"includedProperties"`
	// The root ARN of the account, an organizational unit (OU), or an organization ARN. If left empty, the default is account.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Tag key and value pairs that are attached to the view.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ARN of the new view. For example:
	//
	// `arn:aws:resource-explorer-2:us-east-1:123456789012:view/MyView/EXAMPLE8-90ab-cdef-fedc-EXAMPLE22222`
	ViewArn pulumi.StringOutput `pulumi:"viewArn"`
	// The name of the new view.
	ViewName pulumi.StringOutput `pulumi:"viewName"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil {
		args = &ViewArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"scope",
		"viewName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource View
	err := ctx.RegisterResource("aws-native:resourceexplorer2:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("aws-native:resourceexplorer2:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
}

type ViewState struct {
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// A search filter defines which resources can be part of a search query result set.
	Filters *ViewSearchFilter `pulumi:"filters"`
	// Information about an additional property that describes a resource, that you can optionally include in a view.
	IncludedProperties []ViewIncludedProperty `pulumi:"includedProperties"`
	// The root ARN of the account, an organizational unit (OU), or an organization ARN. If left empty, the default is account.
	Scope *string `pulumi:"scope"`
	// Tag key and value pairs that are attached to the view.
	Tags map[string]string `pulumi:"tags"`
	// The name of the new view.
	ViewName *string `pulumi:"viewName"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// A search filter defines which resources can be part of a search query result set.
	Filters ViewSearchFilterPtrInput
	// Information about an additional property that describes a resource, that you can optionally include in a view.
	IncludedProperties ViewIncludedPropertyArrayInput
	// The root ARN of the account, an organizational unit (OU), or an organization ARN. If left empty, the default is account.
	Scope pulumi.StringPtrInput
	// Tag key and value pairs that are attached to the view.
	Tags pulumi.StringMapInput
	// The name of the new view.
	ViewName pulumi.StringPtrInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}

type ViewInput interface {
	pulumi.Input

	ToViewOutput() ViewOutput
	ToViewOutputWithContext(ctx context.Context) ViewOutput
}

func (*View) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (i *View) ToViewOutput() ViewOutput {
	return i.ToViewOutputWithContext(context.Background())
}

func (i *View) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewOutput)
}

type ViewOutput struct{ *pulumi.OutputState }

func (ViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (o ViewOutput) ToViewOutput() ViewOutput {
	return o
}

func (o ViewOutput) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return o
}

// A search filter defines which resources can be part of a search query result set.
func (o ViewOutput) Filters() ViewSearchFilterPtrOutput {
	return o.ApplyT(func(v *View) ViewSearchFilterPtrOutput { return v.Filters }).(ViewSearchFilterPtrOutput)
}

// Information about an additional property that describes a resource, that you can optionally include in a view.
func (o ViewOutput) IncludedProperties() ViewIncludedPropertyArrayOutput {
	return o.ApplyT(func(v *View) ViewIncludedPropertyArrayOutput { return v.IncludedProperties }).(ViewIncludedPropertyArrayOutput)
}

// The root ARN of the account, an organizational unit (OU), or an organization ARN. If left empty, the default is account.
func (o ViewOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Tag key and value pairs that are attached to the view.
func (o ViewOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *View) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ARN of the new view. For example:
//
// `arn:aws:resource-explorer-2:us-east-1:123456789012:view/MyView/EXAMPLE8-90ab-cdef-fedc-EXAMPLE22222`
func (o ViewOutput) ViewArn() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.ViewArn }).(pulumi.StringOutput)
}

// The name of the new view.
func (o ViewOutput) ViewName() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.ViewName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewInput)(nil)).Elem(), &View{})
	pulumi.RegisterOutputType(ViewOutput{})
}
