// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gameliftstreams

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::GameLiftStreams::StreamGroup Resource Type
type StreamGroup struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput                         `pulumi:"arn"`
	AwsId                  pulumi.StringOutput                         `pulumi:"awsId"`
	DefaultApplication     StreamGroupDefaultApplicationPtrOutput      `pulumi:"defaultApplication"`
	Description            pulumi.StringOutput                         `pulumi:"description"`
	LocationConfigurations StreamGroupLocationConfigurationArrayOutput `pulumi:"locationConfigurations"`
	StreamClass            pulumi.StringOutput                         `pulumi:"streamClass"`
	Tags                   pulumi.StringMapOutput                      `pulumi:"tags"`
}

// NewStreamGroup registers a new resource with the given unique name, arguments, and options.
func NewStreamGroup(ctx *pulumi.Context,
	name string, args *StreamGroupArgs, opts ...pulumi.ResourceOption) (*StreamGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.LocationConfigurations == nil {
		return nil, errors.New("invalid value for required argument 'LocationConfigurations'")
	}
	if args.StreamClass == nil {
		return nil, errors.New("invalid value for required argument 'StreamClass'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"defaultApplication.id",
		"streamClass",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamGroup
	err := ctx.RegisterResource("aws-native:gameliftstreams:StreamGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamGroup gets an existing StreamGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamGroupState, opts ...pulumi.ResourceOption) (*StreamGroup, error) {
	var resource StreamGroup
	err := ctx.ReadResource("aws-native:gameliftstreams:StreamGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamGroup resources.
type streamGroupState struct {
}

type StreamGroupState struct {
}

func (StreamGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGroupState)(nil)).Elem()
}

type streamGroupArgs struct {
	DefaultApplication     *StreamGroupDefaultApplication     `pulumi:"defaultApplication"`
	Description            string                             `pulumi:"description"`
	LocationConfigurations []StreamGroupLocationConfiguration `pulumi:"locationConfigurations"`
	StreamClass            string                             `pulumi:"streamClass"`
	Tags                   map[string]string                  `pulumi:"tags"`
}

// The set of arguments for constructing a StreamGroup resource.
type StreamGroupArgs struct {
	DefaultApplication     StreamGroupDefaultApplicationPtrInput
	Description            pulumi.StringInput
	LocationConfigurations StreamGroupLocationConfigurationArrayInput
	StreamClass            pulumi.StringInput
	Tags                   pulumi.StringMapInput
}

func (StreamGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGroupArgs)(nil)).Elem()
}

type StreamGroupInput interface {
	pulumi.Input

	ToStreamGroupOutput() StreamGroupOutput
	ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput
}

func (*StreamGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGroup)(nil)).Elem()
}

func (i *StreamGroup) ToStreamGroupOutput() StreamGroupOutput {
	return i.ToStreamGroupOutputWithContext(context.Background())
}

func (i *StreamGroup) ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGroupOutput)
}

type StreamGroupOutput struct{ *pulumi.OutputState }

func (StreamGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGroup)(nil)).Elem()
}

func (o StreamGroupOutput) ToStreamGroupOutput() StreamGroupOutput {
	return o
}

func (o StreamGroupOutput) ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput {
	return o
}

func (o StreamGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o StreamGroupOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

func (o StreamGroupOutput) DefaultApplication() StreamGroupDefaultApplicationPtrOutput {
	return o.ApplyT(func(v *StreamGroup) StreamGroupDefaultApplicationPtrOutput { return v.DefaultApplication }).(StreamGroupDefaultApplicationPtrOutput)
}

func (o StreamGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o StreamGroupOutput) LocationConfigurations() StreamGroupLocationConfigurationArrayOutput {
	return o.ApplyT(func(v *StreamGroup) StreamGroupLocationConfigurationArrayOutput { return v.LocationConfigurations }).(StreamGroupLocationConfigurationArrayOutput)
}

func (o StreamGroupOutput) StreamClass() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.StreamClass }).(pulumi.StringOutput)
}

func (o StreamGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGroupInput)(nil)).Elem(), &StreamGroup{})
	pulumi.RegisterOutputType(StreamGroupOutput{})
}
