// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gameliftstreams

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::GameLiftStreams::StreamGroup Resource Type
type StreamGroup struct {
	pulumi.CustomResourceState

	// An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) that uniquely identifies the stream group resource. For example: `arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/sg-1AB2C3De4` .
	Arn pulumi.StringOutput `pulumi:"arn"`
	// An ID that uniquely identifies the stream group resource. For example: `sg-1AB2C3De4` .
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Object that identifies the Amazon GameLift Streams application to stream with this stream group.
	DefaultApplication StreamGroupDefaultApplicationPtrOutput `pulumi:"defaultApplication"`
	// A descriptive label for the stream group.
	Description pulumi.StringOutput `pulumi:"description"`
	// A set of one or more locations and the streaming capacity for each location. One of the locations MUST be your primary location, which is the AWS Region where you are specifying this resource.
	LocationConfigurations StreamGroupLocationConfigurationArrayOutput `pulumi:"locationConfigurations"`
	// The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:
	//
	// A stream class can be one of the following:
	//
	// - *`gen5n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen5n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM
	// - Tenancy: Supports up to 2 concurrent stream sessions
	// - *`gen5n_ultra` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen4n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen4n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM
	// - Tenancy: Supports up to 2 concurrent stream sessions
	// - *`gen4n_ultra` (NVIDIA, ultra)* Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	StreamClass pulumi.StringOutput `pulumi:"streamClass"`
	// A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewStreamGroup registers a new resource with the given unique name, arguments, and options.
func NewStreamGroup(ctx *pulumi.Context,
	name string, args *StreamGroupArgs, opts ...pulumi.ResourceOption) (*StreamGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.LocationConfigurations == nil {
		return nil, errors.New("invalid value for required argument 'LocationConfigurations'")
	}
	if args.StreamClass == nil {
		return nil, errors.New("invalid value for required argument 'StreamClass'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"defaultApplication.id",
		"streamClass",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamGroup
	err := ctx.RegisterResource("aws-native:gameliftstreams:StreamGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamGroup gets an existing StreamGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamGroupState, opts ...pulumi.ResourceOption) (*StreamGroup, error) {
	var resource StreamGroup
	err := ctx.ReadResource("aws-native:gameliftstreams:StreamGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamGroup resources.
type streamGroupState struct {
}

type StreamGroupState struct {
}

func (StreamGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGroupState)(nil)).Elem()
}

type streamGroupArgs struct {
	// Object that identifies the Amazon GameLift Streams application to stream with this stream group.
	DefaultApplication *StreamGroupDefaultApplication `pulumi:"defaultApplication"`
	// A descriptive label for the stream group.
	Description string `pulumi:"description"`
	// A set of one or more locations and the streaming capacity for each location. One of the locations MUST be your primary location, which is the AWS Region where you are specifying this resource.
	LocationConfigurations []StreamGroupLocationConfiguration `pulumi:"locationConfigurations"`
	// The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:
	//
	// A stream class can be one of the following:
	//
	// - *`gen5n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen5n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM
	// - Tenancy: Supports up to 2 concurrent stream sessions
	// - *`gen5n_ultra` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen4n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen4n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM
	// - Tenancy: Supports up to 2 concurrent stream sessions
	// - *`gen4n_ultra` (NVIDIA, ultra)* Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	StreamClass string `pulumi:"streamClass"`
	// A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StreamGroup resource.
type StreamGroupArgs struct {
	// Object that identifies the Amazon GameLift Streams application to stream with this stream group.
	DefaultApplication StreamGroupDefaultApplicationPtrInput
	// A descriptive label for the stream group.
	Description pulumi.StringInput
	// A set of one or more locations and the streaming capacity for each location. One of the locations MUST be your primary location, which is the AWS Region where you are specifying this resource.
	LocationConfigurations StreamGroupLocationConfigurationArrayInput
	// The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:
	//
	// A stream class can be one of the following:
	//
	// - *`gen5n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen5n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM
	// - Tenancy: Supports up to 2 concurrent stream sessions
	// - *`gen5n_ultra` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen4n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	// - *`gen4n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM
	// - Tenancy: Supports up to 2 concurrent stream sessions
	// - *`gen4n_ultra` (NVIDIA, ultra)* Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.
	//
	// - Reference resolution: 1080p
	// - Reference frame rate: 60 fps
	// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
	// - Tenancy: Supports 1 concurrent stream session
	StreamClass pulumi.StringInput
	// A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
	Tags pulumi.StringMapInput
}

func (StreamGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGroupArgs)(nil)).Elem()
}

type StreamGroupInput interface {
	pulumi.Input

	ToStreamGroupOutput() StreamGroupOutput
	ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput
}

func (*StreamGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGroup)(nil)).Elem()
}

func (i *StreamGroup) ToStreamGroupOutput() StreamGroupOutput {
	return i.ToStreamGroupOutputWithContext(context.Background())
}

func (i *StreamGroup) ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGroupOutput)
}

type StreamGroupOutput struct{ *pulumi.OutputState }

func (StreamGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGroup)(nil)).Elem()
}

func (o StreamGroupOutput) ToStreamGroupOutput() StreamGroupOutput {
	return o
}

func (o StreamGroupOutput) ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput {
	return o
}

// An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) that uniquely identifies the stream group resource. For example: `arn:aws:gameliftstreams:us-west-2:123456789012:streamgroup/sg-1AB2C3De4` .
func (o StreamGroupOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// An ID that uniquely identifies the stream group resource. For example: `sg-1AB2C3De4` .
func (o StreamGroupOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Object that identifies the Amazon GameLift Streams application to stream with this stream group.
func (o StreamGroupOutput) DefaultApplication() StreamGroupDefaultApplicationPtrOutput {
	return o.ApplyT(func(v *StreamGroup) StreamGroupDefaultApplicationPtrOutput { return v.DefaultApplication }).(StreamGroupDefaultApplicationPtrOutput)
}

// A descriptive label for the stream group.
func (o StreamGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A set of one or more locations and the streaming capacity for each location. One of the locations MUST be your primary location, which is the AWS Region where you are specifying this resource.
func (o StreamGroupOutput) LocationConfigurations() StreamGroupLocationConfigurationArrayOutput {
	return o.ApplyT(func(v *StreamGroup) StreamGroupLocationConfigurationArrayOutput { return v.LocationConfigurations }).(StreamGroupLocationConfigurationArrayOutput)
}

// The target stream quality for sessions that are hosted in this stream group. Set a stream class that is appropriate to the type of content that you're streaming. Stream class determines the type of computing resources Amazon GameLift Streams uses and impacts the cost of streaming. The following options are available:
//
// A stream class can be one of the following:
//
// - *`gen5n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA A10G Tensor GPU.
//
// - Reference resolution: 1080p
// - Reference frame rate: 60 fps
// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
// - Tenancy: Supports 1 concurrent stream session
// - *`gen5n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA A10G Tensor GPU.
//
// - Reference resolution: 1080p
// - Reference frame rate: 60 fps
// - Workload specifications: 4 vCPUs, 16 GB RAM, 12 GB VRAM
// - Tenancy: Supports up to 2 concurrent stream sessions
// - *`gen5n_ultra` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Uses dedicated NVIDIA A10G Tensor GPU.
//
// - Reference resolution: 1080p
// - Reference frame rate: 60 fps
// - Workload specifications: 8 vCPUs, 32 GB RAM, 24 GB VRAM
// - Tenancy: Supports 1 concurrent stream session
// - *`gen4n_win2022` (NVIDIA, ultra)* Supports applications with extremely high 3D scene complexity. Runs applications on Microsoft Windows Server 2022 Base and supports DirectX 12. Compatible with Unreal Engine versions up through 5.4, 32 and 64-bit applications, and anti-cheat technology. Uses NVIDIA T4 Tensor GPU.
//
// - Reference resolution: 1080p
// - Reference frame rate: 60 fps
// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
// - Tenancy: Supports 1 concurrent stream session
// - *`gen4n_high` (NVIDIA, high)* Supports applications with moderate to high 3D scene complexity. Uses NVIDIA T4 Tensor GPU.
//
// - Reference resolution: 1080p
// - Reference frame rate: 60 fps
// - Workload specifications: 4 vCPUs, 16 GB RAM, 8 GB VRAM
// - Tenancy: Supports up to 2 concurrent stream sessions
// - *`gen4n_ultra` (NVIDIA, ultra)* Supports applications with high 3D scene complexity. Uses dedicated NVIDIA T4 Tensor GPU.
//
// - Reference resolution: 1080p
// - Reference frame rate: 60 fps
// - Workload specifications: 8 vCPUs, 32 GB RAM, 16 GB VRAM
// - Tenancy: Supports 1 concurrent stream session
func (o StreamGroupOutput) StreamClass() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.StreamClass }).(pulumi.StringOutput)
}

// A list of labels to assign to the new stream group resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
func (o StreamGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGroupInput)(nil)).Elem(), &StreamGroup{})
	pulumi.RegisterOutputType(StreamGroupOutput{})
}
