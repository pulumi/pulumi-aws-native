// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gameliftstreams

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::GameLiftStreams::Application Resource Type
type Application struct {
	pulumi.CustomResourceState

	// An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Required if you specify one or more `ApplicationLogPaths` .
	ApplicationLogOutputUri pulumi.StringPtrOutput `pulumi:"applicationLogOutputUri"`
	// Locations of log files that your content generates during a stream session. Enter path values that are relative to the `ApplicationSourceUri` location. You can specify up to 10 log paths. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in `ApplicationLogOutputUri` at the end of a stream session. To retrieve stored log files, call [GetStreamSession](https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetStreamSession.html) and get the `LogFileLocationUri` .
	ApplicationLogPaths pulumi.StringArrayOutput `pulumi:"applicationLogPaths"`
	// The location of the content that you want to stream. Enter an Amazon S3 URI to a bucket that contains your game or other application. The location can have a multi-level prefix structure, but it must include all the files needed to run the content. Amazon GameLift Streams copies everything under the specified location.
	//
	// This value is immutable. To designate a different content location, create a new application.
	//
	// > The Amazon S3 bucket and the Amazon GameLift Streams application must be in the same AWS Region.
	ApplicationSourceUri pulumi.StringOutput `pulumi:"applicationSourceUri"`
	// An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) that uniquely identifies the application resource across all AWS Regions. For example:
	//
	// `arn:aws:gameliftstreams:us-west-2:123456789012:application/a-9ZY8X7Wv6` .
	Arn pulumi.StringOutput `pulumi:"arn"`
	// An ID that uniquely identifies the application resource. For example: `a-9ZY8X7Wv6` .
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A human-readable label for the application. You can update this value later.
	Description pulumi.StringOutput `pulumi:"description"`
	// The path and file name of the executable file that launches the content for streaming. Enter a path value that is relative to the location set in `ApplicationSourceUri` .
	ExecutablePath pulumi.StringOutput `pulumi:"executablePath"`
	// A set of configuration settings to run the application on a stream group. This configures the operating system, and can include compatibility layers and other drivers.
	RuntimeEnvironment ApplicationRuntimeEnvironmentOutput `pulumi:"runtimeEnvironment"`
	// A list of labels to assign to the new application resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationSourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationSourceUri'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.ExecutablePath == nil {
		return nil, errors.New("invalid value for required argument 'ExecutablePath'")
	}
	if args.RuntimeEnvironment == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeEnvironment'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationSourceUri",
		"executablePath",
		"runtimeEnvironment",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:gameliftstreams:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:gameliftstreams:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Required if you specify one or more `ApplicationLogPaths` .
	ApplicationLogOutputUri *string `pulumi:"applicationLogOutputUri"`
	// Locations of log files that your content generates during a stream session. Enter path values that are relative to the `ApplicationSourceUri` location. You can specify up to 10 log paths. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in `ApplicationLogOutputUri` at the end of a stream session. To retrieve stored log files, call [GetStreamSession](https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetStreamSession.html) and get the `LogFileLocationUri` .
	ApplicationLogPaths []string `pulumi:"applicationLogPaths"`
	// The location of the content that you want to stream. Enter an Amazon S3 URI to a bucket that contains your game or other application. The location can have a multi-level prefix structure, but it must include all the files needed to run the content. Amazon GameLift Streams copies everything under the specified location.
	//
	// This value is immutable. To designate a different content location, create a new application.
	//
	// > The Amazon S3 bucket and the Amazon GameLift Streams application must be in the same AWS Region.
	ApplicationSourceUri string `pulumi:"applicationSourceUri"`
	// A human-readable label for the application. You can update this value later.
	Description string `pulumi:"description"`
	// The path and file name of the executable file that launches the content for streaming. Enter a path value that is relative to the location set in `ApplicationSourceUri` .
	ExecutablePath string `pulumi:"executablePath"`
	// A set of configuration settings to run the application on a stream group. This configures the operating system, and can include compatibility layers and other drivers.
	RuntimeEnvironment ApplicationRuntimeEnvironment `pulumi:"runtimeEnvironment"`
	// A list of labels to assign to the new application resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Required if you specify one or more `ApplicationLogPaths` .
	ApplicationLogOutputUri pulumi.StringPtrInput
	// Locations of log files that your content generates during a stream session. Enter path values that are relative to the `ApplicationSourceUri` location. You can specify up to 10 log paths. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in `ApplicationLogOutputUri` at the end of a stream session. To retrieve stored log files, call [GetStreamSession](https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetStreamSession.html) and get the `LogFileLocationUri` .
	ApplicationLogPaths pulumi.StringArrayInput
	// The location of the content that you want to stream. Enter an Amazon S3 URI to a bucket that contains your game or other application. The location can have a multi-level prefix structure, but it must include all the files needed to run the content. Amazon GameLift Streams copies everything under the specified location.
	//
	// This value is immutable. To designate a different content location, create a new application.
	//
	// > The Amazon S3 bucket and the Amazon GameLift Streams application must be in the same AWS Region.
	ApplicationSourceUri pulumi.StringInput
	// A human-readable label for the application. You can update this value later.
	Description pulumi.StringInput
	// The path and file name of the executable file that launches the content for streaming. Enter a path value that is relative to the location set in `ApplicationSourceUri` .
	ExecutablePath pulumi.StringInput
	// A set of configuration settings to run the application on a stream group. This configures the operating system, and can include compatibility layers and other drivers.
	RuntimeEnvironment ApplicationRuntimeEnvironmentInput
	// A list of labels to assign to the new application resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
	Tags pulumi.StringMapInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Required if you specify one or more `ApplicationLogPaths` .
func (o ApplicationOutput) ApplicationLogOutputUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationLogOutputUri }).(pulumi.StringPtrOutput)
}

// Locations of log files that your content generates during a stream session. Enter path values that are relative to the `ApplicationSourceUri` location. You can specify up to 10 log paths. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in `ApplicationLogOutputUri` at the end of a stream session. To retrieve stored log files, call [GetStreamSession](https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetStreamSession.html) and get the `LogFileLocationUri` .
func (o ApplicationOutput) ApplicationLogPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.ApplicationLogPaths }).(pulumi.StringArrayOutput)
}

// The location of the content that you want to stream. Enter an Amazon S3 URI to a bucket that contains your game or other application. The location can have a multi-level prefix structure, but it must include all the files needed to run the content. Amazon GameLift Streams copies everything under the specified location.
//
// This value is immutable. To designate a different content location, create a new application.
//
// > The Amazon S3 bucket and the Amazon GameLift Streams application must be in the same AWS Region.
func (o ApplicationOutput) ApplicationSourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationSourceUri }).(pulumi.StringOutput)
}

// An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) that uniquely identifies the application resource across all AWS Regions. For example:
//
// `arn:aws:gameliftstreams:us-west-2:123456789012:application/a-9ZY8X7Wv6` .
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// An ID that uniquely identifies the application resource. For example: `a-9ZY8X7Wv6` .
func (o ApplicationOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A human-readable label for the application. You can update this value later.
func (o ApplicationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The path and file name of the executable file that launches the content for streaming. Enter a path value that is relative to the location set in `ApplicationSourceUri` .
func (o ApplicationOutput) ExecutablePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ExecutablePath }).(pulumi.StringOutput)
}

// A set of configuration settings to run the application on a stream group. This configures the operating system, and can include compatibility layers and other drivers.
func (o ApplicationOutput) RuntimeEnvironment() ApplicationRuntimeEnvironmentOutput {
	return o.ApplyT(func(v *Application) ApplicationRuntimeEnvironmentOutput { return v.RuntimeEnvironment }).(ApplicationRuntimeEnvironmentOutput)
}

// A list of labels to assign to the new application resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
func (o ApplicationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Application) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
