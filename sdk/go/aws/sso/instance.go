// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sso

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for Identity Center (SSO) Instance
type Instance struct {
	pulumi.CustomResourceState

	// The ID of the identity store associated with the created Identity Center (SSO) Instance
	IdentityStoreId pulumi.StringOutput `pulumi:"identityStoreId"`
	// The SSO Instance ARN that is returned upon creation of the Identity Center (SSO) Instance
	InstanceArn pulumi.StringOutput `pulumi:"instanceArn"`
	// The name you want to assign to this Identity Center (SSO) Instance
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The AWS accountId of the owner of the Identity Center (SSO) Instance
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// The status of the Identity Center (SSO) Instance, create_in_progress/delete_in_progress/active
	Status InstanceStatusOutput `pulumi:"status"`
	// A set of key-value pairs that are used to manage the resource. Tags can only be applied to permission sets and cannot be applied to corresponding roles that IAM Identity Center creates in AWS accounts.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		args = &InstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("aws-native:sso:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("aws-native:sso:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
}

type InstanceState struct {
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The name you want to assign to this Identity Center (SSO) Instance
	Name *string `pulumi:"name"`
	// A set of key-value pairs that are used to manage the resource. Tags can only be applied to permission sets and cannot be applied to corresponding roles that IAM Identity Center creates in AWS accounts.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The name you want to assign to this Identity Center (SSO) Instance
	Name pulumi.StringPtrInput
	// A set of key-value pairs that are used to manage the resource. Tags can only be applied to permission sets and cannot be applied to corresponding roles that IAM Identity Center creates in AWS accounts.
	Tags aws.TagArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The ID of the identity store associated with the created Identity Center (SSO) Instance
func (o InstanceOutput) IdentityStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.IdentityStoreId }).(pulumi.StringOutput)
}

// The SSO Instance ARN that is returned upon creation of the Identity Center (SSO) Instance
func (o InstanceOutput) InstanceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceArn }).(pulumi.StringOutput)
}

// The name you want to assign to this Identity Center (SSO) Instance
func (o InstanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The AWS accountId of the owner of the Identity Center (SSO) Instance
func (o InstanceOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// The status of the Identity Center (SSO) Instance, create_in_progress/delete_in_progress/active
func (o InstanceOutput) Status() InstanceStatusOutput {
	return o.ApplyT(func(v *Instance) InstanceStatusOutput { return v.Status }).(InstanceStatusOutput)
}

// A set of key-value pairs that are used to manage the resource. Tags can only be applied to permission sets and cannot be applied to corresponding roles that IAM Identity Center creates in AWS accounts.
func (o InstanceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Instance) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterOutputType(InstanceOutput{})
}
