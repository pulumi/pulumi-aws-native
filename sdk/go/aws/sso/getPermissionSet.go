// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sso

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for SSO PermissionSet
func LookupPermissionSet(ctx *pulumi.Context, args *LookupPermissionSetArgs, opts ...pulumi.InvokeOption) (*LookupPermissionSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPermissionSetResult
	err := ctx.Invoke("aws-native:sso:getPermissionSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPermissionSetArgs struct {
	// The sso instance arn that the permission set is owned.
	InstanceArn string `pulumi:"instanceArn"`
	// The permission set that the policy will be attached to
	PermissionSetArn string `pulumi:"permissionSetArn"`
}

type LookupPermissionSetResult struct {
	// Specifies the names and paths of the customer managed policies that you have attached to your permission set.
	CustomerManagedPolicyReferences []PermissionSetCustomerManagedPolicyReference `pulumi:"customerManagedPolicyReferences"`
	// The permission set description.
	Description *string `pulumi:"description"`
	// The inline policy to put in permission set.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SSO::PermissionSet` for more information about the expected schema for this property.
	InlinePolicy interface{} `pulumi:"inlinePolicy"`
	// A structure that stores the details of the AWS managed policy.
	ManagedPolicies []string `pulumi:"managedPolicies"`
	// The permission set that the policy will be attached to
	PermissionSetArn *string `pulumi:"permissionSetArn"`
	// Specifies the configuration of the AWS managed or customer managed policy that you want to set as a permissions boundary. Specify either `CustomerManagedPolicyReference` to use the name and path of a customer managed policy, or `ManagedPolicyArn` to use the ARN of an AWS managed policy. A permissions boundary represents the maximum permissions that any policy can grant your role. For more information, see [Permissions boundaries for IAM entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide* .
	//
	// > Policies used as permissions boundaries don't provide permissions. You must also attach an IAM policy to the role. To learn how the effective permissions for a role are evaluated, see [IAM JSON policy evaluation logic](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html) in the *IAM User Guide* .
	PermissionsBoundary *PermissionSetPermissionsBoundary `pulumi:"permissionsBoundary"`
	// The relay state URL that redirect links to any service in the AWS Management Console.
	RelayStateType *string `pulumi:"relayStateType"`
	// The length of time that a user can be signed in to an AWS account.
	SessionDuration *string `pulumi:"sessionDuration"`
	// The tags to attach to the new `PermissionSet` .
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupPermissionSetOutput(ctx *pulumi.Context, args LookupPermissionSetOutputArgs, opts ...pulumi.InvokeOption) LookupPermissionSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPermissionSetResultOutput, error) {
			args := v.(LookupPermissionSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:sso:getPermissionSet", args, LookupPermissionSetResultOutput{}, options).(LookupPermissionSetResultOutput), nil
		}).(LookupPermissionSetResultOutput)
}

type LookupPermissionSetOutputArgs struct {
	// The sso instance arn that the permission set is owned.
	InstanceArn pulumi.StringInput `pulumi:"instanceArn"`
	// The permission set that the policy will be attached to
	PermissionSetArn pulumi.StringInput `pulumi:"permissionSetArn"`
}

func (LookupPermissionSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionSetArgs)(nil)).Elem()
}

type LookupPermissionSetResultOutput struct{ *pulumi.OutputState }

func (LookupPermissionSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPermissionSetResult)(nil)).Elem()
}

func (o LookupPermissionSetResultOutput) ToLookupPermissionSetResultOutput() LookupPermissionSetResultOutput {
	return o
}

func (o LookupPermissionSetResultOutput) ToLookupPermissionSetResultOutputWithContext(ctx context.Context) LookupPermissionSetResultOutput {
	return o
}

// Specifies the names and paths of the customer managed policies that you have attached to your permission set.
func (o LookupPermissionSetResultOutput) CustomerManagedPolicyReferences() PermissionSetCustomerManagedPolicyReferenceArrayOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) []PermissionSetCustomerManagedPolicyReference {
		return v.CustomerManagedPolicyReferences
	}).(PermissionSetCustomerManagedPolicyReferenceArrayOutput)
}

// The permission set description.
func (o LookupPermissionSetResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The inline policy to put in permission set.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SSO::PermissionSet` for more information about the expected schema for this property.
func (o LookupPermissionSetResultOutput) InlinePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) interface{} { return v.InlinePolicy }).(pulumi.AnyOutput)
}

// A structure that stores the details of the AWS managed policy.
func (o LookupPermissionSetResultOutput) ManagedPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) []string { return v.ManagedPolicies }).(pulumi.StringArrayOutput)
}

// The permission set that the policy will be attached to
func (o LookupPermissionSetResultOutput) PermissionSetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) *string { return v.PermissionSetArn }).(pulumi.StringPtrOutput)
}

// Specifies the configuration of the AWS managed or customer managed policy that you want to set as a permissions boundary. Specify either `CustomerManagedPolicyReference` to use the name and path of a customer managed policy, or `ManagedPolicyArn` to use the ARN of an AWS managed policy. A permissions boundary represents the maximum permissions that any policy can grant your role. For more information, see [Permissions boundaries for IAM entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide* .
//
// > Policies used as permissions boundaries don't provide permissions. You must also attach an IAM policy to the role. To learn how the effective permissions for a role are evaluated, see [IAM JSON policy evaluation logic](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html) in the *IAM User Guide* .
func (o LookupPermissionSetResultOutput) PermissionsBoundary() PermissionSetPermissionsBoundaryPtrOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) *PermissionSetPermissionsBoundary { return v.PermissionsBoundary }).(PermissionSetPermissionsBoundaryPtrOutput)
}

// The relay state URL that redirect links to any service in the AWS Management Console.
func (o LookupPermissionSetResultOutput) RelayStateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) *string { return v.RelayStateType }).(pulumi.StringPtrOutput)
}

// The length of time that a user can be signed in to an AWS account.
func (o LookupPermissionSetResultOutput) SessionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) *string { return v.SessionDuration }).(pulumi.StringPtrOutput)
}

// The tags to attach to the new `PermissionSet` .
func (o LookupPermissionSetResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupPermissionSetResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPermissionSetResultOutput{})
}
