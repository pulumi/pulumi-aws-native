// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sso

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for SSO assignmet
func LookupAssignment(ctx *pulumi.Context, args *LookupAssignmentArgs, opts ...pulumi.InvokeOption) (*LookupAssignmentResult, error) {
	var rv LookupAssignmentResult
	err := ctx.Invoke("aws-native:sso:getAssignment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAssignmentArgs struct {
	// The sso instance that the permission set is owned.
	InstanceArn string `pulumi:"instanceArn"`
	// The permission set that the assignemt will be assigned
	PermissionSetArn string `pulumi:"permissionSetArn"`
	// The assignee's identifier, user id/group id
	PrincipalId string `pulumi:"principalId"`
	// The assignee's type, user/group
	PrincipalType AssignmentPrincipalType `pulumi:"principalType"`
	// The account id to be provisioned.
	TargetId string `pulumi:"targetId"`
	// The type of resource to be provsioned to, only aws account now
	TargetType AssignmentTargetType `pulumi:"targetType"`
}

type LookupAssignmentResult struct {
}

func LookupAssignmentOutput(ctx *pulumi.Context, args LookupAssignmentOutputArgs, opts ...pulumi.InvokeOption) LookupAssignmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAssignmentResult, error) {
			args := v.(LookupAssignmentArgs)
			r, err := LookupAssignment(ctx, &args, opts...)
			return *r, err
		}).(LookupAssignmentResultOutput)
}

type LookupAssignmentOutputArgs struct {
	// The sso instance that the permission set is owned.
	InstanceArn pulumi.StringInput `pulumi:"instanceArn"`
	// The permission set that the assignemt will be assigned
	PermissionSetArn pulumi.StringInput `pulumi:"permissionSetArn"`
	// The assignee's identifier, user id/group id
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The assignee's type, user/group
	PrincipalType AssignmentPrincipalTypeInput `pulumi:"principalType"`
	// The account id to be provisioned.
	TargetId pulumi.StringInput `pulumi:"targetId"`
	// The type of resource to be provsioned to, only aws account now
	TargetType AssignmentTargetTypeInput `pulumi:"targetType"`
}

func (LookupAssignmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAssignmentArgs)(nil)).Elem()
}

type LookupAssignmentResultOutput struct{ *pulumi.OutputState }

func (LookupAssignmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAssignmentResult)(nil)).Elem()
}

func (o LookupAssignmentResultOutput) ToLookupAssignmentResultOutput() LookupAssignmentResultOutput {
	return o
}

func (o LookupAssignmentResultOutput) ToLookupAssignmentResultOutputWithContext(ctx context.Context) LookupAssignmentResultOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LookupAssignmentResultOutput{})
}
