// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::NetworkFirewall::TLSInspectionConfiguration
type TlsInspectionConfiguration struct {
	pulumi.CustomResourceState

	// A description of the TLS inspection configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The key:value pairs to associate with the resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The object that defines a TLS inspection configuration. AWS Network Firewall uses TLS inspection configurations to decrypt your firewall's inbound and outbound SSL/TLS traffic. After decryption, AWS Network Firewall inspects the traffic according to your firewall policy's stateful rules, and then re-encrypts it before sending it to its destination. You can enable inspection of your firewall's inbound traffic, outbound traffic, or both. To use TLS inspection with your firewall, you must first import or provision certificates using Certificate Manager , create a TLS inspection configuration, add that configuration to a new firewall policy, and then associate that policy with your firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the *AWS Network Firewall Developer Guide* .
	TlsInspectionConfiguration TlsInspectionConfigurationTlsInspectionConfigurationOutput `pulumi:"tlsInspectionConfiguration"`
	// The Amazon Resource Name (ARN) of the TLS inspection configuration.
	TlsInspectionConfigurationArn pulumi.StringOutput `pulumi:"tlsInspectionConfigurationArn"`
	// A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.
	TlsInspectionConfigurationId pulumi.StringOutput `pulumi:"tlsInspectionConfigurationId"`
	// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
	TlsInspectionConfigurationName pulumi.StringOutput `pulumi:"tlsInspectionConfigurationName"`
}

// NewTlsInspectionConfiguration registers a new resource with the given unique name, arguments, and options.
func NewTlsInspectionConfiguration(ctx *pulumi.Context,
	name string, args *TlsInspectionConfigurationArgs, opts ...pulumi.ResourceOption) (*TlsInspectionConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TlsInspectionConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'TlsInspectionConfiguration'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"tlsInspectionConfigurationName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TlsInspectionConfiguration
	err := ctx.RegisterResource("aws-native:networkfirewall:TlsInspectionConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsInspectionConfiguration gets an existing TlsInspectionConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsInspectionConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsInspectionConfigurationState, opts ...pulumi.ResourceOption) (*TlsInspectionConfiguration, error) {
	var resource TlsInspectionConfiguration
	err := ctx.ReadResource("aws-native:networkfirewall:TlsInspectionConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsInspectionConfiguration resources.
type tlsInspectionConfigurationState struct {
}

type TlsInspectionConfigurationState struct {
}

func (TlsInspectionConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsInspectionConfigurationState)(nil)).Elem()
}

type tlsInspectionConfigurationArgs struct {
	// A description of the TLS inspection configuration.
	Description *string `pulumi:"description"`
	// The key:value pairs to associate with the resource.
	Tags []aws.Tag `pulumi:"tags"`
	// The object that defines a TLS inspection configuration. AWS Network Firewall uses TLS inspection configurations to decrypt your firewall's inbound and outbound SSL/TLS traffic. After decryption, AWS Network Firewall inspects the traffic according to your firewall policy's stateful rules, and then re-encrypts it before sending it to its destination. You can enable inspection of your firewall's inbound traffic, outbound traffic, or both. To use TLS inspection with your firewall, you must first import or provision certificates using Certificate Manager , create a TLS inspection configuration, add that configuration to a new firewall policy, and then associate that policy with your firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the *AWS Network Firewall Developer Guide* .
	TlsInspectionConfiguration TlsInspectionConfigurationTlsInspectionConfiguration `pulumi:"tlsInspectionConfiguration"`
	// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
	TlsInspectionConfigurationName *string `pulumi:"tlsInspectionConfigurationName"`
}

// The set of arguments for constructing a TlsInspectionConfiguration resource.
type TlsInspectionConfigurationArgs struct {
	// A description of the TLS inspection configuration.
	Description pulumi.StringPtrInput
	// The key:value pairs to associate with the resource.
	Tags aws.TagArrayInput
	// The object that defines a TLS inspection configuration. AWS Network Firewall uses TLS inspection configurations to decrypt your firewall's inbound and outbound SSL/TLS traffic. After decryption, AWS Network Firewall inspects the traffic according to your firewall policy's stateful rules, and then re-encrypts it before sending it to its destination. You can enable inspection of your firewall's inbound traffic, outbound traffic, or both. To use TLS inspection with your firewall, you must first import or provision certificates using Certificate Manager , create a TLS inspection configuration, add that configuration to a new firewall policy, and then associate that policy with your firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the *AWS Network Firewall Developer Guide* .
	TlsInspectionConfiguration TlsInspectionConfigurationTlsInspectionConfigurationInput
	// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
	TlsInspectionConfigurationName pulumi.StringPtrInput
}

func (TlsInspectionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsInspectionConfigurationArgs)(nil)).Elem()
}

type TlsInspectionConfigurationInput interface {
	pulumi.Input

	ToTlsInspectionConfigurationOutput() TlsInspectionConfigurationOutput
	ToTlsInspectionConfigurationOutputWithContext(ctx context.Context) TlsInspectionConfigurationOutput
}

func (*TlsInspectionConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsInspectionConfiguration)(nil)).Elem()
}

func (i *TlsInspectionConfiguration) ToTlsInspectionConfigurationOutput() TlsInspectionConfigurationOutput {
	return i.ToTlsInspectionConfigurationOutputWithContext(context.Background())
}

func (i *TlsInspectionConfiguration) ToTlsInspectionConfigurationOutputWithContext(ctx context.Context) TlsInspectionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsInspectionConfigurationOutput)
}

type TlsInspectionConfigurationOutput struct{ *pulumi.OutputState }

func (TlsInspectionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsInspectionConfiguration)(nil)).Elem()
}

func (o TlsInspectionConfigurationOutput) ToTlsInspectionConfigurationOutput() TlsInspectionConfigurationOutput {
	return o
}

func (o TlsInspectionConfigurationOutput) ToTlsInspectionConfigurationOutputWithContext(ctx context.Context) TlsInspectionConfigurationOutput {
	return o
}

// A description of the TLS inspection configuration.
func (o TlsInspectionConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsInspectionConfiguration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The key:value pairs to associate with the resource.
func (o TlsInspectionConfigurationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TlsInspectionConfiguration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The object that defines a TLS inspection configuration. AWS Network Firewall uses TLS inspection configurations to decrypt your firewall's inbound and outbound SSL/TLS traffic. After decryption, AWS Network Firewall inspects the traffic according to your firewall policy's stateful rules, and then re-encrypts it before sending it to its destination. You can enable inspection of your firewall's inbound traffic, outbound traffic, or both. To use TLS inspection with your firewall, you must first import or provision certificates using Certificate Manager , create a TLS inspection configuration, add that configuration to a new firewall policy, and then associate that policy with your firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the *AWS Network Firewall Developer Guide* .
func (o TlsInspectionConfigurationOutput) TlsInspectionConfiguration() TlsInspectionConfigurationTlsInspectionConfigurationOutput {
	return o.ApplyT(func(v *TlsInspectionConfiguration) TlsInspectionConfigurationTlsInspectionConfigurationOutput {
		return v.TlsInspectionConfiguration
	}).(TlsInspectionConfigurationTlsInspectionConfigurationOutput)
}

// The Amazon Resource Name (ARN) of the TLS inspection configuration.
func (o TlsInspectionConfigurationOutput) TlsInspectionConfigurationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionConfiguration) pulumi.StringOutput { return v.TlsInspectionConfigurationArn }).(pulumi.StringOutput)
}

// A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.
func (o TlsInspectionConfigurationOutput) TlsInspectionConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionConfiguration) pulumi.StringOutput { return v.TlsInspectionConfigurationId }).(pulumi.StringOutput)
}

// The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
func (o TlsInspectionConfigurationOutput) TlsInspectionConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsInspectionConfiguration) pulumi.StringOutput { return v.TlsInspectionConfigurationName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsInspectionConfigurationInput)(nil)).Elem(), &TlsInspectionConfiguration{})
	pulumi.RegisterOutputType(TlsInspectionConfigurationOutput{})
}
