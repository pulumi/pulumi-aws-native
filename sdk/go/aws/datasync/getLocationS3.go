// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::LocationS3
func LookupLocationS3(ctx *pulumi.Context, args *LookupLocationS3Args, opts ...pulumi.InvokeOption) (*LookupLocationS3Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLocationS3Result
	err := ctx.Invoke("aws-native:datasync:getLocationS3", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLocationS3Args struct {
	// The Amazon Resource Name (ARN) of the Amazon S3 bucket location.
	LocationArn string `pulumi:"locationArn"`
}

type LookupLocationS3Result struct {
	// The Amazon Resource Name (ARN) of the Amazon S3 bucket location.
	LocationArn *string `pulumi:"locationArn"`
	// The URL of the S3 location that was described.
	LocationUri *string `pulumi:"locationUri"`
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that is used to access an Amazon S3 bucket.
	//
	// For detailed information about using such a role, see [Creating a Location for Amazon S3](https://docs.aws.amazon.com/datasync/latest/userguide/working-with-locations.html#create-s3-location) in the *AWS DataSync User Guide* .
	S3Config *LocationS3s3Config `pulumi:"s3Config"`
	// The Amazon S3 storage class you want to store your files in when this location is used as a task destination.
	S3StorageClass *LocationS3S3StorageClass `pulumi:"s3StorageClass"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupLocationS3Output(ctx *pulumi.Context, args LookupLocationS3OutputArgs, opts ...pulumi.InvokeOption) LookupLocationS3ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLocationS3ResultOutput, error) {
			args := v.(LookupLocationS3Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:datasync:getLocationS3", args, LookupLocationS3ResultOutput{}, options).(LookupLocationS3ResultOutput), nil
		}).(LookupLocationS3ResultOutput)
}

type LookupLocationS3OutputArgs struct {
	// The Amazon Resource Name (ARN) of the Amazon S3 bucket location.
	LocationArn pulumi.StringInput `pulumi:"locationArn"`
}

func (LookupLocationS3OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocationS3Args)(nil)).Elem()
}

type LookupLocationS3ResultOutput struct{ *pulumi.OutputState }

func (LookupLocationS3ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocationS3Result)(nil)).Elem()
}

func (o LookupLocationS3ResultOutput) ToLookupLocationS3ResultOutput() LookupLocationS3ResultOutput {
	return o
}

func (o LookupLocationS3ResultOutput) ToLookupLocationS3ResultOutputWithContext(ctx context.Context) LookupLocationS3ResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the Amazon S3 bucket location.
func (o LookupLocationS3ResultOutput) LocationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocationS3Result) *string { return v.LocationArn }).(pulumi.StringPtrOutput)
}

// The URL of the S3 location that was described.
func (o LookupLocationS3ResultOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocationS3Result) *string { return v.LocationUri }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that is used to access an Amazon S3 bucket.
//
// For detailed information about using such a role, see [Creating a Location for Amazon S3](https://docs.aws.amazon.com/datasync/latest/userguide/working-with-locations.html#create-s3-location) in the *AWS DataSync User Guide* .
func (o LookupLocationS3ResultOutput) S3Config() LocationS3s3ConfigPtrOutput {
	return o.ApplyT(func(v LookupLocationS3Result) *LocationS3s3Config { return v.S3Config }).(LocationS3s3ConfigPtrOutput)
}

// The Amazon S3 storage class you want to store your files in when this location is used as a task destination.
func (o LookupLocationS3ResultOutput) S3StorageClass() LocationS3S3StorageClassPtrOutput {
	return o.ApplyT(func(v LookupLocationS3Result) *LocationS3S3StorageClass { return v.S3StorageClass }).(LocationS3S3StorageClassPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupLocationS3ResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupLocationS3Result) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLocationS3ResultOutput{})
}
