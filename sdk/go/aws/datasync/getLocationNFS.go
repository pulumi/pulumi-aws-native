// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::LocationNFS
func LookupLocationNFS(ctx *pulumi.Context, args *LookupLocationNFSArgs, opts ...pulumi.InvokeOption) (*LookupLocationNFSResult, error) {
	var rv LookupLocationNFSResult
	err := ctx.Invoke("aws-native:datasync:getLocationNFS", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLocationNFSArgs struct {
	// The Amazon Resource Name (ARN) of the NFS location.
	LocationArn string `pulumi:"locationArn"`
}

type LookupLocationNFSResult struct {
	// The Amazon Resource Name (ARN) of the NFS location.
	LocationArn *string `pulumi:"locationArn"`
	// The URL of the NFS location that was described.
	LocationUri  *string                  `pulumi:"locationUri"`
	MountOptions *LocationNFSMountOptions `pulumi:"mountOptions"`
	OnPremConfig *LocationNFSOnPremConfig `pulumi:"onPremConfig"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationNFSTag `pulumi:"tags"`
}

func LookupLocationNFSOutput(ctx *pulumi.Context, args LookupLocationNFSOutputArgs, opts ...pulumi.InvokeOption) LookupLocationNFSResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLocationNFSResult, error) {
			args := v.(LookupLocationNFSArgs)
			r, err := LookupLocationNFS(ctx, &args, opts...)
			var s LookupLocationNFSResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLocationNFSResultOutput)
}

type LookupLocationNFSOutputArgs struct {
	// The Amazon Resource Name (ARN) of the NFS location.
	LocationArn pulumi.StringInput `pulumi:"locationArn"`
}

func (LookupLocationNFSOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocationNFSArgs)(nil)).Elem()
}

type LookupLocationNFSResultOutput struct{ *pulumi.OutputState }

func (LookupLocationNFSResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocationNFSResult)(nil)).Elem()
}

func (o LookupLocationNFSResultOutput) ToLookupLocationNFSResultOutput() LookupLocationNFSResultOutput {
	return o
}

func (o LookupLocationNFSResultOutput) ToLookupLocationNFSResultOutputWithContext(ctx context.Context) LookupLocationNFSResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the NFS location.
func (o LookupLocationNFSResultOutput) LocationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocationNFSResult) *string { return v.LocationArn }).(pulumi.StringPtrOutput)
}

// The URL of the NFS location that was described.
func (o LookupLocationNFSResultOutput) LocationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLocationNFSResult) *string { return v.LocationUri }).(pulumi.StringPtrOutput)
}

func (o LookupLocationNFSResultOutput) MountOptions() LocationNFSMountOptionsPtrOutput {
	return o.ApplyT(func(v LookupLocationNFSResult) *LocationNFSMountOptions { return v.MountOptions }).(LocationNFSMountOptionsPtrOutput)
}

func (o LookupLocationNFSResultOutput) OnPremConfig() LocationNFSOnPremConfigPtrOutput {
	return o.ApplyT(func(v LookupLocationNFSResult) *LocationNFSOnPremConfig { return v.OnPremConfig }).(LocationNFSOnPremConfigPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupLocationNFSResultOutput) Tags() LocationNFSTagArrayOutput {
	return o.ApplyT(func(v LookupLocationNFSResult) []LocationNFSTag { return v.Tags }).(LocationNFSTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLocationNFSResultOutput{})
}
