// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::LocationEFS.
type LocationEFS struct {
	pulumi.CustomResourceState

	Ec2Config LocationEFSEc2ConfigOutput `pulumi:"ec2Config"`
	// The Amazon Resource Name (ARN) for the Amazon EFS file system.
	EfsFilesystemArn pulumi.StringOutput `pulumi:"efsFilesystemArn"`
	// The Amazon Resource Name (ARN) of the Amazon EFS file system location that is created.
	LocationArn pulumi.StringOutput `pulumi:"locationArn"`
	// The URL of the EFS location that was described.
	LocationUri pulumi.StringOutput `pulumi:"locationUri"`
	// A subdirectory in the location's path. This subdirectory in the EFS file system is used to read data from the EFS source location or write data to the EFS destination.
	Subdirectory pulumi.StringPtrOutput `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags LocationEFSTagArrayOutput `pulumi:"tags"`
}

// NewLocationEFS registers a new resource with the given unique name, arguments, and options.
func NewLocationEFS(ctx *pulumi.Context,
	name string, args *LocationEFSArgs, opts ...pulumi.ResourceOption) (*LocationEFS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ec2Config == nil {
		return nil, errors.New("invalid value for required argument 'Ec2Config'")
	}
	if args.EfsFilesystemArn == nil {
		return nil, errors.New("invalid value for required argument 'EfsFilesystemArn'")
	}
	var resource LocationEFS
	err := ctx.RegisterResource("aws-native:datasync:LocationEFS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationEFS gets an existing LocationEFS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationEFS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationEFSState, opts ...pulumi.ResourceOption) (*LocationEFS, error) {
	var resource LocationEFS
	err := ctx.ReadResource("aws-native:datasync:LocationEFS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationEFS resources.
type locationEFSState struct {
}

type LocationEFSState struct {
}

func (LocationEFSState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationEFSState)(nil)).Elem()
}

type locationEFSArgs struct {
	Ec2Config LocationEFSEc2Config `pulumi:"ec2Config"`
	// The Amazon Resource Name (ARN) for the Amazon EFS file system.
	EfsFilesystemArn string `pulumi:"efsFilesystemArn"`
	// A subdirectory in the location's path. This subdirectory in the EFS file system is used to read data from the EFS source location or write data to the EFS destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationEFSTag `pulumi:"tags"`
}

// The set of arguments for constructing a LocationEFS resource.
type LocationEFSArgs struct {
	Ec2Config LocationEFSEc2ConfigInput
	// The Amazon Resource Name (ARN) for the Amazon EFS file system.
	EfsFilesystemArn pulumi.StringInput
	// A subdirectory in the location's path. This subdirectory in the EFS file system is used to read data from the EFS source location or write data to the EFS destination.
	Subdirectory pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LocationEFSTagArrayInput
}

func (LocationEFSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationEFSArgs)(nil)).Elem()
}

type LocationEFSInput interface {
	pulumi.Input

	ToLocationEFSOutput() LocationEFSOutput
	ToLocationEFSOutputWithContext(ctx context.Context) LocationEFSOutput
}

func (*LocationEFS) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEFS)(nil))
}

func (i *LocationEFS) ToLocationEFSOutput() LocationEFSOutput {
	return i.ToLocationEFSOutputWithContext(context.Background())
}

func (i *LocationEFS) ToLocationEFSOutputWithContext(ctx context.Context) LocationEFSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEFSOutput)
}

type LocationEFSOutput struct{ *pulumi.OutputState }

func (LocationEFSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEFS)(nil))
}

func (o LocationEFSOutput) ToLocationEFSOutput() LocationEFSOutput {
	return o
}

func (o LocationEFSOutput) ToLocationEFSOutputWithContext(ctx context.Context) LocationEFSOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LocationEFSOutput{})
}
