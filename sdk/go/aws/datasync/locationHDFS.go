// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::LocationHDFS.
type LocationHDFS struct {
	pulumi.CustomResourceState

	// ARN(s) of the agent(s) to use for an HDFS location.
	AgentArns pulumi.StringArrayOutput `pulumi:"agentArns"`
	// The authentication mode used to determine identity of user.
	AuthenticationType LocationHDFSAuthenticationTypeOutput `pulumi:"authenticationType"`
	// Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
	BlockSize pulumi.IntPtrOutput `pulumi:"blockSize"`
	// The Base64 string representation of the Keytab file.
	KerberosKeytab pulumi.StringPtrOutput `pulumi:"kerberosKeytab"`
	// The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
	KerberosKrb5Conf pulumi.StringPtrOutput `pulumi:"kerberosKrb5Conf"`
	// The unique identity, or principal, to which Kerberos can assign tickets.
	KerberosPrincipal pulumi.StringPtrOutput `pulumi:"kerberosPrincipal"`
	// The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
	KmsKeyProviderUri pulumi.StringPtrOutput `pulumi:"kmsKeyProviderUri"`
	// The Amazon Resource Name (ARN) of the HDFS location.
	LocationArn pulumi.StringOutput `pulumi:"locationArn"`
	// The URL of the HDFS location that was described.
	LocationUri pulumi.StringOutput `pulumi:"locationUri"`
	// An array of Name Node(s) of the HDFS location.
	NameNodes        LocationHDFSNameNodeArrayOutput       `pulumi:"nameNodes"`
	QopConfiguration LocationHDFSQopConfigurationPtrOutput `pulumi:"qopConfiguration"`
	// Number of copies of each block that exists inside the HDFS cluster.
	ReplicationFactor pulumi.IntPtrOutput `pulumi:"replicationFactor"`
	// The user name that has read and write permissions on the specified HDFS cluster.
	SimpleUser pulumi.StringPtrOutput `pulumi:"simpleUser"`
	// The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
	Subdirectory pulumi.StringPtrOutput `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags LocationHDFSTagArrayOutput `pulumi:"tags"`
}

// NewLocationHDFS registers a new resource with the given unique name, arguments, and options.
func NewLocationHDFS(ctx *pulumi.Context,
	name string, args *LocationHDFSArgs, opts ...pulumi.ResourceOption) (*LocationHDFS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentArns == nil {
		return nil, errors.New("invalid value for required argument 'AgentArns'")
	}
	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.NameNodes == nil {
		return nil, errors.New("invalid value for required argument 'NameNodes'")
	}
	var resource LocationHDFS
	err := ctx.RegisterResource("aws-native:datasync:LocationHDFS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationHDFS gets an existing LocationHDFS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationHDFS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationHDFSState, opts ...pulumi.ResourceOption) (*LocationHDFS, error) {
	var resource LocationHDFS
	err := ctx.ReadResource("aws-native:datasync:LocationHDFS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationHDFS resources.
type locationHDFSState struct {
}

type LocationHDFSState struct {
}

func (LocationHDFSState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationHDFSState)(nil)).Elem()
}

type locationHDFSArgs struct {
	// ARN(s) of the agent(s) to use for an HDFS location.
	AgentArns []string `pulumi:"agentArns"`
	// The authentication mode used to determine identity of user.
	AuthenticationType LocationHDFSAuthenticationType `pulumi:"authenticationType"`
	// Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
	BlockSize *int `pulumi:"blockSize"`
	// The Base64 string representation of the Keytab file.
	KerberosKeytab *string `pulumi:"kerberosKeytab"`
	// The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
	KerberosKrb5Conf *string `pulumi:"kerberosKrb5Conf"`
	// The unique identity, or principal, to which Kerberos can assign tickets.
	KerberosPrincipal *string `pulumi:"kerberosPrincipal"`
	// The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
	KmsKeyProviderUri *string `pulumi:"kmsKeyProviderUri"`
	// An array of Name Node(s) of the HDFS location.
	NameNodes        []LocationHDFSNameNode        `pulumi:"nameNodes"`
	QopConfiguration *LocationHDFSQopConfiguration `pulumi:"qopConfiguration"`
	// Number of copies of each block that exists inside the HDFS cluster.
	ReplicationFactor *int `pulumi:"replicationFactor"`
	// The user name that has read and write permissions on the specified HDFS cluster.
	SimpleUser *string `pulumi:"simpleUser"`
	// The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationHDFSTag `pulumi:"tags"`
}

// The set of arguments for constructing a LocationHDFS resource.
type LocationHDFSArgs struct {
	// ARN(s) of the agent(s) to use for an HDFS location.
	AgentArns pulumi.StringArrayInput
	// The authentication mode used to determine identity of user.
	AuthenticationType LocationHDFSAuthenticationTypeInput
	// Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
	BlockSize pulumi.IntPtrInput
	// The Base64 string representation of the Keytab file.
	KerberosKeytab pulumi.StringPtrInput
	// The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
	KerberosKrb5Conf pulumi.StringPtrInput
	// The unique identity, or principal, to which Kerberos can assign tickets.
	KerberosPrincipal pulumi.StringPtrInput
	// The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
	KmsKeyProviderUri pulumi.StringPtrInput
	// An array of Name Node(s) of the HDFS location.
	NameNodes        LocationHDFSNameNodeArrayInput
	QopConfiguration LocationHDFSQopConfigurationPtrInput
	// Number of copies of each block that exists inside the HDFS cluster.
	ReplicationFactor pulumi.IntPtrInput
	// The user name that has read and write permissions on the specified HDFS cluster.
	SimpleUser pulumi.StringPtrInput
	// The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
	Subdirectory pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LocationHDFSTagArrayInput
}

func (LocationHDFSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationHDFSArgs)(nil)).Elem()
}

type LocationHDFSInput interface {
	pulumi.Input

	ToLocationHDFSOutput() LocationHDFSOutput
	ToLocationHDFSOutputWithContext(ctx context.Context) LocationHDFSOutput
}

func (*LocationHDFS) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationHDFS)(nil)).Elem()
}

func (i *LocationHDFS) ToLocationHDFSOutput() LocationHDFSOutput {
	return i.ToLocationHDFSOutputWithContext(context.Background())
}

func (i *LocationHDFS) ToLocationHDFSOutputWithContext(ctx context.Context) LocationHDFSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHDFSOutput)
}

type LocationHDFSOutput struct{ *pulumi.OutputState }

func (LocationHDFSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationHDFS)(nil)).Elem()
}

func (o LocationHDFSOutput) ToLocationHDFSOutput() LocationHDFSOutput {
	return o
}

func (o LocationHDFSOutput) ToLocationHDFSOutputWithContext(ctx context.Context) LocationHDFSOutput {
	return o
}

// ARN(s) of the agent(s) to use for an HDFS location.
func (o LocationHDFSOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringArrayOutput { return v.AgentArns }).(pulumi.StringArrayOutput)
}

// The authentication mode used to determine identity of user.
func (o LocationHDFSOutput) AuthenticationType() LocationHDFSAuthenticationTypeOutput {
	return o.ApplyT(func(v *LocationHDFS) LocationHDFSAuthenticationTypeOutput { return v.AuthenticationType }).(LocationHDFSAuthenticationTypeOutput)
}

// Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
func (o LocationHDFSOutput) BlockSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.IntPtrOutput { return v.BlockSize }).(pulumi.IntPtrOutput)
}

// The Base64 string representation of the Keytab file.
func (o LocationHDFSOutput) KerberosKeytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringPtrOutput { return v.KerberosKeytab }).(pulumi.StringPtrOutput)
}

// The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
func (o LocationHDFSOutput) KerberosKrb5Conf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringPtrOutput { return v.KerberosKrb5Conf }).(pulumi.StringPtrOutput)
}

// The unique identity, or principal, to which Kerberos can assign tickets.
func (o LocationHDFSOutput) KerberosPrincipal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringPtrOutput { return v.KerberosPrincipal }).(pulumi.StringPtrOutput)
}

// The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
func (o LocationHDFSOutput) KmsKeyProviderUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringPtrOutput { return v.KmsKeyProviderUri }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the HDFS location.
func (o LocationHDFSOutput) LocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringOutput { return v.LocationArn }).(pulumi.StringOutput)
}

// The URL of the HDFS location that was described.
func (o LocationHDFSOutput) LocationUri() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringOutput { return v.LocationUri }).(pulumi.StringOutput)
}

// An array of Name Node(s) of the HDFS location.
func (o LocationHDFSOutput) NameNodes() LocationHDFSNameNodeArrayOutput {
	return o.ApplyT(func(v *LocationHDFS) LocationHDFSNameNodeArrayOutput { return v.NameNodes }).(LocationHDFSNameNodeArrayOutput)
}

func (o LocationHDFSOutput) QopConfiguration() LocationHDFSQopConfigurationPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) LocationHDFSQopConfigurationPtrOutput { return v.QopConfiguration }).(LocationHDFSQopConfigurationPtrOutput)
}

// Number of copies of each block that exists inside the HDFS cluster.
func (o LocationHDFSOutput) ReplicationFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.IntPtrOutput { return v.ReplicationFactor }).(pulumi.IntPtrOutput)
}

// The user name that has read and write permissions on the specified HDFS cluster.
func (o LocationHDFSOutput) SimpleUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringPtrOutput { return v.SimpleUser }).(pulumi.StringPtrOutput)
}

// The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
func (o LocationHDFSOutput) Subdirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationHDFS) pulumi.StringPtrOutput { return v.Subdirectory }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LocationHDFSOutput) Tags() LocationHDFSTagArrayOutput {
	return o.ApplyT(func(v *LocationHDFS) LocationHDFSTagArrayOutput { return v.Tags }).(LocationHDFSTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHDFSInput)(nil)).Elem(), &LocationHDFS{})
	pulumi.RegisterOutputType(LocationHDFSOutput{})
}
