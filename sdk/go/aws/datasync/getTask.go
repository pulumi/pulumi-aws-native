// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::Task.
func LookupTask(ctx *pulumi.Context, args *LookupTaskArgs, opts ...pulumi.InvokeOption) (*LookupTaskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaskResult
	err := ctx.Invoke("aws-native:datasync:getTask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTaskArgs struct {
	// The ARN of the task.
	TaskArn string `pulumi:"taskArn"`
}

type LookupTaskResult struct {
	// The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
	CloudWatchLogGroupArn *string `pulumi:"cloudWatchLogGroupArn"`
	// The ARNs of the destination elastic network interfaces (ENIs) that were created for your subnet.
	DestinationNetworkInterfaceArns []string `pulumi:"destinationNetworkInterfaceArns"`
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Excludes []TaskFilterRule `pulumi:"excludes"`
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Includes []TaskFilterRule `pulumi:"includes"`
	// Configures a manifest, which is a list of files or objects that you want AWS DataSync to transfer. For more information and configuration examples, see [Specifying what DataSync transfers by using a manifest](https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html) .
	ManifestConfig *TaskManifestConfig `pulumi:"manifestConfig"`
	// The name of a task. This value is a text reference that is used to identify the task in the console.
	Name *string `pulumi:"name"`
	// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. This behavior includes preserving metadata, such as user ID (UID), group ID (GID), and file permissions; overwriting files in the destination; data integrity verification; and so on.
	//
	// A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) , the default value is used. You can override the default options on each task execution by specifying an overriding `Options` value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) .
	Options *TaskOptions `pulumi:"options"`
	// Configures your AWS DataSync task to run on a [schedule](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html) (at a minimum interval of 1 hour).
	Schedule *TaskSchedule `pulumi:"schedule"`
	// The ARNs of the source ENIs that were created for your subnet.
	SourceNetworkInterfaceArns []string `pulumi:"sourceNetworkInterfaceArns"`
	// The status of the task that was described.
	Status *TaskStatus `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// The ARN of the task.
	TaskArn *string `pulumi:"taskArn"`
	// Specifies how you want to configure a task report, which provides detailed information about for your AWS DataSync transfer.
	//
	// For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html) .
	TaskReportConfig *TaskReportConfig `pulumi:"taskReportConfig"`
}

func LookupTaskOutput(ctx *pulumi.Context, args LookupTaskOutputArgs, opts ...pulumi.InvokeOption) LookupTaskResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTaskResult, error) {
			args := v.(LookupTaskArgs)
			r, err := LookupTask(ctx, &args, opts...)
			var s LookupTaskResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTaskResultOutput)
}

type LookupTaskOutputArgs struct {
	// The ARN of the task.
	TaskArn pulumi.StringInput `pulumi:"taskArn"`
}

func (LookupTaskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskArgs)(nil)).Elem()
}

type LookupTaskResultOutput struct{ *pulumi.OutputState }

func (LookupTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskResult)(nil)).Elem()
}

func (o LookupTaskResultOutput) ToLookupTaskResultOutput() LookupTaskResultOutput {
	return o
}

func (o LookupTaskResultOutput) ToLookupTaskResultOutputWithContext(ctx context.Context) LookupTaskResultOutput {
	return o
}

// The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
func (o LookupTaskResultOutput) CloudWatchLogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *string { return v.CloudWatchLogGroupArn }).(pulumi.StringPtrOutput)
}

// The ARNs of the destination elastic network interfaces (ENIs) that were created for your subnet.
func (o LookupTaskResultOutput) DestinationNetworkInterfaceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTaskResult) []string { return v.DestinationNetworkInterfaceArns }).(pulumi.StringArrayOutput)
}

// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
func (o LookupTaskResultOutput) Excludes() TaskFilterRuleArrayOutput {
	return o.ApplyT(func(v LookupTaskResult) []TaskFilterRule { return v.Excludes }).(TaskFilterRuleArrayOutput)
}

// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
func (o LookupTaskResultOutput) Includes() TaskFilterRuleArrayOutput {
	return o.ApplyT(func(v LookupTaskResult) []TaskFilterRule { return v.Includes }).(TaskFilterRuleArrayOutput)
}

// Configures a manifest, which is a list of files or objects that you want AWS DataSync to transfer. For more information and configuration examples, see [Specifying what DataSync transfers by using a manifest](https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html) .
func (o LookupTaskResultOutput) ManifestConfig() TaskManifestConfigPtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *TaskManifestConfig { return v.ManifestConfig }).(TaskManifestConfigPtrOutput)
}

// The name of a task. This value is a text reference that is used to identify the task in the console.
func (o LookupTaskResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. This behavior includes preserving metadata, such as user ID (UID), group ID (GID), and file permissions; overwriting files in the destination; data integrity verification; and so on.
//
// A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) , the default value is used. You can override the default options on each task execution by specifying an overriding `Options` value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) .
func (o LookupTaskResultOutput) Options() TaskOptionsPtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *TaskOptions { return v.Options }).(TaskOptionsPtrOutput)
}

// Configures your AWS DataSync task to run on a [schedule](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html) (at a minimum interval of 1 hour).
func (o LookupTaskResultOutput) Schedule() TaskSchedulePtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *TaskSchedule { return v.Schedule }).(TaskSchedulePtrOutput)
}

// The ARNs of the source ENIs that were created for your subnet.
func (o LookupTaskResultOutput) SourceNetworkInterfaceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTaskResult) []string { return v.SourceNetworkInterfaceArns }).(pulumi.StringArrayOutput)
}

// The status of the task that was described.
func (o LookupTaskResultOutput) Status() TaskStatusPtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *TaskStatus { return v.Status }).(TaskStatusPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupTaskResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupTaskResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The ARN of the task.
func (o LookupTaskResultOutput) TaskArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *string { return v.TaskArn }).(pulumi.StringPtrOutput)
}

// Specifies how you want to configure a task report, which provides detailed information about for your AWS DataSync transfer.
//
// For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html) .
func (o LookupTaskResultOutput) TaskReportConfig() TaskReportConfigPtrOutput {
	return o.ApplyT(func(v LookupTaskResult) *TaskReportConfig { return v.TaskReportConfig }).(TaskReportConfigPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaskResultOutput{})
}
