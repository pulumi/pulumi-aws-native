// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::LocationFSxOpenZFS.
type LocationFSxOpenZfs struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the FSx OpenZFS file system.
	FsxFilesystemArn pulumi.StringPtrOutput `pulumi:"fsxFilesystemArn"`
	// The Amazon Resource Name (ARN) of the Amazon FSx OpenZFS file system location that is created.
	LocationArn pulumi.StringOutput `pulumi:"locationArn"`
	// The URL of the FSx OpenZFS that was described.
	LocationUri pulumi.StringOutput              `pulumi:"locationUri"`
	Protocol    LocationFSxOpenZfsProtocolOutput `pulumi:"protocol"`
	// The ARNs of the security groups that are to use to configure the FSx OpenZFS file system.
	SecurityGroupArns pulumi.StringArrayOutput `pulumi:"securityGroupArns"`
	// A subdirectory in the location's path.
	Subdirectory pulumi.StringPtrOutput `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags LocationFSxOpenZfsTagArrayOutput `pulumi:"tags"`
}

// NewLocationFSxOpenZfs registers a new resource with the given unique name, arguments, and options.
func NewLocationFSxOpenZfs(ctx *pulumi.Context,
	name string, args *LocationFSxOpenZfsArgs, opts ...pulumi.ResourceOption) (*LocationFSxOpenZfs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"fsxFilesystemArn",
		"protocol",
		"securityGroupArns[*]",
		"subdirectory",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationFSxOpenZfs
	err := ctx.RegisterResource("aws-native:datasync:LocationFSxOpenZfs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationFSxOpenZfs gets an existing LocationFSxOpenZfs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationFSxOpenZfs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationFSxOpenZfsState, opts ...pulumi.ResourceOption) (*LocationFSxOpenZfs, error) {
	var resource LocationFSxOpenZfs
	err := ctx.ReadResource("aws-native:datasync:LocationFSxOpenZfs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationFSxOpenZfs resources.
type locationFSxOpenZfsState struct {
}

type LocationFSxOpenZfsState struct {
}

func (LocationFSxOpenZfsState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFSxOpenZfsState)(nil)).Elem()
}

type locationFSxOpenZfsArgs struct {
	// The Amazon Resource Name (ARN) for the FSx OpenZFS file system.
	FsxFilesystemArn *string                    `pulumi:"fsxFilesystemArn"`
	Protocol         LocationFSxOpenZfsProtocol `pulumi:"protocol"`
	// The ARNs of the security groups that are to use to configure the FSx OpenZFS file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// A subdirectory in the location's path.
	Subdirectory *string `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationFSxOpenZfsTag `pulumi:"tags"`
}

// The set of arguments for constructing a LocationFSxOpenZfs resource.
type LocationFSxOpenZfsArgs struct {
	// The Amazon Resource Name (ARN) for the FSx OpenZFS file system.
	FsxFilesystemArn pulumi.StringPtrInput
	Protocol         LocationFSxOpenZfsProtocolInput
	// The ARNs of the security groups that are to use to configure the FSx OpenZFS file system.
	SecurityGroupArns pulumi.StringArrayInput
	// A subdirectory in the location's path.
	Subdirectory pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LocationFSxOpenZfsTagArrayInput
}

func (LocationFSxOpenZfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFSxOpenZfsArgs)(nil)).Elem()
}

type LocationFSxOpenZfsInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsOutput() LocationFSxOpenZfsOutput
	ToLocationFSxOpenZfsOutputWithContext(ctx context.Context) LocationFSxOpenZfsOutput
}

func (*LocationFSxOpenZfs) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOpenZfs)(nil)).Elem()
}

func (i *LocationFSxOpenZfs) ToLocationFSxOpenZfsOutput() LocationFSxOpenZfsOutput {
	return i.ToLocationFSxOpenZfsOutputWithContext(context.Background())
}

func (i *LocationFSxOpenZfs) ToLocationFSxOpenZfsOutputWithContext(ctx context.Context) LocationFSxOpenZfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsOutput)
}

type LocationFSxOpenZfsOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOpenZfs)(nil)).Elem()
}

func (o LocationFSxOpenZfsOutput) ToLocationFSxOpenZfsOutput() LocationFSxOpenZfsOutput {
	return o
}

func (o LocationFSxOpenZfsOutput) ToLocationFSxOpenZfsOutputWithContext(ctx context.Context) LocationFSxOpenZfsOutput {
	return o
}

// The Amazon Resource Name (ARN) for the FSx OpenZFS file system.
func (o LocationFSxOpenZfsOutput) FsxFilesystemArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfs) pulumi.StringPtrOutput { return v.FsxFilesystemArn }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the Amazon FSx OpenZFS file system location that is created.
func (o LocationFSxOpenZfsOutput) LocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfs) pulumi.StringOutput { return v.LocationArn }).(pulumi.StringOutput)
}

// The URL of the FSx OpenZFS that was described.
func (o LocationFSxOpenZfsOutput) LocationUri() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfs) pulumi.StringOutput { return v.LocationUri }).(pulumi.StringOutput)
}

func (o LocationFSxOpenZfsOutput) Protocol() LocationFSxOpenZfsProtocolOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfs) LocationFSxOpenZfsProtocolOutput { return v.Protocol }).(LocationFSxOpenZfsProtocolOutput)
}

// The ARNs of the security groups that are to use to configure the FSx OpenZFS file system.
func (o LocationFSxOpenZfsOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfs) pulumi.StringArrayOutput { return v.SecurityGroupArns }).(pulumi.StringArrayOutput)
}

// A subdirectory in the location's path.
func (o LocationFSxOpenZfsOutput) Subdirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfs) pulumi.StringPtrOutput { return v.Subdirectory }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LocationFSxOpenZfsOutput) Tags() LocationFSxOpenZfsTagArrayOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfs) LocationFSxOpenZfsTagArrayOutput { return v.Tags }).(LocationFSxOpenZfsTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsInput)(nil)).Elem(), &LocationFSxOpenZfs{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsOutput{})
}
