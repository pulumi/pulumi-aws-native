// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// A key-value pair to associate with a resource.
type AgentTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// AgentTagInput is an input type that accepts AgentTagArgs and AgentTagOutput values.
// You can construct a concrete instance of `AgentTagInput` via:
//
//	AgentTagArgs{...}
type AgentTagInput interface {
	pulumi.Input

	ToAgentTagOutput() AgentTagOutput
	ToAgentTagOutputWithContext(context.Context) AgentTagOutput
}

// A key-value pair to associate with a resource.
type AgentTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AgentTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentTag)(nil)).Elem()
}

func (i AgentTagArgs) ToAgentTagOutput() AgentTagOutput {
	return i.ToAgentTagOutputWithContext(context.Background())
}

func (i AgentTagArgs) ToAgentTagOutputWithContext(ctx context.Context) AgentTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentTagOutput)
}

// AgentTagArrayInput is an input type that accepts AgentTagArray and AgentTagArrayOutput values.
// You can construct a concrete instance of `AgentTagArrayInput` via:
//
//	AgentTagArray{ AgentTagArgs{...} }
type AgentTagArrayInput interface {
	pulumi.Input

	ToAgentTagArrayOutput() AgentTagArrayOutput
	ToAgentTagArrayOutputWithContext(context.Context) AgentTagArrayOutput
}

type AgentTagArray []AgentTagInput

func (AgentTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentTag)(nil)).Elem()
}

func (i AgentTagArray) ToAgentTagArrayOutput() AgentTagArrayOutput {
	return i.ToAgentTagArrayOutputWithContext(context.Background())
}

func (i AgentTagArray) ToAgentTagArrayOutputWithContext(ctx context.Context) AgentTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentTagArrayOutput)
}

// A key-value pair to associate with a resource.
type AgentTagOutput struct{ *pulumi.OutputState }

func (AgentTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentTag)(nil)).Elem()
}

func (o AgentTagOutput) ToAgentTagOutput() AgentTagOutput {
	return o
}

func (o AgentTagOutput) ToAgentTagOutputWithContext(ctx context.Context) AgentTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o AgentTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AgentTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o AgentTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AgentTag) string { return v.Value }).(pulumi.StringOutput)
}

type AgentTagArrayOutput struct{ *pulumi.OutputState }

func (AgentTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentTag)(nil)).Elem()
}

func (o AgentTagArrayOutput) ToAgentTagArrayOutput() AgentTagArrayOutput {
	return o
}

func (o AgentTagArrayOutput) ToAgentTagArrayOutputWithContext(ctx context.Context) AgentTagArrayOutput {
	return o
}

func (o AgentTagArrayOutput) Index(i pulumi.IntInput) AgentTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AgentTag {
		return vs[0].([]AgentTag)[vs[1].(int)]
	}).(AgentTagOutput)
}

// The subnet and security group that DataSync uses to access target EFS file system.
type LocationEfsEc2Config struct {
	// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// The ARN of the subnet that DataSync uses to access the target EFS file system.
	SubnetArn string `pulumi:"subnetArn"`
}

// LocationEfsEc2ConfigInput is an input type that accepts LocationEfsEc2ConfigArgs and LocationEfsEc2ConfigOutput values.
// You can construct a concrete instance of `LocationEfsEc2ConfigInput` via:
//
//	LocationEfsEc2ConfigArgs{...}
type LocationEfsEc2ConfigInput interface {
	pulumi.Input

	ToLocationEfsEc2ConfigOutput() LocationEfsEc2ConfigOutput
	ToLocationEfsEc2ConfigOutputWithContext(context.Context) LocationEfsEc2ConfigOutput
}

// The subnet and security group that DataSync uses to access target EFS file system.
type LocationEfsEc2ConfigArgs struct {
	// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
	SecurityGroupArns pulumi.StringArrayInput `pulumi:"securityGroupArns"`
	// The ARN of the subnet that DataSync uses to access the target EFS file system.
	SubnetArn pulumi.StringInput `pulumi:"subnetArn"`
}

func (LocationEfsEc2ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEfsEc2Config)(nil)).Elem()
}

func (i LocationEfsEc2ConfigArgs) ToLocationEfsEc2ConfigOutput() LocationEfsEc2ConfigOutput {
	return i.ToLocationEfsEc2ConfigOutputWithContext(context.Background())
}

func (i LocationEfsEc2ConfigArgs) ToLocationEfsEc2ConfigOutputWithContext(ctx context.Context) LocationEfsEc2ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEfsEc2ConfigOutput)
}

// The subnet and security group that DataSync uses to access target EFS file system.
type LocationEfsEc2ConfigOutput struct{ *pulumi.OutputState }

func (LocationEfsEc2ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEfsEc2Config)(nil)).Elem()
}

func (o LocationEfsEc2ConfigOutput) ToLocationEfsEc2ConfigOutput() LocationEfsEc2ConfigOutput {
	return o
}

func (o LocationEfsEc2ConfigOutput) ToLocationEfsEc2ConfigOutputWithContext(ctx context.Context) LocationEfsEc2ConfigOutput {
	return o
}

// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
func (o LocationEfsEc2ConfigOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LocationEfsEc2Config) []string { return v.SecurityGroupArns }).(pulumi.StringArrayOutput)
}

// The ARN of the subnet that DataSync uses to access the target EFS file system.
func (o LocationEfsEc2ConfigOutput) SubnetArn() pulumi.StringOutput {
	return o.ApplyT(func(v LocationEfsEc2Config) string { return v.SubnetArn }).(pulumi.StringOutput)
}

// A key-value pair to associate with a resource.
type LocationEfsTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationEfsTagInput is an input type that accepts LocationEfsTagArgs and LocationEfsTagOutput values.
// You can construct a concrete instance of `LocationEfsTagInput` via:
//
//	LocationEfsTagArgs{...}
type LocationEfsTagInput interface {
	pulumi.Input

	ToLocationEfsTagOutput() LocationEfsTagOutput
	ToLocationEfsTagOutputWithContext(context.Context) LocationEfsTagOutput
}

// A key-value pair to associate with a resource.
type LocationEfsTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationEfsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEfsTag)(nil)).Elem()
}

func (i LocationEfsTagArgs) ToLocationEfsTagOutput() LocationEfsTagOutput {
	return i.ToLocationEfsTagOutputWithContext(context.Background())
}

func (i LocationEfsTagArgs) ToLocationEfsTagOutputWithContext(ctx context.Context) LocationEfsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEfsTagOutput)
}

// LocationEfsTagArrayInput is an input type that accepts LocationEfsTagArray and LocationEfsTagArrayOutput values.
// You can construct a concrete instance of `LocationEfsTagArrayInput` via:
//
//	LocationEfsTagArray{ LocationEfsTagArgs{...} }
type LocationEfsTagArrayInput interface {
	pulumi.Input

	ToLocationEfsTagArrayOutput() LocationEfsTagArrayOutput
	ToLocationEfsTagArrayOutputWithContext(context.Context) LocationEfsTagArrayOutput
}

type LocationEfsTagArray []LocationEfsTagInput

func (LocationEfsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationEfsTag)(nil)).Elem()
}

func (i LocationEfsTagArray) ToLocationEfsTagArrayOutput() LocationEfsTagArrayOutput {
	return i.ToLocationEfsTagArrayOutputWithContext(context.Background())
}

func (i LocationEfsTagArray) ToLocationEfsTagArrayOutputWithContext(ctx context.Context) LocationEfsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEfsTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationEfsTagOutput struct{ *pulumi.OutputState }

func (LocationEfsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEfsTag)(nil)).Elem()
}

func (o LocationEfsTagOutput) ToLocationEfsTagOutput() LocationEfsTagOutput {
	return o
}

func (o LocationEfsTagOutput) ToLocationEfsTagOutputWithContext(ctx context.Context) LocationEfsTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationEfsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationEfsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationEfsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationEfsTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationEfsTagArrayOutput struct{ *pulumi.OutputState }

func (LocationEfsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationEfsTag)(nil)).Elem()
}

func (o LocationEfsTagArrayOutput) ToLocationEfsTagArrayOutput() LocationEfsTagArrayOutput {
	return o
}

func (o LocationEfsTagArrayOutput) ToLocationEfsTagArrayOutputWithContext(ctx context.Context) LocationEfsTagArrayOutput {
	return o
}

func (o LocationEfsTagArrayOutput) Index(i pulumi.IntInput) LocationEfsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationEfsTag {
		return vs[0].([]LocationEfsTag)[vs[1].(int)]
	}).(LocationEfsTagOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxLustreTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationFSxLustreTagInput is an input type that accepts LocationFSxLustreTagArgs and LocationFSxLustreTagOutput values.
// You can construct a concrete instance of `LocationFSxLustreTagInput` via:
//
//	LocationFSxLustreTagArgs{...}
type LocationFSxLustreTagInput interface {
	pulumi.Input

	ToLocationFSxLustreTagOutput() LocationFSxLustreTagOutput
	ToLocationFSxLustreTagOutputWithContext(context.Context) LocationFSxLustreTagOutput
}

// A key-value pair to associate with a resource.
type LocationFSxLustreTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationFSxLustreTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxLustreTag)(nil)).Elem()
}

func (i LocationFSxLustreTagArgs) ToLocationFSxLustreTagOutput() LocationFSxLustreTagOutput {
	return i.ToLocationFSxLustreTagOutputWithContext(context.Background())
}

func (i LocationFSxLustreTagArgs) ToLocationFSxLustreTagOutputWithContext(ctx context.Context) LocationFSxLustreTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxLustreTagOutput)
}

// LocationFSxLustreTagArrayInput is an input type that accepts LocationFSxLustreTagArray and LocationFSxLustreTagArrayOutput values.
// You can construct a concrete instance of `LocationFSxLustreTagArrayInput` via:
//
//	LocationFSxLustreTagArray{ LocationFSxLustreTagArgs{...} }
type LocationFSxLustreTagArrayInput interface {
	pulumi.Input

	ToLocationFSxLustreTagArrayOutput() LocationFSxLustreTagArrayOutput
	ToLocationFSxLustreTagArrayOutputWithContext(context.Context) LocationFSxLustreTagArrayOutput
}

type LocationFSxLustreTagArray []LocationFSxLustreTagInput

func (LocationFSxLustreTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxLustreTag)(nil)).Elem()
}

func (i LocationFSxLustreTagArray) ToLocationFSxLustreTagArrayOutput() LocationFSxLustreTagArrayOutput {
	return i.ToLocationFSxLustreTagArrayOutputWithContext(context.Background())
}

func (i LocationFSxLustreTagArray) ToLocationFSxLustreTagArrayOutputWithContext(ctx context.Context) LocationFSxLustreTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxLustreTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxLustreTagOutput struct{ *pulumi.OutputState }

func (LocationFSxLustreTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxLustreTag)(nil)).Elem()
}

func (o LocationFSxLustreTagOutput) ToLocationFSxLustreTagOutput() LocationFSxLustreTagOutput {
	return o
}

func (o LocationFSxLustreTagOutput) ToLocationFSxLustreTagOutputWithContext(ctx context.Context) LocationFSxLustreTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationFSxLustreTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxLustreTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationFSxLustreTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxLustreTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationFSxLustreTagArrayOutput struct{ *pulumi.OutputState }

func (LocationFSxLustreTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxLustreTag)(nil)).Elem()
}

func (o LocationFSxLustreTagArrayOutput) ToLocationFSxLustreTagArrayOutput() LocationFSxLustreTagArrayOutput {
	return o
}

func (o LocationFSxLustreTagArrayOutput) ToLocationFSxLustreTagArrayOutputWithContext(ctx context.Context) LocationFSxLustreTagArrayOutput {
	return o
}

func (o LocationFSxLustreTagArrayOutput) Index(i pulumi.IntInput) LocationFSxLustreTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationFSxLustreTag {
		return vs[0].([]LocationFSxLustreTag)[vs[1].(int)]
	}).(LocationFSxLustreTagOutput)
}

// NFS protocol configuration for FSx ONTAP file system.
type LocationFSxOntapNfs struct {
	MountOptions LocationFSxOntapNfsMountOptions `pulumi:"mountOptions"`
}

// LocationFSxOntapNfsInput is an input type that accepts LocationFSxOntapNfsArgs and LocationFSxOntapNfsOutput values.
// You can construct a concrete instance of `LocationFSxOntapNfsInput` via:
//
//	LocationFSxOntapNfsArgs{...}
type LocationFSxOntapNfsInput interface {
	pulumi.Input

	ToLocationFSxOntapNfsOutput() LocationFSxOntapNfsOutput
	ToLocationFSxOntapNfsOutputWithContext(context.Context) LocationFSxOntapNfsOutput
}

// NFS protocol configuration for FSx ONTAP file system.
type LocationFSxOntapNfsArgs struct {
	MountOptions LocationFSxOntapNfsMountOptionsInput `pulumi:"mountOptions"`
}

func (LocationFSxOntapNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapNfs)(nil)).Elem()
}

func (i LocationFSxOntapNfsArgs) ToLocationFSxOntapNfsOutput() LocationFSxOntapNfsOutput {
	return i.ToLocationFSxOntapNfsOutputWithContext(context.Background())
}

func (i LocationFSxOntapNfsArgs) ToLocationFSxOntapNfsOutputWithContext(ctx context.Context) LocationFSxOntapNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapNfsOutput)
}

func (i LocationFSxOntapNfsArgs) ToLocationFSxOntapNfsPtrOutput() LocationFSxOntapNfsPtrOutput {
	return i.ToLocationFSxOntapNfsPtrOutputWithContext(context.Background())
}

func (i LocationFSxOntapNfsArgs) ToLocationFSxOntapNfsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapNfsOutput).ToLocationFSxOntapNfsPtrOutputWithContext(ctx)
}

// LocationFSxOntapNfsPtrInput is an input type that accepts LocationFSxOntapNfsArgs, LocationFSxOntapNfsPtr and LocationFSxOntapNfsPtrOutput values.
// You can construct a concrete instance of `LocationFSxOntapNfsPtrInput` via:
//
//	        LocationFSxOntapNfsArgs{...}
//
//	or:
//
//	        nil
type LocationFSxOntapNfsPtrInput interface {
	pulumi.Input

	ToLocationFSxOntapNfsPtrOutput() LocationFSxOntapNfsPtrOutput
	ToLocationFSxOntapNfsPtrOutputWithContext(context.Context) LocationFSxOntapNfsPtrOutput
}

type locationFSxOntapNfsPtrType LocationFSxOntapNfsArgs

func LocationFSxOntapNfsPtr(v *LocationFSxOntapNfsArgs) LocationFSxOntapNfsPtrInput {
	return (*locationFSxOntapNfsPtrType)(v)
}

func (*locationFSxOntapNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapNfs)(nil)).Elem()
}

func (i *locationFSxOntapNfsPtrType) ToLocationFSxOntapNfsPtrOutput() LocationFSxOntapNfsPtrOutput {
	return i.ToLocationFSxOntapNfsPtrOutputWithContext(context.Background())
}

func (i *locationFSxOntapNfsPtrType) ToLocationFSxOntapNfsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapNfsPtrOutput)
}

// NFS protocol configuration for FSx ONTAP file system.
type LocationFSxOntapNfsOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapNfs)(nil)).Elem()
}

func (o LocationFSxOntapNfsOutput) ToLocationFSxOntapNfsOutput() LocationFSxOntapNfsOutput {
	return o
}

func (o LocationFSxOntapNfsOutput) ToLocationFSxOntapNfsOutputWithContext(ctx context.Context) LocationFSxOntapNfsOutput {
	return o
}

func (o LocationFSxOntapNfsOutput) ToLocationFSxOntapNfsPtrOutput() LocationFSxOntapNfsPtrOutput {
	return o.ToLocationFSxOntapNfsPtrOutputWithContext(context.Background())
}

func (o LocationFSxOntapNfsOutput) ToLocationFSxOntapNfsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationFSxOntapNfs) *LocationFSxOntapNfs {
		return &v
	}).(LocationFSxOntapNfsPtrOutput)
}

func (o LocationFSxOntapNfsOutput) MountOptions() LocationFSxOntapNfsMountOptionsOutput {
	return o.ApplyT(func(v LocationFSxOntapNfs) LocationFSxOntapNfsMountOptions { return v.MountOptions }).(LocationFSxOntapNfsMountOptionsOutput)
}

type LocationFSxOntapNfsPtrOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapNfs)(nil)).Elem()
}

func (o LocationFSxOntapNfsPtrOutput) ToLocationFSxOntapNfsPtrOutput() LocationFSxOntapNfsPtrOutput {
	return o
}

func (o LocationFSxOntapNfsPtrOutput) ToLocationFSxOntapNfsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsPtrOutput {
	return o
}

func (o LocationFSxOntapNfsPtrOutput) Elem() LocationFSxOntapNfsOutput {
	return o.ApplyT(func(v *LocationFSxOntapNfs) LocationFSxOntapNfs {
		if v != nil {
			return *v
		}
		var ret LocationFSxOntapNfs
		return ret
	}).(LocationFSxOntapNfsOutput)
}

func (o LocationFSxOntapNfsPtrOutput) MountOptions() LocationFSxOntapNfsMountOptionsPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapNfs) *LocationFSxOntapNfsMountOptions {
		if v == nil {
			return nil
		}
		return &v.MountOptions
	}).(LocationFSxOntapNfsMountOptionsPtrOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationFSxOntapNfsMountOptions struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version *LocationFSxOntapNfsMountOptionsVersion `pulumi:"version"`
}

// LocationFSxOntapNfsMountOptionsInput is an input type that accepts LocationFSxOntapNfsMountOptionsArgs and LocationFSxOntapNfsMountOptionsOutput values.
// You can construct a concrete instance of `LocationFSxOntapNfsMountOptionsInput` via:
//
//	LocationFSxOntapNfsMountOptionsArgs{...}
type LocationFSxOntapNfsMountOptionsInput interface {
	pulumi.Input

	ToLocationFSxOntapNfsMountOptionsOutput() LocationFSxOntapNfsMountOptionsOutput
	ToLocationFSxOntapNfsMountOptionsOutputWithContext(context.Context) LocationFSxOntapNfsMountOptionsOutput
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationFSxOntapNfsMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version LocationFSxOntapNfsMountOptionsVersionPtrInput `pulumi:"version"`
}

func (LocationFSxOntapNfsMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapNfsMountOptions)(nil)).Elem()
}

func (i LocationFSxOntapNfsMountOptionsArgs) ToLocationFSxOntapNfsMountOptionsOutput() LocationFSxOntapNfsMountOptionsOutput {
	return i.ToLocationFSxOntapNfsMountOptionsOutputWithContext(context.Background())
}

func (i LocationFSxOntapNfsMountOptionsArgs) ToLocationFSxOntapNfsMountOptionsOutputWithContext(ctx context.Context) LocationFSxOntapNfsMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapNfsMountOptionsOutput)
}

func (i LocationFSxOntapNfsMountOptionsArgs) ToLocationFSxOntapNfsMountOptionsPtrOutput() LocationFSxOntapNfsMountOptionsPtrOutput {
	return i.ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationFSxOntapNfsMountOptionsArgs) ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapNfsMountOptionsOutput).ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(ctx)
}

// LocationFSxOntapNfsMountOptionsPtrInput is an input type that accepts LocationFSxOntapNfsMountOptionsArgs, LocationFSxOntapNfsMountOptionsPtr and LocationFSxOntapNfsMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationFSxOntapNfsMountOptionsPtrInput` via:
//
//	        LocationFSxOntapNfsMountOptionsArgs{...}
//
//	or:
//
//	        nil
type LocationFSxOntapNfsMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationFSxOntapNfsMountOptionsPtrOutput() LocationFSxOntapNfsMountOptionsPtrOutput
	ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(context.Context) LocationFSxOntapNfsMountOptionsPtrOutput
}

type locationFSxOntapNfsMountOptionsPtrType LocationFSxOntapNfsMountOptionsArgs

func LocationFSxOntapNfsMountOptionsPtr(v *LocationFSxOntapNfsMountOptionsArgs) LocationFSxOntapNfsMountOptionsPtrInput {
	return (*locationFSxOntapNfsMountOptionsPtrType)(v)
}

func (*locationFSxOntapNfsMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapNfsMountOptions)(nil)).Elem()
}

func (i *locationFSxOntapNfsMountOptionsPtrType) ToLocationFSxOntapNfsMountOptionsPtrOutput() LocationFSxOntapNfsMountOptionsPtrOutput {
	return i.ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationFSxOntapNfsMountOptionsPtrType) ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapNfsMountOptionsPtrOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationFSxOntapNfsMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapNfsMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapNfsMountOptions)(nil)).Elem()
}

func (o LocationFSxOntapNfsMountOptionsOutput) ToLocationFSxOntapNfsMountOptionsOutput() LocationFSxOntapNfsMountOptionsOutput {
	return o
}

func (o LocationFSxOntapNfsMountOptionsOutput) ToLocationFSxOntapNfsMountOptionsOutputWithContext(ctx context.Context) LocationFSxOntapNfsMountOptionsOutput {
	return o
}

func (o LocationFSxOntapNfsMountOptionsOutput) ToLocationFSxOntapNfsMountOptionsPtrOutput() LocationFSxOntapNfsMountOptionsPtrOutput {
	return o.ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationFSxOntapNfsMountOptionsOutput) ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationFSxOntapNfsMountOptions) *LocationFSxOntapNfsMountOptions {
		return &v
	}).(LocationFSxOntapNfsMountOptionsPtrOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationFSxOntapNfsMountOptionsOutput) Version() LocationFSxOntapNfsMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v LocationFSxOntapNfsMountOptions) *LocationFSxOntapNfsMountOptionsVersion { return v.Version }).(LocationFSxOntapNfsMountOptionsVersionPtrOutput)
}

type LocationFSxOntapNfsMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapNfsMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapNfsMountOptions)(nil)).Elem()
}

func (o LocationFSxOntapNfsMountOptionsPtrOutput) ToLocationFSxOntapNfsMountOptionsPtrOutput() LocationFSxOntapNfsMountOptionsPtrOutput {
	return o
}

func (o LocationFSxOntapNfsMountOptionsPtrOutput) ToLocationFSxOntapNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapNfsMountOptionsPtrOutput {
	return o
}

func (o LocationFSxOntapNfsMountOptionsPtrOutput) Elem() LocationFSxOntapNfsMountOptionsOutput {
	return o.ApplyT(func(v *LocationFSxOntapNfsMountOptions) LocationFSxOntapNfsMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationFSxOntapNfsMountOptions
		return ret
	}).(LocationFSxOntapNfsMountOptionsOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationFSxOntapNfsMountOptionsPtrOutput) Version() LocationFSxOntapNfsMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapNfsMountOptions) *LocationFSxOntapNfsMountOptionsVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(LocationFSxOntapNfsMountOptionsVersionPtrOutput)
}

// Configuration settings for NFS or SMB protocol.
type LocationFSxOntapProtocol struct {
	Nfs *LocationFSxOntapNfs `pulumi:"nfs"`
	Smb *LocationFSxOntapSmb `pulumi:"smb"`
}

// LocationFSxOntapProtocolInput is an input type that accepts LocationFSxOntapProtocolArgs and LocationFSxOntapProtocolOutput values.
// You can construct a concrete instance of `LocationFSxOntapProtocolInput` via:
//
//	LocationFSxOntapProtocolArgs{...}
type LocationFSxOntapProtocolInput interface {
	pulumi.Input

	ToLocationFSxOntapProtocolOutput() LocationFSxOntapProtocolOutput
	ToLocationFSxOntapProtocolOutputWithContext(context.Context) LocationFSxOntapProtocolOutput
}

// Configuration settings for NFS or SMB protocol.
type LocationFSxOntapProtocolArgs struct {
	Nfs LocationFSxOntapNfsPtrInput `pulumi:"nfs"`
	Smb LocationFSxOntapSmbPtrInput `pulumi:"smb"`
}

func (LocationFSxOntapProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapProtocol)(nil)).Elem()
}

func (i LocationFSxOntapProtocolArgs) ToLocationFSxOntapProtocolOutput() LocationFSxOntapProtocolOutput {
	return i.ToLocationFSxOntapProtocolOutputWithContext(context.Background())
}

func (i LocationFSxOntapProtocolArgs) ToLocationFSxOntapProtocolOutputWithContext(ctx context.Context) LocationFSxOntapProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapProtocolOutput)
}

func (i LocationFSxOntapProtocolArgs) ToLocationFSxOntapProtocolPtrOutput() LocationFSxOntapProtocolPtrOutput {
	return i.ToLocationFSxOntapProtocolPtrOutputWithContext(context.Background())
}

func (i LocationFSxOntapProtocolArgs) ToLocationFSxOntapProtocolPtrOutputWithContext(ctx context.Context) LocationFSxOntapProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapProtocolOutput).ToLocationFSxOntapProtocolPtrOutputWithContext(ctx)
}

// LocationFSxOntapProtocolPtrInput is an input type that accepts LocationFSxOntapProtocolArgs, LocationFSxOntapProtocolPtr and LocationFSxOntapProtocolPtrOutput values.
// You can construct a concrete instance of `LocationFSxOntapProtocolPtrInput` via:
//
//	        LocationFSxOntapProtocolArgs{...}
//
//	or:
//
//	        nil
type LocationFSxOntapProtocolPtrInput interface {
	pulumi.Input

	ToLocationFSxOntapProtocolPtrOutput() LocationFSxOntapProtocolPtrOutput
	ToLocationFSxOntapProtocolPtrOutputWithContext(context.Context) LocationFSxOntapProtocolPtrOutput
}

type locationFSxOntapProtocolPtrType LocationFSxOntapProtocolArgs

func LocationFSxOntapProtocolPtr(v *LocationFSxOntapProtocolArgs) LocationFSxOntapProtocolPtrInput {
	return (*locationFSxOntapProtocolPtrType)(v)
}

func (*locationFSxOntapProtocolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapProtocol)(nil)).Elem()
}

func (i *locationFSxOntapProtocolPtrType) ToLocationFSxOntapProtocolPtrOutput() LocationFSxOntapProtocolPtrOutput {
	return i.ToLocationFSxOntapProtocolPtrOutputWithContext(context.Background())
}

func (i *locationFSxOntapProtocolPtrType) ToLocationFSxOntapProtocolPtrOutputWithContext(ctx context.Context) LocationFSxOntapProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapProtocolPtrOutput)
}

// Configuration settings for NFS or SMB protocol.
type LocationFSxOntapProtocolOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapProtocol)(nil)).Elem()
}

func (o LocationFSxOntapProtocolOutput) ToLocationFSxOntapProtocolOutput() LocationFSxOntapProtocolOutput {
	return o
}

func (o LocationFSxOntapProtocolOutput) ToLocationFSxOntapProtocolOutputWithContext(ctx context.Context) LocationFSxOntapProtocolOutput {
	return o
}

func (o LocationFSxOntapProtocolOutput) ToLocationFSxOntapProtocolPtrOutput() LocationFSxOntapProtocolPtrOutput {
	return o.ToLocationFSxOntapProtocolPtrOutputWithContext(context.Background())
}

func (o LocationFSxOntapProtocolOutput) ToLocationFSxOntapProtocolPtrOutputWithContext(ctx context.Context) LocationFSxOntapProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationFSxOntapProtocol) *LocationFSxOntapProtocol {
		return &v
	}).(LocationFSxOntapProtocolPtrOutput)
}

func (o LocationFSxOntapProtocolOutput) Nfs() LocationFSxOntapNfsPtrOutput {
	return o.ApplyT(func(v LocationFSxOntapProtocol) *LocationFSxOntapNfs { return v.Nfs }).(LocationFSxOntapNfsPtrOutput)
}

func (o LocationFSxOntapProtocolOutput) Smb() LocationFSxOntapSmbPtrOutput {
	return o.ApplyT(func(v LocationFSxOntapProtocol) *LocationFSxOntapSmb { return v.Smb }).(LocationFSxOntapSmbPtrOutput)
}

type LocationFSxOntapProtocolPtrOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapProtocol)(nil)).Elem()
}

func (o LocationFSxOntapProtocolPtrOutput) ToLocationFSxOntapProtocolPtrOutput() LocationFSxOntapProtocolPtrOutput {
	return o
}

func (o LocationFSxOntapProtocolPtrOutput) ToLocationFSxOntapProtocolPtrOutputWithContext(ctx context.Context) LocationFSxOntapProtocolPtrOutput {
	return o
}

func (o LocationFSxOntapProtocolPtrOutput) Elem() LocationFSxOntapProtocolOutput {
	return o.ApplyT(func(v *LocationFSxOntapProtocol) LocationFSxOntapProtocol {
		if v != nil {
			return *v
		}
		var ret LocationFSxOntapProtocol
		return ret
	}).(LocationFSxOntapProtocolOutput)
}

func (o LocationFSxOntapProtocolPtrOutput) Nfs() LocationFSxOntapNfsPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapProtocol) *LocationFSxOntapNfs {
		if v == nil {
			return nil
		}
		return v.Nfs
	}).(LocationFSxOntapNfsPtrOutput)
}

func (o LocationFSxOntapProtocolPtrOutput) Smb() LocationFSxOntapSmbPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapProtocol) *LocationFSxOntapSmb {
		if v == nil {
			return nil
		}
		return v.Smb
	}).(LocationFSxOntapSmbPtrOutput)
}

// SMB protocol configuration for FSx ONTAP file system.
type LocationFSxOntapSmb struct {
	// The name of the Windows domain that the SMB server belongs to.
	Domain       *string                         `pulumi:"domain"`
	MountOptions LocationFSxOntapSmbMountOptions `pulumi:"mountOptions"`
	// The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
	Password string `pulumi:"password"`
	// The user who can mount the share, has the permissions to access files and folders in the SMB share.
	User string `pulumi:"user"`
}

// LocationFSxOntapSmbInput is an input type that accepts LocationFSxOntapSmbArgs and LocationFSxOntapSmbOutput values.
// You can construct a concrete instance of `LocationFSxOntapSmbInput` via:
//
//	LocationFSxOntapSmbArgs{...}
type LocationFSxOntapSmbInput interface {
	pulumi.Input

	ToLocationFSxOntapSmbOutput() LocationFSxOntapSmbOutput
	ToLocationFSxOntapSmbOutputWithContext(context.Context) LocationFSxOntapSmbOutput
}

// SMB protocol configuration for FSx ONTAP file system.
type LocationFSxOntapSmbArgs struct {
	// The name of the Windows domain that the SMB server belongs to.
	Domain       pulumi.StringPtrInput                `pulumi:"domain"`
	MountOptions LocationFSxOntapSmbMountOptionsInput `pulumi:"mountOptions"`
	// The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
	Password pulumi.StringInput `pulumi:"password"`
	// The user who can mount the share, has the permissions to access files and folders in the SMB share.
	User pulumi.StringInput `pulumi:"user"`
}

func (LocationFSxOntapSmbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapSmb)(nil)).Elem()
}

func (i LocationFSxOntapSmbArgs) ToLocationFSxOntapSmbOutput() LocationFSxOntapSmbOutput {
	return i.ToLocationFSxOntapSmbOutputWithContext(context.Background())
}

func (i LocationFSxOntapSmbArgs) ToLocationFSxOntapSmbOutputWithContext(ctx context.Context) LocationFSxOntapSmbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapSmbOutput)
}

func (i LocationFSxOntapSmbArgs) ToLocationFSxOntapSmbPtrOutput() LocationFSxOntapSmbPtrOutput {
	return i.ToLocationFSxOntapSmbPtrOutputWithContext(context.Background())
}

func (i LocationFSxOntapSmbArgs) ToLocationFSxOntapSmbPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapSmbOutput).ToLocationFSxOntapSmbPtrOutputWithContext(ctx)
}

// LocationFSxOntapSmbPtrInput is an input type that accepts LocationFSxOntapSmbArgs, LocationFSxOntapSmbPtr and LocationFSxOntapSmbPtrOutput values.
// You can construct a concrete instance of `LocationFSxOntapSmbPtrInput` via:
//
//	        LocationFSxOntapSmbArgs{...}
//
//	or:
//
//	        nil
type LocationFSxOntapSmbPtrInput interface {
	pulumi.Input

	ToLocationFSxOntapSmbPtrOutput() LocationFSxOntapSmbPtrOutput
	ToLocationFSxOntapSmbPtrOutputWithContext(context.Context) LocationFSxOntapSmbPtrOutput
}

type locationFSxOntapSmbPtrType LocationFSxOntapSmbArgs

func LocationFSxOntapSmbPtr(v *LocationFSxOntapSmbArgs) LocationFSxOntapSmbPtrInput {
	return (*locationFSxOntapSmbPtrType)(v)
}

func (*locationFSxOntapSmbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapSmb)(nil)).Elem()
}

func (i *locationFSxOntapSmbPtrType) ToLocationFSxOntapSmbPtrOutput() LocationFSxOntapSmbPtrOutput {
	return i.ToLocationFSxOntapSmbPtrOutputWithContext(context.Background())
}

func (i *locationFSxOntapSmbPtrType) ToLocationFSxOntapSmbPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapSmbPtrOutput)
}

// SMB protocol configuration for FSx ONTAP file system.
type LocationFSxOntapSmbOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapSmbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapSmb)(nil)).Elem()
}

func (o LocationFSxOntapSmbOutput) ToLocationFSxOntapSmbOutput() LocationFSxOntapSmbOutput {
	return o
}

func (o LocationFSxOntapSmbOutput) ToLocationFSxOntapSmbOutputWithContext(ctx context.Context) LocationFSxOntapSmbOutput {
	return o
}

func (o LocationFSxOntapSmbOutput) ToLocationFSxOntapSmbPtrOutput() LocationFSxOntapSmbPtrOutput {
	return o.ToLocationFSxOntapSmbPtrOutputWithContext(context.Background())
}

func (o LocationFSxOntapSmbOutput) ToLocationFSxOntapSmbPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationFSxOntapSmb) *LocationFSxOntapSmb {
		return &v
	}).(LocationFSxOntapSmbPtrOutput)
}

// The name of the Windows domain that the SMB server belongs to.
func (o LocationFSxOntapSmbOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationFSxOntapSmb) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o LocationFSxOntapSmbOutput) MountOptions() LocationFSxOntapSmbMountOptionsOutput {
	return o.ApplyT(func(v LocationFSxOntapSmb) LocationFSxOntapSmbMountOptions { return v.MountOptions }).(LocationFSxOntapSmbMountOptionsOutput)
}

// The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
func (o LocationFSxOntapSmbOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxOntapSmb) string { return v.Password }).(pulumi.StringOutput)
}

// The user who can mount the share, has the permissions to access files and folders in the SMB share.
func (o LocationFSxOntapSmbOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxOntapSmb) string { return v.User }).(pulumi.StringOutput)
}

type LocationFSxOntapSmbPtrOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapSmbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapSmb)(nil)).Elem()
}

func (o LocationFSxOntapSmbPtrOutput) ToLocationFSxOntapSmbPtrOutput() LocationFSxOntapSmbPtrOutput {
	return o
}

func (o LocationFSxOntapSmbPtrOutput) ToLocationFSxOntapSmbPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbPtrOutput {
	return o
}

func (o LocationFSxOntapSmbPtrOutput) Elem() LocationFSxOntapSmbOutput {
	return o.ApplyT(func(v *LocationFSxOntapSmb) LocationFSxOntapSmb {
		if v != nil {
			return *v
		}
		var ret LocationFSxOntapSmb
		return ret
	}).(LocationFSxOntapSmbOutput)
}

// The name of the Windows domain that the SMB server belongs to.
func (o LocationFSxOntapSmbPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapSmb) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o LocationFSxOntapSmbPtrOutput) MountOptions() LocationFSxOntapSmbMountOptionsPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapSmb) *LocationFSxOntapSmbMountOptions {
		if v == nil {
			return nil
		}
		return &v.MountOptions
	}).(LocationFSxOntapSmbMountOptionsPtrOutput)
}

// The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
func (o LocationFSxOntapSmbPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapSmb) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The user who can mount the share, has the permissions to access files and folders in the SMB share.
func (o LocationFSxOntapSmbPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapSmb) *string {
		if v == nil {
			return nil
		}
		return &v.User
	}).(pulumi.StringPtrOutput)
}

// The mount options used by DataSync to access the SMB server.
type LocationFSxOntapSmbMountOptions struct {
	// The specific SMB version that you want DataSync to use to mount your SMB share.
	Version *LocationFSxOntapSmbMountOptionsVersion `pulumi:"version"`
}

// LocationFSxOntapSmbMountOptionsInput is an input type that accepts LocationFSxOntapSmbMountOptionsArgs and LocationFSxOntapSmbMountOptionsOutput values.
// You can construct a concrete instance of `LocationFSxOntapSmbMountOptionsInput` via:
//
//	LocationFSxOntapSmbMountOptionsArgs{...}
type LocationFSxOntapSmbMountOptionsInput interface {
	pulumi.Input

	ToLocationFSxOntapSmbMountOptionsOutput() LocationFSxOntapSmbMountOptionsOutput
	ToLocationFSxOntapSmbMountOptionsOutputWithContext(context.Context) LocationFSxOntapSmbMountOptionsOutput
}

// The mount options used by DataSync to access the SMB server.
type LocationFSxOntapSmbMountOptionsArgs struct {
	// The specific SMB version that you want DataSync to use to mount your SMB share.
	Version LocationFSxOntapSmbMountOptionsVersionPtrInput `pulumi:"version"`
}

func (LocationFSxOntapSmbMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapSmbMountOptions)(nil)).Elem()
}

func (i LocationFSxOntapSmbMountOptionsArgs) ToLocationFSxOntapSmbMountOptionsOutput() LocationFSxOntapSmbMountOptionsOutput {
	return i.ToLocationFSxOntapSmbMountOptionsOutputWithContext(context.Background())
}

func (i LocationFSxOntapSmbMountOptionsArgs) ToLocationFSxOntapSmbMountOptionsOutputWithContext(ctx context.Context) LocationFSxOntapSmbMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapSmbMountOptionsOutput)
}

func (i LocationFSxOntapSmbMountOptionsArgs) ToLocationFSxOntapSmbMountOptionsPtrOutput() LocationFSxOntapSmbMountOptionsPtrOutput {
	return i.ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationFSxOntapSmbMountOptionsArgs) ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapSmbMountOptionsOutput).ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(ctx)
}

// LocationFSxOntapSmbMountOptionsPtrInput is an input type that accepts LocationFSxOntapSmbMountOptionsArgs, LocationFSxOntapSmbMountOptionsPtr and LocationFSxOntapSmbMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationFSxOntapSmbMountOptionsPtrInput` via:
//
//	        LocationFSxOntapSmbMountOptionsArgs{...}
//
//	or:
//
//	        nil
type LocationFSxOntapSmbMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationFSxOntapSmbMountOptionsPtrOutput() LocationFSxOntapSmbMountOptionsPtrOutput
	ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(context.Context) LocationFSxOntapSmbMountOptionsPtrOutput
}

type locationFSxOntapSmbMountOptionsPtrType LocationFSxOntapSmbMountOptionsArgs

func LocationFSxOntapSmbMountOptionsPtr(v *LocationFSxOntapSmbMountOptionsArgs) LocationFSxOntapSmbMountOptionsPtrInput {
	return (*locationFSxOntapSmbMountOptionsPtrType)(v)
}

func (*locationFSxOntapSmbMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapSmbMountOptions)(nil)).Elem()
}

func (i *locationFSxOntapSmbMountOptionsPtrType) ToLocationFSxOntapSmbMountOptionsPtrOutput() LocationFSxOntapSmbMountOptionsPtrOutput {
	return i.ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationFSxOntapSmbMountOptionsPtrType) ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapSmbMountOptionsPtrOutput)
}

// The mount options used by DataSync to access the SMB server.
type LocationFSxOntapSmbMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapSmbMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapSmbMountOptions)(nil)).Elem()
}

func (o LocationFSxOntapSmbMountOptionsOutput) ToLocationFSxOntapSmbMountOptionsOutput() LocationFSxOntapSmbMountOptionsOutput {
	return o
}

func (o LocationFSxOntapSmbMountOptionsOutput) ToLocationFSxOntapSmbMountOptionsOutputWithContext(ctx context.Context) LocationFSxOntapSmbMountOptionsOutput {
	return o
}

func (o LocationFSxOntapSmbMountOptionsOutput) ToLocationFSxOntapSmbMountOptionsPtrOutput() LocationFSxOntapSmbMountOptionsPtrOutput {
	return o.ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationFSxOntapSmbMountOptionsOutput) ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationFSxOntapSmbMountOptions) *LocationFSxOntapSmbMountOptions {
		return &v
	}).(LocationFSxOntapSmbMountOptionsPtrOutput)
}

// The specific SMB version that you want DataSync to use to mount your SMB share.
func (o LocationFSxOntapSmbMountOptionsOutput) Version() LocationFSxOntapSmbMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v LocationFSxOntapSmbMountOptions) *LocationFSxOntapSmbMountOptionsVersion { return v.Version }).(LocationFSxOntapSmbMountOptionsVersionPtrOutput)
}

type LocationFSxOntapSmbMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapSmbMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOntapSmbMountOptions)(nil)).Elem()
}

func (o LocationFSxOntapSmbMountOptionsPtrOutput) ToLocationFSxOntapSmbMountOptionsPtrOutput() LocationFSxOntapSmbMountOptionsPtrOutput {
	return o
}

func (o LocationFSxOntapSmbMountOptionsPtrOutput) ToLocationFSxOntapSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOntapSmbMountOptionsPtrOutput {
	return o
}

func (o LocationFSxOntapSmbMountOptionsPtrOutput) Elem() LocationFSxOntapSmbMountOptionsOutput {
	return o.ApplyT(func(v *LocationFSxOntapSmbMountOptions) LocationFSxOntapSmbMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationFSxOntapSmbMountOptions
		return ret
	}).(LocationFSxOntapSmbMountOptionsOutput)
}

// The specific SMB version that you want DataSync to use to mount your SMB share.
func (o LocationFSxOntapSmbMountOptionsPtrOutput) Version() LocationFSxOntapSmbMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v *LocationFSxOntapSmbMountOptions) *LocationFSxOntapSmbMountOptionsVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(LocationFSxOntapSmbMountOptionsVersionPtrOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxOntapTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationFSxOntapTagInput is an input type that accepts LocationFSxOntapTagArgs and LocationFSxOntapTagOutput values.
// You can construct a concrete instance of `LocationFSxOntapTagInput` via:
//
//	LocationFSxOntapTagArgs{...}
type LocationFSxOntapTagInput interface {
	pulumi.Input

	ToLocationFSxOntapTagOutput() LocationFSxOntapTagOutput
	ToLocationFSxOntapTagOutputWithContext(context.Context) LocationFSxOntapTagOutput
}

// A key-value pair to associate with a resource.
type LocationFSxOntapTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationFSxOntapTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapTag)(nil)).Elem()
}

func (i LocationFSxOntapTagArgs) ToLocationFSxOntapTagOutput() LocationFSxOntapTagOutput {
	return i.ToLocationFSxOntapTagOutputWithContext(context.Background())
}

func (i LocationFSxOntapTagArgs) ToLocationFSxOntapTagOutputWithContext(ctx context.Context) LocationFSxOntapTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapTagOutput)
}

// LocationFSxOntapTagArrayInput is an input type that accepts LocationFSxOntapTagArray and LocationFSxOntapTagArrayOutput values.
// You can construct a concrete instance of `LocationFSxOntapTagArrayInput` via:
//
//	LocationFSxOntapTagArray{ LocationFSxOntapTagArgs{...} }
type LocationFSxOntapTagArrayInput interface {
	pulumi.Input

	ToLocationFSxOntapTagArrayOutput() LocationFSxOntapTagArrayOutput
	ToLocationFSxOntapTagArrayOutputWithContext(context.Context) LocationFSxOntapTagArrayOutput
}

type LocationFSxOntapTagArray []LocationFSxOntapTagInput

func (LocationFSxOntapTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxOntapTag)(nil)).Elem()
}

func (i LocationFSxOntapTagArray) ToLocationFSxOntapTagArrayOutput() LocationFSxOntapTagArrayOutput {
	return i.ToLocationFSxOntapTagArrayOutputWithContext(context.Background())
}

func (i LocationFSxOntapTagArray) ToLocationFSxOntapTagArrayOutputWithContext(ctx context.Context) LocationFSxOntapTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOntapTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxOntapTagOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOntapTag)(nil)).Elem()
}

func (o LocationFSxOntapTagOutput) ToLocationFSxOntapTagOutput() LocationFSxOntapTagOutput {
	return o
}

func (o LocationFSxOntapTagOutput) ToLocationFSxOntapTagOutputWithContext(ctx context.Context) LocationFSxOntapTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationFSxOntapTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxOntapTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationFSxOntapTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxOntapTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationFSxOntapTagArrayOutput struct{ *pulumi.OutputState }

func (LocationFSxOntapTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxOntapTag)(nil)).Elem()
}

func (o LocationFSxOntapTagArrayOutput) ToLocationFSxOntapTagArrayOutput() LocationFSxOntapTagArrayOutput {
	return o
}

func (o LocationFSxOntapTagArrayOutput) ToLocationFSxOntapTagArrayOutputWithContext(ctx context.Context) LocationFSxOntapTagArrayOutput {
	return o
}

func (o LocationFSxOntapTagArrayOutput) Index(i pulumi.IntInput) LocationFSxOntapTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationFSxOntapTag {
		return vs[0].([]LocationFSxOntapTag)[vs[1].(int)]
	}).(LocationFSxOntapTagOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationFSxOpenZfsMountOptions struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version *LocationFSxOpenZfsMountOptionsVersion `pulumi:"version"`
}

// LocationFSxOpenZfsMountOptionsInput is an input type that accepts LocationFSxOpenZfsMountOptionsArgs and LocationFSxOpenZfsMountOptionsOutput values.
// You can construct a concrete instance of `LocationFSxOpenZfsMountOptionsInput` via:
//
//	LocationFSxOpenZfsMountOptionsArgs{...}
type LocationFSxOpenZfsMountOptionsInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsMountOptionsOutput() LocationFSxOpenZfsMountOptionsOutput
	ToLocationFSxOpenZfsMountOptionsOutputWithContext(context.Context) LocationFSxOpenZfsMountOptionsOutput
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationFSxOpenZfsMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version LocationFSxOpenZfsMountOptionsVersionPtrInput `pulumi:"version"`
}

func (LocationFSxOpenZfsMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsMountOptions)(nil)).Elem()
}

func (i LocationFSxOpenZfsMountOptionsArgs) ToLocationFSxOpenZfsMountOptionsOutput() LocationFSxOpenZfsMountOptionsOutput {
	return i.ToLocationFSxOpenZfsMountOptionsOutputWithContext(context.Background())
}

func (i LocationFSxOpenZfsMountOptionsArgs) ToLocationFSxOpenZfsMountOptionsOutputWithContext(ctx context.Context) LocationFSxOpenZfsMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsMountOptionsOutput)
}

func (i LocationFSxOpenZfsMountOptionsArgs) ToLocationFSxOpenZfsMountOptionsPtrOutput() LocationFSxOpenZfsMountOptionsPtrOutput {
	return i.ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationFSxOpenZfsMountOptionsArgs) ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsMountOptionsOutput).ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(ctx)
}

// LocationFSxOpenZfsMountOptionsPtrInput is an input type that accepts LocationFSxOpenZfsMountOptionsArgs, LocationFSxOpenZfsMountOptionsPtr and LocationFSxOpenZfsMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationFSxOpenZfsMountOptionsPtrInput` via:
//
//	        LocationFSxOpenZfsMountOptionsArgs{...}
//
//	or:
//
//	        nil
type LocationFSxOpenZfsMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsMountOptionsPtrOutput() LocationFSxOpenZfsMountOptionsPtrOutput
	ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(context.Context) LocationFSxOpenZfsMountOptionsPtrOutput
}

type locationFSxOpenZfsMountOptionsPtrType LocationFSxOpenZfsMountOptionsArgs

func LocationFSxOpenZfsMountOptionsPtr(v *LocationFSxOpenZfsMountOptionsArgs) LocationFSxOpenZfsMountOptionsPtrInput {
	return (*locationFSxOpenZfsMountOptionsPtrType)(v)
}

func (*locationFSxOpenZfsMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOpenZfsMountOptions)(nil)).Elem()
}

func (i *locationFSxOpenZfsMountOptionsPtrType) ToLocationFSxOpenZfsMountOptionsPtrOutput() LocationFSxOpenZfsMountOptionsPtrOutput {
	return i.ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationFSxOpenZfsMountOptionsPtrType) ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsMountOptionsPtrOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationFSxOpenZfsMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsMountOptions)(nil)).Elem()
}

func (o LocationFSxOpenZfsMountOptionsOutput) ToLocationFSxOpenZfsMountOptionsOutput() LocationFSxOpenZfsMountOptionsOutput {
	return o
}

func (o LocationFSxOpenZfsMountOptionsOutput) ToLocationFSxOpenZfsMountOptionsOutputWithContext(ctx context.Context) LocationFSxOpenZfsMountOptionsOutput {
	return o
}

func (o LocationFSxOpenZfsMountOptionsOutput) ToLocationFSxOpenZfsMountOptionsPtrOutput() LocationFSxOpenZfsMountOptionsPtrOutput {
	return o.ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationFSxOpenZfsMountOptionsOutput) ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationFSxOpenZfsMountOptions) *LocationFSxOpenZfsMountOptions {
		return &v
	}).(LocationFSxOpenZfsMountOptionsPtrOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationFSxOpenZfsMountOptionsOutput) Version() LocationFSxOpenZfsMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v LocationFSxOpenZfsMountOptions) *LocationFSxOpenZfsMountOptionsVersion { return v.Version }).(LocationFSxOpenZfsMountOptionsVersionPtrOutput)
}

type LocationFSxOpenZfsMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOpenZfsMountOptions)(nil)).Elem()
}

func (o LocationFSxOpenZfsMountOptionsPtrOutput) ToLocationFSxOpenZfsMountOptionsPtrOutput() LocationFSxOpenZfsMountOptionsPtrOutput {
	return o
}

func (o LocationFSxOpenZfsMountOptionsPtrOutput) ToLocationFSxOpenZfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsMountOptionsPtrOutput {
	return o
}

func (o LocationFSxOpenZfsMountOptionsPtrOutput) Elem() LocationFSxOpenZfsMountOptionsOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfsMountOptions) LocationFSxOpenZfsMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationFSxOpenZfsMountOptions
		return ret
	}).(LocationFSxOpenZfsMountOptionsOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationFSxOpenZfsMountOptionsPtrOutput) Version() LocationFSxOpenZfsMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfsMountOptions) *LocationFSxOpenZfsMountOptionsVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(LocationFSxOpenZfsMountOptionsVersionPtrOutput)
}

// FSx OpenZFS file system NFS protocol information
type LocationFSxOpenZfsNfs struct {
	MountOptions LocationFSxOpenZfsMountOptions `pulumi:"mountOptions"`
}

// LocationFSxOpenZfsNfsInput is an input type that accepts LocationFSxOpenZfsNfsArgs and LocationFSxOpenZfsNfsOutput values.
// You can construct a concrete instance of `LocationFSxOpenZfsNfsInput` via:
//
//	LocationFSxOpenZfsNfsArgs{...}
type LocationFSxOpenZfsNfsInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsNfsOutput() LocationFSxOpenZfsNfsOutput
	ToLocationFSxOpenZfsNfsOutputWithContext(context.Context) LocationFSxOpenZfsNfsOutput
}

// FSx OpenZFS file system NFS protocol information
type LocationFSxOpenZfsNfsArgs struct {
	MountOptions LocationFSxOpenZfsMountOptionsInput `pulumi:"mountOptions"`
}

func (LocationFSxOpenZfsNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsNfs)(nil)).Elem()
}

func (i LocationFSxOpenZfsNfsArgs) ToLocationFSxOpenZfsNfsOutput() LocationFSxOpenZfsNfsOutput {
	return i.ToLocationFSxOpenZfsNfsOutputWithContext(context.Background())
}

func (i LocationFSxOpenZfsNfsArgs) ToLocationFSxOpenZfsNfsOutputWithContext(ctx context.Context) LocationFSxOpenZfsNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsNfsOutput)
}

func (i LocationFSxOpenZfsNfsArgs) ToLocationFSxOpenZfsNfsPtrOutput() LocationFSxOpenZfsNfsPtrOutput {
	return i.ToLocationFSxOpenZfsNfsPtrOutputWithContext(context.Background())
}

func (i LocationFSxOpenZfsNfsArgs) ToLocationFSxOpenZfsNfsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsNfsOutput).ToLocationFSxOpenZfsNfsPtrOutputWithContext(ctx)
}

// LocationFSxOpenZfsNfsPtrInput is an input type that accepts LocationFSxOpenZfsNfsArgs, LocationFSxOpenZfsNfsPtr and LocationFSxOpenZfsNfsPtrOutput values.
// You can construct a concrete instance of `LocationFSxOpenZfsNfsPtrInput` via:
//
//	        LocationFSxOpenZfsNfsArgs{...}
//
//	or:
//
//	        nil
type LocationFSxOpenZfsNfsPtrInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsNfsPtrOutput() LocationFSxOpenZfsNfsPtrOutput
	ToLocationFSxOpenZfsNfsPtrOutputWithContext(context.Context) LocationFSxOpenZfsNfsPtrOutput
}

type locationFSxOpenZfsNfsPtrType LocationFSxOpenZfsNfsArgs

func LocationFSxOpenZfsNfsPtr(v *LocationFSxOpenZfsNfsArgs) LocationFSxOpenZfsNfsPtrInput {
	return (*locationFSxOpenZfsNfsPtrType)(v)
}

func (*locationFSxOpenZfsNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOpenZfsNfs)(nil)).Elem()
}

func (i *locationFSxOpenZfsNfsPtrType) ToLocationFSxOpenZfsNfsPtrOutput() LocationFSxOpenZfsNfsPtrOutput {
	return i.ToLocationFSxOpenZfsNfsPtrOutputWithContext(context.Background())
}

func (i *locationFSxOpenZfsNfsPtrType) ToLocationFSxOpenZfsNfsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsNfsPtrOutput)
}

// FSx OpenZFS file system NFS protocol information
type LocationFSxOpenZfsNfsOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsNfs)(nil)).Elem()
}

func (o LocationFSxOpenZfsNfsOutput) ToLocationFSxOpenZfsNfsOutput() LocationFSxOpenZfsNfsOutput {
	return o
}

func (o LocationFSxOpenZfsNfsOutput) ToLocationFSxOpenZfsNfsOutputWithContext(ctx context.Context) LocationFSxOpenZfsNfsOutput {
	return o
}

func (o LocationFSxOpenZfsNfsOutput) ToLocationFSxOpenZfsNfsPtrOutput() LocationFSxOpenZfsNfsPtrOutput {
	return o.ToLocationFSxOpenZfsNfsPtrOutputWithContext(context.Background())
}

func (o LocationFSxOpenZfsNfsOutput) ToLocationFSxOpenZfsNfsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationFSxOpenZfsNfs) *LocationFSxOpenZfsNfs {
		return &v
	}).(LocationFSxOpenZfsNfsPtrOutput)
}

func (o LocationFSxOpenZfsNfsOutput) MountOptions() LocationFSxOpenZfsMountOptionsOutput {
	return o.ApplyT(func(v LocationFSxOpenZfsNfs) LocationFSxOpenZfsMountOptions { return v.MountOptions }).(LocationFSxOpenZfsMountOptionsOutput)
}

type LocationFSxOpenZfsNfsPtrOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxOpenZfsNfs)(nil)).Elem()
}

func (o LocationFSxOpenZfsNfsPtrOutput) ToLocationFSxOpenZfsNfsPtrOutput() LocationFSxOpenZfsNfsPtrOutput {
	return o
}

func (o LocationFSxOpenZfsNfsPtrOutput) ToLocationFSxOpenZfsNfsPtrOutputWithContext(ctx context.Context) LocationFSxOpenZfsNfsPtrOutput {
	return o
}

func (o LocationFSxOpenZfsNfsPtrOutput) Elem() LocationFSxOpenZfsNfsOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfsNfs) LocationFSxOpenZfsNfs {
		if v != nil {
			return *v
		}
		var ret LocationFSxOpenZfsNfs
		return ret
	}).(LocationFSxOpenZfsNfsOutput)
}

func (o LocationFSxOpenZfsNfsPtrOutput) MountOptions() LocationFSxOpenZfsMountOptionsPtrOutput {
	return o.ApplyT(func(v *LocationFSxOpenZfsNfs) *LocationFSxOpenZfsMountOptions {
		if v == nil {
			return nil
		}
		return &v.MountOptions
	}).(LocationFSxOpenZfsMountOptionsPtrOutput)
}

// Configuration settings for an NFS or SMB protocol, currently only support NFS
type LocationFSxOpenZfsProtocol struct {
	Nfs *LocationFSxOpenZfsNfs `pulumi:"nfs"`
}

// LocationFSxOpenZfsProtocolInput is an input type that accepts LocationFSxOpenZfsProtocolArgs and LocationFSxOpenZfsProtocolOutput values.
// You can construct a concrete instance of `LocationFSxOpenZfsProtocolInput` via:
//
//	LocationFSxOpenZfsProtocolArgs{...}
type LocationFSxOpenZfsProtocolInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsProtocolOutput() LocationFSxOpenZfsProtocolOutput
	ToLocationFSxOpenZfsProtocolOutputWithContext(context.Context) LocationFSxOpenZfsProtocolOutput
}

// Configuration settings for an NFS or SMB protocol, currently only support NFS
type LocationFSxOpenZfsProtocolArgs struct {
	Nfs LocationFSxOpenZfsNfsPtrInput `pulumi:"nfs"`
}

func (LocationFSxOpenZfsProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsProtocol)(nil)).Elem()
}

func (i LocationFSxOpenZfsProtocolArgs) ToLocationFSxOpenZfsProtocolOutput() LocationFSxOpenZfsProtocolOutput {
	return i.ToLocationFSxOpenZfsProtocolOutputWithContext(context.Background())
}

func (i LocationFSxOpenZfsProtocolArgs) ToLocationFSxOpenZfsProtocolOutputWithContext(ctx context.Context) LocationFSxOpenZfsProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsProtocolOutput)
}

// Configuration settings for an NFS or SMB protocol, currently only support NFS
type LocationFSxOpenZfsProtocolOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsProtocol)(nil)).Elem()
}

func (o LocationFSxOpenZfsProtocolOutput) ToLocationFSxOpenZfsProtocolOutput() LocationFSxOpenZfsProtocolOutput {
	return o
}

func (o LocationFSxOpenZfsProtocolOutput) ToLocationFSxOpenZfsProtocolOutputWithContext(ctx context.Context) LocationFSxOpenZfsProtocolOutput {
	return o
}

func (o LocationFSxOpenZfsProtocolOutput) Nfs() LocationFSxOpenZfsNfsPtrOutput {
	return o.ApplyT(func(v LocationFSxOpenZfsProtocol) *LocationFSxOpenZfsNfs { return v.Nfs }).(LocationFSxOpenZfsNfsPtrOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxOpenZfsTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationFSxOpenZfsTagInput is an input type that accepts LocationFSxOpenZfsTagArgs and LocationFSxOpenZfsTagOutput values.
// You can construct a concrete instance of `LocationFSxOpenZfsTagInput` via:
//
//	LocationFSxOpenZfsTagArgs{...}
type LocationFSxOpenZfsTagInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsTagOutput() LocationFSxOpenZfsTagOutput
	ToLocationFSxOpenZfsTagOutputWithContext(context.Context) LocationFSxOpenZfsTagOutput
}

// A key-value pair to associate with a resource.
type LocationFSxOpenZfsTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationFSxOpenZfsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsTag)(nil)).Elem()
}

func (i LocationFSxOpenZfsTagArgs) ToLocationFSxOpenZfsTagOutput() LocationFSxOpenZfsTagOutput {
	return i.ToLocationFSxOpenZfsTagOutputWithContext(context.Background())
}

func (i LocationFSxOpenZfsTagArgs) ToLocationFSxOpenZfsTagOutputWithContext(ctx context.Context) LocationFSxOpenZfsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsTagOutput)
}

// LocationFSxOpenZfsTagArrayInput is an input type that accepts LocationFSxOpenZfsTagArray and LocationFSxOpenZfsTagArrayOutput values.
// You can construct a concrete instance of `LocationFSxOpenZfsTagArrayInput` via:
//
//	LocationFSxOpenZfsTagArray{ LocationFSxOpenZfsTagArgs{...} }
type LocationFSxOpenZfsTagArrayInput interface {
	pulumi.Input

	ToLocationFSxOpenZfsTagArrayOutput() LocationFSxOpenZfsTagArrayOutput
	ToLocationFSxOpenZfsTagArrayOutputWithContext(context.Context) LocationFSxOpenZfsTagArrayOutput
}

type LocationFSxOpenZfsTagArray []LocationFSxOpenZfsTagInput

func (LocationFSxOpenZfsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxOpenZfsTag)(nil)).Elem()
}

func (i LocationFSxOpenZfsTagArray) ToLocationFSxOpenZfsTagArrayOutput() LocationFSxOpenZfsTagArrayOutput {
	return i.ToLocationFSxOpenZfsTagArrayOutputWithContext(context.Background())
}

func (i LocationFSxOpenZfsTagArray) ToLocationFSxOpenZfsTagArrayOutputWithContext(ctx context.Context) LocationFSxOpenZfsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxOpenZfsTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxOpenZfsTagOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxOpenZfsTag)(nil)).Elem()
}

func (o LocationFSxOpenZfsTagOutput) ToLocationFSxOpenZfsTagOutput() LocationFSxOpenZfsTagOutput {
	return o
}

func (o LocationFSxOpenZfsTagOutput) ToLocationFSxOpenZfsTagOutputWithContext(ctx context.Context) LocationFSxOpenZfsTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationFSxOpenZfsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxOpenZfsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationFSxOpenZfsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxOpenZfsTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationFSxOpenZfsTagArrayOutput struct{ *pulumi.OutputState }

func (LocationFSxOpenZfsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxOpenZfsTag)(nil)).Elem()
}

func (o LocationFSxOpenZfsTagArrayOutput) ToLocationFSxOpenZfsTagArrayOutput() LocationFSxOpenZfsTagArrayOutput {
	return o
}

func (o LocationFSxOpenZfsTagArrayOutput) ToLocationFSxOpenZfsTagArrayOutputWithContext(ctx context.Context) LocationFSxOpenZfsTagArrayOutput {
	return o
}

func (o LocationFSxOpenZfsTagArrayOutput) Index(i pulumi.IntInput) LocationFSxOpenZfsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationFSxOpenZfsTag {
		return vs[0].([]LocationFSxOpenZfsTag)[vs[1].(int)]
	}).(LocationFSxOpenZfsTagOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxWindowsTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationFSxWindowsTagInput is an input type that accepts LocationFSxWindowsTagArgs and LocationFSxWindowsTagOutput values.
// You can construct a concrete instance of `LocationFSxWindowsTagInput` via:
//
//	LocationFSxWindowsTagArgs{...}
type LocationFSxWindowsTagInput interface {
	pulumi.Input

	ToLocationFSxWindowsTagOutput() LocationFSxWindowsTagOutput
	ToLocationFSxWindowsTagOutputWithContext(context.Context) LocationFSxWindowsTagOutput
}

// A key-value pair to associate with a resource.
type LocationFSxWindowsTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationFSxWindowsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxWindowsTag)(nil)).Elem()
}

func (i LocationFSxWindowsTagArgs) ToLocationFSxWindowsTagOutput() LocationFSxWindowsTagOutput {
	return i.ToLocationFSxWindowsTagOutputWithContext(context.Background())
}

func (i LocationFSxWindowsTagArgs) ToLocationFSxWindowsTagOutputWithContext(ctx context.Context) LocationFSxWindowsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxWindowsTagOutput)
}

// LocationFSxWindowsTagArrayInput is an input type that accepts LocationFSxWindowsTagArray and LocationFSxWindowsTagArrayOutput values.
// You can construct a concrete instance of `LocationFSxWindowsTagArrayInput` via:
//
//	LocationFSxWindowsTagArray{ LocationFSxWindowsTagArgs{...} }
type LocationFSxWindowsTagArrayInput interface {
	pulumi.Input

	ToLocationFSxWindowsTagArrayOutput() LocationFSxWindowsTagArrayOutput
	ToLocationFSxWindowsTagArrayOutputWithContext(context.Context) LocationFSxWindowsTagArrayOutput
}

type LocationFSxWindowsTagArray []LocationFSxWindowsTagInput

func (LocationFSxWindowsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxWindowsTag)(nil)).Elem()
}

func (i LocationFSxWindowsTagArray) ToLocationFSxWindowsTagArrayOutput() LocationFSxWindowsTagArrayOutput {
	return i.ToLocationFSxWindowsTagArrayOutputWithContext(context.Background())
}

func (i LocationFSxWindowsTagArray) ToLocationFSxWindowsTagArrayOutputWithContext(ctx context.Context) LocationFSxWindowsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxWindowsTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxWindowsTagOutput struct{ *pulumi.OutputState }

func (LocationFSxWindowsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxWindowsTag)(nil)).Elem()
}

func (o LocationFSxWindowsTagOutput) ToLocationFSxWindowsTagOutput() LocationFSxWindowsTagOutput {
	return o
}

func (o LocationFSxWindowsTagOutput) ToLocationFSxWindowsTagOutputWithContext(ctx context.Context) LocationFSxWindowsTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationFSxWindowsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxWindowsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationFSxWindowsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxWindowsTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationFSxWindowsTagArrayOutput struct{ *pulumi.OutputState }

func (LocationFSxWindowsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxWindowsTag)(nil)).Elem()
}

func (o LocationFSxWindowsTagArrayOutput) ToLocationFSxWindowsTagArrayOutput() LocationFSxWindowsTagArrayOutput {
	return o
}

func (o LocationFSxWindowsTagArrayOutput) ToLocationFSxWindowsTagArrayOutputWithContext(ctx context.Context) LocationFSxWindowsTagArrayOutput {
	return o
}

func (o LocationFSxWindowsTagArrayOutput) Index(i pulumi.IntInput) LocationFSxWindowsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationFSxWindowsTag {
		return vs[0].([]LocationFSxWindowsTag)[vs[1].(int)]
	}).(LocationFSxWindowsTagOutput)
}

// HDFS Name Node IP and port information.
type LocationHdfsNameNode struct {
	// The DNS name or IP address of the Name Node in the customer's on premises HDFS cluster.
	Hostname string `pulumi:"hostname"`
	// The port on which the Name Node is listening on for client requests.
	Port int `pulumi:"port"`
}

// LocationHdfsNameNodeInput is an input type that accepts LocationHdfsNameNodeArgs and LocationHdfsNameNodeOutput values.
// You can construct a concrete instance of `LocationHdfsNameNodeInput` via:
//
//	LocationHdfsNameNodeArgs{...}
type LocationHdfsNameNodeInput interface {
	pulumi.Input

	ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput
	ToLocationHdfsNameNodeOutputWithContext(context.Context) LocationHdfsNameNodeOutput
}

// HDFS Name Node IP and port information.
type LocationHdfsNameNodeArgs struct {
	// The DNS name or IP address of the Name Node in the customer's on premises HDFS cluster.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port on which the Name Node is listening on for client requests.
	Port pulumi.IntInput `pulumi:"port"`
}

func (LocationHdfsNameNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsNameNode)(nil)).Elem()
}

func (i LocationHdfsNameNodeArgs) ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput {
	return i.ToLocationHdfsNameNodeOutputWithContext(context.Background())
}

func (i LocationHdfsNameNodeArgs) ToLocationHdfsNameNodeOutputWithContext(ctx context.Context) LocationHdfsNameNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsNameNodeOutput)
}

// LocationHdfsNameNodeArrayInput is an input type that accepts LocationHdfsNameNodeArray and LocationHdfsNameNodeArrayOutput values.
// You can construct a concrete instance of `LocationHdfsNameNodeArrayInput` via:
//
//	LocationHdfsNameNodeArray{ LocationHdfsNameNodeArgs{...} }
type LocationHdfsNameNodeArrayInput interface {
	pulumi.Input

	ToLocationHdfsNameNodeArrayOutput() LocationHdfsNameNodeArrayOutput
	ToLocationHdfsNameNodeArrayOutputWithContext(context.Context) LocationHdfsNameNodeArrayOutput
}

type LocationHdfsNameNodeArray []LocationHdfsNameNodeInput

func (LocationHdfsNameNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationHdfsNameNode)(nil)).Elem()
}

func (i LocationHdfsNameNodeArray) ToLocationHdfsNameNodeArrayOutput() LocationHdfsNameNodeArrayOutput {
	return i.ToLocationHdfsNameNodeArrayOutputWithContext(context.Background())
}

func (i LocationHdfsNameNodeArray) ToLocationHdfsNameNodeArrayOutputWithContext(ctx context.Context) LocationHdfsNameNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsNameNodeArrayOutput)
}

// HDFS Name Node IP and port information.
type LocationHdfsNameNodeOutput struct{ *pulumi.OutputState }

func (LocationHdfsNameNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsNameNode)(nil)).Elem()
}

func (o LocationHdfsNameNodeOutput) ToLocationHdfsNameNodeOutput() LocationHdfsNameNodeOutput {
	return o
}

func (o LocationHdfsNameNodeOutput) ToLocationHdfsNameNodeOutputWithContext(ctx context.Context) LocationHdfsNameNodeOutput {
	return o
}

// The DNS name or IP address of the Name Node in the customer's on premises HDFS cluster.
func (o LocationHdfsNameNodeOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LocationHdfsNameNode) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port on which the Name Node is listening on for client requests.
func (o LocationHdfsNameNodeOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LocationHdfsNameNode) int { return v.Port }).(pulumi.IntOutput)
}

type LocationHdfsNameNodeArrayOutput struct{ *pulumi.OutputState }

func (LocationHdfsNameNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationHdfsNameNode)(nil)).Elem()
}

func (o LocationHdfsNameNodeArrayOutput) ToLocationHdfsNameNodeArrayOutput() LocationHdfsNameNodeArrayOutput {
	return o
}

func (o LocationHdfsNameNodeArrayOutput) ToLocationHdfsNameNodeArrayOutputWithContext(ctx context.Context) LocationHdfsNameNodeArrayOutput {
	return o
}

func (o LocationHdfsNameNodeArrayOutput) Index(i pulumi.IntInput) LocationHdfsNameNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationHdfsNameNode {
		return vs[0].([]LocationHdfsNameNode)[vs[1].(int)]
	}).(LocationHdfsNameNodeOutput)
}

// Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
type LocationHdfsQopConfiguration struct {
	// Configuration for Data Transfer Protection.
	DataTransferProtection *LocationHdfsQopConfigurationDataTransferProtection `pulumi:"dataTransferProtection"`
	// Configuration for RPC Protection.
	RpcProtection *LocationHdfsQopConfigurationRpcProtection `pulumi:"rpcProtection"`
}

// LocationHdfsQopConfigurationInput is an input type that accepts LocationHdfsQopConfigurationArgs and LocationHdfsQopConfigurationOutput values.
// You can construct a concrete instance of `LocationHdfsQopConfigurationInput` via:
//
//	LocationHdfsQopConfigurationArgs{...}
type LocationHdfsQopConfigurationInput interface {
	pulumi.Input

	ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput
	ToLocationHdfsQopConfigurationOutputWithContext(context.Context) LocationHdfsQopConfigurationOutput
}

// Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
type LocationHdfsQopConfigurationArgs struct {
	// Configuration for Data Transfer Protection.
	DataTransferProtection LocationHdfsQopConfigurationDataTransferProtectionPtrInput `pulumi:"dataTransferProtection"`
	// Configuration for RPC Protection.
	RpcProtection LocationHdfsQopConfigurationRpcProtectionPtrInput `pulumi:"rpcProtection"`
}

func (LocationHdfsQopConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsQopConfiguration)(nil)).Elem()
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput {
	return i.ToLocationHdfsQopConfigurationOutputWithContext(context.Background())
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsQopConfigurationOutput)
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return i.ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Background())
}

func (i LocationHdfsQopConfigurationArgs) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsQopConfigurationOutput).ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx)
}

// LocationHdfsQopConfigurationPtrInput is an input type that accepts LocationHdfsQopConfigurationArgs, LocationHdfsQopConfigurationPtr and LocationHdfsQopConfigurationPtrOutput values.
// You can construct a concrete instance of `LocationHdfsQopConfigurationPtrInput` via:
//
//	        LocationHdfsQopConfigurationArgs{...}
//
//	or:
//
//	        nil
type LocationHdfsQopConfigurationPtrInput interface {
	pulumi.Input

	ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput
	ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Context) LocationHdfsQopConfigurationPtrOutput
}

type locationHdfsQopConfigurationPtrType LocationHdfsQopConfigurationArgs

func LocationHdfsQopConfigurationPtr(v *LocationHdfsQopConfigurationArgs) LocationHdfsQopConfigurationPtrInput {
	return (*locationHdfsQopConfigurationPtrType)(v)
}

func (*locationHdfsQopConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationHdfsQopConfiguration)(nil)).Elem()
}

func (i *locationHdfsQopConfigurationPtrType) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return i.ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Background())
}

func (i *locationHdfsQopConfigurationPtrType) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsQopConfigurationPtrOutput)
}

// Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
type LocationHdfsQopConfigurationOutput struct{ *pulumi.OutputState }

func (LocationHdfsQopConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsQopConfiguration)(nil)).Elem()
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationOutput() LocationHdfsQopConfigurationOutput {
	return o
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationOutput {
	return o
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return o.ToLocationHdfsQopConfigurationPtrOutputWithContext(context.Background())
}

func (o LocationHdfsQopConfigurationOutput) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationHdfsQopConfiguration) *LocationHdfsQopConfiguration {
		return &v
	}).(LocationHdfsQopConfigurationPtrOutput)
}

// Configuration for Data Transfer Protection.
func (o LocationHdfsQopConfigurationOutput) DataTransferProtection() LocationHdfsQopConfigurationDataTransferProtectionPtrOutput {
	return o.ApplyT(func(v LocationHdfsQopConfiguration) *LocationHdfsQopConfigurationDataTransferProtection {
		return v.DataTransferProtection
	}).(LocationHdfsQopConfigurationDataTransferProtectionPtrOutput)
}

// Configuration for RPC Protection.
func (o LocationHdfsQopConfigurationOutput) RpcProtection() LocationHdfsQopConfigurationRpcProtectionPtrOutput {
	return o.ApplyT(func(v LocationHdfsQopConfiguration) *LocationHdfsQopConfigurationRpcProtection {
		return v.RpcProtection
	}).(LocationHdfsQopConfigurationRpcProtectionPtrOutput)
}

type LocationHdfsQopConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LocationHdfsQopConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationHdfsQopConfiguration)(nil)).Elem()
}

func (o LocationHdfsQopConfigurationPtrOutput) ToLocationHdfsQopConfigurationPtrOutput() LocationHdfsQopConfigurationPtrOutput {
	return o
}

func (o LocationHdfsQopConfigurationPtrOutput) ToLocationHdfsQopConfigurationPtrOutputWithContext(ctx context.Context) LocationHdfsQopConfigurationPtrOutput {
	return o
}

func (o LocationHdfsQopConfigurationPtrOutput) Elem() LocationHdfsQopConfigurationOutput {
	return o.ApplyT(func(v *LocationHdfsQopConfiguration) LocationHdfsQopConfiguration {
		if v != nil {
			return *v
		}
		var ret LocationHdfsQopConfiguration
		return ret
	}).(LocationHdfsQopConfigurationOutput)
}

// Configuration for Data Transfer Protection.
func (o LocationHdfsQopConfigurationPtrOutput) DataTransferProtection() LocationHdfsQopConfigurationDataTransferProtectionPtrOutput {
	return o.ApplyT(func(v *LocationHdfsQopConfiguration) *LocationHdfsQopConfigurationDataTransferProtection {
		if v == nil {
			return nil
		}
		return v.DataTransferProtection
	}).(LocationHdfsQopConfigurationDataTransferProtectionPtrOutput)
}

// Configuration for RPC Protection.
func (o LocationHdfsQopConfigurationPtrOutput) RpcProtection() LocationHdfsQopConfigurationRpcProtectionPtrOutput {
	return o.ApplyT(func(v *LocationHdfsQopConfiguration) *LocationHdfsQopConfigurationRpcProtection {
		if v == nil {
			return nil
		}
		return v.RpcProtection
	}).(LocationHdfsQopConfigurationRpcProtectionPtrOutput)
}

// A key-value pair to associate with a resource.
type LocationHdfsTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// LocationHdfsTagInput is an input type that accepts LocationHdfsTagArgs and LocationHdfsTagOutput values.
// You can construct a concrete instance of `LocationHdfsTagInput` via:
//
//	LocationHdfsTagArgs{...}
type LocationHdfsTagInput interface {
	pulumi.Input

	ToLocationHdfsTagOutput() LocationHdfsTagOutput
	ToLocationHdfsTagOutputWithContext(context.Context) LocationHdfsTagOutput
}

// A key-value pair to associate with a resource.
type LocationHdfsTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationHdfsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsTag)(nil)).Elem()
}

func (i LocationHdfsTagArgs) ToLocationHdfsTagOutput() LocationHdfsTagOutput {
	return i.ToLocationHdfsTagOutputWithContext(context.Background())
}

func (i LocationHdfsTagArgs) ToLocationHdfsTagOutputWithContext(ctx context.Context) LocationHdfsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsTagOutput)
}

// LocationHdfsTagArrayInput is an input type that accepts LocationHdfsTagArray and LocationHdfsTagArrayOutput values.
// You can construct a concrete instance of `LocationHdfsTagArrayInput` via:
//
//	LocationHdfsTagArray{ LocationHdfsTagArgs{...} }
type LocationHdfsTagArrayInput interface {
	pulumi.Input

	ToLocationHdfsTagArrayOutput() LocationHdfsTagArrayOutput
	ToLocationHdfsTagArrayOutputWithContext(context.Context) LocationHdfsTagArrayOutput
}

type LocationHdfsTagArray []LocationHdfsTagInput

func (LocationHdfsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationHdfsTag)(nil)).Elem()
}

func (i LocationHdfsTagArray) ToLocationHdfsTagArrayOutput() LocationHdfsTagArrayOutput {
	return i.ToLocationHdfsTagArrayOutputWithContext(context.Background())
}

func (i LocationHdfsTagArray) ToLocationHdfsTagArrayOutputWithContext(ctx context.Context) LocationHdfsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationHdfsTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationHdfsTagOutput struct{ *pulumi.OutputState }

func (LocationHdfsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationHdfsTag)(nil)).Elem()
}

func (o LocationHdfsTagOutput) ToLocationHdfsTagOutput() LocationHdfsTagOutput {
	return o
}

func (o LocationHdfsTagOutput) ToLocationHdfsTagOutputWithContext(ctx context.Context) LocationHdfsTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o LocationHdfsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationHdfsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o LocationHdfsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationHdfsTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationHdfsTagArrayOutput struct{ *pulumi.OutputState }

func (LocationHdfsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationHdfsTag)(nil)).Elem()
}

func (o LocationHdfsTagArrayOutput) ToLocationHdfsTagArrayOutput() LocationHdfsTagArrayOutput {
	return o
}

func (o LocationHdfsTagArrayOutput) ToLocationHdfsTagArrayOutputWithContext(ctx context.Context) LocationHdfsTagArrayOutput {
	return o
}

func (o LocationHdfsTagArrayOutput) Index(i pulumi.IntInput) LocationHdfsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationHdfsTag {
		return vs[0].([]LocationHdfsTag)[vs[1].(int)]
	}).(LocationHdfsTagOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationNfsMountOptions struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version *LocationNfsMountOptionsVersion `pulumi:"version"`
}

// LocationNfsMountOptionsInput is an input type that accepts LocationNfsMountOptionsArgs and LocationNfsMountOptionsOutput values.
// You can construct a concrete instance of `LocationNfsMountOptionsInput` via:
//
//	LocationNfsMountOptionsArgs{...}
type LocationNfsMountOptionsInput interface {
	pulumi.Input

	ToLocationNfsMountOptionsOutput() LocationNfsMountOptionsOutput
	ToLocationNfsMountOptionsOutputWithContext(context.Context) LocationNfsMountOptionsOutput
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationNfsMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version LocationNfsMountOptionsVersionPtrInput `pulumi:"version"`
}

func (LocationNfsMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNfsMountOptions)(nil)).Elem()
}

func (i LocationNfsMountOptionsArgs) ToLocationNfsMountOptionsOutput() LocationNfsMountOptionsOutput {
	return i.ToLocationNfsMountOptionsOutputWithContext(context.Background())
}

func (i LocationNfsMountOptionsArgs) ToLocationNfsMountOptionsOutputWithContext(ctx context.Context) LocationNfsMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNfsMountOptionsOutput)
}

func (i LocationNfsMountOptionsArgs) ToLocationNfsMountOptionsPtrOutput() LocationNfsMountOptionsPtrOutput {
	return i.ToLocationNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationNfsMountOptionsArgs) ToLocationNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationNfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNfsMountOptionsOutput).ToLocationNfsMountOptionsPtrOutputWithContext(ctx)
}

// LocationNfsMountOptionsPtrInput is an input type that accepts LocationNfsMountOptionsArgs, LocationNfsMountOptionsPtr and LocationNfsMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationNfsMountOptionsPtrInput` via:
//
//	        LocationNfsMountOptionsArgs{...}
//
//	or:
//
//	        nil
type LocationNfsMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationNfsMountOptionsPtrOutput() LocationNfsMountOptionsPtrOutput
	ToLocationNfsMountOptionsPtrOutputWithContext(context.Context) LocationNfsMountOptionsPtrOutput
}

type locationNfsMountOptionsPtrType LocationNfsMountOptionsArgs

func LocationNfsMountOptionsPtr(v *LocationNfsMountOptionsArgs) LocationNfsMountOptionsPtrInput {
	return (*locationNfsMountOptionsPtrType)(v)
}

func (*locationNfsMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNfsMountOptions)(nil)).Elem()
}

func (i *locationNfsMountOptionsPtrType) ToLocationNfsMountOptionsPtrOutput() LocationNfsMountOptionsPtrOutput {
	return i.ToLocationNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationNfsMountOptionsPtrType) ToLocationNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationNfsMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNfsMountOptionsPtrOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationNfsMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationNfsMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNfsMountOptions)(nil)).Elem()
}

func (o LocationNfsMountOptionsOutput) ToLocationNfsMountOptionsOutput() LocationNfsMountOptionsOutput {
	return o
}

func (o LocationNfsMountOptionsOutput) ToLocationNfsMountOptionsOutputWithContext(ctx context.Context) LocationNfsMountOptionsOutput {
	return o
}

func (o LocationNfsMountOptionsOutput) ToLocationNfsMountOptionsPtrOutput() LocationNfsMountOptionsPtrOutput {
	return o.ToLocationNfsMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationNfsMountOptionsOutput) ToLocationNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationNfsMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationNfsMountOptions) *LocationNfsMountOptions {
		return &v
	}).(LocationNfsMountOptionsPtrOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationNfsMountOptionsOutput) Version() LocationNfsMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v LocationNfsMountOptions) *LocationNfsMountOptionsVersion { return v.Version }).(LocationNfsMountOptionsVersionPtrOutput)
}

type LocationNfsMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationNfsMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNfsMountOptions)(nil)).Elem()
}

func (o LocationNfsMountOptionsPtrOutput) ToLocationNfsMountOptionsPtrOutput() LocationNfsMountOptionsPtrOutput {
	return o
}

func (o LocationNfsMountOptionsPtrOutput) ToLocationNfsMountOptionsPtrOutputWithContext(ctx context.Context) LocationNfsMountOptionsPtrOutput {
	return o
}

func (o LocationNfsMountOptionsPtrOutput) Elem() LocationNfsMountOptionsOutput {
	return o.ApplyT(func(v *LocationNfsMountOptions) LocationNfsMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationNfsMountOptions
		return ret
	}).(LocationNfsMountOptionsOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationNfsMountOptionsPtrOutput) Version() LocationNfsMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v *LocationNfsMountOptions) *LocationNfsMountOptionsVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(LocationNfsMountOptionsVersionPtrOutput)
}

// Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
type LocationNfsOnPremConfig struct {
	// ARN(s) of the agent(s) to use for an NFS location.
	AgentArns []string `pulumi:"agentArns"`
}

// LocationNfsOnPremConfigInput is an input type that accepts LocationNfsOnPremConfigArgs and LocationNfsOnPremConfigOutput values.
// You can construct a concrete instance of `LocationNfsOnPremConfigInput` via:
//
//	LocationNfsOnPremConfigArgs{...}
type LocationNfsOnPremConfigInput interface {
	pulumi.Input

	ToLocationNfsOnPremConfigOutput() LocationNfsOnPremConfigOutput
	ToLocationNfsOnPremConfigOutputWithContext(context.Context) LocationNfsOnPremConfigOutput
}

// Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
type LocationNfsOnPremConfigArgs struct {
	// ARN(s) of the agent(s) to use for an NFS location.
	AgentArns pulumi.StringArrayInput `pulumi:"agentArns"`
}

func (LocationNfsOnPremConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNfsOnPremConfig)(nil)).Elem()
}

func (i LocationNfsOnPremConfigArgs) ToLocationNfsOnPremConfigOutput() LocationNfsOnPremConfigOutput {
	return i.ToLocationNfsOnPremConfigOutputWithContext(context.Background())
}

func (i LocationNfsOnPremConfigArgs) ToLocationNfsOnPremConfigOutputWithContext(ctx context.Context) LocationNfsOnPremConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNfsOnPremConfigOutput)
}

// Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
type LocationNfsOnPremConfigOutput struct{ *pulumi.OutputState }

func (LocationNfsOnPremConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNfsOnPremConfig)(nil)).Elem()
}

func (o LocationNfsOnPremConfigOutput) ToLocationNfsOnPremConfigOutput() LocationNfsOnPremConfigOutput {
	return o
}

func (o LocationNfsOnPremConfigOutput) ToLocationNfsOnPremConfigOutputWithContext(ctx context.Context) LocationNfsOnPremConfigOutput {
	return o
}

// ARN(s) of the agent(s) to use for an NFS location.
func (o LocationNfsOnPremConfigOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LocationNfsOnPremConfig) []string { return v.AgentArns }).(pulumi.StringArrayOutput)
}

type LocationNfsOnPremConfigPtrOutput struct{ *pulumi.OutputState }

func (LocationNfsOnPremConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNfsOnPremConfig)(nil)).Elem()
}

func (o LocationNfsOnPremConfigPtrOutput) ToLocationNfsOnPremConfigPtrOutput() LocationNfsOnPremConfigPtrOutput {
	return o
}

func (o LocationNfsOnPremConfigPtrOutput) ToLocationNfsOnPremConfigPtrOutputWithContext(ctx context.Context) LocationNfsOnPremConfigPtrOutput {
	return o
}

func (o LocationNfsOnPremConfigPtrOutput) Elem() LocationNfsOnPremConfigOutput {
	return o.ApplyT(func(v *LocationNfsOnPremConfig) LocationNfsOnPremConfig {
		if v != nil {
			return *v
		}
		var ret LocationNfsOnPremConfig
		return ret
	}).(LocationNfsOnPremConfigOutput)
}

// ARN(s) of the agent(s) to use for an NFS location.
func (o LocationNfsOnPremConfigPtrOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationNfsOnPremConfig) []string {
		if v == nil {
			return nil
		}
		return v.AgentArns
	}).(pulumi.StringArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationNfsTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationNfsTagInput is an input type that accepts LocationNfsTagArgs and LocationNfsTagOutput values.
// You can construct a concrete instance of `LocationNfsTagInput` via:
//
//	LocationNfsTagArgs{...}
type LocationNfsTagInput interface {
	pulumi.Input

	ToLocationNfsTagOutput() LocationNfsTagOutput
	ToLocationNfsTagOutputWithContext(context.Context) LocationNfsTagOutput
}

// A key-value pair to associate with a resource.
type LocationNfsTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationNfsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNfsTag)(nil)).Elem()
}

func (i LocationNfsTagArgs) ToLocationNfsTagOutput() LocationNfsTagOutput {
	return i.ToLocationNfsTagOutputWithContext(context.Background())
}

func (i LocationNfsTagArgs) ToLocationNfsTagOutputWithContext(ctx context.Context) LocationNfsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNfsTagOutput)
}

// LocationNfsTagArrayInput is an input type that accepts LocationNfsTagArray and LocationNfsTagArrayOutput values.
// You can construct a concrete instance of `LocationNfsTagArrayInput` via:
//
//	LocationNfsTagArray{ LocationNfsTagArgs{...} }
type LocationNfsTagArrayInput interface {
	pulumi.Input

	ToLocationNfsTagArrayOutput() LocationNfsTagArrayOutput
	ToLocationNfsTagArrayOutputWithContext(context.Context) LocationNfsTagArrayOutput
}

type LocationNfsTagArray []LocationNfsTagInput

func (LocationNfsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationNfsTag)(nil)).Elem()
}

func (i LocationNfsTagArray) ToLocationNfsTagArrayOutput() LocationNfsTagArrayOutput {
	return i.ToLocationNfsTagArrayOutputWithContext(context.Background())
}

func (i LocationNfsTagArray) ToLocationNfsTagArrayOutputWithContext(ctx context.Context) LocationNfsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNfsTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationNfsTagOutput struct{ *pulumi.OutputState }

func (LocationNfsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNfsTag)(nil)).Elem()
}

func (o LocationNfsTagOutput) ToLocationNfsTagOutput() LocationNfsTagOutput {
	return o
}

func (o LocationNfsTagOutput) ToLocationNfsTagOutputWithContext(ctx context.Context) LocationNfsTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationNfsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationNfsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationNfsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationNfsTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationNfsTagArrayOutput struct{ *pulumi.OutputState }

func (LocationNfsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationNfsTag)(nil)).Elem()
}

func (o LocationNfsTagArrayOutput) ToLocationNfsTagArrayOutput() LocationNfsTagArrayOutput {
	return o
}

func (o LocationNfsTagArrayOutput) ToLocationNfsTagArrayOutputWithContext(ctx context.Context) LocationNfsTagArrayOutput {
	return o
}

func (o LocationNfsTagArrayOutput) Index(i pulumi.IntInput) LocationNfsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationNfsTag {
		return vs[0].([]LocationNfsTag)[vs[1].(int)]
	}).(LocationNfsTagOutput)
}

// A key-value pair to associate with a resource.
type LocationObjectStorageTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationObjectStorageTagInput is an input type that accepts LocationObjectStorageTagArgs and LocationObjectStorageTagOutput values.
// You can construct a concrete instance of `LocationObjectStorageTagInput` via:
//
//	LocationObjectStorageTagArgs{...}
type LocationObjectStorageTagInput interface {
	pulumi.Input

	ToLocationObjectStorageTagOutput() LocationObjectStorageTagOutput
	ToLocationObjectStorageTagOutputWithContext(context.Context) LocationObjectStorageTagOutput
}

// A key-value pair to associate with a resource.
type LocationObjectStorageTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationObjectStorageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationObjectStorageTag)(nil)).Elem()
}

func (i LocationObjectStorageTagArgs) ToLocationObjectStorageTagOutput() LocationObjectStorageTagOutput {
	return i.ToLocationObjectStorageTagOutputWithContext(context.Background())
}

func (i LocationObjectStorageTagArgs) ToLocationObjectStorageTagOutputWithContext(ctx context.Context) LocationObjectStorageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationObjectStorageTagOutput)
}

// LocationObjectStorageTagArrayInput is an input type that accepts LocationObjectStorageTagArray and LocationObjectStorageTagArrayOutput values.
// You can construct a concrete instance of `LocationObjectStorageTagArrayInput` via:
//
//	LocationObjectStorageTagArray{ LocationObjectStorageTagArgs{...} }
type LocationObjectStorageTagArrayInput interface {
	pulumi.Input

	ToLocationObjectStorageTagArrayOutput() LocationObjectStorageTagArrayOutput
	ToLocationObjectStorageTagArrayOutputWithContext(context.Context) LocationObjectStorageTagArrayOutput
}

type LocationObjectStorageTagArray []LocationObjectStorageTagInput

func (LocationObjectStorageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationObjectStorageTag)(nil)).Elem()
}

func (i LocationObjectStorageTagArray) ToLocationObjectStorageTagArrayOutput() LocationObjectStorageTagArrayOutput {
	return i.ToLocationObjectStorageTagArrayOutputWithContext(context.Background())
}

func (i LocationObjectStorageTagArray) ToLocationObjectStorageTagArrayOutputWithContext(ctx context.Context) LocationObjectStorageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationObjectStorageTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationObjectStorageTagOutput struct{ *pulumi.OutputState }

func (LocationObjectStorageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationObjectStorageTag)(nil)).Elem()
}

func (o LocationObjectStorageTagOutput) ToLocationObjectStorageTagOutput() LocationObjectStorageTagOutput {
	return o
}

func (o LocationObjectStorageTagOutput) ToLocationObjectStorageTagOutputWithContext(ctx context.Context) LocationObjectStorageTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationObjectStorageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationObjectStorageTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationObjectStorageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationObjectStorageTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationObjectStorageTagArrayOutput struct{ *pulumi.OutputState }

func (LocationObjectStorageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationObjectStorageTag)(nil)).Elem()
}

func (o LocationObjectStorageTagArrayOutput) ToLocationObjectStorageTagArrayOutput() LocationObjectStorageTagArrayOutput {
	return o
}

func (o LocationObjectStorageTagArrayOutput) ToLocationObjectStorageTagArrayOutputWithContext(ctx context.Context) LocationObjectStorageTagArrayOutput {
	return o
}

func (o LocationObjectStorageTagArrayOutput) Index(i pulumi.IntInput) LocationObjectStorageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationObjectStorageTag {
		return vs[0].([]LocationObjectStorageTag)[vs[1].(int)]
	}).(LocationObjectStorageTagOutput)
}

// A key-value pair to associate with a resource.
type LocationS3Tag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationS3TagInput is an input type that accepts LocationS3TagArgs and LocationS3TagOutput values.
// You can construct a concrete instance of `LocationS3TagInput` via:
//
//	LocationS3TagArgs{...}
type LocationS3TagInput interface {
	pulumi.Input

	ToLocationS3TagOutput() LocationS3TagOutput
	ToLocationS3TagOutputWithContext(context.Context) LocationS3TagOutput
}

// A key-value pair to associate with a resource.
type LocationS3TagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationS3TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3Tag)(nil)).Elem()
}

func (i LocationS3TagArgs) ToLocationS3TagOutput() LocationS3TagOutput {
	return i.ToLocationS3TagOutputWithContext(context.Background())
}

func (i LocationS3TagArgs) ToLocationS3TagOutputWithContext(ctx context.Context) LocationS3TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3TagOutput)
}

// LocationS3TagArrayInput is an input type that accepts LocationS3TagArray and LocationS3TagArrayOutput values.
// You can construct a concrete instance of `LocationS3TagArrayInput` via:
//
//	LocationS3TagArray{ LocationS3TagArgs{...} }
type LocationS3TagArrayInput interface {
	pulumi.Input

	ToLocationS3TagArrayOutput() LocationS3TagArrayOutput
	ToLocationS3TagArrayOutputWithContext(context.Context) LocationS3TagArrayOutput
}

type LocationS3TagArray []LocationS3TagInput

func (LocationS3TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationS3Tag)(nil)).Elem()
}

func (i LocationS3TagArray) ToLocationS3TagArrayOutput() LocationS3TagArrayOutput {
	return i.ToLocationS3TagArrayOutputWithContext(context.Background())
}

func (i LocationS3TagArray) ToLocationS3TagArrayOutputWithContext(ctx context.Context) LocationS3TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3TagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationS3TagOutput struct{ *pulumi.OutputState }

func (LocationS3TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3Tag)(nil)).Elem()
}

func (o LocationS3TagOutput) ToLocationS3TagOutput() LocationS3TagOutput {
	return o
}

func (o LocationS3TagOutput) ToLocationS3TagOutputWithContext(ctx context.Context) LocationS3TagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationS3TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationS3Tag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationS3TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationS3Tag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationS3TagArrayOutput struct{ *pulumi.OutputState }

func (LocationS3TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationS3Tag)(nil)).Elem()
}

func (o LocationS3TagArrayOutput) ToLocationS3TagArrayOutput() LocationS3TagArrayOutput {
	return o
}

func (o LocationS3TagArrayOutput) ToLocationS3TagArrayOutputWithContext(ctx context.Context) LocationS3TagArrayOutput {
	return o
}

func (o LocationS3TagArrayOutput) Index(i pulumi.IntInput) LocationS3TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationS3Tag {
		return vs[0].([]LocationS3Tag)[vs[1].(int)]
	}).(LocationS3TagOutput)
}

// The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
type LocationS3s3Config struct {
	// The ARN of the IAM role of the Amazon S3 bucket.
	BucketAccessRoleArn string `pulumi:"bucketAccessRoleArn"`
}

// LocationS3s3ConfigInput is an input type that accepts LocationS3s3ConfigArgs and LocationS3s3ConfigOutput values.
// You can construct a concrete instance of `LocationS3s3ConfigInput` via:
//
//	LocationS3s3ConfigArgs{...}
type LocationS3s3ConfigInput interface {
	pulumi.Input

	ToLocationS3s3ConfigOutput() LocationS3s3ConfigOutput
	ToLocationS3s3ConfigOutputWithContext(context.Context) LocationS3s3ConfigOutput
}

// The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
type LocationS3s3ConfigArgs struct {
	// The ARN of the IAM role of the Amazon S3 bucket.
	BucketAccessRoleArn pulumi.StringInput `pulumi:"bucketAccessRoleArn"`
}

func (LocationS3s3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3s3Config)(nil)).Elem()
}

func (i LocationS3s3ConfigArgs) ToLocationS3s3ConfigOutput() LocationS3s3ConfigOutput {
	return i.ToLocationS3s3ConfigOutputWithContext(context.Background())
}

func (i LocationS3s3ConfigArgs) ToLocationS3s3ConfigOutputWithContext(ctx context.Context) LocationS3s3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3s3ConfigOutput)
}

// The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
type LocationS3s3ConfigOutput struct{ *pulumi.OutputState }

func (LocationS3s3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3s3Config)(nil)).Elem()
}

func (o LocationS3s3ConfigOutput) ToLocationS3s3ConfigOutput() LocationS3s3ConfigOutput {
	return o
}

func (o LocationS3s3ConfigOutput) ToLocationS3s3ConfigOutputWithContext(ctx context.Context) LocationS3s3ConfigOutput {
	return o
}

// The ARN of the IAM role of the Amazon S3 bucket.
func (o LocationS3s3ConfigOutput) BucketAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LocationS3s3Config) string { return v.BucketAccessRoleArn }).(pulumi.StringOutput)
}

// The mount options used by DataSync to access the SMB server.
type LocationSmbMountOptions struct {
	// The specific SMB version that you want DataSync to use to mount your SMB share.
	Version *LocationSmbMountOptionsVersion `pulumi:"version"`
}

// LocationSmbMountOptionsInput is an input type that accepts LocationSmbMountOptionsArgs and LocationSmbMountOptionsOutput values.
// You can construct a concrete instance of `LocationSmbMountOptionsInput` via:
//
//	LocationSmbMountOptionsArgs{...}
type LocationSmbMountOptionsInput interface {
	pulumi.Input

	ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput
	ToLocationSmbMountOptionsOutputWithContext(context.Context) LocationSmbMountOptionsOutput
}

// The mount options used by DataSync to access the SMB server.
type LocationSmbMountOptionsArgs struct {
	// The specific SMB version that you want DataSync to use to mount your SMB share.
	Version LocationSmbMountOptionsVersionPtrInput `pulumi:"version"`
}

func (LocationSmbMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbMountOptions)(nil)).Elem()
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput {
	return i.ToLocationSmbMountOptionsOutputWithContext(context.Background())
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsOutputWithContext(ctx context.Context) LocationSmbMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMountOptionsOutput)
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return i.ToLocationSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationSmbMountOptionsArgs) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMountOptionsOutput).ToLocationSmbMountOptionsPtrOutputWithContext(ctx)
}

// LocationSmbMountOptionsPtrInput is an input type that accepts LocationSmbMountOptionsArgs, LocationSmbMountOptionsPtr and LocationSmbMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationSmbMountOptionsPtrInput` via:
//
//	        LocationSmbMountOptionsArgs{...}
//
//	or:
//
//	        nil
type LocationSmbMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput
	ToLocationSmbMountOptionsPtrOutputWithContext(context.Context) LocationSmbMountOptionsPtrOutput
}

type locationSmbMountOptionsPtrType LocationSmbMountOptionsArgs

func LocationSmbMountOptionsPtr(v *LocationSmbMountOptionsArgs) LocationSmbMountOptionsPtrInput {
	return (*locationSmbMountOptionsPtrType)(v)
}

func (*locationSmbMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSmbMountOptions)(nil)).Elem()
}

func (i *locationSmbMountOptionsPtrType) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return i.ToLocationSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationSmbMountOptionsPtrType) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbMountOptionsPtrOutput)
}

// The mount options used by DataSync to access the SMB server.
type LocationSmbMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationSmbMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbMountOptions)(nil)).Elem()
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsOutput() LocationSmbMountOptionsOutput {
	return o
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsOutputWithContext(ctx context.Context) LocationSmbMountOptionsOutput {
	return o
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return o.ToLocationSmbMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationSmbMountOptionsOutput) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationSmbMountOptions) *LocationSmbMountOptions {
		return &v
	}).(LocationSmbMountOptionsPtrOutput)
}

// The specific SMB version that you want DataSync to use to mount your SMB share.
func (o LocationSmbMountOptionsOutput) Version() LocationSmbMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v LocationSmbMountOptions) *LocationSmbMountOptionsVersion { return v.Version }).(LocationSmbMountOptionsVersionPtrOutput)
}

type LocationSmbMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationSmbMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSmbMountOptions)(nil)).Elem()
}

func (o LocationSmbMountOptionsPtrOutput) ToLocationSmbMountOptionsPtrOutput() LocationSmbMountOptionsPtrOutput {
	return o
}

func (o LocationSmbMountOptionsPtrOutput) ToLocationSmbMountOptionsPtrOutputWithContext(ctx context.Context) LocationSmbMountOptionsPtrOutput {
	return o
}

func (o LocationSmbMountOptionsPtrOutput) Elem() LocationSmbMountOptionsOutput {
	return o.ApplyT(func(v *LocationSmbMountOptions) LocationSmbMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationSmbMountOptions
		return ret
	}).(LocationSmbMountOptionsOutput)
}

// The specific SMB version that you want DataSync to use to mount your SMB share.
func (o LocationSmbMountOptionsPtrOutput) Version() LocationSmbMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v *LocationSmbMountOptions) *LocationSmbMountOptionsVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(LocationSmbMountOptionsVersionPtrOutput)
}

// A key-value pair to associate with a resource.
type LocationSmbTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationSmbTagInput is an input type that accepts LocationSmbTagArgs and LocationSmbTagOutput values.
// You can construct a concrete instance of `LocationSmbTagInput` via:
//
//	LocationSmbTagArgs{...}
type LocationSmbTagInput interface {
	pulumi.Input

	ToLocationSmbTagOutput() LocationSmbTagOutput
	ToLocationSmbTagOutputWithContext(context.Context) LocationSmbTagOutput
}

// A key-value pair to associate with a resource.
type LocationSmbTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationSmbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbTag)(nil)).Elem()
}

func (i LocationSmbTagArgs) ToLocationSmbTagOutput() LocationSmbTagOutput {
	return i.ToLocationSmbTagOutputWithContext(context.Background())
}

func (i LocationSmbTagArgs) ToLocationSmbTagOutputWithContext(ctx context.Context) LocationSmbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbTagOutput)
}

// LocationSmbTagArrayInput is an input type that accepts LocationSmbTagArray and LocationSmbTagArrayOutput values.
// You can construct a concrete instance of `LocationSmbTagArrayInput` via:
//
//	LocationSmbTagArray{ LocationSmbTagArgs{...} }
type LocationSmbTagArrayInput interface {
	pulumi.Input

	ToLocationSmbTagArrayOutput() LocationSmbTagArrayOutput
	ToLocationSmbTagArrayOutputWithContext(context.Context) LocationSmbTagArrayOutput
}

type LocationSmbTagArray []LocationSmbTagInput

func (LocationSmbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationSmbTag)(nil)).Elem()
}

func (i LocationSmbTagArray) ToLocationSmbTagArrayOutput() LocationSmbTagArrayOutput {
	return i.ToLocationSmbTagArrayOutputWithContext(context.Background())
}

func (i LocationSmbTagArray) ToLocationSmbTagArrayOutputWithContext(ctx context.Context) LocationSmbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSmbTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationSmbTagOutput struct{ *pulumi.OutputState }

func (LocationSmbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSmbTag)(nil)).Elem()
}

func (o LocationSmbTagOutput) ToLocationSmbTagOutput() LocationSmbTagOutput {
	return o
}

func (o LocationSmbTagOutput) ToLocationSmbTagOutputWithContext(ctx context.Context) LocationSmbTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationSmbTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationSmbTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationSmbTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationSmbTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationSmbTagArrayOutput struct{ *pulumi.OutputState }

func (LocationSmbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationSmbTag)(nil)).Elem()
}

func (o LocationSmbTagArrayOutput) ToLocationSmbTagArrayOutput() LocationSmbTagArrayOutput {
	return o
}

func (o LocationSmbTagArrayOutput) ToLocationSmbTagArrayOutputWithContext(ctx context.Context) LocationSmbTagArrayOutput {
	return o
}

func (o LocationSmbTagArrayOutput) Index(i pulumi.IntInput) LocationSmbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationSmbTag {
		return vs[0].([]LocationSmbTag)[vs[1].(int)]
	}).(LocationSmbTagOutput)
}

// The server name and network port required to connect with the management interface of the on-premises storage system.
type StorageSystemServerConfiguration struct {
	// The domain name or IP address of the storage system's management interface.
	ServerHostname string `pulumi:"serverHostname"`
	// The network port needed to access the system's management interface
	ServerPort *int `pulumi:"serverPort"`
}

// StorageSystemServerConfigurationInput is an input type that accepts StorageSystemServerConfigurationArgs and StorageSystemServerConfigurationOutput values.
// You can construct a concrete instance of `StorageSystemServerConfigurationInput` via:
//
//	StorageSystemServerConfigurationArgs{...}
type StorageSystemServerConfigurationInput interface {
	pulumi.Input

	ToStorageSystemServerConfigurationOutput() StorageSystemServerConfigurationOutput
	ToStorageSystemServerConfigurationOutputWithContext(context.Context) StorageSystemServerConfigurationOutput
}

// The server name and network port required to connect with the management interface of the on-premises storage system.
type StorageSystemServerConfigurationArgs struct {
	// The domain name or IP address of the storage system's management interface.
	ServerHostname pulumi.StringInput `pulumi:"serverHostname"`
	// The network port needed to access the system's management interface
	ServerPort pulumi.IntPtrInput `pulumi:"serverPort"`
}

func (StorageSystemServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSystemServerConfiguration)(nil)).Elem()
}

func (i StorageSystemServerConfigurationArgs) ToStorageSystemServerConfigurationOutput() StorageSystemServerConfigurationOutput {
	return i.ToStorageSystemServerConfigurationOutputWithContext(context.Background())
}

func (i StorageSystemServerConfigurationArgs) ToStorageSystemServerConfigurationOutputWithContext(ctx context.Context) StorageSystemServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSystemServerConfigurationOutput)
}

// The server name and network port required to connect with the management interface of the on-premises storage system.
type StorageSystemServerConfigurationOutput struct{ *pulumi.OutputState }

func (StorageSystemServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSystemServerConfiguration)(nil)).Elem()
}

func (o StorageSystemServerConfigurationOutput) ToStorageSystemServerConfigurationOutput() StorageSystemServerConfigurationOutput {
	return o
}

func (o StorageSystemServerConfigurationOutput) ToStorageSystemServerConfigurationOutputWithContext(ctx context.Context) StorageSystemServerConfigurationOutput {
	return o
}

// The domain name or IP address of the storage system's management interface.
func (o StorageSystemServerConfigurationOutput) ServerHostname() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSystemServerConfiguration) string { return v.ServerHostname }).(pulumi.StringOutput)
}

// The network port needed to access the system's management interface
func (o StorageSystemServerConfigurationOutput) ServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StorageSystemServerConfiguration) *int { return v.ServerPort }).(pulumi.IntPtrOutput)
}

type StorageSystemServerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StorageSystemServerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSystemServerConfiguration)(nil)).Elem()
}

func (o StorageSystemServerConfigurationPtrOutput) ToStorageSystemServerConfigurationPtrOutput() StorageSystemServerConfigurationPtrOutput {
	return o
}

func (o StorageSystemServerConfigurationPtrOutput) ToStorageSystemServerConfigurationPtrOutputWithContext(ctx context.Context) StorageSystemServerConfigurationPtrOutput {
	return o
}

func (o StorageSystemServerConfigurationPtrOutput) Elem() StorageSystemServerConfigurationOutput {
	return o.ApplyT(func(v *StorageSystemServerConfiguration) StorageSystemServerConfiguration {
		if v != nil {
			return *v
		}
		var ret StorageSystemServerConfiguration
		return ret
	}).(StorageSystemServerConfigurationOutput)
}

// The domain name or IP address of the storage system's management interface.
func (o StorageSystemServerConfigurationPtrOutput) ServerHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSystemServerConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ServerHostname
	}).(pulumi.StringPtrOutput)
}

// The network port needed to access the system's management interface
func (o StorageSystemServerConfigurationPtrOutput) ServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StorageSystemServerConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ServerPort
	}).(pulumi.IntPtrOutput)
}

// The username and password for accessing your on-premises storage system's management interface.
type StorageSystemServerCredentials struct {
	// The password for your storage system's management interface
	Password string `pulumi:"password"`
	// The username for your storage system's management interface.
	Username string `pulumi:"username"`
}

// StorageSystemServerCredentialsInput is an input type that accepts StorageSystemServerCredentialsArgs and StorageSystemServerCredentialsOutput values.
// You can construct a concrete instance of `StorageSystemServerCredentialsInput` via:
//
//	StorageSystemServerCredentialsArgs{...}
type StorageSystemServerCredentialsInput interface {
	pulumi.Input

	ToStorageSystemServerCredentialsOutput() StorageSystemServerCredentialsOutput
	ToStorageSystemServerCredentialsOutputWithContext(context.Context) StorageSystemServerCredentialsOutput
}

// The username and password for accessing your on-premises storage system's management interface.
type StorageSystemServerCredentialsArgs struct {
	// The password for your storage system's management interface
	Password pulumi.StringInput `pulumi:"password"`
	// The username for your storage system's management interface.
	Username pulumi.StringInput `pulumi:"username"`
}

func (StorageSystemServerCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSystemServerCredentials)(nil)).Elem()
}

func (i StorageSystemServerCredentialsArgs) ToStorageSystemServerCredentialsOutput() StorageSystemServerCredentialsOutput {
	return i.ToStorageSystemServerCredentialsOutputWithContext(context.Background())
}

func (i StorageSystemServerCredentialsArgs) ToStorageSystemServerCredentialsOutputWithContext(ctx context.Context) StorageSystemServerCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSystemServerCredentialsOutput)
}

func (i StorageSystemServerCredentialsArgs) ToStorageSystemServerCredentialsPtrOutput() StorageSystemServerCredentialsPtrOutput {
	return i.ToStorageSystemServerCredentialsPtrOutputWithContext(context.Background())
}

func (i StorageSystemServerCredentialsArgs) ToStorageSystemServerCredentialsPtrOutputWithContext(ctx context.Context) StorageSystemServerCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSystemServerCredentialsOutput).ToStorageSystemServerCredentialsPtrOutputWithContext(ctx)
}

// StorageSystemServerCredentialsPtrInput is an input type that accepts StorageSystemServerCredentialsArgs, StorageSystemServerCredentialsPtr and StorageSystemServerCredentialsPtrOutput values.
// You can construct a concrete instance of `StorageSystemServerCredentialsPtrInput` via:
//
//	        StorageSystemServerCredentialsArgs{...}
//
//	or:
//
//	        nil
type StorageSystemServerCredentialsPtrInput interface {
	pulumi.Input

	ToStorageSystemServerCredentialsPtrOutput() StorageSystemServerCredentialsPtrOutput
	ToStorageSystemServerCredentialsPtrOutputWithContext(context.Context) StorageSystemServerCredentialsPtrOutput
}

type storageSystemServerCredentialsPtrType StorageSystemServerCredentialsArgs

func StorageSystemServerCredentialsPtr(v *StorageSystemServerCredentialsArgs) StorageSystemServerCredentialsPtrInput {
	return (*storageSystemServerCredentialsPtrType)(v)
}

func (*storageSystemServerCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSystemServerCredentials)(nil)).Elem()
}

func (i *storageSystemServerCredentialsPtrType) ToStorageSystemServerCredentialsPtrOutput() StorageSystemServerCredentialsPtrOutput {
	return i.ToStorageSystemServerCredentialsPtrOutputWithContext(context.Background())
}

func (i *storageSystemServerCredentialsPtrType) ToStorageSystemServerCredentialsPtrOutputWithContext(ctx context.Context) StorageSystemServerCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSystemServerCredentialsPtrOutput)
}

// The username and password for accessing your on-premises storage system's management interface.
type StorageSystemServerCredentialsOutput struct{ *pulumi.OutputState }

func (StorageSystemServerCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSystemServerCredentials)(nil)).Elem()
}

func (o StorageSystemServerCredentialsOutput) ToStorageSystemServerCredentialsOutput() StorageSystemServerCredentialsOutput {
	return o
}

func (o StorageSystemServerCredentialsOutput) ToStorageSystemServerCredentialsOutputWithContext(ctx context.Context) StorageSystemServerCredentialsOutput {
	return o
}

func (o StorageSystemServerCredentialsOutput) ToStorageSystemServerCredentialsPtrOutput() StorageSystemServerCredentialsPtrOutput {
	return o.ToStorageSystemServerCredentialsPtrOutputWithContext(context.Background())
}

func (o StorageSystemServerCredentialsOutput) ToStorageSystemServerCredentialsPtrOutputWithContext(ctx context.Context) StorageSystemServerCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageSystemServerCredentials) *StorageSystemServerCredentials {
		return &v
	}).(StorageSystemServerCredentialsPtrOutput)
}

// The password for your storage system's management interface
func (o StorageSystemServerCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSystemServerCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// The username for your storage system's management interface.
func (o StorageSystemServerCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSystemServerCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type StorageSystemServerCredentialsPtrOutput struct{ *pulumi.OutputState }

func (StorageSystemServerCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSystemServerCredentials)(nil)).Elem()
}

func (o StorageSystemServerCredentialsPtrOutput) ToStorageSystemServerCredentialsPtrOutput() StorageSystemServerCredentialsPtrOutput {
	return o
}

func (o StorageSystemServerCredentialsPtrOutput) ToStorageSystemServerCredentialsPtrOutputWithContext(ctx context.Context) StorageSystemServerCredentialsPtrOutput {
	return o
}

func (o StorageSystemServerCredentialsPtrOutput) Elem() StorageSystemServerCredentialsOutput {
	return o.ApplyT(func(v *StorageSystemServerCredentials) StorageSystemServerCredentials {
		if v != nil {
			return *v
		}
		var ret StorageSystemServerCredentials
		return ret
	}).(StorageSystemServerCredentialsOutput)
}

// The password for your storage system's management interface
func (o StorageSystemServerCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSystemServerCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username for your storage system's management interface.
func (o StorageSystemServerCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSystemServerCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type StorageSystemTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// StorageSystemTagInput is an input type that accepts StorageSystemTagArgs and StorageSystemTagOutput values.
// You can construct a concrete instance of `StorageSystemTagInput` via:
//
//	StorageSystemTagArgs{...}
type StorageSystemTagInput interface {
	pulumi.Input

	ToStorageSystemTagOutput() StorageSystemTagOutput
	ToStorageSystemTagOutputWithContext(context.Context) StorageSystemTagOutput
}

// A key-value pair to associate with a resource.
type StorageSystemTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StorageSystemTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSystemTag)(nil)).Elem()
}

func (i StorageSystemTagArgs) ToStorageSystemTagOutput() StorageSystemTagOutput {
	return i.ToStorageSystemTagOutputWithContext(context.Background())
}

func (i StorageSystemTagArgs) ToStorageSystemTagOutputWithContext(ctx context.Context) StorageSystemTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSystemTagOutput)
}

// StorageSystemTagArrayInput is an input type that accepts StorageSystemTagArray and StorageSystemTagArrayOutput values.
// You can construct a concrete instance of `StorageSystemTagArrayInput` via:
//
//	StorageSystemTagArray{ StorageSystemTagArgs{...} }
type StorageSystemTagArrayInput interface {
	pulumi.Input

	ToStorageSystemTagArrayOutput() StorageSystemTagArrayOutput
	ToStorageSystemTagArrayOutputWithContext(context.Context) StorageSystemTagArrayOutput
}

type StorageSystemTagArray []StorageSystemTagInput

func (StorageSystemTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageSystemTag)(nil)).Elem()
}

func (i StorageSystemTagArray) ToStorageSystemTagArrayOutput() StorageSystemTagArrayOutput {
	return i.ToStorageSystemTagArrayOutputWithContext(context.Background())
}

func (i StorageSystemTagArray) ToStorageSystemTagArrayOutputWithContext(ctx context.Context) StorageSystemTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSystemTagArrayOutput)
}

// A key-value pair to associate with a resource.
type StorageSystemTagOutput struct{ *pulumi.OutputState }

func (StorageSystemTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSystemTag)(nil)).Elem()
}

func (o StorageSystemTagOutput) ToStorageSystemTagOutput() StorageSystemTagOutput {
	return o
}

func (o StorageSystemTagOutput) ToStorageSystemTagOutputWithContext(ctx context.Context) StorageSystemTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o StorageSystemTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSystemTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o StorageSystemTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSystemTag) string { return v.Value }).(pulumi.StringOutput)
}

type StorageSystemTagArrayOutput struct{ *pulumi.OutputState }

func (StorageSystemTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageSystemTag)(nil)).Elem()
}

func (o StorageSystemTagArrayOutput) ToStorageSystemTagArrayOutput() StorageSystemTagArrayOutput {
	return o
}

func (o StorageSystemTagArrayOutput) ToStorageSystemTagArrayOutputWithContext(ctx context.Context) StorageSystemTagArrayOutput {
	return o
}

func (o StorageSystemTagArrayOutput) Index(i pulumi.IntInput) StorageSystemTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageSystemTag {
		return vs[0].([]StorageSystemTag)[vs[1].(int)]
	}).(StorageSystemTagOutput)
}

// Specifies which files folders and objects to include or exclude when transferring files from source to destination.
type TaskFilterRule struct {
	// The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
	FilterType *TaskFilterRuleFilterType `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
	Value *string `pulumi:"value"`
}

// TaskFilterRuleInput is an input type that accepts TaskFilterRuleArgs and TaskFilterRuleOutput values.
// You can construct a concrete instance of `TaskFilterRuleInput` via:
//
//	TaskFilterRuleArgs{...}
type TaskFilterRuleInput interface {
	pulumi.Input

	ToTaskFilterRuleOutput() TaskFilterRuleOutput
	ToTaskFilterRuleOutputWithContext(context.Context) TaskFilterRuleOutput
}

// Specifies which files folders and objects to include or exclude when transferring files from source to destination.
type TaskFilterRuleArgs struct {
	// The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
	FilterType TaskFilterRuleFilterTypePtrInput `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskFilterRule)(nil)).Elem()
}

func (i TaskFilterRuleArgs) ToTaskFilterRuleOutput() TaskFilterRuleOutput {
	return i.ToTaskFilterRuleOutputWithContext(context.Background())
}

func (i TaskFilterRuleArgs) ToTaskFilterRuleOutputWithContext(ctx context.Context) TaskFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskFilterRuleOutput)
}

// TaskFilterRuleArrayInput is an input type that accepts TaskFilterRuleArray and TaskFilterRuleArrayOutput values.
// You can construct a concrete instance of `TaskFilterRuleArrayInput` via:
//
//	TaskFilterRuleArray{ TaskFilterRuleArgs{...} }
type TaskFilterRuleArrayInput interface {
	pulumi.Input

	ToTaskFilterRuleArrayOutput() TaskFilterRuleArrayOutput
	ToTaskFilterRuleArrayOutputWithContext(context.Context) TaskFilterRuleArrayOutput
}

type TaskFilterRuleArray []TaskFilterRuleInput

func (TaskFilterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskFilterRule)(nil)).Elem()
}

func (i TaskFilterRuleArray) ToTaskFilterRuleArrayOutput() TaskFilterRuleArrayOutput {
	return i.ToTaskFilterRuleArrayOutputWithContext(context.Background())
}

func (i TaskFilterRuleArray) ToTaskFilterRuleArrayOutputWithContext(ctx context.Context) TaskFilterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskFilterRuleArrayOutput)
}

// Specifies which files folders and objects to include or exclude when transferring files from source to destination.
type TaskFilterRuleOutput struct{ *pulumi.OutputState }

func (TaskFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskFilterRule)(nil)).Elem()
}

func (o TaskFilterRuleOutput) ToTaskFilterRuleOutput() TaskFilterRuleOutput {
	return o
}

func (o TaskFilterRuleOutput) ToTaskFilterRuleOutputWithContext(ctx context.Context) TaskFilterRuleOutput {
	return o
}

// The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
func (o TaskFilterRuleOutput) FilterType() TaskFilterRuleFilterTypePtrOutput {
	return o.ApplyT(func(v TaskFilterRule) *TaskFilterRuleFilterType { return v.FilterType }).(TaskFilterRuleFilterTypePtrOutput)
}

// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
func (o TaskFilterRuleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskFilterRule) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskFilterRuleArrayOutput struct{ *pulumi.OutputState }

func (TaskFilterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskFilterRule)(nil)).Elem()
}

func (o TaskFilterRuleArrayOutput) ToTaskFilterRuleArrayOutput() TaskFilterRuleArrayOutput {
	return o
}

func (o TaskFilterRuleArrayOutput) ToTaskFilterRuleArrayOutputWithContext(ctx context.Context) TaskFilterRuleArrayOutput {
	return o
}

func (o TaskFilterRuleArrayOutput) Index(i pulumi.IntInput) TaskFilterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskFilterRule {
		return vs[0].([]TaskFilterRule)[vs[1].(int)]
	}).(TaskFilterRuleOutput)
}

// Represents the options that are available to control the behavior of a StartTaskExecution operation.
type TaskOptions struct {
	// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
	Atime *TaskOptionsAtime `pulumi:"atime"`
	// A value that limits the bandwidth used by AWS DataSync.
	BytesPerSecond *int `pulumi:"bytesPerSecond"`
	// The group ID (GID) of the file's owners.
	Gid *TaskOptionsGid `pulumi:"gid"`
	// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
	LogLevel *TaskOptionsLogLevel `pulumi:"logLevel"`
	// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
	Mtime *TaskOptionsMtime `pulumi:"mtime"`
	// A value that determines whether object tags should be read from the source object store and written to the destination object store.
	ObjectTags *TaskOptionsObjectTags `pulumi:"objectTags"`
	// A value that determines whether files at the destination should be overwritten or preserved when copying files.
	OverwriteMode *TaskOptionsOverwriteMode `pulumi:"overwriteMode"`
	// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
	PosixPermissions *TaskOptionsPosixPermissions `pulumi:"posixPermissions"`
	// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
	PreserveDeletedFiles *TaskOptionsPreserveDeletedFiles `pulumi:"preserveDeletedFiles"`
	// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
	PreserveDevices *TaskOptionsPreserveDevices `pulumi:"preserveDevices"`
	// A value that determines which components of the SMB security descriptor are copied during transfer.
	SecurityDescriptorCopyFlags *TaskOptionsSecurityDescriptorCopyFlags `pulumi:"securityDescriptorCopyFlags"`
	// A value that determines whether tasks should be queued before executing the tasks.
	TaskQueueing *TaskOptionsTaskQueueing `pulumi:"taskQueueing"`
	// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
	TransferMode *TaskOptionsTransferMode `pulumi:"transferMode"`
	// The user ID (UID) of the file's owner.
	Uid *TaskOptionsUid `pulumi:"uid"`
	// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
	VerifyMode *TaskOptionsVerifyMode `pulumi:"verifyMode"`
}

// TaskOptionsInput is an input type that accepts TaskOptionsArgs and TaskOptionsOutput values.
// You can construct a concrete instance of `TaskOptionsInput` via:
//
//	TaskOptionsArgs{...}
type TaskOptionsInput interface {
	pulumi.Input

	ToTaskOptionsOutput() TaskOptionsOutput
	ToTaskOptionsOutputWithContext(context.Context) TaskOptionsOutput
}

// Represents the options that are available to control the behavior of a StartTaskExecution operation.
type TaskOptionsArgs struct {
	// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
	Atime TaskOptionsAtimePtrInput `pulumi:"atime"`
	// A value that limits the bandwidth used by AWS DataSync.
	BytesPerSecond pulumi.IntPtrInput `pulumi:"bytesPerSecond"`
	// The group ID (GID) of the file's owners.
	Gid TaskOptionsGidPtrInput `pulumi:"gid"`
	// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
	LogLevel TaskOptionsLogLevelPtrInput `pulumi:"logLevel"`
	// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
	Mtime TaskOptionsMtimePtrInput `pulumi:"mtime"`
	// A value that determines whether object tags should be read from the source object store and written to the destination object store.
	ObjectTags TaskOptionsObjectTagsPtrInput `pulumi:"objectTags"`
	// A value that determines whether files at the destination should be overwritten or preserved when copying files.
	OverwriteMode TaskOptionsOverwriteModePtrInput `pulumi:"overwriteMode"`
	// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
	PosixPermissions TaskOptionsPosixPermissionsPtrInput `pulumi:"posixPermissions"`
	// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
	PreserveDeletedFiles TaskOptionsPreserveDeletedFilesPtrInput `pulumi:"preserveDeletedFiles"`
	// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
	PreserveDevices TaskOptionsPreserveDevicesPtrInput `pulumi:"preserveDevices"`
	// A value that determines which components of the SMB security descriptor are copied during transfer.
	SecurityDescriptorCopyFlags TaskOptionsSecurityDescriptorCopyFlagsPtrInput `pulumi:"securityDescriptorCopyFlags"`
	// A value that determines whether tasks should be queued before executing the tasks.
	TaskQueueing TaskOptionsTaskQueueingPtrInput `pulumi:"taskQueueing"`
	// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
	TransferMode TaskOptionsTransferModePtrInput `pulumi:"transferMode"`
	// The user ID (UID) of the file's owner.
	Uid TaskOptionsUidPtrInput `pulumi:"uid"`
	// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
	VerifyMode TaskOptionsVerifyModePtrInput `pulumi:"verifyMode"`
}

func (TaskOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (i TaskOptionsArgs) ToTaskOptionsOutput() TaskOptionsOutput {
	return i.ToTaskOptionsOutputWithContext(context.Background())
}

func (i TaskOptionsArgs) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsOutput)
}

func (i TaskOptionsArgs) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return i.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (i TaskOptionsArgs) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsOutput).ToTaskOptionsPtrOutputWithContext(ctx)
}

// TaskOptionsPtrInput is an input type that accepts TaskOptionsArgs, TaskOptionsPtr and TaskOptionsPtrOutput values.
// You can construct a concrete instance of `TaskOptionsPtrInput` via:
//
//	        TaskOptionsArgs{...}
//
//	or:
//
//	        nil
type TaskOptionsPtrInput interface {
	pulumi.Input

	ToTaskOptionsPtrOutput() TaskOptionsPtrOutput
	ToTaskOptionsPtrOutputWithContext(context.Context) TaskOptionsPtrOutput
}

type taskOptionsPtrType TaskOptionsArgs

func TaskOptionsPtr(v *TaskOptionsArgs) TaskOptionsPtrInput {
	return (*taskOptionsPtrType)(v)
}

func (*taskOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskOptions)(nil)).Elem()
}

func (i *taskOptionsPtrType) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return i.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (i *taskOptionsPtrType) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsPtrOutput)
}

// Represents the options that are available to control the behavior of a StartTaskExecution operation.
type TaskOptionsOutput struct{ *pulumi.OutputState }

func (TaskOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (o TaskOptionsOutput) ToTaskOptionsOutput() TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return o.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (o TaskOptionsOutput) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskOptions) *TaskOptions {
		return &v
	}).(TaskOptionsPtrOutput)
}

// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
func (o TaskOptionsOutput) Atime() TaskOptionsAtimePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsAtime { return v.Atime }).(TaskOptionsAtimePtrOutput)
}

// A value that limits the bandwidth used by AWS DataSync.
func (o TaskOptionsOutput) BytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskOptions) *int { return v.BytesPerSecond }).(pulumi.IntPtrOutput)
}

// The group ID (GID) of the file's owners.
func (o TaskOptionsOutput) Gid() TaskOptionsGidPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsGid { return v.Gid }).(TaskOptionsGidPtrOutput)
}

// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
func (o TaskOptionsOutput) LogLevel() TaskOptionsLogLevelPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsLogLevel { return v.LogLevel }).(TaskOptionsLogLevelPtrOutput)
}

// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
func (o TaskOptionsOutput) Mtime() TaskOptionsMtimePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsMtime { return v.Mtime }).(TaskOptionsMtimePtrOutput)
}

// A value that determines whether object tags should be read from the source object store and written to the destination object store.
func (o TaskOptionsOutput) ObjectTags() TaskOptionsObjectTagsPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsObjectTags { return v.ObjectTags }).(TaskOptionsObjectTagsPtrOutput)
}

// A value that determines whether files at the destination should be overwritten or preserved when copying files.
func (o TaskOptionsOutput) OverwriteMode() TaskOptionsOverwriteModePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsOverwriteMode { return v.OverwriteMode }).(TaskOptionsOverwriteModePtrOutput)
}

// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
func (o TaskOptionsOutput) PosixPermissions() TaskOptionsPosixPermissionsPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsPosixPermissions { return v.PosixPermissions }).(TaskOptionsPosixPermissionsPtrOutput)
}

// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
func (o TaskOptionsOutput) PreserveDeletedFiles() TaskOptionsPreserveDeletedFilesPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsPreserveDeletedFiles { return v.PreserveDeletedFiles }).(TaskOptionsPreserveDeletedFilesPtrOutput)
}

// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
func (o TaskOptionsOutput) PreserveDevices() TaskOptionsPreserveDevicesPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsPreserveDevices { return v.PreserveDevices }).(TaskOptionsPreserveDevicesPtrOutput)
}

// A value that determines which components of the SMB security descriptor are copied during transfer.
func (o TaskOptionsOutput) SecurityDescriptorCopyFlags() TaskOptionsSecurityDescriptorCopyFlagsPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsSecurityDescriptorCopyFlags { return v.SecurityDescriptorCopyFlags }).(TaskOptionsSecurityDescriptorCopyFlagsPtrOutput)
}

// A value that determines whether tasks should be queued before executing the tasks.
func (o TaskOptionsOutput) TaskQueueing() TaskOptionsTaskQueueingPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsTaskQueueing { return v.TaskQueueing }).(TaskOptionsTaskQueueingPtrOutput)
}

// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
func (o TaskOptionsOutput) TransferMode() TaskOptionsTransferModePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsTransferMode { return v.TransferMode }).(TaskOptionsTransferModePtrOutput)
}

// The user ID (UID) of the file's owner.
func (o TaskOptionsOutput) Uid() TaskOptionsUidPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsUid { return v.Uid }).(TaskOptionsUidPtrOutput)
}

// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
func (o TaskOptionsOutput) VerifyMode() TaskOptionsVerifyModePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsVerifyMode { return v.VerifyMode }).(TaskOptionsVerifyModePtrOutput)
}

type TaskOptionsPtrOutput struct{ *pulumi.OutputState }

func (TaskOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskOptions)(nil)).Elem()
}

func (o TaskOptionsPtrOutput) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return o
}

func (o TaskOptionsPtrOutput) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return o
}

func (o TaskOptionsPtrOutput) Elem() TaskOptionsOutput {
	return o.ApplyT(func(v *TaskOptions) TaskOptions {
		if v != nil {
			return *v
		}
		var ret TaskOptions
		return ret
	}).(TaskOptionsOutput)
}

// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
func (o TaskOptionsPtrOutput) Atime() TaskOptionsAtimePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsAtime {
		if v == nil {
			return nil
		}
		return v.Atime
	}).(TaskOptionsAtimePtrOutput)
}

// A value that limits the bandwidth used by AWS DataSync.
func (o TaskOptionsPtrOutput) BytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *int {
		if v == nil {
			return nil
		}
		return v.BytesPerSecond
	}).(pulumi.IntPtrOutput)
}

// The group ID (GID) of the file's owners.
func (o TaskOptionsPtrOutput) Gid() TaskOptionsGidPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsGid {
		if v == nil {
			return nil
		}
		return v.Gid
	}).(TaskOptionsGidPtrOutput)
}

// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
func (o TaskOptionsPtrOutput) LogLevel() TaskOptionsLogLevelPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsLogLevel {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(TaskOptionsLogLevelPtrOutput)
}

// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
func (o TaskOptionsPtrOutput) Mtime() TaskOptionsMtimePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsMtime {
		if v == nil {
			return nil
		}
		return v.Mtime
	}).(TaskOptionsMtimePtrOutput)
}

// A value that determines whether object tags should be read from the source object store and written to the destination object store.
func (o TaskOptionsPtrOutput) ObjectTags() TaskOptionsObjectTagsPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsObjectTags {
		if v == nil {
			return nil
		}
		return v.ObjectTags
	}).(TaskOptionsObjectTagsPtrOutput)
}

// A value that determines whether files at the destination should be overwritten or preserved when copying files.
func (o TaskOptionsPtrOutput) OverwriteMode() TaskOptionsOverwriteModePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsOverwriteMode {
		if v == nil {
			return nil
		}
		return v.OverwriteMode
	}).(TaskOptionsOverwriteModePtrOutput)
}

// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
func (o TaskOptionsPtrOutput) PosixPermissions() TaskOptionsPosixPermissionsPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsPosixPermissions {
		if v == nil {
			return nil
		}
		return v.PosixPermissions
	}).(TaskOptionsPosixPermissionsPtrOutput)
}

// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
func (o TaskOptionsPtrOutput) PreserveDeletedFiles() TaskOptionsPreserveDeletedFilesPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsPreserveDeletedFiles {
		if v == nil {
			return nil
		}
		return v.PreserveDeletedFiles
	}).(TaskOptionsPreserveDeletedFilesPtrOutput)
}

// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
func (o TaskOptionsPtrOutput) PreserveDevices() TaskOptionsPreserveDevicesPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsPreserveDevices {
		if v == nil {
			return nil
		}
		return v.PreserveDevices
	}).(TaskOptionsPreserveDevicesPtrOutput)
}

// A value that determines which components of the SMB security descriptor are copied during transfer.
func (o TaskOptionsPtrOutput) SecurityDescriptorCopyFlags() TaskOptionsSecurityDescriptorCopyFlagsPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsSecurityDescriptorCopyFlags {
		if v == nil {
			return nil
		}
		return v.SecurityDescriptorCopyFlags
	}).(TaskOptionsSecurityDescriptorCopyFlagsPtrOutput)
}

// A value that determines whether tasks should be queued before executing the tasks.
func (o TaskOptionsPtrOutput) TaskQueueing() TaskOptionsTaskQueueingPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsTaskQueueing {
		if v == nil {
			return nil
		}
		return v.TaskQueueing
	}).(TaskOptionsTaskQueueingPtrOutput)
}

// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
func (o TaskOptionsPtrOutput) TransferMode() TaskOptionsTransferModePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsTransferMode {
		if v == nil {
			return nil
		}
		return v.TransferMode
	}).(TaskOptionsTransferModePtrOutput)
}

// The user ID (UID) of the file's owner.
func (o TaskOptionsPtrOutput) Uid() TaskOptionsUidPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsUid {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(TaskOptionsUidPtrOutput)
}

// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
func (o TaskOptionsPtrOutput) VerifyMode() TaskOptionsVerifyModePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsVerifyMode {
		if v == nil {
			return nil
		}
		return v.VerifyMode
	}).(TaskOptionsVerifyModePtrOutput)
}

// Specifies the schedule you want your task to use for repeated executions.
type TaskSchedule struct {
	// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
	ScheduleExpression string `pulumi:"scheduleExpression"`
}

// TaskScheduleInput is an input type that accepts TaskScheduleArgs and TaskScheduleOutput values.
// You can construct a concrete instance of `TaskScheduleInput` via:
//
//	TaskScheduleArgs{...}
type TaskScheduleInput interface {
	pulumi.Input

	ToTaskScheduleOutput() TaskScheduleOutput
	ToTaskScheduleOutputWithContext(context.Context) TaskScheduleOutput
}

// Specifies the schedule you want your task to use for repeated executions.
type TaskScheduleArgs struct {
	// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
	ScheduleExpression pulumi.StringInput `pulumi:"scheduleExpression"`
}

func (TaskScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (i TaskScheduleArgs) ToTaskScheduleOutput() TaskScheduleOutput {
	return i.ToTaskScheduleOutputWithContext(context.Background())
}

func (i TaskScheduleArgs) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskScheduleOutput)
}

func (i TaskScheduleArgs) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return i.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (i TaskScheduleArgs) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskScheduleOutput).ToTaskSchedulePtrOutputWithContext(ctx)
}

// TaskSchedulePtrInput is an input type that accepts TaskScheduleArgs, TaskSchedulePtr and TaskSchedulePtrOutput values.
// You can construct a concrete instance of `TaskSchedulePtrInput` via:
//
//	        TaskScheduleArgs{...}
//
//	or:
//
//	        nil
type TaskSchedulePtrInput interface {
	pulumi.Input

	ToTaskSchedulePtrOutput() TaskSchedulePtrOutput
	ToTaskSchedulePtrOutputWithContext(context.Context) TaskSchedulePtrOutput
}

type taskSchedulePtrType TaskScheduleArgs

func TaskSchedulePtr(v *TaskScheduleArgs) TaskSchedulePtrInput {
	return (*taskSchedulePtrType)(v)
}

func (*taskSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedule)(nil)).Elem()
}

func (i *taskSchedulePtrType) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return i.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (i *taskSchedulePtrType) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulePtrOutput)
}

// Specifies the schedule you want your task to use for repeated executions.
type TaskScheduleOutput struct{ *pulumi.OutputState }

func (TaskScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (o TaskScheduleOutput) ToTaskScheduleOutput() TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return o.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (o TaskScheduleOutput) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSchedule) *TaskSchedule {
		return &v
	}).(TaskSchedulePtrOutput)
}

// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
func (o TaskScheduleOutput) ScheduleExpression() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSchedule) string { return v.ScheduleExpression }).(pulumi.StringOutput)
}

type TaskSchedulePtrOutput struct{ *pulumi.OutputState }

func (TaskSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedule)(nil)).Elem()
}

func (o TaskSchedulePtrOutput) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return o
}

func (o TaskSchedulePtrOutput) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return o
}

func (o TaskSchedulePtrOutput) Elem() TaskScheduleOutput {
	return o.ApplyT(func(v *TaskSchedule) TaskSchedule {
		if v != nil {
			return *v
		}
		var ret TaskSchedule
		return ret
	}).(TaskScheduleOutput)
}

// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
func (o TaskSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type TaskTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// TaskTagInput is an input type that accepts TaskTagArgs and TaskTagOutput values.
// You can construct a concrete instance of `TaskTagInput` via:
//
//	TaskTagArgs{...}
type TaskTagInput interface {
	pulumi.Input

	ToTaskTagOutput() TaskTagOutput
	ToTaskTagOutputWithContext(context.Context) TaskTagOutput
}

// A key-value pair to associate with a resource.
type TaskTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TaskTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTag)(nil)).Elem()
}

func (i TaskTagArgs) ToTaskTagOutput() TaskTagOutput {
	return i.ToTaskTagOutputWithContext(context.Background())
}

func (i TaskTagArgs) ToTaskTagOutputWithContext(ctx context.Context) TaskTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTagOutput)
}

// TaskTagArrayInput is an input type that accepts TaskTagArray and TaskTagArrayOutput values.
// You can construct a concrete instance of `TaskTagArrayInput` via:
//
//	TaskTagArray{ TaskTagArgs{...} }
type TaskTagArrayInput interface {
	pulumi.Input

	ToTaskTagArrayOutput() TaskTagArrayOutput
	ToTaskTagArrayOutputWithContext(context.Context) TaskTagArrayOutput
}

type TaskTagArray []TaskTagInput

func (TaskTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTag)(nil)).Elem()
}

func (i TaskTagArray) ToTaskTagArrayOutput() TaskTagArrayOutput {
	return i.ToTaskTagArrayOutputWithContext(context.Background())
}

func (i TaskTagArray) ToTaskTagArrayOutputWithContext(ctx context.Context) TaskTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTagArrayOutput)
}

// A key-value pair to associate with a resource.
type TaskTagOutput struct{ *pulumi.OutputState }

func (TaskTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTag)(nil)).Elem()
}

func (o TaskTagOutput) ToTaskTagOutput() TaskTagOutput {
	return o
}

func (o TaskTagOutput) ToTaskTagOutputWithContext(ctx context.Context) TaskTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o TaskTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o TaskTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTag) string { return v.Value }).(pulumi.StringOutput)
}

type TaskTagArrayOutput struct{ *pulumi.OutputState }

func (TaskTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTag)(nil)).Elem()
}

func (o TaskTagArrayOutput) ToTaskTagArrayOutput() TaskTagArrayOutput {
	return o
}

func (o TaskTagArrayOutput) ToTaskTagArrayOutputWithContext(ctx context.Context) TaskTagArrayOutput {
	return o
}

func (o TaskTagArrayOutput) Index(i pulumi.IntInput) TaskTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskTag {
		return vs[0].([]TaskTag)[vs[1].(int)]
	}).(TaskTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentTagInput)(nil)).Elem(), AgentTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentTagArrayInput)(nil)).Elem(), AgentTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationEfsEc2ConfigInput)(nil)).Elem(), LocationEfsEc2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationEfsTagInput)(nil)).Elem(), LocationEfsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationEfsTagArrayInput)(nil)).Elem(), LocationEfsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxLustreTagInput)(nil)).Elem(), LocationFSxLustreTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxLustreTagArrayInput)(nil)).Elem(), LocationFSxLustreTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapNfsInput)(nil)).Elem(), LocationFSxOntapNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapNfsPtrInput)(nil)).Elem(), LocationFSxOntapNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapNfsMountOptionsInput)(nil)).Elem(), LocationFSxOntapNfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapNfsMountOptionsPtrInput)(nil)).Elem(), LocationFSxOntapNfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapProtocolInput)(nil)).Elem(), LocationFSxOntapProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapProtocolPtrInput)(nil)).Elem(), LocationFSxOntapProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapSmbInput)(nil)).Elem(), LocationFSxOntapSmbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapSmbPtrInput)(nil)).Elem(), LocationFSxOntapSmbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapSmbMountOptionsInput)(nil)).Elem(), LocationFSxOntapSmbMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapSmbMountOptionsPtrInput)(nil)).Elem(), LocationFSxOntapSmbMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapTagInput)(nil)).Elem(), LocationFSxOntapTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOntapTagArrayInput)(nil)).Elem(), LocationFSxOntapTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsMountOptionsInput)(nil)).Elem(), LocationFSxOpenZfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsMountOptionsPtrInput)(nil)).Elem(), LocationFSxOpenZfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsNfsInput)(nil)).Elem(), LocationFSxOpenZfsNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsNfsPtrInput)(nil)).Elem(), LocationFSxOpenZfsNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsProtocolInput)(nil)).Elem(), LocationFSxOpenZfsProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsTagInput)(nil)).Elem(), LocationFSxOpenZfsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxOpenZfsTagArrayInput)(nil)).Elem(), LocationFSxOpenZfsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxWindowsTagInput)(nil)).Elem(), LocationFSxWindowsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxWindowsTagArrayInput)(nil)).Elem(), LocationFSxWindowsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsNameNodeInput)(nil)).Elem(), LocationHdfsNameNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsNameNodeArrayInput)(nil)).Elem(), LocationHdfsNameNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsQopConfigurationInput)(nil)).Elem(), LocationHdfsQopConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsQopConfigurationPtrInput)(nil)).Elem(), LocationHdfsQopConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsTagInput)(nil)).Elem(), LocationHdfsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationHdfsTagArrayInput)(nil)).Elem(), LocationHdfsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNfsMountOptionsInput)(nil)).Elem(), LocationNfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNfsMountOptionsPtrInput)(nil)).Elem(), LocationNfsMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNfsOnPremConfigInput)(nil)).Elem(), LocationNfsOnPremConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNfsTagInput)(nil)).Elem(), LocationNfsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNfsTagArrayInput)(nil)).Elem(), LocationNfsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationObjectStorageTagInput)(nil)).Elem(), LocationObjectStorageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationObjectStorageTagArrayInput)(nil)).Elem(), LocationObjectStorageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationS3TagInput)(nil)).Elem(), LocationS3TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationS3TagArrayInput)(nil)).Elem(), LocationS3TagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationS3s3ConfigInput)(nil)).Elem(), LocationS3s3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbMountOptionsInput)(nil)).Elem(), LocationSmbMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbMountOptionsPtrInput)(nil)).Elem(), LocationSmbMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbTagInput)(nil)).Elem(), LocationSmbTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSmbTagArrayInput)(nil)).Elem(), LocationSmbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSystemServerConfigurationInput)(nil)).Elem(), StorageSystemServerConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSystemServerCredentialsInput)(nil)).Elem(), StorageSystemServerCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSystemServerCredentialsPtrInput)(nil)).Elem(), StorageSystemServerCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSystemTagInput)(nil)).Elem(), StorageSystemTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSystemTagArrayInput)(nil)).Elem(), StorageSystemTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskFilterRuleInput)(nil)).Elem(), TaskFilterRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskFilterRuleArrayInput)(nil)).Elem(), TaskFilterRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskOptionsInput)(nil)).Elem(), TaskOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskOptionsPtrInput)(nil)).Elem(), TaskOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskScheduleInput)(nil)).Elem(), TaskScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSchedulePtrInput)(nil)).Elem(), TaskScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTagInput)(nil)).Elem(), TaskTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTagArrayInput)(nil)).Elem(), TaskTagArray{})
	pulumi.RegisterOutputType(AgentTagOutput{})
	pulumi.RegisterOutputType(AgentTagArrayOutput{})
	pulumi.RegisterOutputType(LocationEfsEc2ConfigOutput{})
	pulumi.RegisterOutputType(LocationEfsTagOutput{})
	pulumi.RegisterOutputType(LocationEfsTagArrayOutput{})
	pulumi.RegisterOutputType(LocationFSxLustreTagOutput{})
	pulumi.RegisterOutputType(LocationFSxLustreTagArrayOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapNfsOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapNfsPtrOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapNfsMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapNfsMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapProtocolOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapProtocolPtrOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapSmbOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapSmbPtrOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapSmbMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapSmbMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapTagOutput{})
	pulumi.RegisterOutputType(LocationFSxOntapTagArrayOutput{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsNfsOutput{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsNfsPtrOutput{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsProtocolOutput{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsTagOutput{})
	pulumi.RegisterOutputType(LocationFSxOpenZfsTagArrayOutput{})
	pulumi.RegisterOutputType(LocationFSxWindowsTagOutput{})
	pulumi.RegisterOutputType(LocationFSxWindowsTagArrayOutput{})
	pulumi.RegisterOutputType(LocationHdfsNameNodeOutput{})
	pulumi.RegisterOutputType(LocationHdfsNameNodeArrayOutput{})
	pulumi.RegisterOutputType(LocationHdfsQopConfigurationOutput{})
	pulumi.RegisterOutputType(LocationHdfsQopConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LocationHdfsTagOutput{})
	pulumi.RegisterOutputType(LocationHdfsTagArrayOutput{})
	pulumi.RegisterOutputType(LocationNfsMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationNfsMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationNfsOnPremConfigOutput{})
	pulumi.RegisterOutputType(LocationNfsOnPremConfigPtrOutput{})
	pulumi.RegisterOutputType(LocationNfsTagOutput{})
	pulumi.RegisterOutputType(LocationNfsTagArrayOutput{})
	pulumi.RegisterOutputType(LocationObjectStorageTagOutput{})
	pulumi.RegisterOutputType(LocationObjectStorageTagArrayOutput{})
	pulumi.RegisterOutputType(LocationS3TagOutput{})
	pulumi.RegisterOutputType(LocationS3TagArrayOutput{})
	pulumi.RegisterOutputType(LocationS3s3ConfigOutput{})
	pulumi.RegisterOutputType(LocationSmbMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationSmbMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationSmbTagOutput{})
	pulumi.RegisterOutputType(LocationSmbTagArrayOutput{})
	pulumi.RegisterOutputType(StorageSystemServerConfigurationOutput{})
	pulumi.RegisterOutputType(StorageSystemServerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StorageSystemServerCredentialsOutput{})
	pulumi.RegisterOutputType(StorageSystemServerCredentialsPtrOutput{})
	pulumi.RegisterOutputType(StorageSystemTagOutput{})
	pulumi.RegisterOutputType(StorageSystemTagArrayOutput{})
	pulumi.RegisterOutputType(TaskFilterRuleOutput{})
	pulumi.RegisterOutputType(TaskFilterRuleArrayOutput{})
	pulumi.RegisterOutputType(TaskOptionsOutput{})
	pulumi.RegisterOutputType(TaskOptionsPtrOutput{})
	pulumi.RegisterOutputType(TaskScheduleOutput{})
	pulumi.RegisterOutputType(TaskSchedulePtrOutput{})
	pulumi.RegisterOutputType(TaskTagOutput{})
	pulumi.RegisterOutputType(TaskTagArrayOutput{})
}
