// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A key-value pair to associate with a resource.
type AgentTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// AgentTagInput is an input type that accepts AgentTagArgs and AgentTagOutput values.
// You can construct a concrete instance of `AgentTagInput` via:
//
//          AgentTagArgs{...}
type AgentTagInput interface {
	pulumi.Input

	ToAgentTagOutput() AgentTagOutput
	ToAgentTagOutputWithContext(context.Context) AgentTagOutput
}

// A key-value pair to associate with a resource.
type AgentTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AgentTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentTag)(nil)).Elem()
}

func (i AgentTagArgs) ToAgentTagOutput() AgentTagOutput {
	return i.ToAgentTagOutputWithContext(context.Background())
}

func (i AgentTagArgs) ToAgentTagOutputWithContext(ctx context.Context) AgentTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentTagOutput)
}

// AgentTagArrayInput is an input type that accepts AgentTagArray and AgentTagArrayOutput values.
// You can construct a concrete instance of `AgentTagArrayInput` via:
//
//          AgentTagArray{ AgentTagArgs{...} }
type AgentTagArrayInput interface {
	pulumi.Input

	ToAgentTagArrayOutput() AgentTagArrayOutput
	ToAgentTagArrayOutputWithContext(context.Context) AgentTagArrayOutput
}

type AgentTagArray []AgentTagInput

func (AgentTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentTag)(nil)).Elem()
}

func (i AgentTagArray) ToAgentTagArrayOutput() AgentTagArrayOutput {
	return i.ToAgentTagArrayOutputWithContext(context.Background())
}

func (i AgentTagArray) ToAgentTagArrayOutputWithContext(ctx context.Context) AgentTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentTagArrayOutput)
}

// A key-value pair to associate with a resource.
type AgentTagOutput struct{ *pulumi.OutputState }

func (AgentTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentTag)(nil)).Elem()
}

func (o AgentTagOutput) ToAgentTagOutput() AgentTagOutput {
	return o
}

func (o AgentTagOutput) ToAgentTagOutputWithContext(ctx context.Context) AgentTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o AgentTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AgentTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o AgentTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AgentTag) string { return v.Value }).(pulumi.StringOutput)
}

type AgentTagArrayOutput struct{ *pulumi.OutputState }

func (AgentTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentTag)(nil)).Elem()
}

func (o AgentTagArrayOutput) ToAgentTagArrayOutput() AgentTagArrayOutput {
	return o
}

func (o AgentTagArrayOutput) ToAgentTagArrayOutputWithContext(ctx context.Context) AgentTagArrayOutput {
	return o
}

func (o AgentTagArrayOutput) Index(i pulumi.IntInput) AgentTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AgentTag {
		return vs[0].([]AgentTag)[vs[1].(int)]
	}).(AgentTagOutput)
}

// The subnet and security group that DataSync uses to access target EFS file system.
type LocationEFSEc2Config struct {
	// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// The ARN of the subnet that DataSync uses to access the target EFS file system.
	SubnetArn string `pulumi:"subnetArn"`
}

// LocationEFSEc2ConfigInput is an input type that accepts LocationEFSEc2ConfigArgs and LocationEFSEc2ConfigOutput values.
// You can construct a concrete instance of `LocationEFSEc2ConfigInput` via:
//
//          LocationEFSEc2ConfigArgs{...}
type LocationEFSEc2ConfigInput interface {
	pulumi.Input

	ToLocationEFSEc2ConfigOutput() LocationEFSEc2ConfigOutput
	ToLocationEFSEc2ConfigOutputWithContext(context.Context) LocationEFSEc2ConfigOutput
}

// The subnet and security group that DataSync uses to access target EFS file system.
type LocationEFSEc2ConfigArgs struct {
	// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
	SecurityGroupArns pulumi.StringArrayInput `pulumi:"securityGroupArns"`
	// The ARN of the subnet that DataSync uses to access the target EFS file system.
	SubnetArn pulumi.StringInput `pulumi:"subnetArn"`
}

func (LocationEFSEc2ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEFSEc2Config)(nil)).Elem()
}

func (i LocationEFSEc2ConfigArgs) ToLocationEFSEc2ConfigOutput() LocationEFSEc2ConfigOutput {
	return i.ToLocationEFSEc2ConfigOutputWithContext(context.Background())
}

func (i LocationEFSEc2ConfigArgs) ToLocationEFSEc2ConfigOutputWithContext(ctx context.Context) LocationEFSEc2ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEFSEc2ConfigOutput)
}

func (i LocationEFSEc2ConfigArgs) ToLocationEFSEc2ConfigPtrOutput() LocationEFSEc2ConfigPtrOutput {
	return i.ToLocationEFSEc2ConfigPtrOutputWithContext(context.Background())
}

func (i LocationEFSEc2ConfigArgs) ToLocationEFSEc2ConfigPtrOutputWithContext(ctx context.Context) LocationEFSEc2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEFSEc2ConfigOutput).ToLocationEFSEc2ConfigPtrOutputWithContext(ctx)
}

// LocationEFSEc2ConfigPtrInput is an input type that accepts LocationEFSEc2ConfigArgs, LocationEFSEc2ConfigPtr and LocationEFSEc2ConfigPtrOutput values.
// You can construct a concrete instance of `LocationEFSEc2ConfigPtrInput` via:
//
//          LocationEFSEc2ConfigArgs{...}
//
//  or:
//
//          nil
type LocationEFSEc2ConfigPtrInput interface {
	pulumi.Input

	ToLocationEFSEc2ConfigPtrOutput() LocationEFSEc2ConfigPtrOutput
	ToLocationEFSEc2ConfigPtrOutputWithContext(context.Context) LocationEFSEc2ConfigPtrOutput
}

type locationEFSEc2ConfigPtrType LocationEFSEc2ConfigArgs

func LocationEFSEc2ConfigPtr(v *LocationEFSEc2ConfigArgs) LocationEFSEc2ConfigPtrInput {
	return (*locationEFSEc2ConfigPtrType)(v)
}

func (*locationEFSEc2ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationEFSEc2Config)(nil)).Elem()
}

func (i *locationEFSEc2ConfigPtrType) ToLocationEFSEc2ConfigPtrOutput() LocationEFSEc2ConfigPtrOutput {
	return i.ToLocationEFSEc2ConfigPtrOutputWithContext(context.Background())
}

func (i *locationEFSEc2ConfigPtrType) ToLocationEFSEc2ConfigPtrOutputWithContext(ctx context.Context) LocationEFSEc2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEFSEc2ConfigPtrOutput)
}

// The subnet and security group that DataSync uses to access target EFS file system.
type LocationEFSEc2ConfigOutput struct{ *pulumi.OutputState }

func (LocationEFSEc2ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEFSEc2Config)(nil)).Elem()
}

func (o LocationEFSEc2ConfigOutput) ToLocationEFSEc2ConfigOutput() LocationEFSEc2ConfigOutput {
	return o
}

func (o LocationEFSEc2ConfigOutput) ToLocationEFSEc2ConfigOutputWithContext(ctx context.Context) LocationEFSEc2ConfigOutput {
	return o
}

func (o LocationEFSEc2ConfigOutput) ToLocationEFSEc2ConfigPtrOutput() LocationEFSEc2ConfigPtrOutput {
	return o.ToLocationEFSEc2ConfigPtrOutputWithContext(context.Background())
}

func (o LocationEFSEc2ConfigOutput) ToLocationEFSEc2ConfigPtrOutputWithContext(ctx context.Context) LocationEFSEc2ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationEFSEc2Config) *LocationEFSEc2Config {
		return &v
	}).(LocationEFSEc2ConfigPtrOutput)
}

// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
func (o LocationEFSEc2ConfigOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LocationEFSEc2Config) []string { return v.SecurityGroupArns }).(pulumi.StringArrayOutput)
}

// The ARN of the subnet that DataSync uses to access the target EFS file system.
func (o LocationEFSEc2ConfigOutput) SubnetArn() pulumi.StringOutput {
	return o.ApplyT(func(v LocationEFSEc2Config) string { return v.SubnetArn }).(pulumi.StringOutput)
}

type LocationEFSEc2ConfigPtrOutput struct{ *pulumi.OutputState }

func (LocationEFSEc2ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationEFSEc2Config)(nil)).Elem()
}

func (o LocationEFSEc2ConfigPtrOutput) ToLocationEFSEc2ConfigPtrOutput() LocationEFSEc2ConfigPtrOutput {
	return o
}

func (o LocationEFSEc2ConfigPtrOutput) ToLocationEFSEc2ConfigPtrOutputWithContext(ctx context.Context) LocationEFSEc2ConfigPtrOutput {
	return o
}

func (o LocationEFSEc2ConfigPtrOutput) Elem() LocationEFSEc2ConfigOutput {
	return o.ApplyT(func(v *LocationEFSEc2Config) LocationEFSEc2Config {
		if v != nil {
			return *v
		}
		var ret LocationEFSEc2Config
		return ret
	}).(LocationEFSEc2ConfigOutput)
}

// The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
func (o LocationEFSEc2ConfigPtrOutput) SecurityGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationEFSEc2Config) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupArns
	}).(pulumi.StringArrayOutput)
}

// The ARN of the subnet that DataSync uses to access the target EFS file system.
func (o LocationEFSEc2ConfigPtrOutput) SubnetArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationEFSEc2Config) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetArn
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type LocationEFSTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationEFSTagInput is an input type that accepts LocationEFSTagArgs and LocationEFSTagOutput values.
// You can construct a concrete instance of `LocationEFSTagInput` via:
//
//          LocationEFSTagArgs{...}
type LocationEFSTagInput interface {
	pulumi.Input

	ToLocationEFSTagOutput() LocationEFSTagOutput
	ToLocationEFSTagOutputWithContext(context.Context) LocationEFSTagOutput
}

// A key-value pair to associate with a resource.
type LocationEFSTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationEFSTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEFSTag)(nil)).Elem()
}

func (i LocationEFSTagArgs) ToLocationEFSTagOutput() LocationEFSTagOutput {
	return i.ToLocationEFSTagOutputWithContext(context.Background())
}

func (i LocationEFSTagArgs) ToLocationEFSTagOutputWithContext(ctx context.Context) LocationEFSTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEFSTagOutput)
}

// LocationEFSTagArrayInput is an input type that accepts LocationEFSTagArray and LocationEFSTagArrayOutput values.
// You can construct a concrete instance of `LocationEFSTagArrayInput` via:
//
//          LocationEFSTagArray{ LocationEFSTagArgs{...} }
type LocationEFSTagArrayInput interface {
	pulumi.Input

	ToLocationEFSTagArrayOutput() LocationEFSTagArrayOutput
	ToLocationEFSTagArrayOutputWithContext(context.Context) LocationEFSTagArrayOutput
}

type LocationEFSTagArray []LocationEFSTagInput

func (LocationEFSTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationEFSTag)(nil)).Elem()
}

func (i LocationEFSTagArray) ToLocationEFSTagArrayOutput() LocationEFSTagArrayOutput {
	return i.ToLocationEFSTagArrayOutputWithContext(context.Background())
}

func (i LocationEFSTagArray) ToLocationEFSTagArrayOutputWithContext(ctx context.Context) LocationEFSTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationEFSTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationEFSTagOutput struct{ *pulumi.OutputState }

func (LocationEFSTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationEFSTag)(nil)).Elem()
}

func (o LocationEFSTagOutput) ToLocationEFSTagOutput() LocationEFSTagOutput {
	return o
}

func (o LocationEFSTagOutput) ToLocationEFSTagOutputWithContext(ctx context.Context) LocationEFSTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationEFSTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationEFSTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationEFSTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationEFSTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationEFSTagArrayOutput struct{ *pulumi.OutputState }

func (LocationEFSTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationEFSTag)(nil)).Elem()
}

func (o LocationEFSTagArrayOutput) ToLocationEFSTagArrayOutput() LocationEFSTagArrayOutput {
	return o
}

func (o LocationEFSTagArrayOutput) ToLocationEFSTagArrayOutputWithContext(ctx context.Context) LocationEFSTagArrayOutput {
	return o
}

func (o LocationEFSTagArrayOutput) Index(i pulumi.IntInput) LocationEFSTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationEFSTag {
		return vs[0].([]LocationEFSTag)[vs[1].(int)]
	}).(LocationEFSTagOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxWindowsTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationFSxWindowsTagInput is an input type that accepts LocationFSxWindowsTagArgs and LocationFSxWindowsTagOutput values.
// You can construct a concrete instance of `LocationFSxWindowsTagInput` via:
//
//          LocationFSxWindowsTagArgs{...}
type LocationFSxWindowsTagInput interface {
	pulumi.Input

	ToLocationFSxWindowsTagOutput() LocationFSxWindowsTagOutput
	ToLocationFSxWindowsTagOutputWithContext(context.Context) LocationFSxWindowsTagOutput
}

// A key-value pair to associate with a resource.
type LocationFSxWindowsTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationFSxWindowsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxWindowsTag)(nil)).Elem()
}

func (i LocationFSxWindowsTagArgs) ToLocationFSxWindowsTagOutput() LocationFSxWindowsTagOutput {
	return i.ToLocationFSxWindowsTagOutputWithContext(context.Background())
}

func (i LocationFSxWindowsTagArgs) ToLocationFSxWindowsTagOutputWithContext(ctx context.Context) LocationFSxWindowsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxWindowsTagOutput)
}

// LocationFSxWindowsTagArrayInput is an input type that accepts LocationFSxWindowsTagArray and LocationFSxWindowsTagArrayOutput values.
// You can construct a concrete instance of `LocationFSxWindowsTagArrayInput` via:
//
//          LocationFSxWindowsTagArray{ LocationFSxWindowsTagArgs{...} }
type LocationFSxWindowsTagArrayInput interface {
	pulumi.Input

	ToLocationFSxWindowsTagArrayOutput() LocationFSxWindowsTagArrayOutput
	ToLocationFSxWindowsTagArrayOutputWithContext(context.Context) LocationFSxWindowsTagArrayOutput
}

type LocationFSxWindowsTagArray []LocationFSxWindowsTagInput

func (LocationFSxWindowsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxWindowsTag)(nil)).Elem()
}

func (i LocationFSxWindowsTagArray) ToLocationFSxWindowsTagArrayOutput() LocationFSxWindowsTagArrayOutput {
	return i.ToLocationFSxWindowsTagArrayOutputWithContext(context.Background())
}

func (i LocationFSxWindowsTagArray) ToLocationFSxWindowsTagArrayOutputWithContext(ctx context.Context) LocationFSxWindowsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxWindowsTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationFSxWindowsTagOutput struct{ *pulumi.OutputState }

func (LocationFSxWindowsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationFSxWindowsTag)(nil)).Elem()
}

func (o LocationFSxWindowsTagOutput) ToLocationFSxWindowsTagOutput() LocationFSxWindowsTagOutput {
	return o
}

func (o LocationFSxWindowsTagOutput) ToLocationFSxWindowsTagOutputWithContext(ctx context.Context) LocationFSxWindowsTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationFSxWindowsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxWindowsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationFSxWindowsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationFSxWindowsTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationFSxWindowsTagArrayOutput struct{ *pulumi.OutputState }

func (LocationFSxWindowsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationFSxWindowsTag)(nil)).Elem()
}

func (o LocationFSxWindowsTagArrayOutput) ToLocationFSxWindowsTagArrayOutput() LocationFSxWindowsTagArrayOutput {
	return o
}

func (o LocationFSxWindowsTagArrayOutput) ToLocationFSxWindowsTagArrayOutputWithContext(ctx context.Context) LocationFSxWindowsTagArrayOutput {
	return o
}

func (o LocationFSxWindowsTagArrayOutput) Index(i pulumi.IntInput) LocationFSxWindowsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationFSxWindowsTag {
		return vs[0].([]LocationFSxWindowsTag)[vs[1].(int)]
	}).(LocationFSxWindowsTagOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationNFSMountOptions struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version *LocationNFSMountOptionsVersion `pulumi:"version"`
}

// LocationNFSMountOptionsInput is an input type that accepts LocationNFSMountOptionsArgs and LocationNFSMountOptionsOutput values.
// You can construct a concrete instance of `LocationNFSMountOptionsInput` via:
//
//          LocationNFSMountOptionsArgs{...}
type LocationNFSMountOptionsInput interface {
	pulumi.Input

	ToLocationNFSMountOptionsOutput() LocationNFSMountOptionsOutput
	ToLocationNFSMountOptionsOutputWithContext(context.Context) LocationNFSMountOptionsOutput
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationNFSMountOptionsArgs struct {
	// The specific NFS version that you want DataSync to use to mount your NFS share.
	Version LocationNFSMountOptionsVersionPtrInput `pulumi:"version"`
}

func (LocationNFSMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFSMountOptions)(nil)).Elem()
}

func (i LocationNFSMountOptionsArgs) ToLocationNFSMountOptionsOutput() LocationNFSMountOptionsOutput {
	return i.ToLocationNFSMountOptionsOutputWithContext(context.Background())
}

func (i LocationNFSMountOptionsArgs) ToLocationNFSMountOptionsOutputWithContext(ctx context.Context) LocationNFSMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSMountOptionsOutput)
}

func (i LocationNFSMountOptionsArgs) ToLocationNFSMountOptionsPtrOutput() LocationNFSMountOptionsPtrOutput {
	return i.ToLocationNFSMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationNFSMountOptionsArgs) ToLocationNFSMountOptionsPtrOutputWithContext(ctx context.Context) LocationNFSMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSMountOptionsOutput).ToLocationNFSMountOptionsPtrOutputWithContext(ctx)
}

// LocationNFSMountOptionsPtrInput is an input type that accepts LocationNFSMountOptionsArgs, LocationNFSMountOptionsPtr and LocationNFSMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationNFSMountOptionsPtrInput` via:
//
//          LocationNFSMountOptionsArgs{...}
//
//  or:
//
//          nil
type LocationNFSMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationNFSMountOptionsPtrOutput() LocationNFSMountOptionsPtrOutput
	ToLocationNFSMountOptionsPtrOutputWithContext(context.Context) LocationNFSMountOptionsPtrOutput
}

type locationNFSMountOptionsPtrType LocationNFSMountOptionsArgs

func LocationNFSMountOptionsPtr(v *LocationNFSMountOptionsArgs) LocationNFSMountOptionsPtrInput {
	return (*locationNFSMountOptionsPtrType)(v)
}

func (*locationNFSMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNFSMountOptions)(nil)).Elem()
}

func (i *locationNFSMountOptionsPtrType) ToLocationNFSMountOptionsPtrOutput() LocationNFSMountOptionsPtrOutput {
	return i.ToLocationNFSMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationNFSMountOptionsPtrType) ToLocationNFSMountOptionsPtrOutputWithContext(ctx context.Context) LocationNFSMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSMountOptionsPtrOutput)
}

// The NFS mount options that DataSync can use to mount your NFS share.
type LocationNFSMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationNFSMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFSMountOptions)(nil)).Elem()
}

func (o LocationNFSMountOptionsOutput) ToLocationNFSMountOptionsOutput() LocationNFSMountOptionsOutput {
	return o
}

func (o LocationNFSMountOptionsOutput) ToLocationNFSMountOptionsOutputWithContext(ctx context.Context) LocationNFSMountOptionsOutput {
	return o
}

func (o LocationNFSMountOptionsOutput) ToLocationNFSMountOptionsPtrOutput() LocationNFSMountOptionsPtrOutput {
	return o.ToLocationNFSMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationNFSMountOptionsOutput) ToLocationNFSMountOptionsPtrOutputWithContext(ctx context.Context) LocationNFSMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationNFSMountOptions) *LocationNFSMountOptions {
		return &v
	}).(LocationNFSMountOptionsPtrOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationNFSMountOptionsOutput) Version() LocationNFSMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v LocationNFSMountOptions) *LocationNFSMountOptionsVersion { return v.Version }).(LocationNFSMountOptionsVersionPtrOutput)
}

type LocationNFSMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationNFSMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNFSMountOptions)(nil)).Elem()
}

func (o LocationNFSMountOptionsPtrOutput) ToLocationNFSMountOptionsPtrOutput() LocationNFSMountOptionsPtrOutput {
	return o
}

func (o LocationNFSMountOptionsPtrOutput) ToLocationNFSMountOptionsPtrOutputWithContext(ctx context.Context) LocationNFSMountOptionsPtrOutput {
	return o
}

func (o LocationNFSMountOptionsPtrOutput) Elem() LocationNFSMountOptionsOutput {
	return o.ApplyT(func(v *LocationNFSMountOptions) LocationNFSMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationNFSMountOptions
		return ret
	}).(LocationNFSMountOptionsOutput)
}

// The specific NFS version that you want DataSync to use to mount your NFS share.
func (o LocationNFSMountOptionsPtrOutput) Version() LocationNFSMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v *LocationNFSMountOptions) *LocationNFSMountOptionsVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(LocationNFSMountOptionsVersionPtrOutput)
}

// Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
type LocationNFSOnPremConfig struct {
	// ARN(s) of the agent(s) to use for an NFS location.
	AgentArns []string `pulumi:"agentArns"`
}

// LocationNFSOnPremConfigInput is an input type that accepts LocationNFSOnPremConfigArgs and LocationNFSOnPremConfigOutput values.
// You can construct a concrete instance of `LocationNFSOnPremConfigInput` via:
//
//          LocationNFSOnPremConfigArgs{...}
type LocationNFSOnPremConfigInput interface {
	pulumi.Input

	ToLocationNFSOnPremConfigOutput() LocationNFSOnPremConfigOutput
	ToLocationNFSOnPremConfigOutputWithContext(context.Context) LocationNFSOnPremConfigOutput
}

// Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
type LocationNFSOnPremConfigArgs struct {
	// ARN(s) of the agent(s) to use for an NFS location.
	AgentArns pulumi.StringArrayInput `pulumi:"agentArns"`
}

func (LocationNFSOnPremConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFSOnPremConfig)(nil)).Elem()
}

func (i LocationNFSOnPremConfigArgs) ToLocationNFSOnPremConfigOutput() LocationNFSOnPremConfigOutput {
	return i.ToLocationNFSOnPremConfigOutputWithContext(context.Background())
}

func (i LocationNFSOnPremConfigArgs) ToLocationNFSOnPremConfigOutputWithContext(ctx context.Context) LocationNFSOnPremConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSOnPremConfigOutput)
}

func (i LocationNFSOnPremConfigArgs) ToLocationNFSOnPremConfigPtrOutput() LocationNFSOnPremConfigPtrOutput {
	return i.ToLocationNFSOnPremConfigPtrOutputWithContext(context.Background())
}

func (i LocationNFSOnPremConfigArgs) ToLocationNFSOnPremConfigPtrOutputWithContext(ctx context.Context) LocationNFSOnPremConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSOnPremConfigOutput).ToLocationNFSOnPremConfigPtrOutputWithContext(ctx)
}

// LocationNFSOnPremConfigPtrInput is an input type that accepts LocationNFSOnPremConfigArgs, LocationNFSOnPremConfigPtr and LocationNFSOnPremConfigPtrOutput values.
// You can construct a concrete instance of `LocationNFSOnPremConfigPtrInput` via:
//
//          LocationNFSOnPremConfigArgs{...}
//
//  or:
//
//          nil
type LocationNFSOnPremConfigPtrInput interface {
	pulumi.Input

	ToLocationNFSOnPremConfigPtrOutput() LocationNFSOnPremConfigPtrOutput
	ToLocationNFSOnPremConfigPtrOutputWithContext(context.Context) LocationNFSOnPremConfigPtrOutput
}

type locationNFSOnPremConfigPtrType LocationNFSOnPremConfigArgs

func LocationNFSOnPremConfigPtr(v *LocationNFSOnPremConfigArgs) LocationNFSOnPremConfigPtrInput {
	return (*locationNFSOnPremConfigPtrType)(v)
}

func (*locationNFSOnPremConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNFSOnPremConfig)(nil)).Elem()
}

func (i *locationNFSOnPremConfigPtrType) ToLocationNFSOnPremConfigPtrOutput() LocationNFSOnPremConfigPtrOutput {
	return i.ToLocationNFSOnPremConfigPtrOutputWithContext(context.Background())
}

func (i *locationNFSOnPremConfigPtrType) ToLocationNFSOnPremConfigPtrOutputWithContext(ctx context.Context) LocationNFSOnPremConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSOnPremConfigPtrOutput)
}

// Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
type LocationNFSOnPremConfigOutput struct{ *pulumi.OutputState }

func (LocationNFSOnPremConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFSOnPremConfig)(nil)).Elem()
}

func (o LocationNFSOnPremConfigOutput) ToLocationNFSOnPremConfigOutput() LocationNFSOnPremConfigOutput {
	return o
}

func (o LocationNFSOnPremConfigOutput) ToLocationNFSOnPremConfigOutputWithContext(ctx context.Context) LocationNFSOnPremConfigOutput {
	return o
}

func (o LocationNFSOnPremConfigOutput) ToLocationNFSOnPremConfigPtrOutput() LocationNFSOnPremConfigPtrOutput {
	return o.ToLocationNFSOnPremConfigPtrOutputWithContext(context.Background())
}

func (o LocationNFSOnPremConfigOutput) ToLocationNFSOnPremConfigPtrOutputWithContext(ctx context.Context) LocationNFSOnPremConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationNFSOnPremConfig) *LocationNFSOnPremConfig {
		return &v
	}).(LocationNFSOnPremConfigPtrOutput)
}

// ARN(s) of the agent(s) to use for an NFS location.
func (o LocationNFSOnPremConfigOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LocationNFSOnPremConfig) []string { return v.AgentArns }).(pulumi.StringArrayOutput)
}

type LocationNFSOnPremConfigPtrOutput struct{ *pulumi.OutputState }

func (LocationNFSOnPremConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNFSOnPremConfig)(nil)).Elem()
}

func (o LocationNFSOnPremConfigPtrOutput) ToLocationNFSOnPremConfigPtrOutput() LocationNFSOnPremConfigPtrOutput {
	return o
}

func (o LocationNFSOnPremConfigPtrOutput) ToLocationNFSOnPremConfigPtrOutputWithContext(ctx context.Context) LocationNFSOnPremConfigPtrOutput {
	return o
}

func (o LocationNFSOnPremConfigPtrOutput) Elem() LocationNFSOnPremConfigOutput {
	return o.ApplyT(func(v *LocationNFSOnPremConfig) LocationNFSOnPremConfig {
		if v != nil {
			return *v
		}
		var ret LocationNFSOnPremConfig
		return ret
	}).(LocationNFSOnPremConfigOutput)
}

// ARN(s) of the agent(s) to use for an NFS location.
func (o LocationNFSOnPremConfigPtrOutput) AgentArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationNFSOnPremConfig) []string {
		if v == nil {
			return nil
		}
		return v.AgentArns
	}).(pulumi.StringArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationNFSTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationNFSTagInput is an input type that accepts LocationNFSTagArgs and LocationNFSTagOutput values.
// You can construct a concrete instance of `LocationNFSTagInput` via:
//
//          LocationNFSTagArgs{...}
type LocationNFSTagInput interface {
	pulumi.Input

	ToLocationNFSTagOutput() LocationNFSTagOutput
	ToLocationNFSTagOutputWithContext(context.Context) LocationNFSTagOutput
}

// A key-value pair to associate with a resource.
type LocationNFSTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationNFSTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFSTag)(nil)).Elem()
}

func (i LocationNFSTagArgs) ToLocationNFSTagOutput() LocationNFSTagOutput {
	return i.ToLocationNFSTagOutputWithContext(context.Background())
}

func (i LocationNFSTagArgs) ToLocationNFSTagOutputWithContext(ctx context.Context) LocationNFSTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSTagOutput)
}

// LocationNFSTagArrayInput is an input type that accepts LocationNFSTagArray and LocationNFSTagArrayOutput values.
// You can construct a concrete instance of `LocationNFSTagArrayInput` via:
//
//          LocationNFSTagArray{ LocationNFSTagArgs{...} }
type LocationNFSTagArrayInput interface {
	pulumi.Input

	ToLocationNFSTagArrayOutput() LocationNFSTagArrayOutput
	ToLocationNFSTagArrayOutputWithContext(context.Context) LocationNFSTagArrayOutput
}

type LocationNFSTagArray []LocationNFSTagInput

func (LocationNFSTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationNFSTag)(nil)).Elem()
}

func (i LocationNFSTagArray) ToLocationNFSTagArrayOutput() LocationNFSTagArrayOutput {
	return i.ToLocationNFSTagArrayOutputWithContext(context.Background())
}

func (i LocationNFSTagArray) ToLocationNFSTagArrayOutputWithContext(ctx context.Context) LocationNFSTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationNFSTagOutput struct{ *pulumi.OutputState }

func (LocationNFSTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFSTag)(nil)).Elem()
}

func (o LocationNFSTagOutput) ToLocationNFSTagOutput() LocationNFSTagOutput {
	return o
}

func (o LocationNFSTagOutput) ToLocationNFSTagOutputWithContext(ctx context.Context) LocationNFSTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationNFSTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationNFSTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationNFSTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationNFSTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationNFSTagArrayOutput struct{ *pulumi.OutputState }

func (LocationNFSTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationNFSTag)(nil)).Elem()
}

func (o LocationNFSTagArrayOutput) ToLocationNFSTagArrayOutput() LocationNFSTagArrayOutput {
	return o
}

func (o LocationNFSTagArrayOutput) ToLocationNFSTagArrayOutputWithContext(ctx context.Context) LocationNFSTagArrayOutput {
	return o
}

func (o LocationNFSTagArrayOutput) Index(i pulumi.IntInput) LocationNFSTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationNFSTag {
		return vs[0].([]LocationNFSTag)[vs[1].(int)]
	}).(LocationNFSTagOutput)
}

// A key-value pair to associate with a resource.
type LocationObjectStorageTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationObjectStorageTagInput is an input type that accepts LocationObjectStorageTagArgs and LocationObjectStorageTagOutput values.
// You can construct a concrete instance of `LocationObjectStorageTagInput` via:
//
//          LocationObjectStorageTagArgs{...}
type LocationObjectStorageTagInput interface {
	pulumi.Input

	ToLocationObjectStorageTagOutput() LocationObjectStorageTagOutput
	ToLocationObjectStorageTagOutputWithContext(context.Context) LocationObjectStorageTagOutput
}

// A key-value pair to associate with a resource.
type LocationObjectStorageTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationObjectStorageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationObjectStorageTag)(nil)).Elem()
}

func (i LocationObjectStorageTagArgs) ToLocationObjectStorageTagOutput() LocationObjectStorageTagOutput {
	return i.ToLocationObjectStorageTagOutputWithContext(context.Background())
}

func (i LocationObjectStorageTagArgs) ToLocationObjectStorageTagOutputWithContext(ctx context.Context) LocationObjectStorageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationObjectStorageTagOutput)
}

// LocationObjectStorageTagArrayInput is an input type that accepts LocationObjectStorageTagArray and LocationObjectStorageTagArrayOutput values.
// You can construct a concrete instance of `LocationObjectStorageTagArrayInput` via:
//
//          LocationObjectStorageTagArray{ LocationObjectStorageTagArgs{...} }
type LocationObjectStorageTagArrayInput interface {
	pulumi.Input

	ToLocationObjectStorageTagArrayOutput() LocationObjectStorageTagArrayOutput
	ToLocationObjectStorageTagArrayOutputWithContext(context.Context) LocationObjectStorageTagArrayOutput
}

type LocationObjectStorageTagArray []LocationObjectStorageTagInput

func (LocationObjectStorageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationObjectStorageTag)(nil)).Elem()
}

func (i LocationObjectStorageTagArray) ToLocationObjectStorageTagArrayOutput() LocationObjectStorageTagArrayOutput {
	return i.ToLocationObjectStorageTagArrayOutputWithContext(context.Background())
}

func (i LocationObjectStorageTagArray) ToLocationObjectStorageTagArrayOutputWithContext(ctx context.Context) LocationObjectStorageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationObjectStorageTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationObjectStorageTagOutput struct{ *pulumi.OutputState }

func (LocationObjectStorageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationObjectStorageTag)(nil)).Elem()
}

func (o LocationObjectStorageTagOutput) ToLocationObjectStorageTagOutput() LocationObjectStorageTagOutput {
	return o
}

func (o LocationObjectStorageTagOutput) ToLocationObjectStorageTagOutputWithContext(ctx context.Context) LocationObjectStorageTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationObjectStorageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationObjectStorageTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationObjectStorageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationObjectStorageTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationObjectStorageTagArrayOutput struct{ *pulumi.OutputState }

func (LocationObjectStorageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationObjectStorageTag)(nil)).Elem()
}

func (o LocationObjectStorageTagArrayOutput) ToLocationObjectStorageTagArrayOutput() LocationObjectStorageTagArrayOutput {
	return o
}

func (o LocationObjectStorageTagArrayOutput) ToLocationObjectStorageTagArrayOutputWithContext(ctx context.Context) LocationObjectStorageTagArrayOutput {
	return o
}

func (o LocationObjectStorageTagArrayOutput) Index(i pulumi.IntInput) LocationObjectStorageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationObjectStorageTag {
		return vs[0].([]LocationObjectStorageTag)[vs[1].(int)]
	}).(LocationObjectStorageTagOutput)
}

// The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
type LocationS3S3Config struct {
	// The ARN of the IAM role of the Amazon S3 bucket.
	BucketAccessRoleArn string `pulumi:"bucketAccessRoleArn"`
}

// LocationS3S3ConfigInput is an input type that accepts LocationS3S3ConfigArgs and LocationS3S3ConfigOutput values.
// You can construct a concrete instance of `LocationS3S3ConfigInput` via:
//
//          LocationS3S3ConfigArgs{...}
type LocationS3S3ConfigInput interface {
	pulumi.Input

	ToLocationS3S3ConfigOutput() LocationS3S3ConfigOutput
	ToLocationS3S3ConfigOutputWithContext(context.Context) LocationS3S3ConfigOutput
}

// The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
type LocationS3S3ConfigArgs struct {
	// The ARN of the IAM role of the Amazon S3 bucket.
	BucketAccessRoleArn pulumi.StringInput `pulumi:"bucketAccessRoleArn"`
}

func (LocationS3S3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3S3Config)(nil)).Elem()
}

func (i LocationS3S3ConfigArgs) ToLocationS3S3ConfigOutput() LocationS3S3ConfigOutput {
	return i.ToLocationS3S3ConfigOutputWithContext(context.Background())
}

func (i LocationS3S3ConfigArgs) ToLocationS3S3ConfigOutputWithContext(ctx context.Context) LocationS3S3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3S3ConfigOutput)
}

func (i LocationS3S3ConfigArgs) ToLocationS3S3ConfigPtrOutput() LocationS3S3ConfigPtrOutput {
	return i.ToLocationS3S3ConfigPtrOutputWithContext(context.Background())
}

func (i LocationS3S3ConfigArgs) ToLocationS3S3ConfigPtrOutputWithContext(ctx context.Context) LocationS3S3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3S3ConfigOutput).ToLocationS3S3ConfigPtrOutputWithContext(ctx)
}

// LocationS3S3ConfigPtrInput is an input type that accepts LocationS3S3ConfigArgs, LocationS3S3ConfigPtr and LocationS3S3ConfigPtrOutput values.
// You can construct a concrete instance of `LocationS3S3ConfigPtrInput` via:
//
//          LocationS3S3ConfigArgs{...}
//
//  or:
//
//          nil
type LocationS3S3ConfigPtrInput interface {
	pulumi.Input

	ToLocationS3S3ConfigPtrOutput() LocationS3S3ConfigPtrOutput
	ToLocationS3S3ConfigPtrOutputWithContext(context.Context) LocationS3S3ConfigPtrOutput
}

type locationS3S3ConfigPtrType LocationS3S3ConfigArgs

func LocationS3S3ConfigPtr(v *LocationS3S3ConfigArgs) LocationS3S3ConfigPtrInput {
	return (*locationS3S3ConfigPtrType)(v)
}

func (*locationS3S3ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationS3S3Config)(nil)).Elem()
}

func (i *locationS3S3ConfigPtrType) ToLocationS3S3ConfigPtrOutput() LocationS3S3ConfigPtrOutput {
	return i.ToLocationS3S3ConfigPtrOutputWithContext(context.Background())
}

func (i *locationS3S3ConfigPtrType) ToLocationS3S3ConfigPtrOutputWithContext(ctx context.Context) LocationS3S3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3S3ConfigPtrOutput)
}

// The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
type LocationS3S3ConfigOutput struct{ *pulumi.OutputState }

func (LocationS3S3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3S3Config)(nil)).Elem()
}

func (o LocationS3S3ConfigOutput) ToLocationS3S3ConfigOutput() LocationS3S3ConfigOutput {
	return o
}

func (o LocationS3S3ConfigOutput) ToLocationS3S3ConfigOutputWithContext(ctx context.Context) LocationS3S3ConfigOutput {
	return o
}

func (o LocationS3S3ConfigOutput) ToLocationS3S3ConfigPtrOutput() LocationS3S3ConfigPtrOutput {
	return o.ToLocationS3S3ConfigPtrOutputWithContext(context.Background())
}

func (o LocationS3S3ConfigOutput) ToLocationS3S3ConfigPtrOutputWithContext(ctx context.Context) LocationS3S3ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationS3S3Config) *LocationS3S3Config {
		return &v
	}).(LocationS3S3ConfigPtrOutput)
}

// The ARN of the IAM role of the Amazon S3 bucket.
func (o LocationS3S3ConfigOutput) BucketAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v LocationS3S3Config) string { return v.BucketAccessRoleArn }).(pulumi.StringOutput)
}

type LocationS3S3ConfigPtrOutput struct{ *pulumi.OutputState }

func (LocationS3S3ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationS3S3Config)(nil)).Elem()
}

func (o LocationS3S3ConfigPtrOutput) ToLocationS3S3ConfigPtrOutput() LocationS3S3ConfigPtrOutput {
	return o
}

func (o LocationS3S3ConfigPtrOutput) ToLocationS3S3ConfigPtrOutputWithContext(ctx context.Context) LocationS3S3ConfigPtrOutput {
	return o
}

func (o LocationS3S3ConfigPtrOutput) Elem() LocationS3S3ConfigOutput {
	return o.ApplyT(func(v *LocationS3S3Config) LocationS3S3Config {
		if v != nil {
			return *v
		}
		var ret LocationS3S3Config
		return ret
	}).(LocationS3S3ConfigOutput)
}

// The ARN of the IAM role of the Amazon S3 bucket.
func (o LocationS3S3ConfigPtrOutput) BucketAccessRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationS3S3Config) *string {
		if v == nil {
			return nil
		}
		return &v.BucketAccessRoleArn
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type LocationS3Tag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationS3TagInput is an input type that accepts LocationS3TagArgs and LocationS3TagOutput values.
// You can construct a concrete instance of `LocationS3TagInput` via:
//
//          LocationS3TagArgs{...}
type LocationS3TagInput interface {
	pulumi.Input

	ToLocationS3TagOutput() LocationS3TagOutput
	ToLocationS3TagOutputWithContext(context.Context) LocationS3TagOutput
}

// A key-value pair to associate with a resource.
type LocationS3TagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationS3TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3Tag)(nil)).Elem()
}

func (i LocationS3TagArgs) ToLocationS3TagOutput() LocationS3TagOutput {
	return i.ToLocationS3TagOutputWithContext(context.Background())
}

func (i LocationS3TagArgs) ToLocationS3TagOutputWithContext(ctx context.Context) LocationS3TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3TagOutput)
}

// LocationS3TagArrayInput is an input type that accepts LocationS3TagArray and LocationS3TagArrayOutput values.
// You can construct a concrete instance of `LocationS3TagArrayInput` via:
//
//          LocationS3TagArray{ LocationS3TagArgs{...} }
type LocationS3TagArrayInput interface {
	pulumi.Input

	ToLocationS3TagArrayOutput() LocationS3TagArrayOutput
	ToLocationS3TagArrayOutputWithContext(context.Context) LocationS3TagArrayOutput
}

type LocationS3TagArray []LocationS3TagInput

func (LocationS3TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationS3Tag)(nil)).Elem()
}

func (i LocationS3TagArray) ToLocationS3TagArrayOutput() LocationS3TagArrayOutput {
	return i.ToLocationS3TagArrayOutputWithContext(context.Background())
}

func (i LocationS3TagArray) ToLocationS3TagArrayOutputWithContext(ctx context.Context) LocationS3TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationS3TagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationS3TagOutput struct{ *pulumi.OutputState }

func (LocationS3TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationS3Tag)(nil)).Elem()
}

func (o LocationS3TagOutput) ToLocationS3TagOutput() LocationS3TagOutput {
	return o
}

func (o LocationS3TagOutput) ToLocationS3TagOutputWithContext(ctx context.Context) LocationS3TagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationS3TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationS3Tag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationS3TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationS3Tag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationS3TagArrayOutput struct{ *pulumi.OutputState }

func (LocationS3TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationS3Tag)(nil)).Elem()
}

func (o LocationS3TagArrayOutput) ToLocationS3TagArrayOutput() LocationS3TagArrayOutput {
	return o
}

func (o LocationS3TagArrayOutput) ToLocationS3TagArrayOutputWithContext(ctx context.Context) LocationS3TagArrayOutput {
	return o
}

func (o LocationS3TagArrayOutput) Index(i pulumi.IntInput) LocationS3TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationS3Tag {
		return vs[0].([]LocationS3Tag)[vs[1].(int)]
	}).(LocationS3TagOutput)
}

// The mount options used by DataSync to access the SMB server.
type LocationSMBMountOptions struct {
	// The specific SMB version that you want DataSync to use to mount your SMB share.
	Version *LocationSMBMountOptionsVersion `pulumi:"version"`
}

// LocationSMBMountOptionsInput is an input type that accepts LocationSMBMountOptionsArgs and LocationSMBMountOptionsOutput values.
// You can construct a concrete instance of `LocationSMBMountOptionsInput` via:
//
//          LocationSMBMountOptionsArgs{...}
type LocationSMBMountOptionsInput interface {
	pulumi.Input

	ToLocationSMBMountOptionsOutput() LocationSMBMountOptionsOutput
	ToLocationSMBMountOptionsOutputWithContext(context.Context) LocationSMBMountOptionsOutput
}

// The mount options used by DataSync to access the SMB server.
type LocationSMBMountOptionsArgs struct {
	// The specific SMB version that you want DataSync to use to mount your SMB share.
	Version LocationSMBMountOptionsVersionPtrInput `pulumi:"version"`
}

func (LocationSMBMountOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSMBMountOptions)(nil)).Elem()
}

func (i LocationSMBMountOptionsArgs) ToLocationSMBMountOptionsOutput() LocationSMBMountOptionsOutput {
	return i.ToLocationSMBMountOptionsOutputWithContext(context.Background())
}

func (i LocationSMBMountOptionsArgs) ToLocationSMBMountOptionsOutputWithContext(ctx context.Context) LocationSMBMountOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSMBMountOptionsOutput)
}

func (i LocationSMBMountOptionsArgs) ToLocationSMBMountOptionsPtrOutput() LocationSMBMountOptionsPtrOutput {
	return i.ToLocationSMBMountOptionsPtrOutputWithContext(context.Background())
}

func (i LocationSMBMountOptionsArgs) ToLocationSMBMountOptionsPtrOutputWithContext(ctx context.Context) LocationSMBMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSMBMountOptionsOutput).ToLocationSMBMountOptionsPtrOutputWithContext(ctx)
}

// LocationSMBMountOptionsPtrInput is an input type that accepts LocationSMBMountOptionsArgs, LocationSMBMountOptionsPtr and LocationSMBMountOptionsPtrOutput values.
// You can construct a concrete instance of `LocationSMBMountOptionsPtrInput` via:
//
//          LocationSMBMountOptionsArgs{...}
//
//  or:
//
//          nil
type LocationSMBMountOptionsPtrInput interface {
	pulumi.Input

	ToLocationSMBMountOptionsPtrOutput() LocationSMBMountOptionsPtrOutput
	ToLocationSMBMountOptionsPtrOutputWithContext(context.Context) LocationSMBMountOptionsPtrOutput
}

type locationSMBMountOptionsPtrType LocationSMBMountOptionsArgs

func LocationSMBMountOptionsPtr(v *LocationSMBMountOptionsArgs) LocationSMBMountOptionsPtrInput {
	return (*locationSMBMountOptionsPtrType)(v)
}

func (*locationSMBMountOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSMBMountOptions)(nil)).Elem()
}

func (i *locationSMBMountOptionsPtrType) ToLocationSMBMountOptionsPtrOutput() LocationSMBMountOptionsPtrOutput {
	return i.ToLocationSMBMountOptionsPtrOutputWithContext(context.Background())
}

func (i *locationSMBMountOptionsPtrType) ToLocationSMBMountOptionsPtrOutputWithContext(ctx context.Context) LocationSMBMountOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSMBMountOptionsPtrOutput)
}

// The mount options used by DataSync to access the SMB server.
type LocationSMBMountOptionsOutput struct{ *pulumi.OutputState }

func (LocationSMBMountOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSMBMountOptions)(nil)).Elem()
}

func (o LocationSMBMountOptionsOutput) ToLocationSMBMountOptionsOutput() LocationSMBMountOptionsOutput {
	return o
}

func (o LocationSMBMountOptionsOutput) ToLocationSMBMountOptionsOutputWithContext(ctx context.Context) LocationSMBMountOptionsOutput {
	return o
}

func (o LocationSMBMountOptionsOutput) ToLocationSMBMountOptionsPtrOutput() LocationSMBMountOptionsPtrOutput {
	return o.ToLocationSMBMountOptionsPtrOutputWithContext(context.Background())
}

func (o LocationSMBMountOptionsOutput) ToLocationSMBMountOptionsPtrOutputWithContext(ctx context.Context) LocationSMBMountOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationSMBMountOptions) *LocationSMBMountOptions {
		return &v
	}).(LocationSMBMountOptionsPtrOutput)
}

// The specific SMB version that you want DataSync to use to mount your SMB share.
func (o LocationSMBMountOptionsOutput) Version() LocationSMBMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v LocationSMBMountOptions) *LocationSMBMountOptionsVersion { return v.Version }).(LocationSMBMountOptionsVersionPtrOutput)
}

type LocationSMBMountOptionsPtrOutput struct{ *pulumi.OutputState }

func (LocationSMBMountOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationSMBMountOptions)(nil)).Elem()
}

func (o LocationSMBMountOptionsPtrOutput) ToLocationSMBMountOptionsPtrOutput() LocationSMBMountOptionsPtrOutput {
	return o
}

func (o LocationSMBMountOptionsPtrOutput) ToLocationSMBMountOptionsPtrOutputWithContext(ctx context.Context) LocationSMBMountOptionsPtrOutput {
	return o
}

func (o LocationSMBMountOptionsPtrOutput) Elem() LocationSMBMountOptionsOutput {
	return o.ApplyT(func(v *LocationSMBMountOptions) LocationSMBMountOptions {
		if v != nil {
			return *v
		}
		var ret LocationSMBMountOptions
		return ret
	}).(LocationSMBMountOptionsOutput)
}

// The specific SMB version that you want DataSync to use to mount your SMB share.
func (o LocationSMBMountOptionsPtrOutput) Version() LocationSMBMountOptionsVersionPtrOutput {
	return o.ApplyT(func(v *LocationSMBMountOptions) *LocationSMBMountOptionsVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(LocationSMBMountOptionsVersionPtrOutput)
}

// A key-value pair to associate with a resource.
type LocationSMBTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// LocationSMBTagInput is an input type that accepts LocationSMBTagArgs and LocationSMBTagOutput values.
// You can construct a concrete instance of `LocationSMBTagInput` via:
//
//          LocationSMBTagArgs{...}
type LocationSMBTagInput interface {
	pulumi.Input

	ToLocationSMBTagOutput() LocationSMBTagOutput
	ToLocationSMBTagOutputWithContext(context.Context) LocationSMBTagOutput
}

// A key-value pair to associate with a resource.
type LocationSMBTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LocationSMBTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSMBTag)(nil)).Elem()
}

func (i LocationSMBTagArgs) ToLocationSMBTagOutput() LocationSMBTagOutput {
	return i.ToLocationSMBTagOutputWithContext(context.Background())
}

func (i LocationSMBTagArgs) ToLocationSMBTagOutputWithContext(ctx context.Context) LocationSMBTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSMBTagOutput)
}

// LocationSMBTagArrayInput is an input type that accepts LocationSMBTagArray and LocationSMBTagArrayOutput values.
// You can construct a concrete instance of `LocationSMBTagArrayInput` via:
//
//          LocationSMBTagArray{ LocationSMBTagArgs{...} }
type LocationSMBTagArrayInput interface {
	pulumi.Input

	ToLocationSMBTagArrayOutput() LocationSMBTagArrayOutput
	ToLocationSMBTagArrayOutputWithContext(context.Context) LocationSMBTagArrayOutput
}

type LocationSMBTagArray []LocationSMBTagInput

func (LocationSMBTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationSMBTag)(nil)).Elem()
}

func (i LocationSMBTagArray) ToLocationSMBTagArrayOutput() LocationSMBTagArrayOutput {
	return i.ToLocationSMBTagArrayOutputWithContext(context.Background())
}

func (i LocationSMBTagArray) ToLocationSMBTagArrayOutputWithContext(ctx context.Context) LocationSMBTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSMBTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LocationSMBTagOutput struct{ *pulumi.OutputState }

func (LocationSMBTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSMBTag)(nil)).Elem()
}

func (o LocationSMBTagOutput) ToLocationSMBTagOutput() LocationSMBTagOutput {
	return o
}

func (o LocationSMBTagOutput) ToLocationSMBTagOutputWithContext(ctx context.Context) LocationSMBTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o LocationSMBTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LocationSMBTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o LocationSMBTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LocationSMBTag) string { return v.Value }).(pulumi.StringOutput)
}

type LocationSMBTagArrayOutput struct{ *pulumi.OutputState }

func (LocationSMBTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationSMBTag)(nil)).Elem()
}

func (o LocationSMBTagArrayOutput) ToLocationSMBTagArrayOutput() LocationSMBTagArrayOutput {
	return o
}

func (o LocationSMBTagArrayOutput) ToLocationSMBTagArrayOutputWithContext(ctx context.Context) LocationSMBTagArrayOutput {
	return o
}

func (o LocationSMBTagArrayOutput) Index(i pulumi.IntInput) LocationSMBTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationSMBTag {
		return vs[0].([]LocationSMBTag)[vs[1].(int)]
	}).(LocationSMBTagOutput)
}

// Specifies which files folders and objects to include or exclude when transferring files from source to destination.
type TaskFilterRule struct {
	// The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
	FilterType *TaskFilterRuleFilterType `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
	Value *string `pulumi:"value"`
}

// TaskFilterRuleInput is an input type that accepts TaskFilterRuleArgs and TaskFilterRuleOutput values.
// You can construct a concrete instance of `TaskFilterRuleInput` via:
//
//          TaskFilterRuleArgs{...}
type TaskFilterRuleInput interface {
	pulumi.Input

	ToTaskFilterRuleOutput() TaskFilterRuleOutput
	ToTaskFilterRuleOutputWithContext(context.Context) TaskFilterRuleOutput
}

// Specifies which files folders and objects to include or exclude when transferring files from source to destination.
type TaskFilterRuleArgs struct {
	// The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
	FilterType TaskFilterRuleFilterTypePtrInput `pulumi:"filterType"`
	// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskFilterRule)(nil)).Elem()
}

func (i TaskFilterRuleArgs) ToTaskFilterRuleOutput() TaskFilterRuleOutput {
	return i.ToTaskFilterRuleOutputWithContext(context.Background())
}

func (i TaskFilterRuleArgs) ToTaskFilterRuleOutputWithContext(ctx context.Context) TaskFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskFilterRuleOutput)
}

// TaskFilterRuleArrayInput is an input type that accepts TaskFilterRuleArray and TaskFilterRuleArrayOutput values.
// You can construct a concrete instance of `TaskFilterRuleArrayInput` via:
//
//          TaskFilterRuleArray{ TaskFilterRuleArgs{...} }
type TaskFilterRuleArrayInput interface {
	pulumi.Input

	ToTaskFilterRuleArrayOutput() TaskFilterRuleArrayOutput
	ToTaskFilterRuleArrayOutputWithContext(context.Context) TaskFilterRuleArrayOutput
}

type TaskFilterRuleArray []TaskFilterRuleInput

func (TaskFilterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskFilterRule)(nil)).Elem()
}

func (i TaskFilterRuleArray) ToTaskFilterRuleArrayOutput() TaskFilterRuleArrayOutput {
	return i.ToTaskFilterRuleArrayOutputWithContext(context.Background())
}

func (i TaskFilterRuleArray) ToTaskFilterRuleArrayOutputWithContext(ctx context.Context) TaskFilterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskFilterRuleArrayOutput)
}

// Specifies which files folders and objects to include or exclude when transferring files from source to destination.
type TaskFilterRuleOutput struct{ *pulumi.OutputState }

func (TaskFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskFilterRule)(nil)).Elem()
}

func (o TaskFilterRuleOutput) ToTaskFilterRuleOutput() TaskFilterRuleOutput {
	return o
}

func (o TaskFilterRuleOutput) ToTaskFilterRuleOutputWithContext(ctx context.Context) TaskFilterRuleOutput {
	return o
}

// The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
func (o TaskFilterRuleOutput) FilterType() TaskFilterRuleFilterTypePtrOutput {
	return o.ApplyT(func(v TaskFilterRule) *TaskFilterRuleFilterType { return v.FilterType }).(TaskFilterRuleFilterTypePtrOutput)
}

// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
func (o TaskFilterRuleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskFilterRule) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskFilterRuleArrayOutput struct{ *pulumi.OutputState }

func (TaskFilterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskFilterRule)(nil)).Elem()
}

func (o TaskFilterRuleArrayOutput) ToTaskFilterRuleArrayOutput() TaskFilterRuleArrayOutput {
	return o
}

func (o TaskFilterRuleArrayOutput) ToTaskFilterRuleArrayOutputWithContext(ctx context.Context) TaskFilterRuleArrayOutput {
	return o
}

func (o TaskFilterRuleArrayOutput) Index(i pulumi.IntInput) TaskFilterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskFilterRule {
		return vs[0].([]TaskFilterRule)[vs[1].(int)]
	}).(TaskFilterRuleOutput)
}

// Represents the options that are available to control the behavior of a StartTaskExecution operation.
type TaskOptions struct {
	// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
	Atime *TaskOptionsAtime `pulumi:"atime"`
	// A value that limits the bandwidth used by AWS DataSync.
	BytesPerSecond *int `pulumi:"bytesPerSecond"`
	// The group ID (GID) of the file's owners.
	Gid *TaskOptionsGid `pulumi:"gid"`
	// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
	LogLevel *TaskOptionsLogLevel `pulumi:"logLevel"`
	// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
	Mtime *TaskOptionsMtime `pulumi:"mtime"`
	// A value that determines whether files at the destination should be overwritten or preserved when copying files.
	OverwriteMode *TaskOptionsOverwriteMode `pulumi:"overwriteMode"`
	// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
	PosixPermissions *TaskOptionsPosixPermissions `pulumi:"posixPermissions"`
	// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
	PreserveDeletedFiles *TaskOptionsPreserveDeletedFiles `pulumi:"preserveDeletedFiles"`
	// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
	PreserveDevices *TaskOptionsPreserveDevices `pulumi:"preserveDevices"`
	// A value that determines which components of the SMB security descriptor are copied during transfer.
	SecurityDescriptorCopyFlags *TaskOptionsSecurityDescriptorCopyFlags `pulumi:"securityDescriptorCopyFlags"`
	// A value that determines whether tasks should be queued before executing the tasks.
	TaskQueueing *TaskOptionsTaskQueueing `pulumi:"taskQueueing"`
	// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
	TransferMode *TaskOptionsTransferMode `pulumi:"transferMode"`
	// The user ID (UID) of the file's owner.
	Uid *TaskOptionsUid `pulumi:"uid"`
	// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
	VerifyMode *TaskOptionsVerifyMode `pulumi:"verifyMode"`
}

// TaskOptionsInput is an input type that accepts TaskOptionsArgs and TaskOptionsOutput values.
// You can construct a concrete instance of `TaskOptionsInput` via:
//
//          TaskOptionsArgs{...}
type TaskOptionsInput interface {
	pulumi.Input

	ToTaskOptionsOutput() TaskOptionsOutput
	ToTaskOptionsOutputWithContext(context.Context) TaskOptionsOutput
}

// Represents the options that are available to control the behavior of a StartTaskExecution operation.
type TaskOptionsArgs struct {
	// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
	Atime TaskOptionsAtimePtrInput `pulumi:"atime"`
	// A value that limits the bandwidth used by AWS DataSync.
	BytesPerSecond pulumi.IntPtrInput `pulumi:"bytesPerSecond"`
	// The group ID (GID) of the file's owners.
	Gid TaskOptionsGidPtrInput `pulumi:"gid"`
	// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
	LogLevel TaskOptionsLogLevelPtrInput `pulumi:"logLevel"`
	// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
	Mtime TaskOptionsMtimePtrInput `pulumi:"mtime"`
	// A value that determines whether files at the destination should be overwritten or preserved when copying files.
	OverwriteMode TaskOptionsOverwriteModePtrInput `pulumi:"overwriteMode"`
	// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
	PosixPermissions TaskOptionsPosixPermissionsPtrInput `pulumi:"posixPermissions"`
	// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
	PreserveDeletedFiles TaskOptionsPreserveDeletedFilesPtrInput `pulumi:"preserveDeletedFiles"`
	// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
	PreserveDevices TaskOptionsPreserveDevicesPtrInput `pulumi:"preserveDevices"`
	// A value that determines which components of the SMB security descriptor are copied during transfer.
	SecurityDescriptorCopyFlags TaskOptionsSecurityDescriptorCopyFlagsPtrInput `pulumi:"securityDescriptorCopyFlags"`
	// A value that determines whether tasks should be queued before executing the tasks.
	TaskQueueing TaskOptionsTaskQueueingPtrInput `pulumi:"taskQueueing"`
	// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
	TransferMode TaskOptionsTransferModePtrInput `pulumi:"transferMode"`
	// The user ID (UID) of the file's owner.
	Uid TaskOptionsUidPtrInput `pulumi:"uid"`
	// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
	VerifyMode TaskOptionsVerifyModePtrInput `pulumi:"verifyMode"`
}

func (TaskOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (i TaskOptionsArgs) ToTaskOptionsOutput() TaskOptionsOutput {
	return i.ToTaskOptionsOutputWithContext(context.Background())
}

func (i TaskOptionsArgs) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsOutput)
}

func (i TaskOptionsArgs) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return i.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (i TaskOptionsArgs) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsOutput).ToTaskOptionsPtrOutputWithContext(ctx)
}

// TaskOptionsPtrInput is an input type that accepts TaskOptionsArgs, TaskOptionsPtr and TaskOptionsPtrOutput values.
// You can construct a concrete instance of `TaskOptionsPtrInput` via:
//
//          TaskOptionsArgs{...}
//
//  or:
//
//          nil
type TaskOptionsPtrInput interface {
	pulumi.Input

	ToTaskOptionsPtrOutput() TaskOptionsPtrOutput
	ToTaskOptionsPtrOutputWithContext(context.Context) TaskOptionsPtrOutput
}

type taskOptionsPtrType TaskOptionsArgs

func TaskOptionsPtr(v *TaskOptionsArgs) TaskOptionsPtrInput {
	return (*taskOptionsPtrType)(v)
}

func (*taskOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskOptions)(nil)).Elem()
}

func (i *taskOptionsPtrType) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return i.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (i *taskOptionsPtrType) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOptionsPtrOutput)
}

// Represents the options that are available to control the behavior of a StartTaskExecution operation.
type TaskOptionsOutput struct{ *pulumi.OutputState }

func (TaskOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskOptions)(nil)).Elem()
}

func (o TaskOptionsOutput) ToTaskOptionsOutput() TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToTaskOptionsOutputWithContext(ctx context.Context) TaskOptionsOutput {
	return o
}

func (o TaskOptionsOutput) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return o.ToTaskOptionsPtrOutputWithContext(context.Background())
}

func (o TaskOptionsOutput) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskOptions) *TaskOptions {
		return &v
	}).(TaskOptionsPtrOutput)
}

// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
func (o TaskOptionsOutput) Atime() TaskOptionsAtimePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsAtime { return v.Atime }).(TaskOptionsAtimePtrOutput)
}

// A value that limits the bandwidth used by AWS DataSync.
func (o TaskOptionsOutput) BytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskOptions) *int { return v.BytesPerSecond }).(pulumi.IntPtrOutput)
}

// The group ID (GID) of the file's owners.
func (o TaskOptionsOutput) Gid() TaskOptionsGidPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsGid { return v.Gid }).(TaskOptionsGidPtrOutput)
}

// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
func (o TaskOptionsOutput) LogLevel() TaskOptionsLogLevelPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsLogLevel { return v.LogLevel }).(TaskOptionsLogLevelPtrOutput)
}

// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
func (o TaskOptionsOutput) Mtime() TaskOptionsMtimePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsMtime { return v.Mtime }).(TaskOptionsMtimePtrOutput)
}

// A value that determines whether files at the destination should be overwritten or preserved when copying files.
func (o TaskOptionsOutput) OverwriteMode() TaskOptionsOverwriteModePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsOverwriteMode { return v.OverwriteMode }).(TaskOptionsOverwriteModePtrOutput)
}

// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
func (o TaskOptionsOutput) PosixPermissions() TaskOptionsPosixPermissionsPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsPosixPermissions { return v.PosixPermissions }).(TaskOptionsPosixPermissionsPtrOutput)
}

// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
func (o TaskOptionsOutput) PreserveDeletedFiles() TaskOptionsPreserveDeletedFilesPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsPreserveDeletedFiles { return v.PreserveDeletedFiles }).(TaskOptionsPreserveDeletedFilesPtrOutput)
}

// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
func (o TaskOptionsOutput) PreserveDevices() TaskOptionsPreserveDevicesPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsPreserveDevices { return v.PreserveDevices }).(TaskOptionsPreserveDevicesPtrOutput)
}

// A value that determines which components of the SMB security descriptor are copied during transfer.
func (o TaskOptionsOutput) SecurityDescriptorCopyFlags() TaskOptionsSecurityDescriptorCopyFlagsPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsSecurityDescriptorCopyFlags { return v.SecurityDescriptorCopyFlags }).(TaskOptionsSecurityDescriptorCopyFlagsPtrOutput)
}

// A value that determines whether tasks should be queued before executing the tasks.
func (o TaskOptionsOutput) TaskQueueing() TaskOptionsTaskQueueingPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsTaskQueueing { return v.TaskQueueing }).(TaskOptionsTaskQueueingPtrOutput)
}

// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
func (o TaskOptionsOutput) TransferMode() TaskOptionsTransferModePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsTransferMode { return v.TransferMode }).(TaskOptionsTransferModePtrOutput)
}

// The user ID (UID) of the file's owner.
func (o TaskOptionsOutput) Uid() TaskOptionsUidPtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsUid { return v.Uid }).(TaskOptionsUidPtrOutput)
}

// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
func (o TaskOptionsOutput) VerifyMode() TaskOptionsVerifyModePtrOutput {
	return o.ApplyT(func(v TaskOptions) *TaskOptionsVerifyMode { return v.VerifyMode }).(TaskOptionsVerifyModePtrOutput)
}

type TaskOptionsPtrOutput struct{ *pulumi.OutputState }

func (TaskOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskOptions)(nil)).Elem()
}

func (o TaskOptionsPtrOutput) ToTaskOptionsPtrOutput() TaskOptionsPtrOutput {
	return o
}

func (o TaskOptionsPtrOutput) ToTaskOptionsPtrOutputWithContext(ctx context.Context) TaskOptionsPtrOutput {
	return o
}

func (o TaskOptionsPtrOutput) Elem() TaskOptionsOutput {
	return o.ApplyT(func(v *TaskOptions) TaskOptions {
		if v != nil {
			return *v
		}
		var ret TaskOptions
		return ret
	}).(TaskOptionsOutput)
}

// A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
func (o TaskOptionsPtrOutput) Atime() TaskOptionsAtimePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsAtime {
		if v == nil {
			return nil
		}
		return v.Atime
	}).(TaskOptionsAtimePtrOutput)
}

// A value that limits the bandwidth used by AWS DataSync.
func (o TaskOptionsPtrOutput) BytesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *int {
		if v == nil {
			return nil
		}
		return v.BytesPerSecond
	}).(pulumi.IntPtrOutput)
}

// The group ID (GID) of the file's owners.
func (o TaskOptionsPtrOutput) Gid() TaskOptionsGidPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsGid {
		if v == nil {
			return nil
		}
		return v.Gid
	}).(TaskOptionsGidPtrOutput)
}

// A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
func (o TaskOptionsPtrOutput) LogLevel() TaskOptionsLogLevelPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsLogLevel {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(TaskOptionsLogLevelPtrOutput)
}

// A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
func (o TaskOptionsPtrOutput) Mtime() TaskOptionsMtimePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsMtime {
		if v == nil {
			return nil
		}
		return v.Mtime
	}).(TaskOptionsMtimePtrOutput)
}

// A value that determines whether files at the destination should be overwritten or preserved when copying files.
func (o TaskOptionsPtrOutput) OverwriteMode() TaskOptionsOverwriteModePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsOverwriteMode {
		if v == nil {
			return nil
		}
		return v.OverwriteMode
	}).(TaskOptionsOverwriteModePtrOutput)
}

// A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
func (o TaskOptionsPtrOutput) PosixPermissions() TaskOptionsPosixPermissionsPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsPosixPermissions {
		if v == nil {
			return nil
		}
		return v.PosixPermissions
	}).(TaskOptionsPosixPermissionsPtrOutput)
}

// A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
func (o TaskOptionsPtrOutput) PreserveDeletedFiles() TaskOptionsPreserveDeletedFilesPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsPreserveDeletedFiles {
		if v == nil {
			return nil
		}
		return v.PreserveDeletedFiles
	}).(TaskOptionsPreserveDeletedFilesPtrOutput)
}

// A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
func (o TaskOptionsPtrOutput) PreserveDevices() TaskOptionsPreserveDevicesPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsPreserveDevices {
		if v == nil {
			return nil
		}
		return v.PreserveDevices
	}).(TaskOptionsPreserveDevicesPtrOutput)
}

// A value that determines which components of the SMB security descriptor are copied during transfer.
func (o TaskOptionsPtrOutput) SecurityDescriptorCopyFlags() TaskOptionsSecurityDescriptorCopyFlagsPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsSecurityDescriptorCopyFlags {
		if v == nil {
			return nil
		}
		return v.SecurityDescriptorCopyFlags
	}).(TaskOptionsSecurityDescriptorCopyFlagsPtrOutput)
}

// A value that determines whether tasks should be queued before executing the tasks.
func (o TaskOptionsPtrOutput) TaskQueueing() TaskOptionsTaskQueueingPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsTaskQueueing {
		if v == nil {
			return nil
		}
		return v.TaskQueueing
	}).(TaskOptionsTaskQueueingPtrOutput)
}

// A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
func (o TaskOptionsPtrOutput) TransferMode() TaskOptionsTransferModePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsTransferMode {
		if v == nil {
			return nil
		}
		return v.TransferMode
	}).(TaskOptionsTransferModePtrOutput)
}

// The user ID (UID) of the file's owner.
func (o TaskOptionsPtrOutput) Uid() TaskOptionsUidPtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsUid {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(TaskOptionsUidPtrOutput)
}

// A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
func (o TaskOptionsPtrOutput) VerifyMode() TaskOptionsVerifyModePtrOutput {
	return o.ApplyT(func(v *TaskOptions) *TaskOptionsVerifyMode {
		if v == nil {
			return nil
		}
		return v.VerifyMode
	}).(TaskOptionsVerifyModePtrOutput)
}

// Specifies the schedule you want your task to use for repeated executions.
type TaskSchedule struct {
	// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
	ScheduleExpression string `pulumi:"scheduleExpression"`
}

// TaskScheduleInput is an input type that accepts TaskScheduleArgs and TaskScheduleOutput values.
// You can construct a concrete instance of `TaskScheduleInput` via:
//
//          TaskScheduleArgs{...}
type TaskScheduleInput interface {
	pulumi.Input

	ToTaskScheduleOutput() TaskScheduleOutput
	ToTaskScheduleOutputWithContext(context.Context) TaskScheduleOutput
}

// Specifies the schedule you want your task to use for repeated executions.
type TaskScheduleArgs struct {
	// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
	ScheduleExpression pulumi.StringInput `pulumi:"scheduleExpression"`
}

func (TaskScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (i TaskScheduleArgs) ToTaskScheduleOutput() TaskScheduleOutput {
	return i.ToTaskScheduleOutputWithContext(context.Background())
}

func (i TaskScheduleArgs) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskScheduleOutput)
}

func (i TaskScheduleArgs) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return i.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (i TaskScheduleArgs) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskScheduleOutput).ToTaskSchedulePtrOutputWithContext(ctx)
}

// TaskSchedulePtrInput is an input type that accepts TaskScheduleArgs, TaskSchedulePtr and TaskSchedulePtrOutput values.
// You can construct a concrete instance of `TaskSchedulePtrInput` via:
//
//          TaskScheduleArgs{...}
//
//  or:
//
//          nil
type TaskSchedulePtrInput interface {
	pulumi.Input

	ToTaskSchedulePtrOutput() TaskSchedulePtrOutput
	ToTaskSchedulePtrOutputWithContext(context.Context) TaskSchedulePtrOutput
}

type taskSchedulePtrType TaskScheduleArgs

func TaskSchedulePtr(v *TaskScheduleArgs) TaskSchedulePtrInput {
	return (*taskSchedulePtrType)(v)
}

func (*taskSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedule)(nil)).Elem()
}

func (i *taskSchedulePtrType) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return i.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (i *taskSchedulePtrType) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulePtrOutput)
}

// Specifies the schedule you want your task to use for repeated executions.
type TaskScheduleOutput struct{ *pulumi.OutputState }

func (TaskScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedule)(nil)).Elem()
}

func (o TaskScheduleOutput) ToTaskScheduleOutput() TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToTaskScheduleOutputWithContext(ctx context.Context) TaskScheduleOutput {
	return o
}

func (o TaskScheduleOutput) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return o.ToTaskSchedulePtrOutputWithContext(context.Background())
}

func (o TaskScheduleOutput) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSchedule) *TaskSchedule {
		return &v
	}).(TaskSchedulePtrOutput)
}

// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
func (o TaskScheduleOutput) ScheduleExpression() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSchedule) string { return v.ScheduleExpression }).(pulumi.StringOutput)
}

type TaskSchedulePtrOutput struct{ *pulumi.OutputState }

func (TaskSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedule)(nil)).Elem()
}

func (o TaskSchedulePtrOutput) ToTaskSchedulePtrOutput() TaskSchedulePtrOutput {
	return o
}

func (o TaskSchedulePtrOutput) ToTaskSchedulePtrOutputWithContext(ctx context.Context) TaskSchedulePtrOutput {
	return o
}

func (o TaskSchedulePtrOutput) Elem() TaskScheduleOutput {
	return o.ApplyT(func(v *TaskSchedule) TaskSchedule {
		if v != nil {
			return *v
		}
		var ret TaskSchedule
		return ret
	}).(TaskScheduleOutput)
}

// A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
func (o TaskSchedulePtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type TaskTag struct {
	// The key for an AWS resource tag.
	Key string `pulumi:"key"`
	// The value for an AWS resource tag.
	Value string `pulumi:"value"`
}

// TaskTagInput is an input type that accepts TaskTagArgs and TaskTagOutput values.
// You can construct a concrete instance of `TaskTagInput` via:
//
//          TaskTagArgs{...}
type TaskTagInput interface {
	pulumi.Input

	ToTaskTagOutput() TaskTagOutput
	ToTaskTagOutputWithContext(context.Context) TaskTagOutput
}

// A key-value pair to associate with a resource.
type TaskTagArgs struct {
	// The key for an AWS resource tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for an AWS resource tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TaskTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTag)(nil)).Elem()
}

func (i TaskTagArgs) ToTaskTagOutput() TaskTagOutput {
	return i.ToTaskTagOutputWithContext(context.Background())
}

func (i TaskTagArgs) ToTaskTagOutputWithContext(ctx context.Context) TaskTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTagOutput)
}

// TaskTagArrayInput is an input type that accepts TaskTagArray and TaskTagArrayOutput values.
// You can construct a concrete instance of `TaskTagArrayInput` via:
//
//          TaskTagArray{ TaskTagArgs{...} }
type TaskTagArrayInput interface {
	pulumi.Input

	ToTaskTagArrayOutput() TaskTagArrayOutput
	ToTaskTagArrayOutputWithContext(context.Context) TaskTagArrayOutput
}

type TaskTagArray []TaskTagInput

func (TaskTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTag)(nil)).Elem()
}

func (i TaskTagArray) ToTaskTagArrayOutput() TaskTagArrayOutput {
	return i.ToTaskTagArrayOutputWithContext(context.Background())
}

func (i TaskTagArray) ToTaskTagArrayOutputWithContext(ctx context.Context) TaskTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskTagArrayOutput)
}

// A key-value pair to associate with a resource.
type TaskTagOutput struct{ *pulumi.OutputState }

func (TaskTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTag)(nil)).Elem()
}

func (o TaskTagOutput) ToTaskTagOutput() TaskTagOutput {
	return o
}

func (o TaskTagOutput) ToTaskTagOutputWithContext(ctx context.Context) TaskTagOutput {
	return o
}

// The key for an AWS resource tag.
func (o TaskTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for an AWS resource tag.
func (o TaskTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TaskTag) string { return v.Value }).(pulumi.StringOutput)
}

type TaskTagArrayOutput struct{ *pulumi.OutputState }

func (TaskTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskTag)(nil)).Elem()
}

func (o TaskTagArrayOutput) ToTaskTagArrayOutput() TaskTagArrayOutput {
	return o
}

func (o TaskTagArrayOutput) ToTaskTagArrayOutputWithContext(ctx context.Context) TaskTagArrayOutput {
	return o
}

func (o TaskTagArrayOutput) Index(i pulumi.IntInput) TaskTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskTag {
		return vs[0].([]TaskTag)[vs[1].(int)]
	}).(TaskTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgentTagInput)(nil)).Elem(), AgentTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgentTagArrayInput)(nil)).Elem(), AgentTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationEFSEc2ConfigInput)(nil)).Elem(), LocationEFSEc2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationEFSEc2ConfigPtrInput)(nil)).Elem(), LocationEFSEc2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationEFSTagInput)(nil)).Elem(), LocationEFSTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationEFSTagArrayInput)(nil)).Elem(), LocationEFSTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxWindowsTagInput)(nil)).Elem(), LocationFSxWindowsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxWindowsTagArrayInput)(nil)).Elem(), LocationFSxWindowsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNFSMountOptionsInput)(nil)).Elem(), LocationNFSMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNFSMountOptionsPtrInput)(nil)).Elem(), LocationNFSMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNFSOnPremConfigInput)(nil)).Elem(), LocationNFSOnPremConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNFSOnPremConfigPtrInput)(nil)).Elem(), LocationNFSOnPremConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNFSTagInput)(nil)).Elem(), LocationNFSTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNFSTagArrayInput)(nil)).Elem(), LocationNFSTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationObjectStorageTagInput)(nil)).Elem(), LocationObjectStorageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationObjectStorageTagArrayInput)(nil)).Elem(), LocationObjectStorageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationS3S3ConfigInput)(nil)).Elem(), LocationS3S3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationS3S3ConfigPtrInput)(nil)).Elem(), LocationS3S3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationS3TagInput)(nil)).Elem(), LocationS3TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationS3TagArrayInput)(nil)).Elem(), LocationS3TagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSMBMountOptionsInput)(nil)).Elem(), LocationSMBMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSMBMountOptionsPtrInput)(nil)).Elem(), LocationSMBMountOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSMBTagInput)(nil)).Elem(), LocationSMBTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationSMBTagArrayInput)(nil)).Elem(), LocationSMBTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskFilterRuleInput)(nil)).Elem(), TaskFilterRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskFilterRuleArrayInput)(nil)).Elem(), TaskFilterRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskOptionsInput)(nil)).Elem(), TaskOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskOptionsPtrInput)(nil)).Elem(), TaskOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskScheduleInput)(nil)).Elem(), TaskScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSchedulePtrInput)(nil)).Elem(), TaskScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTagInput)(nil)).Elem(), TaskTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskTagArrayInput)(nil)).Elem(), TaskTagArray{})
	pulumi.RegisterOutputType(AgentTagOutput{})
	pulumi.RegisterOutputType(AgentTagArrayOutput{})
	pulumi.RegisterOutputType(LocationEFSEc2ConfigOutput{})
	pulumi.RegisterOutputType(LocationEFSEc2ConfigPtrOutput{})
	pulumi.RegisterOutputType(LocationEFSTagOutput{})
	pulumi.RegisterOutputType(LocationEFSTagArrayOutput{})
	pulumi.RegisterOutputType(LocationFSxWindowsTagOutput{})
	pulumi.RegisterOutputType(LocationFSxWindowsTagArrayOutput{})
	pulumi.RegisterOutputType(LocationNFSMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationNFSMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationNFSOnPremConfigOutput{})
	pulumi.RegisterOutputType(LocationNFSOnPremConfigPtrOutput{})
	pulumi.RegisterOutputType(LocationNFSTagOutput{})
	pulumi.RegisterOutputType(LocationNFSTagArrayOutput{})
	pulumi.RegisterOutputType(LocationObjectStorageTagOutput{})
	pulumi.RegisterOutputType(LocationObjectStorageTagArrayOutput{})
	pulumi.RegisterOutputType(LocationS3S3ConfigOutput{})
	pulumi.RegisterOutputType(LocationS3S3ConfigPtrOutput{})
	pulumi.RegisterOutputType(LocationS3TagOutput{})
	pulumi.RegisterOutputType(LocationS3TagArrayOutput{})
	pulumi.RegisterOutputType(LocationSMBMountOptionsOutput{})
	pulumi.RegisterOutputType(LocationSMBMountOptionsPtrOutput{})
	pulumi.RegisterOutputType(LocationSMBTagOutput{})
	pulumi.RegisterOutputType(LocationSMBTagArrayOutput{})
	pulumi.RegisterOutputType(TaskFilterRuleOutput{})
	pulumi.RegisterOutputType(TaskFilterRuleArrayOutput{})
	pulumi.RegisterOutputType(TaskOptionsOutput{})
	pulumi.RegisterOutputType(TaskOptionsPtrOutput{})
	pulumi.RegisterOutputType(TaskScheduleOutput{})
	pulumi.RegisterOutputType(TaskSchedulePtrOutput{})
	pulumi.RegisterOutputType(TaskTagOutput{})
	pulumi.RegisterOutputType(TaskTagArrayOutput{})
}
