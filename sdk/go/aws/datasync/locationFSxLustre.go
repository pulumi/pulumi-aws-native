// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::LocationFSxLustre.
type LocationFSxLustre struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn pulumi.StringOutput `pulumi:"fsxFilesystemArn"`
	// The Amazon Resource Name (ARN) of the Amazon FSx for Lustre file system location that is created.
	LocationArn pulumi.StringOutput `pulumi:"locationArn"`
	// The URL of the FSx for Lustre location that was described.
	LocationUri pulumi.StringOutput `pulumi:"locationUri"`
	// The ARNs of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns pulumi.StringArrayOutput `pulumi:"securityGroupArns"`
	// A subdirectory in the location's path.
	Subdirectory pulumi.StringPtrOutput `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags LocationFSxLustreTagArrayOutput `pulumi:"tags"`
}

// NewLocationFSxLustre registers a new resource with the given unique name, arguments, and options.
func NewLocationFSxLustre(ctx *pulumi.Context,
	name string, args *LocationFSxLustreArgs, opts ...pulumi.ResourceOption) (*LocationFSxLustre, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FsxFilesystemArn == nil {
		return nil, errors.New("invalid value for required argument 'FsxFilesystemArn'")
	}
	if args.SecurityGroupArns == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupArns'")
	}
	var resource LocationFSxLustre
	err := ctx.RegisterResource("aws-native:datasync:LocationFSxLustre", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationFSxLustre gets an existing LocationFSxLustre resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationFSxLustre(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationFSxLustreState, opts ...pulumi.ResourceOption) (*LocationFSxLustre, error) {
	var resource LocationFSxLustre
	err := ctx.ReadResource("aws-native:datasync:LocationFSxLustre", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationFSxLustre resources.
type locationFSxLustreState struct {
}

type LocationFSxLustreState struct {
}

func (LocationFSxLustreState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFSxLustreState)(nil)).Elem()
}

type locationFSxLustreArgs struct {
	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn string `pulumi:"fsxFilesystemArn"`
	// The ARNs of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// A subdirectory in the location's path.
	Subdirectory *string `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationFSxLustreTag `pulumi:"tags"`
}

// The set of arguments for constructing a LocationFSxLustre resource.
type LocationFSxLustreArgs struct {
	// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
	FsxFilesystemArn pulumi.StringInput
	// The ARNs of the security groups that are to use to configure the FSx for Lustre file system.
	SecurityGroupArns pulumi.StringArrayInput
	// A subdirectory in the location's path.
	Subdirectory pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LocationFSxLustreTagArrayInput
}

func (LocationFSxLustreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationFSxLustreArgs)(nil)).Elem()
}

type LocationFSxLustreInput interface {
	pulumi.Input

	ToLocationFSxLustreOutput() LocationFSxLustreOutput
	ToLocationFSxLustreOutputWithContext(ctx context.Context) LocationFSxLustreOutput
}

func (*LocationFSxLustre) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxLustre)(nil)).Elem()
}

func (i *LocationFSxLustre) ToLocationFSxLustreOutput() LocationFSxLustreOutput {
	return i.ToLocationFSxLustreOutputWithContext(context.Background())
}

func (i *LocationFSxLustre) ToLocationFSxLustreOutputWithContext(ctx context.Context) LocationFSxLustreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationFSxLustreOutput)
}

type LocationFSxLustreOutput struct{ *pulumi.OutputState }

func (LocationFSxLustreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationFSxLustre)(nil)).Elem()
}

func (o LocationFSxLustreOutput) ToLocationFSxLustreOutput() LocationFSxLustreOutput {
	return o
}

func (o LocationFSxLustreOutput) ToLocationFSxLustreOutputWithContext(ctx context.Context) LocationFSxLustreOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationFSxLustreInput)(nil)).Elem(), &LocationFSxLustre{})
	pulumi.RegisterOutputType(LocationFSxLustreOutput{})
}
