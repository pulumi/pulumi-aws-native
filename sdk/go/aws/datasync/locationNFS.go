// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::LocationNFS
type LocationNFS struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the NFS location.
	LocationArn pulumi.StringOutput `pulumi:"locationArn"`
	// The URL of the NFS location that was described.
	LocationUri  pulumi.StringOutput              `pulumi:"locationUri"`
	MountOptions LocationNFSMountOptionsPtrOutput `pulumi:"mountOptions"`
	OnPremConfig LocationNFSOnPremConfigOutput    `pulumi:"onPremConfig"`
	// The name of the NFS server. This value is the IP address or DNS name of the NFS server.
	ServerHostname pulumi.StringOutput `pulumi:"serverHostname"`
	// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
	Subdirectory pulumi.StringOutput `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags LocationNFSTagArrayOutput `pulumi:"tags"`
}

// NewLocationNFS registers a new resource with the given unique name, arguments, and options.
func NewLocationNFS(ctx *pulumi.Context,
	name string, args *LocationNFSArgs, opts ...pulumi.ResourceOption) (*LocationNFS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OnPremConfig == nil {
		return nil, errors.New("invalid value for required argument 'OnPremConfig'")
	}
	if args.ServerHostname == nil {
		return nil, errors.New("invalid value for required argument 'ServerHostname'")
	}
	if args.Subdirectory == nil {
		return nil, errors.New("invalid value for required argument 'Subdirectory'")
	}
	var resource LocationNFS
	err := ctx.RegisterResource("aws-native:datasync:LocationNFS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationNFS gets an existing LocationNFS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationNFS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationNFSState, opts ...pulumi.ResourceOption) (*LocationNFS, error) {
	var resource LocationNFS
	err := ctx.ReadResource("aws-native:datasync:LocationNFS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationNFS resources.
type locationNFSState struct {
}

type LocationNFSState struct {
}

func (LocationNFSState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationNFSState)(nil)).Elem()
}

type locationNFSArgs struct {
	MountOptions *LocationNFSMountOptions `pulumi:"mountOptions"`
	OnPremConfig LocationNFSOnPremConfig  `pulumi:"onPremConfig"`
	// The name of the NFS server. This value is the IP address or DNS name of the NFS server.
	ServerHostname string `pulumi:"serverHostname"`
	// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
	Subdirectory string `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationNFSTag `pulumi:"tags"`
}

// The set of arguments for constructing a LocationNFS resource.
type LocationNFSArgs struct {
	MountOptions LocationNFSMountOptionsPtrInput
	OnPremConfig LocationNFSOnPremConfigInput
	// The name of the NFS server. This value is the IP address or DNS name of the NFS server.
	ServerHostname pulumi.StringInput
	// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
	Subdirectory pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags LocationNFSTagArrayInput
}

func (LocationNFSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationNFSArgs)(nil)).Elem()
}

type LocationNFSInput interface {
	pulumi.Input

	ToLocationNFSOutput() LocationNFSOutput
	ToLocationNFSOutputWithContext(ctx context.Context) LocationNFSOutput
}

func (*LocationNFS) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFS)(nil))
}

func (i *LocationNFS) ToLocationNFSOutput() LocationNFSOutput {
	return i.ToLocationNFSOutputWithContext(context.Background())
}

func (i *LocationNFS) ToLocationNFSOutputWithContext(ctx context.Context) LocationNFSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNFSOutput)
}

type LocationNFSOutput struct{ *pulumi.OutputState }

func (LocationNFSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationNFS)(nil))
}

func (o LocationNFSOutput) ToLocationNFSOutput() LocationNFSOutput {
	return o
}

func (o LocationNFSOutput) ToLocationNFSOutputWithContext(ctx context.Context) LocationNFSOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LocationNFSOutput{})
}
