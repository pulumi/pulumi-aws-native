// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::Task.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/datasync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasync.NewTask(ctx, "task", &datasync.TaskArgs{
//				SourceLocationArn:      pulumi.String("arn:aws:datasync:us-east-2:111222333444:location/loc-07db7abfc326c50s3"),
//				DestinationLocationArn: pulumi.String("arn:aws:datasync:us-east-2:111222333444:location/loc-18ec8bcgd437d61t4"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/datasync"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasync.NewTask(ctx, "task", &datasync.TaskArgs{
//				SourceLocationArn:      pulumi.String("arn:aws:datasync:us-east-2:111222333444:location/loc-07db7abfc326c50s3"),
//				DestinationLocationArn: pulumi.String("arn:aws:datasync:us-east-2:111222333444:location/loc-18ec8bcgd437d61t4"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Task struct {
	pulumi.CustomResourceState

	// The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
	CloudWatchLogGroupArn pulumi.StringPtrOutput `pulumi:"cloudWatchLogGroupArn"`
	// The ARN of an AWS storage resource's location.
	DestinationLocationArn pulumi.StringOutput `pulumi:"destinationLocationArn"`
	// The ARNs of the destination elastic network interfaces (ENIs) that were created for your subnet.
	DestinationNetworkInterfaceArns pulumi.StringArrayOutput `pulumi:"destinationNetworkInterfaceArns"`
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Excludes TaskFilterRuleArrayOutput `pulumi:"excludes"`
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Includes TaskFilterRuleArrayOutput `pulumi:"includes"`
	// Configures a manifest, which is a list of files or objects that you want AWS DataSync to transfer. For more information and configuration examples, see [Specifying what DataSync transfers by using a manifest](https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html) .
	ManifestConfig TaskManifestConfigPtrOutput `pulumi:"manifestConfig"`
	// The name of a task. This value is a text reference that is used to identify the task in the console.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. This behavior includes preserving metadata, such as user ID (UID), group ID (GID), and file permissions; overwriting files in the destination; data integrity verification; and so on.
	//
	// A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) , the default value is used. You can override the default options on each task execution by specifying an overriding `Options` value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) .
	Options TaskOptionsPtrOutput `pulumi:"options"`
	// Configures your AWS DataSync task to run on a [schedule](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html) (at a minimum interval of 1 hour).
	Schedule TaskSchedulePtrOutput `pulumi:"schedule"`
	// The ARN of the source location for the task.
	SourceLocationArn pulumi.StringOutput `pulumi:"sourceLocationArn"`
	// The ARNs of the source ENIs that were created for your subnet.
	SourceNetworkInterfaceArns pulumi.StringArrayOutput `pulumi:"sourceNetworkInterfaceArns"`
	// The status of the task that was described.
	Status TaskStatusOutput `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ARN of the task.
	TaskArn pulumi.StringOutput `pulumi:"taskArn"`
	// Specifies how you want to configure a task report, which provides detailed information about for your AWS DataSync transfer.
	//
	// For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html) .
	TaskReportConfig TaskReportConfigPtrOutput `pulumi:"taskReportConfig"`
}

// NewTask registers a new resource with the given unique name, arguments, and options.
func NewTask(ctx *pulumi.Context,
	name string, args *TaskArgs, opts ...pulumi.ResourceOption) (*Task, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationLocationArn == nil {
		return nil, errors.New("invalid value for required argument 'DestinationLocationArn'")
	}
	if args.SourceLocationArn == nil {
		return nil, errors.New("invalid value for required argument 'SourceLocationArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"destinationLocationArn",
		"sourceLocationArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Task
	err := ctx.RegisterResource("aws-native:datasync:Task", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTask gets an existing Task resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskState, opts ...pulumi.ResourceOption) (*Task, error) {
	var resource Task
	err := ctx.ReadResource("aws-native:datasync:Task", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Task resources.
type taskState struct {
}

type TaskState struct {
}

func (TaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskState)(nil)).Elem()
}

type taskArgs struct {
	// The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
	CloudWatchLogGroupArn *string `pulumi:"cloudWatchLogGroupArn"`
	// The ARN of an AWS storage resource's location.
	DestinationLocationArn string `pulumi:"destinationLocationArn"`
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Excludes []TaskFilterRule `pulumi:"excludes"`
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Includes []TaskFilterRule `pulumi:"includes"`
	// Configures a manifest, which is a list of files or objects that you want AWS DataSync to transfer. For more information and configuration examples, see [Specifying what DataSync transfers by using a manifest](https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html) .
	ManifestConfig *TaskManifestConfig `pulumi:"manifestConfig"`
	// The name of a task. This value is a text reference that is used to identify the task in the console.
	Name *string `pulumi:"name"`
	// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. This behavior includes preserving metadata, such as user ID (UID), group ID (GID), and file permissions; overwriting files in the destination; data integrity verification; and so on.
	//
	// A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) , the default value is used. You can override the default options on each task execution by specifying an overriding `Options` value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) .
	Options *TaskOptions `pulumi:"options"`
	// Configures your AWS DataSync task to run on a [schedule](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html) (at a minimum interval of 1 hour).
	Schedule *TaskSchedule `pulumi:"schedule"`
	// The ARN of the source location for the task.
	SourceLocationArn string `pulumi:"sourceLocationArn"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// Specifies how you want to configure a task report, which provides detailed information about for your AWS DataSync transfer.
	//
	// For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html) .
	TaskReportConfig *TaskReportConfig `pulumi:"taskReportConfig"`
}

// The set of arguments for constructing a Task resource.
type TaskArgs struct {
	// The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
	CloudWatchLogGroupArn pulumi.StringPtrInput
	// The ARN of an AWS storage resource's location.
	DestinationLocationArn pulumi.StringInput
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Excludes TaskFilterRuleArrayInput
	// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
	Includes TaskFilterRuleArrayInput
	// Configures a manifest, which is a list of files or objects that you want AWS DataSync to transfer. For more information and configuration examples, see [Specifying what DataSync transfers by using a manifest](https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html) .
	ManifestConfig TaskManifestConfigPtrInput
	// The name of a task. This value is a text reference that is used to identify the task in the console.
	Name pulumi.StringPtrInput
	// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. This behavior includes preserving metadata, such as user ID (UID), group ID (GID), and file permissions; overwriting files in the destination; data integrity verification; and so on.
	//
	// A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) , the default value is used. You can override the default options on each task execution by specifying an overriding `Options` value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) .
	Options TaskOptionsPtrInput
	// Configures your AWS DataSync task to run on a [schedule](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html) (at a minimum interval of 1 hour).
	Schedule TaskSchedulePtrInput
	// The ARN of the source location for the task.
	SourceLocationArn pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
	// Specifies how you want to configure a task report, which provides detailed information about for your AWS DataSync transfer.
	//
	// For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html) .
	TaskReportConfig TaskReportConfigPtrInput
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskArgs)(nil)).Elem()
}

type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(ctx context.Context) TaskOutput
}

func (*Task) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *Task) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i *Task) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

// The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
func (o TaskOutput) CloudWatchLogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.CloudWatchLogGroupArn }).(pulumi.StringPtrOutput)
}

// The ARN of an AWS storage resource's location.
func (o TaskOutput) DestinationLocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.DestinationLocationArn }).(pulumi.StringOutput)
}

// The ARNs of the destination elastic network interfaces (ENIs) that were created for your subnet.
func (o TaskOutput) DestinationNetworkInterfaceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Task) pulumi.StringArrayOutput { return v.DestinationNetworkInterfaceArns }).(pulumi.StringArrayOutput)
}

// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
func (o TaskOutput) Excludes() TaskFilterRuleArrayOutput {
	return o.ApplyT(func(v *Task) TaskFilterRuleArrayOutput { return v.Excludes }).(TaskFilterRuleArrayOutput)
}

// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
func (o TaskOutput) Includes() TaskFilterRuleArrayOutput {
	return o.ApplyT(func(v *Task) TaskFilterRuleArrayOutput { return v.Includes }).(TaskFilterRuleArrayOutput)
}

// Configures a manifest, which is a list of files or objects that you want AWS DataSync to transfer. For more information and configuration examples, see [Specifying what DataSync transfers by using a manifest](https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html) .
func (o TaskOutput) ManifestConfig() TaskManifestConfigPtrOutput {
	return o.ApplyT(func(v *Task) TaskManifestConfigPtrOutput { return v.ManifestConfig }).(TaskManifestConfigPtrOutput)
}

// The name of a task. This value is a text reference that is used to identify the task in the console.
func (o TaskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. This behavior includes preserving metadata, such as user ID (UID), group ID (GID), and file permissions; overwriting files in the destination; data integrity verification; and so on.
//
// A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) , the default value is used. You can override the default options on each task execution by specifying an overriding `Options` value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) .
func (o TaskOutput) Options() TaskOptionsPtrOutput {
	return o.ApplyT(func(v *Task) TaskOptionsPtrOutput { return v.Options }).(TaskOptionsPtrOutput)
}

// Configures your AWS DataSync task to run on a [schedule](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html) (at a minimum interval of 1 hour).
func (o TaskOutput) Schedule() TaskSchedulePtrOutput {
	return o.ApplyT(func(v *Task) TaskSchedulePtrOutput { return v.Schedule }).(TaskSchedulePtrOutput)
}

// The ARN of the source location for the task.
func (o TaskOutput) SourceLocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.SourceLocationArn }).(pulumi.StringOutput)
}

// The ARNs of the source ENIs that were created for your subnet.
func (o TaskOutput) SourceNetworkInterfaceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Task) pulumi.StringArrayOutput { return v.SourceNetworkInterfaceArns }).(pulumi.StringArrayOutput)
}

// The status of the task that was described.
func (o TaskOutput) Status() TaskStatusOutput {
	return o.ApplyT(func(v *Task) TaskStatusOutput { return v.Status }).(TaskStatusOutput)
}

// An array of key-value pairs to apply to this resource.
func (o TaskOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Task) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ARN of the task.
func (o TaskOutput) TaskArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Task) pulumi.StringOutput { return v.TaskArn }).(pulumi.StringOutput)
}

// Specifies how you want to configure a task report, which provides detailed information about for your AWS DataSync transfer.
//
// For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html) .
func (o TaskOutput) TaskReportConfig() TaskReportConfigPtrOutput {
	return o.ApplyT(func(v *Task) TaskReportConfigPtrOutput { return v.TaskReportConfig }).(TaskReportConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskInput)(nil)).Elem(), &Task{})
	pulumi.RegisterOutputType(TaskOutput{})
}
