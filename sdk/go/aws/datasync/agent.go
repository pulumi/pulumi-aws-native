// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::DataSync::Agent.
type Agent struct {
	pulumi.CustomResourceState

	// Activation key of the Agent.
	ActivationKey pulumi.StringOutput `pulumi:"activationKey"`
	// The DataSync Agent ARN.
	AgentArn pulumi.StringOutput `pulumi:"agentArn"`
	// The name configured for the agent. Text reference used to identify the agent in the console.
	AgentName pulumi.StringPtrOutput `pulumi:"agentName"`
	// The service endpoints that the agent will connect to.
	EndpointType AgentEndpointTypeOutput `pulumi:"endpointType"`
	// The ARNs of the security group used to protect your data transfer task subnets.
	SecurityGroupArns pulumi.StringArrayOutput `pulumi:"securityGroupArns"`
	// The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.
	SubnetArns pulumi.StringArrayOutput `pulumi:"subnetArns"`
	// An array of key-value pairs to apply to this resource.
	Tags AgentTagArrayOutput `pulumi:"tags"`
	// The ID of the VPC endpoint that the agent has access to.
	VpcEndpointId pulumi.StringPtrOutput `pulumi:"vpcEndpointId"`
}

// NewAgent registers a new resource with the given unique name, arguments, and options.
func NewAgent(ctx *pulumi.Context,
	name string, args *AgentArgs, opts ...pulumi.ResourceOption) (*Agent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActivationKey == nil {
		return nil, errors.New("invalid value for required argument 'ActivationKey'")
	}
	var resource Agent
	err := ctx.RegisterResource("aws-native:datasync:Agent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgent gets an existing Agent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentState, opts ...pulumi.ResourceOption) (*Agent, error) {
	var resource Agent
	err := ctx.ReadResource("aws-native:datasync:Agent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Agent resources.
type agentState struct {
}

type AgentState struct {
}

func (AgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentState)(nil)).Elem()
}

type agentArgs struct {
	// Activation key of the Agent.
	ActivationKey string `pulumi:"activationKey"`
	// The name configured for the agent. Text reference used to identify the agent in the console.
	AgentName *string `pulumi:"agentName"`
	// The ARNs of the security group used to protect your data transfer task subnets.
	SecurityGroupArns []string `pulumi:"securityGroupArns"`
	// The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.
	SubnetArns []string `pulumi:"subnetArns"`
	// An array of key-value pairs to apply to this resource.
	Tags []AgentTag `pulumi:"tags"`
	// The ID of the VPC endpoint that the agent has access to.
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
}

// The set of arguments for constructing a Agent resource.
type AgentArgs struct {
	// Activation key of the Agent.
	ActivationKey pulumi.StringInput
	// The name configured for the agent. Text reference used to identify the agent in the console.
	AgentName pulumi.StringPtrInput
	// The ARNs of the security group used to protect your data transfer task subnets.
	SecurityGroupArns pulumi.StringArrayInput
	// The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.
	SubnetArns pulumi.StringArrayInput
	// An array of key-value pairs to apply to this resource.
	Tags AgentTagArrayInput
	// The ID of the VPC endpoint that the agent has access to.
	VpcEndpointId pulumi.StringPtrInput
}

func (AgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentArgs)(nil)).Elem()
}

type AgentInput interface {
	pulumi.Input

	ToAgentOutput() AgentOutput
	ToAgentOutputWithContext(ctx context.Context) AgentOutput
}

func (*Agent) ElementType() reflect.Type {
	return reflect.TypeOf((*Agent)(nil))
}

func (i *Agent) ToAgentOutput() AgentOutput {
	return i.ToAgentOutputWithContext(context.Background())
}

func (i *Agent) ToAgentOutputWithContext(ctx context.Context) AgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentOutput)
}

type AgentOutput struct{ *pulumi.OutputState }

func (AgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Agent)(nil))
}

func (o AgentOutput) ToAgentOutput() AgentOutput {
	return o
}

func (o AgentOutput) ToAgentOutputWithContext(ctx context.Context) AgentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AgentOutput{})
}
