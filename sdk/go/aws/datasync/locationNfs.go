// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource schema for AWS::DataSync::LocationNFS
type LocationNfs struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the NFS location.
	LocationArn pulumi.StringOutput `pulumi:"locationArn"`
	// The URL of the NFS location that was described.
	LocationUri  pulumi.StringOutput              `pulumi:"locationUri"`
	MountOptions LocationNfsMountOptionsPtrOutput `pulumi:"mountOptions"`
	OnPremConfig LocationNfsOnPremConfigOutput    `pulumi:"onPremConfig"`
	// The name of the NFS server. This value is the IP address or DNS name of the NFS server.
	ServerHostname pulumi.StringPtrOutput `pulumi:"serverHostname"`
	// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
	Subdirectory pulumi.StringPtrOutput `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags LocationNfsTagArrayOutput `pulumi:"tags"`
}

// NewLocationNfs registers a new resource with the given unique name, arguments, and options.
func NewLocationNfs(ctx *pulumi.Context,
	name string, args *LocationNfsArgs, opts ...pulumi.ResourceOption) (*LocationNfs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OnPremConfig == nil {
		return nil, errors.New("invalid value for required argument 'OnPremConfig'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"serverHostname",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationNfs
	err := ctx.RegisterResource("aws-native:datasync:LocationNfs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationNfs gets an existing LocationNfs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationNfs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationNfsState, opts ...pulumi.ResourceOption) (*LocationNfs, error) {
	var resource LocationNfs
	err := ctx.ReadResource("aws-native:datasync:LocationNfs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationNfs resources.
type locationNfsState struct {
}

type LocationNfsState struct {
}

func (LocationNfsState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationNfsState)(nil)).Elem()
}

type locationNfsArgs struct {
	MountOptions *LocationNfsMountOptions `pulumi:"mountOptions"`
	OnPremConfig LocationNfsOnPremConfig  `pulumi:"onPremConfig"`
	// The name of the NFS server. This value is the IP address or DNS name of the NFS server.
	ServerHostname *string `pulumi:"serverHostname"`
	// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
	Subdirectory *string `pulumi:"subdirectory"`
	// An array of key-value pairs to apply to this resource.
	Tags []LocationNfsTag `pulumi:"tags"`
}

// The set of arguments for constructing a LocationNfs resource.
type LocationNfsArgs struct {
	MountOptions LocationNfsMountOptionsPtrInput
	OnPremConfig LocationNfsOnPremConfigInput
	// The name of the NFS server. This value is the IP address or DNS name of the NFS server.
	ServerHostname pulumi.StringPtrInput
	// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
	Subdirectory pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LocationNfsTagArrayInput
}

func (LocationNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationNfsArgs)(nil)).Elem()
}

type LocationNfsInput interface {
	pulumi.Input

	ToLocationNfsOutput() LocationNfsOutput
	ToLocationNfsOutputWithContext(ctx context.Context) LocationNfsOutput
}

func (*LocationNfs) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNfs)(nil)).Elem()
}

func (i *LocationNfs) ToLocationNfsOutput() LocationNfsOutput {
	return i.ToLocationNfsOutputWithContext(context.Background())
}

func (i *LocationNfs) ToLocationNfsOutputWithContext(ctx context.Context) LocationNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationNfsOutput)
}

func (i *LocationNfs) ToOutput(ctx context.Context) pulumix.Output[*LocationNfs] {
	return pulumix.Output[*LocationNfs]{
		OutputState: i.ToLocationNfsOutputWithContext(ctx).OutputState,
	}
}

type LocationNfsOutput struct{ *pulumi.OutputState }

func (LocationNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationNfs)(nil)).Elem()
}

func (o LocationNfsOutput) ToLocationNfsOutput() LocationNfsOutput {
	return o
}

func (o LocationNfsOutput) ToLocationNfsOutputWithContext(ctx context.Context) LocationNfsOutput {
	return o
}

func (o LocationNfsOutput) ToOutput(ctx context.Context) pulumix.Output[*LocationNfs] {
	return pulumix.Output[*LocationNfs]{
		OutputState: o.OutputState,
	}
}

// The Amazon Resource Name (ARN) of the NFS location.
func (o LocationNfsOutput) LocationArn() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationNfs) pulumi.StringOutput { return v.LocationArn }).(pulumi.StringOutput)
}

// The URL of the NFS location that was described.
func (o LocationNfsOutput) LocationUri() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationNfs) pulumi.StringOutput { return v.LocationUri }).(pulumi.StringOutput)
}

func (o LocationNfsOutput) MountOptions() LocationNfsMountOptionsPtrOutput {
	return o.ApplyT(func(v *LocationNfs) LocationNfsMountOptionsPtrOutput { return v.MountOptions }).(LocationNfsMountOptionsPtrOutput)
}

func (o LocationNfsOutput) OnPremConfig() LocationNfsOnPremConfigOutput {
	return o.ApplyT(func(v *LocationNfs) LocationNfsOnPremConfigOutput { return v.OnPremConfig }).(LocationNfsOnPremConfigOutput)
}

// The name of the NFS server. This value is the IP address or DNS name of the NFS server.
func (o LocationNfsOutput) ServerHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationNfs) pulumi.StringPtrOutput { return v.ServerHostname }).(pulumi.StringPtrOutput)
}

// The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
func (o LocationNfsOutput) Subdirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationNfs) pulumi.StringPtrOutput { return v.Subdirectory }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LocationNfsOutput) Tags() LocationNfsTagArrayOutput {
	return o.ApplyT(func(v *LocationNfs) LocationNfsTagArrayOutput { return v.Tags }).(LocationNfsTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationNfsInput)(nil)).Elem(), &LocationNfs{})
	pulumi.RegisterOutputType(LocationNfsOutput{})
}
