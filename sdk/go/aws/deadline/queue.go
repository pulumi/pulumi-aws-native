// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::Queue Resource Type
type Queue struct {
	pulumi.CustomResourceState

	AllowedStorageProfileIds        pulumi.StringArrayOutput               `pulumi:"allowedStorageProfileIds"`
	Arn                             pulumi.StringOutput                    `pulumi:"arn"`
	DefaultBudgetAction             QueueDefaultQueueBudgetActionPtrOutput `pulumi:"defaultBudgetAction"`
	Description                     pulumi.StringPtrOutput                 `pulumi:"description"`
	DisplayName                     pulumi.StringOutput                    `pulumi:"displayName"`
	FarmId                          pulumi.StringPtrOutput                 `pulumi:"farmId"`
	JobAttachmentSettings           QueueJobAttachmentSettingsPtrOutput    `pulumi:"jobAttachmentSettings"`
	JobRunAsUser                    QueueJobRunAsUserPtrOutput             `pulumi:"jobRunAsUser"`
	QueueId                         pulumi.StringOutput                    `pulumi:"queueId"`
	RequiredFileSystemLocationNames pulumi.StringArrayOutput               `pulumi:"requiredFileSystemLocationNames"`
	RoleArn                         pulumi.StringPtrOutput                 `pulumi:"roleArn"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"farmId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queue
	err := ctx.RegisterResource("aws-native:deadline:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("aws-native:deadline:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
}

type QueueState struct {
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	AllowedStorageProfileIds        []string                       `pulumi:"allowedStorageProfileIds"`
	DefaultBudgetAction             *QueueDefaultQueueBudgetAction `pulumi:"defaultBudgetAction"`
	Description                     *string                        `pulumi:"description"`
	DisplayName                     string                         `pulumi:"displayName"`
	FarmId                          *string                        `pulumi:"farmId"`
	JobAttachmentSettings           *QueueJobAttachmentSettings    `pulumi:"jobAttachmentSettings"`
	JobRunAsUser                    *QueueJobRunAsUser             `pulumi:"jobRunAsUser"`
	RequiredFileSystemLocationNames []string                       `pulumi:"requiredFileSystemLocationNames"`
	RoleArn                         *string                        `pulumi:"roleArn"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	AllowedStorageProfileIds        pulumi.StringArrayInput
	DefaultBudgetAction             QueueDefaultQueueBudgetActionPtrInput
	Description                     pulumi.StringPtrInput
	DisplayName                     pulumi.StringInput
	FarmId                          pulumi.StringPtrInput
	JobAttachmentSettings           QueueJobAttachmentSettingsPtrInput
	JobRunAsUser                    QueueJobRunAsUserPtrInput
	RequiredFileSystemLocationNames pulumi.StringArrayInput
	RoleArn                         pulumi.StringPtrInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

func (o QueueOutput) AllowedStorageProfileIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringArrayOutput { return v.AllowedStorageProfileIds }).(pulumi.StringArrayOutput)
}

func (o QueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o QueueOutput) DefaultBudgetAction() QueueDefaultQueueBudgetActionPtrOutput {
	return o.ApplyT(func(v *Queue) QueueDefaultQueueBudgetActionPtrOutput { return v.DefaultBudgetAction }).(QueueDefaultQueueBudgetActionPtrOutput)
}

func (o QueueOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o QueueOutput) FarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.FarmId }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) JobAttachmentSettings() QueueJobAttachmentSettingsPtrOutput {
	return o.ApplyT(func(v *Queue) QueueJobAttachmentSettingsPtrOutput { return v.JobAttachmentSettings }).(QueueJobAttachmentSettingsPtrOutput)
}

func (o QueueOutput) JobRunAsUser() QueueJobRunAsUserPtrOutput {
	return o.ApplyT(func(v *Queue) QueueJobRunAsUserPtrOutput { return v.JobRunAsUser }).(QueueJobRunAsUserPtrOutput)
}

func (o QueueOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

func (o QueueOutput) RequiredFileSystemLocationNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringArrayOutput { return v.RequiredFileSystemLocationNames }).(pulumi.StringArrayOutput)
}

func (o QueueOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterOutputType(QueueOutput{})
}
