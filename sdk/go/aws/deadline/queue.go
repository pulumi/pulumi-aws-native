// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::Queue Resource Type
type Queue struct {
	pulumi.CustomResourceState

	// The identifiers of the storage profiles that this queue can use to share assets between workers using different operating systems.
	AllowedStorageProfileIds pulumi.StringArrayOutput `pulumi:"allowedStorageProfileIds"`
	// The Amazon Resource Name (ARN) of the queue.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The default action taken on a queue summary if a budget wasn't configured.
	DefaultBudgetAction QueueDefaultQueueBudgetActionPtrOutput `pulumi:"defaultBudgetAction"`
	// A description of the queue that helps identify what the queue is used for.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the queue summary to update.
	//
	// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The farm ID.
	FarmId pulumi.StringOutput `pulumi:"farmId"`
	// The job attachment settings. These are the Amazon S3 bucket name and the Amazon S3 prefix.
	JobAttachmentSettings QueueJobAttachmentSettingsPtrOutput `pulumi:"jobAttachmentSettings"`
	// Identifies the user for a job.
	JobRunAsUser QueueJobRunAsUserPtrOutput `pulumi:"jobRunAsUser"`
	// The queue ID.
	QueueId pulumi.StringOutput `pulumi:"queueId"`
	// The file system location that the queue uses.
	RequiredFileSystemLocationNames pulumi.StringArrayOutput `pulumi:"requiredFileSystemLocationNames"`
	// The Amazon Resource Name (ARN) of the IAM role that workers use when running jobs in this queue.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"farmId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queue
	err := ctx.RegisterResource("aws-native:deadline:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("aws-native:deadline:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
}

type QueueState struct {
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	// The identifiers of the storage profiles that this queue can use to share assets between workers using different operating systems.
	AllowedStorageProfileIds []string `pulumi:"allowedStorageProfileIds"`
	// The default action taken on a queue summary if a budget wasn't configured.
	DefaultBudgetAction *QueueDefaultQueueBudgetAction `pulumi:"defaultBudgetAction"`
	// A description of the queue that helps identify what the queue is used for.
	Description *string `pulumi:"description"`
	// The display name of the queue summary to update.
	//
	// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
	DisplayName string `pulumi:"displayName"`
	// The farm ID.
	FarmId string `pulumi:"farmId"`
	// The job attachment settings. These are the Amazon S3 bucket name and the Amazon S3 prefix.
	JobAttachmentSettings *QueueJobAttachmentSettings `pulumi:"jobAttachmentSettings"`
	// Identifies the user for a job.
	JobRunAsUser *QueueJobRunAsUser `pulumi:"jobRunAsUser"`
	// The file system location that the queue uses.
	RequiredFileSystemLocationNames []string `pulumi:"requiredFileSystemLocationNames"`
	// The Amazon Resource Name (ARN) of the IAM role that workers use when running jobs in this queue.
	RoleArn *string `pulumi:"roleArn"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	// The identifiers of the storage profiles that this queue can use to share assets between workers using different operating systems.
	AllowedStorageProfileIds pulumi.StringArrayInput
	// The default action taken on a queue summary if a budget wasn't configured.
	DefaultBudgetAction QueueDefaultQueueBudgetActionPtrInput
	// A description of the queue that helps identify what the queue is used for.
	Description pulumi.StringPtrInput
	// The display name of the queue summary to update.
	//
	// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
	DisplayName pulumi.StringInput
	// The farm ID.
	FarmId pulumi.StringInput
	// The job attachment settings. These are the Amazon S3 bucket name and the Amazon S3 prefix.
	JobAttachmentSettings QueueJobAttachmentSettingsPtrInput
	// Identifies the user for a job.
	JobRunAsUser QueueJobRunAsUserPtrInput
	// The file system location that the queue uses.
	RequiredFileSystemLocationNames pulumi.StringArrayInput
	// The Amazon Resource Name (ARN) of the IAM role that workers use when running jobs in this queue.
	RoleArn pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

// The identifiers of the storage profiles that this queue can use to share assets between workers using different operating systems.
func (o QueueOutput) AllowedStorageProfileIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringArrayOutput { return v.AllowedStorageProfileIds }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the queue.
func (o QueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The default action taken on a queue summary if a budget wasn't configured.
func (o QueueOutput) DefaultBudgetAction() QueueDefaultQueueBudgetActionPtrOutput {
	return o.ApplyT(func(v *Queue) QueueDefaultQueueBudgetActionPtrOutput { return v.DefaultBudgetAction }).(QueueDefaultQueueBudgetActionPtrOutput)
}

// A description of the queue that helps identify what the queue is used for.
func (o QueueOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the queue summary to update.
//
// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
func (o QueueOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The farm ID.
func (o QueueOutput) FarmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.FarmId }).(pulumi.StringOutput)
}

// The job attachment settings. These are the Amazon S3 bucket name and the Amazon S3 prefix.
func (o QueueOutput) JobAttachmentSettings() QueueJobAttachmentSettingsPtrOutput {
	return o.ApplyT(func(v *Queue) QueueJobAttachmentSettingsPtrOutput { return v.JobAttachmentSettings }).(QueueJobAttachmentSettingsPtrOutput)
}

// Identifies the user for a job.
func (o QueueOutput) JobRunAsUser() QueueJobRunAsUserPtrOutput {
	return o.ApplyT(func(v *Queue) QueueJobRunAsUserPtrOutput { return v.JobRunAsUser }).(QueueJobRunAsUserPtrOutput)
}

// The queue ID.
func (o QueueOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

// The file system location that the queue uses.
func (o QueueOutput) RequiredFileSystemLocationNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringArrayOutput { return v.RequiredFileSystemLocationNames }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that workers use when running jobs in this queue.
func (o QueueOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o QueueOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Queue) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterOutputType(QueueOutput{})
}
