// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::QueueEnvironment Resource Type
type QueueEnvironment struct {
	pulumi.CustomResourceState

	FarmId             pulumi.StringOutput                           `pulumi:"farmId"`
	Name               pulumi.StringOutput                           `pulumi:"name"`
	Priority           pulumi.IntOutput                              `pulumi:"priority"`
	QueueEnvironmentId pulumi.StringOutput                           `pulumi:"queueEnvironmentId"`
	QueueId            pulumi.StringOutput                           `pulumi:"queueId"`
	Template           pulumi.StringOutput                           `pulumi:"template"`
	TemplateType       QueueEnvironmentEnvironmentTemplateTypeOutput `pulumi:"templateType"`
}

// NewQueueEnvironment registers a new resource with the given unique name, arguments, and options.
func NewQueueEnvironment(ctx *pulumi.Context,
	name string, args *QueueEnvironmentArgs, opts ...pulumi.ResourceOption) (*QueueEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.QueueId == nil {
		return nil, errors.New("invalid value for required argument 'QueueId'")
	}
	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	if args.TemplateType == nil {
		return nil, errors.New("invalid value for required argument 'TemplateType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"farmId",
		"queueId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueueEnvironment
	err := ctx.RegisterResource("aws-native:deadline:QueueEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueEnvironment gets an existing QueueEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueEnvironmentState, opts ...pulumi.ResourceOption) (*QueueEnvironment, error) {
	var resource QueueEnvironment
	err := ctx.ReadResource("aws-native:deadline:QueueEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueEnvironment resources.
type queueEnvironmentState struct {
}

type QueueEnvironmentState struct {
}

func (QueueEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueEnvironmentState)(nil)).Elem()
}

type queueEnvironmentArgs struct {
	FarmId       string                                  `pulumi:"farmId"`
	Priority     int                                     `pulumi:"priority"`
	QueueId      string                                  `pulumi:"queueId"`
	Template     string                                  `pulumi:"template"`
	TemplateType QueueEnvironmentEnvironmentTemplateType `pulumi:"templateType"`
}

// The set of arguments for constructing a QueueEnvironment resource.
type QueueEnvironmentArgs struct {
	FarmId       pulumi.StringInput
	Priority     pulumi.IntInput
	QueueId      pulumi.StringInput
	Template     pulumi.StringInput
	TemplateType QueueEnvironmentEnvironmentTemplateTypeInput
}

func (QueueEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueEnvironmentArgs)(nil)).Elem()
}

type QueueEnvironmentInput interface {
	pulumi.Input

	ToQueueEnvironmentOutput() QueueEnvironmentOutput
	ToQueueEnvironmentOutputWithContext(ctx context.Context) QueueEnvironmentOutput
}

func (*QueueEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueEnvironment)(nil)).Elem()
}

func (i *QueueEnvironment) ToQueueEnvironmentOutput() QueueEnvironmentOutput {
	return i.ToQueueEnvironmentOutputWithContext(context.Background())
}

func (i *QueueEnvironment) ToQueueEnvironmentOutputWithContext(ctx context.Context) QueueEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueEnvironmentOutput)
}

type QueueEnvironmentOutput struct{ *pulumi.OutputState }

func (QueueEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueEnvironment)(nil)).Elem()
}

func (o QueueEnvironmentOutput) ToQueueEnvironmentOutput() QueueEnvironmentOutput {
	return o
}

func (o QueueEnvironmentOutput) ToQueueEnvironmentOutputWithContext(ctx context.Context) QueueEnvironmentOutput {
	return o
}

func (o QueueEnvironmentOutput) FarmId() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueEnvironment) pulumi.StringOutput { return v.FarmId }).(pulumi.StringOutput)
}

func (o QueueEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QueueEnvironmentOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *QueueEnvironment) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o QueueEnvironmentOutput) QueueEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueEnvironment) pulumi.StringOutput { return v.QueueEnvironmentId }).(pulumi.StringOutput)
}

func (o QueueEnvironmentOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueEnvironment) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

func (o QueueEnvironmentOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueEnvironment) pulumi.StringOutput { return v.Template }).(pulumi.StringOutput)
}

func (o QueueEnvironmentOutput) TemplateType() QueueEnvironmentEnvironmentTemplateTypeOutput {
	return o.ApplyT(func(v *QueueEnvironment) QueueEnvironmentEnvironmentTemplateTypeOutput { return v.TemplateType }).(QueueEnvironmentEnvironmentTemplateTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueEnvironmentInput)(nil)).Elem(), &QueueEnvironment{})
	pulumi.RegisterOutputType(QueueEnvironmentOutput{})
}
