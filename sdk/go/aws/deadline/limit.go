// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::Limit Resource Type
type Limit struct {
	pulumi.CustomResourceState

	AmountRequirementName pulumi.StringOutput    `pulumi:"amountRequirementName"`
	CurrentCount          pulumi.IntOutput       `pulumi:"currentCount"`
	Description           pulumi.StringPtrOutput `pulumi:"description"`
	DisplayName           pulumi.StringOutput    `pulumi:"displayName"`
	FarmId                pulumi.StringOutput    `pulumi:"farmId"`
	LimitId               pulumi.StringOutput    `pulumi:"limitId"`
	MaxCount              pulumi.IntOutput       `pulumi:"maxCount"`
}

// NewLimit registers a new resource with the given unique name, arguments, and options.
func NewLimit(ctx *pulumi.Context,
	name string, args *LimitArgs, opts ...pulumi.ResourceOption) (*Limit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AmountRequirementName == nil {
		return nil, errors.New("invalid value for required argument 'AmountRequirementName'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.MaxCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxCount'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"amountRequirementName",
		"farmId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Limit
	err := ctx.RegisterResource("aws-native:deadline:Limit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLimit gets an existing Limit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LimitState, opts ...pulumi.ResourceOption) (*Limit, error) {
	var resource Limit
	err := ctx.ReadResource("aws-native:deadline:Limit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Limit resources.
type limitState struct {
}

type LimitState struct {
}

func (LimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*limitState)(nil)).Elem()
}

type limitArgs struct {
	AmountRequirementName string  `pulumi:"amountRequirementName"`
	Description           *string `pulumi:"description"`
	DisplayName           string  `pulumi:"displayName"`
	FarmId                string  `pulumi:"farmId"`
	MaxCount              int     `pulumi:"maxCount"`
}

// The set of arguments for constructing a Limit resource.
type LimitArgs struct {
	AmountRequirementName pulumi.StringInput
	Description           pulumi.StringPtrInput
	DisplayName           pulumi.StringInput
	FarmId                pulumi.StringInput
	MaxCount              pulumi.IntInput
}

func (LimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*limitArgs)(nil)).Elem()
}

type LimitInput interface {
	pulumi.Input

	ToLimitOutput() LimitOutput
	ToLimitOutputWithContext(ctx context.Context) LimitOutput
}

func (*Limit) ElementType() reflect.Type {
	return reflect.TypeOf((**Limit)(nil)).Elem()
}

func (i *Limit) ToLimitOutput() LimitOutput {
	return i.ToLimitOutputWithContext(context.Background())
}

func (i *Limit) ToLimitOutputWithContext(ctx context.Context) LimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitOutput)
}

type LimitOutput struct{ *pulumi.OutputState }

func (LimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Limit)(nil)).Elem()
}

func (o LimitOutput) ToLimitOutput() LimitOutput {
	return o
}

func (o LimitOutput) ToLimitOutputWithContext(ctx context.Context) LimitOutput {
	return o
}

func (o LimitOutput) AmountRequirementName() pulumi.StringOutput {
	return o.ApplyT(func(v *Limit) pulumi.StringOutput { return v.AmountRequirementName }).(pulumi.StringOutput)
}

func (o LimitOutput) CurrentCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Limit) pulumi.IntOutput { return v.CurrentCount }).(pulumi.IntOutput)
}

func (o LimitOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Limit) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LimitOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Limit) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LimitOutput) FarmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Limit) pulumi.StringOutput { return v.FarmId }).(pulumi.StringOutput)
}

func (o LimitOutput) LimitId() pulumi.StringOutput {
	return o.ApplyT(func(v *Limit) pulumi.StringOutput { return v.LimitId }).(pulumi.StringOutput)
}

func (o LimitOutput) MaxCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Limit) pulumi.IntOutput { return v.MaxCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LimitInput)(nil)).Elem(), &Limit{})
	pulumi.RegisterOutputType(LimitOutput{})
}
