// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::Limit Resource Type
func LookupLimit(ctx *pulumi.Context, args *LookupLimitArgs, opts ...pulumi.InvokeOption) (*LookupLimitResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLimitResult
	err := ctx.Invoke("aws-native:deadline:getLimit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLimitArgs struct {
	// The unique identifier of the farm that contains the limit.
	FarmId string `pulumi:"farmId"`
	// The unique identifier of the limit.
	LimitId string `pulumi:"limitId"`
}

type LookupLimitResult struct {
	// The number of resources from the limit that are being used by jobs. The result is delayed and may not be the count at the time that you called the operation.
	CurrentCount *int `pulumi:"currentCount"`
	// A description of the limit. A clear description helps you identify the purpose of the limit.
	//
	// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
	Description *string `pulumi:"description"`
	// The name of the limit used in lists to identify the limit.
	//
	// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
	DisplayName *string `pulumi:"displayName"`
	// The unique identifier of the limit.
	LimitId *string `pulumi:"limitId"`
	// The maximum number of resources constrained by this limit. When all of the resources are in use, steps that require the limit won't be scheduled until the resource is available.
	//
	// The `maxValue` must not be 0. If the value is -1, there is no restriction on the number of resources that can be acquired for this limit.
	MaxCount *int `pulumi:"maxCount"`
}

func LookupLimitOutput(ctx *pulumi.Context, args LookupLimitOutputArgs, opts ...pulumi.InvokeOption) LookupLimitResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLimitResultOutput, error) {
			args := v.(LookupLimitArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:deadline:getLimit", args, LookupLimitResultOutput{}, options).(LookupLimitResultOutput), nil
		}).(LookupLimitResultOutput)
}

type LookupLimitOutputArgs struct {
	// The unique identifier of the farm that contains the limit.
	FarmId pulumi.StringInput `pulumi:"farmId"`
	// The unique identifier of the limit.
	LimitId pulumi.StringInput `pulumi:"limitId"`
}

func (LookupLimitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLimitArgs)(nil)).Elem()
}

type LookupLimitResultOutput struct{ *pulumi.OutputState }

func (LookupLimitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLimitResult)(nil)).Elem()
}

func (o LookupLimitResultOutput) ToLookupLimitResultOutput() LookupLimitResultOutput {
	return o
}

func (o LookupLimitResultOutput) ToLookupLimitResultOutputWithContext(ctx context.Context) LookupLimitResultOutput {
	return o
}

// The number of resources from the limit that are being used by jobs. The result is delayed and may not be the count at the time that you called the operation.
func (o LookupLimitResultOutput) CurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupLimitResult) *int { return v.CurrentCount }).(pulumi.IntPtrOutput)
}

// A description of the limit. A clear description helps you identify the purpose of the limit.
//
// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
func (o LookupLimitResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLimitResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the limit used in lists to identify the limit.
//
// > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
func (o LookupLimitResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLimitResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier of the limit.
func (o LookupLimitResultOutput) LimitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLimitResult) *string { return v.LimitId }).(pulumi.StringPtrOutput)
}

// The maximum number of resources constrained by this limit. When all of the resources are in use, steps that require the limit won't be scheduled until the resource is available.
//
// The `maxValue` must not be 0. If the value is -1, there is no restriction on the number of resources that can be acquired for this limit.
func (o LookupLimitResultOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupLimitResult) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLimitResultOutput{})
}
