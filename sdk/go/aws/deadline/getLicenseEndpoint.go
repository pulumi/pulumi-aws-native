// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::LicenseEndpoint Resource Type
func LookupLicenseEndpoint(ctx *pulumi.Context, args *LookupLicenseEndpointArgs, opts ...pulumi.InvokeOption) (*LookupLicenseEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLicenseEndpointResult
	err := ctx.Invoke("aws-native:deadline:getLicenseEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLicenseEndpointArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupLicenseEndpointResult struct {
	Arn               *string                `pulumi:"arn"`
	DnsName           *string                `pulumi:"dnsName"`
	LicenseEndpointId *string                `pulumi:"licenseEndpointId"`
	Status            *LicenseEndpointStatus `pulumi:"status"`
	StatusMessage     *string                `pulumi:"statusMessage"`
}

func LookupLicenseEndpointOutput(ctx *pulumi.Context, args LookupLicenseEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupLicenseEndpointResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLicenseEndpointResult, error) {
			args := v.(LookupLicenseEndpointArgs)
			r, err := LookupLicenseEndpoint(ctx, &args, opts...)
			var s LookupLicenseEndpointResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLicenseEndpointResultOutput)
}

type LookupLicenseEndpointOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupLicenseEndpointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseEndpointArgs)(nil)).Elem()
}

type LookupLicenseEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupLicenseEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseEndpointResult)(nil)).Elem()
}

func (o LookupLicenseEndpointResultOutput) ToLookupLicenseEndpointResultOutput() LookupLicenseEndpointResultOutput {
	return o
}

func (o LookupLicenseEndpointResultOutput) ToLookupLicenseEndpointResultOutputWithContext(ctx context.Context) LookupLicenseEndpointResultOutput {
	return o
}

func (o LookupLicenseEndpointResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseEndpointResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupLicenseEndpointResultOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseEndpointResult) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

func (o LookupLicenseEndpointResultOutput) LicenseEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseEndpointResult) *string { return v.LicenseEndpointId }).(pulumi.StringPtrOutput)
}

func (o LookupLicenseEndpointResultOutput) Status() LicenseEndpointStatusPtrOutput {
	return o.ApplyT(func(v LookupLicenseEndpointResult) *LicenseEndpointStatus { return v.Status }).(LicenseEndpointStatusPtrOutput)
}

func (o LookupLicenseEndpointResultOutput) StatusMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseEndpointResult) *string { return v.StatusMessage }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLicenseEndpointResultOutput{})
}
