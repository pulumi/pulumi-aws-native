// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::Farm Resource Type
type Farm struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput    `pulumi:"arn"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	DisplayName pulumi.StringOutput    `pulumi:"displayName"`
	FarmId      pulumi.StringOutput    `pulumi:"farmId"`
	KmsKeyArn   pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
}

// NewFarm registers a new resource with the given unique name, arguments, and options.
func NewFarm(ctx *pulumi.Context,
	name string, args *FarmArgs, opts ...pulumi.ResourceOption) (*Farm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"kmsKeyArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Farm
	err := ctx.RegisterResource("aws-native:deadline:Farm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFarm gets an existing Farm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FarmState, opts ...pulumi.ResourceOption) (*Farm, error) {
	var resource Farm
	err := ctx.ReadResource("aws-native:deadline:Farm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Farm resources.
type farmState struct {
}

type FarmState struct {
}

func (FarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*farmState)(nil)).Elem()
}

type farmArgs struct {
	Description *string `pulumi:"description"`
	DisplayName string  `pulumi:"displayName"`
	KmsKeyArn   *string `pulumi:"kmsKeyArn"`
}

// The set of arguments for constructing a Farm resource.
type FarmArgs struct {
	Description pulumi.StringPtrInput
	DisplayName pulumi.StringInput
	KmsKeyArn   pulumi.StringPtrInput
}

func (FarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*farmArgs)(nil)).Elem()
}

type FarmInput interface {
	pulumi.Input

	ToFarmOutput() FarmOutput
	ToFarmOutputWithContext(ctx context.Context) FarmOutput
}

func (*Farm) ElementType() reflect.Type {
	return reflect.TypeOf((**Farm)(nil)).Elem()
}

func (i *Farm) ToFarmOutput() FarmOutput {
	return i.ToFarmOutputWithContext(context.Background())
}

func (i *Farm) ToFarmOutputWithContext(ctx context.Context) FarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FarmOutput)
}

type FarmOutput struct{ *pulumi.OutputState }

func (FarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Farm)(nil)).Elem()
}

func (o FarmOutput) ToFarmOutput() FarmOutput {
	return o
}

func (o FarmOutput) ToFarmOutputWithContext(ctx context.Context) FarmOutput {
	return o
}

func (o FarmOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Farm) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FarmOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Farm) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FarmOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Farm) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o FarmOutput) FarmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Farm) pulumi.StringOutput { return v.FarmId }).(pulumi.StringOutput)
}

func (o FarmOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Farm) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FarmInput)(nil)).Elem(), &Farm{})
	pulumi.RegisterOutputType(FarmOutput{})
}
