// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::MeteredProduct Resource Type
type MeteredProduct struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the metered product.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The family to which the metered product belongs.
	Family pulumi.StringOutput `pulumi:"family"`
	// The Amazon EC2 identifier of the license endpoint.
	LicenseEndpointId pulumi.StringPtrOutput `pulumi:"licenseEndpointId"`
	// The port on which the metered product should run.
	Port pulumi.IntOutput `pulumi:"port"`
	// The product ID.
	ProductId pulumi.StringPtrOutput `pulumi:"productId"`
	// The vendor.
	Vendor pulumi.StringOutput `pulumi:"vendor"`
}

// NewMeteredProduct registers a new resource with the given unique name, arguments, and options.
func NewMeteredProduct(ctx *pulumi.Context,
	name string, args *MeteredProductArgs, opts ...pulumi.ResourceOption) (*MeteredProduct, error) {
	if args == nil {
		args = &MeteredProductArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"licenseEndpointId",
		"productId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MeteredProduct
	err := ctx.RegisterResource("aws-native:deadline:MeteredProduct", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeteredProduct gets an existing MeteredProduct resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeteredProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeteredProductState, opts ...pulumi.ResourceOption) (*MeteredProduct, error) {
	var resource MeteredProduct
	err := ctx.ReadResource("aws-native:deadline:MeteredProduct", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeteredProduct resources.
type meteredProductState struct {
}

type MeteredProductState struct {
}

func (MeteredProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*meteredProductState)(nil)).Elem()
}

type meteredProductArgs struct {
	// The Amazon EC2 identifier of the license endpoint.
	LicenseEndpointId *string `pulumi:"licenseEndpointId"`
	// The product ID.
	ProductId *string `pulumi:"productId"`
}

// The set of arguments for constructing a MeteredProduct resource.
type MeteredProductArgs struct {
	// The Amazon EC2 identifier of the license endpoint.
	LicenseEndpointId pulumi.StringPtrInput
	// The product ID.
	ProductId pulumi.StringPtrInput
}

func (MeteredProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meteredProductArgs)(nil)).Elem()
}

type MeteredProductInput interface {
	pulumi.Input

	ToMeteredProductOutput() MeteredProductOutput
	ToMeteredProductOutputWithContext(ctx context.Context) MeteredProductOutput
}

func (*MeteredProduct) ElementType() reflect.Type {
	return reflect.TypeOf((**MeteredProduct)(nil)).Elem()
}

func (i *MeteredProduct) ToMeteredProductOutput() MeteredProductOutput {
	return i.ToMeteredProductOutputWithContext(context.Background())
}

func (i *MeteredProduct) ToMeteredProductOutputWithContext(ctx context.Context) MeteredProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeteredProductOutput)
}

type MeteredProductOutput struct{ *pulumi.OutputState }

func (MeteredProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeteredProduct)(nil)).Elem()
}

func (o MeteredProductOutput) ToMeteredProductOutput() MeteredProductOutput {
	return o
}

func (o MeteredProductOutput) ToMeteredProductOutputWithContext(ctx context.Context) MeteredProductOutput {
	return o
}

// The Amazon Resource Name (ARN) of the metered product.
func (o MeteredProductOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *MeteredProduct) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The family to which the metered product belongs.
func (o MeteredProductOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v *MeteredProduct) pulumi.StringOutput { return v.Family }).(pulumi.StringOutput)
}

// The Amazon EC2 identifier of the license endpoint.
func (o MeteredProductOutput) LicenseEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MeteredProduct) pulumi.StringPtrOutput { return v.LicenseEndpointId }).(pulumi.StringPtrOutput)
}

// The port on which the metered product should run.
func (o MeteredProductOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *MeteredProduct) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The product ID.
func (o MeteredProductOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MeteredProduct) pulumi.StringPtrOutput { return v.ProductId }).(pulumi.StringPtrOutput)
}

// The vendor.
func (o MeteredProductOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v *MeteredProduct) pulumi.StringOutput { return v.Vendor }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeteredProductInput)(nil)).Elem(), &MeteredProduct{})
	pulumi.RegisterOutputType(MeteredProductOutput{})
}
