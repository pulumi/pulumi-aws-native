// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::LicenseEndpoint Resource Type
type LicenseEndpoint struct {
	pulumi.CustomResourceState

	Arn               pulumi.StringOutput         `pulumi:"arn"`
	DnsName           pulumi.StringOutput         `pulumi:"dnsName"`
	LicenseEndpointId pulumi.StringOutput         `pulumi:"licenseEndpointId"`
	SecurityGroupIds  pulumi.StringArrayOutput    `pulumi:"securityGroupIds"`
	Status            LicenseEndpointStatusOutput `pulumi:"status"`
	StatusMessage     pulumi.StringOutput         `pulumi:"statusMessage"`
	SubnetIds         pulumi.StringArrayOutput    `pulumi:"subnetIds"`
	VpcId             pulumi.StringOutput         `pulumi:"vpcId"`
}

// NewLicenseEndpoint registers a new resource with the given unique name, arguments, and options.
func NewLicenseEndpoint(ctx *pulumi.Context,
	name string, args *LicenseEndpointArgs, opts ...pulumi.ResourceOption) (*LicenseEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"securityGroupIds[*]",
		"subnetIds[*]",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseEndpoint
	err := ctx.RegisterResource("aws-native:deadline:LicenseEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseEndpoint gets an existing LicenseEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseEndpointState, opts ...pulumi.ResourceOption) (*LicenseEndpoint, error) {
	var resource LicenseEndpoint
	err := ctx.ReadResource("aws-native:deadline:LicenseEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseEndpoint resources.
type licenseEndpointState struct {
}

type LicenseEndpointState struct {
}

func (LicenseEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseEndpointState)(nil)).Elem()
}

type licenseEndpointArgs struct {
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SubnetIds        []string `pulumi:"subnetIds"`
	VpcId            string   `pulumi:"vpcId"`
}

// The set of arguments for constructing a LicenseEndpoint resource.
type LicenseEndpointArgs struct {
	SecurityGroupIds pulumi.StringArrayInput
	SubnetIds        pulumi.StringArrayInput
	VpcId            pulumi.StringInput
}

func (LicenseEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseEndpointArgs)(nil)).Elem()
}

type LicenseEndpointInput interface {
	pulumi.Input

	ToLicenseEndpointOutput() LicenseEndpointOutput
	ToLicenseEndpointOutputWithContext(ctx context.Context) LicenseEndpointOutput
}

func (*LicenseEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseEndpoint)(nil)).Elem()
}

func (i *LicenseEndpoint) ToLicenseEndpointOutput() LicenseEndpointOutput {
	return i.ToLicenseEndpointOutputWithContext(context.Background())
}

func (i *LicenseEndpoint) ToLicenseEndpointOutputWithContext(ctx context.Context) LicenseEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseEndpointOutput)
}

type LicenseEndpointOutput struct{ *pulumi.OutputState }

func (LicenseEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseEndpoint)(nil)).Elem()
}

func (o LicenseEndpointOutput) ToLicenseEndpointOutput() LicenseEndpointOutput {
	return o
}

func (o LicenseEndpointOutput) ToLicenseEndpointOutputWithContext(ctx context.Context) LicenseEndpointOutput {
	return o
}

func (o LicenseEndpointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseEndpoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o LicenseEndpointOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseEndpoint) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

func (o LicenseEndpointOutput) LicenseEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseEndpoint) pulumi.StringOutput { return v.LicenseEndpointId }).(pulumi.StringOutput)
}

func (o LicenseEndpointOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LicenseEndpoint) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o LicenseEndpointOutput) Status() LicenseEndpointStatusOutput {
	return o.ApplyT(func(v *LicenseEndpoint) LicenseEndpointStatusOutput { return v.Status }).(LicenseEndpointStatusOutput)
}

func (o LicenseEndpointOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseEndpoint) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

func (o LicenseEndpointOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LicenseEndpoint) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o LicenseEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseEndpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseEndpointInput)(nil)).Elem(), &LicenseEndpoint{})
	pulumi.RegisterOutputType(LicenseEndpointOutput{})
}
