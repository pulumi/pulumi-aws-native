// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deadline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Deadline::Fleet Resource Type
type Fleet struct {
	pulumi.CustomResourceState

	Arn            pulumi.StringOutput     `pulumi:"arn"`
	Capabilities   FleetCapabilitiesOutput `pulumi:"capabilities"`
	Configuration  pulumi.AnyOutput        `pulumi:"configuration"`
	Description    pulumi.StringPtrOutput  `pulumi:"description"`
	DisplayName    pulumi.StringOutput     `pulumi:"displayName"`
	FarmId         pulumi.StringPtrOutput  `pulumi:"farmId"`
	FleetId        pulumi.StringOutput     `pulumi:"fleetId"`
	MaxWorkerCount pulumi.IntOutput        `pulumi:"maxWorkerCount"`
	MinWorkerCount pulumi.IntPtrOutput     `pulumi:"minWorkerCount"`
	RoleArn        pulumi.StringOutput     `pulumi:"roleArn"`
	Status         FleetStatusOutput       `pulumi:"status"`
	WorkerCount    pulumi.IntOutput        `pulumi:"workerCount"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOption) (*Fleet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MaxWorkerCount == nil {
		return nil, errors.New("invalid value for required argument 'MaxWorkerCount'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"farmId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fleet
	err := ctx.RegisterResource("aws-native:deadline:Fleet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetState, opts ...pulumi.ResourceOption) (*Fleet, error) {
	var resource Fleet
	err := ctx.ReadResource("aws-native:deadline:Fleet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fleet resources.
type fleetState struct {
}

type FleetState struct {
}

func (FleetState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetState)(nil)).Elem()
}

type fleetArgs struct {
	Configuration  interface{} `pulumi:"configuration"`
	Description    *string     `pulumi:"description"`
	DisplayName    string      `pulumi:"displayName"`
	FarmId         *string     `pulumi:"farmId"`
	MaxWorkerCount int         `pulumi:"maxWorkerCount"`
	MinWorkerCount *int        `pulumi:"minWorkerCount"`
	RoleArn        string      `pulumi:"roleArn"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	Configuration  pulumi.Input
	Description    pulumi.StringPtrInput
	DisplayName    pulumi.StringInput
	FarmId         pulumi.StringPtrInput
	MaxWorkerCount pulumi.IntInput
	MinWorkerCount pulumi.IntPtrInput
	RoleArn        pulumi.StringInput
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetArgs)(nil)).Elem()
}

type FleetInput interface {
	pulumi.Input

	ToFleetOutput() FleetOutput
	ToFleetOutputWithContext(ctx context.Context) FleetOutput
}

func (*Fleet) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (i *Fleet) ToFleetOutput() FleetOutput {
	return i.ToFleetOutputWithContext(context.Background())
}

func (i *Fleet) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput)
}

type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

func (o FleetOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FleetOutput) Capabilities() FleetCapabilitiesOutput {
	return o.ApplyT(func(v *Fleet) FleetCapabilitiesOutput { return v.Capabilities }).(FleetCapabilitiesOutput)
}

func (o FleetOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *Fleet) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

func (o FleetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o FleetOutput) FarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringPtrOutput { return v.FarmId }).(pulumi.StringPtrOutput)
}

func (o FleetOutput) FleetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.FleetId }).(pulumi.StringOutput)
}

func (o FleetOutput) MaxWorkerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Fleet) pulumi.IntOutput { return v.MaxWorkerCount }).(pulumi.IntOutput)
}

func (o FleetOutput) MinWorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Fleet) pulumi.IntPtrOutput { return v.MinWorkerCount }).(pulumi.IntPtrOutput)
}

func (o FleetOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Fleet) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o FleetOutput) Status() FleetStatusOutput {
	return o.ApplyT(func(v *Fleet) FleetStatusOutput { return v.Status }).(FleetStatusOutput)
}

func (o FleetOutput) WorkerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Fleet) pulumi.IntOutput { return v.WorkerCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetInput)(nil)).Elem(), &Fleet{})
	pulumi.RegisterOutputType(FleetOutput{})
}
