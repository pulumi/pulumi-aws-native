// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Bedrock::DataSource Resource Type
type DataSource struct {
	pulumi.CustomResourceState

	// The time at which the data source was created.
	CreatedAt               pulumi.StringOutput           `pulumi:"createdAt"`
	DataSourceConfiguration DataSourceConfigurationOutput `pulumi:"dataSourceConfiguration"`
	// Identifier for a resource.
	DataSourceId     pulumi.StringOutput    `pulumi:"dataSourceId"`
	DataSourceStatus DataSourceStatusOutput `pulumi:"dataSourceStatus"`
	// Description of the Resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier of the knowledge base to which to add the data source.
	KnowledgeBaseId pulumi.StringOutput `pulumi:"knowledgeBaseId"`
	// The name of the data source.
	Name                              pulumi.StringOutput                                  `pulumi:"name"`
	ServerSideEncryptionConfiguration DataSourceServerSideEncryptionConfigurationPtrOutput `pulumi:"serverSideEncryptionConfiguration"`
	// The time at which the knowledge base was last updated.
	UpdatedAt                    pulumi.StringOutput                             `pulumi:"updatedAt"`
	VectorIngestionConfiguration DataSourceVectorIngestionConfigurationPtrOutput `pulumi:"vectorIngestionConfiguration"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceConfiguration'")
	}
	if args.KnowledgeBaseId == nil {
		return nil, errors.New("invalid value for required argument 'KnowledgeBaseId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"knowledgeBaseId",
		"vectorIngestionConfiguration",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws-native:bedrock:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws-native:bedrock:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
}

type DataSourceState struct {
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	DataSourceConfiguration DataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	// Description of the Resource.
	Description *string `pulumi:"description"`
	// The unique identifier of the knowledge base to which to add the data source.
	KnowledgeBaseId string `pulumi:"knowledgeBaseId"`
	// The name of the data source.
	Name                              *string                                      `pulumi:"name"`
	ServerSideEncryptionConfiguration *DataSourceServerSideEncryptionConfiguration `pulumi:"serverSideEncryptionConfiguration"`
	VectorIngestionConfiguration      *DataSourceVectorIngestionConfiguration      `pulumi:"vectorIngestionConfiguration"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	DataSourceConfiguration DataSourceConfigurationInput
	// Description of the Resource.
	Description pulumi.StringPtrInput
	// The unique identifier of the knowledge base to which to add the data source.
	KnowledgeBaseId pulumi.StringInput
	// The name of the data source.
	Name                              pulumi.StringPtrInput
	ServerSideEncryptionConfiguration DataSourceServerSideEncryptionConfigurationPtrInput
	VectorIngestionConfiguration      DataSourceVectorIngestionConfigurationPtrInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

// The time at which the data source was created.
func (o DataSourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DataSourceOutput) DataSourceConfiguration() DataSourceConfigurationOutput {
	return o.ApplyT(func(v *DataSource) DataSourceConfigurationOutput { return v.DataSourceConfiguration }).(DataSourceConfigurationOutput)
}

// Identifier for a resource.
func (o DataSourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

func (o DataSourceOutput) DataSourceStatus() DataSourceStatusOutput {
	return o.ApplyT(func(v *DataSource) DataSourceStatusOutput { return v.DataSourceStatus }).(DataSourceStatusOutput)
}

// Description of the Resource.
func (o DataSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the knowledge base to which to add the data source.
func (o DataSourceOutput) KnowledgeBaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.KnowledgeBaseId }).(pulumi.StringOutput)
}

// The name of the data source.
func (o DataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataSourceOutput) ServerSideEncryptionConfiguration() DataSourceServerSideEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceServerSideEncryptionConfigurationPtrOutput {
		return v.ServerSideEncryptionConfiguration
	}).(DataSourceServerSideEncryptionConfigurationPtrOutput)
}

// The time at which the knowledge base was last updated.
func (o DataSourceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o DataSourceOutput) VectorIngestionConfiguration() DataSourceVectorIngestionConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceVectorIngestionConfigurationPtrOutput {
		return v.VectorIngestionConfiguration
	}).(DataSourceVectorIngestionConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceInput)(nil)).Elem(), &DataSource{})
	pulumi.RegisterOutputType(DataSourceOutput{})
}
