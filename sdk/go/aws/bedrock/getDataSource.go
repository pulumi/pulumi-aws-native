// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Bedrock::DataSource Resource Type
func LookupDataSource(ctx *pulumi.Context, args *LookupDataSourceArgs, opts ...pulumi.InvokeOption) (*LookupDataSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDataSourceResult
	err := ctx.Invoke("aws-native:bedrock:getDataSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDataSourceArgs struct {
	// Identifier for a resource.
	DataSourceId string `pulumi:"dataSourceId"`
	// The unique identifier of the knowledge base to which to add the data source.
	KnowledgeBaseId string `pulumi:"knowledgeBaseId"`
}

type LookupDataSourceResult struct {
	// The time at which the data source was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The data deletion policy for the data source.
	DataDeletionPolicy *DataSourceDataDeletionPolicy `pulumi:"dataDeletionPolicy"`
	// The connection configuration for the data source.
	DataSourceConfiguration *DataSourceConfiguration `pulumi:"dataSourceConfiguration"`
	// Identifier for a resource.
	DataSourceId *string `pulumi:"dataSourceId"`
	// The status of the data source. The following statuses are possible:
	//
	// - Available – The data source has been created and is ready for ingestion into the knowledge base.
	// - Deleting – The data source is being deleted.
	DataSourceStatus *DataSourceStatus `pulumi:"dataSourceStatus"`
	// Description of the Resource.
	Description *string `pulumi:"description"`
	// The details of the failure reasons related to the data source.
	FailureReasons []string `pulumi:"failureReasons"`
	// The name of the data source.
	Name *string `pulumi:"name"`
	// Contains details about the configuration of the server-side encryption.
	ServerSideEncryptionConfiguration *DataSourceServerSideEncryptionConfiguration `pulumi:"serverSideEncryptionConfiguration"`
	// The time at which the knowledge base was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Contains details about how to ingest the documents in the data source.
	VectorIngestionConfiguration *DataSourceVectorIngestionConfiguration `pulumi:"vectorIngestionConfiguration"`
}

func LookupDataSourceOutput(ctx *pulumi.Context, args LookupDataSourceOutputArgs, opts ...pulumi.InvokeOption) LookupDataSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDataSourceResultOutput, error) {
			args := v.(LookupDataSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:bedrock:getDataSource", args, LookupDataSourceResultOutput{}, options).(LookupDataSourceResultOutput), nil
		}).(LookupDataSourceResultOutput)
}

type LookupDataSourceOutputArgs struct {
	// Identifier for a resource.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// The unique identifier of the knowledge base to which to add the data source.
	KnowledgeBaseId pulumi.StringInput `pulumi:"knowledgeBaseId"`
}

func (LookupDataSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataSourceArgs)(nil)).Elem()
}

type LookupDataSourceResultOutput struct{ *pulumi.OutputState }

func (LookupDataSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataSourceResult)(nil)).Elem()
}

func (o LookupDataSourceResultOutput) ToLookupDataSourceResultOutput() LookupDataSourceResultOutput {
	return o
}

func (o LookupDataSourceResultOutput) ToLookupDataSourceResultOutputWithContext(ctx context.Context) LookupDataSourceResultOutput {
	return o
}

// The time at which the data source was created.
func (o LookupDataSourceResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The data deletion policy for the data source.
func (o LookupDataSourceResultOutput) DataDeletionPolicy() DataSourceDataDeletionPolicyPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *DataSourceDataDeletionPolicy { return v.DataDeletionPolicy }).(DataSourceDataDeletionPolicyPtrOutput)
}

// The connection configuration for the data source.
func (o LookupDataSourceResultOutput) DataSourceConfiguration() DataSourceConfigurationPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *DataSourceConfiguration { return v.DataSourceConfiguration }).(DataSourceConfigurationPtrOutput)
}

// Identifier for a resource.
func (o LookupDataSourceResultOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.DataSourceId }).(pulumi.StringPtrOutput)
}

// The status of the data source. The following statuses are possible:
//
// - Available – The data source has been created and is ready for ingestion into the knowledge base.
// - Deleting – The data source is being deleted.
func (o LookupDataSourceResultOutput) DataSourceStatus() DataSourceStatusPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *DataSourceStatus { return v.DataSourceStatus }).(DataSourceStatusPtrOutput)
}

// Description of the Resource.
func (o LookupDataSourceResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The details of the failure reasons related to the data source.
func (o LookupDataSourceResultOutput) FailureReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDataSourceResult) []string { return v.FailureReasons }).(pulumi.StringArrayOutput)
}

// The name of the data source.
func (o LookupDataSourceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Contains details about the configuration of the server-side encryption.
func (o LookupDataSourceResultOutput) ServerSideEncryptionConfiguration() DataSourceServerSideEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *DataSourceServerSideEncryptionConfiguration {
		return v.ServerSideEncryptionConfiguration
	}).(DataSourceServerSideEncryptionConfigurationPtrOutput)
}

// The time at which the knowledge base was last updated.
func (o LookupDataSourceResultOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// Contains details about how to ingest the documents in the data source.
func (o LookupDataSourceResultOutput) VectorIngestionConfiguration() DataSourceVectorIngestionConfigurationPtrOutput {
	return o.ApplyT(func(v LookupDataSourceResult) *DataSourceVectorIngestionConfiguration {
		return v.VectorIngestionConfiguration
	}).(DataSourceVectorIngestionConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataSourceResultOutput{})
}
