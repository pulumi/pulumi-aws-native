// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bedrock

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Bedrock::FlowVersion Resource Type
type FlowVersion struct {
	pulumi.CustomResourceState

	// Time Stamp.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A KMS key ARN
	CustomerEncryptionKeyArn pulumi.StringOutput             `pulumi:"customerEncryptionKeyArn"`
	Definition               FlowVersionFlowDefinitionOutput `pulumi:"definition"`
	// Description of the flow version
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ARN of a IAM role
	ExecutionRoleArn pulumi.StringOutput `pulumi:"executionRoleArn"`
	// Arn representation of the Flow
	FlowArn pulumi.StringOutput `pulumi:"flowArn"`
	// Identifier for a Flow
	FlowId pulumi.StringOutput `pulumi:"flowId"`
	// Name for the flow
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the flow.
	Status FlowVersionFlowStatusOutput `pulumi:"status"`
	// Numerical Version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewFlowVersion registers a new resource with the given unique name, arguments, and options.
func NewFlowVersion(ctx *pulumi.Context,
	name string, args *FlowVersionArgs, opts ...pulumi.ResourceOption) (*FlowVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlowArn == nil {
		return nil, errors.New("invalid value for required argument 'FlowArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"description",
		"flowArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlowVersion
	err := ctx.RegisterResource("aws-native:bedrock:FlowVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowVersion gets an existing FlowVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowVersionState, opts ...pulumi.ResourceOption) (*FlowVersion, error) {
	var resource FlowVersion
	err := ctx.ReadResource("aws-native:bedrock:FlowVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowVersion resources.
type flowVersionState struct {
}

type FlowVersionState struct {
}

func (FlowVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowVersionState)(nil)).Elem()
}

type flowVersionArgs struct {
	// Description of the flow version
	Description *string `pulumi:"description"`
	// Arn representation of the Flow
	FlowArn string `pulumi:"flowArn"`
}

// The set of arguments for constructing a FlowVersion resource.
type FlowVersionArgs struct {
	// Description of the flow version
	Description pulumi.StringPtrInput
	// Arn representation of the Flow
	FlowArn pulumi.StringInput
}

func (FlowVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowVersionArgs)(nil)).Elem()
}

type FlowVersionInput interface {
	pulumi.Input

	ToFlowVersionOutput() FlowVersionOutput
	ToFlowVersionOutputWithContext(ctx context.Context) FlowVersionOutput
}

func (*FlowVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowVersion)(nil)).Elem()
}

func (i *FlowVersion) ToFlowVersionOutput() FlowVersionOutput {
	return i.ToFlowVersionOutputWithContext(context.Background())
}

func (i *FlowVersion) ToFlowVersionOutputWithContext(ctx context.Context) FlowVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowVersionOutput)
}

type FlowVersionOutput struct{ *pulumi.OutputState }

func (FlowVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowVersion)(nil)).Elem()
}

func (o FlowVersionOutput) ToFlowVersionOutput() FlowVersionOutput {
	return o
}

func (o FlowVersionOutput) ToFlowVersionOutputWithContext(ctx context.Context) FlowVersionOutput {
	return o
}

// Time Stamp.
func (o FlowVersionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A KMS key ARN
func (o FlowVersionOutput) CustomerEncryptionKeyArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringOutput { return v.CustomerEncryptionKeyArn }).(pulumi.StringOutput)
}

func (o FlowVersionOutput) Definition() FlowVersionFlowDefinitionOutput {
	return o.ApplyT(func(v *FlowVersion) FlowVersionFlowDefinitionOutput { return v.Definition }).(FlowVersionFlowDefinitionOutput)
}

// Description of the flow version
func (o FlowVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ARN of a IAM role
func (o FlowVersionOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

// Arn representation of the Flow
func (o FlowVersionOutput) FlowArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringOutput { return v.FlowArn }).(pulumi.StringOutput)
}

// Identifier for a Flow
func (o FlowVersionOutput) FlowId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringOutput { return v.FlowId }).(pulumi.StringOutput)
}

// Name for the flow
func (o FlowVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the flow.
func (o FlowVersionOutput) Status() FlowVersionFlowStatusOutput {
	return o.ApplyT(func(v *FlowVersion) FlowVersionFlowStatusOutput { return v.Status }).(FlowVersionFlowStatusOutput)
}

// Numerical Version.
func (o FlowVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowVersionInput)(nil)).Elem(), &FlowVersion{})
	pulumi.RegisterOutputType(FlowVersionOutput{})
}
