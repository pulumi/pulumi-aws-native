// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package customerprofiles

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Mathematical expression and a list of attribute items specified in that expression.
type CalculatedAttributeDefinitionAttributeDetails struct {
	Attributes []CalculatedAttributeDefinitionAttributeItem `pulumi:"attributes"`
	Expression string                                       `pulumi:"expression"`
}

// CalculatedAttributeDefinitionAttributeDetailsInput is an input type that accepts CalculatedAttributeDefinitionAttributeDetailsArgs and CalculatedAttributeDefinitionAttributeDetailsOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionAttributeDetailsInput` via:
//
//	CalculatedAttributeDefinitionAttributeDetailsArgs{...}
type CalculatedAttributeDefinitionAttributeDetailsInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionAttributeDetailsOutput() CalculatedAttributeDefinitionAttributeDetailsOutput
	ToCalculatedAttributeDefinitionAttributeDetailsOutputWithContext(context.Context) CalculatedAttributeDefinitionAttributeDetailsOutput
}

// Mathematical expression and a list of attribute items specified in that expression.
type CalculatedAttributeDefinitionAttributeDetailsArgs struct {
	Attributes CalculatedAttributeDefinitionAttributeItemArrayInput `pulumi:"attributes"`
	Expression pulumi.StringInput                                   `pulumi:"expression"`
}

func (CalculatedAttributeDefinitionAttributeDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionAttributeDetails)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionAttributeDetailsArgs) ToCalculatedAttributeDefinitionAttributeDetailsOutput() CalculatedAttributeDefinitionAttributeDetailsOutput {
	return i.ToCalculatedAttributeDefinitionAttributeDetailsOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionAttributeDetailsArgs) ToCalculatedAttributeDefinitionAttributeDetailsOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionAttributeDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionAttributeDetailsOutput)
}

func (i CalculatedAttributeDefinitionAttributeDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionAttributeDetails] {
	return pulumix.Output[CalculatedAttributeDefinitionAttributeDetails]{
		OutputState: i.ToCalculatedAttributeDefinitionAttributeDetailsOutputWithContext(ctx).OutputState,
	}
}

// Mathematical expression and a list of attribute items specified in that expression.
type CalculatedAttributeDefinitionAttributeDetailsOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionAttributeDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionAttributeDetails)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionAttributeDetailsOutput) ToCalculatedAttributeDefinitionAttributeDetailsOutput() CalculatedAttributeDefinitionAttributeDetailsOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeDetailsOutput) ToCalculatedAttributeDefinitionAttributeDetailsOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionAttributeDetailsOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionAttributeDetails] {
	return pulumix.Output[CalculatedAttributeDefinitionAttributeDetails]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionAttributeDetailsOutput) Attributes() CalculatedAttributeDefinitionAttributeItemArrayOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionAttributeDetails) []CalculatedAttributeDefinitionAttributeItem {
		return v.Attributes
	}).(CalculatedAttributeDefinitionAttributeItemArrayOutput)
}

func (o CalculatedAttributeDefinitionAttributeDetailsOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionAttributeDetails) string { return v.Expression }).(pulumi.StringOutput)
}

type CalculatedAttributeDefinitionAttributeDetailsPtrOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionAttributeDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedAttributeDefinitionAttributeDetails)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionAttributeDetailsPtrOutput) ToCalculatedAttributeDefinitionAttributeDetailsPtrOutput() CalculatedAttributeDefinitionAttributeDetailsPtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeDetailsPtrOutput) ToCalculatedAttributeDefinitionAttributeDetailsPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionAttributeDetailsPtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeDetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CalculatedAttributeDefinitionAttributeDetails] {
	return pulumix.Output[*CalculatedAttributeDefinitionAttributeDetails]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionAttributeDetailsPtrOutput) Elem() CalculatedAttributeDefinitionAttributeDetailsOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionAttributeDetails) CalculatedAttributeDefinitionAttributeDetails {
		if v != nil {
			return *v
		}
		var ret CalculatedAttributeDefinitionAttributeDetails
		return ret
	}).(CalculatedAttributeDefinitionAttributeDetailsOutput)
}

func (o CalculatedAttributeDefinitionAttributeDetailsPtrOutput) Attributes() CalculatedAttributeDefinitionAttributeItemArrayOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionAttributeDetails) []CalculatedAttributeDefinitionAttributeItem {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(CalculatedAttributeDefinitionAttributeItemArrayOutput)
}

func (o CalculatedAttributeDefinitionAttributeDetailsPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionAttributeDetails) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// The details of a single attribute item specified in the mathematical expression.
type CalculatedAttributeDefinitionAttributeItem struct {
	Name string `pulumi:"name"`
}

// CalculatedAttributeDefinitionAttributeItemInput is an input type that accepts CalculatedAttributeDefinitionAttributeItemArgs and CalculatedAttributeDefinitionAttributeItemOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionAttributeItemInput` via:
//
//	CalculatedAttributeDefinitionAttributeItemArgs{...}
type CalculatedAttributeDefinitionAttributeItemInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionAttributeItemOutput() CalculatedAttributeDefinitionAttributeItemOutput
	ToCalculatedAttributeDefinitionAttributeItemOutputWithContext(context.Context) CalculatedAttributeDefinitionAttributeItemOutput
}

// The details of a single attribute item specified in the mathematical expression.
type CalculatedAttributeDefinitionAttributeItemArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (CalculatedAttributeDefinitionAttributeItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionAttributeItem)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionAttributeItemArgs) ToCalculatedAttributeDefinitionAttributeItemOutput() CalculatedAttributeDefinitionAttributeItemOutput {
	return i.ToCalculatedAttributeDefinitionAttributeItemOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionAttributeItemArgs) ToCalculatedAttributeDefinitionAttributeItemOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionAttributeItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionAttributeItemOutput)
}

func (i CalculatedAttributeDefinitionAttributeItemArgs) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionAttributeItem] {
	return pulumix.Output[CalculatedAttributeDefinitionAttributeItem]{
		OutputState: i.ToCalculatedAttributeDefinitionAttributeItemOutputWithContext(ctx).OutputState,
	}
}

// CalculatedAttributeDefinitionAttributeItemArrayInput is an input type that accepts CalculatedAttributeDefinitionAttributeItemArray and CalculatedAttributeDefinitionAttributeItemArrayOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionAttributeItemArrayInput` via:
//
//	CalculatedAttributeDefinitionAttributeItemArray{ CalculatedAttributeDefinitionAttributeItemArgs{...} }
type CalculatedAttributeDefinitionAttributeItemArrayInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionAttributeItemArrayOutput() CalculatedAttributeDefinitionAttributeItemArrayOutput
	ToCalculatedAttributeDefinitionAttributeItemArrayOutputWithContext(context.Context) CalculatedAttributeDefinitionAttributeItemArrayOutput
}

type CalculatedAttributeDefinitionAttributeItemArray []CalculatedAttributeDefinitionAttributeItemInput

func (CalculatedAttributeDefinitionAttributeItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CalculatedAttributeDefinitionAttributeItem)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionAttributeItemArray) ToCalculatedAttributeDefinitionAttributeItemArrayOutput() CalculatedAttributeDefinitionAttributeItemArrayOutput {
	return i.ToCalculatedAttributeDefinitionAttributeItemArrayOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionAttributeItemArray) ToCalculatedAttributeDefinitionAttributeItemArrayOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionAttributeItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionAttributeItemArrayOutput)
}

func (i CalculatedAttributeDefinitionAttributeItemArray) ToOutput(ctx context.Context) pulumix.Output[[]CalculatedAttributeDefinitionAttributeItem] {
	return pulumix.Output[[]CalculatedAttributeDefinitionAttributeItem]{
		OutputState: i.ToCalculatedAttributeDefinitionAttributeItemArrayOutputWithContext(ctx).OutputState,
	}
}

// The details of a single attribute item specified in the mathematical expression.
type CalculatedAttributeDefinitionAttributeItemOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionAttributeItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionAttributeItem)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionAttributeItemOutput) ToCalculatedAttributeDefinitionAttributeItemOutput() CalculatedAttributeDefinitionAttributeItemOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeItemOutput) ToCalculatedAttributeDefinitionAttributeItemOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionAttributeItemOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeItemOutput) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionAttributeItem] {
	return pulumix.Output[CalculatedAttributeDefinitionAttributeItem]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionAttributeItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionAttributeItem) string { return v.Name }).(pulumi.StringOutput)
}

type CalculatedAttributeDefinitionAttributeItemArrayOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionAttributeItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CalculatedAttributeDefinitionAttributeItem)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionAttributeItemArrayOutput) ToCalculatedAttributeDefinitionAttributeItemArrayOutput() CalculatedAttributeDefinitionAttributeItemArrayOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeItemArrayOutput) ToCalculatedAttributeDefinitionAttributeItemArrayOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionAttributeItemArrayOutput {
	return o
}

func (o CalculatedAttributeDefinitionAttributeItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CalculatedAttributeDefinitionAttributeItem] {
	return pulumix.Output[[]CalculatedAttributeDefinitionAttributeItem]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionAttributeItemArrayOutput) Index(i pulumi.IntInput) CalculatedAttributeDefinitionAttributeItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CalculatedAttributeDefinitionAttributeItem {
		return vs[0].([]CalculatedAttributeDefinitionAttributeItem)[vs[1].(int)]
	}).(CalculatedAttributeDefinitionAttributeItemOutput)
}

// The conditions including range, object count, and threshold for the calculated attribute.
type CalculatedAttributeDefinitionConditions struct {
	ObjectCount *int                                    `pulumi:"objectCount"`
	Range       *CalculatedAttributeDefinitionRange     `pulumi:"range"`
	Threshold   *CalculatedAttributeDefinitionThreshold `pulumi:"threshold"`
}

// CalculatedAttributeDefinitionConditionsInput is an input type that accepts CalculatedAttributeDefinitionConditionsArgs and CalculatedAttributeDefinitionConditionsOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionConditionsInput` via:
//
//	CalculatedAttributeDefinitionConditionsArgs{...}
type CalculatedAttributeDefinitionConditionsInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionConditionsOutput() CalculatedAttributeDefinitionConditionsOutput
	ToCalculatedAttributeDefinitionConditionsOutputWithContext(context.Context) CalculatedAttributeDefinitionConditionsOutput
}

// The conditions including range, object count, and threshold for the calculated attribute.
type CalculatedAttributeDefinitionConditionsArgs struct {
	ObjectCount pulumi.IntPtrInput                             `pulumi:"objectCount"`
	Range       CalculatedAttributeDefinitionRangePtrInput     `pulumi:"range"`
	Threshold   CalculatedAttributeDefinitionThresholdPtrInput `pulumi:"threshold"`
}

func (CalculatedAttributeDefinitionConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionConditions)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionConditionsArgs) ToCalculatedAttributeDefinitionConditionsOutput() CalculatedAttributeDefinitionConditionsOutput {
	return i.ToCalculatedAttributeDefinitionConditionsOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionConditionsArgs) ToCalculatedAttributeDefinitionConditionsOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionConditionsOutput)
}

func (i CalculatedAttributeDefinitionConditionsArgs) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionConditions] {
	return pulumix.Output[CalculatedAttributeDefinitionConditions]{
		OutputState: i.ToCalculatedAttributeDefinitionConditionsOutputWithContext(ctx).OutputState,
	}
}

func (i CalculatedAttributeDefinitionConditionsArgs) ToCalculatedAttributeDefinitionConditionsPtrOutput() CalculatedAttributeDefinitionConditionsPtrOutput {
	return i.ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionConditionsArgs) ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionConditionsOutput).ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(ctx)
}

// CalculatedAttributeDefinitionConditionsPtrInput is an input type that accepts CalculatedAttributeDefinitionConditionsArgs, CalculatedAttributeDefinitionConditionsPtr and CalculatedAttributeDefinitionConditionsPtrOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionConditionsPtrInput` via:
//
//	        CalculatedAttributeDefinitionConditionsArgs{...}
//
//	or:
//
//	        nil
type CalculatedAttributeDefinitionConditionsPtrInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionConditionsPtrOutput() CalculatedAttributeDefinitionConditionsPtrOutput
	ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(context.Context) CalculatedAttributeDefinitionConditionsPtrOutput
}

type calculatedAttributeDefinitionConditionsPtrType CalculatedAttributeDefinitionConditionsArgs

func CalculatedAttributeDefinitionConditionsPtr(v *CalculatedAttributeDefinitionConditionsArgs) CalculatedAttributeDefinitionConditionsPtrInput {
	return (*calculatedAttributeDefinitionConditionsPtrType)(v)
}

func (*calculatedAttributeDefinitionConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedAttributeDefinitionConditions)(nil)).Elem()
}

func (i *calculatedAttributeDefinitionConditionsPtrType) ToCalculatedAttributeDefinitionConditionsPtrOutput() CalculatedAttributeDefinitionConditionsPtrOutput {
	return i.ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(context.Background())
}

func (i *calculatedAttributeDefinitionConditionsPtrType) ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionConditionsPtrOutput)
}

func (i *calculatedAttributeDefinitionConditionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*CalculatedAttributeDefinitionConditions] {
	return pulumix.Output[*CalculatedAttributeDefinitionConditions]{
		OutputState: i.ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(ctx).OutputState,
	}
}

// The conditions including range, object count, and threshold for the calculated attribute.
type CalculatedAttributeDefinitionConditionsOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionConditions)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionConditionsOutput) ToCalculatedAttributeDefinitionConditionsOutput() CalculatedAttributeDefinitionConditionsOutput {
	return o
}

func (o CalculatedAttributeDefinitionConditionsOutput) ToCalculatedAttributeDefinitionConditionsOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionConditionsOutput {
	return o
}

func (o CalculatedAttributeDefinitionConditionsOutput) ToCalculatedAttributeDefinitionConditionsPtrOutput() CalculatedAttributeDefinitionConditionsPtrOutput {
	return o.ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(context.Background())
}

func (o CalculatedAttributeDefinitionConditionsOutput) ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CalculatedAttributeDefinitionConditions) *CalculatedAttributeDefinitionConditions {
		return &v
	}).(CalculatedAttributeDefinitionConditionsPtrOutput)
}

func (o CalculatedAttributeDefinitionConditionsOutput) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionConditions] {
	return pulumix.Output[CalculatedAttributeDefinitionConditions]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionConditionsOutput) ObjectCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionConditions) *int { return v.ObjectCount }).(pulumi.IntPtrOutput)
}

func (o CalculatedAttributeDefinitionConditionsOutput) Range() CalculatedAttributeDefinitionRangePtrOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionConditions) *CalculatedAttributeDefinitionRange { return v.Range }).(CalculatedAttributeDefinitionRangePtrOutput)
}

func (o CalculatedAttributeDefinitionConditionsOutput) Threshold() CalculatedAttributeDefinitionThresholdPtrOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionConditions) *CalculatedAttributeDefinitionThreshold {
		return v.Threshold
	}).(CalculatedAttributeDefinitionThresholdPtrOutput)
}

type CalculatedAttributeDefinitionConditionsPtrOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedAttributeDefinitionConditions)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionConditionsPtrOutput) ToCalculatedAttributeDefinitionConditionsPtrOutput() CalculatedAttributeDefinitionConditionsPtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionConditionsPtrOutput) ToCalculatedAttributeDefinitionConditionsPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionConditionsPtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionConditionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CalculatedAttributeDefinitionConditions] {
	return pulumix.Output[*CalculatedAttributeDefinitionConditions]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionConditionsPtrOutput) Elem() CalculatedAttributeDefinitionConditionsOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionConditions) CalculatedAttributeDefinitionConditions {
		if v != nil {
			return *v
		}
		var ret CalculatedAttributeDefinitionConditions
		return ret
	}).(CalculatedAttributeDefinitionConditionsOutput)
}

func (o CalculatedAttributeDefinitionConditionsPtrOutput) ObjectCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionConditions) *int {
		if v == nil {
			return nil
		}
		return v.ObjectCount
	}).(pulumi.IntPtrOutput)
}

func (o CalculatedAttributeDefinitionConditionsPtrOutput) Range() CalculatedAttributeDefinitionRangePtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionConditions) *CalculatedAttributeDefinitionRange {
		if v == nil {
			return nil
		}
		return v.Range
	}).(CalculatedAttributeDefinitionRangePtrOutput)
}

func (o CalculatedAttributeDefinitionConditionsPtrOutput) Threshold() CalculatedAttributeDefinitionThresholdPtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionConditions) *CalculatedAttributeDefinitionThreshold {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(CalculatedAttributeDefinitionThresholdPtrOutput)
}

// The relative time period over which data is included in the aggregation.
type CalculatedAttributeDefinitionRange struct {
	Unit  CalculatedAttributeDefinitionRangeUnit `pulumi:"unit"`
	Value int                                    `pulumi:"value"`
}

// CalculatedAttributeDefinitionRangeInput is an input type that accepts CalculatedAttributeDefinitionRangeArgs and CalculatedAttributeDefinitionRangeOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionRangeInput` via:
//
//	CalculatedAttributeDefinitionRangeArgs{...}
type CalculatedAttributeDefinitionRangeInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionRangeOutput() CalculatedAttributeDefinitionRangeOutput
	ToCalculatedAttributeDefinitionRangeOutputWithContext(context.Context) CalculatedAttributeDefinitionRangeOutput
}

// The relative time period over which data is included in the aggregation.
type CalculatedAttributeDefinitionRangeArgs struct {
	Unit  CalculatedAttributeDefinitionRangeUnitInput `pulumi:"unit"`
	Value pulumi.IntInput                             `pulumi:"value"`
}

func (CalculatedAttributeDefinitionRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionRange)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionRangeArgs) ToCalculatedAttributeDefinitionRangeOutput() CalculatedAttributeDefinitionRangeOutput {
	return i.ToCalculatedAttributeDefinitionRangeOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionRangeArgs) ToCalculatedAttributeDefinitionRangeOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionRangeOutput)
}

func (i CalculatedAttributeDefinitionRangeArgs) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionRange] {
	return pulumix.Output[CalculatedAttributeDefinitionRange]{
		OutputState: i.ToCalculatedAttributeDefinitionRangeOutputWithContext(ctx).OutputState,
	}
}

func (i CalculatedAttributeDefinitionRangeArgs) ToCalculatedAttributeDefinitionRangePtrOutput() CalculatedAttributeDefinitionRangePtrOutput {
	return i.ToCalculatedAttributeDefinitionRangePtrOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionRangeArgs) ToCalculatedAttributeDefinitionRangePtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionRangeOutput).ToCalculatedAttributeDefinitionRangePtrOutputWithContext(ctx)
}

// CalculatedAttributeDefinitionRangePtrInput is an input type that accepts CalculatedAttributeDefinitionRangeArgs, CalculatedAttributeDefinitionRangePtr and CalculatedAttributeDefinitionRangePtrOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionRangePtrInput` via:
//
//	        CalculatedAttributeDefinitionRangeArgs{...}
//
//	or:
//
//	        nil
type CalculatedAttributeDefinitionRangePtrInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionRangePtrOutput() CalculatedAttributeDefinitionRangePtrOutput
	ToCalculatedAttributeDefinitionRangePtrOutputWithContext(context.Context) CalculatedAttributeDefinitionRangePtrOutput
}

type calculatedAttributeDefinitionRangePtrType CalculatedAttributeDefinitionRangeArgs

func CalculatedAttributeDefinitionRangePtr(v *CalculatedAttributeDefinitionRangeArgs) CalculatedAttributeDefinitionRangePtrInput {
	return (*calculatedAttributeDefinitionRangePtrType)(v)
}

func (*calculatedAttributeDefinitionRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedAttributeDefinitionRange)(nil)).Elem()
}

func (i *calculatedAttributeDefinitionRangePtrType) ToCalculatedAttributeDefinitionRangePtrOutput() CalculatedAttributeDefinitionRangePtrOutput {
	return i.ToCalculatedAttributeDefinitionRangePtrOutputWithContext(context.Background())
}

func (i *calculatedAttributeDefinitionRangePtrType) ToCalculatedAttributeDefinitionRangePtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionRangePtrOutput)
}

func (i *calculatedAttributeDefinitionRangePtrType) ToOutput(ctx context.Context) pulumix.Output[*CalculatedAttributeDefinitionRange] {
	return pulumix.Output[*CalculatedAttributeDefinitionRange]{
		OutputState: i.ToCalculatedAttributeDefinitionRangePtrOutputWithContext(ctx).OutputState,
	}
}

// The relative time period over which data is included in the aggregation.
type CalculatedAttributeDefinitionRangeOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionRange)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionRangeOutput) ToCalculatedAttributeDefinitionRangeOutput() CalculatedAttributeDefinitionRangeOutput {
	return o
}

func (o CalculatedAttributeDefinitionRangeOutput) ToCalculatedAttributeDefinitionRangeOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionRangeOutput {
	return o
}

func (o CalculatedAttributeDefinitionRangeOutput) ToCalculatedAttributeDefinitionRangePtrOutput() CalculatedAttributeDefinitionRangePtrOutput {
	return o.ToCalculatedAttributeDefinitionRangePtrOutputWithContext(context.Background())
}

func (o CalculatedAttributeDefinitionRangeOutput) ToCalculatedAttributeDefinitionRangePtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CalculatedAttributeDefinitionRange) *CalculatedAttributeDefinitionRange {
		return &v
	}).(CalculatedAttributeDefinitionRangePtrOutput)
}

func (o CalculatedAttributeDefinitionRangeOutput) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionRange] {
	return pulumix.Output[CalculatedAttributeDefinitionRange]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionRangeOutput) Unit() CalculatedAttributeDefinitionRangeUnitOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionRange) CalculatedAttributeDefinitionRangeUnit { return v.Unit }).(CalculatedAttributeDefinitionRangeUnitOutput)
}

func (o CalculatedAttributeDefinitionRangeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionRange) int { return v.Value }).(pulumi.IntOutput)
}

type CalculatedAttributeDefinitionRangePtrOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedAttributeDefinitionRange)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionRangePtrOutput) ToCalculatedAttributeDefinitionRangePtrOutput() CalculatedAttributeDefinitionRangePtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionRangePtrOutput) ToCalculatedAttributeDefinitionRangePtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionRangePtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionRangePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CalculatedAttributeDefinitionRange] {
	return pulumix.Output[*CalculatedAttributeDefinitionRange]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionRangePtrOutput) Elem() CalculatedAttributeDefinitionRangeOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionRange) CalculatedAttributeDefinitionRange {
		if v != nil {
			return *v
		}
		var ret CalculatedAttributeDefinitionRange
		return ret
	}).(CalculatedAttributeDefinitionRangeOutput)
}

func (o CalculatedAttributeDefinitionRangePtrOutput) Unit() CalculatedAttributeDefinitionRangeUnitPtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionRange) *CalculatedAttributeDefinitionRangeUnit {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(CalculatedAttributeDefinitionRangeUnitPtrOutput)
}

func (o CalculatedAttributeDefinitionRangePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionRange) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// A key-value pair to associate with a resource.
type CalculatedAttributeDefinitionTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// CalculatedAttributeDefinitionTagInput is an input type that accepts CalculatedAttributeDefinitionTagArgs and CalculatedAttributeDefinitionTagOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionTagInput` via:
//
//	CalculatedAttributeDefinitionTagArgs{...}
type CalculatedAttributeDefinitionTagInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionTagOutput() CalculatedAttributeDefinitionTagOutput
	ToCalculatedAttributeDefinitionTagOutputWithContext(context.Context) CalculatedAttributeDefinitionTagOutput
}

// A key-value pair to associate with a resource.
type CalculatedAttributeDefinitionTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CalculatedAttributeDefinitionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionTag)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionTagArgs) ToCalculatedAttributeDefinitionTagOutput() CalculatedAttributeDefinitionTagOutput {
	return i.ToCalculatedAttributeDefinitionTagOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionTagArgs) ToCalculatedAttributeDefinitionTagOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionTagOutput)
}

func (i CalculatedAttributeDefinitionTagArgs) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionTag] {
	return pulumix.Output[CalculatedAttributeDefinitionTag]{
		OutputState: i.ToCalculatedAttributeDefinitionTagOutputWithContext(ctx).OutputState,
	}
}

// CalculatedAttributeDefinitionTagArrayInput is an input type that accepts CalculatedAttributeDefinitionTagArray and CalculatedAttributeDefinitionTagArrayOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionTagArrayInput` via:
//
//	CalculatedAttributeDefinitionTagArray{ CalculatedAttributeDefinitionTagArgs{...} }
type CalculatedAttributeDefinitionTagArrayInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionTagArrayOutput() CalculatedAttributeDefinitionTagArrayOutput
	ToCalculatedAttributeDefinitionTagArrayOutputWithContext(context.Context) CalculatedAttributeDefinitionTagArrayOutput
}

type CalculatedAttributeDefinitionTagArray []CalculatedAttributeDefinitionTagInput

func (CalculatedAttributeDefinitionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CalculatedAttributeDefinitionTag)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionTagArray) ToCalculatedAttributeDefinitionTagArrayOutput() CalculatedAttributeDefinitionTagArrayOutput {
	return i.ToCalculatedAttributeDefinitionTagArrayOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionTagArray) ToCalculatedAttributeDefinitionTagArrayOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionTagArrayOutput)
}

func (i CalculatedAttributeDefinitionTagArray) ToOutput(ctx context.Context) pulumix.Output[[]CalculatedAttributeDefinitionTag] {
	return pulumix.Output[[]CalculatedAttributeDefinitionTag]{
		OutputState: i.ToCalculatedAttributeDefinitionTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource.
type CalculatedAttributeDefinitionTagOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionTag)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionTagOutput) ToCalculatedAttributeDefinitionTagOutput() CalculatedAttributeDefinitionTagOutput {
	return o
}

func (o CalculatedAttributeDefinitionTagOutput) ToCalculatedAttributeDefinitionTagOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionTagOutput {
	return o
}

func (o CalculatedAttributeDefinitionTagOutput) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionTag] {
	return pulumix.Output[CalculatedAttributeDefinitionTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o CalculatedAttributeDefinitionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o CalculatedAttributeDefinitionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionTag) string { return v.Value }).(pulumi.StringOutput)
}

type CalculatedAttributeDefinitionTagArrayOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CalculatedAttributeDefinitionTag)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionTagArrayOutput) ToCalculatedAttributeDefinitionTagArrayOutput() CalculatedAttributeDefinitionTagArrayOutput {
	return o
}

func (o CalculatedAttributeDefinitionTagArrayOutput) ToCalculatedAttributeDefinitionTagArrayOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionTagArrayOutput {
	return o
}

func (o CalculatedAttributeDefinitionTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CalculatedAttributeDefinitionTag] {
	return pulumix.Output[[]CalculatedAttributeDefinitionTag]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionTagArrayOutput) Index(i pulumi.IntInput) CalculatedAttributeDefinitionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CalculatedAttributeDefinitionTag {
		return vs[0].([]CalculatedAttributeDefinitionTag)[vs[1].(int)]
	}).(CalculatedAttributeDefinitionTagOutput)
}

// The threshold for the calculated attribute.
type CalculatedAttributeDefinitionThreshold struct {
	Operator CalculatedAttributeDefinitionThresholdOperator `pulumi:"operator"`
	Value    string                                         `pulumi:"value"`
}

// CalculatedAttributeDefinitionThresholdInput is an input type that accepts CalculatedAttributeDefinitionThresholdArgs and CalculatedAttributeDefinitionThresholdOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionThresholdInput` via:
//
//	CalculatedAttributeDefinitionThresholdArgs{...}
type CalculatedAttributeDefinitionThresholdInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionThresholdOutput() CalculatedAttributeDefinitionThresholdOutput
	ToCalculatedAttributeDefinitionThresholdOutputWithContext(context.Context) CalculatedAttributeDefinitionThresholdOutput
}

// The threshold for the calculated attribute.
type CalculatedAttributeDefinitionThresholdArgs struct {
	Operator CalculatedAttributeDefinitionThresholdOperatorInput `pulumi:"operator"`
	Value    pulumi.StringInput                                  `pulumi:"value"`
}

func (CalculatedAttributeDefinitionThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionThreshold)(nil)).Elem()
}

func (i CalculatedAttributeDefinitionThresholdArgs) ToCalculatedAttributeDefinitionThresholdOutput() CalculatedAttributeDefinitionThresholdOutput {
	return i.ToCalculatedAttributeDefinitionThresholdOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionThresholdArgs) ToCalculatedAttributeDefinitionThresholdOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionThresholdOutput)
}

func (i CalculatedAttributeDefinitionThresholdArgs) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionThreshold] {
	return pulumix.Output[CalculatedAttributeDefinitionThreshold]{
		OutputState: i.ToCalculatedAttributeDefinitionThresholdOutputWithContext(ctx).OutputState,
	}
}

func (i CalculatedAttributeDefinitionThresholdArgs) ToCalculatedAttributeDefinitionThresholdPtrOutput() CalculatedAttributeDefinitionThresholdPtrOutput {
	return i.ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(context.Background())
}

func (i CalculatedAttributeDefinitionThresholdArgs) ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionThresholdOutput).ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(ctx)
}

// CalculatedAttributeDefinitionThresholdPtrInput is an input type that accepts CalculatedAttributeDefinitionThresholdArgs, CalculatedAttributeDefinitionThresholdPtr and CalculatedAttributeDefinitionThresholdPtrOutput values.
// You can construct a concrete instance of `CalculatedAttributeDefinitionThresholdPtrInput` via:
//
//	        CalculatedAttributeDefinitionThresholdArgs{...}
//
//	or:
//
//	        nil
type CalculatedAttributeDefinitionThresholdPtrInput interface {
	pulumi.Input

	ToCalculatedAttributeDefinitionThresholdPtrOutput() CalculatedAttributeDefinitionThresholdPtrOutput
	ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(context.Context) CalculatedAttributeDefinitionThresholdPtrOutput
}

type calculatedAttributeDefinitionThresholdPtrType CalculatedAttributeDefinitionThresholdArgs

func CalculatedAttributeDefinitionThresholdPtr(v *CalculatedAttributeDefinitionThresholdArgs) CalculatedAttributeDefinitionThresholdPtrInput {
	return (*calculatedAttributeDefinitionThresholdPtrType)(v)
}

func (*calculatedAttributeDefinitionThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedAttributeDefinitionThreshold)(nil)).Elem()
}

func (i *calculatedAttributeDefinitionThresholdPtrType) ToCalculatedAttributeDefinitionThresholdPtrOutput() CalculatedAttributeDefinitionThresholdPtrOutput {
	return i.ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(context.Background())
}

func (i *calculatedAttributeDefinitionThresholdPtrType) ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedAttributeDefinitionThresholdPtrOutput)
}

func (i *calculatedAttributeDefinitionThresholdPtrType) ToOutput(ctx context.Context) pulumix.Output[*CalculatedAttributeDefinitionThreshold] {
	return pulumix.Output[*CalculatedAttributeDefinitionThreshold]{
		OutputState: i.ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(ctx).OutputState,
	}
}

// The threshold for the calculated attribute.
type CalculatedAttributeDefinitionThresholdOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculatedAttributeDefinitionThreshold)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionThresholdOutput) ToCalculatedAttributeDefinitionThresholdOutput() CalculatedAttributeDefinitionThresholdOutput {
	return o
}

func (o CalculatedAttributeDefinitionThresholdOutput) ToCalculatedAttributeDefinitionThresholdOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionThresholdOutput {
	return o
}

func (o CalculatedAttributeDefinitionThresholdOutput) ToCalculatedAttributeDefinitionThresholdPtrOutput() CalculatedAttributeDefinitionThresholdPtrOutput {
	return o.ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(context.Background())
}

func (o CalculatedAttributeDefinitionThresholdOutput) ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CalculatedAttributeDefinitionThreshold) *CalculatedAttributeDefinitionThreshold {
		return &v
	}).(CalculatedAttributeDefinitionThresholdPtrOutput)
}

func (o CalculatedAttributeDefinitionThresholdOutput) ToOutput(ctx context.Context) pulumix.Output[CalculatedAttributeDefinitionThreshold] {
	return pulumix.Output[CalculatedAttributeDefinitionThreshold]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionThresholdOutput) Operator() CalculatedAttributeDefinitionThresholdOperatorOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionThreshold) CalculatedAttributeDefinitionThresholdOperator {
		return v.Operator
	}).(CalculatedAttributeDefinitionThresholdOperatorOutput)
}

func (o CalculatedAttributeDefinitionThresholdOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CalculatedAttributeDefinitionThreshold) string { return v.Value }).(pulumi.StringOutput)
}

type CalculatedAttributeDefinitionThresholdPtrOutput struct{ *pulumi.OutputState }

func (CalculatedAttributeDefinitionThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedAttributeDefinitionThreshold)(nil)).Elem()
}

func (o CalculatedAttributeDefinitionThresholdPtrOutput) ToCalculatedAttributeDefinitionThresholdPtrOutput() CalculatedAttributeDefinitionThresholdPtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionThresholdPtrOutput) ToCalculatedAttributeDefinitionThresholdPtrOutputWithContext(ctx context.Context) CalculatedAttributeDefinitionThresholdPtrOutput {
	return o
}

func (o CalculatedAttributeDefinitionThresholdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CalculatedAttributeDefinitionThreshold] {
	return pulumix.Output[*CalculatedAttributeDefinitionThreshold]{
		OutputState: o.OutputState,
	}
}

func (o CalculatedAttributeDefinitionThresholdPtrOutput) Elem() CalculatedAttributeDefinitionThresholdOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionThreshold) CalculatedAttributeDefinitionThreshold {
		if v != nil {
			return *v
		}
		var ret CalculatedAttributeDefinitionThreshold
		return ret
	}).(CalculatedAttributeDefinitionThresholdOutput)
}

func (o CalculatedAttributeDefinitionThresholdPtrOutput) Operator() CalculatedAttributeDefinitionThresholdOperatorPtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionThreshold) *CalculatedAttributeDefinitionThresholdOperator {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(CalculatedAttributeDefinitionThresholdOperatorPtrOutput)
}

func (o CalculatedAttributeDefinitionThresholdPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedAttributeDefinitionThreshold) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Details regarding the Kinesis stream.
type DestinationDetailsProperties struct {
	Status EventStreamStatus `pulumi:"status"`
	Uri    string            `pulumi:"uri"`
}

// Details regarding the Kinesis stream.
type DestinationDetailsPropertiesOutput struct{ *pulumi.OutputState }

func (DestinationDetailsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationDetailsProperties)(nil)).Elem()
}

func (o DestinationDetailsPropertiesOutput) ToDestinationDetailsPropertiesOutput() DestinationDetailsPropertiesOutput {
	return o
}

func (o DestinationDetailsPropertiesOutput) ToDestinationDetailsPropertiesOutputWithContext(ctx context.Context) DestinationDetailsPropertiesOutput {
	return o
}

func (o DestinationDetailsPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DestinationDetailsProperties] {
	return pulumix.Output[DestinationDetailsProperties]{
		OutputState: o.OutputState,
	}
}

func (o DestinationDetailsPropertiesOutput) Status() EventStreamStatusOutput {
	return o.ApplyT(func(v DestinationDetailsProperties) EventStreamStatus { return v.Status }).(EventStreamStatusOutput)
}

func (o DestinationDetailsPropertiesOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationDetailsProperties) string { return v.Uri }).(pulumi.StringOutput)
}

type DestinationDetailsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DestinationDetailsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationDetailsProperties)(nil)).Elem()
}

func (o DestinationDetailsPropertiesPtrOutput) ToDestinationDetailsPropertiesPtrOutput() DestinationDetailsPropertiesPtrOutput {
	return o
}

func (o DestinationDetailsPropertiesPtrOutput) ToDestinationDetailsPropertiesPtrOutputWithContext(ctx context.Context) DestinationDetailsPropertiesPtrOutput {
	return o
}

func (o DestinationDetailsPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DestinationDetailsProperties] {
	return pulumix.Output[*DestinationDetailsProperties]{
		OutputState: o.OutputState,
	}
}

func (o DestinationDetailsPropertiesPtrOutput) Elem() DestinationDetailsPropertiesOutput {
	return o.ApplyT(func(v *DestinationDetailsProperties) DestinationDetailsProperties {
		if v != nil {
			return *v
		}
		var ret DestinationDetailsProperties
		return ret
	}).(DestinationDetailsPropertiesOutput)
}

func (o DestinationDetailsPropertiesPtrOutput) Status() EventStreamStatusPtrOutput {
	return o.ApplyT(func(v *DestinationDetailsProperties) *EventStreamStatus {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(EventStreamStatusPtrOutput)
}

func (o DestinationDetailsPropertiesPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Configures information about the AttributeTypesSelector where the rule-based identity resolution uses to match profiles.
type DomainAttributeTypesSelector struct {
	// The Address type. You can choose from Address, BusinessAddress, MaillingAddress, and ShippingAddress. You only can use the Address type in the MatchingRule. For example, if you want to match profile based on BusinessAddress.City or MaillingAddress.City, you need to choose the BusinessAddress and the MaillingAddress to represent the Address type and specify the Address.City on the matching rule.
	Address []string `pulumi:"address"`
	// Configures the AttributeMatchingModel, you can either choose ONE_TO_ONE or MANY_TO_MANY.
	AttributeMatchingModel DomainAttributeTypesSelectorAttributeMatchingModel `pulumi:"attributeMatchingModel"`
	// The Email type. You can choose from EmailAddress, BusinessEmailAddress and PersonalEmailAddress. You only can use the EmailAddress type in the MatchingRule. For example, if you want to match profile based on PersonalEmailAddress or BusinessEmailAddress, you need to choose the PersonalEmailAddress and the BusinessEmailAddress to represent the EmailAddress type and only specify the EmailAddress on the matching rule.
	EmailAddress []string `pulumi:"emailAddress"`
	// The PhoneNumber type. You can choose from PhoneNumber, HomePhoneNumber, and MobilePhoneNumber. You only can use the PhoneNumber type in the MatchingRule. For example, if you want to match a profile based on Phone or HomePhone, you need to choose the Phone and the HomePhone to represent the PhoneNumber type and only specify the PhoneNumber on the matching rule.
	PhoneNumber []string `pulumi:"phoneNumber"`
}

// DomainAttributeTypesSelectorInput is an input type that accepts DomainAttributeTypesSelectorArgs and DomainAttributeTypesSelectorOutput values.
// You can construct a concrete instance of `DomainAttributeTypesSelectorInput` via:
//
//	DomainAttributeTypesSelectorArgs{...}
type DomainAttributeTypesSelectorInput interface {
	pulumi.Input

	ToDomainAttributeTypesSelectorOutput() DomainAttributeTypesSelectorOutput
	ToDomainAttributeTypesSelectorOutputWithContext(context.Context) DomainAttributeTypesSelectorOutput
}

// Configures information about the AttributeTypesSelector where the rule-based identity resolution uses to match profiles.
type DomainAttributeTypesSelectorArgs struct {
	// The Address type. You can choose from Address, BusinessAddress, MaillingAddress, and ShippingAddress. You only can use the Address type in the MatchingRule. For example, if you want to match profile based on BusinessAddress.City or MaillingAddress.City, you need to choose the BusinessAddress and the MaillingAddress to represent the Address type and specify the Address.City on the matching rule.
	Address pulumi.StringArrayInput `pulumi:"address"`
	// Configures the AttributeMatchingModel, you can either choose ONE_TO_ONE or MANY_TO_MANY.
	AttributeMatchingModel DomainAttributeTypesSelectorAttributeMatchingModelInput `pulumi:"attributeMatchingModel"`
	// The Email type. You can choose from EmailAddress, BusinessEmailAddress and PersonalEmailAddress. You only can use the EmailAddress type in the MatchingRule. For example, if you want to match profile based on PersonalEmailAddress or BusinessEmailAddress, you need to choose the PersonalEmailAddress and the BusinessEmailAddress to represent the EmailAddress type and only specify the EmailAddress on the matching rule.
	EmailAddress pulumi.StringArrayInput `pulumi:"emailAddress"`
	// The PhoneNumber type. You can choose from PhoneNumber, HomePhoneNumber, and MobilePhoneNumber. You only can use the PhoneNumber type in the MatchingRule. For example, if you want to match a profile based on Phone or HomePhone, you need to choose the Phone and the HomePhone to represent the PhoneNumber type and only specify the PhoneNumber on the matching rule.
	PhoneNumber pulumi.StringArrayInput `pulumi:"phoneNumber"`
}

func (DomainAttributeTypesSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAttributeTypesSelector)(nil)).Elem()
}

func (i DomainAttributeTypesSelectorArgs) ToDomainAttributeTypesSelectorOutput() DomainAttributeTypesSelectorOutput {
	return i.ToDomainAttributeTypesSelectorOutputWithContext(context.Background())
}

func (i DomainAttributeTypesSelectorArgs) ToDomainAttributeTypesSelectorOutputWithContext(ctx context.Context) DomainAttributeTypesSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAttributeTypesSelectorOutput)
}

func (i DomainAttributeTypesSelectorArgs) ToOutput(ctx context.Context) pulumix.Output[DomainAttributeTypesSelector] {
	return pulumix.Output[DomainAttributeTypesSelector]{
		OutputState: i.ToDomainAttributeTypesSelectorOutputWithContext(ctx).OutputState,
	}
}

func (i DomainAttributeTypesSelectorArgs) ToDomainAttributeTypesSelectorPtrOutput() DomainAttributeTypesSelectorPtrOutput {
	return i.ToDomainAttributeTypesSelectorPtrOutputWithContext(context.Background())
}

func (i DomainAttributeTypesSelectorArgs) ToDomainAttributeTypesSelectorPtrOutputWithContext(ctx context.Context) DomainAttributeTypesSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAttributeTypesSelectorOutput).ToDomainAttributeTypesSelectorPtrOutputWithContext(ctx)
}

// DomainAttributeTypesSelectorPtrInput is an input type that accepts DomainAttributeTypesSelectorArgs, DomainAttributeTypesSelectorPtr and DomainAttributeTypesSelectorPtrOutput values.
// You can construct a concrete instance of `DomainAttributeTypesSelectorPtrInput` via:
//
//	        DomainAttributeTypesSelectorArgs{...}
//
//	or:
//
//	        nil
type DomainAttributeTypesSelectorPtrInput interface {
	pulumi.Input

	ToDomainAttributeTypesSelectorPtrOutput() DomainAttributeTypesSelectorPtrOutput
	ToDomainAttributeTypesSelectorPtrOutputWithContext(context.Context) DomainAttributeTypesSelectorPtrOutput
}

type domainAttributeTypesSelectorPtrType DomainAttributeTypesSelectorArgs

func DomainAttributeTypesSelectorPtr(v *DomainAttributeTypesSelectorArgs) DomainAttributeTypesSelectorPtrInput {
	return (*domainAttributeTypesSelectorPtrType)(v)
}

func (*domainAttributeTypesSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAttributeTypesSelector)(nil)).Elem()
}

func (i *domainAttributeTypesSelectorPtrType) ToDomainAttributeTypesSelectorPtrOutput() DomainAttributeTypesSelectorPtrOutput {
	return i.ToDomainAttributeTypesSelectorPtrOutputWithContext(context.Background())
}

func (i *domainAttributeTypesSelectorPtrType) ToDomainAttributeTypesSelectorPtrOutputWithContext(ctx context.Context) DomainAttributeTypesSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAttributeTypesSelectorPtrOutput)
}

func (i *domainAttributeTypesSelectorPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainAttributeTypesSelector] {
	return pulumix.Output[*DomainAttributeTypesSelector]{
		OutputState: i.ToDomainAttributeTypesSelectorPtrOutputWithContext(ctx).OutputState,
	}
}

// Configures information about the AttributeTypesSelector where the rule-based identity resolution uses to match profiles.
type DomainAttributeTypesSelectorOutput struct{ *pulumi.OutputState }

func (DomainAttributeTypesSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAttributeTypesSelector)(nil)).Elem()
}

func (o DomainAttributeTypesSelectorOutput) ToDomainAttributeTypesSelectorOutput() DomainAttributeTypesSelectorOutput {
	return o
}

func (o DomainAttributeTypesSelectorOutput) ToDomainAttributeTypesSelectorOutputWithContext(ctx context.Context) DomainAttributeTypesSelectorOutput {
	return o
}

func (o DomainAttributeTypesSelectorOutput) ToDomainAttributeTypesSelectorPtrOutput() DomainAttributeTypesSelectorPtrOutput {
	return o.ToDomainAttributeTypesSelectorPtrOutputWithContext(context.Background())
}

func (o DomainAttributeTypesSelectorOutput) ToDomainAttributeTypesSelectorPtrOutputWithContext(ctx context.Context) DomainAttributeTypesSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainAttributeTypesSelector) *DomainAttributeTypesSelector {
		return &v
	}).(DomainAttributeTypesSelectorPtrOutput)
}

func (o DomainAttributeTypesSelectorOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAttributeTypesSelector] {
	return pulumix.Output[DomainAttributeTypesSelector]{
		OutputState: o.OutputState,
	}
}

// The Address type. You can choose from Address, BusinessAddress, MaillingAddress, and ShippingAddress. You only can use the Address type in the MatchingRule. For example, if you want to match profile based on BusinessAddress.City or MaillingAddress.City, you need to choose the BusinessAddress and the MaillingAddress to represent the Address type and specify the Address.City on the matching rule.
func (o DomainAttributeTypesSelectorOutput) Address() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainAttributeTypesSelector) []string { return v.Address }).(pulumi.StringArrayOutput)
}

// Configures the AttributeMatchingModel, you can either choose ONE_TO_ONE or MANY_TO_MANY.
func (o DomainAttributeTypesSelectorOutput) AttributeMatchingModel() DomainAttributeTypesSelectorAttributeMatchingModelOutput {
	return o.ApplyT(func(v DomainAttributeTypesSelector) DomainAttributeTypesSelectorAttributeMatchingModel {
		return v.AttributeMatchingModel
	}).(DomainAttributeTypesSelectorAttributeMatchingModelOutput)
}

// The Email type. You can choose from EmailAddress, BusinessEmailAddress and PersonalEmailAddress. You only can use the EmailAddress type in the MatchingRule. For example, if you want to match profile based on PersonalEmailAddress or BusinessEmailAddress, you need to choose the PersonalEmailAddress and the BusinessEmailAddress to represent the EmailAddress type and only specify the EmailAddress on the matching rule.
func (o DomainAttributeTypesSelectorOutput) EmailAddress() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainAttributeTypesSelector) []string { return v.EmailAddress }).(pulumi.StringArrayOutput)
}

// The PhoneNumber type. You can choose from PhoneNumber, HomePhoneNumber, and MobilePhoneNumber. You only can use the PhoneNumber type in the MatchingRule. For example, if you want to match a profile based on Phone or HomePhone, you need to choose the Phone and the HomePhone to represent the PhoneNumber type and only specify the PhoneNumber on the matching rule.
func (o DomainAttributeTypesSelectorOutput) PhoneNumber() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainAttributeTypesSelector) []string { return v.PhoneNumber }).(pulumi.StringArrayOutput)
}

type DomainAttributeTypesSelectorPtrOutput struct{ *pulumi.OutputState }

func (DomainAttributeTypesSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAttributeTypesSelector)(nil)).Elem()
}

func (o DomainAttributeTypesSelectorPtrOutput) ToDomainAttributeTypesSelectorPtrOutput() DomainAttributeTypesSelectorPtrOutput {
	return o
}

func (o DomainAttributeTypesSelectorPtrOutput) ToDomainAttributeTypesSelectorPtrOutputWithContext(ctx context.Context) DomainAttributeTypesSelectorPtrOutput {
	return o
}

func (o DomainAttributeTypesSelectorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainAttributeTypesSelector] {
	return pulumix.Output[*DomainAttributeTypesSelector]{
		OutputState: o.OutputState,
	}
}

func (o DomainAttributeTypesSelectorPtrOutput) Elem() DomainAttributeTypesSelectorOutput {
	return o.ApplyT(func(v *DomainAttributeTypesSelector) DomainAttributeTypesSelector {
		if v != nil {
			return *v
		}
		var ret DomainAttributeTypesSelector
		return ret
	}).(DomainAttributeTypesSelectorOutput)
}

// The Address type. You can choose from Address, BusinessAddress, MaillingAddress, and ShippingAddress. You only can use the Address type in the MatchingRule. For example, if you want to match profile based on BusinessAddress.City or MaillingAddress.City, you need to choose the BusinessAddress and the MaillingAddress to represent the Address type and specify the Address.City on the matching rule.
func (o DomainAttributeTypesSelectorPtrOutput) Address() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainAttributeTypesSelector) []string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringArrayOutput)
}

// Configures the AttributeMatchingModel, you can either choose ONE_TO_ONE or MANY_TO_MANY.
func (o DomainAttributeTypesSelectorPtrOutput) AttributeMatchingModel() DomainAttributeTypesSelectorAttributeMatchingModelPtrOutput {
	return o.ApplyT(func(v *DomainAttributeTypesSelector) *DomainAttributeTypesSelectorAttributeMatchingModel {
		if v == nil {
			return nil
		}
		return &v.AttributeMatchingModel
	}).(DomainAttributeTypesSelectorAttributeMatchingModelPtrOutput)
}

// The Email type. You can choose from EmailAddress, BusinessEmailAddress and PersonalEmailAddress. You only can use the EmailAddress type in the MatchingRule. For example, if you want to match profile based on PersonalEmailAddress or BusinessEmailAddress, you need to choose the PersonalEmailAddress and the BusinessEmailAddress to represent the EmailAddress type and only specify the EmailAddress on the matching rule.
func (o DomainAttributeTypesSelectorPtrOutput) EmailAddress() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainAttributeTypesSelector) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddress
	}).(pulumi.StringArrayOutput)
}

// The PhoneNumber type. You can choose from PhoneNumber, HomePhoneNumber, and MobilePhoneNumber. You only can use the PhoneNumber type in the MatchingRule. For example, if you want to match a profile based on Phone or HomePhone, you need to choose the Phone and the HomePhone to represent the PhoneNumber type and only specify the PhoneNumber on the matching rule.
func (o DomainAttributeTypesSelectorPtrOutput) PhoneNumber() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainAttributeTypesSelector) []string {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(pulumi.StringArrayOutput)
}

// Configuration information about the auto-merging process.
type DomainAutoMerging struct {
	ConflictResolution *DomainConflictResolution `pulumi:"conflictResolution"`
	Consolidation      *DomainConsolidation      `pulumi:"consolidation"`
	// The flag that enables the auto-merging of duplicate profiles.
	Enabled bool `pulumi:"enabled"`
	// A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
	MinAllowedConfidenceScoreForMerging *float64 `pulumi:"minAllowedConfidenceScoreForMerging"`
}

// DomainAutoMergingInput is an input type that accepts DomainAutoMergingArgs and DomainAutoMergingOutput values.
// You can construct a concrete instance of `DomainAutoMergingInput` via:
//
//	DomainAutoMergingArgs{...}
type DomainAutoMergingInput interface {
	pulumi.Input

	ToDomainAutoMergingOutput() DomainAutoMergingOutput
	ToDomainAutoMergingOutputWithContext(context.Context) DomainAutoMergingOutput
}

// Configuration information about the auto-merging process.
type DomainAutoMergingArgs struct {
	ConflictResolution DomainConflictResolutionPtrInput `pulumi:"conflictResolution"`
	Consolidation      DomainConsolidationPtrInput      `pulumi:"consolidation"`
	// The flag that enables the auto-merging of duplicate profiles.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
	MinAllowedConfidenceScoreForMerging pulumi.Float64PtrInput `pulumi:"minAllowedConfidenceScoreForMerging"`
}

func (DomainAutoMergingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoMerging)(nil)).Elem()
}

func (i DomainAutoMergingArgs) ToDomainAutoMergingOutput() DomainAutoMergingOutput {
	return i.ToDomainAutoMergingOutputWithContext(context.Background())
}

func (i DomainAutoMergingArgs) ToDomainAutoMergingOutputWithContext(ctx context.Context) DomainAutoMergingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAutoMergingOutput)
}

func (i DomainAutoMergingArgs) ToOutput(ctx context.Context) pulumix.Output[DomainAutoMerging] {
	return pulumix.Output[DomainAutoMerging]{
		OutputState: i.ToDomainAutoMergingOutputWithContext(ctx).OutputState,
	}
}

func (i DomainAutoMergingArgs) ToDomainAutoMergingPtrOutput() DomainAutoMergingPtrOutput {
	return i.ToDomainAutoMergingPtrOutputWithContext(context.Background())
}

func (i DomainAutoMergingArgs) ToDomainAutoMergingPtrOutputWithContext(ctx context.Context) DomainAutoMergingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAutoMergingOutput).ToDomainAutoMergingPtrOutputWithContext(ctx)
}

// DomainAutoMergingPtrInput is an input type that accepts DomainAutoMergingArgs, DomainAutoMergingPtr and DomainAutoMergingPtrOutput values.
// You can construct a concrete instance of `DomainAutoMergingPtrInput` via:
//
//	        DomainAutoMergingArgs{...}
//
//	or:
//
//	        nil
type DomainAutoMergingPtrInput interface {
	pulumi.Input

	ToDomainAutoMergingPtrOutput() DomainAutoMergingPtrOutput
	ToDomainAutoMergingPtrOutputWithContext(context.Context) DomainAutoMergingPtrOutput
}

type domainAutoMergingPtrType DomainAutoMergingArgs

func DomainAutoMergingPtr(v *DomainAutoMergingArgs) DomainAutoMergingPtrInput {
	return (*domainAutoMergingPtrType)(v)
}

func (*domainAutoMergingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAutoMerging)(nil)).Elem()
}

func (i *domainAutoMergingPtrType) ToDomainAutoMergingPtrOutput() DomainAutoMergingPtrOutput {
	return i.ToDomainAutoMergingPtrOutputWithContext(context.Background())
}

func (i *domainAutoMergingPtrType) ToDomainAutoMergingPtrOutputWithContext(ctx context.Context) DomainAutoMergingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainAutoMergingPtrOutput)
}

func (i *domainAutoMergingPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainAutoMerging] {
	return pulumix.Output[*DomainAutoMerging]{
		OutputState: i.ToDomainAutoMergingPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration information about the auto-merging process.
type DomainAutoMergingOutput struct{ *pulumi.OutputState }

func (DomainAutoMergingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainAutoMerging)(nil)).Elem()
}

func (o DomainAutoMergingOutput) ToDomainAutoMergingOutput() DomainAutoMergingOutput {
	return o
}

func (o DomainAutoMergingOutput) ToDomainAutoMergingOutputWithContext(ctx context.Context) DomainAutoMergingOutput {
	return o
}

func (o DomainAutoMergingOutput) ToDomainAutoMergingPtrOutput() DomainAutoMergingPtrOutput {
	return o.ToDomainAutoMergingPtrOutputWithContext(context.Background())
}

func (o DomainAutoMergingOutput) ToDomainAutoMergingPtrOutputWithContext(ctx context.Context) DomainAutoMergingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainAutoMerging) *DomainAutoMerging {
		return &v
	}).(DomainAutoMergingPtrOutput)
}

func (o DomainAutoMergingOutput) ToOutput(ctx context.Context) pulumix.Output[DomainAutoMerging] {
	return pulumix.Output[DomainAutoMerging]{
		OutputState: o.OutputState,
	}
}

func (o DomainAutoMergingOutput) ConflictResolution() DomainConflictResolutionPtrOutput {
	return o.ApplyT(func(v DomainAutoMerging) *DomainConflictResolution { return v.ConflictResolution }).(DomainConflictResolutionPtrOutput)
}

func (o DomainAutoMergingOutput) Consolidation() DomainConsolidationPtrOutput {
	return o.ApplyT(func(v DomainAutoMerging) *DomainConsolidation { return v.Consolidation }).(DomainConsolidationPtrOutput)
}

// The flag that enables the auto-merging of duplicate profiles.
func (o DomainAutoMergingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainAutoMerging) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
func (o DomainAutoMergingOutput) MinAllowedConfidenceScoreForMerging() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DomainAutoMerging) *float64 { return v.MinAllowedConfidenceScoreForMerging }).(pulumi.Float64PtrOutput)
}

type DomainAutoMergingPtrOutput struct{ *pulumi.OutputState }

func (DomainAutoMergingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainAutoMerging)(nil)).Elem()
}

func (o DomainAutoMergingPtrOutput) ToDomainAutoMergingPtrOutput() DomainAutoMergingPtrOutput {
	return o
}

func (o DomainAutoMergingPtrOutput) ToDomainAutoMergingPtrOutputWithContext(ctx context.Context) DomainAutoMergingPtrOutput {
	return o
}

func (o DomainAutoMergingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainAutoMerging] {
	return pulumix.Output[*DomainAutoMerging]{
		OutputState: o.OutputState,
	}
}

func (o DomainAutoMergingPtrOutput) Elem() DomainAutoMergingOutput {
	return o.ApplyT(func(v *DomainAutoMerging) DomainAutoMerging {
		if v != nil {
			return *v
		}
		var ret DomainAutoMerging
		return ret
	}).(DomainAutoMergingOutput)
}

func (o DomainAutoMergingPtrOutput) ConflictResolution() DomainConflictResolutionPtrOutput {
	return o.ApplyT(func(v *DomainAutoMerging) *DomainConflictResolution {
		if v == nil {
			return nil
		}
		return v.ConflictResolution
	}).(DomainConflictResolutionPtrOutput)
}

func (o DomainAutoMergingPtrOutput) Consolidation() DomainConsolidationPtrOutput {
	return o.ApplyT(func(v *DomainAutoMerging) *DomainConsolidation {
		if v == nil {
			return nil
		}
		return v.Consolidation
	}).(DomainConsolidationPtrOutput)
}

// The flag that enables the auto-merging of duplicate profiles.
func (o DomainAutoMergingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainAutoMerging) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
func (o DomainAutoMergingPtrOutput) MinAllowedConfidenceScoreForMerging() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DomainAutoMerging) *float64 {
		if v == nil {
			return nil
		}
		return v.MinAllowedConfidenceScoreForMerging
	}).(pulumi.Float64PtrOutput)
}

// How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same FirstName and LastName (and that is the matching criteria), which EmailAddress should be used?
type DomainConflictResolution struct {
	// How the auto-merging process should resolve conflicts between different profiles.
	ConflictResolvingModel DomainConflictResolutionConflictResolvingModel `pulumi:"conflictResolvingModel"`
	// The ObjectType name that is used to resolve profile merging conflicts when choosing SOURCE as the ConflictResolvingModel.
	SourceName *string `pulumi:"sourceName"`
}

// DomainConflictResolutionInput is an input type that accepts DomainConflictResolutionArgs and DomainConflictResolutionOutput values.
// You can construct a concrete instance of `DomainConflictResolutionInput` via:
//
//	DomainConflictResolutionArgs{...}
type DomainConflictResolutionInput interface {
	pulumi.Input

	ToDomainConflictResolutionOutput() DomainConflictResolutionOutput
	ToDomainConflictResolutionOutputWithContext(context.Context) DomainConflictResolutionOutput
}

// How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same FirstName and LastName (and that is the matching criteria), which EmailAddress should be used?
type DomainConflictResolutionArgs struct {
	// How the auto-merging process should resolve conflicts between different profiles.
	ConflictResolvingModel DomainConflictResolutionConflictResolvingModelInput `pulumi:"conflictResolvingModel"`
	// The ObjectType name that is used to resolve profile merging conflicts when choosing SOURCE as the ConflictResolvingModel.
	SourceName pulumi.StringPtrInput `pulumi:"sourceName"`
}

func (DomainConflictResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConflictResolution)(nil)).Elem()
}

func (i DomainConflictResolutionArgs) ToDomainConflictResolutionOutput() DomainConflictResolutionOutput {
	return i.ToDomainConflictResolutionOutputWithContext(context.Background())
}

func (i DomainConflictResolutionArgs) ToDomainConflictResolutionOutputWithContext(ctx context.Context) DomainConflictResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConflictResolutionOutput)
}

func (i DomainConflictResolutionArgs) ToOutput(ctx context.Context) pulumix.Output[DomainConflictResolution] {
	return pulumix.Output[DomainConflictResolution]{
		OutputState: i.ToDomainConflictResolutionOutputWithContext(ctx).OutputState,
	}
}

func (i DomainConflictResolutionArgs) ToDomainConflictResolutionPtrOutput() DomainConflictResolutionPtrOutput {
	return i.ToDomainConflictResolutionPtrOutputWithContext(context.Background())
}

func (i DomainConflictResolutionArgs) ToDomainConflictResolutionPtrOutputWithContext(ctx context.Context) DomainConflictResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConflictResolutionOutput).ToDomainConflictResolutionPtrOutputWithContext(ctx)
}

// DomainConflictResolutionPtrInput is an input type that accepts DomainConflictResolutionArgs, DomainConflictResolutionPtr and DomainConflictResolutionPtrOutput values.
// You can construct a concrete instance of `DomainConflictResolutionPtrInput` via:
//
//	        DomainConflictResolutionArgs{...}
//
//	or:
//
//	        nil
type DomainConflictResolutionPtrInput interface {
	pulumi.Input

	ToDomainConflictResolutionPtrOutput() DomainConflictResolutionPtrOutput
	ToDomainConflictResolutionPtrOutputWithContext(context.Context) DomainConflictResolutionPtrOutput
}

type domainConflictResolutionPtrType DomainConflictResolutionArgs

func DomainConflictResolutionPtr(v *DomainConflictResolutionArgs) DomainConflictResolutionPtrInput {
	return (*domainConflictResolutionPtrType)(v)
}

func (*domainConflictResolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConflictResolution)(nil)).Elem()
}

func (i *domainConflictResolutionPtrType) ToDomainConflictResolutionPtrOutput() DomainConflictResolutionPtrOutput {
	return i.ToDomainConflictResolutionPtrOutputWithContext(context.Background())
}

func (i *domainConflictResolutionPtrType) ToDomainConflictResolutionPtrOutputWithContext(ctx context.Context) DomainConflictResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConflictResolutionPtrOutput)
}

func (i *domainConflictResolutionPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainConflictResolution] {
	return pulumix.Output[*DomainConflictResolution]{
		OutputState: i.ToDomainConflictResolutionPtrOutputWithContext(ctx).OutputState,
	}
}

// How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same FirstName and LastName (and that is the matching criteria), which EmailAddress should be used?
type DomainConflictResolutionOutput struct{ *pulumi.OutputState }

func (DomainConflictResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConflictResolution)(nil)).Elem()
}

func (o DomainConflictResolutionOutput) ToDomainConflictResolutionOutput() DomainConflictResolutionOutput {
	return o
}

func (o DomainConflictResolutionOutput) ToDomainConflictResolutionOutputWithContext(ctx context.Context) DomainConflictResolutionOutput {
	return o
}

func (o DomainConflictResolutionOutput) ToDomainConflictResolutionPtrOutput() DomainConflictResolutionPtrOutput {
	return o.ToDomainConflictResolutionPtrOutputWithContext(context.Background())
}

func (o DomainConflictResolutionOutput) ToDomainConflictResolutionPtrOutputWithContext(ctx context.Context) DomainConflictResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConflictResolution) *DomainConflictResolution {
		return &v
	}).(DomainConflictResolutionPtrOutput)
}

func (o DomainConflictResolutionOutput) ToOutput(ctx context.Context) pulumix.Output[DomainConflictResolution] {
	return pulumix.Output[DomainConflictResolution]{
		OutputState: o.OutputState,
	}
}

// How the auto-merging process should resolve conflicts between different profiles.
func (o DomainConflictResolutionOutput) ConflictResolvingModel() DomainConflictResolutionConflictResolvingModelOutput {
	return o.ApplyT(func(v DomainConflictResolution) DomainConflictResolutionConflictResolvingModel {
		return v.ConflictResolvingModel
	}).(DomainConflictResolutionConflictResolvingModelOutput)
}

// The ObjectType name that is used to resolve profile merging conflicts when choosing SOURCE as the ConflictResolvingModel.
func (o DomainConflictResolutionOutput) SourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainConflictResolution) *string { return v.SourceName }).(pulumi.StringPtrOutput)
}

type DomainConflictResolutionPtrOutput struct{ *pulumi.OutputState }

func (DomainConflictResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConflictResolution)(nil)).Elem()
}

func (o DomainConflictResolutionPtrOutput) ToDomainConflictResolutionPtrOutput() DomainConflictResolutionPtrOutput {
	return o
}

func (o DomainConflictResolutionPtrOutput) ToDomainConflictResolutionPtrOutputWithContext(ctx context.Context) DomainConflictResolutionPtrOutput {
	return o
}

func (o DomainConflictResolutionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainConflictResolution] {
	return pulumix.Output[*DomainConflictResolution]{
		OutputState: o.OutputState,
	}
}

func (o DomainConflictResolutionPtrOutput) Elem() DomainConflictResolutionOutput {
	return o.ApplyT(func(v *DomainConflictResolution) DomainConflictResolution {
		if v != nil {
			return *v
		}
		var ret DomainConflictResolution
		return ret
	}).(DomainConflictResolutionOutput)
}

// How the auto-merging process should resolve conflicts between different profiles.
func (o DomainConflictResolutionPtrOutput) ConflictResolvingModel() DomainConflictResolutionConflictResolvingModelPtrOutput {
	return o.ApplyT(func(v *DomainConflictResolution) *DomainConflictResolutionConflictResolvingModel {
		if v == nil {
			return nil
		}
		return &v.ConflictResolvingModel
	}).(DomainConflictResolutionConflictResolvingModelPtrOutput)
}

// The ObjectType name that is used to resolve profile merging conflicts when choosing SOURCE as the ConflictResolvingModel.
func (o DomainConflictResolutionPtrOutput) SourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainConflictResolution) *string {
		if v == nil {
			return nil
		}
		return v.SourceName
	}).(pulumi.StringPtrOutput)
}

// A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.
type DomainConsolidation struct {
	// A list of matching criteria.
	MatchingAttributesList [][]string `pulumi:"matchingAttributesList"`
}

// DomainConsolidationInput is an input type that accepts DomainConsolidationArgs and DomainConsolidationOutput values.
// You can construct a concrete instance of `DomainConsolidationInput` via:
//
//	DomainConsolidationArgs{...}
type DomainConsolidationInput interface {
	pulumi.Input

	ToDomainConsolidationOutput() DomainConsolidationOutput
	ToDomainConsolidationOutputWithContext(context.Context) DomainConsolidationOutput
}

// A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.
type DomainConsolidationArgs struct {
	// A list of matching criteria.
	MatchingAttributesList pulumi.StringArrayArrayInput `pulumi:"matchingAttributesList"`
}

func (DomainConsolidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConsolidation)(nil)).Elem()
}

func (i DomainConsolidationArgs) ToDomainConsolidationOutput() DomainConsolidationOutput {
	return i.ToDomainConsolidationOutputWithContext(context.Background())
}

func (i DomainConsolidationArgs) ToDomainConsolidationOutputWithContext(ctx context.Context) DomainConsolidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConsolidationOutput)
}

func (i DomainConsolidationArgs) ToOutput(ctx context.Context) pulumix.Output[DomainConsolidation] {
	return pulumix.Output[DomainConsolidation]{
		OutputState: i.ToDomainConsolidationOutputWithContext(ctx).OutputState,
	}
}

func (i DomainConsolidationArgs) ToDomainConsolidationPtrOutput() DomainConsolidationPtrOutput {
	return i.ToDomainConsolidationPtrOutputWithContext(context.Background())
}

func (i DomainConsolidationArgs) ToDomainConsolidationPtrOutputWithContext(ctx context.Context) DomainConsolidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConsolidationOutput).ToDomainConsolidationPtrOutputWithContext(ctx)
}

// DomainConsolidationPtrInput is an input type that accepts DomainConsolidationArgs, DomainConsolidationPtr and DomainConsolidationPtrOutput values.
// You can construct a concrete instance of `DomainConsolidationPtrInput` via:
//
//	        DomainConsolidationArgs{...}
//
//	or:
//
//	        nil
type DomainConsolidationPtrInput interface {
	pulumi.Input

	ToDomainConsolidationPtrOutput() DomainConsolidationPtrOutput
	ToDomainConsolidationPtrOutputWithContext(context.Context) DomainConsolidationPtrOutput
}

type domainConsolidationPtrType DomainConsolidationArgs

func DomainConsolidationPtr(v *DomainConsolidationArgs) DomainConsolidationPtrInput {
	return (*domainConsolidationPtrType)(v)
}

func (*domainConsolidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConsolidation)(nil)).Elem()
}

func (i *domainConsolidationPtrType) ToDomainConsolidationPtrOutput() DomainConsolidationPtrOutput {
	return i.ToDomainConsolidationPtrOutputWithContext(context.Background())
}

func (i *domainConsolidationPtrType) ToDomainConsolidationPtrOutputWithContext(ctx context.Context) DomainConsolidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConsolidationPtrOutput)
}

func (i *domainConsolidationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainConsolidation] {
	return pulumix.Output[*DomainConsolidation]{
		OutputState: i.ToDomainConsolidationPtrOutputWithContext(ctx).OutputState,
	}
}

// A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.
type DomainConsolidationOutput struct{ *pulumi.OutputState }

func (DomainConsolidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConsolidation)(nil)).Elem()
}

func (o DomainConsolidationOutput) ToDomainConsolidationOutput() DomainConsolidationOutput {
	return o
}

func (o DomainConsolidationOutput) ToDomainConsolidationOutputWithContext(ctx context.Context) DomainConsolidationOutput {
	return o
}

func (o DomainConsolidationOutput) ToDomainConsolidationPtrOutput() DomainConsolidationPtrOutput {
	return o.ToDomainConsolidationPtrOutputWithContext(context.Background())
}

func (o DomainConsolidationOutput) ToDomainConsolidationPtrOutputWithContext(ctx context.Context) DomainConsolidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConsolidation) *DomainConsolidation {
		return &v
	}).(DomainConsolidationPtrOutput)
}

func (o DomainConsolidationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainConsolidation] {
	return pulumix.Output[DomainConsolidation]{
		OutputState: o.OutputState,
	}
}

// A list of matching criteria.
func (o DomainConsolidationOutput) MatchingAttributesList() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v DomainConsolidation) [][]string { return v.MatchingAttributesList }).(pulumi.StringArrayArrayOutput)
}

type DomainConsolidationPtrOutput struct{ *pulumi.OutputState }

func (DomainConsolidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConsolidation)(nil)).Elem()
}

func (o DomainConsolidationPtrOutput) ToDomainConsolidationPtrOutput() DomainConsolidationPtrOutput {
	return o
}

func (o DomainConsolidationPtrOutput) ToDomainConsolidationPtrOutputWithContext(ctx context.Context) DomainConsolidationPtrOutput {
	return o
}

func (o DomainConsolidationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainConsolidation] {
	return pulumix.Output[*DomainConsolidation]{
		OutputState: o.OutputState,
	}
}

func (o DomainConsolidationPtrOutput) Elem() DomainConsolidationOutput {
	return o.ApplyT(func(v *DomainConsolidation) DomainConsolidation {
		if v != nil {
			return *v
		}
		var ret DomainConsolidation
		return ret
	}).(DomainConsolidationOutput)
}

// A list of matching criteria.
func (o DomainConsolidationPtrOutput) MatchingAttributesList() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *DomainConsolidation) [][]string {
		if v == nil {
			return nil
		}
		return v.MatchingAttributesList
	}).(pulumi.StringArrayArrayOutput)
}

// Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.
type DomainExportingConfig struct {
	S3Exporting *DomainS3ExportingConfig `pulumi:"s3Exporting"`
}

// DomainExportingConfigInput is an input type that accepts DomainExportingConfigArgs and DomainExportingConfigOutput values.
// You can construct a concrete instance of `DomainExportingConfigInput` via:
//
//	DomainExportingConfigArgs{...}
type DomainExportingConfigInput interface {
	pulumi.Input

	ToDomainExportingConfigOutput() DomainExportingConfigOutput
	ToDomainExportingConfigOutputWithContext(context.Context) DomainExportingConfigOutput
}

// Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.
type DomainExportingConfigArgs struct {
	S3Exporting DomainS3ExportingConfigPtrInput `pulumi:"s3Exporting"`
}

func (DomainExportingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainExportingConfig)(nil)).Elem()
}

func (i DomainExportingConfigArgs) ToDomainExportingConfigOutput() DomainExportingConfigOutput {
	return i.ToDomainExportingConfigOutputWithContext(context.Background())
}

func (i DomainExportingConfigArgs) ToDomainExportingConfigOutputWithContext(ctx context.Context) DomainExportingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainExportingConfigOutput)
}

func (i DomainExportingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[DomainExportingConfig] {
	return pulumix.Output[DomainExportingConfig]{
		OutputState: i.ToDomainExportingConfigOutputWithContext(ctx).OutputState,
	}
}

func (i DomainExportingConfigArgs) ToDomainExportingConfigPtrOutput() DomainExportingConfigPtrOutput {
	return i.ToDomainExportingConfigPtrOutputWithContext(context.Background())
}

func (i DomainExportingConfigArgs) ToDomainExportingConfigPtrOutputWithContext(ctx context.Context) DomainExportingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainExportingConfigOutput).ToDomainExportingConfigPtrOutputWithContext(ctx)
}

// DomainExportingConfigPtrInput is an input type that accepts DomainExportingConfigArgs, DomainExportingConfigPtr and DomainExportingConfigPtrOutput values.
// You can construct a concrete instance of `DomainExportingConfigPtrInput` via:
//
//	        DomainExportingConfigArgs{...}
//
//	or:
//
//	        nil
type DomainExportingConfigPtrInput interface {
	pulumi.Input

	ToDomainExportingConfigPtrOutput() DomainExportingConfigPtrOutput
	ToDomainExportingConfigPtrOutputWithContext(context.Context) DomainExportingConfigPtrOutput
}

type domainExportingConfigPtrType DomainExportingConfigArgs

func DomainExportingConfigPtr(v *DomainExportingConfigArgs) DomainExportingConfigPtrInput {
	return (*domainExportingConfigPtrType)(v)
}

func (*domainExportingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainExportingConfig)(nil)).Elem()
}

func (i *domainExportingConfigPtrType) ToDomainExportingConfigPtrOutput() DomainExportingConfigPtrOutput {
	return i.ToDomainExportingConfigPtrOutputWithContext(context.Background())
}

func (i *domainExportingConfigPtrType) ToDomainExportingConfigPtrOutputWithContext(ctx context.Context) DomainExportingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainExportingConfigPtrOutput)
}

func (i *domainExportingConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainExportingConfig] {
	return pulumix.Output[*DomainExportingConfig]{
		OutputState: i.ToDomainExportingConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.
type DomainExportingConfigOutput struct{ *pulumi.OutputState }

func (DomainExportingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainExportingConfig)(nil)).Elem()
}

func (o DomainExportingConfigOutput) ToDomainExportingConfigOutput() DomainExportingConfigOutput {
	return o
}

func (o DomainExportingConfigOutput) ToDomainExportingConfigOutputWithContext(ctx context.Context) DomainExportingConfigOutput {
	return o
}

func (o DomainExportingConfigOutput) ToDomainExportingConfigPtrOutput() DomainExportingConfigPtrOutput {
	return o.ToDomainExportingConfigPtrOutputWithContext(context.Background())
}

func (o DomainExportingConfigOutput) ToDomainExportingConfigPtrOutputWithContext(ctx context.Context) DomainExportingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainExportingConfig) *DomainExportingConfig {
		return &v
	}).(DomainExportingConfigPtrOutput)
}

func (o DomainExportingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DomainExportingConfig] {
	return pulumix.Output[DomainExportingConfig]{
		OutputState: o.OutputState,
	}
}

func (o DomainExportingConfigOutput) S3Exporting() DomainS3ExportingConfigPtrOutput {
	return o.ApplyT(func(v DomainExportingConfig) *DomainS3ExportingConfig { return v.S3Exporting }).(DomainS3ExportingConfigPtrOutput)
}

type DomainExportingConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainExportingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainExportingConfig)(nil)).Elem()
}

func (o DomainExportingConfigPtrOutput) ToDomainExportingConfigPtrOutput() DomainExportingConfigPtrOutput {
	return o
}

func (o DomainExportingConfigPtrOutput) ToDomainExportingConfigPtrOutputWithContext(ctx context.Context) DomainExportingConfigPtrOutput {
	return o
}

func (o DomainExportingConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainExportingConfig] {
	return pulumix.Output[*DomainExportingConfig]{
		OutputState: o.OutputState,
	}
}

func (o DomainExportingConfigPtrOutput) Elem() DomainExportingConfigOutput {
	return o.ApplyT(func(v *DomainExportingConfig) DomainExportingConfig {
		if v != nil {
			return *v
		}
		var ret DomainExportingConfig
		return ret
	}).(DomainExportingConfigOutput)
}

func (o DomainExportingConfigPtrOutput) S3Exporting() DomainS3ExportingConfigPtrOutput {
	return o.ApplyT(func(v *DomainExportingConfig) *DomainS3ExportingConfig {
		if v == nil {
			return nil
		}
		return v.S3Exporting
	}).(DomainS3ExportingConfigPtrOutput)
}

// The day and time when do you want to start the Identity Resolution Job every week.
type DomainJobSchedule struct {
	// The day when the Identity Resolution Job should run every week.
	DayOfTheWeek DomainJobScheduleDayOfTheWeek `pulumi:"dayOfTheWeek"`
	// The time when the Identity Resolution Job should run every week.
	Time string `pulumi:"time"`
}

// DomainJobScheduleInput is an input type that accepts DomainJobScheduleArgs and DomainJobScheduleOutput values.
// You can construct a concrete instance of `DomainJobScheduleInput` via:
//
//	DomainJobScheduleArgs{...}
type DomainJobScheduleInput interface {
	pulumi.Input

	ToDomainJobScheduleOutput() DomainJobScheduleOutput
	ToDomainJobScheduleOutputWithContext(context.Context) DomainJobScheduleOutput
}

// The day and time when do you want to start the Identity Resolution Job every week.
type DomainJobScheduleArgs struct {
	// The day when the Identity Resolution Job should run every week.
	DayOfTheWeek DomainJobScheduleDayOfTheWeekInput `pulumi:"dayOfTheWeek"`
	// The time when the Identity Resolution Job should run every week.
	Time pulumi.StringInput `pulumi:"time"`
}

func (DomainJobScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainJobSchedule)(nil)).Elem()
}

func (i DomainJobScheduleArgs) ToDomainJobScheduleOutput() DomainJobScheduleOutput {
	return i.ToDomainJobScheduleOutputWithContext(context.Background())
}

func (i DomainJobScheduleArgs) ToDomainJobScheduleOutputWithContext(ctx context.Context) DomainJobScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainJobScheduleOutput)
}

func (i DomainJobScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[DomainJobSchedule] {
	return pulumix.Output[DomainJobSchedule]{
		OutputState: i.ToDomainJobScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i DomainJobScheduleArgs) ToDomainJobSchedulePtrOutput() DomainJobSchedulePtrOutput {
	return i.ToDomainJobSchedulePtrOutputWithContext(context.Background())
}

func (i DomainJobScheduleArgs) ToDomainJobSchedulePtrOutputWithContext(ctx context.Context) DomainJobSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainJobScheduleOutput).ToDomainJobSchedulePtrOutputWithContext(ctx)
}

// DomainJobSchedulePtrInput is an input type that accepts DomainJobScheduleArgs, DomainJobSchedulePtr and DomainJobSchedulePtrOutput values.
// You can construct a concrete instance of `DomainJobSchedulePtrInput` via:
//
//	        DomainJobScheduleArgs{...}
//
//	or:
//
//	        nil
type DomainJobSchedulePtrInput interface {
	pulumi.Input

	ToDomainJobSchedulePtrOutput() DomainJobSchedulePtrOutput
	ToDomainJobSchedulePtrOutputWithContext(context.Context) DomainJobSchedulePtrOutput
}

type domainJobSchedulePtrType DomainJobScheduleArgs

func DomainJobSchedulePtr(v *DomainJobScheduleArgs) DomainJobSchedulePtrInput {
	return (*domainJobSchedulePtrType)(v)
}

func (*domainJobSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainJobSchedule)(nil)).Elem()
}

func (i *domainJobSchedulePtrType) ToDomainJobSchedulePtrOutput() DomainJobSchedulePtrOutput {
	return i.ToDomainJobSchedulePtrOutputWithContext(context.Background())
}

func (i *domainJobSchedulePtrType) ToDomainJobSchedulePtrOutputWithContext(ctx context.Context) DomainJobSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainJobSchedulePtrOutput)
}

func (i *domainJobSchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainJobSchedule] {
	return pulumix.Output[*DomainJobSchedule]{
		OutputState: i.ToDomainJobSchedulePtrOutputWithContext(ctx).OutputState,
	}
}

// The day and time when do you want to start the Identity Resolution Job every week.
type DomainJobScheduleOutput struct{ *pulumi.OutputState }

func (DomainJobScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainJobSchedule)(nil)).Elem()
}

func (o DomainJobScheduleOutput) ToDomainJobScheduleOutput() DomainJobScheduleOutput {
	return o
}

func (o DomainJobScheduleOutput) ToDomainJobScheduleOutputWithContext(ctx context.Context) DomainJobScheduleOutput {
	return o
}

func (o DomainJobScheduleOutput) ToDomainJobSchedulePtrOutput() DomainJobSchedulePtrOutput {
	return o.ToDomainJobSchedulePtrOutputWithContext(context.Background())
}

func (o DomainJobScheduleOutput) ToDomainJobSchedulePtrOutputWithContext(ctx context.Context) DomainJobSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainJobSchedule) *DomainJobSchedule {
		return &v
	}).(DomainJobSchedulePtrOutput)
}

func (o DomainJobScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[DomainJobSchedule] {
	return pulumix.Output[DomainJobSchedule]{
		OutputState: o.OutputState,
	}
}

// The day when the Identity Resolution Job should run every week.
func (o DomainJobScheduleOutput) DayOfTheWeek() DomainJobScheduleDayOfTheWeekOutput {
	return o.ApplyT(func(v DomainJobSchedule) DomainJobScheduleDayOfTheWeek { return v.DayOfTheWeek }).(DomainJobScheduleDayOfTheWeekOutput)
}

// The time when the Identity Resolution Job should run every week.
func (o DomainJobScheduleOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v DomainJobSchedule) string { return v.Time }).(pulumi.StringOutput)
}

type DomainJobSchedulePtrOutput struct{ *pulumi.OutputState }

func (DomainJobSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainJobSchedule)(nil)).Elem()
}

func (o DomainJobSchedulePtrOutput) ToDomainJobSchedulePtrOutput() DomainJobSchedulePtrOutput {
	return o
}

func (o DomainJobSchedulePtrOutput) ToDomainJobSchedulePtrOutputWithContext(ctx context.Context) DomainJobSchedulePtrOutput {
	return o
}

func (o DomainJobSchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainJobSchedule] {
	return pulumix.Output[*DomainJobSchedule]{
		OutputState: o.OutputState,
	}
}

func (o DomainJobSchedulePtrOutput) Elem() DomainJobScheduleOutput {
	return o.ApplyT(func(v *DomainJobSchedule) DomainJobSchedule {
		if v != nil {
			return *v
		}
		var ret DomainJobSchedule
		return ret
	}).(DomainJobScheduleOutput)
}

// The day when the Identity Resolution Job should run every week.
func (o DomainJobSchedulePtrOutput) DayOfTheWeek() DomainJobScheduleDayOfTheWeekPtrOutput {
	return o.ApplyT(func(v *DomainJobSchedule) *DomainJobScheduleDayOfTheWeek {
		if v == nil {
			return nil
		}
		return &v.DayOfTheWeek
	}).(DomainJobScheduleDayOfTheWeekPtrOutput)
}

// The time when the Identity Resolution Job should run every week.
func (o DomainJobSchedulePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainJobSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

// The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. After the Identity Resolution Job completes, use the GetMatches API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from S3.
type DomainMatching struct {
	AutoMerging *DomainAutoMerging `pulumi:"autoMerging"`
	// The flag that enables the matching process of duplicate profiles.
	Enabled         bool                   `pulumi:"enabled"`
	ExportingConfig *DomainExportingConfig `pulumi:"exportingConfig"`
	JobSchedule     *DomainJobSchedule     `pulumi:"jobSchedule"`
}

// DomainMatchingInput is an input type that accepts DomainMatchingArgs and DomainMatchingOutput values.
// You can construct a concrete instance of `DomainMatchingInput` via:
//
//	DomainMatchingArgs{...}
type DomainMatchingInput interface {
	pulumi.Input

	ToDomainMatchingOutput() DomainMatchingOutput
	ToDomainMatchingOutputWithContext(context.Context) DomainMatchingOutput
}

// The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. After the Identity Resolution Job completes, use the GetMatches API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from S3.
type DomainMatchingArgs struct {
	AutoMerging DomainAutoMergingPtrInput `pulumi:"autoMerging"`
	// The flag that enables the matching process of duplicate profiles.
	Enabled         pulumi.BoolInput              `pulumi:"enabled"`
	ExportingConfig DomainExportingConfigPtrInput `pulumi:"exportingConfig"`
	JobSchedule     DomainJobSchedulePtrInput     `pulumi:"jobSchedule"`
}

func (DomainMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMatching)(nil)).Elem()
}

func (i DomainMatchingArgs) ToDomainMatchingOutput() DomainMatchingOutput {
	return i.ToDomainMatchingOutputWithContext(context.Background())
}

func (i DomainMatchingArgs) ToDomainMatchingOutputWithContext(ctx context.Context) DomainMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMatchingOutput)
}

func (i DomainMatchingArgs) ToOutput(ctx context.Context) pulumix.Output[DomainMatching] {
	return pulumix.Output[DomainMatching]{
		OutputState: i.ToDomainMatchingOutputWithContext(ctx).OutputState,
	}
}

func (i DomainMatchingArgs) ToDomainMatchingPtrOutput() DomainMatchingPtrOutput {
	return i.ToDomainMatchingPtrOutputWithContext(context.Background())
}

func (i DomainMatchingArgs) ToDomainMatchingPtrOutputWithContext(ctx context.Context) DomainMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMatchingOutput).ToDomainMatchingPtrOutputWithContext(ctx)
}

// DomainMatchingPtrInput is an input type that accepts DomainMatchingArgs, DomainMatchingPtr and DomainMatchingPtrOutput values.
// You can construct a concrete instance of `DomainMatchingPtrInput` via:
//
//	        DomainMatchingArgs{...}
//
//	or:
//
//	        nil
type DomainMatchingPtrInput interface {
	pulumi.Input

	ToDomainMatchingPtrOutput() DomainMatchingPtrOutput
	ToDomainMatchingPtrOutputWithContext(context.Context) DomainMatchingPtrOutput
}

type domainMatchingPtrType DomainMatchingArgs

func DomainMatchingPtr(v *DomainMatchingArgs) DomainMatchingPtrInput {
	return (*domainMatchingPtrType)(v)
}

func (*domainMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainMatching)(nil)).Elem()
}

func (i *domainMatchingPtrType) ToDomainMatchingPtrOutput() DomainMatchingPtrOutput {
	return i.ToDomainMatchingPtrOutputWithContext(context.Background())
}

func (i *domainMatchingPtrType) ToDomainMatchingPtrOutputWithContext(ctx context.Context) DomainMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMatchingPtrOutput)
}

func (i *domainMatchingPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainMatching] {
	return pulumix.Output[*DomainMatching]{
		OutputState: i.ToDomainMatchingPtrOutputWithContext(ctx).OutputState,
	}
}

// The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. After the Identity Resolution Job completes, use the GetMatches API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from S3.
type DomainMatchingOutput struct{ *pulumi.OutputState }

func (DomainMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMatching)(nil)).Elem()
}

func (o DomainMatchingOutput) ToDomainMatchingOutput() DomainMatchingOutput {
	return o
}

func (o DomainMatchingOutput) ToDomainMatchingOutputWithContext(ctx context.Context) DomainMatchingOutput {
	return o
}

func (o DomainMatchingOutput) ToDomainMatchingPtrOutput() DomainMatchingPtrOutput {
	return o.ToDomainMatchingPtrOutputWithContext(context.Background())
}

func (o DomainMatchingOutput) ToDomainMatchingPtrOutputWithContext(ctx context.Context) DomainMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainMatching) *DomainMatching {
		return &v
	}).(DomainMatchingPtrOutput)
}

func (o DomainMatchingOutput) ToOutput(ctx context.Context) pulumix.Output[DomainMatching] {
	return pulumix.Output[DomainMatching]{
		OutputState: o.OutputState,
	}
}

func (o DomainMatchingOutput) AutoMerging() DomainAutoMergingPtrOutput {
	return o.ApplyT(func(v DomainMatching) *DomainAutoMerging { return v.AutoMerging }).(DomainAutoMergingPtrOutput)
}

// The flag that enables the matching process of duplicate profiles.
func (o DomainMatchingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainMatching) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o DomainMatchingOutput) ExportingConfig() DomainExportingConfigPtrOutput {
	return o.ApplyT(func(v DomainMatching) *DomainExportingConfig { return v.ExportingConfig }).(DomainExportingConfigPtrOutput)
}

func (o DomainMatchingOutput) JobSchedule() DomainJobSchedulePtrOutput {
	return o.ApplyT(func(v DomainMatching) *DomainJobSchedule { return v.JobSchedule }).(DomainJobSchedulePtrOutput)
}

type DomainMatchingPtrOutput struct{ *pulumi.OutputState }

func (DomainMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainMatching)(nil)).Elem()
}

func (o DomainMatchingPtrOutput) ToDomainMatchingPtrOutput() DomainMatchingPtrOutput {
	return o
}

func (o DomainMatchingPtrOutput) ToDomainMatchingPtrOutputWithContext(ctx context.Context) DomainMatchingPtrOutput {
	return o
}

func (o DomainMatchingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainMatching] {
	return pulumix.Output[*DomainMatching]{
		OutputState: o.OutputState,
	}
}

func (o DomainMatchingPtrOutput) Elem() DomainMatchingOutput {
	return o.ApplyT(func(v *DomainMatching) DomainMatching {
		if v != nil {
			return *v
		}
		var ret DomainMatching
		return ret
	}).(DomainMatchingOutput)
}

func (o DomainMatchingPtrOutput) AutoMerging() DomainAutoMergingPtrOutput {
	return o.ApplyT(func(v *DomainMatching) *DomainAutoMerging {
		if v == nil {
			return nil
		}
		return v.AutoMerging
	}).(DomainAutoMergingPtrOutput)
}

// The flag that enables the matching process of duplicate profiles.
func (o DomainMatchingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainMatching) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o DomainMatchingPtrOutput) ExportingConfig() DomainExportingConfigPtrOutput {
	return o.ApplyT(func(v *DomainMatching) *DomainExportingConfig {
		if v == nil {
			return nil
		}
		return v.ExportingConfig
	}).(DomainExportingConfigPtrOutput)
}

func (o DomainMatchingPtrOutput) JobSchedule() DomainJobSchedulePtrOutput {
	return o.ApplyT(func(v *DomainMatching) *DomainJobSchedule {
		if v == nil {
			return nil
		}
		return v.JobSchedule
	}).(DomainJobSchedulePtrOutput)
}

// Specifies how does the rule-based matching process should match profiles.
type DomainMatchingRule struct {
	Rule []string `pulumi:"rule"`
}

// DomainMatchingRuleInput is an input type that accepts DomainMatchingRuleArgs and DomainMatchingRuleOutput values.
// You can construct a concrete instance of `DomainMatchingRuleInput` via:
//
//	DomainMatchingRuleArgs{...}
type DomainMatchingRuleInput interface {
	pulumi.Input

	ToDomainMatchingRuleOutput() DomainMatchingRuleOutput
	ToDomainMatchingRuleOutputWithContext(context.Context) DomainMatchingRuleOutput
}

// Specifies how does the rule-based matching process should match profiles.
type DomainMatchingRuleArgs struct {
	Rule pulumi.StringArrayInput `pulumi:"rule"`
}

func (DomainMatchingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMatchingRule)(nil)).Elem()
}

func (i DomainMatchingRuleArgs) ToDomainMatchingRuleOutput() DomainMatchingRuleOutput {
	return i.ToDomainMatchingRuleOutputWithContext(context.Background())
}

func (i DomainMatchingRuleArgs) ToDomainMatchingRuleOutputWithContext(ctx context.Context) DomainMatchingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMatchingRuleOutput)
}

func (i DomainMatchingRuleArgs) ToOutput(ctx context.Context) pulumix.Output[DomainMatchingRule] {
	return pulumix.Output[DomainMatchingRule]{
		OutputState: i.ToDomainMatchingRuleOutputWithContext(ctx).OutputState,
	}
}

// DomainMatchingRuleArrayInput is an input type that accepts DomainMatchingRuleArray and DomainMatchingRuleArrayOutput values.
// You can construct a concrete instance of `DomainMatchingRuleArrayInput` via:
//
//	DomainMatchingRuleArray{ DomainMatchingRuleArgs{...} }
type DomainMatchingRuleArrayInput interface {
	pulumi.Input

	ToDomainMatchingRuleArrayOutput() DomainMatchingRuleArrayOutput
	ToDomainMatchingRuleArrayOutputWithContext(context.Context) DomainMatchingRuleArrayOutput
}

type DomainMatchingRuleArray []DomainMatchingRuleInput

func (DomainMatchingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainMatchingRule)(nil)).Elem()
}

func (i DomainMatchingRuleArray) ToDomainMatchingRuleArrayOutput() DomainMatchingRuleArrayOutput {
	return i.ToDomainMatchingRuleArrayOutputWithContext(context.Background())
}

func (i DomainMatchingRuleArray) ToDomainMatchingRuleArrayOutputWithContext(ctx context.Context) DomainMatchingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMatchingRuleArrayOutput)
}

func (i DomainMatchingRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]DomainMatchingRule] {
	return pulumix.Output[[]DomainMatchingRule]{
		OutputState: i.ToDomainMatchingRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies how does the rule-based matching process should match profiles.
type DomainMatchingRuleOutput struct{ *pulumi.OutputState }

func (DomainMatchingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMatchingRule)(nil)).Elem()
}

func (o DomainMatchingRuleOutput) ToDomainMatchingRuleOutput() DomainMatchingRuleOutput {
	return o
}

func (o DomainMatchingRuleOutput) ToDomainMatchingRuleOutputWithContext(ctx context.Context) DomainMatchingRuleOutput {
	return o
}

func (o DomainMatchingRuleOutput) ToOutput(ctx context.Context) pulumix.Output[DomainMatchingRule] {
	return pulumix.Output[DomainMatchingRule]{
		OutputState: o.OutputState,
	}
}

func (o DomainMatchingRuleOutput) Rule() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainMatchingRule) []string { return v.Rule }).(pulumi.StringArrayOutput)
}

type DomainMatchingRuleArrayOutput struct{ *pulumi.OutputState }

func (DomainMatchingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainMatchingRule)(nil)).Elem()
}

func (o DomainMatchingRuleArrayOutput) ToDomainMatchingRuleArrayOutput() DomainMatchingRuleArrayOutput {
	return o
}

func (o DomainMatchingRuleArrayOutput) ToDomainMatchingRuleArrayOutputWithContext(ctx context.Context) DomainMatchingRuleArrayOutput {
	return o
}

func (o DomainMatchingRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DomainMatchingRule] {
	return pulumix.Output[[]DomainMatchingRule]{
		OutputState: o.OutputState,
	}
}

func (o DomainMatchingRuleArrayOutput) Index(i pulumi.IntInput) DomainMatchingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainMatchingRule {
		return vs[0].([]DomainMatchingRule)[vs[1].(int)]
	}).(DomainMatchingRuleOutput)
}

// The process of matching duplicate profiles using the Rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
type DomainRuleBasedMatching struct {
	AttributeTypesSelector *DomainAttributeTypesSelector `pulumi:"attributeTypesSelector"`
	ConflictResolution     *DomainConflictResolution     `pulumi:"conflictResolution"`
	// The flag that enables the rule-based matching process of duplicate profiles.
	Enabled         bool                   `pulumi:"enabled"`
	ExportingConfig *DomainExportingConfig `pulumi:"exportingConfig"`
	// Configures how the rule-based matching process should match profiles. You can have up to 15 MatchingRule in the MatchingRules.
	MatchingRules []DomainMatchingRule `pulumi:"matchingRules"`
	// Indicates the maximum allowed rule level for matching.
	MaxAllowedRuleLevelForMatching *int `pulumi:"maxAllowedRuleLevelForMatching"`
	// Indicates the maximum allowed rule level for merging.
	MaxAllowedRuleLevelForMerging *int                           `pulumi:"maxAllowedRuleLevelForMerging"`
	Status                        *DomainRuleBasedMatchingStatus `pulumi:"status"`
}

// DomainRuleBasedMatchingInput is an input type that accepts DomainRuleBasedMatchingArgs and DomainRuleBasedMatchingOutput values.
// You can construct a concrete instance of `DomainRuleBasedMatchingInput` via:
//
//	DomainRuleBasedMatchingArgs{...}
type DomainRuleBasedMatchingInput interface {
	pulumi.Input

	ToDomainRuleBasedMatchingOutput() DomainRuleBasedMatchingOutput
	ToDomainRuleBasedMatchingOutputWithContext(context.Context) DomainRuleBasedMatchingOutput
}

// The process of matching duplicate profiles using the Rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
type DomainRuleBasedMatchingArgs struct {
	AttributeTypesSelector DomainAttributeTypesSelectorPtrInput `pulumi:"attributeTypesSelector"`
	ConflictResolution     DomainConflictResolutionPtrInput     `pulumi:"conflictResolution"`
	// The flag that enables the rule-based matching process of duplicate profiles.
	Enabled         pulumi.BoolInput              `pulumi:"enabled"`
	ExportingConfig DomainExportingConfigPtrInput `pulumi:"exportingConfig"`
	// Configures how the rule-based matching process should match profiles. You can have up to 15 MatchingRule in the MatchingRules.
	MatchingRules DomainMatchingRuleArrayInput `pulumi:"matchingRules"`
	// Indicates the maximum allowed rule level for matching.
	MaxAllowedRuleLevelForMatching pulumi.IntPtrInput `pulumi:"maxAllowedRuleLevelForMatching"`
	// Indicates the maximum allowed rule level for merging.
	MaxAllowedRuleLevelForMerging pulumi.IntPtrInput                    `pulumi:"maxAllowedRuleLevelForMerging"`
	Status                        DomainRuleBasedMatchingStatusPtrInput `pulumi:"status"`
}

func (DomainRuleBasedMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRuleBasedMatching)(nil)).Elem()
}

func (i DomainRuleBasedMatchingArgs) ToDomainRuleBasedMatchingOutput() DomainRuleBasedMatchingOutput {
	return i.ToDomainRuleBasedMatchingOutputWithContext(context.Background())
}

func (i DomainRuleBasedMatchingArgs) ToDomainRuleBasedMatchingOutputWithContext(ctx context.Context) DomainRuleBasedMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRuleBasedMatchingOutput)
}

func (i DomainRuleBasedMatchingArgs) ToOutput(ctx context.Context) pulumix.Output[DomainRuleBasedMatching] {
	return pulumix.Output[DomainRuleBasedMatching]{
		OutputState: i.ToDomainRuleBasedMatchingOutputWithContext(ctx).OutputState,
	}
}

func (i DomainRuleBasedMatchingArgs) ToDomainRuleBasedMatchingPtrOutput() DomainRuleBasedMatchingPtrOutput {
	return i.ToDomainRuleBasedMatchingPtrOutputWithContext(context.Background())
}

func (i DomainRuleBasedMatchingArgs) ToDomainRuleBasedMatchingPtrOutputWithContext(ctx context.Context) DomainRuleBasedMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRuleBasedMatchingOutput).ToDomainRuleBasedMatchingPtrOutputWithContext(ctx)
}

// DomainRuleBasedMatchingPtrInput is an input type that accepts DomainRuleBasedMatchingArgs, DomainRuleBasedMatchingPtr and DomainRuleBasedMatchingPtrOutput values.
// You can construct a concrete instance of `DomainRuleBasedMatchingPtrInput` via:
//
//	        DomainRuleBasedMatchingArgs{...}
//
//	or:
//
//	        nil
type DomainRuleBasedMatchingPtrInput interface {
	pulumi.Input

	ToDomainRuleBasedMatchingPtrOutput() DomainRuleBasedMatchingPtrOutput
	ToDomainRuleBasedMatchingPtrOutputWithContext(context.Context) DomainRuleBasedMatchingPtrOutput
}

type domainRuleBasedMatchingPtrType DomainRuleBasedMatchingArgs

func DomainRuleBasedMatchingPtr(v *DomainRuleBasedMatchingArgs) DomainRuleBasedMatchingPtrInput {
	return (*domainRuleBasedMatchingPtrType)(v)
}

func (*domainRuleBasedMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRuleBasedMatching)(nil)).Elem()
}

func (i *domainRuleBasedMatchingPtrType) ToDomainRuleBasedMatchingPtrOutput() DomainRuleBasedMatchingPtrOutput {
	return i.ToDomainRuleBasedMatchingPtrOutputWithContext(context.Background())
}

func (i *domainRuleBasedMatchingPtrType) ToDomainRuleBasedMatchingPtrOutputWithContext(ctx context.Context) DomainRuleBasedMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRuleBasedMatchingPtrOutput)
}

func (i *domainRuleBasedMatchingPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainRuleBasedMatching] {
	return pulumix.Output[*DomainRuleBasedMatching]{
		OutputState: i.ToDomainRuleBasedMatchingPtrOutputWithContext(ctx).OutputState,
	}
}

// The process of matching duplicate profiles using the Rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
type DomainRuleBasedMatchingOutput struct{ *pulumi.OutputState }

func (DomainRuleBasedMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRuleBasedMatching)(nil)).Elem()
}

func (o DomainRuleBasedMatchingOutput) ToDomainRuleBasedMatchingOutput() DomainRuleBasedMatchingOutput {
	return o
}

func (o DomainRuleBasedMatchingOutput) ToDomainRuleBasedMatchingOutputWithContext(ctx context.Context) DomainRuleBasedMatchingOutput {
	return o
}

func (o DomainRuleBasedMatchingOutput) ToDomainRuleBasedMatchingPtrOutput() DomainRuleBasedMatchingPtrOutput {
	return o.ToDomainRuleBasedMatchingPtrOutputWithContext(context.Background())
}

func (o DomainRuleBasedMatchingOutput) ToDomainRuleBasedMatchingPtrOutputWithContext(ctx context.Context) DomainRuleBasedMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainRuleBasedMatching) *DomainRuleBasedMatching {
		return &v
	}).(DomainRuleBasedMatchingPtrOutput)
}

func (o DomainRuleBasedMatchingOutput) ToOutput(ctx context.Context) pulumix.Output[DomainRuleBasedMatching] {
	return pulumix.Output[DomainRuleBasedMatching]{
		OutputState: o.OutputState,
	}
}

func (o DomainRuleBasedMatchingOutput) AttributeTypesSelector() DomainAttributeTypesSelectorPtrOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) *DomainAttributeTypesSelector { return v.AttributeTypesSelector }).(DomainAttributeTypesSelectorPtrOutput)
}

func (o DomainRuleBasedMatchingOutput) ConflictResolution() DomainConflictResolutionPtrOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) *DomainConflictResolution { return v.ConflictResolution }).(DomainConflictResolutionPtrOutput)
}

// The flag that enables the rule-based matching process of duplicate profiles.
func (o DomainRuleBasedMatchingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o DomainRuleBasedMatchingOutput) ExportingConfig() DomainExportingConfigPtrOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) *DomainExportingConfig { return v.ExportingConfig }).(DomainExportingConfigPtrOutput)
}

// Configures how the rule-based matching process should match profiles. You can have up to 15 MatchingRule in the MatchingRules.
func (o DomainRuleBasedMatchingOutput) MatchingRules() DomainMatchingRuleArrayOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) []DomainMatchingRule { return v.MatchingRules }).(DomainMatchingRuleArrayOutput)
}

// Indicates the maximum allowed rule level for matching.
func (o DomainRuleBasedMatchingOutput) MaxAllowedRuleLevelForMatching() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) *int { return v.MaxAllowedRuleLevelForMatching }).(pulumi.IntPtrOutput)
}

// Indicates the maximum allowed rule level for merging.
func (o DomainRuleBasedMatchingOutput) MaxAllowedRuleLevelForMerging() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) *int { return v.MaxAllowedRuleLevelForMerging }).(pulumi.IntPtrOutput)
}

func (o DomainRuleBasedMatchingOutput) Status() DomainRuleBasedMatchingStatusPtrOutput {
	return o.ApplyT(func(v DomainRuleBasedMatching) *DomainRuleBasedMatchingStatus { return v.Status }).(DomainRuleBasedMatchingStatusPtrOutput)
}

type DomainRuleBasedMatchingPtrOutput struct{ *pulumi.OutputState }

func (DomainRuleBasedMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRuleBasedMatching)(nil)).Elem()
}

func (o DomainRuleBasedMatchingPtrOutput) ToDomainRuleBasedMatchingPtrOutput() DomainRuleBasedMatchingPtrOutput {
	return o
}

func (o DomainRuleBasedMatchingPtrOutput) ToDomainRuleBasedMatchingPtrOutputWithContext(ctx context.Context) DomainRuleBasedMatchingPtrOutput {
	return o
}

func (o DomainRuleBasedMatchingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainRuleBasedMatching] {
	return pulumix.Output[*DomainRuleBasedMatching]{
		OutputState: o.OutputState,
	}
}

func (o DomainRuleBasedMatchingPtrOutput) Elem() DomainRuleBasedMatchingOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) DomainRuleBasedMatching {
		if v != nil {
			return *v
		}
		var ret DomainRuleBasedMatching
		return ret
	}).(DomainRuleBasedMatchingOutput)
}

func (o DomainRuleBasedMatchingPtrOutput) AttributeTypesSelector() DomainAttributeTypesSelectorPtrOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) *DomainAttributeTypesSelector {
		if v == nil {
			return nil
		}
		return v.AttributeTypesSelector
	}).(DomainAttributeTypesSelectorPtrOutput)
}

func (o DomainRuleBasedMatchingPtrOutput) ConflictResolution() DomainConflictResolutionPtrOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) *DomainConflictResolution {
		if v == nil {
			return nil
		}
		return v.ConflictResolution
	}).(DomainConflictResolutionPtrOutput)
}

// The flag that enables the rule-based matching process of duplicate profiles.
func (o DomainRuleBasedMatchingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o DomainRuleBasedMatchingPtrOutput) ExportingConfig() DomainExportingConfigPtrOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) *DomainExportingConfig {
		if v == nil {
			return nil
		}
		return v.ExportingConfig
	}).(DomainExportingConfigPtrOutput)
}

// Configures how the rule-based matching process should match profiles. You can have up to 15 MatchingRule in the MatchingRules.
func (o DomainRuleBasedMatchingPtrOutput) MatchingRules() DomainMatchingRuleArrayOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) []DomainMatchingRule {
		if v == nil {
			return nil
		}
		return v.MatchingRules
	}).(DomainMatchingRuleArrayOutput)
}

// Indicates the maximum allowed rule level for matching.
func (o DomainRuleBasedMatchingPtrOutput) MaxAllowedRuleLevelForMatching() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) *int {
		if v == nil {
			return nil
		}
		return v.MaxAllowedRuleLevelForMatching
	}).(pulumi.IntPtrOutput)
}

// Indicates the maximum allowed rule level for merging.
func (o DomainRuleBasedMatchingPtrOutput) MaxAllowedRuleLevelForMerging() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) *int {
		if v == nil {
			return nil
		}
		return v.MaxAllowedRuleLevelForMerging
	}).(pulumi.IntPtrOutput)
}

func (o DomainRuleBasedMatchingPtrOutput) Status() DomainRuleBasedMatchingStatusPtrOutput {
	return o.ApplyT(func(v *DomainRuleBasedMatching) *DomainRuleBasedMatchingStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(DomainRuleBasedMatchingStatusPtrOutput)
}

// The S3 location where Identity Resolution Jobs write result files.
type DomainS3ExportingConfig struct {
	// The name of the S3 bucket where Identity Resolution Jobs write result files.
	S3BucketName string `pulumi:"s3BucketName"`
	// The S3 key name of the location where Identity Resolution Jobs write result files.
	S3KeyName *string `pulumi:"s3KeyName"`
}

// DomainS3ExportingConfigInput is an input type that accepts DomainS3ExportingConfigArgs and DomainS3ExportingConfigOutput values.
// You can construct a concrete instance of `DomainS3ExportingConfigInput` via:
//
//	DomainS3ExportingConfigArgs{...}
type DomainS3ExportingConfigInput interface {
	pulumi.Input

	ToDomainS3ExportingConfigOutput() DomainS3ExportingConfigOutput
	ToDomainS3ExportingConfigOutputWithContext(context.Context) DomainS3ExportingConfigOutput
}

// The S3 location where Identity Resolution Jobs write result files.
type DomainS3ExportingConfigArgs struct {
	// The name of the S3 bucket where Identity Resolution Jobs write result files.
	S3BucketName pulumi.StringInput `pulumi:"s3BucketName"`
	// The S3 key name of the location where Identity Resolution Jobs write result files.
	S3KeyName pulumi.StringPtrInput `pulumi:"s3KeyName"`
}

func (DomainS3ExportingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainS3ExportingConfig)(nil)).Elem()
}

func (i DomainS3ExportingConfigArgs) ToDomainS3ExportingConfigOutput() DomainS3ExportingConfigOutput {
	return i.ToDomainS3ExportingConfigOutputWithContext(context.Background())
}

func (i DomainS3ExportingConfigArgs) ToDomainS3ExportingConfigOutputWithContext(ctx context.Context) DomainS3ExportingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainS3ExportingConfigOutput)
}

func (i DomainS3ExportingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[DomainS3ExportingConfig] {
	return pulumix.Output[DomainS3ExportingConfig]{
		OutputState: i.ToDomainS3ExportingConfigOutputWithContext(ctx).OutputState,
	}
}

func (i DomainS3ExportingConfigArgs) ToDomainS3ExportingConfigPtrOutput() DomainS3ExportingConfigPtrOutput {
	return i.ToDomainS3ExportingConfigPtrOutputWithContext(context.Background())
}

func (i DomainS3ExportingConfigArgs) ToDomainS3ExportingConfigPtrOutputWithContext(ctx context.Context) DomainS3ExportingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainS3ExportingConfigOutput).ToDomainS3ExportingConfigPtrOutputWithContext(ctx)
}

// DomainS3ExportingConfigPtrInput is an input type that accepts DomainS3ExportingConfigArgs, DomainS3ExportingConfigPtr and DomainS3ExportingConfigPtrOutput values.
// You can construct a concrete instance of `DomainS3ExportingConfigPtrInput` via:
//
//	        DomainS3ExportingConfigArgs{...}
//
//	or:
//
//	        nil
type DomainS3ExportingConfigPtrInput interface {
	pulumi.Input

	ToDomainS3ExportingConfigPtrOutput() DomainS3ExportingConfigPtrOutput
	ToDomainS3ExportingConfigPtrOutputWithContext(context.Context) DomainS3ExportingConfigPtrOutput
}

type domainS3ExportingConfigPtrType DomainS3ExportingConfigArgs

func DomainS3ExportingConfigPtr(v *DomainS3ExportingConfigArgs) DomainS3ExportingConfigPtrInput {
	return (*domainS3ExportingConfigPtrType)(v)
}

func (*domainS3ExportingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainS3ExportingConfig)(nil)).Elem()
}

func (i *domainS3ExportingConfigPtrType) ToDomainS3ExportingConfigPtrOutput() DomainS3ExportingConfigPtrOutput {
	return i.ToDomainS3ExportingConfigPtrOutputWithContext(context.Background())
}

func (i *domainS3ExportingConfigPtrType) ToDomainS3ExportingConfigPtrOutputWithContext(ctx context.Context) DomainS3ExportingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainS3ExportingConfigPtrOutput)
}

func (i *domainS3ExportingConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainS3ExportingConfig] {
	return pulumix.Output[*DomainS3ExportingConfig]{
		OutputState: i.ToDomainS3ExportingConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The S3 location where Identity Resolution Jobs write result files.
type DomainS3ExportingConfigOutput struct{ *pulumi.OutputState }

func (DomainS3ExportingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainS3ExportingConfig)(nil)).Elem()
}

func (o DomainS3ExportingConfigOutput) ToDomainS3ExportingConfigOutput() DomainS3ExportingConfigOutput {
	return o
}

func (o DomainS3ExportingConfigOutput) ToDomainS3ExportingConfigOutputWithContext(ctx context.Context) DomainS3ExportingConfigOutput {
	return o
}

func (o DomainS3ExportingConfigOutput) ToDomainS3ExportingConfigPtrOutput() DomainS3ExportingConfigPtrOutput {
	return o.ToDomainS3ExportingConfigPtrOutputWithContext(context.Background())
}

func (o DomainS3ExportingConfigOutput) ToDomainS3ExportingConfigPtrOutputWithContext(ctx context.Context) DomainS3ExportingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainS3ExportingConfig) *DomainS3ExportingConfig {
		return &v
	}).(DomainS3ExportingConfigPtrOutput)
}

func (o DomainS3ExportingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DomainS3ExportingConfig] {
	return pulumix.Output[DomainS3ExportingConfig]{
		OutputState: o.OutputState,
	}
}

// The name of the S3 bucket where Identity Resolution Jobs write result files.
func (o DomainS3ExportingConfigOutput) S3BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainS3ExportingConfig) string { return v.S3BucketName }).(pulumi.StringOutput)
}

// The S3 key name of the location where Identity Resolution Jobs write result files.
func (o DomainS3ExportingConfigOutput) S3KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainS3ExportingConfig) *string { return v.S3KeyName }).(pulumi.StringPtrOutput)
}

type DomainS3ExportingConfigPtrOutput struct{ *pulumi.OutputState }

func (DomainS3ExportingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainS3ExportingConfig)(nil)).Elem()
}

func (o DomainS3ExportingConfigPtrOutput) ToDomainS3ExportingConfigPtrOutput() DomainS3ExportingConfigPtrOutput {
	return o
}

func (o DomainS3ExportingConfigPtrOutput) ToDomainS3ExportingConfigPtrOutputWithContext(ctx context.Context) DomainS3ExportingConfigPtrOutput {
	return o
}

func (o DomainS3ExportingConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainS3ExportingConfig] {
	return pulumix.Output[*DomainS3ExportingConfig]{
		OutputState: o.OutputState,
	}
}

func (o DomainS3ExportingConfigPtrOutput) Elem() DomainS3ExportingConfigOutput {
	return o.ApplyT(func(v *DomainS3ExportingConfig) DomainS3ExportingConfig {
		if v != nil {
			return *v
		}
		var ret DomainS3ExportingConfig
		return ret
	}).(DomainS3ExportingConfigOutput)
}

// The name of the S3 bucket where Identity Resolution Jobs write result files.
func (o DomainS3ExportingConfigPtrOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainS3ExportingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.S3BucketName
	}).(pulumi.StringPtrOutput)
}

// The S3 key name of the location where Identity Resolution Jobs write result files.
func (o DomainS3ExportingConfigPtrOutput) S3KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainS3ExportingConfig) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyName
	}).(pulumi.StringPtrOutput)
}

// Usage-specific statistics about the domain.
type DomainStats struct {
	// The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.
	MeteringProfileCount *float64 `pulumi:"meteringProfileCount"`
	// The total number of objects in domain.
	ObjectCount *float64 `pulumi:"objectCount"`
	// The total number of profiles currently in the domain.
	ProfileCount *float64 `pulumi:"profileCount"`
	// The total size, in bytes, of all objects in the domain.
	TotalSize *float64 `pulumi:"totalSize"`
}

// Usage-specific statistics about the domain.
type DomainStatsOutput struct{ *pulumi.OutputState }

func (DomainStatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainStats)(nil)).Elem()
}

func (o DomainStatsOutput) ToDomainStatsOutput() DomainStatsOutput {
	return o
}

func (o DomainStatsOutput) ToDomainStatsOutputWithContext(ctx context.Context) DomainStatsOutput {
	return o
}

func (o DomainStatsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainStats] {
	return pulumix.Output[DomainStats]{
		OutputState: o.OutputState,
	}
}

// The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.
func (o DomainStatsOutput) MeteringProfileCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DomainStats) *float64 { return v.MeteringProfileCount }).(pulumi.Float64PtrOutput)
}

// The total number of objects in domain.
func (o DomainStatsOutput) ObjectCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DomainStats) *float64 { return v.ObjectCount }).(pulumi.Float64PtrOutput)
}

// The total number of profiles currently in the domain.
func (o DomainStatsOutput) ProfileCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DomainStats) *float64 { return v.ProfileCount }).(pulumi.Float64PtrOutput)
}

// The total size, in bytes, of all objects in the domain.
func (o DomainStatsOutput) TotalSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DomainStats) *float64 { return v.TotalSize }).(pulumi.Float64PtrOutput)
}

type DomainStatsPtrOutput struct{ *pulumi.OutputState }

func (DomainStatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainStats)(nil)).Elem()
}

func (o DomainStatsPtrOutput) ToDomainStatsPtrOutput() DomainStatsPtrOutput {
	return o
}

func (o DomainStatsPtrOutput) ToDomainStatsPtrOutputWithContext(ctx context.Context) DomainStatsPtrOutput {
	return o
}

func (o DomainStatsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainStats] {
	return pulumix.Output[*DomainStats]{
		OutputState: o.OutputState,
	}
}

func (o DomainStatsPtrOutput) Elem() DomainStatsOutput {
	return o.ApplyT(func(v *DomainStats) DomainStats {
		if v != nil {
			return *v
		}
		var ret DomainStats
		return ret
	}).(DomainStatsOutput)
}

// The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.
func (o DomainStatsPtrOutput) MeteringProfileCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DomainStats) *float64 {
		if v == nil {
			return nil
		}
		return v.MeteringProfileCount
	}).(pulumi.Float64PtrOutput)
}

// The total number of objects in domain.
func (o DomainStatsPtrOutput) ObjectCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DomainStats) *float64 {
		if v == nil {
			return nil
		}
		return v.ObjectCount
	}).(pulumi.Float64PtrOutput)
}

// The total number of profiles currently in the domain.
func (o DomainStatsPtrOutput) ProfileCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DomainStats) *float64 {
		if v == nil {
			return nil
		}
		return v.ProfileCount
	}).(pulumi.Float64PtrOutput)
}

// The total size, in bytes, of all objects in the domain.
func (o DomainStatsPtrOutput) TotalSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DomainStats) *float64 {
		if v == nil {
			return nil
		}
		return v.TotalSize
	}).(pulumi.Float64PtrOutput)
}

type DomainTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DomainTagInput is an input type that accepts DomainTagArgs and DomainTagOutput values.
// You can construct a concrete instance of `DomainTagInput` via:
//
//	DomainTagArgs{...}
type DomainTagInput interface {
	pulumi.Input

	ToDomainTagOutput() DomainTagOutput
	ToDomainTagOutputWithContext(context.Context) DomainTagOutput
}

type DomainTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DomainTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTag)(nil)).Elem()
}

func (i DomainTagArgs) ToDomainTagOutput() DomainTagOutput {
	return i.ToDomainTagOutputWithContext(context.Background())
}

func (i DomainTagArgs) ToDomainTagOutputWithContext(ctx context.Context) DomainTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTagOutput)
}

func (i DomainTagArgs) ToOutput(ctx context.Context) pulumix.Output[DomainTag] {
	return pulumix.Output[DomainTag]{
		OutputState: i.ToDomainTagOutputWithContext(ctx).OutputState,
	}
}

// DomainTagArrayInput is an input type that accepts DomainTagArray and DomainTagArrayOutput values.
// You can construct a concrete instance of `DomainTagArrayInput` via:
//
//	DomainTagArray{ DomainTagArgs{...} }
type DomainTagArrayInput interface {
	pulumi.Input

	ToDomainTagArrayOutput() DomainTagArrayOutput
	ToDomainTagArrayOutputWithContext(context.Context) DomainTagArrayOutput
}

type DomainTagArray []DomainTagInput

func (DomainTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainTag)(nil)).Elem()
}

func (i DomainTagArray) ToDomainTagArrayOutput() DomainTagArrayOutput {
	return i.ToDomainTagArrayOutputWithContext(context.Background())
}

func (i DomainTagArray) ToDomainTagArrayOutputWithContext(ctx context.Context) DomainTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTagArrayOutput)
}

func (i DomainTagArray) ToOutput(ctx context.Context) pulumix.Output[[]DomainTag] {
	return pulumix.Output[[]DomainTag]{
		OutputState: i.ToDomainTagArrayOutputWithContext(ctx).OutputState,
	}
}

type DomainTagOutput struct{ *pulumi.OutputState }

func (DomainTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTag)(nil)).Elem()
}

func (o DomainTagOutput) ToDomainTagOutput() DomainTagOutput {
	return o
}

func (o DomainTagOutput) ToDomainTagOutputWithContext(ctx context.Context) DomainTagOutput {
	return o
}

func (o DomainTagOutput) ToOutput(ctx context.Context) pulumix.Output[DomainTag] {
	return pulumix.Output[DomainTag]{
		OutputState: o.OutputState,
	}
}

func (o DomainTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DomainTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DomainTag) string { return v.Value }).(pulumi.StringOutput)
}

type DomainTagArrayOutput struct{ *pulumi.OutputState }

func (DomainTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainTag)(nil)).Elem()
}

func (o DomainTagArrayOutput) ToDomainTagArrayOutput() DomainTagArrayOutput {
	return o
}

func (o DomainTagArrayOutput) ToDomainTagArrayOutputWithContext(ctx context.Context) DomainTagArrayOutput {
	return o
}

func (o DomainTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DomainTag] {
	return pulumix.Output[[]DomainTag]{
		OutputState: o.OutputState,
	}
}

func (o DomainTagArrayOutput) Index(i pulumi.IntInput) DomainTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainTag {
		return vs[0].([]DomainTag)[vs[1].(int)]
	}).(DomainTagOutput)
}

// A key-value pair to associate with a resource.
type EventStreamTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// EventStreamTagInput is an input type that accepts EventStreamTagArgs and EventStreamTagOutput values.
// You can construct a concrete instance of `EventStreamTagInput` via:
//
//	EventStreamTagArgs{...}
type EventStreamTagInput interface {
	pulumi.Input

	ToEventStreamTagOutput() EventStreamTagOutput
	ToEventStreamTagOutputWithContext(context.Context) EventStreamTagOutput
}

// A key-value pair to associate with a resource.
type EventStreamTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventStreamTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventStreamTag)(nil)).Elem()
}

func (i EventStreamTagArgs) ToEventStreamTagOutput() EventStreamTagOutput {
	return i.ToEventStreamTagOutputWithContext(context.Background())
}

func (i EventStreamTagArgs) ToEventStreamTagOutputWithContext(ctx context.Context) EventStreamTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventStreamTagOutput)
}

func (i EventStreamTagArgs) ToOutput(ctx context.Context) pulumix.Output[EventStreamTag] {
	return pulumix.Output[EventStreamTag]{
		OutputState: i.ToEventStreamTagOutputWithContext(ctx).OutputState,
	}
}

// EventStreamTagArrayInput is an input type that accepts EventStreamTagArray and EventStreamTagArrayOutput values.
// You can construct a concrete instance of `EventStreamTagArrayInput` via:
//
//	EventStreamTagArray{ EventStreamTagArgs{...} }
type EventStreamTagArrayInput interface {
	pulumi.Input

	ToEventStreamTagArrayOutput() EventStreamTagArrayOutput
	ToEventStreamTagArrayOutputWithContext(context.Context) EventStreamTagArrayOutput
}

type EventStreamTagArray []EventStreamTagInput

func (EventStreamTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventStreamTag)(nil)).Elem()
}

func (i EventStreamTagArray) ToEventStreamTagArrayOutput() EventStreamTagArrayOutput {
	return i.ToEventStreamTagArrayOutputWithContext(context.Background())
}

func (i EventStreamTagArray) ToEventStreamTagArrayOutputWithContext(ctx context.Context) EventStreamTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventStreamTagArrayOutput)
}

func (i EventStreamTagArray) ToOutput(ctx context.Context) pulumix.Output[[]EventStreamTag] {
	return pulumix.Output[[]EventStreamTag]{
		OutputState: i.ToEventStreamTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource.
type EventStreamTagOutput struct{ *pulumi.OutputState }

func (EventStreamTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventStreamTag)(nil)).Elem()
}

func (o EventStreamTagOutput) ToEventStreamTagOutput() EventStreamTagOutput {
	return o
}

func (o EventStreamTagOutput) ToEventStreamTagOutputWithContext(ctx context.Context) EventStreamTagOutput {
	return o
}

func (o EventStreamTagOutput) ToOutput(ctx context.Context) pulumix.Output[EventStreamTag] {
	return pulumix.Output[EventStreamTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o EventStreamTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventStreamTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o EventStreamTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventStreamTag) string { return v.Value }).(pulumi.StringOutput)
}

type EventStreamTagArrayOutput struct{ *pulumi.OutputState }

func (EventStreamTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventStreamTag)(nil)).Elem()
}

func (o EventStreamTagArrayOutput) ToEventStreamTagArrayOutput() EventStreamTagArrayOutput {
	return o
}

func (o EventStreamTagArrayOutput) ToEventStreamTagArrayOutputWithContext(ctx context.Context) EventStreamTagArrayOutput {
	return o
}

func (o EventStreamTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventStreamTag] {
	return pulumix.Output[[]EventStreamTag]{
		OutputState: o.OutputState,
	}
}

func (o EventStreamTagArrayOutput) Index(i pulumi.IntInput) EventStreamTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventStreamTag {
		return vs[0].([]EventStreamTag)[vs[1].(int)]
	}).(EventStreamTagOutput)
}

type IntegrationConnectorOperator struct {
	Marketo    *IntegrationMarketoConnectorOperator    `pulumi:"marketo"`
	S3         *IntegrationS3ConnectorOperator         `pulumi:"s3"`
	Salesforce *IntegrationSalesforceConnectorOperator `pulumi:"salesforce"`
	ServiceNow *IntegrationServiceNowConnectorOperator `pulumi:"serviceNow"`
	Zendesk    *IntegrationZendeskConnectorOperator    `pulumi:"zendesk"`
}

// IntegrationConnectorOperatorInput is an input type that accepts IntegrationConnectorOperatorArgs and IntegrationConnectorOperatorOutput values.
// You can construct a concrete instance of `IntegrationConnectorOperatorInput` via:
//
//	IntegrationConnectorOperatorArgs{...}
type IntegrationConnectorOperatorInput interface {
	pulumi.Input

	ToIntegrationConnectorOperatorOutput() IntegrationConnectorOperatorOutput
	ToIntegrationConnectorOperatorOutputWithContext(context.Context) IntegrationConnectorOperatorOutput
}

type IntegrationConnectorOperatorArgs struct {
	Marketo    IntegrationMarketoConnectorOperatorPtrInput    `pulumi:"marketo"`
	S3         IntegrationS3ConnectorOperatorPtrInput         `pulumi:"s3"`
	Salesforce IntegrationSalesforceConnectorOperatorPtrInput `pulumi:"salesforce"`
	ServiceNow IntegrationServiceNowConnectorOperatorPtrInput `pulumi:"serviceNow"`
	Zendesk    IntegrationZendeskConnectorOperatorPtrInput    `pulumi:"zendesk"`
}

func (IntegrationConnectorOperatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationConnectorOperator)(nil)).Elem()
}

func (i IntegrationConnectorOperatorArgs) ToIntegrationConnectorOperatorOutput() IntegrationConnectorOperatorOutput {
	return i.ToIntegrationConnectorOperatorOutputWithContext(context.Background())
}

func (i IntegrationConnectorOperatorArgs) ToIntegrationConnectorOperatorOutputWithContext(ctx context.Context) IntegrationConnectorOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationConnectorOperatorOutput)
}

func (i IntegrationConnectorOperatorArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationConnectorOperator] {
	return pulumix.Output[IntegrationConnectorOperator]{
		OutputState: i.ToIntegrationConnectorOperatorOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationConnectorOperatorArgs) ToIntegrationConnectorOperatorPtrOutput() IntegrationConnectorOperatorPtrOutput {
	return i.ToIntegrationConnectorOperatorPtrOutputWithContext(context.Background())
}

func (i IntegrationConnectorOperatorArgs) ToIntegrationConnectorOperatorPtrOutputWithContext(ctx context.Context) IntegrationConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationConnectorOperatorOutput).ToIntegrationConnectorOperatorPtrOutputWithContext(ctx)
}

// IntegrationConnectorOperatorPtrInput is an input type that accepts IntegrationConnectorOperatorArgs, IntegrationConnectorOperatorPtr and IntegrationConnectorOperatorPtrOutput values.
// You can construct a concrete instance of `IntegrationConnectorOperatorPtrInput` via:
//
//	        IntegrationConnectorOperatorArgs{...}
//
//	or:
//
//	        nil
type IntegrationConnectorOperatorPtrInput interface {
	pulumi.Input

	ToIntegrationConnectorOperatorPtrOutput() IntegrationConnectorOperatorPtrOutput
	ToIntegrationConnectorOperatorPtrOutputWithContext(context.Context) IntegrationConnectorOperatorPtrOutput
}

type integrationConnectorOperatorPtrType IntegrationConnectorOperatorArgs

func IntegrationConnectorOperatorPtr(v *IntegrationConnectorOperatorArgs) IntegrationConnectorOperatorPtrInput {
	return (*integrationConnectorOperatorPtrType)(v)
}

func (*integrationConnectorOperatorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationConnectorOperator)(nil)).Elem()
}

func (i *integrationConnectorOperatorPtrType) ToIntegrationConnectorOperatorPtrOutput() IntegrationConnectorOperatorPtrOutput {
	return i.ToIntegrationConnectorOperatorPtrOutputWithContext(context.Background())
}

func (i *integrationConnectorOperatorPtrType) ToIntegrationConnectorOperatorPtrOutputWithContext(ctx context.Context) IntegrationConnectorOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationConnectorOperatorPtrOutput)
}

func (i *integrationConnectorOperatorPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationConnectorOperator] {
	return pulumix.Output[*IntegrationConnectorOperator]{
		OutputState: i.ToIntegrationConnectorOperatorPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationConnectorOperatorOutput struct{ *pulumi.OutputState }

func (IntegrationConnectorOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationConnectorOperator)(nil)).Elem()
}

func (o IntegrationConnectorOperatorOutput) ToIntegrationConnectorOperatorOutput() IntegrationConnectorOperatorOutput {
	return o
}

func (o IntegrationConnectorOperatorOutput) ToIntegrationConnectorOperatorOutputWithContext(ctx context.Context) IntegrationConnectorOperatorOutput {
	return o
}

func (o IntegrationConnectorOperatorOutput) ToIntegrationConnectorOperatorPtrOutput() IntegrationConnectorOperatorPtrOutput {
	return o.ToIntegrationConnectorOperatorPtrOutputWithContext(context.Background())
}

func (o IntegrationConnectorOperatorOutput) ToIntegrationConnectorOperatorPtrOutputWithContext(ctx context.Context) IntegrationConnectorOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationConnectorOperator) *IntegrationConnectorOperator {
		return &v
	}).(IntegrationConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationConnectorOperator] {
	return pulumix.Output[IntegrationConnectorOperator]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationConnectorOperatorOutput) Marketo() IntegrationMarketoConnectorOperatorPtrOutput {
	return o.ApplyT(func(v IntegrationConnectorOperator) *IntegrationMarketoConnectorOperator { return v.Marketo }).(IntegrationMarketoConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorOutput) S3() IntegrationS3ConnectorOperatorPtrOutput {
	return o.ApplyT(func(v IntegrationConnectorOperator) *IntegrationS3ConnectorOperator { return v.S3 }).(IntegrationS3ConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorOutput) Salesforce() IntegrationSalesforceConnectorOperatorPtrOutput {
	return o.ApplyT(func(v IntegrationConnectorOperator) *IntegrationSalesforceConnectorOperator { return v.Salesforce }).(IntegrationSalesforceConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorOutput) ServiceNow() IntegrationServiceNowConnectorOperatorPtrOutput {
	return o.ApplyT(func(v IntegrationConnectorOperator) *IntegrationServiceNowConnectorOperator { return v.ServiceNow }).(IntegrationServiceNowConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorOutput) Zendesk() IntegrationZendeskConnectorOperatorPtrOutput {
	return o.ApplyT(func(v IntegrationConnectorOperator) *IntegrationZendeskConnectorOperator { return v.Zendesk }).(IntegrationZendeskConnectorOperatorPtrOutput)
}

type IntegrationConnectorOperatorPtrOutput struct{ *pulumi.OutputState }

func (IntegrationConnectorOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationConnectorOperator)(nil)).Elem()
}

func (o IntegrationConnectorOperatorPtrOutput) ToIntegrationConnectorOperatorPtrOutput() IntegrationConnectorOperatorPtrOutput {
	return o
}

func (o IntegrationConnectorOperatorPtrOutput) ToIntegrationConnectorOperatorPtrOutputWithContext(ctx context.Context) IntegrationConnectorOperatorPtrOutput {
	return o
}

func (o IntegrationConnectorOperatorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationConnectorOperator] {
	return pulumix.Output[*IntegrationConnectorOperator]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationConnectorOperatorPtrOutput) Elem() IntegrationConnectorOperatorOutput {
	return o.ApplyT(func(v *IntegrationConnectorOperator) IntegrationConnectorOperator {
		if v != nil {
			return *v
		}
		var ret IntegrationConnectorOperator
		return ret
	}).(IntegrationConnectorOperatorOutput)
}

func (o IntegrationConnectorOperatorPtrOutput) Marketo() IntegrationMarketoConnectorOperatorPtrOutput {
	return o.ApplyT(func(v *IntegrationConnectorOperator) *IntegrationMarketoConnectorOperator {
		if v == nil {
			return nil
		}
		return v.Marketo
	}).(IntegrationMarketoConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorPtrOutput) S3() IntegrationS3ConnectorOperatorPtrOutput {
	return o.ApplyT(func(v *IntegrationConnectorOperator) *IntegrationS3ConnectorOperator {
		if v == nil {
			return nil
		}
		return v.S3
	}).(IntegrationS3ConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorPtrOutput) Salesforce() IntegrationSalesforceConnectorOperatorPtrOutput {
	return o.ApplyT(func(v *IntegrationConnectorOperator) *IntegrationSalesforceConnectorOperator {
		if v == nil {
			return nil
		}
		return v.Salesforce
	}).(IntegrationSalesforceConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorPtrOutput) ServiceNow() IntegrationServiceNowConnectorOperatorPtrOutput {
	return o.ApplyT(func(v *IntegrationConnectorOperator) *IntegrationServiceNowConnectorOperator {
		if v == nil {
			return nil
		}
		return v.ServiceNow
	}).(IntegrationServiceNowConnectorOperatorPtrOutput)
}

func (o IntegrationConnectorOperatorPtrOutput) Zendesk() IntegrationZendeskConnectorOperatorPtrOutput {
	return o.ApplyT(func(v *IntegrationConnectorOperator) *IntegrationZendeskConnectorOperator {
		if v == nil {
			return nil
		}
		return v.Zendesk
	}).(IntegrationZendeskConnectorOperatorPtrOutput)
}

type IntegrationFlowDefinition struct {
	Description      *string                     `pulumi:"description"`
	FlowName         string                      `pulumi:"flowName"`
	KmsArn           string                      `pulumi:"kmsArn"`
	SourceFlowConfig IntegrationSourceFlowConfig `pulumi:"sourceFlowConfig"`
	Tasks            []IntegrationTask           `pulumi:"tasks"`
	TriggerConfig    IntegrationTriggerConfig    `pulumi:"triggerConfig"`
}

// IntegrationFlowDefinitionInput is an input type that accepts IntegrationFlowDefinitionArgs and IntegrationFlowDefinitionOutput values.
// You can construct a concrete instance of `IntegrationFlowDefinitionInput` via:
//
//	IntegrationFlowDefinitionArgs{...}
type IntegrationFlowDefinitionInput interface {
	pulumi.Input

	ToIntegrationFlowDefinitionOutput() IntegrationFlowDefinitionOutput
	ToIntegrationFlowDefinitionOutputWithContext(context.Context) IntegrationFlowDefinitionOutput
}

type IntegrationFlowDefinitionArgs struct {
	Description      pulumi.StringPtrInput            `pulumi:"description"`
	FlowName         pulumi.StringInput               `pulumi:"flowName"`
	KmsArn           pulumi.StringInput               `pulumi:"kmsArn"`
	SourceFlowConfig IntegrationSourceFlowConfigInput `pulumi:"sourceFlowConfig"`
	Tasks            IntegrationTaskArrayInput        `pulumi:"tasks"`
	TriggerConfig    IntegrationTriggerConfigInput    `pulumi:"triggerConfig"`
}

func (IntegrationFlowDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationFlowDefinition)(nil)).Elem()
}

func (i IntegrationFlowDefinitionArgs) ToIntegrationFlowDefinitionOutput() IntegrationFlowDefinitionOutput {
	return i.ToIntegrationFlowDefinitionOutputWithContext(context.Background())
}

func (i IntegrationFlowDefinitionArgs) ToIntegrationFlowDefinitionOutputWithContext(ctx context.Context) IntegrationFlowDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationFlowDefinitionOutput)
}

func (i IntegrationFlowDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationFlowDefinition] {
	return pulumix.Output[IntegrationFlowDefinition]{
		OutputState: i.ToIntegrationFlowDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationFlowDefinitionArgs) ToIntegrationFlowDefinitionPtrOutput() IntegrationFlowDefinitionPtrOutput {
	return i.ToIntegrationFlowDefinitionPtrOutputWithContext(context.Background())
}

func (i IntegrationFlowDefinitionArgs) ToIntegrationFlowDefinitionPtrOutputWithContext(ctx context.Context) IntegrationFlowDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationFlowDefinitionOutput).ToIntegrationFlowDefinitionPtrOutputWithContext(ctx)
}

// IntegrationFlowDefinitionPtrInput is an input type that accepts IntegrationFlowDefinitionArgs, IntegrationFlowDefinitionPtr and IntegrationFlowDefinitionPtrOutput values.
// You can construct a concrete instance of `IntegrationFlowDefinitionPtrInput` via:
//
//	        IntegrationFlowDefinitionArgs{...}
//
//	or:
//
//	        nil
type IntegrationFlowDefinitionPtrInput interface {
	pulumi.Input

	ToIntegrationFlowDefinitionPtrOutput() IntegrationFlowDefinitionPtrOutput
	ToIntegrationFlowDefinitionPtrOutputWithContext(context.Context) IntegrationFlowDefinitionPtrOutput
}

type integrationFlowDefinitionPtrType IntegrationFlowDefinitionArgs

func IntegrationFlowDefinitionPtr(v *IntegrationFlowDefinitionArgs) IntegrationFlowDefinitionPtrInput {
	return (*integrationFlowDefinitionPtrType)(v)
}

func (*integrationFlowDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationFlowDefinition)(nil)).Elem()
}

func (i *integrationFlowDefinitionPtrType) ToIntegrationFlowDefinitionPtrOutput() IntegrationFlowDefinitionPtrOutput {
	return i.ToIntegrationFlowDefinitionPtrOutputWithContext(context.Background())
}

func (i *integrationFlowDefinitionPtrType) ToIntegrationFlowDefinitionPtrOutputWithContext(ctx context.Context) IntegrationFlowDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationFlowDefinitionPtrOutput)
}

func (i *integrationFlowDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationFlowDefinition] {
	return pulumix.Output[*IntegrationFlowDefinition]{
		OutputState: i.ToIntegrationFlowDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationFlowDefinitionOutput struct{ *pulumi.OutputState }

func (IntegrationFlowDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationFlowDefinition)(nil)).Elem()
}

func (o IntegrationFlowDefinitionOutput) ToIntegrationFlowDefinitionOutput() IntegrationFlowDefinitionOutput {
	return o
}

func (o IntegrationFlowDefinitionOutput) ToIntegrationFlowDefinitionOutputWithContext(ctx context.Context) IntegrationFlowDefinitionOutput {
	return o
}

func (o IntegrationFlowDefinitionOutput) ToIntegrationFlowDefinitionPtrOutput() IntegrationFlowDefinitionPtrOutput {
	return o.ToIntegrationFlowDefinitionPtrOutputWithContext(context.Background())
}

func (o IntegrationFlowDefinitionOutput) ToIntegrationFlowDefinitionPtrOutputWithContext(ctx context.Context) IntegrationFlowDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationFlowDefinition) *IntegrationFlowDefinition {
		return &v
	}).(IntegrationFlowDefinitionPtrOutput)
}

func (o IntegrationFlowDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationFlowDefinition] {
	return pulumix.Output[IntegrationFlowDefinition]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationFlowDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationFlowDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IntegrationFlowDefinitionOutput) FlowName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationFlowDefinition) string { return v.FlowName }).(pulumi.StringOutput)
}

func (o IntegrationFlowDefinitionOutput) KmsArn() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationFlowDefinition) string { return v.KmsArn }).(pulumi.StringOutput)
}

func (o IntegrationFlowDefinitionOutput) SourceFlowConfig() IntegrationSourceFlowConfigOutput {
	return o.ApplyT(func(v IntegrationFlowDefinition) IntegrationSourceFlowConfig { return v.SourceFlowConfig }).(IntegrationSourceFlowConfigOutput)
}

func (o IntegrationFlowDefinitionOutput) Tasks() IntegrationTaskArrayOutput {
	return o.ApplyT(func(v IntegrationFlowDefinition) []IntegrationTask { return v.Tasks }).(IntegrationTaskArrayOutput)
}

func (o IntegrationFlowDefinitionOutput) TriggerConfig() IntegrationTriggerConfigOutput {
	return o.ApplyT(func(v IntegrationFlowDefinition) IntegrationTriggerConfig { return v.TriggerConfig }).(IntegrationTriggerConfigOutput)
}

type IntegrationFlowDefinitionPtrOutput struct{ *pulumi.OutputState }

func (IntegrationFlowDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationFlowDefinition)(nil)).Elem()
}

func (o IntegrationFlowDefinitionPtrOutput) ToIntegrationFlowDefinitionPtrOutput() IntegrationFlowDefinitionPtrOutput {
	return o
}

func (o IntegrationFlowDefinitionPtrOutput) ToIntegrationFlowDefinitionPtrOutputWithContext(ctx context.Context) IntegrationFlowDefinitionPtrOutput {
	return o
}

func (o IntegrationFlowDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationFlowDefinition] {
	return pulumix.Output[*IntegrationFlowDefinition]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationFlowDefinitionPtrOutput) Elem() IntegrationFlowDefinitionOutput {
	return o.ApplyT(func(v *IntegrationFlowDefinition) IntegrationFlowDefinition {
		if v != nil {
			return *v
		}
		var ret IntegrationFlowDefinition
		return ret
	}).(IntegrationFlowDefinitionOutput)
}

func (o IntegrationFlowDefinitionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationFlowDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationFlowDefinitionPtrOutput) FlowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationFlowDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.FlowName
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationFlowDefinitionPtrOutput) KmsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationFlowDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.KmsArn
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationFlowDefinitionPtrOutput) SourceFlowConfig() IntegrationSourceFlowConfigPtrOutput {
	return o.ApplyT(func(v *IntegrationFlowDefinition) *IntegrationSourceFlowConfig {
		if v == nil {
			return nil
		}
		return &v.SourceFlowConfig
	}).(IntegrationSourceFlowConfigPtrOutput)
}

func (o IntegrationFlowDefinitionPtrOutput) Tasks() IntegrationTaskArrayOutput {
	return o.ApplyT(func(v *IntegrationFlowDefinition) []IntegrationTask {
		if v == nil {
			return nil
		}
		return v.Tasks
	}).(IntegrationTaskArrayOutput)
}

func (o IntegrationFlowDefinitionPtrOutput) TriggerConfig() IntegrationTriggerConfigPtrOutput {
	return o.ApplyT(func(v *IntegrationFlowDefinition) *IntegrationTriggerConfig {
		if v == nil {
			return nil
		}
		return &v.TriggerConfig
	}).(IntegrationTriggerConfigPtrOutput)
}

type IntegrationIncrementalPullConfig struct {
	DatetimeTypeFieldName *string `pulumi:"datetimeTypeFieldName"`
}

// IntegrationIncrementalPullConfigInput is an input type that accepts IntegrationIncrementalPullConfigArgs and IntegrationIncrementalPullConfigOutput values.
// You can construct a concrete instance of `IntegrationIncrementalPullConfigInput` via:
//
//	IntegrationIncrementalPullConfigArgs{...}
type IntegrationIncrementalPullConfigInput interface {
	pulumi.Input

	ToIntegrationIncrementalPullConfigOutput() IntegrationIncrementalPullConfigOutput
	ToIntegrationIncrementalPullConfigOutputWithContext(context.Context) IntegrationIncrementalPullConfigOutput
}

type IntegrationIncrementalPullConfigArgs struct {
	DatetimeTypeFieldName pulumi.StringPtrInput `pulumi:"datetimeTypeFieldName"`
}

func (IntegrationIncrementalPullConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationIncrementalPullConfig)(nil)).Elem()
}

func (i IntegrationIncrementalPullConfigArgs) ToIntegrationIncrementalPullConfigOutput() IntegrationIncrementalPullConfigOutput {
	return i.ToIntegrationIncrementalPullConfigOutputWithContext(context.Background())
}

func (i IntegrationIncrementalPullConfigArgs) ToIntegrationIncrementalPullConfigOutputWithContext(ctx context.Context) IntegrationIncrementalPullConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationIncrementalPullConfigOutput)
}

func (i IntegrationIncrementalPullConfigArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationIncrementalPullConfig] {
	return pulumix.Output[IntegrationIncrementalPullConfig]{
		OutputState: i.ToIntegrationIncrementalPullConfigOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationIncrementalPullConfigArgs) ToIntegrationIncrementalPullConfigPtrOutput() IntegrationIncrementalPullConfigPtrOutput {
	return i.ToIntegrationIncrementalPullConfigPtrOutputWithContext(context.Background())
}

func (i IntegrationIncrementalPullConfigArgs) ToIntegrationIncrementalPullConfigPtrOutputWithContext(ctx context.Context) IntegrationIncrementalPullConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationIncrementalPullConfigOutput).ToIntegrationIncrementalPullConfigPtrOutputWithContext(ctx)
}

// IntegrationIncrementalPullConfigPtrInput is an input type that accepts IntegrationIncrementalPullConfigArgs, IntegrationIncrementalPullConfigPtr and IntegrationIncrementalPullConfigPtrOutput values.
// You can construct a concrete instance of `IntegrationIncrementalPullConfigPtrInput` via:
//
//	        IntegrationIncrementalPullConfigArgs{...}
//
//	or:
//
//	        nil
type IntegrationIncrementalPullConfigPtrInput interface {
	pulumi.Input

	ToIntegrationIncrementalPullConfigPtrOutput() IntegrationIncrementalPullConfigPtrOutput
	ToIntegrationIncrementalPullConfigPtrOutputWithContext(context.Context) IntegrationIncrementalPullConfigPtrOutput
}

type integrationIncrementalPullConfigPtrType IntegrationIncrementalPullConfigArgs

func IntegrationIncrementalPullConfigPtr(v *IntegrationIncrementalPullConfigArgs) IntegrationIncrementalPullConfigPtrInput {
	return (*integrationIncrementalPullConfigPtrType)(v)
}

func (*integrationIncrementalPullConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationIncrementalPullConfig)(nil)).Elem()
}

func (i *integrationIncrementalPullConfigPtrType) ToIntegrationIncrementalPullConfigPtrOutput() IntegrationIncrementalPullConfigPtrOutput {
	return i.ToIntegrationIncrementalPullConfigPtrOutputWithContext(context.Background())
}

func (i *integrationIncrementalPullConfigPtrType) ToIntegrationIncrementalPullConfigPtrOutputWithContext(ctx context.Context) IntegrationIncrementalPullConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationIncrementalPullConfigPtrOutput)
}

func (i *integrationIncrementalPullConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationIncrementalPullConfig] {
	return pulumix.Output[*IntegrationIncrementalPullConfig]{
		OutputState: i.ToIntegrationIncrementalPullConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationIncrementalPullConfigOutput struct{ *pulumi.OutputState }

func (IntegrationIncrementalPullConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationIncrementalPullConfig)(nil)).Elem()
}

func (o IntegrationIncrementalPullConfigOutput) ToIntegrationIncrementalPullConfigOutput() IntegrationIncrementalPullConfigOutput {
	return o
}

func (o IntegrationIncrementalPullConfigOutput) ToIntegrationIncrementalPullConfigOutputWithContext(ctx context.Context) IntegrationIncrementalPullConfigOutput {
	return o
}

func (o IntegrationIncrementalPullConfigOutput) ToIntegrationIncrementalPullConfigPtrOutput() IntegrationIncrementalPullConfigPtrOutput {
	return o.ToIntegrationIncrementalPullConfigPtrOutputWithContext(context.Background())
}

func (o IntegrationIncrementalPullConfigOutput) ToIntegrationIncrementalPullConfigPtrOutputWithContext(ctx context.Context) IntegrationIncrementalPullConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationIncrementalPullConfig) *IntegrationIncrementalPullConfig {
		return &v
	}).(IntegrationIncrementalPullConfigPtrOutput)
}

func (o IntegrationIncrementalPullConfigOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationIncrementalPullConfig] {
	return pulumix.Output[IntegrationIncrementalPullConfig]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationIncrementalPullConfigOutput) DatetimeTypeFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationIncrementalPullConfig) *string { return v.DatetimeTypeFieldName }).(pulumi.StringPtrOutput)
}

type IntegrationIncrementalPullConfigPtrOutput struct{ *pulumi.OutputState }

func (IntegrationIncrementalPullConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationIncrementalPullConfig)(nil)).Elem()
}

func (o IntegrationIncrementalPullConfigPtrOutput) ToIntegrationIncrementalPullConfigPtrOutput() IntegrationIncrementalPullConfigPtrOutput {
	return o
}

func (o IntegrationIncrementalPullConfigPtrOutput) ToIntegrationIncrementalPullConfigPtrOutputWithContext(ctx context.Context) IntegrationIncrementalPullConfigPtrOutput {
	return o
}

func (o IntegrationIncrementalPullConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationIncrementalPullConfig] {
	return pulumix.Output[*IntegrationIncrementalPullConfig]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationIncrementalPullConfigPtrOutput) Elem() IntegrationIncrementalPullConfigOutput {
	return o.ApplyT(func(v *IntegrationIncrementalPullConfig) IntegrationIncrementalPullConfig {
		if v != nil {
			return *v
		}
		var ret IntegrationIncrementalPullConfig
		return ret
	}).(IntegrationIncrementalPullConfigOutput)
}

func (o IntegrationIncrementalPullConfigPtrOutput) DatetimeTypeFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationIncrementalPullConfig) *string {
		if v == nil {
			return nil
		}
		return v.DatetimeTypeFieldName
	}).(pulumi.StringPtrOutput)
}

type IntegrationMarketoSourceProperties struct {
	Object string `pulumi:"object"`
}

// IntegrationMarketoSourcePropertiesInput is an input type that accepts IntegrationMarketoSourcePropertiesArgs and IntegrationMarketoSourcePropertiesOutput values.
// You can construct a concrete instance of `IntegrationMarketoSourcePropertiesInput` via:
//
//	IntegrationMarketoSourcePropertiesArgs{...}
type IntegrationMarketoSourcePropertiesInput interface {
	pulumi.Input

	ToIntegrationMarketoSourcePropertiesOutput() IntegrationMarketoSourcePropertiesOutput
	ToIntegrationMarketoSourcePropertiesOutputWithContext(context.Context) IntegrationMarketoSourcePropertiesOutput
}

type IntegrationMarketoSourcePropertiesArgs struct {
	Object pulumi.StringInput `pulumi:"object"`
}

func (IntegrationMarketoSourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationMarketoSourceProperties)(nil)).Elem()
}

func (i IntegrationMarketoSourcePropertiesArgs) ToIntegrationMarketoSourcePropertiesOutput() IntegrationMarketoSourcePropertiesOutput {
	return i.ToIntegrationMarketoSourcePropertiesOutputWithContext(context.Background())
}

func (i IntegrationMarketoSourcePropertiesArgs) ToIntegrationMarketoSourcePropertiesOutputWithContext(ctx context.Context) IntegrationMarketoSourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMarketoSourcePropertiesOutput)
}

func (i IntegrationMarketoSourcePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationMarketoSourceProperties] {
	return pulumix.Output[IntegrationMarketoSourceProperties]{
		OutputState: i.ToIntegrationMarketoSourcePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationMarketoSourcePropertiesArgs) ToIntegrationMarketoSourcePropertiesPtrOutput() IntegrationMarketoSourcePropertiesPtrOutput {
	return i.ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationMarketoSourcePropertiesArgs) ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationMarketoSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMarketoSourcePropertiesOutput).ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(ctx)
}

// IntegrationMarketoSourcePropertiesPtrInput is an input type that accepts IntegrationMarketoSourcePropertiesArgs, IntegrationMarketoSourcePropertiesPtr and IntegrationMarketoSourcePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationMarketoSourcePropertiesPtrInput` via:
//
//	        IntegrationMarketoSourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationMarketoSourcePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationMarketoSourcePropertiesPtrOutput() IntegrationMarketoSourcePropertiesPtrOutput
	ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(context.Context) IntegrationMarketoSourcePropertiesPtrOutput
}

type integrationMarketoSourcePropertiesPtrType IntegrationMarketoSourcePropertiesArgs

func IntegrationMarketoSourcePropertiesPtr(v *IntegrationMarketoSourcePropertiesArgs) IntegrationMarketoSourcePropertiesPtrInput {
	return (*integrationMarketoSourcePropertiesPtrType)(v)
}

func (*integrationMarketoSourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationMarketoSourceProperties)(nil)).Elem()
}

func (i *integrationMarketoSourcePropertiesPtrType) ToIntegrationMarketoSourcePropertiesPtrOutput() IntegrationMarketoSourcePropertiesPtrOutput {
	return i.ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationMarketoSourcePropertiesPtrType) ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationMarketoSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMarketoSourcePropertiesPtrOutput)
}

func (i *integrationMarketoSourcePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationMarketoSourceProperties] {
	return pulumix.Output[*IntegrationMarketoSourceProperties]{
		OutputState: i.ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationMarketoSourcePropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationMarketoSourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationMarketoSourceProperties)(nil)).Elem()
}

func (o IntegrationMarketoSourcePropertiesOutput) ToIntegrationMarketoSourcePropertiesOutput() IntegrationMarketoSourcePropertiesOutput {
	return o
}

func (o IntegrationMarketoSourcePropertiesOutput) ToIntegrationMarketoSourcePropertiesOutputWithContext(ctx context.Context) IntegrationMarketoSourcePropertiesOutput {
	return o
}

func (o IntegrationMarketoSourcePropertiesOutput) ToIntegrationMarketoSourcePropertiesPtrOutput() IntegrationMarketoSourcePropertiesPtrOutput {
	return o.ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationMarketoSourcePropertiesOutput) ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationMarketoSourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationMarketoSourceProperties) *IntegrationMarketoSourceProperties {
		return &v
	}).(IntegrationMarketoSourcePropertiesPtrOutput)
}

func (o IntegrationMarketoSourcePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationMarketoSourceProperties] {
	return pulumix.Output[IntegrationMarketoSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationMarketoSourcePropertiesOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationMarketoSourceProperties) string { return v.Object }).(pulumi.StringOutput)
}

type IntegrationMarketoSourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationMarketoSourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationMarketoSourceProperties)(nil)).Elem()
}

func (o IntegrationMarketoSourcePropertiesPtrOutput) ToIntegrationMarketoSourcePropertiesPtrOutput() IntegrationMarketoSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationMarketoSourcePropertiesPtrOutput) ToIntegrationMarketoSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationMarketoSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationMarketoSourcePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationMarketoSourceProperties] {
	return pulumix.Output[*IntegrationMarketoSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationMarketoSourcePropertiesPtrOutput) Elem() IntegrationMarketoSourcePropertiesOutput {
	return o.ApplyT(func(v *IntegrationMarketoSourceProperties) IntegrationMarketoSourceProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationMarketoSourceProperties
		return ret
	}).(IntegrationMarketoSourcePropertiesOutput)
}

func (o IntegrationMarketoSourcePropertiesPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationMarketoSourceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

type IntegrationObjectTypeMapping struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// IntegrationObjectTypeMappingInput is an input type that accepts IntegrationObjectTypeMappingArgs and IntegrationObjectTypeMappingOutput values.
// You can construct a concrete instance of `IntegrationObjectTypeMappingInput` via:
//
//	IntegrationObjectTypeMappingArgs{...}
type IntegrationObjectTypeMappingInput interface {
	pulumi.Input

	ToIntegrationObjectTypeMappingOutput() IntegrationObjectTypeMappingOutput
	ToIntegrationObjectTypeMappingOutputWithContext(context.Context) IntegrationObjectTypeMappingOutput
}

type IntegrationObjectTypeMappingArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (IntegrationObjectTypeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationObjectTypeMapping)(nil)).Elem()
}

func (i IntegrationObjectTypeMappingArgs) ToIntegrationObjectTypeMappingOutput() IntegrationObjectTypeMappingOutput {
	return i.ToIntegrationObjectTypeMappingOutputWithContext(context.Background())
}

func (i IntegrationObjectTypeMappingArgs) ToIntegrationObjectTypeMappingOutputWithContext(ctx context.Context) IntegrationObjectTypeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationObjectTypeMappingOutput)
}

func (i IntegrationObjectTypeMappingArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationObjectTypeMapping] {
	return pulumix.Output[IntegrationObjectTypeMapping]{
		OutputState: i.ToIntegrationObjectTypeMappingOutputWithContext(ctx).OutputState,
	}
}

// IntegrationObjectTypeMappingArrayInput is an input type that accepts IntegrationObjectTypeMappingArray and IntegrationObjectTypeMappingArrayOutput values.
// You can construct a concrete instance of `IntegrationObjectTypeMappingArrayInput` via:
//
//	IntegrationObjectTypeMappingArray{ IntegrationObjectTypeMappingArgs{...} }
type IntegrationObjectTypeMappingArrayInput interface {
	pulumi.Input

	ToIntegrationObjectTypeMappingArrayOutput() IntegrationObjectTypeMappingArrayOutput
	ToIntegrationObjectTypeMappingArrayOutputWithContext(context.Context) IntegrationObjectTypeMappingArrayOutput
}

type IntegrationObjectTypeMappingArray []IntegrationObjectTypeMappingInput

func (IntegrationObjectTypeMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationObjectTypeMapping)(nil)).Elem()
}

func (i IntegrationObjectTypeMappingArray) ToIntegrationObjectTypeMappingArrayOutput() IntegrationObjectTypeMappingArrayOutput {
	return i.ToIntegrationObjectTypeMappingArrayOutputWithContext(context.Background())
}

func (i IntegrationObjectTypeMappingArray) ToIntegrationObjectTypeMappingArrayOutputWithContext(ctx context.Context) IntegrationObjectTypeMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationObjectTypeMappingArrayOutput)
}

func (i IntegrationObjectTypeMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationObjectTypeMapping] {
	return pulumix.Output[[]IntegrationObjectTypeMapping]{
		OutputState: i.ToIntegrationObjectTypeMappingArrayOutputWithContext(ctx).OutputState,
	}
}

type IntegrationObjectTypeMappingOutput struct{ *pulumi.OutputState }

func (IntegrationObjectTypeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationObjectTypeMapping)(nil)).Elem()
}

func (o IntegrationObjectTypeMappingOutput) ToIntegrationObjectTypeMappingOutput() IntegrationObjectTypeMappingOutput {
	return o
}

func (o IntegrationObjectTypeMappingOutput) ToIntegrationObjectTypeMappingOutputWithContext(ctx context.Context) IntegrationObjectTypeMappingOutput {
	return o
}

func (o IntegrationObjectTypeMappingOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationObjectTypeMapping] {
	return pulumix.Output[IntegrationObjectTypeMapping]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationObjectTypeMappingOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationObjectTypeMapping) string { return v.Key }).(pulumi.StringOutput)
}

func (o IntegrationObjectTypeMappingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationObjectTypeMapping) string { return v.Value }).(pulumi.StringOutput)
}

type IntegrationObjectTypeMappingArrayOutput struct{ *pulumi.OutputState }

func (IntegrationObjectTypeMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationObjectTypeMapping)(nil)).Elem()
}

func (o IntegrationObjectTypeMappingArrayOutput) ToIntegrationObjectTypeMappingArrayOutput() IntegrationObjectTypeMappingArrayOutput {
	return o
}

func (o IntegrationObjectTypeMappingArrayOutput) ToIntegrationObjectTypeMappingArrayOutputWithContext(ctx context.Context) IntegrationObjectTypeMappingArrayOutput {
	return o
}

func (o IntegrationObjectTypeMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationObjectTypeMapping] {
	return pulumix.Output[[]IntegrationObjectTypeMapping]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationObjectTypeMappingArrayOutput) Index(i pulumi.IntInput) IntegrationObjectTypeMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationObjectTypeMapping {
		return vs[0].([]IntegrationObjectTypeMapping)[vs[1].(int)]
	}).(IntegrationObjectTypeMappingOutput)
}

type IntegrationS3SourceProperties struct {
	BucketName   string  `pulumi:"bucketName"`
	BucketPrefix *string `pulumi:"bucketPrefix"`
}

// IntegrationS3SourcePropertiesInput is an input type that accepts IntegrationS3SourcePropertiesArgs and IntegrationS3SourcePropertiesOutput values.
// You can construct a concrete instance of `IntegrationS3SourcePropertiesInput` via:
//
//	IntegrationS3SourcePropertiesArgs{...}
type IntegrationS3SourcePropertiesInput interface {
	pulumi.Input

	ToIntegrationS3SourcePropertiesOutput() IntegrationS3SourcePropertiesOutput
	ToIntegrationS3SourcePropertiesOutputWithContext(context.Context) IntegrationS3SourcePropertiesOutput
}

type IntegrationS3SourcePropertiesArgs struct {
	BucketName   pulumi.StringInput    `pulumi:"bucketName"`
	BucketPrefix pulumi.StringPtrInput `pulumi:"bucketPrefix"`
}

func (IntegrationS3SourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationS3SourceProperties)(nil)).Elem()
}

func (i IntegrationS3SourcePropertiesArgs) ToIntegrationS3SourcePropertiesOutput() IntegrationS3SourcePropertiesOutput {
	return i.ToIntegrationS3SourcePropertiesOutputWithContext(context.Background())
}

func (i IntegrationS3SourcePropertiesArgs) ToIntegrationS3SourcePropertiesOutputWithContext(ctx context.Context) IntegrationS3SourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationS3SourcePropertiesOutput)
}

func (i IntegrationS3SourcePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationS3SourceProperties] {
	return pulumix.Output[IntegrationS3SourceProperties]{
		OutputState: i.ToIntegrationS3SourcePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationS3SourcePropertiesArgs) ToIntegrationS3SourcePropertiesPtrOutput() IntegrationS3SourcePropertiesPtrOutput {
	return i.ToIntegrationS3SourcePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationS3SourcePropertiesArgs) ToIntegrationS3SourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationS3SourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationS3SourcePropertiesOutput).ToIntegrationS3SourcePropertiesPtrOutputWithContext(ctx)
}

// IntegrationS3SourcePropertiesPtrInput is an input type that accepts IntegrationS3SourcePropertiesArgs, IntegrationS3SourcePropertiesPtr and IntegrationS3SourcePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationS3SourcePropertiesPtrInput` via:
//
//	        IntegrationS3SourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationS3SourcePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationS3SourcePropertiesPtrOutput() IntegrationS3SourcePropertiesPtrOutput
	ToIntegrationS3SourcePropertiesPtrOutputWithContext(context.Context) IntegrationS3SourcePropertiesPtrOutput
}

type integrationS3SourcePropertiesPtrType IntegrationS3SourcePropertiesArgs

func IntegrationS3SourcePropertiesPtr(v *IntegrationS3SourcePropertiesArgs) IntegrationS3SourcePropertiesPtrInput {
	return (*integrationS3SourcePropertiesPtrType)(v)
}

func (*integrationS3SourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationS3SourceProperties)(nil)).Elem()
}

func (i *integrationS3SourcePropertiesPtrType) ToIntegrationS3SourcePropertiesPtrOutput() IntegrationS3SourcePropertiesPtrOutput {
	return i.ToIntegrationS3SourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationS3SourcePropertiesPtrType) ToIntegrationS3SourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationS3SourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationS3SourcePropertiesPtrOutput)
}

func (i *integrationS3SourcePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationS3SourceProperties] {
	return pulumix.Output[*IntegrationS3SourceProperties]{
		OutputState: i.ToIntegrationS3SourcePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationS3SourcePropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationS3SourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationS3SourceProperties)(nil)).Elem()
}

func (o IntegrationS3SourcePropertiesOutput) ToIntegrationS3SourcePropertiesOutput() IntegrationS3SourcePropertiesOutput {
	return o
}

func (o IntegrationS3SourcePropertiesOutput) ToIntegrationS3SourcePropertiesOutputWithContext(ctx context.Context) IntegrationS3SourcePropertiesOutput {
	return o
}

func (o IntegrationS3SourcePropertiesOutput) ToIntegrationS3SourcePropertiesPtrOutput() IntegrationS3SourcePropertiesPtrOutput {
	return o.ToIntegrationS3SourcePropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationS3SourcePropertiesOutput) ToIntegrationS3SourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationS3SourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationS3SourceProperties) *IntegrationS3SourceProperties {
		return &v
	}).(IntegrationS3SourcePropertiesPtrOutput)
}

func (o IntegrationS3SourcePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationS3SourceProperties] {
	return pulumix.Output[IntegrationS3SourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationS3SourcePropertiesOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationS3SourceProperties) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o IntegrationS3SourcePropertiesOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationS3SourceProperties) *string { return v.BucketPrefix }).(pulumi.StringPtrOutput)
}

type IntegrationS3SourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationS3SourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationS3SourceProperties)(nil)).Elem()
}

func (o IntegrationS3SourcePropertiesPtrOutput) ToIntegrationS3SourcePropertiesPtrOutput() IntegrationS3SourcePropertiesPtrOutput {
	return o
}

func (o IntegrationS3SourcePropertiesPtrOutput) ToIntegrationS3SourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationS3SourcePropertiesPtrOutput {
	return o
}

func (o IntegrationS3SourcePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationS3SourceProperties] {
	return pulumix.Output[*IntegrationS3SourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationS3SourcePropertiesPtrOutput) Elem() IntegrationS3SourcePropertiesOutput {
	return o.ApplyT(func(v *IntegrationS3SourceProperties) IntegrationS3SourceProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationS3SourceProperties
		return ret
	}).(IntegrationS3SourcePropertiesOutput)
}

func (o IntegrationS3SourcePropertiesPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationS3SourceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationS3SourcePropertiesPtrOutput) BucketPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationS3SourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.BucketPrefix
	}).(pulumi.StringPtrOutput)
}

type IntegrationSalesforceSourceProperties struct {
	EnableDynamicFieldUpdate *bool  `pulumi:"enableDynamicFieldUpdate"`
	IncludeDeletedRecords    *bool  `pulumi:"includeDeletedRecords"`
	Object                   string `pulumi:"object"`
}

// IntegrationSalesforceSourcePropertiesInput is an input type that accepts IntegrationSalesforceSourcePropertiesArgs and IntegrationSalesforceSourcePropertiesOutput values.
// You can construct a concrete instance of `IntegrationSalesforceSourcePropertiesInput` via:
//
//	IntegrationSalesforceSourcePropertiesArgs{...}
type IntegrationSalesforceSourcePropertiesInput interface {
	pulumi.Input

	ToIntegrationSalesforceSourcePropertiesOutput() IntegrationSalesforceSourcePropertiesOutput
	ToIntegrationSalesforceSourcePropertiesOutputWithContext(context.Context) IntegrationSalesforceSourcePropertiesOutput
}

type IntegrationSalesforceSourcePropertiesArgs struct {
	EnableDynamicFieldUpdate pulumi.BoolPtrInput `pulumi:"enableDynamicFieldUpdate"`
	IncludeDeletedRecords    pulumi.BoolPtrInput `pulumi:"includeDeletedRecords"`
	Object                   pulumi.StringInput  `pulumi:"object"`
}

func (IntegrationSalesforceSourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationSalesforceSourceProperties)(nil)).Elem()
}

func (i IntegrationSalesforceSourcePropertiesArgs) ToIntegrationSalesforceSourcePropertiesOutput() IntegrationSalesforceSourcePropertiesOutput {
	return i.ToIntegrationSalesforceSourcePropertiesOutputWithContext(context.Background())
}

func (i IntegrationSalesforceSourcePropertiesArgs) ToIntegrationSalesforceSourcePropertiesOutputWithContext(ctx context.Context) IntegrationSalesforceSourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSalesforceSourcePropertiesOutput)
}

func (i IntegrationSalesforceSourcePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationSalesforceSourceProperties] {
	return pulumix.Output[IntegrationSalesforceSourceProperties]{
		OutputState: i.ToIntegrationSalesforceSourcePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationSalesforceSourcePropertiesArgs) ToIntegrationSalesforceSourcePropertiesPtrOutput() IntegrationSalesforceSourcePropertiesPtrOutput {
	return i.ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationSalesforceSourcePropertiesArgs) ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationSalesforceSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSalesforceSourcePropertiesOutput).ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(ctx)
}

// IntegrationSalesforceSourcePropertiesPtrInput is an input type that accepts IntegrationSalesforceSourcePropertiesArgs, IntegrationSalesforceSourcePropertiesPtr and IntegrationSalesforceSourcePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationSalesforceSourcePropertiesPtrInput` via:
//
//	        IntegrationSalesforceSourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationSalesforceSourcePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationSalesforceSourcePropertiesPtrOutput() IntegrationSalesforceSourcePropertiesPtrOutput
	ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(context.Context) IntegrationSalesforceSourcePropertiesPtrOutput
}

type integrationSalesforceSourcePropertiesPtrType IntegrationSalesforceSourcePropertiesArgs

func IntegrationSalesforceSourcePropertiesPtr(v *IntegrationSalesforceSourcePropertiesArgs) IntegrationSalesforceSourcePropertiesPtrInput {
	return (*integrationSalesforceSourcePropertiesPtrType)(v)
}

func (*integrationSalesforceSourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationSalesforceSourceProperties)(nil)).Elem()
}

func (i *integrationSalesforceSourcePropertiesPtrType) ToIntegrationSalesforceSourcePropertiesPtrOutput() IntegrationSalesforceSourcePropertiesPtrOutput {
	return i.ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationSalesforceSourcePropertiesPtrType) ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationSalesforceSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSalesforceSourcePropertiesPtrOutput)
}

func (i *integrationSalesforceSourcePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationSalesforceSourceProperties] {
	return pulumix.Output[*IntegrationSalesforceSourceProperties]{
		OutputState: i.ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationSalesforceSourcePropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationSalesforceSourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationSalesforceSourceProperties)(nil)).Elem()
}

func (o IntegrationSalesforceSourcePropertiesOutput) ToIntegrationSalesforceSourcePropertiesOutput() IntegrationSalesforceSourcePropertiesOutput {
	return o
}

func (o IntegrationSalesforceSourcePropertiesOutput) ToIntegrationSalesforceSourcePropertiesOutputWithContext(ctx context.Context) IntegrationSalesforceSourcePropertiesOutput {
	return o
}

func (o IntegrationSalesforceSourcePropertiesOutput) ToIntegrationSalesforceSourcePropertiesPtrOutput() IntegrationSalesforceSourcePropertiesPtrOutput {
	return o.ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationSalesforceSourcePropertiesOutput) ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationSalesforceSourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationSalesforceSourceProperties) *IntegrationSalesforceSourceProperties {
		return &v
	}).(IntegrationSalesforceSourcePropertiesPtrOutput)
}

func (o IntegrationSalesforceSourcePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationSalesforceSourceProperties] {
	return pulumix.Output[IntegrationSalesforceSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationSalesforceSourcePropertiesOutput) EnableDynamicFieldUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationSalesforceSourceProperties) *bool { return v.EnableDynamicFieldUpdate }).(pulumi.BoolPtrOutput)
}

func (o IntegrationSalesforceSourcePropertiesOutput) IncludeDeletedRecords() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationSalesforceSourceProperties) *bool { return v.IncludeDeletedRecords }).(pulumi.BoolPtrOutput)
}

func (o IntegrationSalesforceSourcePropertiesOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationSalesforceSourceProperties) string { return v.Object }).(pulumi.StringOutput)
}

type IntegrationSalesforceSourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationSalesforceSourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationSalesforceSourceProperties)(nil)).Elem()
}

func (o IntegrationSalesforceSourcePropertiesPtrOutput) ToIntegrationSalesforceSourcePropertiesPtrOutput() IntegrationSalesforceSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationSalesforceSourcePropertiesPtrOutput) ToIntegrationSalesforceSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationSalesforceSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationSalesforceSourcePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationSalesforceSourceProperties] {
	return pulumix.Output[*IntegrationSalesforceSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationSalesforceSourcePropertiesPtrOutput) Elem() IntegrationSalesforceSourcePropertiesOutput {
	return o.ApplyT(func(v *IntegrationSalesforceSourceProperties) IntegrationSalesforceSourceProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationSalesforceSourceProperties
		return ret
	}).(IntegrationSalesforceSourcePropertiesOutput)
}

func (o IntegrationSalesforceSourcePropertiesPtrOutput) EnableDynamicFieldUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IntegrationSalesforceSourceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDynamicFieldUpdate
	}).(pulumi.BoolPtrOutput)
}

func (o IntegrationSalesforceSourcePropertiesPtrOutput) IncludeDeletedRecords() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IntegrationSalesforceSourceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeDeletedRecords
	}).(pulumi.BoolPtrOutput)
}

func (o IntegrationSalesforceSourcePropertiesPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationSalesforceSourceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

type IntegrationScheduledTriggerProperties struct {
	DataPullMode       *IntegrationScheduledTriggerPropertiesDataPullMode `pulumi:"dataPullMode"`
	FirstExecutionFrom *float64                                           `pulumi:"firstExecutionFrom"`
	ScheduleEndTime    *float64                                           `pulumi:"scheduleEndTime"`
	ScheduleExpression string                                             `pulumi:"scheduleExpression"`
	ScheduleOffset     *int                                               `pulumi:"scheduleOffset"`
	ScheduleStartTime  *float64                                           `pulumi:"scheduleStartTime"`
	Timezone           *string                                            `pulumi:"timezone"`
}

// IntegrationScheduledTriggerPropertiesInput is an input type that accepts IntegrationScheduledTriggerPropertiesArgs and IntegrationScheduledTriggerPropertiesOutput values.
// You can construct a concrete instance of `IntegrationScheduledTriggerPropertiesInput` via:
//
//	IntegrationScheduledTriggerPropertiesArgs{...}
type IntegrationScheduledTriggerPropertiesInput interface {
	pulumi.Input

	ToIntegrationScheduledTriggerPropertiesOutput() IntegrationScheduledTriggerPropertiesOutput
	ToIntegrationScheduledTriggerPropertiesOutputWithContext(context.Context) IntegrationScheduledTriggerPropertiesOutput
}

type IntegrationScheduledTriggerPropertiesArgs struct {
	DataPullMode       IntegrationScheduledTriggerPropertiesDataPullModePtrInput `pulumi:"dataPullMode"`
	FirstExecutionFrom pulumi.Float64PtrInput                                    `pulumi:"firstExecutionFrom"`
	ScheduleEndTime    pulumi.Float64PtrInput                                    `pulumi:"scheduleEndTime"`
	ScheduleExpression pulumi.StringInput                                        `pulumi:"scheduleExpression"`
	ScheduleOffset     pulumi.IntPtrInput                                        `pulumi:"scheduleOffset"`
	ScheduleStartTime  pulumi.Float64PtrInput                                    `pulumi:"scheduleStartTime"`
	Timezone           pulumi.StringPtrInput                                     `pulumi:"timezone"`
}

func (IntegrationScheduledTriggerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationScheduledTriggerProperties)(nil)).Elem()
}

func (i IntegrationScheduledTriggerPropertiesArgs) ToIntegrationScheduledTriggerPropertiesOutput() IntegrationScheduledTriggerPropertiesOutput {
	return i.ToIntegrationScheduledTriggerPropertiesOutputWithContext(context.Background())
}

func (i IntegrationScheduledTriggerPropertiesArgs) ToIntegrationScheduledTriggerPropertiesOutputWithContext(ctx context.Context) IntegrationScheduledTriggerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationScheduledTriggerPropertiesOutput)
}

func (i IntegrationScheduledTriggerPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationScheduledTriggerProperties] {
	return pulumix.Output[IntegrationScheduledTriggerProperties]{
		OutputState: i.ToIntegrationScheduledTriggerPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationScheduledTriggerPropertiesArgs) ToIntegrationScheduledTriggerPropertiesPtrOutput() IntegrationScheduledTriggerPropertiesPtrOutput {
	return i.ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationScheduledTriggerPropertiesArgs) ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationScheduledTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationScheduledTriggerPropertiesOutput).ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(ctx)
}

// IntegrationScheduledTriggerPropertiesPtrInput is an input type that accepts IntegrationScheduledTriggerPropertiesArgs, IntegrationScheduledTriggerPropertiesPtr and IntegrationScheduledTriggerPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationScheduledTriggerPropertiesPtrInput` via:
//
//	        IntegrationScheduledTriggerPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationScheduledTriggerPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationScheduledTriggerPropertiesPtrOutput() IntegrationScheduledTriggerPropertiesPtrOutput
	ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(context.Context) IntegrationScheduledTriggerPropertiesPtrOutput
}

type integrationScheduledTriggerPropertiesPtrType IntegrationScheduledTriggerPropertiesArgs

func IntegrationScheduledTriggerPropertiesPtr(v *IntegrationScheduledTriggerPropertiesArgs) IntegrationScheduledTriggerPropertiesPtrInput {
	return (*integrationScheduledTriggerPropertiesPtrType)(v)
}

func (*integrationScheduledTriggerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationScheduledTriggerProperties)(nil)).Elem()
}

func (i *integrationScheduledTriggerPropertiesPtrType) ToIntegrationScheduledTriggerPropertiesPtrOutput() IntegrationScheduledTriggerPropertiesPtrOutput {
	return i.ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationScheduledTriggerPropertiesPtrType) ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationScheduledTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationScheduledTriggerPropertiesPtrOutput)
}

func (i *integrationScheduledTriggerPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationScheduledTriggerProperties] {
	return pulumix.Output[*IntegrationScheduledTriggerProperties]{
		OutputState: i.ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationScheduledTriggerPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationScheduledTriggerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationScheduledTriggerProperties)(nil)).Elem()
}

func (o IntegrationScheduledTriggerPropertiesOutput) ToIntegrationScheduledTriggerPropertiesOutput() IntegrationScheduledTriggerPropertiesOutput {
	return o
}

func (o IntegrationScheduledTriggerPropertiesOutput) ToIntegrationScheduledTriggerPropertiesOutputWithContext(ctx context.Context) IntegrationScheduledTriggerPropertiesOutput {
	return o
}

func (o IntegrationScheduledTriggerPropertiesOutput) ToIntegrationScheduledTriggerPropertiesPtrOutput() IntegrationScheduledTriggerPropertiesPtrOutput {
	return o.ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationScheduledTriggerPropertiesOutput) ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationScheduledTriggerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationScheduledTriggerProperties) *IntegrationScheduledTriggerProperties {
		return &v
	}).(IntegrationScheduledTriggerPropertiesPtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationScheduledTriggerProperties] {
	return pulumix.Output[IntegrationScheduledTriggerProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationScheduledTriggerPropertiesOutput) DataPullMode() IntegrationScheduledTriggerPropertiesDataPullModePtrOutput {
	return o.ApplyT(func(v IntegrationScheduledTriggerProperties) *IntegrationScheduledTriggerPropertiesDataPullMode {
		return v.DataPullMode
	}).(IntegrationScheduledTriggerPropertiesDataPullModePtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesOutput) FirstExecutionFrom() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v IntegrationScheduledTriggerProperties) *float64 { return v.FirstExecutionFrom }).(pulumi.Float64PtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesOutput) ScheduleEndTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v IntegrationScheduledTriggerProperties) *float64 { return v.ScheduleEndTime }).(pulumi.Float64PtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesOutput) ScheduleExpression() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationScheduledTriggerProperties) string { return v.ScheduleExpression }).(pulumi.StringOutput)
}

func (o IntegrationScheduledTriggerPropertiesOutput) ScheduleOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationScheduledTriggerProperties) *int { return v.ScheduleOffset }).(pulumi.IntPtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesOutput) ScheduleStartTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v IntegrationScheduledTriggerProperties) *float64 { return v.ScheduleStartTime }).(pulumi.Float64PtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationScheduledTriggerProperties) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

type IntegrationScheduledTriggerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationScheduledTriggerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationScheduledTriggerProperties)(nil)).Elem()
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) ToIntegrationScheduledTriggerPropertiesPtrOutput() IntegrationScheduledTriggerPropertiesPtrOutput {
	return o
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) ToIntegrationScheduledTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationScheduledTriggerPropertiesPtrOutput {
	return o
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationScheduledTriggerProperties] {
	return pulumix.Output[*IntegrationScheduledTriggerProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) Elem() IntegrationScheduledTriggerPropertiesOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) IntegrationScheduledTriggerProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationScheduledTriggerProperties
		return ret
	}).(IntegrationScheduledTriggerPropertiesOutput)
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) DataPullMode() IntegrationScheduledTriggerPropertiesDataPullModePtrOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) *IntegrationScheduledTriggerPropertiesDataPullMode {
		if v == nil {
			return nil
		}
		return v.DataPullMode
	}).(IntegrationScheduledTriggerPropertiesDataPullModePtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) FirstExecutionFrom() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.FirstExecutionFrom
	}).(pulumi.Float64PtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) ScheduleEndTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.ScheduleEndTime
	}).(pulumi.Float64PtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) ScheduleExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleExpression
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) ScheduleOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) *int {
		if v == nil {
			return nil
		}
		return v.ScheduleOffset
	}).(pulumi.IntPtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) ScheduleStartTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.ScheduleStartTime
	}).(pulumi.Float64PtrOutput)
}

func (o IntegrationScheduledTriggerPropertiesPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationScheduledTriggerProperties) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

type IntegrationServiceNowSourceProperties struct {
	Object string `pulumi:"object"`
}

// IntegrationServiceNowSourcePropertiesInput is an input type that accepts IntegrationServiceNowSourcePropertiesArgs and IntegrationServiceNowSourcePropertiesOutput values.
// You can construct a concrete instance of `IntegrationServiceNowSourcePropertiesInput` via:
//
//	IntegrationServiceNowSourcePropertiesArgs{...}
type IntegrationServiceNowSourcePropertiesInput interface {
	pulumi.Input

	ToIntegrationServiceNowSourcePropertiesOutput() IntegrationServiceNowSourcePropertiesOutput
	ToIntegrationServiceNowSourcePropertiesOutputWithContext(context.Context) IntegrationServiceNowSourcePropertiesOutput
}

type IntegrationServiceNowSourcePropertiesArgs struct {
	Object pulumi.StringInput `pulumi:"object"`
}

func (IntegrationServiceNowSourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationServiceNowSourceProperties)(nil)).Elem()
}

func (i IntegrationServiceNowSourcePropertiesArgs) ToIntegrationServiceNowSourcePropertiesOutput() IntegrationServiceNowSourcePropertiesOutput {
	return i.ToIntegrationServiceNowSourcePropertiesOutputWithContext(context.Background())
}

func (i IntegrationServiceNowSourcePropertiesArgs) ToIntegrationServiceNowSourcePropertiesOutputWithContext(ctx context.Context) IntegrationServiceNowSourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationServiceNowSourcePropertiesOutput)
}

func (i IntegrationServiceNowSourcePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationServiceNowSourceProperties] {
	return pulumix.Output[IntegrationServiceNowSourceProperties]{
		OutputState: i.ToIntegrationServiceNowSourcePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationServiceNowSourcePropertiesArgs) ToIntegrationServiceNowSourcePropertiesPtrOutput() IntegrationServiceNowSourcePropertiesPtrOutput {
	return i.ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationServiceNowSourcePropertiesArgs) ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationServiceNowSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationServiceNowSourcePropertiesOutput).ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(ctx)
}

// IntegrationServiceNowSourcePropertiesPtrInput is an input type that accepts IntegrationServiceNowSourcePropertiesArgs, IntegrationServiceNowSourcePropertiesPtr and IntegrationServiceNowSourcePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationServiceNowSourcePropertiesPtrInput` via:
//
//	        IntegrationServiceNowSourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationServiceNowSourcePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationServiceNowSourcePropertiesPtrOutput() IntegrationServiceNowSourcePropertiesPtrOutput
	ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(context.Context) IntegrationServiceNowSourcePropertiesPtrOutput
}

type integrationServiceNowSourcePropertiesPtrType IntegrationServiceNowSourcePropertiesArgs

func IntegrationServiceNowSourcePropertiesPtr(v *IntegrationServiceNowSourcePropertiesArgs) IntegrationServiceNowSourcePropertiesPtrInput {
	return (*integrationServiceNowSourcePropertiesPtrType)(v)
}

func (*integrationServiceNowSourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationServiceNowSourceProperties)(nil)).Elem()
}

func (i *integrationServiceNowSourcePropertiesPtrType) ToIntegrationServiceNowSourcePropertiesPtrOutput() IntegrationServiceNowSourcePropertiesPtrOutput {
	return i.ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationServiceNowSourcePropertiesPtrType) ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationServiceNowSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationServiceNowSourcePropertiesPtrOutput)
}

func (i *integrationServiceNowSourcePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationServiceNowSourceProperties] {
	return pulumix.Output[*IntegrationServiceNowSourceProperties]{
		OutputState: i.ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationServiceNowSourcePropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationServiceNowSourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationServiceNowSourceProperties)(nil)).Elem()
}

func (o IntegrationServiceNowSourcePropertiesOutput) ToIntegrationServiceNowSourcePropertiesOutput() IntegrationServiceNowSourcePropertiesOutput {
	return o
}

func (o IntegrationServiceNowSourcePropertiesOutput) ToIntegrationServiceNowSourcePropertiesOutputWithContext(ctx context.Context) IntegrationServiceNowSourcePropertiesOutput {
	return o
}

func (o IntegrationServiceNowSourcePropertiesOutput) ToIntegrationServiceNowSourcePropertiesPtrOutput() IntegrationServiceNowSourcePropertiesPtrOutput {
	return o.ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationServiceNowSourcePropertiesOutput) ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationServiceNowSourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationServiceNowSourceProperties) *IntegrationServiceNowSourceProperties {
		return &v
	}).(IntegrationServiceNowSourcePropertiesPtrOutput)
}

func (o IntegrationServiceNowSourcePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationServiceNowSourceProperties] {
	return pulumix.Output[IntegrationServiceNowSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationServiceNowSourcePropertiesOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationServiceNowSourceProperties) string { return v.Object }).(pulumi.StringOutput)
}

type IntegrationServiceNowSourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationServiceNowSourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationServiceNowSourceProperties)(nil)).Elem()
}

func (o IntegrationServiceNowSourcePropertiesPtrOutput) ToIntegrationServiceNowSourcePropertiesPtrOutput() IntegrationServiceNowSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationServiceNowSourcePropertiesPtrOutput) ToIntegrationServiceNowSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationServiceNowSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationServiceNowSourcePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationServiceNowSourceProperties] {
	return pulumix.Output[*IntegrationServiceNowSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationServiceNowSourcePropertiesPtrOutput) Elem() IntegrationServiceNowSourcePropertiesOutput {
	return o.ApplyT(func(v *IntegrationServiceNowSourceProperties) IntegrationServiceNowSourceProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationServiceNowSourceProperties
		return ret
	}).(IntegrationServiceNowSourcePropertiesOutput)
}

func (o IntegrationServiceNowSourcePropertiesPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationServiceNowSourceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

type IntegrationSourceConnectorProperties struct {
	Marketo    *IntegrationMarketoSourceProperties    `pulumi:"marketo"`
	S3         *IntegrationS3SourceProperties         `pulumi:"s3"`
	Salesforce *IntegrationSalesforceSourceProperties `pulumi:"salesforce"`
	ServiceNow *IntegrationServiceNowSourceProperties `pulumi:"serviceNow"`
	Zendesk    *IntegrationZendeskSourceProperties    `pulumi:"zendesk"`
}

// IntegrationSourceConnectorPropertiesInput is an input type that accepts IntegrationSourceConnectorPropertiesArgs and IntegrationSourceConnectorPropertiesOutput values.
// You can construct a concrete instance of `IntegrationSourceConnectorPropertiesInput` via:
//
//	IntegrationSourceConnectorPropertiesArgs{...}
type IntegrationSourceConnectorPropertiesInput interface {
	pulumi.Input

	ToIntegrationSourceConnectorPropertiesOutput() IntegrationSourceConnectorPropertiesOutput
	ToIntegrationSourceConnectorPropertiesOutputWithContext(context.Context) IntegrationSourceConnectorPropertiesOutput
}

type IntegrationSourceConnectorPropertiesArgs struct {
	Marketo    IntegrationMarketoSourcePropertiesPtrInput    `pulumi:"marketo"`
	S3         IntegrationS3SourcePropertiesPtrInput         `pulumi:"s3"`
	Salesforce IntegrationSalesforceSourcePropertiesPtrInput `pulumi:"salesforce"`
	ServiceNow IntegrationServiceNowSourcePropertiesPtrInput `pulumi:"serviceNow"`
	Zendesk    IntegrationZendeskSourcePropertiesPtrInput    `pulumi:"zendesk"`
}

func (IntegrationSourceConnectorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationSourceConnectorProperties)(nil)).Elem()
}

func (i IntegrationSourceConnectorPropertiesArgs) ToIntegrationSourceConnectorPropertiesOutput() IntegrationSourceConnectorPropertiesOutput {
	return i.ToIntegrationSourceConnectorPropertiesOutputWithContext(context.Background())
}

func (i IntegrationSourceConnectorPropertiesArgs) ToIntegrationSourceConnectorPropertiesOutputWithContext(ctx context.Context) IntegrationSourceConnectorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSourceConnectorPropertiesOutput)
}

func (i IntegrationSourceConnectorPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationSourceConnectorProperties] {
	return pulumix.Output[IntegrationSourceConnectorProperties]{
		OutputState: i.ToIntegrationSourceConnectorPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationSourceConnectorPropertiesArgs) ToIntegrationSourceConnectorPropertiesPtrOutput() IntegrationSourceConnectorPropertiesPtrOutput {
	return i.ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationSourceConnectorPropertiesArgs) ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(ctx context.Context) IntegrationSourceConnectorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSourceConnectorPropertiesOutput).ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(ctx)
}

// IntegrationSourceConnectorPropertiesPtrInput is an input type that accepts IntegrationSourceConnectorPropertiesArgs, IntegrationSourceConnectorPropertiesPtr and IntegrationSourceConnectorPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationSourceConnectorPropertiesPtrInput` via:
//
//	        IntegrationSourceConnectorPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationSourceConnectorPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationSourceConnectorPropertiesPtrOutput() IntegrationSourceConnectorPropertiesPtrOutput
	ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(context.Context) IntegrationSourceConnectorPropertiesPtrOutput
}

type integrationSourceConnectorPropertiesPtrType IntegrationSourceConnectorPropertiesArgs

func IntegrationSourceConnectorPropertiesPtr(v *IntegrationSourceConnectorPropertiesArgs) IntegrationSourceConnectorPropertiesPtrInput {
	return (*integrationSourceConnectorPropertiesPtrType)(v)
}

func (*integrationSourceConnectorPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationSourceConnectorProperties)(nil)).Elem()
}

func (i *integrationSourceConnectorPropertiesPtrType) ToIntegrationSourceConnectorPropertiesPtrOutput() IntegrationSourceConnectorPropertiesPtrOutput {
	return i.ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationSourceConnectorPropertiesPtrType) ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(ctx context.Context) IntegrationSourceConnectorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSourceConnectorPropertiesPtrOutput)
}

func (i *integrationSourceConnectorPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationSourceConnectorProperties] {
	return pulumix.Output[*IntegrationSourceConnectorProperties]{
		OutputState: i.ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationSourceConnectorPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationSourceConnectorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationSourceConnectorProperties)(nil)).Elem()
}

func (o IntegrationSourceConnectorPropertiesOutput) ToIntegrationSourceConnectorPropertiesOutput() IntegrationSourceConnectorPropertiesOutput {
	return o
}

func (o IntegrationSourceConnectorPropertiesOutput) ToIntegrationSourceConnectorPropertiesOutputWithContext(ctx context.Context) IntegrationSourceConnectorPropertiesOutput {
	return o
}

func (o IntegrationSourceConnectorPropertiesOutput) ToIntegrationSourceConnectorPropertiesPtrOutput() IntegrationSourceConnectorPropertiesPtrOutput {
	return o.ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationSourceConnectorPropertiesOutput) ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(ctx context.Context) IntegrationSourceConnectorPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationSourceConnectorProperties) *IntegrationSourceConnectorProperties {
		return &v
	}).(IntegrationSourceConnectorPropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationSourceConnectorProperties] {
	return pulumix.Output[IntegrationSourceConnectorProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationSourceConnectorPropertiesOutput) Marketo() IntegrationMarketoSourcePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationSourceConnectorProperties) *IntegrationMarketoSourceProperties { return v.Marketo }).(IntegrationMarketoSourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesOutput) S3() IntegrationS3SourcePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationSourceConnectorProperties) *IntegrationS3SourceProperties { return v.S3 }).(IntegrationS3SourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesOutput) Salesforce() IntegrationSalesforceSourcePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationSourceConnectorProperties) *IntegrationSalesforceSourceProperties {
		return v.Salesforce
	}).(IntegrationSalesforceSourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesOutput) ServiceNow() IntegrationServiceNowSourcePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationSourceConnectorProperties) *IntegrationServiceNowSourceProperties {
		return v.ServiceNow
	}).(IntegrationServiceNowSourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesOutput) Zendesk() IntegrationZendeskSourcePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationSourceConnectorProperties) *IntegrationZendeskSourceProperties { return v.Zendesk }).(IntegrationZendeskSourcePropertiesPtrOutput)
}

type IntegrationSourceConnectorPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationSourceConnectorPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationSourceConnectorProperties)(nil)).Elem()
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) ToIntegrationSourceConnectorPropertiesPtrOutput() IntegrationSourceConnectorPropertiesPtrOutput {
	return o
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) ToIntegrationSourceConnectorPropertiesPtrOutputWithContext(ctx context.Context) IntegrationSourceConnectorPropertiesPtrOutput {
	return o
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationSourceConnectorProperties] {
	return pulumix.Output[*IntegrationSourceConnectorProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) Elem() IntegrationSourceConnectorPropertiesOutput {
	return o.ApplyT(func(v *IntegrationSourceConnectorProperties) IntegrationSourceConnectorProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationSourceConnectorProperties
		return ret
	}).(IntegrationSourceConnectorPropertiesOutput)
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) Marketo() IntegrationMarketoSourcePropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceConnectorProperties) *IntegrationMarketoSourceProperties {
		if v == nil {
			return nil
		}
		return v.Marketo
	}).(IntegrationMarketoSourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) S3() IntegrationS3SourcePropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceConnectorProperties) *IntegrationS3SourceProperties {
		if v == nil {
			return nil
		}
		return v.S3
	}).(IntegrationS3SourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) Salesforce() IntegrationSalesforceSourcePropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceConnectorProperties) *IntegrationSalesforceSourceProperties {
		if v == nil {
			return nil
		}
		return v.Salesforce
	}).(IntegrationSalesforceSourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) ServiceNow() IntegrationServiceNowSourcePropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceConnectorProperties) *IntegrationServiceNowSourceProperties {
		if v == nil {
			return nil
		}
		return v.ServiceNow
	}).(IntegrationServiceNowSourcePropertiesPtrOutput)
}

func (o IntegrationSourceConnectorPropertiesPtrOutput) Zendesk() IntegrationZendeskSourcePropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceConnectorProperties) *IntegrationZendeskSourceProperties {
		if v == nil {
			return nil
		}
		return v.Zendesk
	}).(IntegrationZendeskSourcePropertiesPtrOutput)
}

type IntegrationSourceFlowConfig struct {
	ConnectorProfileName      *string                              `pulumi:"connectorProfileName"`
	ConnectorType             IntegrationConnectorType             `pulumi:"connectorType"`
	IncrementalPullConfig     *IntegrationIncrementalPullConfig    `pulumi:"incrementalPullConfig"`
	SourceConnectorProperties IntegrationSourceConnectorProperties `pulumi:"sourceConnectorProperties"`
}

// IntegrationSourceFlowConfigInput is an input type that accepts IntegrationSourceFlowConfigArgs and IntegrationSourceFlowConfigOutput values.
// You can construct a concrete instance of `IntegrationSourceFlowConfigInput` via:
//
//	IntegrationSourceFlowConfigArgs{...}
type IntegrationSourceFlowConfigInput interface {
	pulumi.Input

	ToIntegrationSourceFlowConfigOutput() IntegrationSourceFlowConfigOutput
	ToIntegrationSourceFlowConfigOutputWithContext(context.Context) IntegrationSourceFlowConfigOutput
}

type IntegrationSourceFlowConfigArgs struct {
	ConnectorProfileName      pulumi.StringPtrInput                     `pulumi:"connectorProfileName"`
	ConnectorType             IntegrationConnectorTypeInput             `pulumi:"connectorType"`
	IncrementalPullConfig     IntegrationIncrementalPullConfigPtrInput  `pulumi:"incrementalPullConfig"`
	SourceConnectorProperties IntegrationSourceConnectorPropertiesInput `pulumi:"sourceConnectorProperties"`
}

func (IntegrationSourceFlowConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationSourceFlowConfig)(nil)).Elem()
}

func (i IntegrationSourceFlowConfigArgs) ToIntegrationSourceFlowConfigOutput() IntegrationSourceFlowConfigOutput {
	return i.ToIntegrationSourceFlowConfigOutputWithContext(context.Background())
}

func (i IntegrationSourceFlowConfigArgs) ToIntegrationSourceFlowConfigOutputWithContext(ctx context.Context) IntegrationSourceFlowConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSourceFlowConfigOutput)
}

func (i IntegrationSourceFlowConfigArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationSourceFlowConfig] {
	return pulumix.Output[IntegrationSourceFlowConfig]{
		OutputState: i.ToIntegrationSourceFlowConfigOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationSourceFlowConfigArgs) ToIntegrationSourceFlowConfigPtrOutput() IntegrationSourceFlowConfigPtrOutput {
	return i.ToIntegrationSourceFlowConfigPtrOutputWithContext(context.Background())
}

func (i IntegrationSourceFlowConfigArgs) ToIntegrationSourceFlowConfigPtrOutputWithContext(ctx context.Context) IntegrationSourceFlowConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSourceFlowConfigOutput).ToIntegrationSourceFlowConfigPtrOutputWithContext(ctx)
}

// IntegrationSourceFlowConfigPtrInput is an input type that accepts IntegrationSourceFlowConfigArgs, IntegrationSourceFlowConfigPtr and IntegrationSourceFlowConfigPtrOutput values.
// You can construct a concrete instance of `IntegrationSourceFlowConfigPtrInput` via:
//
//	        IntegrationSourceFlowConfigArgs{...}
//
//	or:
//
//	        nil
type IntegrationSourceFlowConfigPtrInput interface {
	pulumi.Input

	ToIntegrationSourceFlowConfigPtrOutput() IntegrationSourceFlowConfigPtrOutput
	ToIntegrationSourceFlowConfigPtrOutputWithContext(context.Context) IntegrationSourceFlowConfigPtrOutput
}

type integrationSourceFlowConfigPtrType IntegrationSourceFlowConfigArgs

func IntegrationSourceFlowConfigPtr(v *IntegrationSourceFlowConfigArgs) IntegrationSourceFlowConfigPtrInput {
	return (*integrationSourceFlowConfigPtrType)(v)
}

func (*integrationSourceFlowConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationSourceFlowConfig)(nil)).Elem()
}

func (i *integrationSourceFlowConfigPtrType) ToIntegrationSourceFlowConfigPtrOutput() IntegrationSourceFlowConfigPtrOutput {
	return i.ToIntegrationSourceFlowConfigPtrOutputWithContext(context.Background())
}

func (i *integrationSourceFlowConfigPtrType) ToIntegrationSourceFlowConfigPtrOutputWithContext(ctx context.Context) IntegrationSourceFlowConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationSourceFlowConfigPtrOutput)
}

func (i *integrationSourceFlowConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationSourceFlowConfig] {
	return pulumix.Output[*IntegrationSourceFlowConfig]{
		OutputState: i.ToIntegrationSourceFlowConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationSourceFlowConfigOutput struct{ *pulumi.OutputState }

func (IntegrationSourceFlowConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationSourceFlowConfig)(nil)).Elem()
}

func (o IntegrationSourceFlowConfigOutput) ToIntegrationSourceFlowConfigOutput() IntegrationSourceFlowConfigOutput {
	return o
}

func (o IntegrationSourceFlowConfigOutput) ToIntegrationSourceFlowConfigOutputWithContext(ctx context.Context) IntegrationSourceFlowConfigOutput {
	return o
}

func (o IntegrationSourceFlowConfigOutput) ToIntegrationSourceFlowConfigPtrOutput() IntegrationSourceFlowConfigPtrOutput {
	return o.ToIntegrationSourceFlowConfigPtrOutputWithContext(context.Background())
}

func (o IntegrationSourceFlowConfigOutput) ToIntegrationSourceFlowConfigPtrOutputWithContext(ctx context.Context) IntegrationSourceFlowConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationSourceFlowConfig) *IntegrationSourceFlowConfig {
		return &v
	}).(IntegrationSourceFlowConfigPtrOutput)
}

func (o IntegrationSourceFlowConfigOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationSourceFlowConfig] {
	return pulumix.Output[IntegrationSourceFlowConfig]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationSourceFlowConfigOutput) ConnectorProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationSourceFlowConfig) *string { return v.ConnectorProfileName }).(pulumi.StringPtrOutput)
}

func (o IntegrationSourceFlowConfigOutput) ConnectorType() IntegrationConnectorTypeOutput {
	return o.ApplyT(func(v IntegrationSourceFlowConfig) IntegrationConnectorType { return v.ConnectorType }).(IntegrationConnectorTypeOutput)
}

func (o IntegrationSourceFlowConfigOutput) IncrementalPullConfig() IntegrationIncrementalPullConfigPtrOutput {
	return o.ApplyT(func(v IntegrationSourceFlowConfig) *IntegrationIncrementalPullConfig { return v.IncrementalPullConfig }).(IntegrationIncrementalPullConfigPtrOutput)
}

func (o IntegrationSourceFlowConfigOutput) SourceConnectorProperties() IntegrationSourceConnectorPropertiesOutput {
	return o.ApplyT(func(v IntegrationSourceFlowConfig) IntegrationSourceConnectorProperties {
		return v.SourceConnectorProperties
	}).(IntegrationSourceConnectorPropertiesOutput)
}

type IntegrationSourceFlowConfigPtrOutput struct{ *pulumi.OutputState }

func (IntegrationSourceFlowConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationSourceFlowConfig)(nil)).Elem()
}

func (o IntegrationSourceFlowConfigPtrOutput) ToIntegrationSourceFlowConfigPtrOutput() IntegrationSourceFlowConfigPtrOutput {
	return o
}

func (o IntegrationSourceFlowConfigPtrOutput) ToIntegrationSourceFlowConfigPtrOutputWithContext(ctx context.Context) IntegrationSourceFlowConfigPtrOutput {
	return o
}

func (o IntegrationSourceFlowConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationSourceFlowConfig] {
	return pulumix.Output[*IntegrationSourceFlowConfig]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationSourceFlowConfigPtrOutput) Elem() IntegrationSourceFlowConfigOutput {
	return o.ApplyT(func(v *IntegrationSourceFlowConfig) IntegrationSourceFlowConfig {
		if v != nil {
			return *v
		}
		var ret IntegrationSourceFlowConfig
		return ret
	}).(IntegrationSourceFlowConfigOutput)
}

func (o IntegrationSourceFlowConfigPtrOutput) ConnectorProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceFlowConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConnectorProfileName
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationSourceFlowConfigPtrOutput) ConnectorType() IntegrationConnectorTypePtrOutput {
	return o.ApplyT(func(v *IntegrationSourceFlowConfig) *IntegrationConnectorType {
		if v == nil {
			return nil
		}
		return &v.ConnectorType
	}).(IntegrationConnectorTypePtrOutput)
}

func (o IntegrationSourceFlowConfigPtrOutput) IncrementalPullConfig() IntegrationIncrementalPullConfigPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceFlowConfig) *IntegrationIncrementalPullConfig {
		if v == nil {
			return nil
		}
		return v.IncrementalPullConfig
	}).(IntegrationIncrementalPullConfigPtrOutput)
}

func (o IntegrationSourceFlowConfigPtrOutput) SourceConnectorProperties() IntegrationSourceConnectorPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationSourceFlowConfig) *IntegrationSourceConnectorProperties {
		if v == nil {
			return nil
		}
		return &v.SourceConnectorProperties
	}).(IntegrationSourceConnectorPropertiesPtrOutput)
}

type IntegrationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// IntegrationTagInput is an input type that accepts IntegrationTagArgs and IntegrationTagOutput values.
// You can construct a concrete instance of `IntegrationTagInput` via:
//
//	IntegrationTagArgs{...}
type IntegrationTagInput interface {
	pulumi.Input

	ToIntegrationTagOutput() IntegrationTagOutput
	ToIntegrationTagOutputWithContext(context.Context) IntegrationTagOutput
}

type IntegrationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (IntegrationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTag)(nil)).Elem()
}

func (i IntegrationTagArgs) ToIntegrationTagOutput() IntegrationTagOutput {
	return i.ToIntegrationTagOutputWithContext(context.Background())
}

func (i IntegrationTagArgs) ToIntegrationTagOutputWithContext(ctx context.Context) IntegrationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTagOutput)
}

func (i IntegrationTagArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationTag] {
	return pulumix.Output[IntegrationTag]{
		OutputState: i.ToIntegrationTagOutputWithContext(ctx).OutputState,
	}
}

// IntegrationTagArrayInput is an input type that accepts IntegrationTagArray and IntegrationTagArrayOutput values.
// You can construct a concrete instance of `IntegrationTagArrayInput` via:
//
//	IntegrationTagArray{ IntegrationTagArgs{...} }
type IntegrationTagArrayInput interface {
	pulumi.Input

	ToIntegrationTagArrayOutput() IntegrationTagArrayOutput
	ToIntegrationTagArrayOutputWithContext(context.Context) IntegrationTagArrayOutput
}

type IntegrationTagArray []IntegrationTagInput

func (IntegrationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationTag)(nil)).Elem()
}

func (i IntegrationTagArray) ToIntegrationTagArrayOutput() IntegrationTagArrayOutput {
	return i.ToIntegrationTagArrayOutputWithContext(context.Background())
}

func (i IntegrationTagArray) ToIntegrationTagArrayOutputWithContext(ctx context.Context) IntegrationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTagArrayOutput)
}

func (i IntegrationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationTag] {
	return pulumix.Output[[]IntegrationTag]{
		OutputState: i.ToIntegrationTagArrayOutputWithContext(ctx).OutputState,
	}
}

type IntegrationTagOutput struct{ *pulumi.OutputState }

func (IntegrationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTag)(nil)).Elem()
}

func (o IntegrationTagOutput) ToIntegrationTagOutput() IntegrationTagOutput {
	return o
}

func (o IntegrationTagOutput) ToIntegrationTagOutputWithContext(ctx context.Context) IntegrationTagOutput {
	return o
}

func (o IntegrationTagOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationTag] {
	return pulumix.Output[IntegrationTag]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o IntegrationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationTag) string { return v.Value }).(pulumi.StringOutput)
}

type IntegrationTagArrayOutput struct{ *pulumi.OutputState }

func (IntegrationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationTag)(nil)).Elem()
}

func (o IntegrationTagArrayOutput) ToIntegrationTagArrayOutput() IntegrationTagArrayOutput {
	return o
}

func (o IntegrationTagArrayOutput) ToIntegrationTagArrayOutputWithContext(ctx context.Context) IntegrationTagArrayOutput {
	return o
}

func (o IntegrationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationTag] {
	return pulumix.Output[[]IntegrationTag]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTagArrayOutput) Index(i pulumi.IntInput) IntegrationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationTag {
		return vs[0].([]IntegrationTag)[vs[1].(int)]
	}).(IntegrationTagOutput)
}

type IntegrationTask struct {
	ConnectorOperator *IntegrationConnectorOperator  `pulumi:"connectorOperator"`
	DestinationField  *string                        `pulumi:"destinationField"`
	SourceFields      []string                       `pulumi:"sourceFields"`
	TaskProperties    []IntegrationTaskPropertiesMap `pulumi:"taskProperties"`
	TaskType          IntegrationTaskType            `pulumi:"taskType"`
}

// IntegrationTaskInput is an input type that accepts IntegrationTaskArgs and IntegrationTaskOutput values.
// You can construct a concrete instance of `IntegrationTaskInput` via:
//
//	IntegrationTaskArgs{...}
type IntegrationTaskInput interface {
	pulumi.Input

	ToIntegrationTaskOutput() IntegrationTaskOutput
	ToIntegrationTaskOutputWithContext(context.Context) IntegrationTaskOutput
}

type IntegrationTaskArgs struct {
	ConnectorOperator IntegrationConnectorOperatorPtrInput   `pulumi:"connectorOperator"`
	DestinationField  pulumi.StringPtrInput                  `pulumi:"destinationField"`
	SourceFields      pulumi.StringArrayInput                `pulumi:"sourceFields"`
	TaskProperties    IntegrationTaskPropertiesMapArrayInput `pulumi:"taskProperties"`
	TaskType          IntegrationTaskTypeInput               `pulumi:"taskType"`
}

func (IntegrationTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTask)(nil)).Elem()
}

func (i IntegrationTaskArgs) ToIntegrationTaskOutput() IntegrationTaskOutput {
	return i.ToIntegrationTaskOutputWithContext(context.Background())
}

func (i IntegrationTaskArgs) ToIntegrationTaskOutputWithContext(ctx context.Context) IntegrationTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTaskOutput)
}

func (i IntegrationTaskArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationTask] {
	return pulumix.Output[IntegrationTask]{
		OutputState: i.ToIntegrationTaskOutputWithContext(ctx).OutputState,
	}
}

// IntegrationTaskArrayInput is an input type that accepts IntegrationTaskArray and IntegrationTaskArrayOutput values.
// You can construct a concrete instance of `IntegrationTaskArrayInput` via:
//
//	IntegrationTaskArray{ IntegrationTaskArgs{...} }
type IntegrationTaskArrayInput interface {
	pulumi.Input

	ToIntegrationTaskArrayOutput() IntegrationTaskArrayOutput
	ToIntegrationTaskArrayOutputWithContext(context.Context) IntegrationTaskArrayOutput
}

type IntegrationTaskArray []IntegrationTaskInput

func (IntegrationTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationTask)(nil)).Elem()
}

func (i IntegrationTaskArray) ToIntegrationTaskArrayOutput() IntegrationTaskArrayOutput {
	return i.ToIntegrationTaskArrayOutputWithContext(context.Background())
}

func (i IntegrationTaskArray) ToIntegrationTaskArrayOutputWithContext(ctx context.Context) IntegrationTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTaskArrayOutput)
}

func (i IntegrationTaskArray) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationTask] {
	return pulumix.Output[[]IntegrationTask]{
		OutputState: i.ToIntegrationTaskArrayOutputWithContext(ctx).OutputState,
	}
}

type IntegrationTaskOutput struct{ *pulumi.OutputState }

func (IntegrationTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTask)(nil)).Elem()
}

func (o IntegrationTaskOutput) ToIntegrationTaskOutput() IntegrationTaskOutput {
	return o
}

func (o IntegrationTaskOutput) ToIntegrationTaskOutputWithContext(ctx context.Context) IntegrationTaskOutput {
	return o
}

func (o IntegrationTaskOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationTask] {
	return pulumix.Output[IntegrationTask]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTaskOutput) ConnectorOperator() IntegrationConnectorOperatorPtrOutput {
	return o.ApplyT(func(v IntegrationTask) *IntegrationConnectorOperator { return v.ConnectorOperator }).(IntegrationConnectorOperatorPtrOutput)
}

func (o IntegrationTaskOutput) DestinationField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationTask) *string { return v.DestinationField }).(pulumi.StringPtrOutput)
}

func (o IntegrationTaskOutput) SourceFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationTask) []string { return v.SourceFields }).(pulumi.StringArrayOutput)
}

func (o IntegrationTaskOutput) TaskProperties() IntegrationTaskPropertiesMapArrayOutput {
	return o.ApplyT(func(v IntegrationTask) []IntegrationTaskPropertiesMap { return v.TaskProperties }).(IntegrationTaskPropertiesMapArrayOutput)
}

func (o IntegrationTaskOutput) TaskType() IntegrationTaskTypeOutput {
	return o.ApplyT(func(v IntegrationTask) IntegrationTaskType { return v.TaskType }).(IntegrationTaskTypeOutput)
}

type IntegrationTaskArrayOutput struct{ *pulumi.OutputState }

func (IntegrationTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationTask)(nil)).Elem()
}

func (o IntegrationTaskArrayOutput) ToIntegrationTaskArrayOutput() IntegrationTaskArrayOutput {
	return o
}

func (o IntegrationTaskArrayOutput) ToIntegrationTaskArrayOutputWithContext(ctx context.Context) IntegrationTaskArrayOutput {
	return o
}

func (o IntegrationTaskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationTask] {
	return pulumix.Output[[]IntegrationTask]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTaskArrayOutput) Index(i pulumi.IntInput) IntegrationTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationTask {
		return vs[0].([]IntegrationTask)[vs[1].(int)]
	}).(IntegrationTaskOutput)
}

type IntegrationTaskPropertiesMap struct {
	OperatorPropertyKey IntegrationOperatorPropertiesKeys `pulumi:"operatorPropertyKey"`
	Property            string                            `pulumi:"property"`
}

// IntegrationTaskPropertiesMapInput is an input type that accepts IntegrationTaskPropertiesMap and IntegrationTaskPropertiesMapOutput values.
// You can construct a concrete instance of `IntegrationTaskPropertiesMapInput` via:
//
//	IntegrationTaskPropertiesMap{ "key": IntegrationTaskPropertiesArgs{...} }
type IntegrationTaskPropertiesMapInput interface {
	pulumi.Input

	ToIntegrationTaskPropertiesMapOutput() IntegrationTaskPropertiesMapOutput
	ToIntegrationTaskPropertiesMapOutputWithContext(context.Context) IntegrationTaskPropertiesMapOutput
}

type IntegrationTaskPropertiesMapArgs struct {
	OperatorPropertyKey IntegrationOperatorPropertiesKeysInput `pulumi:"operatorPropertyKey"`
	Property            pulumi.StringInput                     `pulumi:"property"`
}

func (IntegrationTaskPropertiesMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTaskPropertiesMap)(nil)).Elem()
}

func (i IntegrationTaskPropertiesMapArgs) ToIntegrationTaskPropertiesMapOutput() IntegrationTaskPropertiesMapOutput {
	return i.ToIntegrationTaskPropertiesMapOutputWithContext(context.Background())
}

func (i IntegrationTaskPropertiesMapArgs) ToIntegrationTaskPropertiesMapOutputWithContext(ctx context.Context) IntegrationTaskPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTaskPropertiesMapOutput)
}

func (i IntegrationTaskPropertiesMapArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationTaskPropertiesMap] {
	return pulumix.Output[IntegrationTaskPropertiesMap]{
		OutputState: i.ToIntegrationTaskPropertiesMapOutputWithContext(ctx).OutputState,
	}
}

// IntegrationTaskPropertiesMapArrayInput is an input type that accepts IntegrationTaskPropertiesMapArray and IntegrationTaskPropertiesMapArrayOutput values.
// You can construct a concrete instance of `IntegrationTaskPropertiesMapArrayInput` via:
//
//	IntegrationTaskPropertiesMapArray{ IntegrationTaskPropertiesMapArgs{...} }
type IntegrationTaskPropertiesMapArrayInput interface {
	pulumi.Input

	ToIntegrationTaskPropertiesMapArrayOutput() IntegrationTaskPropertiesMapArrayOutput
	ToIntegrationTaskPropertiesMapArrayOutputWithContext(context.Context) IntegrationTaskPropertiesMapArrayOutput
}

type IntegrationTaskPropertiesMapArray []IntegrationTaskPropertiesMapInput

func (IntegrationTaskPropertiesMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationTaskPropertiesMap)(nil)).Elem()
}

func (i IntegrationTaskPropertiesMapArray) ToIntegrationTaskPropertiesMapArrayOutput() IntegrationTaskPropertiesMapArrayOutput {
	return i.ToIntegrationTaskPropertiesMapArrayOutputWithContext(context.Background())
}

func (i IntegrationTaskPropertiesMapArray) ToIntegrationTaskPropertiesMapArrayOutputWithContext(ctx context.Context) IntegrationTaskPropertiesMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTaskPropertiesMapArrayOutput)
}

func (i IntegrationTaskPropertiesMapArray) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationTaskPropertiesMap] {
	return pulumix.Output[[]IntegrationTaskPropertiesMap]{
		OutputState: i.ToIntegrationTaskPropertiesMapArrayOutputWithContext(ctx).OutputState,
	}
}

type IntegrationTaskPropertiesMapOutput struct{ *pulumi.OutputState }

func (IntegrationTaskPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTaskPropertiesMap)(nil)).Elem()
}

func (o IntegrationTaskPropertiesMapOutput) ToIntegrationTaskPropertiesMapOutput() IntegrationTaskPropertiesMapOutput {
	return o
}

func (o IntegrationTaskPropertiesMapOutput) ToIntegrationTaskPropertiesMapOutputWithContext(ctx context.Context) IntegrationTaskPropertiesMapOutput {
	return o
}

func (o IntegrationTaskPropertiesMapOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationTaskPropertiesMap] {
	return pulumix.Output[IntegrationTaskPropertiesMap]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTaskPropertiesMapOutput) OperatorPropertyKey() IntegrationOperatorPropertiesKeysOutput {
	return o.ApplyT(func(v IntegrationTaskPropertiesMap) IntegrationOperatorPropertiesKeys { return v.OperatorPropertyKey }).(IntegrationOperatorPropertiesKeysOutput)
}

func (o IntegrationTaskPropertiesMapOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationTaskPropertiesMap) string { return v.Property }).(pulumi.StringOutput)
}

type IntegrationTaskPropertiesMapArrayOutput struct{ *pulumi.OutputState }

func (IntegrationTaskPropertiesMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationTaskPropertiesMap)(nil)).Elem()
}

func (o IntegrationTaskPropertiesMapArrayOutput) ToIntegrationTaskPropertiesMapArrayOutput() IntegrationTaskPropertiesMapArrayOutput {
	return o
}

func (o IntegrationTaskPropertiesMapArrayOutput) ToIntegrationTaskPropertiesMapArrayOutputWithContext(ctx context.Context) IntegrationTaskPropertiesMapArrayOutput {
	return o
}

func (o IntegrationTaskPropertiesMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IntegrationTaskPropertiesMap] {
	return pulumix.Output[[]IntegrationTaskPropertiesMap]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTaskPropertiesMapArrayOutput) Index(i pulumi.IntInput) IntegrationTaskPropertiesMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationTaskPropertiesMap {
		return vs[0].([]IntegrationTaskPropertiesMap)[vs[1].(int)]
	}).(IntegrationTaskPropertiesMapOutput)
}

type IntegrationTriggerConfig struct {
	TriggerProperties *IntegrationTriggerProperties `pulumi:"triggerProperties"`
	TriggerType       IntegrationTriggerType        `pulumi:"triggerType"`
}

// IntegrationTriggerConfigInput is an input type that accepts IntegrationTriggerConfigArgs and IntegrationTriggerConfigOutput values.
// You can construct a concrete instance of `IntegrationTriggerConfigInput` via:
//
//	IntegrationTriggerConfigArgs{...}
type IntegrationTriggerConfigInput interface {
	pulumi.Input

	ToIntegrationTriggerConfigOutput() IntegrationTriggerConfigOutput
	ToIntegrationTriggerConfigOutputWithContext(context.Context) IntegrationTriggerConfigOutput
}

type IntegrationTriggerConfigArgs struct {
	TriggerProperties IntegrationTriggerPropertiesPtrInput `pulumi:"triggerProperties"`
	TriggerType       IntegrationTriggerTypeInput          `pulumi:"triggerType"`
}

func (IntegrationTriggerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTriggerConfig)(nil)).Elem()
}

func (i IntegrationTriggerConfigArgs) ToIntegrationTriggerConfigOutput() IntegrationTriggerConfigOutput {
	return i.ToIntegrationTriggerConfigOutputWithContext(context.Background())
}

func (i IntegrationTriggerConfigArgs) ToIntegrationTriggerConfigOutputWithContext(ctx context.Context) IntegrationTriggerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTriggerConfigOutput)
}

func (i IntegrationTriggerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationTriggerConfig] {
	return pulumix.Output[IntegrationTriggerConfig]{
		OutputState: i.ToIntegrationTriggerConfigOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationTriggerConfigArgs) ToIntegrationTriggerConfigPtrOutput() IntegrationTriggerConfigPtrOutput {
	return i.ToIntegrationTriggerConfigPtrOutputWithContext(context.Background())
}

func (i IntegrationTriggerConfigArgs) ToIntegrationTriggerConfigPtrOutputWithContext(ctx context.Context) IntegrationTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTriggerConfigOutput).ToIntegrationTriggerConfigPtrOutputWithContext(ctx)
}

// IntegrationTriggerConfigPtrInput is an input type that accepts IntegrationTriggerConfigArgs, IntegrationTriggerConfigPtr and IntegrationTriggerConfigPtrOutput values.
// You can construct a concrete instance of `IntegrationTriggerConfigPtrInput` via:
//
//	        IntegrationTriggerConfigArgs{...}
//
//	or:
//
//	        nil
type IntegrationTriggerConfigPtrInput interface {
	pulumi.Input

	ToIntegrationTriggerConfigPtrOutput() IntegrationTriggerConfigPtrOutput
	ToIntegrationTriggerConfigPtrOutputWithContext(context.Context) IntegrationTriggerConfigPtrOutput
}

type integrationTriggerConfigPtrType IntegrationTriggerConfigArgs

func IntegrationTriggerConfigPtr(v *IntegrationTriggerConfigArgs) IntegrationTriggerConfigPtrInput {
	return (*integrationTriggerConfigPtrType)(v)
}

func (*integrationTriggerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTriggerConfig)(nil)).Elem()
}

func (i *integrationTriggerConfigPtrType) ToIntegrationTriggerConfigPtrOutput() IntegrationTriggerConfigPtrOutput {
	return i.ToIntegrationTriggerConfigPtrOutputWithContext(context.Background())
}

func (i *integrationTriggerConfigPtrType) ToIntegrationTriggerConfigPtrOutputWithContext(ctx context.Context) IntegrationTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTriggerConfigPtrOutput)
}

func (i *integrationTriggerConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTriggerConfig] {
	return pulumix.Output[*IntegrationTriggerConfig]{
		OutputState: i.ToIntegrationTriggerConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationTriggerConfigOutput struct{ *pulumi.OutputState }

func (IntegrationTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTriggerConfig)(nil)).Elem()
}

func (o IntegrationTriggerConfigOutput) ToIntegrationTriggerConfigOutput() IntegrationTriggerConfigOutput {
	return o
}

func (o IntegrationTriggerConfigOutput) ToIntegrationTriggerConfigOutputWithContext(ctx context.Context) IntegrationTriggerConfigOutput {
	return o
}

func (o IntegrationTriggerConfigOutput) ToIntegrationTriggerConfigPtrOutput() IntegrationTriggerConfigPtrOutput {
	return o.ToIntegrationTriggerConfigPtrOutputWithContext(context.Background())
}

func (o IntegrationTriggerConfigOutput) ToIntegrationTriggerConfigPtrOutputWithContext(ctx context.Context) IntegrationTriggerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationTriggerConfig) *IntegrationTriggerConfig {
		return &v
	}).(IntegrationTriggerConfigPtrOutput)
}

func (o IntegrationTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationTriggerConfig] {
	return pulumix.Output[IntegrationTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTriggerConfigOutput) TriggerProperties() IntegrationTriggerPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationTriggerConfig) *IntegrationTriggerProperties { return v.TriggerProperties }).(IntegrationTriggerPropertiesPtrOutput)
}

func (o IntegrationTriggerConfigOutput) TriggerType() IntegrationTriggerTypeOutput {
	return o.ApplyT(func(v IntegrationTriggerConfig) IntegrationTriggerType { return v.TriggerType }).(IntegrationTriggerTypeOutput)
}

type IntegrationTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (IntegrationTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTriggerConfig)(nil)).Elem()
}

func (o IntegrationTriggerConfigPtrOutput) ToIntegrationTriggerConfigPtrOutput() IntegrationTriggerConfigPtrOutput {
	return o
}

func (o IntegrationTriggerConfigPtrOutput) ToIntegrationTriggerConfigPtrOutputWithContext(ctx context.Context) IntegrationTriggerConfigPtrOutput {
	return o
}

func (o IntegrationTriggerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTriggerConfig] {
	return pulumix.Output[*IntegrationTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTriggerConfigPtrOutput) Elem() IntegrationTriggerConfigOutput {
	return o.ApplyT(func(v *IntegrationTriggerConfig) IntegrationTriggerConfig {
		if v != nil {
			return *v
		}
		var ret IntegrationTriggerConfig
		return ret
	}).(IntegrationTriggerConfigOutput)
}

func (o IntegrationTriggerConfigPtrOutput) TriggerProperties() IntegrationTriggerPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationTriggerConfig) *IntegrationTriggerProperties {
		if v == nil {
			return nil
		}
		return v.TriggerProperties
	}).(IntegrationTriggerPropertiesPtrOutput)
}

func (o IntegrationTriggerConfigPtrOutput) TriggerType() IntegrationTriggerTypePtrOutput {
	return o.ApplyT(func(v *IntegrationTriggerConfig) *IntegrationTriggerType {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(IntegrationTriggerTypePtrOutput)
}

type IntegrationTriggerProperties struct {
	Scheduled *IntegrationScheduledTriggerProperties `pulumi:"scheduled"`
}

// IntegrationTriggerPropertiesInput is an input type that accepts IntegrationTriggerPropertiesArgs and IntegrationTriggerPropertiesOutput values.
// You can construct a concrete instance of `IntegrationTriggerPropertiesInput` via:
//
//	IntegrationTriggerPropertiesArgs{...}
type IntegrationTriggerPropertiesInput interface {
	pulumi.Input

	ToIntegrationTriggerPropertiesOutput() IntegrationTriggerPropertiesOutput
	ToIntegrationTriggerPropertiesOutputWithContext(context.Context) IntegrationTriggerPropertiesOutput
}

type IntegrationTriggerPropertiesArgs struct {
	Scheduled IntegrationScheduledTriggerPropertiesPtrInput `pulumi:"scheduled"`
}

func (IntegrationTriggerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTriggerProperties)(nil)).Elem()
}

func (i IntegrationTriggerPropertiesArgs) ToIntegrationTriggerPropertiesOutput() IntegrationTriggerPropertiesOutput {
	return i.ToIntegrationTriggerPropertiesOutputWithContext(context.Background())
}

func (i IntegrationTriggerPropertiesArgs) ToIntegrationTriggerPropertiesOutputWithContext(ctx context.Context) IntegrationTriggerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTriggerPropertiesOutput)
}

func (i IntegrationTriggerPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationTriggerProperties] {
	return pulumix.Output[IntegrationTriggerProperties]{
		OutputState: i.ToIntegrationTriggerPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationTriggerPropertiesArgs) ToIntegrationTriggerPropertiesPtrOutput() IntegrationTriggerPropertiesPtrOutput {
	return i.ToIntegrationTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationTriggerPropertiesArgs) ToIntegrationTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTriggerPropertiesOutput).ToIntegrationTriggerPropertiesPtrOutputWithContext(ctx)
}

// IntegrationTriggerPropertiesPtrInput is an input type that accepts IntegrationTriggerPropertiesArgs, IntegrationTriggerPropertiesPtr and IntegrationTriggerPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationTriggerPropertiesPtrInput` via:
//
//	        IntegrationTriggerPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationTriggerPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationTriggerPropertiesPtrOutput() IntegrationTriggerPropertiesPtrOutput
	ToIntegrationTriggerPropertiesPtrOutputWithContext(context.Context) IntegrationTriggerPropertiesPtrOutput
}

type integrationTriggerPropertiesPtrType IntegrationTriggerPropertiesArgs

func IntegrationTriggerPropertiesPtr(v *IntegrationTriggerPropertiesArgs) IntegrationTriggerPropertiesPtrInput {
	return (*integrationTriggerPropertiesPtrType)(v)
}

func (*integrationTriggerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTriggerProperties)(nil)).Elem()
}

func (i *integrationTriggerPropertiesPtrType) ToIntegrationTriggerPropertiesPtrOutput() IntegrationTriggerPropertiesPtrOutput {
	return i.ToIntegrationTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationTriggerPropertiesPtrType) ToIntegrationTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationTriggerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTriggerPropertiesPtrOutput)
}

func (i *integrationTriggerPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTriggerProperties] {
	return pulumix.Output[*IntegrationTriggerProperties]{
		OutputState: i.ToIntegrationTriggerPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationTriggerPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationTriggerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationTriggerProperties)(nil)).Elem()
}

func (o IntegrationTriggerPropertiesOutput) ToIntegrationTriggerPropertiesOutput() IntegrationTriggerPropertiesOutput {
	return o
}

func (o IntegrationTriggerPropertiesOutput) ToIntegrationTriggerPropertiesOutputWithContext(ctx context.Context) IntegrationTriggerPropertiesOutput {
	return o
}

func (o IntegrationTriggerPropertiesOutput) ToIntegrationTriggerPropertiesPtrOutput() IntegrationTriggerPropertiesPtrOutput {
	return o.ToIntegrationTriggerPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationTriggerPropertiesOutput) ToIntegrationTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationTriggerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationTriggerProperties) *IntegrationTriggerProperties {
		return &v
	}).(IntegrationTriggerPropertiesPtrOutput)
}

func (o IntegrationTriggerPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationTriggerProperties] {
	return pulumix.Output[IntegrationTriggerProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTriggerPropertiesOutput) Scheduled() IntegrationScheduledTriggerPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationTriggerProperties) *IntegrationScheduledTriggerProperties { return v.Scheduled }).(IntegrationScheduledTriggerPropertiesPtrOutput)
}

type IntegrationTriggerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationTriggerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTriggerProperties)(nil)).Elem()
}

func (o IntegrationTriggerPropertiesPtrOutput) ToIntegrationTriggerPropertiesPtrOutput() IntegrationTriggerPropertiesPtrOutput {
	return o
}

func (o IntegrationTriggerPropertiesPtrOutput) ToIntegrationTriggerPropertiesPtrOutputWithContext(ctx context.Context) IntegrationTriggerPropertiesPtrOutput {
	return o
}

func (o IntegrationTriggerPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationTriggerProperties] {
	return pulumix.Output[*IntegrationTriggerProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationTriggerPropertiesPtrOutput) Elem() IntegrationTriggerPropertiesOutput {
	return o.ApplyT(func(v *IntegrationTriggerProperties) IntegrationTriggerProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationTriggerProperties
		return ret
	}).(IntegrationTriggerPropertiesOutput)
}

func (o IntegrationTriggerPropertiesPtrOutput) Scheduled() IntegrationScheduledTriggerPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationTriggerProperties) *IntegrationScheduledTriggerProperties {
		if v == nil {
			return nil
		}
		return v.Scheduled
	}).(IntegrationScheduledTriggerPropertiesPtrOutput)
}

type IntegrationZendeskSourceProperties struct {
	Object string `pulumi:"object"`
}

// IntegrationZendeskSourcePropertiesInput is an input type that accepts IntegrationZendeskSourcePropertiesArgs and IntegrationZendeskSourcePropertiesOutput values.
// You can construct a concrete instance of `IntegrationZendeskSourcePropertiesInput` via:
//
//	IntegrationZendeskSourcePropertiesArgs{...}
type IntegrationZendeskSourcePropertiesInput interface {
	pulumi.Input

	ToIntegrationZendeskSourcePropertiesOutput() IntegrationZendeskSourcePropertiesOutput
	ToIntegrationZendeskSourcePropertiesOutputWithContext(context.Context) IntegrationZendeskSourcePropertiesOutput
}

type IntegrationZendeskSourcePropertiesArgs struct {
	Object pulumi.StringInput `pulumi:"object"`
}

func (IntegrationZendeskSourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationZendeskSourceProperties)(nil)).Elem()
}

func (i IntegrationZendeskSourcePropertiesArgs) ToIntegrationZendeskSourcePropertiesOutput() IntegrationZendeskSourcePropertiesOutput {
	return i.ToIntegrationZendeskSourcePropertiesOutputWithContext(context.Background())
}

func (i IntegrationZendeskSourcePropertiesArgs) ToIntegrationZendeskSourcePropertiesOutputWithContext(ctx context.Context) IntegrationZendeskSourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationZendeskSourcePropertiesOutput)
}

func (i IntegrationZendeskSourcePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IntegrationZendeskSourceProperties] {
	return pulumix.Output[IntegrationZendeskSourceProperties]{
		OutputState: i.ToIntegrationZendeskSourcePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IntegrationZendeskSourcePropertiesArgs) ToIntegrationZendeskSourcePropertiesPtrOutput() IntegrationZendeskSourcePropertiesPtrOutput {
	return i.ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationZendeskSourcePropertiesArgs) ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationZendeskSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationZendeskSourcePropertiesOutput).ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(ctx)
}

// IntegrationZendeskSourcePropertiesPtrInput is an input type that accepts IntegrationZendeskSourcePropertiesArgs, IntegrationZendeskSourcePropertiesPtr and IntegrationZendeskSourcePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationZendeskSourcePropertiesPtrInput` via:
//
//	        IntegrationZendeskSourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationZendeskSourcePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationZendeskSourcePropertiesPtrOutput() IntegrationZendeskSourcePropertiesPtrOutput
	ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(context.Context) IntegrationZendeskSourcePropertiesPtrOutput
}

type integrationZendeskSourcePropertiesPtrType IntegrationZendeskSourcePropertiesArgs

func IntegrationZendeskSourcePropertiesPtr(v *IntegrationZendeskSourcePropertiesArgs) IntegrationZendeskSourcePropertiesPtrInput {
	return (*integrationZendeskSourcePropertiesPtrType)(v)
}

func (*integrationZendeskSourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationZendeskSourceProperties)(nil)).Elem()
}

func (i *integrationZendeskSourcePropertiesPtrType) ToIntegrationZendeskSourcePropertiesPtrOutput() IntegrationZendeskSourcePropertiesPtrOutput {
	return i.ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationZendeskSourcePropertiesPtrType) ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationZendeskSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationZendeskSourcePropertiesPtrOutput)
}

func (i *integrationZendeskSourcePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IntegrationZendeskSourceProperties] {
	return pulumix.Output[*IntegrationZendeskSourceProperties]{
		OutputState: i.ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IntegrationZendeskSourcePropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationZendeskSourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationZendeskSourceProperties)(nil)).Elem()
}

func (o IntegrationZendeskSourcePropertiesOutput) ToIntegrationZendeskSourcePropertiesOutput() IntegrationZendeskSourcePropertiesOutput {
	return o
}

func (o IntegrationZendeskSourcePropertiesOutput) ToIntegrationZendeskSourcePropertiesOutputWithContext(ctx context.Context) IntegrationZendeskSourcePropertiesOutput {
	return o
}

func (o IntegrationZendeskSourcePropertiesOutput) ToIntegrationZendeskSourcePropertiesPtrOutput() IntegrationZendeskSourcePropertiesPtrOutput {
	return o.ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationZendeskSourcePropertiesOutput) ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationZendeskSourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationZendeskSourceProperties) *IntegrationZendeskSourceProperties {
		return &v
	}).(IntegrationZendeskSourcePropertiesPtrOutput)
}

func (o IntegrationZendeskSourcePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IntegrationZendeskSourceProperties] {
	return pulumix.Output[IntegrationZendeskSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationZendeskSourcePropertiesOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationZendeskSourceProperties) string { return v.Object }).(pulumi.StringOutput)
}

type IntegrationZendeskSourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationZendeskSourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationZendeskSourceProperties)(nil)).Elem()
}

func (o IntegrationZendeskSourcePropertiesPtrOutput) ToIntegrationZendeskSourcePropertiesPtrOutput() IntegrationZendeskSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationZendeskSourcePropertiesPtrOutput) ToIntegrationZendeskSourcePropertiesPtrOutputWithContext(ctx context.Context) IntegrationZendeskSourcePropertiesPtrOutput {
	return o
}

func (o IntegrationZendeskSourcePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IntegrationZendeskSourceProperties] {
	return pulumix.Output[*IntegrationZendeskSourceProperties]{
		OutputState: o.OutputState,
	}
}

func (o IntegrationZendeskSourcePropertiesPtrOutput) Elem() IntegrationZendeskSourcePropertiesOutput {
	return o.ApplyT(func(v *IntegrationZendeskSourceProperties) IntegrationZendeskSourceProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationZendeskSourceProperties
		return ret
	}).(IntegrationZendeskSourcePropertiesOutput)
}

func (o IntegrationZendeskSourcePropertiesPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationZendeskSourceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

// Represents a field in a ProfileObjectType.
type ObjectTypeField struct {
	// The content type of the field. Used for determining equality when searching.
	ContentType *ObjectTypeFieldContentType `pulumi:"contentType"`
	// A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
	Source *string `pulumi:"source"`
	// The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
	Target *string `pulumi:"target"`
}

// ObjectTypeFieldInput is an input type that accepts ObjectTypeFieldArgs and ObjectTypeFieldOutput values.
// You can construct a concrete instance of `ObjectTypeFieldInput` via:
//
//	ObjectTypeFieldArgs{...}
type ObjectTypeFieldInput interface {
	pulumi.Input

	ToObjectTypeFieldOutput() ObjectTypeFieldOutput
	ToObjectTypeFieldOutputWithContext(context.Context) ObjectTypeFieldOutput
}

// Represents a field in a ProfileObjectType.
type ObjectTypeFieldArgs struct {
	// The content type of the field. Used for determining equality when searching.
	ContentType ObjectTypeFieldContentTypePtrInput `pulumi:"contentType"`
	// A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ObjectTypeFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeField)(nil)).Elem()
}

func (i ObjectTypeFieldArgs) ToObjectTypeFieldOutput() ObjectTypeFieldOutput {
	return i.ToObjectTypeFieldOutputWithContext(context.Background())
}

func (i ObjectTypeFieldArgs) ToObjectTypeFieldOutputWithContext(ctx context.Context) ObjectTypeFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeFieldOutput)
}

func (i ObjectTypeFieldArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeField] {
	return pulumix.Output[ObjectTypeField]{
		OutputState: i.ToObjectTypeFieldOutputWithContext(ctx).OutputState,
	}
}

func (i ObjectTypeFieldArgs) ToObjectTypeFieldPtrOutput() ObjectTypeFieldPtrOutput {
	return i.ToObjectTypeFieldPtrOutputWithContext(context.Background())
}

func (i ObjectTypeFieldArgs) ToObjectTypeFieldPtrOutputWithContext(ctx context.Context) ObjectTypeFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeFieldOutput).ToObjectTypeFieldPtrOutputWithContext(ctx)
}

// ObjectTypeFieldPtrInput is an input type that accepts ObjectTypeFieldArgs, ObjectTypeFieldPtr and ObjectTypeFieldPtrOutput values.
// You can construct a concrete instance of `ObjectTypeFieldPtrInput` via:
//
//	        ObjectTypeFieldArgs{...}
//
//	or:
//
//	        nil
type ObjectTypeFieldPtrInput interface {
	pulumi.Input

	ToObjectTypeFieldPtrOutput() ObjectTypeFieldPtrOutput
	ToObjectTypeFieldPtrOutputWithContext(context.Context) ObjectTypeFieldPtrOutput
}

type objectTypeFieldPtrType ObjectTypeFieldArgs

func ObjectTypeFieldPtr(v *ObjectTypeFieldArgs) ObjectTypeFieldPtrInput {
	return (*objectTypeFieldPtrType)(v)
}

func (*objectTypeFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectTypeField)(nil)).Elem()
}

func (i *objectTypeFieldPtrType) ToObjectTypeFieldPtrOutput() ObjectTypeFieldPtrOutput {
	return i.ToObjectTypeFieldPtrOutputWithContext(context.Background())
}

func (i *objectTypeFieldPtrType) ToObjectTypeFieldPtrOutputWithContext(ctx context.Context) ObjectTypeFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeFieldPtrOutput)
}

func (i *objectTypeFieldPtrType) ToOutput(ctx context.Context) pulumix.Output[*ObjectTypeField] {
	return pulumix.Output[*ObjectTypeField]{
		OutputState: i.ToObjectTypeFieldPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a field in a ProfileObjectType.
type ObjectTypeFieldOutput struct{ *pulumi.OutputState }

func (ObjectTypeFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeField)(nil)).Elem()
}

func (o ObjectTypeFieldOutput) ToObjectTypeFieldOutput() ObjectTypeFieldOutput {
	return o
}

func (o ObjectTypeFieldOutput) ToObjectTypeFieldOutputWithContext(ctx context.Context) ObjectTypeFieldOutput {
	return o
}

func (o ObjectTypeFieldOutput) ToObjectTypeFieldPtrOutput() ObjectTypeFieldPtrOutput {
	return o.ToObjectTypeFieldPtrOutputWithContext(context.Background())
}

func (o ObjectTypeFieldOutput) ToObjectTypeFieldPtrOutputWithContext(ctx context.Context) ObjectTypeFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectTypeField) *ObjectTypeField {
		return &v
	}).(ObjectTypeFieldPtrOutput)
}

func (o ObjectTypeFieldOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeField] {
	return pulumix.Output[ObjectTypeField]{
		OutputState: o.OutputState,
	}
}

// The content type of the field. Used for determining equality when searching.
func (o ObjectTypeFieldOutput) ContentType() ObjectTypeFieldContentTypePtrOutput {
	return o.ApplyT(func(v ObjectTypeField) *ObjectTypeFieldContentType { return v.ContentType }).(ObjectTypeFieldContentTypePtrOutput)
}

// A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
func (o ObjectTypeFieldOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectTypeField) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
func (o ObjectTypeFieldOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectTypeField) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ObjectTypeFieldPtrOutput struct{ *pulumi.OutputState }

func (ObjectTypeFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectTypeField)(nil)).Elem()
}

func (o ObjectTypeFieldPtrOutput) ToObjectTypeFieldPtrOutput() ObjectTypeFieldPtrOutput {
	return o
}

func (o ObjectTypeFieldPtrOutput) ToObjectTypeFieldPtrOutputWithContext(ctx context.Context) ObjectTypeFieldPtrOutput {
	return o
}

func (o ObjectTypeFieldPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectTypeField] {
	return pulumix.Output[*ObjectTypeField]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeFieldPtrOutput) Elem() ObjectTypeFieldOutput {
	return o.ApplyT(func(v *ObjectTypeField) ObjectTypeField {
		if v != nil {
			return *v
		}
		var ret ObjectTypeField
		return ret
	}).(ObjectTypeFieldOutput)
}

// The content type of the field. Used for determining equality when searching.
func (o ObjectTypeFieldPtrOutput) ContentType() ObjectTypeFieldContentTypePtrOutput {
	return o.ApplyT(func(v *ObjectTypeField) *ObjectTypeFieldContentType {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(ObjectTypeFieldContentTypePtrOutput)
}

// A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
func (o ObjectTypeFieldPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectTypeField) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
func (o ObjectTypeFieldPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectTypeField) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type ObjectTypeFieldMap struct {
	Name            *string          `pulumi:"name"`
	ObjectTypeField *ObjectTypeField `pulumi:"objectTypeField"`
}

// ObjectTypeFieldMapInput is an input type that accepts ObjectTypeFieldMap and ObjectTypeFieldMapOutput values.
// You can construct a concrete instance of `ObjectTypeFieldMapInput` via:
//
//	ObjectTypeFieldMap{ "key": ObjectTypeFieldArgs{...} }
type ObjectTypeFieldMapInput interface {
	pulumi.Input

	ToObjectTypeFieldMapOutput() ObjectTypeFieldMapOutput
	ToObjectTypeFieldMapOutputWithContext(context.Context) ObjectTypeFieldMapOutput
}

type ObjectTypeFieldMapArgs struct {
	Name            pulumi.StringPtrInput   `pulumi:"name"`
	ObjectTypeField ObjectTypeFieldPtrInput `pulumi:"objectTypeField"`
}

func (ObjectTypeFieldMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeFieldMap)(nil)).Elem()
}

func (i ObjectTypeFieldMapArgs) ToObjectTypeFieldMapOutput() ObjectTypeFieldMapOutput {
	return i.ToObjectTypeFieldMapOutputWithContext(context.Background())
}

func (i ObjectTypeFieldMapArgs) ToObjectTypeFieldMapOutputWithContext(ctx context.Context) ObjectTypeFieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeFieldMapOutput)
}

func (i ObjectTypeFieldMapArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeFieldMap] {
	return pulumix.Output[ObjectTypeFieldMap]{
		OutputState: i.ToObjectTypeFieldMapOutputWithContext(ctx).OutputState,
	}
}

// ObjectTypeFieldMapArrayInput is an input type that accepts ObjectTypeFieldMapArray and ObjectTypeFieldMapArrayOutput values.
// You can construct a concrete instance of `ObjectTypeFieldMapArrayInput` via:
//
//	ObjectTypeFieldMapArray{ ObjectTypeFieldMapArgs{...} }
type ObjectTypeFieldMapArrayInput interface {
	pulumi.Input

	ToObjectTypeFieldMapArrayOutput() ObjectTypeFieldMapArrayOutput
	ToObjectTypeFieldMapArrayOutputWithContext(context.Context) ObjectTypeFieldMapArrayOutput
}

type ObjectTypeFieldMapArray []ObjectTypeFieldMapInput

func (ObjectTypeFieldMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeFieldMap)(nil)).Elem()
}

func (i ObjectTypeFieldMapArray) ToObjectTypeFieldMapArrayOutput() ObjectTypeFieldMapArrayOutput {
	return i.ToObjectTypeFieldMapArrayOutputWithContext(context.Background())
}

func (i ObjectTypeFieldMapArray) ToObjectTypeFieldMapArrayOutputWithContext(ctx context.Context) ObjectTypeFieldMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeFieldMapArrayOutput)
}

func (i ObjectTypeFieldMapArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeFieldMap] {
	return pulumix.Output[[]ObjectTypeFieldMap]{
		OutputState: i.ToObjectTypeFieldMapArrayOutputWithContext(ctx).OutputState,
	}
}

type ObjectTypeFieldMapOutput struct{ *pulumi.OutputState }

func (ObjectTypeFieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeFieldMap)(nil)).Elem()
}

func (o ObjectTypeFieldMapOutput) ToObjectTypeFieldMapOutput() ObjectTypeFieldMapOutput {
	return o
}

func (o ObjectTypeFieldMapOutput) ToObjectTypeFieldMapOutputWithContext(ctx context.Context) ObjectTypeFieldMapOutput {
	return o
}

func (o ObjectTypeFieldMapOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeFieldMap] {
	return pulumix.Output[ObjectTypeFieldMap]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeFieldMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectTypeFieldMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ObjectTypeFieldMapOutput) ObjectTypeField() ObjectTypeFieldPtrOutput {
	return o.ApplyT(func(v ObjectTypeFieldMap) *ObjectTypeField { return v.ObjectTypeField }).(ObjectTypeFieldPtrOutput)
}

type ObjectTypeFieldMapArrayOutput struct{ *pulumi.OutputState }

func (ObjectTypeFieldMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeFieldMap)(nil)).Elem()
}

func (o ObjectTypeFieldMapArrayOutput) ToObjectTypeFieldMapArrayOutput() ObjectTypeFieldMapArrayOutput {
	return o
}

func (o ObjectTypeFieldMapArrayOutput) ToObjectTypeFieldMapArrayOutputWithContext(ctx context.Context) ObjectTypeFieldMapArrayOutput {
	return o
}

func (o ObjectTypeFieldMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeFieldMap] {
	return pulumix.Output[[]ObjectTypeFieldMap]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeFieldMapArrayOutput) Index(i pulumi.IntInput) ObjectTypeFieldMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectTypeFieldMap {
		return vs[0].([]ObjectTypeFieldMap)[vs[1].(int)]
	}).(ObjectTypeFieldMapOutput)
}

// An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
type ObjectTypeKey struct {
	// The reference for the key name of the fields map.
	FieldNames []string `pulumi:"fieldNames"`
	// The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
	StandardIdentifiers []ObjectTypeKeyStandardIdentifiersItem `pulumi:"standardIdentifiers"`
}

// ObjectTypeKeyInput is an input type that accepts ObjectTypeKeyArgs and ObjectTypeKeyOutput values.
// You can construct a concrete instance of `ObjectTypeKeyInput` via:
//
//	ObjectTypeKeyArgs{...}
type ObjectTypeKeyInput interface {
	pulumi.Input

	ToObjectTypeKeyOutput() ObjectTypeKeyOutput
	ToObjectTypeKeyOutputWithContext(context.Context) ObjectTypeKeyOutput
}

// An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
type ObjectTypeKeyArgs struct {
	// The reference for the key name of the fields map.
	FieldNames pulumi.StringArrayInput `pulumi:"fieldNames"`
	// The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
	StandardIdentifiers ObjectTypeKeyStandardIdentifiersItemArrayInput `pulumi:"standardIdentifiers"`
}

func (ObjectTypeKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeKey)(nil)).Elem()
}

func (i ObjectTypeKeyArgs) ToObjectTypeKeyOutput() ObjectTypeKeyOutput {
	return i.ToObjectTypeKeyOutputWithContext(context.Background())
}

func (i ObjectTypeKeyArgs) ToObjectTypeKeyOutputWithContext(ctx context.Context) ObjectTypeKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeKeyOutput)
}

func (i ObjectTypeKeyArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeKey] {
	return pulumix.Output[ObjectTypeKey]{
		OutputState: i.ToObjectTypeKeyOutputWithContext(ctx).OutputState,
	}
}

// ObjectTypeKeyArrayInput is an input type that accepts ObjectTypeKeyArray and ObjectTypeKeyArrayOutput values.
// You can construct a concrete instance of `ObjectTypeKeyArrayInput` via:
//
//	ObjectTypeKeyArray{ ObjectTypeKeyArgs{...} }
type ObjectTypeKeyArrayInput interface {
	pulumi.Input

	ToObjectTypeKeyArrayOutput() ObjectTypeKeyArrayOutput
	ToObjectTypeKeyArrayOutputWithContext(context.Context) ObjectTypeKeyArrayOutput
}

type ObjectTypeKeyArray []ObjectTypeKeyInput

func (ObjectTypeKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeKey)(nil)).Elem()
}

func (i ObjectTypeKeyArray) ToObjectTypeKeyArrayOutput() ObjectTypeKeyArrayOutput {
	return i.ToObjectTypeKeyArrayOutputWithContext(context.Background())
}

func (i ObjectTypeKeyArray) ToObjectTypeKeyArrayOutputWithContext(ctx context.Context) ObjectTypeKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeKeyArrayOutput)
}

func (i ObjectTypeKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeKey] {
	return pulumix.Output[[]ObjectTypeKey]{
		OutputState: i.ToObjectTypeKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
type ObjectTypeKeyOutput struct{ *pulumi.OutputState }

func (ObjectTypeKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeKey)(nil)).Elem()
}

func (o ObjectTypeKeyOutput) ToObjectTypeKeyOutput() ObjectTypeKeyOutput {
	return o
}

func (o ObjectTypeKeyOutput) ToObjectTypeKeyOutputWithContext(ctx context.Context) ObjectTypeKeyOutput {
	return o
}

func (o ObjectTypeKeyOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeKey] {
	return pulumix.Output[ObjectTypeKey]{
		OutputState: o.OutputState,
	}
}

// The reference for the key name of the fields map.
func (o ObjectTypeKeyOutput) FieldNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectTypeKey) []string { return v.FieldNames }).(pulumi.StringArrayOutput)
}

// The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
func (o ObjectTypeKeyOutput) StandardIdentifiers() ObjectTypeKeyStandardIdentifiersItemArrayOutput {
	return o.ApplyT(func(v ObjectTypeKey) []ObjectTypeKeyStandardIdentifiersItem { return v.StandardIdentifiers }).(ObjectTypeKeyStandardIdentifiersItemArrayOutput)
}

type ObjectTypeKeyArrayOutput struct{ *pulumi.OutputState }

func (ObjectTypeKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeKey)(nil)).Elem()
}

func (o ObjectTypeKeyArrayOutput) ToObjectTypeKeyArrayOutput() ObjectTypeKeyArrayOutput {
	return o
}

func (o ObjectTypeKeyArrayOutput) ToObjectTypeKeyArrayOutputWithContext(ctx context.Context) ObjectTypeKeyArrayOutput {
	return o
}

func (o ObjectTypeKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeKey] {
	return pulumix.Output[[]ObjectTypeKey]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeKeyArrayOutput) Index(i pulumi.IntInput) ObjectTypeKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectTypeKey {
		return vs[0].([]ObjectTypeKey)[vs[1].(int)]
	}).(ObjectTypeKeyOutput)
}

type ObjectTypeKeyMap struct {
	Name              *string         `pulumi:"name"`
	ObjectTypeKeyList []ObjectTypeKey `pulumi:"objectTypeKeyList"`
}

// ObjectTypeKeyMapInput is an input type that accepts ObjectTypeKeyMap and ObjectTypeKeyMapOutput values.
// You can construct a concrete instance of `ObjectTypeKeyMapInput` via:
//
//	ObjectTypeKeyMap{ "key": ObjectTypeKeyArgs{...} }
type ObjectTypeKeyMapInput interface {
	pulumi.Input

	ToObjectTypeKeyMapOutput() ObjectTypeKeyMapOutput
	ToObjectTypeKeyMapOutputWithContext(context.Context) ObjectTypeKeyMapOutput
}

type ObjectTypeKeyMapArgs struct {
	Name              pulumi.StringPtrInput   `pulumi:"name"`
	ObjectTypeKeyList ObjectTypeKeyArrayInput `pulumi:"objectTypeKeyList"`
}

func (ObjectTypeKeyMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeKeyMap)(nil)).Elem()
}

func (i ObjectTypeKeyMapArgs) ToObjectTypeKeyMapOutput() ObjectTypeKeyMapOutput {
	return i.ToObjectTypeKeyMapOutputWithContext(context.Background())
}

func (i ObjectTypeKeyMapArgs) ToObjectTypeKeyMapOutputWithContext(ctx context.Context) ObjectTypeKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeKeyMapOutput)
}

func (i ObjectTypeKeyMapArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeKeyMap] {
	return pulumix.Output[ObjectTypeKeyMap]{
		OutputState: i.ToObjectTypeKeyMapOutputWithContext(ctx).OutputState,
	}
}

// ObjectTypeKeyMapArrayInput is an input type that accepts ObjectTypeKeyMapArray and ObjectTypeKeyMapArrayOutput values.
// You can construct a concrete instance of `ObjectTypeKeyMapArrayInput` via:
//
//	ObjectTypeKeyMapArray{ ObjectTypeKeyMapArgs{...} }
type ObjectTypeKeyMapArrayInput interface {
	pulumi.Input

	ToObjectTypeKeyMapArrayOutput() ObjectTypeKeyMapArrayOutput
	ToObjectTypeKeyMapArrayOutputWithContext(context.Context) ObjectTypeKeyMapArrayOutput
}

type ObjectTypeKeyMapArray []ObjectTypeKeyMapInput

func (ObjectTypeKeyMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeKeyMap)(nil)).Elem()
}

func (i ObjectTypeKeyMapArray) ToObjectTypeKeyMapArrayOutput() ObjectTypeKeyMapArrayOutput {
	return i.ToObjectTypeKeyMapArrayOutputWithContext(context.Background())
}

func (i ObjectTypeKeyMapArray) ToObjectTypeKeyMapArrayOutputWithContext(ctx context.Context) ObjectTypeKeyMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeKeyMapArrayOutput)
}

func (i ObjectTypeKeyMapArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeKeyMap] {
	return pulumix.Output[[]ObjectTypeKeyMap]{
		OutputState: i.ToObjectTypeKeyMapArrayOutputWithContext(ctx).OutputState,
	}
}

type ObjectTypeKeyMapOutput struct{ *pulumi.OutputState }

func (ObjectTypeKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeKeyMap)(nil)).Elem()
}

func (o ObjectTypeKeyMapOutput) ToObjectTypeKeyMapOutput() ObjectTypeKeyMapOutput {
	return o
}

func (o ObjectTypeKeyMapOutput) ToObjectTypeKeyMapOutputWithContext(ctx context.Context) ObjectTypeKeyMapOutput {
	return o
}

func (o ObjectTypeKeyMapOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeKeyMap] {
	return pulumix.Output[ObjectTypeKeyMap]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeKeyMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectTypeKeyMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ObjectTypeKeyMapOutput) ObjectTypeKeyList() ObjectTypeKeyArrayOutput {
	return o.ApplyT(func(v ObjectTypeKeyMap) []ObjectTypeKey { return v.ObjectTypeKeyList }).(ObjectTypeKeyArrayOutput)
}

type ObjectTypeKeyMapArrayOutput struct{ *pulumi.OutputState }

func (ObjectTypeKeyMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeKeyMap)(nil)).Elem()
}

func (o ObjectTypeKeyMapArrayOutput) ToObjectTypeKeyMapArrayOutput() ObjectTypeKeyMapArrayOutput {
	return o
}

func (o ObjectTypeKeyMapArrayOutput) ToObjectTypeKeyMapArrayOutputWithContext(ctx context.Context) ObjectTypeKeyMapArrayOutput {
	return o
}

func (o ObjectTypeKeyMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeKeyMap] {
	return pulumix.Output[[]ObjectTypeKeyMap]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeKeyMapArrayOutput) Index(i pulumi.IntInput) ObjectTypeKeyMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectTypeKeyMap {
		return vs[0].([]ObjectTypeKeyMap)[vs[1].(int)]
	}).(ObjectTypeKeyMapOutput)
}

type ObjectTypeTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ObjectTypeTagInput is an input type that accepts ObjectTypeTagArgs and ObjectTypeTagOutput values.
// You can construct a concrete instance of `ObjectTypeTagInput` via:
//
//	ObjectTypeTagArgs{...}
type ObjectTypeTagInput interface {
	pulumi.Input

	ToObjectTypeTagOutput() ObjectTypeTagOutput
	ToObjectTypeTagOutputWithContext(context.Context) ObjectTypeTagOutput
}

type ObjectTypeTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ObjectTypeTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeTag)(nil)).Elem()
}

func (i ObjectTypeTagArgs) ToObjectTypeTagOutput() ObjectTypeTagOutput {
	return i.ToObjectTypeTagOutputWithContext(context.Background())
}

func (i ObjectTypeTagArgs) ToObjectTypeTagOutputWithContext(ctx context.Context) ObjectTypeTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeTagOutput)
}

func (i ObjectTypeTagArgs) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeTag] {
	return pulumix.Output[ObjectTypeTag]{
		OutputState: i.ToObjectTypeTagOutputWithContext(ctx).OutputState,
	}
}

// ObjectTypeTagArrayInput is an input type that accepts ObjectTypeTagArray and ObjectTypeTagArrayOutput values.
// You can construct a concrete instance of `ObjectTypeTagArrayInput` via:
//
//	ObjectTypeTagArray{ ObjectTypeTagArgs{...} }
type ObjectTypeTagArrayInput interface {
	pulumi.Input

	ToObjectTypeTagArrayOutput() ObjectTypeTagArrayOutput
	ToObjectTypeTagArrayOutputWithContext(context.Context) ObjectTypeTagArrayOutput
}

type ObjectTypeTagArray []ObjectTypeTagInput

func (ObjectTypeTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeTag)(nil)).Elem()
}

func (i ObjectTypeTagArray) ToObjectTypeTagArrayOutput() ObjectTypeTagArrayOutput {
	return i.ToObjectTypeTagArrayOutputWithContext(context.Background())
}

func (i ObjectTypeTagArray) ToObjectTypeTagArrayOutputWithContext(ctx context.Context) ObjectTypeTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectTypeTagArrayOutput)
}

func (i ObjectTypeTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeTag] {
	return pulumix.Output[[]ObjectTypeTag]{
		OutputState: i.ToObjectTypeTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ObjectTypeTagOutput struct{ *pulumi.OutputState }

func (ObjectTypeTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectTypeTag)(nil)).Elem()
}

func (o ObjectTypeTagOutput) ToObjectTypeTagOutput() ObjectTypeTagOutput {
	return o
}

func (o ObjectTypeTagOutput) ToObjectTypeTagOutputWithContext(ctx context.Context) ObjectTypeTagOutput {
	return o
}

func (o ObjectTypeTagOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectTypeTag] {
	return pulumix.Output[ObjectTypeTag]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectTypeTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ObjectTypeTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectTypeTag) string { return v.Value }).(pulumi.StringOutput)
}

type ObjectTypeTagArrayOutput struct{ *pulumi.OutputState }

func (ObjectTypeTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectTypeTag)(nil)).Elem()
}

func (o ObjectTypeTagArrayOutput) ToObjectTypeTagArrayOutput() ObjectTypeTagArrayOutput {
	return o
}

func (o ObjectTypeTagArrayOutput) ToObjectTypeTagArrayOutputWithContext(ctx context.Context) ObjectTypeTagArrayOutput {
	return o
}

func (o ObjectTypeTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectTypeTag] {
	return pulumix.Output[[]ObjectTypeTag]{
		OutputState: o.OutputState,
	}
}

func (o ObjectTypeTagArrayOutput) Index(i pulumi.IntInput) ObjectTypeTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectTypeTag {
		return vs[0].([]ObjectTypeTag)[vs[1].(int)]
	}).(ObjectTypeTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionAttributeDetailsInput)(nil)).Elem(), CalculatedAttributeDefinitionAttributeDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionAttributeItemInput)(nil)).Elem(), CalculatedAttributeDefinitionAttributeItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionAttributeItemArrayInput)(nil)).Elem(), CalculatedAttributeDefinitionAttributeItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionConditionsInput)(nil)).Elem(), CalculatedAttributeDefinitionConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionConditionsPtrInput)(nil)).Elem(), CalculatedAttributeDefinitionConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionRangeInput)(nil)).Elem(), CalculatedAttributeDefinitionRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionRangePtrInput)(nil)).Elem(), CalculatedAttributeDefinitionRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionTagInput)(nil)).Elem(), CalculatedAttributeDefinitionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionTagArrayInput)(nil)).Elem(), CalculatedAttributeDefinitionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionThresholdInput)(nil)).Elem(), CalculatedAttributeDefinitionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedAttributeDefinitionThresholdPtrInput)(nil)).Elem(), CalculatedAttributeDefinitionThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAttributeTypesSelectorInput)(nil)).Elem(), DomainAttributeTypesSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAttributeTypesSelectorPtrInput)(nil)).Elem(), DomainAttributeTypesSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAutoMergingInput)(nil)).Elem(), DomainAutoMergingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainAutoMergingPtrInput)(nil)).Elem(), DomainAutoMergingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConflictResolutionInput)(nil)).Elem(), DomainConflictResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConflictResolutionPtrInput)(nil)).Elem(), DomainConflictResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConsolidationInput)(nil)).Elem(), DomainConsolidationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConsolidationPtrInput)(nil)).Elem(), DomainConsolidationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainExportingConfigInput)(nil)).Elem(), DomainExportingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainExportingConfigPtrInput)(nil)).Elem(), DomainExportingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainJobScheduleInput)(nil)).Elem(), DomainJobScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainJobSchedulePtrInput)(nil)).Elem(), DomainJobScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMatchingInput)(nil)).Elem(), DomainMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMatchingPtrInput)(nil)).Elem(), DomainMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMatchingRuleInput)(nil)).Elem(), DomainMatchingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMatchingRuleArrayInput)(nil)).Elem(), DomainMatchingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRuleBasedMatchingInput)(nil)).Elem(), DomainRuleBasedMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRuleBasedMatchingPtrInput)(nil)).Elem(), DomainRuleBasedMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainS3ExportingConfigInput)(nil)).Elem(), DomainS3ExportingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainS3ExportingConfigPtrInput)(nil)).Elem(), DomainS3ExportingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTagInput)(nil)).Elem(), DomainTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainTagArrayInput)(nil)).Elem(), DomainTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventStreamTagInput)(nil)).Elem(), EventStreamTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventStreamTagArrayInput)(nil)).Elem(), EventStreamTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationConnectorOperatorInput)(nil)).Elem(), IntegrationConnectorOperatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationConnectorOperatorPtrInput)(nil)).Elem(), IntegrationConnectorOperatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationFlowDefinitionInput)(nil)).Elem(), IntegrationFlowDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationFlowDefinitionPtrInput)(nil)).Elem(), IntegrationFlowDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationIncrementalPullConfigInput)(nil)).Elem(), IntegrationIncrementalPullConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationIncrementalPullConfigPtrInput)(nil)).Elem(), IntegrationIncrementalPullConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMarketoSourcePropertiesInput)(nil)).Elem(), IntegrationMarketoSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMarketoSourcePropertiesPtrInput)(nil)).Elem(), IntegrationMarketoSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationObjectTypeMappingInput)(nil)).Elem(), IntegrationObjectTypeMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationObjectTypeMappingArrayInput)(nil)).Elem(), IntegrationObjectTypeMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationS3SourcePropertiesInput)(nil)).Elem(), IntegrationS3SourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationS3SourcePropertiesPtrInput)(nil)).Elem(), IntegrationS3SourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationSalesforceSourcePropertiesInput)(nil)).Elem(), IntegrationSalesforceSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationSalesforceSourcePropertiesPtrInput)(nil)).Elem(), IntegrationSalesforceSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationScheduledTriggerPropertiesInput)(nil)).Elem(), IntegrationScheduledTriggerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationScheduledTriggerPropertiesPtrInput)(nil)).Elem(), IntegrationScheduledTriggerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationServiceNowSourcePropertiesInput)(nil)).Elem(), IntegrationServiceNowSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationServiceNowSourcePropertiesPtrInput)(nil)).Elem(), IntegrationServiceNowSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationSourceConnectorPropertiesInput)(nil)).Elem(), IntegrationSourceConnectorPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationSourceConnectorPropertiesPtrInput)(nil)).Elem(), IntegrationSourceConnectorPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationSourceFlowConfigInput)(nil)).Elem(), IntegrationSourceFlowConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationSourceFlowConfigPtrInput)(nil)).Elem(), IntegrationSourceFlowConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTagInput)(nil)).Elem(), IntegrationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTagArrayInput)(nil)).Elem(), IntegrationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTaskInput)(nil)).Elem(), IntegrationTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTaskArrayInput)(nil)).Elem(), IntegrationTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTaskPropertiesMapInput)(nil)).Elem(), IntegrationTaskPropertiesMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTaskPropertiesMapArrayInput)(nil)).Elem(), IntegrationTaskPropertiesMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTriggerConfigInput)(nil)).Elem(), IntegrationTriggerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTriggerConfigPtrInput)(nil)).Elem(), IntegrationTriggerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTriggerPropertiesInput)(nil)).Elem(), IntegrationTriggerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTriggerPropertiesPtrInput)(nil)).Elem(), IntegrationTriggerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationZendeskSourcePropertiesInput)(nil)).Elem(), IntegrationZendeskSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationZendeskSourcePropertiesPtrInput)(nil)).Elem(), IntegrationZendeskSourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeFieldInput)(nil)).Elem(), ObjectTypeFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeFieldPtrInput)(nil)).Elem(), ObjectTypeFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeFieldMapInput)(nil)).Elem(), ObjectTypeFieldMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeFieldMapArrayInput)(nil)).Elem(), ObjectTypeFieldMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeKeyInput)(nil)).Elem(), ObjectTypeKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeKeyArrayInput)(nil)).Elem(), ObjectTypeKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeKeyMapInput)(nil)).Elem(), ObjectTypeKeyMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeKeyMapArrayInput)(nil)).Elem(), ObjectTypeKeyMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeTagInput)(nil)).Elem(), ObjectTypeTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectTypeTagArrayInput)(nil)).Elem(), ObjectTypeTagArray{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionAttributeDetailsOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionAttributeDetailsPtrOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionAttributeItemOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionAttributeItemArrayOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionConditionsOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionConditionsPtrOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionRangeOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionRangePtrOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionTagOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionTagArrayOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionThresholdOutput{})
	pulumi.RegisterOutputType(CalculatedAttributeDefinitionThresholdPtrOutput{})
	pulumi.RegisterOutputType(DestinationDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(DestinationDetailsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DomainAttributeTypesSelectorOutput{})
	pulumi.RegisterOutputType(DomainAttributeTypesSelectorPtrOutput{})
	pulumi.RegisterOutputType(DomainAutoMergingOutput{})
	pulumi.RegisterOutputType(DomainAutoMergingPtrOutput{})
	pulumi.RegisterOutputType(DomainConflictResolutionOutput{})
	pulumi.RegisterOutputType(DomainConflictResolutionPtrOutput{})
	pulumi.RegisterOutputType(DomainConsolidationOutput{})
	pulumi.RegisterOutputType(DomainConsolidationPtrOutput{})
	pulumi.RegisterOutputType(DomainExportingConfigOutput{})
	pulumi.RegisterOutputType(DomainExportingConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainJobScheduleOutput{})
	pulumi.RegisterOutputType(DomainJobSchedulePtrOutput{})
	pulumi.RegisterOutputType(DomainMatchingOutput{})
	pulumi.RegisterOutputType(DomainMatchingPtrOutput{})
	pulumi.RegisterOutputType(DomainMatchingRuleOutput{})
	pulumi.RegisterOutputType(DomainMatchingRuleArrayOutput{})
	pulumi.RegisterOutputType(DomainRuleBasedMatchingOutput{})
	pulumi.RegisterOutputType(DomainRuleBasedMatchingPtrOutput{})
	pulumi.RegisterOutputType(DomainS3ExportingConfigOutput{})
	pulumi.RegisterOutputType(DomainS3ExportingConfigPtrOutput{})
	pulumi.RegisterOutputType(DomainStatsOutput{})
	pulumi.RegisterOutputType(DomainStatsPtrOutput{})
	pulumi.RegisterOutputType(DomainTagOutput{})
	pulumi.RegisterOutputType(DomainTagArrayOutput{})
	pulumi.RegisterOutputType(EventStreamTagOutput{})
	pulumi.RegisterOutputType(EventStreamTagArrayOutput{})
	pulumi.RegisterOutputType(IntegrationConnectorOperatorOutput{})
	pulumi.RegisterOutputType(IntegrationConnectorOperatorPtrOutput{})
	pulumi.RegisterOutputType(IntegrationFlowDefinitionOutput{})
	pulumi.RegisterOutputType(IntegrationFlowDefinitionPtrOutput{})
	pulumi.RegisterOutputType(IntegrationIncrementalPullConfigOutput{})
	pulumi.RegisterOutputType(IntegrationIncrementalPullConfigPtrOutput{})
	pulumi.RegisterOutputType(IntegrationMarketoSourcePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationMarketoSourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationObjectTypeMappingOutput{})
	pulumi.RegisterOutputType(IntegrationObjectTypeMappingArrayOutput{})
	pulumi.RegisterOutputType(IntegrationS3SourcePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationS3SourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationSalesforceSourcePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationSalesforceSourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationScheduledTriggerPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationScheduledTriggerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationServiceNowSourcePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationServiceNowSourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationSourceConnectorPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationSourceConnectorPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationSourceFlowConfigOutput{})
	pulumi.RegisterOutputType(IntegrationSourceFlowConfigPtrOutput{})
	pulumi.RegisterOutputType(IntegrationTagOutput{})
	pulumi.RegisterOutputType(IntegrationTagArrayOutput{})
	pulumi.RegisterOutputType(IntegrationTaskOutput{})
	pulumi.RegisterOutputType(IntegrationTaskArrayOutput{})
	pulumi.RegisterOutputType(IntegrationTaskPropertiesMapOutput{})
	pulumi.RegisterOutputType(IntegrationTaskPropertiesMapArrayOutput{})
	pulumi.RegisterOutputType(IntegrationTriggerConfigOutput{})
	pulumi.RegisterOutputType(IntegrationTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(IntegrationTriggerPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationTriggerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationZendeskSourcePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationZendeskSourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ObjectTypeFieldOutput{})
	pulumi.RegisterOutputType(ObjectTypeFieldPtrOutput{})
	pulumi.RegisterOutputType(ObjectTypeFieldMapOutput{})
	pulumi.RegisterOutputType(ObjectTypeFieldMapArrayOutput{})
	pulumi.RegisterOutputType(ObjectTypeKeyOutput{})
	pulumi.RegisterOutputType(ObjectTypeKeyArrayOutput{})
	pulumi.RegisterOutputType(ObjectTypeKeyMapOutput{})
	pulumi.RegisterOutputType(ObjectTypeKeyMapArrayOutput{})
	pulumi.RegisterOutputType(ObjectTypeTagOutput{})
	pulumi.RegisterOutputType(ObjectTypeTagArrayOutput{})
}
