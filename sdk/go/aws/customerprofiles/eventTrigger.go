// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package customerprofiles

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An event trigger resource of Amazon Connect Customer Profiles
type EventTrigger struct {
	pulumi.CustomResourceState

	// The timestamp of when the event trigger was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the event trigger.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique name of the domain.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// A list of conditions that determine when an event should trigger the destination.
	EventTriggerConditions EventTriggerConditionArrayOutput `pulumi:"eventTriggerConditions"`
	// Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
	EventTriggerLimits EventTriggerLimitsPtrOutput `pulumi:"eventTriggerLimits"`
	// The unique name of the event trigger.
	EventTriggerName pulumi.StringOutput `pulumi:"eventTriggerName"`
	// The timestamp of when the event trigger was most recently updated.
	LastUpdatedAt pulumi.StringOutput `pulumi:"lastUpdatedAt"`
	// The unique name of the object type.
	ObjectTypeName pulumi.StringOutput `pulumi:"objectTypeName"`
	// The destination is triggered only for profiles that meet the criteria of a segment definition.
	SegmentFilter pulumi.StringPtrOutput `pulumi:"segmentFilter"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewEventTrigger registers a new resource with the given unique name, arguments, and options.
func NewEventTrigger(ctx *pulumi.Context,
	name string, args *EventTriggerArgs, opts ...pulumi.ResourceOption) (*EventTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.EventTriggerConditions == nil {
		return nil, errors.New("invalid value for required argument 'EventTriggerConditions'")
	}
	if args.ObjectTypeName == nil {
		return nil, errors.New("invalid value for required argument 'ObjectTypeName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainName",
		"eventTriggerName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventTrigger
	err := ctx.RegisterResource("aws-native:customerprofiles:EventTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventTrigger gets an existing EventTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventTriggerState, opts ...pulumi.ResourceOption) (*EventTrigger, error) {
	var resource EventTrigger
	err := ctx.ReadResource("aws-native:customerprofiles:EventTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventTrigger resources.
type eventTriggerState struct {
}

type EventTriggerState struct {
}

func (EventTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTriggerState)(nil)).Elem()
}

type eventTriggerArgs struct {
	// The description of the event trigger.
	Description *string `pulumi:"description"`
	// The unique name of the domain.
	DomainName string `pulumi:"domainName"`
	// A list of conditions that determine when an event should trigger the destination.
	EventTriggerConditions []EventTriggerCondition `pulumi:"eventTriggerConditions"`
	// Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
	EventTriggerLimits *EventTriggerLimits `pulumi:"eventTriggerLimits"`
	// The unique name of the event trigger.
	EventTriggerName *string `pulumi:"eventTriggerName"`
	// The unique name of the object type.
	ObjectTypeName string `pulumi:"objectTypeName"`
	// The destination is triggered only for profiles that meet the criteria of a segment definition.
	SegmentFilter *string `pulumi:"segmentFilter"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a EventTrigger resource.
type EventTriggerArgs struct {
	// The description of the event trigger.
	Description pulumi.StringPtrInput
	// The unique name of the domain.
	DomainName pulumi.StringInput
	// A list of conditions that determine when an event should trigger the destination.
	EventTriggerConditions EventTriggerConditionArrayInput
	// Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
	EventTriggerLimits EventTriggerLimitsPtrInput
	// The unique name of the event trigger.
	EventTriggerName pulumi.StringPtrInput
	// The unique name of the object type.
	ObjectTypeName pulumi.StringInput
	// The destination is triggered only for profiles that meet the criteria of a segment definition.
	SegmentFilter pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (EventTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTriggerArgs)(nil)).Elem()
}

type EventTriggerInput interface {
	pulumi.Input

	ToEventTriggerOutput() EventTriggerOutput
	ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput
}

func (*EventTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (i *EventTrigger) ToEventTriggerOutput() EventTriggerOutput {
	return i.ToEventTriggerOutputWithContext(context.Background())
}

func (i *EventTrigger) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerOutput)
}

type EventTriggerOutput struct{ *pulumi.OutputState }

func (EventTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (o EventTriggerOutput) ToEventTriggerOutput() EventTriggerOutput {
	return o
}

func (o EventTriggerOutput) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return o
}

// The timestamp of when the event trigger was created.
func (o EventTriggerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the event trigger.
func (o EventTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique name of the domain.
func (o EventTriggerOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// A list of conditions that determine when an event should trigger the destination.
func (o EventTriggerOutput) EventTriggerConditions() EventTriggerConditionArrayOutput {
	return o.ApplyT(func(v *EventTrigger) EventTriggerConditionArrayOutput { return v.EventTriggerConditions }).(EventTriggerConditionArrayOutput)
}

// Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
func (o EventTriggerOutput) EventTriggerLimits() EventTriggerLimitsPtrOutput {
	return o.ApplyT(func(v *EventTrigger) EventTriggerLimitsPtrOutput { return v.EventTriggerLimits }).(EventTriggerLimitsPtrOutput)
}

// The unique name of the event trigger.
func (o EventTriggerOutput) EventTriggerName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.EventTriggerName }).(pulumi.StringOutput)
}

// The timestamp of when the event trigger was most recently updated.
func (o EventTriggerOutput) LastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.LastUpdatedAt }).(pulumi.StringOutput)
}

// The unique name of the object type.
func (o EventTriggerOutput) ObjectTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ObjectTypeName }).(pulumi.StringOutput)
}

// The destination is triggered only for profiles that meet the criteria of a segment definition.
func (o EventTriggerOutput) SegmentFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringPtrOutput { return v.SegmentFilter }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o EventTriggerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *EventTrigger) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventTriggerInput)(nil)).Elem(), &EventTrigger{})
	pulumi.RegisterOutputType(EventTriggerOutput{})
}
