// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package customerprofiles

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Event Stream resource of Amazon Connect Customer Profiles
type EventStream struct {
	pulumi.CustomResourceState

	// The timestamp of when the export was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Details regarding the Kinesis stream.
	DestinationDetails DestinationDetailsPropertiesOutput `pulumi:"destinationDetails"`
	// The unique name of the domain.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// A unique identifier for the event stream.
	EventStreamArn pulumi.StringOutput `pulumi:"eventStreamArn"`
	// The name of the event stream.
	EventStreamName pulumi.StringOutput `pulumi:"eventStreamName"`
	// The operational state of destination stream for export.
	State EventStreamStateEnumOutput `pulumi:"state"`
	// The tags used to organize, track, or control access for this resource.
	Tags EventStreamTagArrayOutput `pulumi:"tags"`
	Uri  pulumi.StringOutput       `pulumi:"uri"`
}

// NewEventStream registers a new resource with the given unique name, arguments, and options.
func NewEventStream(ctx *pulumi.Context,
	name string, args *EventStreamArgs, opts ...pulumi.ResourceOption) (*EventStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Uri == nil {
		return nil, errors.New("invalid value for required argument 'Uri'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"domainName",
		"eventStreamName",
		"uri",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventStream
	err := ctx.RegisterResource("aws-native:customerprofiles:EventStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventStream gets an existing EventStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventStreamState, opts ...pulumi.ResourceOption) (*EventStream, error) {
	var resource EventStream
	err := ctx.ReadResource("aws-native:customerprofiles:EventStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventStream resources.
type eventStreamState struct {
}

type EventStreamState struct {
}

func (EventStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventStreamState)(nil)).Elem()
}

type eventStreamArgs struct {
	// The unique name of the domain.
	DomainName string `pulumi:"domainName"`
	// The name of the event stream.
	EventStreamName *string `pulumi:"eventStreamName"`
	// The tags used to organize, track, or control access for this resource.
	Tags []EventStreamTag `pulumi:"tags"`
	Uri  string           `pulumi:"uri"`
}

// The set of arguments for constructing a EventStream resource.
type EventStreamArgs struct {
	// The unique name of the domain.
	DomainName pulumi.StringInput
	// The name of the event stream.
	EventStreamName pulumi.StringPtrInput
	// The tags used to organize, track, or control access for this resource.
	Tags EventStreamTagArrayInput
	Uri  pulumi.StringInput
}

func (EventStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventStreamArgs)(nil)).Elem()
}

type EventStreamInput interface {
	pulumi.Input

	ToEventStreamOutput() EventStreamOutput
	ToEventStreamOutputWithContext(ctx context.Context) EventStreamOutput
}

func (*EventStream) ElementType() reflect.Type {
	return reflect.TypeOf((**EventStream)(nil)).Elem()
}

func (i *EventStream) ToEventStreamOutput() EventStreamOutput {
	return i.ToEventStreamOutputWithContext(context.Background())
}

func (i *EventStream) ToEventStreamOutputWithContext(ctx context.Context) EventStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventStreamOutput)
}

type EventStreamOutput struct{ *pulumi.OutputState }

func (EventStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventStream)(nil)).Elem()
}

func (o EventStreamOutput) ToEventStreamOutput() EventStreamOutput {
	return o
}

func (o EventStreamOutput) ToEventStreamOutputWithContext(ctx context.Context) EventStreamOutput {
	return o
}

// The timestamp of when the export was created.
func (o EventStreamOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Details regarding the Kinesis stream.
func (o EventStreamOutput) DestinationDetails() DestinationDetailsPropertiesOutput {
	return o.ApplyT(func(v *EventStream) DestinationDetailsPropertiesOutput { return v.DestinationDetails }).(DestinationDetailsPropertiesOutput)
}

// The unique name of the domain.
func (o EventStreamOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// A unique identifier for the event stream.
func (o EventStreamOutput) EventStreamArn() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.EventStreamArn }).(pulumi.StringOutput)
}

// The name of the event stream.
func (o EventStreamOutput) EventStreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.EventStreamName }).(pulumi.StringOutput)
}

// The operational state of destination stream for export.
func (o EventStreamOutput) State() EventStreamStateEnumOutput {
	return o.ApplyT(func(v *EventStream) EventStreamStateEnumOutput { return v.State }).(EventStreamStateEnumOutput)
}

// The tags used to organize, track, or control access for this resource.
func (o EventStreamOutput) Tags() EventStreamTagArrayOutput {
	return o.ApplyT(func(v *EventStream) EventStreamTagArrayOutput { return v.Tags }).(EventStreamTagArrayOutput)
}

func (o EventStreamOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *EventStream) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventStreamInput)(nil)).Elem(), &EventStream{})
	pulumi.RegisterOutputType(EventStreamOutput{})
}
