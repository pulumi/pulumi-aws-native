// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package customerprofiles

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource schema for creating an Amazon Connect Customer Profiles Integration.
func LookupIntegration(ctx *pulumi.Context, args *LookupIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupIntegrationResult, error) {
	var rv LookupIntegrationResult
	err := ctx.Invoke("aws-native:customerprofiles:getIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIntegrationArgs struct {
	// The unique name of the domain.
	DomainName string `pulumi:"domainName"`
	// The URI of the S3 bucket or any other type of data source.
	Uri string `pulumi:"uri"`
}

type LookupIntegrationResult struct {
	// The time of this integration got created
	CreatedAt *string `pulumi:"createdAt"`
	// The time of this integration got last updated at
	LastUpdatedAt *string `pulumi:"lastUpdatedAt"`
	// The name of the ObjectType defined for the 3rd party data in Profile Service
	ObjectTypeName *string `pulumi:"objectTypeName"`
	// The mapping between 3rd party event types and ObjectType names
	ObjectTypeNames []IntegrationObjectTypeMapping `pulumi:"objectTypeNames"`
	// The tags (keys and values) associated with the integration
	Tags []IntegrationTag `pulumi:"tags"`
}

func LookupIntegrationOutput(ctx *pulumi.Context, args LookupIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupIntegrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIntegrationResult, error) {
			args := v.(LookupIntegrationArgs)
			r, err := LookupIntegration(ctx, &args, opts...)
			var s LookupIntegrationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIntegrationResultOutput)
}

type LookupIntegrationOutputArgs struct {
	// The unique name of the domain.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The URI of the S3 bucket or any other type of data source.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (LookupIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationArgs)(nil)).Elem()
}

type LookupIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationResult)(nil)).Elem()
}

func (o LookupIntegrationResultOutput) ToLookupIntegrationResultOutput() LookupIntegrationResultOutput {
	return o
}

func (o LookupIntegrationResultOutput) ToLookupIntegrationResultOutputWithContext(ctx context.Context) LookupIntegrationResultOutput {
	return o
}

// The time of this integration got created
func (o LookupIntegrationResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The time of this integration got last updated at
func (o LookupIntegrationResultOutput) LastUpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationResult) *string { return v.LastUpdatedAt }).(pulumi.StringPtrOutput)
}

// The name of the ObjectType defined for the 3rd party data in Profile Service
func (o LookupIntegrationResultOutput) ObjectTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationResult) *string { return v.ObjectTypeName }).(pulumi.StringPtrOutput)
}

// The mapping between 3rd party event types and ObjectType names
func (o LookupIntegrationResultOutput) ObjectTypeNames() IntegrationObjectTypeMappingArrayOutput {
	return o.ApplyT(func(v LookupIntegrationResult) []IntegrationObjectTypeMapping { return v.ObjectTypeNames }).(IntegrationObjectTypeMappingArrayOutput)
}

// The tags (keys and values) associated with the integration
func (o LookupIntegrationResultOutput) Tags() IntegrationTagArrayOutput {
	return o.ApplyT(func(v LookupIntegrationResult) []IntegrationTag { return v.Tags }).(IntegrationTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIntegrationResultOutput{})
}
