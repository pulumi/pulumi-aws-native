// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package customerprofiles

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A segment definition resource of Amazon Connect Customer Profiles
type SegmentDefinition struct {
	pulumi.CustomResourceState

	// The time of this segment definition got created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the segment definition.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the segment definition.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The unique name of the domain.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The Amazon Resource Name (ARN) of the segment definition.
	SegmentDefinitionArn pulumi.StringOutput `pulumi:"segmentDefinitionArn"`
	// The unique name of the segment definition.
	SegmentDefinitionName pulumi.StringOutput `pulumi:"segmentDefinitionName"`
	// An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.
	SegmentGroups SegmentDefinitionSegmentGroupOutput `pulumi:"segmentGroups"`
	// The tags used to organize, track, or control access for this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewSegmentDefinition registers a new resource with the given unique name, arguments, and options.
func NewSegmentDefinition(ctx *pulumi.Context,
	name string, args *SegmentDefinitionArgs, opts ...pulumi.ResourceOption) (*SegmentDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.SegmentGroups == nil {
		return nil, errors.New("invalid value for required argument 'SegmentGroups'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"displayName",
		"domainName",
		"segmentDefinitionName",
		"segmentGroups",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SegmentDefinition
	err := ctx.RegisterResource("aws-native:customerprofiles:SegmentDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSegmentDefinition gets an existing SegmentDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSegmentDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SegmentDefinitionState, opts ...pulumi.ResourceOption) (*SegmentDefinition, error) {
	var resource SegmentDefinition
	err := ctx.ReadResource("aws-native:customerprofiles:SegmentDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SegmentDefinition resources.
type segmentDefinitionState struct {
}

type SegmentDefinitionState struct {
}

func (SegmentDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentDefinitionState)(nil)).Elem()
}

type segmentDefinitionArgs struct {
	// The description of the segment definition.
	Description *string `pulumi:"description"`
	// The display name of the segment definition.
	DisplayName string `pulumi:"displayName"`
	// The unique name of the domain.
	DomainName string `pulumi:"domainName"`
	// The unique name of the segment definition.
	SegmentDefinitionName *string `pulumi:"segmentDefinitionName"`
	// An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.
	SegmentGroups SegmentDefinitionSegmentGroup `pulumi:"segmentGroups"`
	// The tags used to organize, track, or control access for this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a SegmentDefinition resource.
type SegmentDefinitionArgs struct {
	// The description of the segment definition.
	Description pulumi.StringPtrInput
	// The display name of the segment definition.
	DisplayName pulumi.StringInput
	// The unique name of the domain.
	DomainName pulumi.StringInput
	// The unique name of the segment definition.
	SegmentDefinitionName pulumi.StringPtrInput
	// An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.
	SegmentGroups SegmentDefinitionSegmentGroupInput
	// The tags used to organize, track, or control access for this resource.
	Tags aws.TagArrayInput
}

func (SegmentDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentDefinitionArgs)(nil)).Elem()
}

type SegmentDefinitionInput interface {
	pulumi.Input

	ToSegmentDefinitionOutput() SegmentDefinitionOutput
	ToSegmentDefinitionOutputWithContext(ctx context.Context) SegmentDefinitionOutput
}

func (*SegmentDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentDefinition)(nil)).Elem()
}

func (i *SegmentDefinition) ToSegmentDefinitionOutput() SegmentDefinitionOutput {
	return i.ToSegmentDefinitionOutputWithContext(context.Background())
}

func (i *SegmentDefinition) ToSegmentDefinitionOutputWithContext(ctx context.Context) SegmentDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentDefinitionOutput)
}

type SegmentDefinitionOutput struct{ *pulumi.OutputState }

func (SegmentDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentDefinition)(nil)).Elem()
}

func (o SegmentDefinitionOutput) ToSegmentDefinitionOutput() SegmentDefinitionOutput {
	return o
}

func (o SegmentDefinitionOutput) ToSegmentDefinitionOutputWithContext(ctx context.Context) SegmentDefinitionOutput {
	return o
}

// The time of this segment definition got created.
func (o SegmentDefinitionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentDefinition) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the segment definition.
func (o SegmentDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentDefinition) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the segment definition.
func (o SegmentDefinitionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentDefinition) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique name of the domain.
func (o SegmentDefinitionOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentDefinition) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the segment definition.
func (o SegmentDefinitionOutput) SegmentDefinitionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentDefinition) pulumi.StringOutput { return v.SegmentDefinitionArn }).(pulumi.StringOutput)
}

// The unique name of the segment definition.
func (o SegmentDefinitionOutput) SegmentDefinitionName() pulumi.StringOutput {
	return o.ApplyT(func(v *SegmentDefinition) pulumi.StringOutput { return v.SegmentDefinitionName }).(pulumi.StringOutput)
}

// An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.
func (o SegmentDefinitionOutput) SegmentGroups() SegmentDefinitionSegmentGroupOutput {
	return o.ApplyT(func(v *SegmentDefinition) SegmentDefinitionSegmentGroupOutput { return v.SegmentGroups }).(SegmentDefinitionSegmentGroupOutput)
}

// The tags used to organize, track, or control access for this resource.
func (o SegmentDefinitionOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *SegmentDefinition) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentDefinitionInput)(nil)).Elem(), &SegmentDefinition{})
	pulumi.RegisterOutputType(SegmentDefinitionOutput{})
}
