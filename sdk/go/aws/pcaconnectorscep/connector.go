// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pcaconnectorscep

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a Connector that allows certificate issuance through Simple Certificate Enrollment Protocol (SCEP)
type Connector struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the certificate authority associated with the connector.
	CertificateAuthorityArn pulumi.StringOutput `pulumi:"certificateAuthorityArn"`
	// The Amazon Resource Name (ARN) of the connector.
	ConnectorArn pulumi.StringOutput `pulumi:"connectorArn"`
	// The connector's HTTPS public SCEP URL.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure `MobileDeviceManagement` , then the connector is for general-purpose use and this object is empty.
	MobileDeviceManagement ConnectorMobileDeviceManagementPtrOutput `pulumi:"mobileDeviceManagement"`
	OpenIdConfiguration    ConnectorOpenIdConfigurationOutput       `pulumi:"openIdConfiguration"`
	Tags                   pulumi.StringMapOutput                   `pulumi:"tags"`
	// The connector type.
	Type ConnectorTypeOutput `pulumi:"type"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthorityArn == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthorityArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"certificateAuthorityArn",
		"mobileDeviceManagement",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connector
	err := ctx.RegisterResource("aws-native:pcaconnectorscep:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("aws-native:pcaconnectorscep:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
}

type ConnectorState struct {
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// The Amazon Resource Name (ARN) of the certificate authority associated with the connector.
	CertificateAuthorityArn string `pulumi:"certificateAuthorityArn"`
	// Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure `MobileDeviceManagement` , then the connector is for general-purpose use and this object is empty.
	MobileDeviceManagement *ConnectorMobileDeviceManagement `pulumi:"mobileDeviceManagement"`
	Tags                   map[string]string                `pulumi:"tags"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// The Amazon Resource Name (ARN) of the certificate authority associated with the connector.
	CertificateAuthorityArn pulumi.StringInput
	// Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure `MobileDeviceManagement` , then the connector is for general-purpose use and this object is empty.
	MobileDeviceManagement ConnectorMobileDeviceManagementPtrInput
	Tags                   pulumi.StringMapInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

// The Amazon Resource Name (ARN) of the certificate authority associated with the connector.
func (o ConnectorOutput) CertificateAuthorityArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.CertificateAuthorityArn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the connector.
func (o ConnectorOutput) ConnectorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ConnectorArn }).(pulumi.StringOutput)
}

// The connector's HTTPS public SCEP URL.
func (o ConnectorOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Contains settings relevant to the mobile device management system that you chose for the connector. If you didn't configure `MobileDeviceManagement` , then the connector is for general-purpose use and this object is empty.
func (o ConnectorOutput) MobileDeviceManagement() ConnectorMobileDeviceManagementPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorMobileDeviceManagementPtrOutput { return v.MobileDeviceManagement }).(ConnectorMobileDeviceManagementPtrOutput)
}

func (o ConnectorOutput) OpenIdConfiguration() ConnectorOpenIdConfigurationOutput {
	return o.ApplyT(func(v *Connector) ConnectorOpenIdConfigurationOutput { return v.OpenIdConfiguration }).(ConnectorOpenIdConfigurationOutput)
}

func (o ConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The connector type.
func (o ConnectorOutput) Type() ConnectorTypeOutput {
	return o.ApplyT(func(v *Connector) ConnectorTypeOutput { return v.Type }).(ConnectorTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterOutputType(ConnectorOutput{})
}
