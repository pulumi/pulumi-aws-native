// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema for IAM Role Policy
type RolePolicy struct {
	pulumi.CustomResourceState

	// The policy document.
	PolicyDocument pulumi.AnyOutput `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// The name of the policy document.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
}

// NewRolePolicy registers a new resource with the given unique name, arguments, and options.
func NewRolePolicy(ctx *pulumi.Context,
	name string, args *RolePolicyArgs, opts ...pulumi.ResourceOption) (*RolePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RolePolicy
	err := ctx.RegisterResource("aws-native:iam:RolePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolePolicy gets an existing RolePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolePolicyState, opts ...pulumi.ResourceOption) (*RolePolicy, error) {
	var resource RolePolicy
	err := ctx.ReadResource("aws-native:iam:RolePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolePolicy resources.
type rolePolicyState struct {
}

type RolePolicyState struct {
}

func (RolePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyState)(nil)).Elem()
}

type rolePolicyArgs struct {
	// The policy document.
	PolicyDocument interface{} `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName string `pulumi:"policyName"`
	// The name of the policy document.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a RolePolicy resource.
type RolePolicyArgs struct {
	// The policy document.
	PolicyDocument pulumi.Input
	// The friendly name (not ARN) identifying the policy.
	PolicyName pulumi.StringInput
	// The name of the policy document.
	RoleName pulumi.StringInput
}

func (RolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyArgs)(nil)).Elem()
}

type RolePolicyInput interface {
	pulumi.Input

	ToRolePolicyOutput() RolePolicyOutput
	ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput
}

func (*RolePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePolicy)(nil)).Elem()
}

func (i *RolePolicy) ToRolePolicyOutput() RolePolicyOutput {
	return i.ToRolePolicyOutputWithContext(context.Background())
}

func (i *RolePolicy) ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyOutput)
}

type RolePolicyOutput struct{ *pulumi.OutputState }

func (RolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePolicy)(nil)).Elem()
}

func (o RolePolicyOutput) ToRolePolicyOutput() RolePolicyOutput {
	return o
}

func (o RolePolicyOutput) ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput {
	return o
}

// The policy document.
func (o RolePolicyOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v *RolePolicy) pulumi.AnyOutput { return v.PolicyDocument }).(pulumi.AnyOutput)
}

// The friendly name (not ARN) identifying the policy.
func (o RolePolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// The name of the policy document.
func (o RolePolicyOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePolicy) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyInput)(nil)).Elem(), &RolePolicy{})
	pulumi.RegisterOutputType(RolePolicyOutput{})
}
