// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupPolicy struct {
	PolicyDocument interface{} `pulumi:"policyDocument"`
	PolicyName     string      `pulumi:"policyName"`
}

// GroupPolicyInput is an input type that accepts GroupPolicyArgs and GroupPolicyOutput values.
// You can construct a concrete instance of `GroupPolicyInput` via:
//
//          GroupPolicyArgs{...}
type GroupPolicyInput interface {
	pulumi.Input

	ToGroupPolicyOutput() GroupPolicyOutput
	ToGroupPolicyOutputWithContext(context.Context) GroupPolicyOutput
}

type GroupPolicyArgs struct {
	PolicyDocument pulumi.Input       `pulumi:"policyDocument"`
	PolicyName     pulumi.StringInput `pulumi:"policyName"`
}

func (GroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicy)(nil)).Elem()
}

func (i GroupPolicyArgs) ToGroupPolicyOutput() GroupPolicyOutput {
	return i.ToGroupPolicyOutputWithContext(context.Background())
}

func (i GroupPolicyArgs) ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyOutput)
}

// GroupPolicyArrayInput is an input type that accepts GroupPolicyArray and GroupPolicyArrayOutput values.
// You can construct a concrete instance of `GroupPolicyArrayInput` via:
//
//          GroupPolicyArray{ GroupPolicyArgs{...} }
type GroupPolicyArrayInput interface {
	pulumi.Input

	ToGroupPolicyArrayOutput() GroupPolicyArrayOutput
	ToGroupPolicyArrayOutputWithContext(context.Context) GroupPolicyArrayOutput
}

type GroupPolicyArray []GroupPolicyInput

func (GroupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPolicy)(nil)).Elem()
}

func (i GroupPolicyArray) ToGroupPolicyArrayOutput() GroupPolicyArrayOutput {
	return i.ToGroupPolicyArrayOutputWithContext(context.Background())
}

func (i GroupPolicyArray) ToGroupPolicyArrayOutputWithContext(ctx context.Context) GroupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyArrayOutput)
}

type GroupPolicyOutput struct{ *pulumi.OutputState }

func (GroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyOutput) ToGroupPolicyOutput() GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) ToGroupPolicyOutputWithContext(ctx context.Context) GroupPolicyOutput {
	return o
}

func (o GroupPolicyOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v GroupPolicy) interface{} { return v.PolicyDocument }).(pulumi.AnyOutput)
}

func (o GroupPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

type GroupPolicyArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPolicy)(nil)).Elem()
}

func (o GroupPolicyArrayOutput) ToGroupPolicyArrayOutput() GroupPolicyArrayOutput {
	return o
}

func (o GroupPolicyArrayOutput) ToGroupPolicyArrayOutputWithContext(ctx context.Context) GroupPolicyArrayOutput {
	return o
}

func (o GroupPolicyArrayOutput) Index(i pulumi.IntInput) GroupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupPolicy {
		return vs[0].([]GroupPolicy)[vs[1].(int)]
	}).(GroupPolicyOutput)
}

// A key-value pair to associate with a resource.
type OIDCProviderTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// OIDCProviderTagInput is an input type that accepts OIDCProviderTagArgs and OIDCProviderTagOutput values.
// You can construct a concrete instance of `OIDCProviderTagInput` via:
//
//          OIDCProviderTagArgs{...}
type OIDCProviderTagInput interface {
	pulumi.Input

	ToOIDCProviderTagOutput() OIDCProviderTagOutput
	ToOIDCProviderTagOutputWithContext(context.Context) OIDCProviderTagOutput
}

// A key-value pair to associate with a resource.
type OIDCProviderTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (OIDCProviderTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OIDCProviderTag)(nil)).Elem()
}

func (i OIDCProviderTagArgs) ToOIDCProviderTagOutput() OIDCProviderTagOutput {
	return i.ToOIDCProviderTagOutputWithContext(context.Background())
}

func (i OIDCProviderTagArgs) ToOIDCProviderTagOutputWithContext(ctx context.Context) OIDCProviderTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OIDCProviderTagOutput)
}

// OIDCProviderTagArrayInput is an input type that accepts OIDCProviderTagArray and OIDCProviderTagArrayOutput values.
// You can construct a concrete instance of `OIDCProviderTagArrayInput` via:
//
//          OIDCProviderTagArray{ OIDCProviderTagArgs{...} }
type OIDCProviderTagArrayInput interface {
	pulumi.Input

	ToOIDCProviderTagArrayOutput() OIDCProviderTagArrayOutput
	ToOIDCProviderTagArrayOutputWithContext(context.Context) OIDCProviderTagArrayOutput
}

type OIDCProviderTagArray []OIDCProviderTagInput

func (OIDCProviderTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OIDCProviderTag)(nil)).Elem()
}

func (i OIDCProviderTagArray) ToOIDCProviderTagArrayOutput() OIDCProviderTagArrayOutput {
	return i.ToOIDCProviderTagArrayOutputWithContext(context.Background())
}

func (i OIDCProviderTagArray) ToOIDCProviderTagArrayOutputWithContext(ctx context.Context) OIDCProviderTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OIDCProviderTagArrayOutput)
}

// A key-value pair to associate with a resource.
type OIDCProviderTagOutput struct{ *pulumi.OutputState }

func (OIDCProviderTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OIDCProviderTag)(nil)).Elem()
}

func (o OIDCProviderTagOutput) ToOIDCProviderTagOutput() OIDCProviderTagOutput {
	return o
}

func (o OIDCProviderTagOutput) ToOIDCProviderTagOutputWithContext(ctx context.Context) OIDCProviderTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o OIDCProviderTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v OIDCProviderTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o OIDCProviderTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OIDCProviderTag) string { return v.Value }).(pulumi.StringOutput)
}

type OIDCProviderTagArrayOutput struct{ *pulumi.OutputState }

func (OIDCProviderTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OIDCProviderTag)(nil)).Elem()
}

func (o OIDCProviderTagArrayOutput) ToOIDCProviderTagArrayOutput() OIDCProviderTagArrayOutput {
	return o
}

func (o OIDCProviderTagArrayOutput) ToOIDCProviderTagArrayOutputWithContext(ctx context.Context) OIDCProviderTagArrayOutput {
	return o
}

func (o OIDCProviderTagArrayOutput) Index(i pulumi.IntInput) OIDCProviderTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OIDCProviderTag {
		return vs[0].([]OIDCProviderTag)[vs[1].(int)]
	}).(OIDCProviderTagOutput)
}

// The inline policy document that is embedded in the specified IAM role.
type RolePolicy struct {
	// The policy document.
	PolicyDocument string `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName string `pulumi:"policyName"`
}

// RolePolicyInput is an input type that accepts RolePolicyArgs and RolePolicyOutput values.
// You can construct a concrete instance of `RolePolicyInput` via:
//
//          RolePolicyArgs{...}
type RolePolicyInput interface {
	pulumi.Input

	ToRolePolicyOutput() RolePolicyOutput
	ToRolePolicyOutputWithContext(context.Context) RolePolicyOutput
}

// The inline policy document that is embedded in the specified IAM role.
type RolePolicyArgs struct {
	// The policy document.
	PolicyDocument pulumi.StringInput `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName pulumi.StringInput `pulumi:"policyName"`
}

func (RolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePolicy)(nil)).Elem()
}

func (i RolePolicyArgs) ToRolePolicyOutput() RolePolicyOutput {
	return i.ToRolePolicyOutputWithContext(context.Background())
}

func (i RolePolicyArgs) ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyOutput)
}

// RolePolicyArrayInput is an input type that accepts RolePolicyArray and RolePolicyArrayOutput values.
// You can construct a concrete instance of `RolePolicyArrayInput` via:
//
//          RolePolicyArray{ RolePolicyArgs{...} }
type RolePolicyArrayInput interface {
	pulumi.Input

	ToRolePolicyArrayOutput() RolePolicyArrayOutput
	ToRolePolicyArrayOutputWithContext(context.Context) RolePolicyArrayOutput
}

type RolePolicyArray []RolePolicyInput

func (RolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePolicy)(nil)).Elem()
}

func (i RolePolicyArray) ToRolePolicyArrayOutput() RolePolicyArrayOutput {
	return i.ToRolePolicyArrayOutputWithContext(context.Background())
}

func (i RolePolicyArray) ToRolePolicyArrayOutputWithContext(ctx context.Context) RolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyArrayOutput)
}

// The inline policy document that is embedded in the specified IAM role.
type RolePolicyOutput struct{ *pulumi.OutputState }

func (RolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePolicy)(nil)).Elem()
}

func (o RolePolicyOutput) ToRolePolicyOutput() RolePolicyOutput {
	return o
}

func (o RolePolicyOutput) ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput {
	return o
}

// The policy document.
func (o RolePolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v RolePolicy) string { return v.PolicyDocument }).(pulumi.StringOutput)
}

// The friendly name (not ARN) identifying the policy.
func (o RolePolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v RolePolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

type RolePolicyArrayOutput struct{ *pulumi.OutputState }

func (RolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePolicy)(nil)).Elem()
}

func (o RolePolicyArrayOutput) ToRolePolicyArrayOutput() RolePolicyArrayOutput {
	return o
}

func (o RolePolicyArrayOutput) ToRolePolicyArrayOutputWithContext(ctx context.Context) RolePolicyArrayOutput {
	return o
}

func (o RolePolicyArrayOutput) Index(i pulumi.IntInput) RolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePolicy {
		return vs[0].([]RolePolicy)[vs[1].(int)]
	}).(RolePolicyOutput)
}

// A key-value pair to associate with a resource.
type RoleTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// RoleTagInput is an input type that accepts RoleTagArgs and RoleTagOutput values.
// You can construct a concrete instance of `RoleTagInput` via:
//
//          RoleTagArgs{...}
type RoleTagInput interface {
	pulumi.Input

	ToRoleTagOutput() RoleTagOutput
	ToRoleTagOutputWithContext(context.Context) RoleTagOutput
}

// A key-value pair to associate with a resource.
type RoleTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RoleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (i RoleTagArgs) ToRoleTagOutput() RoleTagOutput {
	return i.ToRoleTagOutputWithContext(context.Background())
}

func (i RoleTagArgs) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagOutput)
}

// RoleTagArrayInput is an input type that accepts RoleTagArray and RoleTagArrayOutput values.
// You can construct a concrete instance of `RoleTagArrayInput` via:
//
//          RoleTagArray{ RoleTagArgs{...} }
type RoleTagArrayInput interface {
	pulumi.Input

	ToRoleTagArrayOutput() RoleTagArrayOutput
	ToRoleTagArrayOutputWithContext(context.Context) RoleTagArrayOutput
}

type RoleTagArray []RoleTagInput

func (RoleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (i RoleTagArray) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return i.ToRoleTagArrayOutputWithContext(context.Background())
}

func (i RoleTagArray) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagArrayOutput)
}

// A key-value pair to associate with a resource.
type RoleTagOutput struct{ *pulumi.OutputState }

func (RoleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (o RoleTagOutput) ToRoleTagOutput() RoleTagOutput {
	return o
}

func (o RoleTagOutput) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RoleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RoleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Value }).(pulumi.StringOutput)
}

type RoleTagArrayOutput struct{ *pulumi.OutputState }

func (RoleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) Index(i pulumi.IntInput) RoleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleTag {
		return vs[0].([]RoleTag)[vs[1].(int)]
	}).(RoleTagOutput)
}

// A key-value pair to associate with a resource.
type SAMLProviderTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// SAMLProviderTagInput is an input type that accepts SAMLProviderTagArgs and SAMLProviderTagOutput values.
// You can construct a concrete instance of `SAMLProviderTagInput` via:
//
//          SAMLProviderTagArgs{...}
type SAMLProviderTagInput interface {
	pulumi.Input

	ToSAMLProviderTagOutput() SAMLProviderTagOutput
	ToSAMLProviderTagOutputWithContext(context.Context) SAMLProviderTagOutput
}

// A key-value pair to associate with a resource.
type SAMLProviderTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SAMLProviderTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SAMLProviderTag)(nil)).Elem()
}

func (i SAMLProviderTagArgs) ToSAMLProviderTagOutput() SAMLProviderTagOutput {
	return i.ToSAMLProviderTagOutputWithContext(context.Background())
}

func (i SAMLProviderTagArgs) ToSAMLProviderTagOutputWithContext(ctx context.Context) SAMLProviderTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SAMLProviderTagOutput)
}

// SAMLProviderTagArrayInput is an input type that accepts SAMLProviderTagArray and SAMLProviderTagArrayOutput values.
// You can construct a concrete instance of `SAMLProviderTagArrayInput` via:
//
//          SAMLProviderTagArray{ SAMLProviderTagArgs{...} }
type SAMLProviderTagArrayInput interface {
	pulumi.Input

	ToSAMLProviderTagArrayOutput() SAMLProviderTagArrayOutput
	ToSAMLProviderTagArrayOutputWithContext(context.Context) SAMLProviderTagArrayOutput
}

type SAMLProviderTagArray []SAMLProviderTagInput

func (SAMLProviderTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAMLProviderTag)(nil)).Elem()
}

func (i SAMLProviderTagArray) ToSAMLProviderTagArrayOutput() SAMLProviderTagArrayOutput {
	return i.ToSAMLProviderTagArrayOutputWithContext(context.Background())
}

func (i SAMLProviderTagArray) ToSAMLProviderTagArrayOutputWithContext(ctx context.Context) SAMLProviderTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SAMLProviderTagArrayOutput)
}

// A key-value pair to associate with a resource.
type SAMLProviderTagOutput struct{ *pulumi.OutputState }

func (SAMLProviderTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAMLProviderTag)(nil)).Elem()
}

func (o SAMLProviderTagOutput) ToSAMLProviderTagOutput() SAMLProviderTagOutput {
	return o
}

func (o SAMLProviderTagOutput) ToSAMLProviderTagOutputWithContext(ctx context.Context) SAMLProviderTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SAMLProviderTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SAMLProviderTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SAMLProviderTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SAMLProviderTag) string { return v.Value }).(pulumi.StringOutput)
}

type SAMLProviderTagArrayOutput struct{ *pulumi.OutputState }

func (SAMLProviderTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAMLProviderTag)(nil)).Elem()
}

func (o SAMLProviderTagArrayOutput) ToSAMLProviderTagArrayOutput() SAMLProviderTagArrayOutput {
	return o
}

func (o SAMLProviderTagArrayOutput) ToSAMLProviderTagArrayOutputWithContext(ctx context.Context) SAMLProviderTagArrayOutput {
	return o
}

func (o SAMLProviderTagArrayOutput) Index(i pulumi.IntInput) SAMLProviderTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAMLProviderTag {
		return vs[0].([]SAMLProviderTag)[vs[1].(int)]
	}).(SAMLProviderTagOutput)
}

// A key-value pair to associate with a resource.
type ServerCertificateTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ServerCertificateTagInput is an input type that accepts ServerCertificateTagArgs and ServerCertificateTagOutput values.
// You can construct a concrete instance of `ServerCertificateTagInput` via:
//
//          ServerCertificateTagArgs{...}
type ServerCertificateTagInput interface {
	pulumi.Input

	ToServerCertificateTagOutput() ServerCertificateTagOutput
	ToServerCertificateTagOutputWithContext(context.Context) ServerCertificateTagOutput
}

// A key-value pair to associate with a resource.
type ServerCertificateTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServerCertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateTag)(nil)).Elem()
}

func (i ServerCertificateTagArgs) ToServerCertificateTagOutput() ServerCertificateTagOutput {
	return i.ToServerCertificateTagOutputWithContext(context.Background())
}

func (i ServerCertificateTagArgs) ToServerCertificateTagOutputWithContext(ctx context.Context) ServerCertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateTagOutput)
}

// ServerCertificateTagArrayInput is an input type that accepts ServerCertificateTagArray and ServerCertificateTagArrayOutput values.
// You can construct a concrete instance of `ServerCertificateTagArrayInput` via:
//
//          ServerCertificateTagArray{ ServerCertificateTagArgs{...} }
type ServerCertificateTagArrayInput interface {
	pulumi.Input

	ToServerCertificateTagArrayOutput() ServerCertificateTagArrayOutput
	ToServerCertificateTagArrayOutputWithContext(context.Context) ServerCertificateTagArrayOutput
}

type ServerCertificateTagArray []ServerCertificateTagInput

func (ServerCertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateTag)(nil)).Elem()
}

func (i ServerCertificateTagArray) ToServerCertificateTagArrayOutput() ServerCertificateTagArrayOutput {
	return i.ToServerCertificateTagArrayOutputWithContext(context.Background())
}

func (i ServerCertificateTagArray) ToServerCertificateTagArrayOutputWithContext(ctx context.Context) ServerCertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ServerCertificateTagOutput struct{ *pulumi.OutputState }

func (ServerCertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateTag)(nil)).Elem()
}

func (o ServerCertificateTagOutput) ToServerCertificateTagOutput() ServerCertificateTagOutput {
	return o
}

func (o ServerCertificateTagOutput) ToServerCertificateTagOutputWithContext(ctx context.Context) ServerCertificateTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ServerCertificateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ServerCertificateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServerCertificateTagArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateTag)(nil)).Elem()
}

func (o ServerCertificateTagArrayOutput) ToServerCertificateTagArrayOutput() ServerCertificateTagArrayOutput {
	return o
}

func (o ServerCertificateTagArrayOutput) ToServerCertificateTagArrayOutputWithContext(ctx context.Context) ServerCertificateTagArrayOutput {
	return o
}

func (o ServerCertificateTagArrayOutput) Index(i pulumi.IntInput) ServerCertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerCertificateTag {
		return vs[0].([]ServerCertificateTag)[vs[1].(int)]
	}).(ServerCertificateTagOutput)
}

type UserLoginProfile struct {
	Password              string `pulumi:"password"`
	PasswordResetRequired *bool  `pulumi:"passwordResetRequired"`
}

// UserLoginProfileInput is an input type that accepts UserLoginProfileArgs and UserLoginProfileOutput values.
// You can construct a concrete instance of `UserLoginProfileInput` via:
//
//          UserLoginProfileArgs{...}
type UserLoginProfileInput interface {
	pulumi.Input

	ToUserLoginProfileOutput() UserLoginProfileOutput
	ToUserLoginProfileOutputWithContext(context.Context) UserLoginProfileOutput
}

type UserLoginProfileArgs struct {
	Password              pulumi.StringInput  `pulumi:"password"`
	PasswordResetRequired pulumi.BoolPtrInput `pulumi:"passwordResetRequired"`
}

func (UserLoginProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLoginProfile)(nil)).Elem()
}

func (i UserLoginProfileArgs) ToUserLoginProfileOutput() UserLoginProfileOutput {
	return i.ToUserLoginProfileOutputWithContext(context.Background())
}

func (i UserLoginProfileArgs) ToUserLoginProfileOutputWithContext(ctx context.Context) UserLoginProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfileOutput)
}

func (i UserLoginProfileArgs) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return i.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (i UserLoginProfileArgs) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfileOutput).ToUserLoginProfilePtrOutputWithContext(ctx)
}

// UserLoginProfilePtrInput is an input type that accepts UserLoginProfileArgs, UserLoginProfilePtr and UserLoginProfilePtrOutput values.
// You can construct a concrete instance of `UserLoginProfilePtrInput` via:
//
//          UserLoginProfileArgs{...}
//
//  or:
//
//          nil
type UserLoginProfilePtrInput interface {
	pulumi.Input

	ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput
	ToUserLoginProfilePtrOutputWithContext(context.Context) UserLoginProfilePtrOutput
}

type userLoginProfilePtrType UserLoginProfileArgs

func UserLoginProfilePtr(v *UserLoginProfileArgs) UserLoginProfilePtrInput {
	return (*userLoginProfilePtrType)(v)
}

func (*userLoginProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserLoginProfile)(nil)).Elem()
}

func (i *userLoginProfilePtrType) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return i.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (i *userLoginProfilePtrType) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfilePtrOutput)
}

type UserLoginProfileOutput struct{ *pulumi.OutputState }

func (UserLoginProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLoginProfile)(nil)).Elem()
}

func (o UserLoginProfileOutput) ToUserLoginProfileOutput() UserLoginProfileOutput {
	return o
}

func (o UserLoginProfileOutput) ToUserLoginProfileOutputWithContext(ctx context.Context) UserLoginProfileOutput {
	return o
}

func (o UserLoginProfileOutput) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return o.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (o UserLoginProfileOutput) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserLoginProfile) *UserLoginProfile {
		return &v
	}).(UserLoginProfilePtrOutput)
}

func (o UserLoginProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserLoginProfile) string { return v.Password }).(pulumi.StringOutput)
}

func (o UserLoginProfileOutput) PasswordResetRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *bool { return v.PasswordResetRequired }).(pulumi.BoolPtrOutput)
}

type UserLoginProfilePtrOutput struct{ *pulumi.OutputState }

func (UserLoginProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserLoginProfile)(nil)).Elem()
}

func (o UserLoginProfilePtrOutput) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return o
}

func (o UserLoginProfilePtrOutput) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return o
}

func (o UserLoginProfilePtrOutput) Elem() UserLoginProfileOutput {
	return o.ApplyT(func(v *UserLoginProfile) UserLoginProfile {
		if v != nil {
			return *v
		}
		var ret UserLoginProfile
		return ret
	}).(UserLoginProfileOutput)
}

func (o UserLoginProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

func (o UserLoginProfilePtrOutput) PasswordResetRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *bool {
		if v == nil {
			return nil
		}
		return v.PasswordResetRequired
	}).(pulumi.BoolPtrOutput)
}

type UserPolicy struct {
	PolicyDocument interface{} `pulumi:"policyDocument"`
	PolicyName     string      `pulumi:"policyName"`
}

// UserPolicyInput is an input type that accepts UserPolicyArgs and UserPolicyOutput values.
// You can construct a concrete instance of `UserPolicyInput` via:
//
//          UserPolicyArgs{...}
type UserPolicyInput interface {
	pulumi.Input

	ToUserPolicyOutput() UserPolicyOutput
	ToUserPolicyOutputWithContext(context.Context) UserPolicyOutput
}

type UserPolicyArgs struct {
	PolicyDocument pulumi.Input       `pulumi:"policyDocument"`
	PolicyName     pulumi.StringInput `pulumi:"policyName"`
}

func (UserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicy)(nil)).Elem()
}

func (i UserPolicyArgs) ToUserPolicyOutput() UserPolicyOutput {
	return i.ToUserPolicyOutputWithContext(context.Background())
}

func (i UserPolicyArgs) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyOutput)
}

// UserPolicyArrayInput is an input type that accepts UserPolicyArray and UserPolicyArrayOutput values.
// You can construct a concrete instance of `UserPolicyArrayInput` via:
//
//          UserPolicyArray{ UserPolicyArgs{...} }
type UserPolicyArrayInput interface {
	pulumi.Input

	ToUserPolicyArrayOutput() UserPolicyArrayOutput
	ToUserPolicyArrayOutputWithContext(context.Context) UserPolicyArrayOutput
}

type UserPolicyArray []UserPolicyInput

func (UserPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicy)(nil)).Elem()
}

func (i UserPolicyArray) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return i.ToUserPolicyArrayOutputWithContext(context.Background())
}

func (i UserPolicyArray) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyArrayOutput)
}

type UserPolicyOutput struct{ *pulumi.OutputState }

func (UserPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicy)(nil)).Elem()
}

func (o UserPolicyOutput) ToUserPolicyOutput() UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v UserPolicy) interface{} { return v.PolicyDocument }).(pulumi.AnyOutput)
}

func (o UserPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v UserPolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

type UserPolicyArrayOutput struct{ *pulumi.OutputState }

func (UserPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicy)(nil)).Elem()
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) Index(i pulumi.IntInput) UserPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPolicy {
		return vs[0].([]UserPolicy)[vs[1].(int)]
	}).(UserPolicyOutput)
}

type UserTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// UserTagInput is an input type that accepts UserTagArgs and UserTagOutput values.
// You can construct a concrete instance of `UserTagInput` via:
//
//          UserTagArgs{...}
type UserTagInput interface {
	pulumi.Input

	ToUserTagOutput() UserTagOutput
	ToUserTagOutputWithContext(context.Context) UserTagOutput
}

type UserTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (UserTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (i UserTagArgs) ToUserTagOutput() UserTagOutput {
	return i.ToUserTagOutputWithContext(context.Background())
}

func (i UserTagArgs) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagOutput)
}

// UserTagArrayInput is an input type that accepts UserTagArray and UserTagArrayOutput values.
// You can construct a concrete instance of `UserTagArrayInput` via:
//
//          UserTagArray{ UserTagArgs{...} }
type UserTagArrayInput interface {
	pulumi.Input

	ToUserTagArrayOutput() UserTagArrayOutput
	ToUserTagArrayOutputWithContext(context.Context) UserTagArrayOutput
}

type UserTagArray []UserTagInput

func (UserTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (i UserTagArray) ToUserTagArrayOutput() UserTagArrayOutput {
	return i.ToUserTagArrayOutputWithContext(context.Background())
}

func (i UserTagArray) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagArrayOutput)
}

type UserTagOutput struct{ *pulumi.OutputState }

func (UserTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (o UserTagOutput) ToUserTagOutput() UserTagOutput {
	return o
}

func (o UserTagOutput) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return o
}

func (o UserTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o UserTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Value }).(pulumi.StringOutput)
}

type UserTagArrayOutput struct{ *pulumi.OutputState }

func (UserTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (o UserTagArrayOutput) ToUserTagArrayOutput() UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) Index(i pulumi.IntInput) UserTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserTag {
		return vs[0].([]UserTag)[vs[1].(int)]
	}).(UserTagOutput)
}

// A key-value pair to associate with a resource.
type VirtualMFADeviceTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// VirtualMFADeviceTagInput is an input type that accepts VirtualMFADeviceTagArgs and VirtualMFADeviceTagOutput values.
// You can construct a concrete instance of `VirtualMFADeviceTagInput` via:
//
//          VirtualMFADeviceTagArgs{...}
type VirtualMFADeviceTagInput interface {
	pulumi.Input

	ToVirtualMFADeviceTagOutput() VirtualMFADeviceTagOutput
	ToVirtualMFADeviceTagOutputWithContext(context.Context) VirtualMFADeviceTagOutput
}

// A key-value pair to associate with a resource.
type VirtualMFADeviceTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (VirtualMFADeviceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMFADeviceTag)(nil)).Elem()
}

func (i VirtualMFADeviceTagArgs) ToVirtualMFADeviceTagOutput() VirtualMFADeviceTagOutput {
	return i.ToVirtualMFADeviceTagOutputWithContext(context.Background())
}

func (i VirtualMFADeviceTagArgs) ToVirtualMFADeviceTagOutputWithContext(ctx context.Context) VirtualMFADeviceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMFADeviceTagOutput)
}

// VirtualMFADeviceTagArrayInput is an input type that accepts VirtualMFADeviceTagArray and VirtualMFADeviceTagArrayOutput values.
// You can construct a concrete instance of `VirtualMFADeviceTagArrayInput` via:
//
//          VirtualMFADeviceTagArray{ VirtualMFADeviceTagArgs{...} }
type VirtualMFADeviceTagArrayInput interface {
	pulumi.Input

	ToVirtualMFADeviceTagArrayOutput() VirtualMFADeviceTagArrayOutput
	ToVirtualMFADeviceTagArrayOutputWithContext(context.Context) VirtualMFADeviceTagArrayOutput
}

type VirtualMFADeviceTagArray []VirtualMFADeviceTagInput

func (VirtualMFADeviceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMFADeviceTag)(nil)).Elem()
}

func (i VirtualMFADeviceTagArray) ToVirtualMFADeviceTagArrayOutput() VirtualMFADeviceTagArrayOutput {
	return i.ToVirtualMFADeviceTagArrayOutputWithContext(context.Background())
}

func (i VirtualMFADeviceTagArray) ToVirtualMFADeviceTagArrayOutputWithContext(ctx context.Context) VirtualMFADeviceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMFADeviceTagArrayOutput)
}

// A key-value pair to associate with a resource.
type VirtualMFADeviceTagOutput struct{ *pulumi.OutputState }

func (VirtualMFADeviceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMFADeviceTag)(nil)).Elem()
}

func (o VirtualMFADeviceTagOutput) ToVirtualMFADeviceTagOutput() VirtualMFADeviceTagOutput {
	return o
}

func (o VirtualMFADeviceTagOutput) ToVirtualMFADeviceTagOutputWithContext(ctx context.Context) VirtualMFADeviceTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o VirtualMFADeviceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMFADeviceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o VirtualMFADeviceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMFADeviceTag) string { return v.Value }).(pulumi.StringOutput)
}

type VirtualMFADeviceTagArrayOutput struct{ *pulumi.OutputState }

func (VirtualMFADeviceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMFADeviceTag)(nil)).Elem()
}

func (o VirtualMFADeviceTagArrayOutput) ToVirtualMFADeviceTagArrayOutput() VirtualMFADeviceTagArrayOutput {
	return o
}

func (o VirtualMFADeviceTagArrayOutput) ToVirtualMFADeviceTagArrayOutputWithContext(ctx context.Context) VirtualMFADeviceTagArrayOutput {
	return o
}

func (o VirtualMFADeviceTagArrayOutput) Index(i pulumi.IntInput) VirtualMFADeviceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMFADeviceTag {
		return vs[0].([]VirtualMFADeviceTag)[vs[1].(int)]
	}).(VirtualMFADeviceTagOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupPolicyOutput{})
	pulumi.RegisterOutputType(GroupPolicyArrayOutput{})
	pulumi.RegisterOutputType(OIDCProviderTagOutput{})
	pulumi.RegisterOutputType(OIDCProviderTagArrayOutput{})
	pulumi.RegisterOutputType(RolePolicyOutput{})
	pulumi.RegisterOutputType(RolePolicyArrayOutput{})
	pulumi.RegisterOutputType(RoleTagOutput{})
	pulumi.RegisterOutputType(RoleTagArrayOutput{})
	pulumi.RegisterOutputType(SAMLProviderTagOutput{})
	pulumi.RegisterOutputType(SAMLProviderTagArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateTagOutput{})
	pulumi.RegisterOutputType(ServerCertificateTagArrayOutput{})
	pulumi.RegisterOutputType(UserLoginProfileOutput{})
	pulumi.RegisterOutputType(UserLoginProfilePtrOutput{})
	pulumi.RegisterOutputType(UserPolicyOutput{})
	pulumi.RegisterOutputType(UserPolicyArrayOutput{})
	pulumi.RegisterOutputType(UserTagOutput{})
	pulumi.RegisterOutputType(UserTagArrayOutput{})
	pulumi.RegisterOutputType(VirtualMFADeviceTagOutput{})
	pulumi.RegisterOutputType(VirtualMFADeviceTagArrayOutput{})
}
