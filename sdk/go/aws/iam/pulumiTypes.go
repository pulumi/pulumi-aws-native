// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GroupPolicyType struct {
	// The policy document.
	PolicyDocument string `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName string `pulumi:"policyName"`
}

// GroupPolicyTypeInput is an input type that accepts GroupPolicyTypeArgs and GroupPolicyTypeOutput values.
// You can construct a concrete instance of `GroupPolicyTypeInput` via:
//
//	GroupPolicyTypeArgs{...}
type GroupPolicyTypeInput interface {
	pulumi.Input

	ToGroupPolicyTypeOutput() GroupPolicyTypeOutput
	ToGroupPolicyTypeOutputWithContext(context.Context) GroupPolicyTypeOutput
}

type GroupPolicyTypeArgs struct {
	// The policy document.
	PolicyDocument pulumi.StringInput `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName pulumi.StringInput `pulumi:"policyName"`
}

func (GroupPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyType)(nil)).Elem()
}

func (i GroupPolicyTypeArgs) ToGroupPolicyTypeOutput() GroupPolicyTypeOutput {
	return i.ToGroupPolicyTypeOutputWithContext(context.Background())
}

func (i GroupPolicyTypeArgs) ToGroupPolicyTypeOutputWithContext(ctx context.Context) GroupPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyTypeOutput)
}

// GroupPolicyTypeArrayInput is an input type that accepts GroupPolicyTypeArray and GroupPolicyTypeArrayOutput values.
// You can construct a concrete instance of `GroupPolicyTypeArrayInput` via:
//
//	GroupPolicyTypeArray{ GroupPolicyTypeArgs{...} }
type GroupPolicyTypeArrayInput interface {
	pulumi.Input

	ToGroupPolicyTypeArrayOutput() GroupPolicyTypeArrayOutput
	ToGroupPolicyTypeArrayOutputWithContext(context.Context) GroupPolicyTypeArrayOutput
}

type GroupPolicyTypeArray []GroupPolicyTypeInput

func (GroupPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPolicyType)(nil)).Elem()
}

func (i GroupPolicyTypeArray) ToGroupPolicyTypeArrayOutput() GroupPolicyTypeArrayOutput {
	return i.ToGroupPolicyTypeArrayOutputWithContext(context.Background())
}

func (i GroupPolicyTypeArray) ToGroupPolicyTypeArrayOutputWithContext(ctx context.Context) GroupPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyTypeArrayOutput)
}

type GroupPolicyTypeOutput struct{ *pulumi.OutputState }

func (GroupPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyType)(nil)).Elem()
}

func (o GroupPolicyTypeOutput) ToGroupPolicyTypeOutput() GroupPolicyTypeOutput {
	return o
}

func (o GroupPolicyTypeOutput) ToGroupPolicyTypeOutputWithContext(ctx context.Context) GroupPolicyTypeOutput {
	return o
}

// The policy document.
func (o GroupPolicyTypeOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicyType) string { return v.PolicyDocument }).(pulumi.StringOutput)
}

// The friendly name (not ARN) identifying the policy.
func (o GroupPolicyTypeOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicyType) string { return v.PolicyName }).(pulumi.StringOutput)
}

type GroupPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPolicyType)(nil)).Elem()
}

func (o GroupPolicyTypeArrayOutput) ToGroupPolicyTypeArrayOutput() GroupPolicyTypeArrayOutput {
	return o
}

func (o GroupPolicyTypeArrayOutput) ToGroupPolicyTypeArrayOutputWithContext(ctx context.Context) GroupPolicyTypeArrayOutput {
	return o
}

func (o GroupPolicyTypeArrayOutput) Index(i pulumi.IntInput) GroupPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupPolicyType {
		return vs[0].([]GroupPolicyType)[vs[1].(int)]
	}).(GroupPolicyTypeOutput)
}

// A key-value pair to associate with a resource.
type OidcProviderTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// OidcProviderTagInput is an input type that accepts OidcProviderTagArgs and OidcProviderTagOutput values.
// You can construct a concrete instance of `OidcProviderTagInput` via:
//
//	OidcProviderTagArgs{...}
type OidcProviderTagInput interface {
	pulumi.Input

	ToOidcProviderTagOutput() OidcProviderTagOutput
	ToOidcProviderTagOutputWithContext(context.Context) OidcProviderTagOutput
}

// A key-value pair to associate with a resource.
type OidcProviderTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (OidcProviderTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcProviderTag)(nil)).Elem()
}

func (i OidcProviderTagArgs) ToOidcProviderTagOutput() OidcProviderTagOutput {
	return i.ToOidcProviderTagOutputWithContext(context.Background())
}

func (i OidcProviderTagArgs) ToOidcProviderTagOutputWithContext(ctx context.Context) OidcProviderTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcProviderTagOutput)
}

// OidcProviderTagArrayInput is an input type that accepts OidcProviderTagArray and OidcProviderTagArrayOutput values.
// You can construct a concrete instance of `OidcProviderTagArrayInput` via:
//
//	OidcProviderTagArray{ OidcProviderTagArgs{...} }
type OidcProviderTagArrayInput interface {
	pulumi.Input

	ToOidcProviderTagArrayOutput() OidcProviderTagArrayOutput
	ToOidcProviderTagArrayOutputWithContext(context.Context) OidcProviderTagArrayOutput
}

type OidcProviderTagArray []OidcProviderTagInput

func (OidcProviderTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OidcProviderTag)(nil)).Elem()
}

func (i OidcProviderTagArray) ToOidcProviderTagArrayOutput() OidcProviderTagArrayOutput {
	return i.ToOidcProviderTagArrayOutputWithContext(context.Background())
}

func (i OidcProviderTagArray) ToOidcProviderTagArrayOutputWithContext(ctx context.Context) OidcProviderTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcProviderTagArrayOutput)
}

// A key-value pair to associate with a resource.
type OidcProviderTagOutput struct{ *pulumi.OutputState }

func (OidcProviderTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcProviderTag)(nil)).Elem()
}

func (o OidcProviderTagOutput) ToOidcProviderTagOutput() OidcProviderTagOutput {
	return o
}

func (o OidcProviderTagOutput) ToOidcProviderTagOutputWithContext(ctx context.Context) OidcProviderTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o OidcProviderTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v OidcProviderTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o OidcProviderTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OidcProviderTag) string { return v.Value }).(pulumi.StringOutput)
}

type OidcProviderTagArrayOutput struct{ *pulumi.OutputState }

func (OidcProviderTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OidcProviderTag)(nil)).Elem()
}

func (o OidcProviderTagArrayOutput) ToOidcProviderTagArrayOutput() OidcProviderTagArrayOutput {
	return o
}

func (o OidcProviderTagArrayOutput) ToOidcProviderTagArrayOutputWithContext(ctx context.Context) OidcProviderTagArrayOutput {
	return o
}

func (o OidcProviderTagArrayOutput) Index(i pulumi.IntInput) OidcProviderTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OidcProviderTag {
		return vs[0].([]OidcProviderTag)[vs[1].(int)]
	}).(OidcProviderTagOutput)
}

// The inline policy document that is embedded in the specified IAM role.
type RolePolicyType struct {
	// The policy document.
	PolicyDocument string `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName string `pulumi:"policyName"`
}

// RolePolicyTypeInput is an input type that accepts RolePolicyTypeArgs and RolePolicyTypeOutput values.
// You can construct a concrete instance of `RolePolicyTypeInput` via:
//
//	RolePolicyTypeArgs{...}
type RolePolicyTypeInput interface {
	pulumi.Input

	ToRolePolicyTypeOutput() RolePolicyTypeOutput
	ToRolePolicyTypeOutputWithContext(context.Context) RolePolicyTypeOutput
}

// The inline policy document that is embedded in the specified IAM role.
type RolePolicyTypeArgs struct {
	// The policy document.
	PolicyDocument pulumi.StringInput `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName pulumi.StringInput `pulumi:"policyName"`
}

func (RolePolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePolicyType)(nil)).Elem()
}

func (i RolePolicyTypeArgs) ToRolePolicyTypeOutput() RolePolicyTypeOutput {
	return i.ToRolePolicyTypeOutputWithContext(context.Background())
}

func (i RolePolicyTypeArgs) ToRolePolicyTypeOutputWithContext(ctx context.Context) RolePolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyTypeOutput)
}

// RolePolicyTypeArrayInput is an input type that accepts RolePolicyTypeArray and RolePolicyTypeArrayOutput values.
// You can construct a concrete instance of `RolePolicyTypeArrayInput` via:
//
//	RolePolicyTypeArray{ RolePolicyTypeArgs{...} }
type RolePolicyTypeArrayInput interface {
	pulumi.Input

	ToRolePolicyTypeArrayOutput() RolePolicyTypeArrayOutput
	ToRolePolicyTypeArrayOutputWithContext(context.Context) RolePolicyTypeArrayOutput
}

type RolePolicyTypeArray []RolePolicyTypeInput

func (RolePolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePolicyType)(nil)).Elem()
}

func (i RolePolicyTypeArray) ToRolePolicyTypeArrayOutput() RolePolicyTypeArrayOutput {
	return i.ToRolePolicyTypeArrayOutputWithContext(context.Background())
}

func (i RolePolicyTypeArray) ToRolePolicyTypeArrayOutputWithContext(ctx context.Context) RolePolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyTypeArrayOutput)
}

// The inline policy document that is embedded in the specified IAM role.
type RolePolicyTypeOutput struct{ *pulumi.OutputState }

func (RolePolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePolicyType)(nil)).Elem()
}

func (o RolePolicyTypeOutput) ToRolePolicyTypeOutput() RolePolicyTypeOutput {
	return o
}

func (o RolePolicyTypeOutput) ToRolePolicyTypeOutputWithContext(ctx context.Context) RolePolicyTypeOutput {
	return o
}

// The policy document.
func (o RolePolicyTypeOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v RolePolicyType) string { return v.PolicyDocument }).(pulumi.StringOutput)
}

// The friendly name (not ARN) identifying the policy.
func (o RolePolicyTypeOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v RolePolicyType) string { return v.PolicyName }).(pulumi.StringOutput)
}

type RolePolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (RolePolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePolicyType)(nil)).Elem()
}

func (o RolePolicyTypeArrayOutput) ToRolePolicyTypeArrayOutput() RolePolicyTypeArrayOutput {
	return o
}

func (o RolePolicyTypeArrayOutput) ToRolePolicyTypeArrayOutputWithContext(ctx context.Context) RolePolicyTypeArrayOutput {
	return o
}

func (o RolePolicyTypeArrayOutput) Index(i pulumi.IntInput) RolePolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePolicyType {
		return vs[0].([]RolePolicyType)[vs[1].(int)]
	}).(RolePolicyTypeOutput)
}

// A key-value pair to associate with a resource.
type RoleTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// RoleTagInput is an input type that accepts RoleTagArgs and RoleTagOutput values.
// You can construct a concrete instance of `RoleTagInput` via:
//
//	RoleTagArgs{...}
type RoleTagInput interface {
	pulumi.Input

	ToRoleTagOutput() RoleTagOutput
	ToRoleTagOutputWithContext(context.Context) RoleTagOutput
}

// A key-value pair to associate with a resource.
type RoleTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RoleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (i RoleTagArgs) ToRoleTagOutput() RoleTagOutput {
	return i.ToRoleTagOutputWithContext(context.Background())
}

func (i RoleTagArgs) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagOutput)
}

// RoleTagArrayInput is an input type that accepts RoleTagArray and RoleTagArrayOutput values.
// You can construct a concrete instance of `RoleTagArrayInput` via:
//
//	RoleTagArray{ RoleTagArgs{...} }
type RoleTagArrayInput interface {
	pulumi.Input

	ToRoleTagArrayOutput() RoleTagArrayOutput
	ToRoleTagArrayOutputWithContext(context.Context) RoleTagArrayOutput
}

type RoleTagArray []RoleTagInput

func (RoleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (i RoleTagArray) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return i.ToRoleTagArrayOutputWithContext(context.Background())
}

func (i RoleTagArray) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagArrayOutput)
}

// A key-value pair to associate with a resource.
type RoleTagOutput struct{ *pulumi.OutputState }

func (RoleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (o RoleTagOutput) ToRoleTagOutput() RoleTagOutput {
	return o
}

func (o RoleTagOutput) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RoleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RoleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RoleTag) string { return v.Value }).(pulumi.StringOutput)
}

type RoleTagArrayOutput struct{ *pulumi.OutputState }

func (RoleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) Index(i pulumi.IntInput) RoleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleTag {
		return vs[0].([]RoleTag)[vs[1].(int)]
	}).(RoleTagOutput)
}

// A key-value pair to associate with a resource.
type SamlProviderTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// SamlProviderTagInput is an input type that accepts SamlProviderTagArgs and SamlProviderTagOutput values.
// You can construct a concrete instance of `SamlProviderTagInput` via:
//
//	SamlProviderTagArgs{...}
type SamlProviderTagInput interface {
	pulumi.Input

	ToSamlProviderTagOutput() SamlProviderTagOutput
	ToSamlProviderTagOutputWithContext(context.Context) SamlProviderTagOutput
}

// A key-value pair to associate with a resource.
type SamlProviderTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SamlProviderTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlProviderTag)(nil)).Elem()
}

func (i SamlProviderTagArgs) ToSamlProviderTagOutput() SamlProviderTagOutput {
	return i.ToSamlProviderTagOutputWithContext(context.Background())
}

func (i SamlProviderTagArgs) ToSamlProviderTagOutputWithContext(ctx context.Context) SamlProviderTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlProviderTagOutput)
}

// SamlProviderTagArrayInput is an input type that accepts SamlProviderTagArray and SamlProviderTagArrayOutput values.
// You can construct a concrete instance of `SamlProviderTagArrayInput` via:
//
//	SamlProviderTagArray{ SamlProviderTagArgs{...} }
type SamlProviderTagArrayInput interface {
	pulumi.Input

	ToSamlProviderTagArrayOutput() SamlProviderTagArrayOutput
	ToSamlProviderTagArrayOutputWithContext(context.Context) SamlProviderTagArrayOutput
}

type SamlProviderTagArray []SamlProviderTagInput

func (SamlProviderTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlProviderTag)(nil)).Elem()
}

func (i SamlProviderTagArray) ToSamlProviderTagArrayOutput() SamlProviderTagArrayOutput {
	return i.ToSamlProviderTagArrayOutputWithContext(context.Background())
}

func (i SamlProviderTagArray) ToSamlProviderTagArrayOutputWithContext(ctx context.Context) SamlProviderTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlProviderTagArrayOutput)
}

// A key-value pair to associate with a resource.
type SamlProviderTagOutput struct{ *pulumi.OutputState }

func (SamlProviderTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlProviderTag)(nil)).Elem()
}

func (o SamlProviderTagOutput) ToSamlProviderTagOutput() SamlProviderTagOutput {
	return o
}

func (o SamlProviderTagOutput) ToSamlProviderTagOutputWithContext(ctx context.Context) SamlProviderTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SamlProviderTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SamlProviderTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SamlProviderTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SamlProviderTag) string { return v.Value }).(pulumi.StringOutput)
}

type SamlProviderTagArrayOutput struct{ *pulumi.OutputState }

func (SamlProviderTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlProviderTag)(nil)).Elem()
}

func (o SamlProviderTagArrayOutput) ToSamlProviderTagArrayOutput() SamlProviderTagArrayOutput {
	return o
}

func (o SamlProviderTagArrayOutput) ToSamlProviderTagArrayOutputWithContext(ctx context.Context) SamlProviderTagArrayOutput {
	return o
}

func (o SamlProviderTagArrayOutput) Index(i pulumi.IntInput) SamlProviderTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamlProviderTag {
		return vs[0].([]SamlProviderTag)[vs[1].(int)]
	}).(SamlProviderTagOutput)
}

// A key-value pair to associate with a resource.
type ServerCertificateTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ServerCertificateTagInput is an input type that accepts ServerCertificateTagArgs and ServerCertificateTagOutput values.
// You can construct a concrete instance of `ServerCertificateTagInput` via:
//
//	ServerCertificateTagArgs{...}
type ServerCertificateTagInput interface {
	pulumi.Input

	ToServerCertificateTagOutput() ServerCertificateTagOutput
	ToServerCertificateTagOutputWithContext(context.Context) ServerCertificateTagOutput
}

// A key-value pair to associate with a resource.
type ServerCertificateTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServerCertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateTag)(nil)).Elem()
}

func (i ServerCertificateTagArgs) ToServerCertificateTagOutput() ServerCertificateTagOutput {
	return i.ToServerCertificateTagOutputWithContext(context.Background())
}

func (i ServerCertificateTagArgs) ToServerCertificateTagOutputWithContext(ctx context.Context) ServerCertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateTagOutput)
}

// ServerCertificateTagArrayInput is an input type that accepts ServerCertificateTagArray and ServerCertificateTagArrayOutput values.
// You can construct a concrete instance of `ServerCertificateTagArrayInput` via:
//
//	ServerCertificateTagArray{ ServerCertificateTagArgs{...} }
type ServerCertificateTagArrayInput interface {
	pulumi.Input

	ToServerCertificateTagArrayOutput() ServerCertificateTagArrayOutput
	ToServerCertificateTagArrayOutputWithContext(context.Context) ServerCertificateTagArrayOutput
}

type ServerCertificateTagArray []ServerCertificateTagInput

func (ServerCertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateTag)(nil)).Elem()
}

func (i ServerCertificateTagArray) ToServerCertificateTagArrayOutput() ServerCertificateTagArrayOutput {
	return i.ToServerCertificateTagArrayOutputWithContext(context.Background())
}

func (i ServerCertificateTagArray) ToServerCertificateTagArrayOutputWithContext(ctx context.Context) ServerCertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ServerCertificateTagOutput struct{ *pulumi.OutputState }

func (ServerCertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateTag)(nil)).Elem()
}

func (o ServerCertificateTagOutput) ToServerCertificateTagOutput() ServerCertificateTagOutput {
	return o
}

func (o ServerCertificateTagOutput) ToServerCertificateTagOutputWithContext(ctx context.Context) ServerCertificateTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ServerCertificateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ServerCertificateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServerCertificateTagArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateTag)(nil)).Elem()
}

func (o ServerCertificateTagArrayOutput) ToServerCertificateTagArrayOutput() ServerCertificateTagArrayOutput {
	return o
}

func (o ServerCertificateTagArrayOutput) ToServerCertificateTagArrayOutputWithContext(ctx context.Context) ServerCertificateTagArrayOutput {
	return o
}

func (o ServerCertificateTagArrayOutput) Index(i pulumi.IntInput) ServerCertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerCertificateTag {
		return vs[0].([]ServerCertificateTag)[vs[1].(int)]
	}).(ServerCertificateTagOutput)
}

// Contains the user name and password create date for a user.
type UserLoginProfile struct {
	// The user's password.
	Password string `pulumi:"password"`
	// Specifies whether the user is required to set a new password on next sign-in.
	PasswordResetRequired *bool `pulumi:"passwordResetRequired"`
}

// UserLoginProfileInput is an input type that accepts UserLoginProfileArgs and UserLoginProfileOutput values.
// You can construct a concrete instance of `UserLoginProfileInput` via:
//
//	UserLoginProfileArgs{...}
type UserLoginProfileInput interface {
	pulumi.Input

	ToUserLoginProfileOutput() UserLoginProfileOutput
	ToUserLoginProfileOutputWithContext(context.Context) UserLoginProfileOutput
}

// Contains the user name and password create date for a user.
type UserLoginProfileArgs struct {
	// The user's password.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies whether the user is required to set a new password on next sign-in.
	PasswordResetRequired pulumi.BoolPtrInput `pulumi:"passwordResetRequired"`
}

func (UserLoginProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLoginProfile)(nil)).Elem()
}

func (i UserLoginProfileArgs) ToUserLoginProfileOutput() UserLoginProfileOutput {
	return i.ToUserLoginProfileOutputWithContext(context.Background())
}

func (i UserLoginProfileArgs) ToUserLoginProfileOutputWithContext(ctx context.Context) UserLoginProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfileOutput)
}

func (i UserLoginProfileArgs) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return i.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (i UserLoginProfileArgs) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfileOutput).ToUserLoginProfilePtrOutputWithContext(ctx)
}

// UserLoginProfilePtrInput is an input type that accepts UserLoginProfileArgs, UserLoginProfilePtr and UserLoginProfilePtrOutput values.
// You can construct a concrete instance of `UserLoginProfilePtrInput` via:
//
//	        UserLoginProfileArgs{...}
//
//	or:
//
//	        nil
type UserLoginProfilePtrInput interface {
	pulumi.Input

	ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput
	ToUserLoginProfilePtrOutputWithContext(context.Context) UserLoginProfilePtrOutput
}

type userLoginProfilePtrType UserLoginProfileArgs

func UserLoginProfilePtr(v *UserLoginProfileArgs) UserLoginProfilePtrInput {
	return (*userLoginProfilePtrType)(v)
}

func (*userLoginProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserLoginProfile)(nil)).Elem()
}

func (i *userLoginProfilePtrType) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return i.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (i *userLoginProfilePtrType) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfilePtrOutput)
}

// Contains the user name and password create date for a user.
type UserLoginProfileOutput struct{ *pulumi.OutputState }

func (UserLoginProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLoginProfile)(nil)).Elem()
}

func (o UserLoginProfileOutput) ToUserLoginProfileOutput() UserLoginProfileOutput {
	return o
}

func (o UserLoginProfileOutput) ToUserLoginProfileOutputWithContext(ctx context.Context) UserLoginProfileOutput {
	return o
}

func (o UserLoginProfileOutput) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return o.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (o UserLoginProfileOutput) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserLoginProfile) *UserLoginProfile {
		return &v
	}).(UserLoginProfilePtrOutput)
}

// The user's password.
func (o UserLoginProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserLoginProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies whether the user is required to set a new password on next sign-in.
func (o UserLoginProfileOutput) PasswordResetRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *bool { return v.PasswordResetRequired }).(pulumi.BoolPtrOutput)
}

type UserLoginProfilePtrOutput struct{ *pulumi.OutputState }

func (UserLoginProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserLoginProfile)(nil)).Elem()
}

func (o UserLoginProfilePtrOutput) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return o
}

func (o UserLoginProfilePtrOutput) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return o
}

func (o UserLoginProfilePtrOutput) Elem() UserLoginProfileOutput {
	return o.ApplyT(func(v *UserLoginProfile) UserLoginProfile {
		if v != nil {
			return *v
		}
		var ret UserLoginProfile
		return ret
	}).(UserLoginProfileOutput)
}

// The user's password.
func (o UserLoginProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the user is required to set a new password on next sign-in.
func (o UserLoginProfilePtrOutput) PasswordResetRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *bool {
		if v == nil {
			return nil
		}
		return v.PasswordResetRequired
	}).(pulumi.BoolPtrOutput)
}

// Contains information about an attached policy.
type UserPolicyType struct {
	// The policy document.
	PolicyDocument interface{} `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName string `pulumi:"policyName"`
}

// UserPolicyTypeInput is an input type that accepts UserPolicyTypeArgs and UserPolicyTypeOutput values.
// You can construct a concrete instance of `UserPolicyTypeInput` via:
//
//	UserPolicyTypeArgs{...}
type UserPolicyTypeInput interface {
	pulumi.Input

	ToUserPolicyTypeOutput() UserPolicyTypeOutput
	ToUserPolicyTypeOutputWithContext(context.Context) UserPolicyTypeOutput
}

// Contains information about an attached policy.
type UserPolicyTypeArgs struct {
	// The policy document.
	PolicyDocument pulumi.Input `pulumi:"policyDocument"`
	// The friendly name (not ARN) identifying the policy.
	PolicyName pulumi.StringInput `pulumi:"policyName"`
}

func (UserPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicyType)(nil)).Elem()
}

func (i UserPolicyTypeArgs) ToUserPolicyTypeOutput() UserPolicyTypeOutput {
	return i.ToUserPolicyTypeOutputWithContext(context.Background())
}

func (i UserPolicyTypeArgs) ToUserPolicyTypeOutputWithContext(ctx context.Context) UserPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyTypeOutput)
}

// UserPolicyTypeArrayInput is an input type that accepts UserPolicyTypeArray and UserPolicyTypeArrayOutput values.
// You can construct a concrete instance of `UserPolicyTypeArrayInput` via:
//
//	UserPolicyTypeArray{ UserPolicyTypeArgs{...} }
type UserPolicyTypeArrayInput interface {
	pulumi.Input

	ToUserPolicyTypeArrayOutput() UserPolicyTypeArrayOutput
	ToUserPolicyTypeArrayOutputWithContext(context.Context) UserPolicyTypeArrayOutput
}

type UserPolicyTypeArray []UserPolicyTypeInput

func (UserPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicyType)(nil)).Elem()
}

func (i UserPolicyTypeArray) ToUserPolicyTypeArrayOutput() UserPolicyTypeArrayOutput {
	return i.ToUserPolicyTypeArrayOutputWithContext(context.Background())
}

func (i UserPolicyTypeArray) ToUserPolicyTypeArrayOutputWithContext(ctx context.Context) UserPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyTypeArrayOutput)
}

// Contains information about an attached policy.
type UserPolicyTypeOutput struct{ *pulumi.OutputState }

func (UserPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicyType)(nil)).Elem()
}

func (o UserPolicyTypeOutput) ToUserPolicyTypeOutput() UserPolicyTypeOutput {
	return o
}

func (o UserPolicyTypeOutput) ToUserPolicyTypeOutputWithContext(ctx context.Context) UserPolicyTypeOutput {
	return o
}

// The policy document.
func (o UserPolicyTypeOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v UserPolicyType) interface{} { return v.PolicyDocument }).(pulumi.AnyOutput)
}

// The friendly name (not ARN) identifying the policy.
func (o UserPolicyTypeOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v UserPolicyType) string { return v.PolicyName }).(pulumi.StringOutput)
}

type UserPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (UserPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicyType)(nil)).Elem()
}

func (o UserPolicyTypeArrayOutput) ToUserPolicyTypeArrayOutput() UserPolicyTypeArrayOutput {
	return o
}

func (o UserPolicyTypeArrayOutput) ToUserPolicyTypeArrayOutputWithContext(ctx context.Context) UserPolicyTypeArrayOutput {
	return o
}

func (o UserPolicyTypeArrayOutput) Index(i pulumi.IntInput) UserPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPolicyType {
		return vs[0].([]UserPolicyType)[vs[1].(int)]
	}).(UserPolicyTypeOutput)
}

// A key-value pair to associate with a resource.
type UserTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// UserTagInput is an input type that accepts UserTagArgs and UserTagOutput values.
// You can construct a concrete instance of `UserTagInput` via:
//
//	UserTagArgs{...}
type UserTagInput interface {
	pulumi.Input

	ToUserTagOutput() UserTagOutput
	ToUserTagOutputWithContext(context.Context) UserTagOutput
}

// A key-value pair to associate with a resource.
type UserTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (UserTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (i UserTagArgs) ToUserTagOutput() UserTagOutput {
	return i.ToUserTagOutputWithContext(context.Background())
}

func (i UserTagArgs) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagOutput)
}

// UserTagArrayInput is an input type that accepts UserTagArray and UserTagArrayOutput values.
// You can construct a concrete instance of `UserTagArrayInput` via:
//
//	UserTagArray{ UserTagArgs{...} }
type UserTagArrayInput interface {
	pulumi.Input

	ToUserTagArrayOutput() UserTagArrayOutput
	ToUserTagArrayOutputWithContext(context.Context) UserTagArrayOutput
}

type UserTagArray []UserTagInput

func (UserTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (i UserTagArray) ToUserTagArrayOutput() UserTagArrayOutput {
	return i.ToUserTagArrayOutputWithContext(context.Background())
}

func (i UserTagArray) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagArrayOutput)
}

// A key-value pair to associate with a resource.
type UserTagOutput struct{ *pulumi.OutputState }

func (UserTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (o UserTagOutput) ToUserTagOutput() UserTagOutput {
	return o
}

func (o UserTagOutput) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o UserTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o UserTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserTag) string { return v.Value }).(pulumi.StringOutput)
}

type UserTagArrayOutput struct{ *pulumi.OutputState }

func (UserTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (o UserTagArrayOutput) ToUserTagArrayOutput() UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) Index(i pulumi.IntInput) UserTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserTag {
		return vs[0].([]UserTag)[vs[1].(int)]
	}).(UserTagOutput)
}

// A key-value pair to associate with a resource.
type VirtualMfaDeviceTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// VirtualMfaDeviceTagInput is an input type that accepts VirtualMfaDeviceTagArgs and VirtualMfaDeviceTagOutput values.
// You can construct a concrete instance of `VirtualMfaDeviceTagInput` via:
//
//	VirtualMfaDeviceTagArgs{...}
type VirtualMfaDeviceTagInput interface {
	pulumi.Input

	ToVirtualMfaDeviceTagOutput() VirtualMfaDeviceTagOutput
	ToVirtualMfaDeviceTagOutputWithContext(context.Context) VirtualMfaDeviceTagOutput
}

// A key-value pair to associate with a resource.
type VirtualMfaDeviceTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (VirtualMfaDeviceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMfaDeviceTag)(nil)).Elem()
}

func (i VirtualMfaDeviceTagArgs) ToVirtualMfaDeviceTagOutput() VirtualMfaDeviceTagOutput {
	return i.ToVirtualMfaDeviceTagOutputWithContext(context.Background())
}

func (i VirtualMfaDeviceTagArgs) ToVirtualMfaDeviceTagOutputWithContext(ctx context.Context) VirtualMfaDeviceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMfaDeviceTagOutput)
}

// VirtualMfaDeviceTagArrayInput is an input type that accepts VirtualMfaDeviceTagArray and VirtualMfaDeviceTagArrayOutput values.
// You can construct a concrete instance of `VirtualMfaDeviceTagArrayInput` via:
//
//	VirtualMfaDeviceTagArray{ VirtualMfaDeviceTagArgs{...} }
type VirtualMfaDeviceTagArrayInput interface {
	pulumi.Input

	ToVirtualMfaDeviceTagArrayOutput() VirtualMfaDeviceTagArrayOutput
	ToVirtualMfaDeviceTagArrayOutputWithContext(context.Context) VirtualMfaDeviceTagArrayOutput
}

type VirtualMfaDeviceTagArray []VirtualMfaDeviceTagInput

func (VirtualMfaDeviceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMfaDeviceTag)(nil)).Elem()
}

func (i VirtualMfaDeviceTagArray) ToVirtualMfaDeviceTagArrayOutput() VirtualMfaDeviceTagArrayOutput {
	return i.ToVirtualMfaDeviceTagArrayOutputWithContext(context.Background())
}

func (i VirtualMfaDeviceTagArray) ToVirtualMfaDeviceTagArrayOutputWithContext(ctx context.Context) VirtualMfaDeviceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMfaDeviceTagArrayOutput)
}

// A key-value pair to associate with a resource.
type VirtualMfaDeviceTagOutput struct{ *pulumi.OutputState }

func (VirtualMfaDeviceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMfaDeviceTag)(nil)).Elem()
}

func (o VirtualMfaDeviceTagOutput) ToVirtualMfaDeviceTagOutput() VirtualMfaDeviceTagOutput {
	return o
}

func (o VirtualMfaDeviceTagOutput) ToVirtualMfaDeviceTagOutputWithContext(ctx context.Context) VirtualMfaDeviceTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o VirtualMfaDeviceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMfaDeviceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o VirtualMfaDeviceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMfaDeviceTag) string { return v.Value }).(pulumi.StringOutput)
}

type VirtualMfaDeviceTagArrayOutput struct{ *pulumi.OutputState }

func (VirtualMfaDeviceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMfaDeviceTag)(nil)).Elem()
}

func (o VirtualMfaDeviceTagArrayOutput) ToVirtualMfaDeviceTagArrayOutput() VirtualMfaDeviceTagArrayOutput {
	return o
}

func (o VirtualMfaDeviceTagArrayOutput) ToVirtualMfaDeviceTagArrayOutputWithContext(ctx context.Context) VirtualMfaDeviceTagArrayOutput {
	return o
}

func (o VirtualMfaDeviceTagArrayOutput) Index(i pulumi.IntInput) VirtualMfaDeviceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMfaDeviceTag {
		return vs[0].([]VirtualMfaDeviceTag)[vs[1].(int)]
	}).(VirtualMfaDeviceTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyTypeInput)(nil)).Elem(), GroupPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyTypeArrayInput)(nil)).Elem(), GroupPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcProviderTagInput)(nil)).Elem(), OidcProviderTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcProviderTagArrayInput)(nil)).Elem(), OidcProviderTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyTypeInput)(nil)).Elem(), RolePolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyTypeArrayInput)(nil)).Elem(), RolePolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagInput)(nil)).Elem(), RoleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagArrayInput)(nil)).Elem(), RoleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlProviderTagInput)(nil)).Elem(), SamlProviderTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlProviderTagArrayInput)(nil)).Elem(), SamlProviderTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateTagInput)(nil)).Elem(), ServerCertificateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateTagArrayInput)(nil)).Elem(), ServerCertificateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLoginProfileInput)(nil)).Elem(), UserLoginProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLoginProfilePtrInput)(nil)).Elem(), UserLoginProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyTypeInput)(nil)).Elem(), UserPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyTypeArrayInput)(nil)).Elem(), UserPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagInput)(nil)).Elem(), UserTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagArrayInput)(nil)).Elem(), UserTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMfaDeviceTagInput)(nil)).Elem(), VirtualMfaDeviceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMfaDeviceTagArrayInput)(nil)).Elem(), VirtualMfaDeviceTagArray{})
	pulumi.RegisterOutputType(GroupPolicyTypeOutput{})
	pulumi.RegisterOutputType(GroupPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(OidcProviderTagOutput{})
	pulumi.RegisterOutputType(OidcProviderTagArrayOutput{})
	pulumi.RegisterOutputType(RolePolicyTypeOutput{})
	pulumi.RegisterOutputType(RolePolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(RoleTagOutput{})
	pulumi.RegisterOutputType(RoleTagArrayOutput{})
	pulumi.RegisterOutputType(SamlProviderTagOutput{})
	pulumi.RegisterOutputType(SamlProviderTagArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateTagOutput{})
	pulumi.RegisterOutputType(ServerCertificateTagArrayOutput{})
	pulumi.RegisterOutputType(UserLoginProfileOutput{})
	pulumi.RegisterOutputType(UserLoginProfilePtrOutput{})
	pulumi.RegisterOutputType(UserPolicyTypeOutput{})
	pulumi.RegisterOutputType(UserPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(UserTagOutput{})
	pulumi.RegisterOutputType(UserTagArrayOutput{})
	pulumi.RegisterOutputType(VirtualMfaDeviceTagOutput{})
	pulumi.RegisterOutputType(VirtualMfaDeviceTagArrayOutput{})
}
