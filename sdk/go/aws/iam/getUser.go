// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IAM::User
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("aws-native:iam:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserArgs struct {
	// The friendly name identifying the user.
	UserName string `pulumi:"userName"`
}

type LookupUserResult struct {
	// The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see IAM Identifiers in the IAM User Guide.
	Arn *string `pulumi:"arn"`
	// A list of group names to which you want to add the user.
	Groups []string `pulumi:"groups"`
	// Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the AWS Management Console.
	LoginProfile *UserLoginProfile `pulumi:"loginProfile"`
	// A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
	ManagedPolicyArns []string `pulumi:"managedPolicyArns"`
	// The path to the user. For more information about paths, see IAM identifiers in the IAM User Guide. The ARN of the policy used to set the permissions boundary for the user.
	Path *string `pulumi:"path"`
	// The ARN of the policy that is used to set the permissions boundary for the user.
	PermissionsBoundary *string `pulumi:"permissionsBoundary"`
	// Adds or updates an inline policy document that is embedded in the specified IAM role.
	Policies []UserPolicyType `pulumi:"policies"`
	// A list of tags that are associated with the user. For more information about tagging, see Tagging IAM resources in the IAM User Guide.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

type LookupUserOutputArgs struct {
	// The friendly name identifying the user.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see IAM Identifiers in the IAM User Guide.
func (o LookupUserResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// A list of group names to which you want to add the user.
func (o LookupUserResultOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the AWS Management Console.
func (o LookupUserResultOutput) LoginProfile() UserLoginProfilePtrOutput {
	return o.ApplyT(func(v LookupUserResult) *UserLoginProfile { return v.LoginProfile }).(UserLoginProfilePtrOutput)
}

// A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
func (o LookupUserResultOutput) ManagedPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.ManagedPolicyArns }).(pulumi.StringArrayOutput)
}

// The path to the user. For more information about paths, see IAM identifiers in the IAM User Guide. The ARN of the policy used to set the permissions boundary for the user.
func (o LookupUserResultOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The ARN of the policy that is used to set the permissions boundary for the user.
func (o LookupUserResultOutput) PermissionsBoundary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.PermissionsBoundary }).(pulumi.StringPtrOutput)
}

// Adds or updates an inline policy document that is embedded in the specified IAM role.
func (o LookupUserResultOutput) Policies() UserPolicyTypeArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []UserPolicyType { return v.Policies }).(UserPolicyTypeArrayOutput)
}

// A list of tags that are associated with the user. For more information about tagging, see Tagging IAM resources in the IAM User Guide.
func (o LookupUserResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
