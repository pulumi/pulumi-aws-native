// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IAM::ServerCertificate
func LookupServerCertificate(ctx *pulumi.Context, args *LookupServerCertificateArgs, opts ...pulumi.InvokeOption) (*LookupServerCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerCertificateResult
	err := ctx.Invoke("aws-native:iam:getServerCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupServerCertificateArgs struct {
	// The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.
	//
	// This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
	ServerCertificateName string `pulumi:"serverCertificateName"`
}

type LookupServerCertificateResult struct {
	// Amazon Resource Name (ARN) of the server certificate
	Arn *string `pulumi:"arn"`
	// The path for the server certificate. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide* .
	//
	// This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! ( `\u0021` ) through the DEL character ( `\u007F` ), including most punctuation characters, digits, and upper and lowercased letters.
	//
	// > If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the `path` parameter. The path must begin with `/cloudfront` and must include a trailing slash (for example, `/cloudfront/test/` ).
	Path *string `pulumi:"path"`
	// A list of tags that are attached to the server certificate. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide* .
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupServerCertificateOutput(ctx *pulumi.Context, args LookupServerCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupServerCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupServerCertificateResultOutput, error) {
			args := v.(LookupServerCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:iam:getServerCertificate", args, LookupServerCertificateResultOutput{}, options).(LookupServerCertificateResultOutput), nil
		}).(LookupServerCertificateResultOutput)
}

type LookupServerCertificateOutputArgs struct {
	// The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.
	//
	// This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
	ServerCertificateName pulumi.StringInput `pulumi:"serverCertificateName"`
}

func (LookupServerCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerCertificateArgs)(nil)).Elem()
}

type LookupServerCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupServerCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerCertificateResult)(nil)).Elem()
}

func (o LookupServerCertificateResultOutput) ToLookupServerCertificateResultOutput() LookupServerCertificateResultOutput {
	return o
}

func (o LookupServerCertificateResultOutput) ToLookupServerCertificateResultOutputWithContext(ctx context.Context) LookupServerCertificateResultOutput {
	return o
}

// Amazon Resource Name (ARN) of the server certificate
func (o LookupServerCertificateResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerCertificateResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The path for the server certificate. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide* .
//
// This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! ( `\u0021` ) through the DEL character ( `\u007F` ), including most punctuation characters, digits, and upper and lowercased letters.
//
// > If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the `path` parameter. The path must begin with `/cloudfront` and must include a trailing slash (for example, `/cloudfront/test/` ).
func (o LookupServerCertificateResultOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerCertificateResult) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// A list of tags that are attached to the server certificate. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide* .
func (o LookupServerCertificateResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupServerCertificateResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerCertificateResultOutput{})
}
