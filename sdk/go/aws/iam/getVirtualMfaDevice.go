// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IAM::VirtualMFADevice
func LookupVirtualMfaDevice(ctx *pulumi.Context, args *LookupVirtualMfaDeviceArgs, opts ...pulumi.InvokeOption) (*LookupVirtualMfaDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualMfaDeviceResult
	err := ctx.Invoke("aws-native:iam:getVirtualMfaDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVirtualMfaDeviceArgs struct {
	// Returns the serial number for the specified `AWS::IAM::VirtualMFADevice` resource.
	SerialNumber string `pulumi:"serialNumber"`
}

type LookupVirtualMfaDeviceResult struct {
	// Returns the serial number for the specified `AWS::IAM::VirtualMFADevice` resource.
	SerialNumber *string `pulumi:"serialNumber"`
	// A list of tags that you want to attach to the new IAM virtual MFA device. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide* .
	//
	// > If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
	Tags []aws.Tag `pulumi:"tags"`
	// The IAM user associated with this virtual MFA device.
	Users []string `pulumi:"users"`
}

func LookupVirtualMfaDeviceOutput(ctx *pulumi.Context, args LookupVirtualMfaDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualMfaDeviceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVirtualMfaDeviceResultOutput, error) {
			args := v.(LookupVirtualMfaDeviceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:iam:getVirtualMfaDevice", args, LookupVirtualMfaDeviceResultOutput{}, options).(LookupVirtualMfaDeviceResultOutput), nil
		}).(LookupVirtualMfaDeviceResultOutput)
}

type LookupVirtualMfaDeviceOutputArgs struct {
	// Returns the serial number for the specified `AWS::IAM::VirtualMFADevice` resource.
	SerialNumber pulumi.StringInput `pulumi:"serialNumber"`
}

func (LookupVirtualMfaDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMfaDeviceArgs)(nil)).Elem()
}

type LookupVirtualMfaDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualMfaDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMfaDeviceResult)(nil)).Elem()
}

func (o LookupVirtualMfaDeviceResultOutput) ToLookupVirtualMfaDeviceResultOutput() LookupVirtualMfaDeviceResultOutput {
	return o
}

func (o LookupVirtualMfaDeviceResultOutput) ToLookupVirtualMfaDeviceResultOutputWithContext(ctx context.Context) LookupVirtualMfaDeviceResultOutput {
	return o
}

// Returns the serial number for the specified `AWS::IAM::VirtualMFADevice` resource.
func (o LookupVirtualMfaDeviceResultOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMfaDeviceResult) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// A list of tags that you want to attach to the new IAM virtual MFA device. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide* .
//
// > If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
func (o LookupVirtualMfaDeviceResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupVirtualMfaDeviceResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The IAM user associated with this virtual MFA device.
func (o LookupVirtualMfaDeviceResultOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVirtualMfaDeviceResult) []string { return v.Users }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualMfaDeviceResultOutput{})
}
