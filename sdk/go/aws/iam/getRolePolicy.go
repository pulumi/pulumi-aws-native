// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Adds or updates an inline policy document that is embedded in the specified IAM role.
//
//	When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html). You can update a role's trust policy using [UpdateAssumeRolePolicy](https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateAssumeRolePolicy.html). For information about roles, see [roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html) in the *IAM User Guide*.
//	A role can also have a managed policy attached to it. To attach a managed policy to a role, use [AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html). To create a new managed policy, use [AWS::IAM::ManagedPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-i
func LookupRolePolicy(ctx *pulumi.Context, args *LookupRolePolicyArgs, opts ...pulumi.InvokeOption) (*LookupRolePolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRolePolicyResult
	err := ctx.Invoke("aws-native:iam:getRolePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRolePolicyArgs struct {
	// The name of the policy document.
	//  This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
	PolicyName string `pulumi:"policyName"`
	// The name of the role to associate the policy with.
	//  This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
	RoleName string `pulumi:"roleName"`
}

type LookupRolePolicyResult struct {
	// The policy document.
	//  You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
	//  The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
	//   +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
	//   +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
	//   +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::IAM::RolePolicy` for more information about the expected schema for this property.
	PolicyDocument interface{} `pulumi:"policyDocument"`
}

func LookupRolePolicyOutput(ctx *pulumi.Context, args LookupRolePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupRolePolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRolePolicyResult, error) {
			args := v.(LookupRolePolicyArgs)
			r, err := LookupRolePolicy(ctx, &args, opts...)
			var s LookupRolePolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRolePolicyResultOutput)
}

type LookupRolePolicyOutputArgs struct {
	// The name of the policy document.
	//  This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// The name of the role to associate the policy with.
	//  This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
	RoleName pulumi.StringInput `pulumi:"roleName"`
}

func (LookupRolePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRolePolicyArgs)(nil)).Elem()
}

type LookupRolePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupRolePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRolePolicyResult)(nil)).Elem()
}

func (o LookupRolePolicyResultOutput) ToLookupRolePolicyResultOutput() LookupRolePolicyResultOutput {
	return o
}

func (o LookupRolePolicyResultOutput) ToLookupRolePolicyResultOutputWithContext(ctx context.Context) LookupRolePolicyResultOutput {
	return o
}

// The policy document.
//
//	You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
//	The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
//	 +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
//	 +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
//	 +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::IAM::RolePolicy` for more information about the expected schema for this property.
func (o LookupRolePolicyResultOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupRolePolicyResult) interface{} { return v.PolicyDocument }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRolePolicyResultOutput{})
}
