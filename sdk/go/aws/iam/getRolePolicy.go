// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema for IAM Role Policy
func LookupRolePolicy(ctx *pulumi.Context, args *LookupRolePolicyArgs, opts ...pulumi.InvokeOption) (*LookupRolePolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRolePolicyResult
	err := ctx.Invoke("aws-native:iam:getRolePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRolePolicyArgs struct {
	// The friendly name (not ARN) identifying the policy.
	PolicyName string `pulumi:"policyName"`
	// The name of the policy document.
	RoleName string `pulumi:"roleName"`
}

type LookupRolePolicyResult struct {
	// The policy document.
	PolicyDocument interface{} `pulumi:"policyDocument"`
}

func LookupRolePolicyOutput(ctx *pulumi.Context, args LookupRolePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupRolePolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRolePolicyResult, error) {
			args := v.(LookupRolePolicyArgs)
			r, err := LookupRolePolicy(ctx, &args, opts...)
			var s LookupRolePolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRolePolicyResultOutput)
}

type LookupRolePolicyOutputArgs struct {
	// The friendly name (not ARN) identifying the policy.
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// The name of the policy document.
	RoleName pulumi.StringInput `pulumi:"roleName"`
}

func (LookupRolePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRolePolicyArgs)(nil)).Elem()
}

type LookupRolePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupRolePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRolePolicyResult)(nil)).Elem()
}

func (o LookupRolePolicyResultOutput) ToLookupRolePolicyResultOutput() LookupRolePolicyResultOutput {
	return o
}

func (o LookupRolePolicyResultOutput) ToLookupRolePolicyResultOutputWithContext(ctx context.Context) LookupRolePolicyResultOutput {
	return o
}

// The policy document.
func (o LookupRolePolicyResultOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupRolePolicyResult) interface{} { return v.PolicyDocument }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRolePolicyResultOutput{})
}
