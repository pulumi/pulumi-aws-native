// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Schema for IAM User Policy
func LookupUserPolicy(ctx *pulumi.Context, args *LookupUserPolicyArgs, opts ...pulumi.InvokeOption) (*LookupUserPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserPolicyResult
	err := ctx.Invoke("aws-native:iam:getUserPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserPolicyArgs struct {
	// The name of the policy document.
	PolicyName string `pulumi:"policyName"`
	// The name of the user to associate the policy with.
	UserName string `pulumi:"userName"`
}

type LookupUserPolicyResult struct {
	// The policy document.
	PolicyDocument interface{} `pulumi:"policyDocument"`
}

func LookupUserPolicyOutput(ctx *pulumi.Context, args LookupUserPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupUserPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserPolicyResult, error) {
			args := v.(LookupUserPolicyArgs)
			r, err := LookupUserPolicy(ctx, &args, opts...)
			var s LookupUserPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserPolicyResultOutput)
}

type LookupUserPolicyOutputArgs struct {
	// The name of the policy document.
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// The name of the user to associate the policy with.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (LookupUserPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPolicyArgs)(nil)).Elem()
}

type LookupUserPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupUserPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPolicyResult)(nil)).Elem()
}

func (o LookupUserPolicyResultOutput) ToLookupUserPolicyResultOutput() LookupUserPolicyResultOutput {
	return o
}

func (o LookupUserPolicyResultOutput) ToLookupUserPolicyResultOutputWithContext(ctx context.Context) LookupUserPolicyResultOutput {
	return o
}

func (o LookupUserPolicyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupUserPolicyResult] {
	return pulumix.Output[LookupUserPolicyResult]{
		OutputState: o.OutputState,
	}
}

// The policy document.
func (o LookupUserPolicyResultOutput) PolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupUserPolicyResult) interface{} { return v.PolicyDocument }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserPolicyResultOutput{})
}
