// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::IAM::Role
//
// Deprecated: Role is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Role struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput      `pulumi:"arn"`
	AssumeRolePolicyDocument pulumi.AnyOutput         `pulumi:"assumeRolePolicyDocument"`
	Description              pulumi.StringPtrOutput   `pulumi:"description"`
	ManagedPolicyArns        pulumi.StringArrayOutput `pulumi:"managedPolicyArns"`
	MaxSessionDuration       pulumi.IntPtrOutput      `pulumi:"maxSessionDuration"`
	Path                     pulumi.StringPtrOutput   `pulumi:"path"`
	PermissionsBoundary      pulumi.StringPtrOutput   `pulumi:"permissionsBoundary"`
	Policies                 RolePolicyArrayOutput    `pulumi:"policies"`
	RoleId                   pulumi.StringOutput      `pulumi:"roleId"`
	RoleName                 pulumi.StringPtrOutput   `pulumi:"roleName"`
	Tags                     RoleTagArrayOutput       `pulumi:"tags"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssumeRolePolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'AssumeRolePolicyDocument'")
	}
	var resource Role
	err := ctx.RegisterResource("aws-native:iam:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("aws-native:iam:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
}

type RoleState struct {
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	AssumeRolePolicyDocument interface{}  `pulumi:"assumeRolePolicyDocument"`
	Description              *string      `pulumi:"description"`
	ManagedPolicyArns        []string     `pulumi:"managedPolicyArns"`
	MaxSessionDuration       *int         `pulumi:"maxSessionDuration"`
	Path                     *string      `pulumi:"path"`
	PermissionsBoundary      *string      `pulumi:"permissionsBoundary"`
	Policies                 []RolePolicy `pulumi:"policies"`
	RoleName                 *string      `pulumi:"roleName"`
	Tags                     []RoleTag    `pulumi:"tags"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	AssumeRolePolicyDocument pulumi.Input
	Description              pulumi.StringPtrInput
	ManagedPolicyArns        pulumi.StringArrayInput
	MaxSessionDuration       pulumi.IntPtrInput
	Path                     pulumi.StringPtrInput
	PermissionsBoundary      pulumi.StringPtrInput
	Policies                 RolePolicyArrayInput
	RoleName                 pulumi.StringPtrInput
	Tags                     RoleTagArrayInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil))
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil))
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RoleOutput{})
}
