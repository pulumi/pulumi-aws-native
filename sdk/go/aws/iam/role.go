// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::IAM::Role
type Role struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput       `pulumi:"arn"`
	AssumeRolePolicyDocument pulumi.AnyOutput          `pulumi:"assumeRolePolicyDocument"`
	Description              pulumi.StringPtrOutput    `pulumi:"description"`
	ManagedPolicyArns        pulumi.StringArrayOutput  `pulumi:"managedPolicyArns"`
	MaxSessionDuration       pulumi.IntPtrOutput       `pulumi:"maxSessionDuration"`
	Path                     pulumi.StringPtrOutput    `pulumi:"path"`
	PermissionsBoundary      pulumi.StringPtrOutput    `pulumi:"permissionsBoundary"`
	Policies                 RolePolicyTypeArrayOutput `pulumi:"policies"`
	RoleId                   pulumi.StringOutput       `pulumi:"roleId"`
	RoleName                 pulumi.StringPtrOutput    `pulumi:"roleName"`
	Tags                     RoleTagArrayOutput        `pulumi:"tags"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssumeRolePolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'AssumeRolePolicyDocument'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"path",
		"roleName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Role
	err := ctx.RegisterResource("aws-native:iam:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("aws-native:iam:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
}

type RoleState struct {
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	AssumeRolePolicyDocument interface{}      `pulumi:"assumeRolePolicyDocument"`
	Description              *string          `pulumi:"description"`
	ManagedPolicyArns        []string         `pulumi:"managedPolicyArns"`
	MaxSessionDuration       *int             `pulumi:"maxSessionDuration"`
	Path                     *string          `pulumi:"path"`
	PermissionsBoundary      *string          `pulumi:"permissionsBoundary"`
	Policies                 []RolePolicyType `pulumi:"policies"`
	RoleName                 *string          `pulumi:"roleName"`
	Tags                     []RoleTag        `pulumi:"tags"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	AssumeRolePolicyDocument pulumi.Input
	Description              pulumi.StringPtrInput
	ManagedPolicyArns        pulumi.StringArrayInput
	MaxSessionDuration       pulumi.IntPtrInput
	Path                     pulumi.StringPtrInput
	PermissionsBoundary      pulumi.StringPtrInput
	Policies                 RolePolicyTypeArrayInput
	RoleName                 pulumi.StringPtrInput
	Tags                     RoleTagArrayInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

func (i *Role) ToOutput(ctx context.Context) pulumix.Output[*Role] {
	return pulumix.Output[*Role]{
		OutputState: i.ToRoleOutputWithContext(ctx).OutputState,
	}
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func (o RoleOutput) ToOutput(ctx context.Context) pulumix.Output[*Role] {
	return pulumix.Output[*Role]{
		OutputState: o.OutputState,
	}
}

func (o RoleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RoleOutput) AssumeRolePolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v *Role) pulumi.AnyOutput { return v.AssumeRolePolicyDocument }).(pulumi.AnyOutput)
}

func (o RoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RoleOutput) ManagedPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) pulumi.StringArrayOutput { return v.ManagedPolicyArns }).(pulumi.StringArrayOutput)
}

func (o RoleOutput) MaxSessionDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.IntPtrOutput { return v.MaxSessionDuration }).(pulumi.IntPtrOutput)
}

func (o RoleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

func (o RoleOutput) PermissionsBoundary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.PermissionsBoundary }).(pulumi.StringPtrOutput)
}

func (o RoleOutput) Policies() RolePolicyTypeArrayOutput {
	return o.ApplyT(func(v *Role) RolePolicyTypeArrayOutput { return v.Policies }).(RolePolicyTypeArrayOutput)
}

func (o RoleOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

func (o RoleOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.RoleName }).(pulumi.StringPtrOutput)
}

func (o RoleOutput) Tags() RoleTagArrayOutput {
	return o.ApplyT(func(v *Role) RoleTagArrayOutput { return v.Tags }).(RoleTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), &Role{})
	pulumi.RegisterOutputType(RoleOutput{})
}
