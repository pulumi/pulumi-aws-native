// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::IAM::Role
func LookupRole(ctx *pulumi.Context, args *LookupRoleArgs, opts ...pulumi.InvokeOption) (*LookupRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRoleResult
	err := ctx.Invoke("aws-native:iam:getRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRoleArgs struct {
	RoleId string `pulumi:"roleId"`
}

type LookupRoleResult struct {
	Arn                      *string          `pulumi:"arn"`
	AssumeRolePolicyDocument interface{}      `pulumi:"assumeRolePolicyDocument"`
	Description              *string          `pulumi:"description"`
	ManagedPolicyArns        []string         `pulumi:"managedPolicyArns"`
	MaxSessionDuration       *int             `pulumi:"maxSessionDuration"`
	PermissionsBoundary      *string          `pulumi:"permissionsBoundary"`
	Policies                 []RolePolicyType `pulumi:"policies"`
	RoleId                   *string          `pulumi:"roleId"`
	Tags                     []RoleTag        `pulumi:"tags"`
}

func LookupRoleOutput(ctx *pulumi.Context, args LookupRoleOutputArgs, opts ...pulumi.InvokeOption) LookupRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRoleResult, error) {
			args := v.(LookupRoleArgs)
			r, err := LookupRole(ctx, &args, opts...)
			var s LookupRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRoleResultOutput)
}

type LookupRoleOutputArgs struct {
	RoleId pulumi.StringInput `pulumi:"roleId"`
}

func (LookupRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleArgs)(nil)).Elem()
}

type LookupRoleResultOutput struct{ *pulumi.OutputState }

func (LookupRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleResult)(nil)).Elem()
}

func (o LookupRoleResultOutput) ToLookupRoleResultOutput() LookupRoleResultOutput {
	return o
}

func (o LookupRoleResultOutput) ToLookupRoleResultOutputWithContext(ctx context.Context) LookupRoleResultOutput {
	return o
}

func (o LookupRoleResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupRoleResult] {
	return pulumix.Output[LookupRoleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRoleResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRoleResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupRoleResultOutput) AssumeRolePolicyDocument() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupRoleResult) interface{} { return v.AssumeRolePolicyDocument }).(pulumi.AnyOutput)
}

func (o LookupRoleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRoleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupRoleResultOutput) ManagedPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRoleResult) []string { return v.ManagedPolicyArns }).(pulumi.StringArrayOutput)
}

func (o LookupRoleResultOutput) MaxSessionDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupRoleResult) *int { return v.MaxSessionDuration }).(pulumi.IntPtrOutput)
}

func (o LookupRoleResultOutput) PermissionsBoundary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRoleResult) *string { return v.PermissionsBoundary }).(pulumi.StringPtrOutput)
}

func (o LookupRoleResultOutput) Policies() RolePolicyTypeArrayOutput {
	return o.ApplyT(func(v LookupRoleResult) []RolePolicyType { return v.Policies }).(RolePolicyTypeArrayOutput)
}

func (o LookupRoleResultOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRoleResult) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

func (o LookupRoleResultOutput) Tags() RoleTagArrayOutput {
	return o.ApplyT(func(v LookupRoleResult) []RoleTag { return v.Tags }).(RoleTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRoleResultOutput{})
}
