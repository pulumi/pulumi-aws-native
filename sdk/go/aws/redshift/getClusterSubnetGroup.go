// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Redshift::ClusterSubnetGroup
func LookupClusterSubnetGroup(ctx *pulumi.Context, args *LookupClusterSubnetGroupArgs, opts ...pulumi.InvokeOption) (*LookupClusterSubnetGroupResult, error) {
	var rv LookupClusterSubnetGroupResult
	err := ctx.Invoke("aws-native:redshift:getClusterSubnetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterSubnetGroupArgs struct {
	Id string `pulumi:"id"`
}

type LookupClusterSubnetGroupResult struct {
	Description *string                 `pulumi:"description"`
	Id          *string                 `pulumi:"id"`
	SubnetIds   []string                `pulumi:"subnetIds"`
	Tags        []ClusterSubnetGroupTag `pulumi:"tags"`
}

func LookupClusterSubnetGroupOutput(ctx *pulumi.Context, args LookupClusterSubnetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupClusterSubnetGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterSubnetGroupResult, error) {
			args := v.(LookupClusterSubnetGroupArgs)
			r, err := LookupClusterSubnetGroup(ctx, &args, opts...)
			var s LookupClusterSubnetGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterSubnetGroupResultOutput)
}

type LookupClusterSubnetGroupOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupClusterSubnetGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterSubnetGroupArgs)(nil)).Elem()
}

type LookupClusterSubnetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupClusterSubnetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterSubnetGroupResult)(nil)).Elem()
}

func (o LookupClusterSubnetGroupResultOutput) ToLookupClusterSubnetGroupResultOutput() LookupClusterSubnetGroupResultOutput {
	return o
}

func (o LookupClusterSubnetGroupResultOutput) ToLookupClusterSubnetGroupResultOutputWithContext(ctx context.Context) LookupClusterSubnetGroupResultOutput {
	return o
}

func (o LookupClusterSubnetGroupResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterSubnetGroupResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupClusterSubnetGroupResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterSubnetGroupResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupClusterSubnetGroupResultOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterSubnetGroupResult) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o LookupClusterSubnetGroupResultOutput) Tags() ClusterSubnetGroupTagArrayOutput {
	return o.ApplyT(func(v LookupClusterSubnetGroupResult) []ClusterSubnetGroupTag { return v.Tags }).(ClusterSubnetGroupTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterSubnetGroupResultOutput{})
}
