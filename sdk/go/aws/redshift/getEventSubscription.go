// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `AWS::Redshift::EventSubscription` resource creates an Amazon Redshift Event Subscription.
func LookupEventSubscription(ctx *pulumi.Context, args *LookupEventSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupEventSubscriptionResult, error) {
	var rv LookupEventSubscriptionResult
	err := ctx.Invoke("aws-native:redshift:getEventSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEventSubscriptionArgs struct {
	// The name of the Amazon Redshift event notification subscription
	SubscriptionName string `pulumi:"subscriptionName"`
}

type LookupEventSubscriptionResult struct {
	// The name of the Amazon Redshift event notification subscription.
	CustSubscriptionId *string `pulumi:"custSubscriptionId"`
	// The AWS account associated with the Amazon Redshift event notification subscription.
	CustomerAwsId *string `pulumi:"customerAwsId"`
	// A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the Amazon Redshift event categories to be published by the event notification subscription.
	EventCategories []EventSubscriptionEventCategoriesItem `pulumi:"eventCategories"`
	// The list of Amazon Redshift event categories specified in the event notification subscription.
	EventCategoriesList []string `pulumi:"eventCategoriesList"`
	// Specifies the Amazon Redshift event severity to be published by the event notification subscription.
	Severity *EventSubscriptionSeverity `pulumi:"severity"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
	// A list of one or more identifiers of Amazon Redshift source objects.
	SourceIds []string `pulumi:"sourceIds"`
	// A list of the sources that publish events to the Amazon Redshift event notification subscription.
	SourceIdsList []string `pulumi:"sourceIdsList"`
	// The type of source that will be generating the events.
	SourceType *EventSubscriptionSourceType `pulumi:"sourceType"`
	// The status of the Amazon Redshift event notification subscription.
	Status *EventSubscriptionStatus `pulumi:"status"`
	// The date and time the Amazon Redshift event notification subscription was created.
	SubscriptionCreationTime *string `pulumi:"subscriptionCreationTime"`
	// An array of key-value pairs to apply to this resource.
	Tags []EventSubscriptionTag `pulumi:"tags"`
}

func LookupEventSubscriptionOutput(ctx *pulumi.Context, args LookupEventSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupEventSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEventSubscriptionResult, error) {
			args := v.(LookupEventSubscriptionArgs)
			r, err := LookupEventSubscription(ctx, &args, opts...)
			return *r, err
		}).(LookupEventSubscriptionResultOutput)
}

type LookupEventSubscriptionOutputArgs struct {
	// The name of the Amazon Redshift event notification subscription
	SubscriptionName pulumi.StringInput `pulumi:"subscriptionName"`
}

func (LookupEventSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSubscriptionArgs)(nil)).Elem()
}

type LookupEventSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupEventSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSubscriptionResult)(nil)).Elem()
}

func (o LookupEventSubscriptionResultOutput) ToLookupEventSubscriptionResultOutput() LookupEventSubscriptionResultOutput {
	return o
}

func (o LookupEventSubscriptionResultOutput) ToLookupEventSubscriptionResultOutputWithContext(ctx context.Context) LookupEventSubscriptionResultOutput {
	return o
}

// The name of the Amazon Redshift event notification subscription.
func (o LookupEventSubscriptionResultOutput) CustSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *string { return v.CustSubscriptionId }).(pulumi.StringPtrOutput)
}

// The AWS account associated with the Amazon Redshift event notification subscription.
func (o LookupEventSubscriptionResultOutput) CustomerAwsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *string { return v.CustomerAwsId }).(pulumi.StringPtrOutput)
}

// A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
func (o LookupEventSubscriptionResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the Amazon Redshift event categories to be published by the event notification subscription.
func (o LookupEventSubscriptionResultOutput) EventCategories() EventSubscriptionEventCategoriesItemArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []EventSubscriptionEventCategoriesItem { return v.EventCategories }).(EventSubscriptionEventCategoriesItemArrayOutput)
}

// The list of Amazon Redshift event categories specified in the event notification subscription.
func (o LookupEventSubscriptionResultOutput) EventCategoriesList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []string { return v.EventCategoriesList }).(pulumi.StringArrayOutput)
}

// Specifies the Amazon Redshift event severity to be published by the event notification subscription.
func (o LookupEventSubscriptionResultOutput) Severity() EventSubscriptionSeverityPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *EventSubscriptionSeverity { return v.Severity }).(EventSubscriptionSeverityPtrOutput)
}

// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
func (o LookupEventSubscriptionResultOutput) SnsTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *string { return v.SnsTopicArn }).(pulumi.StringPtrOutput)
}

// A list of one or more identifiers of Amazon Redshift source objects.
func (o LookupEventSubscriptionResultOutput) SourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []string { return v.SourceIds }).(pulumi.StringArrayOutput)
}

// A list of the sources that publish events to the Amazon Redshift event notification subscription.
func (o LookupEventSubscriptionResultOutput) SourceIdsList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []string { return v.SourceIdsList }).(pulumi.StringArrayOutput)
}

// The type of source that will be generating the events.
func (o LookupEventSubscriptionResultOutput) SourceType() EventSubscriptionSourceTypePtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *EventSubscriptionSourceType { return v.SourceType }).(EventSubscriptionSourceTypePtrOutput)
}

// The status of the Amazon Redshift event notification subscription.
func (o LookupEventSubscriptionResultOutput) Status() EventSubscriptionStatusPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *EventSubscriptionStatus { return v.Status }).(EventSubscriptionStatusPtrOutput)
}

// The date and time the Amazon Redshift event notification subscription was created.
func (o LookupEventSubscriptionResultOutput) SubscriptionCreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) *string { return v.SubscriptionCreationTime }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupEventSubscriptionResultOutput) Tags() EventSubscriptionTagArrayOutput {
	return o.ApplyT(func(v LookupEventSubscriptionResult) []EventSubscriptionTag { return v.Tags }).(EventSubscriptionTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventSubscriptionResultOutput{})
}
