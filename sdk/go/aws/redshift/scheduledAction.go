// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `AWS::Redshift::ScheduledAction` resource creates an Amazon Redshift Scheduled Action.
type ScheduledAction struct {
	pulumi.CustomResourceState

	// If true, the schedule is enabled. If false, the scheduled action does not trigger.
	Enable pulumi.BoolPtrOutput `pulumi:"enable"`
	// The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// The IAM role to assume to run the target action.
	IamRole pulumi.StringPtrOutput `pulumi:"iamRole"`
	// List of times when the scheduled action will run.
	NextInvocations pulumi.StringArrayOutput `pulumi:"nextInvocations"`
	// The schedule in `at( )` or `cron( )` format.
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// The description of the scheduled action.
	ScheduledActionDescription pulumi.StringPtrOutput `pulumi:"scheduledActionDescription"`
	// The name of the scheduled action. The name must be unique within an account.
	ScheduledActionName pulumi.StringOutput `pulumi:"scheduledActionName"`
	// The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// The state of the scheduled action.
	State ScheduledActionStateEnumOutput `pulumi:"state"`
	// A JSON format string of the Amazon Redshift API operation with input parameters.
	TargetAction ScheduledActionTypePtrOutput `pulumi:"targetAction"`
}

// NewScheduledAction registers a new resource with the given unique name, arguments, and options.
func NewScheduledAction(ctx *pulumi.Context,
	name string, args *ScheduledActionArgs, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	if args == nil {
		args = &ScheduledActionArgs{}
	}

	var resource ScheduledAction
	err := ctx.RegisterResource("aws-native:redshift:ScheduledAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledAction gets an existing ScheduledAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledActionState, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	var resource ScheduledAction
	err := ctx.ReadResource("aws-native:redshift:ScheduledAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledAction resources.
type scheduledActionState struct {
}

type ScheduledActionState struct {
}

func (ScheduledActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionState)(nil)).Elem()
}

type scheduledActionArgs struct {
	// If true, the schedule is enabled. If false, the scheduled action does not trigger.
	Enable *bool `pulumi:"enable"`
	// The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
	EndTime *string `pulumi:"endTime"`
	// The IAM role to assume to run the target action.
	IamRole *string `pulumi:"iamRole"`
	// The schedule in `at( )` or `cron( )` format.
	Schedule *string `pulumi:"schedule"`
	// The description of the scheduled action.
	ScheduledActionDescription *string `pulumi:"scheduledActionDescription"`
	// The name of the scheduled action. The name must be unique within an account.
	ScheduledActionName *string `pulumi:"scheduledActionName"`
	// The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
	StartTime *string `pulumi:"startTime"`
	// A JSON format string of the Amazon Redshift API operation with input parameters.
	TargetAction *ScheduledActionType `pulumi:"targetAction"`
}

// The set of arguments for constructing a ScheduledAction resource.
type ScheduledActionArgs struct {
	// If true, the schedule is enabled. If false, the scheduled action does not trigger.
	Enable pulumi.BoolPtrInput
	// The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger.
	EndTime pulumi.StringPtrInput
	// The IAM role to assume to run the target action.
	IamRole pulumi.StringPtrInput
	// The schedule in `at( )` or `cron( )` format.
	Schedule pulumi.StringPtrInput
	// The description of the scheduled action.
	ScheduledActionDescription pulumi.StringPtrInput
	// The name of the scheduled action. The name must be unique within an account.
	ScheduledActionName pulumi.StringPtrInput
	// The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger.
	StartTime pulumi.StringPtrInput
	// A JSON format string of the Amazon Redshift API operation with input parameters.
	TargetAction ScheduledActionTypePtrInput
}

func (ScheduledActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionArgs)(nil)).Elem()
}

type ScheduledActionInput interface {
	pulumi.Input

	ToScheduledActionOutput() ScheduledActionOutput
	ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput
}

func (*ScheduledAction) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledAction)(nil))
}

func (i *ScheduledAction) ToScheduledActionOutput() ScheduledActionOutput {
	return i.ToScheduledActionOutputWithContext(context.Background())
}

func (i *ScheduledAction) ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionOutput)
}

type ScheduledActionOutput struct{ *pulumi.OutputState }

func (ScheduledActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledAction)(nil))
}

func (o ScheduledActionOutput) ToScheduledActionOutput() ScheduledActionOutput {
	return o
}

func (o ScheduledActionOutput) ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledActionInput)(nil)).Elem(), &ScheduledAction{})
	pulumi.RegisterOutputType(ScheduledActionOutput{})
}
