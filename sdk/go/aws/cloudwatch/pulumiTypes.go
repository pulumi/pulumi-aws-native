// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This structure defines the metrics that will be streamed.
type MetricStreamMetricStreamFilter struct {
	// Only metrics with Namespace matching this value will be streamed.
	Namespace string `pulumi:"namespace"`
}

// MetricStreamMetricStreamFilterInput is an input type that accepts MetricStreamMetricStreamFilterArgs and MetricStreamMetricStreamFilterOutput values.
// You can construct a concrete instance of `MetricStreamMetricStreamFilterInput` via:
//
//          MetricStreamMetricStreamFilterArgs{...}
type MetricStreamMetricStreamFilterInput interface {
	pulumi.Input

	ToMetricStreamMetricStreamFilterOutput() MetricStreamMetricStreamFilterOutput
	ToMetricStreamMetricStreamFilterOutputWithContext(context.Context) MetricStreamMetricStreamFilterOutput
}

// This structure defines the metrics that will be streamed.
type MetricStreamMetricStreamFilterArgs struct {
	// Only metrics with Namespace matching this value will be streamed.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (MetricStreamMetricStreamFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamMetricStreamFilter)(nil)).Elem()
}

func (i MetricStreamMetricStreamFilterArgs) ToMetricStreamMetricStreamFilterOutput() MetricStreamMetricStreamFilterOutput {
	return i.ToMetricStreamMetricStreamFilterOutputWithContext(context.Background())
}

func (i MetricStreamMetricStreamFilterArgs) ToMetricStreamMetricStreamFilterOutputWithContext(ctx context.Context) MetricStreamMetricStreamFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamMetricStreamFilterOutput)
}

// MetricStreamMetricStreamFilterArrayInput is an input type that accepts MetricStreamMetricStreamFilterArray and MetricStreamMetricStreamFilterArrayOutput values.
// You can construct a concrete instance of `MetricStreamMetricStreamFilterArrayInput` via:
//
//          MetricStreamMetricStreamFilterArray{ MetricStreamMetricStreamFilterArgs{...} }
type MetricStreamMetricStreamFilterArrayInput interface {
	pulumi.Input

	ToMetricStreamMetricStreamFilterArrayOutput() MetricStreamMetricStreamFilterArrayOutput
	ToMetricStreamMetricStreamFilterArrayOutputWithContext(context.Context) MetricStreamMetricStreamFilterArrayOutput
}

type MetricStreamMetricStreamFilterArray []MetricStreamMetricStreamFilterInput

func (MetricStreamMetricStreamFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamMetricStreamFilter)(nil)).Elem()
}

func (i MetricStreamMetricStreamFilterArray) ToMetricStreamMetricStreamFilterArrayOutput() MetricStreamMetricStreamFilterArrayOutput {
	return i.ToMetricStreamMetricStreamFilterArrayOutputWithContext(context.Background())
}

func (i MetricStreamMetricStreamFilterArray) ToMetricStreamMetricStreamFilterArrayOutputWithContext(ctx context.Context) MetricStreamMetricStreamFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamMetricStreamFilterArrayOutput)
}

// This structure defines the metrics that will be streamed.
type MetricStreamMetricStreamFilterOutput struct{ *pulumi.OutputState }

func (MetricStreamMetricStreamFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamMetricStreamFilter)(nil)).Elem()
}

func (o MetricStreamMetricStreamFilterOutput) ToMetricStreamMetricStreamFilterOutput() MetricStreamMetricStreamFilterOutput {
	return o
}

func (o MetricStreamMetricStreamFilterOutput) ToMetricStreamMetricStreamFilterOutputWithContext(ctx context.Context) MetricStreamMetricStreamFilterOutput {
	return o
}

// Only metrics with Namespace matching this value will be streamed.
func (o MetricStreamMetricStreamFilterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStreamMetricStreamFilter) string { return v.Namespace }).(pulumi.StringOutput)
}

type MetricStreamMetricStreamFilterArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamMetricStreamFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamMetricStreamFilter)(nil)).Elem()
}

func (o MetricStreamMetricStreamFilterArrayOutput) ToMetricStreamMetricStreamFilterArrayOutput() MetricStreamMetricStreamFilterArrayOutput {
	return o
}

func (o MetricStreamMetricStreamFilterArrayOutput) ToMetricStreamMetricStreamFilterArrayOutputWithContext(ctx context.Context) MetricStreamMetricStreamFilterArrayOutput {
	return o
}

func (o MetricStreamMetricStreamFilterArrayOutput) Index(i pulumi.IntInput) MetricStreamMetricStreamFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStreamMetricStreamFilter {
		return vs[0].([]MetricStreamMetricStreamFilter)[vs[1].(int)]
	}).(MetricStreamMetricStreamFilterOutput)
}

// Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
type MetricStreamTag struct {
	// A unique identifier for the tag.
	Key string `pulumi:"key"`
	// An optional string, which you can use to describe or define the tag.
	Value *string `pulumi:"value"`
}

// MetricStreamTagInput is an input type that accepts MetricStreamTagArgs and MetricStreamTagOutput values.
// You can construct a concrete instance of `MetricStreamTagInput` via:
//
//          MetricStreamTagArgs{...}
type MetricStreamTagInput interface {
	pulumi.Input

	ToMetricStreamTagOutput() MetricStreamTagOutput
	ToMetricStreamTagOutputWithContext(context.Context) MetricStreamTagOutput
}

// Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
type MetricStreamTagArgs struct {
	// A unique identifier for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// An optional string, which you can use to describe or define the tag.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (MetricStreamTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamTag)(nil)).Elem()
}

func (i MetricStreamTagArgs) ToMetricStreamTagOutput() MetricStreamTagOutput {
	return i.ToMetricStreamTagOutputWithContext(context.Background())
}

func (i MetricStreamTagArgs) ToMetricStreamTagOutputWithContext(ctx context.Context) MetricStreamTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamTagOutput)
}

// MetricStreamTagArrayInput is an input type that accepts MetricStreamTagArray and MetricStreamTagArrayOutput values.
// You can construct a concrete instance of `MetricStreamTagArrayInput` via:
//
//          MetricStreamTagArray{ MetricStreamTagArgs{...} }
type MetricStreamTagArrayInput interface {
	pulumi.Input

	ToMetricStreamTagArrayOutput() MetricStreamTagArrayOutput
	ToMetricStreamTagArrayOutputWithContext(context.Context) MetricStreamTagArrayOutput
}

type MetricStreamTagArray []MetricStreamTagInput

func (MetricStreamTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamTag)(nil)).Elem()
}

func (i MetricStreamTagArray) ToMetricStreamTagArrayOutput() MetricStreamTagArrayOutput {
	return i.ToMetricStreamTagArrayOutputWithContext(context.Background())
}

func (i MetricStreamTagArray) ToMetricStreamTagArrayOutputWithContext(ctx context.Context) MetricStreamTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamTagArrayOutput)
}

// Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
type MetricStreamTagOutput struct{ *pulumi.OutputState }

func (MetricStreamTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamTag)(nil)).Elem()
}

func (o MetricStreamTagOutput) ToMetricStreamTagOutput() MetricStreamTagOutput {
	return o
}

func (o MetricStreamTagOutput) ToMetricStreamTagOutputWithContext(ctx context.Context) MetricStreamTagOutput {
	return o
}

// A unique identifier for the tag.
func (o MetricStreamTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStreamTag) string { return v.Key }).(pulumi.StringOutput)
}

// An optional string, which you can use to describe or define the tag.
func (o MetricStreamTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricStreamTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type MetricStreamTagArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamTag)(nil)).Elem()
}

func (o MetricStreamTagArrayOutput) ToMetricStreamTagArrayOutput() MetricStreamTagArrayOutput {
	return o
}

func (o MetricStreamTagArrayOutput) ToMetricStreamTagArrayOutputWithContext(ctx context.Context) MetricStreamTagArrayOutput {
	return o
}

func (o MetricStreamTagArrayOutput) Index(i pulumi.IntInput) MetricStreamTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStreamTag {
		return vs[0].([]MetricStreamTag)[vs[1].(int)]
	}).(MetricStreamTagOutput)
}

func init() {
	pulumi.RegisterOutputType(MetricStreamMetricStreamFilterOutput{})
	pulumi.RegisterOutputType(MetricStreamMetricStreamFilterArrayOutput{})
	pulumi.RegisterOutputType(MetricStreamTagOutput{})
	pulumi.RegisterOutputType(MetricStreamTagArrayOutput{})
}
