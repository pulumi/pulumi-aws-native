// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Dimension is an embedded property of the “AWS::CloudWatch::Alarm“ type. Dimensions are name/value pairs that can be associated with a CW metric. You can specify a maximum of 10 dimensions for a given metric.
type AlarmDimension struct {
	// The name of the dimension, from 1–255 characters in length. This dimension name must have been included when the metric was published.
	Name string `pulumi:"name"`
	// The value for the dimension, from 1–255 characters in length.
	Value string `pulumi:"value"`
}

// AlarmDimensionInput is an input type that accepts AlarmDimensionArgs and AlarmDimensionOutput values.
// You can construct a concrete instance of `AlarmDimensionInput` via:
//
//	AlarmDimensionArgs{...}
type AlarmDimensionInput interface {
	pulumi.Input

	ToAlarmDimensionOutput() AlarmDimensionOutput
	ToAlarmDimensionOutputWithContext(context.Context) AlarmDimensionOutput
}

// Dimension is an embedded property of the “AWS::CloudWatch::Alarm“ type. Dimensions are name/value pairs that can be associated with a CW metric. You can specify a maximum of 10 dimensions for a given metric.
type AlarmDimensionArgs struct {
	// The name of the dimension, from 1–255 characters in length. This dimension name must have been included when the metric was published.
	Name pulumi.StringInput `pulumi:"name"`
	// The value for the dimension, from 1–255 characters in length.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlarmDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmDimension)(nil)).Elem()
}

func (i AlarmDimensionArgs) ToAlarmDimensionOutput() AlarmDimensionOutput {
	return i.ToAlarmDimensionOutputWithContext(context.Background())
}

func (i AlarmDimensionArgs) ToAlarmDimensionOutputWithContext(ctx context.Context) AlarmDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmDimensionOutput)
}

// AlarmDimensionArrayInput is an input type that accepts AlarmDimensionArray and AlarmDimensionArrayOutput values.
// You can construct a concrete instance of `AlarmDimensionArrayInput` via:
//
//	AlarmDimensionArray{ AlarmDimensionArgs{...} }
type AlarmDimensionArrayInput interface {
	pulumi.Input

	ToAlarmDimensionArrayOutput() AlarmDimensionArrayOutput
	ToAlarmDimensionArrayOutputWithContext(context.Context) AlarmDimensionArrayOutput
}

type AlarmDimensionArray []AlarmDimensionInput

func (AlarmDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmDimension)(nil)).Elem()
}

func (i AlarmDimensionArray) ToAlarmDimensionArrayOutput() AlarmDimensionArrayOutput {
	return i.ToAlarmDimensionArrayOutputWithContext(context.Background())
}

func (i AlarmDimensionArray) ToAlarmDimensionArrayOutputWithContext(ctx context.Context) AlarmDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmDimensionArrayOutput)
}

// Dimension is an embedded property of the “AWS::CloudWatch::Alarm“ type. Dimensions are name/value pairs that can be associated with a CW metric. You can specify a maximum of 10 dimensions for a given metric.
type AlarmDimensionOutput struct{ *pulumi.OutputState }

func (AlarmDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmDimension)(nil)).Elem()
}

func (o AlarmDimensionOutput) ToAlarmDimensionOutput() AlarmDimensionOutput {
	return o
}

func (o AlarmDimensionOutput) ToAlarmDimensionOutputWithContext(ctx context.Context) AlarmDimensionOutput {
	return o
}

// The name of the dimension, from 1–255 characters in length. This dimension name must have been included when the metric was published.
func (o AlarmDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmDimension) string { return v.Name }).(pulumi.StringOutput)
}

// The value for the dimension, from 1–255 characters in length.
func (o AlarmDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmDimension) string { return v.Value }).(pulumi.StringOutput)
}

type AlarmDimensionArrayOutput struct{ *pulumi.OutputState }

func (AlarmDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmDimension)(nil)).Elem()
}

func (o AlarmDimensionArrayOutput) ToAlarmDimensionArrayOutput() AlarmDimensionArrayOutput {
	return o
}

func (o AlarmDimensionArrayOutput) ToAlarmDimensionArrayOutputWithContext(ctx context.Context) AlarmDimensionArrayOutput {
	return o
}

func (o AlarmDimensionArrayOutput) Index(i pulumi.IntInput) AlarmDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmDimension {
		return vs[0].([]AlarmDimension)[vs[1].(int)]
	}).(AlarmDimensionOutput)
}

// The “Metric“ property type represents a specific metric. “Metric“ is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html) property type.
type AlarmMetric struct {
	// The metric dimensions that you want to be used for the metric that the alarm will watch.
	Dimensions []AlarmDimension `pulumi:"dimensions"`
	// The name of the metric that you want the alarm to watch. This is a required field.
	MetricName *string `pulumi:"metricName"`
	// The namespace of the metric that the alarm will watch.
	Namespace *string `pulumi:"namespace"`
}

// AlarmMetricInput is an input type that accepts AlarmMetricArgs and AlarmMetricOutput values.
// You can construct a concrete instance of `AlarmMetricInput` via:
//
//	AlarmMetricArgs{...}
type AlarmMetricInput interface {
	pulumi.Input

	ToAlarmMetricOutput() AlarmMetricOutput
	ToAlarmMetricOutputWithContext(context.Context) AlarmMetricOutput
}

// The “Metric“ property type represents a specific metric. “Metric“ is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html) property type.
type AlarmMetricArgs struct {
	// The metric dimensions that you want to be used for the metric that the alarm will watch.
	Dimensions AlarmDimensionArrayInput `pulumi:"dimensions"`
	// The name of the metric that you want the alarm to watch. This is a required field.
	MetricName pulumi.StringPtrInput `pulumi:"metricName"`
	// The namespace of the metric that the alarm will watch.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (AlarmMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetric)(nil)).Elem()
}

func (i AlarmMetricArgs) ToAlarmMetricOutput() AlarmMetricOutput {
	return i.ToAlarmMetricOutputWithContext(context.Background())
}

func (i AlarmMetricArgs) ToAlarmMetricOutputWithContext(ctx context.Context) AlarmMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricOutput)
}

func (i AlarmMetricArgs) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return i.ToAlarmMetricPtrOutputWithContext(context.Background())
}

func (i AlarmMetricArgs) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricOutput).ToAlarmMetricPtrOutputWithContext(ctx)
}

// AlarmMetricPtrInput is an input type that accepts AlarmMetricArgs, AlarmMetricPtr and AlarmMetricPtrOutput values.
// You can construct a concrete instance of `AlarmMetricPtrInput` via:
//
//	        AlarmMetricArgs{...}
//
//	or:
//
//	        nil
type AlarmMetricPtrInput interface {
	pulumi.Input

	ToAlarmMetricPtrOutput() AlarmMetricPtrOutput
	ToAlarmMetricPtrOutputWithContext(context.Context) AlarmMetricPtrOutput
}

type alarmMetricPtrType AlarmMetricArgs

func AlarmMetricPtr(v *AlarmMetricArgs) AlarmMetricPtrInput {
	return (*alarmMetricPtrType)(v)
}

func (*alarmMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetric)(nil)).Elem()
}

func (i *alarmMetricPtrType) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return i.ToAlarmMetricPtrOutputWithContext(context.Background())
}

func (i *alarmMetricPtrType) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricPtrOutput)
}

// The “Metric“ property type represents a specific metric. “Metric“ is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html) property type.
type AlarmMetricOutput struct{ *pulumi.OutputState }

func (AlarmMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetric)(nil)).Elem()
}

func (o AlarmMetricOutput) ToAlarmMetricOutput() AlarmMetricOutput {
	return o
}

func (o AlarmMetricOutput) ToAlarmMetricOutputWithContext(ctx context.Context) AlarmMetricOutput {
	return o
}

func (o AlarmMetricOutput) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return o.ToAlarmMetricPtrOutputWithContext(context.Background())
}

func (o AlarmMetricOutput) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlarmMetric) *AlarmMetric {
		return &v
	}).(AlarmMetricPtrOutput)
}

// The metric dimensions that you want to be used for the metric that the alarm will watch.
func (o AlarmMetricOutput) Dimensions() AlarmDimensionArrayOutput {
	return o.ApplyT(func(v AlarmMetric) []AlarmDimension { return v.Dimensions }).(AlarmDimensionArrayOutput)
}

// The name of the metric that you want the alarm to watch. This is a required field.
func (o AlarmMetricOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetric) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The namespace of the metric that the alarm will watch.
func (o AlarmMetricOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type AlarmMetricPtrOutput struct{ *pulumi.OutputState }

func (AlarmMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetric)(nil)).Elem()
}

func (o AlarmMetricPtrOutput) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return o
}

func (o AlarmMetricPtrOutput) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return o
}

func (o AlarmMetricPtrOutput) Elem() AlarmMetricOutput {
	return o.ApplyT(func(v *AlarmMetric) AlarmMetric {
		if v != nil {
			return *v
		}
		var ret AlarmMetric
		return ret
	}).(AlarmMetricOutput)
}

// The metric dimensions that you want to be used for the metric that the alarm will watch.
func (o AlarmMetricPtrOutput) Dimensions() AlarmDimensionArrayOutput {
	return o.ApplyT(func(v *AlarmMetric) []AlarmDimension {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(AlarmDimensionArrayOutput)
}

// The name of the metric that you want the alarm to watch. This is a required field.
func (o AlarmMetricPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetric) *string {
		if v == nil {
			return nil
		}
		return v.MetricName
	}).(pulumi.StringPtrOutput)
}

// The namespace of the metric that the alarm will watch.
func (o AlarmMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetric) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The “MetricDataQuery“ property type specifies the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data.
//
//	Any expression used must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
type AlarmMetricDataQuery struct {
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	AccountId *string `pulumi:"accountId"`
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
	//  Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
	Expression *string `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. This name must be unique within a single call to ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id string `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If ``Label`` is omitted, CW generates a default.
	Label *string `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	//  Within one MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
	MetricStat *AlarmMetricStat `pulumi:"metricStat"`
	// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1 second``.
	Period *int `pulumi:"period"`
	// This option indicates whether to return the timestamps and raw data values of this metric.
	//  When you create an alarm based on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm.
	//  This field is required.
	ReturnData *bool `pulumi:"returnData"`
}

// AlarmMetricDataQueryInput is an input type that accepts AlarmMetricDataQueryArgs and AlarmMetricDataQueryOutput values.
// You can construct a concrete instance of `AlarmMetricDataQueryInput` via:
//
//	AlarmMetricDataQueryArgs{...}
type AlarmMetricDataQueryInput interface {
	pulumi.Input

	ToAlarmMetricDataQueryOutput() AlarmMetricDataQueryOutput
	ToAlarmMetricDataQueryOutputWithContext(context.Context) AlarmMetricDataQueryOutput
}

// The “MetricDataQuery“ property type specifies the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data.
//
//	Any expression used must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
type AlarmMetricDataQueryArgs struct {
	// The ID of the account where the metrics are located, if this is a cross-account alarm.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
	//  Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// A short name used to tie this object to the results in the response. This name must be unique within a single call to ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
	Id pulumi.StringInput `pulumi:"id"`
	// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If ``Label`` is omitted, CW generates a default.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
	//  Within one MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
	MetricStat AlarmMetricStatPtrInput `pulumi:"metricStat"`
	// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1 second``.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// This option indicates whether to return the timestamps and raw data values of this metric.
	//  When you create an alarm based on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm.
	//  This field is required.
	ReturnData pulumi.BoolPtrInput `pulumi:"returnData"`
}

func (AlarmMetricDataQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricDataQuery)(nil)).Elem()
}

func (i AlarmMetricDataQueryArgs) ToAlarmMetricDataQueryOutput() AlarmMetricDataQueryOutput {
	return i.ToAlarmMetricDataQueryOutputWithContext(context.Background())
}

func (i AlarmMetricDataQueryArgs) ToAlarmMetricDataQueryOutputWithContext(ctx context.Context) AlarmMetricDataQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricDataQueryOutput)
}

// AlarmMetricDataQueryArrayInput is an input type that accepts AlarmMetricDataQueryArray and AlarmMetricDataQueryArrayOutput values.
// You can construct a concrete instance of `AlarmMetricDataQueryArrayInput` via:
//
//	AlarmMetricDataQueryArray{ AlarmMetricDataQueryArgs{...} }
type AlarmMetricDataQueryArrayInput interface {
	pulumi.Input

	ToAlarmMetricDataQueryArrayOutput() AlarmMetricDataQueryArrayOutput
	ToAlarmMetricDataQueryArrayOutputWithContext(context.Context) AlarmMetricDataQueryArrayOutput
}

type AlarmMetricDataQueryArray []AlarmMetricDataQueryInput

func (AlarmMetricDataQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmMetricDataQuery)(nil)).Elem()
}

func (i AlarmMetricDataQueryArray) ToAlarmMetricDataQueryArrayOutput() AlarmMetricDataQueryArrayOutput {
	return i.ToAlarmMetricDataQueryArrayOutputWithContext(context.Background())
}

func (i AlarmMetricDataQueryArray) ToAlarmMetricDataQueryArrayOutputWithContext(ctx context.Context) AlarmMetricDataQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricDataQueryArrayOutput)
}

// The “MetricDataQuery“ property type specifies the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data.
//
//	Any expression used must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
type AlarmMetricDataQueryOutput struct{ *pulumi.OutputState }

func (AlarmMetricDataQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricDataQuery)(nil)).Elem()
}

func (o AlarmMetricDataQueryOutput) ToAlarmMetricDataQueryOutput() AlarmMetricDataQueryOutput {
	return o
}

func (o AlarmMetricDataQueryOutput) ToAlarmMetricDataQueryOutputWithContext(ctx context.Context) AlarmMetricDataQueryOutput {
	return o
}

// The ID of the account where the metrics are located, if this is a cross-account alarm.
func (o AlarmMetricDataQueryOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the “Id“ of the other metrics to refer to those metrics, and can also use the “Id“ of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
//
//	Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
func (o AlarmMetricDataQueryOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// A short name used to tie this object to the results in the response. This name must be unique within a single call to “GetMetricData“. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
func (o AlarmMetricDataQueryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) string { return v.Id }).(pulumi.StringOutput)
}

// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If “Label“ is omitted, CW generates a default.
func (o AlarmMetricDataQueryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
//
//	Within one MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
func (o AlarmMetricDataQueryOutput) MetricStat() AlarmMetricStatPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *AlarmMetricStat { return v.MetricStat }).(AlarmMetricStatPtrOutput)
}

// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a “PutMetricData“ operation that includes a “StorageResolution of 1 second“.
func (o AlarmMetricDataQueryOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// This option indicates whether to return the timestamps and raw data values of this metric.
//
//	When you create an alarm based on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm.
//	This field is required.
func (o AlarmMetricDataQueryOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type AlarmMetricDataQueryArrayOutput struct{ *pulumi.OutputState }

func (AlarmMetricDataQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmMetricDataQuery)(nil)).Elem()
}

func (o AlarmMetricDataQueryArrayOutput) ToAlarmMetricDataQueryArrayOutput() AlarmMetricDataQueryArrayOutput {
	return o
}

func (o AlarmMetricDataQueryArrayOutput) ToAlarmMetricDataQueryArrayOutputWithContext(ctx context.Context) AlarmMetricDataQueryArrayOutput {
	return o
}

func (o AlarmMetricDataQueryArrayOutput) Index(i pulumi.IntInput) AlarmMetricDataQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmMetricDataQuery {
		return vs[0].([]AlarmMetricDataQuery)[vs[1].(int)]
	}).(AlarmMetricDataQueryOutput)
}

// This structure defines the metric to be returned, along with the statistics, period, and units.
//
//	``MetricStat`` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html) property type.
type AlarmMetricStat struct {
	// The metric to return, including the metric name, namespace, and dimensions.
	Metric AlarmMetric `pulumi:"metric"`
	// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second.
	//  If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
	//   +  Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
	//   +  Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
	//   +  Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
	Period int `pulumi:"period"`
	// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *User Guide*.
	Stat string `pulumi:"stat"`
	// The unit to use for the returned data points.
	//  Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
	Unit *string `pulumi:"unit"`
}

// AlarmMetricStatInput is an input type that accepts AlarmMetricStatArgs and AlarmMetricStatOutput values.
// You can construct a concrete instance of `AlarmMetricStatInput` via:
//
//	AlarmMetricStatArgs{...}
type AlarmMetricStatInput interface {
	pulumi.Input

	ToAlarmMetricStatOutput() AlarmMetricStatOutput
	ToAlarmMetricStatOutputWithContext(context.Context) AlarmMetricStatOutput
}

// This structure defines the metric to be returned, along with the statistics, period, and units.
//
//	``MetricStat`` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html) property type.
type AlarmMetricStatArgs struct {
	// The metric to return, including the metric name, namespace, and dimensions.
	Metric AlarmMetricInput `pulumi:"metric"`
	// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second.
	//  If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
	//   +  Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
	//   +  Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
	//   +  Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
	Period pulumi.IntInput `pulumi:"period"`
	// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *User Guide*.
	Stat pulumi.StringInput `pulumi:"stat"`
	// The unit to use for the returned data points.
	//  Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (AlarmMetricStatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricStat)(nil)).Elem()
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatOutput() AlarmMetricStatOutput {
	return i.ToAlarmMetricStatOutputWithContext(context.Background())
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatOutputWithContext(ctx context.Context) AlarmMetricStatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricStatOutput)
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return i.ToAlarmMetricStatPtrOutputWithContext(context.Background())
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricStatOutput).ToAlarmMetricStatPtrOutputWithContext(ctx)
}

// AlarmMetricStatPtrInput is an input type that accepts AlarmMetricStatArgs, AlarmMetricStatPtr and AlarmMetricStatPtrOutput values.
// You can construct a concrete instance of `AlarmMetricStatPtrInput` via:
//
//	        AlarmMetricStatArgs{...}
//
//	or:
//
//	        nil
type AlarmMetricStatPtrInput interface {
	pulumi.Input

	ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput
	ToAlarmMetricStatPtrOutputWithContext(context.Context) AlarmMetricStatPtrOutput
}

type alarmMetricStatPtrType AlarmMetricStatArgs

func AlarmMetricStatPtr(v *AlarmMetricStatArgs) AlarmMetricStatPtrInput {
	return (*alarmMetricStatPtrType)(v)
}

func (*alarmMetricStatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetricStat)(nil)).Elem()
}

func (i *alarmMetricStatPtrType) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return i.ToAlarmMetricStatPtrOutputWithContext(context.Background())
}

func (i *alarmMetricStatPtrType) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricStatPtrOutput)
}

// This structure defines the metric to be returned, along with the statistics, period, and units.
//
//	``MetricStat`` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html) property type.
type AlarmMetricStatOutput struct{ *pulumi.OutputState }

func (AlarmMetricStatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricStat)(nil)).Elem()
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatOutput() AlarmMetricStatOutput {
	return o
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatOutputWithContext(ctx context.Context) AlarmMetricStatOutput {
	return o
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return o.ToAlarmMetricStatPtrOutputWithContext(context.Background())
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlarmMetricStat) *AlarmMetricStat {
		return &v
	}).(AlarmMetricStatPtrOutput)
}

// The metric to return, including the metric name, namespace, and dimensions.
func (o AlarmMetricStatOutput) Metric() AlarmMetricOutput {
	return o.ApplyT(func(v AlarmMetricStat) AlarmMetric { return v.Metric }).(AlarmMetricOutput)
}

// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a “PutMetricData“ call that includes a “StorageResolution“ of 1 second.
//
//	If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
//	 +  Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
//	 +  Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
//	 +  Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
func (o AlarmMetricStatOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v AlarmMetricStat) int { return v.Period }).(pulumi.IntOutput)
}

// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *User Guide*.
func (o AlarmMetricStatOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmMetricStat) string { return v.Stat }).(pulumi.StringOutput)
}

// The unit to use for the returned data points.
//
//	Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
func (o AlarmMetricStatOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricStat) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type AlarmMetricStatPtrOutput struct{ *pulumi.OutputState }

func (AlarmMetricStatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetricStat)(nil)).Elem()
}

func (o AlarmMetricStatPtrOutput) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return o
}

func (o AlarmMetricStatPtrOutput) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return o
}

func (o AlarmMetricStatPtrOutput) Elem() AlarmMetricStatOutput {
	return o.ApplyT(func(v *AlarmMetricStat) AlarmMetricStat {
		if v != nil {
			return *v
		}
		var ret AlarmMetricStat
		return ret
	}).(AlarmMetricStatOutput)
}

// The metric to return, including the metric name, namespace, and dimensions.
func (o AlarmMetricStatPtrOutput) Metric() AlarmMetricPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *AlarmMetric {
		if v == nil {
			return nil
		}
		return &v.Metric
	}).(AlarmMetricPtrOutput)
}

// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a “PutMetricData“ call that includes a “StorageResolution“ of 1 second.
//
//	If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
//	 +  Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
//	 +  Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
//	 +  Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
func (o AlarmMetricStatPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

// The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *User Guide*.
func (o AlarmMetricStatPtrOutput) Stat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *string {
		if v == nil {
			return nil
		}
		return &v.Stat
	}).(pulumi.StringPtrOutput)
}

// The unit to use for the returned data points.
//
//	Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
func (o AlarmMetricStatPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// One of the key-value pairs associated with the alarm. Tags can help you organize and categorize your resources.
type AlarmTag struct {
	// A string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
	Key string `pulumi:"key"`
	// The value for the specified tag key.
	Value string `pulumi:"value"`
}

// Metadata that you can assign to a composite alarm, Tags can help you organize and categorize your resources.
type CompositeAlarmTag struct {
	// A unique identifier for the tag. The combination of tag keys and values can help you organize and categorize your resources.
	Key string `pulumi:"key"`
	// The value for the specified tag key.
	Value string `pulumi:"value"`
}

// This structure defines the metrics that will be streamed.
type MetricStreamFilter struct {
	// Only metrics with MetricNames matching these values will be streamed. Must be set together with Namespace.
	MetricNames []string `pulumi:"metricNames"`
	// Only metrics with Namespace matching this value will be streamed.
	Namespace string `pulumi:"namespace"`
}

// MetricStreamFilterInput is an input type that accepts MetricStreamFilterArgs and MetricStreamFilterOutput values.
// You can construct a concrete instance of `MetricStreamFilterInput` via:
//
//	MetricStreamFilterArgs{...}
type MetricStreamFilterInput interface {
	pulumi.Input

	ToMetricStreamFilterOutput() MetricStreamFilterOutput
	ToMetricStreamFilterOutputWithContext(context.Context) MetricStreamFilterOutput
}

// This structure defines the metrics that will be streamed.
type MetricStreamFilterArgs struct {
	// Only metrics with MetricNames matching these values will be streamed. Must be set together with Namespace.
	MetricNames pulumi.StringArrayInput `pulumi:"metricNames"`
	// Only metrics with Namespace matching this value will be streamed.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (MetricStreamFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamFilter)(nil)).Elem()
}

func (i MetricStreamFilterArgs) ToMetricStreamFilterOutput() MetricStreamFilterOutput {
	return i.ToMetricStreamFilterOutputWithContext(context.Background())
}

func (i MetricStreamFilterArgs) ToMetricStreamFilterOutputWithContext(ctx context.Context) MetricStreamFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamFilterOutput)
}

// MetricStreamFilterArrayInput is an input type that accepts MetricStreamFilterArray and MetricStreamFilterArrayOutput values.
// You can construct a concrete instance of `MetricStreamFilterArrayInput` via:
//
//	MetricStreamFilterArray{ MetricStreamFilterArgs{...} }
type MetricStreamFilterArrayInput interface {
	pulumi.Input

	ToMetricStreamFilterArrayOutput() MetricStreamFilterArrayOutput
	ToMetricStreamFilterArrayOutputWithContext(context.Context) MetricStreamFilterArrayOutput
}

type MetricStreamFilterArray []MetricStreamFilterInput

func (MetricStreamFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamFilter)(nil)).Elem()
}

func (i MetricStreamFilterArray) ToMetricStreamFilterArrayOutput() MetricStreamFilterArrayOutput {
	return i.ToMetricStreamFilterArrayOutputWithContext(context.Background())
}

func (i MetricStreamFilterArray) ToMetricStreamFilterArrayOutputWithContext(ctx context.Context) MetricStreamFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamFilterArrayOutput)
}

// This structure defines the metrics that will be streamed.
type MetricStreamFilterOutput struct{ *pulumi.OutputState }

func (MetricStreamFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamFilter)(nil)).Elem()
}

func (o MetricStreamFilterOutput) ToMetricStreamFilterOutput() MetricStreamFilterOutput {
	return o
}

func (o MetricStreamFilterOutput) ToMetricStreamFilterOutputWithContext(ctx context.Context) MetricStreamFilterOutput {
	return o
}

// Only metrics with MetricNames matching these values will be streamed. Must be set together with Namespace.
func (o MetricStreamFilterOutput) MetricNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricStreamFilter) []string { return v.MetricNames }).(pulumi.StringArrayOutput)
}

// Only metrics with Namespace matching this value will be streamed.
func (o MetricStreamFilterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStreamFilter) string { return v.Namespace }).(pulumi.StringOutput)
}

type MetricStreamFilterArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamFilter)(nil)).Elem()
}

func (o MetricStreamFilterArrayOutput) ToMetricStreamFilterArrayOutput() MetricStreamFilterArrayOutput {
	return o
}

func (o MetricStreamFilterArrayOutput) ToMetricStreamFilterArrayOutputWithContext(ctx context.Context) MetricStreamFilterArrayOutput {
	return o
}

func (o MetricStreamFilterArrayOutput) Index(i pulumi.IntInput) MetricStreamFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStreamFilter {
		return vs[0].([]MetricStreamFilter)[vs[1].(int)]
	}).(MetricStreamFilterOutput)
}

// This structure specifies a list of additional statistics to stream, and the metrics to stream those additional statistics for. All metrics that match the combination of metric name and namespace will be streamed with the extended statistics, no matter their dimensions.
type MetricStreamStatisticsConfiguration struct {
	// The additional statistics to stream for the metrics listed in IncludeMetrics.
	AdditionalStatistics []string `pulumi:"additionalStatistics"`
	// An array that defines the metrics that are to have additional statistics streamed.
	IncludeMetrics []MetricStreamStatisticsMetric `pulumi:"includeMetrics"`
}

// MetricStreamStatisticsConfigurationInput is an input type that accepts MetricStreamStatisticsConfigurationArgs and MetricStreamStatisticsConfigurationOutput values.
// You can construct a concrete instance of `MetricStreamStatisticsConfigurationInput` via:
//
//	MetricStreamStatisticsConfigurationArgs{...}
type MetricStreamStatisticsConfigurationInput interface {
	pulumi.Input

	ToMetricStreamStatisticsConfigurationOutput() MetricStreamStatisticsConfigurationOutput
	ToMetricStreamStatisticsConfigurationOutputWithContext(context.Context) MetricStreamStatisticsConfigurationOutput
}

// This structure specifies a list of additional statistics to stream, and the metrics to stream those additional statistics for. All metrics that match the combination of metric name and namespace will be streamed with the extended statistics, no matter their dimensions.
type MetricStreamStatisticsConfigurationArgs struct {
	// The additional statistics to stream for the metrics listed in IncludeMetrics.
	AdditionalStatistics pulumi.StringArrayInput `pulumi:"additionalStatistics"`
	// An array that defines the metrics that are to have additional statistics streamed.
	IncludeMetrics MetricStreamStatisticsMetricArrayInput `pulumi:"includeMetrics"`
}

func (MetricStreamStatisticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsConfiguration)(nil)).Elem()
}

func (i MetricStreamStatisticsConfigurationArgs) ToMetricStreamStatisticsConfigurationOutput() MetricStreamStatisticsConfigurationOutput {
	return i.ToMetricStreamStatisticsConfigurationOutputWithContext(context.Background())
}

func (i MetricStreamStatisticsConfigurationArgs) ToMetricStreamStatisticsConfigurationOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamStatisticsConfigurationOutput)
}

// MetricStreamStatisticsConfigurationArrayInput is an input type that accepts MetricStreamStatisticsConfigurationArray and MetricStreamStatisticsConfigurationArrayOutput values.
// You can construct a concrete instance of `MetricStreamStatisticsConfigurationArrayInput` via:
//
//	MetricStreamStatisticsConfigurationArray{ MetricStreamStatisticsConfigurationArgs{...} }
type MetricStreamStatisticsConfigurationArrayInput interface {
	pulumi.Input

	ToMetricStreamStatisticsConfigurationArrayOutput() MetricStreamStatisticsConfigurationArrayOutput
	ToMetricStreamStatisticsConfigurationArrayOutputWithContext(context.Context) MetricStreamStatisticsConfigurationArrayOutput
}

type MetricStreamStatisticsConfigurationArray []MetricStreamStatisticsConfigurationInput

func (MetricStreamStatisticsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamStatisticsConfiguration)(nil)).Elem()
}

func (i MetricStreamStatisticsConfigurationArray) ToMetricStreamStatisticsConfigurationArrayOutput() MetricStreamStatisticsConfigurationArrayOutput {
	return i.ToMetricStreamStatisticsConfigurationArrayOutputWithContext(context.Background())
}

func (i MetricStreamStatisticsConfigurationArray) ToMetricStreamStatisticsConfigurationArrayOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamStatisticsConfigurationArrayOutput)
}

// This structure specifies a list of additional statistics to stream, and the metrics to stream those additional statistics for. All metrics that match the combination of metric name and namespace will be streamed with the extended statistics, no matter their dimensions.
type MetricStreamStatisticsConfigurationOutput struct{ *pulumi.OutputState }

func (MetricStreamStatisticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsConfiguration)(nil)).Elem()
}

func (o MetricStreamStatisticsConfigurationOutput) ToMetricStreamStatisticsConfigurationOutput() MetricStreamStatisticsConfigurationOutput {
	return o
}

func (o MetricStreamStatisticsConfigurationOutput) ToMetricStreamStatisticsConfigurationOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationOutput {
	return o
}

// The additional statistics to stream for the metrics listed in IncludeMetrics.
func (o MetricStreamStatisticsConfigurationOutput) AdditionalStatistics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricStreamStatisticsConfiguration) []string { return v.AdditionalStatistics }).(pulumi.StringArrayOutput)
}

// An array that defines the metrics that are to have additional statistics streamed.
func (o MetricStreamStatisticsConfigurationOutput) IncludeMetrics() MetricStreamStatisticsMetricArrayOutput {
	return o.ApplyT(func(v MetricStreamStatisticsConfiguration) []MetricStreamStatisticsMetric { return v.IncludeMetrics }).(MetricStreamStatisticsMetricArrayOutput)
}

type MetricStreamStatisticsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamStatisticsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamStatisticsConfiguration)(nil)).Elem()
}

func (o MetricStreamStatisticsConfigurationArrayOutput) ToMetricStreamStatisticsConfigurationArrayOutput() MetricStreamStatisticsConfigurationArrayOutput {
	return o
}

func (o MetricStreamStatisticsConfigurationArrayOutput) ToMetricStreamStatisticsConfigurationArrayOutputWithContext(ctx context.Context) MetricStreamStatisticsConfigurationArrayOutput {
	return o
}

func (o MetricStreamStatisticsConfigurationArrayOutput) Index(i pulumi.IntInput) MetricStreamStatisticsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStreamStatisticsConfiguration {
		return vs[0].([]MetricStreamStatisticsConfiguration)[vs[1].(int)]
	}).(MetricStreamStatisticsConfigurationOutput)
}

// A structure that specifies the metric name and namespace for one metric that is going to have additional statistics included in the stream.
type MetricStreamStatisticsMetric struct {
	// The name of the metric.
	MetricName string `pulumi:"metricName"`
	// The namespace of the metric.
	Namespace string `pulumi:"namespace"`
}

// MetricStreamStatisticsMetricInput is an input type that accepts MetricStreamStatisticsMetricArgs and MetricStreamStatisticsMetricOutput values.
// You can construct a concrete instance of `MetricStreamStatisticsMetricInput` via:
//
//	MetricStreamStatisticsMetricArgs{...}
type MetricStreamStatisticsMetricInput interface {
	pulumi.Input

	ToMetricStreamStatisticsMetricOutput() MetricStreamStatisticsMetricOutput
	ToMetricStreamStatisticsMetricOutputWithContext(context.Context) MetricStreamStatisticsMetricOutput
}

// A structure that specifies the metric name and namespace for one metric that is going to have additional statistics included in the stream.
type MetricStreamStatisticsMetricArgs struct {
	// The name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The namespace of the metric.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (MetricStreamStatisticsMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsMetric)(nil)).Elem()
}

func (i MetricStreamStatisticsMetricArgs) ToMetricStreamStatisticsMetricOutput() MetricStreamStatisticsMetricOutput {
	return i.ToMetricStreamStatisticsMetricOutputWithContext(context.Background())
}

func (i MetricStreamStatisticsMetricArgs) ToMetricStreamStatisticsMetricOutputWithContext(ctx context.Context) MetricStreamStatisticsMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamStatisticsMetricOutput)
}

// MetricStreamStatisticsMetricArrayInput is an input type that accepts MetricStreamStatisticsMetricArray and MetricStreamStatisticsMetricArrayOutput values.
// You can construct a concrete instance of `MetricStreamStatisticsMetricArrayInput` via:
//
//	MetricStreamStatisticsMetricArray{ MetricStreamStatisticsMetricArgs{...} }
type MetricStreamStatisticsMetricArrayInput interface {
	pulumi.Input

	ToMetricStreamStatisticsMetricArrayOutput() MetricStreamStatisticsMetricArrayOutput
	ToMetricStreamStatisticsMetricArrayOutputWithContext(context.Context) MetricStreamStatisticsMetricArrayOutput
}

type MetricStreamStatisticsMetricArray []MetricStreamStatisticsMetricInput

func (MetricStreamStatisticsMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamStatisticsMetric)(nil)).Elem()
}

func (i MetricStreamStatisticsMetricArray) ToMetricStreamStatisticsMetricArrayOutput() MetricStreamStatisticsMetricArrayOutput {
	return i.ToMetricStreamStatisticsMetricArrayOutputWithContext(context.Background())
}

func (i MetricStreamStatisticsMetricArray) ToMetricStreamStatisticsMetricArrayOutputWithContext(ctx context.Context) MetricStreamStatisticsMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamStatisticsMetricArrayOutput)
}

// A structure that specifies the metric name and namespace for one metric that is going to have additional statistics included in the stream.
type MetricStreamStatisticsMetricOutput struct{ *pulumi.OutputState }

func (MetricStreamStatisticsMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamStatisticsMetric)(nil)).Elem()
}

func (o MetricStreamStatisticsMetricOutput) ToMetricStreamStatisticsMetricOutput() MetricStreamStatisticsMetricOutput {
	return o
}

func (o MetricStreamStatisticsMetricOutput) ToMetricStreamStatisticsMetricOutputWithContext(ctx context.Context) MetricStreamStatisticsMetricOutput {
	return o
}

// The name of the metric.
func (o MetricStreamStatisticsMetricOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStreamStatisticsMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace of the metric.
func (o MetricStreamStatisticsMetricOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStreamStatisticsMetric) string { return v.Namespace }).(pulumi.StringOutput)
}

type MetricStreamStatisticsMetricArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamStatisticsMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamStatisticsMetric)(nil)).Elem()
}

func (o MetricStreamStatisticsMetricArrayOutput) ToMetricStreamStatisticsMetricArrayOutput() MetricStreamStatisticsMetricArrayOutput {
	return o
}

func (o MetricStreamStatisticsMetricArrayOutput) ToMetricStreamStatisticsMetricArrayOutputWithContext(ctx context.Context) MetricStreamStatisticsMetricArrayOutput {
	return o
}

func (o MetricStreamStatisticsMetricArrayOutput) Index(i pulumi.IntInput) MetricStreamStatisticsMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStreamStatisticsMetric {
		return vs[0].([]MetricStreamStatisticsMetric)[vs[1].(int)]
	}).(MetricStreamStatisticsMetricOutput)
}

// Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
type MetricStreamTag struct {
	// A unique identifier for the tag.
	Key string `pulumi:"key"`
	// String which you can use to describe or define the tag.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmDimensionInput)(nil)).Elem(), AlarmDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmDimensionArrayInput)(nil)).Elem(), AlarmDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricInput)(nil)).Elem(), AlarmMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricPtrInput)(nil)).Elem(), AlarmMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricDataQueryInput)(nil)).Elem(), AlarmMetricDataQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricDataQueryArrayInput)(nil)).Elem(), AlarmMetricDataQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricStatInput)(nil)).Elem(), AlarmMetricStatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricStatPtrInput)(nil)).Elem(), AlarmMetricStatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamFilterInput)(nil)).Elem(), MetricStreamFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamFilterArrayInput)(nil)).Elem(), MetricStreamFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamStatisticsConfigurationInput)(nil)).Elem(), MetricStreamStatisticsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamStatisticsConfigurationArrayInput)(nil)).Elem(), MetricStreamStatisticsConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamStatisticsMetricInput)(nil)).Elem(), MetricStreamStatisticsMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamStatisticsMetricArrayInput)(nil)).Elem(), MetricStreamStatisticsMetricArray{})
	pulumi.RegisterOutputType(AlarmDimensionOutput{})
	pulumi.RegisterOutputType(AlarmDimensionArrayOutput{})
	pulumi.RegisterOutputType(AlarmMetricOutput{})
	pulumi.RegisterOutputType(AlarmMetricPtrOutput{})
	pulumi.RegisterOutputType(AlarmMetricDataQueryOutput{})
	pulumi.RegisterOutputType(AlarmMetricDataQueryArrayOutput{})
	pulumi.RegisterOutputType(AlarmMetricStatOutput{})
	pulumi.RegisterOutputType(AlarmMetricStatPtrOutput{})
	pulumi.RegisterOutputType(MetricStreamFilterOutput{})
	pulumi.RegisterOutputType(MetricStreamFilterArrayOutput{})
	pulumi.RegisterOutputType(MetricStreamStatisticsConfigurationOutput{})
	pulumi.RegisterOutputType(MetricStreamStatisticsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(MetricStreamStatisticsMetricOutput{})
	pulumi.RegisterOutputType(MetricStreamStatisticsMetricArrayOutput{})
}
