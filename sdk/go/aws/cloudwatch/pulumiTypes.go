// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlarmDimension struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// AlarmDimensionInput is an input type that accepts AlarmDimensionArgs and AlarmDimensionOutput values.
// You can construct a concrete instance of `AlarmDimensionInput` via:
//
//          AlarmDimensionArgs{...}
type AlarmDimensionInput interface {
	pulumi.Input

	ToAlarmDimensionOutput() AlarmDimensionOutput
	ToAlarmDimensionOutputWithContext(context.Context) AlarmDimensionOutput
}

type AlarmDimensionArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlarmDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmDimension)(nil)).Elem()
}

func (i AlarmDimensionArgs) ToAlarmDimensionOutput() AlarmDimensionOutput {
	return i.ToAlarmDimensionOutputWithContext(context.Background())
}

func (i AlarmDimensionArgs) ToAlarmDimensionOutputWithContext(ctx context.Context) AlarmDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmDimensionOutput)
}

// AlarmDimensionArrayInput is an input type that accepts AlarmDimensionArray and AlarmDimensionArrayOutput values.
// You can construct a concrete instance of `AlarmDimensionArrayInput` via:
//
//          AlarmDimensionArray{ AlarmDimensionArgs{...} }
type AlarmDimensionArrayInput interface {
	pulumi.Input

	ToAlarmDimensionArrayOutput() AlarmDimensionArrayOutput
	ToAlarmDimensionArrayOutputWithContext(context.Context) AlarmDimensionArrayOutput
}

type AlarmDimensionArray []AlarmDimensionInput

func (AlarmDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmDimension)(nil)).Elem()
}

func (i AlarmDimensionArray) ToAlarmDimensionArrayOutput() AlarmDimensionArrayOutput {
	return i.ToAlarmDimensionArrayOutputWithContext(context.Background())
}

func (i AlarmDimensionArray) ToAlarmDimensionArrayOutputWithContext(ctx context.Context) AlarmDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmDimensionArrayOutput)
}

type AlarmDimensionOutput struct{ *pulumi.OutputState }

func (AlarmDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmDimension)(nil)).Elem()
}

func (o AlarmDimensionOutput) ToAlarmDimensionOutput() AlarmDimensionOutput {
	return o
}

func (o AlarmDimensionOutput) ToAlarmDimensionOutputWithContext(ctx context.Context) AlarmDimensionOutput {
	return o
}

func (o AlarmDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmDimension) string { return v.Name }).(pulumi.StringOutput)
}

func (o AlarmDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmDimension) string { return v.Value }).(pulumi.StringOutput)
}

type AlarmDimensionArrayOutput struct{ *pulumi.OutputState }

func (AlarmDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmDimension)(nil)).Elem()
}

func (o AlarmDimensionArrayOutput) ToAlarmDimensionArrayOutput() AlarmDimensionArrayOutput {
	return o
}

func (o AlarmDimensionArrayOutput) ToAlarmDimensionArrayOutputWithContext(ctx context.Context) AlarmDimensionArrayOutput {
	return o
}

func (o AlarmDimensionArrayOutput) Index(i pulumi.IntInput) AlarmDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmDimension {
		return vs[0].([]AlarmDimension)[vs[1].(int)]
	}).(AlarmDimensionOutput)
}

type AlarmMetric struct {
	Dimensions []AlarmDimension `pulumi:"dimensions"`
	MetricName *string          `pulumi:"metricName"`
	Namespace  *string          `pulumi:"namespace"`
}

// AlarmMetricInput is an input type that accepts AlarmMetricArgs and AlarmMetricOutput values.
// You can construct a concrete instance of `AlarmMetricInput` via:
//
//          AlarmMetricArgs{...}
type AlarmMetricInput interface {
	pulumi.Input

	ToAlarmMetricOutput() AlarmMetricOutput
	ToAlarmMetricOutputWithContext(context.Context) AlarmMetricOutput
}

type AlarmMetricArgs struct {
	Dimensions AlarmDimensionArrayInput `pulumi:"dimensions"`
	MetricName pulumi.StringPtrInput    `pulumi:"metricName"`
	Namespace  pulumi.StringPtrInput    `pulumi:"namespace"`
}

func (AlarmMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetric)(nil)).Elem()
}

func (i AlarmMetricArgs) ToAlarmMetricOutput() AlarmMetricOutput {
	return i.ToAlarmMetricOutputWithContext(context.Background())
}

func (i AlarmMetricArgs) ToAlarmMetricOutputWithContext(ctx context.Context) AlarmMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricOutput)
}

func (i AlarmMetricArgs) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return i.ToAlarmMetricPtrOutputWithContext(context.Background())
}

func (i AlarmMetricArgs) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricOutput).ToAlarmMetricPtrOutputWithContext(ctx)
}

// AlarmMetricPtrInput is an input type that accepts AlarmMetricArgs, AlarmMetricPtr and AlarmMetricPtrOutput values.
// You can construct a concrete instance of `AlarmMetricPtrInput` via:
//
//          AlarmMetricArgs{...}
//
//  or:
//
//          nil
type AlarmMetricPtrInput interface {
	pulumi.Input

	ToAlarmMetricPtrOutput() AlarmMetricPtrOutput
	ToAlarmMetricPtrOutputWithContext(context.Context) AlarmMetricPtrOutput
}

type alarmMetricPtrType AlarmMetricArgs

func AlarmMetricPtr(v *AlarmMetricArgs) AlarmMetricPtrInput {
	return (*alarmMetricPtrType)(v)
}

func (*alarmMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetric)(nil)).Elem()
}

func (i *alarmMetricPtrType) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return i.ToAlarmMetricPtrOutputWithContext(context.Background())
}

func (i *alarmMetricPtrType) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricPtrOutput)
}

type AlarmMetricOutput struct{ *pulumi.OutputState }

func (AlarmMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetric)(nil)).Elem()
}

func (o AlarmMetricOutput) ToAlarmMetricOutput() AlarmMetricOutput {
	return o
}

func (o AlarmMetricOutput) ToAlarmMetricOutputWithContext(ctx context.Context) AlarmMetricOutput {
	return o
}

func (o AlarmMetricOutput) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return o.ToAlarmMetricPtrOutputWithContext(context.Background())
}

func (o AlarmMetricOutput) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlarmMetric) *AlarmMetric {
		return &v
	}).(AlarmMetricPtrOutput)
}

func (o AlarmMetricOutput) Dimensions() AlarmDimensionArrayOutput {
	return o.ApplyT(func(v AlarmMetric) []AlarmDimension { return v.Dimensions }).(AlarmDimensionArrayOutput)
}

func (o AlarmMetricOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetric) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

func (o AlarmMetricOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetric) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type AlarmMetricPtrOutput struct{ *pulumi.OutputState }

func (AlarmMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetric)(nil)).Elem()
}

func (o AlarmMetricPtrOutput) ToAlarmMetricPtrOutput() AlarmMetricPtrOutput {
	return o
}

func (o AlarmMetricPtrOutput) ToAlarmMetricPtrOutputWithContext(ctx context.Context) AlarmMetricPtrOutput {
	return o
}

func (o AlarmMetricPtrOutput) Elem() AlarmMetricOutput {
	return o.ApplyT(func(v *AlarmMetric) AlarmMetric {
		if v != nil {
			return *v
		}
		var ret AlarmMetric
		return ret
	}).(AlarmMetricOutput)
}

func (o AlarmMetricPtrOutput) Dimensions() AlarmDimensionArrayOutput {
	return o.ApplyT(func(v *AlarmMetric) []AlarmDimension {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(AlarmDimensionArrayOutput)
}

func (o AlarmMetricPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetric) *string {
		if v == nil {
			return nil
		}
		return v.MetricName
	}).(pulumi.StringPtrOutput)
}

func (o AlarmMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetric) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type AlarmMetricDataQuery struct {
	AccountId  *string          `pulumi:"accountId"`
	Expression *string          `pulumi:"expression"`
	Id         string           `pulumi:"id"`
	Label      *string          `pulumi:"label"`
	MetricStat *AlarmMetricStat `pulumi:"metricStat"`
	Period     *int             `pulumi:"period"`
	ReturnData *bool            `pulumi:"returnData"`
}

// AlarmMetricDataQueryInput is an input type that accepts AlarmMetricDataQueryArgs and AlarmMetricDataQueryOutput values.
// You can construct a concrete instance of `AlarmMetricDataQueryInput` via:
//
//          AlarmMetricDataQueryArgs{...}
type AlarmMetricDataQueryInput interface {
	pulumi.Input

	ToAlarmMetricDataQueryOutput() AlarmMetricDataQueryOutput
	ToAlarmMetricDataQueryOutputWithContext(context.Context) AlarmMetricDataQueryOutput
}

type AlarmMetricDataQueryArgs struct {
	AccountId  pulumi.StringPtrInput   `pulumi:"accountId"`
	Expression pulumi.StringPtrInput   `pulumi:"expression"`
	Id         pulumi.StringInput      `pulumi:"id"`
	Label      pulumi.StringPtrInput   `pulumi:"label"`
	MetricStat AlarmMetricStatPtrInput `pulumi:"metricStat"`
	Period     pulumi.IntPtrInput      `pulumi:"period"`
	ReturnData pulumi.BoolPtrInput     `pulumi:"returnData"`
}

func (AlarmMetricDataQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricDataQuery)(nil)).Elem()
}

func (i AlarmMetricDataQueryArgs) ToAlarmMetricDataQueryOutput() AlarmMetricDataQueryOutput {
	return i.ToAlarmMetricDataQueryOutputWithContext(context.Background())
}

func (i AlarmMetricDataQueryArgs) ToAlarmMetricDataQueryOutputWithContext(ctx context.Context) AlarmMetricDataQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricDataQueryOutput)
}

// AlarmMetricDataQueryArrayInput is an input type that accepts AlarmMetricDataQueryArray and AlarmMetricDataQueryArrayOutput values.
// You can construct a concrete instance of `AlarmMetricDataQueryArrayInput` via:
//
//          AlarmMetricDataQueryArray{ AlarmMetricDataQueryArgs{...} }
type AlarmMetricDataQueryArrayInput interface {
	pulumi.Input

	ToAlarmMetricDataQueryArrayOutput() AlarmMetricDataQueryArrayOutput
	ToAlarmMetricDataQueryArrayOutputWithContext(context.Context) AlarmMetricDataQueryArrayOutput
}

type AlarmMetricDataQueryArray []AlarmMetricDataQueryInput

func (AlarmMetricDataQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmMetricDataQuery)(nil)).Elem()
}

func (i AlarmMetricDataQueryArray) ToAlarmMetricDataQueryArrayOutput() AlarmMetricDataQueryArrayOutput {
	return i.ToAlarmMetricDataQueryArrayOutputWithContext(context.Background())
}

func (i AlarmMetricDataQueryArray) ToAlarmMetricDataQueryArrayOutputWithContext(ctx context.Context) AlarmMetricDataQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricDataQueryArrayOutput)
}

type AlarmMetricDataQueryOutput struct{ *pulumi.OutputState }

func (AlarmMetricDataQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricDataQuery)(nil)).Elem()
}

func (o AlarmMetricDataQueryOutput) ToAlarmMetricDataQueryOutput() AlarmMetricDataQueryOutput {
	return o
}

func (o AlarmMetricDataQueryOutput) ToAlarmMetricDataQueryOutputWithContext(ctx context.Context) AlarmMetricDataQueryOutput {
	return o
}

func (o AlarmMetricDataQueryOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

func (o AlarmMetricDataQueryOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o AlarmMetricDataQueryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) string { return v.Id }).(pulumi.StringOutput)
}

func (o AlarmMetricDataQueryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o AlarmMetricDataQueryOutput) MetricStat() AlarmMetricStatPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *AlarmMetricStat { return v.MetricStat }).(AlarmMetricStatPtrOutput)
}

func (o AlarmMetricDataQueryOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *int { return v.Period }).(pulumi.IntPtrOutput)
}

func (o AlarmMetricDataQueryOutput) ReturnData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlarmMetricDataQuery) *bool { return v.ReturnData }).(pulumi.BoolPtrOutput)
}

type AlarmMetricDataQueryArrayOutput struct{ *pulumi.OutputState }

func (AlarmMetricDataQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmMetricDataQuery)(nil)).Elem()
}

func (o AlarmMetricDataQueryArrayOutput) ToAlarmMetricDataQueryArrayOutput() AlarmMetricDataQueryArrayOutput {
	return o
}

func (o AlarmMetricDataQueryArrayOutput) ToAlarmMetricDataQueryArrayOutputWithContext(ctx context.Context) AlarmMetricDataQueryArrayOutput {
	return o
}

func (o AlarmMetricDataQueryArrayOutput) Index(i pulumi.IntInput) AlarmMetricDataQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmMetricDataQuery {
		return vs[0].([]AlarmMetricDataQuery)[vs[1].(int)]
	}).(AlarmMetricDataQueryOutput)
}

type AlarmMetricStat struct {
	Metric AlarmMetric `pulumi:"metric"`
	Period int         `pulumi:"period"`
	Stat   string      `pulumi:"stat"`
	Unit   *string     `pulumi:"unit"`
}

// AlarmMetricStatInput is an input type that accepts AlarmMetricStatArgs and AlarmMetricStatOutput values.
// You can construct a concrete instance of `AlarmMetricStatInput` via:
//
//          AlarmMetricStatArgs{...}
type AlarmMetricStatInput interface {
	pulumi.Input

	ToAlarmMetricStatOutput() AlarmMetricStatOutput
	ToAlarmMetricStatOutputWithContext(context.Context) AlarmMetricStatOutput
}

type AlarmMetricStatArgs struct {
	Metric AlarmMetricInput      `pulumi:"metric"`
	Period pulumi.IntInput       `pulumi:"period"`
	Stat   pulumi.StringInput    `pulumi:"stat"`
	Unit   pulumi.StringPtrInput `pulumi:"unit"`
}

func (AlarmMetricStatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricStat)(nil)).Elem()
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatOutput() AlarmMetricStatOutput {
	return i.ToAlarmMetricStatOutputWithContext(context.Background())
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatOutputWithContext(ctx context.Context) AlarmMetricStatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricStatOutput)
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return i.ToAlarmMetricStatPtrOutputWithContext(context.Background())
}

func (i AlarmMetricStatArgs) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricStatOutput).ToAlarmMetricStatPtrOutputWithContext(ctx)
}

// AlarmMetricStatPtrInput is an input type that accepts AlarmMetricStatArgs, AlarmMetricStatPtr and AlarmMetricStatPtrOutput values.
// You can construct a concrete instance of `AlarmMetricStatPtrInput` via:
//
//          AlarmMetricStatArgs{...}
//
//  or:
//
//          nil
type AlarmMetricStatPtrInput interface {
	pulumi.Input

	ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput
	ToAlarmMetricStatPtrOutputWithContext(context.Context) AlarmMetricStatPtrOutput
}

type alarmMetricStatPtrType AlarmMetricStatArgs

func AlarmMetricStatPtr(v *AlarmMetricStatArgs) AlarmMetricStatPtrInput {
	return (*alarmMetricStatPtrType)(v)
}

func (*alarmMetricStatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetricStat)(nil)).Elem()
}

func (i *alarmMetricStatPtrType) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return i.ToAlarmMetricStatPtrOutputWithContext(context.Background())
}

func (i *alarmMetricStatPtrType) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMetricStatPtrOutput)
}

type AlarmMetricStatOutput struct{ *pulumi.OutputState }

func (AlarmMetricStatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmMetricStat)(nil)).Elem()
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatOutput() AlarmMetricStatOutput {
	return o
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatOutputWithContext(ctx context.Context) AlarmMetricStatOutput {
	return o
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return o.ToAlarmMetricStatPtrOutputWithContext(context.Background())
}

func (o AlarmMetricStatOutput) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlarmMetricStat) *AlarmMetricStat {
		return &v
	}).(AlarmMetricStatPtrOutput)
}

func (o AlarmMetricStatOutput) Metric() AlarmMetricOutput {
	return o.ApplyT(func(v AlarmMetricStat) AlarmMetric { return v.Metric }).(AlarmMetricOutput)
}

func (o AlarmMetricStatOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v AlarmMetricStat) int { return v.Period }).(pulumi.IntOutput)
}

func (o AlarmMetricStatOutput) Stat() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmMetricStat) string { return v.Stat }).(pulumi.StringOutput)
}

func (o AlarmMetricStatOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmMetricStat) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type AlarmMetricStatPtrOutput struct{ *pulumi.OutputState }

func (AlarmMetricStatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmMetricStat)(nil)).Elem()
}

func (o AlarmMetricStatPtrOutput) ToAlarmMetricStatPtrOutput() AlarmMetricStatPtrOutput {
	return o
}

func (o AlarmMetricStatPtrOutput) ToAlarmMetricStatPtrOutputWithContext(ctx context.Context) AlarmMetricStatPtrOutput {
	return o
}

func (o AlarmMetricStatPtrOutput) Elem() AlarmMetricStatOutput {
	return o.ApplyT(func(v *AlarmMetricStat) AlarmMetricStat {
		if v != nil {
			return *v
		}
		var ret AlarmMetricStat
		return ret
	}).(AlarmMetricStatOutput)
}

func (o AlarmMetricStatPtrOutput) Metric() AlarmMetricPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *AlarmMetric {
		if v == nil {
			return nil
		}
		return &v.Metric
	}).(AlarmMetricPtrOutput)
}

func (o AlarmMetricStatPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

func (o AlarmMetricStatPtrOutput) Stat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *string {
		if v == nil {
			return nil
		}
		return &v.Stat
	}).(pulumi.StringPtrOutput)
}

func (o AlarmMetricStatPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmMetricStat) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

type AnomalyDetectorConfiguration struct {
	ExcludedTimeRanges []AnomalyDetectorRange `pulumi:"excludedTimeRanges"`
	MetricTimeZone     *string                `pulumi:"metricTimeZone"`
}

// AnomalyDetectorConfigurationInput is an input type that accepts AnomalyDetectorConfigurationArgs and AnomalyDetectorConfigurationOutput values.
// You can construct a concrete instance of `AnomalyDetectorConfigurationInput` via:
//
//          AnomalyDetectorConfigurationArgs{...}
type AnomalyDetectorConfigurationInput interface {
	pulumi.Input

	ToAnomalyDetectorConfigurationOutput() AnomalyDetectorConfigurationOutput
	ToAnomalyDetectorConfigurationOutputWithContext(context.Context) AnomalyDetectorConfigurationOutput
}

type AnomalyDetectorConfigurationArgs struct {
	ExcludedTimeRanges AnomalyDetectorRangeArrayInput `pulumi:"excludedTimeRanges"`
	MetricTimeZone     pulumi.StringPtrInput          `pulumi:"metricTimeZone"`
}

func (AnomalyDetectorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalyDetectorConfiguration)(nil)).Elem()
}

func (i AnomalyDetectorConfigurationArgs) ToAnomalyDetectorConfigurationOutput() AnomalyDetectorConfigurationOutput {
	return i.ToAnomalyDetectorConfigurationOutputWithContext(context.Background())
}

func (i AnomalyDetectorConfigurationArgs) ToAnomalyDetectorConfigurationOutputWithContext(ctx context.Context) AnomalyDetectorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectorConfigurationOutput)
}

func (i AnomalyDetectorConfigurationArgs) ToAnomalyDetectorConfigurationPtrOutput() AnomalyDetectorConfigurationPtrOutput {
	return i.ToAnomalyDetectorConfigurationPtrOutputWithContext(context.Background())
}

func (i AnomalyDetectorConfigurationArgs) ToAnomalyDetectorConfigurationPtrOutputWithContext(ctx context.Context) AnomalyDetectorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectorConfigurationOutput).ToAnomalyDetectorConfigurationPtrOutputWithContext(ctx)
}

// AnomalyDetectorConfigurationPtrInput is an input type that accepts AnomalyDetectorConfigurationArgs, AnomalyDetectorConfigurationPtr and AnomalyDetectorConfigurationPtrOutput values.
// You can construct a concrete instance of `AnomalyDetectorConfigurationPtrInput` via:
//
//          AnomalyDetectorConfigurationArgs{...}
//
//  or:
//
//          nil
type AnomalyDetectorConfigurationPtrInput interface {
	pulumi.Input

	ToAnomalyDetectorConfigurationPtrOutput() AnomalyDetectorConfigurationPtrOutput
	ToAnomalyDetectorConfigurationPtrOutputWithContext(context.Context) AnomalyDetectorConfigurationPtrOutput
}

type anomalyDetectorConfigurationPtrType AnomalyDetectorConfigurationArgs

func AnomalyDetectorConfigurationPtr(v *AnomalyDetectorConfigurationArgs) AnomalyDetectorConfigurationPtrInput {
	return (*anomalyDetectorConfigurationPtrType)(v)
}

func (*anomalyDetectorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalyDetectorConfiguration)(nil)).Elem()
}

func (i *anomalyDetectorConfigurationPtrType) ToAnomalyDetectorConfigurationPtrOutput() AnomalyDetectorConfigurationPtrOutput {
	return i.ToAnomalyDetectorConfigurationPtrOutputWithContext(context.Background())
}

func (i *anomalyDetectorConfigurationPtrType) ToAnomalyDetectorConfigurationPtrOutputWithContext(ctx context.Context) AnomalyDetectorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectorConfigurationPtrOutput)
}

type AnomalyDetectorConfigurationOutput struct{ *pulumi.OutputState }

func (AnomalyDetectorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalyDetectorConfiguration)(nil)).Elem()
}

func (o AnomalyDetectorConfigurationOutput) ToAnomalyDetectorConfigurationOutput() AnomalyDetectorConfigurationOutput {
	return o
}

func (o AnomalyDetectorConfigurationOutput) ToAnomalyDetectorConfigurationOutputWithContext(ctx context.Context) AnomalyDetectorConfigurationOutput {
	return o
}

func (o AnomalyDetectorConfigurationOutput) ToAnomalyDetectorConfigurationPtrOutput() AnomalyDetectorConfigurationPtrOutput {
	return o.ToAnomalyDetectorConfigurationPtrOutputWithContext(context.Background())
}

func (o AnomalyDetectorConfigurationOutput) ToAnomalyDetectorConfigurationPtrOutputWithContext(ctx context.Context) AnomalyDetectorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnomalyDetectorConfiguration) *AnomalyDetectorConfiguration {
		return &v
	}).(AnomalyDetectorConfigurationPtrOutput)
}

func (o AnomalyDetectorConfigurationOutput) ExcludedTimeRanges() AnomalyDetectorRangeArrayOutput {
	return o.ApplyT(func(v AnomalyDetectorConfiguration) []AnomalyDetectorRange { return v.ExcludedTimeRanges }).(AnomalyDetectorRangeArrayOutput)
}

func (o AnomalyDetectorConfigurationOutput) MetricTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnomalyDetectorConfiguration) *string { return v.MetricTimeZone }).(pulumi.StringPtrOutput)
}

type AnomalyDetectorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AnomalyDetectorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalyDetectorConfiguration)(nil)).Elem()
}

func (o AnomalyDetectorConfigurationPtrOutput) ToAnomalyDetectorConfigurationPtrOutput() AnomalyDetectorConfigurationPtrOutput {
	return o
}

func (o AnomalyDetectorConfigurationPtrOutput) ToAnomalyDetectorConfigurationPtrOutputWithContext(ctx context.Context) AnomalyDetectorConfigurationPtrOutput {
	return o
}

func (o AnomalyDetectorConfigurationPtrOutput) Elem() AnomalyDetectorConfigurationOutput {
	return o.ApplyT(func(v *AnomalyDetectorConfiguration) AnomalyDetectorConfiguration {
		if v != nil {
			return *v
		}
		var ret AnomalyDetectorConfiguration
		return ret
	}).(AnomalyDetectorConfigurationOutput)
}

func (o AnomalyDetectorConfigurationPtrOutput) ExcludedTimeRanges() AnomalyDetectorRangeArrayOutput {
	return o.ApplyT(func(v *AnomalyDetectorConfiguration) []AnomalyDetectorRange {
		if v == nil {
			return nil
		}
		return v.ExcludedTimeRanges
	}).(AnomalyDetectorRangeArrayOutput)
}

func (o AnomalyDetectorConfigurationPtrOutput) MetricTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnomalyDetectorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MetricTimeZone
	}).(pulumi.StringPtrOutput)
}

type AnomalyDetectorDimension struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// AnomalyDetectorDimensionInput is an input type that accepts AnomalyDetectorDimensionArgs and AnomalyDetectorDimensionOutput values.
// You can construct a concrete instance of `AnomalyDetectorDimensionInput` via:
//
//          AnomalyDetectorDimensionArgs{...}
type AnomalyDetectorDimensionInput interface {
	pulumi.Input

	ToAnomalyDetectorDimensionOutput() AnomalyDetectorDimensionOutput
	ToAnomalyDetectorDimensionOutputWithContext(context.Context) AnomalyDetectorDimensionOutput
}

type AnomalyDetectorDimensionArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AnomalyDetectorDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalyDetectorDimension)(nil)).Elem()
}

func (i AnomalyDetectorDimensionArgs) ToAnomalyDetectorDimensionOutput() AnomalyDetectorDimensionOutput {
	return i.ToAnomalyDetectorDimensionOutputWithContext(context.Background())
}

func (i AnomalyDetectorDimensionArgs) ToAnomalyDetectorDimensionOutputWithContext(ctx context.Context) AnomalyDetectorDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectorDimensionOutput)
}

// AnomalyDetectorDimensionArrayInput is an input type that accepts AnomalyDetectorDimensionArray and AnomalyDetectorDimensionArrayOutput values.
// You can construct a concrete instance of `AnomalyDetectorDimensionArrayInput` via:
//
//          AnomalyDetectorDimensionArray{ AnomalyDetectorDimensionArgs{...} }
type AnomalyDetectorDimensionArrayInput interface {
	pulumi.Input

	ToAnomalyDetectorDimensionArrayOutput() AnomalyDetectorDimensionArrayOutput
	ToAnomalyDetectorDimensionArrayOutputWithContext(context.Context) AnomalyDetectorDimensionArrayOutput
}

type AnomalyDetectorDimensionArray []AnomalyDetectorDimensionInput

func (AnomalyDetectorDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalyDetectorDimension)(nil)).Elem()
}

func (i AnomalyDetectorDimensionArray) ToAnomalyDetectorDimensionArrayOutput() AnomalyDetectorDimensionArrayOutput {
	return i.ToAnomalyDetectorDimensionArrayOutputWithContext(context.Background())
}

func (i AnomalyDetectorDimensionArray) ToAnomalyDetectorDimensionArrayOutputWithContext(ctx context.Context) AnomalyDetectorDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectorDimensionArrayOutput)
}

type AnomalyDetectorDimensionOutput struct{ *pulumi.OutputState }

func (AnomalyDetectorDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalyDetectorDimension)(nil)).Elem()
}

func (o AnomalyDetectorDimensionOutput) ToAnomalyDetectorDimensionOutput() AnomalyDetectorDimensionOutput {
	return o
}

func (o AnomalyDetectorDimensionOutput) ToAnomalyDetectorDimensionOutputWithContext(ctx context.Context) AnomalyDetectorDimensionOutput {
	return o
}

func (o AnomalyDetectorDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnomalyDetectorDimension) string { return v.Name }).(pulumi.StringOutput)
}

func (o AnomalyDetectorDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AnomalyDetectorDimension) string { return v.Value }).(pulumi.StringOutput)
}

type AnomalyDetectorDimensionArrayOutput struct{ *pulumi.OutputState }

func (AnomalyDetectorDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalyDetectorDimension)(nil)).Elem()
}

func (o AnomalyDetectorDimensionArrayOutput) ToAnomalyDetectorDimensionArrayOutput() AnomalyDetectorDimensionArrayOutput {
	return o
}

func (o AnomalyDetectorDimensionArrayOutput) ToAnomalyDetectorDimensionArrayOutputWithContext(ctx context.Context) AnomalyDetectorDimensionArrayOutput {
	return o
}

func (o AnomalyDetectorDimensionArrayOutput) Index(i pulumi.IntInput) AnomalyDetectorDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnomalyDetectorDimension {
		return vs[0].([]AnomalyDetectorDimension)[vs[1].(int)]
	}).(AnomalyDetectorDimensionOutput)
}

type AnomalyDetectorRange struct {
	EndTime   string `pulumi:"endTime"`
	StartTime string `pulumi:"startTime"`
}

// AnomalyDetectorRangeInput is an input type that accepts AnomalyDetectorRangeArgs and AnomalyDetectorRangeOutput values.
// You can construct a concrete instance of `AnomalyDetectorRangeInput` via:
//
//          AnomalyDetectorRangeArgs{...}
type AnomalyDetectorRangeInput interface {
	pulumi.Input

	ToAnomalyDetectorRangeOutput() AnomalyDetectorRangeOutput
	ToAnomalyDetectorRangeOutputWithContext(context.Context) AnomalyDetectorRangeOutput
}

type AnomalyDetectorRangeArgs struct {
	EndTime   pulumi.StringInput `pulumi:"endTime"`
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (AnomalyDetectorRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalyDetectorRange)(nil)).Elem()
}

func (i AnomalyDetectorRangeArgs) ToAnomalyDetectorRangeOutput() AnomalyDetectorRangeOutput {
	return i.ToAnomalyDetectorRangeOutputWithContext(context.Background())
}

func (i AnomalyDetectorRangeArgs) ToAnomalyDetectorRangeOutputWithContext(ctx context.Context) AnomalyDetectorRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectorRangeOutput)
}

// AnomalyDetectorRangeArrayInput is an input type that accepts AnomalyDetectorRangeArray and AnomalyDetectorRangeArrayOutput values.
// You can construct a concrete instance of `AnomalyDetectorRangeArrayInput` via:
//
//          AnomalyDetectorRangeArray{ AnomalyDetectorRangeArgs{...} }
type AnomalyDetectorRangeArrayInput interface {
	pulumi.Input

	ToAnomalyDetectorRangeArrayOutput() AnomalyDetectorRangeArrayOutput
	ToAnomalyDetectorRangeArrayOutputWithContext(context.Context) AnomalyDetectorRangeArrayOutput
}

type AnomalyDetectorRangeArray []AnomalyDetectorRangeInput

func (AnomalyDetectorRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalyDetectorRange)(nil)).Elem()
}

func (i AnomalyDetectorRangeArray) ToAnomalyDetectorRangeArrayOutput() AnomalyDetectorRangeArrayOutput {
	return i.ToAnomalyDetectorRangeArrayOutputWithContext(context.Background())
}

func (i AnomalyDetectorRangeArray) ToAnomalyDetectorRangeArrayOutputWithContext(ctx context.Context) AnomalyDetectorRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectorRangeArrayOutput)
}

type AnomalyDetectorRangeOutput struct{ *pulumi.OutputState }

func (AnomalyDetectorRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnomalyDetectorRange)(nil)).Elem()
}

func (o AnomalyDetectorRangeOutput) ToAnomalyDetectorRangeOutput() AnomalyDetectorRangeOutput {
	return o
}

func (o AnomalyDetectorRangeOutput) ToAnomalyDetectorRangeOutputWithContext(ctx context.Context) AnomalyDetectorRangeOutput {
	return o
}

func (o AnomalyDetectorRangeOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v AnomalyDetectorRange) string { return v.EndTime }).(pulumi.StringOutput)
}

func (o AnomalyDetectorRangeOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AnomalyDetectorRange) string { return v.StartTime }).(pulumi.StringOutput)
}

type AnomalyDetectorRangeArrayOutput struct{ *pulumi.OutputState }

func (AnomalyDetectorRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnomalyDetectorRange)(nil)).Elem()
}

func (o AnomalyDetectorRangeArrayOutput) ToAnomalyDetectorRangeArrayOutput() AnomalyDetectorRangeArrayOutput {
	return o
}

func (o AnomalyDetectorRangeArrayOutput) ToAnomalyDetectorRangeArrayOutputWithContext(ctx context.Context) AnomalyDetectorRangeArrayOutput {
	return o
}

func (o AnomalyDetectorRangeArrayOutput) Index(i pulumi.IntInput) AnomalyDetectorRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnomalyDetectorRange {
		return vs[0].([]AnomalyDetectorRange)[vs[1].(int)]
	}).(AnomalyDetectorRangeOutput)
}

type InsightRuleTags struct {
}

// InsightRuleTagsInput is an input type that accepts InsightRuleTagsArgs and InsightRuleTagsOutput values.
// You can construct a concrete instance of `InsightRuleTagsInput` via:
//
//          InsightRuleTagsArgs{...}
type InsightRuleTagsInput interface {
	pulumi.Input

	ToInsightRuleTagsOutput() InsightRuleTagsOutput
	ToInsightRuleTagsOutputWithContext(context.Context) InsightRuleTagsOutput
}

type InsightRuleTagsArgs struct {
}

func (InsightRuleTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightRuleTags)(nil)).Elem()
}

func (i InsightRuleTagsArgs) ToInsightRuleTagsOutput() InsightRuleTagsOutput {
	return i.ToInsightRuleTagsOutputWithContext(context.Background())
}

func (i InsightRuleTagsArgs) ToInsightRuleTagsOutputWithContext(ctx context.Context) InsightRuleTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightRuleTagsOutput)
}

func (i InsightRuleTagsArgs) ToInsightRuleTagsPtrOutput() InsightRuleTagsPtrOutput {
	return i.ToInsightRuleTagsPtrOutputWithContext(context.Background())
}

func (i InsightRuleTagsArgs) ToInsightRuleTagsPtrOutputWithContext(ctx context.Context) InsightRuleTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightRuleTagsOutput).ToInsightRuleTagsPtrOutputWithContext(ctx)
}

// InsightRuleTagsPtrInput is an input type that accepts InsightRuleTagsArgs, InsightRuleTagsPtr and InsightRuleTagsPtrOutput values.
// You can construct a concrete instance of `InsightRuleTagsPtrInput` via:
//
//          InsightRuleTagsArgs{...}
//
//  or:
//
//          nil
type InsightRuleTagsPtrInput interface {
	pulumi.Input

	ToInsightRuleTagsPtrOutput() InsightRuleTagsPtrOutput
	ToInsightRuleTagsPtrOutputWithContext(context.Context) InsightRuleTagsPtrOutput
}

type insightRuleTagsPtrType InsightRuleTagsArgs

func InsightRuleTagsPtr(v *InsightRuleTagsArgs) InsightRuleTagsPtrInput {
	return (*insightRuleTagsPtrType)(v)
}

func (*insightRuleTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightRuleTags)(nil)).Elem()
}

func (i *insightRuleTagsPtrType) ToInsightRuleTagsPtrOutput() InsightRuleTagsPtrOutput {
	return i.ToInsightRuleTagsPtrOutputWithContext(context.Background())
}

func (i *insightRuleTagsPtrType) ToInsightRuleTagsPtrOutputWithContext(ctx context.Context) InsightRuleTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightRuleTagsPtrOutput)
}

type InsightRuleTagsOutput struct{ *pulumi.OutputState }

func (InsightRuleTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightRuleTags)(nil)).Elem()
}

func (o InsightRuleTagsOutput) ToInsightRuleTagsOutput() InsightRuleTagsOutput {
	return o
}

func (o InsightRuleTagsOutput) ToInsightRuleTagsOutputWithContext(ctx context.Context) InsightRuleTagsOutput {
	return o
}

func (o InsightRuleTagsOutput) ToInsightRuleTagsPtrOutput() InsightRuleTagsPtrOutput {
	return o.ToInsightRuleTagsPtrOutputWithContext(context.Background())
}

func (o InsightRuleTagsOutput) ToInsightRuleTagsPtrOutputWithContext(ctx context.Context) InsightRuleTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InsightRuleTags) *InsightRuleTags {
		return &v
	}).(InsightRuleTagsPtrOutput)
}

type InsightRuleTagsPtrOutput struct{ *pulumi.OutputState }

func (InsightRuleTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightRuleTags)(nil)).Elem()
}

func (o InsightRuleTagsPtrOutput) ToInsightRuleTagsPtrOutput() InsightRuleTagsPtrOutput {
	return o
}

func (o InsightRuleTagsPtrOutput) ToInsightRuleTagsPtrOutputWithContext(ctx context.Context) InsightRuleTagsPtrOutput {
	return o
}

func (o InsightRuleTagsPtrOutput) Elem() InsightRuleTagsOutput {
	return o.ApplyT(func(v *InsightRuleTags) InsightRuleTags {
		if v != nil {
			return *v
		}
		var ret InsightRuleTags
		return ret
	}).(InsightRuleTagsOutput)
}

// This structure defines the metrics that will be streamed.
type MetricStreamFilter struct {
	// Only metrics with Namespace matching this value will be streamed.
	Namespace string `pulumi:"namespace"`
}

// MetricStreamFilterInput is an input type that accepts MetricStreamFilterArgs and MetricStreamFilterOutput values.
// You can construct a concrete instance of `MetricStreamFilterInput` via:
//
//          MetricStreamFilterArgs{...}
type MetricStreamFilterInput interface {
	pulumi.Input

	ToMetricStreamFilterOutput() MetricStreamFilterOutput
	ToMetricStreamFilterOutputWithContext(context.Context) MetricStreamFilterOutput
}

// This structure defines the metrics that will be streamed.
type MetricStreamFilterArgs struct {
	// Only metrics with Namespace matching this value will be streamed.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (MetricStreamFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamFilter)(nil)).Elem()
}

func (i MetricStreamFilterArgs) ToMetricStreamFilterOutput() MetricStreamFilterOutput {
	return i.ToMetricStreamFilterOutputWithContext(context.Background())
}

func (i MetricStreamFilterArgs) ToMetricStreamFilterOutputWithContext(ctx context.Context) MetricStreamFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamFilterOutput)
}

// MetricStreamFilterArrayInput is an input type that accepts MetricStreamFilterArray and MetricStreamFilterArrayOutput values.
// You can construct a concrete instance of `MetricStreamFilterArrayInput` via:
//
//          MetricStreamFilterArray{ MetricStreamFilterArgs{...} }
type MetricStreamFilterArrayInput interface {
	pulumi.Input

	ToMetricStreamFilterArrayOutput() MetricStreamFilterArrayOutput
	ToMetricStreamFilterArrayOutputWithContext(context.Context) MetricStreamFilterArrayOutput
}

type MetricStreamFilterArray []MetricStreamFilterInput

func (MetricStreamFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamFilter)(nil)).Elem()
}

func (i MetricStreamFilterArray) ToMetricStreamFilterArrayOutput() MetricStreamFilterArrayOutput {
	return i.ToMetricStreamFilterArrayOutputWithContext(context.Background())
}

func (i MetricStreamFilterArray) ToMetricStreamFilterArrayOutputWithContext(ctx context.Context) MetricStreamFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamFilterArrayOutput)
}

// This structure defines the metrics that will be streamed.
type MetricStreamFilterOutput struct{ *pulumi.OutputState }

func (MetricStreamFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamFilter)(nil)).Elem()
}

func (o MetricStreamFilterOutput) ToMetricStreamFilterOutput() MetricStreamFilterOutput {
	return o
}

func (o MetricStreamFilterOutput) ToMetricStreamFilterOutputWithContext(ctx context.Context) MetricStreamFilterOutput {
	return o
}

// Only metrics with Namespace matching this value will be streamed.
func (o MetricStreamFilterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStreamFilter) string { return v.Namespace }).(pulumi.StringOutput)
}

type MetricStreamFilterArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamFilter)(nil)).Elem()
}

func (o MetricStreamFilterArrayOutput) ToMetricStreamFilterArrayOutput() MetricStreamFilterArrayOutput {
	return o
}

func (o MetricStreamFilterArrayOutput) ToMetricStreamFilterArrayOutputWithContext(ctx context.Context) MetricStreamFilterArrayOutput {
	return o
}

func (o MetricStreamFilterArrayOutput) Index(i pulumi.IntInput) MetricStreamFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStreamFilter {
		return vs[0].([]MetricStreamFilter)[vs[1].(int)]
	}).(MetricStreamFilterOutput)
}

// Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
type MetricStreamTag struct {
	// A unique identifier for the tag.
	Key string `pulumi:"key"`
	// An optional string, which you can use to describe or define the tag.
	Value *string `pulumi:"value"`
}

// MetricStreamTagInput is an input type that accepts MetricStreamTagArgs and MetricStreamTagOutput values.
// You can construct a concrete instance of `MetricStreamTagInput` via:
//
//          MetricStreamTagArgs{...}
type MetricStreamTagInput interface {
	pulumi.Input

	ToMetricStreamTagOutput() MetricStreamTagOutput
	ToMetricStreamTagOutputWithContext(context.Context) MetricStreamTagOutput
}

// Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
type MetricStreamTagArgs struct {
	// A unique identifier for the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// An optional string, which you can use to describe or define the tag.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (MetricStreamTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamTag)(nil)).Elem()
}

func (i MetricStreamTagArgs) ToMetricStreamTagOutput() MetricStreamTagOutput {
	return i.ToMetricStreamTagOutputWithContext(context.Background())
}

func (i MetricStreamTagArgs) ToMetricStreamTagOutputWithContext(ctx context.Context) MetricStreamTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamTagOutput)
}

// MetricStreamTagArrayInput is an input type that accepts MetricStreamTagArray and MetricStreamTagArrayOutput values.
// You can construct a concrete instance of `MetricStreamTagArrayInput` via:
//
//          MetricStreamTagArray{ MetricStreamTagArgs{...} }
type MetricStreamTagArrayInput interface {
	pulumi.Input

	ToMetricStreamTagArrayOutput() MetricStreamTagArrayOutput
	ToMetricStreamTagArrayOutputWithContext(context.Context) MetricStreamTagArrayOutput
}

type MetricStreamTagArray []MetricStreamTagInput

func (MetricStreamTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamTag)(nil)).Elem()
}

func (i MetricStreamTagArray) ToMetricStreamTagArrayOutput() MetricStreamTagArrayOutput {
	return i.ToMetricStreamTagArrayOutputWithContext(context.Background())
}

func (i MetricStreamTagArray) ToMetricStreamTagArrayOutputWithContext(ctx context.Context) MetricStreamTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricStreamTagArrayOutput)
}

// Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
type MetricStreamTagOutput struct{ *pulumi.OutputState }

func (MetricStreamTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricStreamTag)(nil)).Elem()
}

func (o MetricStreamTagOutput) ToMetricStreamTagOutput() MetricStreamTagOutput {
	return o
}

func (o MetricStreamTagOutput) ToMetricStreamTagOutputWithContext(ctx context.Context) MetricStreamTagOutput {
	return o
}

// A unique identifier for the tag.
func (o MetricStreamTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricStreamTag) string { return v.Key }).(pulumi.StringOutput)
}

// An optional string, which you can use to describe or define the tag.
func (o MetricStreamTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricStreamTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type MetricStreamTagArrayOutput struct{ *pulumi.OutputState }

func (MetricStreamTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricStreamTag)(nil)).Elem()
}

func (o MetricStreamTagArrayOutput) ToMetricStreamTagArrayOutput() MetricStreamTagArrayOutput {
	return o
}

func (o MetricStreamTagArrayOutput) ToMetricStreamTagArrayOutputWithContext(ctx context.Context) MetricStreamTagArrayOutput {
	return o
}

func (o MetricStreamTagArrayOutput) Index(i pulumi.IntInput) MetricStreamTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricStreamTag {
		return vs[0].([]MetricStreamTag)[vs[1].(int)]
	}).(MetricStreamTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmDimensionInput)(nil)).Elem(), AlarmDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmDimensionArrayInput)(nil)).Elem(), AlarmDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricInput)(nil)).Elem(), AlarmMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricPtrInput)(nil)).Elem(), AlarmMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricDataQueryInput)(nil)).Elem(), AlarmMetricDataQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricDataQueryArrayInput)(nil)).Elem(), AlarmMetricDataQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricStatInput)(nil)).Elem(), AlarmMetricStatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMetricStatPtrInput)(nil)).Elem(), AlarmMetricStatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectorConfigurationInput)(nil)).Elem(), AnomalyDetectorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectorConfigurationPtrInput)(nil)).Elem(), AnomalyDetectorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectorDimensionInput)(nil)).Elem(), AnomalyDetectorDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectorDimensionArrayInput)(nil)).Elem(), AnomalyDetectorDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectorRangeInput)(nil)).Elem(), AnomalyDetectorRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectorRangeArrayInput)(nil)).Elem(), AnomalyDetectorRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InsightRuleTagsInput)(nil)).Elem(), InsightRuleTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InsightRuleTagsPtrInput)(nil)).Elem(), InsightRuleTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamFilterInput)(nil)).Elem(), MetricStreamFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamFilterArrayInput)(nil)).Elem(), MetricStreamFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamTagInput)(nil)).Elem(), MetricStreamTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricStreamTagArrayInput)(nil)).Elem(), MetricStreamTagArray{})
	pulumi.RegisterOutputType(AlarmDimensionOutput{})
	pulumi.RegisterOutputType(AlarmDimensionArrayOutput{})
	pulumi.RegisterOutputType(AlarmMetricOutput{})
	pulumi.RegisterOutputType(AlarmMetricPtrOutput{})
	pulumi.RegisterOutputType(AlarmMetricDataQueryOutput{})
	pulumi.RegisterOutputType(AlarmMetricDataQueryArrayOutput{})
	pulumi.RegisterOutputType(AlarmMetricStatOutput{})
	pulumi.RegisterOutputType(AlarmMetricStatPtrOutput{})
	pulumi.RegisterOutputType(AnomalyDetectorConfigurationOutput{})
	pulumi.RegisterOutputType(AnomalyDetectorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AnomalyDetectorDimensionOutput{})
	pulumi.RegisterOutputType(AnomalyDetectorDimensionArrayOutput{})
	pulumi.RegisterOutputType(AnomalyDetectorRangeOutput{})
	pulumi.RegisterOutputType(AnomalyDetectorRangeArrayOutput{})
	pulumi.RegisterOutputType(InsightRuleTagsOutput{})
	pulumi.RegisterOutputType(InsightRuleTagsPtrOutput{})
	pulumi.RegisterOutputType(MetricStreamFilterOutput{})
	pulumi.RegisterOutputType(MetricStreamFilterArrayOutput{})
	pulumi.RegisterOutputType(MetricStreamTagOutput{})
	pulumi.RegisterOutputType(MetricStreamTagArrayOutput{})
}
