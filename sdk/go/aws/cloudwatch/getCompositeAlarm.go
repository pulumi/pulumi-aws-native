// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::CloudWatch::CompositeAlarm type specifies an alarm which aggregates the states of other Alarms (Metric or Composite Alarms) as defined by the AlarmRule expression
func LookupCompositeAlarm(ctx *pulumi.Context, args *LookupCompositeAlarmArgs, opts ...pulumi.InvokeOption) (*LookupCompositeAlarmResult, error) {
	var rv LookupCompositeAlarmResult
	err := ctx.Invoke("aws-native:cloudwatch:getCompositeAlarm", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCompositeAlarmArgs struct {
	// The name of the Composite Alarm
	AlarmName string `pulumi:"alarmName"`
}

type LookupCompositeAlarmResult struct {
	// Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
	ActionsEnabled *bool `pulumi:"actionsEnabled"`
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action as an Amazon Resource Name (ARN).
	AlarmActions []string `pulumi:"alarmActions"`
	// The description of the alarm
	AlarmDescription *string `pulumi:"alarmDescription"`
	// Expression which aggregates the state of other Alarms (Metric or Composite Alarms)
	AlarmRule *string `pulumi:"alarmRule"`
	// Amazon Resource Name (ARN) of the alarm
	Arn *string `pulumi:"arn"`
	// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	InsufficientDataActions []string `pulumi:"insufficientDataActions"`
	// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
	OKActions []string `pulumi:"oKActions"`
}

func LookupCompositeAlarmOutput(ctx *pulumi.Context, args LookupCompositeAlarmOutputArgs, opts ...pulumi.InvokeOption) LookupCompositeAlarmResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCompositeAlarmResult, error) {
			args := v.(LookupCompositeAlarmArgs)
			r, err := LookupCompositeAlarm(ctx, &args, opts...)
			var s LookupCompositeAlarmResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCompositeAlarmResultOutput)
}

type LookupCompositeAlarmOutputArgs struct {
	// The name of the Composite Alarm
	AlarmName pulumi.StringInput `pulumi:"alarmName"`
}

func (LookupCompositeAlarmOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCompositeAlarmArgs)(nil)).Elem()
}

type LookupCompositeAlarmResultOutput struct{ *pulumi.OutputState }

func (LookupCompositeAlarmResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCompositeAlarmResult)(nil)).Elem()
}

func (o LookupCompositeAlarmResultOutput) ToLookupCompositeAlarmResultOutput() LookupCompositeAlarmResultOutput {
	return o
}

func (o LookupCompositeAlarmResultOutput) ToLookupCompositeAlarmResultOutputWithContext(ctx context.Context) LookupCompositeAlarmResultOutput {
	return o
}

// Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
func (o LookupCompositeAlarmResultOutput) ActionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCompositeAlarmResult) *bool { return v.ActionsEnabled }).(pulumi.BoolPtrOutput)
}

// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action as an Amazon Resource Name (ARN).
func (o LookupCompositeAlarmResultOutput) AlarmActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCompositeAlarmResult) []string { return v.AlarmActions }).(pulumi.StringArrayOutput)
}

// The description of the alarm
func (o LookupCompositeAlarmResultOutput) AlarmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompositeAlarmResult) *string { return v.AlarmDescription }).(pulumi.StringPtrOutput)
}

// Expression which aggregates the state of other Alarms (Metric or Composite Alarms)
func (o LookupCompositeAlarmResultOutput) AlarmRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompositeAlarmResult) *string { return v.AlarmRule }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the alarm
func (o LookupCompositeAlarmResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompositeAlarmResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
func (o LookupCompositeAlarmResultOutput) InsufficientDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCompositeAlarmResult) []string { return v.InsufficientDataActions }).(pulumi.StringArrayOutput)
}

// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
func (o LookupCompositeAlarmResultOutput) OKActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCompositeAlarmResult) []string { return v.OKActions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCompositeAlarmResultOutput{})
}
