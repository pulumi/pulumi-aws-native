// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CloudWatch::Alarm
func LookupAlarm(ctx *pulumi.Context, args *LookupAlarmArgs, opts ...pulumi.InvokeOption) (*LookupAlarmResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlarmResult
	err := ctx.Invoke("aws-native:cloudwatch:getAlarm", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAlarmArgs struct {
	// The name of the alarm.
	AlarmName string `pulumi:"alarmName"`
}

type LookupAlarmResult struct {
	// Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
	ActionsEnabled *bool `pulumi:"actionsEnabled"`
	// The list of actions to execute when this alarm transitions into an ALARM state from any other state.
	AlarmActions []string `pulumi:"alarmActions"`
	// The description of the alarm.
	AlarmDescription *string `pulumi:"alarmDescription"`
	// Amazon Resource Name is a unique name for each resource.
	Arn *string `pulumi:"arn"`
	// The arithmetic operation to use when comparing the specified statistic and threshold.
	ComparisonOperator *string `pulumi:"comparisonOperator"`
	// The number of datapoints that must be breaching to trigger the alarm.
	DatapointsToAlarm *int `pulumi:"datapointsToAlarm"`
	// The dimensions for the metric associated with the alarm. For an alarm based on a math expression, you can't specify Dimensions. Instead, you use Metrics.
	Dimensions []AlarmDimension `pulumi:"dimensions"`
	// Used only for alarms based on percentiles.
	EvaluateLowSampleCountPercentile *string `pulumi:"evaluateLowSampleCountPercentile"`
	// The number of periods over which data is compared to the specified threshold.
	EvaluationPeriods *int `pulumi:"evaluationPeriods"`
	// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
	ExtendedStatistic *string `pulumi:"extendedStatistic"`
	// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state.
	InsufficientDataActions []string `pulumi:"insufficientDataActions"`
	// The name of the metric associated with the alarm.
	MetricName *string `pulumi:"metricName"`
	// An array that enables you to create an alarm based on the result of a metric math expression.
	Metrics []AlarmMetricDataQuery `pulumi:"metrics"`
	// The namespace of the metric associated with the alarm.
	Namespace *string `pulumi:"namespace"`
	// The actions to execute when this alarm transitions to the OK state from any other state.
	OkActions []string `pulumi:"okActions"`
	// The period in seconds, over which the statistic is applied.
	Period *int `pulumi:"period"`
	// The statistic for the metric associated with the alarm, other than percentile.
	Statistic *string `pulumi:"statistic"`
	// In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
	Threshold *float64 `pulumi:"threshold"`
	// In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
	ThresholdMetricId *string `pulumi:"thresholdMetricId"`
	// Sets how this alarm is to handle missing data points. Valid values are breaching, notBreaching, ignore, and missing.
	TreatMissingData *string `pulumi:"treatMissingData"`
	// The unit of the metric associated with the alarm.
	Unit *string `pulumi:"unit"`
}

func LookupAlarmOutput(ctx *pulumi.Context, args LookupAlarmOutputArgs, opts ...pulumi.InvokeOption) LookupAlarmResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAlarmResult, error) {
			args := v.(LookupAlarmArgs)
			r, err := LookupAlarm(ctx, &args, opts...)
			var s LookupAlarmResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAlarmResultOutput)
}

type LookupAlarmOutputArgs struct {
	// The name of the alarm.
	AlarmName pulumi.StringInput `pulumi:"alarmName"`
}

func (LookupAlarmOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlarmArgs)(nil)).Elem()
}

type LookupAlarmResultOutput struct{ *pulumi.OutputState }

func (LookupAlarmResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlarmResult)(nil)).Elem()
}

func (o LookupAlarmResultOutput) ToLookupAlarmResultOutput() LookupAlarmResultOutput {
	return o
}

func (o LookupAlarmResultOutput) ToLookupAlarmResultOutputWithContext(ctx context.Context) LookupAlarmResultOutput {
	return o
}

// Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
func (o LookupAlarmResultOutput) ActionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *bool { return v.ActionsEnabled }).(pulumi.BoolPtrOutput)
}

// The list of actions to execute when this alarm transitions into an ALARM state from any other state.
func (o LookupAlarmResultOutput) AlarmActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []string { return v.AlarmActions }).(pulumi.StringArrayOutput)
}

// The description of the alarm.
func (o LookupAlarmResultOutput) AlarmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.AlarmDescription }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name is a unique name for each resource.
func (o LookupAlarmResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The arithmetic operation to use when comparing the specified statistic and threshold.
func (o LookupAlarmResultOutput) ComparisonOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.ComparisonOperator }).(pulumi.StringPtrOutput)
}

// The number of datapoints that must be breaching to trigger the alarm.
func (o LookupAlarmResultOutput) DatapointsToAlarm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *int { return v.DatapointsToAlarm }).(pulumi.IntPtrOutput)
}

// The dimensions for the metric associated with the alarm. For an alarm based on a math expression, you can't specify Dimensions. Instead, you use Metrics.
func (o LookupAlarmResultOutput) Dimensions() AlarmDimensionArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []AlarmDimension { return v.Dimensions }).(AlarmDimensionArrayOutput)
}

// Used only for alarms based on percentiles.
func (o LookupAlarmResultOutput) EvaluateLowSampleCountPercentile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.EvaluateLowSampleCountPercentile }).(pulumi.StringPtrOutput)
}

// The number of periods over which data is compared to the specified threshold.
func (o LookupAlarmResultOutput) EvaluationPeriods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *int { return v.EvaluationPeriods }).(pulumi.IntPtrOutput)
}

// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
func (o LookupAlarmResultOutput) ExtendedStatistic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.ExtendedStatistic }).(pulumi.StringPtrOutput)
}

// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state.
func (o LookupAlarmResultOutput) InsufficientDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []string { return v.InsufficientDataActions }).(pulumi.StringArrayOutput)
}

// The name of the metric associated with the alarm.
func (o LookupAlarmResultOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// An array that enables you to create an alarm based on the result of a metric math expression.
func (o LookupAlarmResultOutput) Metrics() AlarmMetricDataQueryArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []AlarmMetricDataQuery { return v.Metrics }).(AlarmMetricDataQueryArrayOutput)
}

// The namespace of the metric associated with the alarm.
func (o LookupAlarmResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The actions to execute when this alarm transitions to the OK state from any other state.
func (o LookupAlarmResultOutput) OkActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []string { return v.OkActions }).(pulumi.StringArrayOutput)
}

// The period in seconds, over which the statistic is applied.
func (o LookupAlarmResultOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The statistic for the metric associated with the alarm, other than percentile.
func (o LookupAlarmResultOutput) Statistic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.Statistic }).(pulumi.StringPtrOutput)
}

// In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
func (o LookupAlarmResultOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// In an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
func (o LookupAlarmResultOutput) ThresholdMetricId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.ThresholdMetricId }).(pulumi.StringPtrOutput)
}

// Sets how this alarm is to handle missing data points. Valid values are breaching, notBreaching, ignore, and missing.
func (o LookupAlarmResultOutput) TreatMissingData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.TreatMissingData }).(pulumi.StringPtrOutput)
}

// The unit of the metric associated with the alarm.
func (o LookupAlarmResultOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlarmResultOutput{})
}
