// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::VerifiedPermissions::PolicyTemplate Resource Type
func LookupPolicyTemplate(ctx *pulumi.Context, args *LookupPolicyTemplateArgs, opts ...pulumi.InvokeOption) (*LookupPolicyTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyTemplateResult
	err := ctx.Invoke("aws-native:verifiedpermissions:getPolicyTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyTemplateArgs struct {
	// The unique identifier of the policy store that contains the template.
	PolicyStoreId string `pulumi:"policyStoreId"`
	// The unique identifier of the new or modified policy template.
	PolicyTemplateId string `pulumi:"policyTemplateId"`
}

type LookupPolicyTemplateResult struct {
	// The description to attach to the new or updated policy template.
	Description *string `pulumi:"description"`
	// The unique identifier of the new or modified policy template.
	PolicyTemplateId *string `pulumi:"policyTemplateId"`
	// Specifies the content that you want to use for the new policy template, written in the Cedar policy language.
	Statement *string `pulumi:"statement"`
}

func LookupPolicyTemplateOutput(ctx *pulumi.Context, args LookupPolicyTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyTemplateResultOutput, error) {
			args := v.(LookupPolicyTemplateArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPolicyTemplateResult
			secret, err := ctx.InvokePackageRaw("aws-native:verifiedpermissions:getPolicyTemplate", args, &rv, "", opts...)
			if err != nil {
				return LookupPolicyTemplateResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPolicyTemplateResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPolicyTemplateResultOutput), nil
			}
			return output, nil
		}).(LookupPolicyTemplateResultOutput)
}

type LookupPolicyTemplateOutputArgs struct {
	// The unique identifier of the policy store that contains the template.
	PolicyStoreId pulumi.StringInput `pulumi:"policyStoreId"`
	// The unique identifier of the new or modified policy template.
	PolicyTemplateId pulumi.StringInput `pulumi:"policyTemplateId"`
}

func (LookupPolicyTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyTemplateArgs)(nil)).Elem()
}

type LookupPolicyTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyTemplateResult)(nil)).Elem()
}

func (o LookupPolicyTemplateResultOutput) ToLookupPolicyTemplateResultOutput() LookupPolicyTemplateResultOutput {
	return o
}

func (o LookupPolicyTemplateResultOutput) ToLookupPolicyTemplateResultOutputWithContext(ctx context.Context) LookupPolicyTemplateResultOutput {
	return o
}

// The description to attach to the new or updated policy template.
func (o LookupPolicyTemplateResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyTemplateResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the new or modified policy template.
func (o LookupPolicyTemplateResultOutput) PolicyTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyTemplateResult) *string { return v.PolicyTemplateId }).(pulumi.StringPtrOutput)
}

// Specifies the content that you want to use for the new policy template, written in the Cedar policy language.
func (o LookupPolicyTemplateResultOutput) Statement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyTemplateResult) *string { return v.Statement }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyTemplateResultOutput{})
}
