// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::VerifiedPermissions::Policy Resource Type
func LookupPolicy(ctx *pulumi.Context, args *LookupPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyResult
	err := ctx.Invoke("aws-native:verifiedpermissions:getPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyArgs struct {
	// The unique ID of the new or updated policy.
	PolicyId string `pulumi:"policyId"`
	// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
	PolicyStoreId string `pulumi:"policyStoreId"`
}

type LookupPolicyResult struct {
	// Specifies the policy type and content to use for the new or updated policy. The definition structure must include either a `Static` or a `TemplateLinked` element.
	Definition interface{} `pulumi:"definition"`
	// The unique ID of the new or updated policy.
	PolicyId *string `pulumi:"policyId"`
	// The type of the policy. This is one of the following values:
	//
	// - Static
	// - TemplateLinked
	PolicyType *PolicyType `pulumi:"policyType"`
}

func LookupPolicyOutput(ctx *pulumi.Context, args LookupPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyResultOutput, error) {
			args := v.(LookupPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPolicyResult
			secret, err := ctx.InvokePackageRaw("aws-native:verifiedpermissions:getPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupPolicyResultOutput)
}

type LookupPolicyOutputArgs struct {
	// The unique ID of the new or updated policy.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
	PolicyStoreId pulumi.StringInput `pulumi:"policyStoreId"`
}

func (LookupPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyArgs)(nil)).Elem()
}

type LookupPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyResult)(nil)).Elem()
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutput() LookupPolicyResultOutput {
	return o
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutputWithContext(ctx context.Context) LookupPolicyResultOutput {
	return o
}

// Specifies the policy type and content to use for the new or updated policy. The definition structure must include either a `Static` or a `TemplateLinked` element.
func (o LookupPolicyResultOutput) Definition() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupPolicyResult) interface{} { return v.Definition }).(pulumi.AnyOutput)
}

// The unique ID of the new or updated policy.
func (o LookupPolicyResultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyResult) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// The type of the policy. This is one of the following values:
//
// - Static
// - TemplateLinked
func (o LookupPolicyResultOutput) PolicyType() PolicyTypePtrOutput {
	return o.ApplyT(func(v LookupPolicyResult) *PolicyType { return v.PolicyType }).(PolicyTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyResultOutput{})
}
