// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
func LookupPolicyStore(ctx *pulumi.Context, args *LookupPolicyStoreArgs, opts ...pulumi.InvokeOption) (*LookupPolicyStoreResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyStoreResult
	err := ctx.Invoke("aws-native:verifiedpermissions:getPolicyStore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyStoreArgs struct {
	// The unique ID of the new or updated policy store.
	PolicyStoreId string `pulumi:"policyStoreId"`
}

type LookupPolicyStoreResult struct {
	// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
	Arn *string `pulumi:"arn"`
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description *string `pulumi:"description"`
	// The unique ID of the new or updated policy store.
	PolicyStoreId *string `pulumi:"policyStoreId"`
	// Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
	Schema *PolicyStoreSchemaDefinition `pulumi:"schema"`
	// A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
	ValidationSettings *PolicyStoreValidationSettings `pulumi:"validationSettings"`
}

func LookupPolicyStoreOutput(ctx *pulumi.Context, args LookupPolicyStoreOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyStoreResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyStoreResult, error) {
			args := v.(LookupPolicyStoreArgs)
			r, err := LookupPolicyStore(ctx, &args, opts...)
			var s LookupPolicyStoreResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyStoreResultOutput)
}

type LookupPolicyStoreOutputArgs struct {
	// The unique ID of the new or updated policy store.
	PolicyStoreId pulumi.StringInput `pulumi:"policyStoreId"`
}

func (LookupPolicyStoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStoreArgs)(nil)).Elem()
}

type LookupPolicyStoreResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyStoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStoreResult)(nil)).Elem()
}

func (o LookupPolicyStoreResultOutput) ToLookupPolicyStoreResultOutput() LookupPolicyStoreResultOutput {
	return o
}

func (o LookupPolicyStoreResultOutput) ToLookupPolicyStoreResultOutputWithContext(ctx context.Context) LookupPolicyStoreResultOutput {
	return o
}

// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
func (o LookupPolicyStoreResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Descriptive text that you can provide to help with identification of the current policy store.
func (o LookupPolicyStoreResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique ID of the new or updated policy store.
func (o LookupPolicyStoreResultOutput) PolicyStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *string { return v.PolicyStoreId }).(pulumi.StringPtrOutput)
}

// Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
func (o LookupPolicyStoreResultOutput) Schema() PolicyStoreSchemaDefinitionPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *PolicyStoreSchemaDefinition { return v.Schema }).(PolicyStoreSchemaDefinitionPtrOutput)
}

// A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
func (o LookupPolicyStoreResultOutput) ValidationSettings() PolicyStoreValidationSettingsPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *PolicyStoreValidationSettings { return v.ValidationSettings }).(PolicyStoreValidationSettingsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyStoreResultOutput{})
}
