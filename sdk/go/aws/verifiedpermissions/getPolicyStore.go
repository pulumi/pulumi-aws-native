// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
func LookupPolicyStore(ctx *pulumi.Context, args *LookupPolicyStoreArgs, opts ...pulumi.InvokeOption) (*LookupPolicyStoreResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyStoreResult
	err := ctx.Invoke("aws-native:verifiedpermissions:getPolicyStore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyStoreArgs struct {
	// The unique ID of the new or updated policy store.
	PolicyStoreId string `pulumi:"policyStoreId"`
}

type LookupPolicyStoreResult struct {
	// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
	Arn *string `pulumi:"arn"`
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description *string `pulumi:"description"`
	// The unique ID of the new or updated policy store.
	PolicyStoreId *string `pulumi:"policyStoreId"`
	// Creates or updates the policy schema in a policy store. Cedar can use the schema to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
	Schema *PolicyStoreSchemaDefinition `pulumi:"schema"`
	// Specifies the validation setting for this policy store.
	//
	// Currently, the only valid and required value is `Mode` .
	//
	// > We recommend that you turn on `STRICT` mode only after you define a schema. If a schema doesn't exist, then `STRICT` mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) . Then, when you have a schema defined, use [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) again to turn validation back on.
	ValidationSettings *PolicyStoreValidationSettings `pulumi:"validationSettings"`
}

func LookupPolicyStoreOutput(ctx *pulumi.Context, args LookupPolicyStoreOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyStoreResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPolicyStoreResultOutput, error) {
			args := v.(LookupPolicyStoreArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:verifiedpermissions:getPolicyStore", args, LookupPolicyStoreResultOutput{}, options).(LookupPolicyStoreResultOutput), nil
		}).(LookupPolicyStoreResultOutput)
}

type LookupPolicyStoreOutputArgs struct {
	// The unique ID of the new or updated policy store.
	PolicyStoreId pulumi.StringInput `pulumi:"policyStoreId"`
}

func (LookupPolicyStoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStoreArgs)(nil)).Elem()
}

type LookupPolicyStoreResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyStoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStoreResult)(nil)).Elem()
}

func (o LookupPolicyStoreResultOutput) ToLookupPolicyStoreResultOutput() LookupPolicyStoreResultOutput {
	return o
}

func (o LookupPolicyStoreResultOutput) ToLookupPolicyStoreResultOutputWithContext(ctx context.Context) LookupPolicyStoreResultOutput {
	return o
}

// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
func (o LookupPolicyStoreResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Descriptive text that you can provide to help with identification of the current policy store.
func (o LookupPolicyStoreResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique ID of the new or updated policy store.
func (o LookupPolicyStoreResultOutput) PolicyStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *string { return v.PolicyStoreId }).(pulumi.StringPtrOutput)
}

// Creates or updates the policy schema in a policy store. Cedar can use the schema to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
func (o LookupPolicyStoreResultOutput) Schema() PolicyStoreSchemaDefinitionPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *PolicyStoreSchemaDefinition { return v.Schema }).(PolicyStoreSchemaDefinitionPtrOutput)
}

// Specifies the validation setting for this policy store.
//
// Currently, the only valid and required value is `Mode` .
//
// > We recommend that you turn on `STRICT` mode only after you define a schema. If a schema doesn't exist, then `STRICT` mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) . Then, when you have a schema defined, use [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) again to turn validation back on.
func (o LookupPolicyStoreResultOutput) ValidationSettings() PolicyStoreValidationSettingsPtrOutput {
	return o.ApplyT(func(v LookupPolicyStoreResult) *PolicyStoreValidationSettings { return v.ValidationSettings }).(PolicyStoreValidationSettingsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyStoreResultOutput{})
}
