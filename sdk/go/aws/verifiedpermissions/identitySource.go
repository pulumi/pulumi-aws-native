// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			policyStoreId := cfg.Require("policyStoreId")
//			userPoolArn := cfg.Require("userPoolArn")
//			clientIds := cfg.Require("clientIds")
//			principalEntityType := cfg.Require("principalEntityType")
//			identitySource, err := verifiedpermissions.NewIdentitySource(ctx, "identitySource", &verifiedpermissions.IdentitySourceArgs{
//				PolicyStoreId: pulumi.String(policyStoreId),
//				Configuration: &verifiedpermissions.IdentitySourceConfiguration0PropertiesArgs{
//					CognitoUserPoolConfiguration: &verifiedpermissions.IdentitySourceCognitoUserPoolConfigurationArgs{
//						UserPoolArn: pulumi.String(userPoolArn),
//						ClientIds:   clientIds,
//					},
//				},
//				PrincipalEntityType: pulumi.String(principalEntityType),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("identitySourceId", identitySource.IdentitySourceId)
//			return nil
//		})
//	}
//
// ```
type IdentitySource struct {
	pulumi.CustomResourceState

	// Contains configuration information used when creating a new identity source.
	Configuration pulumi.AnyOutput            `pulumi:"configuration"`
	Details       IdentitySourceDetailsOutput `pulumi:"details"`
	// The unique ID of the new or updated identity store.
	IdentitySourceId pulumi.StringOutput `pulumi:"identitySourceId"`
	// Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
	PolicyStoreId pulumi.StringOutput `pulumi:"policyStoreId"`
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType pulumi.StringPtrOutput `pulumi:"principalEntityType"`
}

// NewIdentitySource registers a new resource with the given unique name, arguments, and options.
func NewIdentitySource(ctx *pulumi.Context,
	name string, args *IdentitySourceArgs, opts ...pulumi.ResourceOption) (*IdentitySource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.PolicyStoreId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyStoreId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"policyStoreId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentitySource
	err := ctx.RegisterResource("aws-native:verifiedpermissions:IdentitySource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentitySource gets an existing IdentitySource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentitySource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentitySourceState, opts ...pulumi.ResourceOption) (*IdentitySource, error) {
	var resource IdentitySource
	err := ctx.ReadResource("aws-native:verifiedpermissions:IdentitySource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentitySource resources.
type identitySourceState struct {
}

type IdentitySourceState struct {
}

func (IdentitySourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySourceState)(nil)).Elem()
}

type identitySourceArgs struct {
	// Contains configuration information used when creating a new identity source.
	Configuration interface{} `pulumi:"configuration"`
	// Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
	PolicyStoreId string `pulumi:"policyStoreId"`
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType *string `pulumi:"principalEntityType"`
}

// The set of arguments for constructing a IdentitySource resource.
type IdentitySourceArgs struct {
	// Contains configuration information used when creating a new identity source.
	Configuration pulumi.Input
	// Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
	PolicyStoreId pulumi.StringInput
	// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
	PrincipalEntityType pulumi.StringPtrInput
}

func (IdentitySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySourceArgs)(nil)).Elem()
}

type IdentitySourceInput interface {
	pulumi.Input

	ToIdentitySourceOutput() IdentitySourceOutput
	ToIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceOutput
}

func (*IdentitySource) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySource)(nil)).Elem()
}

func (i *IdentitySource) ToIdentitySourceOutput() IdentitySourceOutput {
	return i.ToIdentitySourceOutputWithContext(context.Background())
}

func (i *IdentitySource) ToIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceOutput)
}

type IdentitySourceOutput struct{ *pulumi.OutputState }

func (IdentitySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySource)(nil)).Elem()
}

func (o IdentitySourceOutput) ToIdentitySourceOutput() IdentitySourceOutput {
	return o
}

func (o IdentitySourceOutput) ToIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceOutput {
	return o
}

// Contains configuration information used when creating a new identity source.
func (o IdentitySourceOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *IdentitySource) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

func (o IdentitySourceOutput) Details() IdentitySourceDetailsOutput {
	return o.ApplyT(func(v *IdentitySource) IdentitySourceDetailsOutput { return v.Details }).(IdentitySourceDetailsOutput)
}

// The unique ID of the new or updated identity store.
func (o IdentitySourceOutput) IdentitySourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentitySource) pulumi.StringOutput { return v.IdentitySourceId }).(pulumi.StringOutput)
}

// Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
func (o IdentitySourceOutput) PolicyStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentitySource) pulumi.StringOutput { return v.PolicyStoreId }).(pulumi.StringOutput)
}

// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
func (o IdentitySourceOutput) PrincipalEntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentitySource) pulumi.StringPtrOutput { return v.PrincipalEntityType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySourceInput)(nil)).Elem(), &IdentitySource{})
	pulumi.RegisterOutputType(IdentitySourceOutput{})
}
