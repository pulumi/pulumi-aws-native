// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := verifiedpermissions.NewPolicyStore(ctx, "myPolicyStore", &verifiedpermissions.PolicyStoreArgs{
//				Schema: &verifiedpermissions.PolicyStoreSchemaDefinitionArgs{
//					CedarJson: pulumi.String("{\"PhotoApp\":{\"commonTypes\":{\"PersonType\":{\"type\":\"Record\",\"attributes\":{\"age\":{\"type\":\"Long\"},\"name\":{\"type\":\"String\"}}},\"ContextType\":{\"type\":\"Record\",\"attributes\":{\"ip\":{\"type\":\"Extension\",\"name\":\"ipaddr\",\"required\":false},\"authenticated\":{\"type\":\"Boolean\",\"required\":true}}}},\"entityTypes\":{\"User\":{\"shape\":{\"type\":\"Record\",\"attributes\":{\"userId\":{\"type\":\"String\"},\"personInformation\":{\"type\":\"PersonType\"}}},\"memberOfTypes\":[\"UserGroup\"]},\"UserGroup\":{\"shape\":{\"type\":\"Record\",\"attributes\":{}}},\"Photo\":{\"shape\":{\"type\":\"Record\",\"attributes\":{\"account\":{\"type\":\"Entity\",\"name\":\"Account\",\"required\":true},\"private\":{\"type\":\"Boolean\",\"required\":true}}},\"memberOfTypes\":[\"Album\",\"Account\"]},\"Album\":{\"shape\":{\"type\":\"Record\",\"attributes\":{}}},\"Account\":{\"shape\":{\"type\":\"Record\",\"attributes\":{}}}},\"actions\":{\"viewPhoto\":{\"appliesTo\":{\"principalTypes\":[\"User\",\"UserGroup\"],\"resourceTypes\":[\"Photo\"],\"context\":{\"type\":\"ContextType\"}}},\"createPhoto\":{\"appliesTo\":{\"principalTypes\":[\"User\",\"UserGroup\"],\"resourceTypes\":[\"Photo\"],\"context\":{\"type\":\"ContextType\"}}},\"listPhotos\":{\"appliesTo\":{\"principalTypes\":[\"User\",\"UserGroup\"],\"resourceTypes\":[\"Photo\"],\"context\":{\"type\":\"ContextType\"}}}}}}"),
//				},
//				ValidationSettings: &verifiedpermissions.PolicyStoreValidationSettingsArgs{
//					Mode: verifiedpermissions.PolicyStoreValidationModeStrict,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PolicyStore struct {
	pulumi.CustomResourceState

	// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique ID of the new or updated policy store.
	PolicyStoreId pulumi.StringOutput `pulumi:"policyStoreId"`
	// Creates or updates the policy schema in a policy store. Cedar can use the schema to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
	Schema PolicyStoreSchemaDefinitionPtrOutput `pulumi:"schema"`
	// Specifies the validation setting for this policy store.
	//
	// Currently, the only valid and required value is `Mode` .
	//
	// > We recommend that you turn on `STRICT` mode only after you define a schema. If a schema doesn't exist, then `STRICT` mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) . Then, when you have a schema defined, use [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) again to turn validation back on.
	ValidationSettings PolicyStoreValidationSettingsOutput `pulumi:"validationSettings"`
}

// NewPolicyStore registers a new resource with the given unique name, arguments, and options.
func NewPolicyStore(ctx *pulumi.Context,
	name string, args *PolicyStoreArgs, opts ...pulumi.ResourceOption) (*PolicyStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ValidationSettings == nil {
		return nil, errors.New("invalid value for required argument 'ValidationSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyStore
	err := ctx.RegisterResource("aws-native:verifiedpermissions:PolicyStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyStore gets an existing PolicyStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyStoreState, opts ...pulumi.ResourceOption) (*PolicyStore, error) {
	var resource PolicyStore
	err := ctx.ReadResource("aws-native:verifiedpermissions:PolicyStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyStore resources.
type policyStoreState struct {
}

type PolicyStoreState struct {
}

func (PolicyStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStoreState)(nil)).Elem()
}

type policyStoreArgs struct {
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description *string `pulumi:"description"`
	// Creates or updates the policy schema in a policy store. Cedar can use the schema to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
	Schema *PolicyStoreSchemaDefinition `pulumi:"schema"`
	// Specifies the validation setting for this policy store.
	//
	// Currently, the only valid and required value is `Mode` .
	//
	// > We recommend that you turn on `STRICT` mode only after you define a schema. If a schema doesn't exist, then `STRICT` mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) . Then, when you have a schema defined, use [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) again to turn validation back on.
	ValidationSettings PolicyStoreValidationSettings `pulumi:"validationSettings"`
}

// The set of arguments for constructing a PolicyStore resource.
type PolicyStoreArgs struct {
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description pulumi.StringPtrInput
	// Creates or updates the policy schema in a policy store. Cedar can use the schema to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
	Schema PolicyStoreSchemaDefinitionPtrInput
	// Specifies the validation setting for this policy store.
	//
	// Currently, the only valid and required value is `Mode` .
	//
	// > We recommend that you turn on `STRICT` mode only after you define a schema. If a schema doesn't exist, then `STRICT` mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) . Then, when you have a schema defined, use [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) again to turn validation back on.
	ValidationSettings PolicyStoreValidationSettingsInput
}

func (PolicyStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStoreArgs)(nil)).Elem()
}

type PolicyStoreInput interface {
	pulumi.Input

	ToPolicyStoreOutput() PolicyStoreOutput
	ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput
}

func (*PolicyStore) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStore)(nil)).Elem()
}

func (i *PolicyStore) ToPolicyStoreOutput() PolicyStoreOutput {
	return i.ToPolicyStoreOutputWithContext(context.Background())
}

func (i *PolicyStore) ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStoreOutput)
}

type PolicyStoreOutput struct{ *pulumi.OutputState }

func (PolicyStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStore)(nil)).Elem()
}

func (o PolicyStoreOutput) ToPolicyStoreOutput() PolicyStoreOutput {
	return o
}

func (o PolicyStoreOutput) ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput {
	return o
}

// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
func (o PolicyStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Descriptive text that you can provide to help with identification of the current policy store.
func (o PolicyStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique ID of the new or updated policy store.
func (o PolicyStoreOutput) PolicyStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringOutput { return v.PolicyStoreId }).(pulumi.StringOutput)
}

// Creates or updates the policy schema in a policy store. Cedar can use the schema to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
func (o PolicyStoreOutput) Schema() PolicyStoreSchemaDefinitionPtrOutput {
	return o.ApplyT(func(v *PolicyStore) PolicyStoreSchemaDefinitionPtrOutput { return v.Schema }).(PolicyStoreSchemaDefinitionPtrOutput)
}

// Specifies the validation setting for this policy store.
//
// Currently, the only valid and required value is `Mode` .
//
// > We recommend that you turn on `STRICT` mode only after you define a schema. If a schema doesn't exist, then `STRICT` mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) . Then, when you have a schema defined, use [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) again to turn validation back on.
func (o PolicyStoreOutput) ValidationSettings() PolicyStoreValidationSettingsOutput {
	return o.ApplyT(func(v *PolicyStore) PolicyStoreValidationSettingsOutput { return v.ValidationSettings }).(PolicyStoreValidationSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStoreInput)(nil)).Elem(), &PolicyStore{})
	pulumi.RegisterOutputType(PolicyStoreOutput{})
}
