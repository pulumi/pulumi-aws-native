// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := verifiedpermissions.NewPolicyStore(ctx, "myPolicyStore", &verifiedpermissions.PolicyStoreArgs{
//				Schema: &verifiedpermissions.PolicyStoreSchemaDefinitionArgs{
//					CedarJson: pulumi.String("{\"PhotoApp\":{\"commonTypes\":{\"PersonType\":{\"type\":\"Record\",\"attributes\":{\"age\":{\"type\":\"Long\"},\"name\":{\"type\":\"String\"}}},\"ContextType\":{\"type\":\"Record\",\"attributes\":{\"ip\":{\"type\":\"Extension\",\"name\":\"ipaddr\",\"required\":false},\"authenticated\":{\"type\":\"Boolean\",\"required\":true}}}},\"entityTypes\":{\"User\":{\"shape\":{\"type\":\"Record\",\"attributes\":{\"userId\":{\"type\":\"String\"},\"personInformation\":{\"type\":\"PersonType\"}}},\"memberOfTypes\":[\"UserGroup\"]},\"UserGroup\":{\"shape\":{\"type\":\"Record\",\"attributes\":{}}},\"Photo\":{\"shape\":{\"type\":\"Record\",\"attributes\":{\"account\":{\"type\":\"Entity\",\"name\":\"Account\",\"required\":true},\"private\":{\"type\":\"Boolean\",\"required\":true}}},\"memberOfTypes\":[\"Album\",\"Account\"]},\"Album\":{\"shape\":{\"type\":\"Record\",\"attributes\":{}}},\"Account\":{\"shape\":{\"type\":\"Record\",\"attributes\":{}}}},\"actions\":{\"viewPhoto\":{\"appliesTo\":{\"principalTypes\":[\"User\",\"UserGroup\"],\"resourceTypes\":[\"Photo\"],\"context\":{\"type\":\"ContextType\"}}},\"createPhoto\":{\"appliesTo\":{\"principalTypes\":[\"User\",\"UserGroup\"],\"resourceTypes\":[\"Photo\"],\"context\":{\"type\":\"ContextType\"}}},\"listPhotos\":{\"appliesTo\":{\"principalTypes\":[\"User\",\"UserGroup\"],\"resourceTypes\":[\"Photo\"],\"context\":{\"type\":\"ContextType\"}}}}}}"),
//				},
//				ValidationSettings: &verifiedpermissions.PolicyStoreValidationSettingsArgs{
//					Mode: verifiedpermissions.PolicyStoreValidationModeStrict,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PolicyStore struct {
	pulumi.CustomResourceState

	// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique ID of the new or updated policy store.
	PolicyStoreId pulumi.StringOutput `pulumi:"policyStoreId"`
	// Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
	Schema PolicyStoreSchemaDefinitionPtrOutput `pulumi:"schema"`
	// A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
	ValidationSettings PolicyStoreValidationSettingsOutput `pulumi:"validationSettings"`
}

// NewPolicyStore registers a new resource with the given unique name, arguments, and options.
func NewPolicyStore(ctx *pulumi.Context,
	name string, args *PolicyStoreArgs, opts ...pulumi.ResourceOption) (*PolicyStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ValidationSettings == nil {
		return nil, errors.New("invalid value for required argument 'ValidationSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyStore
	err := ctx.RegisterResource("aws-native:verifiedpermissions:PolicyStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyStore gets an existing PolicyStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyStoreState, opts ...pulumi.ResourceOption) (*PolicyStore, error) {
	var resource PolicyStore
	err := ctx.ReadResource("aws-native:verifiedpermissions:PolicyStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyStore resources.
type policyStoreState struct {
}

type PolicyStoreState struct {
}

func (PolicyStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStoreState)(nil)).Elem()
}

type policyStoreArgs struct {
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description *string `pulumi:"description"`
	// Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
	Schema *PolicyStoreSchemaDefinition `pulumi:"schema"`
	// A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
	ValidationSettings PolicyStoreValidationSettings `pulumi:"validationSettings"`
}

// The set of arguments for constructing a PolicyStore resource.
type PolicyStoreArgs struct {
	// Descriptive text that you can provide to help with identification of the current policy store.
	Description pulumi.StringPtrInput
	// Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
	Schema PolicyStoreSchemaDefinitionPtrInput
	// A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
	ValidationSettings PolicyStoreValidationSettingsInput
}

func (PolicyStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStoreArgs)(nil)).Elem()
}

type PolicyStoreInput interface {
	pulumi.Input

	ToPolicyStoreOutput() PolicyStoreOutput
	ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput
}

func (*PolicyStore) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStore)(nil)).Elem()
}

func (i *PolicyStore) ToPolicyStoreOutput() PolicyStoreOutput {
	return i.ToPolicyStoreOutputWithContext(context.Background())
}

func (i *PolicyStore) ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStoreOutput)
}

type PolicyStoreOutput struct{ *pulumi.OutputState }

func (PolicyStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStore)(nil)).Elem()
}

func (o PolicyStoreOutput) ToPolicyStoreOutput() PolicyStoreOutput {
	return o
}

func (o PolicyStoreOutput) ToPolicyStoreOutputWithContext(ctx context.Context) PolicyStoreOutput {
	return o
}

// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
func (o PolicyStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Descriptive text that you can provide to help with identification of the current policy store.
func (o PolicyStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique ID of the new or updated policy store.
func (o PolicyStoreOutput) PolicyStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStore) pulumi.StringOutput { return v.PolicyStoreId }).(pulumi.StringOutput)
}

// Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
func (o PolicyStoreOutput) Schema() PolicyStoreSchemaDefinitionPtrOutput {
	return o.ApplyT(func(v *PolicyStore) PolicyStoreSchemaDefinitionPtrOutput { return v.Schema }).(PolicyStoreSchemaDefinitionPtrOutput)
}

// A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
func (o PolicyStoreOutput) ValidationSettings() PolicyStoreValidationSettingsOutput {
	return o.ApplyT(func(v *PolicyStore) PolicyStoreValidationSettingsOutput { return v.ValidationSettings }).(PolicyStoreValidationSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStoreInput)(nil)).Elem(), &PolicyStore{})
	pulumi.RegisterOutputType(PolicyStoreOutput{})
}
