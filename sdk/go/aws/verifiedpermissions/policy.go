// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package verifiedpermissions

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::VerifiedPermissions::Policy Resource Type
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			policyStoreId := cfg.Require("policyStoreId")
//			description := cfg.Require("description")
//			statement := cfg.Require("statement")
//			staticPolicy, err := verifiedpermissions.NewPolicy(ctx, "staticPolicy", &verifiedpermissions.PolicyArgs{
//				PolicyStoreId: pulumi.String(policyStoreId),
//				Definition: pulumi.Any{
//					Static: &verifiedpermissions.PolicyStaticPolicyDefinitionArgs{
//						Description: pulumi.String(description),
//						Statement:   pulumi.String(statement),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("policyId", staticPolicy.PolicyId)
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/verifiedpermissions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			policyStoreId := cfg.Require("policyStoreId")
//			policyTemplateId := cfg.Require("policyTemplateId")
//			principalType := cfg.Require("principalType")
//			principalId := cfg.Require("principalId")
//			resourceType := cfg.Require("resourceType")
//			resourceId := cfg.Require("resourceId")
//			templateLinkedPolicy, err := verifiedpermissions.NewPolicy(ctx, "templateLinkedPolicy", &verifiedpermissions.PolicyArgs{
//				PolicyStoreId: pulumi.String(policyStoreId),
//				Definition: pulumi.Any{
//					TemplateLinked: &verifiedpermissions.PolicyTemplateLinkedPolicyDefinitionArgs{
//						PolicyTemplateId: pulumi.String(policyTemplateId),
//						Principal: &verifiedpermissions.PolicyEntityIdentifierArgs{
//							EntityType: pulumi.String(principalType),
//							EntityId:   pulumi.String(principalId),
//						},
//						Resource: &verifiedpermissions.PolicyEntityIdentifierArgs{
//							EntityType: pulumi.String(resourceType),
//							EntityId:   pulumi.String(resourceId),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("policyId", templateLinkedPolicy.PolicyId)
//			return nil
//		})
//	}
//
// ```
type Policy struct {
	pulumi.CustomResourceState

	// A structure that defines a Cedar policy. It includes the policy type, a description, and a policy body. This is a top level data type used to create a policy.
	//
	// This data type is used as a request parameter for the [CreatePolicy](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html) operation. This structure must always have either an `Static` or a `TemplateLinked` element.
	Definition pulumi.AnyOutput `pulumi:"definition"`
	// The unique ID of the new or updated policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
	PolicyStoreId pulumi.StringOutput `pulumi:"policyStoreId"`
	// The type of the policy. This is one of the following values:
	//
	// - Static
	// - TemplateLinked
	PolicyType PolicyTypeOutput `pulumi:"policyType"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.PolicyStoreId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyStoreId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"policyStoreId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("aws-native:verifiedpermissions:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("aws-native:verifiedpermissions:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
}

type PolicyState struct {
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// A structure that defines a Cedar policy. It includes the policy type, a description, and a policy body. This is a top level data type used to create a policy.
	//
	// This data type is used as a request parameter for the [CreatePolicy](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html) operation. This structure must always have either an `Static` or a `TemplateLinked` element.
	Definition interface{} `pulumi:"definition"`
	// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
	PolicyStoreId string `pulumi:"policyStoreId"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// A structure that defines a Cedar policy. It includes the policy type, a description, and a policy body. This is a top level data type used to create a policy.
	//
	// This data type is used as a request parameter for the [CreatePolicy](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html) operation. This structure must always have either an `Static` or a `TemplateLinked` element.
	Definition pulumi.Input
	// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
	PolicyStoreId pulumi.StringInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// A structure that defines a Cedar policy. It includes the policy type, a description, and a policy body. This is a top level data type used to create a policy.
//
// This data type is used as a request parameter for the [CreatePolicy](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html) operation. This structure must always have either an `Static` or a `TemplateLinked` element.
func (o PolicyOutput) Definition() pulumi.AnyOutput {
	return o.ApplyT(func(v *Policy) pulumi.AnyOutput { return v.Definition }).(pulumi.AnyOutput)
}

// The unique ID of the new or updated policy.
func (o PolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
func (o PolicyOutput) PolicyStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyStoreId }).(pulumi.StringOutput)
}

// The type of the policy. This is one of the following values:
//
// - Static
// - TemplateLinked
func (o PolicyOutput) PolicyType() PolicyTypeOutput {
	return o.ApplyT(func(v *Policy) PolicyTypeOutput { return v.PolicyType }).(PolicyTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterOutputType(PolicyOutput{})
}
