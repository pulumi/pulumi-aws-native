// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resiliencehub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Indicates an event you would like to subscribe and get notification for.
type AppEventSubscription struct {
	// The type of event you would like to subscribe and get notification for.
	EventType AppEventSubscriptionEventType `pulumi:"eventType"`
	// Unique name to identify an event subscription.
	Name string `pulumi:"name"`
	// Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
}

// AppEventSubscriptionInput is an input type that accepts AppEventSubscriptionArgs and AppEventSubscriptionOutput values.
// You can construct a concrete instance of `AppEventSubscriptionInput` via:
//
//	AppEventSubscriptionArgs{...}
type AppEventSubscriptionInput interface {
	pulumi.Input

	ToAppEventSubscriptionOutput() AppEventSubscriptionOutput
	ToAppEventSubscriptionOutputWithContext(context.Context) AppEventSubscriptionOutput
}

// Indicates an event you would like to subscribe and get notification for.
type AppEventSubscriptionArgs struct {
	// The type of event you would like to subscribe and get notification for.
	EventType AppEventSubscriptionEventTypeInput `pulumi:"eventType"`
	// Unique name to identify an event subscription.
	Name pulumi.StringInput `pulumi:"name"`
	// Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
	SnsTopicArn pulumi.StringPtrInput `pulumi:"snsTopicArn"`
}

func (AppEventSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEventSubscription)(nil)).Elem()
}

func (i AppEventSubscriptionArgs) ToAppEventSubscriptionOutput() AppEventSubscriptionOutput {
	return i.ToAppEventSubscriptionOutputWithContext(context.Background())
}

func (i AppEventSubscriptionArgs) ToAppEventSubscriptionOutputWithContext(ctx context.Context) AppEventSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEventSubscriptionOutput)
}

func (i AppEventSubscriptionArgs) ToOutput(ctx context.Context) pulumix.Output[AppEventSubscription] {
	return pulumix.Output[AppEventSubscription]{
		OutputState: i.ToAppEventSubscriptionOutputWithContext(ctx).OutputState,
	}
}

// AppEventSubscriptionArrayInput is an input type that accepts AppEventSubscriptionArray and AppEventSubscriptionArrayOutput values.
// You can construct a concrete instance of `AppEventSubscriptionArrayInput` via:
//
//	AppEventSubscriptionArray{ AppEventSubscriptionArgs{...} }
type AppEventSubscriptionArrayInput interface {
	pulumi.Input

	ToAppEventSubscriptionArrayOutput() AppEventSubscriptionArrayOutput
	ToAppEventSubscriptionArrayOutputWithContext(context.Context) AppEventSubscriptionArrayOutput
}

type AppEventSubscriptionArray []AppEventSubscriptionInput

func (AppEventSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppEventSubscription)(nil)).Elem()
}

func (i AppEventSubscriptionArray) ToAppEventSubscriptionArrayOutput() AppEventSubscriptionArrayOutput {
	return i.ToAppEventSubscriptionArrayOutputWithContext(context.Background())
}

func (i AppEventSubscriptionArray) ToAppEventSubscriptionArrayOutputWithContext(ctx context.Context) AppEventSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEventSubscriptionArrayOutput)
}

func (i AppEventSubscriptionArray) ToOutput(ctx context.Context) pulumix.Output[[]AppEventSubscription] {
	return pulumix.Output[[]AppEventSubscription]{
		OutputState: i.ToAppEventSubscriptionArrayOutputWithContext(ctx).OutputState,
	}
}

// Indicates an event you would like to subscribe and get notification for.
type AppEventSubscriptionOutput struct{ *pulumi.OutputState }

func (AppEventSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEventSubscription)(nil)).Elem()
}

func (o AppEventSubscriptionOutput) ToAppEventSubscriptionOutput() AppEventSubscriptionOutput {
	return o
}

func (o AppEventSubscriptionOutput) ToAppEventSubscriptionOutputWithContext(ctx context.Context) AppEventSubscriptionOutput {
	return o
}

func (o AppEventSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[AppEventSubscription] {
	return pulumix.Output[AppEventSubscription]{
		OutputState: o.OutputState,
	}
}

// The type of event you would like to subscribe and get notification for.
func (o AppEventSubscriptionOutput) EventType() AppEventSubscriptionEventTypeOutput {
	return o.ApplyT(func(v AppEventSubscription) AppEventSubscriptionEventType { return v.EventType }).(AppEventSubscriptionEventTypeOutput)
}

// Unique name to identify an event subscription.
func (o AppEventSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppEventSubscription) string { return v.Name }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
func (o AppEventSubscriptionOutput) SnsTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEventSubscription) *string { return v.SnsTopicArn }).(pulumi.StringPtrOutput)
}

type AppEventSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (AppEventSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppEventSubscription)(nil)).Elem()
}

func (o AppEventSubscriptionArrayOutput) ToAppEventSubscriptionArrayOutput() AppEventSubscriptionArrayOutput {
	return o
}

func (o AppEventSubscriptionArrayOutput) ToAppEventSubscriptionArrayOutputWithContext(ctx context.Context) AppEventSubscriptionArrayOutput {
	return o
}

func (o AppEventSubscriptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AppEventSubscription] {
	return pulumix.Output[[]AppEventSubscription]{
		OutputState: o.OutputState,
	}
}

func (o AppEventSubscriptionArrayOutput) Index(i pulumi.IntInput) AppEventSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppEventSubscription {
		return vs[0].([]AppEventSubscription)[vs[1].(int)]
	}).(AppEventSubscriptionOutput)
}

// Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
type AppPermissionModel struct {
	// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
	CrossAccountRoleArns []string `pulumi:"crossAccountRoleArns"`
	// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
	InvokerRoleName *string `pulumi:"invokerRoleName"`
	// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
	Type AppPermissionModelType `pulumi:"type"`
}

// AppPermissionModelInput is an input type that accepts AppPermissionModelArgs and AppPermissionModelOutput values.
// You can construct a concrete instance of `AppPermissionModelInput` via:
//
//	AppPermissionModelArgs{...}
type AppPermissionModelInput interface {
	pulumi.Input

	ToAppPermissionModelOutput() AppPermissionModelOutput
	ToAppPermissionModelOutputWithContext(context.Context) AppPermissionModelOutput
}

// Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
type AppPermissionModelArgs struct {
	// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
	CrossAccountRoleArns pulumi.StringArrayInput `pulumi:"crossAccountRoleArns"`
	// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
	InvokerRoleName pulumi.StringPtrInput `pulumi:"invokerRoleName"`
	// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
	Type AppPermissionModelTypeInput `pulumi:"type"`
}

func (AppPermissionModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPermissionModel)(nil)).Elem()
}

func (i AppPermissionModelArgs) ToAppPermissionModelOutput() AppPermissionModelOutput {
	return i.ToAppPermissionModelOutputWithContext(context.Background())
}

func (i AppPermissionModelArgs) ToAppPermissionModelOutputWithContext(ctx context.Context) AppPermissionModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPermissionModelOutput)
}

func (i AppPermissionModelArgs) ToOutput(ctx context.Context) pulumix.Output[AppPermissionModel] {
	return pulumix.Output[AppPermissionModel]{
		OutputState: i.ToAppPermissionModelOutputWithContext(ctx).OutputState,
	}
}

func (i AppPermissionModelArgs) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return i.ToAppPermissionModelPtrOutputWithContext(context.Background())
}

func (i AppPermissionModelArgs) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPermissionModelOutput).ToAppPermissionModelPtrOutputWithContext(ctx)
}

// AppPermissionModelPtrInput is an input type that accepts AppPermissionModelArgs, AppPermissionModelPtr and AppPermissionModelPtrOutput values.
// You can construct a concrete instance of `AppPermissionModelPtrInput` via:
//
//	        AppPermissionModelArgs{...}
//
//	or:
//
//	        nil
type AppPermissionModelPtrInput interface {
	pulumi.Input

	ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput
	ToAppPermissionModelPtrOutputWithContext(context.Context) AppPermissionModelPtrOutput
}

type appPermissionModelPtrType AppPermissionModelArgs

func AppPermissionModelPtr(v *AppPermissionModelArgs) AppPermissionModelPtrInput {
	return (*appPermissionModelPtrType)(v)
}

func (*appPermissionModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppPermissionModel)(nil)).Elem()
}

func (i *appPermissionModelPtrType) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return i.ToAppPermissionModelPtrOutputWithContext(context.Background())
}

func (i *appPermissionModelPtrType) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPermissionModelPtrOutput)
}

func (i *appPermissionModelPtrType) ToOutput(ctx context.Context) pulumix.Output[*AppPermissionModel] {
	return pulumix.Output[*AppPermissionModel]{
		OutputState: i.ToAppPermissionModelPtrOutputWithContext(ctx).OutputState,
	}
}

// Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
type AppPermissionModelOutput struct{ *pulumi.OutputState }

func (AppPermissionModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPermissionModel)(nil)).Elem()
}

func (o AppPermissionModelOutput) ToAppPermissionModelOutput() AppPermissionModelOutput {
	return o
}

func (o AppPermissionModelOutput) ToAppPermissionModelOutputWithContext(ctx context.Context) AppPermissionModelOutput {
	return o
}

func (o AppPermissionModelOutput) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return o.ToAppPermissionModelPtrOutputWithContext(context.Background())
}

func (o AppPermissionModelOutput) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppPermissionModel) *AppPermissionModel {
		return &v
	}).(AppPermissionModelPtrOutput)
}

func (o AppPermissionModelOutput) ToOutput(ctx context.Context) pulumix.Output[AppPermissionModel] {
	return pulumix.Output[AppPermissionModel]{
		OutputState: o.OutputState,
	}
}

// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
func (o AppPermissionModelOutput) CrossAccountRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppPermissionModel) []string { return v.CrossAccountRoleArns }).(pulumi.StringArrayOutput)
}

// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
func (o AppPermissionModelOutput) InvokerRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppPermissionModel) *string { return v.InvokerRoleName }).(pulumi.StringPtrOutput)
}

// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
func (o AppPermissionModelOutput) Type() AppPermissionModelTypeOutput {
	return o.ApplyT(func(v AppPermissionModel) AppPermissionModelType { return v.Type }).(AppPermissionModelTypeOutput)
}

type AppPermissionModelPtrOutput struct{ *pulumi.OutputState }

func (AppPermissionModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppPermissionModel)(nil)).Elem()
}

func (o AppPermissionModelPtrOutput) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return o
}

func (o AppPermissionModelPtrOutput) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return o
}

func (o AppPermissionModelPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppPermissionModel] {
	return pulumix.Output[*AppPermissionModel]{
		OutputState: o.OutputState,
	}
}

func (o AppPermissionModelPtrOutput) Elem() AppPermissionModelOutput {
	return o.ApplyT(func(v *AppPermissionModel) AppPermissionModel {
		if v != nil {
			return *v
		}
		var ret AppPermissionModel
		return ret
	}).(AppPermissionModelOutput)
}

// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
func (o AppPermissionModelPtrOutput) CrossAccountRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppPermissionModel) []string {
		if v == nil {
			return nil
		}
		return v.CrossAccountRoleArns
	}).(pulumi.StringArrayOutput)
}

// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
func (o AppPermissionModelPtrOutput) InvokerRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppPermissionModel) *string {
		if v == nil {
			return nil
		}
		return v.InvokerRoleName
	}).(pulumi.StringPtrOutput)
}

// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
func (o AppPermissionModelPtrOutput) Type() AppPermissionModelTypePtrOutput {
	return o.ApplyT(func(v *AppPermissionModel) *AppPermissionModelType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(AppPermissionModelTypePtrOutput)
}

type AppPhysicalResourceId struct {
	AwsAccountId *string `pulumi:"awsAccountId"`
	AwsRegion    *string `pulumi:"awsRegion"`
	Identifier   string  `pulumi:"identifier"`
	Type         string  `pulumi:"type"`
}

// AppPhysicalResourceIdInput is an input type that accepts AppPhysicalResourceIdArgs and AppPhysicalResourceIdOutput values.
// You can construct a concrete instance of `AppPhysicalResourceIdInput` via:
//
//	AppPhysicalResourceIdArgs{...}
type AppPhysicalResourceIdInput interface {
	pulumi.Input

	ToAppPhysicalResourceIdOutput() AppPhysicalResourceIdOutput
	ToAppPhysicalResourceIdOutputWithContext(context.Context) AppPhysicalResourceIdOutput
}

type AppPhysicalResourceIdArgs struct {
	AwsAccountId pulumi.StringPtrInput `pulumi:"awsAccountId"`
	AwsRegion    pulumi.StringPtrInput `pulumi:"awsRegion"`
	Identifier   pulumi.StringInput    `pulumi:"identifier"`
	Type         pulumi.StringInput    `pulumi:"type"`
}

func (AppPhysicalResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPhysicalResourceId)(nil)).Elem()
}

func (i AppPhysicalResourceIdArgs) ToAppPhysicalResourceIdOutput() AppPhysicalResourceIdOutput {
	return i.ToAppPhysicalResourceIdOutputWithContext(context.Background())
}

func (i AppPhysicalResourceIdArgs) ToAppPhysicalResourceIdOutputWithContext(ctx context.Context) AppPhysicalResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPhysicalResourceIdOutput)
}

func (i AppPhysicalResourceIdArgs) ToOutput(ctx context.Context) pulumix.Output[AppPhysicalResourceId] {
	return pulumix.Output[AppPhysicalResourceId]{
		OutputState: i.ToAppPhysicalResourceIdOutputWithContext(ctx).OutputState,
	}
}

type AppPhysicalResourceIdOutput struct{ *pulumi.OutputState }

func (AppPhysicalResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPhysicalResourceId)(nil)).Elem()
}

func (o AppPhysicalResourceIdOutput) ToAppPhysicalResourceIdOutput() AppPhysicalResourceIdOutput {
	return o
}

func (o AppPhysicalResourceIdOutput) ToAppPhysicalResourceIdOutputWithContext(ctx context.Context) AppPhysicalResourceIdOutput {
	return o
}

func (o AppPhysicalResourceIdOutput) ToOutput(ctx context.Context) pulumix.Output[AppPhysicalResourceId] {
	return pulumix.Output[AppPhysicalResourceId]{
		OutputState: o.OutputState,
	}
}

func (o AppPhysicalResourceIdOutput) AwsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) *string { return v.AwsAccountId }).(pulumi.StringPtrOutput)
}

func (o AppPhysicalResourceIdOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

func (o AppPhysicalResourceIdOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o AppPhysicalResourceIdOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) string { return v.Type }).(pulumi.StringOutput)
}

// Resource mapping is used to map logical resources from template to physical resource
type AppResourceMapping struct {
	EksSourceName       *string               `pulumi:"eksSourceName"`
	LogicalStackName    *string               `pulumi:"logicalStackName"`
	MappingType         string                `pulumi:"mappingType"`
	PhysicalResourceId  AppPhysicalResourceId `pulumi:"physicalResourceId"`
	ResourceName        *string               `pulumi:"resourceName"`
	TerraformSourceName *string               `pulumi:"terraformSourceName"`
}

// AppResourceMappingInput is an input type that accepts AppResourceMappingArgs and AppResourceMappingOutput values.
// You can construct a concrete instance of `AppResourceMappingInput` via:
//
//	AppResourceMappingArgs{...}
type AppResourceMappingInput interface {
	pulumi.Input

	ToAppResourceMappingOutput() AppResourceMappingOutput
	ToAppResourceMappingOutputWithContext(context.Context) AppResourceMappingOutput
}

// Resource mapping is used to map logical resources from template to physical resource
type AppResourceMappingArgs struct {
	EksSourceName       pulumi.StringPtrInput      `pulumi:"eksSourceName"`
	LogicalStackName    pulumi.StringPtrInput      `pulumi:"logicalStackName"`
	MappingType         pulumi.StringInput         `pulumi:"mappingType"`
	PhysicalResourceId  AppPhysicalResourceIdInput `pulumi:"physicalResourceId"`
	ResourceName        pulumi.StringPtrInput      `pulumi:"resourceName"`
	TerraformSourceName pulumi.StringPtrInput      `pulumi:"terraformSourceName"`
}

func (AppResourceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppResourceMapping)(nil)).Elem()
}

func (i AppResourceMappingArgs) ToAppResourceMappingOutput() AppResourceMappingOutput {
	return i.ToAppResourceMappingOutputWithContext(context.Background())
}

func (i AppResourceMappingArgs) ToAppResourceMappingOutputWithContext(ctx context.Context) AppResourceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppResourceMappingOutput)
}

func (i AppResourceMappingArgs) ToOutput(ctx context.Context) pulumix.Output[AppResourceMapping] {
	return pulumix.Output[AppResourceMapping]{
		OutputState: i.ToAppResourceMappingOutputWithContext(ctx).OutputState,
	}
}

// AppResourceMappingArrayInput is an input type that accepts AppResourceMappingArray and AppResourceMappingArrayOutput values.
// You can construct a concrete instance of `AppResourceMappingArrayInput` via:
//
//	AppResourceMappingArray{ AppResourceMappingArgs{...} }
type AppResourceMappingArrayInput interface {
	pulumi.Input

	ToAppResourceMappingArrayOutput() AppResourceMappingArrayOutput
	ToAppResourceMappingArrayOutputWithContext(context.Context) AppResourceMappingArrayOutput
}

type AppResourceMappingArray []AppResourceMappingInput

func (AppResourceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppResourceMapping)(nil)).Elem()
}

func (i AppResourceMappingArray) ToAppResourceMappingArrayOutput() AppResourceMappingArrayOutput {
	return i.ToAppResourceMappingArrayOutputWithContext(context.Background())
}

func (i AppResourceMappingArray) ToAppResourceMappingArrayOutputWithContext(ctx context.Context) AppResourceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppResourceMappingArrayOutput)
}

func (i AppResourceMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]AppResourceMapping] {
	return pulumix.Output[[]AppResourceMapping]{
		OutputState: i.ToAppResourceMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Resource mapping is used to map logical resources from template to physical resource
type AppResourceMappingOutput struct{ *pulumi.OutputState }

func (AppResourceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppResourceMapping)(nil)).Elem()
}

func (o AppResourceMappingOutput) ToAppResourceMappingOutput() AppResourceMappingOutput {
	return o
}

func (o AppResourceMappingOutput) ToAppResourceMappingOutputWithContext(ctx context.Context) AppResourceMappingOutput {
	return o
}

func (o AppResourceMappingOutput) ToOutput(ctx context.Context) pulumix.Output[AppResourceMapping] {
	return pulumix.Output[AppResourceMapping]{
		OutputState: o.OutputState,
	}
}

func (o AppResourceMappingOutput) EksSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.EksSourceName }).(pulumi.StringPtrOutput)
}

func (o AppResourceMappingOutput) LogicalStackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.LogicalStackName }).(pulumi.StringPtrOutput)
}

func (o AppResourceMappingOutput) MappingType() pulumi.StringOutput {
	return o.ApplyT(func(v AppResourceMapping) string { return v.MappingType }).(pulumi.StringOutput)
}

func (o AppResourceMappingOutput) PhysicalResourceId() AppPhysicalResourceIdOutput {
	return o.ApplyT(func(v AppResourceMapping) AppPhysicalResourceId { return v.PhysicalResourceId }).(AppPhysicalResourceIdOutput)
}

func (o AppResourceMappingOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

func (o AppResourceMappingOutput) TerraformSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.TerraformSourceName }).(pulumi.StringPtrOutput)
}

type AppResourceMappingArrayOutput struct{ *pulumi.OutputState }

func (AppResourceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppResourceMapping)(nil)).Elem()
}

func (o AppResourceMappingArrayOutput) ToAppResourceMappingArrayOutput() AppResourceMappingArrayOutput {
	return o
}

func (o AppResourceMappingArrayOutput) ToAppResourceMappingArrayOutputWithContext(ctx context.Context) AppResourceMappingArrayOutput {
	return o
}

func (o AppResourceMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AppResourceMapping] {
	return pulumix.Output[[]AppResourceMapping]{
		OutputState: o.OutputState,
	}
}

func (o AppResourceMappingArrayOutput) Index(i pulumi.IntInput) AppResourceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppResourceMapping {
		return vs[0].([]AppResourceMapping)[vs[1].(int)]
	}).(AppResourceMappingOutput)
}

type AppTagMap struct {
}

// AppTagMapInput is an input type that accepts AppTagMap and AppTagMapOutput values.
// You can construct a concrete instance of `AppTagMapInput` via:
//
//	AppTagMap{ "key": AppTagArgs{...} }
type AppTagMapInput interface {
	pulumi.Input

	ToAppTagMapOutput() AppTagMapOutput
	ToAppTagMapOutputWithContext(context.Context) AppTagMapOutput
}

type AppTagMapArgs struct {
}

func (AppTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppTagMap)(nil)).Elem()
}

func (i AppTagMapArgs) ToAppTagMapOutput() AppTagMapOutput {
	return i.ToAppTagMapOutputWithContext(context.Background())
}

func (i AppTagMapArgs) ToAppTagMapOutputWithContext(ctx context.Context) AppTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppTagMapOutput)
}

func (i AppTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[AppTagMap] {
	return pulumix.Output[AppTagMap]{
		OutputState: i.ToAppTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i AppTagMapArgs) ToAppTagMapPtrOutput() AppTagMapPtrOutput {
	return i.ToAppTagMapPtrOutputWithContext(context.Background())
}

func (i AppTagMapArgs) ToAppTagMapPtrOutputWithContext(ctx context.Context) AppTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppTagMapOutput).ToAppTagMapPtrOutputWithContext(ctx)
}

// AppTagMapPtrInput is an input type that accepts AppTagMapArgs, AppTagMapPtr and AppTagMapPtrOutput values.
// You can construct a concrete instance of `AppTagMapPtrInput` via:
//
//	        AppTagMapArgs{...}
//
//	or:
//
//	        nil
type AppTagMapPtrInput interface {
	pulumi.Input

	ToAppTagMapPtrOutput() AppTagMapPtrOutput
	ToAppTagMapPtrOutputWithContext(context.Context) AppTagMapPtrOutput
}

type appTagMapPtrType AppTagMapArgs

func AppTagMapPtr(v *AppTagMapArgs) AppTagMapPtrInput {
	return (*appTagMapPtrType)(v)
}

func (*appTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppTagMap)(nil)).Elem()
}

func (i *appTagMapPtrType) ToAppTagMapPtrOutput() AppTagMapPtrOutput {
	return i.ToAppTagMapPtrOutputWithContext(context.Background())
}

func (i *appTagMapPtrType) ToAppTagMapPtrOutputWithContext(ctx context.Context) AppTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppTagMapPtrOutput)
}

func (i *appTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*AppTagMap] {
	return pulumix.Output[*AppTagMap]{
		OutputState: i.ToAppTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

type AppTagMapOutput struct{ *pulumi.OutputState }

func (AppTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppTagMap)(nil)).Elem()
}

func (o AppTagMapOutput) ToAppTagMapOutput() AppTagMapOutput {
	return o
}

func (o AppTagMapOutput) ToAppTagMapOutputWithContext(ctx context.Context) AppTagMapOutput {
	return o
}

func (o AppTagMapOutput) ToAppTagMapPtrOutput() AppTagMapPtrOutput {
	return o.ToAppTagMapPtrOutputWithContext(context.Background())
}

func (o AppTagMapOutput) ToAppTagMapPtrOutputWithContext(ctx context.Context) AppTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppTagMap) *AppTagMap {
		return &v
	}).(AppTagMapPtrOutput)
}

func (o AppTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[AppTagMap] {
	return pulumix.Output[AppTagMap]{
		OutputState: o.OutputState,
	}
}

type AppTagMapPtrOutput struct{ *pulumi.OutputState }

func (AppTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppTagMap)(nil)).Elem()
}

func (o AppTagMapPtrOutput) ToAppTagMapPtrOutput() AppTagMapPtrOutput {
	return o
}

func (o AppTagMapPtrOutput) ToAppTagMapPtrOutputWithContext(ctx context.Context) AppTagMapPtrOutput {
	return o
}

func (o AppTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppTagMap] {
	return pulumix.Output[*AppTagMap]{
		OutputState: o.OutputState,
	}
}

func (o AppTagMapPtrOutput) Elem() AppTagMapOutput {
	return o.ApplyT(func(v *AppTagMap) AppTagMap {
		if v != nil {
			return *v
		}
		var ret AppTagMap
		return ret
	}).(AppTagMapOutput)
}

type ResiliencyPolicyPolicyMap struct {
}

// ResiliencyPolicyPolicyMapInput is an input type that accepts ResiliencyPolicyPolicyMap and ResiliencyPolicyPolicyMapOutput values.
// You can construct a concrete instance of `ResiliencyPolicyPolicyMapInput` via:
//
//	ResiliencyPolicyPolicyMap{ "key": ResiliencyPolicyPolicyArgs{...} }
type ResiliencyPolicyPolicyMapInput interface {
	pulumi.Input

	ToResiliencyPolicyPolicyMapOutput() ResiliencyPolicyPolicyMapOutput
	ToResiliencyPolicyPolicyMapOutputWithContext(context.Context) ResiliencyPolicyPolicyMapOutput
}

type ResiliencyPolicyPolicyMapArgs struct {
}

func (ResiliencyPolicyPolicyMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyPolicyMap)(nil)).Elem()
}

func (i ResiliencyPolicyPolicyMapArgs) ToResiliencyPolicyPolicyMapOutput() ResiliencyPolicyPolicyMapOutput {
	return i.ToResiliencyPolicyPolicyMapOutputWithContext(context.Background())
}

func (i ResiliencyPolicyPolicyMapArgs) ToResiliencyPolicyPolicyMapOutputWithContext(ctx context.Context) ResiliencyPolicyPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyPolicyMapOutput)
}

func (i ResiliencyPolicyPolicyMapArgs) ToOutput(ctx context.Context) pulumix.Output[ResiliencyPolicyPolicyMap] {
	return pulumix.Output[ResiliencyPolicyPolicyMap]{
		OutputState: i.ToResiliencyPolicyPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type ResiliencyPolicyPolicyMapOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyPolicyMap)(nil)).Elem()
}

func (o ResiliencyPolicyPolicyMapOutput) ToResiliencyPolicyPolicyMapOutput() ResiliencyPolicyPolicyMapOutput {
	return o
}

func (o ResiliencyPolicyPolicyMapOutput) ToResiliencyPolicyPolicyMapOutputWithContext(ctx context.Context) ResiliencyPolicyPolicyMapOutput {
	return o
}

func (o ResiliencyPolicyPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[ResiliencyPolicyPolicyMap] {
	return pulumix.Output[ResiliencyPolicyPolicyMap]{
		OutputState: o.OutputState,
	}
}

type ResiliencyPolicyPolicyMapPtrOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyPolicyMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicyPolicyMap)(nil)).Elem()
}

func (o ResiliencyPolicyPolicyMapPtrOutput) ToResiliencyPolicyPolicyMapPtrOutput() ResiliencyPolicyPolicyMapPtrOutput {
	return o
}

func (o ResiliencyPolicyPolicyMapPtrOutput) ToResiliencyPolicyPolicyMapPtrOutputWithContext(ctx context.Context) ResiliencyPolicyPolicyMapPtrOutput {
	return o
}

func (o ResiliencyPolicyPolicyMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResiliencyPolicyPolicyMap] {
	return pulumix.Output[*ResiliencyPolicyPolicyMap]{
		OutputState: o.OutputState,
	}
}

func (o ResiliencyPolicyPolicyMapPtrOutput) Elem() ResiliencyPolicyPolicyMapOutput {
	return o.ApplyT(func(v *ResiliencyPolicyPolicyMap) ResiliencyPolicyPolicyMap {
		if v != nil {
			return *v
		}
		var ret ResiliencyPolicyPolicyMap
		return ret
	}).(ResiliencyPolicyPolicyMapOutput)
}

type ResiliencyPolicyTagMap struct {
}

// ResiliencyPolicyTagMapInput is an input type that accepts ResiliencyPolicyTagMap and ResiliencyPolicyTagMapOutput values.
// You can construct a concrete instance of `ResiliencyPolicyTagMapInput` via:
//
//	ResiliencyPolicyTagMap{ "key": ResiliencyPolicyTagArgs{...} }
type ResiliencyPolicyTagMapInput interface {
	pulumi.Input

	ToResiliencyPolicyTagMapOutput() ResiliencyPolicyTagMapOutput
	ToResiliencyPolicyTagMapOutputWithContext(context.Context) ResiliencyPolicyTagMapOutput
}

type ResiliencyPolicyTagMapArgs struct {
}

func (ResiliencyPolicyTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyTagMap)(nil)).Elem()
}

func (i ResiliencyPolicyTagMapArgs) ToResiliencyPolicyTagMapOutput() ResiliencyPolicyTagMapOutput {
	return i.ToResiliencyPolicyTagMapOutputWithContext(context.Background())
}

func (i ResiliencyPolicyTagMapArgs) ToResiliencyPolicyTagMapOutputWithContext(ctx context.Context) ResiliencyPolicyTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyTagMapOutput)
}

func (i ResiliencyPolicyTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[ResiliencyPolicyTagMap] {
	return pulumix.Output[ResiliencyPolicyTagMap]{
		OutputState: i.ToResiliencyPolicyTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i ResiliencyPolicyTagMapArgs) ToResiliencyPolicyTagMapPtrOutput() ResiliencyPolicyTagMapPtrOutput {
	return i.ToResiliencyPolicyTagMapPtrOutputWithContext(context.Background())
}

func (i ResiliencyPolicyTagMapArgs) ToResiliencyPolicyTagMapPtrOutputWithContext(ctx context.Context) ResiliencyPolicyTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyTagMapOutput).ToResiliencyPolicyTagMapPtrOutputWithContext(ctx)
}

// ResiliencyPolicyTagMapPtrInput is an input type that accepts ResiliencyPolicyTagMapArgs, ResiliencyPolicyTagMapPtr and ResiliencyPolicyTagMapPtrOutput values.
// You can construct a concrete instance of `ResiliencyPolicyTagMapPtrInput` via:
//
//	        ResiliencyPolicyTagMapArgs{...}
//
//	or:
//
//	        nil
type ResiliencyPolicyTagMapPtrInput interface {
	pulumi.Input

	ToResiliencyPolicyTagMapPtrOutput() ResiliencyPolicyTagMapPtrOutput
	ToResiliencyPolicyTagMapPtrOutputWithContext(context.Context) ResiliencyPolicyTagMapPtrOutput
}

type resiliencyPolicyTagMapPtrType ResiliencyPolicyTagMapArgs

func ResiliencyPolicyTagMapPtr(v *ResiliencyPolicyTagMapArgs) ResiliencyPolicyTagMapPtrInput {
	return (*resiliencyPolicyTagMapPtrType)(v)
}

func (*resiliencyPolicyTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicyTagMap)(nil)).Elem()
}

func (i *resiliencyPolicyTagMapPtrType) ToResiliencyPolicyTagMapPtrOutput() ResiliencyPolicyTagMapPtrOutput {
	return i.ToResiliencyPolicyTagMapPtrOutputWithContext(context.Background())
}

func (i *resiliencyPolicyTagMapPtrType) ToResiliencyPolicyTagMapPtrOutputWithContext(ctx context.Context) ResiliencyPolicyTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyTagMapPtrOutput)
}

func (i *resiliencyPolicyTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*ResiliencyPolicyTagMap] {
	return pulumix.Output[*ResiliencyPolicyTagMap]{
		OutputState: i.ToResiliencyPolicyTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

type ResiliencyPolicyTagMapOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyTagMap)(nil)).Elem()
}

func (o ResiliencyPolicyTagMapOutput) ToResiliencyPolicyTagMapOutput() ResiliencyPolicyTagMapOutput {
	return o
}

func (o ResiliencyPolicyTagMapOutput) ToResiliencyPolicyTagMapOutputWithContext(ctx context.Context) ResiliencyPolicyTagMapOutput {
	return o
}

func (o ResiliencyPolicyTagMapOutput) ToResiliencyPolicyTagMapPtrOutput() ResiliencyPolicyTagMapPtrOutput {
	return o.ToResiliencyPolicyTagMapPtrOutputWithContext(context.Background())
}

func (o ResiliencyPolicyTagMapOutput) ToResiliencyPolicyTagMapPtrOutputWithContext(ctx context.Context) ResiliencyPolicyTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResiliencyPolicyTagMap) *ResiliencyPolicyTagMap {
		return &v
	}).(ResiliencyPolicyTagMapPtrOutput)
}

func (o ResiliencyPolicyTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[ResiliencyPolicyTagMap] {
	return pulumix.Output[ResiliencyPolicyTagMap]{
		OutputState: o.OutputState,
	}
}

type ResiliencyPolicyTagMapPtrOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicyTagMap)(nil)).Elem()
}

func (o ResiliencyPolicyTagMapPtrOutput) ToResiliencyPolicyTagMapPtrOutput() ResiliencyPolicyTagMapPtrOutput {
	return o
}

func (o ResiliencyPolicyTagMapPtrOutput) ToResiliencyPolicyTagMapPtrOutputWithContext(ctx context.Context) ResiliencyPolicyTagMapPtrOutput {
	return o
}

func (o ResiliencyPolicyTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResiliencyPolicyTagMap] {
	return pulumix.Output[*ResiliencyPolicyTagMap]{
		OutputState: o.OutputState,
	}
}

func (o ResiliencyPolicyTagMapPtrOutput) Elem() ResiliencyPolicyTagMapOutput {
	return o.ApplyT(func(v *ResiliencyPolicyTagMap) ResiliencyPolicyTagMap {
		if v != nil {
			return *v
		}
		var ret ResiliencyPolicyTagMap
		return ret
	}).(ResiliencyPolicyTagMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppEventSubscriptionInput)(nil)).Elem(), AppEventSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppEventSubscriptionArrayInput)(nil)).Elem(), AppEventSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppPermissionModelInput)(nil)).Elem(), AppPermissionModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppPermissionModelPtrInput)(nil)).Elem(), AppPermissionModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppPhysicalResourceIdInput)(nil)).Elem(), AppPhysicalResourceIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppResourceMappingInput)(nil)).Elem(), AppResourceMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppResourceMappingArrayInput)(nil)).Elem(), AppResourceMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppTagMapInput)(nil)).Elem(), AppTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppTagMapPtrInput)(nil)).Elem(), AppTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyPolicyMapInput)(nil)).Elem(), ResiliencyPolicyPolicyMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyTagMapInput)(nil)).Elem(), ResiliencyPolicyTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyTagMapPtrInput)(nil)).Elem(), ResiliencyPolicyTagMapArgs{})
	pulumi.RegisterOutputType(AppEventSubscriptionOutput{})
	pulumi.RegisterOutputType(AppEventSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(AppPermissionModelOutput{})
	pulumi.RegisterOutputType(AppPermissionModelPtrOutput{})
	pulumi.RegisterOutputType(AppPhysicalResourceIdOutput{})
	pulumi.RegisterOutputType(AppResourceMappingOutput{})
	pulumi.RegisterOutputType(AppResourceMappingArrayOutput{})
	pulumi.RegisterOutputType(AppTagMapOutput{})
	pulumi.RegisterOutputType(AppTagMapPtrOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyPolicyMapOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyPolicyMapPtrOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyTagMapOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyTagMapPtrOutput{})
}
