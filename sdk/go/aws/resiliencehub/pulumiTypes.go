// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resiliencehub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Indicates an event you would like to subscribe and get notification for.
type AppEventSubscription struct {
	// The type of event you would like to subscribe and get notification for.
	EventType AppEventSubscriptionEventType `pulumi:"eventType"`
	// Unique name to identify an event subscription.
	Name string `pulumi:"name"`
	// Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
	SnsTopicArn *string `pulumi:"snsTopicArn"`
}

// AppEventSubscriptionInput is an input type that accepts AppEventSubscriptionArgs and AppEventSubscriptionOutput values.
// You can construct a concrete instance of `AppEventSubscriptionInput` via:
//
//	AppEventSubscriptionArgs{...}
type AppEventSubscriptionInput interface {
	pulumi.Input

	ToAppEventSubscriptionOutput() AppEventSubscriptionOutput
	ToAppEventSubscriptionOutputWithContext(context.Context) AppEventSubscriptionOutput
}

// Indicates an event you would like to subscribe and get notification for.
type AppEventSubscriptionArgs struct {
	// The type of event you would like to subscribe and get notification for.
	EventType AppEventSubscriptionEventTypeInput `pulumi:"eventType"`
	// Unique name to identify an event subscription.
	Name pulumi.StringInput `pulumi:"name"`
	// Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
	SnsTopicArn pulumi.StringPtrInput `pulumi:"snsTopicArn"`
}

func (AppEventSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEventSubscription)(nil)).Elem()
}

func (i AppEventSubscriptionArgs) ToAppEventSubscriptionOutput() AppEventSubscriptionOutput {
	return i.ToAppEventSubscriptionOutputWithContext(context.Background())
}

func (i AppEventSubscriptionArgs) ToAppEventSubscriptionOutputWithContext(ctx context.Context) AppEventSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEventSubscriptionOutput)
}

// AppEventSubscriptionArrayInput is an input type that accepts AppEventSubscriptionArray and AppEventSubscriptionArrayOutput values.
// You can construct a concrete instance of `AppEventSubscriptionArrayInput` via:
//
//	AppEventSubscriptionArray{ AppEventSubscriptionArgs{...} }
type AppEventSubscriptionArrayInput interface {
	pulumi.Input

	ToAppEventSubscriptionArrayOutput() AppEventSubscriptionArrayOutput
	ToAppEventSubscriptionArrayOutputWithContext(context.Context) AppEventSubscriptionArrayOutput
}

type AppEventSubscriptionArray []AppEventSubscriptionInput

func (AppEventSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppEventSubscription)(nil)).Elem()
}

func (i AppEventSubscriptionArray) ToAppEventSubscriptionArrayOutput() AppEventSubscriptionArrayOutput {
	return i.ToAppEventSubscriptionArrayOutputWithContext(context.Background())
}

func (i AppEventSubscriptionArray) ToAppEventSubscriptionArrayOutputWithContext(ctx context.Context) AppEventSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEventSubscriptionArrayOutput)
}

// Indicates an event you would like to subscribe and get notification for.
type AppEventSubscriptionOutput struct{ *pulumi.OutputState }

func (AppEventSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEventSubscription)(nil)).Elem()
}

func (o AppEventSubscriptionOutput) ToAppEventSubscriptionOutput() AppEventSubscriptionOutput {
	return o
}

func (o AppEventSubscriptionOutput) ToAppEventSubscriptionOutputWithContext(ctx context.Context) AppEventSubscriptionOutput {
	return o
}

// The type of event you would like to subscribe and get notification for.
func (o AppEventSubscriptionOutput) EventType() AppEventSubscriptionEventTypeOutput {
	return o.ApplyT(func(v AppEventSubscription) AppEventSubscriptionEventType { return v.EventType }).(AppEventSubscriptionEventTypeOutput)
}

// Unique name to identify an event subscription.
func (o AppEventSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppEventSubscription) string { return v.Name }).(pulumi.StringOutput)
}

// Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
func (o AppEventSubscriptionOutput) SnsTopicArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEventSubscription) *string { return v.SnsTopicArn }).(pulumi.StringPtrOutput)
}

type AppEventSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (AppEventSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppEventSubscription)(nil)).Elem()
}

func (o AppEventSubscriptionArrayOutput) ToAppEventSubscriptionArrayOutput() AppEventSubscriptionArrayOutput {
	return o
}

func (o AppEventSubscriptionArrayOutput) ToAppEventSubscriptionArrayOutputWithContext(ctx context.Context) AppEventSubscriptionArrayOutput {
	return o
}

func (o AppEventSubscriptionArrayOutput) Index(i pulumi.IntInput) AppEventSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppEventSubscription {
		return vs[0].([]AppEventSubscription)[vs[1].(int)]
	}).(AppEventSubscriptionOutput)
}

// Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
type AppPermissionModel struct {
	// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
	CrossAccountRoleArns []string `pulumi:"crossAccountRoleArns"`
	// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
	InvokerRoleName *string `pulumi:"invokerRoleName"`
	// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
	Type AppPermissionModelType `pulumi:"type"`
}

// AppPermissionModelInput is an input type that accepts AppPermissionModelArgs and AppPermissionModelOutput values.
// You can construct a concrete instance of `AppPermissionModelInput` via:
//
//	AppPermissionModelArgs{...}
type AppPermissionModelInput interface {
	pulumi.Input

	ToAppPermissionModelOutput() AppPermissionModelOutput
	ToAppPermissionModelOutputWithContext(context.Context) AppPermissionModelOutput
}

// Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
type AppPermissionModelArgs struct {
	// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
	CrossAccountRoleArns pulumi.StringArrayInput `pulumi:"crossAccountRoleArns"`
	// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
	InvokerRoleName pulumi.StringPtrInput `pulumi:"invokerRoleName"`
	// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
	Type AppPermissionModelTypeInput `pulumi:"type"`
}

func (AppPermissionModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPermissionModel)(nil)).Elem()
}

func (i AppPermissionModelArgs) ToAppPermissionModelOutput() AppPermissionModelOutput {
	return i.ToAppPermissionModelOutputWithContext(context.Background())
}

func (i AppPermissionModelArgs) ToAppPermissionModelOutputWithContext(ctx context.Context) AppPermissionModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPermissionModelOutput)
}

func (i AppPermissionModelArgs) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return i.ToAppPermissionModelPtrOutputWithContext(context.Background())
}

func (i AppPermissionModelArgs) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPermissionModelOutput).ToAppPermissionModelPtrOutputWithContext(ctx)
}

// AppPermissionModelPtrInput is an input type that accepts AppPermissionModelArgs, AppPermissionModelPtr and AppPermissionModelPtrOutput values.
// You can construct a concrete instance of `AppPermissionModelPtrInput` via:
//
//	        AppPermissionModelArgs{...}
//
//	or:
//
//	        nil
type AppPermissionModelPtrInput interface {
	pulumi.Input

	ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput
	ToAppPermissionModelPtrOutputWithContext(context.Context) AppPermissionModelPtrOutput
}

type appPermissionModelPtrType AppPermissionModelArgs

func AppPermissionModelPtr(v *AppPermissionModelArgs) AppPermissionModelPtrInput {
	return (*appPermissionModelPtrType)(v)
}

func (*appPermissionModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppPermissionModel)(nil)).Elem()
}

func (i *appPermissionModelPtrType) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return i.ToAppPermissionModelPtrOutputWithContext(context.Background())
}

func (i *appPermissionModelPtrType) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPermissionModelPtrOutput)
}

// Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
type AppPermissionModelOutput struct{ *pulumi.OutputState }

func (AppPermissionModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPermissionModel)(nil)).Elem()
}

func (o AppPermissionModelOutput) ToAppPermissionModelOutput() AppPermissionModelOutput {
	return o
}

func (o AppPermissionModelOutput) ToAppPermissionModelOutputWithContext(ctx context.Context) AppPermissionModelOutput {
	return o
}

func (o AppPermissionModelOutput) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return o.ToAppPermissionModelPtrOutputWithContext(context.Background())
}

func (o AppPermissionModelOutput) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppPermissionModel) *AppPermissionModel {
		return &v
	}).(AppPermissionModelPtrOutput)
}

// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
func (o AppPermissionModelOutput) CrossAccountRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AppPermissionModel) []string { return v.CrossAccountRoleArns }).(pulumi.StringArrayOutput)
}

// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
func (o AppPermissionModelOutput) InvokerRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppPermissionModel) *string { return v.InvokerRoleName }).(pulumi.StringPtrOutput)
}

// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
func (o AppPermissionModelOutput) Type() AppPermissionModelTypeOutput {
	return o.ApplyT(func(v AppPermissionModel) AppPermissionModelType { return v.Type }).(AppPermissionModelTypeOutput)
}

type AppPermissionModelPtrOutput struct{ *pulumi.OutputState }

func (AppPermissionModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppPermissionModel)(nil)).Elem()
}

func (o AppPermissionModelPtrOutput) ToAppPermissionModelPtrOutput() AppPermissionModelPtrOutput {
	return o
}

func (o AppPermissionModelPtrOutput) ToAppPermissionModelPtrOutputWithContext(ctx context.Context) AppPermissionModelPtrOutput {
	return o
}

func (o AppPermissionModelPtrOutput) Elem() AppPermissionModelOutput {
	return o.ApplyT(func(v *AppPermissionModel) AppPermissionModel {
		if v != nil {
			return *v
		}
		var ret AppPermissionModel
		return ret
	}).(AppPermissionModelOutput)
}

// Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
func (o AppPermissionModelPtrOutput) CrossAccountRoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppPermissionModel) []string {
		if v == nil {
			return nil
		}
		return v.CrossAccountRoleArns
	}).(pulumi.StringArrayOutput)
}

// Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
func (o AppPermissionModelPtrOutput) InvokerRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppPermissionModel) *string {
		if v == nil {
			return nil
		}
		return v.InvokerRoleName
	}).(pulumi.StringPtrOutput)
}

// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
func (o AppPermissionModelPtrOutput) Type() AppPermissionModelTypePtrOutput {
	return o.ApplyT(func(v *AppPermissionModel) *AppPermissionModelType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(AppPermissionModelTypePtrOutput)
}

type AppPhysicalResourceId struct {
	// The AWS account that owns the physical resource.
	AwsAccountId *string `pulumi:"awsAccountId"`
	// The AWS Region that the physical resource is located in.
	AwsRegion *string `pulumi:"awsRegion"`
	// Identifier of the physical resource.
	Identifier string `pulumi:"identifier"`
	// Specifies the type of physical resource identifier.
	//
	// - **Arn** - The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:
	//
	// - `AWS::ECS::Service`
	// - `AWS::EFS::FileSystem`
	// - `AWS::ElasticLoadBalancingV2::LoadBalancer`
	// - `AWS::Lambda::Function`
	// - `AWS::SNS::Topic`
	// - **Native** - The resource identifier is an AWS Resilience Hub -native identifier and it can identify the following list of resources:
	//
	// - `AWS::ApiGateway::RestApi`
	// - `AWS::ApiGatewayV2::Api`
	// - `AWS::AutoScaling::AutoScalingGroup`
	// - `AWS::DocDB::DBCluster`
	// - `AWS::DocDB::DBGlobalCluster`
	// - `AWS::DocDB::DBInstance`
	// - `AWS::DynamoDB::GlobalTable`
	// - `AWS::DynamoDB::Table`
	// - `AWS::EC2::EC2Fleet`
	// - `AWS::EC2::Instance`
	// - `AWS::EC2::NatGateway`
	// - `AWS::EC2::Volume`
	// - `AWS::ElasticLoadBalancing::LoadBalancer`
	// - `AWS::RDS::DBCluster`
	// - `AWS::RDS::DBInstance`
	// - `AWS::RDS::GlobalCluster`
	// - `AWS::Route53::RecordSet`
	// - `AWS::S3::Bucket`
	// - `AWS::SQS::Queue`
	Type string `pulumi:"type"`
}

// AppPhysicalResourceIdInput is an input type that accepts AppPhysicalResourceIdArgs and AppPhysicalResourceIdOutput values.
// You can construct a concrete instance of `AppPhysicalResourceIdInput` via:
//
//	AppPhysicalResourceIdArgs{...}
type AppPhysicalResourceIdInput interface {
	pulumi.Input

	ToAppPhysicalResourceIdOutput() AppPhysicalResourceIdOutput
	ToAppPhysicalResourceIdOutputWithContext(context.Context) AppPhysicalResourceIdOutput
}

type AppPhysicalResourceIdArgs struct {
	// The AWS account that owns the physical resource.
	AwsAccountId pulumi.StringPtrInput `pulumi:"awsAccountId"`
	// The AWS Region that the physical resource is located in.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// Identifier of the physical resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Specifies the type of physical resource identifier.
	//
	// - **Arn** - The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:
	//
	// - `AWS::ECS::Service`
	// - `AWS::EFS::FileSystem`
	// - `AWS::ElasticLoadBalancingV2::LoadBalancer`
	// - `AWS::Lambda::Function`
	// - `AWS::SNS::Topic`
	// - **Native** - The resource identifier is an AWS Resilience Hub -native identifier and it can identify the following list of resources:
	//
	// - `AWS::ApiGateway::RestApi`
	// - `AWS::ApiGatewayV2::Api`
	// - `AWS::AutoScaling::AutoScalingGroup`
	// - `AWS::DocDB::DBCluster`
	// - `AWS::DocDB::DBGlobalCluster`
	// - `AWS::DocDB::DBInstance`
	// - `AWS::DynamoDB::GlobalTable`
	// - `AWS::DynamoDB::Table`
	// - `AWS::EC2::EC2Fleet`
	// - `AWS::EC2::Instance`
	// - `AWS::EC2::NatGateway`
	// - `AWS::EC2::Volume`
	// - `AWS::ElasticLoadBalancing::LoadBalancer`
	// - `AWS::RDS::DBCluster`
	// - `AWS::RDS::DBInstance`
	// - `AWS::RDS::GlobalCluster`
	// - `AWS::Route53::RecordSet`
	// - `AWS::S3::Bucket`
	// - `AWS::SQS::Queue`
	Type pulumi.StringInput `pulumi:"type"`
}

func (AppPhysicalResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPhysicalResourceId)(nil)).Elem()
}

func (i AppPhysicalResourceIdArgs) ToAppPhysicalResourceIdOutput() AppPhysicalResourceIdOutput {
	return i.ToAppPhysicalResourceIdOutputWithContext(context.Background())
}

func (i AppPhysicalResourceIdArgs) ToAppPhysicalResourceIdOutputWithContext(ctx context.Context) AppPhysicalResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppPhysicalResourceIdOutput)
}

type AppPhysicalResourceIdOutput struct{ *pulumi.OutputState }

func (AppPhysicalResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppPhysicalResourceId)(nil)).Elem()
}

func (o AppPhysicalResourceIdOutput) ToAppPhysicalResourceIdOutput() AppPhysicalResourceIdOutput {
	return o
}

func (o AppPhysicalResourceIdOutput) ToAppPhysicalResourceIdOutputWithContext(ctx context.Context) AppPhysicalResourceIdOutput {
	return o
}

// The AWS account that owns the physical resource.
func (o AppPhysicalResourceIdOutput) AwsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) *string { return v.AwsAccountId }).(pulumi.StringPtrOutput)
}

// The AWS Region that the physical resource is located in.
func (o AppPhysicalResourceIdOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// Identifier of the physical resource.
func (o AppPhysicalResourceIdOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) string { return v.Identifier }).(pulumi.StringOutput)
}

// Specifies the type of physical resource identifier.
//
// - **Arn** - The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:
//
// - `AWS::ECS::Service`
// - `AWS::EFS::FileSystem`
// - `AWS::ElasticLoadBalancingV2::LoadBalancer`
// - `AWS::Lambda::Function`
// - `AWS::SNS::Topic`
// - **Native** - The resource identifier is an AWS Resilience Hub -native identifier and it can identify the following list of resources:
//
// - `AWS::ApiGateway::RestApi`
// - `AWS::ApiGatewayV2::Api`
// - `AWS::AutoScaling::AutoScalingGroup`
// - `AWS::DocDB::DBCluster`
// - `AWS::DocDB::DBGlobalCluster`
// - `AWS::DocDB::DBInstance`
// - `AWS::DynamoDB::GlobalTable`
// - `AWS::DynamoDB::Table`
// - `AWS::EC2::EC2Fleet`
// - `AWS::EC2::Instance`
// - `AWS::EC2::NatGateway`
// - `AWS::EC2::Volume`
// - `AWS::ElasticLoadBalancing::LoadBalancer`
// - `AWS::RDS::DBCluster`
// - `AWS::RDS::DBInstance`
// - `AWS::RDS::GlobalCluster`
// - `AWS::Route53::RecordSet`
// - `AWS::S3::Bucket`
// - `AWS::SQS::Queue`
func (o AppPhysicalResourceIdOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppPhysicalResourceId) string { return v.Type }).(pulumi.StringOutput)
}

// Resource mapping is used to map logical resources from template to physical resource
type AppResourceMapping struct {
	// Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the `mappingType` is `EKS` .
	//
	// > This parameter accepts values in "eks-cluster/namespace" format.
	EksSourceName *string `pulumi:"eksSourceName"`
	// Name of the AWS CloudFormation stack this resource is mapped to when the `mappingType` is `CfnStack` .
	LogicalStackName *string `pulumi:"logicalStackName"`
	// Specifies the type of resource mapping.
	MappingType string `pulumi:"mappingType"`
	// Defines a physical resource identifier.
	PhysicalResourceId AppPhysicalResourceId `pulumi:"physicalResourceId"`
	// Name of the resource that this resource is mapped to when the `mappingType` is `Resource` .
	ResourceName *string `pulumi:"resourceName"`
	// Name of the Terraform source that this resource is mapped to when the `mappingType` is `Terraform` .
	TerraformSourceName *string `pulumi:"terraformSourceName"`
}

// AppResourceMappingInput is an input type that accepts AppResourceMappingArgs and AppResourceMappingOutput values.
// You can construct a concrete instance of `AppResourceMappingInput` via:
//
//	AppResourceMappingArgs{...}
type AppResourceMappingInput interface {
	pulumi.Input

	ToAppResourceMappingOutput() AppResourceMappingOutput
	ToAppResourceMappingOutputWithContext(context.Context) AppResourceMappingOutput
}

// Resource mapping is used to map logical resources from template to physical resource
type AppResourceMappingArgs struct {
	// Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the `mappingType` is `EKS` .
	//
	// > This parameter accepts values in "eks-cluster/namespace" format.
	EksSourceName pulumi.StringPtrInput `pulumi:"eksSourceName"`
	// Name of the AWS CloudFormation stack this resource is mapped to when the `mappingType` is `CfnStack` .
	LogicalStackName pulumi.StringPtrInput `pulumi:"logicalStackName"`
	// Specifies the type of resource mapping.
	MappingType pulumi.StringInput `pulumi:"mappingType"`
	// Defines a physical resource identifier.
	PhysicalResourceId AppPhysicalResourceIdInput `pulumi:"physicalResourceId"`
	// Name of the resource that this resource is mapped to when the `mappingType` is `Resource` .
	ResourceName pulumi.StringPtrInput `pulumi:"resourceName"`
	// Name of the Terraform source that this resource is mapped to when the `mappingType` is `Terraform` .
	TerraformSourceName pulumi.StringPtrInput `pulumi:"terraformSourceName"`
}

func (AppResourceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppResourceMapping)(nil)).Elem()
}

func (i AppResourceMappingArgs) ToAppResourceMappingOutput() AppResourceMappingOutput {
	return i.ToAppResourceMappingOutputWithContext(context.Background())
}

func (i AppResourceMappingArgs) ToAppResourceMappingOutputWithContext(ctx context.Context) AppResourceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppResourceMappingOutput)
}

// AppResourceMappingArrayInput is an input type that accepts AppResourceMappingArray and AppResourceMappingArrayOutput values.
// You can construct a concrete instance of `AppResourceMappingArrayInput` via:
//
//	AppResourceMappingArray{ AppResourceMappingArgs{...} }
type AppResourceMappingArrayInput interface {
	pulumi.Input

	ToAppResourceMappingArrayOutput() AppResourceMappingArrayOutput
	ToAppResourceMappingArrayOutputWithContext(context.Context) AppResourceMappingArrayOutput
}

type AppResourceMappingArray []AppResourceMappingInput

func (AppResourceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppResourceMapping)(nil)).Elem()
}

func (i AppResourceMappingArray) ToAppResourceMappingArrayOutput() AppResourceMappingArrayOutput {
	return i.ToAppResourceMappingArrayOutputWithContext(context.Background())
}

func (i AppResourceMappingArray) ToAppResourceMappingArrayOutputWithContext(ctx context.Context) AppResourceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppResourceMappingArrayOutput)
}

// Resource mapping is used to map logical resources from template to physical resource
type AppResourceMappingOutput struct{ *pulumi.OutputState }

func (AppResourceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppResourceMapping)(nil)).Elem()
}

func (o AppResourceMappingOutput) ToAppResourceMappingOutput() AppResourceMappingOutput {
	return o
}

func (o AppResourceMappingOutput) ToAppResourceMappingOutputWithContext(ctx context.Context) AppResourceMappingOutput {
	return o
}

// Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the `mappingType` is `EKS` .
//
// > This parameter accepts values in "eks-cluster/namespace" format.
func (o AppResourceMappingOutput) EksSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.EksSourceName }).(pulumi.StringPtrOutput)
}

// Name of the AWS CloudFormation stack this resource is mapped to when the `mappingType` is `CfnStack` .
func (o AppResourceMappingOutput) LogicalStackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.LogicalStackName }).(pulumi.StringPtrOutput)
}

// Specifies the type of resource mapping.
func (o AppResourceMappingOutput) MappingType() pulumi.StringOutput {
	return o.ApplyT(func(v AppResourceMapping) string { return v.MappingType }).(pulumi.StringOutput)
}

// Defines a physical resource identifier.
func (o AppResourceMappingOutput) PhysicalResourceId() AppPhysicalResourceIdOutput {
	return o.ApplyT(func(v AppResourceMapping) AppPhysicalResourceId { return v.PhysicalResourceId }).(AppPhysicalResourceIdOutput)
}

// Name of the resource that this resource is mapped to when the `mappingType` is `Resource` .
func (o AppResourceMappingOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// Name of the Terraform source that this resource is mapped to when the `mappingType` is `Terraform` .
func (o AppResourceMappingOutput) TerraformSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppResourceMapping) *string { return v.TerraformSourceName }).(pulumi.StringPtrOutput)
}

type AppResourceMappingArrayOutput struct{ *pulumi.OutputState }

func (AppResourceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppResourceMapping)(nil)).Elem()
}

func (o AppResourceMappingArrayOutput) ToAppResourceMappingArrayOutput() AppResourceMappingArrayOutput {
	return o
}

func (o AppResourceMappingArrayOutput) ToAppResourceMappingArrayOutputWithContext(ctx context.Context) AppResourceMappingArrayOutput {
	return o
}

func (o AppResourceMappingArrayOutput) Index(i pulumi.IntInput) AppResourceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppResourceMapping {
		return vs[0].([]AppResourceMapping)[vs[1].(int)]
	}).(AppResourceMappingOutput)
}

// Failure Policy.
type ResiliencyPolicyFailurePolicy struct {
	// RPO in seconds.
	RpoInSecs int `pulumi:"rpoInSecs"`
	// RTO in seconds.
	RtoInSecs int `pulumi:"rtoInSecs"`
}

// ResiliencyPolicyFailurePolicyInput is an input type that accepts ResiliencyPolicyFailurePolicyArgs and ResiliencyPolicyFailurePolicyOutput values.
// You can construct a concrete instance of `ResiliencyPolicyFailurePolicyInput` via:
//
//	ResiliencyPolicyFailurePolicyArgs{...}
type ResiliencyPolicyFailurePolicyInput interface {
	pulumi.Input

	ToResiliencyPolicyFailurePolicyOutput() ResiliencyPolicyFailurePolicyOutput
	ToResiliencyPolicyFailurePolicyOutputWithContext(context.Context) ResiliencyPolicyFailurePolicyOutput
}

// Failure Policy.
type ResiliencyPolicyFailurePolicyArgs struct {
	// RPO in seconds.
	RpoInSecs pulumi.IntInput `pulumi:"rpoInSecs"`
	// RTO in seconds.
	RtoInSecs pulumi.IntInput `pulumi:"rtoInSecs"`
}

func (ResiliencyPolicyFailurePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyFailurePolicy)(nil)).Elem()
}

func (i ResiliencyPolicyFailurePolicyArgs) ToResiliencyPolicyFailurePolicyOutput() ResiliencyPolicyFailurePolicyOutput {
	return i.ToResiliencyPolicyFailurePolicyOutputWithContext(context.Background())
}

func (i ResiliencyPolicyFailurePolicyArgs) ToResiliencyPolicyFailurePolicyOutputWithContext(ctx context.Context) ResiliencyPolicyFailurePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyFailurePolicyOutput)
}

func (i ResiliencyPolicyFailurePolicyArgs) ToResiliencyPolicyFailurePolicyPtrOutput() ResiliencyPolicyFailurePolicyPtrOutput {
	return i.ToResiliencyPolicyFailurePolicyPtrOutputWithContext(context.Background())
}

func (i ResiliencyPolicyFailurePolicyArgs) ToResiliencyPolicyFailurePolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyFailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyFailurePolicyOutput).ToResiliencyPolicyFailurePolicyPtrOutputWithContext(ctx)
}

// ResiliencyPolicyFailurePolicyPtrInput is an input type that accepts ResiliencyPolicyFailurePolicyArgs, ResiliencyPolicyFailurePolicyPtr and ResiliencyPolicyFailurePolicyPtrOutput values.
// You can construct a concrete instance of `ResiliencyPolicyFailurePolicyPtrInput` via:
//
//	        ResiliencyPolicyFailurePolicyArgs{...}
//
//	or:
//
//	        nil
type ResiliencyPolicyFailurePolicyPtrInput interface {
	pulumi.Input

	ToResiliencyPolicyFailurePolicyPtrOutput() ResiliencyPolicyFailurePolicyPtrOutput
	ToResiliencyPolicyFailurePolicyPtrOutputWithContext(context.Context) ResiliencyPolicyFailurePolicyPtrOutput
}

type resiliencyPolicyFailurePolicyPtrType ResiliencyPolicyFailurePolicyArgs

func ResiliencyPolicyFailurePolicyPtr(v *ResiliencyPolicyFailurePolicyArgs) ResiliencyPolicyFailurePolicyPtrInput {
	return (*resiliencyPolicyFailurePolicyPtrType)(v)
}

func (*resiliencyPolicyFailurePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicyFailurePolicy)(nil)).Elem()
}

func (i *resiliencyPolicyFailurePolicyPtrType) ToResiliencyPolicyFailurePolicyPtrOutput() ResiliencyPolicyFailurePolicyPtrOutput {
	return i.ToResiliencyPolicyFailurePolicyPtrOutputWithContext(context.Background())
}

func (i *resiliencyPolicyFailurePolicyPtrType) ToResiliencyPolicyFailurePolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyFailurePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyFailurePolicyPtrOutput)
}

// Failure Policy.
type ResiliencyPolicyFailurePolicyOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyFailurePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyFailurePolicy)(nil)).Elem()
}

func (o ResiliencyPolicyFailurePolicyOutput) ToResiliencyPolicyFailurePolicyOutput() ResiliencyPolicyFailurePolicyOutput {
	return o
}

func (o ResiliencyPolicyFailurePolicyOutput) ToResiliencyPolicyFailurePolicyOutputWithContext(ctx context.Context) ResiliencyPolicyFailurePolicyOutput {
	return o
}

func (o ResiliencyPolicyFailurePolicyOutput) ToResiliencyPolicyFailurePolicyPtrOutput() ResiliencyPolicyFailurePolicyPtrOutput {
	return o.ToResiliencyPolicyFailurePolicyPtrOutputWithContext(context.Background())
}

func (o ResiliencyPolicyFailurePolicyOutput) ToResiliencyPolicyFailurePolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyFailurePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResiliencyPolicyFailurePolicy) *ResiliencyPolicyFailurePolicy {
		return &v
	}).(ResiliencyPolicyFailurePolicyPtrOutput)
}

// RPO in seconds.
func (o ResiliencyPolicyFailurePolicyOutput) RpoInSecs() pulumi.IntOutput {
	return o.ApplyT(func(v ResiliencyPolicyFailurePolicy) int { return v.RpoInSecs }).(pulumi.IntOutput)
}

// RTO in seconds.
func (o ResiliencyPolicyFailurePolicyOutput) RtoInSecs() pulumi.IntOutput {
	return o.ApplyT(func(v ResiliencyPolicyFailurePolicy) int { return v.RtoInSecs }).(pulumi.IntOutput)
}

type ResiliencyPolicyFailurePolicyPtrOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyFailurePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicyFailurePolicy)(nil)).Elem()
}

func (o ResiliencyPolicyFailurePolicyPtrOutput) ToResiliencyPolicyFailurePolicyPtrOutput() ResiliencyPolicyFailurePolicyPtrOutput {
	return o
}

func (o ResiliencyPolicyFailurePolicyPtrOutput) ToResiliencyPolicyFailurePolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyFailurePolicyPtrOutput {
	return o
}

func (o ResiliencyPolicyFailurePolicyPtrOutput) Elem() ResiliencyPolicyFailurePolicyOutput {
	return o.ApplyT(func(v *ResiliencyPolicyFailurePolicy) ResiliencyPolicyFailurePolicy {
		if v != nil {
			return *v
		}
		var ret ResiliencyPolicyFailurePolicy
		return ret
	}).(ResiliencyPolicyFailurePolicyOutput)
}

// RPO in seconds.
func (o ResiliencyPolicyFailurePolicyPtrOutput) RpoInSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyFailurePolicy) *int {
		if v == nil {
			return nil
		}
		return &v.RpoInSecs
	}).(pulumi.IntPtrOutput)
}

// RTO in seconds.
func (o ResiliencyPolicyFailurePolicyPtrOutput) RtoInSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyFailurePolicy) *int {
		if v == nil {
			return nil
		}
		return &v.RtoInSecs
	}).(pulumi.IntPtrOutput)
}

type ResiliencyPolicyPolicyMap struct {
	// Defines a failure policy.
	Az ResiliencyPolicyFailurePolicy `pulumi:"az"`
	// Defines a failure policy.
	Hardware ResiliencyPolicyFailurePolicy `pulumi:"hardware"`
	// Defines a failure policy.
	Region *ResiliencyPolicyFailurePolicy `pulumi:"region"`
	// Defines a failure policy.
	Software ResiliencyPolicyFailurePolicy `pulumi:"software"`
}

// ResiliencyPolicyPolicyMapInput is an input type that accepts ResiliencyPolicyPolicyMap and ResiliencyPolicyPolicyMapOutput values.
// You can construct a concrete instance of `ResiliencyPolicyPolicyMapInput` via:
//
//	ResiliencyPolicyPolicyMap{ "key": ResiliencyPolicyPolicyArgs{...} }
type ResiliencyPolicyPolicyMapInput interface {
	pulumi.Input

	ToResiliencyPolicyPolicyMapOutput() ResiliencyPolicyPolicyMapOutput
	ToResiliencyPolicyPolicyMapOutputWithContext(context.Context) ResiliencyPolicyPolicyMapOutput
}

type ResiliencyPolicyPolicyMapArgs struct {
	// Defines a failure policy.
	Az ResiliencyPolicyFailurePolicyInput `pulumi:"az"`
	// Defines a failure policy.
	Hardware ResiliencyPolicyFailurePolicyInput `pulumi:"hardware"`
	// Defines a failure policy.
	Region ResiliencyPolicyFailurePolicyPtrInput `pulumi:"region"`
	// Defines a failure policy.
	Software ResiliencyPolicyFailurePolicyInput `pulumi:"software"`
}

func (ResiliencyPolicyPolicyMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyPolicyMap)(nil)).Elem()
}

func (i ResiliencyPolicyPolicyMapArgs) ToResiliencyPolicyPolicyMapOutput() ResiliencyPolicyPolicyMapOutput {
	return i.ToResiliencyPolicyPolicyMapOutputWithContext(context.Background())
}

func (i ResiliencyPolicyPolicyMapArgs) ToResiliencyPolicyPolicyMapOutputWithContext(ctx context.Context) ResiliencyPolicyPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyPolicyMapOutput)
}

type ResiliencyPolicyPolicyMapOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyPolicyMap)(nil)).Elem()
}

func (o ResiliencyPolicyPolicyMapOutput) ToResiliencyPolicyPolicyMapOutput() ResiliencyPolicyPolicyMapOutput {
	return o
}

func (o ResiliencyPolicyPolicyMapOutput) ToResiliencyPolicyPolicyMapOutputWithContext(ctx context.Context) ResiliencyPolicyPolicyMapOutput {
	return o
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapOutput) Az() ResiliencyPolicyFailurePolicyOutput {
	return o.ApplyT(func(v ResiliencyPolicyPolicyMap) ResiliencyPolicyFailurePolicy { return v.Az }).(ResiliencyPolicyFailurePolicyOutput)
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapOutput) Hardware() ResiliencyPolicyFailurePolicyOutput {
	return o.ApplyT(func(v ResiliencyPolicyPolicyMap) ResiliencyPolicyFailurePolicy { return v.Hardware }).(ResiliencyPolicyFailurePolicyOutput)
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapOutput) Region() ResiliencyPolicyFailurePolicyPtrOutput {
	return o.ApplyT(func(v ResiliencyPolicyPolicyMap) *ResiliencyPolicyFailurePolicy { return v.Region }).(ResiliencyPolicyFailurePolicyPtrOutput)
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapOutput) Software() ResiliencyPolicyFailurePolicyOutput {
	return o.ApplyT(func(v ResiliencyPolicyPolicyMap) ResiliencyPolicyFailurePolicy { return v.Software }).(ResiliencyPolicyFailurePolicyOutput)
}

type ResiliencyPolicyPolicyMapPtrOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyPolicyMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicyPolicyMap)(nil)).Elem()
}

func (o ResiliencyPolicyPolicyMapPtrOutput) ToResiliencyPolicyPolicyMapPtrOutput() ResiliencyPolicyPolicyMapPtrOutput {
	return o
}

func (o ResiliencyPolicyPolicyMapPtrOutput) ToResiliencyPolicyPolicyMapPtrOutputWithContext(ctx context.Context) ResiliencyPolicyPolicyMapPtrOutput {
	return o
}

func (o ResiliencyPolicyPolicyMapPtrOutput) Elem() ResiliencyPolicyPolicyMapOutput {
	return o.ApplyT(func(v *ResiliencyPolicyPolicyMap) ResiliencyPolicyPolicyMap {
		if v != nil {
			return *v
		}
		var ret ResiliencyPolicyPolicyMap
		return ret
	}).(ResiliencyPolicyPolicyMapOutput)
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapPtrOutput) Az() ResiliencyPolicyFailurePolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyPolicyMap) *ResiliencyPolicyFailurePolicy {
		if v == nil {
			return nil
		}
		return &v.Az
	}).(ResiliencyPolicyFailurePolicyPtrOutput)
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapPtrOutput) Hardware() ResiliencyPolicyFailurePolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyPolicyMap) *ResiliencyPolicyFailurePolicy {
		if v == nil {
			return nil
		}
		return &v.Hardware
	}).(ResiliencyPolicyFailurePolicyPtrOutput)
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapPtrOutput) Region() ResiliencyPolicyFailurePolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyPolicyMap) *ResiliencyPolicyFailurePolicy {
		if v == nil {
			return nil
		}
		return v.Region
	}).(ResiliencyPolicyFailurePolicyPtrOutput)
}

// Defines a failure policy.
func (o ResiliencyPolicyPolicyMapPtrOutput) Software() ResiliencyPolicyFailurePolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyPolicyMap) *ResiliencyPolicyFailurePolicy {
		if v == nil {
			return nil
		}
		return &v.Software
	}).(ResiliencyPolicyFailurePolicyPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppEventSubscriptionInput)(nil)).Elem(), AppEventSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppEventSubscriptionArrayInput)(nil)).Elem(), AppEventSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppPermissionModelInput)(nil)).Elem(), AppPermissionModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppPermissionModelPtrInput)(nil)).Elem(), AppPermissionModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppPhysicalResourceIdInput)(nil)).Elem(), AppPhysicalResourceIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppResourceMappingInput)(nil)).Elem(), AppResourceMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppResourceMappingArrayInput)(nil)).Elem(), AppResourceMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyFailurePolicyInput)(nil)).Elem(), ResiliencyPolicyFailurePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyFailurePolicyPtrInput)(nil)).Elem(), ResiliencyPolicyFailurePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResiliencyPolicyPolicyMapInput)(nil)).Elem(), ResiliencyPolicyPolicyMapArgs{})
	pulumi.RegisterOutputType(AppEventSubscriptionOutput{})
	pulumi.RegisterOutputType(AppEventSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(AppPermissionModelOutput{})
	pulumi.RegisterOutputType(AppPermissionModelPtrOutput{})
	pulumi.RegisterOutputType(AppPhysicalResourceIdOutput{})
	pulumi.RegisterOutputType(AppResourceMappingOutput{})
	pulumi.RegisterOutputType(AppResourceMappingArrayOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyFailurePolicyOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyFailurePolicyPtrOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyPolicyMapOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyPolicyMapPtrOutput{})
}
