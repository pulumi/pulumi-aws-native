// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::NetworkManager::TransitGatewayPeering Resoruce Type.
func LookupTransitGatewayPeering(ctx *pulumi.Context, args *LookupTransitGatewayPeeringArgs, opts ...pulumi.InvokeOption) (*LookupTransitGatewayPeeringResult, error) {
	var rv LookupTransitGatewayPeeringResult
	err := ctx.Invoke("aws-native:networkmanager:getTransitGatewayPeering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTransitGatewayPeeringArgs struct {
	// The Id of the transit gateway peering
	PeeringId string `pulumi:"peeringId"`
}

type LookupTransitGatewayPeeringResult struct {
	// The ARN (Amazon Resource Name) of the core network that you want to peer a transit gateway to.
	CoreNetworkArn *string `pulumi:"coreNetworkArn"`
	// The creation time of the transit gateway peering
	CreatedAt *string `pulumi:"createdAt"`
	// The location of the transit gateway peering
	EdgeLocation *string `pulumi:"edgeLocation"`
	// Peering owner account Id
	OwnerAccountId *string `pulumi:"ownerAccountId"`
	// The Id of the transit gateway peering
	PeeringId *string `pulumi:"peeringId"`
	// Peering type (TransitGatewayPeering)
	PeeringType *string `pulumi:"peeringType"`
	// The ARN (Amazon Resource Name) of the resource that you will peer to a core network
	ResourceArn *string `pulumi:"resourceArn"`
	// The state of the transit gateway peering
	State *string `pulumi:"state"`
	// An array of key-value pairs to apply to this resource.
	Tags []TransitGatewayPeeringTag `pulumi:"tags"`
	// The ID of the TransitGatewayPeeringAttachment
	TransitGatewayPeeringAttachmentId *string `pulumi:"transitGatewayPeeringAttachmentId"`
}

func LookupTransitGatewayPeeringOutput(ctx *pulumi.Context, args LookupTransitGatewayPeeringOutputArgs, opts ...pulumi.InvokeOption) LookupTransitGatewayPeeringResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTransitGatewayPeeringResult, error) {
			args := v.(LookupTransitGatewayPeeringArgs)
			r, err := LookupTransitGatewayPeering(ctx, &args, opts...)
			var s LookupTransitGatewayPeeringResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTransitGatewayPeeringResultOutput)
}

type LookupTransitGatewayPeeringOutputArgs struct {
	// The Id of the transit gateway peering
	PeeringId pulumi.StringInput `pulumi:"peeringId"`
}

func (LookupTransitGatewayPeeringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransitGatewayPeeringArgs)(nil)).Elem()
}

type LookupTransitGatewayPeeringResultOutput struct{ *pulumi.OutputState }

func (LookupTransitGatewayPeeringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransitGatewayPeeringResult)(nil)).Elem()
}

func (o LookupTransitGatewayPeeringResultOutput) ToLookupTransitGatewayPeeringResultOutput() LookupTransitGatewayPeeringResultOutput {
	return o
}

func (o LookupTransitGatewayPeeringResultOutput) ToLookupTransitGatewayPeeringResultOutputWithContext(ctx context.Context) LookupTransitGatewayPeeringResultOutput {
	return o
}

// The ARN (Amazon Resource Name) of the core network that you want to peer a transit gateway to.
func (o LookupTransitGatewayPeeringResultOutput) CoreNetworkArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.CoreNetworkArn }).(pulumi.StringPtrOutput)
}

// The creation time of the transit gateway peering
func (o LookupTransitGatewayPeeringResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The location of the transit gateway peering
func (o LookupTransitGatewayPeeringResultOutput) EdgeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.EdgeLocation }).(pulumi.StringPtrOutput)
}

// Peering owner account Id
func (o LookupTransitGatewayPeeringResultOutput) OwnerAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.OwnerAccountId }).(pulumi.StringPtrOutput)
}

// The Id of the transit gateway peering
func (o LookupTransitGatewayPeeringResultOutput) PeeringId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.PeeringId }).(pulumi.StringPtrOutput)
}

// Peering type (TransitGatewayPeering)
func (o LookupTransitGatewayPeeringResultOutput) PeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.PeeringType }).(pulumi.StringPtrOutput)
}

// The ARN (Amazon Resource Name) of the resource that you will peer to a core network
func (o LookupTransitGatewayPeeringResultOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.ResourceArn }).(pulumi.StringPtrOutput)
}

// The state of the transit gateway peering
func (o LookupTransitGatewayPeeringResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupTransitGatewayPeeringResultOutput) Tags() TransitGatewayPeeringTagArrayOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) []TransitGatewayPeeringTag { return v.Tags }).(TransitGatewayPeeringTagArrayOutput)
}

// The ID of the TransitGatewayPeeringAttachment
func (o LookupTransitGatewayPeeringResultOutput) TransitGatewayPeeringAttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTransitGatewayPeeringResult) *string { return v.TransitGatewayPeeringAttachmentId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransitGatewayPeeringResultOutput{})
}
