// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The site location.
type DeviceLocation struct {
	// The physical address.
	Address *string `pulumi:"address"`
	// The latitude.
	Latitude *string `pulumi:"latitude"`
	// The longitude.
	Longitude *string `pulumi:"longitude"`
}

// DeviceLocationInput is an input type that accepts DeviceLocationArgs and DeviceLocationOutput values.
// You can construct a concrete instance of `DeviceLocationInput` via:
//
//          DeviceLocationArgs{...}
type DeviceLocationInput interface {
	pulumi.Input

	ToDeviceLocationOutput() DeviceLocationOutput
	ToDeviceLocationOutputWithContext(context.Context) DeviceLocationOutput
}

// The site location.
type DeviceLocationArgs struct {
	// The physical address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The latitude.
	Latitude pulumi.StringPtrInput `pulumi:"latitude"`
	// The longitude.
	Longitude pulumi.StringPtrInput `pulumi:"longitude"`
}

func (DeviceLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLocation)(nil)).Elem()
}

func (i DeviceLocationArgs) ToDeviceLocationOutput() DeviceLocationOutput {
	return i.ToDeviceLocationOutputWithContext(context.Background())
}

func (i DeviceLocationArgs) ToDeviceLocationOutputWithContext(ctx context.Context) DeviceLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLocationOutput)
}

func (i DeviceLocationArgs) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return i.ToDeviceLocationPtrOutputWithContext(context.Background())
}

func (i DeviceLocationArgs) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLocationOutput).ToDeviceLocationPtrOutputWithContext(ctx)
}

// DeviceLocationPtrInput is an input type that accepts DeviceLocationArgs, DeviceLocationPtr and DeviceLocationPtrOutput values.
// You can construct a concrete instance of `DeviceLocationPtrInput` via:
//
//          DeviceLocationArgs{...}
//
//  or:
//
//          nil
type DeviceLocationPtrInput interface {
	pulumi.Input

	ToDeviceLocationPtrOutput() DeviceLocationPtrOutput
	ToDeviceLocationPtrOutputWithContext(context.Context) DeviceLocationPtrOutput
}

type deviceLocationPtrType DeviceLocationArgs

func DeviceLocationPtr(v *DeviceLocationArgs) DeviceLocationPtrInput {
	return (*deviceLocationPtrType)(v)
}

func (*deviceLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceLocation)(nil)).Elem()
}

func (i *deviceLocationPtrType) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return i.ToDeviceLocationPtrOutputWithContext(context.Background())
}

func (i *deviceLocationPtrType) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceLocationPtrOutput)
}

// The site location.
type DeviceLocationOutput struct{ *pulumi.OutputState }

func (DeviceLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceLocation)(nil)).Elem()
}

func (o DeviceLocationOutput) ToDeviceLocationOutput() DeviceLocationOutput {
	return o
}

func (o DeviceLocationOutput) ToDeviceLocationOutputWithContext(ctx context.Context) DeviceLocationOutput {
	return o
}

func (o DeviceLocationOutput) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return o.ToDeviceLocationPtrOutputWithContext(context.Background())
}

func (o DeviceLocationOutput) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceLocation) *DeviceLocation {
		return &v
	}).(DeviceLocationPtrOutput)
}

// The physical address.
func (o DeviceLocationOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLocation) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The latitude.
func (o DeviceLocationOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLocation) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// The longitude.
func (o DeviceLocationOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceLocation) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

type DeviceLocationPtrOutput struct{ *pulumi.OutputState }

func (DeviceLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceLocation)(nil)).Elem()
}

func (o DeviceLocationPtrOutput) ToDeviceLocationPtrOutput() DeviceLocationPtrOutput {
	return o
}

func (o DeviceLocationPtrOutput) ToDeviceLocationPtrOutputWithContext(ctx context.Context) DeviceLocationPtrOutput {
	return o
}

func (o DeviceLocationPtrOutput) Elem() DeviceLocationOutput {
	return o.ApplyT(func(v *DeviceLocation) DeviceLocation {
		if v != nil {
			return *v
		}
		var ret DeviceLocation
		return ret
	}).(DeviceLocationOutput)
}

// The physical address.
func (o DeviceLocationPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceLocation) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The latitude.
func (o DeviceLocationPtrOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceLocation) *string {
		if v == nil {
			return nil
		}
		return v.Latitude
	}).(pulumi.StringPtrOutput)
}

// The longitude.
func (o DeviceLocationPtrOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceLocation) *string {
		if v == nil {
			return nil
		}
		return v.Longitude
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a device resource.
type DeviceTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// DeviceTagInput is an input type that accepts DeviceTagArgs and DeviceTagOutput values.
// You can construct a concrete instance of `DeviceTagInput` via:
//
//          DeviceTagArgs{...}
type DeviceTagInput interface {
	pulumi.Input

	ToDeviceTagOutput() DeviceTagOutput
	ToDeviceTagOutputWithContext(context.Context) DeviceTagOutput
}

// A key-value pair to associate with a device resource.
type DeviceTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DeviceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceTag)(nil)).Elem()
}

func (i DeviceTagArgs) ToDeviceTagOutput() DeviceTagOutput {
	return i.ToDeviceTagOutputWithContext(context.Background())
}

func (i DeviceTagArgs) ToDeviceTagOutputWithContext(ctx context.Context) DeviceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTagOutput)
}

// DeviceTagArrayInput is an input type that accepts DeviceTagArray and DeviceTagArrayOutput values.
// You can construct a concrete instance of `DeviceTagArrayInput` via:
//
//          DeviceTagArray{ DeviceTagArgs{...} }
type DeviceTagArrayInput interface {
	pulumi.Input

	ToDeviceTagArrayOutput() DeviceTagArrayOutput
	ToDeviceTagArrayOutputWithContext(context.Context) DeviceTagArrayOutput
}

type DeviceTagArray []DeviceTagInput

func (DeviceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceTag)(nil)).Elem()
}

func (i DeviceTagArray) ToDeviceTagArrayOutput() DeviceTagArrayOutput {
	return i.ToDeviceTagArrayOutputWithContext(context.Background())
}

func (i DeviceTagArray) ToDeviceTagArrayOutputWithContext(ctx context.Context) DeviceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTagArrayOutput)
}

// A key-value pair to associate with a device resource.
type DeviceTagOutput struct{ *pulumi.OutputState }

func (DeviceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceTag)(nil)).Elem()
}

func (o DeviceTagOutput) ToDeviceTagOutput() DeviceTagOutput {
	return o
}

func (o DeviceTagOutput) ToDeviceTagOutputWithContext(ctx context.Context) DeviceTagOutput {
	return o
}

func (o DeviceTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o DeviceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DeviceTagArrayOutput struct{ *pulumi.OutputState }

func (DeviceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceTag)(nil)).Elem()
}

func (o DeviceTagArrayOutput) ToDeviceTagArrayOutput() DeviceTagArrayOutput {
	return o
}

func (o DeviceTagArrayOutput) ToDeviceTagArrayOutputWithContext(ctx context.Context) DeviceTagArrayOutput {
	return o
}

func (o DeviceTagArrayOutput) Index(i pulumi.IntInput) DeviceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceTag {
		return vs[0].([]DeviceTag)[vs[1].(int)]
	}).(DeviceTagOutput)
}

// A key-value pair to associate with a global network resource.
type GlobalNetworkTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// GlobalNetworkTagInput is an input type that accepts GlobalNetworkTagArgs and GlobalNetworkTagOutput values.
// You can construct a concrete instance of `GlobalNetworkTagInput` via:
//
//          GlobalNetworkTagArgs{...}
type GlobalNetworkTagInput interface {
	pulumi.Input

	ToGlobalNetworkTagOutput() GlobalNetworkTagOutput
	ToGlobalNetworkTagOutputWithContext(context.Context) GlobalNetworkTagOutput
}

// A key-value pair to associate with a global network resource.
type GlobalNetworkTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GlobalNetworkTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalNetworkTag)(nil)).Elem()
}

func (i GlobalNetworkTagArgs) ToGlobalNetworkTagOutput() GlobalNetworkTagOutput {
	return i.ToGlobalNetworkTagOutputWithContext(context.Background())
}

func (i GlobalNetworkTagArgs) ToGlobalNetworkTagOutputWithContext(ctx context.Context) GlobalNetworkTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalNetworkTagOutput)
}

// GlobalNetworkTagArrayInput is an input type that accepts GlobalNetworkTagArray and GlobalNetworkTagArrayOutput values.
// You can construct a concrete instance of `GlobalNetworkTagArrayInput` via:
//
//          GlobalNetworkTagArray{ GlobalNetworkTagArgs{...} }
type GlobalNetworkTagArrayInput interface {
	pulumi.Input

	ToGlobalNetworkTagArrayOutput() GlobalNetworkTagArrayOutput
	ToGlobalNetworkTagArrayOutputWithContext(context.Context) GlobalNetworkTagArrayOutput
}

type GlobalNetworkTagArray []GlobalNetworkTagInput

func (GlobalNetworkTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalNetworkTag)(nil)).Elem()
}

func (i GlobalNetworkTagArray) ToGlobalNetworkTagArrayOutput() GlobalNetworkTagArrayOutput {
	return i.ToGlobalNetworkTagArrayOutputWithContext(context.Background())
}

func (i GlobalNetworkTagArray) ToGlobalNetworkTagArrayOutputWithContext(ctx context.Context) GlobalNetworkTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalNetworkTagArrayOutput)
}

// A key-value pair to associate with a global network resource.
type GlobalNetworkTagOutput struct{ *pulumi.OutputState }

func (GlobalNetworkTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalNetworkTag)(nil)).Elem()
}

func (o GlobalNetworkTagOutput) ToGlobalNetworkTagOutput() GlobalNetworkTagOutput {
	return o
}

func (o GlobalNetworkTagOutput) ToGlobalNetworkTagOutputWithContext(ctx context.Context) GlobalNetworkTagOutput {
	return o
}

func (o GlobalNetworkTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalNetworkTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o GlobalNetworkTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalNetworkTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GlobalNetworkTagArrayOutput struct{ *pulumi.OutputState }

func (GlobalNetworkTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalNetworkTag)(nil)).Elem()
}

func (o GlobalNetworkTagArrayOutput) ToGlobalNetworkTagArrayOutput() GlobalNetworkTagArrayOutput {
	return o
}

func (o GlobalNetworkTagArrayOutput) ToGlobalNetworkTagArrayOutputWithContext(ctx context.Context) GlobalNetworkTagArrayOutput {
	return o
}

func (o GlobalNetworkTagArrayOutput) Index(i pulumi.IntInput) GlobalNetworkTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalNetworkTag {
		return vs[0].([]GlobalNetworkTag)[vs[1].(int)]
	}).(GlobalNetworkTagOutput)
}

// The bandwidth for the link.
type LinkBandwidth struct {
	// Download speed in Mbps.
	DownloadSpeed *int `pulumi:"downloadSpeed"`
	// Upload speed in Mbps.
	UploadSpeed *int `pulumi:"uploadSpeed"`
}

// LinkBandwidthInput is an input type that accepts LinkBandwidthArgs and LinkBandwidthOutput values.
// You can construct a concrete instance of `LinkBandwidthInput` via:
//
//          LinkBandwidthArgs{...}
type LinkBandwidthInput interface {
	pulumi.Input

	ToLinkBandwidthOutput() LinkBandwidthOutput
	ToLinkBandwidthOutputWithContext(context.Context) LinkBandwidthOutput
}

// The bandwidth for the link.
type LinkBandwidthArgs struct {
	// Download speed in Mbps.
	DownloadSpeed pulumi.IntPtrInput `pulumi:"downloadSpeed"`
	// Upload speed in Mbps.
	UploadSpeed pulumi.IntPtrInput `pulumi:"uploadSpeed"`
}

func (LinkBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkBandwidth)(nil)).Elem()
}

func (i LinkBandwidthArgs) ToLinkBandwidthOutput() LinkBandwidthOutput {
	return i.ToLinkBandwidthOutputWithContext(context.Background())
}

func (i LinkBandwidthArgs) ToLinkBandwidthOutputWithContext(ctx context.Context) LinkBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkBandwidthOutput)
}

func (i LinkBandwidthArgs) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return i.ToLinkBandwidthPtrOutputWithContext(context.Background())
}

func (i LinkBandwidthArgs) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkBandwidthOutput).ToLinkBandwidthPtrOutputWithContext(ctx)
}

// LinkBandwidthPtrInput is an input type that accepts LinkBandwidthArgs, LinkBandwidthPtr and LinkBandwidthPtrOutput values.
// You can construct a concrete instance of `LinkBandwidthPtrInput` via:
//
//          LinkBandwidthArgs{...}
//
//  or:
//
//          nil
type LinkBandwidthPtrInput interface {
	pulumi.Input

	ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput
	ToLinkBandwidthPtrOutputWithContext(context.Context) LinkBandwidthPtrOutput
}

type linkBandwidthPtrType LinkBandwidthArgs

func LinkBandwidthPtr(v *LinkBandwidthArgs) LinkBandwidthPtrInput {
	return (*linkBandwidthPtrType)(v)
}

func (*linkBandwidthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkBandwidth)(nil)).Elem()
}

func (i *linkBandwidthPtrType) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return i.ToLinkBandwidthPtrOutputWithContext(context.Background())
}

func (i *linkBandwidthPtrType) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkBandwidthPtrOutput)
}

// The bandwidth for the link.
type LinkBandwidthOutput struct{ *pulumi.OutputState }

func (LinkBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkBandwidth)(nil)).Elem()
}

func (o LinkBandwidthOutput) ToLinkBandwidthOutput() LinkBandwidthOutput {
	return o
}

func (o LinkBandwidthOutput) ToLinkBandwidthOutputWithContext(ctx context.Context) LinkBandwidthOutput {
	return o
}

func (o LinkBandwidthOutput) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return o.ToLinkBandwidthPtrOutputWithContext(context.Background())
}

func (o LinkBandwidthOutput) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkBandwidth) *LinkBandwidth {
		return &v
	}).(LinkBandwidthPtrOutput)
}

// Download speed in Mbps.
func (o LinkBandwidthOutput) DownloadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinkBandwidth) *int { return v.DownloadSpeed }).(pulumi.IntPtrOutput)
}

// Upload speed in Mbps.
func (o LinkBandwidthOutput) UploadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinkBandwidth) *int { return v.UploadSpeed }).(pulumi.IntPtrOutput)
}

type LinkBandwidthPtrOutput struct{ *pulumi.OutputState }

func (LinkBandwidthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkBandwidth)(nil)).Elem()
}

func (o LinkBandwidthPtrOutput) ToLinkBandwidthPtrOutput() LinkBandwidthPtrOutput {
	return o
}

func (o LinkBandwidthPtrOutput) ToLinkBandwidthPtrOutputWithContext(ctx context.Context) LinkBandwidthPtrOutput {
	return o
}

func (o LinkBandwidthPtrOutput) Elem() LinkBandwidthOutput {
	return o.ApplyT(func(v *LinkBandwidth) LinkBandwidth {
		if v != nil {
			return *v
		}
		var ret LinkBandwidth
		return ret
	}).(LinkBandwidthOutput)
}

// Download speed in Mbps.
func (o LinkBandwidthPtrOutput) DownloadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinkBandwidth) *int {
		if v == nil {
			return nil
		}
		return v.DownloadSpeed
	}).(pulumi.IntPtrOutput)
}

// Upload speed in Mbps.
func (o LinkBandwidthPtrOutput) UploadSpeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinkBandwidth) *int {
		if v == nil {
			return nil
		}
		return v.UploadSpeed
	}).(pulumi.IntPtrOutput)
}

// A key-value pair to associate with a link resource.
type LinkTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// LinkTagInput is an input type that accepts LinkTagArgs and LinkTagOutput values.
// You can construct a concrete instance of `LinkTagInput` via:
//
//          LinkTagArgs{...}
type LinkTagInput interface {
	pulumi.Input

	ToLinkTagOutput() LinkTagOutput
	ToLinkTagOutputWithContext(context.Context) LinkTagOutput
}

// A key-value pair to associate with a link resource.
type LinkTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LinkTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkTag)(nil)).Elem()
}

func (i LinkTagArgs) ToLinkTagOutput() LinkTagOutput {
	return i.ToLinkTagOutputWithContext(context.Background())
}

func (i LinkTagArgs) ToLinkTagOutputWithContext(ctx context.Context) LinkTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkTagOutput)
}

// LinkTagArrayInput is an input type that accepts LinkTagArray and LinkTagArrayOutput values.
// You can construct a concrete instance of `LinkTagArrayInput` via:
//
//          LinkTagArray{ LinkTagArgs{...} }
type LinkTagArrayInput interface {
	pulumi.Input

	ToLinkTagArrayOutput() LinkTagArrayOutput
	ToLinkTagArrayOutputWithContext(context.Context) LinkTagArrayOutput
}

type LinkTagArray []LinkTagInput

func (LinkTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkTag)(nil)).Elem()
}

func (i LinkTagArray) ToLinkTagArrayOutput() LinkTagArrayOutput {
	return i.ToLinkTagArrayOutputWithContext(context.Background())
}

func (i LinkTagArray) ToLinkTagArrayOutputWithContext(ctx context.Context) LinkTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkTagArrayOutput)
}

// A key-value pair to associate with a link resource.
type LinkTagOutput struct{ *pulumi.OutputState }

func (LinkTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkTag)(nil)).Elem()
}

func (o LinkTagOutput) ToLinkTagOutput() LinkTagOutput {
	return o
}

func (o LinkTagOutput) ToLinkTagOutputWithContext(ctx context.Context) LinkTagOutput {
	return o
}

func (o LinkTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o LinkTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LinkTagArrayOutput struct{ *pulumi.OutputState }

func (LinkTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkTag)(nil)).Elem()
}

func (o LinkTagArrayOutput) ToLinkTagArrayOutput() LinkTagArrayOutput {
	return o
}

func (o LinkTagArrayOutput) ToLinkTagArrayOutputWithContext(ctx context.Context) LinkTagArrayOutput {
	return o
}

func (o LinkTagArrayOutput) Index(i pulumi.IntInput) LinkTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkTag {
		return vs[0].([]LinkTag)[vs[1].(int)]
	}).(LinkTagOutput)
}

// The location of the site
type SiteLocation struct {
	// The physical address.
	Address *string `pulumi:"address"`
	// The latitude.
	Latitude *string `pulumi:"latitude"`
	// The longitude.
	Longitude *string `pulumi:"longitude"`
}

// SiteLocationInput is an input type that accepts SiteLocationArgs and SiteLocationOutput values.
// You can construct a concrete instance of `SiteLocationInput` via:
//
//          SiteLocationArgs{...}
type SiteLocationInput interface {
	pulumi.Input

	ToSiteLocationOutput() SiteLocationOutput
	ToSiteLocationOutputWithContext(context.Context) SiteLocationOutput
}

// The location of the site
type SiteLocationArgs struct {
	// The physical address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The latitude.
	Latitude pulumi.StringPtrInput `pulumi:"latitude"`
	// The longitude.
	Longitude pulumi.StringPtrInput `pulumi:"longitude"`
}

func (SiteLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteLocation)(nil)).Elem()
}

func (i SiteLocationArgs) ToSiteLocationOutput() SiteLocationOutput {
	return i.ToSiteLocationOutputWithContext(context.Background())
}

func (i SiteLocationArgs) ToSiteLocationOutputWithContext(ctx context.Context) SiteLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteLocationOutput)
}

func (i SiteLocationArgs) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return i.ToSiteLocationPtrOutputWithContext(context.Background())
}

func (i SiteLocationArgs) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteLocationOutput).ToSiteLocationPtrOutputWithContext(ctx)
}

// SiteLocationPtrInput is an input type that accepts SiteLocationArgs, SiteLocationPtr and SiteLocationPtrOutput values.
// You can construct a concrete instance of `SiteLocationPtrInput` via:
//
//          SiteLocationArgs{...}
//
//  or:
//
//          nil
type SiteLocationPtrInput interface {
	pulumi.Input

	ToSiteLocationPtrOutput() SiteLocationPtrOutput
	ToSiteLocationPtrOutputWithContext(context.Context) SiteLocationPtrOutput
}

type siteLocationPtrType SiteLocationArgs

func SiteLocationPtr(v *SiteLocationArgs) SiteLocationPtrInput {
	return (*siteLocationPtrType)(v)
}

func (*siteLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteLocation)(nil)).Elem()
}

func (i *siteLocationPtrType) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return i.ToSiteLocationPtrOutputWithContext(context.Background())
}

func (i *siteLocationPtrType) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteLocationPtrOutput)
}

// The location of the site
type SiteLocationOutput struct{ *pulumi.OutputState }

func (SiteLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteLocation)(nil)).Elem()
}

func (o SiteLocationOutput) ToSiteLocationOutput() SiteLocationOutput {
	return o
}

func (o SiteLocationOutput) ToSiteLocationOutputWithContext(ctx context.Context) SiteLocationOutput {
	return o
}

func (o SiteLocationOutput) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return o.ToSiteLocationPtrOutputWithContext(context.Background())
}

func (o SiteLocationOutput) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SiteLocation) *SiteLocation {
		return &v
	}).(SiteLocationPtrOutput)
}

// The physical address.
func (o SiteLocationOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteLocation) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The latitude.
func (o SiteLocationOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteLocation) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// The longitude.
func (o SiteLocationOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteLocation) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

type SiteLocationPtrOutput struct{ *pulumi.OutputState }

func (SiteLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteLocation)(nil)).Elem()
}

func (o SiteLocationPtrOutput) ToSiteLocationPtrOutput() SiteLocationPtrOutput {
	return o
}

func (o SiteLocationPtrOutput) ToSiteLocationPtrOutputWithContext(ctx context.Context) SiteLocationPtrOutput {
	return o
}

func (o SiteLocationPtrOutput) Elem() SiteLocationOutput {
	return o.ApplyT(func(v *SiteLocation) SiteLocation {
		if v != nil {
			return *v
		}
		var ret SiteLocation
		return ret
	}).(SiteLocationOutput)
}

// The physical address.
func (o SiteLocationPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteLocation) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The latitude.
func (o SiteLocationPtrOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteLocation) *string {
		if v == nil {
			return nil
		}
		return v.Latitude
	}).(pulumi.StringPtrOutput)
}

// The longitude.
func (o SiteLocationPtrOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteLocation) *string {
		if v == nil {
			return nil
		}
		return v.Longitude
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a site resource.
type SiteTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// SiteTagInput is an input type that accepts SiteTagArgs and SiteTagOutput values.
// You can construct a concrete instance of `SiteTagInput` via:
//
//          SiteTagArgs{...}
type SiteTagInput interface {
	pulumi.Input

	ToSiteTagOutput() SiteTagOutput
	ToSiteTagOutputWithContext(context.Context) SiteTagOutput
}

// A key-value pair to associate with a site resource.
type SiteTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SiteTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteTag)(nil)).Elem()
}

func (i SiteTagArgs) ToSiteTagOutput() SiteTagOutput {
	return i.ToSiteTagOutputWithContext(context.Background())
}

func (i SiteTagArgs) ToSiteTagOutputWithContext(ctx context.Context) SiteTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteTagOutput)
}

// SiteTagArrayInput is an input type that accepts SiteTagArray and SiteTagArrayOutput values.
// You can construct a concrete instance of `SiteTagArrayInput` via:
//
//          SiteTagArray{ SiteTagArgs{...} }
type SiteTagArrayInput interface {
	pulumi.Input

	ToSiteTagArrayOutput() SiteTagArrayOutput
	ToSiteTagArrayOutputWithContext(context.Context) SiteTagArrayOutput
}

type SiteTagArray []SiteTagInput

func (SiteTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SiteTag)(nil)).Elem()
}

func (i SiteTagArray) ToSiteTagArrayOutput() SiteTagArrayOutput {
	return i.ToSiteTagArrayOutputWithContext(context.Background())
}

func (i SiteTagArray) ToSiteTagArrayOutputWithContext(ctx context.Context) SiteTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteTagArrayOutput)
}

// A key-value pair to associate with a site resource.
type SiteTagOutput struct{ *pulumi.OutputState }

func (SiteTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteTag)(nil)).Elem()
}

func (o SiteTagOutput) ToSiteTagOutput() SiteTagOutput {
	return o
}

func (o SiteTagOutput) ToSiteTagOutputWithContext(ctx context.Context) SiteTagOutput {
	return o
}

func (o SiteTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o SiteTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SiteTagArrayOutput struct{ *pulumi.OutputState }

func (SiteTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SiteTag)(nil)).Elem()
}

func (o SiteTagArrayOutput) ToSiteTagArrayOutput() SiteTagArrayOutput {
	return o
}

func (o SiteTagArrayOutput) ToSiteTagArrayOutputWithContext(ctx context.Context) SiteTagArrayOutput {
	return o
}

func (o SiteTagArrayOutput) Index(i pulumi.IntInput) SiteTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SiteTag {
		return vs[0].([]SiteTag)[vs[1].(int)]
	}).(SiteTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLocationInput)(nil)).Elem(), DeviceLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceLocationPtrInput)(nil)).Elem(), DeviceLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTagInput)(nil)).Elem(), DeviceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTagArrayInput)(nil)).Elem(), DeviceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalNetworkTagInput)(nil)).Elem(), GlobalNetworkTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalNetworkTagArrayInput)(nil)).Elem(), GlobalNetworkTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkBandwidthInput)(nil)).Elem(), LinkBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkBandwidthPtrInput)(nil)).Elem(), LinkBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkTagInput)(nil)).Elem(), LinkTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkTagArrayInput)(nil)).Elem(), LinkTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteLocationInput)(nil)).Elem(), SiteLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteLocationPtrInput)(nil)).Elem(), SiteLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteTagInput)(nil)).Elem(), SiteTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteTagArrayInput)(nil)).Elem(), SiteTagArray{})
	pulumi.RegisterOutputType(DeviceLocationOutput{})
	pulumi.RegisterOutputType(DeviceLocationPtrOutput{})
	pulumi.RegisterOutputType(DeviceTagOutput{})
	pulumi.RegisterOutputType(DeviceTagArrayOutput{})
	pulumi.RegisterOutputType(GlobalNetworkTagOutput{})
	pulumi.RegisterOutputType(GlobalNetworkTagArrayOutput{})
	pulumi.RegisterOutputType(LinkBandwidthOutput{})
	pulumi.RegisterOutputType(LinkBandwidthPtrOutput{})
	pulumi.RegisterOutputType(LinkTagOutput{})
	pulumi.RegisterOutputType(LinkTagArrayOutput{})
	pulumi.RegisterOutputType(SiteLocationOutput{})
	pulumi.RegisterOutputType(SiteLocationPtrOutput{})
	pulumi.RegisterOutputType(SiteTagOutput{})
	pulumi.RegisterOutputType(SiteTagArrayOutput{})
}
