// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::NetworkManager::ConnectPeer Resource Type Definition.
func LookupConnectPeer(ctx *pulumi.Context, args *LookupConnectPeerArgs, opts ...pulumi.InvokeOption) (*LookupConnectPeerResult, error) {
	var rv LookupConnectPeerResult
	err := ctx.Invoke("aws-native:networkmanager:getConnectPeer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConnectPeerArgs struct {
	// The ID of the Connect peer.
	ConnectPeerId string `pulumi:"connectPeerId"`
}

type LookupConnectPeerResult struct {
	// Configuration of the connect peer.
	Configuration *ConnectPeerConfiguration `pulumi:"configuration"`
	// The ID of the Connect peer.
	ConnectPeerId *string `pulumi:"connectPeerId"`
	// The ID of the core network.
	CoreNetworkId *string `pulumi:"coreNetworkId"`
	// Connect peer creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// The Connect peer Regions where edges are located.
	EdgeLocation *string `pulumi:"edgeLocation"`
	// State of the connect peer.
	State *string `pulumi:"state"`
	// An array of key-value pairs to apply to this resource.
	Tags []ConnectPeerTag `pulumi:"tags"`
}

func LookupConnectPeerOutput(ctx *pulumi.Context, args LookupConnectPeerOutputArgs, opts ...pulumi.InvokeOption) LookupConnectPeerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectPeerResult, error) {
			args := v.(LookupConnectPeerArgs)
			r, err := LookupConnectPeer(ctx, &args, opts...)
			var s LookupConnectPeerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectPeerResultOutput)
}

type LookupConnectPeerOutputArgs struct {
	// The ID of the Connect peer.
	ConnectPeerId pulumi.StringInput `pulumi:"connectPeerId"`
}

func (LookupConnectPeerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectPeerArgs)(nil)).Elem()
}

type LookupConnectPeerResultOutput struct{ *pulumi.OutputState }

func (LookupConnectPeerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectPeerResult)(nil)).Elem()
}

func (o LookupConnectPeerResultOutput) ToLookupConnectPeerResultOutput() LookupConnectPeerResultOutput {
	return o
}

func (o LookupConnectPeerResultOutput) ToLookupConnectPeerResultOutputWithContext(ctx context.Context) LookupConnectPeerResultOutput {
	return o
}

// Configuration of the connect peer.
func (o LookupConnectPeerResultOutput) Configuration() ConnectPeerConfigurationPtrOutput {
	return o.ApplyT(func(v LookupConnectPeerResult) *ConnectPeerConfiguration { return v.Configuration }).(ConnectPeerConfigurationPtrOutput)
}

// The ID of the Connect peer.
func (o LookupConnectPeerResultOutput) ConnectPeerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectPeerResult) *string { return v.ConnectPeerId }).(pulumi.StringPtrOutput)
}

// The ID of the core network.
func (o LookupConnectPeerResultOutput) CoreNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectPeerResult) *string { return v.CoreNetworkId }).(pulumi.StringPtrOutput)
}

// Connect peer creation time.
func (o LookupConnectPeerResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectPeerResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The Connect peer Regions where edges are located.
func (o LookupConnectPeerResultOutput) EdgeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectPeerResult) *string { return v.EdgeLocation }).(pulumi.StringPtrOutput)
}

// State of the connect peer.
func (o LookupConnectPeerResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectPeerResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupConnectPeerResultOutput) Tags() ConnectPeerTagArrayOutput {
	return o.ApplyT(func(v LookupConnectPeerResult) []ConnectPeerTag { return v.Tags }).(ConnectPeerTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectPeerResultOutput{})
}
