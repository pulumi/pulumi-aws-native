// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::NetworkManager::LinkAssociation type associates a link to a device. The device and link must be in the same global network and the same site.
type LinkAssociation struct {
	pulumi.CustomResourceState

	// The ID of the device
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId pulumi.StringOutput `pulumi:"globalNetworkId"`
	// The ID of the link
	LinkId pulumi.StringOutput `pulumi:"linkId"`
}

// NewLinkAssociation registers a new resource with the given unique name, arguments, and options.
func NewLinkAssociation(ctx *pulumi.Context,
	name string, args *LinkAssociationArgs, opts ...pulumi.ResourceOption) (*LinkAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.GlobalNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'GlobalNetworkId'")
	}
	if args.LinkId == nil {
		return nil, errors.New("invalid value for required argument 'LinkId'")
	}
	var resource LinkAssociation
	err := ctx.RegisterResource("aws-native:networkmanager:LinkAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkAssociation gets an existing LinkAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkAssociationState, opts ...pulumi.ResourceOption) (*LinkAssociation, error) {
	var resource LinkAssociation
	err := ctx.ReadResource("aws-native:networkmanager:LinkAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkAssociation resources.
type linkAssociationState struct {
}

type LinkAssociationState struct {
}

func (LinkAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAssociationState)(nil)).Elem()
}

type linkAssociationArgs struct {
	// The ID of the device
	DeviceId string `pulumi:"deviceId"`
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The ID of the link
	LinkId string `pulumi:"linkId"`
}

// The set of arguments for constructing a LinkAssociation resource.
type LinkAssociationArgs struct {
	// The ID of the device
	DeviceId pulumi.StringInput
	// The ID of the global network.
	GlobalNetworkId pulumi.StringInput
	// The ID of the link
	LinkId pulumi.StringInput
}

func (LinkAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkAssociationArgs)(nil)).Elem()
}

type LinkAssociationInput interface {
	pulumi.Input

	ToLinkAssociationOutput() LinkAssociationOutput
	ToLinkAssociationOutputWithContext(ctx context.Context) LinkAssociationOutput
}

func (*LinkAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkAssociation)(nil))
}

func (i *LinkAssociation) ToLinkAssociationOutput() LinkAssociationOutput {
	return i.ToLinkAssociationOutputWithContext(context.Background())
}

func (i *LinkAssociation) ToLinkAssociationOutputWithContext(ctx context.Context) LinkAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkAssociationOutput)
}

type LinkAssociationOutput struct{ *pulumi.OutputState }

func (LinkAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkAssociation)(nil))
}

func (o LinkAssociationOutput) ToLinkAssociationOutput() LinkAssociationOutput {
	return o
}

func (o LinkAssociationOutput) ToLinkAssociationOutputWithContext(ctx context.Context) LinkAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LinkAssociationOutput{})
}
