// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::NetworkManager::TransitGatewayRegistration type registers a transit gateway in your global network. The transit gateway can be in any AWS Region, but it must be owned by the same AWS account that owns the global network. You cannot register a transit gateway in more than one global network.
func LookupTransitGatewayRegistration(ctx *pulumi.Context, args *LookupTransitGatewayRegistrationArgs, opts ...pulumi.InvokeOption) (*LookupTransitGatewayRegistrationResult, error) {
	var rv LookupTransitGatewayRegistrationResult
	err := ctx.Invoke("aws-native:networkmanager:getTransitGatewayRegistration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTransitGatewayRegistrationArgs struct {
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The Amazon Resource Name (ARN) of the transit gateway.
	TransitGatewayArn string `pulumi:"transitGatewayArn"`
}

type LookupTransitGatewayRegistrationResult struct {
}

func LookupTransitGatewayRegistrationOutput(ctx *pulumi.Context, args LookupTransitGatewayRegistrationOutputArgs, opts ...pulumi.InvokeOption) LookupTransitGatewayRegistrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTransitGatewayRegistrationResult, error) {
			args := v.(LookupTransitGatewayRegistrationArgs)
			r, err := LookupTransitGatewayRegistration(ctx, &args, opts...)
			var s LookupTransitGatewayRegistrationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTransitGatewayRegistrationResultOutput)
}

type LookupTransitGatewayRegistrationOutputArgs struct {
	// The ID of the global network.
	GlobalNetworkId pulumi.StringInput `pulumi:"globalNetworkId"`
	// The Amazon Resource Name (ARN) of the transit gateway.
	TransitGatewayArn pulumi.StringInput `pulumi:"transitGatewayArn"`
}

func (LookupTransitGatewayRegistrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransitGatewayRegistrationArgs)(nil)).Elem()
}

type LookupTransitGatewayRegistrationResultOutput struct{ *pulumi.OutputState }

func (LookupTransitGatewayRegistrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransitGatewayRegistrationResult)(nil)).Elem()
}

func (o LookupTransitGatewayRegistrationResultOutput) ToLookupTransitGatewayRegistrationResultOutput() LookupTransitGatewayRegistrationResultOutput {
	return o
}

func (o LookupTransitGatewayRegistrationResultOutput) ToLookupTransitGatewayRegistrationResultOutputWithContext(ctx context.Context) LookupTransitGatewayRegistrationResultOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LookupTransitGatewayRegistrationResultOutput{})
}
