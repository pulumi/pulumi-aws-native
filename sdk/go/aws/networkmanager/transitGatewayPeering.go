// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// AWS::NetworkManager::TransitGatewayPeering Resoruce Type.
type TransitGatewayPeering struct {
	pulumi.CustomResourceState

	// The ARN (Amazon Resource Name) of the core network that you want to peer a transit gateway to.
	CoreNetworkArn pulumi.StringOutput `pulumi:"coreNetworkArn"`
	// The Id of the core network that you want to peer a transit gateway to.
	CoreNetworkId pulumi.StringOutput `pulumi:"coreNetworkId"`
	// The creation time of the transit gateway peering
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The location of the transit gateway peering
	EdgeLocation pulumi.StringOutput `pulumi:"edgeLocation"`
	// Peering owner account Id
	OwnerAccountId pulumi.StringOutput `pulumi:"ownerAccountId"`
	// The Id of the transit gateway peering
	PeeringId pulumi.StringOutput `pulumi:"peeringId"`
	// Peering type (TransitGatewayPeering)
	PeeringType pulumi.StringOutput `pulumi:"peeringType"`
	// The ARN (Amazon Resource Name) of the resource that you will peer to a core network
	ResourceArn pulumi.StringOutput `pulumi:"resourceArn"`
	// The state of the transit gateway peering
	State pulumi.StringOutput `pulumi:"state"`
	// An array of key-value pairs to apply to this resource.
	Tags TransitGatewayPeeringTagArrayOutput `pulumi:"tags"`
	// The ARN (Amazon Resource Name) of the transit gateway that you will peer to a core network
	TransitGatewayArn pulumi.StringOutput `pulumi:"transitGatewayArn"`
	// The ID of the TransitGatewayPeeringAttachment
	TransitGatewayPeeringAttachmentId pulumi.StringOutput `pulumi:"transitGatewayPeeringAttachmentId"`
}

// NewTransitGatewayPeering registers a new resource with the given unique name, arguments, and options.
func NewTransitGatewayPeering(ctx *pulumi.Context,
	name string, args *TransitGatewayPeeringArgs, opts ...pulumi.ResourceOption) (*TransitGatewayPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CoreNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'CoreNetworkId'")
	}
	if args.TransitGatewayArn == nil {
		return nil, errors.New("invalid value for required argument 'TransitGatewayArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"coreNetworkId",
		"transitGatewayArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitGatewayPeering
	err := ctx.RegisterResource("aws-native:networkmanager:TransitGatewayPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitGatewayPeering gets an existing TransitGatewayPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitGatewayPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitGatewayPeeringState, opts ...pulumi.ResourceOption) (*TransitGatewayPeering, error) {
	var resource TransitGatewayPeering
	err := ctx.ReadResource("aws-native:networkmanager:TransitGatewayPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitGatewayPeering resources.
type transitGatewayPeeringState struct {
}

type TransitGatewayPeeringState struct {
}

func (TransitGatewayPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayPeeringState)(nil)).Elem()
}

type transitGatewayPeeringArgs struct {
	// The Id of the core network that you want to peer a transit gateway to.
	CoreNetworkId string `pulumi:"coreNetworkId"`
	// An array of key-value pairs to apply to this resource.
	Tags []TransitGatewayPeeringTag `pulumi:"tags"`
	// The ARN (Amazon Resource Name) of the transit gateway that you will peer to a core network
	TransitGatewayArn string `pulumi:"transitGatewayArn"`
}

// The set of arguments for constructing a TransitGatewayPeering resource.
type TransitGatewayPeeringArgs struct {
	// The Id of the core network that you want to peer a transit gateway to.
	CoreNetworkId pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags TransitGatewayPeeringTagArrayInput
	// The ARN (Amazon Resource Name) of the transit gateway that you will peer to a core network
	TransitGatewayArn pulumi.StringInput
}

func (TransitGatewayPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitGatewayPeeringArgs)(nil)).Elem()
}

type TransitGatewayPeeringInput interface {
	pulumi.Input

	ToTransitGatewayPeeringOutput() TransitGatewayPeeringOutput
	ToTransitGatewayPeeringOutputWithContext(ctx context.Context) TransitGatewayPeeringOutput
}

func (*TransitGatewayPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayPeering)(nil)).Elem()
}

func (i *TransitGatewayPeering) ToTransitGatewayPeeringOutput() TransitGatewayPeeringOutput {
	return i.ToTransitGatewayPeeringOutputWithContext(context.Background())
}

func (i *TransitGatewayPeering) ToTransitGatewayPeeringOutputWithContext(ctx context.Context) TransitGatewayPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitGatewayPeeringOutput)
}

func (i *TransitGatewayPeering) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayPeering] {
	return pulumix.Output[*TransitGatewayPeering]{
		OutputState: i.ToTransitGatewayPeeringOutputWithContext(ctx).OutputState,
	}
}

type TransitGatewayPeeringOutput struct{ *pulumi.OutputState }

func (TransitGatewayPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitGatewayPeering)(nil)).Elem()
}

func (o TransitGatewayPeeringOutput) ToTransitGatewayPeeringOutput() TransitGatewayPeeringOutput {
	return o
}

func (o TransitGatewayPeeringOutput) ToTransitGatewayPeeringOutputWithContext(ctx context.Context) TransitGatewayPeeringOutput {
	return o
}

func (o TransitGatewayPeeringOutput) ToOutput(ctx context.Context) pulumix.Output[*TransitGatewayPeering] {
	return pulumix.Output[*TransitGatewayPeering]{
		OutputState: o.OutputState,
	}
}

// The ARN (Amazon Resource Name) of the core network that you want to peer a transit gateway to.
func (o TransitGatewayPeeringOutput) CoreNetworkArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.CoreNetworkArn }).(pulumi.StringOutput)
}

// The Id of the core network that you want to peer a transit gateway to.
func (o TransitGatewayPeeringOutput) CoreNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.CoreNetworkId }).(pulumi.StringOutput)
}

// The creation time of the transit gateway peering
func (o TransitGatewayPeeringOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The location of the transit gateway peering
func (o TransitGatewayPeeringOutput) EdgeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.EdgeLocation }).(pulumi.StringOutput)
}

// Peering owner account Id
func (o TransitGatewayPeeringOutput) OwnerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.OwnerAccountId }).(pulumi.StringOutput)
}

// The Id of the transit gateway peering
func (o TransitGatewayPeeringOutput) PeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.PeeringId }).(pulumi.StringOutput)
}

// Peering type (TransitGatewayPeering)
func (o TransitGatewayPeeringOutput) PeeringType() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.PeeringType }).(pulumi.StringOutput)
}

// The ARN (Amazon Resource Name) of the resource that you will peer to a core network
func (o TransitGatewayPeeringOutput) ResourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.ResourceArn }).(pulumi.StringOutput)
}

// The state of the transit gateway peering
func (o TransitGatewayPeeringOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o TransitGatewayPeeringOutput) Tags() TransitGatewayPeeringTagArrayOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) TransitGatewayPeeringTagArrayOutput { return v.Tags }).(TransitGatewayPeeringTagArrayOutput)
}

// The ARN (Amazon Resource Name) of the transit gateway that you will peer to a core network
func (o TransitGatewayPeeringOutput) TransitGatewayArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.TransitGatewayArn }).(pulumi.StringOutput)
}

// The ID of the TransitGatewayPeeringAttachment
func (o TransitGatewayPeeringOutput) TransitGatewayPeeringAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitGatewayPeering) pulumi.StringOutput { return v.TransitGatewayPeeringAttachmentId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitGatewayPeeringInput)(nil)).Elem(), &TransitGatewayPeering{})
	pulumi.RegisterOutputType(TransitGatewayPeeringOutput{})
}
