// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networkmanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::NetworkManager::Link type describes a link.
func LookupLink(ctx *pulumi.Context, args *LookupLinkArgs, opts ...pulumi.InvokeOption) (*LookupLinkResult, error) {
	var rv LookupLinkResult
	err := ctx.Invoke("aws-native:networkmanager:getLink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLinkArgs struct {
	// The ID of the global network.
	GlobalNetworkId string `pulumi:"globalNetworkId"`
	// The ID of the link.
	LinkId string `pulumi:"linkId"`
}

type LookupLinkResult struct {
	// The Bandwidth for the link.
	Bandwidth *LinkBandwidth `pulumi:"bandwidth"`
	// The description of the link.
	Description *string `pulumi:"description"`
	// The Amazon Resource Name (ARN) of the link.
	LinkArn *string `pulumi:"linkArn"`
	// The ID of the link.
	LinkId *string `pulumi:"linkId"`
	// The provider of the link.
	Provider *string `pulumi:"provider"`
	// The tags for the link.
	Tags []LinkTag `pulumi:"tags"`
	// The type of the link.
	Type *string `pulumi:"type"`
}

func LookupLinkOutput(ctx *pulumi.Context, args LookupLinkOutputArgs, opts ...pulumi.InvokeOption) LookupLinkResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLinkResult, error) {
			args := v.(LookupLinkArgs)
			r, err := LookupLink(ctx, &args, opts...)
			var s LookupLinkResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLinkResultOutput)
}

type LookupLinkOutputArgs struct {
	// The ID of the global network.
	GlobalNetworkId pulumi.StringInput `pulumi:"globalNetworkId"`
	// The ID of the link.
	LinkId pulumi.StringInput `pulumi:"linkId"`
}

func (LookupLinkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLinkArgs)(nil)).Elem()
}

type LookupLinkResultOutput struct{ *pulumi.OutputState }

func (LookupLinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLinkResult)(nil)).Elem()
}

func (o LookupLinkResultOutput) ToLookupLinkResultOutput() LookupLinkResultOutput {
	return o
}

func (o LookupLinkResultOutput) ToLookupLinkResultOutputWithContext(ctx context.Context) LookupLinkResultOutput {
	return o
}

// The Bandwidth for the link.
func (o LookupLinkResultOutput) Bandwidth() LinkBandwidthPtrOutput {
	return o.ApplyT(func(v LookupLinkResult) *LinkBandwidth { return v.Bandwidth }).(LinkBandwidthPtrOutput)
}

// The description of the link.
func (o LookupLinkResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLinkResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the link.
func (o LookupLinkResultOutput) LinkArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLinkResult) *string { return v.LinkArn }).(pulumi.StringPtrOutput)
}

// The ID of the link.
func (o LookupLinkResultOutput) LinkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLinkResult) *string { return v.LinkId }).(pulumi.StringPtrOutput)
}

// The provider of the link.
func (o LookupLinkResultOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLinkResult) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// The tags for the link.
func (o LookupLinkResultOutput) Tags() LinkTagArrayOutput {
	return o.ApplyT(func(v LookupLinkResult) []LinkTag { return v.Tags }).(LinkTagArrayOutput)
}

// The type of the link.
func (o LookupLinkResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLinkResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLinkResultOutput{})
}
