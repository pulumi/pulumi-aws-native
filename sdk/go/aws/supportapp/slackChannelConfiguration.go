// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package supportapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An AWS Support App resource that creates, updates, lists and deletes Slack channel configurations.
type SlackChannelConfiguration struct {
	pulumi.CustomResourceState

	// The channel ID in Slack, which identifies a channel within a workspace.
	ChannelId pulumi.StringOutput `pulumi:"channelId"`
	// The channel name in Slack.
	ChannelName pulumi.StringPtrOutput `pulumi:"channelName"`
	// The Amazon Resource Name (ARN) of an IAM role that grants the AWS Support App access to perform operations for AWS services.
	ChannelRoleArn pulumi.StringOutput `pulumi:"channelRoleArn"`
	// Whether to notify when a correspondence is added to a case.
	NotifyOnAddCorrespondenceToCase pulumi.BoolPtrOutput `pulumi:"notifyOnAddCorrespondenceToCase"`
	// The severity level of a support case that a customer wants to get notified for.
	NotifyOnCaseSeverity SlackChannelConfigurationNotifyOnCaseSeverityOutput `pulumi:"notifyOnCaseSeverity"`
	// Whether to notify when a case is created or reopened.
	NotifyOnCreateOrReopenCase pulumi.BoolPtrOutput `pulumi:"notifyOnCreateOrReopenCase"`
	// Whether to notify when a case is resolved.
	NotifyOnResolveCase pulumi.BoolPtrOutput `pulumi:"notifyOnResolveCase"`
	// The team ID in Slack, which uniquely identifies a workspace.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewSlackChannelConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSlackChannelConfiguration(ctx *pulumi.Context,
	name string, args *SlackChannelConfigurationArgs, opts ...pulumi.ResourceOption) (*SlackChannelConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelId == nil {
		return nil, errors.New("invalid value for required argument 'ChannelId'")
	}
	if args.ChannelRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ChannelRoleArn'")
	}
	if args.NotifyOnCaseSeverity == nil {
		return nil, errors.New("invalid value for required argument 'NotifyOnCaseSeverity'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"channelId",
		"teamId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SlackChannelConfiguration
	err := ctx.RegisterResource("aws-native:supportapp:SlackChannelConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlackChannelConfiguration gets an existing SlackChannelConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlackChannelConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlackChannelConfigurationState, opts ...pulumi.ResourceOption) (*SlackChannelConfiguration, error) {
	var resource SlackChannelConfiguration
	err := ctx.ReadResource("aws-native:supportapp:SlackChannelConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlackChannelConfiguration resources.
type slackChannelConfigurationState struct {
}

type SlackChannelConfigurationState struct {
}

func (SlackChannelConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*slackChannelConfigurationState)(nil)).Elem()
}

type slackChannelConfigurationArgs struct {
	// The channel ID in Slack, which identifies a channel within a workspace.
	ChannelId string `pulumi:"channelId"`
	// The channel name in Slack.
	ChannelName *string `pulumi:"channelName"`
	// The Amazon Resource Name (ARN) of an IAM role that grants the AWS Support App access to perform operations for AWS services.
	ChannelRoleArn string `pulumi:"channelRoleArn"`
	// Whether to notify when a correspondence is added to a case.
	NotifyOnAddCorrespondenceToCase *bool `pulumi:"notifyOnAddCorrespondenceToCase"`
	// The severity level of a support case that a customer wants to get notified for.
	NotifyOnCaseSeverity SlackChannelConfigurationNotifyOnCaseSeverity `pulumi:"notifyOnCaseSeverity"`
	// Whether to notify when a case is created or reopened.
	NotifyOnCreateOrReopenCase *bool `pulumi:"notifyOnCreateOrReopenCase"`
	// Whether to notify when a case is resolved.
	NotifyOnResolveCase *bool `pulumi:"notifyOnResolveCase"`
	// The team ID in Slack, which uniquely identifies a workspace.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a SlackChannelConfiguration resource.
type SlackChannelConfigurationArgs struct {
	// The channel ID in Slack, which identifies a channel within a workspace.
	ChannelId pulumi.StringInput
	// The channel name in Slack.
	ChannelName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of an IAM role that grants the AWS Support App access to perform operations for AWS services.
	ChannelRoleArn pulumi.StringInput
	// Whether to notify when a correspondence is added to a case.
	NotifyOnAddCorrespondenceToCase pulumi.BoolPtrInput
	// The severity level of a support case that a customer wants to get notified for.
	NotifyOnCaseSeverity SlackChannelConfigurationNotifyOnCaseSeverityInput
	// Whether to notify when a case is created or reopened.
	NotifyOnCreateOrReopenCase pulumi.BoolPtrInput
	// Whether to notify when a case is resolved.
	NotifyOnResolveCase pulumi.BoolPtrInput
	// The team ID in Slack, which uniquely identifies a workspace.
	TeamId pulumi.StringInput
}

func (SlackChannelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slackChannelConfigurationArgs)(nil)).Elem()
}

type SlackChannelConfigurationInput interface {
	pulumi.Input

	ToSlackChannelConfigurationOutput() SlackChannelConfigurationOutput
	ToSlackChannelConfigurationOutputWithContext(ctx context.Context) SlackChannelConfigurationOutput
}

func (*SlackChannelConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackChannelConfiguration)(nil)).Elem()
}

func (i *SlackChannelConfiguration) ToSlackChannelConfigurationOutput() SlackChannelConfigurationOutput {
	return i.ToSlackChannelConfigurationOutputWithContext(context.Background())
}

func (i *SlackChannelConfiguration) ToSlackChannelConfigurationOutputWithContext(ctx context.Context) SlackChannelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackChannelConfigurationOutput)
}

func (i *SlackChannelConfiguration) ToOutput(ctx context.Context) pulumix.Output[*SlackChannelConfiguration] {
	return pulumix.Output[*SlackChannelConfiguration]{
		OutputState: i.ToSlackChannelConfigurationOutputWithContext(ctx).OutputState,
	}
}

type SlackChannelConfigurationOutput struct{ *pulumi.OutputState }

func (SlackChannelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackChannelConfiguration)(nil)).Elem()
}

func (o SlackChannelConfigurationOutput) ToSlackChannelConfigurationOutput() SlackChannelConfigurationOutput {
	return o
}

func (o SlackChannelConfigurationOutput) ToSlackChannelConfigurationOutputWithContext(ctx context.Context) SlackChannelConfigurationOutput {
	return o
}

func (o SlackChannelConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*SlackChannelConfiguration] {
	return pulumix.Output[*SlackChannelConfiguration]{
		OutputState: o.OutputState,
	}
}

// The channel ID in Slack, which identifies a channel within a workspace.
func (o SlackChannelConfigurationOutput) ChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.ChannelId }).(pulumi.StringOutput)
}

// The channel name in Slack.
func (o SlackChannelConfigurationOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringPtrOutput { return v.ChannelName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of an IAM role that grants the AWS Support App access to perform operations for AWS services.
func (o SlackChannelConfigurationOutput) ChannelRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.ChannelRoleArn }).(pulumi.StringOutput)
}

// Whether to notify when a correspondence is added to a case.
func (o SlackChannelConfigurationOutput) NotifyOnAddCorrespondenceToCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.BoolPtrOutput { return v.NotifyOnAddCorrespondenceToCase }).(pulumi.BoolPtrOutput)
}

// The severity level of a support case that a customer wants to get notified for.
func (o SlackChannelConfigurationOutput) NotifyOnCaseSeverity() SlackChannelConfigurationNotifyOnCaseSeverityOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) SlackChannelConfigurationNotifyOnCaseSeverityOutput {
		return v.NotifyOnCaseSeverity
	}).(SlackChannelConfigurationNotifyOnCaseSeverityOutput)
}

// Whether to notify when a case is created or reopened.
func (o SlackChannelConfigurationOutput) NotifyOnCreateOrReopenCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.BoolPtrOutput { return v.NotifyOnCreateOrReopenCase }).(pulumi.BoolPtrOutput)
}

// Whether to notify when a case is resolved.
func (o SlackChannelConfigurationOutput) NotifyOnResolveCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.BoolPtrOutput { return v.NotifyOnResolveCase }).(pulumi.BoolPtrOutput)
}

// The team ID in Slack, which uniquely identifies a workspace.
func (o SlackChannelConfigurationOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackChannelConfiguration) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlackChannelConfigurationInput)(nil)).Elem(), &SlackChannelConfiguration{})
	pulumi.RegisterOutputType(SlackChannelConfigurationOutput{})
}
