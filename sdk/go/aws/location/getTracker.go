// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Location::Tracker Resource Type
func LookupTracker(ctx *pulumi.Context, args *LookupTrackerArgs, opts ...pulumi.InvokeOption) (*LookupTrackerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTrackerResult
	err := ctx.Invoke("aws-native:location:getTracker", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTrackerArgs struct {
	// The name for the tracker resource.
	//
	// Requirements:
	//
	// - Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).
	// - Must be a unique tracker resource name.
	// - No spaces allowed. For example, `ExampleTracker` .
	TrackerName string `pulumi:"trackerName"`
}

type LookupTrackerResult struct {
	// The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS .
	//
	// - Format example: `arn:aws:geo:region:account-id:tracker/ExampleTracker`
	Arn *string `pulumi:"arn"`
	// The timestamp for when the tracker resource was created in [ISO 8601](https://docs.aws.amazon.com/https://www.iso.org/iso-8601-date-and-time-format.html) format: `YYYY-MM-DDThh:mm:ss.sssZ` .
	CreateTime *string `pulumi:"createTime"`
	// An optional description for the tracker resource.
	Description                   *string `pulumi:"description"`
	EventBridgeEnabled            *bool   `pulumi:"eventBridgeEnabled"`
	KmsKeyEnableGeospatialQueries *bool   `pulumi:"kmsKeyEnableGeospatialQueries"`
	// Specifies the position filtering for the tracker resource.
	//
	// Valid values:
	//
	// - `TimeBased` - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID.
	// - `DistanceBased` - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this area are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map.
	// - `AccuracyBased` - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This can reduce the effects of GPS noise when displaying device trajectories on a map, and can help control your costs by reducing the number of geofence evaluations.
	//
	// This field is optional. If not specified, the default value is `TimeBased` .
	PositionFiltering *TrackerPositionFiltering `pulumi:"positionFiltering"`
	PricingPlan       *TrackerPricingPlan       `pulumi:"pricingPlan"`
	// This shape is deprecated since 2022-02-01: Deprecated. No longer allowed.
	PricingPlanDataSource *string `pulumi:"pricingPlanDataSource"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// Synonym for `Arn` . The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS .
	//
	// - Format example: `arn:aws:geo:region:account-id:tracker/ExampleTracker`
	TrackerArn *string `pulumi:"trackerArn"`
	// The timestamp for when the tracker resource was last updated in [ISO 8601](https://docs.aws.amazon.com/https://www.iso.org/iso-8601-date-and-time-format.html) format: `YYYY-MM-DDThh:mm:ss.sssZ` .
	UpdateTime *string `pulumi:"updateTime"`
}

func LookupTrackerOutput(ctx *pulumi.Context, args LookupTrackerOutputArgs, opts ...pulumi.InvokeOption) LookupTrackerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTrackerResultOutput, error) {
			args := v.(LookupTrackerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:location:getTracker", args, LookupTrackerResultOutput{}, options).(LookupTrackerResultOutput), nil
		}).(LookupTrackerResultOutput)
}

type LookupTrackerOutputArgs struct {
	// The name for the tracker resource.
	//
	// Requirements:
	//
	// - Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).
	// - Must be a unique tracker resource name.
	// - No spaces allowed. For example, `ExampleTracker` .
	TrackerName pulumi.StringInput `pulumi:"trackerName"`
}

func (LookupTrackerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackerArgs)(nil)).Elem()
}

type LookupTrackerResultOutput struct{ *pulumi.OutputState }

func (LookupTrackerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackerResult)(nil)).Elem()
}

func (o LookupTrackerResultOutput) ToLookupTrackerResultOutput() LookupTrackerResultOutput {
	return o
}

func (o LookupTrackerResultOutput) ToLookupTrackerResultOutputWithContext(ctx context.Context) LookupTrackerResultOutput {
	return o
}

// The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS .
//
// - Format example: `arn:aws:geo:region:account-id:tracker/ExampleTracker`
func (o LookupTrackerResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The timestamp for when the tracker resource was created in [ISO 8601](https://docs.aws.amazon.com/https://www.iso.org/iso-8601-date-and-time-format.html) format: `YYYY-MM-DDThh:mm:ss.sssZ` .
func (o LookupTrackerResultOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// An optional description for the tracker resource.
func (o LookupTrackerResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupTrackerResultOutput) EventBridgeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *bool { return v.EventBridgeEnabled }).(pulumi.BoolPtrOutput)
}

func (o LookupTrackerResultOutput) KmsKeyEnableGeospatialQueries() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *bool { return v.KmsKeyEnableGeospatialQueries }).(pulumi.BoolPtrOutput)
}

// Specifies the position filtering for the tracker resource.
//
// Valid values:
//
// - `TimeBased` - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID.
// - `DistanceBased` - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this area are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map.
// - `AccuracyBased` - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This can reduce the effects of GPS noise when displaying device trajectories on a map, and can help control your costs by reducing the number of geofence evaluations.
//
// This field is optional. If not specified, the default value is `TimeBased` .
func (o LookupTrackerResultOutput) PositionFiltering() TrackerPositionFilteringPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *TrackerPositionFiltering { return v.PositionFiltering }).(TrackerPositionFilteringPtrOutput)
}

func (o LookupTrackerResultOutput) PricingPlan() TrackerPricingPlanPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *TrackerPricingPlan { return v.PricingPlan }).(TrackerPricingPlanPtrOutput)
}

// This shape is deprecated since 2022-02-01: Deprecated. No longer allowed.
func (o LookupTrackerResultOutput) PricingPlanDataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *string { return v.PricingPlanDataSource }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupTrackerResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupTrackerResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// Synonym for `Arn` . The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all AWS .
//
// - Format example: `arn:aws:geo:region:account-id:tracker/ExampleTracker`
func (o LookupTrackerResultOutput) TrackerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *string { return v.TrackerArn }).(pulumi.StringPtrOutput)
}

// The timestamp for when the tracker resource was last updated in [ISO 8601](https://docs.aws.amazon.com/https://www.iso.org/iso-8601-date-and-time-format.html) format: `YYYY-MM-DDThh:mm:ss.sssZ` .
func (o LookupTrackerResultOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTrackerResult) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTrackerResultOutput{})
}
