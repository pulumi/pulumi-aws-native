// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApiKeyRestrictions struct {
	// A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.
	//
	// The following are valid values for the actions.
	//
	// - *Map actions*
	//
	// - `geo:GetMap*` - Allows all actions needed for map rendering.
	// - *Place actions*
	//
	// - `geo:SearchPlaceIndexForText` - Allows geocoding.
	// - `geo:SearchPlaceIndexForPosition` - Allows reverse geocoding.
	// - `geo:SearchPlaceIndexForSuggestions` - Allows generating suggestions from text.
	// - `geo:GetPlace` - Allows finding a place by place ID.
	// - *Route actions*
	//
	// - `geo:CalculateRoute` - Allows point to point routing.
	// - `geo:CalculateRouteMatrix` - Allows calculating a matrix of routes.
	//
	// > You must use these strings exactly. For example, to provide access to map rendering, the only valid action is `geo:GetMap*` as an input to the list. `["geo:GetMap*"]` is valid but `["geo:GetMapTile"]` is not. Similarly, you cannot use `["geo:SearchPlaceIndexFor*"]` - you must list each of the Place actions separately.
	AllowActions []string `pulumi:"allowActions"`
	// An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.
	//
	// Requirements:
	//
	// - Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list `$\-._+!*`(),;/?:@=&`
	// - May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.
	// - May contain wildcard characters question mark (?) and asterisk (*).
	//
	// Question mark (?) will replace any single character (including hexadecimal digits).
	//
	// Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).
	// - No spaces allowed. For example, `https://example.com` .
	AllowReferers []string `pulumi:"allowReferers"`
	// A list of allowed resource ARNs that a API key bearer can perform actions on.
	//
	// - The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.
	// - The resources must be in the same `partition` , `region` , and `account-id` as the key that is being created.
	// - Other than wildcards, you must include the full ARN, including the `arn` , `partition` , `service` , `region` , `account-id` and `resource-id` delimited by colons (:).
	// - No spaces allowed, even with wildcards. For example, `arn:aws:geo:region: *account-id* :map/ExampleMap*` .
	//
	// For more information about ARN format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) .
	AllowResources []string `pulumi:"allowResources"`
}

// ApiKeyRestrictionsInput is an input type that accepts ApiKeyRestrictionsArgs and ApiKeyRestrictionsOutput values.
// You can construct a concrete instance of `ApiKeyRestrictionsInput` via:
//
//	ApiKeyRestrictionsArgs{...}
type ApiKeyRestrictionsInput interface {
	pulumi.Input

	ToApiKeyRestrictionsOutput() ApiKeyRestrictionsOutput
	ToApiKeyRestrictionsOutputWithContext(context.Context) ApiKeyRestrictionsOutput
}

type ApiKeyRestrictionsArgs struct {
	// A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.
	//
	// The following are valid values for the actions.
	//
	// - *Map actions*
	//
	// - `geo:GetMap*` - Allows all actions needed for map rendering.
	// - *Place actions*
	//
	// - `geo:SearchPlaceIndexForText` - Allows geocoding.
	// - `geo:SearchPlaceIndexForPosition` - Allows reverse geocoding.
	// - `geo:SearchPlaceIndexForSuggestions` - Allows generating suggestions from text.
	// - `geo:GetPlace` - Allows finding a place by place ID.
	// - *Route actions*
	//
	// - `geo:CalculateRoute` - Allows point to point routing.
	// - `geo:CalculateRouteMatrix` - Allows calculating a matrix of routes.
	//
	// > You must use these strings exactly. For example, to provide access to map rendering, the only valid action is `geo:GetMap*` as an input to the list. `["geo:GetMap*"]` is valid but `["geo:GetMapTile"]` is not. Similarly, you cannot use `["geo:SearchPlaceIndexFor*"]` - you must list each of the Place actions separately.
	AllowActions pulumi.StringArrayInput `pulumi:"allowActions"`
	// An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.
	//
	// Requirements:
	//
	// - Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list `$\-._+!*`(),;/?:@=&`
	// - May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.
	// - May contain wildcard characters question mark (?) and asterisk (*).
	//
	// Question mark (?) will replace any single character (including hexadecimal digits).
	//
	// Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).
	// - No spaces allowed. For example, `https://example.com` .
	AllowReferers pulumi.StringArrayInput `pulumi:"allowReferers"`
	// A list of allowed resource ARNs that a API key bearer can perform actions on.
	//
	// - The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.
	// - The resources must be in the same `partition` , `region` , and `account-id` as the key that is being created.
	// - Other than wildcards, you must include the full ARN, including the `arn` , `partition` , `service` , `region` , `account-id` and `resource-id` delimited by colons (:).
	// - No spaces allowed, even with wildcards. For example, `arn:aws:geo:region: *account-id* :map/ExampleMap*` .
	//
	// For more information about ARN format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) .
	AllowResources pulumi.StringArrayInput `pulumi:"allowResources"`
}

func (ApiKeyRestrictionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyRestrictions)(nil)).Elem()
}

func (i ApiKeyRestrictionsArgs) ToApiKeyRestrictionsOutput() ApiKeyRestrictionsOutput {
	return i.ToApiKeyRestrictionsOutputWithContext(context.Background())
}

func (i ApiKeyRestrictionsArgs) ToApiKeyRestrictionsOutputWithContext(ctx context.Context) ApiKeyRestrictionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyRestrictionsOutput)
}

type ApiKeyRestrictionsOutput struct{ *pulumi.OutputState }

func (ApiKeyRestrictionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyRestrictions)(nil)).Elem()
}

func (o ApiKeyRestrictionsOutput) ToApiKeyRestrictionsOutput() ApiKeyRestrictionsOutput {
	return o
}

func (o ApiKeyRestrictionsOutput) ToApiKeyRestrictionsOutputWithContext(ctx context.Context) ApiKeyRestrictionsOutput {
	return o
}

// A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.
//
// The following are valid values for the actions.
//
// - *Map actions*
//
// - `geo:GetMap*` - Allows all actions needed for map rendering.
// - *Place actions*
//
// - `geo:SearchPlaceIndexForText` - Allows geocoding.
// - `geo:SearchPlaceIndexForPosition` - Allows reverse geocoding.
// - `geo:SearchPlaceIndexForSuggestions` - Allows generating suggestions from text.
// - `geo:GetPlace` - Allows finding a place by place ID.
// - *Route actions*
//
// - `geo:CalculateRoute` - Allows point to point routing.
// - `geo:CalculateRouteMatrix` - Allows calculating a matrix of routes.
//
// > You must use these strings exactly. For example, to provide access to map rendering, the only valid action is `geo:GetMap*` as an input to the list. `["geo:GetMap*"]` is valid but `["geo:GetMapTile"]` is not. Similarly, you cannot use `["geo:SearchPlaceIndexFor*"]` - you must list each of the Place actions separately.
func (o ApiKeyRestrictionsOutput) AllowActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyRestrictions) []string { return v.AllowActions }).(pulumi.StringArrayOutput)
}

// An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.
//
// Requirements:
//
// - Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list `$\-._+!*`(),;/?:@=&`
// - May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.
// - May contain wildcard characters question mark (?) and asterisk (*).
//
// Question mark (?) will replace any single character (including hexadecimal digits).
//
// Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).
// - No spaces allowed. For example, `https://example.com` .
func (o ApiKeyRestrictionsOutput) AllowReferers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyRestrictions) []string { return v.AllowReferers }).(pulumi.StringArrayOutput)
}

// A list of allowed resource ARNs that a API key bearer can perform actions on.
//
// - The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.
// - The resources must be in the same `partition` , `region` , and `account-id` as the key that is being created.
// - Other than wildcards, you must include the full ARN, including the `arn` , `partition` , `service` , `region` , `account-id` and `resource-id` delimited by colons (:).
// - No spaces allowed, even with wildcards. For example, `arn:aws:geo:region: *account-id* :map/ExampleMap*` .
//
// For more information about ARN format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) .
func (o ApiKeyRestrictionsOutput) AllowResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyRestrictions) []string { return v.AllowResources }).(pulumi.StringArrayOutput)
}

type ApiKeyRestrictionsPtrOutput struct{ *pulumi.OutputState }

func (ApiKeyRestrictionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyRestrictions)(nil)).Elem()
}

func (o ApiKeyRestrictionsPtrOutput) ToApiKeyRestrictionsPtrOutput() ApiKeyRestrictionsPtrOutput {
	return o
}

func (o ApiKeyRestrictionsPtrOutput) ToApiKeyRestrictionsPtrOutputWithContext(ctx context.Context) ApiKeyRestrictionsPtrOutput {
	return o
}

func (o ApiKeyRestrictionsPtrOutput) Elem() ApiKeyRestrictionsOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) ApiKeyRestrictions {
		if v != nil {
			return *v
		}
		var ret ApiKeyRestrictions
		return ret
	}).(ApiKeyRestrictionsOutput)
}

// A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.
//
// The following are valid values for the actions.
//
// - *Map actions*
//
// - `geo:GetMap*` - Allows all actions needed for map rendering.
// - *Place actions*
//
// - `geo:SearchPlaceIndexForText` - Allows geocoding.
// - `geo:SearchPlaceIndexForPosition` - Allows reverse geocoding.
// - `geo:SearchPlaceIndexForSuggestions` - Allows generating suggestions from text.
// - `geo:GetPlace` - Allows finding a place by place ID.
// - *Route actions*
//
// - `geo:CalculateRoute` - Allows point to point routing.
// - `geo:CalculateRouteMatrix` - Allows calculating a matrix of routes.
//
// > You must use these strings exactly. For example, to provide access to map rendering, the only valid action is `geo:GetMap*` as an input to the list. `["geo:GetMap*"]` is valid but `["geo:GetMapTile"]` is not. Similarly, you cannot use `["geo:SearchPlaceIndexFor*"]` - you must list each of the Place actions separately.
func (o ApiKeyRestrictionsPtrOutput) AllowActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) []string {
		if v == nil {
			return nil
		}
		return v.AllowActions
	}).(pulumi.StringArrayOutput)
}

// An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.
//
// Requirements:
//
// - Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list `$\-._+!*`(),;/?:@=&`
// - May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.
// - May contain wildcard characters question mark (?) and asterisk (*).
//
// Question mark (?) will replace any single character (including hexadecimal digits).
//
// Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).
// - No spaces allowed. For example, `https://example.com` .
func (o ApiKeyRestrictionsPtrOutput) AllowReferers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) []string {
		if v == nil {
			return nil
		}
		return v.AllowReferers
	}).(pulumi.StringArrayOutput)
}

// A list of allowed resource ARNs that a API key bearer can perform actions on.
//
// - The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.
// - The resources must be in the same `partition` , `region` , and `account-id` as the key that is being created.
// - Other than wildcards, you must include the full ARN, including the `arn` , `partition` , `service` , `region` , `account-id` and `resource-id` delimited by colons (:).
// - No spaces allowed, even with wildcards. For example, `arn:aws:geo:region: *account-id* :map/ExampleMap*` .
//
// For more information about ARN format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) .
func (o ApiKeyRestrictionsPtrOutput) AllowResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) []string {
		if v == nil {
			return nil
		}
		return v.AllowResources
	}).(pulumi.StringArrayOutput)
}

// A key-value pair to associate with a resource.
type ApiKeyTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type GeofenceCollectionTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type MapConfiguration struct {
	// Specifies the custom layers for the style. Leave unset to not enable any custom layer, or, for styles that support custom layers, you can enable layer(s), such as the `POI` layer for the VectorEsriNavigation style.
	//
	// > Currenlty only `VectorEsriNavigation` supports CustomLayers. For more information, see [Custom Layers](https://docs.aws.amazon.com//location/latest/developerguide/map-concepts.html#map-custom-layers) .
	CustomLayers []string `pulumi:"customLayers"`
	// Specifies the map political view selected from an available data provider.
	PoliticalView *string `pulumi:"politicalView"`
	// Specifies the map style selected from an available data provider.
	//
	// Valid [Esri map styles](https://docs.aws.amazon.com/location/previous/developerguide/esri.html) :
	//
	// - `VectorEsriDarkGrayCanvas` – The Esri Dark Gray Canvas map style. A vector basemap with a dark gray, neutral background with minimal colors, labels, and features that's designed to draw attention to your thematic content.
	// - `RasterEsriImagery` – The Esri Imagery map style. A raster basemap that provides one meter or better satellite and aerial imagery in many parts of the world and lower resolution satellite imagery worldwide.
	// - `VectorEsriLightGrayCanvas` – The Esri Light Gray Canvas map style, which provides a detailed vector basemap with a light gray, neutral background style with minimal colors, labels, and features that's designed to draw attention to your thematic content.
	// - `VectorEsriTopographic` – The Esri Light map style, which provides a detailed vector basemap with a classic Esri map style.
	// - `VectorEsriStreets` – The Esri Street Map style, which provides a detailed vector basemap for the world symbolized with a classic Esri street map style. The vector tile layer is similar in content and style to the World Street Map raster map.
	// - `VectorEsriNavigation` – The Esri Navigation map style, which provides a detailed basemap for the world symbolized with a custom navigation map style that's designed for use during the day in mobile devices.
	//
	// Valid [HERE Technologies map styles](https://docs.aws.amazon.com/location/previous/developerguide/HERE.html) :
	//
	// - `VectorHereContrast` – The HERE Contrast (Berlin) map style is a high contrast detailed base map of the world that blends 3D and 2D rendering.
	//
	// > The `VectorHereContrast` style has been renamed from `VectorHereBerlin` . `VectorHereBerlin` has been deprecated, but will continue to work in applications that use it.
	// - `VectorHereExplore` – A default HERE map style containing a neutral, global map and its features including roads, buildings, landmarks, and water features. It also now includes a fully designed map of Japan.
	// - `VectorHereExploreTruck` – A global map containing truck restrictions and attributes (e.g. width / height / HAZMAT) symbolized with highlighted segments and icons on top of HERE Explore to support use cases within transport and logistics.
	// - `RasterHereExploreSatellite` – A global map containing high resolution satellite imagery.
	// - `HybridHereExploreSatellite` – A global map displaying the road network, street names, and city labels over satellite imagery. This style will automatically retrieve both raster and vector tiles, and your charges will be based on total tiles retrieved.
	//
	// > Hybrid styles use both vector and raster tiles when rendering the map that you see. This means that more tiles are retrieved than when using either vector or raster tiles alone. Your charges will include all tiles retrieved.
	//
	// Valid [GrabMaps map styles](https://docs.aws.amazon.com/location/previous/developerguide/grab.html) :
	//
	// - `VectorGrabStandardLight` – The Grab Standard Light map style provides a basemap with detailed land use coloring, area names, roads, landmarks, and points of interest covering Southeast Asia.
	// - `VectorGrabStandardDark` – The Grab Standard Dark map style provides a dark variation of the standard basemap covering Southeast Asia.
	//
	// > Grab provides maps only for countries in Southeast Asia, and is only available in the Asia Pacific (Singapore) Region ( `ap-southeast-1` ). For more information, see [GrabMaps countries and area covered](https://docs.aws.amazon.com/location/previous/developerguide/grab.html#grab-coverage-area) .
	//
	// Valid [Open Data map styles](https://docs.aws.amazon.com/location/previous/developerguide/open-data.html) :
	//
	// - `VectorOpenDataStandardLight` – The Open Data Standard Light map style provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
	// - `VectorOpenDataStandardDark` – Open Data Standard Dark is a dark-themed map style that provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
	// - `VectorOpenDataVisualizationLight` – The Open Data Visualization Light map style is a light-themed style with muted colors and fewer features that aids in understanding overlaid data.
	// - `VectorOpenDataVisualizationDark` – The Open Data Visualization Dark map style is a dark-themed style with muted colors and fewer features that aids in understanding overlaid data.
	Style string `pulumi:"style"`
}

// MapConfigurationInput is an input type that accepts MapConfigurationArgs and MapConfigurationOutput values.
// You can construct a concrete instance of `MapConfigurationInput` via:
//
//	MapConfigurationArgs{...}
type MapConfigurationInput interface {
	pulumi.Input

	ToMapConfigurationOutput() MapConfigurationOutput
	ToMapConfigurationOutputWithContext(context.Context) MapConfigurationOutput
}

type MapConfigurationArgs struct {
	// Specifies the custom layers for the style. Leave unset to not enable any custom layer, or, for styles that support custom layers, you can enable layer(s), such as the `POI` layer for the VectorEsriNavigation style.
	//
	// > Currenlty only `VectorEsriNavigation` supports CustomLayers. For more information, see [Custom Layers](https://docs.aws.amazon.com//location/latest/developerguide/map-concepts.html#map-custom-layers) .
	CustomLayers pulumi.StringArrayInput `pulumi:"customLayers"`
	// Specifies the map political view selected from an available data provider.
	PoliticalView pulumi.StringPtrInput `pulumi:"politicalView"`
	// Specifies the map style selected from an available data provider.
	//
	// Valid [Esri map styles](https://docs.aws.amazon.com/location/previous/developerguide/esri.html) :
	//
	// - `VectorEsriDarkGrayCanvas` – The Esri Dark Gray Canvas map style. A vector basemap with a dark gray, neutral background with minimal colors, labels, and features that's designed to draw attention to your thematic content.
	// - `RasterEsriImagery` – The Esri Imagery map style. A raster basemap that provides one meter or better satellite and aerial imagery in many parts of the world and lower resolution satellite imagery worldwide.
	// - `VectorEsriLightGrayCanvas` – The Esri Light Gray Canvas map style, which provides a detailed vector basemap with a light gray, neutral background style with minimal colors, labels, and features that's designed to draw attention to your thematic content.
	// - `VectorEsriTopographic` – The Esri Light map style, which provides a detailed vector basemap with a classic Esri map style.
	// - `VectorEsriStreets` – The Esri Street Map style, which provides a detailed vector basemap for the world symbolized with a classic Esri street map style. The vector tile layer is similar in content and style to the World Street Map raster map.
	// - `VectorEsriNavigation` – The Esri Navigation map style, which provides a detailed basemap for the world symbolized with a custom navigation map style that's designed for use during the day in mobile devices.
	//
	// Valid [HERE Technologies map styles](https://docs.aws.amazon.com/location/previous/developerguide/HERE.html) :
	//
	// - `VectorHereContrast` – The HERE Contrast (Berlin) map style is a high contrast detailed base map of the world that blends 3D and 2D rendering.
	//
	// > The `VectorHereContrast` style has been renamed from `VectorHereBerlin` . `VectorHereBerlin` has been deprecated, but will continue to work in applications that use it.
	// - `VectorHereExplore` – A default HERE map style containing a neutral, global map and its features including roads, buildings, landmarks, and water features. It also now includes a fully designed map of Japan.
	// - `VectorHereExploreTruck` – A global map containing truck restrictions and attributes (e.g. width / height / HAZMAT) symbolized with highlighted segments and icons on top of HERE Explore to support use cases within transport and logistics.
	// - `RasterHereExploreSatellite` – A global map containing high resolution satellite imagery.
	// - `HybridHereExploreSatellite` – A global map displaying the road network, street names, and city labels over satellite imagery. This style will automatically retrieve both raster and vector tiles, and your charges will be based on total tiles retrieved.
	//
	// > Hybrid styles use both vector and raster tiles when rendering the map that you see. This means that more tiles are retrieved than when using either vector or raster tiles alone. Your charges will include all tiles retrieved.
	//
	// Valid [GrabMaps map styles](https://docs.aws.amazon.com/location/previous/developerguide/grab.html) :
	//
	// - `VectorGrabStandardLight` – The Grab Standard Light map style provides a basemap with detailed land use coloring, area names, roads, landmarks, and points of interest covering Southeast Asia.
	// - `VectorGrabStandardDark` – The Grab Standard Dark map style provides a dark variation of the standard basemap covering Southeast Asia.
	//
	// > Grab provides maps only for countries in Southeast Asia, and is only available in the Asia Pacific (Singapore) Region ( `ap-southeast-1` ). For more information, see [GrabMaps countries and area covered](https://docs.aws.amazon.com/location/previous/developerguide/grab.html#grab-coverage-area) .
	//
	// Valid [Open Data map styles](https://docs.aws.amazon.com/location/previous/developerguide/open-data.html) :
	//
	// - `VectorOpenDataStandardLight` – The Open Data Standard Light map style provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
	// - `VectorOpenDataStandardDark` – Open Data Standard Dark is a dark-themed map style that provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
	// - `VectorOpenDataVisualizationLight` – The Open Data Visualization Light map style is a light-themed style with muted colors and fewer features that aids in understanding overlaid data.
	// - `VectorOpenDataVisualizationDark` – The Open Data Visualization Dark map style is a dark-themed style with muted colors and fewer features that aids in understanding overlaid data.
	Style pulumi.StringInput `pulumi:"style"`
}

func (MapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapConfiguration)(nil)).Elem()
}

func (i MapConfigurationArgs) ToMapConfigurationOutput() MapConfigurationOutput {
	return i.ToMapConfigurationOutputWithContext(context.Background())
}

func (i MapConfigurationArgs) ToMapConfigurationOutputWithContext(ctx context.Context) MapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapConfigurationOutput)
}

type MapConfigurationOutput struct{ *pulumi.OutputState }

func (MapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapConfiguration)(nil)).Elem()
}

func (o MapConfigurationOutput) ToMapConfigurationOutput() MapConfigurationOutput {
	return o
}

func (o MapConfigurationOutput) ToMapConfigurationOutputWithContext(ctx context.Context) MapConfigurationOutput {
	return o
}

// Specifies the custom layers for the style. Leave unset to not enable any custom layer, or, for styles that support custom layers, you can enable layer(s), such as the `POI` layer for the VectorEsriNavigation style.
//
// > Currenlty only `VectorEsriNavigation` supports CustomLayers. For more information, see [Custom Layers](https://docs.aws.amazon.com//location/latest/developerguide/map-concepts.html#map-custom-layers) .
func (o MapConfigurationOutput) CustomLayers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MapConfiguration) []string { return v.CustomLayers }).(pulumi.StringArrayOutput)
}

// Specifies the map political view selected from an available data provider.
func (o MapConfigurationOutput) PoliticalView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapConfiguration) *string { return v.PoliticalView }).(pulumi.StringPtrOutput)
}

// Specifies the map style selected from an available data provider.
//
// Valid [Esri map styles](https://docs.aws.amazon.com/location/previous/developerguide/esri.html) :
//
// - `VectorEsriDarkGrayCanvas` – The Esri Dark Gray Canvas map style. A vector basemap with a dark gray, neutral background with minimal colors, labels, and features that's designed to draw attention to your thematic content.
// - `RasterEsriImagery` – The Esri Imagery map style. A raster basemap that provides one meter or better satellite and aerial imagery in many parts of the world and lower resolution satellite imagery worldwide.
// - `VectorEsriLightGrayCanvas` – The Esri Light Gray Canvas map style, which provides a detailed vector basemap with a light gray, neutral background style with minimal colors, labels, and features that's designed to draw attention to your thematic content.
// - `VectorEsriTopographic` – The Esri Light map style, which provides a detailed vector basemap with a classic Esri map style.
// - `VectorEsriStreets` – The Esri Street Map style, which provides a detailed vector basemap for the world symbolized with a classic Esri street map style. The vector tile layer is similar in content and style to the World Street Map raster map.
// - `VectorEsriNavigation` – The Esri Navigation map style, which provides a detailed basemap for the world symbolized with a custom navigation map style that's designed for use during the day in mobile devices.
//
// Valid [HERE Technologies map styles](https://docs.aws.amazon.com/location/previous/developerguide/HERE.html) :
//
// - `VectorHereContrast` – The HERE Contrast (Berlin) map style is a high contrast detailed base map of the world that blends 3D and 2D rendering.
//
// > The `VectorHereContrast` style has been renamed from `VectorHereBerlin` . `VectorHereBerlin` has been deprecated, but will continue to work in applications that use it.
// - `VectorHereExplore` – A default HERE map style containing a neutral, global map and its features including roads, buildings, landmarks, and water features. It also now includes a fully designed map of Japan.
// - `VectorHereExploreTruck` – A global map containing truck restrictions and attributes (e.g. width / height / HAZMAT) symbolized with highlighted segments and icons on top of HERE Explore to support use cases within transport and logistics.
// - `RasterHereExploreSatellite` – A global map containing high resolution satellite imagery.
// - `HybridHereExploreSatellite` – A global map displaying the road network, street names, and city labels over satellite imagery. This style will automatically retrieve both raster and vector tiles, and your charges will be based on total tiles retrieved.
//
// > Hybrid styles use both vector and raster tiles when rendering the map that you see. This means that more tiles are retrieved than when using either vector or raster tiles alone. Your charges will include all tiles retrieved.
//
// Valid [GrabMaps map styles](https://docs.aws.amazon.com/location/previous/developerguide/grab.html) :
//
// - `VectorGrabStandardLight` – The Grab Standard Light map style provides a basemap with detailed land use coloring, area names, roads, landmarks, and points of interest covering Southeast Asia.
// - `VectorGrabStandardDark` – The Grab Standard Dark map style provides a dark variation of the standard basemap covering Southeast Asia.
//
// > Grab provides maps only for countries in Southeast Asia, and is only available in the Asia Pacific (Singapore) Region ( `ap-southeast-1` ). For more information, see [GrabMaps countries and area covered](https://docs.aws.amazon.com/location/previous/developerguide/grab.html#grab-coverage-area) .
//
// Valid [Open Data map styles](https://docs.aws.amazon.com/location/previous/developerguide/open-data.html) :
//
// - `VectorOpenDataStandardLight` – The Open Data Standard Light map style provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
// - `VectorOpenDataStandardDark` – Open Data Standard Dark is a dark-themed map style that provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
// - `VectorOpenDataVisualizationLight` – The Open Data Visualization Light map style is a light-themed style with muted colors and fewer features that aids in understanding overlaid data.
// - `VectorOpenDataVisualizationDark` – The Open Data Visualization Dark map style is a dark-themed style with muted colors and fewer features that aids in understanding overlaid data.
func (o MapConfigurationOutput) Style() pulumi.StringOutput {
	return o.ApplyT(func(v MapConfiguration) string { return v.Style }).(pulumi.StringOutput)
}

// A key-value pair to associate with a resource.
type MapTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type PlaceIndexDataSourceConfiguration struct {
	// Specifies how the results of an operation will be stored by the caller.
	//
	// Valid values include:
	//
	// - `SingleUse` specifies that the results won't be stored.
	// - `Storage` specifies that the result can be cached or stored in a database.
	//
	// Default value: `SingleUse`
	IntendedUse *PlaceIndexIntendedUse `pulumi:"intendedUse"`
}

// PlaceIndexDataSourceConfigurationInput is an input type that accepts PlaceIndexDataSourceConfigurationArgs and PlaceIndexDataSourceConfigurationOutput values.
// You can construct a concrete instance of `PlaceIndexDataSourceConfigurationInput` via:
//
//	PlaceIndexDataSourceConfigurationArgs{...}
type PlaceIndexDataSourceConfigurationInput interface {
	pulumi.Input

	ToPlaceIndexDataSourceConfigurationOutput() PlaceIndexDataSourceConfigurationOutput
	ToPlaceIndexDataSourceConfigurationOutputWithContext(context.Context) PlaceIndexDataSourceConfigurationOutput
}

type PlaceIndexDataSourceConfigurationArgs struct {
	// Specifies how the results of an operation will be stored by the caller.
	//
	// Valid values include:
	//
	// - `SingleUse` specifies that the results won't be stored.
	// - `Storage` specifies that the result can be cached or stored in a database.
	//
	// Default value: `SingleUse`
	IntendedUse PlaceIndexIntendedUsePtrInput `pulumi:"intendedUse"`
}

func (PlaceIndexDataSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationOutput() PlaceIndexDataSourceConfigurationOutput {
	return i.ToPlaceIndexDataSourceConfigurationOutputWithContext(context.Background())
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexDataSourceConfigurationOutput)
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return i.ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexDataSourceConfigurationOutput).ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx)
}

// PlaceIndexDataSourceConfigurationPtrInput is an input type that accepts PlaceIndexDataSourceConfigurationArgs, PlaceIndexDataSourceConfigurationPtr and PlaceIndexDataSourceConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaceIndexDataSourceConfigurationPtrInput` via:
//
//	        PlaceIndexDataSourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type PlaceIndexDataSourceConfigurationPtrInput interface {
	pulumi.Input

	ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput
	ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Context) PlaceIndexDataSourceConfigurationPtrOutput
}

type placeIndexDataSourceConfigurationPtrType PlaceIndexDataSourceConfigurationArgs

func PlaceIndexDataSourceConfigurationPtr(v *PlaceIndexDataSourceConfigurationArgs) PlaceIndexDataSourceConfigurationPtrInput {
	return (*placeIndexDataSourceConfigurationPtrType)(v)
}

func (*placeIndexDataSourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (i *placeIndexDataSourceConfigurationPtrType) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return i.ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *placeIndexDataSourceConfigurationPtrType) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexDataSourceConfigurationPtrOutput)
}

type PlaceIndexDataSourceConfigurationOutput struct{ *pulumi.OutputState }

func (PlaceIndexDataSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationOutput() PlaceIndexDataSourceConfigurationOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return o.ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaceIndexDataSourceConfiguration) *PlaceIndexDataSourceConfiguration {
		return &v
	}).(PlaceIndexDataSourceConfigurationPtrOutput)
}

// Specifies how the results of an operation will be stored by the caller.
//
// Valid values include:
//
// - `SingleUse` specifies that the results won't be stored.
// - `Storage` specifies that the result can be cached or stored in a database.
//
// Default value: `SingleUse`
func (o PlaceIndexDataSourceConfigurationOutput) IntendedUse() PlaceIndexIntendedUsePtrOutput {
	return o.ApplyT(func(v PlaceIndexDataSourceConfiguration) *PlaceIndexIntendedUse { return v.IntendedUse }).(PlaceIndexIntendedUsePtrOutput)
}

type PlaceIndexDataSourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaceIndexDataSourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (o PlaceIndexDataSourceConfigurationPtrOutput) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationPtrOutput) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationPtrOutput) Elem() PlaceIndexDataSourceConfigurationOutput {
	return o.ApplyT(func(v *PlaceIndexDataSourceConfiguration) PlaceIndexDataSourceConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaceIndexDataSourceConfiguration
		return ret
	}).(PlaceIndexDataSourceConfigurationOutput)
}

// Specifies how the results of an operation will be stored by the caller.
//
// Valid values include:
//
// - `SingleUse` specifies that the results won't be stored.
// - `Storage` specifies that the result can be cached or stored in a database.
//
// Default value: `SingleUse`
func (o PlaceIndexDataSourceConfigurationPtrOutput) IntendedUse() PlaceIndexIntendedUsePtrOutput {
	return o.ApplyT(func(v *PlaceIndexDataSourceConfiguration) *PlaceIndexIntendedUse {
		if v == nil {
			return nil
		}
		return v.IntendedUse
	}).(PlaceIndexIntendedUsePtrOutput)
}

// A key-value pair to associate with a resource.
type PlaceIndexTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type RouteCalculatorTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type TrackerTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyRestrictionsInput)(nil)).Elem(), ApiKeyRestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapConfigurationInput)(nil)).Elem(), MapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexDataSourceConfigurationInput)(nil)).Elem(), PlaceIndexDataSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexDataSourceConfigurationPtrInput)(nil)).Elem(), PlaceIndexDataSourceConfigurationArgs{})
	pulumi.RegisterOutputType(ApiKeyRestrictionsOutput{})
	pulumi.RegisterOutputType(ApiKeyRestrictionsPtrOutput{})
	pulumi.RegisterOutputType(MapConfigurationOutput{})
	pulumi.RegisterOutputType(PlaceIndexDataSourceConfigurationOutput{})
	pulumi.RegisterOutputType(PlaceIndexDataSourceConfigurationPtrOutput{})
}
