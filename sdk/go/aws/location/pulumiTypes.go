// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApiKeyRestrictions struct {
	AllowActions   []string `pulumi:"allowActions"`
	AllowReferers  []string `pulumi:"allowReferers"`
	AllowResources []string `pulumi:"allowResources"`
}

// ApiKeyRestrictionsInput is an input type that accepts ApiKeyRestrictionsArgs and ApiKeyRestrictionsOutput values.
// You can construct a concrete instance of `ApiKeyRestrictionsInput` via:
//
//	ApiKeyRestrictionsArgs{...}
type ApiKeyRestrictionsInput interface {
	pulumi.Input

	ToApiKeyRestrictionsOutput() ApiKeyRestrictionsOutput
	ToApiKeyRestrictionsOutputWithContext(context.Context) ApiKeyRestrictionsOutput
}

type ApiKeyRestrictionsArgs struct {
	AllowActions   pulumi.StringArrayInput `pulumi:"allowActions"`
	AllowReferers  pulumi.StringArrayInput `pulumi:"allowReferers"`
	AllowResources pulumi.StringArrayInput `pulumi:"allowResources"`
}

func (ApiKeyRestrictionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyRestrictions)(nil)).Elem()
}

func (i ApiKeyRestrictionsArgs) ToApiKeyRestrictionsOutput() ApiKeyRestrictionsOutput {
	return i.ToApiKeyRestrictionsOutputWithContext(context.Background())
}

func (i ApiKeyRestrictionsArgs) ToApiKeyRestrictionsOutputWithContext(ctx context.Context) ApiKeyRestrictionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyRestrictionsOutput)
}

type ApiKeyRestrictionsOutput struct{ *pulumi.OutputState }

func (ApiKeyRestrictionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyRestrictions)(nil)).Elem()
}

func (o ApiKeyRestrictionsOutput) ToApiKeyRestrictionsOutput() ApiKeyRestrictionsOutput {
	return o
}

func (o ApiKeyRestrictionsOutput) ToApiKeyRestrictionsOutputWithContext(ctx context.Context) ApiKeyRestrictionsOutput {
	return o
}

func (o ApiKeyRestrictionsOutput) AllowActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyRestrictions) []string { return v.AllowActions }).(pulumi.StringArrayOutput)
}

func (o ApiKeyRestrictionsOutput) AllowReferers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyRestrictions) []string { return v.AllowReferers }).(pulumi.StringArrayOutput)
}

func (o ApiKeyRestrictionsOutput) AllowResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyRestrictions) []string { return v.AllowResources }).(pulumi.StringArrayOutput)
}

type ApiKeyRestrictionsPtrOutput struct{ *pulumi.OutputState }

func (ApiKeyRestrictionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyRestrictions)(nil)).Elem()
}

func (o ApiKeyRestrictionsPtrOutput) ToApiKeyRestrictionsPtrOutput() ApiKeyRestrictionsPtrOutput {
	return o
}

func (o ApiKeyRestrictionsPtrOutput) ToApiKeyRestrictionsPtrOutputWithContext(ctx context.Context) ApiKeyRestrictionsPtrOutput {
	return o
}

func (o ApiKeyRestrictionsPtrOutput) Elem() ApiKeyRestrictionsOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) ApiKeyRestrictions {
		if v != nil {
			return *v
		}
		var ret ApiKeyRestrictions
		return ret
	}).(ApiKeyRestrictionsOutput)
}

func (o ApiKeyRestrictionsPtrOutput) AllowActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) []string {
		if v == nil {
			return nil
		}
		return v.AllowActions
	}).(pulumi.StringArrayOutput)
}

func (o ApiKeyRestrictionsPtrOutput) AllowReferers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) []string {
		if v == nil {
			return nil
		}
		return v.AllowReferers
	}).(pulumi.StringArrayOutput)
}

func (o ApiKeyRestrictionsPtrOutput) AllowResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiKeyRestrictions) []string {
		if v == nil {
			return nil
		}
		return v.AllowResources
	}).(pulumi.StringArrayOutput)
}

// A key-value pair to associate with a resource.
type ApiKeyTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ApiKeyTagInput is an input type that accepts ApiKeyTagArgs and ApiKeyTagOutput values.
// You can construct a concrete instance of `ApiKeyTagInput` via:
//
//	ApiKeyTagArgs{...}
type ApiKeyTagInput interface {
	pulumi.Input

	ToApiKeyTagOutput() ApiKeyTagOutput
	ToApiKeyTagOutputWithContext(context.Context) ApiKeyTagOutput
}

// A key-value pair to associate with a resource.
type ApiKeyTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiKeyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyTag)(nil)).Elem()
}

func (i ApiKeyTagArgs) ToApiKeyTagOutput() ApiKeyTagOutput {
	return i.ToApiKeyTagOutputWithContext(context.Background())
}

func (i ApiKeyTagArgs) ToApiKeyTagOutputWithContext(ctx context.Context) ApiKeyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyTagOutput)
}

// ApiKeyTagArrayInput is an input type that accepts ApiKeyTagArray and ApiKeyTagArrayOutput values.
// You can construct a concrete instance of `ApiKeyTagArrayInput` via:
//
//	ApiKeyTagArray{ ApiKeyTagArgs{...} }
type ApiKeyTagArrayInput interface {
	pulumi.Input

	ToApiKeyTagArrayOutput() ApiKeyTagArrayOutput
	ToApiKeyTagArrayOutputWithContext(context.Context) ApiKeyTagArrayOutput
}

type ApiKeyTagArray []ApiKeyTagInput

func (ApiKeyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiKeyTag)(nil)).Elem()
}

func (i ApiKeyTagArray) ToApiKeyTagArrayOutput() ApiKeyTagArrayOutput {
	return i.ToApiKeyTagArrayOutputWithContext(context.Background())
}

func (i ApiKeyTagArray) ToApiKeyTagArrayOutputWithContext(ctx context.Context) ApiKeyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ApiKeyTagOutput struct{ *pulumi.OutputState }

func (ApiKeyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyTag)(nil)).Elem()
}

func (o ApiKeyTagOutput) ToApiKeyTagOutput() ApiKeyTagOutput {
	return o
}

func (o ApiKeyTagOutput) ToApiKeyTagOutputWithContext(ctx context.Context) ApiKeyTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ApiKeyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ApiKeyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyTag) string { return v.Value }).(pulumi.StringOutput)
}

type ApiKeyTagArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiKeyTag)(nil)).Elem()
}

func (o ApiKeyTagArrayOutput) ToApiKeyTagArrayOutput() ApiKeyTagArrayOutput {
	return o
}

func (o ApiKeyTagArrayOutput) ToApiKeyTagArrayOutputWithContext(ctx context.Context) ApiKeyTagArrayOutput {
	return o
}

func (o ApiKeyTagArrayOutput) Index(i pulumi.IntInput) ApiKeyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiKeyTag {
		return vs[0].([]ApiKeyTag)[vs[1].(int)]
	}).(ApiKeyTagOutput)
}

// A key-value pair to associate with a resource.
type GeofenceCollectionTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// GeofenceCollectionTagInput is an input type that accepts GeofenceCollectionTagArgs and GeofenceCollectionTagOutput values.
// You can construct a concrete instance of `GeofenceCollectionTagInput` via:
//
//	GeofenceCollectionTagArgs{...}
type GeofenceCollectionTagInput interface {
	pulumi.Input

	ToGeofenceCollectionTagOutput() GeofenceCollectionTagOutput
	ToGeofenceCollectionTagOutputWithContext(context.Context) GeofenceCollectionTagOutput
}

// A key-value pair to associate with a resource.
type GeofenceCollectionTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GeofenceCollectionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeofenceCollectionTag)(nil)).Elem()
}

func (i GeofenceCollectionTagArgs) ToGeofenceCollectionTagOutput() GeofenceCollectionTagOutput {
	return i.ToGeofenceCollectionTagOutputWithContext(context.Background())
}

func (i GeofenceCollectionTagArgs) ToGeofenceCollectionTagOutputWithContext(ctx context.Context) GeofenceCollectionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeofenceCollectionTagOutput)
}

// GeofenceCollectionTagArrayInput is an input type that accepts GeofenceCollectionTagArray and GeofenceCollectionTagArrayOutput values.
// You can construct a concrete instance of `GeofenceCollectionTagArrayInput` via:
//
//	GeofenceCollectionTagArray{ GeofenceCollectionTagArgs{...} }
type GeofenceCollectionTagArrayInput interface {
	pulumi.Input

	ToGeofenceCollectionTagArrayOutput() GeofenceCollectionTagArrayOutput
	ToGeofenceCollectionTagArrayOutputWithContext(context.Context) GeofenceCollectionTagArrayOutput
}

type GeofenceCollectionTagArray []GeofenceCollectionTagInput

func (GeofenceCollectionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeofenceCollectionTag)(nil)).Elem()
}

func (i GeofenceCollectionTagArray) ToGeofenceCollectionTagArrayOutput() GeofenceCollectionTagArrayOutput {
	return i.ToGeofenceCollectionTagArrayOutputWithContext(context.Background())
}

func (i GeofenceCollectionTagArray) ToGeofenceCollectionTagArrayOutputWithContext(ctx context.Context) GeofenceCollectionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeofenceCollectionTagArrayOutput)
}

// A key-value pair to associate with a resource.
type GeofenceCollectionTagOutput struct{ *pulumi.OutputState }

func (GeofenceCollectionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeofenceCollectionTag)(nil)).Elem()
}

func (o GeofenceCollectionTagOutput) ToGeofenceCollectionTagOutput() GeofenceCollectionTagOutput {
	return o
}

func (o GeofenceCollectionTagOutput) ToGeofenceCollectionTagOutputWithContext(ctx context.Context) GeofenceCollectionTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o GeofenceCollectionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GeofenceCollectionTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o GeofenceCollectionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GeofenceCollectionTag) string { return v.Value }).(pulumi.StringOutput)
}

type GeofenceCollectionTagArrayOutput struct{ *pulumi.OutputState }

func (GeofenceCollectionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeofenceCollectionTag)(nil)).Elem()
}

func (o GeofenceCollectionTagArrayOutput) ToGeofenceCollectionTagArrayOutput() GeofenceCollectionTagArrayOutput {
	return o
}

func (o GeofenceCollectionTagArrayOutput) ToGeofenceCollectionTagArrayOutputWithContext(ctx context.Context) GeofenceCollectionTagArrayOutput {
	return o
}

func (o GeofenceCollectionTagArrayOutput) Index(i pulumi.IntInput) GeofenceCollectionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeofenceCollectionTag {
		return vs[0].([]GeofenceCollectionTag)[vs[1].(int)]
	}).(GeofenceCollectionTagOutput)
}

type MapConfiguration struct {
	CustomLayers  []string `pulumi:"customLayers"`
	PoliticalView *string  `pulumi:"politicalView"`
	Style         string   `pulumi:"style"`
}

// MapConfigurationInput is an input type that accepts MapConfigurationArgs and MapConfigurationOutput values.
// You can construct a concrete instance of `MapConfigurationInput` via:
//
//	MapConfigurationArgs{...}
type MapConfigurationInput interface {
	pulumi.Input

	ToMapConfigurationOutput() MapConfigurationOutput
	ToMapConfigurationOutputWithContext(context.Context) MapConfigurationOutput
}

type MapConfigurationArgs struct {
	CustomLayers  pulumi.StringArrayInput `pulumi:"customLayers"`
	PoliticalView pulumi.StringPtrInput   `pulumi:"politicalView"`
	Style         pulumi.StringInput      `pulumi:"style"`
}

func (MapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapConfiguration)(nil)).Elem()
}

func (i MapConfigurationArgs) ToMapConfigurationOutput() MapConfigurationOutput {
	return i.ToMapConfigurationOutputWithContext(context.Background())
}

func (i MapConfigurationArgs) ToMapConfigurationOutputWithContext(ctx context.Context) MapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapConfigurationOutput)
}

type MapConfigurationOutput struct{ *pulumi.OutputState }

func (MapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapConfiguration)(nil)).Elem()
}

func (o MapConfigurationOutput) ToMapConfigurationOutput() MapConfigurationOutput {
	return o
}

func (o MapConfigurationOutput) ToMapConfigurationOutputWithContext(ctx context.Context) MapConfigurationOutput {
	return o
}

func (o MapConfigurationOutput) CustomLayers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MapConfiguration) []string { return v.CustomLayers }).(pulumi.StringArrayOutput)
}

func (o MapConfigurationOutput) PoliticalView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapConfiguration) *string { return v.PoliticalView }).(pulumi.StringPtrOutput)
}

func (o MapConfigurationOutput) Style() pulumi.StringOutput {
	return o.ApplyT(func(v MapConfiguration) string { return v.Style }).(pulumi.StringOutput)
}

// A key-value pair to associate with a resource.
type MapTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// MapTagInput is an input type that accepts MapTagArgs and MapTagOutput values.
// You can construct a concrete instance of `MapTagInput` via:
//
//	MapTagArgs{...}
type MapTagInput interface {
	pulumi.Input

	ToMapTagOutput() MapTagOutput
	ToMapTagOutputWithContext(context.Context) MapTagOutput
}

// A key-value pair to associate with a resource.
type MapTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MapTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapTag)(nil)).Elem()
}

func (i MapTagArgs) ToMapTagOutput() MapTagOutput {
	return i.ToMapTagOutputWithContext(context.Background())
}

func (i MapTagArgs) ToMapTagOutputWithContext(ctx context.Context) MapTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapTagOutput)
}

// MapTagArrayInput is an input type that accepts MapTagArray and MapTagArrayOutput values.
// You can construct a concrete instance of `MapTagArrayInput` via:
//
//	MapTagArray{ MapTagArgs{...} }
type MapTagArrayInput interface {
	pulumi.Input

	ToMapTagArrayOutput() MapTagArrayOutput
	ToMapTagArrayOutputWithContext(context.Context) MapTagArrayOutput
}

type MapTagArray []MapTagInput

func (MapTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapTag)(nil)).Elem()
}

func (i MapTagArray) ToMapTagArrayOutput() MapTagArrayOutput {
	return i.ToMapTagArrayOutputWithContext(context.Background())
}

func (i MapTagArray) ToMapTagArrayOutputWithContext(ctx context.Context) MapTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapTagArrayOutput)
}

// A key-value pair to associate with a resource.
type MapTagOutput struct{ *pulumi.OutputState }

func (MapTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapTag)(nil)).Elem()
}

func (o MapTagOutput) ToMapTagOutput() MapTagOutput {
	return o
}

func (o MapTagOutput) ToMapTagOutputWithContext(ctx context.Context) MapTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o MapTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MapTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o MapTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MapTag) string { return v.Value }).(pulumi.StringOutput)
}

type MapTagArrayOutput struct{ *pulumi.OutputState }

func (MapTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapTag)(nil)).Elem()
}

func (o MapTagArrayOutput) ToMapTagArrayOutput() MapTagArrayOutput {
	return o
}

func (o MapTagArrayOutput) ToMapTagArrayOutputWithContext(ctx context.Context) MapTagArrayOutput {
	return o
}

func (o MapTagArrayOutput) Index(i pulumi.IntInput) MapTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapTag {
		return vs[0].([]MapTag)[vs[1].(int)]
	}).(MapTagOutput)
}

type PlaceIndexDataSourceConfiguration struct {
	IntendedUse *PlaceIndexIntendedUse `pulumi:"intendedUse"`
}

// PlaceIndexDataSourceConfigurationInput is an input type that accepts PlaceIndexDataSourceConfigurationArgs and PlaceIndexDataSourceConfigurationOutput values.
// You can construct a concrete instance of `PlaceIndexDataSourceConfigurationInput` via:
//
//	PlaceIndexDataSourceConfigurationArgs{...}
type PlaceIndexDataSourceConfigurationInput interface {
	pulumi.Input

	ToPlaceIndexDataSourceConfigurationOutput() PlaceIndexDataSourceConfigurationOutput
	ToPlaceIndexDataSourceConfigurationOutputWithContext(context.Context) PlaceIndexDataSourceConfigurationOutput
}

type PlaceIndexDataSourceConfigurationArgs struct {
	IntendedUse PlaceIndexIntendedUsePtrInput `pulumi:"intendedUse"`
}

func (PlaceIndexDataSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationOutput() PlaceIndexDataSourceConfigurationOutput {
	return i.ToPlaceIndexDataSourceConfigurationOutputWithContext(context.Background())
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexDataSourceConfigurationOutput)
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return i.ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i PlaceIndexDataSourceConfigurationArgs) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexDataSourceConfigurationOutput).ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx)
}

// PlaceIndexDataSourceConfigurationPtrInput is an input type that accepts PlaceIndexDataSourceConfigurationArgs, PlaceIndexDataSourceConfigurationPtr and PlaceIndexDataSourceConfigurationPtrOutput values.
// You can construct a concrete instance of `PlaceIndexDataSourceConfigurationPtrInput` via:
//
//	        PlaceIndexDataSourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type PlaceIndexDataSourceConfigurationPtrInput interface {
	pulumi.Input

	ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput
	ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Context) PlaceIndexDataSourceConfigurationPtrOutput
}

type placeIndexDataSourceConfigurationPtrType PlaceIndexDataSourceConfigurationArgs

func PlaceIndexDataSourceConfigurationPtr(v *PlaceIndexDataSourceConfigurationArgs) PlaceIndexDataSourceConfigurationPtrInput {
	return (*placeIndexDataSourceConfigurationPtrType)(v)
}

func (*placeIndexDataSourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (i *placeIndexDataSourceConfigurationPtrType) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return i.ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *placeIndexDataSourceConfigurationPtrType) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexDataSourceConfigurationPtrOutput)
}

type PlaceIndexDataSourceConfigurationOutput struct{ *pulumi.OutputState }

func (PlaceIndexDataSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationOutput() PlaceIndexDataSourceConfigurationOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return o.ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(context.Background())
}

func (o PlaceIndexDataSourceConfigurationOutput) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlaceIndexDataSourceConfiguration) *PlaceIndexDataSourceConfiguration {
		return &v
	}).(PlaceIndexDataSourceConfigurationPtrOutput)
}

func (o PlaceIndexDataSourceConfigurationOutput) IntendedUse() PlaceIndexIntendedUsePtrOutput {
	return o.ApplyT(func(v PlaceIndexDataSourceConfiguration) *PlaceIndexIntendedUse { return v.IntendedUse }).(PlaceIndexIntendedUsePtrOutput)
}

type PlaceIndexDataSourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PlaceIndexDataSourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaceIndexDataSourceConfiguration)(nil)).Elem()
}

func (o PlaceIndexDataSourceConfigurationPtrOutput) ToPlaceIndexDataSourceConfigurationPtrOutput() PlaceIndexDataSourceConfigurationPtrOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationPtrOutput) ToPlaceIndexDataSourceConfigurationPtrOutputWithContext(ctx context.Context) PlaceIndexDataSourceConfigurationPtrOutput {
	return o
}

func (o PlaceIndexDataSourceConfigurationPtrOutput) Elem() PlaceIndexDataSourceConfigurationOutput {
	return o.ApplyT(func(v *PlaceIndexDataSourceConfiguration) PlaceIndexDataSourceConfiguration {
		if v != nil {
			return *v
		}
		var ret PlaceIndexDataSourceConfiguration
		return ret
	}).(PlaceIndexDataSourceConfigurationOutput)
}

func (o PlaceIndexDataSourceConfigurationPtrOutput) IntendedUse() PlaceIndexIntendedUsePtrOutput {
	return o.ApplyT(func(v *PlaceIndexDataSourceConfiguration) *PlaceIndexIntendedUse {
		if v == nil {
			return nil
		}
		return v.IntendedUse
	}).(PlaceIndexIntendedUsePtrOutput)
}

// A key-value pair to associate with a resource.
type PlaceIndexTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// PlaceIndexTagInput is an input type that accepts PlaceIndexTagArgs and PlaceIndexTagOutput values.
// You can construct a concrete instance of `PlaceIndexTagInput` via:
//
//	PlaceIndexTagArgs{...}
type PlaceIndexTagInput interface {
	pulumi.Input

	ToPlaceIndexTagOutput() PlaceIndexTagOutput
	ToPlaceIndexTagOutputWithContext(context.Context) PlaceIndexTagOutput
}

// A key-value pair to associate with a resource.
type PlaceIndexTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PlaceIndexTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaceIndexTag)(nil)).Elem()
}

func (i PlaceIndexTagArgs) ToPlaceIndexTagOutput() PlaceIndexTagOutput {
	return i.ToPlaceIndexTagOutputWithContext(context.Background())
}

func (i PlaceIndexTagArgs) ToPlaceIndexTagOutputWithContext(ctx context.Context) PlaceIndexTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexTagOutput)
}

// PlaceIndexTagArrayInput is an input type that accepts PlaceIndexTagArray and PlaceIndexTagArrayOutput values.
// You can construct a concrete instance of `PlaceIndexTagArrayInput` via:
//
//	PlaceIndexTagArray{ PlaceIndexTagArgs{...} }
type PlaceIndexTagArrayInput interface {
	pulumi.Input

	ToPlaceIndexTagArrayOutput() PlaceIndexTagArrayOutput
	ToPlaceIndexTagArrayOutputWithContext(context.Context) PlaceIndexTagArrayOutput
}

type PlaceIndexTagArray []PlaceIndexTagInput

func (PlaceIndexTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaceIndexTag)(nil)).Elem()
}

func (i PlaceIndexTagArray) ToPlaceIndexTagArrayOutput() PlaceIndexTagArrayOutput {
	return i.ToPlaceIndexTagArrayOutputWithContext(context.Background())
}

func (i PlaceIndexTagArray) ToPlaceIndexTagArrayOutputWithContext(ctx context.Context) PlaceIndexTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaceIndexTagArrayOutput)
}

// A key-value pair to associate with a resource.
type PlaceIndexTagOutput struct{ *pulumi.OutputState }

func (PlaceIndexTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaceIndexTag)(nil)).Elem()
}

func (o PlaceIndexTagOutput) ToPlaceIndexTagOutput() PlaceIndexTagOutput {
	return o
}

func (o PlaceIndexTagOutput) ToPlaceIndexTagOutputWithContext(ctx context.Context) PlaceIndexTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o PlaceIndexTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PlaceIndexTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o PlaceIndexTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PlaceIndexTag) string { return v.Value }).(pulumi.StringOutput)
}

type PlaceIndexTagArrayOutput struct{ *pulumi.OutputState }

func (PlaceIndexTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaceIndexTag)(nil)).Elem()
}

func (o PlaceIndexTagArrayOutput) ToPlaceIndexTagArrayOutput() PlaceIndexTagArrayOutput {
	return o
}

func (o PlaceIndexTagArrayOutput) ToPlaceIndexTagArrayOutputWithContext(ctx context.Context) PlaceIndexTagArrayOutput {
	return o
}

func (o PlaceIndexTagArrayOutput) Index(i pulumi.IntInput) PlaceIndexTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlaceIndexTag {
		return vs[0].([]PlaceIndexTag)[vs[1].(int)]
	}).(PlaceIndexTagOutput)
}

// A key-value pair to associate with a resource.
type RouteCalculatorTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// RouteCalculatorTagInput is an input type that accepts RouteCalculatorTagArgs and RouteCalculatorTagOutput values.
// You can construct a concrete instance of `RouteCalculatorTagInput` via:
//
//	RouteCalculatorTagArgs{...}
type RouteCalculatorTagInput interface {
	pulumi.Input

	ToRouteCalculatorTagOutput() RouteCalculatorTagOutput
	ToRouteCalculatorTagOutputWithContext(context.Context) RouteCalculatorTagOutput
}

// A key-value pair to associate with a resource.
type RouteCalculatorTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RouteCalculatorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteCalculatorTag)(nil)).Elem()
}

func (i RouteCalculatorTagArgs) ToRouteCalculatorTagOutput() RouteCalculatorTagOutput {
	return i.ToRouteCalculatorTagOutputWithContext(context.Background())
}

func (i RouteCalculatorTagArgs) ToRouteCalculatorTagOutputWithContext(ctx context.Context) RouteCalculatorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculatorTagOutput)
}

// RouteCalculatorTagArrayInput is an input type that accepts RouteCalculatorTagArray and RouteCalculatorTagArrayOutput values.
// You can construct a concrete instance of `RouteCalculatorTagArrayInput` via:
//
//	RouteCalculatorTagArray{ RouteCalculatorTagArgs{...} }
type RouteCalculatorTagArrayInput interface {
	pulumi.Input

	ToRouteCalculatorTagArrayOutput() RouteCalculatorTagArrayOutput
	ToRouteCalculatorTagArrayOutputWithContext(context.Context) RouteCalculatorTagArrayOutput
}

type RouteCalculatorTagArray []RouteCalculatorTagInput

func (RouteCalculatorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteCalculatorTag)(nil)).Elem()
}

func (i RouteCalculatorTagArray) ToRouteCalculatorTagArrayOutput() RouteCalculatorTagArrayOutput {
	return i.ToRouteCalculatorTagArrayOutputWithContext(context.Background())
}

func (i RouteCalculatorTagArray) ToRouteCalculatorTagArrayOutputWithContext(ctx context.Context) RouteCalculatorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculatorTagArrayOutput)
}

// A key-value pair to associate with a resource.
type RouteCalculatorTagOutput struct{ *pulumi.OutputState }

func (RouteCalculatorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteCalculatorTag)(nil)).Elem()
}

func (o RouteCalculatorTagOutput) ToRouteCalculatorTagOutput() RouteCalculatorTagOutput {
	return o
}

func (o RouteCalculatorTagOutput) ToRouteCalculatorTagOutputWithContext(ctx context.Context) RouteCalculatorTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RouteCalculatorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RouteCalculatorTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o RouteCalculatorTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RouteCalculatorTag) string { return v.Value }).(pulumi.StringOutput)
}

type RouteCalculatorTagArrayOutput struct{ *pulumi.OutputState }

func (RouteCalculatorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteCalculatorTag)(nil)).Elem()
}

func (o RouteCalculatorTagArrayOutput) ToRouteCalculatorTagArrayOutput() RouteCalculatorTagArrayOutput {
	return o
}

func (o RouteCalculatorTagArrayOutput) ToRouteCalculatorTagArrayOutputWithContext(ctx context.Context) RouteCalculatorTagArrayOutput {
	return o
}

func (o RouteCalculatorTagArrayOutput) Index(i pulumi.IntInput) RouteCalculatorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteCalculatorTag {
		return vs[0].([]RouteCalculatorTag)[vs[1].(int)]
	}).(RouteCalculatorTagOutput)
}

// A key-value pair to associate with a resource.
type TrackerTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// TrackerTagInput is an input type that accepts TrackerTagArgs and TrackerTagOutput values.
// You can construct a concrete instance of `TrackerTagInput` via:
//
//	TrackerTagArgs{...}
type TrackerTagInput interface {
	pulumi.Input

	ToTrackerTagOutput() TrackerTagOutput
	ToTrackerTagOutputWithContext(context.Context) TrackerTagOutput
}

// A key-value pair to associate with a resource.
type TrackerTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TrackerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackerTag)(nil)).Elem()
}

func (i TrackerTagArgs) ToTrackerTagOutput() TrackerTagOutput {
	return i.ToTrackerTagOutputWithContext(context.Background())
}

func (i TrackerTagArgs) ToTrackerTagOutputWithContext(ctx context.Context) TrackerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerTagOutput)
}

// TrackerTagArrayInput is an input type that accepts TrackerTagArray and TrackerTagArrayOutput values.
// You can construct a concrete instance of `TrackerTagArrayInput` via:
//
//	TrackerTagArray{ TrackerTagArgs{...} }
type TrackerTagArrayInput interface {
	pulumi.Input

	ToTrackerTagArrayOutput() TrackerTagArrayOutput
	ToTrackerTagArrayOutputWithContext(context.Context) TrackerTagArrayOutput
}

type TrackerTagArray []TrackerTagInput

func (TrackerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackerTag)(nil)).Elem()
}

func (i TrackerTagArray) ToTrackerTagArrayOutput() TrackerTagArrayOutput {
	return i.ToTrackerTagArrayOutputWithContext(context.Background())
}

func (i TrackerTagArray) ToTrackerTagArrayOutputWithContext(ctx context.Context) TrackerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerTagArrayOutput)
}

// A key-value pair to associate with a resource.
type TrackerTagOutput struct{ *pulumi.OutputState }

func (TrackerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackerTag)(nil)).Elem()
}

func (o TrackerTagOutput) ToTrackerTagOutput() TrackerTagOutput {
	return o
}

func (o TrackerTagOutput) ToTrackerTagOutputWithContext(ctx context.Context) TrackerTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o TrackerTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TrackerTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o TrackerTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TrackerTag) string { return v.Value }).(pulumi.StringOutput)
}

type TrackerTagArrayOutput struct{ *pulumi.OutputState }

func (TrackerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackerTag)(nil)).Elem()
}

func (o TrackerTagArrayOutput) ToTrackerTagArrayOutput() TrackerTagArrayOutput {
	return o
}

func (o TrackerTagArrayOutput) ToTrackerTagArrayOutputWithContext(ctx context.Context) TrackerTagArrayOutput {
	return o
}

func (o TrackerTagArrayOutput) Index(i pulumi.IntInput) TrackerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackerTag {
		return vs[0].([]TrackerTag)[vs[1].(int)]
	}).(TrackerTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyRestrictionsInput)(nil)).Elem(), ApiKeyRestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyTagInput)(nil)).Elem(), ApiKeyTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyTagArrayInput)(nil)).Elem(), ApiKeyTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeofenceCollectionTagInput)(nil)).Elem(), GeofenceCollectionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeofenceCollectionTagArrayInput)(nil)).Elem(), GeofenceCollectionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapConfigurationInput)(nil)).Elem(), MapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapTagInput)(nil)).Elem(), MapTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MapTagArrayInput)(nil)).Elem(), MapTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexDataSourceConfigurationInput)(nil)).Elem(), PlaceIndexDataSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexDataSourceConfigurationPtrInput)(nil)).Elem(), PlaceIndexDataSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexTagInput)(nil)).Elem(), PlaceIndexTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaceIndexTagArrayInput)(nil)).Elem(), PlaceIndexTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculatorTagInput)(nil)).Elem(), RouteCalculatorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculatorTagArrayInput)(nil)).Elem(), RouteCalculatorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerTagInput)(nil)).Elem(), TrackerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerTagArrayInput)(nil)).Elem(), TrackerTagArray{})
	pulumi.RegisterOutputType(ApiKeyRestrictionsOutput{})
	pulumi.RegisterOutputType(ApiKeyRestrictionsPtrOutput{})
	pulumi.RegisterOutputType(ApiKeyTagOutput{})
	pulumi.RegisterOutputType(ApiKeyTagArrayOutput{})
	pulumi.RegisterOutputType(GeofenceCollectionTagOutput{})
	pulumi.RegisterOutputType(GeofenceCollectionTagArrayOutput{})
	pulumi.RegisterOutputType(MapConfigurationOutput{})
	pulumi.RegisterOutputType(MapTagOutput{})
	pulumi.RegisterOutputType(MapTagArrayOutput{})
	pulumi.RegisterOutputType(PlaceIndexDataSourceConfigurationOutput{})
	pulumi.RegisterOutputType(PlaceIndexDataSourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PlaceIndexTagOutput{})
	pulumi.RegisterOutputType(PlaceIndexTagArrayOutput{})
	pulumi.RegisterOutputType(RouteCalculatorTagOutput{})
	pulumi.RegisterOutputType(RouteCalculatorTagArrayOutput{})
	pulumi.RegisterOutputType(TrackerTagOutput{})
	pulumi.RegisterOutputType(TrackerTagArrayOutput{})
}
