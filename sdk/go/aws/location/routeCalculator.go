// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package location

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::Location::RouteCalculator Resource Type
type RouteCalculator struct {
	pulumi.CustomResourceState

	Arn            pulumi.StringOutput                 `pulumi:"arn"`
	CalculatorArn  pulumi.StringOutput                 `pulumi:"calculatorArn"`
	CalculatorName pulumi.StringOutput                 `pulumi:"calculatorName"`
	CreateTime     pulumi.StringOutput                 `pulumi:"createTime"`
	DataSource     pulumi.StringOutput                 `pulumi:"dataSource"`
	Description    pulumi.StringPtrOutput              `pulumi:"description"`
	PricingPlan    RouteCalculatorPricingPlanPtrOutput `pulumi:"pricingPlan"`
	// An array of key-value pairs to apply to this resource.
	Tags       RouteCalculatorTagArrayOutput `pulumi:"tags"`
	UpdateTime pulumi.StringOutput           `pulumi:"updateTime"`
}

// NewRouteCalculator registers a new resource with the given unique name, arguments, and options.
func NewRouteCalculator(ctx *pulumi.Context,
	name string, args *RouteCalculatorArgs, opts ...pulumi.ResourceOption) (*RouteCalculator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CalculatorName == nil {
		return nil, errors.New("invalid value for required argument 'CalculatorName'")
	}
	if args.DataSource == nil {
		return nil, errors.New("invalid value for required argument 'DataSource'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"calculatorName",
		"dataSource",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteCalculator
	err := ctx.RegisterResource("aws-native:location:RouteCalculator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteCalculator gets an existing RouteCalculator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteCalculator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteCalculatorState, opts ...pulumi.ResourceOption) (*RouteCalculator, error) {
	var resource RouteCalculator
	err := ctx.ReadResource("aws-native:location:RouteCalculator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteCalculator resources.
type routeCalculatorState struct {
}

type RouteCalculatorState struct {
}

func (RouteCalculatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeCalculatorState)(nil)).Elem()
}

type routeCalculatorArgs struct {
	CalculatorName string                      `pulumi:"calculatorName"`
	DataSource     string                      `pulumi:"dataSource"`
	Description    *string                     `pulumi:"description"`
	PricingPlan    *RouteCalculatorPricingPlan `pulumi:"pricingPlan"`
	// An array of key-value pairs to apply to this resource.
	Tags []RouteCalculatorTag `pulumi:"tags"`
}

// The set of arguments for constructing a RouteCalculator resource.
type RouteCalculatorArgs struct {
	CalculatorName pulumi.StringInput
	DataSource     pulumi.StringInput
	Description    pulumi.StringPtrInput
	PricingPlan    RouteCalculatorPricingPlanPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags RouteCalculatorTagArrayInput
}

func (RouteCalculatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeCalculatorArgs)(nil)).Elem()
}

type RouteCalculatorInput interface {
	pulumi.Input

	ToRouteCalculatorOutput() RouteCalculatorOutput
	ToRouteCalculatorOutputWithContext(ctx context.Context) RouteCalculatorOutput
}

func (*RouteCalculator) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteCalculator)(nil)).Elem()
}

func (i *RouteCalculator) ToRouteCalculatorOutput() RouteCalculatorOutput {
	return i.ToRouteCalculatorOutputWithContext(context.Background())
}

func (i *RouteCalculator) ToRouteCalculatorOutputWithContext(ctx context.Context) RouteCalculatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteCalculatorOutput)
}

func (i *RouteCalculator) ToOutput(ctx context.Context) pulumix.Output[*RouteCalculator] {
	return pulumix.Output[*RouteCalculator]{
		OutputState: i.ToRouteCalculatorOutputWithContext(ctx).OutputState,
	}
}

type RouteCalculatorOutput struct{ *pulumi.OutputState }

func (RouteCalculatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteCalculator)(nil)).Elem()
}

func (o RouteCalculatorOutput) ToRouteCalculatorOutput() RouteCalculatorOutput {
	return o
}

func (o RouteCalculatorOutput) ToRouteCalculatorOutputWithContext(ctx context.Context) RouteCalculatorOutput {
	return o
}

func (o RouteCalculatorOutput) ToOutput(ctx context.Context) pulumix.Output[*RouteCalculator] {
	return pulumix.Output[*RouteCalculator]{
		OutputState: o.OutputState,
	}
}

func (o RouteCalculatorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculator) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RouteCalculatorOutput) CalculatorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculator) pulumi.StringOutput { return v.CalculatorArn }).(pulumi.StringOutput)
}

func (o RouteCalculatorOutput) CalculatorName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculator) pulumi.StringOutput { return v.CalculatorName }).(pulumi.StringOutput)
}

func (o RouteCalculatorOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculator) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o RouteCalculatorOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculator) pulumi.StringOutput { return v.DataSource }).(pulumi.StringOutput)
}

func (o RouteCalculatorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteCalculator) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RouteCalculatorOutput) PricingPlan() RouteCalculatorPricingPlanPtrOutput {
	return o.ApplyT(func(v *RouteCalculator) RouteCalculatorPricingPlanPtrOutput { return v.PricingPlan }).(RouteCalculatorPricingPlanPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o RouteCalculatorOutput) Tags() RouteCalculatorTagArrayOutput {
	return o.ApplyT(func(v *RouteCalculator) RouteCalculatorTagArrayOutput { return v.Tags }).(RouteCalculatorTagArrayOutput)
}

func (o RouteCalculatorOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteCalculator) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteCalculatorInput)(nil)).Elem(), &RouteCalculator{})
	pulumi.RegisterOutputType(RouteCalculatorOutput{})
}
