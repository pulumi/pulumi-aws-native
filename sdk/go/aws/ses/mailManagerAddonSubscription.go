// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::SES::MailManagerAddonSubscription Resource Type
type MailManagerAddonSubscription struct {
	pulumi.CustomResourceState

	AddonName            pulumi.StringOutput `pulumi:"addonName"`
	AddonSubscriptionArn pulumi.StringOutput `pulumi:"addonSubscriptionArn"`
	AddonSubscriptionId  pulumi.StringOutput `pulumi:"addonSubscriptionId"`
	Tags                 aws.TagArrayOutput  `pulumi:"tags"`
}

// NewMailManagerAddonSubscription registers a new resource with the given unique name, arguments, and options.
func NewMailManagerAddonSubscription(ctx *pulumi.Context,
	name string, args *MailManagerAddonSubscriptionArgs, opts ...pulumi.ResourceOption) (*MailManagerAddonSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddonName == nil {
		return nil, errors.New("invalid value for required argument 'AddonName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"addonName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MailManagerAddonSubscription
	err := ctx.RegisterResource("aws-native:ses:MailManagerAddonSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMailManagerAddonSubscription gets an existing MailManagerAddonSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMailManagerAddonSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MailManagerAddonSubscriptionState, opts ...pulumi.ResourceOption) (*MailManagerAddonSubscription, error) {
	var resource MailManagerAddonSubscription
	err := ctx.ReadResource("aws-native:ses:MailManagerAddonSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MailManagerAddonSubscription resources.
type mailManagerAddonSubscriptionState struct {
}

type MailManagerAddonSubscriptionState struct {
}

func (MailManagerAddonSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*mailManagerAddonSubscriptionState)(nil)).Elem()
}

type mailManagerAddonSubscriptionArgs struct {
	AddonName string    `pulumi:"addonName"`
	Tags      []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a MailManagerAddonSubscription resource.
type MailManagerAddonSubscriptionArgs struct {
	AddonName pulumi.StringInput
	Tags      aws.TagArrayInput
}

func (MailManagerAddonSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mailManagerAddonSubscriptionArgs)(nil)).Elem()
}

type MailManagerAddonSubscriptionInput interface {
	pulumi.Input

	ToMailManagerAddonSubscriptionOutput() MailManagerAddonSubscriptionOutput
	ToMailManagerAddonSubscriptionOutputWithContext(ctx context.Context) MailManagerAddonSubscriptionOutput
}

func (*MailManagerAddonSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**MailManagerAddonSubscription)(nil)).Elem()
}

func (i *MailManagerAddonSubscription) ToMailManagerAddonSubscriptionOutput() MailManagerAddonSubscriptionOutput {
	return i.ToMailManagerAddonSubscriptionOutputWithContext(context.Background())
}

func (i *MailManagerAddonSubscription) ToMailManagerAddonSubscriptionOutputWithContext(ctx context.Context) MailManagerAddonSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailManagerAddonSubscriptionOutput)
}

type MailManagerAddonSubscriptionOutput struct{ *pulumi.OutputState }

func (MailManagerAddonSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MailManagerAddonSubscription)(nil)).Elem()
}

func (o MailManagerAddonSubscriptionOutput) ToMailManagerAddonSubscriptionOutput() MailManagerAddonSubscriptionOutput {
	return o
}

func (o MailManagerAddonSubscriptionOutput) ToMailManagerAddonSubscriptionOutputWithContext(ctx context.Context) MailManagerAddonSubscriptionOutput {
	return o
}

func (o MailManagerAddonSubscriptionOutput) AddonName() pulumi.StringOutput {
	return o.ApplyT(func(v *MailManagerAddonSubscription) pulumi.StringOutput { return v.AddonName }).(pulumi.StringOutput)
}

func (o MailManagerAddonSubscriptionOutput) AddonSubscriptionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MailManagerAddonSubscription) pulumi.StringOutput { return v.AddonSubscriptionArn }).(pulumi.StringOutput)
}

func (o MailManagerAddonSubscriptionOutput) AddonSubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *MailManagerAddonSubscription) pulumi.StringOutput { return v.AddonSubscriptionId }).(pulumi.StringOutput)
}

func (o MailManagerAddonSubscriptionOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *MailManagerAddonSubscription) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MailManagerAddonSubscriptionInput)(nil)).Elem(), &MailManagerAddonSubscription{})
	pulumi.RegisterOutputType(MailManagerAddonSubscriptionOutput{})
}
