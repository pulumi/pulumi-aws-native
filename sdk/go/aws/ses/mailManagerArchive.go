// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::SES::MailManagerArchive Resource Type
type MailManagerArchive struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the archive.
	ArchiveArn pulumi.StringOutput `pulumi:"archiveArn"`
	// The unique identifier of the archive.
	ArchiveId pulumi.StringOutput `pulumi:"archiveId"`
	// A unique name for the new archive.
	ArchiveName pulumi.StringPtrOutput `pulumi:"archiveName"`
	// The current state of the archive:
	//
	// - `ACTIVE` – The archive is ready and available for use.
	// - `PENDING_DELETION` – The archive has been marked for deletion and will be permanently deleted in 30 days. No further modifications can be made in this state.
	ArchiveState MailManagerArchiveArchiveStateOutput `pulumi:"archiveState"`
	// The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// The period for retaining emails in the archive before automatic deletion.
	Retention MailManagerArchiveArchiveRetentionPropertiesPtrOutput `pulumi:"retention"`
	// The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewMailManagerArchive registers a new resource with the given unique name, arguments, and options.
func NewMailManagerArchive(ctx *pulumi.Context,
	name string, args *MailManagerArchiveArgs, opts ...pulumi.ResourceOption) (*MailManagerArchive, error) {
	if args == nil {
		args = &MailManagerArchiveArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"kmsKeyArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MailManagerArchive
	err := ctx.RegisterResource("aws-native:ses:MailManagerArchive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMailManagerArchive gets an existing MailManagerArchive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMailManagerArchive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MailManagerArchiveState, opts ...pulumi.ResourceOption) (*MailManagerArchive, error) {
	var resource MailManagerArchive
	err := ctx.ReadResource("aws-native:ses:MailManagerArchive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MailManagerArchive resources.
type mailManagerArchiveState struct {
}

type MailManagerArchiveState struct {
}

func (MailManagerArchiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*mailManagerArchiveState)(nil)).Elem()
}

type mailManagerArchiveArgs struct {
	// A unique name for the new archive.
	ArchiveName *string `pulumi:"archiveName"`
	// The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The period for retaining emails in the archive before automatic deletion.
	Retention *MailManagerArchiveArchiveRetentionProperties `pulumi:"retention"`
	// The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a MailManagerArchive resource.
type MailManagerArchiveArgs struct {
	// A unique name for the new archive.
	ArchiveName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.
	KmsKeyArn pulumi.StringPtrInput
	// The period for retaining emails in the archive before automatic deletion.
	Retention MailManagerArchiveArchiveRetentionPropertiesPtrInput
	// The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags aws.TagArrayInput
}

func (MailManagerArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mailManagerArchiveArgs)(nil)).Elem()
}

type MailManagerArchiveInput interface {
	pulumi.Input

	ToMailManagerArchiveOutput() MailManagerArchiveOutput
	ToMailManagerArchiveOutputWithContext(ctx context.Context) MailManagerArchiveOutput
}

func (*MailManagerArchive) ElementType() reflect.Type {
	return reflect.TypeOf((**MailManagerArchive)(nil)).Elem()
}

func (i *MailManagerArchive) ToMailManagerArchiveOutput() MailManagerArchiveOutput {
	return i.ToMailManagerArchiveOutputWithContext(context.Background())
}

func (i *MailManagerArchive) ToMailManagerArchiveOutputWithContext(ctx context.Context) MailManagerArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MailManagerArchiveOutput)
}

type MailManagerArchiveOutput struct{ *pulumi.OutputState }

func (MailManagerArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MailManagerArchive)(nil)).Elem()
}

func (o MailManagerArchiveOutput) ToMailManagerArchiveOutput() MailManagerArchiveOutput {
	return o
}

func (o MailManagerArchiveOutput) ToMailManagerArchiveOutputWithContext(ctx context.Context) MailManagerArchiveOutput {
	return o
}

// The Amazon Resource Name (ARN) of the archive.
func (o MailManagerArchiveOutput) ArchiveArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MailManagerArchive) pulumi.StringOutput { return v.ArchiveArn }).(pulumi.StringOutput)
}

// The unique identifier of the archive.
func (o MailManagerArchiveOutput) ArchiveId() pulumi.StringOutput {
	return o.ApplyT(func(v *MailManagerArchive) pulumi.StringOutput { return v.ArchiveId }).(pulumi.StringOutput)
}

// A unique name for the new archive.
func (o MailManagerArchiveOutput) ArchiveName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MailManagerArchive) pulumi.StringPtrOutput { return v.ArchiveName }).(pulumi.StringPtrOutput)
}

// The current state of the archive:
//
// - `ACTIVE` – The archive is ready and available for use.
// - `PENDING_DELETION` – The archive has been marked for deletion and will be permanently deleted in 30 days. No further modifications can be made in this state.
func (o MailManagerArchiveOutput) ArchiveState() MailManagerArchiveArchiveStateOutput {
	return o.ApplyT(func(v *MailManagerArchive) MailManagerArchiveArchiveStateOutput { return v.ArchiveState }).(MailManagerArchiveArchiveStateOutput)
}

// The Amazon Resource Name (ARN) of the KMS key for encrypting emails in the archive.
func (o MailManagerArchiveOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MailManagerArchive) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// The period for retaining emails in the archive before automatic deletion.
func (o MailManagerArchiveOutput) Retention() MailManagerArchiveArchiveRetentionPropertiesPtrOutput {
	return o.ApplyT(func(v *MailManagerArchive) MailManagerArchiveArchiveRetentionPropertiesPtrOutput { return v.Retention }).(MailManagerArchiveArchiveRetentionPropertiesPtrOutput)
}

// The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
func (o MailManagerArchiveOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *MailManagerArchive) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MailManagerArchiveInput)(nil)).Elem(), &MailManagerArchive{})
	pulumi.RegisterOutputType(MailManagerArchiveOutput{})
}
