// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::SES::MailManagerAddonSubscription Resource Type
func LookupMailManagerAddonSubscription(ctx *pulumi.Context, args *LookupMailManagerAddonSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupMailManagerAddonSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMailManagerAddonSubscriptionResult
	err := ctx.Invoke("aws-native:ses:getMailManagerAddonSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMailManagerAddonSubscriptionArgs struct {
	// The unique ID of the Add On subscription.
	AddonSubscriptionId string `pulumi:"addonSubscriptionId"`
}

type LookupMailManagerAddonSubscriptionResult struct {
	// The Amazon Resource Name (ARN) of the Add On subscription.
	AddonSubscriptionArn *string `pulumi:"addonSubscriptionArn"`
	// The unique ID of the Add On subscription.
	AddonSubscriptionId *string `pulumi:"addonSubscriptionId"`
	// The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupMailManagerAddonSubscriptionOutput(ctx *pulumi.Context, args LookupMailManagerAddonSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupMailManagerAddonSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMailManagerAddonSubscriptionResultOutput, error) {
			args := v.(LookupMailManagerAddonSubscriptionArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupMailManagerAddonSubscriptionResult
			secret, err := ctx.InvokePackageRaw("aws-native:ses:getMailManagerAddonSubscription", args, &rv, "", opts...)
			if err != nil {
				return LookupMailManagerAddonSubscriptionResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupMailManagerAddonSubscriptionResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupMailManagerAddonSubscriptionResultOutput), nil
			}
			return output, nil
		}).(LookupMailManagerAddonSubscriptionResultOutput)
}

type LookupMailManagerAddonSubscriptionOutputArgs struct {
	// The unique ID of the Add On subscription.
	AddonSubscriptionId pulumi.StringInput `pulumi:"addonSubscriptionId"`
}

func (LookupMailManagerAddonSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMailManagerAddonSubscriptionArgs)(nil)).Elem()
}

type LookupMailManagerAddonSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupMailManagerAddonSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMailManagerAddonSubscriptionResult)(nil)).Elem()
}

func (o LookupMailManagerAddonSubscriptionResultOutput) ToLookupMailManagerAddonSubscriptionResultOutput() LookupMailManagerAddonSubscriptionResultOutput {
	return o
}

func (o LookupMailManagerAddonSubscriptionResultOutput) ToLookupMailManagerAddonSubscriptionResultOutputWithContext(ctx context.Context) LookupMailManagerAddonSubscriptionResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the Add On subscription.
func (o LookupMailManagerAddonSubscriptionResultOutput) AddonSubscriptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMailManagerAddonSubscriptionResult) *string { return v.AddonSubscriptionArn }).(pulumi.StringPtrOutput)
}

// The unique ID of the Add On subscription.
func (o LookupMailManagerAddonSubscriptionResultOutput) AddonSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMailManagerAddonSubscriptionResult) *string { return v.AddonSubscriptionId }).(pulumi.StringPtrOutput)
}

// The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
func (o LookupMailManagerAddonSubscriptionResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupMailManagerAddonSubscriptionResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMailManagerAddonSubscriptionResultOutput{})
}
