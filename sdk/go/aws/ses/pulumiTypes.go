// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContactListTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ContactListTagInput is an input type that accepts ContactListTagArgs and ContactListTagOutput values.
// You can construct a concrete instance of `ContactListTagInput` via:
//
//          ContactListTagArgs{...}
type ContactListTagInput interface {
	pulumi.Input

	ToContactListTagOutput() ContactListTagOutput
	ToContactListTagOutputWithContext(context.Context) ContactListTagOutput
}

type ContactListTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContactListTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactListTag)(nil)).Elem()
}

func (i ContactListTagArgs) ToContactListTagOutput() ContactListTagOutput {
	return i.ToContactListTagOutputWithContext(context.Background())
}

func (i ContactListTagArgs) ToContactListTagOutputWithContext(ctx context.Context) ContactListTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactListTagOutput)
}

// ContactListTagArrayInput is an input type that accepts ContactListTagArray and ContactListTagArrayOutput values.
// You can construct a concrete instance of `ContactListTagArrayInput` via:
//
//          ContactListTagArray{ ContactListTagArgs{...} }
type ContactListTagArrayInput interface {
	pulumi.Input

	ToContactListTagArrayOutput() ContactListTagArrayOutput
	ToContactListTagArrayOutputWithContext(context.Context) ContactListTagArrayOutput
}

type ContactListTagArray []ContactListTagInput

func (ContactListTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactListTag)(nil)).Elem()
}

func (i ContactListTagArray) ToContactListTagArrayOutput() ContactListTagArrayOutput {
	return i.ToContactListTagArrayOutputWithContext(context.Background())
}

func (i ContactListTagArray) ToContactListTagArrayOutputWithContext(ctx context.Context) ContactListTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactListTagArrayOutput)
}

type ContactListTagOutput struct{ *pulumi.OutputState }

func (ContactListTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactListTag)(nil)).Elem()
}

func (o ContactListTagOutput) ToContactListTagOutput() ContactListTagOutput {
	return o
}

func (o ContactListTagOutput) ToContactListTagOutputWithContext(ctx context.Context) ContactListTagOutput {
	return o
}

func (o ContactListTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ContactListTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ContactListTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContactListTag) string { return v.Value }).(pulumi.StringOutput)
}

type ContactListTagArrayOutput struct{ *pulumi.OutputState }

func (ContactListTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactListTag)(nil)).Elem()
}

func (o ContactListTagArrayOutput) ToContactListTagArrayOutput() ContactListTagArrayOutput {
	return o
}

func (o ContactListTagArrayOutput) ToContactListTagArrayOutputWithContext(ctx context.Context) ContactListTagArrayOutput {
	return o
}

func (o ContactListTagArrayOutput) Index(i pulumi.IntInput) ContactListTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactListTag {
		return vs[0].([]ContactListTag)[vs[1].(int)]
	}).(ContactListTagOutput)
}

type ContactListTopic struct {
	DefaultSubscriptionStatus string `pulumi:"defaultSubscriptionStatus"`
	// The description of the topic.
	Description *string `pulumi:"description"`
	// The display name of the topic.
	DisplayName string `pulumi:"displayName"`
	// The name of the topic.
	TopicName string `pulumi:"topicName"`
}

// ContactListTopicInput is an input type that accepts ContactListTopicArgs and ContactListTopicOutput values.
// You can construct a concrete instance of `ContactListTopicInput` via:
//
//          ContactListTopicArgs{...}
type ContactListTopicInput interface {
	pulumi.Input

	ToContactListTopicOutput() ContactListTopicOutput
	ToContactListTopicOutputWithContext(context.Context) ContactListTopicOutput
}

type ContactListTopicArgs struct {
	DefaultSubscriptionStatus pulumi.StringInput `pulumi:"defaultSubscriptionStatus"`
	// The description of the topic.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the topic.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The name of the topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (ContactListTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactListTopic)(nil)).Elem()
}

func (i ContactListTopicArgs) ToContactListTopicOutput() ContactListTopicOutput {
	return i.ToContactListTopicOutputWithContext(context.Background())
}

func (i ContactListTopicArgs) ToContactListTopicOutputWithContext(ctx context.Context) ContactListTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactListTopicOutput)
}

// ContactListTopicArrayInput is an input type that accepts ContactListTopicArray and ContactListTopicArrayOutput values.
// You can construct a concrete instance of `ContactListTopicArrayInput` via:
//
//          ContactListTopicArray{ ContactListTopicArgs{...} }
type ContactListTopicArrayInput interface {
	pulumi.Input

	ToContactListTopicArrayOutput() ContactListTopicArrayOutput
	ToContactListTopicArrayOutputWithContext(context.Context) ContactListTopicArrayOutput
}

type ContactListTopicArray []ContactListTopicInput

func (ContactListTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactListTopic)(nil)).Elem()
}

func (i ContactListTopicArray) ToContactListTopicArrayOutput() ContactListTopicArrayOutput {
	return i.ToContactListTopicArrayOutputWithContext(context.Background())
}

func (i ContactListTopicArray) ToContactListTopicArrayOutputWithContext(ctx context.Context) ContactListTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactListTopicArrayOutput)
}

type ContactListTopicOutput struct{ *pulumi.OutputState }

func (ContactListTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactListTopic)(nil)).Elem()
}

func (o ContactListTopicOutput) ToContactListTopicOutput() ContactListTopicOutput {
	return o
}

func (o ContactListTopicOutput) ToContactListTopicOutputWithContext(ctx context.Context) ContactListTopicOutput {
	return o
}

func (o ContactListTopicOutput) DefaultSubscriptionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ContactListTopic) string { return v.DefaultSubscriptionStatus }).(pulumi.StringOutput)
}

// The description of the topic.
func (o ContactListTopicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactListTopic) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the topic.
func (o ContactListTopicOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ContactListTopic) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The name of the topic.
func (o ContactListTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v ContactListTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type ContactListTopicArrayOutput struct{ *pulumi.OutputState }

func (ContactListTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactListTopic)(nil)).Elem()
}

func (o ContactListTopicArrayOutput) ToContactListTopicArrayOutput() ContactListTopicArrayOutput {
	return o
}

func (o ContactListTopicArrayOutput) ToContactListTopicArrayOutputWithContext(ctx context.Context) ContactListTopicArrayOutput {
	return o
}

func (o ContactListTopicArrayOutput) Index(i pulumi.IntInput) ContactListTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactListTopic {
		return vs[0].([]ContactListTopic)[vs[1].(int)]
	}).(ContactListTopicOutput)
}

func init() {
	pulumi.RegisterOutputType(ContactListTagOutput{})
	pulumi.RegisterOutputType(ContactListTagArrayOutput{})
	pulumi.RegisterOutputType(ContactListTopicOutput{})
	pulumi.RegisterOutputType(ContactListTopicArrayOutput{})
}
