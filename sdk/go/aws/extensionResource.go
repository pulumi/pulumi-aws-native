// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A special resource that enables deploying CloudFormation Extensions (third-party resources). An extension has to be pre-registered in your AWS account in order to use this resource.
type ExtensionResource struct {
	pulumi.CustomResourceState

	// Dictionary of the extension resource attributes.
	Outputs pulumi.MapOutput `pulumi:"outputs"`
}

// NewExtensionResource registers a new resource with the given unique name, arguments, and options.
func NewExtensionResource(ctx *pulumi.Context,
	name string, args *ExtensionResourceArgs, opts ...pulumi.ResourceOption) (*ExtensionResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExtensionResource
	err := ctx.RegisterResource("aws-native:index:ExtensionResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtensionResource gets an existing ExtensionResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtensionResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionResourceState, opts ...pulumi.ResourceOption) (*ExtensionResource, error) {
	var resource ExtensionResource
	err := ctx.ReadResource("aws-native:index:ExtensionResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtensionResource resources.
type extensionResourceState struct {
}

type ExtensionResourceState struct {
}

func (ExtensionResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionResourceState)(nil)).Elem()
}

type extensionResourceArgs struct {
	// Optional auto-naming specification for the resource.
	// If provided and the name is not specified manually, the provider will automatically generate a name based on the Pulumi resource name and a random suffix.
	AutoNaming *AutoNaming `pulumi:"autoNaming"`
	// Property names as defined by `createOnlyProperties` in the CloudFormation schema. Create-only properties can't be set during updates, so will not be included in patches even if they are also marked as write-only, and will cause an error if attempted to be updated. Therefore any property here should also be included in the `replaceOnChanges` resource option too.
	// In the CloudFormation schema these are fully qualified property paths (e.g. `/properties/AccessToken`) whereas here we only include the top-level property name (e.g. `AccessToken`).
	CreateOnly []string `pulumi:"createOnly"`
	// Property bag containing the properties for the resource. These should be defined using the casing expected by the CloudControl API as these values are sent exact as provided.
	Properties map[string]interface{} `pulumi:"properties"`
	// Optional name of the property containing the tags. Defaults to "Tags" if the `tagsStyle` is set to either "stringMap" or "keyValueArray". This is used to apply default tags to the resource and can be ignored if not using default tags.
	TagsProperty *string `pulumi:"tagsProperty"`
	// Optional style of tags this resource uses. Valid values are "stringMap", "keyValueArray" or "none". Defaults to `keyValueArray` if `tagsProperty` is set. This is used to apply default tags to the resource and can be ignored if not using default tags.
	TagsStyle *string `pulumi:"tagsStyle"`
	// CloudFormation type name. This has three parts, each separated by two colons. For AWS resources this starts with `AWS::` e.g. `AWS::Logs::LogGroup`. Third party resources should use a namespace prefix e.g. `MyCompany::MyService::MyResource`.
	Type string `pulumi:"type"`
	// Property names as defined by `writeOnlyProperties` in the CloudFormation schema. Write-only properties are not returned during read operations and have to be included in all update operations as CloudControl itself can't read their previous values.
	// In the CloudFormation schema these are fully qualified property paths (e.g. `/properties/AccessToken`) whereas here we only include the top-level property name (e.g. `AccessToken`).
	WriteOnly []string `pulumi:"writeOnly"`
}

// The set of arguments for constructing a ExtensionResource resource.
type ExtensionResourceArgs struct {
	// Optional auto-naming specification for the resource.
	// If provided and the name is not specified manually, the provider will automatically generate a name based on the Pulumi resource name and a random suffix.
	AutoNaming AutoNamingPtrInput
	// Property names as defined by `createOnlyProperties` in the CloudFormation schema. Create-only properties can't be set during updates, so will not be included in patches even if they are also marked as write-only, and will cause an error if attempted to be updated. Therefore any property here should also be included in the `replaceOnChanges` resource option too.
	// In the CloudFormation schema these are fully qualified property paths (e.g. `/properties/AccessToken`) whereas here we only include the top-level property name (e.g. `AccessToken`).
	CreateOnly pulumi.StringArrayInput
	// Property bag containing the properties for the resource. These should be defined using the casing expected by the CloudControl API as these values are sent exact as provided.
	Properties pulumi.MapInput
	// Optional name of the property containing the tags. Defaults to "Tags" if the `tagsStyle` is set to either "stringMap" or "keyValueArray". This is used to apply default tags to the resource and can be ignored if not using default tags.
	TagsProperty pulumi.StringPtrInput
	// Optional style of tags this resource uses. Valid values are "stringMap", "keyValueArray" or "none". Defaults to `keyValueArray` if `tagsProperty` is set. This is used to apply default tags to the resource and can be ignored if not using default tags.
	TagsStyle pulumi.StringPtrInput
	// CloudFormation type name. This has three parts, each separated by two colons. For AWS resources this starts with `AWS::` e.g. `AWS::Logs::LogGroup`. Third party resources should use a namespace prefix e.g. `MyCompany::MyService::MyResource`.
	Type pulumi.StringInput
	// Property names as defined by `writeOnlyProperties` in the CloudFormation schema. Write-only properties are not returned during read operations and have to be included in all update operations as CloudControl itself can't read their previous values.
	// In the CloudFormation schema these are fully qualified property paths (e.g. `/properties/AccessToken`) whereas here we only include the top-level property name (e.g. `AccessToken`).
	WriteOnly pulumi.StringArrayInput
}

func (ExtensionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionResourceArgs)(nil)).Elem()
}

type ExtensionResourceInput interface {
	pulumi.Input

	ToExtensionResourceOutput() ExtensionResourceOutput
	ToExtensionResourceOutputWithContext(ctx context.Context) ExtensionResourceOutput
}

func (*ExtensionResource) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionResource)(nil)).Elem()
}

func (i *ExtensionResource) ToExtensionResourceOutput() ExtensionResourceOutput {
	return i.ToExtensionResourceOutputWithContext(context.Background())
}

func (i *ExtensionResource) ToExtensionResourceOutputWithContext(ctx context.Context) ExtensionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionResourceOutput)
}

type ExtensionResourceOutput struct{ *pulumi.OutputState }

func (ExtensionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionResource)(nil)).Elem()
}

func (o ExtensionResourceOutput) ToExtensionResourceOutput() ExtensionResourceOutput {
	return o
}

func (o ExtensionResourceOutput) ToExtensionResourceOutputWithContext(ctx context.Context) ExtensionResourceOutput {
	return o
}

// Dictionary of the extension resource attributes.
func (o ExtensionResourceOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v *ExtensionResource) pulumi.MapOutput { return v.Outputs }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionResourceInput)(nil)).Elem(), &ExtensionResource{})
	pulumi.RegisterOutputType(ExtensionResourceOutput{})
}
