// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package frauddetector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A resource schema for an EventType in Amazon Fraud Detector.
type EventType struct {
	pulumi.CustomResourceState

	// The ARN of the event type.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The description of the event type.
	Description    pulumi.StringPtrOutput            `pulumi:"description"`
	EntityTypes    EventTypeEntityTypeArrayOutput    `pulumi:"entityTypes"`
	EventVariables EventTypeEventVariableArrayOutput `pulumi:"eventVariables"`
	Labels         EventTypeLabelArrayOutput         `pulumi:"labels"`
	// The time when the event type was last updated.
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// The name for the event type
	Name pulumi.StringOutput `pulumi:"name"`
	// Tags associated with this event type.
	Tags EventTypeTagArrayOutput `pulumi:"tags"`
}

// NewEventType registers a new resource with the given unique name, arguments, and options.
func NewEventType(ctx *pulumi.Context,
	name string, args *EventTypeArgs, opts ...pulumi.ResourceOption) (*EventType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityTypes == nil {
		return nil, errors.New("invalid value for required argument 'EntityTypes'")
	}
	if args.EventVariables == nil {
		return nil, errors.New("invalid value for required argument 'EventVariables'")
	}
	if args.Labels == nil {
		return nil, errors.New("invalid value for required argument 'Labels'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource EventType
	err := ctx.RegisterResource("aws-native:frauddetector:EventType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventType gets an existing EventType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventTypeState, opts ...pulumi.ResourceOption) (*EventType, error) {
	var resource EventType
	err := ctx.ReadResource("aws-native:frauddetector:EventType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventType resources.
type eventTypeState struct {
}

type EventTypeState struct {
}

func (EventTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTypeState)(nil)).Elem()
}

type eventTypeArgs struct {
	// The description of the event type.
	Description    *string                  `pulumi:"description"`
	EntityTypes    []EventTypeEntityType    `pulumi:"entityTypes"`
	EventVariables []EventTypeEventVariable `pulumi:"eventVariables"`
	Labels         []EventTypeLabel         `pulumi:"labels"`
	// The name for the event type
	Name string `pulumi:"name"`
	// Tags associated with this event type.
	Tags []EventTypeTag `pulumi:"tags"`
}

// The set of arguments for constructing a EventType resource.
type EventTypeArgs struct {
	// The description of the event type.
	Description    pulumi.StringPtrInput
	EntityTypes    EventTypeEntityTypeArrayInput
	EventVariables EventTypeEventVariableArrayInput
	Labels         EventTypeLabelArrayInput
	// The name for the event type
	Name pulumi.StringInput
	// Tags associated with this event type.
	Tags EventTypeTagArrayInput
}

func (EventTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTypeArgs)(nil)).Elem()
}

type EventTypeInput interface {
	pulumi.Input

	ToEventTypeOutput() EventTypeOutput
	ToEventTypeOutputWithContext(ctx context.Context) EventTypeOutput
}

func (*EventType) ElementType() reflect.Type {
	return reflect.TypeOf((*EventType)(nil))
}

func (i *EventType) ToEventTypeOutput() EventTypeOutput {
	return i.ToEventTypeOutputWithContext(context.Background())
}

func (i *EventType) ToEventTypeOutputWithContext(ctx context.Context) EventTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeOutput)
}

type EventTypeOutput struct{ *pulumi.OutputState }

func (EventTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventType)(nil))
}

func (o EventTypeOutput) ToEventTypeOutput() EventTypeOutput {
	return o
}

func (o EventTypeOutput) ToEventTypeOutputWithContext(ctx context.Context) EventTypeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EventTypeOutput{})
}
