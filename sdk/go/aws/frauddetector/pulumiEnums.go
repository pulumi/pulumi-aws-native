// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package frauddetector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The desired detector version status for the detector
type DetectorDetectorVersionStatus string

const (
	DetectorDetectorVersionStatusDraft  = DetectorDetectorVersionStatus("DRAFT")
	DetectorDetectorVersionStatusActive = DetectorDetectorVersionStatus("ACTIVE")
)

func (DetectorDetectorVersionStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorDetectorVersionStatus)(nil)).Elem()
}

func (e DetectorDetectorVersionStatus) ToDetectorDetectorVersionStatusOutput() DetectorDetectorVersionStatusOutput {
	return pulumi.ToOutput(e).(DetectorDetectorVersionStatusOutput)
}

func (e DetectorDetectorVersionStatus) ToDetectorDetectorVersionStatusOutputWithContext(ctx context.Context) DetectorDetectorVersionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DetectorDetectorVersionStatusOutput)
}

func (e DetectorDetectorVersionStatus) ToDetectorDetectorVersionStatusPtrOutput() DetectorDetectorVersionStatusPtrOutput {
	return e.ToDetectorDetectorVersionStatusPtrOutputWithContext(context.Background())
}

func (e DetectorDetectorVersionStatus) ToDetectorDetectorVersionStatusPtrOutputWithContext(ctx context.Context) DetectorDetectorVersionStatusPtrOutput {
	return DetectorDetectorVersionStatus(e).ToDetectorDetectorVersionStatusOutputWithContext(ctx).ToDetectorDetectorVersionStatusPtrOutputWithContext(ctx)
}

func (e DetectorDetectorVersionStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorDetectorVersionStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorDetectorVersionStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DetectorDetectorVersionStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DetectorDetectorVersionStatusOutput struct{ *pulumi.OutputState }

func (DetectorDetectorVersionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorDetectorVersionStatus)(nil)).Elem()
}

func (o DetectorDetectorVersionStatusOutput) ToDetectorDetectorVersionStatusOutput() DetectorDetectorVersionStatusOutput {
	return o
}

func (o DetectorDetectorVersionStatusOutput) ToDetectorDetectorVersionStatusOutputWithContext(ctx context.Context) DetectorDetectorVersionStatusOutput {
	return o
}

func (o DetectorDetectorVersionStatusOutput) ToDetectorDetectorVersionStatusPtrOutput() DetectorDetectorVersionStatusPtrOutput {
	return o.ToDetectorDetectorVersionStatusPtrOutputWithContext(context.Background())
}

func (o DetectorDetectorVersionStatusOutput) ToDetectorDetectorVersionStatusPtrOutputWithContext(ctx context.Context) DetectorDetectorVersionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DetectorDetectorVersionStatus) *DetectorDetectorVersionStatus {
		return &v
	}).(DetectorDetectorVersionStatusPtrOutput)
}

func (o DetectorDetectorVersionStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DetectorDetectorVersionStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorDetectorVersionStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DetectorDetectorVersionStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorDetectorVersionStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorDetectorVersionStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DetectorDetectorVersionStatusPtrOutput struct{ *pulumi.OutputState }

func (DetectorDetectorVersionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorDetectorVersionStatus)(nil)).Elem()
}

func (o DetectorDetectorVersionStatusPtrOutput) ToDetectorDetectorVersionStatusPtrOutput() DetectorDetectorVersionStatusPtrOutput {
	return o
}

func (o DetectorDetectorVersionStatusPtrOutput) ToDetectorDetectorVersionStatusPtrOutputWithContext(ctx context.Context) DetectorDetectorVersionStatusPtrOutput {
	return o
}

func (o DetectorDetectorVersionStatusPtrOutput) Elem() DetectorDetectorVersionStatusOutput {
	return o.ApplyT(func(v *DetectorDetectorVersionStatus) DetectorDetectorVersionStatus {
		if v != nil {
			return *v
		}
		var ret DetectorDetectorVersionStatus
		return ret
	}).(DetectorDetectorVersionStatusOutput)
}

func (o DetectorDetectorVersionStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorDetectorVersionStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DetectorDetectorVersionStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DetectorDetectorVersionStatusInput is an input type that accepts DetectorDetectorVersionStatusArgs and DetectorDetectorVersionStatusOutput values.
// You can construct a concrete instance of `DetectorDetectorVersionStatusInput` via:
//
//          DetectorDetectorVersionStatusArgs{...}
type DetectorDetectorVersionStatusInput interface {
	pulumi.Input

	ToDetectorDetectorVersionStatusOutput() DetectorDetectorVersionStatusOutput
	ToDetectorDetectorVersionStatusOutputWithContext(context.Context) DetectorDetectorVersionStatusOutput
}

var detectorDetectorVersionStatusPtrType = reflect.TypeOf((**DetectorDetectorVersionStatus)(nil)).Elem()

type DetectorDetectorVersionStatusPtrInput interface {
	pulumi.Input

	ToDetectorDetectorVersionStatusPtrOutput() DetectorDetectorVersionStatusPtrOutput
	ToDetectorDetectorVersionStatusPtrOutputWithContext(context.Context) DetectorDetectorVersionStatusPtrOutput
}

type detectorDetectorVersionStatusPtr string

func DetectorDetectorVersionStatusPtr(v string) DetectorDetectorVersionStatusPtrInput {
	return (*detectorDetectorVersionStatusPtr)(&v)
}

func (*detectorDetectorVersionStatusPtr) ElementType() reflect.Type {
	return detectorDetectorVersionStatusPtrType
}

func (in *detectorDetectorVersionStatusPtr) ToDetectorDetectorVersionStatusPtrOutput() DetectorDetectorVersionStatusPtrOutput {
	return pulumi.ToOutput(in).(DetectorDetectorVersionStatusPtrOutput)
}

func (in *detectorDetectorVersionStatusPtr) ToDetectorDetectorVersionStatusPtrOutputWithContext(ctx context.Context) DetectorDetectorVersionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DetectorDetectorVersionStatusPtrOutput)
}

type DetectorEventVariableDataSource string

const (
	DetectorEventVariableDataSourceEvent = DetectorEventVariableDataSource("EVENT")
)

func (DetectorEventVariableDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariableDataSource)(nil)).Elem()
}

func (e DetectorEventVariableDataSource) ToDetectorEventVariableDataSourceOutput() DetectorEventVariableDataSourceOutput {
	return pulumi.ToOutput(e).(DetectorEventVariableDataSourceOutput)
}

func (e DetectorEventVariableDataSource) ToDetectorEventVariableDataSourceOutputWithContext(ctx context.Context) DetectorEventVariableDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DetectorEventVariableDataSourceOutput)
}

func (e DetectorEventVariableDataSource) ToDetectorEventVariableDataSourcePtrOutput() DetectorEventVariableDataSourcePtrOutput {
	return e.ToDetectorEventVariableDataSourcePtrOutputWithContext(context.Background())
}

func (e DetectorEventVariableDataSource) ToDetectorEventVariableDataSourcePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataSourcePtrOutput {
	return DetectorEventVariableDataSource(e).ToDetectorEventVariableDataSourceOutputWithContext(ctx).ToDetectorEventVariableDataSourcePtrOutputWithContext(ctx)
}

func (e DetectorEventVariableDataSource) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorEventVariableDataSource) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorEventVariableDataSource) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DetectorEventVariableDataSource) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DetectorEventVariableDataSourceOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariableDataSource)(nil)).Elem()
}

func (o DetectorEventVariableDataSourceOutput) ToDetectorEventVariableDataSourceOutput() DetectorEventVariableDataSourceOutput {
	return o
}

func (o DetectorEventVariableDataSourceOutput) ToDetectorEventVariableDataSourceOutputWithContext(ctx context.Context) DetectorEventVariableDataSourceOutput {
	return o
}

func (o DetectorEventVariableDataSourceOutput) ToDetectorEventVariableDataSourcePtrOutput() DetectorEventVariableDataSourcePtrOutput {
	return o.ToDetectorEventVariableDataSourcePtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataSourceOutput) ToDetectorEventVariableDataSourcePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DetectorEventVariableDataSource) *DetectorEventVariableDataSource {
		return &v
	}).(DetectorEventVariableDataSourcePtrOutput)
}

func (o DetectorEventVariableDataSourceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataSourceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorEventVariableDataSource) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DetectorEventVariableDataSourceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataSourceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorEventVariableDataSource) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DetectorEventVariableDataSourcePtrOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorEventVariableDataSource)(nil)).Elem()
}

func (o DetectorEventVariableDataSourcePtrOutput) ToDetectorEventVariableDataSourcePtrOutput() DetectorEventVariableDataSourcePtrOutput {
	return o
}

func (o DetectorEventVariableDataSourcePtrOutput) ToDetectorEventVariableDataSourcePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataSourcePtrOutput {
	return o
}

func (o DetectorEventVariableDataSourcePtrOutput) Elem() DetectorEventVariableDataSourceOutput {
	return o.ApplyT(func(v *DetectorEventVariableDataSource) DetectorEventVariableDataSource {
		if v != nil {
			return *v
		}
		var ret DetectorEventVariableDataSource
		return ret
	}).(DetectorEventVariableDataSourceOutput)
}

func (o DetectorEventVariableDataSourcePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataSourcePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DetectorEventVariableDataSource) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DetectorEventVariableDataSourceInput is an input type that accepts DetectorEventVariableDataSourceArgs and DetectorEventVariableDataSourceOutput values.
// You can construct a concrete instance of `DetectorEventVariableDataSourceInput` via:
//
//          DetectorEventVariableDataSourceArgs{...}
type DetectorEventVariableDataSourceInput interface {
	pulumi.Input

	ToDetectorEventVariableDataSourceOutput() DetectorEventVariableDataSourceOutput
	ToDetectorEventVariableDataSourceOutputWithContext(context.Context) DetectorEventVariableDataSourceOutput
}

var detectorEventVariableDataSourcePtrType = reflect.TypeOf((**DetectorEventVariableDataSource)(nil)).Elem()

type DetectorEventVariableDataSourcePtrInput interface {
	pulumi.Input

	ToDetectorEventVariableDataSourcePtrOutput() DetectorEventVariableDataSourcePtrOutput
	ToDetectorEventVariableDataSourcePtrOutputWithContext(context.Context) DetectorEventVariableDataSourcePtrOutput
}

type detectorEventVariableDataSourcePtr string

func DetectorEventVariableDataSourcePtr(v string) DetectorEventVariableDataSourcePtrInput {
	return (*detectorEventVariableDataSourcePtr)(&v)
}

func (*detectorEventVariableDataSourcePtr) ElementType() reflect.Type {
	return detectorEventVariableDataSourcePtrType
}

func (in *detectorEventVariableDataSourcePtr) ToDetectorEventVariableDataSourcePtrOutput() DetectorEventVariableDataSourcePtrOutput {
	return pulumi.ToOutput(in).(DetectorEventVariableDataSourcePtrOutput)
}

func (in *detectorEventVariableDataSourcePtr) ToDetectorEventVariableDataSourcePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DetectorEventVariableDataSourcePtrOutput)
}

type DetectorEventVariableDataType string

const (
	DetectorEventVariableDataTypeString  = DetectorEventVariableDataType("STRING")
	DetectorEventVariableDataTypeInteger = DetectorEventVariableDataType("INTEGER")
	DetectorEventVariableDataTypeFloat   = DetectorEventVariableDataType("FLOAT")
	DetectorEventVariableDataTypeBoolean = DetectorEventVariableDataType("BOOLEAN")
)

func (DetectorEventVariableDataType) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariableDataType)(nil)).Elem()
}

func (e DetectorEventVariableDataType) ToDetectorEventVariableDataTypeOutput() DetectorEventVariableDataTypeOutput {
	return pulumi.ToOutput(e).(DetectorEventVariableDataTypeOutput)
}

func (e DetectorEventVariableDataType) ToDetectorEventVariableDataTypeOutputWithContext(ctx context.Context) DetectorEventVariableDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DetectorEventVariableDataTypeOutput)
}

func (e DetectorEventVariableDataType) ToDetectorEventVariableDataTypePtrOutput() DetectorEventVariableDataTypePtrOutput {
	return e.ToDetectorEventVariableDataTypePtrOutputWithContext(context.Background())
}

func (e DetectorEventVariableDataType) ToDetectorEventVariableDataTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataTypePtrOutput {
	return DetectorEventVariableDataType(e).ToDetectorEventVariableDataTypeOutputWithContext(ctx).ToDetectorEventVariableDataTypePtrOutputWithContext(ctx)
}

func (e DetectorEventVariableDataType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorEventVariableDataType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorEventVariableDataType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DetectorEventVariableDataType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DetectorEventVariableDataTypeOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariableDataType)(nil)).Elem()
}

func (o DetectorEventVariableDataTypeOutput) ToDetectorEventVariableDataTypeOutput() DetectorEventVariableDataTypeOutput {
	return o
}

func (o DetectorEventVariableDataTypeOutput) ToDetectorEventVariableDataTypeOutputWithContext(ctx context.Context) DetectorEventVariableDataTypeOutput {
	return o
}

func (o DetectorEventVariableDataTypeOutput) ToDetectorEventVariableDataTypePtrOutput() DetectorEventVariableDataTypePtrOutput {
	return o.ToDetectorEventVariableDataTypePtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataTypeOutput) ToDetectorEventVariableDataTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DetectorEventVariableDataType) *DetectorEventVariableDataType {
		return &v
	}).(DetectorEventVariableDataTypePtrOutput)
}

func (o DetectorEventVariableDataTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorEventVariableDataType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DetectorEventVariableDataTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorEventVariableDataType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DetectorEventVariableDataTypePtrOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorEventVariableDataType)(nil)).Elem()
}

func (o DetectorEventVariableDataTypePtrOutput) ToDetectorEventVariableDataTypePtrOutput() DetectorEventVariableDataTypePtrOutput {
	return o
}

func (o DetectorEventVariableDataTypePtrOutput) ToDetectorEventVariableDataTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataTypePtrOutput {
	return o
}

func (o DetectorEventVariableDataTypePtrOutput) Elem() DetectorEventVariableDataTypeOutput {
	return o.ApplyT(func(v *DetectorEventVariableDataType) DetectorEventVariableDataType {
		if v != nil {
			return *v
		}
		var ret DetectorEventVariableDataType
		return ret
	}).(DetectorEventVariableDataTypeOutput)
}

func (o DetectorEventVariableDataTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableDataTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DetectorEventVariableDataType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DetectorEventVariableDataTypeInput is an input type that accepts DetectorEventVariableDataTypeArgs and DetectorEventVariableDataTypeOutput values.
// You can construct a concrete instance of `DetectorEventVariableDataTypeInput` via:
//
//          DetectorEventVariableDataTypeArgs{...}
type DetectorEventVariableDataTypeInput interface {
	pulumi.Input

	ToDetectorEventVariableDataTypeOutput() DetectorEventVariableDataTypeOutput
	ToDetectorEventVariableDataTypeOutputWithContext(context.Context) DetectorEventVariableDataTypeOutput
}

var detectorEventVariableDataTypePtrType = reflect.TypeOf((**DetectorEventVariableDataType)(nil)).Elem()

type DetectorEventVariableDataTypePtrInput interface {
	pulumi.Input

	ToDetectorEventVariableDataTypePtrOutput() DetectorEventVariableDataTypePtrOutput
	ToDetectorEventVariableDataTypePtrOutputWithContext(context.Context) DetectorEventVariableDataTypePtrOutput
}

type detectorEventVariableDataTypePtr string

func DetectorEventVariableDataTypePtr(v string) DetectorEventVariableDataTypePtrInput {
	return (*detectorEventVariableDataTypePtr)(&v)
}

func (*detectorEventVariableDataTypePtr) ElementType() reflect.Type {
	return detectorEventVariableDataTypePtrType
}

func (in *detectorEventVariableDataTypePtr) ToDetectorEventVariableDataTypePtrOutput() DetectorEventVariableDataTypePtrOutput {
	return pulumi.ToOutput(in).(DetectorEventVariableDataTypePtrOutput)
}

func (in *detectorEventVariableDataTypePtr) ToDetectorEventVariableDataTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DetectorEventVariableDataTypePtrOutput)
}

type DetectorEventVariableVariableType string

const (
	DetectorEventVariableVariableTypeAuthCode          = DetectorEventVariableVariableType("AUTH_CODE")
	DetectorEventVariableVariableTypeAvs               = DetectorEventVariableVariableType("AVS")
	DetectorEventVariableVariableTypeBillingAddressL1  = DetectorEventVariableVariableType("BILLING_ADDRESS_L1")
	DetectorEventVariableVariableTypeBillingAddressL2  = DetectorEventVariableVariableType("BILLING_ADDRESS_L2")
	DetectorEventVariableVariableTypeBillingCity       = DetectorEventVariableVariableType("BILLING_CITY")
	DetectorEventVariableVariableTypeBillingCountry    = DetectorEventVariableVariableType("BILLING_COUNTRY")
	DetectorEventVariableVariableTypeBillingName       = DetectorEventVariableVariableType("BILLING_NAME")
	DetectorEventVariableVariableTypeBillingPhone      = DetectorEventVariableVariableType("BILLING_PHONE")
	DetectorEventVariableVariableTypeBillingState      = DetectorEventVariableVariableType("BILLING_STATE")
	DetectorEventVariableVariableTypeBillingZip        = DetectorEventVariableVariableType("BILLING_ZIP")
	DetectorEventVariableVariableTypeCardBin           = DetectorEventVariableVariableType("CARD_BIN")
	DetectorEventVariableVariableTypeCategorical       = DetectorEventVariableVariableType("CATEGORICAL")
	DetectorEventVariableVariableTypeCurrencyCode      = DetectorEventVariableVariableType("CURRENCY_CODE")
	DetectorEventVariableVariableTypeEmailAddress      = DetectorEventVariableVariableType("EMAIL_ADDRESS")
	DetectorEventVariableVariableTypeFingerprint       = DetectorEventVariableVariableType("FINGERPRINT")
	DetectorEventVariableVariableTypeFraudLabel        = DetectorEventVariableVariableType("FRAUD_LABEL")
	DetectorEventVariableVariableTypeFreeFormText      = DetectorEventVariableVariableType("FREE_FORM_TEXT")
	DetectorEventVariableVariableTypeIpAddress         = DetectorEventVariableVariableType("IP_ADDRESS")
	DetectorEventVariableVariableTypeNumeric           = DetectorEventVariableVariableType("NUMERIC")
	DetectorEventVariableVariableTypeOrderId           = DetectorEventVariableVariableType("ORDER_ID")
	DetectorEventVariableVariableTypePaymentType       = DetectorEventVariableVariableType("PAYMENT_TYPE")
	DetectorEventVariableVariableTypePhoneNumber       = DetectorEventVariableVariableType("PHONE_NUMBER")
	DetectorEventVariableVariableTypePrice             = DetectorEventVariableVariableType("PRICE")
	DetectorEventVariableVariableTypeProductCategory   = DetectorEventVariableVariableType("PRODUCT_CATEGORY")
	DetectorEventVariableVariableTypeShippingAddressL1 = DetectorEventVariableVariableType("SHIPPING_ADDRESS_L1")
	DetectorEventVariableVariableTypeShippingAddressL2 = DetectorEventVariableVariableType("SHIPPING_ADDRESS_L2")
	DetectorEventVariableVariableTypeShippingCity      = DetectorEventVariableVariableType("SHIPPING_CITY")
	DetectorEventVariableVariableTypeShippingCountry   = DetectorEventVariableVariableType("SHIPPING_COUNTRY")
	DetectorEventVariableVariableTypeShippingName      = DetectorEventVariableVariableType("SHIPPING_NAME")
	DetectorEventVariableVariableTypeShippingPhone     = DetectorEventVariableVariableType("SHIPPING_PHONE")
	DetectorEventVariableVariableTypeShippingState     = DetectorEventVariableVariableType("SHIPPING_STATE")
	DetectorEventVariableVariableTypeShippingZip       = DetectorEventVariableVariableType("SHIPPING_ZIP")
	DetectorEventVariableVariableTypeUseragent         = DetectorEventVariableVariableType("USERAGENT")
)

func (DetectorEventVariableVariableType) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariableVariableType)(nil)).Elem()
}

func (e DetectorEventVariableVariableType) ToDetectorEventVariableVariableTypeOutput() DetectorEventVariableVariableTypeOutput {
	return pulumi.ToOutput(e).(DetectorEventVariableVariableTypeOutput)
}

func (e DetectorEventVariableVariableType) ToDetectorEventVariableVariableTypeOutputWithContext(ctx context.Context) DetectorEventVariableVariableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DetectorEventVariableVariableTypeOutput)
}

func (e DetectorEventVariableVariableType) ToDetectorEventVariableVariableTypePtrOutput() DetectorEventVariableVariableTypePtrOutput {
	return e.ToDetectorEventVariableVariableTypePtrOutputWithContext(context.Background())
}

func (e DetectorEventVariableVariableType) ToDetectorEventVariableVariableTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableVariableTypePtrOutput {
	return DetectorEventVariableVariableType(e).ToDetectorEventVariableVariableTypeOutputWithContext(ctx).ToDetectorEventVariableVariableTypePtrOutputWithContext(ctx)
}

func (e DetectorEventVariableVariableType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorEventVariableVariableType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorEventVariableVariableType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DetectorEventVariableVariableType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DetectorEventVariableVariableTypeOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableVariableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariableVariableType)(nil)).Elem()
}

func (o DetectorEventVariableVariableTypeOutput) ToDetectorEventVariableVariableTypeOutput() DetectorEventVariableVariableTypeOutput {
	return o
}

func (o DetectorEventVariableVariableTypeOutput) ToDetectorEventVariableVariableTypeOutputWithContext(ctx context.Context) DetectorEventVariableVariableTypeOutput {
	return o
}

func (o DetectorEventVariableVariableTypeOutput) ToDetectorEventVariableVariableTypePtrOutput() DetectorEventVariableVariableTypePtrOutput {
	return o.ToDetectorEventVariableVariableTypePtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableVariableTypeOutput) ToDetectorEventVariableVariableTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableVariableTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DetectorEventVariableVariableType) *DetectorEventVariableVariableType {
		return &v
	}).(DetectorEventVariableVariableTypePtrOutput)
}

func (o DetectorEventVariableVariableTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DetectorEventVariableVariableTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorEventVariableVariableType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DetectorEventVariableVariableTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableVariableTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorEventVariableVariableType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DetectorEventVariableVariableTypePtrOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableVariableTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorEventVariableVariableType)(nil)).Elem()
}

func (o DetectorEventVariableVariableTypePtrOutput) ToDetectorEventVariableVariableTypePtrOutput() DetectorEventVariableVariableTypePtrOutput {
	return o
}

func (o DetectorEventVariableVariableTypePtrOutput) ToDetectorEventVariableVariableTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableVariableTypePtrOutput {
	return o
}

func (o DetectorEventVariableVariableTypePtrOutput) Elem() DetectorEventVariableVariableTypeOutput {
	return o.ApplyT(func(v *DetectorEventVariableVariableType) DetectorEventVariableVariableType {
		if v != nil {
			return *v
		}
		var ret DetectorEventVariableVariableType
		return ret
	}).(DetectorEventVariableVariableTypeOutput)
}

func (o DetectorEventVariableVariableTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorEventVariableVariableTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DetectorEventVariableVariableType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DetectorEventVariableVariableTypeInput is an input type that accepts DetectorEventVariableVariableTypeArgs and DetectorEventVariableVariableTypeOutput values.
// You can construct a concrete instance of `DetectorEventVariableVariableTypeInput` via:
//
//          DetectorEventVariableVariableTypeArgs{...}
type DetectorEventVariableVariableTypeInput interface {
	pulumi.Input

	ToDetectorEventVariableVariableTypeOutput() DetectorEventVariableVariableTypeOutput
	ToDetectorEventVariableVariableTypeOutputWithContext(context.Context) DetectorEventVariableVariableTypeOutput
}

var detectorEventVariableVariableTypePtrType = reflect.TypeOf((**DetectorEventVariableVariableType)(nil)).Elem()

type DetectorEventVariableVariableTypePtrInput interface {
	pulumi.Input

	ToDetectorEventVariableVariableTypePtrOutput() DetectorEventVariableVariableTypePtrOutput
	ToDetectorEventVariableVariableTypePtrOutputWithContext(context.Context) DetectorEventVariableVariableTypePtrOutput
}

type detectorEventVariableVariableTypePtr string

func DetectorEventVariableVariableTypePtr(v string) DetectorEventVariableVariableTypePtrInput {
	return (*detectorEventVariableVariableTypePtr)(&v)
}

func (*detectorEventVariableVariableTypePtr) ElementType() reflect.Type {
	return detectorEventVariableVariableTypePtrType
}

func (in *detectorEventVariableVariableTypePtr) ToDetectorEventVariableVariableTypePtrOutput() DetectorEventVariableVariableTypePtrOutput {
	return pulumi.ToOutput(in).(DetectorEventVariableVariableTypePtrOutput)
}

func (in *detectorEventVariableVariableTypePtr) ToDetectorEventVariableVariableTypePtrOutputWithContext(ctx context.Context) DetectorEventVariableVariableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DetectorEventVariableVariableTypePtrOutput)
}

type DetectorRuleExecutionMode string

const (
	DetectorRuleExecutionModeFirstMatched = DetectorRuleExecutionMode("FIRST_MATCHED")
	DetectorRuleExecutionModeAllMatched   = DetectorRuleExecutionMode("ALL_MATCHED")
)

func (DetectorRuleExecutionMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRuleExecutionMode)(nil)).Elem()
}

func (e DetectorRuleExecutionMode) ToDetectorRuleExecutionModeOutput() DetectorRuleExecutionModeOutput {
	return pulumi.ToOutput(e).(DetectorRuleExecutionModeOutput)
}

func (e DetectorRuleExecutionMode) ToDetectorRuleExecutionModeOutputWithContext(ctx context.Context) DetectorRuleExecutionModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DetectorRuleExecutionModeOutput)
}

func (e DetectorRuleExecutionMode) ToDetectorRuleExecutionModePtrOutput() DetectorRuleExecutionModePtrOutput {
	return e.ToDetectorRuleExecutionModePtrOutputWithContext(context.Background())
}

func (e DetectorRuleExecutionMode) ToDetectorRuleExecutionModePtrOutputWithContext(ctx context.Context) DetectorRuleExecutionModePtrOutput {
	return DetectorRuleExecutionMode(e).ToDetectorRuleExecutionModeOutputWithContext(ctx).ToDetectorRuleExecutionModePtrOutputWithContext(ctx)
}

func (e DetectorRuleExecutionMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorRuleExecutionMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorRuleExecutionMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DetectorRuleExecutionMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DetectorRuleExecutionModeOutput struct{ *pulumi.OutputState }

func (DetectorRuleExecutionModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRuleExecutionMode)(nil)).Elem()
}

func (o DetectorRuleExecutionModeOutput) ToDetectorRuleExecutionModeOutput() DetectorRuleExecutionModeOutput {
	return o
}

func (o DetectorRuleExecutionModeOutput) ToDetectorRuleExecutionModeOutputWithContext(ctx context.Context) DetectorRuleExecutionModeOutput {
	return o
}

func (o DetectorRuleExecutionModeOutput) ToDetectorRuleExecutionModePtrOutput() DetectorRuleExecutionModePtrOutput {
	return o.ToDetectorRuleExecutionModePtrOutputWithContext(context.Background())
}

func (o DetectorRuleExecutionModeOutput) ToDetectorRuleExecutionModePtrOutputWithContext(ctx context.Context) DetectorRuleExecutionModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DetectorRuleExecutionMode) *DetectorRuleExecutionMode {
		return &v
	}).(DetectorRuleExecutionModePtrOutput)
}

func (o DetectorRuleExecutionModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DetectorRuleExecutionModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorRuleExecutionMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DetectorRuleExecutionModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorRuleExecutionModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorRuleExecutionMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DetectorRuleExecutionModePtrOutput struct{ *pulumi.OutputState }

func (DetectorRuleExecutionModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorRuleExecutionMode)(nil)).Elem()
}

func (o DetectorRuleExecutionModePtrOutput) ToDetectorRuleExecutionModePtrOutput() DetectorRuleExecutionModePtrOutput {
	return o
}

func (o DetectorRuleExecutionModePtrOutput) ToDetectorRuleExecutionModePtrOutputWithContext(ctx context.Context) DetectorRuleExecutionModePtrOutput {
	return o
}

func (o DetectorRuleExecutionModePtrOutput) Elem() DetectorRuleExecutionModeOutput {
	return o.ApplyT(func(v *DetectorRuleExecutionMode) DetectorRuleExecutionMode {
		if v != nil {
			return *v
		}
		var ret DetectorRuleExecutionMode
		return ret
	}).(DetectorRuleExecutionModeOutput)
}

func (o DetectorRuleExecutionModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorRuleExecutionModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DetectorRuleExecutionMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DetectorRuleExecutionModeInput is an input type that accepts DetectorRuleExecutionModeArgs and DetectorRuleExecutionModeOutput values.
// You can construct a concrete instance of `DetectorRuleExecutionModeInput` via:
//
//          DetectorRuleExecutionModeArgs{...}
type DetectorRuleExecutionModeInput interface {
	pulumi.Input

	ToDetectorRuleExecutionModeOutput() DetectorRuleExecutionModeOutput
	ToDetectorRuleExecutionModeOutputWithContext(context.Context) DetectorRuleExecutionModeOutput
}

var detectorRuleExecutionModePtrType = reflect.TypeOf((**DetectorRuleExecutionMode)(nil)).Elem()

type DetectorRuleExecutionModePtrInput interface {
	pulumi.Input

	ToDetectorRuleExecutionModePtrOutput() DetectorRuleExecutionModePtrOutput
	ToDetectorRuleExecutionModePtrOutputWithContext(context.Context) DetectorRuleExecutionModePtrOutput
}

type detectorRuleExecutionModePtr string

func DetectorRuleExecutionModePtr(v string) DetectorRuleExecutionModePtrInput {
	return (*detectorRuleExecutionModePtr)(&v)
}

func (*detectorRuleExecutionModePtr) ElementType() reflect.Type {
	return detectorRuleExecutionModePtrType
}

func (in *detectorRuleExecutionModePtr) ToDetectorRuleExecutionModePtrOutput() DetectorRuleExecutionModePtrOutput {
	return pulumi.ToOutput(in).(DetectorRuleExecutionModePtrOutput)
}

func (in *detectorRuleExecutionModePtr) ToDetectorRuleExecutionModePtrOutputWithContext(ctx context.Context) DetectorRuleExecutionModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DetectorRuleExecutionModePtrOutput)
}

type DetectorRuleLanguage string

const (
	DetectorRuleLanguageDetectorpl = DetectorRuleLanguage("DETECTORPL")
)

func (DetectorRuleLanguage) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRuleLanguage)(nil)).Elem()
}

func (e DetectorRuleLanguage) ToDetectorRuleLanguageOutput() DetectorRuleLanguageOutput {
	return pulumi.ToOutput(e).(DetectorRuleLanguageOutput)
}

func (e DetectorRuleLanguage) ToDetectorRuleLanguageOutputWithContext(ctx context.Context) DetectorRuleLanguageOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DetectorRuleLanguageOutput)
}

func (e DetectorRuleLanguage) ToDetectorRuleLanguagePtrOutput() DetectorRuleLanguagePtrOutput {
	return e.ToDetectorRuleLanguagePtrOutputWithContext(context.Background())
}

func (e DetectorRuleLanguage) ToDetectorRuleLanguagePtrOutputWithContext(ctx context.Context) DetectorRuleLanguagePtrOutput {
	return DetectorRuleLanguage(e).ToDetectorRuleLanguageOutputWithContext(ctx).ToDetectorRuleLanguagePtrOutputWithContext(ctx)
}

func (e DetectorRuleLanguage) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorRuleLanguage) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DetectorRuleLanguage) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DetectorRuleLanguage) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DetectorRuleLanguageOutput struct{ *pulumi.OutputState }

func (DetectorRuleLanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRuleLanguage)(nil)).Elem()
}

func (o DetectorRuleLanguageOutput) ToDetectorRuleLanguageOutput() DetectorRuleLanguageOutput {
	return o
}

func (o DetectorRuleLanguageOutput) ToDetectorRuleLanguageOutputWithContext(ctx context.Context) DetectorRuleLanguageOutput {
	return o
}

func (o DetectorRuleLanguageOutput) ToDetectorRuleLanguagePtrOutput() DetectorRuleLanguagePtrOutput {
	return o.ToDetectorRuleLanguagePtrOutputWithContext(context.Background())
}

func (o DetectorRuleLanguageOutput) ToDetectorRuleLanguagePtrOutputWithContext(ctx context.Context) DetectorRuleLanguagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DetectorRuleLanguage) *DetectorRuleLanguage {
		return &v
	}).(DetectorRuleLanguagePtrOutput)
}

func (o DetectorRuleLanguageOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DetectorRuleLanguageOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorRuleLanguage) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DetectorRuleLanguageOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorRuleLanguageOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DetectorRuleLanguage) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DetectorRuleLanguagePtrOutput struct{ *pulumi.OutputState }

func (DetectorRuleLanguagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorRuleLanguage)(nil)).Elem()
}

func (o DetectorRuleLanguagePtrOutput) ToDetectorRuleLanguagePtrOutput() DetectorRuleLanguagePtrOutput {
	return o
}

func (o DetectorRuleLanguagePtrOutput) ToDetectorRuleLanguagePtrOutputWithContext(ctx context.Context) DetectorRuleLanguagePtrOutput {
	return o
}

func (o DetectorRuleLanguagePtrOutput) Elem() DetectorRuleLanguageOutput {
	return o.ApplyT(func(v *DetectorRuleLanguage) DetectorRuleLanguage {
		if v != nil {
			return *v
		}
		var ret DetectorRuleLanguage
		return ret
	}).(DetectorRuleLanguageOutput)
}

func (o DetectorRuleLanguagePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DetectorRuleLanguagePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DetectorRuleLanguage) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DetectorRuleLanguageInput is an input type that accepts DetectorRuleLanguageArgs and DetectorRuleLanguageOutput values.
// You can construct a concrete instance of `DetectorRuleLanguageInput` via:
//
//          DetectorRuleLanguageArgs{...}
type DetectorRuleLanguageInput interface {
	pulumi.Input

	ToDetectorRuleLanguageOutput() DetectorRuleLanguageOutput
	ToDetectorRuleLanguageOutputWithContext(context.Context) DetectorRuleLanguageOutput
}

var detectorRuleLanguagePtrType = reflect.TypeOf((**DetectorRuleLanguage)(nil)).Elem()

type DetectorRuleLanguagePtrInput interface {
	pulumi.Input

	ToDetectorRuleLanguagePtrOutput() DetectorRuleLanguagePtrOutput
	ToDetectorRuleLanguagePtrOutputWithContext(context.Context) DetectorRuleLanguagePtrOutput
}

type detectorRuleLanguagePtr string

func DetectorRuleLanguagePtr(v string) DetectorRuleLanguagePtrInput {
	return (*detectorRuleLanguagePtr)(&v)
}

func (*detectorRuleLanguagePtr) ElementType() reflect.Type {
	return detectorRuleLanguagePtrType
}

func (in *detectorRuleLanguagePtr) ToDetectorRuleLanguagePtrOutput() DetectorRuleLanguagePtrOutput {
	return pulumi.ToOutput(in).(DetectorRuleLanguagePtrOutput)
}

func (in *detectorRuleLanguagePtr) ToDetectorRuleLanguagePtrOutputWithContext(ctx context.Context) DetectorRuleLanguagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DetectorRuleLanguagePtrOutput)
}

type EventTypeEventVariableDataSource string

const (
	EventTypeEventVariableDataSourceEvent = EventTypeEventVariableDataSource("EVENT")
)

func (EventTypeEventVariableDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariableDataSource)(nil)).Elem()
}

func (e EventTypeEventVariableDataSource) ToEventTypeEventVariableDataSourceOutput() EventTypeEventVariableDataSourceOutput {
	return pulumi.ToOutput(e).(EventTypeEventVariableDataSourceOutput)
}

func (e EventTypeEventVariableDataSource) ToEventTypeEventVariableDataSourceOutputWithContext(ctx context.Context) EventTypeEventVariableDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventTypeEventVariableDataSourceOutput)
}

func (e EventTypeEventVariableDataSource) ToEventTypeEventVariableDataSourcePtrOutput() EventTypeEventVariableDataSourcePtrOutput {
	return e.ToEventTypeEventVariableDataSourcePtrOutputWithContext(context.Background())
}

func (e EventTypeEventVariableDataSource) ToEventTypeEventVariableDataSourcePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataSourcePtrOutput {
	return EventTypeEventVariableDataSource(e).ToEventTypeEventVariableDataSourceOutputWithContext(ctx).ToEventTypeEventVariableDataSourcePtrOutputWithContext(ctx)
}

func (e EventTypeEventVariableDataSource) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventTypeEventVariableDataSource) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventTypeEventVariableDataSource) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventTypeEventVariableDataSource) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventTypeEventVariableDataSourceOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariableDataSource)(nil)).Elem()
}

func (o EventTypeEventVariableDataSourceOutput) ToEventTypeEventVariableDataSourceOutput() EventTypeEventVariableDataSourceOutput {
	return o
}

func (o EventTypeEventVariableDataSourceOutput) ToEventTypeEventVariableDataSourceOutputWithContext(ctx context.Context) EventTypeEventVariableDataSourceOutput {
	return o
}

func (o EventTypeEventVariableDataSourceOutput) ToEventTypeEventVariableDataSourcePtrOutput() EventTypeEventVariableDataSourcePtrOutput {
	return o.ToEventTypeEventVariableDataSourcePtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataSourceOutput) ToEventTypeEventVariableDataSourcePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTypeEventVariableDataSource) *EventTypeEventVariableDataSource {
		return &v
	}).(EventTypeEventVariableDataSourcePtrOutput)
}

func (o EventTypeEventVariableDataSourceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataSourceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventTypeEventVariableDataSource) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventTypeEventVariableDataSourceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataSourceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventTypeEventVariableDataSource) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventTypeEventVariableDataSourcePtrOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTypeEventVariableDataSource)(nil)).Elem()
}

func (o EventTypeEventVariableDataSourcePtrOutput) ToEventTypeEventVariableDataSourcePtrOutput() EventTypeEventVariableDataSourcePtrOutput {
	return o
}

func (o EventTypeEventVariableDataSourcePtrOutput) ToEventTypeEventVariableDataSourcePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataSourcePtrOutput {
	return o
}

func (o EventTypeEventVariableDataSourcePtrOutput) Elem() EventTypeEventVariableDataSourceOutput {
	return o.ApplyT(func(v *EventTypeEventVariableDataSource) EventTypeEventVariableDataSource {
		if v != nil {
			return *v
		}
		var ret EventTypeEventVariableDataSource
		return ret
	}).(EventTypeEventVariableDataSourceOutput)
}

func (o EventTypeEventVariableDataSourcePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataSourcePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventTypeEventVariableDataSource) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventTypeEventVariableDataSourceInput is an input type that accepts EventTypeEventVariableDataSourceArgs and EventTypeEventVariableDataSourceOutput values.
// You can construct a concrete instance of `EventTypeEventVariableDataSourceInput` via:
//
//          EventTypeEventVariableDataSourceArgs{...}
type EventTypeEventVariableDataSourceInput interface {
	pulumi.Input

	ToEventTypeEventVariableDataSourceOutput() EventTypeEventVariableDataSourceOutput
	ToEventTypeEventVariableDataSourceOutputWithContext(context.Context) EventTypeEventVariableDataSourceOutput
}

var eventTypeEventVariableDataSourcePtrType = reflect.TypeOf((**EventTypeEventVariableDataSource)(nil)).Elem()

type EventTypeEventVariableDataSourcePtrInput interface {
	pulumi.Input

	ToEventTypeEventVariableDataSourcePtrOutput() EventTypeEventVariableDataSourcePtrOutput
	ToEventTypeEventVariableDataSourcePtrOutputWithContext(context.Context) EventTypeEventVariableDataSourcePtrOutput
}

type eventTypeEventVariableDataSourcePtr string

func EventTypeEventVariableDataSourcePtr(v string) EventTypeEventVariableDataSourcePtrInput {
	return (*eventTypeEventVariableDataSourcePtr)(&v)
}

func (*eventTypeEventVariableDataSourcePtr) ElementType() reflect.Type {
	return eventTypeEventVariableDataSourcePtrType
}

func (in *eventTypeEventVariableDataSourcePtr) ToEventTypeEventVariableDataSourcePtrOutput() EventTypeEventVariableDataSourcePtrOutput {
	return pulumi.ToOutput(in).(EventTypeEventVariableDataSourcePtrOutput)
}

func (in *eventTypeEventVariableDataSourcePtr) ToEventTypeEventVariableDataSourcePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventTypeEventVariableDataSourcePtrOutput)
}

type EventTypeEventVariableDataType string

const (
	EventTypeEventVariableDataTypeString  = EventTypeEventVariableDataType("STRING")
	EventTypeEventVariableDataTypeInteger = EventTypeEventVariableDataType("INTEGER")
	EventTypeEventVariableDataTypeFloat   = EventTypeEventVariableDataType("FLOAT")
	EventTypeEventVariableDataTypeBoolean = EventTypeEventVariableDataType("BOOLEAN")
)

func (EventTypeEventVariableDataType) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariableDataType)(nil)).Elem()
}

func (e EventTypeEventVariableDataType) ToEventTypeEventVariableDataTypeOutput() EventTypeEventVariableDataTypeOutput {
	return pulumi.ToOutput(e).(EventTypeEventVariableDataTypeOutput)
}

func (e EventTypeEventVariableDataType) ToEventTypeEventVariableDataTypeOutputWithContext(ctx context.Context) EventTypeEventVariableDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventTypeEventVariableDataTypeOutput)
}

func (e EventTypeEventVariableDataType) ToEventTypeEventVariableDataTypePtrOutput() EventTypeEventVariableDataTypePtrOutput {
	return e.ToEventTypeEventVariableDataTypePtrOutputWithContext(context.Background())
}

func (e EventTypeEventVariableDataType) ToEventTypeEventVariableDataTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataTypePtrOutput {
	return EventTypeEventVariableDataType(e).ToEventTypeEventVariableDataTypeOutputWithContext(ctx).ToEventTypeEventVariableDataTypePtrOutputWithContext(ctx)
}

func (e EventTypeEventVariableDataType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventTypeEventVariableDataType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventTypeEventVariableDataType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventTypeEventVariableDataType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventTypeEventVariableDataTypeOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariableDataType)(nil)).Elem()
}

func (o EventTypeEventVariableDataTypeOutput) ToEventTypeEventVariableDataTypeOutput() EventTypeEventVariableDataTypeOutput {
	return o
}

func (o EventTypeEventVariableDataTypeOutput) ToEventTypeEventVariableDataTypeOutputWithContext(ctx context.Context) EventTypeEventVariableDataTypeOutput {
	return o
}

func (o EventTypeEventVariableDataTypeOutput) ToEventTypeEventVariableDataTypePtrOutput() EventTypeEventVariableDataTypePtrOutput {
	return o.ToEventTypeEventVariableDataTypePtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataTypeOutput) ToEventTypeEventVariableDataTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTypeEventVariableDataType) *EventTypeEventVariableDataType {
		return &v
	}).(EventTypeEventVariableDataTypePtrOutput)
}

func (o EventTypeEventVariableDataTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventTypeEventVariableDataType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventTypeEventVariableDataTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventTypeEventVariableDataType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventTypeEventVariableDataTypePtrOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTypeEventVariableDataType)(nil)).Elem()
}

func (o EventTypeEventVariableDataTypePtrOutput) ToEventTypeEventVariableDataTypePtrOutput() EventTypeEventVariableDataTypePtrOutput {
	return o
}

func (o EventTypeEventVariableDataTypePtrOutput) ToEventTypeEventVariableDataTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataTypePtrOutput {
	return o
}

func (o EventTypeEventVariableDataTypePtrOutput) Elem() EventTypeEventVariableDataTypeOutput {
	return o.ApplyT(func(v *EventTypeEventVariableDataType) EventTypeEventVariableDataType {
		if v != nil {
			return *v
		}
		var ret EventTypeEventVariableDataType
		return ret
	}).(EventTypeEventVariableDataTypeOutput)
}

func (o EventTypeEventVariableDataTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableDataTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventTypeEventVariableDataType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventTypeEventVariableDataTypeInput is an input type that accepts EventTypeEventVariableDataTypeArgs and EventTypeEventVariableDataTypeOutput values.
// You can construct a concrete instance of `EventTypeEventVariableDataTypeInput` via:
//
//          EventTypeEventVariableDataTypeArgs{...}
type EventTypeEventVariableDataTypeInput interface {
	pulumi.Input

	ToEventTypeEventVariableDataTypeOutput() EventTypeEventVariableDataTypeOutput
	ToEventTypeEventVariableDataTypeOutputWithContext(context.Context) EventTypeEventVariableDataTypeOutput
}

var eventTypeEventVariableDataTypePtrType = reflect.TypeOf((**EventTypeEventVariableDataType)(nil)).Elem()

type EventTypeEventVariableDataTypePtrInput interface {
	pulumi.Input

	ToEventTypeEventVariableDataTypePtrOutput() EventTypeEventVariableDataTypePtrOutput
	ToEventTypeEventVariableDataTypePtrOutputWithContext(context.Context) EventTypeEventVariableDataTypePtrOutput
}

type eventTypeEventVariableDataTypePtr string

func EventTypeEventVariableDataTypePtr(v string) EventTypeEventVariableDataTypePtrInput {
	return (*eventTypeEventVariableDataTypePtr)(&v)
}

func (*eventTypeEventVariableDataTypePtr) ElementType() reflect.Type {
	return eventTypeEventVariableDataTypePtrType
}

func (in *eventTypeEventVariableDataTypePtr) ToEventTypeEventVariableDataTypePtrOutput() EventTypeEventVariableDataTypePtrOutput {
	return pulumi.ToOutput(in).(EventTypeEventVariableDataTypePtrOutput)
}

func (in *eventTypeEventVariableDataTypePtr) ToEventTypeEventVariableDataTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventTypeEventVariableDataTypePtrOutput)
}

type EventTypeEventVariableVariableType string

const (
	EventTypeEventVariableVariableTypeAuthCode          = EventTypeEventVariableVariableType("AUTH_CODE")
	EventTypeEventVariableVariableTypeAvs               = EventTypeEventVariableVariableType("AVS")
	EventTypeEventVariableVariableTypeBillingAddressL1  = EventTypeEventVariableVariableType("BILLING_ADDRESS_L1")
	EventTypeEventVariableVariableTypeBillingAddressL2  = EventTypeEventVariableVariableType("BILLING_ADDRESS_L2")
	EventTypeEventVariableVariableTypeBillingCity       = EventTypeEventVariableVariableType("BILLING_CITY")
	EventTypeEventVariableVariableTypeBillingCountry    = EventTypeEventVariableVariableType("BILLING_COUNTRY")
	EventTypeEventVariableVariableTypeBillingName       = EventTypeEventVariableVariableType("BILLING_NAME")
	EventTypeEventVariableVariableTypeBillingPhone      = EventTypeEventVariableVariableType("BILLING_PHONE")
	EventTypeEventVariableVariableTypeBillingState      = EventTypeEventVariableVariableType("BILLING_STATE")
	EventTypeEventVariableVariableTypeBillingZip        = EventTypeEventVariableVariableType("BILLING_ZIP")
	EventTypeEventVariableVariableTypeCardBin           = EventTypeEventVariableVariableType("CARD_BIN")
	EventTypeEventVariableVariableTypeCategorical       = EventTypeEventVariableVariableType("CATEGORICAL")
	EventTypeEventVariableVariableTypeCurrencyCode      = EventTypeEventVariableVariableType("CURRENCY_CODE")
	EventTypeEventVariableVariableTypeEmailAddress      = EventTypeEventVariableVariableType("EMAIL_ADDRESS")
	EventTypeEventVariableVariableTypeFingerprint       = EventTypeEventVariableVariableType("FINGERPRINT")
	EventTypeEventVariableVariableTypeFraudLabel        = EventTypeEventVariableVariableType("FRAUD_LABEL")
	EventTypeEventVariableVariableTypeFreeFormText      = EventTypeEventVariableVariableType("FREE_FORM_TEXT")
	EventTypeEventVariableVariableTypeIpAddress         = EventTypeEventVariableVariableType("IP_ADDRESS")
	EventTypeEventVariableVariableTypeNumeric           = EventTypeEventVariableVariableType("NUMERIC")
	EventTypeEventVariableVariableTypeOrderId           = EventTypeEventVariableVariableType("ORDER_ID")
	EventTypeEventVariableVariableTypePaymentType       = EventTypeEventVariableVariableType("PAYMENT_TYPE")
	EventTypeEventVariableVariableTypePhoneNumber       = EventTypeEventVariableVariableType("PHONE_NUMBER")
	EventTypeEventVariableVariableTypePrice             = EventTypeEventVariableVariableType("PRICE")
	EventTypeEventVariableVariableTypeProductCategory   = EventTypeEventVariableVariableType("PRODUCT_CATEGORY")
	EventTypeEventVariableVariableTypeShippingAddressL1 = EventTypeEventVariableVariableType("SHIPPING_ADDRESS_L1")
	EventTypeEventVariableVariableTypeShippingAddressL2 = EventTypeEventVariableVariableType("SHIPPING_ADDRESS_L2")
	EventTypeEventVariableVariableTypeShippingCity      = EventTypeEventVariableVariableType("SHIPPING_CITY")
	EventTypeEventVariableVariableTypeShippingCountry   = EventTypeEventVariableVariableType("SHIPPING_COUNTRY")
	EventTypeEventVariableVariableTypeShippingName      = EventTypeEventVariableVariableType("SHIPPING_NAME")
	EventTypeEventVariableVariableTypeShippingPhone     = EventTypeEventVariableVariableType("SHIPPING_PHONE")
	EventTypeEventVariableVariableTypeShippingState     = EventTypeEventVariableVariableType("SHIPPING_STATE")
	EventTypeEventVariableVariableTypeShippingZip       = EventTypeEventVariableVariableType("SHIPPING_ZIP")
	EventTypeEventVariableVariableTypeUseragent         = EventTypeEventVariableVariableType("USERAGENT")
)

func (EventTypeEventVariableVariableType) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariableVariableType)(nil)).Elem()
}

func (e EventTypeEventVariableVariableType) ToEventTypeEventVariableVariableTypeOutput() EventTypeEventVariableVariableTypeOutput {
	return pulumi.ToOutput(e).(EventTypeEventVariableVariableTypeOutput)
}

func (e EventTypeEventVariableVariableType) ToEventTypeEventVariableVariableTypeOutputWithContext(ctx context.Context) EventTypeEventVariableVariableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventTypeEventVariableVariableTypeOutput)
}

func (e EventTypeEventVariableVariableType) ToEventTypeEventVariableVariableTypePtrOutput() EventTypeEventVariableVariableTypePtrOutput {
	return e.ToEventTypeEventVariableVariableTypePtrOutputWithContext(context.Background())
}

func (e EventTypeEventVariableVariableType) ToEventTypeEventVariableVariableTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableVariableTypePtrOutput {
	return EventTypeEventVariableVariableType(e).ToEventTypeEventVariableVariableTypeOutputWithContext(ctx).ToEventTypeEventVariableVariableTypePtrOutputWithContext(ctx)
}

func (e EventTypeEventVariableVariableType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventTypeEventVariableVariableType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventTypeEventVariableVariableType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventTypeEventVariableVariableType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventTypeEventVariableVariableTypeOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableVariableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariableVariableType)(nil)).Elem()
}

func (o EventTypeEventVariableVariableTypeOutput) ToEventTypeEventVariableVariableTypeOutput() EventTypeEventVariableVariableTypeOutput {
	return o
}

func (o EventTypeEventVariableVariableTypeOutput) ToEventTypeEventVariableVariableTypeOutputWithContext(ctx context.Context) EventTypeEventVariableVariableTypeOutput {
	return o
}

func (o EventTypeEventVariableVariableTypeOutput) ToEventTypeEventVariableVariableTypePtrOutput() EventTypeEventVariableVariableTypePtrOutput {
	return o.ToEventTypeEventVariableVariableTypePtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableVariableTypeOutput) ToEventTypeEventVariableVariableTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableVariableTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTypeEventVariableVariableType) *EventTypeEventVariableVariableType {
		return &v
	}).(EventTypeEventVariableVariableTypePtrOutput)
}

func (o EventTypeEventVariableVariableTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventTypeEventVariableVariableTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventTypeEventVariableVariableType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventTypeEventVariableVariableTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableVariableTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventTypeEventVariableVariableType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventTypeEventVariableVariableTypePtrOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableVariableTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTypeEventVariableVariableType)(nil)).Elem()
}

func (o EventTypeEventVariableVariableTypePtrOutput) ToEventTypeEventVariableVariableTypePtrOutput() EventTypeEventVariableVariableTypePtrOutput {
	return o
}

func (o EventTypeEventVariableVariableTypePtrOutput) ToEventTypeEventVariableVariableTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableVariableTypePtrOutput {
	return o
}

func (o EventTypeEventVariableVariableTypePtrOutput) Elem() EventTypeEventVariableVariableTypeOutput {
	return o.ApplyT(func(v *EventTypeEventVariableVariableType) EventTypeEventVariableVariableType {
		if v != nil {
			return *v
		}
		var ret EventTypeEventVariableVariableType
		return ret
	}).(EventTypeEventVariableVariableTypeOutput)
}

func (o EventTypeEventVariableVariableTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventTypeEventVariableVariableTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventTypeEventVariableVariableType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventTypeEventVariableVariableTypeInput is an input type that accepts EventTypeEventVariableVariableTypeArgs and EventTypeEventVariableVariableTypeOutput values.
// You can construct a concrete instance of `EventTypeEventVariableVariableTypeInput` via:
//
//          EventTypeEventVariableVariableTypeArgs{...}
type EventTypeEventVariableVariableTypeInput interface {
	pulumi.Input

	ToEventTypeEventVariableVariableTypeOutput() EventTypeEventVariableVariableTypeOutput
	ToEventTypeEventVariableVariableTypeOutputWithContext(context.Context) EventTypeEventVariableVariableTypeOutput
}

var eventTypeEventVariableVariableTypePtrType = reflect.TypeOf((**EventTypeEventVariableVariableType)(nil)).Elem()

type EventTypeEventVariableVariableTypePtrInput interface {
	pulumi.Input

	ToEventTypeEventVariableVariableTypePtrOutput() EventTypeEventVariableVariableTypePtrOutput
	ToEventTypeEventVariableVariableTypePtrOutputWithContext(context.Context) EventTypeEventVariableVariableTypePtrOutput
}

type eventTypeEventVariableVariableTypePtr string

func EventTypeEventVariableVariableTypePtr(v string) EventTypeEventVariableVariableTypePtrInput {
	return (*eventTypeEventVariableVariableTypePtr)(&v)
}

func (*eventTypeEventVariableVariableTypePtr) ElementType() reflect.Type {
	return eventTypeEventVariableVariableTypePtrType
}

func (in *eventTypeEventVariableVariableTypePtr) ToEventTypeEventVariableVariableTypePtrOutput() EventTypeEventVariableVariableTypePtrOutput {
	return pulumi.ToOutput(in).(EventTypeEventVariableVariableTypePtrOutput)
}

func (in *eventTypeEventVariableVariableTypePtr) ToEventTypeEventVariableVariableTypePtrOutputWithContext(ctx context.Context) EventTypeEventVariableVariableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventTypeEventVariableVariableTypePtrOutput)
}

// The source of the data.
type VariableDataSource string

const (
	VariableDataSourceEvent              = VariableDataSource("EVENT")
	VariableDataSourceExternalModelScore = VariableDataSource("EXTERNAL_MODEL_SCORE")
)

func (VariableDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDataSource)(nil)).Elem()
}

func (e VariableDataSource) ToVariableDataSourceOutput() VariableDataSourceOutput {
	return pulumi.ToOutput(e).(VariableDataSourceOutput)
}

func (e VariableDataSource) ToVariableDataSourceOutputWithContext(ctx context.Context) VariableDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VariableDataSourceOutput)
}

func (e VariableDataSource) ToVariableDataSourcePtrOutput() VariableDataSourcePtrOutput {
	return e.ToVariableDataSourcePtrOutputWithContext(context.Background())
}

func (e VariableDataSource) ToVariableDataSourcePtrOutputWithContext(ctx context.Context) VariableDataSourcePtrOutput {
	return VariableDataSource(e).ToVariableDataSourceOutputWithContext(ctx).ToVariableDataSourcePtrOutputWithContext(ctx)
}

func (e VariableDataSource) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VariableDataSource) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VariableDataSource) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VariableDataSource) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VariableDataSourceOutput struct{ *pulumi.OutputState }

func (VariableDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDataSource)(nil)).Elem()
}

func (o VariableDataSourceOutput) ToVariableDataSourceOutput() VariableDataSourceOutput {
	return o
}

func (o VariableDataSourceOutput) ToVariableDataSourceOutputWithContext(ctx context.Context) VariableDataSourceOutput {
	return o
}

func (o VariableDataSourceOutput) ToVariableDataSourcePtrOutput() VariableDataSourcePtrOutput {
	return o.ToVariableDataSourcePtrOutputWithContext(context.Background())
}

func (o VariableDataSourceOutput) ToVariableDataSourcePtrOutputWithContext(ctx context.Context) VariableDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VariableDataSource) *VariableDataSource {
		return &v
	}).(VariableDataSourcePtrOutput)
}

func (o VariableDataSourceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VariableDataSourceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VariableDataSource) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VariableDataSourceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariableDataSourceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VariableDataSource) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VariableDataSourcePtrOutput struct{ *pulumi.OutputState }

func (VariableDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableDataSource)(nil)).Elem()
}

func (o VariableDataSourcePtrOutput) ToVariableDataSourcePtrOutput() VariableDataSourcePtrOutput {
	return o
}

func (o VariableDataSourcePtrOutput) ToVariableDataSourcePtrOutputWithContext(ctx context.Context) VariableDataSourcePtrOutput {
	return o
}

func (o VariableDataSourcePtrOutput) Elem() VariableDataSourceOutput {
	return o.ApplyT(func(v *VariableDataSource) VariableDataSource {
		if v != nil {
			return *v
		}
		var ret VariableDataSource
		return ret
	}).(VariableDataSourceOutput)
}

func (o VariableDataSourcePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariableDataSourcePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VariableDataSource) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VariableDataSourceInput is an input type that accepts VariableDataSourceArgs and VariableDataSourceOutput values.
// You can construct a concrete instance of `VariableDataSourceInput` via:
//
//          VariableDataSourceArgs{...}
type VariableDataSourceInput interface {
	pulumi.Input

	ToVariableDataSourceOutput() VariableDataSourceOutput
	ToVariableDataSourceOutputWithContext(context.Context) VariableDataSourceOutput
}

var variableDataSourcePtrType = reflect.TypeOf((**VariableDataSource)(nil)).Elem()

type VariableDataSourcePtrInput interface {
	pulumi.Input

	ToVariableDataSourcePtrOutput() VariableDataSourcePtrOutput
	ToVariableDataSourcePtrOutputWithContext(context.Context) VariableDataSourcePtrOutput
}

type variableDataSourcePtr string

func VariableDataSourcePtr(v string) VariableDataSourcePtrInput {
	return (*variableDataSourcePtr)(&v)
}

func (*variableDataSourcePtr) ElementType() reflect.Type {
	return variableDataSourcePtrType
}

func (in *variableDataSourcePtr) ToVariableDataSourcePtrOutput() VariableDataSourcePtrOutput {
	return pulumi.ToOutput(in).(VariableDataSourcePtrOutput)
}

func (in *variableDataSourcePtr) ToVariableDataSourcePtrOutputWithContext(ctx context.Context) VariableDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VariableDataSourcePtrOutput)
}

// The data type.
type VariableDataType string

const (
	VariableDataTypeString  = VariableDataType("STRING")
	VariableDataTypeInteger = VariableDataType("INTEGER")
	VariableDataTypeFloat   = VariableDataType("FLOAT")
	VariableDataTypeBoolean = VariableDataType("BOOLEAN")
)

func (VariableDataType) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDataType)(nil)).Elem()
}

func (e VariableDataType) ToVariableDataTypeOutput() VariableDataTypeOutput {
	return pulumi.ToOutput(e).(VariableDataTypeOutput)
}

func (e VariableDataType) ToVariableDataTypeOutputWithContext(ctx context.Context) VariableDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VariableDataTypeOutput)
}

func (e VariableDataType) ToVariableDataTypePtrOutput() VariableDataTypePtrOutput {
	return e.ToVariableDataTypePtrOutputWithContext(context.Background())
}

func (e VariableDataType) ToVariableDataTypePtrOutputWithContext(ctx context.Context) VariableDataTypePtrOutput {
	return VariableDataType(e).ToVariableDataTypeOutputWithContext(ctx).ToVariableDataTypePtrOutputWithContext(ctx)
}

func (e VariableDataType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VariableDataType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VariableDataType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VariableDataType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VariableDataTypeOutput struct{ *pulumi.OutputState }

func (VariableDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDataType)(nil)).Elem()
}

func (o VariableDataTypeOutput) ToVariableDataTypeOutput() VariableDataTypeOutput {
	return o
}

func (o VariableDataTypeOutput) ToVariableDataTypeOutputWithContext(ctx context.Context) VariableDataTypeOutput {
	return o
}

func (o VariableDataTypeOutput) ToVariableDataTypePtrOutput() VariableDataTypePtrOutput {
	return o.ToVariableDataTypePtrOutputWithContext(context.Background())
}

func (o VariableDataTypeOutput) ToVariableDataTypePtrOutputWithContext(ctx context.Context) VariableDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VariableDataType) *VariableDataType {
		return &v
	}).(VariableDataTypePtrOutput)
}

func (o VariableDataTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VariableDataTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VariableDataType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VariableDataTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariableDataTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VariableDataType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VariableDataTypePtrOutput struct{ *pulumi.OutputState }

func (VariableDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableDataType)(nil)).Elem()
}

func (o VariableDataTypePtrOutput) ToVariableDataTypePtrOutput() VariableDataTypePtrOutput {
	return o
}

func (o VariableDataTypePtrOutput) ToVariableDataTypePtrOutputWithContext(ctx context.Context) VariableDataTypePtrOutput {
	return o
}

func (o VariableDataTypePtrOutput) Elem() VariableDataTypeOutput {
	return o.ApplyT(func(v *VariableDataType) VariableDataType {
		if v != nil {
			return *v
		}
		var ret VariableDataType
		return ret
	}).(VariableDataTypeOutput)
}

func (o VariableDataTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariableDataTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VariableDataType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VariableDataTypeInput is an input type that accepts VariableDataTypeArgs and VariableDataTypeOutput values.
// You can construct a concrete instance of `VariableDataTypeInput` via:
//
//          VariableDataTypeArgs{...}
type VariableDataTypeInput interface {
	pulumi.Input

	ToVariableDataTypeOutput() VariableDataTypeOutput
	ToVariableDataTypeOutputWithContext(context.Context) VariableDataTypeOutput
}

var variableDataTypePtrType = reflect.TypeOf((**VariableDataType)(nil)).Elem()

type VariableDataTypePtrInput interface {
	pulumi.Input

	ToVariableDataTypePtrOutput() VariableDataTypePtrOutput
	ToVariableDataTypePtrOutputWithContext(context.Context) VariableDataTypePtrOutput
}

type variableDataTypePtr string

func VariableDataTypePtr(v string) VariableDataTypePtrInput {
	return (*variableDataTypePtr)(&v)
}

func (*variableDataTypePtr) ElementType() reflect.Type {
	return variableDataTypePtrType
}

func (in *variableDataTypePtr) ToVariableDataTypePtrOutput() VariableDataTypePtrOutput {
	return pulumi.ToOutput(in).(VariableDataTypePtrOutput)
}

func (in *variableDataTypePtr) ToVariableDataTypePtrOutputWithContext(ctx context.Context) VariableDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VariableDataTypePtrOutput)
}

// The variable type. For more information see https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types
type VariableVariableType string

const (
	VariableVariableTypeAuthCode          = VariableVariableType("AUTH_CODE")
	VariableVariableTypeAvs               = VariableVariableType("AVS")
	VariableVariableTypeBillingAddressL1  = VariableVariableType("BILLING_ADDRESS_L1")
	VariableVariableTypeBillingAddressL2  = VariableVariableType("BILLING_ADDRESS_L2")
	VariableVariableTypeBillingCity       = VariableVariableType("BILLING_CITY")
	VariableVariableTypeBillingCountry    = VariableVariableType("BILLING_COUNTRY")
	VariableVariableTypeBillingName       = VariableVariableType("BILLING_NAME")
	VariableVariableTypeBillingPhone      = VariableVariableType("BILLING_PHONE")
	VariableVariableTypeBillingState      = VariableVariableType("BILLING_STATE")
	VariableVariableTypeBillingZip        = VariableVariableType("BILLING_ZIP")
	VariableVariableTypeCardBin           = VariableVariableType("CARD_BIN")
	VariableVariableTypeCategorical       = VariableVariableType("CATEGORICAL")
	VariableVariableTypeCurrencyCode      = VariableVariableType("CURRENCY_CODE")
	VariableVariableTypeEmailAddress      = VariableVariableType("EMAIL_ADDRESS")
	VariableVariableTypeFingerprint       = VariableVariableType("FINGERPRINT")
	VariableVariableTypeFraudLabel        = VariableVariableType("FRAUD_LABEL")
	VariableVariableTypeFreeFormText      = VariableVariableType("FREE_FORM_TEXT")
	VariableVariableTypeIpAddress         = VariableVariableType("IP_ADDRESS")
	VariableVariableTypeNumeric           = VariableVariableType("NUMERIC")
	VariableVariableTypeOrderId           = VariableVariableType("ORDER_ID")
	VariableVariableTypePaymentType       = VariableVariableType("PAYMENT_TYPE")
	VariableVariableTypePhoneNumber       = VariableVariableType("PHONE_NUMBER")
	VariableVariableTypePrice             = VariableVariableType("PRICE")
	VariableVariableTypeProductCategory   = VariableVariableType("PRODUCT_CATEGORY")
	VariableVariableTypeShippingAddressL1 = VariableVariableType("SHIPPING_ADDRESS_L1")
	VariableVariableTypeShippingAddressL2 = VariableVariableType("SHIPPING_ADDRESS_L2")
	VariableVariableTypeShippingCity      = VariableVariableType("SHIPPING_CITY")
	VariableVariableTypeShippingCountry   = VariableVariableType("SHIPPING_COUNTRY")
	VariableVariableTypeShippingName      = VariableVariableType("SHIPPING_NAME")
	VariableVariableTypeShippingPhone     = VariableVariableType("SHIPPING_PHONE")
	VariableVariableTypeShippingState     = VariableVariableType("SHIPPING_STATE")
	VariableVariableTypeShippingZip       = VariableVariableType("SHIPPING_ZIP")
	VariableVariableTypeUseragent         = VariableVariableType("USERAGENT")
)

func (VariableVariableType) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableVariableType)(nil)).Elem()
}

func (e VariableVariableType) ToVariableVariableTypeOutput() VariableVariableTypeOutput {
	return pulumi.ToOutput(e).(VariableVariableTypeOutput)
}

func (e VariableVariableType) ToVariableVariableTypeOutputWithContext(ctx context.Context) VariableVariableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VariableVariableTypeOutput)
}

func (e VariableVariableType) ToVariableVariableTypePtrOutput() VariableVariableTypePtrOutput {
	return e.ToVariableVariableTypePtrOutputWithContext(context.Background())
}

func (e VariableVariableType) ToVariableVariableTypePtrOutputWithContext(ctx context.Context) VariableVariableTypePtrOutput {
	return VariableVariableType(e).ToVariableVariableTypeOutputWithContext(ctx).ToVariableVariableTypePtrOutputWithContext(ctx)
}

func (e VariableVariableType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VariableVariableType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VariableVariableType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VariableVariableType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VariableVariableTypeOutput struct{ *pulumi.OutputState }

func (VariableVariableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableVariableType)(nil)).Elem()
}

func (o VariableVariableTypeOutput) ToVariableVariableTypeOutput() VariableVariableTypeOutput {
	return o
}

func (o VariableVariableTypeOutput) ToVariableVariableTypeOutputWithContext(ctx context.Context) VariableVariableTypeOutput {
	return o
}

func (o VariableVariableTypeOutput) ToVariableVariableTypePtrOutput() VariableVariableTypePtrOutput {
	return o.ToVariableVariableTypePtrOutputWithContext(context.Background())
}

func (o VariableVariableTypeOutput) ToVariableVariableTypePtrOutputWithContext(ctx context.Context) VariableVariableTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VariableVariableType) *VariableVariableType {
		return &v
	}).(VariableVariableTypePtrOutput)
}

func (o VariableVariableTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VariableVariableTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VariableVariableType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VariableVariableTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariableVariableTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VariableVariableType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VariableVariableTypePtrOutput struct{ *pulumi.OutputState }

func (VariableVariableTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableVariableType)(nil)).Elem()
}

func (o VariableVariableTypePtrOutput) ToVariableVariableTypePtrOutput() VariableVariableTypePtrOutput {
	return o
}

func (o VariableVariableTypePtrOutput) ToVariableVariableTypePtrOutputWithContext(ctx context.Context) VariableVariableTypePtrOutput {
	return o
}

func (o VariableVariableTypePtrOutput) Elem() VariableVariableTypeOutput {
	return o.ApplyT(func(v *VariableVariableType) VariableVariableType {
		if v != nil {
			return *v
		}
		var ret VariableVariableType
		return ret
	}).(VariableVariableTypeOutput)
}

func (o VariableVariableTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VariableVariableTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VariableVariableType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VariableVariableTypeInput is an input type that accepts VariableVariableTypeArgs and VariableVariableTypeOutput values.
// You can construct a concrete instance of `VariableVariableTypeInput` via:
//
//          VariableVariableTypeArgs{...}
type VariableVariableTypeInput interface {
	pulumi.Input

	ToVariableVariableTypeOutput() VariableVariableTypeOutput
	ToVariableVariableTypeOutputWithContext(context.Context) VariableVariableTypeOutput
}

var variableVariableTypePtrType = reflect.TypeOf((**VariableVariableType)(nil)).Elem()

type VariableVariableTypePtrInput interface {
	pulumi.Input

	ToVariableVariableTypePtrOutput() VariableVariableTypePtrOutput
	ToVariableVariableTypePtrOutputWithContext(context.Context) VariableVariableTypePtrOutput
}

type variableVariableTypePtr string

func VariableVariableTypePtr(v string) VariableVariableTypePtrInput {
	return (*variableVariableTypePtr)(&v)
}

func (*variableVariableTypePtr) ElementType() reflect.Type {
	return variableVariableTypePtrType
}

func (in *variableVariableTypePtr) ToVariableVariableTypePtrOutput() VariableVariableTypePtrOutput {
	return pulumi.ToOutput(in).(VariableVariableTypePtrOutput)
}

func (in *variableVariableTypePtr) ToVariableVariableTypePtrOutputWithContext(ctx context.Context) VariableVariableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VariableVariableTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DetectorDetectorVersionStatusOutput{})
	pulumi.RegisterOutputType(DetectorDetectorVersionStatusPtrOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableDataSourceOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableDataSourcePtrOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableDataTypeOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableDataTypePtrOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableVariableTypeOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableVariableTypePtrOutput{})
	pulumi.RegisterOutputType(DetectorRuleExecutionModeOutput{})
	pulumi.RegisterOutputType(DetectorRuleExecutionModePtrOutput{})
	pulumi.RegisterOutputType(DetectorRuleLanguageOutput{})
	pulumi.RegisterOutputType(DetectorRuleLanguagePtrOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableDataSourceOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableDataSourcePtrOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableDataTypeOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableDataTypePtrOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableVariableTypeOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableVariableTypePtrOutput{})
	pulumi.RegisterOutputType(VariableDataSourceOutput{})
	pulumi.RegisterOutputType(VariableDataSourcePtrOutput{})
	pulumi.RegisterOutputType(VariableDataTypeOutput{})
	pulumi.RegisterOutputType(VariableDataTypePtrOutput{})
	pulumi.RegisterOutputType(VariableVariableTypeOutput{})
	pulumi.RegisterOutputType(VariableVariableTypePtrOutput{})
}
