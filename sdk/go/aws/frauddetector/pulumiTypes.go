// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package frauddetector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DetectorEntityType struct {
	// The entity type ARN.
	Arn *string `pulumi:"arn"`
	// The time when the entity type was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The description.
	Description *string `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these Variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The time when the entity type was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The entity type name.
	Name *string `pulumi:"name"`
	// Tags associated with this entity type.
	Tags []DetectorTag `pulumi:"tags"`
}

// DetectorEntityTypeInput is an input type that accepts DetectorEntityTypeArgs and DetectorEntityTypeOutput values.
// You can construct a concrete instance of `DetectorEntityTypeInput` via:
//
//	DetectorEntityTypeArgs{...}
type DetectorEntityTypeInput interface {
	pulumi.Input

	ToDetectorEntityTypeOutput() DetectorEntityTypeOutput
	ToDetectorEntityTypeOutputWithContext(context.Context) DetectorEntityTypeOutput
}

type DetectorEntityTypeArgs struct {
	// The entity type ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the entity type was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these Variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The time when the entity type was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The entity type name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this entity type.
	Tags DetectorTagArrayInput `pulumi:"tags"`
}

func (DetectorEntityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEntityType)(nil)).Elem()
}

func (i DetectorEntityTypeArgs) ToDetectorEntityTypeOutput() DetectorEntityTypeOutput {
	return i.ToDetectorEntityTypeOutputWithContext(context.Background())
}

func (i DetectorEntityTypeArgs) ToDetectorEntityTypeOutputWithContext(ctx context.Context) DetectorEntityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorEntityTypeOutput)
}

// DetectorEntityTypeArrayInput is an input type that accepts DetectorEntityTypeArray and DetectorEntityTypeArrayOutput values.
// You can construct a concrete instance of `DetectorEntityTypeArrayInput` via:
//
//	DetectorEntityTypeArray{ DetectorEntityTypeArgs{...} }
type DetectorEntityTypeArrayInput interface {
	pulumi.Input

	ToDetectorEntityTypeArrayOutput() DetectorEntityTypeArrayOutput
	ToDetectorEntityTypeArrayOutputWithContext(context.Context) DetectorEntityTypeArrayOutput
}

type DetectorEntityTypeArray []DetectorEntityTypeInput

func (DetectorEntityTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorEntityType)(nil)).Elem()
}

func (i DetectorEntityTypeArray) ToDetectorEntityTypeArrayOutput() DetectorEntityTypeArrayOutput {
	return i.ToDetectorEntityTypeArrayOutputWithContext(context.Background())
}

func (i DetectorEntityTypeArray) ToDetectorEntityTypeArrayOutputWithContext(ctx context.Context) DetectorEntityTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorEntityTypeArrayOutput)
}

type DetectorEntityTypeOutput struct{ *pulumi.OutputState }

func (DetectorEntityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEntityType)(nil)).Elem()
}

func (o DetectorEntityTypeOutput) ToDetectorEntityTypeOutput() DetectorEntityTypeOutput {
	return o
}

func (o DetectorEntityTypeOutput) ToDetectorEntityTypeOutputWithContext(ctx context.Context) DetectorEntityTypeOutput {
	return o
}

// The entity type ARN.
func (o DetectorEntityTypeOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEntityType) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the entity type was created.
func (o DetectorEntityTypeOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEntityType) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The description.
func (o DetectorEntityTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEntityType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these Variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
func (o DetectorEntityTypeOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DetectorEntityType) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The time when the entity type was last updated.
func (o DetectorEntityTypeOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEntityType) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The entity type name.
func (o DetectorEntityTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEntityType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this entity type.
func (o DetectorEntityTypeOutput) Tags() DetectorTagArrayOutput {
	return o.ApplyT(func(v DetectorEntityType) []DetectorTag { return v.Tags }).(DetectorTagArrayOutput)
}

type DetectorEntityTypeArrayOutput struct{ *pulumi.OutputState }

func (DetectorEntityTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorEntityType)(nil)).Elem()
}

func (o DetectorEntityTypeArrayOutput) ToDetectorEntityTypeArrayOutput() DetectorEntityTypeArrayOutput {
	return o
}

func (o DetectorEntityTypeArrayOutput) ToDetectorEntityTypeArrayOutputWithContext(ctx context.Context) DetectorEntityTypeArrayOutput {
	return o
}

func (o DetectorEntityTypeArrayOutput) Index(i pulumi.IntInput) DetectorEntityTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorEntityType {
		return vs[0].([]DetectorEntityType)[vs[1].(int)]
	}).(DetectorEntityTypeOutput)
}

type DetectorEventType struct {
	// The ARN of the event type.
	Arn *string `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The description of the event type.
	Description *string `pulumi:"description"`
	// The entity type details.
	EntityTypes []DetectorEntityType `pulumi:"entityTypes"`
	// The event type variable for the detector.
	EventVariables []DetectorEventVariable `pulumi:"eventVariables"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The label details.
	Labels []DetectorLabel `pulumi:"labels"`
	// The time when the event type was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The name for the event type
	Name *string `pulumi:"name"`
	// Tags associated with this event type.
	Tags []DetectorTag `pulumi:"tags"`
}

// DetectorEventTypeInput is an input type that accepts DetectorEventTypeArgs and DetectorEventTypeOutput values.
// You can construct a concrete instance of `DetectorEventTypeInput` via:
//
//	DetectorEventTypeArgs{...}
type DetectorEventTypeInput interface {
	pulumi.Input

	ToDetectorEventTypeOutput() DetectorEventTypeOutput
	ToDetectorEventTypeOutputWithContext(context.Context) DetectorEventTypeOutput
}

type DetectorEventTypeArgs struct {
	// The ARN of the event type.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The description of the event type.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The entity type details.
	EntityTypes DetectorEntityTypeArrayInput `pulumi:"entityTypes"`
	// The event type variable for the detector.
	EventVariables DetectorEventVariableArrayInput `pulumi:"eventVariables"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The label details.
	Labels DetectorLabelArrayInput `pulumi:"labels"`
	// The time when the event type was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The name for the event type
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this event type.
	Tags DetectorTagArrayInput `pulumi:"tags"`
}

func (DetectorEventTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventType)(nil)).Elem()
}

func (i DetectorEventTypeArgs) ToDetectorEventTypeOutput() DetectorEventTypeOutput {
	return i.ToDetectorEventTypeOutputWithContext(context.Background())
}

func (i DetectorEventTypeArgs) ToDetectorEventTypeOutputWithContext(ctx context.Context) DetectorEventTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorEventTypeOutput)
}

type DetectorEventTypeOutput struct{ *pulumi.OutputState }

func (DetectorEventTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventType)(nil)).Elem()
}

func (o DetectorEventTypeOutput) ToDetectorEventTypeOutput() DetectorEventTypeOutput {
	return o
}

func (o DetectorEventTypeOutput) ToDetectorEventTypeOutputWithContext(ctx context.Context) DetectorEventTypeOutput {
	return o
}

// The ARN of the event type.
func (o DetectorEventTypeOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventType) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the event type was created.
func (o DetectorEventTypeOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventType) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The description of the event type.
func (o DetectorEventTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The entity type details.
func (o DetectorEventTypeOutput) EntityTypes() DetectorEntityTypeArrayOutput {
	return o.ApplyT(func(v DetectorEventType) []DetectorEntityType { return v.EntityTypes }).(DetectorEntityTypeArrayOutput)
}

// The event type variable for the detector.
func (o DetectorEventTypeOutput) EventVariables() DetectorEventVariableArrayOutput {
	return o.ApplyT(func(v DetectorEventType) []DetectorEventVariable { return v.EventVariables }).(DetectorEventVariableArrayOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
func (o DetectorEventTypeOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DetectorEventType) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The label details.
func (o DetectorEventTypeOutput) Labels() DetectorLabelArrayOutput {
	return o.ApplyT(func(v DetectorEventType) []DetectorLabel { return v.Labels }).(DetectorLabelArrayOutput)
}

// The time when the event type was last updated.
func (o DetectorEventTypeOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventType) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The name for the event type
func (o DetectorEventTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this event type.
func (o DetectorEventTypeOutput) Tags() DetectorTagArrayOutput {
	return o.ApplyT(func(v DetectorEventType) []DetectorTag { return v.Tags }).(DetectorTagArrayOutput)
}

type DetectorEventTypePtrOutput struct{ *pulumi.OutputState }

func (DetectorEventTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorEventType)(nil)).Elem()
}

func (o DetectorEventTypePtrOutput) ToDetectorEventTypePtrOutput() DetectorEventTypePtrOutput {
	return o
}

func (o DetectorEventTypePtrOutput) ToDetectorEventTypePtrOutputWithContext(ctx context.Context) DetectorEventTypePtrOutput {
	return o
}

func (o DetectorEventTypePtrOutput) Elem() DetectorEventTypeOutput {
	return o.ApplyT(func(v *DetectorEventType) DetectorEventType {
		if v != nil {
			return *v
		}
		var ret DetectorEventType
		return ret
	}).(DetectorEventTypeOutput)
}

// The ARN of the event type.
func (o DetectorEventTypePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorEventType) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// The time when the event type was created.
func (o DetectorEventTypePtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorEventType) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// The description of the event type.
func (o DetectorEventTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorEventType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The entity type details.
func (o DetectorEventTypePtrOutput) EntityTypes() DetectorEntityTypeArrayOutput {
	return o.ApplyT(func(v *DetectorEventType) []DetectorEntityType {
		if v == nil {
			return nil
		}
		return v.EntityTypes
	}).(DetectorEntityTypeArrayOutput)
}

// The event type variable for the detector.
func (o DetectorEventTypePtrOutput) EventVariables() DetectorEventVariableArrayOutput {
	return o.ApplyT(func(v *DetectorEventType) []DetectorEventVariable {
		if v == nil {
			return nil
		}
		return v.EventVariables
	}).(DetectorEventVariableArrayOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
func (o DetectorEventTypePtrOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DetectorEventType) *bool {
		if v == nil {
			return nil
		}
		return v.Inline
	}).(pulumi.BoolPtrOutput)
}

// The label details.
func (o DetectorEventTypePtrOutput) Labels() DetectorLabelArrayOutput {
	return o.ApplyT(func(v *DetectorEventType) []DetectorLabel {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(DetectorLabelArrayOutput)
}

// The time when the event type was last updated.
func (o DetectorEventTypePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorEventType) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// The name for the event type
func (o DetectorEventTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorEventType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags associated with this event type.
func (o DetectorEventTypePtrOutput) Tags() DetectorTagArrayOutput {
	return o.ApplyT(func(v *DetectorEventType) []DetectorTag {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(DetectorTagArrayOutput)
}

type DetectorEventVariable struct {
	// The event variable ARN.
	Arn *string `pulumi:"arn"`
	// The time when the event variable was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The data source of the event variable.
	//
	// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
	//
	// When defining a variable within a detector, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
	DataSource *DetectorEventVariableDataSource `pulumi:"dataSource"`
	// The data type of the event variable.
	//
	// Valid values: `STRING | INTEGER | BOOLEAN | FLOAT`
	DataType *DetectorEventVariableDataType `pulumi:"dataType"`
	// The default value of the event variable. This is required if you are providing the details of your variables instead of the ARN.
	DefaultValue *string `pulumi:"defaultValue"`
	// The description.
	Description *string `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The time when the event variable was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The name of the event variable.
	Name *string `pulumi:"name"`
	// Tags associated with this event variable.
	Tags []DetectorTag `pulumi:"tags"`
	// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types) .
	VariableType *DetectorEventVariableVariableType `pulumi:"variableType"`
}

// DetectorEventVariableInput is an input type that accepts DetectorEventVariableArgs and DetectorEventVariableOutput values.
// You can construct a concrete instance of `DetectorEventVariableInput` via:
//
//	DetectorEventVariableArgs{...}
type DetectorEventVariableInput interface {
	pulumi.Input

	ToDetectorEventVariableOutput() DetectorEventVariableOutput
	ToDetectorEventVariableOutputWithContext(context.Context) DetectorEventVariableOutput
}

type DetectorEventVariableArgs struct {
	// The event variable ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the event variable was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The data source of the event variable.
	//
	// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
	//
	// When defining a variable within a detector, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
	DataSource DetectorEventVariableDataSourcePtrInput `pulumi:"dataSource"`
	// The data type of the event variable.
	//
	// Valid values: `STRING | INTEGER | BOOLEAN | FLOAT`
	DataType DetectorEventVariableDataTypePtrInput `pulumi:"dataType"`
	// The default value of the event variable. This is required if you are providing the details of your variables instead of the ARN.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The time when the event variable was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The name of the event variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this event variable.
	Tags DetectorTagArrayInput `pulumi:"tags"`
	// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types) .
	VariableType DetectorEventVariableVariableTypePtrInput `pulumi:"variableType"`
}

func (DetectorEventVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariable)(nil)).Elem()
}

func (i DetectorEventVariableArgs) ToDetectorEventVariableOutput() DetectorEventVariableOutput {
	return i.ToDetectorEventVariableOutputWithContext(context.Background())
}

func (i DetectorEventVariableArgs) ToDetectorEventVariableOutputWithContext(ctx context.Context) DetectorEventVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorEventVariableOutput)
}

// DetectorEventVariableArrayInput is an input type that accepts DetectorEventVariableArray and DetectorEventVariableArrayOutput values.
// You can construct a concrete instance of `DetectorEventVariableArrayInput` via:
//
//	DetectorEventVariableArray{ DetectorEventVariableArgs{...} }
type DetectorEventVariableArrayInput interface {
	pulumi.Input

	ToDetectorEventVariableArrayOutput() DetectorEventVariableArrayOutput
	ToDetectorEventVariableArrayOutputWithContext(context.Context) DetectorEventVariableArrayOutput
}

type DetectorEventVariableArray []DetectorEventVariableInput

func (DetectorEventVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorEventVariable)(nil)).Elem()
}

func (i DetectorEventVariableArray) ToDetectorEventVariableArrayOutput() DetectorEventVariableArrayOutput {
	return i.ToDetectorEventVariableArrayOutputWithContext(context.Background())
}

func (i DetectorEventVariableArray) ToDetectorEventVariableArrayOutputWithContext(ctx context.Context) DetectorEventVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorEventVariableArrayOutput)
}

type DetectorEventVariableOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorEventVariable)(nil)).Elem()
}

func (o DetectorEventVariableOutput) ToDetectorEventVariableOutput() DetectorEventVariableOutput {
	return o
}

func (o DetectorEventVariableOutput) ToDetectorEventVariableOutputWithContext(ctx context.Context) DetectorEventVariableOutput {
	return o
}

// The event variable ARN.
func (o DetectorEventVariableOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the event variable was created.
func (o DetectorEventVariableOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The data source of the event variable.
//
// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
//
// When defining a variable within a detector, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
func (o DetectorEventVariableOutput) DataSource() DetectorEventVariableDataSourcePtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *DetectorEventVariableDataSource { return v.DataSource }).(DetectorEventVariableDataSourcePtrOutput)
}

// The data type of the event variable.
//
// Valid values: `STRING | INTEGER | BOOLEAN | FLOAT`
func (o DetectorEventVariableOutput) DataType() DetectorEventVariableDataTypePtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *DetectorEventVariableDataType { return v.DataType }).(DetectorEventVariableDataTypePtrOutput)
}

// The default value of the event variable. This is required if you are providing the details of your variables instead of the ARN.
func (o DetectorEventVariableOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The description.
func (o DetectorEventVariableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
func (o DetectorEventVariableOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The time when the event variable was last updated.
func (o DetectorEventVariableOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The name of the event variable.
func (o DetectorEventVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this event variable.
func (o DetectorEventVariableOutput) Tags() DetectorTagArrayOutput {
	return o.ApplyT(func(v DetectorEventVariable) []DetectorTag { return v.Tags }).(DetectorTagArrayOutput)
}

// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types) .
func (o DetectorEventVariableOutput) VariableType() DetectorEventVariableVariableTypePtrOutput {
	return o.ApplyT(func(v DetectorEventVariable) *DetectorEventVariableVariableType { return v.VariableType }).(DetectorEventVariableVariableTypePtrOutput)
}

type DetectorEventVariableArrayOutput struct{ *pulumi.OutputState }

func (DetectorEventVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorEventVariable)(nil)).Elem()
}

func (o DetectorEventVariableArrayOutput) ToDetectorEventVariableArrayOutput() DetectorEventVariableArrayOutput {
	return o
}

func (o DetectorEventVariableArrayOutput) ToDetectorEventVariableArrayOutputWithContext(ctx context.Context) DetectorEventVariableArrayOutput {
	return o
}

func (o DetectorEventVariableArrayOutput) Index(i pulumi.IntInput) DetectorEventVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorEventVariable {
		return vs[0].([]DetectorEventVariable)[vs[1].(int)]
	}).(DetectorEventVariableOutput)
}

type DetectorLabel struct {
	// The label ARN.
	Arn *string `pulumi:"arn"`
	// The time when the label was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The description.
	Description *string `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The time when the label was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The label name.
	Name *string `pulumi:"name"`
	// Tags associated with this label.
	Tags []DetectorTag `pulumi:"tags"`
}

// DetectorLabelInput is an input type that accepts DetectorLabelArgs and DetectorLabelOutput values.
// You can construct a concrete instance of `DetectorLabelInput` via:
//
//	DetectorLabelArgs{...}
type DetectorLabelInput interface {
	pulumi.Input

	ToDetectorLabelOutput() DetectorLabelOutput
	ToDetectorLabelOutputWithContext(context.Context) DetectorLabelOutput
}

type DetectorLabelArgs struct {
	// The label ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the label was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The time when the label was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The label name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this label.
	Tags DetectorTagArrayInput `pulumi:"tags"`
}

func (DetectorLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorLabel)(nil)).Elem()
}

func (i DetectorLabelArgs) ToDetectorLabelOutput() DetectorLabelOutput {
	return i.ToDetectorLabelOutputWithContext(context.Background())
}

func (i DetectorLabelArgs) ToDetectorLabelOutputWithContext(ctx context.Context) DetectorLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorLabelOutput)
}

// DetectorLabelArrayInput is an input type that accepts DetectorLabelArray and DetectorLabelArrayOutput values.
// You can construct a concrete instance of `DetectorLabelArrayInput` via:
//
//	DetectorLabelArray{ DetectorLabelArgs{...} }
type DetectorLabelArrayInput interface {
	pulumi.Input

	ToDetectorLabelArrayOutput() DetectorLabelArrayOutput
	ToDetectorLabelArrayOutputWithContext(context.Context) DetectorLabelArrayOutput
}

type DetectorLabelArray []DetectorLabelInput

func (DetectorLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorLabel)(nil)).Elem()
}

func (i DetectorLabelArray) ToDetectorLabelArrayOutput() DetectorLabelArrayOutput {
	return i.ToDetectorLabelArrayOutputWithContext(context.Background())
}

func (i DetectorLabelArray) ToDetectorLabelArrayOutputWithContext(ctx context.Context) DetectorLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorLabelArrayOutput)
}

type DetectorLabelOutput struct{ *pulumi.OutputState }

func (DetectorLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorLabel)(nil)).Elem()
}

func (o DetectorLabelOutput) ToDetectorLabelOutput() DetectorLabelOutput {
	return o
}

func (o DetectorLabelOutput) ToDetectorLabelOutputWithContext(ctx context.Context) DetectorLabelOutput {
	return o
}

// The label ARN.
func (o DetectorLabelOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorLabel) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the label was created.
func (o DetectorLabelOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorLabel) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The description.
func (o DetectorLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorLabel) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
func (o DetectorLabelOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DetectorLabel) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The time when the label was last updated.
func (o DetectorLabelOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorLabel) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The label name.
func (o DetectorLabelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorLabel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this label.
func (o DetectorLabelOutput) Tags() DetectorTagArrayOutput {
	return o.ApplyT(func(v DetectorLabel) []DetectorTag { return v.Tags }).(DetectorTagArrayOutput)
}

type DetectorLabelArrayOutput struct{ *pulumi.OutputState }

func (DetectorLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorLabel)(nil)).Elem()
}

func (o DetectorLabelArrayOutput) ToDetectorLabelArrayOutput() DetectorLabelArrayOutput {
	return o
}

func (o DetectorLabelArrayOutput) ToDetectorLabelArrayOutputWithContext(ctx context.Context) DetectorLabelArrayOutput {
	return o
}

func (o DetectorLabelArrayOutput) Index(i pulumi.IntInput) DetectorLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorLabel {
		return vs[0].([]DetectorLabel)[vs[1].(int)]
	}).(DetectorLabelOutput)
}

// A model to associate with a detector.
type DetectorModel struct {
	// The ARN of the model.
	Arn *string `pulumi:"arn"`
}

// DetectorModelInput is an input type that accepts DetectorModelArgs and DetectorModelOutput values.
// You can construct a concrete instance of `DetectorModelInput` via:
//
//	DetectorModelArgs{...}
type DetectorModelInput interface {
	pulumi.Input

	ToDetectorModelOutput() DetectorModelOutput
	ToDetectorModelOutputWithContext(context.Context) DetectorModelOutput
}

// A model to associate with a detector.
type DetectorModelArgs struct {
	// The ARN of the model.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (DetectorModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorModel)(nil)).Elem()
}

func (i DetectorModelArgs) ToDetectorModelOutput() DetectorModelOutput {
	return i.ToDetectorModelOutputWithContext(context.Background())
}

func (i DetectorModelArgs) ToDetectorModelOutputWithContext(ctx context.Context) DetectorModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorModelOutput)
}

// DetectorModelArrayInput is an input type that accepts DetectorModelArray and DetectorModelArrayOutput values.
// You can construct a concrete instance of `DetectorModelArrayInput` via:
//
//	DetectorModelArray{ DetectorModelArgs{...} }
type DetectorModelArrayInput interface {
	pulumi.Input

	ToDetectorModelArrayOutput() DetectorModelArrayOutput
	ToDetectorModelArrayOutputWithContext(context.Context) DetectorModelArrayOutput
}

type DetectorModelArray []DetectorModelInput

func (DetectorModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorModel)(nil)).Elem()
}

func (i DetectorModelArray) ToDetectorModelArrayOutput() DetectorModelArrayOutput {
	return i.ToDetectorModelArrayOutputWithContext(context.Background())
}

func (i DetectorModelArray) ToDetectorModelArrayOutputWithContext(ctx context.Context) DetectorModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorModelArrayOutput)
}

// A model to associate with a detector.
type DetectorModelOutput struct{ *pulumi.OutputState }

func (DetectorModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorModel)(nil)).Elem()
}

func (o DetectorModelOutput) ToDetectorModelOutput() DetectorModelOutput {
	return o
}

func (o DetectorModelOutput) ToDetectorModelOutputWithContext(ctx context.Context) DetectorModelOutput {
	return o
}

// The ARN of the model.
func (o DetectorModelOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorModel) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type DetectorModelArrayOutput struct{ *pulumi.OutputState }

func (DetectorModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorModel)(nil)).Elem()
}

func (o DetectorModelArrayOutput) ToDetectorModelArrayOutput() DetectorModelArrayOutput {
	return o
}

func (o DetectorModelArrayOutput) ToDetectorModelArrayOutputWithContext(ctx context.Context) DetectorModelArrayOutput {
	return o
}

func (o DetectorModelArrayOutput) Index(i pulumi.IntInput) DetectorModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorModel {
		return vs[0].([]DetectorModel)[vs[1].(int)]
	}).(DetectorModelOutput)
}

type DetectorOutcome struct {
	// The outcome ARN.
	Arn *string `pulumi:"arn"`
	// The time when the outcome was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The description.
	Description *string `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The time when the outcome was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The outcome name.
	Name *string `pulumi:"name"`
	// Tags associated with this outcome.
	Tags []DetectorTag `pulumi:"tags"`
}

// DetectorOutcomeInput is an input type that accepts DetectorOutcomeArgs and DetectorOutcomeOutput values.
// You can construct a concrete instance of `DetectorOutcomeInput` via:
//
//	DetectorOutcomeArgs{...}
type DetectorOutcomeInput interface {
	pulumi.Input

	ToDetectorOutcomeOutput() DetectorOutcomeOutput
	ToDetectorOutcomeOutputWithContext(context.Context) DetectorOutcomeOutput
}

type DetectorOutcomeArgs struct {
	// The outcome ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the outcome was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The time when the outcome was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The outcome name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this outcome.
	Tags DetectorTagArrayInput `pulumi:"tags"`
}

func (DetectorOutcomeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorOutcome)(nil)).Elem()
}

func (i DetectorOutcomeArgs) ToDetectorOutcomeOutput() DetectorOutcomeOutput {
	return i.ToDetectorOutcomeOutputWithContext(context.Background())
}

func (i DetectorOutcomeArgs) ToDetectorOutcomeOutputWithContext(ctx context.Context) DetectorOutcomeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorOutcomeOutput)
}

// DetectorOutcomeArrayInput is an input type that accepts DetectorOutcomeArray and DetectorOutcomeArrayOutput values.
// You can construct a concrete instance of `DetectorOutcomeArrayInput` via:
//
//	DetectorOutcomeArray{ DetectorOutcomeArgs{...} }
type DetectorOutcomeArrayInput interface {
	pulumi.Input

	ToDetectorOutcomeArrayOutput() DetectorOutcomeArrayOutput
	ToDetectorOutcomeArrayOutputWithContext(context.Context) DetectorOutcomeArrayOutput
}

type DetectorOutcomeArray []DetectorOutcomeInput

func (DetectorOutcomeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorOutcome)(nil)).Elem()
}

func (i DetectorOutcomeArray) ToDetectorOutcomeArrayOutput() DetectorOutcomeArrayOutput {
	return i.ToDetectorOutcomeArrayOutputWithContext(context.Background())
}

func (i DetectorOutcomeArray) ToDetectorOutcomeArrayOutputWithContext(ctx context.Context) DetectorOutcomeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorOutcomeArrayOutput)
}

type DetectorOutcomeOutput struct{ *pulumi.OutputState }

func (DetectorOutcomeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorOutcome)(nil)).Elem()
}

func (o DetectorOutcomeOutput) ToDetectorOutcomeOutput() DetectorOutcomeOutput {
	return o
}

func (o DetectorOutcomeOutput) ToDetectorOutcomeOutputWithContext(ctx context.Context) DetectorOutcomeOutput {
	return o
}

// The outcome ARN.
func (o DetectorOutcomeOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorOutcome) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the outcome was created.
func (o DetectorOutcomeOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorOutcome) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The description.
func (o DetectorOutcomeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorOutcome) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
func (o DetectorOutcomeOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DetectorOutcome) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The time when the outcome was last updated.
func (o DetectorOutcomeOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorOutcome) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The outcome name.
func (o DetectorOutcomeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorOutcome) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this outcome.
func (o DetectorOutcomeOutput) Tags() DetectorTagArrayOutput {
	return o.ApplyT(func(v DetectorOutcome) []DetectorTag { return v.Tags }).(DetectorTagArrayOutput)
}

type DetectorOutcomeArrayOutput struct{ *pulumi.OutputState }

func (DetectorOutcomeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorOutcome)(nil)).Elem()
}

func (o DetectorOutcomeArrayOutput) ToDetectorOutcomeArrayOutput() DetectorOutcomeArrayOutput {
	return o
}

func (o DetectorOutcomeArrayOutput) ToDetectorOutcomeArrayOutputWithContext(ctx context.Context) DetectorOutcomeArrayOutput {
	return o
}

func (o DetectorOutcomeArrayOutput) Index(i pulumi.IntInput) DetectorOutcomeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorOutcome {
		return vs[0].([]DetectorOutcome)[vs[1].(int)]
	}).(DetectorOutcomeOutput)
}

type DetectorRule struct {
	// The rule ARN.
	Arn *string `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The description.
	Description *string `pulumi:"description"`
	// The detector for which the rule is associated.
	DetectorId *string `pulumi:"detectorId"`
	// The rule expression. A rule expression captures the business logic. For more information, see [Rule language reference](https://docs.aws.amazon.com/frauddetector/latest/ug/rule-language-reference.html) .
	Expression *string `pulumi:"expression"`
	// The rule language.
	//
	// Valid Value: DETECTORPL
	Language *DetectorRuleLanguage `pulumi:"language"`
	// The time when the event type was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The outcome.
	Outcomes []DetectorOutcome `pulumi:"outcomes"`
	// The rule ID.
	RuleId *string `pulumi:"ruleId"`
	// The rule version.
	RuleVersion *string `pulumi:"ruleVersion"`
	// Tags associated with this event type.
	Tags []DetectorTag `pulumi:"tags"`
}

// DetectorRuleInput is an input type that accepts DetectorRuleArgs and DetectorRuleOutput values.
// You can construct a concrete instance of `DetectorRuleInput` via:
//
//	DetectorRuleArgs{...}
type DetectorRuleInput interface {
	pulumi.Input

	ToDetectorRuleOutput() DetectorRuleOutput
	ToDetectorRuleOutputWithContext(context.Context) DetectorRuleOutput
}

type DetectorRuleArgs struct {
	// The rule ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The detector for which the rule is associated.
	DetectorId pulumi.StringPtrInput `pulumi:"detectorId"`
	// The rule expression. A rule expression captures the business logic. For more information, see [Rule language reference](https://docs.aws.amazon.com/frauddetector/latest/ug/rule-language-reference.html) .
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The rule language.
	//
	// Valid Value: DETECTORPL
	Language DetectorRuleLanguagePtrInput `pulumi:"language"`
	// The time when the event type was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The outcome.
	Outcomes DetectorOutcomeArrayInput `pulumi:"outcomes"`
	// The rule ID.
	RuleId pulumi.StringPtrInput `pulumi:"ruleId"`
	// The rule version.
	RuleVersion pulumi.StringPtrInput `pulumi:"ruleVersion"`
	// Tags associated with this event type.
	Tags DetectorTagArrayInput `pulumi:"tags"`
}

func (DetectorRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRule)(nil)).Elem()
}

func (i DetectorRuleArgs) ToDetectorRuleOutput() DetectorRuleOutput {
	return i.ToDetectorRuleOutputWithContext(context.Background())
}

func (i DetectorRuleArgs) ToDetectorRuleOutputWithContext(ctx context.Context) DetectorRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleOutput)
}

// DetectorRuleArrayInput is an input type that accepts DetectorRuleArray and DetectorRuleArrayOutput values.
// You can construct a concrete instance of `DetectorRuleArrayInput` via:
//
//	DetectorRuleArray{ DetectorRuleArgs{...} }
type DetectorRuleArrayInput interface {
	pulumi.Input

	ToDetectorRuleArrayOutput() DetectorRuleArrayOutput
	ToDetectorRuleArrayOutputWithContext(context.Context) DetectorRuleArrayOutput
}

type DetectorRuleArray []DetectorRuleInput

func (DetectorRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorRule)(nil)).Elem()
}

func (i DetectorRuleArray) ToDetectorRuleArrayOutput() DetectorRuleArrayOutput {
	return i.ToDetectorRuleArrayOutputWithContext(context.Background())
}

func (i DetectorRuleArray) ToDetectorRuleArrayOutputWithContext(ctx context.Context) DetectorRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorRuleArrayOutput)
}

type DetectorRuleOutput struct{ *pulumi.OutputState }

func (DetectorRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorRule)(nil)).Elem()
}

func (o DetectorRuleOutput) ToDetectorRuleOutput() DetectorRuleOutput {
	return o
}

func (o DetectorRuleOutput) ToDetectorRuleOutputWithContext(ctx context.Context) DetectorRuleOutput {
	return o
}

// The rule ARN.
func (o DetectorRuleOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the event type was created.
func (o DetectorRuleOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The description.
func (o DetectorRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The detector for which the rule is associated.
func (o DetectorRuleOutput) DetectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.DetectorId }).(pulumi.StringPtrOutput)
}

// The rule expression. A rule expression captures the business logic. For more information, see [Rule language reference](https://docs.aws.amazon.com/frauddetector/latest/ug/rule-language-reference.html) .
func (o DetectorRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The rule language.
//
// Valid Value: DETECTORPL
func (o DetectorRuleOutput) Language() DetectorRuleLanguagePtrOutput {
	return o.ApplyT(func(v DetectorRule) *DetectorRuleLanguage { return v.Language }).(DetectorRuleLanguagePtrOutput)
}

// The time when the event type was last updated.
func (o DetectorRuleOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The outcome.
func (o DetectorRuleOutput) Outcomes() DetectorOutcomeArrayOutput {
	return o.ApplyT(func(v DetectorRule) []DetectorOutcome { return v.Outcomes }).(DetectorOutcomeArrayOutput)
}

// The rule ID.
func (o DetectorRuleOutput) RuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.RuleId }).(pulumi.StringPtrOutput)
}

// The rule version.
func (o DetectorRuleOutput) RuleVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorRule) *string { return v.RuleVersion }).(pulumi.StringPtrOutput)
}

// Tags associated with this event type.
func (o DetectorRuleOutput) Tags() DetectorTagArrayOutput {
	return o.ApplyT(func(v DetectorRule) []DetectorTag { return v.Tags }).(DetectorTagArrayOutput)
}

type DetectorRuleArrayOutput struct{ *pulumi.OutputState }

func (DetectorRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorRule)(nil)).Elem()
}

func (o DetectorRuleArrayOutput) ToDetectorRuleArrayOutput() DetectorRuleArrayOutput {
	return o
}

func (o DetectorRuleArrayOutput) ToDetectorRuleArrayOutputWithContext(ctx context.Context) DetectorRuleArrayOutput {
	return o
}

func (o DetectorRuleArrayOutput) Index(i pulumi.IntInput) DetectorRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorRule {
		return vs[0].([]DetectorRule)[vs[1].(int)]
	}).(DetectorRuleOutput)
}

type DetectorTag struct {
	// A tag key.
	Key string `pulumi:"key"`
	// A value assigned to a tag key.
	Value string `pulumi:"value"`
}

// DetectorTagInput is an input type that accepts DetectorTagArgs and DetectorTagOutput values.
// You can construct a concrete instance of `DetectorTagInput` via:
//
//	DetectorTagArgs{...}
type DetectorTagInput interface {
	pulumi.Input

	ToDetectorTagOutput() DetectorTagOutput
	ToDetectorTagOutputWithContext(context.Context) DetectorTagOutput
}

type DetectorTagArgs struct {
	// A tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// A value assigned to a tag key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (DetectorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorTag)(nil)).Elem()
}

func (i DetectorTagArgs) ToDetectorTagOutput() DetectorTagOutput {
	return i.ToDetectorTagOutputWithContext(context.Background())
}

func (i DetectorTagArgs) ToDetectorTagOutputWithContext(ctx context.Context) DetectorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorTagOutput)
}

// DetectorTagArrayInput is an input type that accepts DetectorTagArray and DetectorTagArrayOutput values.
// You can construct a concrete instance of `DetectorTagArrayInput` via:
//
//	DetectorTagArray{ DetectorTagArgs{...} }
type DetectorTagArrayInput interface {
	pulumi.Input

	ToDetectorTagArrayOutput() DetectorTagArrayOutput
	ToDetectorTagArrayOutputWithContext(context.Context) DetectorTagArrayOutput
}

type DetectorTagArray []DetectorTagInput

func (DetectorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorTag)(nil)).Elem()
}

func (i DetectorTagArray) ToDetectorTagArrayOutput() DetectorTagArrayOutput {
	return i.ToDetectorTagArrayOutputWithContext(context.Background())
}

func (i DetectorTagArray) ToDetectorTagArrayOutputWithContext(ctx context.Context) DetectorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorTagArrayOutput)
}

type DetectorTagOutput struct{ *pulumi.OutputState }

func (DetectorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorTag)(nil)).Elem()
}

func (o DetectorTagOutput) ToDetectorTagOutput() DetectorTagOutput {
	return o
}

func (o DetectorTagOutput) ToDetectorTagOutputWithContext(ctx context.Context) DetectorTagOutput {
	return o
}

// A tag key.
func (o DetectorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorTag) string { return v.Key }).(pulumi.StringOutput)
}

// A value assigned to a tag key.
func (o DetectorTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorTag) string { return v.Value }).(pulumi.StringOutput)
}

type DetectorTagArrayOutput struct{ *pulumi.OutputState }

func (DetectorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DetectorTag)(nil)).Elem()
}

func (o DetectorTagArrayOutput) ToDetectorTagArrayOutput() DetectorTagArrayOutput {
	return o
}

func (o DetectorTagArrayOutput) ToDetectorTagArrayOutputWithContext(ctx context.Context) DetectorTagArrayOutput {
	return o
}

func (o DetectorTagArrayOutput) Index(i pulumi.IntInput) DetectorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DetectorTag {
		return vs[0].([]DetectorTag)[vs[1].(int)]
	}).(DetectorTagOutput)
}

type EntityTypeTag struct {
	// A tag key.
	Key string `pulumi:"key"`
	// A value assigned to a tag key.
	Value string `pulumi:"value"`
}

type EventTypeEntityType struct {
	// The entity type ARN.
	Arn *string `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The description.
	Description *string `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The time when the event type was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The entity type name.
	//
	// `^[0-9a-z_-]+$`
	Name *string `pulumi:"name"`
	// Tags associated with this event type.
	Tags []EventTypeTag `pulumi:"tags"`
}

// EventTypeEntityTypeInput is an input type that accepts EventTypeEntityTypeArgs and EventTypeEntityTypeOutput values.
// You can construct a concrete instance of `EventTypeEntityTypeInput` via:
//
//	EventTypeEntityTypeArgs{...}
type EventTypeEntityTypeInput interface {
	pulumi.Input

	ToEventTypeEntityTypeOutput() EventTypeEntityTypeOutput
	ToEventTypeEntityTypeOutputWithContext(context.Context) EventTypeEntityTypeOutput
}

type EventTypeEntityTypeArgs struct {
	// The entity type ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The time when the event type was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The entity type name.
	//
	// `^[0-9a-z_-]+$`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this event type.
	Tags EventTypeTagArrayInput `pulumi:"tags"`
}

func (EventTypeEntityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEntityType)(nil)).Elem()
}

func (i EventTypeEntityTypeArgs) ToEventTypeEntityTypeOutput() EventTypeEntityTypeOutput {
	return i.ToEventTypeEntityTypeOutputWithContext(context.Background())
}

func (i EventTypeEntityTypeArgs) ToEventTypeEntityTypeOutputWithContext(ctx context.Context) EventTypeEntityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeEntityTypeOutput)
}

// EventTypeEntityTypeArrayInput is an input type that accepts EventTypeEntityTypeArray and EventTypeEntityTypeArrayOutput values.
// You can construct a concrete instance of `EventTypeEntityTypeArrayInput` via:
//
//	EventTypeEntityTypeArray{ EventTypeEntityTypeArgs{...} }
type EventTypeEntityTypeArrayInput interface {
	pulumi.Input

	ToEventTypeEntityTypeArrayOutput() EventTypeEntityTypeArrayOutput
	ToEventTypeEntityTypeArrayOutputWithContext(context.Context) EventTypeEntityTypeArrayOutput
}

type EventTypeEntityTypeArray []EventTypeEntityTypeInput

func (EventTypeEntityTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeEntityType)(nil)).Elem()
}

func (i EventTypeEntityTypeArray) ToEventTypeEntityTypeArrayOutput() EventTypeEntityTypeArrayOutput {
	return i.ToEventTypeEntityTypeArrayOutputWithContext(context.Background())
}

func (i EventTypeEntityTypeArray) ToEventTypeEntityTypeArrayOutputWithContext(ctx context.Context) EventTypeEntityTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeEntityTypeArrayOutput)
}

type EventTypeEntityTypeOutput struct{ *pulumi.OutputState }

func (EventTypeEntityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEntityType)(nil)).Elem()
}

func (o EventTypeEntityTypeOutput) ToEventTypeEntityTypeOutput() EventTypeEntityTypeOutput {
	return o
}

func (o EventTypeEntityTypeOutput) ToEventTypeEntityTypeOutputWithContext(ctx context.Context) EventTypeEntityTypeOutput {
	return o
}

// The entity type ARN.
func (o EventTypeEntityTypeOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEntityType) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the event type was created.
func (o EventTypeEntityTypeOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEntityType) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The description.
func (o EventTypeEntityTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEntityType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
func (o EventTypeEntityTypeOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTypeEntityType) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The time when the event type was last updated.
func (o EventTypeEntityTypeOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEntityType) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The entity type name.
//
// `^[0-9a-z_-]+$`
func (o EventTypeEntityTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEntityType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this event type.
func (o EventTypeEntityTypeOutput) Tags() EventTypeTagArrayOutput {
	return o.ApplyT(func(v EventTypeEntityType) []EventTypeTag { return v.Tags }).(EventTypeTagArrayOutput)
}

type EventTypeEntityTypeArrayOutput struct{ *pulumi.OutputState }

func (EventTypeEntityTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeEntityType)(nil)).Elem()
}

func (o EventTypeEntityTypeArrayOutput) ToEventTypeEntityTypeArrayOutput() EventTypeEntityTypeArrayOutput {
	return o
}

func (o EventTypeEntityTypeArrayOutput) ToEventTypeEntityTypeArrayOutputWithContext(ctx context.Context) EventTypeEntityTypeArrayOutput {
	return o
}

func (o EventTypeEntityTypeArrayOutput) Index(i pulumi.IntInput) EventTypeEntityTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTypeEntityType {
		return vs[0].([]EventTypeEntityType)[vs[1].(int)]
	}).(EventTypeEntityTypeOutput)
}

type EventTypeEventVariable struct {
	// The event variable ARN.
	Arn *string `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The source of the event variable.
	//
	// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
	//
	// When defining a variable within a event type, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
	DataSource *EventTypeEventVariableDataSource `pulumi:"dataSource"`
	// The data type of the event variable. For more information, see [Data types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#data-types) .
	DataType *EventTypeEventVariableDataType `pulumi:"dataType"`
	// The default value of the event variable
	DefaultValue *string `pulumi:"defaultValue"`
	// The description.
	Description *string `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The time when the event type was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The name of the event variable.
	Name *string `pulumi:"name"`
	// Tags associated with this event type.
	Tags []EventTypeTag `pulumi:"tags"`
	// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#variable-types) .
	VariableType *EventTypeEventVariableVariableType `pulumi:"variableType"`
}

// EventTypeEventVariableInput is an input type that accepts EventTypeEventVariableArgs and EventTypeEventVariableOutput values.
// You can construct a concrete instance of `EventTypeEventVariableInput` via:
//
//	EventTypeEventVariableArgs{...}
type EventTypeEventVariableInput interface {
	pulumi.Input

	ToEventTypeEventVariableOutput() EventTypeEventVariableOutput
	ToEventTypeEventVariableOutputWithContext(context.Context) EventTypeEventVariableOutput
}

type EventTypeEventVariableArgs struct {
	// The event variable ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The source of the event variable.
	//
	// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
	//
	// When defining a variable within a event type, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
	DataSource EventTypeEventVariableDataSourcePtrInput `pulumi:"dataSource"`
	// The data type of the event variable. For more information, see [Data types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#data-types) .
	DataType EventTypeEventVariableDataTypePtrInput `pulumi:"dataType"`
	// The default value of the event variable
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The time when the event type was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The name of the event variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this event type.
	Tags EventTypeTagArrayInput `pulumi:"tags"`
	// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#variable-types) .
	VariableType EventTypeEventVariableVariableTypePtrInput `pulumi:"variableType"`
}

func (EventTypeEventVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariable)(nil)).Elem()
}

func (i EventTypeEventVariableArgs) ToEventTypeEventVariableOutput() EventTypeEventVariableOutput {
	return i.ToEventTypeEventVariableOutputWithContext(context.Background())
}

func (i EventTypeEventVariableArgs) ToEventTypeEventVariableOutputWithContext(ctx context.Context) EventTypeEventVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeEventVariableOutput)
}

// EventTypeEventVariableArrayInput is an input type that accepts EventTypeEventVariableArray and EventTypeEventVariableArrayOutput values.
// You can construct a concrete instance of `EventTypeEventVariableArrayInput` via:
//
//	EventTypeEventVariableArray{ EventTypeEventVariableArgs{...} }
type EventTypeEventVariableArrayInput interface {
	pulumi.Input

	ToEventTypeEventVariableArrayOutput() EventTypeEventVariableArrayOutput
	ToEventTypeEventVariableArrayOutputWithContext(context.Context) EventTypeEventVariableArrayOutput
}

type EventTypeEventVariableArray []EventTypeEventVariableInput

func (EventTypeEventVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeEventVariable)(nil)).Elem()
}

func (i EventTypeEventVariableArray) ToEventTypeEventVariableArrayOutput() EventTypeEventVariableArrayOutput {
	return i.ToEventTypeEventVariableArrayOutputWithContext(context.Background())
}

func (i EventTypeEventVariableArray) ToEventTypeEventVariableArrayOutputWithContext(ctx context.Context) EventTypeEventVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeEventVariableArrayOutput)
}

type EventTypeEventVariableOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeEventVariable)(nil)).Elem()
}

func (o EventTypeEventVariableOutput) ToEventTypeEventVariableOutput() EventTypeEventVariableOutput {
	return o
}

func (o EventTypeEventVariableOutput) ToEventTypeEventVariableOutputWithContext(ctx context.Context) EventTypeEventVariableOutput {
	return o
}

// The event variable ARN.
func (o EventTypeEventVariableOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the event type was created.
func (o EventTypeEventVariableOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The source of the event variable.
//
// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
//
// When defining a variable within a event type, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
func (o EventTypeEventVariableOutput) DataSource() EventTypeEventVariableDataSourcePtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *EventTypeEventVariableDataSource { return v.DataSource }).(EventTypeEventVariableDataSourcePtrOutput)
}

// The data type of the event variable. For more information, see [Data types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#data-types) .
func (o EventTypeEventVariableOutput) DataType() EventTypeEventVariableDataTypePtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *EventTypeEventVariableDataType { return v.DataType }).(EventTypeEventVariableDataTypePtrOutput)
}

// The default value of the event variable
func (o EventTypeEventVariableOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The description.
func (o EventTypeEventVariableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
func (o EventTypeEventVariableOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The time when the event type was last updated.
func (o EventTypeEventVariableOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The name of the event variable.
func (o EventTypeEventVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this event type.
func (o EventTypeEventVariableOutput) Tags() EventTypeTagArrayOutput {
	return o.ApplyT(func(v EventTypeEventVariable) []EventTypeTag { return v.Tags }).(EventTypeTagArrayOutput)
}

// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#variable-types) .
func (o EventTypeEventVariableOutput) VariableType() EventTypeEventVariableVariableTypePtrOutput {
	return o.ApplyT(func(v EventTypeEventVariable) *EventTypeEventVariableVariableType { return v.VariableType }).(EventTypeEventVariableVariableTypePtrOutput)
}

type EventTypeEventVariableArrayOutput struct{ *pulumi.OutputState }

func (EventTypeEventVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeEventVariable)(nil)).Elem()
}

func (o EventTypeEventVariableArrayOutput) ToEventTypeEventVariableArrayOutput() EventTypeEventVariableArrayOutput {
	return o
}

func (o EventTypeEventVariableArrayOutput) ToEventTypeEventVariableArrayOutputWithContext(ctx context.Context) EventTypeEventVariableArrayOutput {
	return o
}

func (o EventTypeEventVariableArrayOutput) Index(i pulumi.IntInput) EventTypeEventVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTypeEventVariable {
		return vs[0].([]EventTypeEventVariable)[vs[1].(int)]
	}).(EventTypeEventVariableOutput)
}

type EventTypeLabel struct {
	// The label ARN.
	Arn *string `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime *string `pulumi:"createdTime"`
	// The description.
	Description *string `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your EventType but not execute any changes to the variables.
	Inline *bool `pulumi:"inline"`
	// The time when the event type was last updated.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The label name.
	Name *string `pulumi:"name"`
	// Tags associated with this event type.
	Tags []EventTypeTag `pulumi:"tags"`
}

// EventTypeLabelInput is an input type that accepts EventTypeLabelArgs and EventTypeLabelOutput values.
// You can construct a concrete instance of `EventTypeLabelInput` via:
//
//	EventTypeLabelArgs{...}
type EventTypeLabelInput interface {
	pulumi.Input

	ToEventTypeLabelOutput() EventTypeLabelOutput
	ToEventTypeLabelOutputWithContext(context.Context) EventTypeLabelOutput
}

type EventTypeLabelArgs struct {
	// The label ARN.
	Arn pulumi.StringPtrInput `pulumi:"arn"`
	// The time when the event type was created.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
	//
	// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your EventType but not execute any changes to the variables.
	Inline pulumi.BoolPtrInput `pulumi:"inline"`
	// The time when the event type was last updated.
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// The label name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with this event type.
	Tags EventTypeTagArrayInput `pulumi:"tags"`
}

func (EventTypeLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeLabel)(nil)).Elem()
}

func (i EventTypeLabelArgs) ToEventTypeLabelOutput() EventTypeLabelOutput {
	return i.ToEventTypeLabelOutputWithContext(context.Background())
}

func (i EventTypeLabelArgs) ToEventTypeLabelOutputWithContext(ctx context.Context) EventTypeLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeLabelOutput)
}

// EventTypeLabelArrayInput is an input type that accepts EventTypeLabelArray and EventTypeLabelArrayOutput values.
// You can construct a concrete instance of `EventTypeLabelArrayInput` via:
//
//	EventTypeLabelArray{ EventTypeLabelArgs{...} }
type EventTypeLabelArrayInput interface {
	pulumi.Input

	ToEventTypeLabelArrayOutput() EventTypeLabelArrayOutput
	ToEventTypeLabelArrayOutputWithContext(context.Context) EventTypeLabelArrayOutput
}

type EventTypeLabelArray []EventTypeLabelInput

func (EventTypeLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeLabel)(nil)).Elem()
}

func (i EventTypeLabelArray) ToEventTypeLabelArrayOutput() EventTypeLabelArrayOutput {
	return i.ToEventTypeLabelArrayOutputWithContext(context.Background())
}

func (i EventTypeLabelArray) ToEventTypeLabelArrayOutputWithContext(ctx context.Context) EventTypeLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeLabelArrayOutput)
}

type EventTypeLabelOutput struct{ *pulumi.OutputState }

func (EventTypeLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeLabel)(nil)).Elem()
}

func (o EventTypeLabelOutput) ToEventTypeLabelOutput() EventTypeLabelOutput {
	return o
}

func (o EventTypeLabelOutput) ToEventTypeLabelOutputWithContext(ctx context.Context) EventTypeLabelOutput {
	return o
}

// The label ARN.
func (o EventTypeLabelOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeLabel) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The time when the event type was created.
func (o EventTypeLabelOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeLabel) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// The description.
func (o EventTypeLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeLabel) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
//
// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your EventType but not execute any changes to the variables.
func (o EventTypeLabelOutput) Inline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTypeLabel) *bool { return v.Inline }).(pulumi.BoolPtrOutput)
}

// The time when the event type was last updated.
func (o EventTypeLabelOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeLabel) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// The label name.
func (o EventTypeLabelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTypeLabel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with this event type.
func (o EventTypeLabelOutput) Tags() EventTypeTagArrayOutput {
	return o.ApplyT(func(v EventTypeLabel) []EventTypeTag { return v.Tags }).(EventTypeTagArrayOutput)
}

type EventTypeLabelArrayOutput struct{ *pulumi.OutputState }

func (EventTypeLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeLabel)(nil)).Elem()
}

func (o EventTypeLabelArrayOutput) ToEventTypeLabelArrayOutput() EventTypeLabelArrayOutput {
	return o
}

func (o EventTypeLabelArrayOutput) ToEventTypeLabelArrayOutputWithContext(ctx context.Context) EventTypeLabelArrayOutput {
	return o
}

func (o EventTypeLabelArrayOutput) Index(i pulumi.IntInput) EventTypeLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTypeLabel {
		return vs[0].([]EventTypeLabel)[vs[1].(int)]
	}).(EventTypeLabelOutput)
}

type EventTypeTag struct {
	// A tag key.
	Key string `pulumi:"key"`
	// A value assigned to a tag key.
	Value string `pulumi:"value"`
}

// EventTypeTagInput is an input type that accepts EventTypeTagArgs and EventTypeTagOutput values.
// You can construct a concrete instance of `EventTypeTagInput` via:
//
//	EventTypeTagArgs{...}
type EventTypeTagInput interface {
	pulumi.Input

	ToEventTypeTagOutput() EventTypeTagOutput
	ToEventTypeTagOutputWithContext(context.Context) EventTypeTagOutput
}

type EventTypeTagArgs struct {
	// A tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// A value assigned to a tag key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventTypeTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeTag)(nil)).Elem()
}

func (i EventTypeTagArgs) ToEventTypeTagOutput() EventTypeTagOutput {
	return i.ToEventTypeTagOutputWithContext(context.Background())
}

func (i EventTypeTagArgs) ToEventTypeTagOutputWithContext(ctx context.Context) EventTypeTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeTagOutput)
}

// EventTypeTagArrayInput is an input type that accepts EventTypeTagArray and EventTypeTagArrayOutput values.
// You can construct a concrete instance of `EventTypeTagArrayInput` via:
//
//	EventTypeTagArray{ EventTypeTagArgs{...} }
type EventTypeTagArrayInput interface {
	pulumi.Input

	ToEventTypeTagArrayOutput() EventTypeTagArrayOutput
	ToEventTypeTagArrayOutputWithContext(context.Context) EventTypeTagArrayOutput
}

type EventTypeTagArray []EventTypeTagInput

func (EventTypeTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeTag)(nil)).Elem()
}

func (i EventTypeTagArray) ToEventTypeTagArrayOutput() EventTypeTagArrayOutput {
	return i.ToEventTypeTagArrayOutputWithContext(context.Background())
}

func (i EventTypeTagArray) ToEventTypeTagArrayOutputWithContext(ctx context.Context) EventTypeTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTypeTagArrayOutput)
}

type EventTypeTagOutput struct{ *pulumi.OutputState }

func (EventTypeTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTypeTag)(nil)).Elem()
}

func (o EventTypeTagOutput) ToEventTypeTagOutput() EventTypeTagOutput {
	return o
}

func (o EventTypeTagOutput) ToEventTypeTagOutputWithContext(ctx context.Context) EventTypeTagOutput {
	return o
}

// A tag key.
func (o EventTypeTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventTypeTag) string { return v.Key }).(pulumi.StringOutput)
}

// A value assigned to a tag key.
func (o EventTypeTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventTypeTag) string { return v.Value }).(pulumi.StringOutput)
}

type EventTypeTagArrayOutput struct{ *pulumi.OutputState }

func (EventTypeTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTypeTag)(nil)).Elem()
}

func (o EventTypeTagArrayOutput) ToEventTypeTagArrayOutput() EventTypeTagArrayOutput {
	return o
}

func (o EventTypeTagArrayOutput) ToEventTypeTagArrayOutputWithContext(ctx context.Context) EventTypeTagArrayOutput {
	return o
}

func (o EventTypeTagArrayOutput) Index(i pulumi.IntInput) EventTypeTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTypeTag {
		return vs[0].([]EventTypeTag)[vs[1].(int)]
	}).(EventTypeTagOutput)
}

type LabelTag struct {
	// A tag key.
	Key string `pulumi:"key"`
	// A value assigned to a tag key.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type ListTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type OutcomeTag struct {
	// A tag key.
	Key string `pulumi:"key"`
	// A value assigned to a tag key.
	Value string `pulumi:"value"`
}

type VariableTag struct {
	// A tag key.
	Key string `pulumi:"key"`
	// A value assigned to a tag key.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorEntityTypeInput)(nil)).Elem(), DetectorEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorEntityTypeArrayInput)(nil)).Elem(), DetectorEntityTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorEventTypeInput)(nil)).Elem(), DetectorEventTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorEventVariableInput)(nil)).Elem(), DetectorEventVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorEventVariableArrayInput)(nil)).Elem(), DetectorEventVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorLabelInput)(nil)).Elem(), DetectorLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorLabelArrayInput)(nil)).Elem(), DetectorLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorModelInput)(nil)).Elem(), DetectorModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorModelArrayInput)(nil)).Elem(), DetectorModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorOutcomeInput)(nil)).Elem(), DetectorOutcomeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorOutcomeArrayInput)(nil)).Elem(), DetectorOutcomeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorRuleInput)(nil)).Elem(), DetectorRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorRuleArrayInput)(nil)).Elem(), DetectorRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorTagInput)(nil)).Elem(), DetectorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DetectorTagArrayInput)(nil)).Elem(), DetectorTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeEntityTypeInput)(nil)).Elem(), EventTypeEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeEntityTypeArrayInput)(nil)).Elem(), EventTypeEntityTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeEventVariableInput)(nil)).Elem(), EventTypeEventVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeEventVariableArrayInput)(nil)).Elem(), EventTypeEventVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeLabelInput)(nil)).Elem(), EventTypeLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeLabelArrayInput)(nil)).Elem(), EventTypeLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeTagInput)(nil)).Elem(), EventTypeTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTypeTagArrayInput)(nil)).Elem(), EventTypeTagArray{})
	pulumi.RegisterOutputType(DetectorEntityTypeOutput{})
	pulumi.RegisterOutputType(DetectorEntityTypeArrayOutput{})
	pulumi.RegisterOutputType(DetectorEventTypeOutput{})
	pulumi.RegisterOutputType(DetectorEventTypePtrOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableOutput{})
	pulumi.RegisterOutputType(DetectorEventVariableArrayOutput{})
	pulumi.RegisterOutputType(DetectorLabelOutput{})
	pulumi.RegisterOutputType(DetectorLabelArrayOutput{})
	pulumi.RegisterOutputType(DetectorModelOutput{})
	pulumi.RegisterOutputType(DetectorModelArrayOutput{})
	pulumi.RegisterOutputType(DetectorOutcomeOutput{})
	pulumi.RegisterOutputType(DetectorOutcomeArrayOutput{})
	pulumi.RegisterOutputType(DetectorRuleOutput{})
	pulumi.RegisterOutputType(DetectorRuleArrayOutput{})
	pulumi.RegisterOutputType(DetectorTagOutput{})
	pulumi.RegisterOutputType(DetectorTagArrayOutput{})
	pulumi.RegisterOutputType(EventTypeEntityTypeOutput{})
	pulumi.RegisterOutputType(EventTypeEntityTypeArrayOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableOutput{})
	pulumi.RegisterOutputType(EventTypeEventVariableArrayOutput{})
	pulumi.RegisterOutputType(EventTypeLabelOutput{})
	pulumi.RegisterOutputType(EventTypeLabelArrayOutput{})
	pulumi.RegisterOutputType(EventTypeTagOutput{})
	pulumi.RegisterOutputType(EventTypeTagArrayOutput{})
}
