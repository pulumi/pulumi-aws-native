// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rolesanywhere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RolesAnywhere::CRL Resource Type
type Crl struct {
	pulumi.CustomResourceState

	CrlData        pulumi.StringOutput    `pulumi:"crlData"`
	CrlId          pulumi.StringOutput    `pulumi:"crlId"`
	Enabled        pulumi.BoolPtrOutput   `pulumi:"enabled"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	Tags           CrlTagArrayOutput      `pulumi:"tags"`
	TrustAnchorArn pulumi.StringPtrOutput `pulumi:"trustAnchorArn"`
}

// NewCrl registers a new resource with the given unique name, arguments, and options.
func NewCrl(ctx *pulumi.Context,
	name string, args *CrlArgs, opts ...pulumi.ResourceOption) (*Crl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CrlData == nil {
		return nil, errors.New("invalid value for required argument 'CrlData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Crl
	err := ctx.RegisterResource("aws-native:rolesanywhere:Crl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCrl gets an existing Crl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCrl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CrlState, opts ...pulumi.ResourceOption) (*Crl, error) {
	var resource Crl
	err := ctx.ReadResource("aws-native:rolesanywhere:Crl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Crl resources.
type crlState struct {
}

type CrlState struct {
}

func (CrlState) ElementType() reflect.Type {
	return reflect.TypeOf((*crlState)(nil)).Elem()
}

type crlArgs struct {
	CrlData        string   `pulumi:"crlData"`
	Enabled        *bool    `pulumi:"enabled"`
	Name           *string  `pulumi:"name"`
	Tags           []CrlTag `pulumi:"tags"`
	TrustAnchorArn *string  `pulumi:"trustAnchorArn"`
}

// The set of arguments for constructing a Crl resource.
type CrlArgs struct {
	CrlData        pulumi.StringInput
	Enabled        pulumi.BoolPtrInput
	Name           pulumi.StringPtrInput
	Tags           CrlTagArrayInput
	TrustAnchorArn pulumi.StringPtrInput
}

func (CrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*crlArgs)(nil)).Elem()
}

type CrlInput interface {
	pulumi.Input

	ToCrlOutput() CrlOutput
	ToCrlOutputWithContext(ctx context.Context) CrlOutput
}

func (*Crl) ElementType() reflect.Type {
	return reflect.TypeOf((**Crl)(nil)).Elem()
}

func (i *Crl) ToCrlOutput() CrlOutput {
	return i.ToCrlOutputWithContext(context.Background())
}

func (i *Crl) ToCrlOutputWithContext(ctx context.Context) CrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrlOutput)
}

type CrlOutput struct{ *pulumi.OutputState }

func (CrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Crl)(nil)).Elem()
}

func (o CrlOutput) ToCrlOutput() CrlOutput {
	return o
}

func (o CrlOutput) ToCrlOutputWithContext(ctx context.Context) CrlOutput {
	return o
}

func (o CrlOutput) CrlData() pulumi.StringOutput {
	return o.ApplyT(func(v *Crl) pulumi.StringOutput { return v.CrlData }).(pulumi.StringOutput)
}

func (o CrlOutput) CrlId() pulumi.StringOutput {
	return o.ApplyT(func(v *Crl) pulumi.StringOutput { return v.CrlId }).(pulumi.StringOutput)
}

func (o CrlOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Crl) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o CrlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Crl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CrlOutput) Tags() CrlTagArrayOutput {
	return o.ApplyT(func(v *Crl) CrlTagArrayOutput { return v.Tags }).(CrlTagArrayOutput)
}

func (o CrlOutput) TrustAnchorArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Crl) pulumi.StringPtrOutput { return v.TrustAnchorArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CrlInput)(nil)).Elem(), &Crl{})
	pulumi.RegisterOutputType(CrlOutput{})
}
