// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rolesanywhere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RolesAnywhere::TrustAnchor Resource Type.
type TrustAnchor struct {
	pulumi.CustomResourceState

	// Indicates whether the trust anchor is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The name of the trust anchor.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of notification settings to be associated to the trust anchor.
	NotificationSettings TrustAnchorNotificationSettingArrayOutput `pulumi:"notificationSettings"`
	// The trust anchor type and its related certificate data.
	Source TrustAnchorSourceOutput `pulumi:"source"`
	// The tags to attach to the trust anchor.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ARN of the trust anchor.
	TrustAnchorArn pulumi.StringOutput `pulumi:"trustAnchorArn"`
	// The unique identifier of the trust anchor.
	TrustAnchorId pulumi.StringOutput `pulumi:"trustAnchorId"`
}

// NewTrustAnchor registers a new resource with the given unique name, arguments, and options.
func NewTrustAnchor(ctx *pulumi.Context,
	name string, args *TrustAnchorArgs, opts ...pulumi.ResourceOption) (*TrustAnchor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrustAnchor
	err := ctx.RegisterResource("aws-native:rolesanywhere:TrustAnchor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustAnchor gets an existing TrustAnchor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustAnchor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustAnchorState, opts ...pulumi.ResourceOption) (*TrustAnchor, error) {
	var resource TrustAnchor
	err := ctx.ReadResource("aws-native:rolesanywhere:TrustAnchor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustAnchor resources.
type trustAnchorState struct {
}

type TrustAnchorState struct {
}

func (TrustAnchorState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustAnchorState)(nil)).Elem()
}

type trustAnchorArgs struct {
	// Indicates whether the trust anchor is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The name of the trust anchor.
	Name *string `pulumi:"name"`
	// A list of notification settings to be associated to the trust anchor.
	NotificationSettings []TrustAnchorNotificationSetting `pulumi:"notificationSettings"`
	// The trust anchor type and its related certificate data.
	Source TrustAnchorSource `pulumi:"source"`
	// The tags to attach to the trust anchor.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a TrustAnchor resource.
type TrustAnchorArgs struct {
	// Indicates whether the trust anchor is enabled.
	Enabled pulumi.BoolPtrInput
	// The name of the trust anchor.
	Name pulumi.StringPtrInput
	// A list of notification settings to be associated to the trust anchor.
	NotificationSettings TrustAnchorNotificationSettingArrayInput
	// The trust anchor type and its related certificate data.
	Source TrustAnchorSourceInput
	// The tags to attach to the trust anchor.
	Tags aws.TagArrayInput
}

func (TrustAnchorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustAnchorArgs)(nil)).Elem()
}

type TrustAnchorInput interface {
	pulumi.Input

	ToTrustAnchorOutput() TrustAnchorOutput
	ToTrustAnchorOutputWithContext(ctx context.Context) TrustAnchorOutput
}

func (*TrustAnchor) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustAnchor)(nil)).Elem()
}

func (i *TrustAnchor) ToTrustAnchorOutput() TrustAnchorOutput {
	return i.ToTrustAnchorOutputWithContext(context.Background())
}

func (i *TrustAnchor) ToTrustAnchorOutputWithContext(ctx context.Context) TrustAnchorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorOutput)
}

type TrustAnchorOutput struct{ *pulumi.OutputState }

func (TrustAnchorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustAnchor)(nil)).Elem()
}

func (o TrustAnchorOutput) ToTrustAnchorOutput() TrustAnchorOutput {
	return o
}

func (o TrustAnchorOutput) ToTrustAnchorOutputWithContext(ctx context.Context) TrustAnchorOutput {
	return o
}

// Indicates whether the trust anchor is enabled.
func (o TrustAnchorOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrustAnchor) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the trust anchor.
func (o TrustAnchorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustAnchor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of notification settings to be associated to the trust anchor.
func (o TrustAnchorOutput) NotificationSettings() TrustAnchorNotificationSettingArrayOutput {
	return o.ApplyT(func(v *TrustAnchor) TrustAnchorNotificationSettingArrayOutput { return v.NotificationSettings }).(TrustAnchorNotificationSettingArrayOutput)
}

// The trust anchor type and its related certificate data.
func (o TrustAnchorOutput) Source() TrustAnchorSourceOutput {
	return o.ApplyT(func(v *TrustAnchor) TrustAnchorSourceOutput { return v.Source }).(TrustAnchorSourceOutput)
}

// The tags to attach to the trust anchor.
func (o TrustAnchorOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TrustAnchor) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ARN of the trust anchor.
func (o TrustAnchorOutput) TrustAnchorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustAnchor) pulumi.StringOutput { return v.TrustAnchorArn }).(pulumi.StringOutput)
}

// The unique identifier of the trust anchor.
func (o TrustAnchorOutput) TrustAnchorId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustAnchor) pulumi.StringOutput { return v.TrustAnchorId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorInput)(nil)).Elem(), &TrustAnchor{})
	pulumi.RegisterOutputType(TrustAnchorOutput{})
}
