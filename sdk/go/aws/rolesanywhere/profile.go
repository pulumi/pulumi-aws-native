// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rolesanywhere

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::RolesAnywhere::Profile Resource Type
type Profile struct {
	pulumi.CustomResourceState

	DurationSeconds           pulumi.Float64PtrOutput  `pulumi:"durationSeconds"`
	Enabled                   pulumi.BoolPtrOutput     `pulumi:"enabled"`
	ManagedPolicyArns         pulumi.StringArrayOutput `pulumi:"managedPolicyArns"`
	Name                      pulumi.StringOutput      `pulumi:"name"`
	ProfileArn                pulumi.StringOutput      `pulumi:"profileArn"`
	ProfileId                 pulumi.StringOutput      `pulumi:"profileId"`
	RequireInstanceProperties pulumi.BoolPtrOutput     `pulumi:"requireInstanceProperties"`
	RoleArns                  pulumi.StringArrayOutput `pulumi:"roleArns"`
	SessionPolicy             pulumi.StringPtrOutput   `pulumi:"sessionPolicy"`
	Tags                      ProfileTagArrayOutput    `pulumi:"tags"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArns == nil {
		return nil, errors.New("invalid value for required argument 'RoleArns'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("aws-native:rolesanywhere:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("aws-native:rolesanywhere:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
}

type ProfileState struct {
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	DurationSeconds           *float64     `pulumi:"durationSeconds"`
	Enabled                   *bool        `pulumi:"enabled"`
	ManagedPolicyArns         []string     `pulumi:"managedPolicyArns"`
	Name                      *string      `pulumi:"name"`
	RequireInstanceProperties *bool        `pulumi:"requireInstanceProperties"`
	RoleArns                  []string     `pulumi:"roleArns"`
	SessionPolicy             *string      `pulumi:"sessionPolicy"`
	Tags                      []ProfileTag `pulumi:"tags"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	DurationSeconds           pulumi.Float64PtrInput
	Enabled                   pulumi.BoolPtrInput
	ManagedPolicyArns         pulumi.StringArrayInput
	Name                      pulumi.StringPtrInput
	RequireInstanceProperties pulumi.BoolPtrInput
	RoleArns                  pulumi.StringArrayInput
	SessionPolicy             pulumi.StringPtrInput
	Tags                      ProfileTagArrayInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

func (i *Profile) ToOutput(ctx context.Context) pulumix.Output[*Profile] {
	return pulumix.Output[*Profile]{
		OutputState: i.ToProfileOutputWithContext(ctx).OutputState,
	}
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

func (o ProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*Profile] {
	return pulumix.Output[*Profile]{
		OutputState: o.OutputState,
	}
}

func (o ProfileOutput) DurationSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.Float64PtrOutput { return v.DurationSeconds }).(pulumi.Float64PtrOutput)
}

func (o ProfileOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ProfileOutput) ManagedPolicyArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.ManagedPolicyArns }).(pulumi.StringArrayOutput)
}

func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProfileOutput) ProfileArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ProfileArn }).(pulumi.StringOutput)
}

func (o ProfileOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

func (o ProfileOutput) RequireInstanceProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.RequireInstanceProperties }).(pulumi.BoolPtrOutput)
}

func (o ProfileOutput) RoleArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.RoleArns }).(pulumi.StringArrayOutput)
}

func (o ProfileOutput) SessionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.SessionPolicy }).(pulumi.StringPtrOutput)
}

func (o ProfileOutput) Tags() ProfileTagArrayOutput {
	return o.ApplyT(func(v *Profile) ProfileTagArrayOutput { return v.Tags }).(ProfileTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterOutputType(ProfileOutput{})
}
