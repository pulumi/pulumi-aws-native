// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rolesanywhere

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CRLTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// CRLTagInput is an input type that accepts CRLTagArgs and CRLTagOutput values.
// You can construct a concrete instance of `CRLTagInput` via:
//
//	CRLTagArgs{...}
type CRLTagInput interface {
	pulumi.Input

	ToCRLTagOutput() CRLTagOutput
	ToCRLTagOutputWithContext(context.Context) CRLTagOutput
}

type CRLTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (CRLTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CRLTag)(nil)).Elem()
}

func (i CRLTagArgs) ToCRLTagOutput() CRLTagOutput {
	return i.ToCRLTagOutputWithContext(context.Background())
}

func (i CRLTagArgs) ToCRLTagOutputWithContext(ctx context.Context) CRLTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CRLTagOutput)
}

// CRLTagArrayInput is an input type that accepts CRLTagArray and CRLTagArrayOutput values.
// You can construct a concrete instance of `CRLTagArrayInput` via:
//
//	CRLTagArray{ CRLTagArgs{...} }
type CRLTagArrayInput interface {
	pulumi.Input

	ToCRLTagArrayOutput() CRLTagArrayOutput
	ToCRLTagArrayOutputWithContext(context.Context) CRLTagArrayOutput
}

type CRLTagArray []CRLTagInput

func (CRLTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CRLTag)(nil)).Elem()
}

func (i CRLTagArray) ToCRLTagArrayOutput() CRLTagArrayOutput {
	return i.ToCRLTagArrayOutputWithContext(context.Background())
}

func (i CRLTagArray) ToCRLTagArrayOutputWithContext(ctx context.Context) CRLTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CRLTagArrayOutput)
}

type CRLTagOutput struct{ *pulumi.OutputState }

func (CRLTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CRLTag)(nil)).Elem()
}

func (o CRLTagOutput) ToCRLTagOutput() CRLTagOutput {
	return o
}

func (o CRLTagOutput) ToCRLTagOutputWithContext(ctx context.Context) CRLTagOutput {
	return o
}

func (o CRLTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CRLTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o CRLTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CRLTag) string { return v.Value }).(pulumi.StringOutput)
}

type CRLTagArrayOutput struct{ *pulumi.OutputState }

func (CRLTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CRLTag)(nil)).Elem()
}

func (o CRLTagArrayOutput) ToCRLTagArrayOutput() CRLTagArrayOutput {
	return o
}

func (o CRLTagArrayOutput) ToCRLTagArrayOutputWithContext(ctx context.Context) CRLTagArrayOutput {
	return o
}

func (o CRLTagArrayOutput) Index(i pulumi.IntInput) CRLTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CRLTag {
		return vs[0].([]CRLTag)[vs[1].(int)]
	}).(CRLTagOutput)
}

type ProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ProfileTagInput is an input type that accepts ProfileTagArgs and ProfileTagOutput values.
// You can construct a concrete instance of `ProfileTagInput` via:
//
//	ProfileTagArgs{...}
type ProfileTagInput interface {
	pulumi.Input

	ToProfileTagOutput() ProfileTagOutput
	ToProfileTagOutputWithContext(context.Context) ProfileTagOutput
}

type ProfileTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProfileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTag)(nil)).Elem()
}

func (i ProfileTagArgs) ToProfileTagOutput() ProfileTagOutput {
	return i.ToProfileTagOutputWithContext(context.Background())
}

func (i ProfileTagArgs) ToProfileTagOutputWithContext(ctx context.Context) ProfileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTagOutput)
}

// ProfileTagArrayInput is an input type that accepts ProfileTagArray and ProfileTagArrayOutput values.
// You can construct a concrete instance of `ProfileTagArrayInput` via:
//
//	ProfileTagArray{ ProfileTagArgs{...} }
type ProfileTagArrayInput interface {
	pulumi.Input

	ToProfileTagArrayOutput() ProfileTagArrayOutput
	ToProfileTagArrayOutputWithContext(context.Context) ProfileTagArrayOutput
}

type ProfileTagArray []ProfileTagInput

func (ProfileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileTag)(nil)).Elem()
}

func (i ProfileTagArray) ToProfileTagArrayOutput() ProfileTagArrayOutput {
	return i.ToProfileTagArrayOutputWithContext(context.Background())
}

func (i ProfileTagArray) ToProfileTagArrayOutputWithContext(ctx context.Context) ProfileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTagArrayOutput)
}

type ProfileTagOutput struct{ *pulumi.OutputState }

func (ProfileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTag)(nil)).Elem()
}

func (o ProfileTagOutput) ToProfileTagOutput() ProfileTagOutput {
	return o
}

func (o ProfileTagOutput) ToProfileTagOutputWithContext(ctx context.Context) ProfileTagOutput {
	return o
}

func (o ProfileTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProfileTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTag) string { return v.Value }).(pulumi.StringOutput)
}

type ProfileTagArrayOutput struct{ *pulumi.OutputState }

func (ProfileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileTag)(nil)).Elem()
}

func (o ProfileTagArrayOutput) ToProfileTagArrayOutput() ProfileTagArrayOutput {
	return o
}

func (o ProfileTagArrayOutput) ToProfileTagArrayOutputWithContext(ctx context.Context) ProfileTagArrayOutput {
	return o
}

func (o ProfileTagArrayOutput) Index(i pulumi.IntInput) ProfileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileTag {
		return vs[0].([]ProfileTag)[vs[1].(int)]
	}).(ProfileTagOutput)
}

type TrustAnchorSource struct {
	SourceData *TrustAnchorSourceData `pulumi:"sourceData"`
	SourceType *TrustAnchorType       `pulumi:"sourceType"`
}

// TrustAnchorSourceInput is an input type that accepts TrustAnchorSourceArgs and TrustAnchorSourceOutput values.
// You can construct a concrete instance of `TrustAnchorSourceInput` via:
//
//	TrustAnchorSourceArgs{...}
type TrustAnchorSourceInput interface {
	pulumi.Input

	ToTrustAnchorSourceOutput() TrustAnchorSourceOutput
	ToTrustAnchorSourceOutputWithContext(context.Context) TrustAnchorSourceOutput
}

type TrustAnchorSourceArgs struct {
	SourceData TrustAnchorSourceDataPtrInput `pulumi:"sourceData"`
	SourceType TrustAnchorTypePtrInput       `pulumi:"sourceType"`
}

func (TrustAnchorSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchorSource)(nil)).Elem()
}

func (i TrustAnchorSourceArgs) ToTrustAnchorSourceOutput() TrustAnchorSourceOutput {
	return i.ToTrustAnchorSourceOutputWithContext(context.Background())
}

func (i TrustAnchorSourceArgs) ToTrustAnchorSourceOutputWithContext(ctx context.Context) TrustAnchorSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorSourceOutput)
}

type TrustAnchorSourceOutput struct{ *pulumi.OutputState }

func (TrustAnchorSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchorSource)(nil)).Elem()
}

func (o TrustAnchorSourceOutput) ToTrustAnchorSourceOutput() TrustAnchorSourceOutput {
	return o
}

func (o TrustAnchorSourceOutput) ToTrustAnchorSourceOutputWithContext(ctx context.Context) TrustAnchorSourceOutput {
	return o
}

func (o TrustAnchorSourceOutput) SourceData() TrustAnchorSourceDataPtrOutput {
	return o.ApplyT(func(v TrustAnchorSource) *TrustAnchorSourceData { return v.SourceData }).(TrustAnchorSourceDataPtrOutput)
}

func (o TrustAnchorSourceOutput) SourceType() TrustAnchorTypePtrOutput {
	return o.ApplyT(func(v TrustAnchorSource) *TrustAnchorType { return v.SourceType }).(TrustAnchorTypePtrOutput)
}

type TrustAnchorSourcePtrOutput struct{ *pulumi.OutputState }

func (TrustAnchorSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustAnchorSource)(nil)).Elem()
}

func (o TrustAnchorSourcePtrOutput) ToTrustAnchorSourcePtrOutput() TrustAnchorSourcePtrOutput {
	return o
}

func (o TrustAnchorSourcePtrOutput) ToTrustAnchorSourcePtrOutputWithContext(ctx context.Context) TrustAnchorSourcePtrOutput {
	return o
}

func (o TrustAnchorSourcePtrOutput) Elem() TrustAnchorSourceOutput {
	return o.ApplyT(func(v *TrustAnchorSource) TrustAnchorSource {
		if v != nil {
			return *v
		}
		var ret TrustAnchorSource
		return ret
	}).(TrustAnchorSourceOutput)
}

func (o TrustAnchorSourcePtrOutput) SourceData() TrustAnchorSourceDataPtrOutput {
	return o.ApplyT(func(v *TrustAnchorSource) *TrustAnchorSourceData {
		if v == nil {
			return nil
		}
		return v.SourceData
	}).(TrustAnchorSourceDataPtrOutput)
}

func (o TrustAnchorSourcePtrOutput) SourceType() TrustAnchorTypePtrOutput {
	return o.ApplyT(func(v *TrustAnchorSource) *TrustAnchorType {
		if v == nil {
			return nil
		}
		return v.SourceType
	}).(TrustAnchorTypePtrOutput)
}

type TrustAnchorSourceData struct {
}

// TrustAnchorSourceDataInput is an input type that accepts TrustAnchorSourceDataArgs and TrustAnchorSourceDataOutput values.
// You can construct a concrete instance of `TrustAnchorSourceDataInput` via:
//
//	TrustAnchorSourceDataArgs{...}
type TrustAnchorSourceDataInput interface {
	pulumi.Input

	ToTrustAnchorSourceDataOutput() TrustAnchorSourceDataOutput
	ToTrustAnchorSourceDataOutputWithContext(context.Context) TrustAnchorSourceDataOutput
}

type TrustAnchorSourceDataArgs struct {
}

func (TrustAnchorSourceDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchorSourceData)(nil)).Elem()
}

func (i TrustAnchorSourceDataArgs) ToTrustAnchorSourceDataOutput() TrustAnchorSourceDataOutput {
	return i.ToTrustAnchorSourceDataOutputWithContext(context.Background())
}

func (i TrustAnchorSourceDataArgs) ToTrustAnchorSourceDataOutputWithContext(ctx context.Context) TrustAnchorSourceDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorSourceDataOutput)
}

func (i TrustAnchorSourceDataArgs) ToTrustAnchorSourceDataPtrOutput() TrustAnchorSourceDataPtrOutput {
	return i.ToTrustAnchorSourceDataPtrOutputWithContext(context.Background())
}

func (i TrustAnchorSourceDataArgs) ToTrustAnchorSourceDataPtrOutputWithContext(ctx context.Context) TrustAnchorSourceDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorSourceDataOutput).ToTrustAnchorSourceDataPtrOutputWithContext(ctx)
}

// TrustAnchorSourceDataPtrInput is an input type that accepts TrustAnchorSourceDataArgs, TrustAnchorSourceDataPtr and TrustAnchorSourceDataPtrOutput values.
// You can construct a concrete instance of `TrustAnchorSourceDataPtrInput` via:
//
//	        TrustAnchorSourceDataArgs{...}
//
//	or:
//
//	        nil
type TrustAnchorSourceDataPtrInput interface {
	pulumi.Input

	ToTrustAnchorSourceDataPtrOutput() TrustAnchorSourceDataPtrOutput
	ToTrustAnchorSourceDataPtrOutputWithContext(context.Context) TrustAnchorSourceDataPtrOutput
}

type trustAnchorSourceDataPtrType TrustAnchorSourceDataArgs

func TrustAnchorSourceDataPtr(v *TrustAnchorSourceDataArgs) TrustAnchorSourceDataPtrInput {
	return (*trustAnchorSourceDataPtrType)(v)
}

func (*trustAnchorSourceDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustAnchorSourceData)(nil)).Elem()
}

func (i *trustAnchorSourceDataPtrType) ToTrustAnchorSourceDataPtrOutput() TrustAnchorSourceDataPtrOutput {
	return i.ToTrustAnchorSourceDataPtrOutputWithContext(context.Background())
}

func (i *trustAnchorSourceDataPtrType) ToTrustAnchorSourceDataPtrOutputWithContext(ctx context.Context) TrustAnchorSourceDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorSourceDataPtrOutput)
}

type TrustAnchorSourceDataOutput struct{ *pulumi.OutputState }

func (TrustAnchorSourceDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchorSourceData)(nil)).Elem()
}

func (o TrustAnchorSourceDataOutput) ToTrustAnchorSourceDataOutput() TrustAnchorSourceDataOutput {
	return o
}

func (o TrustAnchorSourceDataOutput) ToTrustAnchorSourceDataOutputWithContext(ctx context.Context) TrustAnchorSourceDataOutput {
	return o
}

func (o TrustAnchorSourceDataOutput) ToTrustAnchorSourceDataPtrOutput() TrustAnchorSourceDataPtrOutput {
	return o.ToTrustAnchorSourceDataPtrOutputWithContext(context.Background())
}

func (o TrustAnchorSourceDataOutput) ToTrustAnchorSourceDataPtrOutputWithContext(ctx context.Context) TrustAnchorSourceDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrustAnchorSourceData) *TrustAnchorSourceData {
		return &v
	}).(TrustAnchorSourceDataPtrOutput)
}

type TrustAnchorSourceDataPtrOutput struct{ *pulumi.OutputState }

func (TrustAnchorSourceDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustAnchorSourceData)(nil)).Elem()
}

func (o TrustAnchorSourceDataPtrOutput) ToTrustAnchorSourceDataPtrOutput() TrustAnchorSourceDataPtrOutput {
	return o
}

func (o TrustAnchorSourceDataPtrOutput) ToTrustAnchorSourceDataPtrOutputWithContext(ctx context.Context) TrustAnchorSourceDataPtrOutput {
	return o
}

func (o TrustAnchorSourceDataPtrOutput) Elem() TrustAnchorSourceDataOutput {
	return o.ApplyT(func(v *TrustAnchorSourceData) TrustAnchorSourceData {
		if v != nil {
			return *v
		}
		var ret TrustAnchorSourceData
		return ret
	}).(TrustAnchorSourceDataOutput)
}

type TrustAnchorTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// TrustAnchorTagInput is an input type that accepts TrustAnchorTagArgs and TrustAnchorTagOutput values.
// You can construct a concrete instance of `TrustAnchorTagInput` via:
//
//	TrustAnchorTagArgs{...}
type TrustAnchorTagInput interface {
	pulumi.Input

	ToTrustAnchorTagOutput() TrustAnchorTagOutput
	ToTrustAnchorTagOutputWithContext(context.Context) TrustAnchorTagOutput
}

type TrustAnchorTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (TrustAnchorTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchorTag)(nil)).Elem()
}

func (i TrustAnchorTagArgs) ToTrustAnchorTagOutput() TrustAnchorTagOutput {
	return i.ToTrustAnchorTagOutputWithContext(context.Background())
}

func (i TrustAnchorTagArgs) ToTrustAnchorTagOutputWithContext(ctx context.Context) TrustAnchorTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorTagOutput)
}

// TrustAnchorTagArrayInput is an input type that accepts TrustAnchorTagArray and TrustAnchorTagArrayOutput values.
// You can construct a concrete instance of `TrustAnchorTagArrayInput` via:
//
//	TrustAnchorTagArray{ TrustAnchorTagArgs{...} }
type TrustAnchorTagArrayInput interface {
	pulumi.Input

	ToTrustAnchorTagArrayOutput() TrustAnchorTagArrayOutput
	ToTrustAnchorTagArrayOutputWithContext(context.Context) TrustAnchorTagArrayOutput
}

type TrustAnchorTagArray []TrustAnchorTagInput

func (TrustAnchorTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustAnchorTag)(nil)).Elem()
}

func (i TrustAnchorTagArray) ToTrustAnchorTagArrayOutput() TrustAnchorTagArrayOutput {
	return i.ToTrustAnchorTagArrayOutputWithContext(context.Background())
}

func (i TrustAnchorTagArray) ToTrustAnchorTagArrayOutputWithContext(ctx context.Context) TrustAnchorTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorTagArrayOutput)
}

type TrustAnchorTagOutput struct{ *pulumi.OutputState }

func (TrustAnchorTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchorTag)(nil)).Elem()
}

func (o TrustAnchorTagOutput) ToTrustAnchorTagOutput() TrustAnchorTagOutput {
	return o
}

func (o TrustAnchorTagOutput) ToTrustAnchorTagOutputWithContext(ctx context.Context) TrustAnchorTagOutput {
	return o
}

func (o TrustAnchorTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TrustAnchorTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o TrustAnchorTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TrustAnchorTag) string { return v.Value }).(pulumi.StringOutput)
}

type TrustAnchorTagArrayOutput struct{ *pulumi.OutputState }

func (TrustAnchorTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustAnchorTag)(nil)).Elem()
}

func (o TrustAnchorTagArrayOutput) ToTrustAnchorTagArrayOutput() TrustAnchorTagArrayOutput {
	return o
}

func (o TrustAnchorTagArrayOutput) ToTrustAnchorTagArrayOutputWithContext(ctx context.Context) TrustAnchorTagArrayOutput {
	return o
}

func (o TrustAnchorTagArrayOutput) Index(i pulumi.IntInput) TrustAnchorTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustAnchorTag {
		return vs[0].([]TrustAnchorTag)[vs[1].(int)]
	}).(TrustAnchorTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CRLTagInput)(nil)).Elem(), CRLTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CRLTagArrayInput)(nil)).Elem(), CRLTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTagInput)(nil)).Elem(), ProfileTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTagArrayInput)(nil)).Elem(), ProfileTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorSourceInput)(nil)).Elem(), TrustAnchorSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorSourceDataInput)(nil)).Elem(), TrustAnchorSourceDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorSourceDataPtrInput)(nil)).Elem(), TrustAnchorSourceDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorTagInput)(nil)).Elem(), TrustAnchorTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorTagArrayInput)(nil)).Elem(), TrustAnchorTagArray{})
	pulumi.RegisterOutputType(CRLTagOutput{})
	pulumi.RegisterOutputType(CRLTagArrayOutput{})
	pulumi.RegisterOutputType(ProfileTagOutput{})
	pulumi.RegisterOutputType(ProfileTagArrayOutput{})
	pulumi.RegisterOutputType(TrustAnchorSourceOutput{})
	pulumi.RegisterOutputType(TrustAnchorSourcePtrOutput{})
	pulumi.RegisterOutputType(TrustAnchorSourceDataOutput{})
	pulumi.RegisterOutputType(TrustAnchorSourceDataPtrOutput{})
	pulumi.RegisterOutputType(TrustAnchorTagOutput{})
	pulumi.RegisterOutputType(TrustAnchorTagArrayOutput{})
}
